{"home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.compare_similarities": [[10, 22], ["S1.astype", "S2.astype", "S1.astype.multiply"], "function", ["None"], ["def", "compare_similarities", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "S1_bool", "=", "S1", ".", "astype", "(", "bool", ",", "copy", "=", "True", ")", "\n", "S2_bool", "=", "S2", ".", "astype", "(", "bool", ",", "copy", "=", "True", ")", "\n", "intersection", "=", "S1_bool", ".", "multiply", "(", "S2_bool", ")", "\n", "\n", "S1_nnz", "=", "S1", ".", "nnz", "\n", "S2_nnz", "=", "S2", ".", "nnz", "\n", "intersection_nnz", "=", "intersection", ".", "nnz", "\n", "\n", "return", "intersection_nnz", ",", "0", "if", "S1_nnz", "==", "0", "else", "intersection_nnz", "/", "S1_nnz", ",", "0", "if", "S2_nnz", "==", "0", "else", "intersection_nnz", "/", "S2_nnz", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.similarity_statistics": [[24, 60], ["scipy.sparse.issparse", "numpy.count_nonzero", "scipy.sparse.issparse", "numpy.count_nonzero", "scipy.sparse.issparse", "numpy.count_nonzero", "scipy.sparse.issparse", "numpy.count_nonzero"], "function", ["None"], ["", "def", "similarity_statistics", "(", "S_CF", ",", "S_CBF", ",", "intersection", "=", "None", ",", "union", "=", "None", ",", "statistics", "=", "None", ")", ":", "\n", "    ", "assert", "S_CF", ".", "shape", "==", "S_CBF", ".", "shape", ",", "\"The shapes of the two similarity matrices do not correspond.\"", "\n", "\n", "if", "statistics", "is", "None", ":", "\n", "        ", "statistics", "=", "{", "}", "\n", "\n", "", "n_items", "=", "S_CF", ".", "shape", "[", "0", "]", "\n", "area", "=", "n_items", "**", "2", "\n", "\n", "statistics", "[", "'n_items'", "]", "=", "n_items", "\n", "\n", "cf_nnz", "=", "S_CF", ".", "nnz", "if", "issparse", "(", "S_CF", ")", "else", "np", ".", "count_nonzero", "(", "S_CF", ")", "\n", "statistics", "[", "'CF_nnz'", "]", "=", "cf_nnz", "\n", "statistics", "[", "'CF_density'", "]", "=", "cf_nnz", "/", "area", "\n", "\n", "cbf_nnz", "=", "S_CBF", ".", "nnz", "if", "issparse", "(", "S_CBF", ")", "else", "np", ".", "count_nonzero", "(", "S_CBF", ")", "\n", "statistics", "[", "'CBF_nnz'", "]", "=", "cbf_nnz", "\n", "statistics", "[", "'CBF_density'", "]", "=", "cbf_nnz", "/", "area", "\n", "\n", "intersection_nnz", "=", "0", "\n", "if", "intersection", "is", "not", "None", ":", "\n", "        ", "intersection_nnz", "=", "intersection", ".", "nnz", "if", "issparse", "(", "intersection", ")", "else", "np", ".", "count_nonzero", "(", "intersection", ")", "\n", "statistics", "[", "'intersection_nnz'", "]", "=", "intersection_nnz", "\n", "statistics", "[", "'intersection_CF_perc'", "]", "=", "intersection_nnz", "/", "cf_nnz", "\n", "statistics", "[", "'intersection_CBF_perc'", "]", "=", "intersection_nnz", "/", "cbf_nnz", "\n", "\n", "", "if", "union", "is", "not", "None", ":", "\n", "        ", "union_nnz", "=", "union", ".", "nnz", "if", "issparse", "(", "union", ")", "else", "np", ".", "count_nonzero", "(", "union", ")", "\n", "statistics", "[", "'union_nnz'", "]", "=", "union_nnz", "\n", "statistics", "[", "'union_CF_perc'", "]", "=", "cf_nnz", "/", "union_nnz", "\n", "statistics", "[", "'union_CBF_perc'", "]", "=", "cbf_nnz", "/", "union_nnz", "\n", "\n", "if", "intersection", "is", "not", "None", ":", "\n", "            ", "statistics", "[", "'intersection_over_union'", "]", "=", "intersection_nnz", "/", "union_nnz", "\n", "\n", "", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.warm_similarity_statistics": [[62, 101], ["CF_warm_items.sum", "CBF_items_with_interactions.sum"], "function", ["None"], ["", "def", "warm_similarity_statistics", "(", "S_CF", ",", "S_CBF", ",", "CF_warm_items", "=", "None", ",", "CBF_items_with_interactions", "=", "None", ",", "statistics", "=", "None", ")", ":", "\n", "    ", "assert", "S_CF", ".", "shape", "==", "S_CBF", ".", "shape", ",", "\"The shapes of the two similarity matrices do not correspond.\"", "\n", "\n", "if", "statistics", "is", "None", ":", "\n", "        ", "statistics", "=", "{", "}", "\n", "\n", "", "n_items", "=", "S_CF", ".", "shape", "[", "0", "]", "\n", "\n", "# Warm CF items density", "\n", "if", "CF_warm_items", "is", "not", "None", ":", "\n", "        ", "warm_S_CF", "=", "S_CF", "[", "CF_warm_items", "]", "\n", "warm_S_CF", "=", "warm_S_CF", "[", ":", ",", "CF_warm_items", "]", "\n", "\n", "assert", "warm_S_CF", ".", "shape", "[", "0", "]", "==", "warm_S_CF", ".", "shape", "[", "1", "]", ",", "\"Warm CF similarity matrix is incorrect.\"", "\n", "\n", "n_warm_CF_items", "=", "CF_warm_items", ".", "sum", "(", ")", "\n", "statistics", "[", "'CF_n_warm_items'", "]", "=", "n_warm_CF_items", "\n", "statistics", "[", "'CF_warm_items_perc'", "]", "=", "n_warm_CF_items", "/", "n_items", "\n", "\n", "warm_nnz", "=", "warm_S_CF", ".", "nnz", "\n", "warm_area", "=", "warm_S_CF", ".", "shape", "[", "0", "]", "**", "2", "\n", "statistics", "[", "'CF_warm_density'", "]", "=", "0", "if", "warm_area", "==", "0", "else", "warm_nnz", "/", "warm_area", "\n", "\n", "# Warm CBF items density", "\n", "", "if", "CBF_items_with_interactions", "is", "not", "None", ":", "\n", "        ", "warm_S_CBF", "=", "S_CBF", "[", "CBF_items_with_interactions", "]", "\n", "warm_S_CBF", "=", "warm_S_CBF", "[", ":", ",", "CBF_items_with_interactions", "]", "\n", "\n", "assert", "warm_S_CBF", ".", "shape", "[", "0", "]", "==", "warm_S_CBF", ".", "shape", "[", "1", "]", ",", "\"Warm CBF similarity matrix is incorrect.\"", "\n", "\n", "n_warm_CBF_items", "=", "CBF_items_with_interactions", ".", "sum", "(", ")", "\n", "statistics", "[", "'CBF_n_items_with_features'", "]", "=", "n_warm_CBF_items", "\n", "statistics", "[", "'CBF_items_with_features_perc'", "]", "=", "n_warm_CBF_items", "/", "n_items", "\n", "\n", "warm_nnz", "=", "warm_S_CBF", ".", "nnz", "\n", "warm_area", "=", "warm_S_CBF", ".", "shape", "[", "0", "]", "**", "2", "\n", "statistics", "[", "'CBF_items_with_features_density'", "]", "=", "warm_nnz", "/", "warm_area", "\n", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.results_similarity_statistics": [[103, 161], ["statistics.compare_similarities", "statistics.compare_similarities", "statistics.compare_similarities", "items_with_features.sum"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.compare_similarities", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.compare_similarities", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.compare_similarities"], ["", "def", "results_similarity_statistics", "(", "CQFS_S_CBF", ",", "S_CF", ",", "S_CBF", ",", "intersection", ",", "CQFS_intersection", ",", "CQFS_union", ",", "statistics", "=", "None", ",", "\n", "items_with_features", "=", "None", ")", ":", "\n", "    ", "assert", "CQFS_S_CBF", ".", "shape", "==", "S_CF", ".", "shape", ",", "\"The similarity matrices shapes do not correspond.\"", "\n", "assert", "CQFS_S_CBF", ".", "shape", "==", "S_CBF", ".", "shape", ",", "\"The similarity matrices shapes do not correspond.\"", "\n", "\n", "if", "statistics", "is", "None", ":", "\n", "        ", "statistics", "=", "{", "}", "\n", "\n", "", "n_items", ",", "_", "=", "CQFS_S_CBF", ".", "shape", "\n", "area", "=", "n_items", "**", "2", "\n", "\n", "CQFS_cbf_nnz", "=", "CQFS_S_CBF", ".", "nnz", "\n", "statistics", "[", "'CQFS_CBF_nnz'", "]", "=", "CQFS_cbf_nnz", "\n", "statistics", "[", "'CQFS_CBF_density'", "]", "=", "CQFS_cbf_nnz", "/", "area", "\n", "\n", "if", "items_with_features", "is", "not", "None", ":", "\n", "        ", "CQFS_S_CBF_with_features", "=", "CQFS_S_CBF", "[", "items_with_features", "]", "\n", "CQFS_S_CBF_with_features", "=", "CQFS_S_CBF_with_features", "[", ":", ",", "items_with_features", "]", "\n", "\n", "assert", "CQFS_S_CBF_with_features", ".", "shape", "[", "0", "]", "==", "CQFS_S_CBF_with_features", ".", "shape", "[", "\n", "1", "]", ",", "\"Warm CBF similarity matrix is incorrect.\"", "\n", "\n", "CQFS_CBF_n_items_with_features", "=", "items_with_features", ".", "sum", "(", ")", "\n", "statistics", "[", "'CQFS_CBF_n_items_with_features'", "]", "=", "CQFS_CBF_n_items_with_features", "\n", "statistics", "[", "'CQFS_CBF_items_with_features_perc'", "]", "=", "CQFS_CBF_n_items_with_features", "/", "n_items", "\n", "\n", "CQFS_with_features_nnz", "=", "CQFS_S_CBF_with_features", ".", "nnz", "\n", "CQFS_with_features_area", "=", "CQFS_S_CBF_with_features", ".", "shape", "[", "0", "]", "**", "2", "\n", "statistics", "[", "'CQFS_CBF_items_with_features_density'", "]", "=", "0", "if", "CQFS_with_features_area", "==", "0", "else", "CQFS_with_features_nnz", "/", "CQFS_with_features_area", "\n", "\n", "", "cf_nnz", "=", "S_CF", ".", "nnz", "\n", "cbf_nnz", "=", "S_CBF", ".", "nnz", "\n", "CQFS_intersection_nnz", "=", "CQFS_intersection", ".", "nnz", "\n", "CQFS_union_nnz", "=", "CQFS_union", ".", "nnz", "\n", "\n", "statistics", "[", "'CQFS_intersection_nnz'", "]", "=", "CQFS_intersection_nnz", "\n", "statistics", "[", "'CQFS_intersection_CF_perc'", "]", "=", "CQFS_intersection_nnz", "/", "cf_nnz", "\n", "statistics", "[", "'CQFS_intersection_CBF_perc'", "]", "=", "CQFS_intersection_nnz", "/", "cbf_nnz", "\n", "\n", "statistics", "[", "'CQFS_against_intersection_nnz'", "]", ",", "statistics", "[", "'CQFS_against_intersection_CQFS_perc'", "]", ",", "statistics", "[", "'CQFS_against_intersection_intersection_perc'", "]", "=", "compare_similarities", "(", "CQFS_S_CBF", ",", "intersection", ")", "\n", "\n", "statistics", "[", "'CQFS_against_CF_nnz'", "]", ",", "statistics", "[", "'CQFS_against_CF_CQFS_perc'", "]", ",", "statistics", "[", "'CQFS_against_CF_CF_perc'", "]", "=", "compare_similarities", "(", "CQFS_S_CBF", ",", "S_CF", ")", "\n", "\n", "statistics", "[", "'CQFS_union_nnz'", "]", "=", "CQFS_union_nnz", "\n", "statistics", "[", "'CQFS_union_CF_perc'", "]", "=", "cf_nnz", "/", "CQFS_union_nnz", "\n", "statistics", "[", "'CQFS_union_CBF_perc'", "]", "=", "CQFS_cbf_nnz", "/", "CQFS_union_nnz", "\n", "statistics", "[", "'CQFS_intersection_over_union'", "]", "=", "CQFS_intersection_nnz", "/", "CQFS_union_nnz", "\n", "\n", "statistics", "[", "'CQFS_against_CBF_nnz'", "]", ",", "statistics", "[", "'CQFS_against_CBF_CQFS_perc'", "]", ",", "statistics", "[", "'CQFS_against_CBF_CBF_perc'", "]", "=", "compare_similarities", "(", "CQFS_S_CBF", ",", "S_CBF", ")", "\n", "\n", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.BQM_statistics": [[163, 228], ["len", "len", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "scipy.stats.skew", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "scipy.stats.skew", "linear.min", "linear.max", "linear.ptp", "linear.mean", "linear.std", "linear.var", "numpy.median", "quadratic.min", "quadratic.max", "quadratic.ptp", "quadratic.mean", "quadratic.std", "quadratic.var", "numpy.median", "print", "matplotlib.clf", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "seaborn.kdeplot", "matplotlib.savefig", "matplotlib.clf", "seaborn.kdeplot", "matplotlib.savefig", "matplotlib.clf"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "BQM_statistics", "(", "linear", ",", "quadratic", ",", "shape", ",", "prefix", "=", "\"\"", ",", "statistics", "=", "None", ",", "distplot_folder_path", "=", "None", ")", ":", "\n", "    ", "if", "statistics", "is", "None", ":", "\n", "        ", "statistics", "=", "{", "}", "\n", "\n", "", "n_linear", "=", "len", "(", "linear", ")", "\n", "n_quadratic", "=", "len", "(", "quadratic", ")", "\n", "area", "=", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", "\n", "statistics", "[", "f'{prefix}sparsity'", "]", "=", "(", "n_linear", "+", "n_quadratic", ")", "/", "area", "\n", "\n", "statistics", "[", "f'{prefix}linear_n'", "]", "=", "n_linear", "\n", "n_pos_linear", "=", "(", "linear", ">", "0", ")", ".", "sum", "(", ")", "\n", "statistics", "[", "f'{prefix}linear_n_pos'", "]", "=", "n_pos_linear", "\n", "statistics", "[", "f'{prefix}linear_pos_perc'", "]", "=", "n_pos_linear", "/", "n_linear", "\n", "n_neg_linear", "=", "(", "linear", "<", "0", ")", ".", "sum", "(", ")", "\n", "statistics", "[", "f'{prefix}linear_n_neg'", "]", "=", "n_neg_linear", "\n", "statistics", "[", "f'{prefix}linear_neg_perc'", "]", "=", "n_neg_linear", "/", "n_linear", "\n", "\n", "statistics", "[", "f'{prefix}linear_min'", "]", "=", "np", ".", "float64", "(", "linear", ".", "min", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}linear_max'", "]", "=", "np", ".", "float64", "(", "linear", ".", "max", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}linear_range'", "]", "=", "np", ".", "float64", "(", "linear", ".", "ptp", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}linear_mean'", "]", "=", "np", ".", "float64", "(", "linear", ".", "mean", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}linear_std'", "]", "=", "np", ".", "float64", "(", "linear", ".", "std", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}linear_var'", "]", "=", "np", ".", "float64", "(", "linear", ".", "var", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}linear_median'", "]", "=", "np", ".", "float64", "(", "np", ".", "median", "(", "linear", ")", ")", "\n", "statistics", "[", "f'{prefix}linear_skewness'", "]", "=", "skew", "(", "linear", ")", "\n", "\n", "quadratic_area", "=", "area", "-", "n_linear", "\n", "statistics", "[", "f'{prefix}quadratic_n'", "]", "=", "n_quadratic", "\n", "n_pos_quadratic", "=", "(", "quadratic", ">", "0", ")", ".", "sum", "(", ")", "\n", "statistics", "[", "f'{prefix}quadratic_n_pos'", "]", "=", "n_pos_quadratic", "\n", "statistics", "[", "f'{prefix}quadratic_pos_perc'", "]", "=", "n_pos_quadratic", "/", "n_quadratic", "\n", "statistics", "[", "f'{prefix}quadratic_pos_perc_on_tot'", "]", "=", "n_pos_quadratic", "/", "quadratic_area", "\n", "n_neg_quadratic", "=", "(", "quadratic", "<", "0", ")", ".", "sum", "(", ")", "\n", "statistics", "[", "f'{prefix}quadratic_n_neg'", "]", "=", "n_neg_quadratic", "\n", "statistics", "[", "f'{prefix}quadratic_neg_perc'", "]", "=", "n_neg_quadratic", "/", "n_quadratic", "\n", "statistics", "[", "f'{prefix}quadratic_neg_perc_on_tot'", "]", "=", "n_neg_quadratic", "/", "quadratic_area", "\n", "\n", "statistics", "[", "f'{prefix}quadratic_min'", "]", "=", "np", ".", "float64", "(", "quadratic", ".", "min", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}quadratic_max'", "]", "=", "np", ".", "float64", "(", "quadratic", ".", "max", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}quadratic_range'", "]", "=", "np", ".", "float64", "(", "quadratic", ".", "ptp", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}quadratic_mean'", "]", "=", "np", ".", "float64", "(", "quadratic", ".", "mean", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}quadratic_std'", "]", "=", "np", ".", "float64", "(", "quadratic", ".", "std", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}quadratic_var'", "]", "=", "np", ".", "float64", "(", "quadratic", ".", "var", "(", ")", ")", "\n", "statistics", "[", "f'{prefix}quadratic_median'", "]", "=", "np", ".", "float64", "(", "np", ".", "median", "(", "quadratic", ")", ")", "\n", "statistics", "[", "f'{prefix}quadratic_skewness'", "]", "=", "skew", "(", "quadratic", ")", "\n", "\n", "if", "distplot_folder_path", "!=", "None", ":", "\n", "        ", "print", "(", "\"Saving distribution plot...\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "dataIO", "=", "DataIO", "(", "distplot_folder_path", ")", "\n", "np_dict", "=", "{", "'linear'", ":", "linear", ",", "'quadratic'", ":", "quadratic", "}", "\n", "dataIO", ".", "save_data", "(", "'distribution'", ",", "np_dict", ")", "\n", "\n", "sns", ".", "kdeplot", "(", "linear", ",", "shade", "=", "True", ")", "\n", "linear_path", "=", "f\"{distplot_folder_path}/linear\"", "\n", "plt", ".", "savefig", "(", "linear_path", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "sns", ".", "kdeplot", "(", "quadratic", ",", "shade", "=", "True", ")", "\n", "quadratic_path", "=", "f\"{distplot_folder_path}/quadratic\"", "\n", "plt", ".", "savefig", "(", "quadratic_path", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.similarity_RMSE": [[230, 245], ["S_RMSE.power.power", "numpy.sqrt", "S_RMSE.power.sum", "S_CF.astype", "S_CBF.astype"], "function", ["None"], ["", "def", "similarity_RMSE", "(", "S_CF", ",", "S_CBF", ",", "N", "=", "None", ")", ":", "\n", "    ", "assert", "S_CF", ".", "shape", "==", "S_CBF", ".", "shape", ",", "\"The shapes of the two similarity matrices do not correspond.\"", "\n", "\n", "# n_items = S_CF.shape[0]", "\n", "# N = n_items * n_items", "\n", "\n", "if", "N", "is", "None", ":", "\n", "        ", "S_union", "=", "S_CF", ".", "astype", "(", "bool", ")", "+", "S_CBF", ".", "astype", "(", "bool", ")", "\n", "N", "=", "S_union", ".", "nnz", "\n", "\n", "", "S_RMSE", "=", "S_CF", "-", "S_CBF", "\n", "S_RMSE", "=", "S_RMSE", ".", "power", "(", "2", ")", "\n", "S_RMSE", "=", "S_RMSE", ".", "sum", "(", ")", "/", "N", "\n", "\n", "return", "np", ".", "sqrt", "(", "S_RMSE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.error_statistics": [[247, 256], ["statistics.similarity_RMSE"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.similarity_RMSE"], ["", "def", "error_statistics", "(", "S_CF", ",", "S_CBF", ",", "N", "=", "None", ",", "suffix", "=", "\"\"", ",", "statistics", "=", "None", ")", ":", "\n", "    ", "assert", "S_CF", ".", "shape", "==", "S_CBF", ".", "shape", ",", "\"The shapes of the two similarity matrices do not correspond.\"", "\n", "\n", "if", "statistics", "is", "None", ":", "\n", "        ", "statistics", "=", "{", "}", "\n", "\n", "", "statistics", "[", "f'RMSE{suffix}'", "]", "=", "similarity_RMSE", "(", "S_CF", ",", "S_CBF", ",", "N", ")", "\n", "\n", "return", "statistics", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._get_nx_graph": [[15, 19], ["isinstance", "networkx.Graph"], "function", ["None"], ["def", "_get_nx_graph", "(", "graph", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "graph", ",", "nx", ".", "Graph", ")", ":", "\n", "        ", "return", "nx", ".", "Graph", "(", "graph", ")", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes": [[21, 28], ["isinstance", "set", "list", "sorted", "set.update", "list", "str"], "function", ["None"], ["", "def", "get_nodes", "(", "graph", ")", ":", "\n", "    ", "if", "isinstance", "(", "graph", ",", "nx", ".", "Graph", ")", ":", "\n", "        ", "return", "sorted", "(", "list", "(", "graph", ".", "nodes", ")", ")", "\n", "", "nodes_set", "=", "set", "(", ")", "\n", "for", "e", "in", "graph", ":", "\n", "        ", "nodes_set", ".", "update", "(", "str", "(", "e", ")", ")", "\n", "", "return", "list", "(", "nodes_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes_from_embedding": [[30, 37], ["set", "embedding.items", "list", "list.update"], "function", ["None"], ["", "def", "get_nodes_from_embedding", "(", "embedding", ")", ":", "\n", "    ", "nodes", "=", "set", "(", ")", "\n", "for", "k", ",", "v", "in", "embedding", ".", "items", "(", ")", ":", "\n", "        ", "nodes", ".", "update", "(", "v", ")", "\n", "", "nodes", "=", "list", "(", "nodes", ")", "\n", "\n", "return", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_edges": [[39, 43], ["isinstance", "list"], "function", ["None"], ["", "def", "get_edges", "(", "graph", ")", ":", "\n", "    ", "if", "isinstance", "(", "graph", ",", "nx", ".", "Graph", ")", ":", "\n", "        ", "return", "list", "(", "graph", ".", "edges", ")", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_edges_from_bqm": [[45, 47], ["list", "bqm.quadratic.keys"], "function", ["None"], ["", "def", "get_edges_from_bqm", "(", "bqm", ":", "dimod", ".", "BQM", ")", ":", "\n", "    ", "return", "list", "(", "bqm", ".", "quadratic", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_edges_from_embedding": [[49, 53], ["graph.get_nodes_from_embedding", "graph.subgraph", "list"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes_from_embedding"], ["", "def", "get_edges_from_embedding", "(", "graph", ":", "nx", ".", "Graph", ",", "embedding", ":", "dict", ")", ":", "\n", "    ", "nodes", "=", "get_nodes_from_embedding", "(", "embedding", ")", "\n", "subgraph", ":", "nx", ".", "Graph", "=", "graph", ".", "subgraph", "(", "nodes", ")", "\n", "return", "list", "(", "subgraph", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_graph_from_topology": [[55, 65], ["dwave_networkx.chimera_graph", "dwave_networkx.pegasus_graph"], "function", ["None"], ["", "def", "get_graph_from_topology", "(", "qpu_topology", ")", ":", "\n", "    ", "AVAILABLE_TOPOLOGIES", "=", "[", "'chimera'", ",", "'pegasus'", "]", "\n", "\n", "assert", "qpu_topology", "in", "AVAILABLE_TOPOLOGIES", ",", "f\"No graph available for the requested topology ({qpu_topology}).\"", "f\"Available topologies are {AVAILABLE_TOPOLOGIES}.\"", "\n", "\n", "if", "qpu_topology", "==", "'pegasus'", ":", "\n", "        ", "return", "dnx", ".", "chimera_graph", "(", "16", ")", "\n", "", "if", "qpu_topology", "==", "'chimera'", ":", "\n", "        ", "return", "dnx", ".", "pegasus_graph", "(", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_identity_embedding": [[67, 70], ["graph.get_nodes", "str"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes"], ["", "", "def", "get_identity_embedding", "(", "graph", ":", "nx", ".", "Graph", ")", ":", "\n", "    ", "nodes", "=", "get_nodes", "(", "graph", ")", "\n", "return", "{", "str", "(", "n", ")", ":", "[", "n", "]", "for", "n", "in", "nodes", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._graph_hash": [[72, 75], ["graph._get_nx_graph", "networkx.weisfeiler_lehman_graph_hash"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._get_nx_graph"], ["", "def", "_graph_hash", "(", "graph", ")", ":", "\n", "    ", "graph", "=", "_get_nx_graph", "(", "graph", ")", "\n", "return", "nx", ".", "weisfeiler_lehman_graph_hash", "(", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._get_coordinates": [[77, 84], ["math.floor", "math.floor", "Coord"], "function", ["None"], ["", "def", "_get_coordinates", "(", "node_index", ")", ":", "\n", "    ", "qubit_index", "=", "node_index", "%", "8", "\n", "cell_index", "=", "floor", "(", "node_index", "/", "8", ")", "\n", "row_index", "=", "floor", "(", "cell_index", "/", "16", ")", "\n", "col_index", "=", "cell_index", "%", "16", "\n", "\n", "return", "Coord", "(", "qubit_index", ",", "cell_index", ",", "row_index", ",", "col_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._get_margins": [[86, 96], ["list", "min", "max", "min", "max", "map", "map", "map", "map", "map"], "function", ["None"], ["", "def", "_get_margins", "(", "nodes", ")", ":", "\n", "    ", "coords", "=", "list", "(", "map", "(", "_get_coordinates", ",", "nodes", ")", ")", "\n", "\n", "min_row", "=", "min", "(", "map", "(", "lambda", "x", ":", "x", ".", "row", ",", "coords", ")", ")", "\n", "max_row", "=", "max", "(", "map", "(", "lambda", "x", ":", "x", ".", "row", ",", "coords", ")", ")", "\n", "\n", "min_col", "=", "min", "(", "map", "(", "lambda", "x", ":", "x", ".", "col", ",", "coords", ")", ")", "\n", "max_col", "=", "max", "(", "map", "(", "lambda", "x", ":", "x", ".", "col", ",", "coords", ")", ")", "\n", "\n", "return", "min_row", ",", "max_row", ",", "min_col", ",", "max_col", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._get_node_size": [[98, 105], ["graph._get_margins", "max"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._get_margins"], ["", "def", "_get_node_size", "(", "nodes", ",", "min_size", "=", "80", ",", "max_size", "=", "300", ")", ":", "\n", "    ", "min_row", ",", "max_row", ",", "min_col", ",", "max_col", "=", "_get_margins", "(", "nodes", ")", "\n", "n", "=", "max", "(", "max_row", "-", "min_row", ",", "max_col", ",", "min_col", ")", "\n", "\n", "a", "=", "min_size", "-", "max_size", "\n", "\n", "return", "a", "/", "15", "*", "(", "n", "-", "1", ")", "+", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._check_embedding_validity": [[107, 113], ["dwave.system.DWaveSampler", "numpy.array", "numpy.array", "numpy.alltrue", "graph.get_nodes_from_embedding", "numpy.isin"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes_from_embedding"], ["", "def", "_check_embedding_validity", "(", "embedding", ",", "qpu_topology", ")", ":", "\n", "    ", "target_sampler", "=", "DWaveSampler", "(", "solver", "=", "{", "'topology__type'", ":", "qpu_topology", "}", ")", "\n", "target_nodelist", "=", "np", ".", "array", "(", "target_sampler", ".", "nodelist", ")", "\n", "\n", "embedding_nodelist", "=", "np", ".", "array", "(", "get_nodes_from_embedding", "(", "embedding", ")", ")", "\n", "return", "np", ".", "alltrue", "(", "np", ".", "isin", "(", "embedding_nodelist", ",", "target_nodelist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.fully_connected_graph_from_size": [[115, 121], ["range", "range", "edgelist.append"], "function", ["None"], ["", "def", "fully_connected_graph_from_size", "(", "size", ")", ":", "\n", "    ", "edgelist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "size", ")", ":", "\n", "            ", "edgelist", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "return", "edgelist", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.draw_embedding_from_nodes": [[123, 158], ["matplotlib.pyplot.figure", "dwave_networkx.pegasus_graph", "graph._get_node_size", "dwave_networkx.draw_pegasus", "dwave_networkx.chimera_graph", "dwave_networkx.pegasus_graph", "dwave_networkx.draw_pegasus", "dwave_networkx.draw_chimera", "dwave_networkx.chimera_graph", "dwave_networkx.draw_chimera"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._get_node_size"], ["", "def", "draw_embedding_from_nodes", "(", "nodes", ",", "qpu_graph", "=", "'pegasus'", ",", "active_nodes", "=", "None", ",", "full_drawing", "=", "True", ",", "setup_figure", "=", "True", ")", ":", "\n", "    ", "assert", "qpu_graph", "in", "[", "'pegasus'", ",", "'chimera'", "]", ",", "\"The chosen QPU graph is not valid. Please choose one between pegasus and ch\u00ecmera.\"", "\n", "\n", "if", "setup_figure", ":", "\n", "        ", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "32", ",", "32", ")", ",", "dpi", "=", "80", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "\n", "", "if", "qpu_graph", "==", "'pegasus'", ":", "\n", "        ", "graph", "=", "dnx", ".", "pegasus_graph", "(", "16", ",", "node_list", "=", "nodes", ")", "\n", "", "elif", "qpu_graph", "==", "'chimera'", ":", "\n", "        ", "graph", "=", "dnx", ".", "chimera_graph", "(", "16", ",", "node_list", "=", "nodes", ")", "\n", "", "else", ":", "\n", "        ", "return", "\n", "\n", "", "if", "full_drawing", ":", "\n", "        ", "node_size", "=", "80", "\n", "width", "=", "1.5", "\n", "edge_color", "=", "'c'", "\n", "base_color", "=", "'#999999'", "\n", "\n", "if", "qpu_graph", "==", "'pegasus'", ":", "\n", "            ", "full_pegasus", "=", "dnx", ".", "pegasus_graph", "(", "16", ",", "node_list", "=", "active_nodes", ")", "\n", "dnx", ".", "draw_pegasus", "(", "full_pegasus", ",", "node_color", "=", "base_color", ",", "node_size", "=", "node_size", "/", "2", ",", "edge_color", "=", "base_color", ")", "\n", "", "elif", "qpu_graph", "==", "'chimera'", ":", "\n", "            ", "full_chimera", "=", "dnx", ".", "chimera_graph", "(", "16", ",", "node_list", "=", "active_nodes", ")", "\n", "dnx", ".", "draw_chimera", "(", "full_chimera", ",", "node_color", "=", "base_color", ",", "node_size", "=", "node_size", "/", "2", ",", "edge_color", "=", "base_color", ")", "\n", "", "", "else", ":", "\n", "        ", "node_size", "=", "_get_node_size", "(", "nodes", ")", "\n", "width", "=", "1", "\n", "edge_color", "=", "'k'", "\n", "\n", "", "if", "qpu_graph", "==", "'pegasus'", ":", "\n", "        ", "dnx", ".", "draw_pegasus", "(", "graph", ",", "node_size", "=", "node_size", ",", "edge_color", "=", "base_color", ",", "width", "=", "width", ")", "\n", "", "elif", "qpu_graph", "==", "'chimera'", ":", "\n", "        ", "dnx", ".", "draw_chimera", "(", "graph", ",", "node_size", "=", "node_size", ",", "edge_color", "=", "base_color", ",", "width", "=", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.draw_embedding": [[160, 198], ["graph.get_nodes_from_embedding", "graph.draw_embedding_from_nodes", "matplotlib.pyplot.figure", "set", "matplotlib.show", "matplotlib.pyplot.figure", "graph._get_node_size", "dwave_networkx.pegasus_graph", "dwave_networkx.draw_pegasus", "set.update", "dwave_networkx.chimera_graph", "dwave_networkx.draw_chimera", "print"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes_from_embedding", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.draw_embedding_from_nodes", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._get_node_size"], ["", "", "def", "draw_embedding", "(", "embedding", ",", "qpu_graph", "=", "'pegasus'", ",", "active_nodes", "=", "None", ",", "highlight_variables", "=", "None", ",", "full_drawing", "=", "True", ",", "\n", "show", "=", "True", ")", ":", "\n", "    ", "assert", "qpu_graph", "in", "[", "'pegasus'", ",", "'chimera'", "]", ",", "\"The chosen QPU graph is not valid. Please choose one between pegasus and ch\u00ecmera.\"", "\n", "\n", "if", "qpu_graph", "==", "'pegasus'", ":", "\n", "        ", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "48", ",", "48", ")", ",", "dpi", "=", "80", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "", "elif", "qpu_graph", "==", "'chimera'", ":", "\n", "        ", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "32", ",", "32", ")", ",", "dpi", "=", "80", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "\n", "", "nodes", "=", "get_nodes_from_embedding", "(", "embedding", ")", "\n", "\n", "draw_embedding_from_nodes", "(", "nodes", ",", "qpu_graph", "=", "qpu_graph", ",", "active_nodes", "=", "active_nodes", ",", "full_drawing", "=", "full_drawing", ",", "\n", "setup_figure", "=", "False", ")", "\n", "\n", "if", "highlight_variables", "is", "not", "None", ":", "\n", "\n", "        ", "if", "full_drawing", ":", "\n", "            ", "node_size", "=", "100", "\n", "", "else", ":", "\n", "            ", "node_size", "=", "_get_node_size", "(", "nodes", ",", "min_size", "=", "100", ")", "\n", "\n", "", "highlight_nodes", "=", "set", "(", ")", "\n", "for", "var", "in", "highlight_variables", ":", "\n", "            ", "try", ":", "\n", "                ", "highlight_nodes", ".", "update", "(", "embedding", "[", "var", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "print", "(", "\"No variable {} in the embedding!\"", ".", "format", "(", "var", ")", ")", "\n", "\n", "", "", "if", "qpu_graph", "==", "'pegasus'", ":", "\n", "            ", "highlight_pegasus", "=", "dnx", ".", "pegasus_graph", "(", "16", ",", "node_list", "=", "highlight_nodes", ")", "\n", "dnx", ".", "draw_pegasus", "(", "highlight_pegasus", ",", "node_color", "=", "'r'", ",", "node_size", "=", "node_size", ",", "edge_color", "=", "'r'", ",", "width", "=", "2", ")", "\n", "", "elif", "qpu_graph", "==", "'chimera'", ":", "\n", "            ", "highlight_chimera", "=", "dnx", ".", "chimera_graph", "(", "16", ",", "node_list", "=", "highlight_nodes", ")", "\n", "dnx", ".", "draw_chimera", "(", "highlight_chimera", ",", "node_color", "=", "'r'", ",", "node_size", "=", "node_size", ",", "edge_color", "=", "'r'", ",", "width", "=", "2", ")", "\n", "\n", "", "", "if", "show", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.samplers.get_hybrid_from_topology": [[4, 16], ["dwave.system.LeapHybridSampler", "dwave.system.LeapHybridSampler", "dwave.system.LeapHybridSampler"], "function", ["None"], ["def", "get_hybrid_from_topology", "(", "topology", ")", ":", "\n", "    ", "AVAILABLE_TOPOLOGIES", "=", "[", "'chimera'", ",", "'pegasus'", "]", "\n", "\n", "assert", "topology", "in", "AVAILABLE_TOPOLOGIES", ",", "f\"No hybrid solver available for the requested topology ({topology}).\"", "f\"Available topologies are {AVAILABLE_TOPOLOGIES}.\"", "\n", "\n", "if", "topology", "==", "'pegasus'", ":", "\n", "        ", "return", "LeapHybridSampler", "(", "solver", "=", "{", "'name__regex'", ":", "'.*version2'", "}", ")", "\n", "", "if", "topology", "==", "'chimera'", ":", "\n", "        ", "return", "LeapHybridSampler", "(", "solver", "=", "{", "'name__regex'", ":", "'.*v1'", "}", ")", "\n", "", "else", ":", "\n", "        ", "return", "LeapHybridSampler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.samplers.maximum_energy_delta": [[18, 24], ["max", "abs", "sum", "bqm.iter_variables", "bqm.get_linear", "abs", "bqm.get_quadratic", "bqm.iter_neighbors"], "function", ["None"], ["", "", "def", "maximum_energy_delta", "(", "bqm", ")", ":", "\n", "    ", "\"\"\"Compute conservative bound on maximum change in energy when flipping a single variable\"\"\"", "\n", "return", "max", "(", "abs", "(", "bqm", ".", "get_linear", "(", "i", ")", ")", "\n", "+", "sum", "(", "abs", "(", "bqm", ".", "get_quadratic", "(", "i", ",", "j", ")", ")", "\n", "for", "j", "in", "bqm", ".", "iter_neighbors", "(", "i", ")", ")", "\n", "for", "i", "in", "bqm", ".", "iter_variables", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.remove_ICM_item_interactions": [[4, 18], ["max", "ICM.tocoo().copy", "numpy.in1d", "ICM.tocoo().copy.eliminate_zeros", "ICM.tocoo().copy.tocsr", "ICM.tocoo"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "remove_ICM_item_interactions", "(", "ICM", ",", "items_to_remove", ")", ":", "\n", "    ", "n_items", ",", "_", "=", "ICM", ".", "shape", "\n", "max_item", "=", "max", "(", "items_to_remove", ")", "\n", "assert", "max_item", "<", "n_items", ",", "f\"Cannot remove these items from the ICM: {max_item} is out of bounds ({n_items}).\"", "\n", "\n", "new_ICM", "=", "ICM", ".", "tocoo", "(", ")", ".", "copy", "(", ")", "\n", "\n", "item_rows", "=", "new_ICM", ".", "row", "\n", "items_to_remove_mask", "=", "np", ".", "in1d", "(", "item_rows", ",", "items_to_remove", ")", "\n", "\n", "new_ICM", ".", "data", "[", "items_to_remove_mask", "]", "=", "0", "\n", "new_ICM", ".", "eliminate_zeros", "(", ")", "\n", "\n", "return", "new_ICM", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.test_ICM_feature_selection": [[20, 30], ["numpy.ediff1d", "numpy.zeros_like", "numpy.logical_not", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_less", "ICM.tocsc"], "function", ["None"], ["", "def", "test_ICM_feature_selection", "(", "ICM", ",", "selection", ")", ":", "\n", "    ", "ICM_csc_indptr", "=", "ICM", ".", "tocsc", "(", ")", ".", "indptr", "\n", "col_lens", "=", "np", ".", "ediff1d", "(", "ICM_csc_indptr", ")", "\n", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "col_lens", ")", "\n", "inverted_selection", "=", "np", ".", "logical_not", "(", "selection", ")", "\n", "\n", "# Check correctness of the new ICM", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "zeros", "[", "inverted_selection", "]", ",", "col_lens", "[", "inverted_selection", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_less", "(", "zeros", "[", "selection", "]", ",", "col_lens", "[", "selection", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices": [[7, 35], ["matrix_a.tocoo.tocoo", "matrix_b.tocoo.tocoo", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "scipy.coo_matrix", "max", "max", "recsys.Base.Recommender_utils.reshapeSparse"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.reshapeSparse"], ["def", "merge_sparse_matrices", "(", "matrix_a", ",", "matrix_b", ")", ":", "\n", "\n", "    ", "assert", "matrix_a", ".", "shape", "==", "matrix_b", ".", "shape", ",", "\"The two matrices have different shape, they should not be merged.\"", "\n", "\n", "matrix_a", "=", "matrix_a", ".", "tocoo", "(", ")", "\n", "matrix_b", "=", "matrix_b", ".", "tocoo", "(", ")", "\n", "\n", "data_a", "=", "matrix_a", ".", "data", "\n", "row_a", "=", "matrix_a", ".", "row", "\n", "col_a", "=", "matrix_a", ".", "col", "\n", "\n", "data_b", "=", "matrix_b", ".", "data", "\n", "row_b", "=", "matrix_b", ".", "row", "\n", "col_b", "=", "matrix_b", ".", "col", "\n", "\n", "data", "=", "np", ".", "concatenate", "(", "(", "data_a", ",", "data_b", ")", ")", "\n", "row", "=", "np", ".", "concatenate", "(", "(", "row_a", ",", "row_b", ")", ")", "\n", "col", "=", "np", ".", "concatenate", "(", "(", "col_a", ",", "col_b", ")", ")", "\n", "\n", "matrix", "=", "sps", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ")", "\n", "\n", "n_users", "=", "max", "(", "matrix_a", ".", "shape", "[", "0", "]", ",", "matrix_b", ".", "shape", "[", "0", "]", ")", "\n", "n_items", "=", "max", "(", "matrix_a", ".", "shape", "[", "1", "]", ",", "matrix_b", ".", "shape", "[", "1", "]", ")", "\n", "new_shape", "=", "(", "n_users", ",", "n_items", ")", "\n", "\n", "matrix", "=", "reshapeSparse", "(", "matrix", ",", "new_shape", ")", "\n", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.select_columns": [[37, 52], ["matrix.tocoo", "range", "matrix.tocoo.eliminate_zeros", "matrix.tocoo.tocsr", "numpy.arange", "len"], "function", ["None"], ["", "def", "select_columns", "(", "matrix", ",", "selection", ")", ":", "\n", "\n", "    ", "m", "=", "matrix", ".", "tocoo", "(", ")", "\n", "\n", "if", "selection", ".", "dtype", "==", "bool", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "len", "(", "selection", ")", ")", "\n", "selection", "=", "indices", "[", "selection", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "m", ".", "nnz", ")", ":", "\n", "        ", "if", "m", ".", "col", "[", "i", "]", "not", "in", "selection", ":", "\n", "            ", "m", ".", "data", "[", "i", "]", "=", "0", "\n", "\n", "", "", "m", ".", "eliminate_zeros", "(", ")", "\n", "\n", "return", "m", ".", "tocsr", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.naming.get_experiment_id": [[1, 11], ["expID.replace.replace"], "function", ["None"], ["def", "get_experiment_id", "(", "alpha", ",", "beta", ",", "p", "=", "None", ",", "combination_strength", "=", "None", ")", ":", "\n", "    ", "expID", "=", "f'a{alpha}b{beta}'", "\n", "\n", "if", "combination_strength", "is", "not", "None", ":", "\n", "        ", "expID", "=", "f'{expID}s{combination_strength}'", "\n", "if", "p", "is", "not", "None", ":", "\n", "            ", "expID", "=", "f'{expID}p{p:03d}'", "\n", "\n", "", "", "expID", "=", "expID", ".", "replace", "(", "'.'", ",", "''", ")", "\n", "return", "expID", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.multithreading.parallelize_function": [[4, 11], ["multiprocessing.Pool", "multiprocessing.Pool.starmap", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "multiprocessing.cpu_count"], "function", ["None"], ["def", "parallelize_function", "(", "func", ",", "args", ",", "count_div", "=", "2", ",", "count_sub", "=", "1", ")", ":", "\n", "    ", "n_processes", "=", "cpu_count", "(", ")", "//", "count_div", "-", "count_sub", "\n", "pool", "=", "Pool", "(", "processes", "=", "n_processes", ",", "maxtasksperchild", "=", "1", ")", "\n", "\n", "pool", ".", "starmap", "(", "func", ",", "args", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.run_CQFS.run_CQFS": [[12, 88], ["data_loader.load_data", "data_loader.get_dataset_name", "data_loader.get_cold_split", "utils.sparse.merge_sparse_matrices().tocsr", "data_loader.get_ICM_train_from_name", "print", "recsys.Base.Similarity.Cython.Compute_Similarity_Cython.Compute_Similarity_Cython", "recsys.Base.Similarity.Cython.Compute_Similarity_Cython.Compute_Similarity_Cython.compute_similarity", "print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "CF_recommender_class", "CF_recommender_class.fit", "CF_recommender_class.W_sparse.copy", "CBF_Similarity.compute_similarity.copy", "utils.statistics.warm_similarity_statistics", "core.CQFS.CQFS", "core.CQFS.CQFS.select_many_p", "utils.sparse.merge_sparse_matrices", "numpy.ediff1d", "numpy.ediff1d", "merge_sparse_matrices().tocsr.tocsc"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_cold_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.warm_similarity_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.select_many_p", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices"], ["def", "run_CQFS", "(", "data_loader", ":", "DataLoader", ",", "ICM_name", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "solver_class", ",", "\n", "CF_recommender_classes", ",", "save_FPMs", "=", "False", ",", "save_BQMs", "=", "False", ",", "parameter_product", "=", "True", ")", ":", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "# Load data", "\n", "    ", "data_loader", ".", "load_data", "(", ")", "\n", "dataset_name", "=", "data_loader", ".", "get_dataset_name", "(", ")", "\n", "\n", "# Get the cold split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "data_loader", ".", "get_cold_split", "(", ")", "\n", "\n", "# Create the last test URM by merging the train and validation matrices", "\n", "URM_train_validation", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "ICM_train", ",", "original_ICM_train", "=", "data_loader", ".", "get_ICM_train_from_name", "(", "ICM_name", ",", "return_original", "=", "True", ")", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "##################################################", "\n", "# Quantum Feature Selection", "\n", "\n", "# The CBF similarity used for the selection is a simple dot product", "\n", "topK", "=", "n_items", "\n", "CBF_Similarity", "=", "Compute_Similarity_Cython", "(", "ICM_train", ".", "T", ",", "topK", "=", "topK", ",", "shrink", "=", "0", ",", "normalize", "=", "False", ",", "similarity", "=", "'cosine'", ")", "\n", "S_CBF_original", "=", "CBF_Similarity", ".", "compute_similarity", "(", ")", "\n", "\n", "for", "CF_recommender_class", "in", "CF_recommender_classes", ":", "\n", "##################################################", "\n", "# Setup collaborative filtering recommender", "\n", "\n", "# Get Collaborative Filtering best hyperparameters", "\n", "        ", "cf_recommender_name", "=", "CF_recommender_class", ".", "RECOMMENDER_NAME", "\n", "print", "(", "f\"Loading collaborative model: {cf_recommender_name}\"", ")", "\n", "\n", "cf_path", "=", "f\"../../results/{dataset_name}/{cf_recommender_name}/\"", "\n", "cf_dataIO", "=", "DataIO", "(", "cf_path", ")", "\n", "\n", "cf_similarity", "=", "\"cosine_\"", "if", "CF_recommender_class", "is", "ItemKNNCFRecommender", "else", "\"\"", "\n", "cf_dict", "=", "cf_dataIO", ".", "load_data", "(", "f\"{cf_recommender_name}_{cf_similarity}metadata.zip\"", ")", "\n", "cf_best_hyperparameters", "=", "cf_dict", "[", "'hyperparameters_best'", "]", "\n", "\n", "# Create Collaborative Filtering Recommender and fit with the best hyperparameters", "\n", "CF_recommender", "=", "CF_recommender_class", "(", "URM_train_validation", ")", "\n", "CF_recommender", ".", "fit", "(", "**", "cf_best_hyperparameters", ")", "\n", "\n", "# Get CF and CBF Similarity Matrices", "\n", "S_CF", "=", "CF_recommender", ".", "W_sparse", ".", "copy", "(", ")", "\n", "S_CBF", "=", "S_CBF_original", ".", "copy", "(", ")", "\n", "\n", "assert", "S_CF", ".", "shape", "==", "S_CBF", ".", "shape", ",", "\"The two sparse matrices have different shapes!\"", "\n", "assert", "S_CF", ".", "shape", "==", "(", "n_items", ",", "n_items", ")", ",", "\"The similarity matrices do not have the right shape.\"", "\n", "\n", "##################################################", "\n", "# Setup CQFS", "\n", "\n", "# Get the warm items (CF) and the items with features (CBF)", "\n", "CF_warm_items", "=", "np", ".", "ediff1d", "(", "URM_train_validation", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "CBF_items_with_interactions", "=", "np", ".", "ediff1d", "(", "ICM_train", ".", "indptr", ")", "!=", "0", "\n", "\n", "# Compute warm items statistics", "\n", "statistics", "=", "warm_similarity_statistics", "(", "S_CF", ",", "S_CBF", ",", "CF_warm_items", "=", "CF_warm_items", ",", "\n", "CBF_items_with_interactions", "=", "CBF_items_with_interactions", ")", "\n", "\n", "base_folder_path", "=", "f\"../../results/{dataset_name}/{ICM_name}/{cf_recommender_name}/\"", "\n", "CQFS_selector", "=", "CQFS", "(", "ICM_train", ",", "S_CF", ",", "S_CBF", ",", "base_folder_path", ",", "solver_class", "=", "solver_class", ",", "\n", "statistics", "=", "statistics", ")", "\n", "\n", "##################################################", "\n", "# Perform CQFS", "\n", "\n", "CQFS_selector", ".", "select_many_p", "(", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "save_FPMs", "=", "save_FPMs", ",", "\n", "save_BQMs", "=", "save_BQMs", ",", "parameter_product", "=", "parameter_product", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_TFIDF.train_TFIDF_KNN": [[15, 56], ["time.time", "round", "numpy.zeros", "utils.sparse.select_columns", "utils.recsys.test_ICM_feature_selection", "utils.sparse.select_columns", "utils.recsys.test_ICM_feature_selection", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "recsys.ParameterTuning.run_parameter_search.runParameterSearch_Content", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.select_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.test_ICM_feature_selection", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.select_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.test_ICM_feature_selection", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_Content"], ["def", "train_TFIDF_KNN", "(", "n_features", ",", "percentage", ",", "IDF_argsort", ",", "dataset_name", ",", "ICM_name", ",", "evaluator_validation", ",", "evaluator_test", ",", "\n", "URM_train", ",", "URM_train_last_test", ",", "ICM_train", ",", "ICM_train_last_test", ",", "n_cases", ",", "n_random_starts", ",", "\n", "similarity_type_list", ")", ":", "\n", "    ", "selection_time", "=", "time", ".", "time", "(", ")", "\n", "k_features", "=", "round", "(", "n_features", "*", "percentage", "/", "100", ")", "\n", "selection", "=", "IDF_argsort", "[", ":", "k_features", "]", "\n", "bool_selection", "=", "np", ".", "zeros", "(", "n_features", ",", "dtype", "=", "bool", ")", "\n", "bool_selection", "[", "selection", "]", "=", "True", "\n", "selection_time", "=", "time", ".", "time", "(", ")", "-", "selection_time", "\n", "\n", "new_ICM", "=", "select_columns", "(", "ICM_train", ",", "bool_selection", ")", "\n", "test_ICM_feature_selection", "(", "new_ICM", ",", "bool_selection", ")", "\n", "\n", "new_ICM_train_last_test", "=", "select_columns", "(", "ICM_train_last_test", ",", "bool_selection", ")", "\n", "test_ICM_feature_selection", "(", "new_ICM_train_last_test", ",", "bool_selection", ")", "\n", "\n", "base_folder_path", "=", "f\"../../results/{dataset_name}/{ICM_name}/TFIDF/p{percentage:03d}/\"", "\n", "\n", "selection_timings", "=", "{", "\n", "'selection_time'", ":", "selection_time", ",", "\n", "}", "\n", "\n", "selection_statistics", "=", "{", "\n", "'n_features'", ":", "n_features", ",", "\n", "'k_percentage'", ":", "percentage", ",", "\n", "'k_selected'", ":", "len", "(", "selection", ")", ",", "\n", "'IDF_selection'", ":", "selection", ",", "\n", "'IDF_bool_selection'", ":", "bool_selection", ",", "\n", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "base_folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "\"timings\"", ",", "selection_timings", ")", "\n", "dataIO", ".", "save_data", "(", "\"statistics\"", ",", "selection_statistics", ")", "\n", "\n", "recommender_folder_path", "=", "f\"{base_folder_path}/{ItemKNNCBFRecommender.RECOMMENDER_NAME}/\"", "\n", "runParameterSearch_Content", "(", "ItemKNNCBFRecommender", ",", "URM_train", ",", "new_ICM", ",", "ICM_name", ",", "\n", "URM_train_last_test", "=", "URM_train_last_test", ",", "ICM_last_test", "=", "new_ICM_train_last_test", ",", "\n", "n_cases", "=", "n_cases", ",", "n_random_starts", "=", "n_random_starts", ",", "resume_from_saved", "=", "True", ",", "\n", "save_model", "=", "'best'", ",", "evaluator_validation", "=", "evaluator_validation", ",", "\n", "evaluator_test", "=", "evaluator_test", ",", "output_folder_path", "=", "recommender_folder_path", ",", "\n", "similarity_type_list", "=", "similarity_type_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_TFIDF.baseline_TFIDF": [[58, 140], ["data_loader.load_data", "data_loader.get_dataset_name", "data_loader.get_cold_split", "utils.sparse.merge_sparse_matrices().tocsr", "data_loader.get_ICM_train_from_name", "print", "recsys.Base.Evaluation.Evaluator.EvaluatorHoldout", "recsys.Base.Evaluation.Evaluator.EvaluatorHoldout", "time.time", "ICM_train.astype", "ICM_coo.tocoo.tocoo", "float", "numpy.log", "numpy.argsort", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.arange", "time.time", "utils.multithreading.parallelize_function", "utils.sparse.merge_sparse_matrices", "len", "len", "baseline_TFIDF.train_TFIDF_KNN", "URM_train.tocsc", "merge_sparse_matrices().tocsr.tocsc", "numpy.bincount"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_cold_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.multithreading.parallelize_function", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_TFIDF.train_TFIDF_KNN"], ["", "def", "baseline_TFIDF", "(", "data_loader", ":", "DataLoader", ",", "ICM_name", ",", "n_cases", "=", "50", ",", "n_random_starts", "=", "15", ",", "similarity_type_list", "=", "[", "'cosine'", "]", ",", "\n", "parallelize", "=", "True", ")", ":", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "# Load data", "\n", "    ", "data_loader", ".", "load_data", "(", ")", "\n", "dataset_name", "=", "data_loader", ".", "get_dataset_name", "(", ")", "\n", "\n", "# Get the split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "data_loader", ".", "get_cold_split", "(", ")", "\n", "\n", "# Create the last test URM by merging the train and validation matrices", "\n", "URM_train_last_test", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "# Get the original ICM", "\n", "ICM_train", ",", "original_ICM_train", "=", "data_loader", ".", "get_ICM_train_from_name", "(", "ICM_name", ",", "return_original", "=", "True", ")", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "##################################################", "\n", "# Evaluators instantiation", "\n", "\n", "# Obtain the array of train item indices, to be ignored during validation", "\n", "train_warm_item_mask", "=", "np", ".", "ediff1d", "(", "URM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "train_warm_item_mask", "=", "np", ".", "arange", "(", "len", "(", "train_warm_item_mask", ")", ")", "[", "train_warm_item_mask", "]", "\n", "\n", "# Obtain the array of train and validation item indices, to be ignored during testing", "\n", "train_validation_warm_item_mask", "=", "np", ".", "ediff1d", "(", "URM_train_last_test", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "train_validation_warm_item_mask", "=", "np", ".", "arange", "(", "len", "(", "train_validation_warm_item_mask", ")", ")", "[", "train_validation_warm_item_mask", "]", "\n", "\n", "# Create the evaluator objects for validation and test", "\n", "# Train items are ignored during validation; train and validation items are ignored during testing", "\n", "evaluator_validation", "=", "EvaluatorHoldout", "(", "URM_validation", ",", "cutoff_list", "=", "[", "10", "]", ",", "ignore_items", "=", "train_warm_item_mask", ")", "\n", "evaluator_test", "=", "EvaluatorHoldout", "(", "URM_test", ",", "cutoff_list", "=", "[", "5", ",", "10", ",", "20", ",", "50", "]", ",", "\n", "ignore_items", "=", "train_validation_warm_item_mask", ")", "\n", "\n", "##################################################", "\n", "# TF-IDF index", "\n", "\n", "IDF_time", "=", "time", ".", "time", "(", ")", "\n", "ICM_coo", "=", "ICM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ICM_coo", "=", "ICM_coo", ".", "tocoo", "(", ")", "\n", "N", "=", "float", "(", "ICM_coo", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Compute IDF", "\n", "IDF", "=", "np", ".", "log", "(", "N", "/", "(", "1", "+", "np", ".", "bincount", "(", "ICM_coo", ".", "col", ")", ")", ")", "\n", "IDF_argsort", "=", "np", ".", "argsort", "(", "-", "IDF", ")", "\n", "IDF_time", "=", "time", ".", "time", "(", ")", "-", "IDF_time", "\n", "\n", "timings", "=", "{", "\n", "'IDF_time'", ":", "IDF_time", ",", "\n", "}", "\n", "\n", "statistics", "=", "{", "\n", "'n_features'", ":", "n_features", ",", "\n", "'IDF'", ":", "IDF", ",", "\n", "'IDF_argsort'", ":", "IDF_argsort", ",", "\n", "}", "\n", "\n", "TFIDF_folder_path", "=", "f\"../../results/{dataset_name}/{ICM_name}/TFIDF/\"", "\n", "dataIO", "=", "DataIO", "(", "TFIDF_folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "\"timings\"", ",", "timings", ")", "\n", "dataIO", ".", "save_data", "(", "\"statistics\"", ",", "statistics", ")", "\n", "\n", "percentages", "=", "[", "40", ",", "60", ",", "80", ",", "95", "]", "\n", "\n", "if", "parallelize", ":", "\n", "        ", "args", "=", "[", "(", "n_features", ",", "percentage", ",", "IDF_argsort", ",", "dataset_name", ",", "ICM_name", ",", "evaluator_validation", ",", "evaluator_test", ",", "\n", "URM_train", ",", "URM_train_last_test", ",", "ICM_train", ",", "original_ICM_train", ",", "n_cases", ",", "n_random_starts", ",", "\n", "similarity_type_list", ")", "\n", "for", "percentage", "in", "percentages", "]", "\n", "parallelize_function", "(", "train_TFIDF_KNN", ",", "args", ",", "count_div", "=", "1", ",", "count_sub", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "        ", "for", "percentage", "in", "percentages", ":", "\n", "            ", "train_TFIDF_KNN", "(", "n_features", ",", "percentage", ",", "IDF_argsort", ",", "dataset_name", ",", "ICM_name", ",", "evaluator_validation", ",", "\n", "evaluator_test", ",", "URM_train", ",", "URM_train_last_test", ",", "ICM_train", ",", "original_ICM_train", ",", "n_cases", ",", "\n", "n_random_starts", ",", "similarity_type_list", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CFW.train_CFW": [[14, 23], ["recsys.ParameterTuning.run_parameter_search.runParameterSearch_FeatureWeighting"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_FeatureWeighting"], ["def", "train_CFW", "(", "CFW_recommender", ",", "ICM_name", ",", "output_folder_path", ",", "W_train", ",", "evaluator_validation", ",", "evaluator_test", ",", "\n", "evaluator_validation_earlystopping", ",", "URM_train", ",", "URM_train_last_test", ",", "ICM_train", ",", "ICM_train_last_test", ",", "\n", "n_cases", ",", "n_random_starts", ")", ":", "\n", "    ", "runParameterSearch_FeatureWeighting", "(", "CFW_recommender", ",", "URM_train", ",", "W_train", ",", "ICM_train", ",", "ICM_name", ",", "\n", "URM_train_last_test", "=", "URM_train_last_test", ",", "ICM_last_test", "=", "ICM_train_last_test", ",", "\n", "n_cases", "=", "n_cases", ",", "n_random_starts", "=", "n_random_starts", ",", "resume_from_saved", "=", "True", ",", "\n", "evaluator_validation", "=", "evaluator_validation", ",", "evaluator_test", "=", "evaluator_test", ",", "\n", "evaluator_validation_earlystopping", "=", "evaluator_validation_earlystopping", ",", "\n", "output_folder_path", "=", "output_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CFW.baseline_CFW": [[25, 141], ["data_loader.load_data", "data_loader.get_dataset_name", "data_loader.get_cold_split", "utils.sparse.merge_sparse_matrices().tocsr", "data_loader.get_original_ICM_train_from_name", "utils.recsys.remove_ICM_item_interactions", "numpy.alltrue", "utils.recsys.remove_ICM_item_interactions", "numpy.alltrue", "print", "recsys.Base.Evaluation.Evaluator.EvaluatorHoldout", "recsys.Base.Evaluation.Evaluator.EvaluatorHoldout", "recsys.FeatureWeighting.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper", "recsys.FeatureWeighting.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper", "recsys.FeatureWeighting.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.arange", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "Recommender", "Recommender.fit", "Recommender.W_sparse.copy", "utils.sparse.merge_sparse_matrices", "len", "len", "len", "len", "utils.multithreading.parallelize_function", "URM_test.tocsc", "URM_validation.tocsc", "URM_train.tocsc", "merge_sparse_matrices().tocsr.tocsc", "baseline_CFW.train_CFW"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_cold_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_original_ICM_train_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.remove_ICM_item_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.remove_ICM_item_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.multithreading.parallelize_function", "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CFW.train_CFW"], ["", "def", "baseline_CFW", "(", "data_loader", ":", "DataLoader", ",", "ICM_name", ",", "CF_recommenders", ",", "n_cases", "=", "50", ",", "n_random_starts", "=", "15", ",", "parallelize", "=", "True", ")", ":", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "# Load data", "\n", "    ", "data_loader", ".", "load_data", "(", ")", "\n", "dataset_name", "=", "data_loader", ".", "get_dataset_name", "(", ")", "\n", "\n", "# Get the split used for CBF", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "data_loader", ".", "get_cold_split", "(", ")", "\n", "\n", "# Get the warm items URM", "\n", "URM_train_validation", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "# Get the filtered ICM", "\n", "original_ICM_train", "=", "data_loader", ".", "get_original_ICM_train_from_name", "(", "ICM_name", ")", "\n", "\n", "# Remove cold test items interactions from the ICM", "\n", "test_items", "=", "np", ".", "ediff1d", "(", "URM_test", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "test_items", "=", "np", ".", "arange", "(", "len", "(", "test_items", ")", ")", "[", "test_items", "]", "\n", "ICM_validation", "=", "remove_ICM_item_interactions", "(", "original_ICM_train", ",", "test_items", ")", "\n", "\n", "# Check if the removal was correct", "\n", "no_ICM_interaction_item_mask", "=", "np", ".", "ediff1d", "(", "ICM_validation", ".", "indptr", ")", "==", "0", "\n", "assert", "np", ".", "alltrue", "(", "\n", "no_ICM_interaction_item_mask", "[", "test_items", "]", ")", ",", "\"Test items were not correctly removed from the train ICM.\"", "\n", "\n", "# Remove cold validation items interactions from the ICM", "\n", "validation_items", "=", "np", ".", "ediff1d", "(", "URM_validation", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "validation_items", "=", "np", ".", "arange", "(", "len", "(", "validation_items", ")", ")", "[", "validation_items", "]", "\n", "ICM_train", "=", "remove_ICM_item_interactions", "(", "ICM_validation", ",", "validation_items", ")", "\n", "\n", "# Check if the removal was correct", "\n", "no_ICM_interaction_item_mask", "=", "np", ".", "ediff1d", "(", "ICM_train", ".", "indptr", ")", "==", "0", "\n", "assert", "np", ".", "alltrue", "(", "\n", "no_ICM_interaction_item_mask", "[", "validation_items", "]", ")", ",", "\"Test items were not correctly removed from the train ICM.\"", "\n", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "##################################################", "\n", "# Evaluators instantiation", "\n", "\n", "# Obtain the array of train item indices, to be ignored during validation", "\n", "train_warm_item_mask", "=", "np", ".", "ediff1d", "(", "URM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "train_warm_item_mask", "=", "np", ".", "arange", "(", "len", "(", "train_warm_item_mask", ")", ")", "[", "train_warm_item_mask", "]", "\n", "\n", "# Obtain the array of train and validation item indices, to be ignored during testing", "\n", "train_validation_warm_item_mask", "=", "np", ".", "ediff1d", "(", "URM_train_validation", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "train_validation_warm_item_mask", "=", "np", ".", "arange", "(", "len", "(", "train_validation_warm_item_mask", ")", ")", "[", "train_validation_warm_item_mask", "]", "\n", "\n", "# Create the evaluator objects for validation and test", "\n", "# Train items are ignored during validation; train and validation items are ignored during testing", "\n", "evaluator_validation", "=", "EvaluatorHoldout", "(", "URM_validation", ",", "cutoff_list", "=", "[", "10", "]", ",", "ignore_items", "=", "train_warm_item_mask", ")", "\n", "evaluator_test", "=", "EvaluatorHoldout", "(", "URM_test", ",", "cutoff_list", "=", "[", "5", ",", "10", ",", "20", ",", "50", "]", ",", "\n", "ignore_items", "=", "train_validation_warm_item_mask", ")", "\n", "\n", "evaluator_validation_wrapper", "=", "EvaluatorCFW_D_wrapper", "(", "evaluator_validation", ",", "ICM_validation", ")", "\n", "evaluator_validation_earlystopping", "=", "EvaluatorCFW_D_wrapper", "(", "evaluator_validation", ",", "ICM_validation", ",", "\n", "model_to_use", "=", "'last'", ")", "\n", "evaluator_test_wrapper", "=", "EvaluatorCFW_D_wrapper", "(", "evaluator_test", ",", "original_ICM_train", ")", "\n", "\n", "##################################################", "\n", "# CFW parameter tuning", "\n", "\n", "CFW_recommenders", "=", "[", "CFW_D_Similarity_Cython", "]", "# , CFW_DVV_Similarity_Cython, FBSM_Rating_Cython]", "\n", "\n", "W_trains", "=", "{", "}", "\n", "for", "Recommender", "in", "CF_recommenders", ":", "\n", "# Get Collaborative Filtering best hyperparameters", "\n", "        ", "cf_recommender_name", "=", "Recommender", ".", "RECOMMENDER_NAME", "\n", "cf_path", "=", "f\"../../results/{dataset_name}/{cf_recommender_name}/\"", "\n", "cf_dataIO", "=", "DataIO", "(", "cf_path", ")", "\n", "cf_similarity", "=", "\"cosine_\"", "if", "Recommender", "is", "ItemKNNCFRecommender", "else", "\"\"", "\n", "cf_dict", "=", "cf_dataIO", ".", "load_data", "(", "f\"{cf_recommender_name}_{cf_similarity}metadata.zip\"", ")", "\n", "cf_best_hyperparameters", "=", "cf_dict", "[", "'hyperparameters_best'", "]", "\n", "\n", "# Create Collaborative Filtering Recommender and fit with the best hyperparameters", "\n", "CF_recommender", "=", "Recommender", "(", "URM_train_validation", ")", "\n", "CF_recommender", ".", "fit", "(", "**", "cf_best_hyperparameters", ")", "\n", "\n", "# Get CF and CBF Similarity Matrices", "\n", "W_trains", "[", "cf_recommender_name", "]", "=", "CF_recommender", ".", "W_sparse", ".", "copy", "(", ")", "\n", "\n", "", "for", "CFW_recommender", "in", "CFW_recommenders", ":", "\n", "        ", "CFW_name", "=", "CFW_recommender", ".", "RECOMMENDER_NAME", "\n", "\n", "if", "parallelize", ":", "\n", "            ", "cf_recommender_names", "=", "[", "Recommender", ".", "RECOMMENDER_NAME", "for", "Recommender", "in", "CF_recommenders", "]", "\n", "W_train_models", "=", "{", "cf_recommender_name", ":", "W_trains", "[", "cf_recommender_name", "]", "\n", "for", "cf_recommender_name", "in", "cf_recommender_names", "}", "\n", "\n", "output_folder_paths", "=", "{", "cf_recommender_name", ":", "\n", "f\"../../results/{dataset_name}/{ICM_name}/{CFW_name}/{cf_recommender_name}/\"", "\n", "for", "cf_recommender_name", "in", "cf_recommender_names", "}", "\n", "\n", "args", "=", "[", "(", "CFW_recommender", ",", "ICM_name", ",", "output_folder_paths", "[", "cf_recommender_name", "]", ",", "\n", "W_train_models", "[", "cf_recommender_name", "]", ",", "evaluator_validation_wrapper", ",", "evaluator_test_wrapper", ",", "\n", "evaluator_validation_earlystopping", ",", "URM_train", ",", "URM_train_validation", ",", "ICM_train", ",", "original_ICM_train", ",", "\n", "n_cases", ",", "n_random_starts", ")", "for", "cf_recommender_name", "in", "cf_recommender_names", "]", "\n", "parallelize_function", "(", "train_CFW", ",", "args", ",", "count_div", "=", "1", ",", "count_sub", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "Recommender", "in", "CF_recommenders", ":", "\n", "                ", "cf_recommender_name", "=", "Recommender", ".", "RECOMMENDER_NAME", "\n", "W_train", "=", "W_trains", "[", "cf_recommender_name", "]", "\n", "\n", "output_folder_path", "=", "f\"../../results/{dataset_name}/{ICM_name}/{CFW_name}/{cf_recommender_name}/\"", "\n", "\n", "train_CFW", "(", "CFW_recommender", ",", "ICM_name", ",", "output_folder_path", ",", "W_train", ",", "evaluator_validation_wrapper", ",", "\n", "evaluator_test_wrapper", ",", "evaluator_validation_earlystopping", ",", "URM_train", ",", "URM_train_validation", ",", "\n", "ICM_train", ",", "original_ICM_train", ",", "n_cases", ",", "n_random_starts", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.train_CF.train_CF": [[9, 29], ["data_loader.load_data", "data_loader.get_dataset_name", "data_loader.get_warm_split", "recsys.Base.Evaluation.Evaluator.EvaluatorHoldout", "recsys.ParameterTuning.run_parameter_search.runParameterSearch_Collaborative"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_warm_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_Collaborative"], ["def", "train_CF", "(", "data_loader", ":", "DataLoader", ",", "n_cases", "=", "50", ",", "n_random_starts", "=", "15", ")", ":", "\n", "# Load data", "\n", "    ", "data_loader", ".", "load_data", "(", ")", "\n", "dataset_name", "=", "data_loader", ".", "get_dataset_name", "(", ")", "\n", "\n", "# Get the warm split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "data_loader", ".", "get_warm_split", "(", ")", "\n", "\n", "# Instantiate the validation evaluator needed by the parameter search algorithm", "\n", "evaluator_validation", "=", "EvaluatorHoldout", "(", "URM_validation", ",", "cutoff_list", "=", "[", "10", "]", ")", "\n", "\n", "recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "for", "Recommender", "in", "recommender_classes", ":", "\n", "# Name of the experiment and output results folder path", "\n", "        ", "recommendation_folder", "=", "f\"{dataset_name}/{Recommender.RECOMMENDER_NAME}\"", "\n", "output_folder_path", "=", "f\"../../results/{recommendation_folder}/\"", "\n", "\n", "runParameterSearch_Collaborative", "(", "Recommender", ",", "URM_train", ",", "evaluator_validation", "=", "evaluator_validation", ",", "\n", "output_folder_path", "=", "output_folder_path", ",", "n_cases", "=", "n_cases", ",", "\n", "n_random_starts", "=", "n_random_starts", ",", "resume_from_saved", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.main": [[29, 78], ["recsys.Base.DataIO.DataIO", "scalability_analysis.scalability_analysis_on_features_xing", "recsys.Base.DataIO.DataIO.save_data", "print", "recsys.Base.DataIO.DataIO.save_data", "print"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_features_xing", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["def", "main", "(", ")", ":", "\n", "    ", "analysis_path", "=", "f\"../\"", "\n", "dataIO", "=", "DataIO", "(", "analysis_path", ")", "\n", "\n", "##################################################", "\n", "# Analyse experiment scalability", "\n", "\n", "scalability_percentages", "=", "[", "1", ",", "0.5", ",", "0.25", ",", "0.125", "]", "\n", "scalability_analysis_tmd", "=", "{", "}", "\n", "scalability_analysis_xing", "=", "{", "}", "\n", "\n", "#########################", "\n", "# Scale on items (TMD)", "\n", "# scalability_analysis_tmd['items'] = scalability_analysis_on_items_tmd(scalability_percentages)", "\n", "\n", "#########################", "\n", "# Scale on features (TMD)", "\n", "# scalability_analysis_tmd['features'] = scalability_analysis_on_features_tmd(scalability_percentages)", "\n", "\n", "#########################", "\n", "# Scale on items (Xing)", "\n", "# scalability_analysis_xing['items'] = scalability_analysis_on_items_xing(scalability_percentages)", "\n", "#", "\n", "# try:", "\n", "#     dataIO.save_data('scalability_analysis_xing', scalability_analysis_xing)", "\n", "# except:", "\n", "#     print(f\"Cannot save the entire dictionary.\")", "\n", "#     for k in scalability_analysis_xing:", "\n", "#         try:", "\n", "#             dataIO.save_data(f'scalability_analysis_xing_{k}', {k: scalability_analysis_xing[k]})", "\n", "#         except:", "\n", "#             print(f\"Cannot save {k}.\")", "\n", "\n", "#########################", "\n", "# Scale on features (Xing)", "\n", "scalability_analysis_xing", "[", "'features'", "]", "=", "scalability_analysis_on_features_xing", "(", "scalability_percentages", ")", "\n", "\n", "#########################", "\n", "# Save analysis", "\n", "\n", "try", ":", "\n", "        ", "dataIO", ".", "save_data", "(", "'scalability_analysis_xing'", ",", "scalability_analysis_xing", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "f\"Cannot save the entire dictionary.\"", ")", "\n", "for", "k", "in", "scalability_analysis_xing", ":", "\n", "            ", "try", ":", "\n", "                ", "dataIO", ".", "save_data", "(", "f'scalability_analysis_xing_{k}'", ",", "{", "k", ":", "scalability_analysis_xing", "[", "k", "]", "}", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "f\"Cannot save {k}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_items_tmd": [[82, 94], ["numpy.random.seed", "print", "scalability_analysis.load_essential_data_tmd", "scalability_analysis.scalability_analysis_on_items"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.load_essential_data_tmd", "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_items"], ["", "", "", "", "def", "scalability_analysis_on_items_tmd", "(", "item_percentages", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "56", ")", "\n", "\n", "print", "(", "\"Starting scalability analysis on items for The Movies Dataset.\"", ")", "\n", "\n", "##################################################", "\n", "# Load essential data", "\n", "\n", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", "=", "load_essential_data_tmd", "(", ")", "\n", "\n", "return", "scalability_analysis_on_items", "(", "item_percentages", ",", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", ",", "TMD_ALPHA", ",", "\n", "TMD_BETA", ",", "TMD_STRENGTH", ",", "TMD_PERCENTAGE", ",", "n_samples", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_features_tmd": [[96, 108], ["numpy.random.seed", "print", "scalability_analysis.load_essential_data_tmd", "scalability_analysis.scalability_analysis_on_features"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.load_essential_data_tmd", "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_features"], ["", "def", "scalability_analysis_on_features_tmd", "(", "feature_percentages", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "56", ")", "\n", "\n", "print", "(", "\"Starting scalability analysis on features for The Movies Dataset.\"", ")", "\n", "\n", "##################################################", "\n", "# Load essential data", "\n", "\n", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", "=", "load_essential_data_tmd", "(", ")", "\n", "\n", "return", "scalability_analysis_on_features", "(", "feature_percentages", ",", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", ",", "\n", "TMD_ALPHA", ",", "TMD_BETA", ",", "TMD_STRENGTH", ",", "TMD_PERCENTAGE", ",", "n_samples", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_items_xing": [[110, 122], ["numpy.random.seed", "print", "scalability_analysis.load_essential_data_xing", "scalability_analysis.scalability_analysis_on_items"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.load_essential_data_xing", "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_items"], ["", "def", "scalability_analysis_on_items_xing", "(", "item_percentages", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "56", ")", "\n", "\n", "print", "(", "\"Starting scalability analysis on items for Xing Challenge 2017.\"", ")", "\n", "\n", "##################################################", "\n", "# Load essential data", "\n", "\n", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", "=", "load_essential_data_xing", "(", ")", "\n", "\n", "return", "scalability_analysis_on_items", "(", "item_percentages", ",", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", ",", "XING_ALPHA", ",", "\n", "XING_BETA", ",", "XING_STRENGTH", ",", "XING_PERCENTAGE", ",", "n_samples", "=", "10", ",", "hybrid", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_features_xing": [[124, 137], ["numpy.random.seed", "print", "scalability_analysis.load_essential_data_xing", "scalability_analysis.scalability_analysis_on_features"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.load_essential_data_xing", "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_features"], ["", "def", "scalability_analysis_on_features_xing", "(", "feature_percentages", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "56", ")", "\n", "\n", "print", "(", "\"Starting scalability analysis on features for Xing Challenge 2017.\"", ")", "\n", "\n", "##################################################", "\n", "# Load essential data", "\n", "\n", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", "=", "load_essential_data_xing", "(", ")", "\n", "\n", "return", "scalability_analysis_on_features", "(", "feature_percentages", ",", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", ",", "\n", "XING_ALPHA", ",", "XING_BETA", ",", "XING_STRENGTH", ",", "XING_PERCENTAGE", ",", "n_samples", "=", "10", ",", "\n", "hybrid", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_items": [[139, 179], ["print", "numpy.arange", "numpy.random.shuffle", "print", "int", "scalability_analysis.build_CQFS_model", "range", "str"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.build_CQFS_model"], ["", "def", "scalability_analysis_on_items", "(", "item_percentages", ",", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", ",", "alpha", ",", "beta", ",", "\n", "combination_strength", ",", "percentage", ",", "vartype", "=", "'BINARY'", ",", "n_samples", "=", "1", ",", "hybrid", "=", "True", ",", "\n", "topology", "=", "'pegasus'", ")", ":", "\n", "    ", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "##################################################", "\n", "# Select items", "\n", "\n", "items", "=", "np", ".", "arange", "(", "n_items", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "items", ")", "\n", "item_mapper", "=", "{", "i", ":", "items", "[", "i", "]", "for", "i", "in", "range", "(", "n_items", ")", "}", "\n", "\n", "timings", "=", "{", "\n", "'metadata'", ":", "{", "\n", "'items'", ":", "items", ",", "\n", "'item_mapper'", ":", "item_mapper", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "for", "p", "in", "item_percentages", ":", "\n", "        ", "print", "(", "f\"Percentage: {p * 100:.2f}.\"", ")", "\n", "\n", "k_items", "=", "int", "(", "p", "*", "n_items", ")", "\n", "k_indices", "=", "items", "[", ":", "k_items", "]", "\n", "\n", "##################################################", "\n", "# Compute new data structures", "\n", "\n", "new_URM_train_last_test", "=", "URM_train_last_test", "[", ":", ",", "k_indices", "]", "\n", "new_ICM_train", "=", "ICM_train", "[", "k_indices", "]", "\n", "\n", "##################################################", "\n", "# Scalability analysis", "\n", "\n", "timings", "[", "str", "(", "p", ")", "]", "=", "build_CQFS_model", "(", "dataset_name", ",", "new_ICM_train", ",", "new_URM_train_last_test", ",", "alpha", ",", "beta", ",", "\n", "combination_strength", ",", "percentage", ",", "vartype", "=", "vartype", ",", "n_samples", "=", "n_samples", ",", "\n", "hybrid", "=", "hybrid", ",", "topology", "=", "topology", ")", "\n", "\n", "", "return", "timings", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.scalability_analysis_on_features": [[181, 220], ["print", "numpy.arange", "numpy.random.shuffle", "print", "int", "scalability_analysis.build_CQFS_model", "range", "str"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.build_CQFS_model"], ["", "def", "scalability_analysis_on_features", "(", "feature_percentages", ",", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", ",", "alpha", ",", "beta", ",", "\n", "combination_strength", ",", "percentage", ",", "vartype", "=", "'BINARY'", ",", "n_samples", "=", "1", ",", "hybrid", "=", "True", ",", "\n", "topology", "=", "'pegasus'", ")", ":", "\n", "    ", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "##################################################", "\n", "# Select features", "\n", "\n", "features", "=", "np", ".", "arange", "(", "n_features", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "features", ")", "\n", "feature_mapper", "=", "{", "i", ":", "features", "[", "i", "]", "for", "i", "in", "range", "(", "n_features", ")", "}", "\n", "\n", "timings", "=", "{", "\n", "'metadata'", ":", "{", "\n", "'features'", ":", "features", ",", "\n", "'feature_mapper'", ":", "feature_mapper", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "for", "p", "in", "feature_percentages", ":", "\n", "        ", "print", "(", "f\"Percentage: {p * 100:.2f}.\"", ")", "\n", "\n", "k_features", "=", "int", "(", "p", "*", "n_features", ")", "\n", "k_indices", "=", "features", "[", ":", "k_features", "]", "\n", "\n", "##################################################", "\n", "# Compute new data structures", "\n", "\n", "new_ICM_train", "=", "ICM_train", "[", ":", ",", "k_indices", "]", "\n", "\n", "##################################################", "\n", "# Scalability analysis", "\n", "\n", "timings", "[", "str", "(", "p", ")", "]", "=", "build_CQFS_model", "(", "dataset_name", ",", "new_ICM_train", ",", "URM_train_last_test", ",", "alpha", ",", "beta", ",", "\n", "combination_strength", ",", "percentage", ",", "vartype", "=", "vartype", ",", "n_samples", "=", "n_samples", ",", "\n", "hybrid", "=", "hybrid", ",", "topology", "=", "topology", ")", "\n", "\n", "", "return", "timings", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.load_essential_data_tmd": [[222, 264], ["recsys.Data_manager.TheMoviesDatasetReader", "recsys.Data_manager.TheMoviesDatasetReader.load_data", "data_reader.load_data.get_dataset_name", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.load_data", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_cold_split", "utils.sparse.merge_sparse_matrices().tocsr", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_ICM_from_name", "utils.recsys.remove_ICM_item_interactions", "numpy.alltrue", "numpy.ediff1d", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "utils.sparse.merge_sparse_matrices", "len", "data_splitter.get_ICM_from_name.tocsc", "URM_test.tocsc"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_cold_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.remove_ICM_item_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices"], ["", "def", "load_essential_data_tmd", "(", ")", ":", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "# Instantiate the DataReader and load the data", "\n", "    ", "data_reader", "=", "TheMoviesDatasetReader", "(", ")", "\n", "dataset", "=", "data_reader", ".", "load_data", "(", ")", "\n", "dataset_name", "=", "dataset", ".", "get_dataset_name", "(", ")", "\n", "\n", "# Split the data into train, validation and test (70, 10, 20) through the DataSplitter", "\n", "# The test and validation splits are cold items splits", "\n", "data_splitter", "=", "DataSplitter_Cold_items", "(", "data_reader", ")", "\n", "data_splitter", ".", "load_data", "(", ")", "\n", "\n", "# Get the cold split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "data_splitter", ".", "get_cold_split", "(", ")", "\n", "\n", "# Create the last test URM by merging the train and validation matrices", "\n", "URM_train_last_test", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "# Get the original ICM", "\n", "ICM_name", "=", "'ICM_metadata'", "\n", "unfiltered_ICM_train", "=", "data_splitter", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "\n", "# Filter the ICM removing all the features with less than 5 interactions", "\n", "features_with_more_than_5_interactions", "=", "np", ".", "ediff1d", "(", "unfiltered_ICM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", ">=", "5", "\n", "original_ICM_train", "=", "unfiltered_ICM_train", "[", ":", ",", "features_with_more_than_5_interactions", "]", "\n", "\n", "# Remove cold items interactions from the ICM", "\n", "test_items", "=", "np", ".", "ediff1d", "(", "URM_test", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "test_items", "=", "np", ".", "arange", "(", "len", "(", "test_items", ")", ")", "[", "test_items", "]", "\n", "ICM_train", "=", "remove_ICM_item_interactions", "(", "original_ICM_train", ",", "test_items", ")", "\n", "\n", "# Check if the removal was correct", "\n", "no_ICM_interaction_item_mask", "=", "np", ".", "ediff1d", "(", "ICM_train", ".", "indptr", ")", "==", "0", "\n", "assert", "np", ".", "alltrue", "(", "\n", "no_ICM_interaction_item_mask", "[", "test_items", "]", ")", ",", "\"Test items were not correctly removed from the train ICM.\"", "\n", "\n", "return", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.load_essential_data_xing": [[266, 290], ["data.DataLoader.XingChallenge2017Loader", "data.DataLoader.XingChallenge2017Loader.load_data", "data.DataLoader.XingChallenge2017Loader.get_dataset_name", "data.DataLoader.XingChallenge2017Loader.get_cold_split", "utils.sparse.merge_sparse_matrices().tocsr", "data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name", "print", "utils.sparse.merge_sparse_matrices"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_cold_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices"], ["", "def", "load_essential_data_xing", "(", ")", ":", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "# Load data", "\n", "    ", "data_loader", "=", "XingChallenge2017Loader", "(", ")", "\n", "data_loader", ".", "load_data", "(", ")", "\n", "dataset_name", "=", "data_loader", ".", "get_dataset_name", "(", ")", "\n", "\n", "# Get the cold split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "data_loader", ".", "get_cold_split", "(", ")", "\n", "\n", "# Create the last test URM by merging the train and validation matrices", "\n", "URM_train_last_test", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "ICM_name", "=", "'ICM_all'", "\n", "ICM_train", ",", "original_ICM_train", "=", "data_loader", ".", "get_ICM_train_from_name", "(", "ICM_name", ",", "return_original", "=", "True", ")", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "return", "dataset_name", ",", "URM_train_last_test", ",", "ICM_train", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.build_CQFS_model": [[292, 503], ["recsys.Base.Similarity.Cython.Compute_Similarity_Cython.Compute_Similarity_Cython", "recsys.Base.Similarity.Cython.Compute_Similarity_Cython.Compute_Similarity_Cython.compute_similarity", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "recsys.Recommender_import_list.ItemKNNCFRecommender", "recsys.Recommender_import_list.ItemKNNCFRecommender.fit", "print", "int", "print", "time.time", "CBF_Similarity.compute_similarity.copy", "numpy.ones_like", "S_CF.astype", "CBF_Similarity.compute_similarity.astype", "time.time", "S_CBF.copy.multiply", "time.time", "S_CBF.astype.multiply", "S_CBF.copy.multiply", "time.time", "IPM.eliminate_zeros", "time.time", "IFPM.eliminate_zeros", "FPM.eliminate_zeros", "time.time", "dimod.as_bqm", "time.time", "dimod.generators.combinations", "dimod.AdjVectorBQM", "dimod.AdjVectorBQM.update", "time.time", "dimod.AdjVectorBQM.normalize", "range", "print", "neal.SimulatedAnnealingSampler", "range", "time.time", "time.time", "time.time", "time.time", "FPM.toarray", "time.time", "time.time", "time.time", "time.time", "print", "utils.samplers.get_hybrid_from_topology", "print", "core.CQFSSampler.CQFSEmbedding", "core.CQFSSampler.CQFSEmbedding.get_embedding", "core.CQFSSampler.CQFSSampler", "time.time", "core.CQFSSampler.CQFSSampler.sample", "responses.append", "response_times.append", "sampling_times.append", "network_times.append", "time.sleep", "time.time", "neal.SimulatedAnnealingSampler.sample", "sa_responses.append", "sa_response_times.append", "time.time", "scalability_analysis.__get_sampling_time_from_response", "pow", "solver.sample.to_serializable", "time.time", "sa_solver.sample.to_serializable"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.samplers.get_hybrid_from_topology", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.EmbeddingGroup.get_embedding", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample", "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.__get_sampling_time_from_response"], ["", "def", "build_CQFS_model", "(", "dataset_name", ",", "ICM_train", ",", "URM_train_last_test", ",", "alpha", ",", "beta", ",", "combination_strength", ",", "percentage", ",", "\n", "vartype", "=", "'BINARY'", ",", "n_samples", "=", "1", ",", "hybrid", "=", "True", ",", "topology", "=", "'pegasus'", ")", ":", "\n", "##################################################", "\n", "# Content-based structure computation", "\n", "\n", "    ", "topK", ",", "_", "=", "ICM_train", ".", "shape", "\n", "CBF_Similarity", "=", "Compute_Similarity_Cython", "(", "ICM_train", ".", "T", ",", "topK", "=", "topK", ",", "shrink", "=", "0", ",", "normalize", "=", "False", ",", "\n", "similarity", "=", "'cosine'", ")", "\n", "S_CBF", "=", "CBF_Similarity", ".", "compute_similarity", "(", ")", "\n", "\n", "##################################################", "\n", "# Collaborative filtering model training", "\n", "\n", "# Name of the experiment and output results folder path", "\n", "cf_recommender_name", "=", "ItemKNNCFRecommender", ".", "RECOMMENDER_NAME", "\n", "cf_path", "=", "f\"../results/{dataset_name}/{cf_recommender_name}/\"", "\n", "cf_dataIO", "=", "DataIO", "(", "cf_path", ")", "\n", "\n", "cf_metadata", "=", "f\"{cf_recommender_name}_cosine_metadata.zip\"", "\n", "cf_dict", "=", "cf_dataIO", ".", "load_data", "(", "cf_metadata", ")", "\n", "cf_best_hyperparameters", "=", "cf_dict", "[", "'hyperparameters_best'", "]", "\n", "\n", "cf_recommender", "=", "ItemKNNCFRecommender", "(", "URM_train_last_test", ")", "\n", "cf_recommender", ".", "fit", "(", "**", "cf_best_hyperparameters", ")", "\n", "\n", "S_CF", "=", "cf_recommender", ".", "W_sparse", "\n", "\n", "##################################################", "\n", "# Check similarities", "\n", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "assert", "S_CF", ".", "shape", "==", "S_CBF", ".", "shape", ",", "\"The two sparse matrices have different shapes!\"", "\n", "assert", "S_CF", ".", "shape", "==", "(", "n_items", ",", "n_items", ")", ",", "\"The similarity matrices do not have the right shape.\"", "\n", "\n", "##################################################", "\n", "# CQFS model building", "\n", "\n", "# Model parameters", "\n", "k", "=", "int", "(", "percentage", "*", "n_features", ")", "\n", "\n", "print", "(", "\"Starting preprocessing...\"", ")", "\n", "\n", "# Start measuring total preprocessing time", "\n", "preprocessing_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "#########################", "\n", "# Prepare similarities", "\n", "\n", "S_CBF_ones", "=", "S_CBF", ".", "copy", "(", ")", "\n", "S_CBF_ones", ".", "data", "=", "np", ".", "ones_like", "(", "S_CBF", ".", "data", ")", "\n", "\n", "S_CF_bool", "=", "S_CF", ".", "astype", "(", "np", ".", "bool", ")", "\n", "S_CBF_bool", "=", "S_CBF", ".", "astype", "(", "np", ".", "bool", ",", "copy", "=", "True", ")", "\n", "\n", "#########################", "\n", "# Compute the bonus for similarities in common", "\n", "\n", "K_time", "=", "time", ".", "time", "(", ")", "\n", "K", "=", "S_CBF_ones", ".", "multiply", "(", "S_CF_bool", ")", "\n", "K", ".", "data", "=", "-", "K", ".", "data", "\n", "K_time", "=", "time", ".", "time", "(", ")", "-", "K_time", "\n", "\n", "#########################", "\n", "# Compute the penalization for similarities not in common", "\n", "\n", "E_time", "=", "time", ".", "time", "(", ")", "\n", "S_intersection", "=", "S_CBF_bool", ".", "multiply", "(", "S_CF_bool", ")", "\n", "E", "=", "S_CBF_bool", "-", "S_intersection", "\n", "E", "=", "S_CBF_ones", ".", "multiply", "(", "E", ")", "\n", "E_time", "=", "time", ".", "time", "(", ")", "-", "E_time", "\n", "\n", "assert", "K", ".", "nnz", "+", "E", ".", "nnz", "==", "S_CBF", ".", "nnz", ",", "\"The number of items to keep and to penalize is not correct.\"", "\n", "\n", "#########################", "\n", "# Compute the QUBO model", "\n", "\n", "# Item Penalization Matrix", "\n", "# QUBO_time = time.time()", "\n", "IPM_time", "=", "time", ".", "time", "(", ")", "\n", "IPM", "=", "alpha", "*", "K", "+", "beta", "*", "E", "\n", "IPM", ".", "eliminate_zeros", "(", ")", "\n", "IPM_time", "=", "time", ".", "time", "(", ")", "-", "IPM_time", "\n", "\n", "# Feature Penalization Matrix", "\n", "FPM_time", "=", "time", ".", "time", "(", ")", "\n", "IFPM", "=", "IPM", "*", "ICM_train", "\n", "IFPM", ".", "eliminate_zeros", "(", ")", "\n", "FPM", "=", "ICM_train", ".", "T", "*", "IFPM", "\n", "FPM", ".", "eliminate_zeros", "(", ")", "\n", "FPM_time", "=", "time", ".", "time", "(", ")", "-", "FPM_time", "\n", "\n", "BQM_conversion_time", "=", "time", ".", "time", "(", ")", "\n", "BQM", "=", "dimod", ".", "as_bqm", "(", "FPM", ".", "toarray", "(", ")", ",", "vartype", ")", "\n", "BQM_conversion_time", "=", "time", ".", "time", "(", ")", "-", "BQM_conversion_time", "\n", "# QUBO_time = time.time() - QUBO_time", "\n", "\n", "# Add combinations constraint", "\n", "BQM_time", "=", "time", ".", "time", "(", ")", "\n", "BQM_k", "=", "dimod", ".", "generators", ".", "combinations", "(", "n_features", ",", "k", ",", "strength", "=", "combination_strength", ",", "vartype", "=", "vartype", ")", "\n", "BQM_k", "=", "dimod", ".", "AdjVectorBQM", "(", "BQM_k", ")", "\n", "BQM_k", ".", "update", "(", "BQM", ")", "\n", "BQM_time", "=", "time", ".", "time", "(", ")", "-", "BQM_time", "\n", "\n", "# BQM normalization", "\n", "BQM_normalize_time", "=", "time", ".", "time", "(", ")", "\n", "BQM_k", ".", "normalize", "(", ")", "\n", "BQM_normalize_time", "=", "time", ".", "time", "(", ")", "-", "BQM_normalize_time", "\n", "\n", "preprocessing_time", "=", "time", ".", "time", "(", ")", "-", "preprocessing_time", "\n", "\n", "# ##################################################", "\n", "# # Compute statistics", "\n", "#", "\n", "# S_union = S_CF_bool + S_CBF_bool", "\n", "#", "\n", "# statistics = similarity_statistics(S_CF, S_CBF, S_intersection, S_union)", "\n", "# statistics = error_statistics(S_CF, S_CBF, N=S_union.nnz, suffix=\"_dot\", statistics=statistics)", "\n", "\n", "num_reads", "=", "1", "\n", "if", "hybrid", ":", "\n", "##################################################", "\n", "# Problem sampling with hybrid approach", "\n", "\n", "        ", "print", "(", "\"Sampling with hybrid approach.\"", ")", "\n", "\n", "solver", "=", "get_hybrid_from_topology", "(", "topology", ")", "\n", "\n", "", "else", ":", "\n", "##################################################", "\n", "# Problem sampling with QPU", "\n", "\n", "        ", "print", "(", "\"Sampling with QPU only.\"", ")", "\n", "\n", "embedder", "=", "CQFSEmbedding", "(", "qpu_topology", "=", "topology", ",", "n_embedding_cases", "=", "5", ")", "\n", "embedding", "=", "embedder", ".", "get_embedding", "(", "BQM_k", ")", "\n", "\n", "solver", "=", "CQFSSampler", "(", "embedding", ",", "qpu_topology", "=", "topology", ")", "\n", "num_reads", "=", "100", "\n", "\n", "", "properties", "=", "solver", ".", "properties", "\n", "\n", "# Setup structures", "\n", "responses", "=", "[", "]", "\n", "response_times", "=", "[", "]", "\n", "sampling_times", "=", "[", "]", "\n", "network_times", "=", "[", "]", "\n", "\n", "sa_responses", "=", "[", "]", "\n", "sa_response_times", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "# Measure total sampling time", "\n", "        ", "response_time", "=", "time", ".", "time", "(", ")", "\n", "response", "=", "solver", ".", "sample", "(", "BQM_k", ")", "\n", "response_time", "=", "time", ".", "time", "(", ")", "-", "response_time", "\n", "\n", "sampling_time", "=", "__get_sampling_time_from_response", "(", "response", ",", "hybrid", ")", "*", "pow", "(", "10", ",", "-", "6", ")", "\n", "network_time", "=", "response_time", "-", "sampling_time", "\n", "\n", "responses", ".", "append", "(", "response", ".", "to_serializable", "(", ")", ")", "\n", "response_times", ".", "append", "(", "response_time", ")", "\n", "sampling_times", ".", "append", "(", "sampling_time", ")", "\n", "network_times", ".", "append", "(", "network_time", ")", "\n", "\n", "time", ".", "sleep", "(", "60", ")", "\n", "\n", "##################################################", "\n", "# Problem sampling with simulated annealing", "\n", "\n", "", "print", "(", "\"Sampling with simulated annealing.\"", ")", "\n", "\n", "sa_solver", "=", "SimulatedAnnealingSampler", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "# Measure total sampling time", "\n", "        ", "sa_response_time", "=", "time", ".", "time", "(", ")", "\n", "sa_response", "=", "sa_solver", ".", "sample", "(", "BQM_k", ",", "num_reads", "=", "num_reads", ")", "\n", "sa_response_time", "=", "time", ".", "time", "(", ")", "-", "sa_response_time", "\n", "\n", "sa_responses", ".", "append", "(", "sa_response", ".", "to_serializable", "(", ")", ")", "\n", "sa_response_times", ".", "append", "(", "sa_response_time", ")", "\n", "\n", "##################################################", "\n", "# Return timings", "\n", "\n", "", "timings", "=", "{", "\n", "'preprocessing_time'", ":", "preprocessing_time", ",", "\n", "'K_time'", ":", "K_time", ",", "\n", "'E_time'", ":", "E_time", ",", "\n", "\n", "'IPM_time'", ":", "IPM_time", ",", "\n", "'FPM_time'", ":", "FPM_time", ",", "\n", "'BQM_conversion_time'", ":", "BQM_conversion_time", ",", "\n", "'BQM_time'", ":", "BQM_time", ",", "\n", "'BQM_normalize_time'", ":", "BQM_normalize_time", ",", "\n", "\n", "'response_time'", ":", "response_times", ",", "\n", "'sampling_time'", ":", "sampling_times", ",", "\n", "'network_time'", ":", "network_times", ",", "\n", "\n", "'sa_response_time'", ":", "sa_response_times", ",", "\n", "\n", "'responses'", ":", "responses", ",", "\n", "'sa_responses'", ":", "sa_responses", ",", "\n", "\n", "'properties'", ":", "properties", ",", "\n", "}", "\n", "\n", "return", "timings", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.scalability_analysis.__get_sampling_time_from_response": [[505, 509], ["None"], "function", ["None"], ["", "def", "__get_sampling_time_from_response", "(", "response", ",", "hybrid", ")", ":", "\n", "    ", "if", "hybrid", ":", "\n", "        ", "return", "response", ".", "info", "[", "'run_time'", "]", "\n", "", "return", "response", ".", "info", "[", "'timing'", "]", "[", "'qpu_access_time'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.train_CQFS.train_CQFS": [[13, 114], ["data_loader.load_data", "data_loader.get_dataset_name", "data_loader.get_cold_split", "utils.sparse.merge_sparse_matrices().tocsr", "data_loader.get_ICM_train_from_name", "print", "recsys.Base.Similarity.Cython.Compute_Similarity_Cython.Compute_Similarity_Cython", "recsys.Base.Similarity.Cython.Compute_Similarity_Cython.Compute_Similarity_Cython.compute_similarity", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.arange", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "CF_recommender_class", "CF_recommender_class.fit", "CF_recommender_class.W_sparse.copy", "utils.statistics.warm_similarity_statistics", "core.CQFS.CQFS", "core.CQFSTrainer.CQFSTrainer", "core.CQFSTrainer.CQFSTrainer.train_many", "core.CQFSTrainer.CQFSTrainer.compute_statistics", "utils.sparse.merge_sparse_matrices", "len", "len", "numpy.ediff1d", "numpy.ediff1d", "URM_train.tocsc", "merge_sparse_matrices().tocsr.tocsc", "merge_sparse_matrices().tocsr.tocsc"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_cold_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.warm_similarity_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.train_many", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.compute_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices"], ["def", "train_CQFS", "(", "data_loader", ":", "DataLoader", ",", "ICM_name", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "solver_class", ",", "\n", "CF_recommender_classes", ",", "parameter_product", "=", "True", ",", "cpu_count_div", "=", "2", ",", "cpu_count_sub", "=", "0", ")", ":", "\n", "    ", "N_CASES", "=", "50", "\n", "N_RAN_STARTS", "=", "15", "\n", "SIMILARITY_TYPE", "=", "'cosine'", "\n", "\n", "CUTOFF_VALIDATION", "=", "[", "10", "]", "\n", "CUTOFF_TEST", "=", "[", "5", ",", "10", ",", "20", ",", "50", "]", "\n", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "# Load data", "\n", "data_loader", ".", "load_data", "(", ")", "\n", "dataset_name", "=", "data_loader", ".", "get_dataset_name", "(", ")", "\n", "\n", "# Get the cold split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "data_loader", ".", "get_cold_split", "(", ")", "\n", "\n", "# Create the last test URM by merging the train and validation matrices", "\n", "URM_train_validation", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "ICM_train", ",", "original_ICM_train", "=", "data_loader", ".", "get_ICM_train_from_name", "(", "ICM_name", ",", "return_original", "=", "True", ")", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "##################################################", "\n", "# Evaluators instantiation", "\n", "\n", "# Obtain the array of train item indices, to be ignored during validation", "\n", "train_warm_item_mask", "=", "np", ".", "ediff1d", "(", "URM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "train_warm_item_mask", "=", "np", ".", "arange", "(", "len", "(", "train_warm_item_mask", ")", ")", "[", "train_warm_item_mask", "]", "\n", "\n", "# Obtain the array of train and validation item indices, to be ignored during testing", "\n", "train_validation_warm_item_mask", "=", "np", ".", "ediff1d", "(", "URM_train_validation", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "train_validation_warm_item_mask", "=", "np", ".", "arange", "(", "len", "(", "train_validation_warm_item_mask", ")", ")", "[", "train_validation_warm_item_mask", "]", "\n", "\n", "##################################################", "\n", "# Quantum Feature Selection", "\n", "\n", "# The CBF similarity used for the selection is a simple dot product", "\n", "topK", "=", "n_items", "\n", "CBF_Similarity", "=", "Compute_Similarity_Cython", "(", "ICM_train", ".", "T", ",", "topK", "=", "topK", ",", "shrink", "=", "0", ",", "normalize", "=", "False", ",", "similarity", "=", "'cosine'", ")", "\n", "# S_CBF_original = CBF_Similarity.compute_similarity()", "\n", "S_CBF", "=", "CBF_Similarity", ".", "compute_similarity", "(", ")", "\n", "\n", "for", "CF_recommender_class", "in", "CF_recommender_classes", ":", "\n", "##################################################", "\n", "# Setup collaborative filtering recommender", "\n", "\n", "# Get Collaborative Filtering best hyperparameters", "\n", "        ", "cf_recommender_name", "=", "CF_recommender_class", ".", "RECOMMENDER_NAME", "\n", "cf_path", "=", "f\"../../results/{dataset_name}/{cf_recommender_name}/\"", "\n", "cf_dataIO", "=", "DataIO", "(", "cf_path", ")", "\n", "cf_similarity", "=", "\"cosine_\"", "if", "CF_recommender_class", "is", "ItemKNNCFRecommender", "else", "\"\"", "\n", "cf_dict", "=", "cf_dataIO", ".", "load_data", "(", "f\"{cf_recommender_name}_{cf_similarity}metadata.zip\"", ")", "\n", "cf_best_hyperparameters", "=", "cf_dict", "[", "'hyperparameters_best'", "]", "\n", "\n", "# Create Collaborative Filtering Recommender and fit with the best hyperparameters", "\n", "CF_recommender", "=", "CF_recommender_class", "(", "URM_train_validation", ")", "\n", "CF_recommender", ".", "fit", "(", "**", "cf_best_hyperparameters", ")", "\n", "\n", "# Get CF and CBF Similarity Matrices", "\n", "S_CF", "=", "CF_recommender", ".", "W_sparse", ".", "copy", "(", ")", "\n", "# S_CBF = S_CBF_original.copy()", "\n", "\n", "assert", "S_CF", ".", "shape", "==", "S_CBF", ".", "shape", ",", "\"The two sparse matrices have different shapes!\"", "\n", "assert", "S_CF", ".", "shape", "==", "(", "n_items", ",", "n_items", ")", ",", "\"The similarity matrices do not have the right shape.\"", "\n", "\n", "##################################################", "\n", "# Setup CQFS", "\n", "\n", "# Get the warm items (CF) and the items with features (CBF)", "\n", "CF_warm_items", "=", "np", ".", "ediff1d", "(", "URM_train_validation", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "CBF_items_with_interactions", "=", "np", ".", "ediff1d", "(", "ICM_train", ".", "indptr", ")", "!=", "0", "\n", "\n", "# Compute warm items statistics", "\n", "statistics", "=", "warm_similarity_statistics", "(", "S_CF", ",", "S_CBF", ",", "CF_warm_items", "=", "CF_warm_items", ",", "\n", "CBF_items_with_interactions", "=", "CBF_items_with_interactions", ")", "\n", "\n", "base_folder_path", "=", "f\"../../results/{dataset_name}/{ICM_name}/{cf_recommender_name}/\"", "\n", "CQFS_selector", "=", "CQFS", "(", "ICM_train", ",", "S_CF", ",", "S_CBF", ",", "base_folder_path", ",", "solver_class", "=", "solver_class", ",", "\n", "statistics", "=", "statistics", ")", "\n", "\n", "##################################################", "\n", "# Train CQFS ItemKNNCBFRecommender", "\n", "\n", "CQFS_trainer", "=", "CQFSTrainer", "(", "CQFS_selector", ",", "URM_train", ",", "URM_validation", ",", "URM_train_validation", ",", "URM_test", ",", "ICM_train", ",", "\n", "original_ICM_train", ",", "ICM_name", ",", "dataset_name", ",", "cf_recommender_name", ",", "\n", "cutoff_list_validation", "=", "CUTOFF_VALIDATION", ",", "cutoff_list_test", "=", "CUTOFF_TEST", ",", "\n", "ignore_items_validation", "=", "train_warm_item_mask", ",", "\n", "ignore_items_test", "=", "train_validation_warm_item_mask", ",", "n_cases", "=", "N_CASES", ",", "\n", "n_random_starts", "=", "N_RAN_STARTS", ",", "similarity_type_list", "=", "[", "SIMILARITY_TYPE", "]", ",", "\n", "parallelize", "=", "True", ")", "\n", "\n", "CQFS_trainer", ".", "train_many", "(", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "parameter_product", "=", "parameter_product", ",", "\n", "cpu_count_div", "=", "cpu_count_div", ",", "cpu_count_sub", "=", "cpu_count_sub", ")", "\n", "CQFS_trainer", ".", "compute_statistics", "(", "S_CF", ",", "S_CBF", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CBF.baseline_CBF": [[10, 60], ["data_loader.load_data", "data_loader.get_dataset_name", "data_loader.get_both_splits", "utils.sparse.merge_sparse_matrices().tocsr", "data_loader.get_ICM_train_from_name", "print", "recsys.Base.Evaluation.Evaluator.EvaluatorHoldout", "recsys.Base.Evaluation.Evaluator.EvaluatorHoldout", "recsys.ParameterTuning.run_parameter_search.runParameterSearch_Content", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.arange", "utils.sparse.merge_sparse_matrices", "len", "len", "URM_train.tocsc", "merge_sparse_matrices().tocsr.tocsc"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_both_splits", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_Content", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices"], ["def", "baseline_CBF", "(", "data_loader", ":", "DataLoader", ",", "ICM_name", ",", "n_cases", "=", "50", ",", "n_random_starts", "=", "15", ",", "similarity_type_list", "=", "[", "'cosine'", "]", ")", ":", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "# Load data", "\n", "    ", "data_loader", ".", "load_data", "(", ")", "\n", "dataset_name", "=", "data_loader", ".", "get_dataset_name", "(", ")", "\n", "\n", "# Get the split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", ",", "URM_train_warm", ",", "URM_validation_warm", "=", "data_loader", ".", "get_both_splits", "(", ")", "\n", "\n", "# Create the last test URM by merging the train and validation matrices", "\n", "URM_train_last_test", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "# Get the original ICM", "\n", "ICM_train", ",", "original_ICM_train", "=", "data_loader", ".", "get_ICM_train_from_name", "(", "ICM_name", ",", "return_original", "=", "True", ")", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n", "##################################################", "\n", "# Evaluators instantiation", "\n", "\n", "# Obtain the array of train item indices, to be ignored during validation", "\n", "train_warm_item_mask", "=", "np", ".", "ediff1d", "(", "URM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "train_warm_item_mask", "=", "np", ".", "arange", "(", "len", "(", "train_warm_item_mask", ")", ")", "[", "train_warm_item_mask", "]", "\n", "\n", "# Obtain the array of train and validation item indices, to be ignored during testing", "\n", "train_validation_warm_item_mask", "=", "np", ".", "ediff1d", "(", "URM_train_last_test", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "train_validation_warm_item_mask", "=", "np", ".", "arange", "(", "len", "(", "train_validation_warm_item_mask", ")", ")", "[", "train_validation_warm_item_mask", "]", "\n", "\n", "# Create the evaluator objects for validation and test", "\n", "# Train items are ignored during validation; train and validation items are ignored during testing", "\n", "evaluator_validation", "=", "EvaluatorHoldout", "(", "URM_validation", ",", "cutoff_list", "=", "[", "10", "]", ",", "ignore_items", "=", "train_warm_item_mask", ")", "\n", "evaluator_test", "=", "EvaluatorHoldout", "(", "URM_test", ",", "cutoff_list", "=", "[", "5", ",", "10", ",", "20", ",", "50", "]", ",", "\n", "ignore_items", "=", "train_validation_warm_item_mask", ")", "\n", "\n", "##################################################", "\n", "# Content-based Parameter Tuning", "\n", "\n", "output_folder_path", "=", "f\"../../results/{dataset_name}/{ICM_name}/{ItemKNNCBFRecommender.RECOMMENDER_NAME}/\"", "\n", "\n", "runParameterSearch_Content", "(", "ItemKNNCBFRecommender", ",", "URM_train", ",", "ICM_train", ",", "ICM_name", ",", "\n", "URM_train_last_test", "=", "URM_train_last_test", ",", "ICM_last_test", "=", "original_ICM_train", ",", "\n", "n_cases", "=", "n_cases", ",", "n_random_starts", "=", "n_random_starts", ",", "resume_from_saved", "=", "True", ",", "\n", "save_model", "=", "'best'", ",", "evaluator_validation", "=", "evaluator_validation", ",", "\n", "evaluator_test", "=", "evaluator_test", ",", "output_folder_path", "=", "output_folder_path", ",", "\n", "similarity_type_list", "=", "similarity_type_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike_a.baseline_TFIDF.main": [[5, 9], ["data.DataLoader.CiteULike_aLoader", "experiments.baseline_TFIDF.baseline_TFIDF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_TFIDF.baseline_TFIDF"], ["from", "data", ".", "DataLoader", "import", "DataLoader", "\n", "from", "recsys", ".", "Base", ".", "DataIO", "import", "DataIO", "\n", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "Evaluator", "import", "EvaluatorHoldout", "\n", "from", "recsys", ".", "KNN", ".", "ItemKNNCBFRecommender", "import", "ItemKNNCBFRecommender", "\n", "from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_Content", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike_a.baseline_CFW.main": [[8, 13], ["data.DataLoader.CiteULike_aLoader", "experiments.baseline_CFW.baseline_CFW"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CFW.baseline_CFW"], ["from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_FeatureWeighting", "\n", "from", "utils", ".", "multithreading", "import", "parallelize_function", "\n", "from", "utils", ".", "recsys", "import", "remove_ICM_item_interactions", "\n", "from", "utils", ".", "sparse", "import", "merge_sparse_matrices", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike_a.CollaborativeFiltering.main": [[5, 8], ["data.DataLoader.CiteULike_aLoader", "experiments.train_CF.train_CF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.train_CF.train_CF"], ["def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "train_CF", "(", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike_a.CQFSTrainer.main": [[12, 33], ["data.DataLoader.CiteULike_aLoader", "experiments.train_CQFS.train_CQFS"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.train_CQFS.train_CQFS"], ["def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "ICM_name", "=", "'ICM_title_abstract'", "\n", "\n", "percentages", "=", "[", "40", ",", "60", ",", "80", ",", "95", "]", "\n", "alphas", "=", "[", "1", "]", "\n", "betas", "=", "[", "1", ",", "1e-1", ",", "1e-2", ",", "1e-3", ",", "1e-4", "]", "\n", "combination_strengths", "=", "[", "1", ",", "10", ",", "100", ",", "1000", ",", "10000", "]", "\n", "\n", "solver_class", "=", "LeapHybridSampler", "\n", "# solver_class = SimulatedAnnealingSampler", "\n", "# solver_class = CQFSSimulatedAnnealingSampler", "\n", "# solver_class = CQFSQBSolvSampler", "\n", "\n", "CF_recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "\n", "cpu_count_div", "=", "1", "\n", "cpu_count_sub", "=", "0", "\n", "\n", "train_CQFS", "(", "data_loader", ",", "ICM_name", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "solver_class", ",", "\n", "CF_recommender_classes", ",", "cpu_count_div", "=", "cpu_count_div", ",", "cpu_count_sub", "=", "cpu_count_sub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike_a.baseline_CBF.main": [[5, 9], ["data.DataLoader.CiteULike_aLoader", "experiments.baseline_CBF.baseline_CBF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CBF.baseline_CBF"], ["from", "recsys", ".", "KNN", ".", "ItemKNNCBFRecommender", "import", "ItemKNNCBFRecommender", "\n", "from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_Content", "\n", "from", "utils", ".", "sparse", "import", "merge_sparse_matrices", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike_a.CQFS.main": [[13, 43], ["data.DataLoader.CiteULike_aLoader", "experiments.run_CQFS.run_CQFS"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.run_CQFS.run_CQFS"], ["def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "ICM_name", "=", "'ICM_title_abstract'", "\n", "\n", "##################################################", "\n", "# CQFS hyperparameters and settings", "\n", "\n", "percentages", "=", "[", "40", ",", "60", ",", "80", ",", "95", "]", "\n", "alphas", "=", "[", "1", "]", "\n", "betas", "=", "[", "1", ",", "1e-1", ",", "1e-2", ",", "1e-3", ",", "1e-4", "]", "\n", "combination_strengths", "=", "[", "1", ",", "10", ",", "100", ",", "1000", ",", "10000", "]", "\n", "\n", "parameter_product", "=", "True", "\n", "\n", "##################################################", "\n", "# Samplers", "\n", "\n", "solver_class", "=", "LeapHybridSampler", "\n", "# solver_class = SimulatedAnnealingSampler", "\n", "# solver_class = CQFSSimulatedAnnealingSampler", "\n", "# solver_class = CQFSQBSolvSampler", "\n", "# solver_class = CQFSQBSolvTabuSampler", "\n", "\n", "CF_recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "\n", "save_FPMs", "=", "False", "\n", "save_BQMs", "=", "False", "\n", "\n", "run_CQFS", "(", "data_loader", ",", "ICM_name", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "solver_class", ",", "\n", "CF_recommender_classes", ",", "save_FPMs", ",", "save_BQMs", ",", "parameter_product", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.baseline_TFIDF.main": [[5, 9], ["data.DataLoader.XingChallenge2017Loader", "experiments.baseline_TFIDF.baseline_TFIDF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_TFIDF.baseline_TFIDF"], ["from", "data", ".", "DataLoader", "import", "DataLoader", "\n", "from", "recsys", ".", "Base", ".", "DataIO", "import", "DataIO", "\n", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "Evaluator", "import", "EvaluatorHoldout", "\n", "from", "recsys", ".", "KNN", ".", "ItemKNNCBFRecommender", "import", "ItemKNNCBFRecommender", "\n", "from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_Content", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.baseline_CFW.main": [[8, 13], ["data.DataLoader.XingChallenge2017Loader", "experiments.baseline_CFW.baseline_CFW"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CFW.baseline_CFW"], ["from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_FeatureWeighting", "\n", "from", "utils", ".", "multithreading", "import", "parallelize_function", "\n", "from", "utils", ".", "recsys", "import", "remove_ICM_item_interactions", "\n", "from", "utils", ".", "sparse", "import", "merge_sparse_matrices", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.CollaborativeFiltering.main": [[5, 8], ["data.DataLoader.XingChallenge2017Loader", "experiments.train_CF.train_CF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.train_CF.train_CF"], ["def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "train_CF", "(", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.CQFSTrainer.main": [[11, 30], ["data.DataLoader.XingChallenge2017Loader", "experiments.train_CQFS.train_CQFS"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.train_CQFS.train_CQFS"], ["\n", "def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "ICM_name", "=", "'ICM_title_abstract'", "\n", "\n", "percentages", "=", "[", "40", ",", "60", ",", "80", ",", "95", "]", "\n", "alphas", "=", "[", "1", "]", "\n", "betas", "=", "[", "1", ",", "1e-1", ",", "1e-2", ",", "1e-3", ",", "1e-4", "]", "\n", "combination_strengths", "=", "[", "1", ",", "10", ",", "100", ",", "1000", ",", "10000", "]", "\n", "\n", "solver_class", "=", "LeapHybridSampler", "\n", "# solver_class = SimulatedAnnealingSampler", "\n", "# solver_class = CQFSSimulatedAnnealingSampler", "\n", "# solver_class = CQFSQBSolvSampler", "\n", "\n", "CF_recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "\n", "cpu_count_div", "=", "1", "\n", "cpu_count_sub", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.baseline_CBF.main": [[5, 9], ["data.DataLoader.XingChallenge2017Loader", "experiments.baseline_CBF.baseline_CBF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CBF.baseline_CBF"], ["from", "recsys", ".", "KNN", ".", "ItemKNNCBFRecommender", "import", "ItemKNNCBFRecommender", "\n", "from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_Content", "\n", "from", "utils", ".", "sparse", "import", "merge_sparse_matrices", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.CQFS.main": [[11, 38], ["data.DataLoader.XingChallenge2017Loader", "experiments.run_CQFS.run_CQFS"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.run_CQFS.run_CQFS"], ["\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "ICM_name", "=", "'ICM_title_abstract'", "\n", "\n", "##################################################", "\n", "# CQFS hyperparameters and settings", "\n", "\n", "percentages", "=", "[", "40", ",", "60", ",", "80", ",", "95", "]", "\n", "alphas", "=", "[", "1", "]", "\n", "betas", "=", "[", "1", ",", "1e-1", ",", "1e-2", ",", "1e-3", ",", "1e-4", "]", "\n", "combination_strengths", "=", "[", "1", ",", "10", ",", "100", ",", "1000", ",", "10000", "]", "\n", "\n", "parameter_product", "=", "True", "\n", "\n", "##################################################", "\n", "# Samplers", "\n", "\n", "solver_class", "=", "LeapHybridSampler", "\n", "# solver_class = SimulatedAnnealingSampler", "\n", "# solver_class = CQFSSimulatedAnnealingSampler", "\n", "# solver_class = CQFSQBSolvSampler", "\n", "# solver_class = CQFSQBSolvTabuSampler", "\n", "\n", "CF_recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "\n", "save_FPMs", "=", "False", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.XingChallenge2017Reader.XingChallenge2017Reader._get_dataset_name_root": [[21, 23], ["None"], "methods", ["None"], ["def", "_get_dataset_name_root", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "DATASET_SUBFOLDER", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.XingChallenge2017Reader.XingChallenge2017Reader._load_from_original_file": [[24, 100], ["XingChallenge2017Reader.XingChallenge2017Reader._print", "XingChallenge2017Reader.XingChallenge2017Reader._print", "XingChallenge2017Reader.XingChallenge2017Reader._load_ICM", "XingChallenge2017Reader.XingChallenge2017Reader._print", "XingChallenge2017Reader.XingChallenge2017Reader._load_interactions", "URM_positive.copy", "numpy.ones_like", "recsys.Data_manager.Dataset.Dataset", "XingChallenge2017Reader.XingChallenge2017Reader._print", "shutil.rmtree", "XingChallenge2017Reader.XingChallenge2017Reader._print", "zipfile.ZipFile", "zipfile.ZipFile.extract", "zipfile.ZipFile.extract", "XingChallenge2017Reader.XingChallenge2017Reader._print", "XingChallenge2017Reader.XingChallenge2017Reader._print", "XingChallenge2017Reader.XingChallenge2017Reader._print", "FileNotFoundError", "XingChallenge2017Reader.XingChallenge2017Reader._get_dataset_name", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.XingChallenge2017Reader.XingChallenge2017Reader._load_ICM", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.XingChallenge2017Reader.XingChallenge2017Reader._load_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "# Load data from original", "\n", "\n", "        ", "self", ".", "_print", "(", "\"Loading original data\"", ")", "\n", "\n", "compressed_zip_file_folder", "=", "self", ".", "DATASET_OFFLINE_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "decompressed_zip_file_folder", "=", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "\n", "zipFile_name", "=", "\"xing_challenge_data_2017.zip\"", "\n", "\n", "try", ":", "\n", "\n", "            ", "dataFile", "=", "zipfile", ".", "ZipFile", "(", "compressed_zip_file_folder", "+", "zipFile_name", ")", "\n", "\n", "interactions_path", "=", "dataFile", ".", "extract", "(", "\"data/interactions_14.csv\"", ",", "\n", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "\n", "ICM_path", "=", "dataFile", ".", "extract", "(", "\"data/items.csv\"", ",", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "# UCM_path = dataFile.extract(\"data/users.csv\", path=decompressed_zip_file_folder + \"decompressed/\")", "\n", "\n", "", "except", "(", "FileNotFoundError", ",", "zipfile", ".", "BadZipFile", ")", ":", "\n", "\n", "            ", "self", ".", "_print", "(", "\"Unable to find or extract data zip file.\"", ")", "\n", "self", ".", "_print", "(", "\"Automatic download not available, please ensure the ZIP data file is in folder {}.\"", ".", "format", "(", "\n", "compressed_zip_file_folder", ")", ")", "\n", "self", ".", "_print", "(", "\n", "\"Data zip file not found or damaged. You may download the data from: {}\"", ".", "format", "(", "self", ".", "DATASET_URL", ")", ")", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "compressed_zip_file_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "compressed_zip_file_folder", ")", "\n", "\n", "", "raise", "FileNotFoundError", "(", "\"Automatic download not available.\"", ")", "\n", "\n", "# print(\"XingChallenge2017Reader: Loading Impressions\")", "\n", "# self.URM_impressions = self._load_impressions(impressions_path, if_new_user = \"add\", if_new_item = \"add\")", "\n", "\n", "", "self", ".", "_print", "(", "\"Loading item content\"", ")", "\n", "ICM_all", ",", "tokenToFeatureMapper_ICM_all", ",", "self", ".", "item_original_ID_to_index", "=", "self", ".", "_load_ICM", "(", "ICM_path", ",", "\n", "if_new_item", "=", "\"add\"", ")", "\n", "\n", "self", ".", "_print", "(", "\"Loading Interactions\"", ")", "\n", "URM_positive", ",", "URM_negative", ",", "_", ",", "_", ",", "self", ".", "user_original_ID_to_index", "=", "self", ".", "_load_interactions", "(", "interactions_path", ",", "\n", "if_new_user", "=", "\"add\"", ",", "\n", "if_new_item", "=", "\"ignore\"", ")", "\n", "\n", "URM_all", "=", "URM_positive", ".", "copy", "(", ")", "\n", "URM_all", ".", "data", "=", "np", ".", "ones_like", "(", "URM_all", ".", "data", ")", "\n", "\n", "loaded_URM_dict", "=", "{", "\"URM_all\"", ":", "URM_all", ",", "\n", "\"URM_positive\"", ":", "URM_positive", ",", "\n", "\"URM_negative\"", ":", "URM_negative", ",", "\n", "# \"URM_impression\": URM_impression", "\n", "}", "\n", "\n", "loaded_ICM_dict", "=", "{", "\"ICM_all\"", ":", "ICM_all", "}", "\n", "loaded_ICM_mapper_dict", "=", "{", "\"ICM_all\"", ":", "tokenToFeatureMapper_ICM_all", "}", "\n", "\n", "loaded_dataset", "=", "Dataset", "(", "dataset_name", "=", "self", ".", "_get_dataset_name", "(", ")", ",", "\n", "URM_dictionary", "=", "loaded_URM_dict", ",", "\n", "ICM_dictionary", "=", "loaded_ICM_dict", ",", "\n", "ICM_feature_mapper_dictionary", "=", "loaded_ICM_mapper_dict", ",", "\n", "UCM_dictionary", "=", "None", ",", "\n", "UCM_feature_mapper_dictionary", "=", "None", ",", "\n", "user_original_ID_to_index", "=", "self", ".", "user_original_ID_to_index", ",", "\n", "item_original_ID_to_index", "=", "self", ".", "item_original_ID_to_index", ",", "\n", "is_implicit", "=", "self", ".", "IS_IMPLICIT", ",", "\n", ")", "\n", "\n", "self", ".", "_print", "(", "\"cleaning temporary files\"", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "self", ".", "_print", "(", "\"loading complete\"", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.XingChallenge2017Reader.XingChallenge2017Reader._load_interactions": [[101, 174], ["IncrementalSparseMatrix_FilterIDs", "open", "open.readline", "open.close", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix.copy", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix.copy", "URM_builder.get_SparseMatrix.copy.eliminate_zeros", "numpy.ones_like", "URM_builder.get_SparseMatrix.copy.eliminate_zeros", "numpy.ones_like", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix.eliminate_zeros", "line.split.split.split", "int", "IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "print", "IncrementalSparseMatrix_FilterIDs.add_data_lists"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists"], ["", "def", "_load_interactions", "(", "self", ",", "impressions_path", ",", "if_new_user", "=", "\"add\"", ",", "if_new_item", "=", "\"ignore\"", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix_FilterIDs", "\n", "\n", "URM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "self", ".", "item_original_ID_to_index", ",", "\n", "on_new_col", "=", "if_new_item", ",", "\n", "preinitialized_row_mapper", "=", "None", ",", "on_new_row", "=", "if_new_user", ")", "\n", "\n", "fileHandle", "=", "open", "(", "impressions_path", ",", "\"r\"", ")", "\n", "\n", "numCells", "=", "0", "\n", "\n", "# Remove header", "\n", "fileHandle", ".", "readline", "(", ")", "\n", "\n", "for", "line", "in", "fileHandle", ":", "\n", "\n", "            ", "if", "numCells", "%", "1000000", "==", "0", "and", "numCells", "!=", "0", ":", "\n", "                ", "print", "(", "\"Processed {} cells\"", ".", "format", "(", "numCells", ")", ")", "\n", "\n", "", "line", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "\"\"\"\n\n            Interactions that the user performed on the job posting items. Fields:\n\n            user_id ID          of the user who performed the interaction (points to users.id)\n            item_id ID          of the item on which the interaction was performed (points to items.id)\n            created_at          a unix time stamp timestamp representing the time when the interaction got created\n            interaction_type    the type of interaction that was performed on the item:\n                0 = XING showed this item to a user (= impression)\n                1 = the user clicked on the item\n                2 = the user bookmarked the item on XING\n                3 = the user clicked on the reply button or application form button that is shown on some job postings\n                4 = the user deleted a recommendation from his/her list of recommendation (clicking on \"x\") which has the effect that the recommendation will no longer been shown to the user and that a new recommendation item will be loaded and displayed to the user\n                5 = (not used) a recruiter from the items company showed interest into the user. (e.g. clicked on the profile)\n\n            \"\"\"", "\n", "\n", "user_id", "=", "line", "[", "0", "]", "\n", "item_id", "=", "line", "[", "1", "]", "\n", "created_at", "=", "line", "[", "3", "]", "\n", "\n", "interaction_type", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "if", "interaction_type", "==", "0", ":", "\n", "                ", "interaction_type", "=", "-", "1", "\n", "\n", "", "else", ":", "\n", "                ", "if", "interaction_type", "!=", "5", ":", "\n", "                    ", "URM_builder", ".", "add_data_lists", "(", "[", "user_id", "]", ",", "[", "item_id", "]", ",", "[", "interaction_type", "]", ")", "\n", "numCells", "+=", "1", "\n", "\n", "", "", "", "fileHandle", ".", "close", "(", ")", "\n", "\n", "URM_positive", "=", "URM_builder", ".", "get_SparseMatrix", "(", ")", "\n", "\n", "# Negative interactions in a separate URM", "\n", "URM_negative", "=", "URM_positive", ".", "copy", "(", ")", "\n", "URM_impression", "=", "URM_positive", ".", "copy", "(", ")", "\n", "\n", "URM_negative", ".", "data", "[", "URM_negative", ".", "data", "!=", "4", "]", "=", "0", "\n", "URM_negative", ".", "eliminate_zeros", "(", ")", "\n", "URM_negative", ".", "data", "=", "np", ".", "ones_like", "(", "URM_negative", ".", "data", ")", "\n", "\n", "URM_impression", ".", "data", "[", "URM_impression", ".", "data", "!=", "-", "1", "]", "=", "0", "\n", "URM_impression", ".", "eliminate_zeros", "(", ")", "\n", "URM_impression", ".", "data", "=", "np", ".", "ones_like", "(", "URM_impression", ".", "data", ")", "\n", "\n", "URM_positive", ".", "data", "[", "URM_positive", ".", "data", "==", "4", "]", "=", "0", "\n", "URM_positive", ".", "data", "[", "URM_positive", ".", "data", "==", "-", "1", "]", "=", "0", "\n", "URM_positive", ".", "eliminate_zeros", "(", ")", "\n", "\n", "return", "URM_positive", ",", "URM_negative", ",", "URM_impression", ",", "URM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "URM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.XingChallenge2017Reader.XingChallenge2017Reader._load_ICM": [[175, 280], ["IncrementalSparseMatrix_FilterIDs", "open", "open.readline", "open.close", "line.split.split.split", "IncrementalSparseMatrix_FilterIDs.add_single_row", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "print", "str", "str", "str", "str", "str", "str", "str", "str", "str", "title_id_list.split", "str", "discipline_id_list.split", "str", "industry_id_list.split", "str", "tags_list.split", "line[].strip"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper"], ["", "def", "_load_ICM", "(", "self", ",", "ICM_path", ",", "if_new_item", "=", "\"ignore\"", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix_FilterIDs", "\n", "\n", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "None", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "None", ",", "on_new_row", "=", "if_new_item", ")", "\n", "\n", "fileHandle", "=", "open", "(", "ICM_path", ",", "\"r\"", ")", "\n", "\n", "numCells", "=", "0", "\n", "\n", "# Remove header", "\n", "# item_id\ttitle\tcareer_level\tdiscipline_id\tindustry_id\tcountry\tis_payed\tregion\tlatitude\tlongitude\temployment\ttags\tcreated_at", "\n", "fileHandle", ".", "readline", "(", ")", "\n", "\n", "for", "line", "in", "fileHandle", ":", "\n", "\n", "            ", "if", "numCells", "%", "1000000", "==", "0", "and", "numCells", "!=", "0", ":", "\n", "                ", "print", "(", "\"Processed {} cells\"", ".", "format", "(", "numCells", ")", ")", "\n", "\n", "", "line", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "\"\"\"\n            ORDERING IN CSV FILE\n            # item_id\t\n            title\t\n            career_level\t\n            discipline_id\t\n            industry_id\t\n            country\t\n            is_payed\t\n            region\t\n            latitude\t\n            longitude\t\n            employment\n            tags\t\n            created_at\n\n\n            id anonymized ID        of the item (referenced as item_id in the other datasets above)\n            industry_id             anonymized IDs represent industries such as \"Internet\", \"Automotive\", \"Finance\", etc.\n            discipline_id           anonymized IDs represent disciplines such as \"Consulting\", \"HR\", etc.\n            is_paid (or is_payed)   indicates that the posting is a paid for by a compnay\n            career_level            career level ID (e.g. beginner, experienced, manager)\n                0 = unknown\n                1 = Student/Intern\n                2 = Entry Level (Beginner)\n                3 = Professional/Experienced\n                4 = Manager (Manager/Supervisor)\n                5 = Executive (VP, SVP, etc.)\n                6 = Senior Executive (CEO, CFO, President)\n            country                 code of the country in which the job is offered\n            latitude                latitude information (rounded to ca. 10km)\n            longitude               longitude information (rounded to ca. 10km)\n            region                  is specified for some users who have as country `de`. Meaning of the regions: see below.\n            employment              the type of emploment\n                0 = unknown\n                1 = full-time\n                2 = part-time\n                3 = freelancer\n                4 = intern\n                5 = voluntary\n            created_at              a unix time stamp timestamp representing the time when the interaction got created\n            title                   concepts that have been extracted from the job title of the job posting (numeric IDs)\n            tags                    concepts that have been extracted from the tags, skills or company name\n            \"\"\"", "\n", "\n", "item_id", "=", "line", "[", "0", "]", "\n", "\n", "title_id_list", "=", "line", "[", "1", "]", "\n", "title_id_list", "=", "[", "\"title_\"", "+", "str", "(", "ID", ")", "for", "ID", "in", "title_id_list", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "career_level", "=", "\"career_level_\"", "+", "str", "(", "line", "[", "2", "]", ")", "\n", "\n", "discipline_id_list", "=", "line", "[", "3", "]", "\n", "discipline_id_list", "=", "[", "\"discipline_\"", "+", "str", "(", "ID", ")", "for", "ID", "in", "discipline_id_list", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "industry_id_list", "=", "line", "[", "4", "]", "\n", "industry_id_list", "=", "[", "\"industry_\"", "+", "str", "(", "ID", ")", "for", "ID", "in", "industry_id_list", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "country", "=", "\"country_\"", "+", "str", "(", "line", "[", "5", "]", ")", "\n", "is_paid", "=", "\"is_paid_\"", "+", "str", "(", "line", "[", "6", "]", ")", "\n", "\n", "region", "=", "\"region_\"", "+", "str", "(", "line", "[", "7", "]", ")", "\n", "\n", "latitude", "=", "\"latitude_\"", "+", "str", "(", "line", "[", "8", "]", ")", "\n", "longitude", "=", "\"longitude_\"", "+", "str", "(", "line", "[", "9", "]", ")", "\n", "\n", "employment", "=", "\"employment_\"", "+", "str", "(", "line", "[", "10", "]", ")", "\n", "\n", "tags_list", "=", "line", "[", "11", "]", "\n", "tags_list", "=", "[", "\"tags_\"", "+", "str", "(", "ID", ")", "for", "ID", "in", "tags_list", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "created_at", "=", "\"created_at_\"", "+", "str", "(", "line", "[", "12", "]", ".", "strip", "(", ")", ")", "\n", "\n", "item_token_list", "=", "[", "*", "title_id_list", ",", "career_level", ",", "*", "industry_id_list", ",", "*", "discipline_id_list", ",", "country", ",", "is_paid", ",", "\n", "region", ",", "employment", ",", "*", "tags_list", "]", "\n", "\n", "ICM_builder", ".", "add_single_row", "(", "item_id", ",", "item_token_list", ",", "data", "=", "1.0", ")", "\n", "\n", "numCells", "+=", "1", "\n", "\n", "", "fileHandle", ".", "close", "(", ")", "\n", "\n", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.XingChallenge2017.XingChallenge2017Reader.XingChallenge2017Reader.get_filtered_ICM": [[281, 373], ["IncrementalSparseMatrix_FilterIDs", "open", "open.readline", "open.close", "zipfile.ZipFile", "zipfile.ZipFile.extract", "line.split.split.split", "IncrementalSparseMatrix_FilterIDs.add_single_row", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "len", "print", "str", "str", "str", "str", "str", "str", "str", "str", "item_token_list.extend", "item_token_list.append", "item_token_list.extend", "item_token_list.extend", "item_token_list.append", "item_token_list.append", "item_token_list.append", "item_token_list.append", "item_token_list.extend", "str", "title_id_list.split", "str", "discipline_id_list.split", "str", "industry_id_list.split", "str", "tags_list.split", "line[].strip", "item_token_list.remove"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper"], ["", "def", "get_filtered_ICM", "(", "self", ",", "categories", ",", "exceptions", "=", "None", ",", "ICM_path", "=", "None", ",", "if_new_item", "=", "\"add\"", ")", ":", "\n", "\n", "        ", "assert", "categories", "is", "not", "None", "and", "len", "(", "categories", ")", ">", "0", ",", "\"You should pass at least one category (in a list).\"", "\n", "\n", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix_FilterIDs", "\n", "\n", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "None", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "None", ",", "on_new_row", "=", "if_new_item", ")", "\n", "\n", "if", "ICM_path", "is", "None", ":", "\n", "            ", "compressed_zip_file_folder", "=", "self", ".", "DATASET_OFFLINE_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "decompressed_zip_file_folder", "=", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "zipFile_name", "=", "\"xing_challenge_data_2017.zip\"", "\n", "dataFile", "=", "zipfile", ".", "ZipFile", "(", "compressed_zip_file_folder", "+", "zipFile_name", ")", "\n", "ICM_path", "=", "dataFile", ".", "extract", "(", "\"data/items.csv\"", ",", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "\n", "", "fileHandle", "=", "open", "(", "ICM_path", ",", "\"r\"", ")", "\n", "\n", "numCells", "=", "0", "\n", "\n", "# Remove header", "\n", "# item_id\ttitle\tcareer_level\tdiscipline_id\tindustry_id\tcountry\tis_payed\tregion\tlatitude\tlongitude\temployment\ttags\tcreated_at", "\n", "fileHandle", ".", "readline", "(", ")", "\n", "\n", "for", "line", "in", "fileHandle", ":", "\n", "\n", "            ", "if", "numCells", "%", "1000000", "==", "0", "and", "numCells", "!=", "0", ":", "\n", "                ", "print", "(", "\"Processed {} cells\"", ".", "format", "(", "numCells", ")", ")", "\n", "\n", "", "line", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "item_id", "=", "line", "[", "0", "]", "\n", "\n", "title_id_list", "=", "line", "[", "1", "]", "\n", "title_id_list", "=", "[", "\"title_\"", "+", "str", "(", "ID", ")", "for", "ID", "in", "title_id_list", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "career_level", "=", "\"career_level_\"", "+", "str", "(", "line", "[", "2", "]", ")", "\n", "\n", "discipline_id_list", "=", "line", "[", "3", "]", "\n", "discipline_id_list", "=", "[", "\"discipline_\"", "+", "str", "(", "ID", ")", "for", "ID", "in", "discipline_id_list", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "industry_id_list", "=", "line", "[", "4", "]", "\n", "industry_id_list", "=", "[", "\"industry_\"", "+", "str", "(", "ID", ")", "for", "ID", "in", "industry_id_list", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "country", "=", "\"country_\"", "+", "str", "(", "line", "[", "5", "]", ")", "\n", "is_paid", "=", "\"is_paid_\"", "+", "str", "(", "line", "[", "6", "]", ")", "\n", "\n", "region", "=", "\"region_\"", "+", "str", "(", "line", "[", "7", "]", ")", "\n", "\n", "latitude", "=", "\"latitude_\"", "+", "str", "(", "line", "[", "8", "]", ")", "\n", "longitude", "=", "\"longitude_\"", "+", "str", "(", "line", "[", "9", "]", ")", "\n", "\n", "employment", "=", "\"employment_\"", "+", "str", "(", "line", "[", "10", "]", ")", "\n", "\n", "tags_list", "=", "line", "[", "11", "]", "\n", "tags_list", "=", "[", "\"tags_\"", "+", "str", "(", "ID", ")", "for", "ID", "in", "tags_list", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "created_at", "=", "\"created_at_\"", "+", "str", "(", "line", "[", "12", "]", ".", "strip", "(", ")", ")", "\n", "\n", "item_token_list", "=", "[", "]", "\n", "\n", "if", "\"title\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "extend", "(", "title_id_list", ")", "\n", "", "if", "\"career_level\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "append", "(", "career_level", ")", "\n", "", "if", "\"discipline\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "extend", "(", "discipline_id_list", ")", "\n", "", "if", "\"industry\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "extend", "(", "industry_id_list", ")", "\n", "", "if", "\"country\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "append", "(", "country", ")", "\n", "", "if", "\"is_paid\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "append", "(", "is_paid", ")", "\n", "", "if", "\"region\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "append", "(", "region", ")", "\n", "", "if", "\"employment\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "append", "(", "employment", ")", "\n", "", "if", "\"tags\"", "in", "categories", ":", "\n", "                ", "item_token_list", ".", "extend", "(", "tags_list", ")", "\n", "\n", "", "if", "exceptions", "is", "not", "None", ":", "\n", "                ", "for", "feature", "in", "exceptions", ":", "\n", "                    ", "if", "feature", "in", "item_token_list", ":", "\n", "                        ", "item_token_list", ".", "remove", "(", "feature", ")", "\n", "\n", "", "", "", "ICM_builder", ".", "add_single_row", "(", "item_id", ",", "item_token_list", ",", "data", "=", "1.0", ")", "\n", "\n", "numCells", "+=", "1", "\n", "\n", "", "fileHandle", ".", "close", "(", ")", "\n", "\n", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.baseline_TFIDF.main": [[5, 9], ["data.DataLoader.TheMoviesDatasetLoader", "experiments.baseline_TFIDF.baseline_TFIDF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_TFIDF.baseline_TFIDF"], ["from", "data", ".", "DataLoader", "import", "DataLoader", "\n", "from", "recsys", ".", "Base", ".", "DataIO", "import", "DataIO", "\n", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "Evaluator", "import", "EvaluatorHoldout", "\n", "from", "recsys", ".", "KNN", ".", "ItemKNNCBFRecommender", "import", "ItemKNNCBFRecommender", "\n", "from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_Content", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.baseline_CFW.main": [[8, 13], ["data.DataLoader.TheMoviesDatasetLoader", "experiments.baseline_CFW.baseline_CFW"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CFW.baseline_CFW"], ["from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_FeatureWeighting", "\n", "from", "utils", ".", "multithreading", "import", "parallelize_function", "\n", "from", "utils", ".", "recsys", "import", "remove_ICM_item_interactions", "\n", "from", "utils", ".", "sparse", "import", "merge_sparse_matrices", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.CollaborativeFiltering.main": [[5, 8], ["data.DataLoader.TheMoviesDatasetLoader", "experiments.train_CF.train_CF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.train_CF.train_CF"], ["def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "train_CF", "(", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.CQFSTrainer.main": [[12, 33], ["data.DataLoader.TheMoviesDatasetLoader", "experiments.train_CQFS.train_CQFS"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.train_CQFS.train_CQFS"], ["def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "ICM_name", "=", "'ICM_title_abstract'", "\n", "\n", "percentages", "=", "[", "40", ",", "60", ",", "80", ",", "95", "]", "\n", "alphas", "=", "[", "1", "]", "\n", "betas", "=", "[", "1", ",", "1e-1", ",", "1e-2", ",", "1e-3", ",", "1e-4", "]", "\n", "combination_strengths", "=", "[", "1", ",", "10", ",", "100", ",", "1000", ",", "10000", "]", "\n", "\n", "solver_class", "=", "LeapHybridSampler", "\n", "# solver_class = SimulatedAnnealingSampler", "\n", "# solver_class = CQFSSimulatedAnnealingSampler", "\n", "# solver_class = CQFSQBSolvSampler", "\n", "\n", "CF_recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "\n", "cpu_count_div", "=", "1", "\n", "cpu_count_sub", "=", "0", "\n", "\n", "train_CQFS", "(", "data_loader", ",", "ICM_name", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "solver_class", ",", "\n", "CF_recommender_classes", ",", "cpu_count_div", "=", "cpu_count_div", ",", "cpu_count_sub", "=", "cpu_count_sub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.baseline_CBF.main": [[5, 9], ["data.DataLoader.TheMoviesDatasetLoader", "experiments.baseline_CBF.baseline_CBF"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.baseline_CBF.baseline_CBF"], ["from", "recsys", ".", "KNN", ".", "ItemKNNCBFRecommender", "import", "ItemKNNCBFRecommender", "\n", "from", "recsys", ".", "ParameterTuning", ".", "run_parameter_search", "import", "runParameterSearch_Content", "\n", "from", "utils", ".", "sparse", "import", "merge_sparse_matrices", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.CQFS.main": [[13, 43], ["data.DataLoader.TheMoviesDatasetLoader", "experiments.run_CQFS.run_CQFS"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.experiments.run_CQFS.run_CQFS"], ["def", "main", "(", ")", ":", "\n", "    ", "data_loader", "=", "CiteULike_aLoader", "(", ")", "\n", "ICM_name", "=", "'ICM_title_abstract'", "\n", "\n", "##################################################", "\n", "# CQFS hyperparameters and settings", "\n", "\n", "percentages", "=", "[", "40", ",", "60", ",", "80", ",", "95", "]", "\n", "alphas", "=", "[", "1", "]", "\n", "betas", "=", "[", "1", ",", "1e-1", ",", "1e-2", ",", "1e-3", ",", "1e-4", "]", "\n", "combination_strengths", "=", "[", "1", ",", "10", ",", "100", ",", "1000", ",", "10000", "]", "\n", "\n", "parameter_product", "=", "True", "\n", "\n", "##################################################", "\n", "# Samplers", "\n", "\n", "solver_class", "=", "LeapHybridSampler", "\n", "# solver_class = SimulatedAnnealingSampler", "\n", "# solver_class = CQFSSimulatedAnnealingSampler", "\n", "# solver_class = CQFSQBSolvSampler", "\n", "# solver_class = CQFSQBSolvTabuSampler", "\n", "\n", "CF_recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "\n", "save_FPMs", "=", "False", "\n", "save_BQMs", "=", "False", "\n", "\n", "run_CQFS", "(", "data_loader", ",", "ICM_name", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "solver_class", ",", "\n", "CF_recommender_classes", ",", "save_FPMs", ",", "save_BQMs", ",", "parameter_product", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._get_dataset_name_root": [[33, 35], ["None"], "methods", ["None"], ["def", "_get_dataset_name_root", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "DATASET_SUBFOLDER", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._load_from_original_file": [[38, 188], ["TheMoviesDatasetReader.TheMoviesDatasetReader._print", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "TheMoviesDatasetReader.TheMoviesDatasetReader._loadICM_credits", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "TheMoviesDatasetReader.TheMoviesDatasetReader._loadICM_metadata", "recsys.Base.Recommender_utils.reshapeSparse", "TheMoviesDatasetReader.TheMoviesDatasetReader._load_item_id_mappping", "TheMoviesDatasetReader.TheMoviesDatasetReader._replace_tmdb_id_with_movielens", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "recsys.Data_manager.Movielens.Movielens20MReader._loadURM_preinitialized_item_id", "recsys.Data_manager.DataPostprocessing_K_Cores.select_k_cores", "recsys.Data_manager.DataPostprocessing_K_Cores.select_k_cores", "recsys.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "recsys.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "TheMoviesDatasetReader.TheMoviesDatasetReader.item_original_ID_to_title.copy", "numpy.zeros", "numpy.logical_not", "recsys.Data_manager.DataReader_utils.merge_ICM", "recsys.Data_manager.Dataset.Dataset", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "shutil.rmtree", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "zipfile.ZipFile", "zipfile.ZipFile.extract", "zipfile.ZipFile.extract", "zipfile.ZipFile.extract", "zipfile.ZipFile.extract", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "FileNotFoundError", "TheMoviesDatasetReader.TheMoviesDatasetReader._get_dataset_name", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._loadICM_credits", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._loadICM_metadata", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.reshapeSparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._load_item_id_mappping", "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._replace_tmdb_id_with_movielens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens._utils_movielens_parser._loadURM_preinitialized_item_id", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_K_Cores.select_k_cores", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_K_Cores.select_k_cores", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.merge_ICM", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "# Load data from original", "\n", "\n", "        ", "self", ".", "_print", "(", "\"Loading original data\"", ")", "\n", "\n", "compressed_zip_file_folder", "=", "self", ".", "DATASET_OFFLINE_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "decompressed_zip_file_folder", "=", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "\n", "zipFile_name", "=", "\"the-movies-dataset.zip\"", "\n", "\n", "\n", "try", ":", "\n", "\n", "            ", "dataFile", "=", "zipfile", ".", "ZipFile", "(", "compressed_zip_file_folder", "+", "zipFile_name", ")", "\n", "\n", "credits_path", "=", "dataFile", ".", "extract", "(", "\"credits.csv\"", ",", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "metadata_path", "=", "dataFile", ".", "extract", "(", "\"movies_metadata.csv\"", ",", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "movielens_tmdb_id_map_path", "=", "dataFile", ".", "extract", "(", "\"links.csv\"", ",", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "\n", "URM_path", "=", "dataFile", ".", "extract", "(", "\"ratings.csv\"", ",", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "\n", "", "except", "(", "FileNotFoundError", ",", "zipfile", ".", "BadZipFile", ")", ":", "\n", "\n", "            ", "self", ".", "_print", "(", "\"Unable to find or extract data zip file.\"", ")", "\n", "self", ".", "_print", "(", "\"Automatic download not available, please ensure the ZIP data file is in folder {}.\"", ".", "format", "(", "compressed_zip_file_folder", ")", ")", "\n", "self", ".", "_print", "(", "\"Data zip file not found or damaged. You may download the data from: {}\"", ".", "format", "(", "self", ".", "DATASET_URL", ")", ")", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "compressed_zip_file_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "compressed_zip_file_folder", ")", "\n", "\n", "", "raise", "FileNotFoundError", "(", "\"Automatic download not available.\"", ")", "\n", "\n", "\n", "\n", "\n", "", "self", ".", "item_original_ID_to_title", "=", "{", "}", "\n", "self", ".", "item_index_to_title", "=", "{", "}", "\n", "\n", "self", ".", "_print", "(", "\"Loading ICM_credits\"", ")", "\n", "ICM_credits", ",", "tokenToFeatureMapper_ICM_credits", ",", "self", ".", "item_original_ID_to_index", "=", "self", ".", "_loadICM_credits", "(", "credits_path", ",", "header", "=", "True", ",", "if_new_item", "=", "\"add\"", ")", "\n", "\n", "self", ".", "_print", "(", "\"Loading ICM_metadata\"", ")", "\n", "ICM_metadata", ",", "tokenToFeatureMapper_ICM_metadata", ",", "self", ".", "item_original_ID_to_index", "=", "self", ".", "_loadICM_metadata", "(", "metadata_path", ",", "header", "=", "True", ",", "if_new_item", "=", "\"add\"", ")", "\n", "\n", "\n", "\n", "# ICM_credits, _, tokenToFeatureMapper_ICM_credits = remove_features(ICM_credits, min_occurrence= 5, max_percentage_occurrence= 0.30,", "\n", "#                                                                    reconcile_mapper = tokenToFeatureMapper_ICM_credits)", "\n", "#", "\n", "# ICM_metadata, _, tokenToFeatureMapper_ICM_metadata = remove_features(ICM_metadata, min_occurrence= 5, max_percentage_occurrence= 0.30,", "\n", "#                                                                      reconcile_mapper = tokenToFeatureMapper_ICM_metadata)", "\n", "\n", "n_items", "=", "ICM_metadata", ".", "shape", "[", "0", "]", "\n", "\n", "ICM_credits", "=", "reshapeSparse", "(", "ICM_credits", ",", "(", "n_items", ",", "ICM_credits", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "\n", "# IMPORTANT: ICM uses TMDB indices, URM uses movielens indices", "\n", "# Load index mapper", "\n", "movielens_id_to_tmdb", ",", "tmdb_to_movielens_id", "=", "self", ".", "_load_item_id_mappping", "(", "movielens_tmdb_id_map_path", ",", "header", "=", "True", ")", "\n", "\n", "# Modify saved mapper to accept movielens id instead of tmdb", "\n", "self", ".", "_replace_tmdb_id_with_movielens", "(", "tmdb_to_movielens_id", ")", "\n", "\n", "\n", "self", ".", "_print", "(", "\"Loading URM\"", ")", "\n", "URM_all", ",", "self", ".", "item_original_ID_to_index", ",", "self", ".", "user_original_ID_to_index", ",", "URM_timestamp", "=", "_loadURM_preinitialized_item_id", "(", "URM_path", ",", "separator", "=", "\",\"", ",", "\n", "header", "=", "True", ",", "if_new_user", "=", "\"add\"", ",", "if_new_item", "=", "\"ignore\"", ",", "\n", "item_original_ID_to_index", "=", "self", ".", "item_original_ID_to_index", ")", "\n", "\n", "# Reconcile URM and ICM", "\n", "# Keep only items having ICM entries, remove all the others", "\n", "self", ".", "n_items", "=", "ICM_credits", ".", "shape", "[", "0", "]", "\n", "\n", "URM_all", ",", "removedUsers", ",", "removedItems", "=", "select_k_cores", "(", "URM_all", ",", "k_value", "=", "1", ",", "reshape", "=", "True", ")", "\n", "URM_timestamp", ",", "_", ",", "_", "=", "select_k_cores", "(", "URM_timestamp", ",", "k_value", "=", "1", ",", "reshape", "=", "True", ")", "\n", "\n", "self", ".", "item_original_ID_to_index", "=", "reconcile_mapper_with_removed_tokens", "(", "self", ".", "item_original_ID_to_index", ",", "removedItems", ")", "\n", "self", ".", "user_original_ID_to_index", "=", "reconcile_mapper_with_removed_tokens", "(", "self", ".", "user_original_ID_to_index", ",", "removedUsers", ")", "\n", "\n", "# Remove movie_ID discarded in previous step", "\n", "item_original_ID_to_title_old", "=", "self", ".", "item_original_ID_to_title", ".", "copy", "(", ")", "\n", "\n", "for", "item_id", "in", "item_original_ID_to_title_old", ":", "\n", "\n", "            ", "if", "item_id", "not", "in", "self", ".", "item_original_ID_to_index", ":", "\n", "                ", "del", "self", ".", "item_original_ID_to_title", "[", "item_id", "]", "\n", "\n", "\n", "", "", "removed_item_mask", "=", "np", ".", "zeros", "(", "self", ".", "n_items", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "removed_item_mask", "[", "removedItems", "]", "=", "True", "\n", "\n", "to_preserve_item_mask", "=", "np", ".", "logical_not", "(", "removed_item_mask", ")", "\n", "\n", "ICM_credits", "=", "ICM_credits", "[", "to_preserve_item_mask", ",", ":", "]", "\n", "ICM_metadata", "=", "ICM_metadata", "[", "to_preserve_item_mask", ",", ":", "]", "\n", "# URM is already clean", "\n", "\n", "self", ".", "n_items", "=", "ICM_credits", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "ICM_all", ",", "tokenToFeatureMapper_ICM_all", "=", "merge_ICM", "(", "ICM_credits", ",", "ICM_metadata", ",", "\n", "tokenToFeatureMapper_ICM_credits", ",", "\n", "tokenToFeatureMapper_ICM_metadata", ")", "\n", "\n", "\n", "\n", "loaded_URM_dict", "=", "{", "\"URM_all\"", ":", "URM_all", ",", "\n", "\"URM_timestamp\"", ":", "URM_timestamp", "}", "\n", "\n", "loaded_ICM_dict", "=", "{", "\"ICM_credits\"", ":", "ICM_credits", ",", "\n", "\"ICM_metadata\"", ":", "ICM_metadata", ",", "\n", "\"ICM_all\"", ":", "ICM_all", ",", "\n", "}", "\n", "\n", "self", ".", "loaded_ICM_mapper_dict", "=", "{", "\"ICM_credits\"", ":", "tokenToFeatureMapper_ICM_credits", ",", "\n", "\"ICM_metadata\"", ":", "tokenToFeatureMapper_ICM_metadata", ",", "\n", "\"ICM_all\"", ":", "tokenToFeatureMapper_ICM_all", ",", "\n", "}", "\n", "\n", "\n", "additional_data_mapper", "=", "{", "\"item_original_ID_to_title\"", ":", "self", ".", "item_original_ID_to_title", ",", "\n", "\"item_index_to_title\"", ":", "self", ".", "item_original_ID_to_title", "}", "\n", "\n", "\n", "\n", "loaded_dataset", "=", "Dataset", "(", "dataset_name", "=", "self", ".", "_get_dataset_name", "(", ")", ",", "\n", "URM_dictionary", "=", "loaded_URM_dict", ",", "\n", "ICM_dictionary", "=", "loaded_ICM_dict", ",", "\n", "ICM_feature_mapper_dictionary", "=", "self", ".", "loaded_ICM_mapper_dict", ",", "\n", "UCM_dictionary", "=", "None", ",", "\n", "UCM_feature_mapper_dictionary", "=", "None", ",", "\n", "user_original_ID_to_index", "=", "self", ".", "user_original_ID_to_index", ",", "\n", "item_original_ID_to_index", "=", "self", ".", "item_original_ID_to_index", ",", "\n", "is_implicit", "=", "self", ".", "IS_IMPLICIT", ",", "\n", "additional_data_mapper", "=", "additional_data_mapper", ",", "\n", ")", "\n", "\n", "\n", "\n", "self", ".", "_print", "(", "\"cleaning temporary files\"", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "self", ".", "_print", "(", "\"loading complete\"", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._load_item_id_mappping": [[191, 214], ["open", "open.readline", "newMapping.split.split.split", "newMapping[].replace"], "methods", ["None"], ["", "def", "_load_item_id_mappping", "(", "self", ",", "movielens_tmdb_id_map_path", ",", "header", "=", "True", ")", ":", "\n", "\n", "        ", "movielens_id_to_tmdb", "=", "{", "}", "\n", "tmdb_to_movielens_id", "=", "{", "}", "\n", "\n", "movielens_tmdb_id_map_file", "=", "open", "(", "movielens_tmdb_id_map_path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "if", "header", ":", "\n", "            ", "movielens_tmdb_id_map_file", ".", "readline", "(", ")", "\n", "\n", "\n", "", "for", "newMapping", "in", "movielens_tmdb_id_map_file", ":", "\n", "\n", "            ", "newMapping", "=", "newMapping", ".", "split", "(", "\",\"", ")", "\n", "\n", "movielens_id", "=", "newMapping", "[", "0", "]", "\n", "tmdb_id", "=", "newMapping", "[", "2", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "\n", "movielens_id_to_tmdb", "[", "movielens_id", "]", "=", "tmdb_id", "\n", "tmdb_to_movielens_id", "[", "tmdb_id", "]", "=", "movielens_id", "\n", "\n", "\n", "", "return", "movielens_id_to_tmdb", ",", "tmdb_to_movielens_id", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._replace_tmdb_id_with_movielens": [[217, 253], ["recsys.Data_manager.DataReader_utils.invert_dictionary", "TheMoviesDatasetReader.TheMoviesDatasetReader.item_index_to_original_ID.keys"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.invert_dictionary"], ["", "def", "_replace_tmdb_id_with_movielens", "(", "self", ",", "tmdb_to_movielens_id", ")", ":", "\n", "        ", "\"\"\"\n        Replace 'the original id' in such a way that it points to the same index\n        :param tmdb_to_movielens_id:\n        :return:\n        \"\"\"", "\n", "\n", "item_original_ID_to_index_movielens", "=", "{", "}", "\n", "item_index_to_original_ID_movielens", "=", "{", "}", "\n", "item_original_ID_to_title_movielens", "=", "{", "}", "\n", "\n", "# self.item_original_ID_to_index[item_id] = itemIndex", "\n", "# self.item_index_to_original_ID[itemIndex] = item_id", "\n", "\n", "self", ".", "item_index_to_original_ID", "=", "invert_dictionary", "(", "self", ".", "item_original_ID_to_index", ")", "\n", "\n", "for", "item_index", "in", "self", ".", "item_index_to_original_ID", ".", "keys", "(", ")", ":", "\n", "\n", "            ", "tmdb_id", "=", "self", ".", "item_index_to_original_ID", "[", "item_index", "]", "\n", "\n", "if", "tmdb_id", "in", "self", ".", "item_original_ID_to_title", ":", "\n", "                ", "movie_title", "=", "self", ".", "item_original_ID_to_title", "[", "tmdb_id", "]", "\n", "", "else", ":", "\n", "                ", "movie_title", "=", "\"\"", "\n", "\n", "", "movielens_id", "=", "tmdb_to_movielens_id", "[", "tmdb_id", "]", "\n", "\n", "item_index_to_original_ID_movielens", "[", "item_index", "]", "=", "movielens_id", "\n", "item_original_ID_to_index_movielens", "[", "movielens_id", "]", "=", "item_index", "\n", "item_original_ID_to_title_movielens", "[", "movielens_id", "]", "=", "movie_title", "\n", "\n", "\n", "# Replace the TMDB based mapper", "\n", "", "self", ".", "item_original_ID_to_index", "=", "item_original_ID_to_index_movielens", "\n", "self", ".", "item_index_to_original_ID", "=", "item_index_to_original_ID_movielens", "\n", "self", ".", "item_original_ID_to_title", "=", "item_original_ID_to_title_movielens", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._loadICM_credits": [[260, 306], ["recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs", "open", "csv.reader", "open.readline", "ast.literal_eval.extend", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_single_row", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "ast.literal_eval", "ast.literal_eval", "print", "str"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper"], ["", "def", "_loadICM_credits", "(", "self", ",", "credits_path", ",", "header", "=", "True", ",", "if_new_item", "=", "\"add\"", ")", ":", "\n", "\n", "        ", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "None", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "None", ",", "on_new_row", "=", "if_new_item", ")", "\n", "\n", "\n", "\n", "\n", "#parser_credits = parse_json(credits_path, header = header)", "\n", "numCells", "=", "0", "\n", "\n", "credits_file", "=", "open", "(", "credits_path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "if", "header", ":", "\n", "            ", "credits_file", ".", "readline", "(", ")", "\n", "\n", "", "parser_credits", "=", "csv", ".", "reader", "(", "credits_file", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ")", "\n", "\n", "\n", "for", "newCredits", "in", "parser_credits", ":", "\n", "\n", "# newCredits is a tuple of two strings, both are lists of dictionaries", "\n", "# {'cast_id': 14, 'character': 'Woody (voice)', 'credit_id': '52fe4284c3a36847f8024f95', 'gender': 2, 'id': 31, 'name': 'Tom Hanks', 'order': 0, 'profile_path': '/pQFoyx7rp09CJTAb932F2g8Nlho.jpg'}", "\n", "# {'cast_id': 14, 'character': 'Woody (voice)', 'credit_id': '52fe4284c3a36847f8024f95', 'gender': 2, 'id': 31, 'name': 'Tom Hanks', 'order': 0, 'profile_path': '/pQFoyx7rp09CJTAb932F2g8Nlho.jpg'}", "\n", "# NOTE: sometimes a dict value is \"\"Savannah 'Vannah' Jackson\"\", if the previous eval removes the commas \"\" \"\" then the parsing of the string will fail", "\n", "            ", "cast_list", "=", "[", "]", "\n", "credits_list", "=", "[", "]", "\n", "\n", "try", ":", "\n", "                ", "cast_list", "=", "ast", ".", "literal_eval", "(", "newCredits", "[", "0", "]", ")", "\n", "credits_list", "=", "ast", ".", "literal_eval", "(", "newCredits", "[", "1", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"TheMoviesDatasetReader: Exception while parsing: '{}', skipping\"", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "\n", "\n", "", "movie_id", "=", "newCredits", "[", "2", "]", "\n", "\n", "cast_list", ".", "extend", "(", "credits_list", ")", "\n", "\n", "cast_list_name", "=", "[", "cast_member", "[", "\"name\"", "]", "for", "cast_member", "in", "cast_list", "]", "\n", "\n", "ICM_builder", ".", "add_single_row", "(", "movie_id", ",", "cast_list_name", ",", "data", "=", "1.0", ")", "\n", "\n", "\n", "\n", "", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._new_loadICM_credits": [[311, 377], ["recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs", "open", "csv.reader", "cast_dict.items", "crew_dict.items", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat", "cast_crew_df.groupby", "cast_crew_df.groupby.count", "cast_crew_df.set_index", "name_job_cast_crew_df[].reset_index", "time.time", "range", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "open.readline", "ast.literal_eval", "ast.literal_eval", "len", "len", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "c.update", "cast_list.append", "c.update", "crew_list.append", "int", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.count", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper"], ["", "def", "_new_loadICM_credits", "(", "self", ",", "credits_path", ",", "header", "=", "True", ",", "if_new_item", "=", "\"add\"", ")", ":", "\n", "\n", "        ", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "None", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "None", ",", "on_new_row", "=", "if_new_item", ")", "\n", "\n", "\n", "\n", "\n", "#parser_credits = parse_json(credits_path, header = header)", "\n", "numCells", "=", "0", "\n", "\n", "credits_file", "=", "open", "(", "credits_path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "if", "header", ":", "\n", "            ", "credits_file", ".", "readline", "(", ")", "\n", "\n", "", "parser_credits", "=", "csv", ".", "reader", "(", "credits_file", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ")", "\n", "\n", "cast_dict", "=", "{", "}", "\n", "crew_dict", "=", "{", "}", "\n", "\n", "for", "credit", "in", "parser_credits", ":", "\n", "            ", "movie_id", "=", "credit", "[", "2", "]", "\n", "cast_dict", "[", "movie_id", "]", "=", "ast", ".", "literal_eval", "(", "credit", "[", "0", "]", ")", "\n", "crew_dict", "[", "movie_id", "]", "=", "ast", ".", "literal_eval", "(", "credit", "[", "1", "]", ")", "\n", "\n", "", "tot_cast", "=", "0", "\n", "cast_list", "=", "[", "]", "\n", "for", "k", ",", "cl", "in", "cast_dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "c", "in", "cl", ":", "\n", "                ", "c", ".", "update", "(", "{", "'movie_id'", ":", "k", ",", "'job'", ":", "'Actor'", "}", ")", "\n", "cast_list", ".", "append", "(", "c", ")", "\n", "tot_cast", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "cast_list", ")", "==", "tot_cast", "\n", "\n", "tot_crew", "=", "0", "\n", "crew_list", "=", "[", "]", "\n", "for", "k", ",", "cl", "in", "crew_dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "c", "in", "cl", ":", "\n", "                ", "c", ".", "update", "(", "{", "'movie_id'", ":", "k", "}", ")", "\n", "crew_list", ".", "append", "(", "c", ")", "\n", "tot_crew", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "crew_list", ")", "==", "tot_crew", "\n", "\n", "original_cast_df", "=", "pd", ".", "DataFrame", "(", "cast_list", ")", "\n", "original_crew_df", "=", "pd", ".", "DataFrame", "(", "crew_list", ")", "\n", "original_cast_crew_df", "=", "pd", ".", "concat", "(", "[", "original_cast_df", ",", "original_crew_df", "]", ",", "sort", "=", "False", ",", "ignore_index", "=", "True", ")", "\n", "cast_crew_df", "=", "original_cast_crew_df", "[", "[", "'name'", ",", "'job'", ",", "'movie_id'", "]", "]", "\n", "\n", "name_job_group", "=", "cast_crew_df", ".", "groupby", "(", "[", "'name'", ",", "'job'", "]", ")", "\n", "name_job_count_df", "=", "name_job_group", ".", "count", "(", ")", "\n", "name_job_cast_crew_df", "=", "cast_crew_df", ".", "set_index", "(", "[", "'name'", ",", "'job'", "]", ")", "\n", "more_than_5_items_df", "=", "name_job_cast_crew_df", "[", "name_job_count_df", "[", "'movie_id'", "]", ">", "5", "]", ".", "reset_index", "(", ")", "\n", "\n", "directors", "=", "more_than_5_items_df", "[", "more_than_5_items_df", "[", "'job'", "]", "==", "'Director'", "]", "\n", "s_time", "=", "time", ".", "time", "(", ")", "\n", "for", "d", "in", "range", "(", "directors", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "director", "=", "directors", ".", "iloc", "[", "d", "]", "\n", "row_list", "=", "[", "int", "(", "director", "[", "'movie_id'", "]", ")", "]", "\n", "col_list", "=", "[", "director", "[", "'name'", "]", "]", "\n", "ICM_builder", ".", "add_data_lists", "(", "row_list", ",", "col_list", ",", "data_list_to_add", "=", "[", "1.0", "]", ")", "\n", "", "self", ".", "_print", "(", "f\"Building the ICM took {time.time() - s_time} seconds.\"", ")", "\n", "\n", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader.get_filtered_ICM_credits": [[379, 460], ["recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs", "zipfile.ZipFile", "open", "csv.reader", "cast_dict.items", "crew_dict.items", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat", "cast_crew_df.groupby", "cast_crew_df.groupby.count", "cast_crew_df.set_index", "zipfile.ZipFile.extract", "TheMoviesDatasetReader.TheMoviesDatasetReader._load_item_id_mappping", "time.time", "range", "TheMoviesDatasetReader.TheMoviesDatasetReader._print", "zipfile.ZipFile.extract", "open.readline", "ast.literal_eval", "ast.literal_eval", "len", "len", "name_job_cast_crew_df[].reset_index", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "c.update", "cast_list.append", "c.update", "crew_list.append", "len", "name_job_cast_crew_df[].isin", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.count", "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._load_item_id_mappping", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper"], ["", "def", "get_filtered_ICM_credits", "(", "self", ",", "categories", "=", "None", ",", "k", "=", "0", ",", "credits_path", "=", "None", ",", "header", "=", "True", ",", "if_new_item", "=", "\"add\"", ",", "item_mapper", "=", "None", ")", ":", "\n", "\n", "# assert categories is not None and len(categories) > 0, \"You should pass at least one category (in a list).\"", "\n", "\n", "        ", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "None", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "item_mapper", ",", "on_new_row", "=", "if_new_item", ")", "\n", "\n", "compressed_zip_file_folder", "=", "self", ".", "DATASET_OFFLINE_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "decompressed_zip_file_folder", "=", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "zipFile_name", "=", "\"the-movies-dataset.zip\"", "\n", "dataFile", "=", "zipfile", ".", "ZipFile", "(", "compressed_zip_file_folder", "+", "zipFile_name", ")", "\n", "\n", "if", "credits_path", "is", "None", ":", "\n", "            ", "credits_path", "=", "dataFile", ".", "extract", "(", "\"credits.csv\"", ",", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "\n", "", "credits_file", "=", "open", "(", "credits_path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "if", "header", ":", "\n", "            ", "credits_file", ".", "readline", "(", ")", "\n", "\n", "", "parser_credits", "=", "csv", ".", "reader", "(", "credits_file", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ")", "\n", "\n", "cast_dict", "=", "{", "}", "\n", "crew_dict", "=", "{", "}", "\n", "\n", "for", "credit", "in", "parser_credits", ":", "\n", "            ", "movie_id", "=", "credit", "[", "2", "]", "\n", "cast_dict", "[", "movie_id", "]", "=", "ast", ".", "literal_eval", "(", "credit", "[", "0", "]", ")", "\n", "crew_dict", "[", "movie_id", "]", "=", "ast", ".", "literal_eval", "(", "credit", "[", "1", "]", ")", "\n", "\n", "", "tot_cast", "=", "0", "\n", "cast_list", "=", "[", "]", "\n", "for", "key", ",", "cl", "in", "cast_dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "c", "in", "cl", ":", "\n", "                ", "c", ".", "update", "(", "{", "'movie_id'", ":", "key", ",", "'job'", ":", "'Actor'", "}", ")", "\n", "cast_list", ".", "append", "(", "c", ")", "\n", "tot_cast", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "cast_list", ")", "==", "tot_cast", "\n", "\n", "tot_crew", "=", "0", "\n", "crew_list", "=", "[", "]", "\n", "for", "key", ",", "cl", "in", "crew_dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "c", "in", "cl", ":", "\n", "                ", "c", ".", "update", "(", "{", "'movie_id'", ":", "key", "}", ")", "\n", "crew_list", ".", "append", "(", "c", ")", "\n", "tot_crew", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "crew_list", ")", "==", "tot_crew", "\n", "\n", "original_cast_df", "=", "pd", ".", "DataFrame", "(", "cast_list", ")", "\n", "original_crew_df", "=", "pd", ".", "DataFrame", "(", "crew_list", ")", "\n", "original_cast_crew_df", "=", "pd", ".", "concat", "(", "[", "original_cast_df", ",", "original_crew_df", "]", ",", "sort", "=", "False", ",", "ignore_index", "=", "True", ")", "\n", "cast_crew_df", "=", "original_cast_crew_df", "[", "[", "'name'", ",", "'job'", ",", "'movie_id'", "]", "]", "\n", "\n", "name_job_group", "=", "cast_crew_df", ".", "groupby", "(", "[", "'name'", ",", "'job'", "]", ")", "\n", "name_job_count_df", "=", "name_job_group", ".", "count", "(", ")", "\n", "name_job_cast_crew_df", "=", "cast_crew_df", ".", "set_index", "(", "[", "'name'", ",", "'job'", "]", ")", "\n", "\n", "if", "k", ">", "0", ":", "\n", "            ", "name_job_cast_crew_df", "=", "name_job_cast_crew_df", "[", "name_job_count_df", "[", "'movie_id'", "]", ">=", "k", "]", ".", "reset_index", "(", ")", "\n", "\n", "", "if", "categories", "is", "not", "None", "and", "len", "(", "categories", ")", ">", "0", ":", "\n", "            ", "name_job_cast_crew_df", "=", "name_job_cast_crew_df", "[", "name_job_cast_crew_df", "[", "'job'", "]", ".", "isin", "(", "categories", ")", "]", "\n", "\n", "# IMPORTANT: ICM uses TMDB indices, URM uses movielens indices", "\n", "# Load index mapper", "\n", "", "movielens_tmdb_id_map_path", "=", "dataFile", ".", "extract", "(", "\"links.csv\"", ",", "path", "=", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "movielens_id_to_tmdb", ",", "tmdb_to_movielens_id", "=", "self", ".", "_load_item_id_mappping", "(", "movielens_tmdb_id_map_path", ",", "\n", "header", "=", "True", ")", "\n", "\n", "s_time", "=", "time", ".", "time", "(", ")", "\n", "for", "d", "in", "range", "(", "name_job_cast_crew_df", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "item", "=", "name_job_cast_crew_df", ".", "iloc", "[", "d", "]", "\n", "movie_id", "=", "tmdb_to_movielens_id", "[", "item", "[", "'movie_id'", "]", "]", "\n", "row_list", "=", "[", "movie_id", "]", "\n", "col_list", "=", "[", "item", "[", "'name'", "]", "]", "\n", "ICM_builder", ".", "add_data_lists", "(", "row_list", ",", "col_list", ",", "data_list_to_add", "=", "[", "1.0", "]", ")", "\n", "", "self", ".", "_print", "(", "f\"Building the ICM took {time.time() - s_time} seconds.\"", ")", "\n", "\n", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.TheMoviesDataset.TheMoviesDatasetReader.TheMoviesDatasetReader._loadICM_metadata": [[463, 564], ["recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs", "open", "csv.reader", "open.readline", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_single_row", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "print", "len", "print", "token_list.append", "token_list.append", "ast.literal_eval", "token_list.append", "ast.literal_eval", "token_list.append", "ast.literal_eval", "ast.literal_eval", "int", "token_list.append", "ast.literal_eval", "token_list.append", "token_list.append", "token_list.append", "token_list.append", "token_list.append", "token_list.append", "token_list.append", "str", "newMetadata[].split", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper"], ["", "def", "_loadICM_metadata", "(", "self", ",", "metadata_path", ",", "header", "=", "True", ",", "if_new_item", "=", "\"add\"", ")", ":", "\n", "\n", "        ", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "None", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "self", ".", "item_original_ID_to_index", ",", "on_new_row", "=", "if_new_item", ")", "\n", "\n", "\n", "numCells", "=", "0", "\n", "\n", "metadata_file", "=", "open", "(", "metadata_path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "if", "header", ":", "\n", "            ", "metadata_file", ".", "readline", "(", ")", "\n", "\n", "", "parser_metadata", "=", "csv", ".", "reader", "(", "metadata_file", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ")", "\n", "\n", "\n", "for", "newMetadata", "in", "parser_metadata", ":", "\n", "\n", "            ", "numCells", "+=", "1", "\n", "if", "numCells", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "\"Processed {} cells\"", ".", "format", "(", "numCells", ")", ")", "\n", "\n", "", "token_list", "=", "[", "]", "\n", "\n", "if", "len", "(", "newMetadata", ")", "<", "22", ":", "\n", "#Sono 6, ragionevole", "\n", "                ", "print", "(", "\"TheMoviesDatasetReader: Line too short, possible unwanted new line character, skipping\"", ")", "\n", "continue", "\n", "\n", "", "movie_id", "=", "newMetadata", "[", "5", "]", "\n", "\n", "\n", "if", "newMetadata", "[", "0", "]", "==", "\"True\"", ":", "\n", "                ", "token_list", ".", "append", "(", "\"ADULTS_YES\"", ")", "\n", "", "else", ":", "\n", "                ", "token_list", ".", "append", "(", "\"ADULTS_NO\"", ")", "\n", "\n", "", "if", "newMetadata", "[", "1", "]", ":", "\n", "                ", "collection", "=", "ast", ".", "literal_eval", "(", "newMetadata", "[", "1", "]", ")", "\n", "token_list", ".", "append", "(", "\"collection_\"", "+", "str", "(", "collection", "[", "\"id\"", "]", ")", ")", "\n", "\n", "#budget = int(rating[2])", "\n", "\n", "", "if", "newMetadata", "[", "3", "]", ":", "\n", "                ", "genres", "=", "ast", ".", "literal_eval", "(", "newMetadata", "[", "3", "]", ")", "\n", "\n", "for", "genre", "in", "genres", ":", "\n", "                    ", "token_list", ".", "append", "(", "\"genre_\"", "+", "str", "(", "genre", "[", "\"id\"", "]", ")", ")", "\n", "\n", "\n", "", "", "orig_lang", "=", "newMetadata", "[", "7", "]", "\n", "title", "=", "newMetadata", "[", "8", "]", "\n", "\n", "if", "movie_id", "not", "in", "self", ".", "item_original_ID_to_title", ":", "\n", "                ", "self", ".", "item_original_ID_to_title", "[", "movie_id", "]", "=", "title", "\n", "\n", "", "if", "orig_lang", ":", "\n", "                ", "token_list", ".", "append", "(", "\"original_language_\"", "+", "orig_lang", ")", "\n", "\n", "", "if", "newMetadata", "[", "12", "]", ":", "\n", "                ", "prod_companies", "=", "ast", ".", "literal_eval", "(", "newMetadata", "[", "12", "]", ")", "\n", "for", "prod_company", "in", "prod_companies", ":", "\n", "                    ", "token_list", ".", "append", "(", "\"production_company_\"", "+", "str", "(", "prod_company", "[", "'id'", "]", ")", ")", "\n", "\n", "\n", "", "", "if", "newMetadata", "[", "13", "]", ":", "\n", "                ", "prod_countries", "=", "ast", ".", "literal_eval", "(", "newMetadata", "[", "13", "]", ")", "\n", "for", "prod_country", "in", "prod_countries", ":", "\n", "                    ", "token_list", ".", "append", "(", "\"production_country_\"", "+", "prod_country", "[", "'iso_3166_1'", "]", ")", "\n", "\n", "\n", "", "", "try", ":", "\n", "                ", "release_date", "=", "int", "(", "newMetadata", "[", "14", "]", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", "\n", "token_list", ".", "append", "(", "\"release_date_\"", "+", "str", "(", "release_date", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "pass", "\n", "\n", "\n", "", "if", "newMetadata", "[", "17", "]", ":", "\n", "                ", "spoken_langs", "=", "ast", ".", "literal_eval", "(", "newMetadata", "[", "17", "]", ")", "\n", "for", "spoken_lang", "in", "spoken_langs", ":", "\n", "                    ", "token_list", ".", "append", "(", "\"spoken_lang_\"", "+", "spoken_lang", "[", "'iso_639_1'", "]", ")", "\n", "\n", "\n", "", "", "if", "newMetadata", "[", "18", "]", ":", "\n", "                ", "status", "=", "newMetadata", "[", "18", "]", "\n", "if", "status", ":", "\n", "                    ", "token_list", ".", "append", "(", "\"status_\"", "+", "status", ")", "\n", "\n", "", "", "if", "newMetadata", "[", "21", "]", "==", "\"True\"", ":", "\n", "                ", "token_list", ".", "append", "(", "\"VIDEO_YES\"", ")", "\n", "", "else", ":", "\n", "                ", "token_list", ".", "append", "(", "\"VIDEO_NO\"", ")", "\n", "\n", "\n", "", "ICM_builder", ".", "add_single_row", "(", "movie_id", ",", "token_list", ",", "data", "=", "True", ")", "\n", "\n", "\n", "\n", "\n", "", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.ItemKNNCFRecommender.ItemKNNCFRecommender.__init__": [[27, 29], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "ItemKNNCFRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.ItemKNNCFRecommender.ItemKNNCFRecommender.fit": [[31, 55], ["recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity", "recsys.Base.Recommender_utils.check_matrix", "ValueError", "ItemKNNCFRecommender.ItemKNNCFRecommender.URM_train.astype", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.IR_feature_weighting.okapi_BM_25", "ItemKNNCFRecommender.ItemKNNCFRecommender.URM_train.astype", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.IR_feature_weighting.TF_IDF"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.okapi_BM_25", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.TF_IDF"], ["", "def", "fit", "(", "self", ",", "topK", "=", "50", ",", "shrink", "=", "100", ",", "similarity", "=", "'cosine'", ",", "normalize", "=", "True", ",", "feature_weighting", "=", "\"none\"", ",", "**", "similarity_args", ")", ":", "\n", "\n", "        ", "self", ".", "topK", "=", "topK", "\n", "self", ".", "shrink", "=", "shrink", "\n", "\n", "if", "feature_weighting", "not", "in", "self", ".", "FEATURE_WEIGHTING_VALUES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Value for 'feature_weighting' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "FEATURE_WEIGHTING_VALUES", ",", "feature_weighting", ")", ")", "\n", "\n", "\n", "", "if", "feature_weighting", "==", "\"BM25\"", ":", "\n", "            ", "self", ".", "URM_train", "=", "self", ".", "URM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "URM_train", "=", "okapi_BM_25", "(", "self", ".", "URM_train", ".", "T", ")", ".", "T", "\n", "self", ".", "URM_train", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "'csr'", ")", "\n", "\n", "", "elif", "feature_weighting", "==", "\"TF-IDF\"", ":", "\n", "            ", "self", ".", "URM_train", "=", "self", ".", "URM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "URM_train", "=", "TF_IDF", "(", "self", ".", "URM_train", ".", "T", ")", ".", "T", "\n", "self", ".", "URM_train", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "'csr'", ")", "\n", "\n", "", "similarity", "=", "Compute_Similarity", "(", "self", ".", "URM_train", ",", "shrink", "=", "shrink", ",", "topK", "=", "topK", ",", "normalize", "=", "normalize", ",", "similarity", "=", "similarity", ",", "**", "similarity_args", ")", "\n", "\n", "\n", "self", ".", "W_sparse", "=", "similarity", ".", "compute_similarity", "(", ")", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.UserKNN_CFCBF_Hybrid_Recommender.UserKNN_CFCBF_Hybrid_Recommender.fit": [[21, 27], ["scipy.hstack", "super().fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["def", "fit", "(", "self", ",", "UCM_weight", "=", "1.0", ",", "**", "fit_args", ")", ":", "\n", "\n", "        ", "self", ".", "UCM_train", "=", "self", ".", "UCM_train", "*", "UCM_weight", "\n", "self", ".", "UCM_train", "=", "sps", ".", "hstack", "(", "[", "self", ".", "UCM_train", ",", "self", ".", "URM_train", "]", ",", "format", "=", "'csr'", ")", "\n", "\n", "super", "(", "UserKNN_CFCBF_Hybrid_Recommender", ",", "self", ")", ".", "fit", "(", "**", "fit_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.UserKNN_CFCBF_Hybrid_Recommender.UserKNN_CFCBF_Hybrid_Recommender._get_cold_user_mask": [[29, 31], ["numpy.logical_and"], "methods", ["None"], ["", "def", "_get_cold_user_mask", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "logical_and", "(", "self", ".", "_cold_user_CBF_mask", ",", "self", ".", "_cold_user_mask", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.UserKNNCFRecommender.UserKNNCFRecommender.__init__": [[26, 28], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseUserSimilarityMatrixRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "UserKNNCFRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.UserKNNCFRecommender.UserKNNCFRecommender.fit": [[32, 55], ["recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity", "recsys.Base.Recommender_utils.check_matrix", "ValueError", "UserKNNCFRecommender.UserKNNCFRecommender.URM_train.astype", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.IR_feature_weighting.okapi_BM_25", "UserKNNCFRecommender.UserKNNCFRecommender.URM_train.astype", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.IR_feature_weighting.TF_IDF"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.okapi_BM_25", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.TF_IDF"], ["", "def", "fit", "(", "self", ",", "topK", "=", "50", ",", "shrink", "=", "100", ",", "similarity", "=", "'cosine'", ",", "normalize", "=", "True", ",", "feature_weighting", "=", "\"none\"", ",", "**", "similarity_args", ")", ":", "\n", "\n", "        ", "self", ".", "topK", "=", "topK", "\n", "self", ".", "shrink", "=", "shrink", "\n", "\n", "if", "feature_weighting", "not", "in", "self", ".", "FEATURE_WEIGHTING_VALUES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Value for 'feature_weighting' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "FEATURE_WEIGHTING_VALUES", ",", "feature_weighting", ")", ")", "\n", "\n", "\n", "", "if", "feature_weighting", "==", "\"BM25\"", ":", "\n", "            ", "self", ".", "URM_train", "=", "self", ".", "URM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "URM_train", "=", "okapi_BM_25", "(", "self", ".", "URM_train", ".", "T", ")", ".", "T", "\n", "self", ".", "URM_train", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "'csr'", ")", "\n", "\n", "", "elif", "feature_weighting", "==", "\"TF-IDF\"", ":", "\n", "            ", "self", ".", "URM_train", "=", "self", ".", "URM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "URM_train", "=", "TF_IDF", "(", "self", ".", "URM_train", ".", "T", ")", ".", "T", "\n", "self", ".", "URM_train", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "'csr'", ")", "\n", "\n", "", "similarity", "=", "Compute_Similarity", "(", "self", ".", "URM_train", ".", "T", ",", "shrink", "=", "shrink", ",", "topK", "=", "topK", ",", "normalize", "=", "normalize", ",", "similarity", "=", "similarity", ",", "**", "similarity_args", ")", "\n", "\n", "self", ".", "W_sparse", "=", "similarity", ".", "compute_similarity", "(", ")", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.ItemKNNCBFRecommender.ItemKNNCBFRecommender.__init__": [[25, 27], ["recsys.Base.BaseCBFRecommender.BaseItemCBFRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "ICM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "ItemKNNCBFRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "ICM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.ItemKNNCBFRecommender.ItemKNNCBFRecommender.fit": [[30, 52], ["recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity", "recsys.Base.Recommender_utils.check_matrix", "ValueError", "ItemKNNCBFRecommender.ItemKNNCBFRecommender.ICM_train.astype", "recsys.Base.IR_feature_weighting.okapi_BM_25", "ItemKNNCBFRecommender.ItemKNNCBFRecommender.ICM_train.astype", "recsys.Base.IR_feature_weighting.TF_IDF"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.okapi_BM_25", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.TF_IDF"], ["", "def", "fit", "(", "self", ",", "topK", "=", "50", ",", "shrink", "=", "100", ",", "similarity", "=", "'cosine'", ",", "normalize", "=", "True", ",", "feature_weighting", "=", "\"none\"", ",", "**", "similarity_args", ")", ":", "\n", "\n", "        ", "self", ".", "topK", "=", "topK", "\n", "self", ".", "shrink", "=", "shrink", "\n", "\n", "if", "feature_weighting", "not", "in", "self", ".", "FEATURE_WEIGHTING_VALUES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Value for 'feature_weighting' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "FEATURE_WEIGHTING_VALUES", ",", "feature_weighting", ")", ")", "\n", "\n", "\n", "", "if", "feature_weighting", "==", "\"BM25\"", ":", "\n", "            ", "self", ".", "ICM_train", "=", "self", ".", "ICM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "ICM_train", "=", "okapi_BM_25", "(", "self", ".", "ICM_train", ")", "\n", "\n", "", "elif", "feature_weighting", "==", "\"TF-IDF\"", ":", "\n", "            ", "self", ".", "ICM_train", "=", "self", ".", "ICM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "ICM_train", "=", "TF_IDF", "(", "self", ".", "ICM_train", ")", "\n", "\n", "\n", "", "similarity", "=", "Compute_Similarity", "(", "self", ".", "ICM_train", ".", "T", ",", "shrink", "=", "shrink", ",", "topK", "=", "topK", ",", "normalize", "=", "normalize", ",", "similarity", "=", "similarity", ",", "**", "similarity_args", ")", "\n", "\n", "self", ".", "W_sparse", "=", "similarity", ".", "compute_similarity", "(", ")", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.ItemKNNCustomSimilarityRecommender.ItemKNNCustomSimilarityRecommender.fit": [[20, 34], ["recsys.Base.Recommender_utils.check_matrix", "recsys.Base.Recommender_utils.similarityMatrixTopK"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK"], ["def", "fit", "(", "self", ",", "W_sparse", ",", "selectTopK", "=", "False", ",", "topK", "=", "100", ")", ":", "\n", "\n", "        ", "assert", "W_sparse", ".", "shape", "[", "0", "]", "==", "W_sparse", ".", "shape", "[", "1", "]", ",", "\"ItemKNNCustomSimilarityRecommender: W_sparse matrice is not square. Current shape is {}\"", ".", "format", "(", "W_sparse", ".", "shape", ")", "\n", "\n", "assert", "self", ".", "URM_train", ".", "shape", "[", "1", "]", "==", "W_sparse", ".", "shape", "[", "0", "]", ",", "\"ItemKNNCustomSimilarityRecommender: URM_train and W_sparse matrices are not consistent. \"", "\"The number of columns in URM_train must be equal to the rows in W_sparse. \"", "\"Current shapes are: URM_train {}, W_sparse {}\"", ".", "format", "(", "self", ".", "URM_train", ".", "shape", ",", "W_sparse", ".", "shape", ")", "\n", "\n", "if", "selectTopK", ":", "\n", "            ", "W_sparse", "=", "similarityMatrixTopK", "(", "W_sparse", ",", "k", "=", "topK", ")", "\n", "\n", "", "self", ".", "W_sparse", "=", "check_matrix", "(", "W_sparse", ",", "format", "=", "'csr'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.UserKNNCBFRecommender.UserKNNCBFRecommender.__init__": [[25, 27], ["recsys.Base.BaseCBFRecommender.BaseUserCBFRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "UCM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "UserKNNCBFRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "UCM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.UserKNNCBFRecommender.UserKNNCBFRecommender.fit": [[29, 51], ["recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity", "recsys.Base.Recommender_utils.check_matrix", "ValueError", "UserKNNCBFRecommender.UserKNNCBFRecommender.UCM_train.astype", "recsys.Base.IR_feature_weighting.okapi_BM_25", "UserKNNCBFRecommender.UserKNNCBFRecommender.UCM_train.astype", "recsys.Base.IR_feature_weighting.TF_IDF"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.okapi_BM_25", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.TF_IDF"], ["", "def", "fit", "(", "self", ",", "topK", "=", "50", ",", "shrink", "=", "100", ",", "similarity", "=", "'cosine'", ",", "normalize", "=", "True", ",", "feature_weighting", "=", "\"none\"", ",", "**", "similarity_args", ")", ":", "\n", "\n", "        ", "self", ".", "topK", "=", "topK", "\n", "self", ".", "shrink", "=", "shrink", "\n", "\n", "if", "feature_weighting", "not", "in", "self", ".", "FEATURE_WEIGHTING_VALUES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Value for 'feature_weighting' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "FEATURE_WEIGHTING_VALUES", ",", "feature_weighting", ")", ")", "\n", "\n", "\n", "", "if", "feature_weighting", "==", "\"BM25\"", ":", "\n", "            ", "self", ".", "UCM_train", "=", "self", ".", "UCM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "UCM_train", "=", "okapi_BM_25", "(", "self", ".", "UCM_train", ")", "\n", "\n", "", "elif", "feature_weighting", "==", "\"TF-IDF\"", ":", "\n", "            ", "self", ".", "UCM_train", "=", "self", ".", "UCM_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "UCM_train", "=", "TF_IDF", "(", "self", ".", "UCM_train", ")", "\n", "\n", "\n", "", "similarity", "=", "Compute_Similarity", "(", "self", ".", "UCM_train", ".", "T", ",", "shrink", "=", "shrink", ",", "topK", "=", "topK", ",", "normalize", "=", "normalize", ",", "similarity", "=", "similarity", ",", "**", "similarity_args", ")", "\n", "\n", "self", ".", "W_sparse", "=", "similarity", ".", "compute_similarity", "(", ")", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.ItemKNN_CFCBF_Hybrid_Recommender.ItemKNN_CFCBF_Hybrid_Recommender.fit": [[20, 26], ["scipy.hstack", "super().fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["def", "fit", "(", "self", ",", "ICM_weight", "=", "1.0", ",", "**", "fit_args", ")", ":", "\n", "\n", "        ", "self", ".", "ICM_train", "=", "self", ".", "ICM_train", "*", "ICM_weight", "\n", "self", ".", "ICM_train", "=", "sps", ".", "hstack", "(", "[", "self", ".", "ICM_train", ",", "self", ".", "URM_train", ".", "T", "]", ",", "format", "=", "'csr'", ")", "\n", "\n", "super", "(", "ItemKNN_CFCBF_Hybrid_Recommender", ",", "self", ")", ".", "fit", "(", "**", "fit_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.KNN.ItemKNN_CFCBF_Hybrid_Recommender.ItemKNN_CFCBF_Hybrid_Recommender._get_cold_item_mask": [[28, 30], ["numpy.logical_and"], "methods", ["None"], ["", "def", "_get_cold_item_mask", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "logical_and", "(", "self", ".", "_cold_item_CBF_mask", ",", "self", ".", "_cold_item_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.TopPop.__init__": [[19, 21], ["recsys.Base.BaseRecommender.BaseRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ")", ":", "\n", "        ", "super", "(", "TopPop", ",", "self", ")", ".", "__init__", "(", "URM_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.TopPop.fit": [[23, 28], ["numpy.ediff1d", "NonPersonalizedRecommender.TopPop.URM_train.tocsc"], "methods", ["None"], ["", "def", "fit", "(", "self", ")", ":", "\n", "\n", "# Use np.ediff1d and NOT a sum done over the rows as there might be values other than 0/1", "\n", "        ", "self", ".", "item_pop", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", "\n", "self", ".", "n_items", "=", "self", ".", "URM_train", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.TopPop._compute_item_score": [[30, 44], ["numpy.array().reshape", "numpy.repeat", "NonPersonalizedRecommender.TopPop.item_pop[].copy", "NonPersonalizedRecommender.TopPop.item_pop.copy", "len", "numpy.array", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_compute_item_score", "(", "self", ",", "user_id_array", ",", "items_to_compute", "=", "None", ")", ":", "\n", "\n", "# Create a single (n_items, ) array with the item score, then copy it for every user", "\n", "\n", "        ", "if", "items_to_compute", "is", "not", "None", ":", "\n", "            ", "item_pop_to_copy", "=", "-", "np", ".", "ones", "(", "self", ".", "n_items", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "inf", "\n", "item_pop_to_copy", "[", "items_to_compute", "]", "=", "self", ".", "item_pop", "[", "items_to_compute", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "item_pop_to_copy", "=", "self", ".", "item_pop", ".", "copy", "(", ")", "\n", "\n", "", "item_scores", "=", "np", ".", "array", "(", "item_pop_to_copy", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "item_scores", "=", "np", ".", "repeat", "(", "item_scores", ",", "len", "(", "user_id_array", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "item_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.TopPop.save_model": [[46, 59], ["NonPersonalizedRecommender.TopPop._print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "NonPersonalizedRecommender.TopPop._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "self", ".", "_print", "(", "\"Saving model in file '{}'\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "\"item_pop\"", ":", "self", ".", "item_pop", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "self", ".", "_print", "(", "\"Saving complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.GlobalEffects.__init__": [[67, 69], ["recsys.Base.BaseRecommender.BaseRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ")", ":", "\n", "        ", "super", "(", "GlobalEffects", ",", "self", ")", ".", "__init__", "(", "URM_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.GlobalEffects.fit": [[71, 117], ["recsys.Base.Recommender_utils.check_matrix", "numpy.diff", "NonPersonalizedRecommender.GlobalEffects.URM_train.copy", "numpy.asarray().ravel", "numpy.repeat", "NonPersonalizedRecommender.GlobalEffects.tocsr", "numpy.diff", "recsys.Base.Recommender_utils.check_matrix", "NonPersonalizedRecommender.GlobalEffects.URM_train.data.sum", "NonPersonalizedRecommender.GlobalEffects.sum", "NonPersonalizedRecommender.GlobalEffects.tocsr.sum().ravel", "numpy.asarray", "NonPersonalizedRecommender.GlobalEffects.tocsr.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "def", "fit", "(", "self", ",", "lambda_user", "=", "10", ",", "lambda_item", "=", "25", ")", ":", "\n", "\n", "        ", "self", ".", "lambda_user", "=", "lambda_user", "\n", "self", ".", "lambda_item", "=", "lambda_item", "\n", "self", ".", "n_items", "=", "self", ".", "URM_train", ".", "shape", "[", "1", "]", "\n", "\n", "\n", "# convert to csc matrix for faster column-wise sum", "\n", "self", ".", "URM_train", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "'csc'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# 1) global average", "\n", "self", ".", "mu", "=", "self", ".", "URM_train", ".", "data", ".", "sum", "(", "dtype", "=", "np", ".", "float32", ")", "/", "self", ".", "URM_train", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "# 2) item average bias", "\n", "# compute the number of non-zero elements for each column", "\n", "col_nnz", "=", "np", ".", "diff", "(", "self", ".", "URM_train", ".", "indptr", ")", "\n", "\n", "# it is equivalent to:", "\n", "# col_nnz = X.indptr[1:] - X.indptr[:-1]", "\n", "# and it is **much faster** than", "\n", "# col_nnz = (X != 0).sum(axis=0)", "\n", "\n", "URM_train_unbiased", "=", "self", ".", "URM_train", ".", "copy", "(", ")", "\n", "URM_train_unbiased", ".", "data", "-=", "self", ".", "mu", "\n", "self", ".", "item_bias", "=", "URM_train_unbiased", ".", "sum", "(", "axis", "=", "0", ")", "/", "(", "col_nnz", "+", "self", ".", "lambda_item", ")", "\n", "self", ".", "item_bias", "=", "np", ".", "asarray", "(", "self", ".", "item_bias", ")", ".", "ravel", "(", ")", "# converts 2-d matrix to 1-d array without anycopy", "\n", "\n", "# 3) user average bias", "\n", "# NOTE: the user bias is *useless* for the sake of ranking items. We just show it here for educational purposes.", "\n", "\n", "# first subtract the item biases from each column", "\n", "# then repeat each element of the item bias vector a number of times equal to col_nnz", "\n", "# and subtract it from the data vector", "\n", "URM_train_unbiased", ".", "data", "-=", "np", ".", "repeat", "(", "self", ".", "item_bias", ",", "col_nnz", ")", "\n", "\n", "# now convert the csc matrix to csr for efficient row-wise computation", "\n", "URM_train_unbiased_csr", "=", "URM_train_unbiased", ".", "tocsr", "(", ")", "\n", "row_nnz", "=", "np", ".", "diff", "(", "URM_train_unbiased_csr", ".", "indptr", ")", "\n", "# finally, let's compute the bias", "\n", "self", ".", "user_bias", "=", "URM_train_unbiased_csr", ".", "sum", "(", "axis", "=", "1", ")", ".", "ravel", "(", ")", "/", "(", "row_nnz", "+", "self", ".", "lambda_user", ")", "\n", "\n", "# 4) precompute the item ranking by using the item bias only", "\n", "# the global average and user bias won't change the ranking, so there is no need to use them", "\n", "#self.item_ranking = np.argsort(self.bi)[::-1]", "\n", "\n", "self", ".", "URM_train", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "'csr'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.GlobalEffects._compute_item_score": [[119, 133], ["numpy.array().reshape", "numpy.repeat", "NonPersonalizedRecommender.GlobalEffects.item_bias[].copy", "NonPersonalizedRecommender.GlobalEffects.item_bias.copy", "len", "numpy.array", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_compute_item_score", "(", "self", ",", "user_id_array", ",", "items_to_compute", "=", "None", ")", ":", "\n", "\n", "# Create a single (n_items, ) array with the item score, then copy it for every user", "\n", "\n", "        ", "if", "items_to_compute", "is", "not", "None", ":", "\n", "            ", "item_bias_to_copy", "=", "-", "np", ".", "ones", "(", "self", ".", "n_items", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "inf", "\n", "item_bias_to_copy", "[", "items_to_compute", "]", "=", "self", ".", "item_bias", "[", "items_to_compute", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "item_bias_to_copy", "=", "self", ".", "item_bias", ".", "copy", "(", ")", "\n", "\n", "", "item_scores", "=", "np", ".", "array", "(", "item_bias_to_copy", ",", "dtype", "=", "np", ".", "float", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "item_scores", "=", "np", ".", "repeat", "(", "item_scores", ",", "len", "(", "user_id_array", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "item_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.GlobalEffects.save_model": [[135, 148], ["NonPersonalizedRecommender.GlobalEffects._print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "NonPersonalizedRecommender.GlobalEffects._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "self", ".", "_print", "(", "\"Saving model in file '{}'\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "\"item_bias\"", ":", "self", ".", "item_bias", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "self", ".", "_print", "(", "\"Saving complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.Random.__init__": [[156, 158], ["recsys.Base.BaseRecommender.BaseRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ")", ":", "\n", "        ", "super", "(", "Random", ",", "self", ")", ".", "__init__", "(", "URM_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.Random.fit": [[160, 163], ["numpy.random.seed"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "random_seed", "=", "42", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "self", ".", "n_items", "=", "self", ".", "URM_train", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.Random._compute_item_score": [[165, 177], ["numpy.random.rand", "numpy.random.rand", "len", "len", "len", "numpy.ones", "len"], "methods", ["None"], ["", "def", "_compute_item_score", "(", "self", ",", "user_id_array", ",", "items_to_compute", "=", "None", ")", ":", "\n", "\n", "# Create a random block (len(user_id_array), n_items) array with the item score", "\n", "\n", "        ", "if", "items_to_compute", "is", "not", "None", ":", "\n", "            ", "item_scores", "=", "-", "np", ".", "ones", "(", "(", "len", "(", "user_id_array", ")", ",", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "inf", "\n", "item_scores", "[", ":", ",", "items_to_compute", "]", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "user_id_array", ")", ",", "len", "(", "items_to_compute", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "item_scores", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "user_id_array", ")", ",", "self", ".", "n_items", ")", "\n", "\n", "", "return", "item_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.NonPersonalizedRecommender.Random.save_model": [[180, 193], ["NonPersonalizedRecommender.Random._print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "NonPersonalizedRecommender.Random._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "self", ".", "_print", "(", "\"Saving model in file '{}'\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "self", ".", "_print", "(", "\"Saving complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender.__init__": [[21, 26], ["recsys.Base.BaseRecommender.BaseRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "BaseSimilarityMatrixRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n", "self", ".", "_URM_train_format_checked", "=", "False", "\n", "self", ".", "_W_sparse_format_checked", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender._check_format": [[29, 44], ["BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender.URM_train.getformat", "BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender._print", "BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender.W_sparse.getformat", "BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "_check_format", "(", "self", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "_URM_train_format_checked", ":", "\n", "\n", "            ", "if", "self", ".", "URM_train", ".", "getformat", "(", ")", "!=", "\"csr\"", ":", "\n", "                ", "self", ".", "_print", "(", "\"PERFORMANCE ALERT compute_item_score: {} is not {}, this will significantly slow down the computation.\"", ".", "format", "(", "\"URM_train\"", ",", "\"csr\"", ")", ")", "\n", "\n", "", "self", ".", "_URM_train_format_checked", "=", "True", "\n", "\n", "", "if", "not", "self", ".", "_W_sparse_format_checked", ":", "\n", "\n", "            ", "if", "self", ".", "W_sparse", ".", "getformat", "(", ")", "!=", "\"csr\"", ":", "\n", "                ", "self", ".", "_print", "(", "\"PERFORMANCE ALERT compute_item_score: {} is not {}, this will significantly slow down the computation.\"", ".", "format", "(", "\"W_sparse\"", ",", "\"csr\"", ")", ")", "\n", "\n", "", "self", ".", "_W_sparse_format_checked", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender.save_model": [[48, 61], ["BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender._print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "self", ".", "_print", "(", "\"Saving model in file '{}'\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "\"W_sparse\"", ":", "self", ".", "W_sparse", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "self", ".", "_print", "(", "\"Saving complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender._compute_item_score": [[73, 93], ["BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender._check_format", "user_profile_array.dot().toarray", "user_profile_array.dot().toarray", "numpy.ones", "user_profile_array.dot", "user_profile_array.dot", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender._check_format"], ["    ", "def", "_compute_item_score", "(", "self", ",", "user_id_array", ",", "items_to_compute", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        URM_train and W_sparse must have the same format, CSR\n        :param user_id_array:\n        :param items_to_compute:\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "_check_format", "(", ")", "\n", "\n", "user_profile_array", "=", "self", ".", "URM_train", "[", "user_id_array", "]", "\n", "\n", "if", "items_to_compute", "is", "not", "None", ":", "\n", "            ", "item_scores", "=", "-", "np", ".", "ones", "(", "(", "len", "(", "user_id_array", ")", ",", "self", ".", "URM_train", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "inf", "\n", "item_scores_all", "=", "user_profile_array", ".", "dot", "(", "self", ".", "W_sparse", ")", ".", "toarray", "(", ")", "\n", "item_scores", "[", ":", ",", "items_to_compute", "]", "=", "item_scores_all", "[", ":", ",", "items_to_compute", "]", "\n", "", "else", ":", "\n", "            ", "item_scores", "=", "user_profile_array", ".", "dot", "(", "self", ".", "W_sparse", ")", ".", "toarray", "(", ")", "\n", "\n", "", "return", "item_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseSimilarityMatrixRecommender.BaseUserSimilarityMatrixRecommender._compute_item_score": [[97, 117], ["BaseSimilarityMatrixRecommender.BaseUserSimilarityMatrixRecommender._check_format", "user_weights_array.dot().toarray", "user_weights_array.dot().toarray", "numpy.ones", "user_weights_array.dot", "user_weights_array.dot", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender._check_format"], ["    ", "def", "_compute_item_score", "(", "self", ",", "user_id_array", ",", "items_to_compute", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        URM_train and W_sparse must have the same format, CSR\n        :param user_id_array:\n        :param items_to_compute:\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "_check_format", "(", ")", "\n", "\n", "user_weights_array", "=", "self", ".", "W_sparse", "[", "user_id_array", "]", "\n", "\n", "if", "items_to_compute", "is", "not", "None", ":", "\n", "            ", "item_scores", "=", "-", "np", ".", "ones", "(", "(", "len", "(", "user_id_array", ")", ",", "self", ".", "URM_train", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "inf", "\n", "item_scores_all", "=", "user_weights_array", ".", "dot", "(", "self", ".", "URM_train", ")", ".", "toarray", "(", ")", "\n", "item_scores", "[", ":", ",", "items_to_compute", "]", "=", "item_scores_all", "[", ":", ",", "items_to_compute", "]", "\n", "", "else", ":", "\n", "            ", "item_scores", "=", "user_weights_array", ".", "dot", "(", "self", ".", "URM_train", ")", ".", "toarray", "(", ")", "\n", "\n", "", "return", "item_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.__init__": [[19, 47], ["object.__init__", "recsys.Base.Recommender_utils.check_matrix", "BaseRecommender.BaseRecommender.URM_train.eliminate_zeros", "numpy.array", "numpy.array", "BaseRecommender.BaseRecommender._cold_user_mask.any", "BaseRecommender.BaseRecommender._cold_item_mask.any", "URM_train.copy", "numpy.ediff1d", "BaseRecommender.BaseRecommender._print", "numpy.ediff1d", "BaseRecommender.BaseRecommender._print", "BaseRecommender.BaseRecommender._cold_user_mask.sum", "BaseRecommender.BaseRecommender.URM_train.tocsc", "BaseRecommender.BaseRecommender._cold_item_mask.sum", "BaseRecommender.BaseRecommender._cold_user_mask.sum", "BaseRecommender.BaseRecommender._cold_item_mask.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "BaseRecommender", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "URM_train", "=", "check_matrix", "(", "URM_train", ".", "copy", "(", ")", ",", "'csr'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "URM_train", ".", "eliminate_zeros", "(", ")", "\n", "\n", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "self", ".", "URM_train", ".", "shape", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "filterTopPop", "=", "False", "\n", "self", ".", "filterTopPop_ItemsID", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "self", ".", "items_to_ignore_flag", "=", "False", "\n", "self", ".", "items_to_ignore_ID", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "self", ".", "_cold_user_mask", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "indptr", ")", "==", "0", "\n", "\n", "if", "self", ".", "_cold_user_mask", ".", "any", "(", ")", ":", "\n", "            ", "self", ".", "_print", "(", "\"URM Detected {} ({:.2f} %) cold users.\"", ".", "format", "(", "\n", "self", ".", "_cold_user_mask", ".", "sum", "(", ")", ",", "self", ".", "_cold_user_mask", ".", "sum", "(", ")", "/", "self", ".", "n_users", "*", "100", ")", ")", "\n", "\n", "\n", "", "self", ".", "_cold_item_mask", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", "==", "0", "\n", "\n", "if", "self", ".", "_cold_item_mask", ".", "any", "(", ")", ":", "\n", "            ", "self", ".", "_print", "(", "\"URM Detected {} ({:.2f} %) cold items.\"", ".", "format", "(", "\n", "self", ".", "_cold_item_mask", ".", "sum", "(", ")", ",", "self", ".", "_cold_item_mask", ".", "sum", "(", ")", "/", "self", ".", "n_items", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._get_cold_user_mask": [[49, 51], ["None"], "methods", ["None"], ["", "", "def", "_get_cold_user_mask", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cold_user_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._get_cold_item_mask": [[52, 54], ["None"], "methods", ["None"], ["", "def", "_get_cold_item_mask", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cold_item_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._print": [[56, 59], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "string", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"{}: {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.fit": [[60, 62], ["None"], "methods", ["None"], ["", "", "def", "fit", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.get_URM_train": [[63, 65], ["BaseRecommender.BaseRecommender.URM_train.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_URM_train", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "URM_train", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.set_URM_train": [[66, 81], ["recsys.Base.Recommender_utils.check_matrix", "BaseRecommender.BaseRecommender.URM_train.eliminate_zeros", "BaseRecommender.BaseRecommender._cold_user_mask.any", "len", "BaseRecommender.BaseRecommender._print", "URM_train_new.copy", "numpy.ediff1d", "BaseRecommender.BaseRecommender._print", "BaseRecommender.BaseRecommender._cold_user_mask.sum", "BaseRecommender.BaseRecommender._cold_user_mask.sum", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "set_URM_train", "(", "self", ",", "URM_train_new", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "URM_train", ".", "shape", "==", "URM_train_new", ".", "shape", ",", "\"{}: set_URM_train old and new URM train have different shapes\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "            ", "self", ".", "_print", "(", "\"set_URM_train keyword arguments not supported for this recommender class. Received: {}\"", ".", "format", "(", "kwargs", ")", ")", "\n", "\n", "", "self", ".", "URM_train", "=", "check_matrix", "(", "URM_train_new", ".", "copy", "(", ")", ",", "'csr'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "URM_train", ".", "eliminate_zeros", "(", ")", "\n", "\n", "self", ".", "_cold_user_mask", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "indptr", ")", "==", "0", "\n", "\n", "if", "self", ".", "_cold_user_mask", ".", "any", "(", ")", ":", "\n", "            ", "self", ".", "_print", "(", "\"Detected {} ({:.2f} %) cold users.\"", ".", "format", "(", "\n", "self", ".", "_cold_user_mask", ".", "sum", "(", ")", ",", "self", ".", "_cold_user_mask", ".", "sum", "(", ")", "/", "len", "(", "self", ".", "_cold_user_mask", ")", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.set_items_to_ignore": [[84, 87], ["numpy.array"], "methods", ["None"], ["", "", "def", "set_items_to_ignore", "(", "self", ",", "items_to_ignore", ")", ":", "\n", "        ", "self", ".", "items_to_ignore_flag", "=", "True", "\n", "self", ".", "items_to_ignore_ID", "=", "np", ".", "array", "(", "items_to_ignore", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.reset_items_to_ignore": [[88, 91], ["numpy.array"], "methods", ["None"], ["", "def", "reset_items_to_ignore", "(", "self", ")", ":", "\n", "        ", "self", ".", "items_to_ignore_flag", "=", "False", "\n", "self", ".", "items_to_ignore_ID", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._remove_TopPop_on_scores": [[100, 103], ["None"], "methods", ["None"], ["", "def", "_remove_TopPop_on_scores", "(", "self", ",", "scores_batch", ")", ":", "\n", "        ", "scores_batch", "[", ":", ",", "self", ".", "filterTopPop_ItemsID", "]", "=", "-", "np", ".", "inf", "\n", "return", "scores_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._remove_custom_items_on_scores": [[105, 108], ["None"], "methods", ["None"], ["", "def", "_remove_custom_items_on_scores", "(", "self", ",", "scores_batch", ")", ":", "\n", "        ", "scores_batch", "[", ":", ",", "self", ".", "items_to_ignore_ID", "]", "=", "-", "np", ".", "inf", "\n", "return", "scores_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._remove_seen_on_scores": [[110, 118], ["BaseRecommender.BaseRecommender.URM_train.getformat"], "methods", ["None"], ["", "def", "_remove_seen_on_scores", "(", "self", ",", "user_id", ",", "scores", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "URM_train", ".", "getformat", "(", ")", "==", "\"csr\"", ",", "\"Recommender_Base_Class: URM_train is not CSR, this will cause errors in filtering seen items\"", "\n", "\n", "seen", "=", "self", ".", "URM_train", ".", "indices", "[", "self", ".", "URM_train", ".", "indptr", "[", "user_id", "]", ":", "self", ".", "URM_train", ".", "indptr", "[", "user_id", "+", "1", "]", "]", "\n", "\n", "scores", "[", "seen", "]", "=", "-", "np", ".", "inf", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._compute_item_score": [[120, 129], ["NotImplementedError"], "methods", ["None"], ["", "def", "_compute_item_score", "(", "self", ",", "user_id_array", ",", "items_to_compute", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param user_id_array:       array containing the user indices whose recommendations need to be computed\n        :param items_to_compute:    array containing the items whose scores are to be computed.\n                                        If None, all items are computed, otherwise discarded items will have as score -np.inf\n        :return:                    array (len(user_id_array), n_items) with the score.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"BaseRecommender: compute_item_score not assigned for current recommender, unable to compute prediction scores\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.recommend": [[131, 223], ["numpy.isscalar", "BaseRecommender.BaseRecommender._compute_item_score", "range", "numpy.argsort", "range", "numpy.atleast_1d", "len", "BaseRecommender.BaseRecommender._remove_TopPop_on_scores", "BaseRecommender.BaseRecommender._remove_custom_items_on_scores", "len", "numpy.logical_not", "user_recommendation_list.tolist", "BaseRecommender.BaseRecommender._remove_seen_on_scores", "numpy.isinf", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender._compute_item_score", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._remove_TopPop_on_scores", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._remove_custom_items_on_scores", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender._remove_seen_on_scores"], ["", "def", "recommend", "(", "self", ",", "user_id_array", ",", "cutoff", "=", "None", ",", "remove_seen_flag", "=", "True", ",", "items_to_compute", "=", "None", ",", "\n", "remove_top_pop_flag", "=", "False", ",", "remove_custom_items_flag", "=", "False", ",", "return_scores", "=", "False", ")", ":", "\n", "\n", "# If is a scalar transform it in a 1-cell array", "\n", "        ", "if", "np", ".", "isscalar", "(", "user_id_array", ")", ":", "\n", "            ", "user_id_array", "=", "np", ".", "atleast_1d", "(", "user_id_array", ")", "\n", "single_user", "=", "True", "\n", "", "else", ":", "\n", "            ", "single_user", "=", "False", "\n", "\n", "", "if", "cutoff", "is", "None", ":", "\n", "            ", "cutoff", "=", "self", ".", "URM_train", ".", "shape", "[", "1", "]", "-", "1", "\n", "\n", "# Compute the scores using the model-specific function", "\n", "# Vectorize over all users in user_id_array", "\n", "", "scores_batch", "=", "self", ".", "_compute_item_score", "(", "user_id_array", ",", "items_to_compute", "=", "items_to_compute", ")", "\n", "\n", "\n", "# if self.normalize:", "\n", "#     # normalization will keep the scores in the same range", "\n", "#     # of value of the ratings in dataset", "\n", "#     user_profile = self.URM_train[user_id]", "\n", "#", "\n", "#     rated = user_profile.copy()", "\n", "#     rated.data = np.ones_like(rated.data)", "\n", "#     if self.sparse_weights:", "\n", "#         den = rated.dot(self.W_sparse).toarray().ravel()", "\n", "#     else:", "\n", "#         den = rated.dot(self.W).ravel()", "\n", "#     den[np.abs(den) < 1e-6] = 1.0  # to avoid NaNs", "\n", "#     scores /= den", "\n", "\n", "\n", "for", "user_index", "in", "range", "(", "len", "(", "user_id_array", ")", ")", ":", "\n", "\n", "            ", "user_id", "=", "user_id_array", "[", "user_index", "]", "\n", "\n", "if", "remove_seen_flag", ":", "\n", "                ", "scores_batch", "[", "user_index", ",", ":", "]", "=", "self", ".", "_remove_seen_on_scores", "(", "user_id", ",", "scores_batch", "[", "user_index", ",", ":", "]", ")", "\n", "\n", "# Sorting is done in three steps. Faster then plain np.argsort for higher number of items", "\n", "# - Partition the data to extract the set of relevant items", "\n", "# - Sort only the relevant items", "\n", "# - Get the original item index", "\n", "# relevant_items_partition = (-scores_user).argpartition(cutoff)[0:cutoff]", "\n", "# relevant_items_partition_sorting = np.argsort(-scores_user[relevant_items_partition])", "\n", "# ranking = relevant_items_partition[relevant_items_partition_sorting]", "\n", "#", "\n", "# ranking_list.append(ranking)", "\n", "\n", "\n", "", "", "if", "remove_top_pop_flag", ":", "\n", "            ", "scores_batch", "=", "self", ".", "_remove_TopPop_on_scores", "(", "scores_batch", ")", "\n", "\n", "", "if", "remove_custom_items_flag", ":", "\n", "            ", "scores_batch", "=", "self", ".", "_remove_custom_items_on_scores", "(", "scores_batch", ")", "\n", "\n", "# relevant_items_partition is block_size x cutoff", "\n", "", "relevant_items_partition", "=", "(", "-", "scores_batch", ")", ".", "argpartition", "(", "cutoff", ",", "axis", "=", "1", ")", "[", ":", ",", "0", ":", "cutoff", "]", "\n", "\n", "# Get original value and sort it", "\n", "# [:, None] adds 1 dimension to the array, from (block_size,) to (block_size,1)", "\n", "# This is done to correctly get scores_batch value as [row, relevant_items_partition[row,:]]", "\n", "relevant_items_partition_original_value", "=", "scores_batch", "[", "np", ".", "arange", "(", "scores_batch", ".", "shape", "[", "0", "]", ")", "[", ":", ",", "None", "]", ",", "relevant_items_partition", "]", "\n", "relevant_items_partition_sorting", "=", "np", ".", "argsort", "(", "-", "relevant_items_partition_original_value", ",", "axis", "=", "1", ")", "\n", "ranking", "=", "relevant_items_partition", "[", "np", ".", "arange", "(", "relevant_items_partition", ".", "shape", "[", "0", "]", ")", "[", ":", ",", "None", "]", ",", "relevant_items_partition_sorting", "]", "\n", "\n", "ranking_list", "=", "[", "None", "]", "*", "ranking", ".", "shape", "[", "0", "]", "\n", "\n", "# Remove from the recommendation list any item that has a -inf score", "\n", "# Since -inf is a flag to indicate an item to remove", "\n", "for", "user_index", "in", "range", "(", "len", "(", "user_id_array", ")", ")", ":", "\n", "            ", "user_recommendation_list", "=", "ranking", "[", "user_index", "]", "\n", "user_item_scores", "=", "scores_batch", "[", "user_index", ",", "user_recommendation_list", "]", "\n", "\n", "not_inf_scores_mask", "=", "np", ".", "logical_not", "(", "np", ".", "isinf", "(", "user_item_scores", ")", ")", "\n", "\n", "user_recommendation_list", "=", "user_recommendation_list", "[", "not_inf_scores_mask", "]", "\n", "ranking_list", "[", "user_index", "]", "=", "user_recommendation_list", ".", "tolist", "(", ")", "\n", "\n", "\n", "\n", "# Return single list for one user, instead of list of lists", "\n", "", "if", "single_user", ":", "\n", "            ", "ranking_list", "=", "ranking_list", "[", "0", "]", "\n", "\n", "\n", "", "if", "return_scores", ":", "\n", "            ", "return", "ranking_list", ",", "scores_batch", "\n", "\n", "", "else", ":", "\n", "            ", "return", "ranking_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.save_model": [[234, 236], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"BaseRecommender: save_model not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.load_model": [[240, 254], ["BaseRecommender.BaseRecommender._print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data.keys", "BaseRecommender.BaseRecommender._print", "BaseRecommender.BaseRecommender.__setattr__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "load_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "self", ".", "_print", "(", "\"Loading model from file '{}'\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "data_dict", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "file_name", ")", "\n", "\n", "for", "attrib_name", "in", "data_dict", ".", "keys", "(", ")", ":", "\n", "             ", "self", ".", "__setattr__", "(", "attrib_name", ",", "data_dict", "[", "attrib_name", "]", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Loading complete\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping.__init__": [[39, 41], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Incremental_Training_Early_Stopping", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping.get_early_stopping_final_epochs_dict": [[43, 53], ["None"], "methods", ["None"], ["", "def", "get_early_stopping_final_epochs_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function returns a dictionary to be used as optimal parameters in the .fit() function\n        It provides the flexibility to deal with multiple early-stopping in a single algorithm\n        e.g. in NeuMF there are three model components each with its own optimal number of epochs\n        the return dict would be {\"epochs\": epochs_best_neumf, \"epochs_gmf\": epochs_best_gmf, \"epochs_mlp\": epochs_best_mlp}\n        :return:\n        \"\"\"", "\n", "\n", "return", "{", "\"epochs\"", ":", "self", ".", "epochs_best", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._run_epoch": [[55, 64], ["NotImplementedError"], "methods", ["None"], ["", "def", "_run_epoch", "(", "self", ",", "num_epoch", ")", ":", "\n", "        ", "\"\"\"\n        This function should run a single epoch on the object you train. This may either involve calling a function to do an epoch\n        on a Cython object or a loop on the data points directly in python\n\n        :param num_epoch:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._prepare_model_for_validation": [[66, 76], ["NotImplementedError"], "methods", ["None"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function is executed before the evaluation of the current model\n        It should ensure the current object \"self\" can be passed to the evaluator object\n\n        E.G. if the epoch is done via Cython or PyTorch, this function should get the new parameter values from\n        the cython or pytorch objects into the self. pyhon object\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._update_best_model": [[78, 88], ["NotImplementedError"], "methods", ["None"], ["", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function is called when the incremental model is found to have better validation score than the current best one\n        So the current best model should be replaced by the current incremental one.\n\n        Important, remember to clone the objects and NOT to create a pointer-reference, otherwise the best solution will be altered\n        by the next epoch\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._train_with_early_stopping": [[91, 262], ["time.time", "Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._run_epoch", "recsys.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "print", "sys.stdout.flush", "sys.stderr.flush", "Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._prepare_model_for_validation", "Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._update_best_model", "recsys.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "time.time", "time.time", "print", "print", "print", "Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._prepare_model_for_validation", "evaluator_object.evaluateRecommender", "print", "numpy.isfinite", "isinstance", "print", "Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._update_best_model", "recsys.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "print", "Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._clean_temp_folder", "time.time", "list", "results_run.keys"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._run_epoch", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._prepare_model_for_validation", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._update_best_model", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._prepare_model_for_validation", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper.evaluateRecommender", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._update_best_model", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseTempFolder.BaseTempFolder._clean_temp_folder"], ["", "def", "_train_with_early_stopping", "(", "self", ",", "epochs_max", ",", "epochs_min", "=", "0", ",", "\n", "validation_every_n", "=", "None", ",", "stop_on_validation", "=", "False", ",", "\n", "validation_metric", "=", "None", ",", "lower_validations_allowed", "=", "None", ",", "evaluator_object", "=", "None", ",", "\n", "algorithm_name", "=", "\"Incremental_Training_Early_Stopping\"", ")", ":", "\n", "        ", "\"\"\"\n\n        :param epochs_max:                  max number of epochs the training will last\n        :param epochs_min:                  min number of epochs the training will last\n        :param validation_every_n:          number of epochs after which the model will be evaluated and a best_model selected\n        :param stop_on_validation:          [True/False] whether to stop the training before the max number of epochs\n        :param validation_metric:           which metric to use when selecting the best model, higher values are better\n        :param lower_validations_allowed:    number of contiguous validation steps required for the tranining to early-stop\n        :param evaluator_object:            evaluator instance used to compute the validation metrics.\n                                                If multiple cutoffs are available, the first one is used\n        :param algorithm_name:              name of the algorithm to be displayed in the output updates\n        :return: -\n\n\n        Supported uses:\n\n        - Train for max number of epochs with no validation nor early stopping:\n\n            _train_with_early_stopping(epochs_max = 100,\n                                        evaluator_object = None\n                                        epochs_min,                 not used\n                                        validation_every_n,         not used\n                                        stop_on_validation,         not used\n                                        validation_metric,          not used\n                                        lower_validations_allowed,   not used\n                                        )\n\n\n        - Train for max number of epochs with validation but NOT early stopping:\n\n            _train_with_early_stopping(epochs_max = 100,\n                                        evaluator_object = evaluator\n                                        stop_on_validation = False\n                                        validation_every_n = int value\n                                        validation_metric = metric name string\n                                        epochs_min,                 not used\n                                        lower_validations_allowed,   not used\n                                        )\n\n\n        - Train for max number of epochs with validation AND early stopping:\n\n            _train_with_early_stopping(epochs_max = 100,\n                                        epochs_min = int value\n                                        evaluator_object = evaluator\n                                        stop_on_validation = True\n                                        validation_every_n = int value\n                                        validation_metric = metric name string\n                                        lower_validations_allowed = int value\n                                        )\n\n\n\n        \"\"\"", "\n", "\n", "assert", "epochs_max", ">=", "0", ",", "\"{}: Number of epochs_max must be >= 0, passed was {}\"", ".", "format", "(", "algorithm_name", ",", "epochs_max", ")", "\n", "assert", "epochs_min", ">=", "0", ",", "\"{}: Number of epochs_min must be >= 0, passed was {}\"", ".", "format", "(", "algorithm_name", ",", "epochs_min", ")", "\n", "assert", "epochs_min", "<=", "epochs_max", ",", "\"{}: epochs_min must be <= epochs_max, passed are epochs_min {}, epochs_max {}\"", ".", "format", "(", "algorithm_name", ",", "epochs_min", ",", "epochs_max", ")", "\n", "\n", "# Train for max number of epochs with no validation nor early stopping", "\n", "# OR Train for max number of epochs with validation but NOT early stopping", "\n", "# OR Train for max number of epochs with validation AND early stopping", "\n", "assert", "evaluator_object", "is", "None", "or", "(", "evaluator_object", "is", "not", "None", "and", "not", "stop_on_validation", "and", "validation_every_n", "is", "not", "None", "and", "validation_metric", "is", "not", "None", ")", "or", "(", "evaluator_object", "is", "not", "None", "and", "stop_on_validation", "and", "validation_every_n", "is", "not", "None", "and", "validation_metric", "is", "not", "None", "and", "lower_validations_allowed", "is", "not", "None", ")", ",", "\"{}: Inconsistent parameters passed, please check the supported uses\"", ".", "format", "(", "algorithm_name", ")", "\n", "\n", "\n", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "best_validation_metric", "=", "None", "\n", "lower_validatons_count", "=", "0", "\n", "convergence", "=", "False", "\n", "\n", "self", ".", "epochs_best", "=", "0", "\n", "\n", "epochs_current", "=", "0", "\n", "\n", "while", "epochs_current", "<", "epochs_max", "and", "not", "convergence", ":", "\n", "\n", "            ", "self", ".", "_run_epoch", "(", "epochs_current", ")", "\n", "\n", "# If no validation required, always keep the latest", "\n", "if", "evaluator_object", "is", "None", ":", "\n", "\n", "                ", "self", ".", "epochs_best", "=", "epochs_current", "\n", "\n", "# Determine whether a validaton step is required", "\n", "", "elif", "(", "epochs_current", "+", "1", ")", "%", "validation_every_n", "==", "0", ":", "\n", "\n", "                ", "print", "(", "\"{}: Validation begins...\"", ".", "format", "(", "algorithm_name", ")", ")", "\n", "\n", "self", ".", "_prepare_model_for_validation", "(", ")", "\n", "\n", "# If the evaluator validation has multiple cutoffs, choose the first one", "\n", "results_run", ",", "results_run_string", "=", "evaluator_object", ".", "evaluateRecommender", "(", "self", ")", "\n", "results_run", "=", "results_run", "[", "list", "(", "results_run", ".", "keys", "(", ")", ")", "[", "0", "]", "]", "\n", "\n", "print", "(", "\"{}: {}\"", ".", "format", "(", "algorithm_name", ",", "results_run_string", ")", ")", "\n", "\n", "# Update optimal model", "\n", "current_metric_value", "=", "results_run", "[", "validation_metric", "]", "\n", "\n", "if", "not", "np", ".", "isfinite", "(", "current_metric_value", ")", ":", "\n", "                    ", "if", "isinstance", "(", "self", ",", "BaseTempFolder", ")", ":", "\n", "# If the recommender uses BaseTempFolder, clean the temp folder", "\n", "                        ", "self", ".", "_clean_temp_folder", "(", "temp_file_folder", "=", "self", ".", "temp_file_folder", ")", "\n", "\n", "", "assert", "False", ",", "\"{}: metric value is not a finite number, terminating!\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "\n", "", "if", "self", ".", "best_validation_metric", "is", "None", "or", "self", ".", "best_validation_metric", "<", "current_metric_value", ":", "\n", "\n", "                    ", "print", "(", "\"{}: New best model found! Updating.\"", ".", "format", "(", "algorithm_name", ")", ")", "\n", "\n", "self", ".", "best_validation_metric", "=", "current_metric_value", "\n", "\n", "self", ".", "_update_best_model", "(", ")", "\n", "\n", "self", ".", "epochs_best", "=", "epochs_current", "+", "1", "\n", "lower_validatons_count", "=", "0", "\n", "\n", "", "else", ":", "\n", "                    ", "lower_validatons_count", "+=", "1", "\n", "\n", "\n", "", "if", "stop_on_validation", "and", "lower_validatons_count", ">=", "lower_validations_allowed", "and", "epochs_current", ">=", "epochs_min", ":", "\n", "                    ", "convergence", "=", "True", "\n", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "new_time_value", ",", "new_time_unit", "=", "seconds_to_biggest_unit", "(", "elapsed_time", ")", "\n", "\n", "print", "(", "\"{}: Convergence reached! Terminating at epoch {}. Best value for '{}' at epoch {} is {:.4f}. Elapsed time {:.2f} {}\"", ".", "format", "(", "\n", "algorithm_name", ",", "epochs_current", "+", "1", ",", "validation_metric", ",", "self", ".", "epochs_best", ",", "self", ".", "best_validation_metric", ",", "new_time_value", ",", "new_time_unit", ")", ")", "\n", "\n", "\n", "", "", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "new_time_value", ",", "new_time_unit", "=", "seconds_to_biggest_unit", "(", "elapsed_time", ")", "\n", "\n", "print", "(", "\"{}: Epoch {} of {}. Elapsed time {:.2f} {}\"", ".", "format", "(", "\n", "algorithm_name", ",", "epochs_current", "+", "1", ",", "epochs_max", ",", "new_time_value", ",", "new_time_unit", ")", ")", "\n", "\n", "epochs_current", "+=", "1", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "# If no validation required, keep the latest", "\n", "", "if", "evaluator_object", "is", "None", ":", "\n", "\n", "            ", "self", ".", "_prepare_model_for_validation", "(", ")", "\n", "self", ".", "_update_best_model", "(", ")", "\n", "\n", "\n", "# Stop when max epochs reached and not early-stopping", "\n", "", "if", "not", "convergence", ":", "\n", "            ", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "new_time_value", ",", "new_time_unit", "=", "seconds_to_biggest_unit", "(", "elapsed_time", ")", "\n", "\n", "if", "evaluator_object", "is", "not", "None", "and", "self", ".", "best_validation_metric", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"{}: Terminating at epoch {}. Best value for '{}' at epoch {} is {:.4f}. Elapsed time {:.2f} {}\"", ".", "format", "(", "\n", "algorithm_name", ",", "epochs_current", ",", "validation_metric", ",", "self", ".", "epochs_best", ",", "self", ".", "best_validation_metric", ",", "new_time_value", ",", "new_time_unit", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"{}: Terminating at epoch {}. Elapsed time {:.2f} {}\"", ".", "format", "(", "\n", "algorithm_name", ",", "epochs_current", ",", "new_time_value", ",", "new_time_unit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender.__init__": [[23, 27], ["recsys.Base.BaseRecommender.BaseRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "BaseMatrixFactorizationRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n", "self", ".", "use_bias", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender._compute_item_score": [[38, 71], ["numpy.max", "numpy.max", "numpy.dot", "numpy.dot", "numpy.ones", "len"], "methods", ["None"], ["", "def", "_compute_item_score", "(", "self", ",", "user_id_array", ",", "items_to_compute", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        USER_factors is n_users x n_factors\n        ITEM_factors is n_items x n_factors\n\n        The prediction for cold users will always be -inf for ALL items\n\n        :param user_id_array:\n        :param items_to_compute:\n        :return:\n        \"\"\"", "\n", "\n", "assert", "self", ".", "USER_factors", ".", "shape", "[", "1", "]", "==", "self", ".", "ITEM_factors", ".", "shape", "[", "1", "]", ",", "\"{}: User and Item factors have inconsistent shape\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "assert", "self", ".", "USER_factors", ".", "shape", "[", "0", "]", ">", "np", ".", "max", "(", "user_id_array", ")", ",", "\"{}: Cold users not allowed. Users in trained model are {}, requested prediction for users up to {}\"", ".", "format", "(", "\n", "self", ".", "RECOMMENDER_NAME", ",", "self", ".", "USER_factors", ".", "shape", "[", "0", "]", ",", "np", ".", "max", "(", "user_id_array", ")", ")", "\n", "\n", "if", "items_to_compute", "is", "not", "None", ":", "\n", "            ", "item_scores", "=", "-", "np", ".", "ones", "(", "(", "len", "(", "user_id_array", ")", ",", "self", ".", "ITEM_factors", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "inf", "\n", "item_scores", "[", ":", ",", "items_to_compute", "]", "=", "np", ".", "dot", "(", "self", ".", "USER_factors", "[", "user_id_array", "]", ",", "self", ".", "ITEM_factors", "[", "items_to_compute", ",", ":", "]", ".", "T", ")", "\n", "\n", "", "else", ":", "\n", "            ", "item_scores", "=", "np", ".", "dot", "(", "self", ".", "USER_factors", "[", "user_id_array", "]", ",", "self", ".", "ITEM_factors", ".", "T", ")", "\n", "\n", "\n", "# No need to select only the specific negative items or warm users because the -inf score will not change", "\n", "", "if", "self", ".", "use_bias", ":", "\n", "            ", "item_scores", "+=", "self", ".", "ITEM_bias", "+", "self", ".", "GLOBAL_bias", "\n", "item_scores", "=", "(", "item_scores", ".", "T", "+", "self", ".", "USER_bias", "[", "user_id_array", "]", ")", ".", "T", "\n", "\n", "", "return", "item_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender.save_model": [[81, 103], ["BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender._print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "self", ".", "_print", "(", "\"Saving model in file '{}'\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "\"USER_factors\"", ":", "self", ".", "USER_factors", ",", "\n", "\"ITEM_factors\"", ":", "self", ".", "ITEM_factors", ",", "\n", "\"use_bias\"", ":", "self", ".", "use_bias", ",", "\n", "}", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "data_dict_to_save", "[", "\"ITEM_bias\"", "]", "=", "self", ".", "ITEM_bias", "\n", "data_dict_to_save", "[", "\"USER_bias\"", "]", "=", "self", ".", "USER_bias", "\n", "data_dict_to_save", "[", "\"GLOBAL_bias\"", "]", "=", "self", ".", "GLOBAL_bias", "\n", "\n", "", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "\n", "self", ".", "_print", "(", "\"Saving complete\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.okapi_BM_25": [[13, 51], ["numpy.all", "scipy.coo_matrix", "float", "numpy.log", "numpy.ravel", "np.ravel.mean", "sps.coo_matrix.tocsr", "numpy.isfinite", "numpy.sum", "sps.coo_matrix.sum", "numpy.logical_not", "numpy.isfinite", "numpy.bincount"], "function", ["None"], ["def", "okapi_BM_25", "(", "dataMatrix", ",", "K1", "=", "1.2", ",", "B", "=", "0.75", ")", ":", "\n", "    ", "\"\"\"\n    Items are assumed to be on rows\n    :param dataMatrix:\n    :param K1:\n    :param B:\n    :return:\n    \"\"\"", "\n", "\n", "assert", "B", ">", "0", "and", "B", "<", "1", ",", "\"okapi_BM_25: B must be in (0,1)\"", "\n", "assert", "K1", ">", "0", ",", "\"okapi_BM_25: K1 must be > 0\"", "\n", "\n", "assert", "np", ".", "all", "(", "np", ".", "isfinite", "(", "dataMatrix", ".", "data", ")", ")", ",", "\"okapi_BM_25: Data matrix contains {} non finite values\"", ".", "format", "(", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "np", ".", "isfinite", "(", "dataMatrix", ".", "data", ")", ")", ")", ")", "\n", "\n", "\n", "\n", "# Weighs each row of a sparse matrix by OkapiBM25 weighting", "\n", "# calculate idf per term (user)", "\n", "\n", "dataMatrix", "=", "sps", ".", "coo_matrix", "(", "dataMatrix", ")", "\n", "\n", "N", "=", "float", "(", "dataMatrix", ".", "shape", "[", "0", "]", ")", "\n", "idf", "=", "np", ".", "log", "(", "N", "/", "(", "1", "+", "np", ".", "bincount", "(", "dataMatrix", ".", "col", ")", ")", ")", "\n", "\n", "# calculate length_norm per document", "\n", "row_sums", "=", "np", ".", "ravel", "(", "dataMatrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "average_length", "=", "row_sums", ".", "mean", "(", ")", "\n", "length_norm", "=", "(", "1.0", "-", "B", ")", "+", "B", "*", "row_sums", "/", "average_length", "\n", "\n", "# weight matrix rows by bm25", "\n", "denominator", "=", "K1", "*", "length_norm", "[", "dataMatrix", ".", "row", "]", "+", "dataMatrix", ".", "data", "\n", "denominator", "[", "denominator", "==", "0.0", "]", "+=", "1e-9", "\n", "\n", "dataMatrix", ".", "data", "=", "dataMatrix", ".", "data", "*", "(", "K1", "+", "1.0", ")", "/", "denominator", "*", "idf", "[", "dataMatrix", ".", "col", "]", "\n", "\n", "return", "dataMatrix", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.TF_IDF": [[55, 79], ["numpy.all", "numpy.all", "scipy.coo_matrix", "float", "numpy.log", "sps.coo_matrix.tocsr", "numpy.isfinite", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.logical_not", "numpy.isfinite", "numpy.bincount"], "function", ["None"], ["", "def", "TF_IDF", "(", "dataMatrix", ")", ":", "\n", "    ", "\"\"\"\n    Items are assumed to be on rows\n    :param dataMatrix:\n    :return:\n    \"\"\"", "\n", "\n", "assert", "np", ".", "all", "(", "np", ".", "isfinite", "(", "dataMatrix", ".", "data", ")", ")", ",", "\"TF_IDF: Data matrix contains {} non finite values.\"", ".", "format", "(", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "np", ".", "isfinite", "(", "dataMatrix", ".", "data", ")", ")", ")", ")", "\n", "\n", "assert", "np", ".", "all", "(", "dataMatrix", ".", "data", ">=", "0.0", ")", ",", "\"TF_IDF: Data matrix contains {} negative values, computing the square root is not possible.\"", ".", "format", "(", "np", ".", "sum", "(", "dataMatrix", ".", "data", "<", "0.0", ")", ")", "\n", "\n", "# TFIDF each row of a sparse amtrix", "\n", "dataMatrix", "=", "sps", ".", "coo_matrix", "(", "dataMatrix", ")", "\n", "N", "=", "float", "(", "dataMatrix", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# calculate IDF", "\n", "idf", "=", "np", ".", "log", "(", "N", "/", "(", "1", "+", "np", ".", "bincount", "(", "dataMatrix", ".", "col", ")", ")", ")", "\n", "\n", "# apply TF-IDF adjustment", "\n", "dataMatrix", ".", "data", "=", "np", ".", "sqrt", "(", "dataMatrix", ".", "data", ")", "*", "idf", "[", "dataMatrix", ".", "col", "]", "\n", "\n", "return", "dataMatrix", ".", "tocsr", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseTempFolder.BaseTempFolder.__init__": [[15, 19], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseTempFolder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "DEFAULT_TEMP_FILE_FOLDER", "=", "'./result_experiments/__Temp_{}/'", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseTempFolder.BaseTempFolder._get_unique_temp_folder": [[21, 37], ["print", "recsys.Base.Recommender_utils.get_unique_temp_folder", "print", "recsys.Base.Recommender_utils.get_unique_temp_folder", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.get_unique_temp_folder", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.get_unique_temp_folder"], ["", "def", "_get_unique_temp_folder", "(", "self", ",", "input_temp_file_folder", "=", "None", ")", ":", "\n", "\n", "        ", "if", "input_temp_file_folder", "is", "None", ":", "\n", "            ", "print", "(", "\"{}: Using default Temp folder '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "self", ".", "DEFAULT_TEMP_FILE_FOLDER", ")", ")", "\n", "self", ".", "_use_default_temp_folder", "=", "True", "\n", "output_temp_file_folder", "=", "get_unique_temp_folder", "(", "self", ".", "DEFAULT_TEMP_FILE_FOLDER", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"{}: Using Temp folder '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "input_temp_file_folder", ")", ")", "\n", "self", ".", "_use_default_temp_folder", "=", "False", "\n", "output_temp_file_folder", "=", "get_unique_temp_folder", "(", "input_temp_file_folder", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_temp_file_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_temp_file_folder", ")", "\n", "\n", "\n", "", "return", "output_temp_file_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseTempFolder.BaseTempFolder._clean_temp_folder": [[40, 52], ["print", "shutil.rmtree", "print"], "methods", ["None"], ["", "def", "_clean_temp_folder", "(", "self", ",", "temp_file_folder", ")", ":", "\n", "        ", "\"\"\"\n        Clean temporary folder only if the default one\n        :return:\n        \"\"\"", "\n", "\n", "if", "self", ".", "_use_default_temp_folder", ":", "\n", "            ", "print", "(", "\"{}: Cleaning temporary files from '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "temp_file_folder", ")", ")", "\n", "shutil", ".", "rmtree", "(", "temp_file_folder", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"{}: Maintaining temporary files due to a custom temp folder being selected\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseCBFRecommender.BaseItemCBFRecommender.__init__": [[21, 37], ["recsys.Base.BaseRecommender.BaseRecommender.__init__", "recsys.Base.Recommender_utils.check_matrix", "BaseCBFRecommender.BaseItemCBFRecommender.ICM_train.eliminate_zeros", "BaseCBFRecommender.BaseItemCBFRecommender._cold_item_CBF_mask.any", "ICM_train.copy", "numpy.ediff1d", "print", "BaseCBFRecommender.BaseItemCBFRecommender._cold_item_CBF_mask.sum", "BaseCBFRecommender.BaseItemCBFRecommender._cold_item_CBF_mask.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "ICM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "BaseItemCBFRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n", "assert", "self", ".", "n_items", "==", "ICM_train", ".", "shape", "[", "0", "]", ",", "\"{}: URM_train has {} items but ICM_train has {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "self", ".", "n_items", ",", "ICM_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "self", ".", "ICM_train", "=", "check_matrix", "(", "ICM_train", ".", "copy", "(", ")", ",", "'csr'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "ICM_train", ".", "eliminate_zeros", "(", ")", "\n", "\n", "_", ",", "self", ".", "n_features", "=", "self", ".", "ICM_train", ".", "shape", "\n", "\n", "\n", "self", ".", "_cold_item_CBF_mask", "=", "np", ".", "ediff1d", "(", "self", ".", "ICM_train", ".", "indptr", ")", "==", "0", "\n", "\n", "if", "self", ".", "_cold_item_CBF_mask", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "\"{}: ICM Detected {} ({:.2f} %) items with no features.\"", ".", "format", "(", "\n", "self", ".", "RECOMMENDER_NAME", ",", "self", ".", "_cold_item_CBF_mask", ".", "sum", "(", ")", ",", "self", ".", "_cold_item_CBF_mask", ".", "sum", "(", ")", "/", "self", ".", "n_items", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseCBFRecommender.BaseUserCBFRecommender.__init__": [[49, 64], ["recsys.Base.BaseRecommender.BaseRecommender.__init__", "recsys.Base.Recommender_utils.check_matrix", "BaseCBFRecommender.BaseUserCBFRecommender.UCM_train.eliminate_zeros", "BaseCBFRecommender.BaseUserCBFRecommender._cold_user_CBF_mask.any", "UCM_train.copy", "numpy.ediff1d", "print", "BaseCBFRecommender.BaseUserCBFRecommender._cold_user_CBF_mask.sum", "BaseCBFRecommender.BaseUserCBFRecommender._cold_user_CBF_mask.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "UCM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "BaseUserCBFRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n", "assert", "self", ".", "n_users", "==", "UCM_train", ".", "shape", "[", "0", "]", ",", "\"{}: URM_train has {} users but UCM_train has {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "self", ".", "n_items", ",", "UCM_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "self", ".", "UCM_train", "=", "check_matrix", "(", "UCM_train", ".", "copy", "(", ")", ",", "'csr'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "UCM_train", ".", "eliminate_zeros", "(", ")", "\n", "\n", "_", ",", "self", ".", "n_features", "=", "self", ".", "UCM_train", ".", "shape", "\n", "\n", "self", ".", "_cold_user_CBF_mask", "=", "np", ".", "ediff1d", "(", "self", ".", "UCM_train", ".", "indptr", ")", "==", "0", "\n", "\n", "if", "self", ".", "_cold_user_CBF_mask", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "\"{}: UCM Detected {} ({:.2f} %) cold users.\"", ".", "format", "(", "\n", "self", ".", "RECOMMENDER_NAME", ",", "self", ".", "_cold_user_CBF_mask", ".", "sum", "(", ")", ",", "self", ".", "_cold_user_CBF_mask", ".", "sum", "(", ")", "/", "self", ".", "n_users", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix": [[13, 53], ["sps.csr_matrix.tocsc().astype", "isinstance", "sps.csr_matrix.tocsr().astype", "sps.csr_matrix.tocsc", "isinstance", "sps.csr_matrix.tocoo().astype", "sps.csr_matrix.tocsr", "isinstance", "sps.csr_matrix.todok().astype", "sps.csr_matrix.tocoo", "isinstance", "sps.csr_matrix.tobsr().astype", "sps.csr_matrix.todok", "isinstance", "sps.csr_matrix.todia().astype", "sps.csr_matrix.tobsr", "isinstance", "sps.csr_matrix.tolil().astype", "sps.csr_matrix.todia", "isinstance", "scipy.issparse", "isinstance", "sps.csr_matrix.tolil", "sps.csr_matrix.toarray().astype", "numpy.array", "scipy.csr_matrix", "sps.csr_matrix.eliminate_zeros", "Recommender_utils.check_matrix", "sps.csr_matrix.astype", "sps.csr_matrix.toarray"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["def", "check_matrix", "(", "X", ",", "format", "=", "'csc'", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    This function takes a matrix as input and transforms it into the specified format.\n    The matrix in input can be either sparse or ndarray.\n    If the matrix in input has already the desired format, it is returned as-is\n    the dtype parameter is always applied and the default is np.float32\n    :param X:\n    :param format:\n    :param dtype:\n    :return:\n    \"\"\"", "\n", "\n", "\n", "if", "format", "==", "'csc'", "and", "not", "isinstance", "(", "X", ",", "sps", ".", "csc_matrix", ")", ":", "\n", "        ", "return", "X", ".", "tocsc", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "", "elif", "format", "==", "'csr'", "and", "not", "isinstance", "(", "X", ",", "sps", ".", "csr_matrix", ")", ":", "\n", "        ", "return", "X", ".", "tocsr", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "", "elif", "format", "==", "'coo'", "and", "not", "isinstance", "(", "X", ",", "sps", ".", "coo_matrix", ")", ":", "\n", "        ", "return", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "", "elif", "format", "==", "'dok'", "and", "not", "isinstance", "(", "X", ",", "sps", ".", "dok_matrix", ")", ":", "\n", "        ", "return", "X", ".", "todok", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "", "elif", "format", "==", "'bsr'", "and", "not", "isinstance", "(", "X", ",", "sps", ".", "bsr_matrix", ")", ":", "\n", "        ", "return", "X", ".", "tobsr", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "", "elif", "format", "==", "'dia'", "and", "not", "isinstance", "(", "X", ",", "sps", ".", "dia_matrix", ")", ":", "\n", "        ", "return", "X", ".", "todia", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "", "elif", "format", "==", "'lil'", "and", "not", "isinstance", "(", "X", ",", "sps", ".", "lil_matrix", ")", ":", "\n", "        ", "return", "X", ".", "tolil", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "", "elif", "format", "==", "'npy'", ":", "\n", "        ", "if", "sps", ".", "issparse", "(", "X", ")", ":", "\n", "            ", "return", "X", ".", "toarray", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "X", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "X", "=", "sps", ".", "csr_matrix", "(", "X", ",", "dtype", "=", "dtype", ")", "\n", "X", ".", "eliminate_zeros", "(", ")", "\n", "return", "check_matrix", "(", "X", ",", "format", "=", "format", ",", "dtype", "=", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "return", "X", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK": [[55, 123], ["time.time", "min", "range", "cols_indptr.append", "scipy.csc_matrix", "print", "isinstance", "Recommender_utils.check_matrix", "numpy.arange", "cols_indptr.append", "numpy.argsort", "data.extend", "rows_indices.extend", "len", "print", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "", "def", "similarityMatrixTopK", "(", "item_weights", ",", "k", "=", "100", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    The function selects the TopK most similar elements, column-wise\n\n    :param item_weights:\n    :param forceSparseOutput:\n    :param k:\n    :param verbose:\n    :param inplace: Default True, WARNING matrix will be modified\n    :return:\n    \"\"\"", "\n", "\n", "assert", "(", "item_weights", ".", "shape", "[", "0", "]", "==", "item_weights", ".", "shape", "[", "1", "]", ")", ",", "\"selectTopK: ItemWeights is not a square matrix\"", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Generating topK matrix\"", ")", "\n", "\n", "", "nitems", "=", "item_weights", ".", "shape", "[", "1", "]", "\n", "k", "=", "min", "(", "k", ",", "nitems", ")", "\n", "\n", "# for each column, keep only the top-k scored items", "\n", "sparse_weights", "=", "not", "isinstance", "(", "item_weights", ",", "np", ".", "ndarray", ")", "\n", "\n", "# iterate over each column and keep only the top-k similar items", "\n", "data", ",", "rows_indices", ",", "cols_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "if", "sparse_weights", ":", "\n", "        ", "item_weights", "=", "check_matrix", "(", "item_weights", ",", "format", "=", "'csc'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "column_row_index", "=", "np", ".", "arange", "(", "nitems", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "\n", "\n", "", "for", "item_idx", "in", "range", "(", "nitems", ")", ":", "\n", "\n", "        ", "cols_indptr", ".", "append", "(", "len", "(", "data", ")", ")", "\n", "\n", "if", "sparse_weights", ":", "\n", "            ", "start_position", "=", "item_weights", ".", "indptr", "[", "item_idx", "]", "\n", "end_position", "=", "item_weights", ".", "indptr", "[", "item_idx", "+", "1", "]", "\n", "\n", "column_data", "=", "item_weights", ".", "data", "[", "start_position", ":", "end_position", "]", "\n", "column_row_index", "=", "item_weights", ".", "indices", "[", "start_position", ":", "end_position", "]", "\n", "\n", "", "else", ":", "\n", "            ", "column_data", "=", "item_weights", "[", ":", ",", "item_idx", "]", "\n", "\n", "\n", "", "non_zero_data", "=", "column_data", "!=", "0", "\n", "\n", "idx_sorted", "=", "np", ".", "argsort", "(", "column_data", "[", "non_zero_data", "]", ")", "# sort by column", "\n", "top_k_idx", "=", "idx_sorted", "[", "-", "k", ":", "]", "\n", "\n", "data", ".", "extend", "(", "column_data", "[", "non_zero_data", "]", "[", "top_k_idx", "]", ")", "\n", "rows_indices", ".", "extend", "(", "column_row_index", "[", "non_zero_data", "]", "[", "top_k_idx", "]", ")", "\n", "\n", "\n", "", "cols_indptr", ".", "append", "(", "len", "(", "data", ")", ")", "\n", "\n", "# During testing CSR is faster", "\n", "W_sparse", "=", "sps", ".", "csc_matrix", "(", "(", "data", ",", "rows_indices", ",", "cols_indptr", ")", ",", "shape", "=", "(", "nitems", ",", "nitems", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Sparse TopK matrix generated in {:.2f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "", "return", "W_sparse", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.areURMequals": [[127, 133], ["None"], "function", ["None"], ["", "def", "areURMequals", "(", "URM1", ",", "URM2", ")", ":", "\n", "\n", "    ", "if", "(", "URM1", ".", "shape", "!=", "URM2", ".", "shape", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "(", "URM1", "-", "URM2", ")", ".", "nnz", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.removeTopPop": [[135, 171], ["URM_1.sum", "numpy.asarray().squeeze", "int", "numpy.in1d", "URM_2.sum", "numpy.argsort", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.asarray", "len", "len", "len", "len", "numpy.logical_not"], "function", ["None"], ["", "def", "removeTopPop", "(", "URM_1", ",", "URM_2", "=", "None", ",", "percentageToRemove", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"\n    Remove the top popular items from the matrix\n    :param URM_1: user X items\n    :param URM_2: user X items\n    :param percentageToRemove: value 1 corresponds to 100%\n    :return: URM: user X selectedItems, obtained from URM_1\n             Array: itemMappings[selectedItemIndex] = originalItemIndex\n             Array: removedItems\n    \"\"\"", "\n", "\n", "\n", "item_pop", "=", "URM_1", ".", "sum", "(", "axis", "=", "0", ")", "# this command returns a numpy.matrix of size (1, nitems)", "\n", "\n", "if", "URM_2", "!=", "None", ":", "\n", "\n", "        ", "assert", "URM_2", ".", "shape", "[", "1", "]", "==", "URM_1", ".", "shape", "[", "1", "]", ",", "\"The two URM do not contain the same number of columns, URM_1 has {}, URM_2 has {}\"", ".", "format", "(", "URM_1", ".", "shape", "[", "1", "]", ",", "URM_2", ".", "shape", "[", "1", "]", ")", "\n", "\n", "item_pop", "+=", "URM_2", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "\n", "", "item_pop", "=", "np", ".", "asarray", "(", "item_pop", ")", ".", "squeeze", "(", ")", "# necessary to convert it into a numpy.array of size (nitems,)", "\n", "popularItemsSorted", "=", "np", ".", "argsort", "(", "item_pop", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "numItemsToRemove", "=", "int", "(", "len", "(", "popularItemsSorted", ")", "*", "percentageToRemove", ")", "\n", "\n", "# Choose which columns to keep", "\n", "itemMask", "=", "np", ".", "in1d", "(", "np", ".", "arange", "(", "len", "(", "popularItemsSorted", ")", ")", ",", "popularItemsSorted", "[", ":", "numItemsToRemove", "]", ",", "invert", "=", "True", ")", "\n", "\n", "# Map the column index of the new URM to the original ItemID", "\n", "itemMappings", "=", "np", ".", "arange", "(", "len", "(", "popularItemsSorted", ")", ")", "[", "itemMask", "]", "\n", "\n", "removedItems", "=", "np", ".", "arange", "(", "len", "(", "popularItemsSorted", ")", ")", "[", "np", ".", "logical_not", "(", "itemMask", ")", "]", "\n", "\n", "return", "URM_1", "[", ":", ",", "itemMask", "]", ",", "itemMappings", ",", "removedItems", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.addZeroSamples": [[173, 212], ["S_matrix.tocoo", "list", "list", "list", "set", "zip", "numpy.random.randint", "numpy.random.randint", "list.append", "list.append", "list.append", "set.add", "SystemExit"], "function", ["None"], ["", "def", "addZeroSamples", "(", "S_matrix", ",", "numSamplesToAdd", ")", ":", "\n", "\n", "    ", "n_items", "=", "S_matrix", ".", "shape", "[", "1", "]", "\n", "\n", "S_matrix_coo", "=", "S_matrix", ".", "tocoo", "(", ")", "\n", "\n", "row_index", "=", "list", "(", "S_matrix_coo", ".", "row", ")", "\n", "col_index", "=", "list", "(", "S_matrix_coo", ".", "col", ")", "\n", "data", "=", "list", "(", "S_matrix_coo", ".", "data", ")", "\n", "\n", "existingSamples", "=", "set", "(", "zip", "(", "row_index", ",", "col_index", ")", ")", "\n", "\n", "addedSamples", "=", "0", "\n", "consecutiveFailures", "=", "0", "\n", "\n", "while", "(", "addedSamples", "<", "numSamplesToAdd", ")", ":", "\n", "\n", "        ", "item1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_items", ")", "\n", "item2", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_items", ")", "\n", "\n", "if", "(", "item1", "!=", "item2", "and", "(", "item1", ",", "item2", ")", "not", "in", "existingSamples", ")", ":", "\n", "\n", "            ", "row_index", ".", "append", "(", "item1", ")", "\n", "col_index", ".", "append", "(", "item2", ")", "\n", "data", ".", "append", "(", "0", ")", "\n", "\n", "existingSamples", ".", "add", "(", "(", "item1", ",", "item2", ")", ")", "\n", "\n", "addedSamples", "+=", "1", "\n", "consecutiveFailures", "=", "0", "\n", "\n", "", "else", ":", "\n", "            ", "consecutiveFailures", "+=", "1", "\n", "\n", "", "if", "(", "consecutiveFailures", ">=", "100", ")", ":", "\n", "            ", "raise", "SystemExit", "(", "\n", "\"Unable to generate required zero samples, termination at 100 consecutive discarded samples\"", ")", "\n", "\n", "", "", "return", "row_index", ",", "col_index", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.reshapeSparse": [[214, 225], ["sparseMatrix.tocoo.tocoo", "scipy.csr_matrix", "ValueError"], "function", ["None"], ["", "def", "reshapeSparse", "(", "sparseMatrix", ",", "newShape", ")", ":", "\n", "\n", "    ", "if", "sparseMatrix", ".", "shape", "[", "0", "]", ">", "newShape", "[", "0", "]", "or", "sparseMatrix", ".", "shape", "[", "1", "]", ">", "newShape", "[", "1", "]", ":", "\n", "        ", "ValueError", "(", "\"New shape cannot be smaller than SparseMatrix. SparseMatrix shape is: {}, newShape is {}\"", ".", "format", "(", "\n", "sparseMatrix", ".", "shape", ",", "newShape", ")", ")", "\n", "\n", "\n", "", "sparseMatrix", "=", "sparseMatrix", ".", "tocoo", "(", ")", "\n", "newMatrix", "=", "sps", ".", "csr_matrix", "(", "(", "sparseMatrix", ".", "data", ",", "(", "sparseMatrix", ".", "row", ",", "sparseMatrix", ".", "col", ")", ")", ",", "shape", "=", "newShape", ")", "\n", "\n", "return", "newMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.get_unique_temp_folder": [[234, 258], ["os.path.isdir", "os.makedirs", "str"], "function", ["None"], ["", "def", "get_unique_temp_folder", "(", "input_temp_folder_path", ")", ":", "\n", "    ", "\"\"\"\n    The function returns the path of a folder in result_experiments\n    The function guarantees that the folder is not already existent and it creates it\n    :return:\n    \"\"\"", "\n", "\n", "if", "input_temp_folder_path", "[", "-", "1", "]", "==", "\"/\"", ":", "\n", "        ", "input_temp_folder_path", "=", "input_temp_folder_path", "[", ":", "-", "1", "]", "\n", "\n", "", "progressive_temp_folder_name", "=", "input_temp_folder_path", "\n", "\n", "counter_suffix", "=", "0", "\n", "\n", "while", "os", ".", "path", ".", "isdir", "(", "progressive_temp_folder_name", ")", ":", "\n", "\n", "        ", "counter_suffix", "+=", "1", "\n", "progressive_temp_folder_name", "=", "input_temp_folder_path", "+", "\"_\"", "+", "str", "(", "counter_suffix", ")", "\n", "\n", "\n", "", "progressive_temp_folder_name", "+=", "\"/\"", "\n", "os", ".", "makedirs", "(", "progressive_temp_folder_name", ")", "\n", "\n", "return", "progressive_temp_folder_name", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO.__init__": [[40, 47], ["object.__init__", "platform.system"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "folder_path", ")", ":", "\n", "        ", "super", "(", "DataIO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_is_windows", "=", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "\n", "\n", "self", ".", "folder_path", "=", "folder_path", "\n", "self", ".", "_key_string_alert_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO._print": [[52, 54], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "message", ")", ":", "\n", "        ", "print", "(", "\"{}: {}\"", ".", "format", "(", "\"DataIO\"", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO._get_temp_folder": [[56, 76], ["os.path.exists", "os.makedirs", "DataIO.DataIO._print", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "_get_temp_folder", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"\n        Creates a temporary folder to be used during the data saving\n        :return:\n        \"\"\"", "\n", "\n", "# Ignore the .zip extension", "\n", "file_name", "=", "file_name", "[", ":", "-", "4", "]", "\n", "\n", "current_temp_folder", "=", "\"{}{}_{}/\"", ".", "format", "(", "self", ".", "folder_path", ",", "self", ".", "_DEFAULT_TEMP_FOLDER", ",", "file_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "current_temp_folder", ")", ":", "\n", "            ", "self", ".", "_print", "(", "\"Folder {} already exists, could be the result of a previous failed save attempt or multiple saver are active in parallel. \"", "\"Folder will be removed.\"", ".", "format", "(", "current_temp_folder", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "current_temp_folder", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "current_temp_folder", ")", "\n", "\n", "return", "current_temp_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO._check_dict_key_type": [[78, 100], ["all", "all", "DataIO.DataIO._print", "str", "isinstance", "dict_to_save.items", "dict_to_save.keys", "dict_to_save.items", "str"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "_check_dict_key_type", "(", "self", ",", "dict_to_save", ")", ":", "\n", "        ", "\"\"\"\n        Check whether the keys of the dictionary are string. If not, transforms them into strings\n        :param dict_to_save:\n        :return:\n        \"\"\"", "\n", "\n", "all_keys_are_str", "=", "all", "(", "isinstance", "(", "key", ",", "str", ")", "for", "key", "in", "dict_to_save", ".", "keys", "(", ")", ")", "\n", "\n", "if", "all_keys_are_str", ":", "\n", "            ", "return", "dict_to_save", "\n", "\n", "", "if", "not", "self", ".", "_key_string_alert_done", ":", "\n", "            ", "self", ".", "_print", "(", "\"Json dumps supports only 'str' as dictionary keys. Transforming keys to string, note that this will alter the mapper content.\"", ")", "\n", "self", ".", "_key_string_alert_done", "=", "True", "\n", "\n", "", "dict_to_save_key_str", "=", "{", "str", "(", "key", ")", ":", "val", "for", "(", "key", ",", "val", ")", "in", "dict_to_save", ".", "items", "(", ")", "}", "\n", "\n", "assert", "all", "(", "dict_to_save_key_str", "[", "str", "(", "key", ")", "]", "==", "val", "for", "(", "key", ",", "val", ")", "in", "dict_to_save", ".", "items", "(", ")", ")", ",", "\"DataIO: Transforming dictionary keys into strings altered its content. Duplicate keys may have been produced.\"", "\n", "\n", "return", "dict_to_save_key_str", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO.save_data": [[102, 187], ["DataIO.DataIO._get_temp_folder", "data_dict_to_save.items", "attribute_to_file_name.copy", "attribute_to_json_file.items", "shutil.rmtree", "os.path.exists", "os.makedirs", "isinstance", "zipfile.ZipFile", "attribute_to_file_name.values", "DataIO.DataIO.to_csv", "isinstance", "current_file_path.startswith", "open", "isinstance", "json.dump", "myzip.write", "scipy.save_npz", "isinstance", "os.getcwd", "DataIO.DataIO._check_dict_key_type", "numpy.save", "os.getcwd", "json.dumps", "isinstance", "DataIO.DataIO", "DataIO.save_data", "TypeError"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO._get_temp_folder", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO._check_dict_key_type", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "save_data", "(", "self", ",", "file_name", ",", "data_dict_to_save", ")", ":", "\n", "\n", "# If directory does not exist, create with .temp_model_folder", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "folder_path", ")", "\n", "\n", "", "if", "file_name", "[", "-", "4", ":", "]", "!=", "\".zip\"", ":", "\n", "            ", "file_name", "+=", "\".zip\"", "\n", "\n", "\n", "", "current_temp_folder", "=", "self", ".", "_get_temp_folder", "(", "file_name", ")", "\n", "\n", "attribute_to_file_name", "=", "{", "}", "\n", "attribute_to_json_file", "=", "{", "}", "\n", "\n", "for", "attrib_name", ",", "attrib_data", "in", "data_dict_to_save", ".", "items", "(", ")", ":", "\n", "\n", "            ", "current_file_path", "=", "current_temp_folder", "+", "attrib_name", "\n", "\n", "if", "isinstance", "(", "attrib_data", ",", "DataFrame", ")", ":", "\n", "                ", "attrib_data", ".", "to_csv", "(", "current_file_path", "+", "\".csv\"", ",", "index", "=", "False", ")", "\n", "attribute_to_file_name", "[", "attrib_name", "]", "=", "attrib_name", "+", "\".csv\"", "\n", "\n", "", "elif", "isinstance", "(", "attrib_data", ",", "sps", ".", "spmatrix", ")", ":", "\n", "                ", "sps", ".", "save_npz", "(", "current_file_path", ",", "attrib_data", ")", "\n", "attribute_to_file_name", "[", "attrib_name", "]", "=", "attrib_name", "+", "\".npz\"", "\n", "\n", "", "elif", "isinstance", "(", "attrib_data", ",", "np", ".", "ndarray", ")", ":", "\n", "# allow_pickle is FALSE to prevent using pickle and ensure portability", "\n", "                ", "np", ".", "save", "(", "current_file_path", ",", "attrib_data", ",", "allow_pickle", "=", "False", ")", "\n", "attribute_to_file_name", "[", "attrib_name", "]", "=", "attrib_name", "+", "\".npy\"", "\n", "\n", "", "else", ":", "\n", "# Try to parse it as json, if it fails and the data is a dictionary, use another zip file", "\n", "                ", "try", ":", "\n", "                    ", "_", "=", "json", ".", "dumps", "(", "attrib_data", ",", "default", "=", "json_not_serializable_handler", ")", "\n", "attribute_to_json_file", "[", "attrib_name", "]", "=", "attrib_data", "\n", "attribute_to_file_name", "[", "attrib_name", "]", "=", "attrib_name", "+", "\".json\"", "\n", "\n", "", "except", "TypeError", ":", "\n", "\n", "                    ", "if", "isinstance", "(", "attrib_data", ",", "dict", ")", ":", "\n", "                        ", "dataIO", "=", "DataIO", "(", "folder_path", "=", "current_temp_folder", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "attrib_name", ",", "data_dict_to_save", "=", "attrib_data", ")", "\n", "attribute_to_file_name", "[", "attrib_name", "]", "=", "attrib_name", "+", "\".zip\"", "\n", "\n", "", "else", ":", "\n", "                        ", "raise", "TypeError", "(", "\"Type not recognized for attribute: {}\"", ".", "format", "(", "attrib_name", ")", ")", "\n", "\n", "\n", "\n", "# Save list objects", "\n", "", "", "", "", "attribute_to_json_file", "[", "\".DataIO_attribute_to_file_name\"", "]", "=", "attribute_to_file_name", ".", "copy", "(", ")", "\n", "\n", "for", "attrib_name", ",", "attrib_data", "in", "attribute_to_json_file", ".", "items", "(", ")", ":", "\n", "\n", "            ", "current_file_path", "=", "current_temp_folder", "+", "attrib_name", "\n", "attribute_to_file_name", "[", "attrib_name", "]", "=", "attrib_name", "+", "\".json\"", "\n", "\n", "# if self._is_windows and len(current_file_path + \".json\") >= self._MAX_PATH_LENGTH_WINDOWS:", "\n", "#     current_file_path = \"\\\\\\\\?\\\\\" + current_file_path", "\n", "\n", "absolute_path", "=", "current_file_path", "+", "\".json\"", "if", "current_file_path", ".", "startswith", "(", "os", ".", "getcwd", "(", ")", ")", "else", "os", ".", "getcwd", "(", ")", "+", "current_file_path", "+", "\".json\"", "\n", "\n", "# assert not self._is_windows or (self._is_windows and len(absolute_path) <= self._MAX_PATH_LENGTH_WINDOWS), \\", "\n", "#     \"DataIO: Path of file exceeds {} characters, which is the maximum allowed under standard paths for Windows.\".format(self._MAX_PATH_LENGTH_WINDOWS)", "\n", "\n", "\n", "with", "open", "(", "current_file_path", "+", "\".json\"", ",", "'w'", ")", "as", "outfile", ":", "\n", "\n", "                ", "if", "isinstance", "(", "attrib_data", ",", "dict", ")", ":", "\n", "                    ", "attrib_data", "=", "self", ".", "_check_dict_key_type", "(", "attrib_data", ")", "\n", "\n", "", "json", ".", "dump", "(", "attrib_data", ",", "outfile", ",", "default", "=", "json_not_serializable_handler", ")", "\n", "\n", "\n", "\n", "", "", "with", "zipfile", ".", "ZipFile", "(", "self", ".", "folder_path", "+", "file_name", ",", "'w'", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "\n", "            ", "for", "file_name", "in", "attribute_to_file_name", ".", "values", "(", ")", ":", "\n", "                ", "myzip", ".", "write", "(", "current_temp_folder", "+", "file_name", ",", "arcname", "=", "file_name", ")", "\n", "\n", "\n", "\n", "", "", "shutil", ".", "rmtree", "(", "current_temp_folder", ",", "ignore_errors", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO.load_data": [[189, 251], ["zipfile.ZipFile", "zipfile.ZipFile.testzip", "DataIO.DataIO._get_temp_folder", "shutil.rmtree", "json.load.items", "zipfile.ZipFile.extract", "open", "json.load", "zipfile.ZipFile.extract", "shutil.rmtree", "zipfile.ZipFile.extract", "file_name.split", "pandas.read_csv", "scipy.load_npz", "numpy.load", "DataIO.DataIO", "DataIO.load_data", "Exception", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.DataIO._get_temp_folder", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data"], ["", "def", "load_data", "(", "self", ",", "file_name", ")", ":", "\n", "\n", "        ", "if", "file_name", "[", "-", "4", ":", "]", "!=", "\".zip\"", ":", "\n", "            ", "file_name", "+=", "\".zip\"", "\n", "\n", "", "dataFile", "=", "zipfile", ".", "ZipFile", "(", "self", ".", "folder_path", "+", "file_name", ")", "\n", "\n", "dataFile", ".", "testzip", "(", ")", "\n", "\n", "current_temp_folder", "=", "self", ".", "_get_temp_folder", "(", "file_name", ")", "\n", "\n", "try", ":", "\n", "\n", "            ", "try", ":", "\n", "                ", "attribute_to_file_name_path", "=", "dataFile", ".", "extract", "(", "\".DataIO_attribute_to_file_name.json\"", ",", "path", "=", "current_temp_folder", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "attribute_to_file_name_path", "=", "dataFile", ".", "extract", "(", "\"__DataIO_attribute_to_file_name.json\"", ",", "path", "=", "current_temp_folder", ")", "\n", "\n", "\n", "", "with", "open", "(", "attribute_to_file_name_path", ",", "\"r\"", ")", "as", "json_file", ":", "\n", "                ", "attribute_to_file_name", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "data_dict_loaded", "=", "{", "}", "\n", "\n", "for", "attrib_name", ",", "file_name", "in", "attribute_to_file_name", ".", "items", "(", ")", ":", "\n", "\n", "                ", "attrib_file_path", "=", "dataFile", ".", "extract", "(", "file_name", ",", "path", "=", "current_temp_folder", ")", "\n", "attrib_data_type", "=", "file_name", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "\n", "if", "attrib_data_type", "==", "\"csv\"", ":", "\n", "                    ", "attrib_data", "=", "pd", ".", "read_csv", "(", "attrib_file_path", ",", "index_col", "=", "False", ")", "\n", "\n", "", "elif", "attrib_data_type", "==", "\"npz\"", ":", "\n", "                    ", "attrib_data", "=", "sps", ".", "load_npz", "(", "attrib_file_path", ")", "\n", "\n", "", "elif", "attrib_data_type", "==", "\"npy\"", ":", "\n", "# allow_pickle is FALSE to prevent using pickle and ensure portability", "\n", "                    ", "attrib_data", "=", "np", ".", "load", "(", "attrib_file_path", ",", "allow_pickle", "=", "False", ")", "\n", "\n", "", "elif", "attrib_data_type", "==", "\"zip\"", ":", "\n", "                    ", "dataIO", "=", "DataIO", "(", "folder_path", "=", "current_temp_folder", ")", "\n", "attrib_data", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "file_name", ")", "\n", "\n", "", "elif", "attrib_data_type", "==", "\"json\"", ":", "\n", "                    ", "with", "open", "(", "attrib_file_path", ",", "\"r\"", ")", "as", "json_file", ":", "\n", "                        ", "attrib_data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"Attribute type not recognized for: '{}' of class: '{}'\"", ".", "format", "(", "attrib_file_path", ",", "attrib_data_type", ")", ")", "\n", "\n", "", "data_dict_loaded", "[", "attrib_name", "]", "=", "attrib_data", "\n", "\n", "\n", "", "", "except", "Exception", "as", "exec", ":", "\n", "\n", "            ", "shutil", ".", "rmtree", "(", "current_temp_folder", ",", "ignore_errors", "=", "True", ")", "\n", "raise", "exec", "\n", "\n", "", "shutil", ".", "rmtree", "(", "current_temp_folder", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "\n", "return", "data_dict_loaded", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.DataIO.json_not_serializable_handler": [[17, 29], ["isinstance", "TypeError", "int", "type"], "function", ["None"], ["def", "json_not_serializable_handler", "(", "o", ")", ":", "\n", "    ", "\"\"\"\n    Json cannot serialize automatically some data types, for example numpy integers (int32).\n    This may be a limitation of numpy-json interfaces for Python 3.6 and may not occur in Python 3.7\n    :param o:\n    :return:\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "o", ",", "np", ".", "integer", ")", ":", "\n", "        ", "return", "int", "(", "o", ")", "\n", "\n", "", "raise", "TypeError", "(", "\"json_not_serializable_handler: object '{}' is not serializable.\"", ".", "format", "(", "type", "(", "o", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils_Test.MyTestCase.test_similarityMatrixTopK_denseToDense": [[18, 32], ["numpy.random.random", "recsys.Base.Recommender_utils.similarityMatrixTopK", "numpy.sum", "Recommender_utils_Test.MyTestCase.assertEqual"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK"], ["    ", "def", "test_similarityMatrixTopK_denseToDense", "(", "self", ")", ":", "\n", "\n", "        ", "numRows", "=", "100", "\n", "\n", "TopK", "=", "20", "\n", "\n", "dense_input", "=", "np", ".", "random", ".", "random", "(", "(", "numRows", ",", "numRows", ")", ")", "\n", "dense_output", "=", "similarityMatrixTopK", "(", "dense_input", ",", "k", "=", "TopK", ")", "\n", "\n", "numExpectedNonZeroCells", "=", "TopK", "*", "numRows", "\n", "\n", "numNonZeroCells", "=", "np", ".", "sum", "(", "dense_output", "!=", "0", ")", "\n", "\n", "self", ".", "assertEqual", "(", "numExpectedNonZeroCells", ",", "numNonZeroCells", ",", "\"DenseToDense incorrect\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils_Test.MyTestCase.test_similarityMatrixTopK_sparseToSparse": [[34, 51], ["numpy.random.random", "recsys.Base.Recommender_utils.similarityMatrixTopK", "scipy.csc_matrix", "recsys.Base.Recommender_utils.similarityMatrixTopK", "topk_on_dense_input.toarray.toarray.toarray", "topk_on_sparse_input.toarray.toarray.toarray", "Recommender_utils_Test.MyTestCase.assertTrue", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK"], ["", "def", "test_similarityMatrixTopK_sparseToSparse", "(", "self", ")", ":", "\n", "\n", "        ", "numRows", "=", "20", "\n", "\n", "TopK", "=", "5", "\n", "\n", "dense_input", "=", "np", ".", "random", ".", "random", "(", "(", "numRows", ",", "numRows", ")", ")", "\n", "\n", "topk_on_dense_input", "=", "similarityMatrixTopK", "(", "dense_input", ",", "k", "=", "TopK", ")", "\n", "\n", "sparse_input", "=", "sps", ".", "csc_matrix", "(", "dense_input", ")", "\n", "topk_on_sparse_input", "=", "similarityMatrixTopK", "(", "sparse_input", ",", "k", "=", "TopK", ")", "\n", "\n", "topk_on_dense_input", "=", "topk_on_dense_input", ".", "toarray", "(", ")", "\n", "topk_on_sparse_input", "=", "topk_on_sparse_input", ".", "toarray", "(", ")", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "topk_on_dense_input", ",", "topk_on_sparse_input", ")", ",", "\"sparseToSparse CSC incorrect\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_similarity_euclidean_test.MyTestCase.test_euclidean_similarity_integer": [[31, 55], ["numpy.array", "Compute_Similarity_Euclidean", "Compute_Similarity_Euclidean.compute_similarity", "range", "range", "scipy.csr_matrix", "euclidean", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity"], ["    ", "def", "test_euclidean_similarity_integer", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Similarity", ".", "Compute_Similarity_Euclidean", "import", "Compute_Similarity_Euclidean", "\n", "from", "scipy", ".", "spatial", ".", "distance", "import", "euclidean", "\n", "\n", "data_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "0", ",", "1", ",", "0", "]", "]", ")", "\n", "\n", "n_items", "=", "data_matrix", ".", "shape", "[", "0", "]", "\n", "\n", "similarity_object", "=", "Compute_Similarity_Euclidean", "(", "sps", ".", "csr_matrix", "(", "data_matrix", ")", ".", "T", ",", "topK", "=", "100", ",", "normalize", "=", "False", ",", "similarity_from_distance_mode", "=", "\"lin\"", ")", "\n", "W_local", "=", "similarity_object", ".", "compute_similarity", "(", ")", "\n", "\n", "for", "vector1", "in", "range", "(", "n_items", ")", ":", "\n", "            ", "for", "vector2", "in", "range", "(", "n_items", ")", ":", "\n", "\n", "                ", "scipy_distance", "=", "euclidean", "(", "data_matrix", "[", "vector1", ",", ":", "]", ",", "data_matrix", "[", "vector2", ",", ":", "]", ")", "\n", "\n", "if", "vector1", "==", "vector2", ":", "\n", "                    ", "assert", "W_local", "[", "vector1", ",", "vector2", "]", "==", "0.0", ",", "\"W_local[{},{}] not matching control\"", ".", "format", "(", "vector1", ",", "vector2", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "local_similarity", "=", "1", "/", "W_local", "[", "vector1", ",", "vector2", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "local_similarity", ",", "scipy_distance", ",", "atol", "=", "1e-4", ")", ",", "\"W_local[{},{}] not matching control\"", ".", "format", "(", "vector1", ",", "vector2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_similarity_euclidean_test.MyTestCase.test_euclidean_similarity_float": [[59, 85], ["numpy.array", "Compute_Similarity_Euclidean", "Compute_Similarity_Euclidean.compute_similarity", "range", "range", "scipy.csr_matrix", "euclidean", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity"], ["", "", "", "", "def", "test_euclidean_similarity_float", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Similarity", ".", "Compute_Similarity_Euclidean", "import", "Compute_Similarity_Euclidean", "\n", "from", "scipy", ".", "spatial", ".", "distance", "import", "euclidean", "\n", "\n", "data_matrix", "=", "np", ".", "array", "(", "[", "[", "0.12", ",", "0.0", ",", "0.87", ",", "1.0", "]", ",", "\n", "[", "0.28", ",", "0.8", ",", "1.0", ",", "0.69", "]", ",", "\n", "[", "0.0", ",", "0.37", ",", "1.0", ",", "0.01", "]", "]", ")", "\n", "\n", "n_items", "=", "data_matrix", ".", "shape", "[", "0", "]", "\n", "\n", "similarity_object", "=", "Compute_Similarity_Euclidean", "(", "sps", ".", "csr_matrix", "(", "data_matrix", ")", ".", "T", ",", "topK", "=", "100", ",", "normalize", "=", "False", ",", "similarity_from_distance_mode", "=", "\"lin\"", ")", "\n", "W_local", "=", "similarity_object", ".", "compute_similarity", "(", ")", "\n", "\n", "for", "vector1", "in", "range", "(", "n_items", ")", ":", "\n", "            ", "for", "vector2", "in", "range", "(", "n_items", ")", ":", "\n", "\n", "                ", "scipy_distance", "=", "euclidean", "(", "data_matrix", "[", "vector1", ",", ":", "]", ",", "data_matrix", "[", "vector2", ",", ":", "]", ")", "\n", "\n", "if", "vector1", "==", "vector2", ":", "\n", "                    ", "assert", "W_local", "[", "vector1", ",", "vector2", "]", "==", "0.0", ",", "\"W_local[{},{}] not matching control\"", ".", "format", "(", "vector1", ",", "vector2", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "local_similarity", "=", "1", "/", "W_local", "[", "vector1", ",", "vector2", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "local_similarity", ",", "scipy_distance", ",", "atol", "=", "1e-4", ")", ",", "\"W_local[{},{}] not matching control\"", ".", "format", "(", "vector1", ",", "vector2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_similarity_euclidean_test.areSparseEquals": [[19, 25], ["None"], "function", ["None"], ["def", "areSparseEquals", "(", "Sparse1", ",", "Sparse2", ")", ":", "\n", "\n", "    ", "if", "(", "Sparse1", ".", "shape", "!=", "Sparse2", ".", "shape", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "(", "Sparse1", "-", "Sparse2", ")", ".", "nnz", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity.Compute_Similarity.__init__": [[32, 108], ["numpy.all", "numpy.isfinite", "numpy.sum", "recsys.Base.Similarity.Compute_Similarity_Euclidean.Compute_Similarity_Euclidean", "numpy.logical_not", "isinstance", "numpy.isfinite", "isinstance", "print", "Compute_Similarity_Cython", "recsys.Base.Similarity.Compute_Similarity_Python.Compute_Similarity_Python", "ValueError", "print", "print", "recsys.Base.Similarity.Compute_Similarity_Python.Compute_Similarity_Python"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataMatrix", ",", "use_implementation", "=", "\"density\"", ",", "similarity", "=", "None", ",", "**", "args", ")", ":", "\n", "        ", "\"\"\"\n        Interface object that will call the appropriate similarity implementation\n        :param dataMatrix:\n        :param use_implementation:      \"density\" will choose the most efficient implementation automatically\n                                        \"cython\" will use the cython implementation, if available. Most efficient for sparse matrix\n                                        \"python\" will use the python implementation. Most efficent for dense matrix\n        :param similarity:              the type of similarity to use, see SimilarityFunction enum\n        :param args:                    other args required by the specific similarity implementation\n        \"\"\"", "\n", "\n", "assert", "np", ".", "all", "(", "np", ".", "isfinite", "(", "dataMatrix", ".", "data", ")", ")", ",", "\"Compute_Similarity: Data matrix contains {} non finite values\"", ".", "format", "(", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "np", ".", "isfinite", "(", "dataMatrix", ".", "data", ")", ")", ")", ")", "\n", "\n", "self", ".", "dense", "=", "False", "\n", "\n", "if", "similarity", "==", "\"euclidean\"", ":", "\n", "# This is only available here", "\n", "            ", "self", ".", "compute_similarity_object", "=", "Compute_Similarity_Euclidean", "(", "dataMatrix", ",", "**", "args", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "assert", "not", "(", "dataMatrix", ".", "shape", "[", "0", "]", "==", "1", "and", "dataMatrix", ".", "nnz", "==", "dataMatrix", ".", "shape", "[", "1", "]", ")", ",", "\"Compute_Similarity: data has only 1 feature (shape: {}) with dense values,\"", "\" vector and set based similarities are not defined on 1-dimensional dense data,\"", "\" use Euclidean similarity instead.\"", ".", "format", "(", "dataMatrix", ".", "shape", ")", "\n", "\n", "if", "similarity", "is", "not", "None", ":", "\n", "                ", "args", "[", "\"similarity\"", "]", "=", "similarity", "\n", "\n", "\n", "", "if", "use_implementation", "==", "\"density\"", ":", "\n", "\n", "                ", "if", "isinstance", "(", "dataMatrix", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "self", ".", "dense", "=", "True", "\n", "\n", "", "elif", "isinstance", "(", "dataMatrix", ",", "sps", ".", "spmatrix", ")", ":", "\n", "                    ", "shape", "=", "dataMatrix", ".", "shape", "\n", "\n", "num_cells", "=", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", "\n", "\n", "sparsity", "=", "dataMatrix", ".", "nnz", "/", "num_cells", "\n", "\n", "self", ".", "dense", "=", "sparsity", ">", "0.5", "\n", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"Compute_Similarity: matrix type not recognized, calling default...\"", ")", "\n", "use_implementation", "=", "\"python\"", "\n", "\n", "", "if", "self", ".", "dense", ":", "\n", "                    ", "print", "(", "\"Compute_Similarity: detected dense matrix\"", ")", "\n", "use_implementation", "=", "\"python\"", "\n", "", "else", ":", "\n", "                    ", "use_implementation", "=", "\"cython\"", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "if", "use_implementation", "==", "\"cython\"", ":", "\n", "\n", "                ", "try", ":", "\n", "                    ", "from", "recsys", ".", "Base", ".", "Similarity", ".", "Cython", ".", "Compute_Similarity_Cython", "import", "Compute_Similarity_Cython", "\n", "self", ".", "compute_similarity_object", "=", "Compute_Similarity_Cython", "(", "dataMatrix", ",", "**", "args", ")", "\n", "\n", "", "except", "ImportError", ":", "\n", "                    ", "print", "(", "\"Unable to load Cython Compute_Similarity, reverting to Python\"", ")", "\n", "self", ".", "compute_similarity_object", "=", "Compute_Similarity_Python", "(", "dataMatrix", ",", "**", "args", ")", "\n", "\n", "\n", "", "", "elif", "use_implementation", "==", "\"python\"", ":", "\n", "                ", "self", ".", "compute_similarity_object", "=", "Compute_Similarity_Python", "(", "dataMatrix", ",", "**", "args", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "raise", "ValueError", "(", "\"Compute_Similarity: value for argument 'use_implementation' not recognized\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity": [[113, 116], ["Compute_Similarity.Compute_Similarity.compute_similarity_object.compute_similarity"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity"], ["", "", "", "def", "compute_similarity", "(", "self", ",", "**", "args", ")", ":", "\n", "\n", "        ", "return", "self", ".", "compute_similarity_object", ".", "compute_similarity", "(", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Euclidean.Compute_Similarity_Euclidean.__init__": [[17, 75], ["super().__init__", "min", "dataMatrix.copy", "row_weights.copy", "scipy.diags", "len", "ValueError", "Compute_Similarity_Euclidean.Compute_Similarity_Euclidean.dataMatrix.T.dot", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["    ", "def", "__init__", "(", "self", ",", "dataMatrix", ",", "topK", "=", "100", ",", "shrink", "=", "0", ",", "normalize", "=", "False", ",", "normalize_avg_row", "=", "False", ",", "\n", "similarity_from_distance_mode", "=", "\"lin\"", ",", "row_weights", "=", "None", ",", "**", "args", ")", ":", "\n", "        ", "\"\"\"\n        Computes the euclidean similarity on the columns of dataMatrix\n        If it is computed on URM=|users|x|items|, pass the URM as is.\n        If it is computed on ICM=|items|x|features|, pass the ICM transposed.\n        :param dataMatrix:\n        :param topK:\n        :param normalize\n        :param row_weights:         Multiply the values in each row by a specified value. Array\n        :param similarity_from_distance_mode:       \"exp\"        euclidean_similarity = 1/(e ^ euclidean_distance)\n                                                    \"lin\"        euclidean_similarity = 1/(1 + euclidean_distance)\n                                                    \"log\"        euclidean_similarity = 1/(1 + euclidean_distance)\n        :param args:                accepts other parameters not needed by the current object\n\n        \"\"\"", "\n", "\n", "super", "(", "Compute_Similarity_Euclidean", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "shrink", "=", "shrink", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "normalize_avg_row", "=", "normalize_avg_row", "\n", "\n", "self", ".", "n_rows", ",", "self", ".", "n_columns", "=", "dataMatrix", ".", "shape", "\n", "self", ".", "TopK", "=", "min", "(", "topK", ",", "self", ".", "n_columns", ")", "\n", "\n", "self", ".", "dataMatrix", "=", "dataMatrix", ".", "copy", "(", ")", "\n", "\n", "self", ".", "similarity_is_exp", "=", "False", "\n", "self", ".", "similarity_is_lin", "=", "False", "\n", "self", ".", "similarity_is_log", "=", "False", "\n", "\n", "if", "similarity_from_distance_mode", "==", "\"exp\"", ":", "\n", "            ", "self", ".", "similarity_is_exp", "=", "True", "\n", "", "elif", "similarity_from_distance_mode", "==", "\"lin\"", ":", "\n", "            ", "self", ".", "similarity_is_lin", "=", "True", "\n", "", "elif", "similarity_from_distance_mode", "==", "\"log\"", ":", "\n", "            ", "self", ".", "similarity_is_log", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Compute_Similarity_Euclidean: value for parameter 'mode' not recognized.\"", "\n", "\" Allowed values are: 'exp', 'lin', 'log'.\"", "\n", "\" Passed value was '{}'\"", ".", "format", "(", "similarity_from_distance_mode", ")", ")", "\n", "\n", "\n", "\n", "", "self", ".", "use_row_weights", "=", "False", "\n", "\n", "if", "row_weights", "is", "not", "None", ":", "\n", "\n", "            ", "if", "dataMatrix", ".", "shape", "[", "0", "]", "!=", "len", "(", "row_weights", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Compute_Similarity_Euclidean: provided row_weights and dataMatrix have different number of rows.\"", "\n", "\"row_weights has {} rows, dataMatrix has {}.\"", ".", "format", "(", "len", "(", "row_weights", ")", ",", "dataMatrix", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "use_row_weights", "=", "True", "\n", "self", ".", "row_weights", "=", "row_weights", ".", "copy", "(", ")", "\n", "self", ".", "row_weights_diag", "=", "sps", ".", "diags", "(", "self", ".", "row_weights", ")", "\n", "\n", "self", ".", "dataMatrix_weighted", "=", "self", ".", "dataMatrix", ".", "T", ".", "dot", "(", "self", ".", "row_weights_diag", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Euclidean.Compute_Similarity_Euclidean.compute_similarity": [[83, 239], ["time.time", "numpy.array().ravel", "numpy.sqrt", "scipy.csr_matrix", "min", "numpy.atleast_2d.toarray().squeeze", "range", "numpy.array", "print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "numpy.atleast_2d", "Compute_Similarity_Euclidean.Compute_Similarity_Euclidean.dataMatrix_weighted.T.dot", "Compute_Similarity_Euclidean.Compute_Similarity_Euclidean.dataMatrix.T.dot", "numpy.array().ravel.copy", "numpy.sqrt", "numpy.argsort", "numpy.sum", "values.extend", "rows.extend", "cols.extend", "Compute_Similarity_Euclidean.Compute_Similarity_Euclidean.dataMatrix.power().sum", "numpy.atleast_2d.toarray", "numpy.multiply", "time.time", "numpy.ones", "Compute_Similarity_Euclidean.Compute_Similarity_Euclidean.dataMatrix.power", "time.time", "time.time", "numpy.exp", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "compute_similarity", "(", "self", ",", "start_col", "=", "None", ",", "end_col", "=", "None", ",", "block_size", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Compute the similarity for the given dataset\n        :param self:\n        :param start_col: column to begin with\n        :param end_col: column to stop before, end_col is excluded\n        :return:\n        \"\"\"", "\n", "\n", "values", "=", "[", "]", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "start_time_print_batch", "=", "start_time", "\n", "processedItems", "=", "0", "\n", "\n", "\n", "#self.dataMatrix = self.dataMatrix.toarray()", "\n", "\n", "start_col_local", "=", "0", "\n", "end_col_local", "=", "self", ".", "n_columns", "\n", "\n", "if", "start_col", "is", "not", "None", "and", "start_col", ">", "0", "and", "start_col", "<", "self", ".", "n_columns", ":", "\n", "            ", "start_col_local", "=", "start_col", "\n", "\n", "", "if", "end_col", "is", "not", "None", "and", "end_col", ">", "start_col_local", "and", "end_col", "<", "self", ".", "n_columns", ":", "\n", "            ", "end_col_local", "=", "end_col", "\n", "\n", "# Compute sum of squared values", "\n", "", "item_distance_initial", "=", "np", ".", "array", "(", "self", ".", "dataMatrix", ".", "power", "(", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "ravel", "(", ")", "\n", "sumOfSquared", "=", "np", ".", "sqrt", "(", "item_distance_initial", ")", "\n", "\n", "start_col_block", "=", "start_col_local", "\n", "\n", "this_block_size", "=", "0", "\n", "\n", "# Compute all similarities for each item using vectorization", "\n", "while", "start_col_block", "<", "end_col_local", ":", "\n", "\n", "# Add previous block size", "\n", "            ", "processedItems", "+=", "this_block_size", "\n", "\n", "end_col_block", "=", "min", "(", "start_col_block", "+", "block_size", ",", "end_col_local", ")", "\n", "this_block_size", "=", "end_col_block", "-", "start_col_block", "\n", "\n", "if", "time", ".", "time", "(", ")", "-", "start_time_print_batch", ">=", "30", "or", "end_col_block", "==", "end_col_local", ":", "\n", "                ", "columnPerSec", "=", "processedItems", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", "+", "1e-9", ")", "\n", "\n", "print", "(", "\"Similarity column {} ( {:2.0f} % ), {:.2f} column/sec, elapsed time {:.2f} min\"", ".", "format", "(", "\n", "processedItems", ",", "processedItems", "/", "(", "end_col_local", "-", "start_col_local", ")", "*", "100", ",", "columnPerSec", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_print_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "# All data points for a given item", "\n", "", "item_data", "=", "self", ".", "dataMatrix", "[", ":", ",", "start_col_block", ":", "end_col_block", "]", "\n", "item_data", "=", "item_data", ".", "toarray", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "# If only 1 feature avoid last dimension to disappear", "\n", "if", "item_data", ".", "ndim", "==", "1", ":", "\n", "                ", "item_data", "=", "np", ".", "atleast_2d", "(", "item_data", ")", "\n", "\n", "", "if", "self", ".", "use_row_weights", ":", "\n", "                ", "this_block_weights", "=", "self", ".", "dataMatrix_weighted", ".", "T", ".", "dot", "(", "item_data", ")", "\n", "\n", "", "else", ":", "\n", "# Compute item similarities", "\n", "                ", "this_block_weights", "=", "self", ".", "dataMatrix", ".", "T", ".", "dot", "(", "item_data", ")", "\n", "\n", "\n", "\n", "", "for", "col_index_in_block", "in", "range", "(", "this_block_size", ")", ":", "\n", "\n", "                ", "if", "this_block_size", "==", "1", ":", "\n", "                    ", "this_column_weights", "=", "this_block_weights", "\n", "", "else", ":", "\n", "                    ", "this_column_weights", "=", "this_block_weights", "[", ":", ",", "col_index_in_block", "]", "\n", "\n", "\n", "", "columnIndex", "=", "col_index_in_block", "+", "start_col_block", "\n", "\n", "# item_data = self.dataMatrix[:,columnIndex]", "\n", "\n", "# (a-b)^2 = a^2 + b^2 - 2ab", "\n", "item_distance", "=", "item_distance_initial", ".", "copy", "(", ")", "\n", "item_distance", "+=", "item_distance_initial", "[", "columnIndex", "]", "\n", "\n", "# item_distance -= 2*item_data.T.dot(self.dataMatrix).toarray().ravel()", "\n", "item_distance", "-=", "2", "*", "this_column_weights", "\n", "\n", "item_distance", "[", "columnIndex", "]", "=", "0.0", "\n", "\n", "\n", "if", "self", ".", "use_row_weights", ":", "\n", "                    ", "item_distance", "=", "np", ".", "multiply", "(", "item_distance", ",", "self", ".", "row_weights", ")", "\n", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "                    ", "item_distance", "/=", "sumOfSquared", "[", "columnIndex", "]", "*", "sumOfSquared", "\n", "\n", "", "if", "self", ".", "normalize_avg_row", ":", "\n", "                    ", "item_distance", "/=", "self", ".", "n_rows", "\n", "\n", "", "item_distance", "=", "np", ".", "sqrt", "(", "item_distance", ")", "\n", "\n", "if", "self", ".", "similarity_is_exp", ":", "\n", "                    ", "item_similarity", "=", "1", "/", "(", "np", ".", "exp", "(", "item_distance", ")", "+", "self", ".", "shrink", "+", "1e-9", ")", "\n", "\n", "", "elif", "self", ".", "similarity_is_lin", ":", "\n", "                    ", "item_similarity", "=", "1", "/", "(", "item_distance", "+", "self", ".", "shrink", "+", "1e-9", ")", "\n", "\n", "", "elif", "self", ".", "similarity_is_log", ":", "\n", "                    ", "item_similarity", "=", "1", "/", "(", "np", ".", "log", "(", "item_distance", "+", "1", ")", "+", "self", ".", "shrink", "+", "1e-9", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "assert", "False", "\n", "\n", "\n", "", "item_similarity", "[", "columnIndex", "]", "=", "0.0", "\n", "\n", "this_column_weights", "=", "item_similarity", "\n", "\n", "\n", "\n", "# Sort indices and select TopK", "\n", "# Sorting is done in three steps. Faster then plain np.argsort for higher number of items", "\n", "# - Partition the data to extract the set of relevant items", "\n", "# - Sort only the relevant items", "\n", "# - Get the original item index", "\n", "relevant_items_partition", "=", "(", "-", "this_column_weights", ")", ".", "argpartition", "(", "self", ".", "TopK", "-", "1", ")", "[", "0", ":", "self", ".", "TopK", "]", "\n", "relevant_items_partition_sorting", "=", "np", ".", "argsort", "(", "-", "this_column_weights", "[", "relevant_items_partition", "]", ")", "\n", "top_k_idx", "=", "relevant_items_partition", "[", "relevant_items_partition_sorting", "]", "\n", "\n", "# Incrementally build sparse matrix, do not add zeros", "\n", "notZerosMask", "=", "this_column_weights", "[", "top_k_idx", "]", "!=", "0.0", "\n", "numNotZeros", "=", "np", ".", "sum", "(", "notZerosMask", ")", "\n", "\n", "values", ".", "extend", "(", "this_column_weights", "[", "top_k_idx", "]", "[", "notZerosMask", "]", ")", "\n", "rows", ".", "extend", "(", "top_k_idx", "[", "notZerosMask", "]", ")", "\n", "cols", ".", "extend", "(", "np", ".", "ones", "(", "numNotZeros", ")", "*", "columnIndex", ")", "\n", "\n", "\n", "", "start_col_block", "+=", "block_size", "\n", "\n", "\n", "# End while on columns", "\n", "\n", "", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "values", ",", "(", "rows", ",", "cols", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "n_columns", ",", "self", ".", "n_columns", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "W_sparse", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.__init__": [[19, 111], ["super().__init__", "min", "dataMatrix.copy", "row_weights.copy", "scipy.diags", "len", "ValueError", "Compute_Similarity_Python.Compute_Similarity_Python.dataMatrix.T.dot", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["    ", "def", "__init__", "(", "self", ",", "dataMatrix", ",", "topK", "=", "100", ",", "shrink", "=", "0", ",", "normalize", "=", "True", ",", "\n", "asymmetric_alpha", "=", "0.5", ",", "tversky_alpha", "=", "1.0", ",", "tversky_beta", "=", "1.0", ",", "\n", "similarity", "=", "\"cosine\"", ",", "row_weights", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes the cosine similarity on the columns of dataMatrix\n        If it is computed on URM=|users|x|items|, pass the URM as is.\n        If it is computed on ICM=|items|x|features|, pass the ICM transposed.\n        :param dataMatrix:\n        :param topK:\n        :param shrink:\n        :param normalize:           If True divide the dot product by the product of the norms\n        :param row_weights:         Multiply the values in each row by a specified value. Array\n        :param asymmetric_alpha     Coefficient alpha for the asymmetric cosine\n        :param similarity:  \"cosine\"        computes Cosine similarity\n                            \"adjusted\"      computes Adjusted Cosine, removing the average of the users\n                            \"asymmetric\"    computes Asymmetric Cosine\n                            \"pearson\"       computes Pearson Correlation, removing the average of the items\n                            \"jaccard\"       computes Jaccard similarity for binary interactions using Tanimoto\n                            \"dice\"          computes Dice similarity for binary interactions\n                            \"tversky\"       computes Tversky similarity for binary interactions\n                            \"tanimoto\"      computes Tanimoto coefficient for binary interactions\n\n        \"\"\"", "\n", "\"\"\"\n        Asymmetric Cosine as described in: \n        Aiolli, F. (2013, October). Efficient top-n recommendation for very large scale binary rated datasets. In Proceedings of the 7th ACM conference on Recommender systems (pp. 273-280). ACM.\n        \n        \"\"\"", "\n", "\n", "super", "(", "Compute_Similarity_Python", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "shrink", "=", "shrink", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "self", ".", "n_rows", ",", "self", ".", "n_columns", "=", "dataMatrix", ".", "shape", "\n", "self", ".", "TopK", "=", "min", "(", "topK", ",", "self", ".", "n_columns", ")", "\n", "\n", "self", ".", "asymmetric_alpha", "=", "asymmetric_alpha", "\n", "self", ".", "tversky_alpha", "=", "tversky_alpha", "\n", "self", ".", "tversky_beta", "=", "tversky_beta", "\n", "\n", "self", ".", "dataMatrix", "=", "dataMatrix", ".", "copy", "(", ")", "\n", "\n", "self", ".", "adjusted_cosine", "=", "False", "\n", "self", ".", "asymmetric_cosine", "=", "False", "\n", "self", ".", "pearson_correlation", "=", "False", "\n", "self", ".", "tanimoto_coefficient", "=", "False", "\n", "self", ".", "dice_coefficient", "=", "False", "\n", "self", ".", "tversky_coefficient", "=", "False", "\n", "\n", "if", "similarity", "==", "\"adjusted\"", ":", "\n", "            ", "self", ".", "adjusted_cosine", "=", "True", "\n", "", "elif", "similarity", "==", "\"asymmetric\"", ":", "\n", "            ", "self", ".", "asymmetric_cosine", "=", "True", "\n", "", "elif", "similarity", "==", "\"pearson\"", ":", "\n", "            ", "self", ".", "pearson_correlation", "=", "True", "\n", "", "elif", "similarity", "==", "\"jaccard\"", "or", "similarity", "==", "\"tanimoto\"", ":", "\n", "            ", "self", ".", "tanimoto_coefficient", "=", "True", "\n", "# Tanimoto has a specific kind of normalization", "\n", "self", ".", "normalize", "=", "False", "\n", "\n", "", "elif", "similarity", "==", "\"dice\"", ":", "\n", "            ", "self", ".", "dice_coefficient", "=", "True", "\n", "self", ".", "normalize", "=", "False", "\n", "\n", "", "elif", "similarity", "==", "\"tversky\"", ":", "\n", "            ", "self", ".", "tversky_coefficient", "=", "True", "\n", "self", ".", "normalize", "=", "False", "\n", "\n", "", "elif", "similarity", "==", "\"cosine\"", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cosine_Similarity: value for parameter 'mode' not recognized.\"", "\n", "\" Allowed values are: 'cosine', 'pearson', 'adjusted', 'asymmetric', 'jaccard', 'tanimoto',\"", "\n", "\"dice, tversky.\"", "\n", "\" Passed value was '{}'\"", ".", "format", "(", "similarity", ")", ")", "\n", "\n", "\n", "", "self", ".", "use_row_weights", "=", "False", "\n", "\n", "if", "row_weights", "is", "not", "None", ":", "\n", "\n", "            ", "if", "dataMatrix", ".", "shape", "[", "0", "]", "!=", "len", "(", "row_weights", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Cosine_Similarity: provided row_weights and dataMatrix have different number of rows.\"", "\n", "\"Col_weights has {} columns, dataMatrix has {}.\"", ".", "format", "(", "len", "(", "row_weights", ")", ",", "dataMatrix", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "use_row_weights", "=", "True", "\n", "self", ".", "row_weights", "=", "row_weights", ".", "copy", "(", ")", "\n", "self", ".", "row_weights_diag", "=", "sps", ".", "diags", "(", "self", ".", "row_weights", ")", "\n", "\n", "self", ".", "dataMatrix_weighted", "=", "self", ".", "dataMatrix", ".", "T", ".", "dot", "(", "self", ".", "row_weights_diag", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.applyAdjustedCosine": [[117, 150], ["recsys.Base.Recommender_utils.check_matrix", "numpy.diff", "numpy.asarray().ravel", "numpy.zeros_like", "min", "numpy.repeat", "numpy.asarray", "Compute_Similarity_Python.Compute_Similarity_Python.dataMatrix.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "", "def", "applyAdjustedCosine", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Remove from every data point the average for the corresponding row\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "dataMatrix", "=", "check_matrix", "(", "self", ".", "dataMatrix", ",", "'csr'", ")", "\n", "\n", "\n", "interactionsPerRow", "=", "np", ".", "diff", "(", "self", ".", "dataMatrix", ".", "indptr", ")", "\n", "\n", "nonzeroRows", "=", "interactionsPerRow", ">", "0", "\n", "sumPerRow", "=", "np", ".", "asarray", "(", "self", ".", "dataMatrix", ".", "sum", "(", "axis", "=", "1", ")", ")", ".", "ravel", "(", ")", "\n", "\n", "rowAverage", "=", "np", ".", "zeros_like", "(", "sumPerRow", ")", "\n", "rowAverage", "[", "nonzeroRows", "]", "=", "sumPerRow", "[", "nonzeroRows", "]", "/", "interactionsPerRow", "[", "nonzeroRows", "]", "\n", "\n", "\n", "# Split in blocks to avoid duplicating the whole data structure", "\n", "start_row", "=", "0", "\n", "end_row", "=", "0", "\n", "\n", "blockSize", "=", "1000", "\n", "\n", "\n", "while", "end_row", "<", "self", ".", "n_rows", ":", "\n", "\n", "            ", "end_row", "=", "min", "(", "self", ".", "n_rows", ",", "end_row", "+", "blockSize", ")", "\n", "\n", "self", ".", "dataMatrix", ".", "data", "[", "self", ".", "dataMatrix", ".", "indptr", "[", "start_row", "]", ":", "self", ".", "dataMatrix", ".", "indptr", "[", "end_row", "]", "]", "-=", "np", ".", "repeat", "(", "rowAverage", "[", "start_row", ":", "end_row", "]", ",", "interactionsPerRow", "[", "start_row", ":", "end_row", "]", ")", "\n", "\n", "start_row", "+=", "blockSize", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.applyPearsonCorrelation": [[154, 187], ["recsys.Base.Recommender_utils.check_matrix", "numpy.diff", "numpy.asarray().ravel", "numpy.zeros_like", "min", "numpy.repeat", "numpy.asarray", "Compute_Similarity_Python.Compute_Similarity_Python.dataMatrix.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "", "def", "applyPearsonCorrelation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Remove from every data point the average for the corresponding column\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "dataMatrix", "=", "check_matrix", "(", "self", ".", "dataMatrix", ",", "'csc'", ")", "\n", "\n", "\n", "interactionsPerCol", "=", "np", ".", "diff", "(", "self", ".", "dataMatrix", ".", "indptr", ")", "\n", "\n", "nonzeroCols", "=", "interactionsPerCol", ">", "0", "\n", "sumPerCol", "=", "np", ".", "asarray", "(", "self", ".", "dataMatrix", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "ravel", "(", ")", "\n", "\n", "colAverage", "=", "np", ".", "zeros_like", "(", "sumPerCol", ")", "\n", "colAverage", "[", "nonzeroCols", "]", "=", "sumPerCol", "[", "nonzeroCols", "]", "/", "interactionsPerCol", "[", "nonzeroCols", "]", "\n", "\n", "\n", "# Split in blocks to avoid duplicating the whole data structure", "\n", "start_col", "=", "0", "\n", "end_col", "=", "0", "\n", "\n", "blockSize", "=", "1000", "\n", "\n", "\n", "while", "end_col", "<", "self", ".", "n_columns", ":", "\n", "\n", "            ", "end_col", "=", "min", "(", "self", ".", "n_columns", ",", "end_col", "+", "blockSize", ")", "\n", "\n", "self", ".", "dataMatrix", ".", "data", "[", "self", ".", "dataMatrix", ".", "indptr", "[", "start_col", "]", ":", "self", ".", "dataMatrix", ".", "indptr", "[", "end_col", "]", "]", "-=", "np", ".", "repeat", "(", "colAverage", "[", "start_col", ":", "end_col", "]", ",", "interactionsPerCol", "[", "start_col", ":", "end_col", "]", ")", "\n", "\n", "start_col", "+=", "blockSize", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.useOnlyBooleanInteractions": [[189, 205], ["len", "min", "numpy.ones", "len"], "methods", ["None"], ["", "", "def", "useOnlyBooleanInteractions", "(", "self", ")", ":", "\n", "\n", "# Split in blocks to avoid duplicating the whole data structure", "\n", "        ", "start_pos", "=", "0", "\n", "end_pos", "=", "0", "\n", "\n", "blockSize", "=", "1000", "\n", "\n", "\n", "while", "end_pos", "<", "len", "(", "self", ".", "dataMatrix", ".", "data", ")", ":", "\n", "\n", "            ", "end_pos", "=", "min", "(", "len", "(", "self", ".", "dataMatrix", ".", "data", ")", ",", "end_pos", "+", "blockSize", ")", "\n", "\n", "self", ".", "dataMatrix", ".", "data", "[", "start_pos", ":", "end_pos", "]", "=", "np", ".", "ones", "(", "end_pos", "-", "start_pos", ")", "\n", "\n", "start_pos", "+=", "blockSize", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity": [[209, 385], ["time.time", "recsys.Base.Recommender_utils.check_matrix", "numpy.array().ravel", "recsys.Base.Recommender_utils.check_matrix", "scipy.csr_matrix", "Compute_Similarity_Python.Compute_Similarity_Python.applyAdjustedCosine", "numpy.sqrt", "numpy.power", "numpy.power", "min", "numpy.atleast_2d.toarray().squeeze", "range", "Compute_Similarity_Python.Compute_Similarity_Python.applyPearsonCorrelation", "numpy.array", "numpy.atleast_2d", "Compute_Similarity_Python.Compute_Similarity_Python.dataMatrix_weighted.T.dot", "Compute_Similarity_Python.Compute_Similarity_Python.dataMatrix.T.dot", "numpy.argsort", "numpy.sum", "values.extend", "rows.extend", "cols.extend", "print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "Compute_Similarity_Python.Compute_Similarity_Python.useOnlyBooleanInteractions", "Compute_Similarity_Python.Compute_Similarity_Python.dataMatrix.power().sum", "numpy.atleast_2d.toarray", "numpy.multiply", "numpy.multiply", "numpy.ones", "time.time", "Compute_Similarity_Python.Compute_Similarity_Python.dataMatrix.power", "numpy.multiply", "time.time", "numpy.multiply", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.applyAdjustedCosine", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.applyPearsonCorrelation", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.useOnlyBooleanInteractions"], ["", "", "def", "compute_similarity", "(", "self", ",", "start_col", "=", "None", ",", "end_col", "=", "None", ",", "block_size", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Compute the similarity for the given dataset\n        :param self:\n        :param start_col: column to begin with\n        :param end_col: column to stop before, end_col is excluded\n        :return:\n        \"\"\"", "\n", "\n", "values", "=", "[", "]", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "start_time_print_batch", "=", "start_time", "\n", "processedItems", "=", "0", "\n", "\n", "\n", "if", "self", ".", "adjusted_cosine", ":", "\n", "            ", "self", ".", "applyAdjustedCosine", "(", ")", "\n", "\n", "", "elif", "self", ".", "pearson_correlation", ":", "\n", "            ", "self", ".", "applyPearsonCorrelation", "(", ")", "\n", "\n", "", "elif", "self", ".", "tanimoto_coefficient", "or", "self", ".", "dice_coefficient", "or", "self", ".", "tversky_coefficient", ":", "\n", "            ", "self", ".", "useOnlyBooleanInteractions", "(", ")", "\n", "\n", "\n", "# We explore the matrix column-wise", "\n", "", "self", ".", "dataMatrix", "=", "check_matrix", "(", "self", ".", "dataMatrix", ",", "'csc'", ")", "\n", "\n", "\n", "# Compute sum of squared values to be used in normalization", "\n", "sumOfSquared", "=", "np", ".", "array", "(", "self", ".", "dataMatrix", ".", "power", "(", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "ravel", "(", ")", "\n", "\n", "# Tanimoto does not require the square root to be applied", "\n", "if", "not", "(", "self", ".", "tanimoto_coefficient", "or", "self", ".", "dice_coefficient", "or", "self", ".", "tversky_coefficient", ")", ":", "\n", "            ", "sumOfSquared", "=", "np", ".", "sqrt", "(", "sumOfSquared", ")", "\n", "\n", "", "if", "self", ".", "asymmetric_cosine", ":", "\n", "            ", "sumOfSquared_to_1_minus_alpha", "=", "np", ".", "power", "(", "sumOfSquared", ",", "2", "*", "(", "1", "-", "self", ".", "asymmetric_alpha", ")", ")", "\n", "sumOfSquared_to_alpha", "=", "np", ".", "power", "(", "sumOfSquared", ",", "2", "*", "self", ".", "asymmetric_alpha", ")", "\n", "\n", "\n", "", "self", ".", "dataMatrix", "=", "check_matrix", "(", "self", ".", "dataMatrix", ",", "'csc'", ")", "\n", "\n", "start_col_local", "=", "0", "\n", "end_col_local", "=", "self", ".", "n_columns", "\n", "\n", "if", "start_col", "is", "not", "None", "and", "start_col", ">", "0", "and", "start_col", "<", "self", ".", "n_columns", ":", "\n", "            ", "start_col_local", "=", "start_col", "\n", "\n", "", "if", "end_col", "is", "not", "None", "and", "end_col", ">", "start_col_local", "and", "end_col", "<", "self", ".", "n_columns", ":", "\n", "            ", "end_col_local", "=", "end_col", "\n", "\n", "\n", "\n", "\n", "", "start_col_block", "=", "start_col_local", "\n", "\n", "this_block_size", "=", "0", "\n", "\n", "# Compute all similarities for each item using vectorization", "\n", "while", "start_col_block", "<", "end_col_local", ":", "\n", "\n", "\n", "            ", "end_col_block", "=", "min", "(", "start_col_block", "+", "block_size", ",", "end_col_local", ")", "\n", "this_block_size", "=", "end_col_block", "-", "start_col_block", "\n", "\n", "\n", "\n", "# All data points for a given item", "\n", "item_data", "=", "self", ".", "dataMatrix", "[", ":", ",", "start_col_block", ":", "end_col_block", "]", "\n", "item_data", "=", "item_data", ".", "toarray", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "# If only 1 feature avoid last dimension to disappear", "\n", "if", "item_data", ".", "ndim", "==", "1", ":", "\n", "                ", "item_data", "=", "np", ".", "atleast_2d", "(", "item_data", ")", "\n", "\n", "", "if", "self", ".", "use_row_weights", ":", "\n", "                ", "this_block_weights", "=", "self", ".", "dataMatrix_weighted", ".", "T", ".", "dot", "(", "item_data", ")", "\n", "\n", "", "else", ":", "\n", "# Compute item similarities", "\n", "                ", "this_block_weights", "=", "self", ".", "dataMatrix", ".", "T", ".", "dot", "(", "item_data", ")", "\n", "\n", "\n", "\n", "", "for", "col_index_in_block", "in", "range", "(", "this_block_size", ")", ":", "\n", "\n", "                ", "if", "this_block_size", "==", "1", ":", "\n", "                    ", "this_column_weights", "=", "this_block_weights", "\n", "", "else", ":", "\n", "                    ", "this_column_weights", "=", "this_block_weights", "[", ":", ",", "col_index_in_block", "]", "\n", "\n", "\n", "", "columnIndex", "=", "col_index_in_block", "+", "start_col_block", "\n", "this_column_weights", "[", "columnIndex", "]", "=", "0.0", "\n", "\n", "# Apply normalization and shrinkage, ensure denominator != 0", "\n", "if", "self", ".", "normalize", ":", "\n", "\n", "                    ", "if", "self", ".", "asymmetric_cosine", ":", "\n", "                        ", "denominator", "=", "sumOfSquared_to_alpha", "[", "columnIndex", "]", "*", "sumOfSquared_to_1_minus_alpha", "+", "self", ".", "shrink", "+", "1e-6", "\n", "", "else", ":", "\n", "                        ", "denominator", "=", "sumOfSquared", "[", "columnIndex", "]", "*", "sumOfSquared", "+", "self", ".", "shrink", "+", "1e-6", "\n", "\n", "", "this_column_weights", "=", "np", ".", "multiply", "(", "this_column_weights", ",", "1", "/", "denominator", ")", "\n", "\n", "\n", "# Apply the specific denominator for Tanimoto", "\n", "", "elif", "self", ".", "tanimoto_coefficient", ":", "\n", "                    ", "denominator", "=", "sumOfSquared", "[", "columnIndex", "]", "+", "sumOfSquared", "-", "this_column_weights", "+", "self", ".", "shrink", "+", "1e-6", "\n", "this_column_weights", "=", "np", ".", "multiply", "(", "this_column_weights", ",", "1", "/", "denominator", ")", "\n", "\n", "", "elif", "self", ".", "dice_coefficient", ":", "\n", "                    ", "denominator", "=", "sumOfSquared", "[", "columnIndex", "]", "+", "sumOfSquared", "+", "self", ".", "shrink", "+", "1e-6", "\n", "this_column_weights", "=", "np", ".", "multiply", "(", "this_column_weights", ",", "1", "/", "denominator", ")", "\n", "\n", "", "elif", "self", ".", "tversky_coefficient", ":", "\n", "                    ", "denominator", "=", "this_column_weights", "+", "(", "sumOfSquared", "[", "columnIndex", "]", "-", "this_column_weights", ")", "*", "self", ".", "tversky_alpha", "+", "(", "sumOfSquared", "-", "this_column_weights", ")", "*", "self", ".", "tversky_beta", "+", "self", ".", "shrink", "+", "1e-6", "\n", "this_column_weights", "=", "np", ".", "multiply", "(", "this_column_weights", ",", "1", "/", "denominator", ")", "\n", "\n", "# If no normalization or tanimoto is selected, apply only shrink", "\n", "", "elif", "self", ".", "shrink", "!=", "0", ":", "\n", "                    ", "this_column_weights", "=", "this_column_weights", "/", "self", ".", "shrink", "\n", "\n", "\n", "#this_column_weights = this_column_weights.toarray().ravel()", "\n", "\n", "# Sort indices and select TopK", "\n", "# Sorting is done in three steps. Faster then plain np.argsort for higher number of items", "\n", "# - Partition the data to extract the set of relevant items", "\n", "# - Sort only the relevant items", "\n", "# - Get the original item index", "\n", "", "relevant_items_partition", "=", "(", "-", "this_column_weights", ")", ".", "argpartition", "(", "self", ".", "TopK", "-", "1", ")", "[", "0", ":", "self", ".", "TopK", "]", "\n", "relevant_items_partition_sorting", "=", "np", ".", "argsort", "(", "-", "this_column_weights", "[", "relevant_items_partition", "]", ")", "\n", "top_k_idx", "=", "relevant_items_partition", "[", "relevant_items_partition_sorting", "]", "\n", "\n", "# Incrementally build sparse matrix, do not add zeros", "\n", "notZerosMask", "=", "this_column_weights", "[", "top_k_idx", "]", "!=", "0.0", "\n", "numNotZeros", "=", "np", ".", "sum", "(", "notZerosMask", ")", "\n", "\n", "values", ".", "extend", "(", "this_column_weights", "[", "top_k_idx", "]", "[", "notZerosMask", "]", ")", "\n", "rows", ".", "extend", "(", "top_k_idx", "[", "notZerosMask", "]", ")", "\n", "cols", ".", "extend", "(", "np", ".", "ones", "(", "numNotZeros", ")", "*", "columnIndex", ")", "\n", "\n", "\n", "# Add previous block size", "\n", "", "processedItems", "+=", "this_block_size", "\n", "\n", "\n", "if", "time", ".", "time", "(", ")", "-", "start_time_print_batch", ">=", "30", "or", "end_col_block", "==", "end_col_local", ":", "\n", "                ", "columnPerSec", "=", "processedItems", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", "+", "1e-9", ")", "\n", "\n", "print", "(", "\"Similarity column {} ( {:2.0f} % ), {:.2f} column/sec, elapsed time {:.2f} min\"", ".", "format", "(", "\n", "processedItems", ",", "processedItems", "/", "(", "end_col_local", "-", "start_col_local", ")", "*", "100", ",", "columnPerSec", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_print_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "start_col_block", "+=", "block_size", "\n", "\n", "# End while on columns", "\n", "\n", "", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "values", ",", "(", "rows", ",", "cols", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "n_columns", ",", "self", ".", "n_columns", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "return", "W_sparse", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_Gini_Index": [[16, 30], ["Gini_Diversity", "numpy.ones", "numpy.isclose", "numpy.isclose", "Gini_Diversity.get_metric_value", "numpy.ones", "Gini_Diversity.get_metric_value", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value"], ["    ", "def", "test_Gini_Index", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "Gini_Diversity", "\n", "\n", "n_items", "=", "1000", "\n", "\n", "gini_index", "=", "Gini_Diversity", "(", "n_items", ",", "ignore_items", "=", "np", ".", "array", "(", "[", "]", ")", ")", "\n", "\n", "gini_index", ".", "recommended_counter", "=", "np", ".", "ones", "(", "n_items", ")", "\n", "assert", "np", ".", "isclose", "(", "1.0", ",", "gini_index", ".", "get_metric_value", "(", ")", ",", "atol", "=", "1e-2", ")", ",", "\"Gini_Index metric incorrect\"", "\n", "\n", "gini_index", ".", "recommended_counter", "=", "np", ".", "ones", "(", "n_items", ")", "*", "1e-12", "\n", "gini_index", ".", "recommended_counter", "[", "0", "]", "=", "1.0", "\n", "assert", "np", ".", "isclose", "(", "0.0", ",", "gini_index", ".", "get_metric_value", "(", ")", ",", "atol", "=", "1e-2", ")", ",", "\"Gini_Index metric incorrect\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_Shannon_Entropy": [[36, 53], ["Shannon_Entropy", "numpy.ones", "numpy.isclose", "numpy.zeros", "numpy.isclose", "numpy.random.uniform().astype", "numpy.isclose", "Shannon_Entropy.get_metric_value", "Shannon_Entropy.get_metric_value", "Shannon_Entropy.get_metric_value", "numpy.array", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value"], ["", "def", "test_Shannon_Entropy", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "Shannon_Entropy", "\n", "\n", "n_items", "=", "1000", "\n", "\n", "shannon_entropy", "=", "Shannon_Entropy", "(", "n_items", ",", "ignore_items", "=", "np", ".", "array", "(", "[", "]", ")", ")", "\n", "\n", "shannon_entropy", ".", "recommended_counter", "=", "np", ".", "ones", "(", "n_items", ")", "\n", "assert", "np", ".", "isclose", "(", "9.96", ",", "shannon_entropy", ".", "get_metric_value", "(", ")", ",", "atol", "=", "1e-2", ")", ",", "\"metric incorrect\"", "\n", "\n", "shannon_entropy", ".", "recommended_counter", "=", "np", ".", "zeros", "(", "n_items", ")", "\n", "shannon_entropy", ".", "recommended_counter", "[", "0", "]", "=", "1.0", "\n", "assert", "np", ".", "isclose", "(", "0.0", ",", "shannon_entropy", ".", "get_metric_value", "(", ")", ",", "atol", "=", "1e-3", ")", ",", "\"metric incorrect\"", "\n", "\n", "shannon_entropy", ".", "recommended_counter", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "100", ",", "n_items", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "assert", "np", ".", "isclose", "(", "9.6", ",", "shannon_entropy", ".", "get_metric_value", "(", ")", ",", "atol", "=", "1e-1", ")", ",", "\"metric incorrect\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_Diversity_list_all_equals": [[63, 106], ["min", "Diversity_MeanInterList", "numpy.arange", "range", "Diversity_MeanInterList.get_metric_value", "numpy.ones_like", "sps.csr_matrix", "sps.csr_matrix.dot().toarray", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.isclose", "numpy.random.shuffle", "URM_predicted_row.extend", "URM_predicted_col.extend", "Diversity_MeanInterList.add_recommendations", "diversity_cumulative.sum", "sps.csr_matrix.dot"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations"], ["", "def", "test_Diversity_list_all_equals", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "Diversity_MeanInterList", "\n", "import", "scipy", ".", "sparse", "as", "sps", "\n", "\n", "n_items", "=", "3", "\n", "n_users", "=", "10", "\n", "cutoff", "=", "min", "(", "5", ",", "n_items", ")", "\n", "\n", "# create recommendation list", "\n", "URM_predicted_row", "=", "[", "]", "\n", "URM_predicted_col", "=", "[", "]", "\n", "\n", "diversity_list", "=", "Diversity_MeanInterList", "(", "n_items", ",", "cutoff", ")", "\n", "item_id_list", "=", "np", ".", "arange", "(", "0", ",", "n_items", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "for", "n_user", "in", "range", "(", "n_users", ")", ":", "\n", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "item_id_list", ")", "\n", "recommended", "=", "item_id_list", "[", ":", "cutoff", "]", "\n", "URM_predicted_row", ".", "extend", "(", "[", "n_user", "]", "*", "cutoff", ")", "\n", "URM_predicted_col", ".", "extend", "(", "recommended", ")", "\n", "\n", "diversity_list", ".", "add_recommendations", "(", "recommended", ")", "\n", "\n", "\n", "", "object_diversity", "=", "diversity_list", ".", "get_metric_value", "(", ")", "\n", "\n", "URM_predicted_data", "=", "np", ".", "ones_like", "(", "URM_predicted_row", ")", "\n", "\n", "URM_predicted_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "URM_predicted_data", ",", "(", "URM_predicted_row", ",", "URM_predicted_col", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "co_counts", "=", "URM_predicted_sparse", ".", "dot", "(", "URM_predicted_sparse", ".", "T", ")", ".", "toarray", "(", ")", "\n", "np", ".", "fill_diagonal", "(", "co_counts", ",", "0", ")", "\n", "\n", "all_user_couples_count", "=", "n_users", "**", "2", "-", "n_users", "\n", "\n", "diversity_cumulative", "=", "1", "-", "co_counts", "/", "cutoff", "\n", "np", ".", "fill_diagonal", "(", "diversity_cumulative", ",", "0", ")", "\n", "\n", "diversity_cooccurrence", "=", "diversity_cumulative", ".", "sum", "(", ")", "/", "all_user_couples_count", "\n", "\n", "assert", "np", ".", "isclose", "(", "diversity_cooccurrence", ",", "object_diversity", ",", "atol", "=", "1e-4", ")", ",", "\"metric incorrect\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_Diversity_list": [[112, 155], ["Diversity_MeanInterList", "numpy.arange", "range", "Diversity_MeanInterList.get_metric_value", "numpy.ones_like", "sps.csr_matrix", "sps.csr_matrix.dot().toarray", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.isclose", "numpy.random.shuffle", "URM_predicted_row.extend", "URM_predicted_col.extend", "Diversity_MeanInterList.add_recommendations", "diversity_cumulative.sum", "sps.csr_matrix.dot"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations"], ["", "def", "test_Diversity_list", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "Diversity_MeanInterList", "\n", "import", "scipy", ".", "sparse", "as", "sps", "\n", "\n", "n_items", "=", "500", "\n", "n_users", "=", "1000", "\n", "cutoff", "=", "10", "\n", "\n", "# create recommendation list", "\n", "URM_predicted_row", "=", "[", "]", "\n", "URM_predicted_col", "=", "[", "]", "\n", "\n", "diversity_list", "=", "Diversity_MeanInterList", "(", "n_items", ",", "cutoff", ")", "\n", "item_id_list", "=", "np", ".", "arange", "(", "0", ",", "n_items", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "for", "n_user", "in", "range", "(", "n_users", ")", ":", "\n", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "item_id_list", ")", "\n", "recommended", "=", "item_id_list", "[", ":", "cutoff", "]", "\n", "URM_predicted_row", ".", "extend", "(", "[", "n_user", "]", "*", "cutoff", ")", "\n", "URM_predicted_col", ".", "extend", "(", "recommended", ")", "\n", "\n", "diversity_list", ".", "add_recommendations", "(", "recommended", ")", "\n", "\n", "\n", "", "object_diversity", "=", "diversity_list", ".", "get_metric_value", "(", ")", "\n", "\n", "URM_predicted_data", "=", "np", ".", "ones_like", "(", "URM_predicted_row", ")", "\n", "\n", "URM_predicted_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "URM_predicted_data", ",", "(", "URM_predicted_row", ",", "URM_predicted_col", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "co_counts", "=", "URM_predicted_sparse", ".", "dot", "(", "URM_predicted_sparse", ".", "T", ")", ".", "toarray", "(", ")", "\n", "np", ".", "fill_diagonal", "(", "co_counts", ",", "0", ")", "\n", "\n", "all_user_couples_count", "=", "n_users", "**", "2", "-", "n_users", "\n", "\n", "diversity_cumulative", "=", "1", "-", "co_counts", "/", "cutoff", "\n", "np", ".", "fill_diagonal", "(", "diversity_cumulative", ",", "0", ")", "\n", "\n", "diversity_cooccurrence", "=", "diversity_cumulative", ".", "sum", "(", ")", "/", "all_user_couples_count", "\n", "\n", "assert", "np", ".", "isclose", "(", "diversity_cooccurrence", ",", "object_diversity", ",", "atol", "=", "1e-4", ")", ",", "\"metric incorrect\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_AUC": [[157, 168], ["numpy.asarray", "numpy.asarray", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.allclose", "roc_auc"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.roc_auc"], ["", "def", "test_AUC", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "roc_auc", "\n", "\n", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", "]", ")", "\n", "ranked_list", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "roc_auc", "(", "is_relevant", ")", ",", "\n", "(", "2.", "/", "3", "+", "1.", "/", "3", ")", "/", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_Recall": [[171, 188], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.allclose", "numpy.allclose", "numpy.allclose", "recall", "recall", "recall"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall"], ["", "def", "test_Recall", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "recall", "\n", "\n", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_1", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "recall", "(", "is_relevant", ",", "pos_items", ")", ",", "3.", "/", "4", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_2", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "recall", "(", "is_relevant", ",", "pos_items", ")", ",", "1.0", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_3", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "recall", "(", "is_relevant", ",", "pos_items", ")", ",", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_Precision": [[196, 213], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.allclose", "numpy.allclose", "numpy.allclose", "precision", "precision", "precision"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision"], ["", "def", "test_Precision", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "precision", "\n", "\n", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_1", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "precision", "(", "is_relevant", ")", ",", "3.", "/", "5", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_2", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "precision", "(", "is_relevant", ")", ",", "4.", "/", "5", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_3", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "precision", "(", "is_relevant", ")", ",", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_RR": [[221, 238], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.allclose", "numpy.allclose", "numpy.allclose", "rr", "rr", "rr"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr"], ["", "def", "test_RR", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "rr", "\n", "\n", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_1", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "rr", "(", "is_relevant", ")", ",", "1.", "/", "2", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_2", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "rr", "(", "is_relevant", ")", ",", "1.", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_3", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "rr", "(", "is_relevant", ")", ",", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_MAP": [[246, 271], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.in1d", "metrics_Test.MyTestCase.assertTrue", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "map", "map", "map", "map", "map"], "methods", ["None"], ["", "def", "test_MAP", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "map", "\n", "\n", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "ranked_list_4", "=", "np", ".", "asarray", "(", "[", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_5", "=", "np", ".", "asarray", "(", "[", "2", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "4", ",", "5", ",", "10", ",", "16", "]", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_1", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "is_relevant", ",", "pos_items", ")", ",", "(", "1.", "/", "2", "+", "2.", "/", "4", "+", "3.", "/", "5", ")", "/", "4", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_2", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "is_relevant", ",", "pos_items", ")", ",", "1.0", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_3", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "is_relevant", ",", "pos_items", ")", ",", "0.0", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_4", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "is_relevant", ",", "pos_items", ")", ",", "(", "1.", "/", "7", "+", "2.", "/", "8", "+", "3.", "/", "9", "+", "4.", "/", "10", ")", "/", "4", ")", ")", "\n", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "ranked_list_5", ",", "pos_items", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "is_relevant", ",", "pos_items", ")", ",", "(", "1.", "+", "2.", "/", "7", "+", "3.", "/", "8", "+", "4.", "/", "9", ")", "/", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics_Test.MyTestCase.test_NDCG": [[285, 309], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "metrics_Test.MyTestCase.assertTrue", "metrics_Test.MyTestCase.assertTrue", "metrics_Test.MyTestCase.assertTrue", "metrics_Test.MyTestCase.assertTrue", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.log", "dcg", "ndcg", "ndcg", "ndcg", "numpy.log", "numpy.log", "numpy.log", "numpy.sort", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.dcg", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.ndcg", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.ndcg", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.ndcg"], ["", "def", "test_NDCG", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Base", ".", "Evaluation", ".", "metrics", "import", "dcg", ",", "ndcg", "\n", "\n", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "pos_relevances", "=", "np", ".", "asarray", "(", "[", "5", ",", "4", ",", "3", ",", "2", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "# rel = 0, 5, 0, 4, 3", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "# rel = 2, 3, 5, 4, 0", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "# rel = 0, 0, 0, 0, 0", "\n", "idcg", "=", "(", "(", "2", "**", "5", "-", "1", ")", "/", "np", ".", "log", "(", "2", ")", "+", "\n", "(", "2", "**", "4", "-", "1", ")", "/", "np", ".", "log", "(", "3", ")", "+", "\n", "(", "2", "**", "3", "-", "1", ")", "/", "np", ".", "log", "(", "4", ")", "+", "\n", "(", "2", "**", "2", "-", "1", ")", "/", "np", ".", "log", "(", "5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "dcg", "(", "np", ".", "sort", "(", "pos_relevances", ")", "[", ":", ":", "-", "1", "]", ")", ",", "idcg", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "ndcg", "(", "ranked_list_1", ",", "pos_items", ",", "pos_relevances", ")", ",", "\n", "(", "(", "2", "**", "5", "-", "1", ")", "/", "np", ".", "log", "(", "3", ")", "+", "\n", "(", "2", "**", "4", "-", "1", ")", "/", "np", ".", "log", "(", "5", ")", "+", "\n", "(", "2", "**", "3", "-", "1", ")", "/", "np", ".", "log", "(", "6", ")", ")", "/", "idcg", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "ndcg", "(", "ranked_list_2", ",", "pos_items", ",", "pos_relevances", ")", ",", "\n", "(", "(", "2", "**", "2", "-", "1", ")", "/", "np", ".", "log", "(", "2", ")", "+", "\n", "(", "2", "**", "3", "-", "1", ")", "/", "np", ".", "log", "(", "3", ")", "+", "\n", "(", "2", "**", "5", "-", "1", ")", "/", "np", ".", "log", "(", "4", ")", "+", "\n", "(", "2", "**", "4", "-", "1", ")", "/", "np", ".", "log", "(", "5", ")", ")", "/", "idcg", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "ndcg", "(", "ranked_list_3", ",", "pos_items", ",", "pos_relevances", ")", ",", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator.__init__": [[175, 246], ["object.__init__", "cutoff_list.copy", "max", "numpy.zeros", "list", "numpy.array", "Evaluator.Evaluator._print", "numpy.array", "isinstance", "URM_test_list.copy", "ValueError", "Evaluator._remove_item_interactions", "scipy.csr_matrix", "Evaluator.Evaluator.URM_test_list.append", "numpy.ediff1d", "numpy.logical_or", "numpy.all", "Evaluator.Evaluator._print", "numpy.arange", "Evaluator.Evaluator._print", "numpy.array", "numpy.array", "set", "set", "len", "numpy.sum", "len", "len", "numpy.sum", "numpy.logical_not"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator._remove_item_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["def", "__init__", "(", "self", ",", "URM_test_list", ",", "cutoff_list", ",", "min_ratings_per_user", "=", "1", ",", "exclude_seen", "=", "True", ",", "\n", "diversity_object", "=", "None", ",", "\n", "ignore_items", "=", "None", ",", "\n", "ignore_users", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "Evaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "if", "ignore_items", "is", "None", ":", "\n", "            ", "self", ".", "ignore_items_flag", "=", "False", "\n", "self", ".", "ignore_items_ID", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "\"Ignoring {} Items\"", ".", "format", "(", "len", "(", "ignore_items", ")", ")", ")", "\n", "self", ".", "ignore_items_flag", "=", "True", "\n", "self", ".", "ignore_items_ID", "=", "np", ".", "array", "(", "ignore_items", ")", "\n", "\n", "", "self", ".", "cutoff_list", "=", "cutoff_list", ".", "copy", "(", ")", "\n", "self", ".", "max_cutoff", "=", "max", "(", "self", ".", "cutoff_list", ")", "\n", "\n", "self", ".", "min_ratings_per_user", "=", "min_ratings_per_user", "\n", "self", ".", "exclude_seen", "=", "exclude_seen", "\n", "\n", "if", "not", "isinstance", "(", "URM_test_list", ",", "list", ")", ":", "\n", "            ", "self", ".", "URM_test", "=", "URM_test_list", ".", "copy", "(", ")", "\n", "URM_test_list", "=", "[", "URM_test_list", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"List of URM_test not supported\"", ")", "\n", "\n", "", "self", ".", "diversity_object", "=", "diversity_object", "\n", "\n", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "URM_test_list", "[", "0", "]", ".", "shape", "\n", "\n", "# Prune users with an insufficient number of ratings", "\n", "# During testing CSR is faster", "\n", "self", ".", "URM_test_list", "=", "[", "]", "\n", "users_to_evaluate_mask", "=", "np", ".", "zeros", "(", "self", ".", "n_users", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "for", "URM_test", "in", "URM_test_list", ":", "\n", "\n", "            ", "URM_test", "=", "_remove_item_interactions", "(", "URM_test", ",", "self", ".", "ignore_items_ID", ")", "\n", "\n", "URM_test", "=", "sps", ".", "csr_matrix", "(", "URM_test", ")", "\n", "self", ".", "URM_test_list", ".", "append", "(", "URM_test", ")", "\n", "\n", "rows", "=", "URM_test", ".", "indptr", "\n", "numRatings", "=", "np", ".", "ediff1d", "(", "rows", ")", "\n", "new_mask", "=", "numRatings", ">=", "min_ratings_per_user", "\n", "\n", "users_to_evaluate_mask", "=", "np", ".", "logical_or", "(", "users_to_evaluate_mask", ",", "new_mask", ")", "\n", "\n", "", "if", "not", "np", ".", "all", "(", "users_to_evaluate_mask", ")", ":", "\n", "            ", "self", ".", "_print", "(", "\"Ignoring {} ({:.2f}%) Users that have less than {} test interactions\"", ".", "format", "(", "np", ".", "sum", "(", "users_to_evaluate_mask", ")", ",", "\n", "100", "*", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "users_to_evaluate_mask", ")", ")", "/", "len", "(", "users_to_evaluate_mask", ")", ",", "min_ratings_per_user", ")", ")", "\n", "\n", "", "self", ".", "users_to_evaluate", "=", "np", ".", "arange", "(", "self", ".", "n_users", ")", "[", "users_to_evaluate_mask", "]", "\n", "\n", "if", "ignore_users", "is", "not", "None", ":", "\n", "            ", "self", ".", "_print", "(", "\"Ignoring {} Users\"", ".", "format", "(", "len", "(", "ignore_users", ")", ")", ")", "\n", "self", ".", "ignore_users_ID", "=", "np", ".", "array", "(", "ignore_users", ")", "\n", "self", ".", "users_to_evaluate", "=", "set", "(", "self", ".", "users_to_evaluate", ")", "-", "set", "(", "ignore_users", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ignore_users_ID", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "", "self", ".", "users_to_evaluate", "=", "list", "(", "self", ".", "users_to_evaluate", ")", "\n", "\n", "# Those will be set at each new evaluation", "\n", "self", ".", "_start_time", "=", "np", ".", "nan", "\n", "self", ".", "_start_time_print", "=", "np", ".", "nan", "\n", "self", ".", "_n_users_evaluated", "=", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator._print": [[248, 252], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "string", ")", ":", "\n", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"{}: {}\"", ".", "format", "(", "self", ".", "EVALUATOR_NAME", ",", "string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator.evaluateRecommender": [[254, 305], ["time.time", "time.time", "Evaluator.Evaluator._run_evaluation_on_selected_users", "Evaluator.get_result_string", "recommender_object.set_items_to_ignore", "Evaluator.Evaluator._print", "recommender_object.reset_items_to_ignore", "results_current_cutoff.keys", "isinstance", "value.get_metric_value"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.EvaluatorNegativeItemSample._run_evaluation_on_selected_users", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.get_result_string", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.set_items_to_ignore", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.reset_items_to_ignore", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value"], ["", "", "def", "evaluateRecommender", "(", "self", ",", "recommender_object", ")", ":", "\n", "        ", "\"\"\"\n        :param recommender_object: the trained recommender object, a BaseRecommender subclass\n        :param URM_test_list: list of URMs to test the recommender against, or a single URM object\n        :param cutoff_list: list of cutoffs to be use to report the scores, or a single cutoff\n        \"\"\"", "\n", "\n", "if", "self", ".", "ignore_items_flag", ":", "\n", "            ", "recommender_object", ".", "set_items_to_ignore", "(", "self", ".", "ignore_items_ID", ")", "\n", "\n", "", "self", ".", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_start_time_print", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_n_users_evaluated", "=", "0", "\n", "\n", "results_dict", "=", "self", ".", "_run_evaluation_on_selected_users", "(", "recommender_object", ",", "self", ".", "users_to_evaluate", ")", "\n", "\n", "\n", "if", "self", ".", "_n_users_evaluated", ">", "0", ":", "\n", "\n", "            ", "for", "cutoff", "in", "self", ".", "cutoff_list", ":", "\n", "\n", "                ", "results_current_cutoff", "=", "results_dict", "[", "cutoff", "]", "\n", "\n", "for", "key", "in", "results_current_cutoff", ".", "keys", "(", ")", ":", "\n", "\n", "                    ", "value", "=", "results_current_cutoff", "[", "key", "]", "\n", "\n", "if", "isinstance", "(", "value", ",", "_Metrics_Object", ")", ":", "\n", "                        ", "results_current_cutoff", "[", "key", "]", "=", "value", ".", "get_metric_value", "(", ")", "\n", "", "else", ":", "\n", "                        ", "results_current_cutoff", "[", "key", "]", "=", "value", "/", "self", ".", "_n_users_evaluated", "\n", "\n", "", "", "if", "EvaluatorMetrics", ".", "F1", ".", "value", "in", "results_current_cutoff", ":", "\n", "                    ", "precision_", "=", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "PRECISION", ".", "value", "]", "\n", "recall_", "=", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "RECALL", ".", "value", "]", "\n", "\n", "if", "precision_", "+", "recall_", "!=", "0", ":", "\n", "# F1 micro averaged: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.104.8244&rep=rep1&type=pdf", "\n", "                        ", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "F1", ".", "value", "]", "=", "2", "*", "(", "precision_", "*", "recall_", ")", "/", "(", "precision_", "+", "recall_", ")", "\n", "\n", "\n", "", "", "", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "\"WARNING: No users had a sufficient number of relevant items\"", ")", "\n", "\n", "\n", "", "if", "self", ".", "ignore_items_flag", ":", "\n", "            ", "recommender_object", ".", "reset_items_to_ignore", "(", ")", "\n", "\n", "", "results_run_string", "=", "get_result_string", "(", "results_dict", ")", "\n", "\n", "return", "(", "results_dict", ",", "results_run_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator.get_user_relevant_items": [[308, 313], ["Evaluator.Evaluator.URM_test.getformat"], "methods", ["None"], ["", "def", "get_user_relevant_items", "(", "self", ",", "user_id", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "URM_test", ".", "getformat", "(", ")", "==", "\"csr\"", ",", "\"Evaluator_Base_Class: URM_test is not CSR, this will cause errors in getting relevant items\"", "\n", "\n", "return", "self", ".", "URM_test", ".", "indices", "[", "self", ".", "URM_test", ".", "indptr", "[", "user_id", "]", ":", "self", ".", "URM_test", ".", "indptr", "[", "user_id", "+", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator.get_user_test_ratings": [[315, 320], ["Evaluator.Evaluator.URM_test.getformat"], "methods", ["None"], ["", "def", "get_user_test_ratings", "(", "self", ",", "user_id", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "URM_test", ".", "getformat", "(", ")", "==", "\"csr\"", ",", "\"Evaluator_Base_Class: URM_test is not CSR, this will cause errors in relevant items ratings\"", "\n", "\n", "return", "self", ".", "URM_test", ".", "data", "[", "self", ".", "URM_test", ".", "indptr", "[", "user_id", "]", ":", "self", ".", "URM_test", ".", "indptr", "[", "user_id", "+", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator._compute_metrics_on_recommendation_list": [[323, 412], ["range", "len", "len", "len", "len", "len", "len", "len", "Evaluator.Evaluator.get_user_relevant_items", "numpy.in1d", "recsys.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "Evaluator.Evaluator._print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "recsys.Base.Evaluation.metrics.roc_auc", "recsys.Base.Evaluation.metrics.precision", "recsys.Base.Evaluation.metrics.precision_recall_min_denominator", "recsys.Base.Evaluation.metrics.recall", "recsys.Base.Evaluation.metrics.ndcg", "is_relevant_current_cutoff.sum", "recsys.Base.Evaluation.metrics.arhr", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "results_current_cutoff[].add_recommendations", "len", "time.time", "len", "results_current_cutoff[].add_recommendations", "time.time", "Evaluator.Evaluator.get_user_test_ratings", "len", "float", "float"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator.get_user_relevant_items", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.roc_auc", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision_recall_min_denominator", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.ndcg", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.arhr", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator.get_user_test_ratings"], ["", "def", "_compute_metrics_on_recommendation_list", "(", "self", ",", "test_user_batch_array", ",", "recommended_items_batch_list", ",", "scores_batch", ",", "results_dict", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "recommended_items_batch_list", ")", "==", "len", "(", "test_user_batch_array", ")", ",", "\"{}: recommended_items_batch_list contained recommendations for {} users, expected was {}\"", ".", "format", "(", "\n", "self", ".", "EVALUATOR_NAME", ",", "len", "(", "recommended_items_batch_list", ")", ",", "len", "(", "test_user_batch_array", ")", ")", "\n", "\n", "assert", "scores_batch", ".", "shape", "[", "0", "]", "==", "len", "(", "test_user_batch_array", ")", ",", "\"{}: scores_batch contained scores for {} users, expected was {}\"", ".", "format", "(", "\n", "self", ".", "EVALUATOR_NAME", ",", "scores_batch", ".", "shape", "[", "0", "]", ",", "len", "(", "test_user_batch_array", ")", ")", "\n", "\n", "assert", "scores_batch", ".", "shape", "[", "1", "]", "==", "self", ".", "n_items", ",", "\"{}: scores_batch contained scores for {} items, expected was {}\"", ".", "format", "(", "\n", "self", ".", "EVALUATOR_NAME", ",", "scores_batch", ".", "shape", "[", "1", "]", ",", "self", ".", "n_items", ")", "\n", "\n", "\n", "# Compute recommendation quality for each user in batch", "\n", "for", "batch_user_index", "in", "range", "(", "len", "(", "recommended_items_batch_list", ")", ")", ":", "\n", "\n", "            ", "test_user", "=", "test_user_batch_array", "[", "batch_user_index", "]", "\n", "\n", "relevant_items", "=", "self", ".", "get_user_relevant_items", "(", "test_user", ")", "\n", "\n", "# Add the RMSE to the global object, no need to loop through the various cutoffs", "\n", "# This repository is not designed to ensure proper RMSE optimization", "\n", "# relevant_items_rating = self.get_user_test_ratings(test_user)", "\n", "#", "\n", "# all_items_predicted_ratings = scores_batch[batch_user_index]", "\n", "# global_RMSE_object = results_dict[self.cutoff_list[0]][EvaluatorMetrics.RMSE.value]", "\n", "# global_RMSE_object.add_recommendations(all_items_predicted_ratings, relevant_items, relevant_items_rating)", "\n", "\n", "# Being the URM CSR, the indices are the non-zero column indexes", "\n", "recommended_items", "=", "recommended_items_batch_list", "[", "batch_user_index", "]", "\n", "is_relevant", "=", "np", ".", "in1d", "(", "recommended_items", ",", "relevant_items", ",", "assume_unique", "=", "True", ")", "\n", "\n", "self", ".", "_n_users_evaluated", "+=", "1", "\n", "\n", "for", "cutoff", "in", "self", ".", "cutoff_list", ":", "\n", "\n", "                ", "results_current_cutoff", "=", "results_dict", "[", "cutoff", "]", "\n", "\n", "is_relevant_current_cutoff", "=", "is_relevant", "[", "0", ":", "cutoff", "]", "\n", "recommended_items_current_cutoff", "=", "recommended_items", "[", "0", ":", "cutoff", "]", "\n", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "ROC_AUC", ".", "value", "]", "+=", "roc_auc", "(", "is_relevant_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "PRECISION", ".", "value", "]", "+=", "precision", "(", "is_relevant_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "PRECISION_RECALL_MIN_DEN", ".", "value", "]", "+=", "precision_recall_min_denominator", "(", "is_relevant_current_cutoff", ",", "len", "(", "relevant_items", ")", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "RECALL", ".", "value", "]", "+=", "recall", "(", "is_relevant_current_cutoff", ",", "relevant_items", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "NDCG", ".", "value", "]", "+=", "ndcg", "(", "recommended_items_current_cutoff", ",", "relevant_items", ",", "relevance", "=", "self", ".", "get_user_test_ratings", "(", "test_user", ")", ",", "at", "=", "cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "HIT_RATE", ".", "value", "]", "+=", "is_relevant_current_cutoff", ".", "sum", "(", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "ARHR", ".", "value", "]", "+=", "arhr", "(", "is_relevant_current_cutoff", ")", "\n", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "MRR", ".", "value", "]", ".", "add_recommendations", "(", "is_relevant_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "MAP", ".", "value", "]", ".", "add_recommendations", "(", "is_relevant_current_cutoff", ",", "relevant_items", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "NOVELTY", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "AVERAGE_POPULARITY", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "DIVERSITY_GINI", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "SHANNON_ENTROPY", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "COVERAGE_ITEM", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "COVERAGE_ITEM_CORRECT", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ",", "is_relevant_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "COVERAGE_USER", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ",", "test_user", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "COVERAGE_USER_CORRECT", ".", "value", "]", ".", "add_recommendations", "(", "is_relevant_current_cutoff", ",", "test_user", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "DIVERSITY_MEAN_INTER_LIST", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "DIVERSITY_HERFINDAHL", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "RATIO_SHANNON_ENTROPY", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "RATIO_DIVERSITY_HERFINDAHL", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "RATIO_DIVERSITY_GINI", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "RATIO_NOVELTY", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "RATIO_AVERAGE_POPULARITY", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "\n", "if", "EvaluatorMetrics", ".", "DIVERSITY_SIMILARITY", ".", "value", "in", "results_current_cutoff", ":", "\n", "                    ", "results_current_cutoff", "[", "EvaluatorMetrics", ".", "DIVERSITY_SIMILARITY", ".", "value", "]", ".", "add_recommendations", "(", "recommended_items_current_cutoff", ")", "\n", "\n", "\n", "", "", "", "if", "time", ".", "time", "(", ")", "-", "self", ".", "_start_time_print", ">", "30", "or", "self", ".", "_n_users_evaluated", "==", "len", "(", "self", ".", "users_to_evaluate", ")", ":", "\n", "\n", "            ", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "self", ".", "_start_time", "\n", "new_time_value", ",", "new_time_unit", "=", "seconds_to_biggest_unit", "(", "elapsed_time", ")", "\n", "\n", "self", ".", "_print", "(", "\"Processed {} ({:4.1f}%) in {:.2f} {}. Users per second: {:.0f}\"", ".", "format", "(", "\n", "self", ".", "_n_users_evaluated", ",", "\n", "100.0", "*", "float", "(", "self", ".", "_n_users_evaluated", ")", "/", "len", "(", "self", ".", "users_to_evaluate", ")", ",", "\n", "new_time_value", ",", "new_time_unit", ",", "\n", "float", "(", "self", ".", "_n_users_evaluated", ")", "/", "elapsed_time", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "self", ".", "_start_time_print", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.EvaluatorHoldout.__init__": [[424, 436], ["Evaluator.Evaluator.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_test_list", ",", "cutoff_list", ",", "min_ratings_per_user", "=", "1", ",", "exclude_seen", "=", "True", ",", "\n", "diversity_object", "=", "None", ",", "\n", "ignore_items", "=", "None", ",", "\n", "ignore_users", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "\n", "\n", "        ", "super", "(", "EvaluatorHoldout", ",", "self", ")", ".", "__init__", "(", "URM_test_list", ",", "cutoff_list", ",", "\n", "diversity_object", "=", "diversity_object", ",", "\n", "min_ratings_per_user", "=", "min_ratings_per_user", ",", "exclude_seen", "=", "exclude_seen", ",", "\n", "ignore_items", "=", "ignore_items", ",", "ignore_users", "=", "ignore_users", ",", "\n", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.EvaluatorHoldout._run_evaluation_on_selected_users": [[441, 488], ["Evaluator._create_empty_metrics_dict", "min", "min", "recommender_object.get_URM_train", "recommender_object.set_items_to_ignore", "len", "min", "numpy.array", "recommender_object.recommend", "Evaluator.EvaluatorHoldout._compute_metrics_on_recommendation_list", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator._create_empty_metrics_dict", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.get_URM_train", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.set_items_to_ignore", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.recommend", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator._compute_metrics_on_recommendation_list"], ["", "def", "_run_evaluation_on_selected_users", "(", "self", ",", "recommender_object", ",", "users_to_evaluate", ",", "block_size", "=", "None", ")", ":", "\n", "\n", "        ", "if", "block_size", "is", "None", ":", "\n", "            ", "block_size", "=", "min", "(", "1000", ",", "int", "(", "1e8", "/", "self", ".", "n_items", ")", ")", "\n", "block_size", "=", "min", "(", "block_size", ",", "len", "(", "users_to_evaluate", ")", ")", "\n", "\n", "\n", "", "results_dict", "=", "_create_empty_metrics_dict", "(", "self", ".", "cutoff_list", ",", "\n", "self", ".", "n_items", ",", "self", ".", "n_users", ",", "\n", "recommender_object", ".", "get_URM_train", "(", ")", ",", "\n", "self", ".", "URM_test", ",", "\n", "self", ".", "ignore_items_ID", ",", "\n", "self", ".", "ignore_users_ID", ",", "\n", "self", ".", "diversity_object", ")", "\n", "\n", "\n", "if", "self", ".", "ignore_items_flag", ":", "\n", "            ", "recommender_object", ".", "set_items_to_ignore", "(", "self", ".", "ignore_items_ID", ")", "\n", "\n", "# Start from -block_size to ensure it to be 0 at the first block", "\n", "", "user_batch_start", "=", "0", "\n", "user_batch_end", "=", "0", "\n", "\n", "while", "user_batch_start", "<", "len", "(", "users_to_evaluate", ")", ":", "\n", "\n", "            ", "user_batch_end", "=", "user_batch_start", "+", "block_size", "\n", "user_batch_end", "=", "min", "(", "user_batch_end", ",", "len", "(", "users_to_evaluate", ")", ")", "\n", "\n", "test_user_batch_array", "=", "np", ".", "array", "(", "users_to_evaluate", "[", "user_batch_start", ":", "user_batch_end", "]", ")", "\n", "user_batch_start", "=", "user_batch_end", "\n", "\n", "# Compute predictions for a batch of users using vectorization, much more efficient than computing it one at a time", "\n", "recommended_items_batch_list", ",", "scores_batch", "=", "recommender_object", ".", "recommend", "(", "test_user_batch_array", ",", "\n", "remove_seen_flag", "=", "self", ".", "exclude_seen", ",", "\n", "cutoff", "=", "self", ".", "max_cutoff", ",", "\n", "remove_top_pop_flag", "=", "False", ",", "\n", "remove_custom_items_flag", "=", "self", ".", "ignore_items_flag", ",", "\n", "return_scores", "=", "True", "\n", ")", "\n", "\n", "results_dict", "=", "self", ".", "_compute_metrics_on_recommendation_list", "(", "test_user_batch_array", "=", "test_user_batch_array", ",", "\n", "recommended_items_batch_list", "=", "recommended_items_batch_list", ",", "\n", "scores_batch", "=", "scores_batch", ",", "\n", "results_dict", "=", "results_dict", ")", "\n", "\n", "\n", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.EvaluatorNegativeItemSample.__init__": [[497, 524], ["Evaluator.Evaluator.__init__", "Evaluator.EvaluatorNegativeItemSample.URM_items_to_rank.eliminate_zeros", "numpy.ones_like", "scipy.csr_matrix", "scipy.csr_matrix", "Evaluator.EvaluatorNegativeItemSample.URM_test.copy().astype", "URM_test_negative.copy().astype", "Evaluator.EvaluatorNegativeItemSample.URM_test.copy", "URM_test_negative.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "__init__", "(", "self", ",", "URM_test_list", ",", "URM_test_negative", ",", "cutoff_list", ",", "min_ratings_per_user", "=", "1", ",", "exclude_seen", "=", "True", ",", "\n", "diversity_object", "=", "None", ",", "\n", "ignore_items", "=", "None", ",", "\n", "ignore_users", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        The EvaluatorNegativeItemSample computes the recommendations by sorting the test items as well as the test_negative items\n        It ensures that each item appears only once even if it is listed in both matrices\n\n        :param URM_test_list:\n        :param URM_test_negative: Items to rank together with the test items\n        :param cutoff_list:\n        :param min_ratings_per_user:\n        :param exclude_seen:\n        :param diversity_object:\n        :param ignore_items:\n        :param ignore_users:\n        \"\"\"", "\n", "super", "(", "EvaluatorNegativeItemSample", ",", "self", ")", ".", "__init__", "(", "URM_test_list", ",", "cutoff_list", ",", "\n", "diversity_object", "=", "diversity_object", ",", "\n", "min_ratings_per_user", "=", "min_ratings_per_user", ",", "exclude_seen", "=", "exclude_seen", ",", "\n", "ignore_items", "=", "ignore_items", ",", "ignore_users", "=", "ignore_users", ")", "\n", "\n", "\n", "self", ".", "URM_items_to_rank", "=", "sps", ".", "csr_matrix", "(", "self", ".", "URM_test", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "bool", ")", ")", "+", "sps", ".", "csr_matrix", "(", "URM_test_negative", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "self", ".", "URM_items_to_rank", ".", "eliminate_zeros", "(", ")", "\n", "self", ".", "URM_items_to_rank", ".", "data", "=", "np", ".", "ones_like", "(", "self", ".", "URM_items_to_rank", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.EvaluatorNegativeItemSample._get_user_specific_items_to_compute": [[527, 535], ["None"], "methods", ["None"], ["", "def", "_get_user_specific_items_to_compute", "(", "self", ",", "user_id", ")", ":", "\n", "\n", "        ", "start_pos", "=", "self", ".", "URM_items_to_rank", ".", "indptr", "[", "user_id", "]", "\n", "end_pos", "=", "self", ".", "URM_items_to_rank", ".", "indptr", "[", "user_id", "+", "1", "]", "\n", "\n", "items_to_compute", "=", "self", ".", "URM_items_to_rank", ".", "indices", "[", "start_pos", ":", "end_pos", "]", "\n", "\n", "return", "items_to_compute", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.EvaluatorNegativeItemSample._run_evaluation_on_selected_users": [[538, 577], ["Evaluator._create_empty_metrics_dict", "recommender_object.get_URM_train", "recommender_object.set_items_to_ignore", "Evaluator.EvaluatorNegativeItemSample._get_user_specific_items_to_compute", "recommender_object.recommend", "Evaluator.EvaluatorNegativeItemSample._compute_metrics_on_recommendation_list", "numpy.atleast_1d"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator._create_empty_metrics_dict", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.get_URM_train", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.set_items_to_ignore", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.EvaluatorNegativeItemSample._get_user_specific_items_to_compute", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseRecommender.BaseRecommender.recommend", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.Evaluator._compute_metrics_on_recommendation_list"], ["", "def", "_run_evaluation_on_selected_users", "(", "self", ",", "recommender_object", ",", "users_to_evaluate", ",", "block_size", "=", "None", ")", ":", "\n", "\n", "\n", "\n", "        ", "results_dict", "=", "_create_empty_metrics_dict", "(", "self", ".", "cutoff_list", ",", "\n", "self", ".", "n_items", ",", "self", ".", "n_users", ",", "\n", "recommender_object", ".", "get_URM_train", "(", ")", ",", "\n", "self", ".", "URM_test", ",", "\n", "self", ".", "ignore_items_ID", ",", "\n", "self", ".", "ignore_users_ID", ",", "\n", "self", ".", "diversity_object", ")", "\n", "\n", "\n", "if", "self", ".", "ignore_items_flag", ":", "\n", "            ", "recommender_object", ".", "set_items_to_ignore", "(", "self", ".", "ignore_items_ID", ")", "\n", "\n", "\n", "\n", "", "for", "test_user", "in", "users_to_evaluate", ":", "\n", "\n", "            ", "items_to_compute", "=", "self", ".", "_get_user_specific_items_to_compute", "(", "test_user", ")", "\n", "\n", "recommended_items", ",", "all_items_predicted_ratings", "=", "recommender_object", ".", "recommend", "(", "np", ".", "atleast_1d", "(", "test_user", ")", ",", "\n", "remove_seen_flag", "=", "self", ".", "exclude_seen", ",", "\n", "cutoff", "=", "self", ".", "max_cutoff", ",", "\n", "remove_top_pop_flag", "=", "False", ",", "\n", "items_to_compute", "=", "items_to_compute", ",", "\n", "remove_custom_items_flag", "=", "self", ".", "ignore_items_flag", ",", "\n", "return_scores", "=", "True", "\n", ")", "\n", "\n", "\n", "results_dict", "=", "self", ".", "_compute_metrics_on_recommendation_list", "(", "test_user_batch_array", "=", "[", "test_user", "]", ",", "\n", "recommended_items_batch_list", "=", "recommended_items", ",", "\n", "scores_batch", "=", "all_items_predicted_ratings", ",", "\n", "results_dict", "=", "results_dict", ")", "\n", "\n", "\n", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator._create_empty_metrics_dict": [[53, 129], ["recsys.Base.Evaluation.metrics.Coverage_Item", "recsys.Base.Evaluation.metrics.Coverage_Test_Correct", "recsys.Base.Evaluation.metrics.Gini_Diversity", "recsys.Base.Evaluation.metrics.Shannon_Entropy", "recsys.Base.Evaluation.metrics.Coverage_User", "recsys.Base.Evaluation.metrics.Coverage_User_Correct", "recsys.Base.Evaluation.metrics.Diversity_MeanInterList", "recsys.Base.Evaluation.metrics.Diversity_Herfindahl", "recsys.Base.Evaluation.metrics.Novelty", "recsys.Base.Evaluation.metrics.AveragePopularity", "recsys.Base.Evaluation.metrics.MAP", "recsys.Base.Evaluation.metrics.MRR", "recsys.Base.Evaluation.metrics.Ratio_Diversity_Gini", "recsys.Base.Evaluation.metrics.Ratio_Diversity_Herfindahl", "recsys.Base.Evaluation.metrics.Ratio_Shannon_Entropy", "recsys.Base.Evaluation.metrics.Ratio_AveragePopularity", "recsys.Base.Evaluation.metrics.Ratio_Novelty", "copy.deepcopy"], "function", ["None"], ["", "def", "_create_empty_metrics_dict", "(", "cutoff_list", ",", "n_items", ",", "n_users", ",", "URM_train", ",", "URM_test", ",", "ignore_items", ",", "ignore_users", ",", "diversity_similarity_object", ")", ":", "\n", "\n", "    ", "empty_dict", "=", "{", "}", "\n", "\n", "# global_RMSE_object = RMSE(URM_train + URM_test)", "\n", "\n", "\n", "for", "cutoff", "in", "cutoff_list", ":", "\n", "\n", "        ", "cutoff_dict", "=", "{", "}", "\n", "\n", "for", "metric", "in", "EvaluatorMetrics", ":", "\n", "            ", "if", "metric", "==", "EvaluatorMetrics", ".", "COVERAGE_ITEM", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Coverage_Item", "(", "n_items", ",", "ignore_items", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "COVERAGE_ITEM_CORRECT", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Coverage_Test_Correct", "(", "n_items", ",", "ignore_items", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "DIVERSITY_GINI", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Gini_Diversity", "(", "n_items", ",", "ignore_items", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "SHANNON_ENTROPY", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Shannon_Entropy", "(", "n_items", ",", "ignore_items", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "COVERAGE_USER", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Coverage_User", "(", "n_users", ",", "ignore_users", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "COVERAGE_USER_CORRECT", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Coverage_User_Correct", "(", "n_users", ",", "ignore_users", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "DIVERSITY_MEAN_INTER_LIST", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Diversity_MeanInterList", "(", "n_items", ",", "cutoff", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "DIVERSITY_HERFINDAHL", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Diversity_Herfindahl", "(", "n_items", ",", "ignore_items", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "NOVELTY", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Novelty", "(", "URM_train", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "AVERAGE_POPULARITY", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "AveragePopularity", "(", "URM_train", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "MAP", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "MAP", "(", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "MRR", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "MRR", "(", ")", "\n", "\n", "# elif metric == EvaluatorMetrics.RMSE:", "\n", "#     cutoff_dict[metric.value] = global_RMSE_object", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "RATIO_DIVERSITY_GINI", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Ratio_Diversity_Gini", "(", "URM_train", ",", "ignore_users", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "RATIO_DIVERSITY_HERFINDAHL", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Ratio_Diversity_Herfindahl", "(", "URM_train", ",", "ignore_users", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "RATIO_SHANNON_ENTROPY", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Ratio_Shannon_Entropy", "(", "URM_train", ",", "ignore_users", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "RATIO_AVERAGE_POPULARITY", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Ratio_AveragePopularity", "(", "URM_train", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "RATIO_NOVELTY", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "Ratio_Novelty", "(", "URM_train", ")", "\n", "\n", "", "elif", "metric", "==", "EvaluatorMetrics", ".", "DIVERSITY_SIMILARITY", ":", "\n", "                    ", "if", "diversity_similarity_object", "is", "not", "None", ":", "\n", "                        ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "copy", ".", "deepcopy", "(", "diversity_similarity_object", ")", "\n", "", "", "else", ":", "\n", "                ", "cutoff_dict", "[", "metric", ".", "value", "]", "=", "0.0", "\n", "\n", "\n", "", "", "empty_dict", "[", "cutoff", "]", "=", "cutoff_dict", "\n", "\n", "", "return", "empty_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator.get_result_string": [[134, 150], ["results_run.keys", "results_run_current_cutoff.keys"], "function", ["None"], ["", "def", "get_result_string", "(", "results_run", ",", "n_decimals", "=", "7", ")", ":", "\n", "\n", "    ", "output_str", "=", "\"\"", "\n", "\n", "for", "cutoff", "in", "results_run", ".", "keys", "(", ")", ":", "\n", "\n", "        ", "results_run_current_cutoff", "=", "results_run", "[", "cutoff", "]", "\n", "\n", "output_str", "+=", "\"CUTOFF: {} - \"", ".", "format", "(", "cutoff", ")", "\n", "\n", "for", "metric", "in", "results_run_current_cutoff", ".", "keys", "(", ")", ":", "\n", "            ", "output_str", "+=", "\"{}: {:.{n_decimals}f}, \"", ".", "format", "(", "metric", ",", "results_run_current_cutoff", "[", "metric", "]", ",", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "", "output_str", "+=", "\"\\n\"", "\n", "\n", "", "return", "output_str", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.Evaluator._remove_item_interactions": [[153, 168], ["scipy.csc_matrix", "sps.csr_matrix.eliminate_zeros", "scipy.csr_matrix", "sps.csr_matrix.copy", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_remove_item_interactions", "(", "URM", ",", "item_list", ")", ":", "\n", "\n", "    ", "URM", "=", "sps", ".", "csc_matrix", "(", "URM", ".", "copy", "(", ")", ")", "\n", "\n", "for", "item_index", "in", "item_list", ":", "\n", "\n", "        ", "start_pos", "=", "URM", ".", "indptr", "[", "item_index", "]", "\n", "end_pos", "=", "URM", ".", "indptr", "[", "item_index", "+", "1", "]", "\n", "\n", "URM", ".", "data", "[", "start_pos", ":", "end_pos", "]", "=", "np", ".", "zeros_like", "(", "URM", ".", "data", "[", "start_pos", ":", "end_pos", "]", ")", "\n", "\n", "", "URM", ".", "eliminate_zeros", "(", ")", "\n", "URM", "=", "sps", ".", "csr_matrix", "(", "URM", ")", "\n", "\n", "return", "URM", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Metrics_Object.__init__": [[16, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Metrics_Object.__str__": [[19, 21], ["metrics._Metrics_Object.get_metric_value"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"{:.4f}\"", ".", "format", "(", "self", ".", "get_metric_value", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Metrics_Object.add_recommendations": [[22, 24], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Metrics_Object.get_metric_value": [[25, 27], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Metrics_Object.merge_with_other": [[28, 30], ["NotImplementedError"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.MAP.__init__": [[43, 47], ["metrics._Metrics_Object.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MAP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cumulative_AP", "=", "0.0", "\n", "self", ".", "n_users", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.MAP.add_recommendations": [[48, 51], ["metrics.average_precision"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.average_precision"], ["", "def", "add_recommendations", "(", "self", ",", "is_relevant", ",", "pos_items", ")", ":", "\n", "        ", "self", ".", "cumulative_AP", "+=", "average_precision", "(", "is_relevant", ",", "pos_items", ")", "\n", "self", ".", "n_users", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.MAP.get_metric_value": [[52, 54], ["None"], "methods", ["None"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_AP", "/", "self", ".", "n_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.MAP.merge_with_other": [[55, 60], ["None"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "MAP", ",", "\"MAP: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "cumulative_AP", "+=", "other_metric_object", ".", "cumulative_AP", "\n", "self", ".", "n_users", "+=", "other_metric_object", ".", "n_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.MRR.__init__": [[81, 85], ["metrics._Metrics_Object.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MRR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cumulative_RR", "=", "0.0", "\n", "self", ".", "n_users", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.MRR.add_recommendations": [[86, 89], ["metrics.rr"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr"], ["", "def", "add_recommendations", "(", "self", ",", "is_relevant", ")", ":", "\n", "        ", "self", ".", "cumulative_RR", "+=", "rr", "(", "is_relevant", ")", "\n", "self", ".", "n_users", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.MRR.get_metric_value": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_RR", "/", "self", ".", "n_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.MRR.merge_with_other": [[93, 98], ["None"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "MAP", ",", "\"MRR: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "cumulative_RR", "+=", "other_metric_object", ".", "cumulative_RR", "\n", "self", ".", "n_users", "+=", "other_metric_object", ".", "n_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.RMSE.__init__": [[221, 230], ["metrics._Metrics_Object.__init__", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_all", ")", ":", "\n", "        ", "super", "(", "RMSE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cumulative_squared_error", "=", "0.0", "\n", "\n", "self", ".", "_min_rating", "=", "np", ".", "min", "(", "URM_all", ".", "data", ")", "\n", "self", ".", "_max_rating", "=", "np", ".", "max", "(", "URM_all", ".", "data", ")", "\n", "\n", "self", ".", "_n_predictions", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.RMSE.add_recommendations": [[231, 248], ["numpy.clip", "numpy.sum", "len", "len", "len", "numpy.all", "numpy.all"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "all_items_predicted_ratings", ",", "relevant_items", ",", "relevant_items_rating", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "relevant_items", ")", "==", "len", "(", "relevant_items_rating", ")", ",", "\"RMSE: the list of relevant items and of the corresponding rating do not have the same length\"", "\n", "\n", "assert", "np", ".", "all", "(", "relevant_items_rating", ">=", "self", ".", "_min_rating", ")", "and", "np", ".", "all", "(", "relevant_items_rating", "<=", "self", ".", "_max_rating", ")", ",", "\"RMSE: relevant_items_rating contains values outside the clip range inferred from URM_all\"", "\n", "\n", "# Important, some items will have -np.inf score and are treated as if they have the minimal rating possible", "\n", "all_items_clipped_ratings", "=", "np", ".", "clip", "(", "all_items_predicted_ratings", ",", "\n", "a_min", "=", "self", ".", "_min_rating", ",", "\n", "a_max", "=", "self", ".", "_max_rating", ")", "\n", "\n", "relevant_items_error", "=", "(", "all_items_clipped_ratings", "[", "relevant_items", "]", "-", "relevant_items_rating", ")", "**", "2", "\n", "\n", "self", ".", "cumulative_squared_error", "+=", "np", ".", "sum", "(", "relevant_items_error", ")", "\n", "self", ".", "_n_predictions", "+=", "len", "(", "relevant_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.RMSE.get_metric_value": [[249, 256], ["numpy.sqrt"], "methods", ["None"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_n_predictions", "==", "0", ":", "\n", "            ", "return", "np", ".", "nan", "\n", "\n", "", "MSE", "=", "self", ".", "cumulative_squared_error", "/", "self", ".", "_n_predictions", "\n", "return", "np", ".", "sqrt", "(", "MSE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.RMSE.merge_with_other": [[257, 262], ["None"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "RMSE", ",", "\"RMSE: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "cumulative_squared_error", "+=", "other_metric_object", ".", "cumulative_squared_error", "\n", "self", ".", "_n_predictions", "+=", "other_metric_object", ".", "_n_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter.__init__": [[275, 280], ["metrics._Metrics_Object.__init__", "numpy.zeros", "ignore_items.astype().copy", "ignore_items.astype"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "__init__", "(", "self", ",", "n_items", ",", "ignore_items", ")", ":", "\n", "        ", "super", "(", "_Global_Item_Distribution_Counter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "recommended_counter", "=", "np", ".", "zeros", "(", "n_items", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "ignore_items", "=", "ignore_items", ".", "astype", "(", "np", ".", "int", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter.add_recommendations": [[282, 285], ["len"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ")", ":", "\n", "        ", "if", "len", "(", "recommended_items_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "recommended_counter", "[", "recommended_items_ids", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter": [[286, 296], ["metrics._Global_Item_Distribution_Counter.recommended_counter.copy", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "_get_recommended_items_counter", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_counter", "=", "self", ".", "recommended_counter", ".", "copy", "(", ")", "\n", "\n", "recommended_counter_mask", "=", "np", ".", "ones_like", "(", "recommended_counter", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "recommended_counter_mask", "[", "self", ".", "ignore_items", "]", "=", "False", "\n", "\n", "recommended_counter", "=", "recommended_counter", "[", "recommended_counter_mask", "]", "\n", "\n", "return", "recommended_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter.merge_with_other": [[298, 302], ["isinstance"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "isinstance", "(", "other_metric_object", ",", "self", ".", "__class__", ")", ",", "\"{}: attempting to merge with a metric object of different type\"", ".", "format", "(", "self", ".", "__class__", ")", "\n", "\n", "self", ".", "recommended_counter", "+=", "other_metric_object", ".", "recommended_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter.get_metric_value": [[303, 305], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_Item.__init__": [[315, 317], ["metrics._Global_Item_Distribution_Counter.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_items", ",", "ignore_items", ")", ":", "\n", "        ", "super", "(", "Coverage_Item", ",", "self", ")", ".", "__init__", "(", "n_items", ",", "ignore_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_Item.get_metric_value": [[318, 323], ["metrics.Coverage_Item._get_recommended_items_counter", "recommended_mask.sum", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_mask", "=", "self", ".", "_get_recommended_items_counter", "(", ")", ">", "0", "\n", "\n", "return", "recommended_mask", ".", "sum", "(", ")", "/", "len", "(", "recommended_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_Test_Correct.__init__": [[333, 335], ["metrics._Global_Item_Distribution_Counter.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_items", ",", "ignore_items", ")", ":", "\n", "        ", "super", "(", "Coverage_Test_Correct", ",", "self", ")", ".", "__init__", "(", "n_items", ",", "ignore_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_Test_Correct.add_recommendations": [[336, 338], ["metrics._Global_Item_Distribution_Counter.add_recommendations", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ",", "is_relevant", ")", ":", "\n", "        ", "super", "(", "Coverage_Test_Correct", ",", "self", ")", ".", "add_recommendations", "(", "np", ".", "array", "(", "recommended_items_ids", ")", "[", "is_relevant", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_Test_Correct.get_metric_value": [[339, 344], ["metrics.Coverage_Test_Correct._get_recommended_items_counter", "recommended_mask.sum", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_mask", "=", "self", ".", "_get_recommended_items_counter", "(", ")", ">", "0", "\n", "\n", "return", "recommended_mask", ".", "sum", "(", ")", "/", "len", "(", "recommended_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_User.__init__": [[354, 358], ["metrics._Metrics_Object.__init__", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_users", ",", "ignore_users", ")", ":", "\n", "        ", "super", "(", "Coverage_User", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "users_mask", "=", "np", ".", "zeros", "(", "n_users", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "n_ignore_users", "=", "len", "(", "ignore_users", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_User.add_recommendations": [[359, 361], ["len"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ",", "user_id", ")", ":", "\n", "        ", "self", ".", "users_mask", "[", "user_id", "]", "=", "len", "(", "recommended_items_ids", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_User.get_metric_value": [[362, 364], ["metrics.Coverage_User.users_mask.sum", "len"], "methods", ["None"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "users_mask", ".", "sum", "(", ")", "/", "(", "len", "(", "self", ".", "users_mask", ")", "-", "self", ".", "n_ignore_users", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_User.merge_with_other": [[365, 369], ["numpy.logical_or"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "Coverage_User", ",", "\"Coverage_User: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "users_mask", "=", "np", ".", "logical_or", "(", "self", ".", "users_mask", ",", "other_metric_object", ".", "users_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_User_Correct.__init__": [[379, 383], ["metrics._Metrics_Object.__init__", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_users", ",", "ignore_users", ")", ":", "\n", "        ", "super", "(", "Coverage_User_Correct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "users_mask", "=", "np", ".", "zeros", "(", "n_users", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "n_ignore_users", "=", "len", "(", "ignore_users", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_User_Correct.add_recommendations": [[384, 386], ["numpy.any"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "is_relevant", ",", "user_id", ")", ":", "\n", "        ", "self", ".", "users_mask", "[", "user_id", "]", "=", "np", ".", "any", "(", "is_relevant", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_User_Correct.get_metric_value": [[387, 389], ["metrics.Coverage_User_Correct.users_mask.sum", "len"], "methods", ["None"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "users_mask", ".", "sum", "(", ")", "/", "(", "len", "(", "self", ".", "users_mask", ")", "-", "self", ".", "n_ignore_users", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Coverage_User_Correct.merge_with_other": [[390, 394], ["numpy.logical_or"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "Coverage_User", ",", "\"Coverage_User_Correct: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "users_mask", "=", "np", ".", "logical_or", "(", "self", ".", "users_mask", ",", "other_metric_object", ".", "users_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Gini_Diversity.__init__": [[410, 412], ["metrics._Global_Item_Distribution_Counter.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_items", ",", "ignore_items", ")", ":", "\n", "        ", "super", "(", "Gini_Diversity", ",", "self", ")", ".", "__init__", "(", "n_items", ",", "ignore_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Gini_Diversity.get_metric_value": [[413, 419], ["metrics.Gini_Diversity._get_recommended_items_counter", "metrics._compute_diversity_gini"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_diversity_gini"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_counter", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "gini_diversity", "=", "_compute_diversity_gini", "(", "recommended_counter", ")", "\n", "\n", "return", "gini_diversity", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_Herfindahl.__init__": [[457, 459], ["metrics._Global_Item_Distribution_Counter.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_items", ",", "ignore_items", ")", ":", "\n", "        ", "super", "(", "Diversity_Herfindahl", ",", "self", ")", ".", "__init__", "(", "n_items", ",", "ignore_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_Herfindahl.get_metric_value": [[460, 466], ["metrics.Diversity_Herfindahl._get_recommended_items_counter", "metrics._compute_diversity_herfindahl"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_diversity_herfindahl"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_counter", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "herfindahl_index", "=", "_compute_diversity_herfindahl", "(", "recommended_counter", ")", "\n", "\n", "return", "herfindahl_index", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Shannon_Entropy.__init__": [[498, 500], ["metrics._Global_Item_Distribution_Counter.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_items", ",", "ignore_items", ")", ":", "\n", "        ", "super", "(", "Shannon_Entropy", ",", "self", ")", ".", "__init__", "(", "n_items", ",", "ignore_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Shannon_Entropy.get_metric_value": [[501, 507], ["metrics.Shannon_Entropy._get_recommended_items_counter", "metrics._compute_shannon_entropy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_shannon_entropy"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_counter", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "shannon_entropy", "=", "_compute_shannon_entropy", "(", "recommended_counter", ")", "\n", "\n", "return", "shannon_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Shannon_Entropy.__init__": [[537, 542], ["numpy.ediff1d", "metrics._Global_Item_Distribution_Counter.__init__", "scipy.csc_matrix"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "URM_train", ",", "ignore_items", ")", ":", "\n", "\n", "        ", "n_items", "=", "URM_train", ".", "shape", "[", "1", "]", "\n", "self", ".", "recommended_counter_train", "=", "np", ".", "ediff1d", "(", "sps", ".", "csc_matrix", "(", "URM_train", ")", ".", "indptr", ")", "\n", "super", "(", "Ratio_Shannon_Entropy", ",", "self", ")", ".", "__init__", "(", "n_items", ",", "ignore_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Shannon_Entropy.get_metric_value": [[543, 558], ["metrics.Ratio_Shannon_Entropy._get_recommended_items_counter", "metrics._compute_shannon_entropy", "metrics.Ratio_Shannon_Entropy.recommended_counter.copy", "metrics.Ratio_Shannon_Entropy.recommended_counter_train.copy", "metrics.Ratio_Shannon_Entropy._get_recommended_items_counter", "metrics._compute_shannon_entropy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_shannon_entropy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_shannon_entropy"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_counter", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "shannon_entropy_recommendations", "=", "_compute_shannon_entropy", "(", "recommended_counter", ")", "\n", "recommended_counter_recommendations", "=", "self", ".", "recommended_counter", ".", "copy", "(", ")", "\n", "\n", "self", ".", "recommended_counter", "=", "self", ".", "recommended_counter_train", ".", "copy", "(", ")", "\n", "recommended_counter_train", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "shannon_entropy_train", "=", "_compute_shannon_entropy", "(", "recommended_counter_train", ")", "\n", "\n", "self", ".", "recommended_counter", "=", "recommended_counter_recommendations", "\n", "\n", "ratio_value", "=", "shannon_entropy_recommendations", "/", "shannon_entropy_train", "\n", "\n", "return", "ratio_value", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Diversity_Herfindahl.__init__": [[563, 568], ["numpy.ediff1d", "metrics._Global_Item_Distribution_Counter.__init__", "scipy.csc_matrix"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "URM_train", ",", "ignore_items", ")", ":", "\n", "\n", "        ", "n_items", "=", "URM_train", ".", "shape", "[", "1", "]", "\n", "self", ".", "recommended_counter_train", "=", "np", ".", "ediff1d", "(", "sps", ".", "csc_matrix", "(", "URM_train", ")", ".", "indptr", ")", "\n", "super", "(", "Ratio_Diversity_Herfindahl", ",", "self", ")", ".", "__init__", "(", "n_items", ",", "ignore_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Diversity_Herfindahl.get_metric_value": [[569, 584], ["metrics.Ratio_Diversity_Herfindahl._get_recommended_items_counter", "metrics._compute_diversity_herfindahl", "metrics.Ratio_Diversity_Herfindahl.recommended_counter.copy", "metrics.Ratio_Diversity_Herfindahl.recommended_counter_train.copy", "metrics.Ratio_Diversity_Herfindahl._get_recommended_items_counter", "metrics._compute_diversity_herfindahl"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_diversity_herfindahl", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_diversity_herfindahl"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_counter", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "diversity_herfindahl_recommendations", "=", "_compute_diversity_herfindahl", "(", "recommended_counter", ")", "\n", "recommended_counter_recommendations", "=", "self", ".", "recommended_counter", ".", "copy", "(", ")", "\n", "\n", "self", ".", "recommended_counter", "=", "self", ".", "recommended_counter_train", ".", "copy", "(", ")", "\n", "recommended_counter_train", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "diversity_herfindahl_train", "=", "_compute_diversity_herfindahl", "(", "recommended_counter_train", ")", "\n", "\n", "self", ".", "recommended_counter", "=", "recommended_counter_recommendations", "\n", "\n", "ratio_value", "=", "diversity_herfindahl_recommendations", "/", "diversity_herfindahl_train", "\n", "\n", "return", "ratio_value", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Diversity_Gini.__init__": [[589, 594], ["numpy.ediff1d", "metrics._Global_Item_Distribution_Counter.__init__", "scipy.csc_matrix"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "URM_train", ",", "ignore_items", ")", ":", "\n", "\n", "        ", "n_items", "=", "URM_train", ".", "shape", "[", "1", "]", "\n", "self", ".", "recommended_counter_train", "=", "np", ".", "ediff1d", "(", "sps", ".", "csc_matrix", "(", "URM_train", ")", ".", "indptr", ")", "\n", "super", "(", "Ratio_Diversity_Gini", ",", "self", ")", ".", "__init__", "(", "n_items", ",", "ignore_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Diversity_Gini.get_metric_value": [[595, 610], ["metrics.Ratio_Diversity_Gini._get_recommended_items_counter", "metrics._compute_diversity_gini", "metrics.Ratio_Diversity_Gini.recommended_counter.copy", "metrics.Ratio_Diversity_Gini.recommended_counter_train.copy", "metrics.Ratio_Diversity_Gini._get_recommended_items_counter", "metrics._compute_diversity_gini"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_diversity_gini", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._Global_Item_Distribution_Counter._get_recommended_items_counter", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_diversity_gini"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "recommended_counter", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "diversity_gini_recommendations", "=", "_compute_diversity_gini", "(", "recommended_counter", ")", "\n", "recommended_counter_recommendations", "=", "self", ".", "recommended_counter", ".", "copy", "(", ")", "\n", "\n", "self", ".", "recommended_counter", "=", "self", ".", "recommended_counter_train", ".", "copy", "(", ")", "\n", "recommended_counter_train", "=", "self", ".", "_get_recommended_items_counter", "(", ")", "\n", "diversity_gini_train", "=", "_compute_diversity_gini", "(", "recommended_counter_train", ")", "\n", "\n", "self", ".", "recommended_counter", "=", "recommended_counter_recommendations", "\n", "\n", "ratio_value", "=", "diversity_gini_recommendations", "/", "diversity_gini_train", "\n", "\n", "return", "ratio_value", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Novelty.__init__": [[629, 640], ["metrics._Metrics_Object.__init__", "scipy.csc_matrix", "scipy.csc_matrix.eliminate_zeros", "numpy.ediff1d", "len", "metrics.Novelty.item_popularity.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ")", ":", "\n", "        ", "super", "(", "Novelty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "URM_train", "=", "sps", ".", "csc_matrix", "(", "URM_train", ")", "\n", "URM_train", ".", "eliminate_zeros", "(", ")", "\n", "self", ".", "item_popularity", "=", "np", ".", "ediff1d", "(", "URM_train", ".", "indptr", ")", "\n", "\n", "self", ".", "novelty", "=", "0.0", "\n", "self", ".", "n_evaluated_users", "=", "0", "\n", "self", ".", "n_items", "=", "len", "(", "self", ".", "item_popularity", ")", "\n", "self", ".", "n_interactions", "=", "self", ".", "item_popularity", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Novelty.add_recommendations": [[642, 653], ["len", "numpy.sum", "numpy.log2"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ")", ":", "\n", "\n", "        ", "self", ".", "n_evaluated_users", "+=", "1", "\n", "\n", "if", "len", "(", "recommended_items_ids", ")", ">", "0", ":", "\n", "            ", "recommended_items_popularity", "=", "self", ".", "item_popularity", "[", "recommended_items_ids", "]", "\n", "\n", "probability", "=", "recommended_items_popularity", "/", "self", ".", "n_interactions", "\n", "probability", "=", "probability", "[", "probability", "!=", "0", "]", "\n", "\n", "self", ".", "novelty", "+=", "np", ".", "sum", "(", "-", "np", ".", "log2", "(", "probability", ")", "/", "self", ".", "n_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Novelty.get_metric_value": [[655, 661], ["None"], "methods", ["None"], ["", "", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "n_evaluated_users", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "return", "self", ".", "novelty", "/", "self", ".", "n_evaluated_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Novelty.merge_with_other": [[662, 667], ["None"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "Novelty", ",", "\"Novelty: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "novelty", "=", "self", ".", "novelty", "+", "other_metric_object", ".", "novelty", "\n", "self", ".", "n_evaluated_users", "=", "self", ".", "n_evaluated_users", "+", "other_metric_object", ".", "n_evaluated_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Novelty.__init__": [[675, 690], ["metrics._Metrics_Object.__init__", "metrics.Novelty", "scipy.csr_matrix", "metrics.Novelty", "range", "metrics.Novelty.get_metric_value", "metrics.Novelty.add_recommendations"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations"], ["    ", "def", "__init__", "(", "self", ",", "URM_train", ")", ":", "\n", "        ", "super", "(", "Ratio_Novelty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "novelty_object_recommendations", "=", "Novelty", "(", "URM_train", ")", "\n", "\n", "URM_train", "=", "sps", ".", "csr_matrix", "(", "URM_train", ")", "\n", "novelty_object_train", "=", "Novelty", "(", "URM_train", ")", "\n", "\n", "for", "user_id", "in", "range", "(", "URM_train", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "start_pos", "=", "URM_train", ".", "indptr", "[", "user_id", "]", "\n", "end_pos", "=", "URM_train", ".", "indptr", "[", "user_id", "+", "1", "]", "\n", "\n", "novelty_object_train", ".", "add_recommendations", "(", "URM_train", ".", "indices", "[", "start_pos", ":", "end_pos", "]", ")", "\n", "\n", "", "self", ".", "novelty_train", "=", "novelty_object_train", ".", "get_metric_value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Novelty.add_recommendations": [[692, 694], ["metrics.Ratio_Novelty.novelty_object_recommendations.add_recommendations"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ")", ":", "\n", "        ", "self", ".", "novelty_object_recommendations", ".", "add_recommendations", "(", "recommended_items_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Novelty.get_metric_value": [[696, 703], ["metrics.Ratio_Novelty.novelty_object_recommendations.get_metric_value"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "novelty_recommendations", "=", "self", ".", "novelty_object_recommendations", ".", "get_metric_value", "(", ")", "\n", "\n", "ratio_value", "=", "novelty_recommendations", "/", "self", ".", "novelty_train", "\n", "\n", "return", "ratio_value", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_Novelty.merge_with_other": [[705, 709], ["metrics.Ratio_Novelty.novelty_object_recommendations.merge_with_other"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.merge_with_other"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "Ratio_Novelty", ",", "\"Ratio_Novelty: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "novelty_object_recommendations", ".", "merge_with_other", "(", "other_metric_object", ".", "novelty_object_recommendations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.AveragePopularity.__init__": [[718, 732], ["metrics._Metrics_Object.__init__", "scipy.csc_matrix", "scipy.csc_matrix.eliminate_zeros", "numpy.ediff1d", "numpy.ediff1d.sum", "numpy.ediff1d.max"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ")", ":", "\n", "        ", "super", "(", "AveragePopularity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "URM_train", "=", "sps", ".", "csc_matrix", "(", "URM_train", ")", "\n", "URM_train", ".", "eliminate_zeros", "(", ")", "\n", "item_popularity", "=", "np", ".", "ediff1d", "(", "URM_train", ".", "indptr", ")", "\n", "\n", "\n", "self", ".", "cumulative_popularity", "=", "0.0", "\n", "self", ".", "n_evaluated_users", "=", "0", "\n", "self", ".", "n_items", "=", "URM_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_interactions", "=", "item_popularity", ".", "sum", "(", ")", "\n", "\n", "self", ".", "item_popularity_normalized", "=", "item_popularity", "/", "item_popularity", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.AveragePopularity.add_recommendations": [[734, 742], ["len", "numpy.sum", "len"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ")", ":", "\n", "\n", "        ", "self", ".", "n_evaluated_users", "+=", "1", "\n", "\n", "if", "len", "(", "recommended_items_ids", ")", ">", "0", ":", "\n", "            ", "recommended_items_popularity", "=", "self", ".", "item_popularity_normalized", "[", "recommended_items_ids", "]", "\n", "\n", "self", ".", "cumulative_popularity", "+=", "np", ".", "sum", "(", "recommended_items_popularity", ")", "/", "len", "(", "recommended_items_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.AveragePopularity.get_metric_value": [[744, 750], ["None"], "methods", ["None"], ["", "", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "n_evaluated_users", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "return", "self", ".", "cumulative_popularity", "/", "self", ".", "n_evaluated_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.AveragePopularity.merge_with_other": [[751, 756], ["None"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "Novelty", ",", "\"AveragePopularity: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "cumulative_popularity", "=", "self", ".", "cumulative_popularity", "+", "other_metric_object", ".", "cumulative_popularity", "\n", "self", ".", "n_evaluated_users", "=", "self", ".", "n_evaluated_users", "+", "other_metric_object", ".", "n_evaluated_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_AveragePopularity.__init__": [[763, 778], ["metrics._Metrics_Object.__init__", "metrics.AveragePopularity", "scipy.csr_matrix", "metrics.AveragePopularity", "range", "metrics.AveragePopularity.get_metric_value", "metrics.AveragePopularity.add_recommendations"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations"], ["    ", "def", "__init__", "(", "self", ",", "URM_train", ")", ":", "\n", "        ", "super", "(", "Ratio_AveragePopularity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "average_popularity_recommendations", "=", "AveragePopularity", "(", "URM_train", ")", "\n", "\n", "URM_train", "=", "sps", ".", "csr_matrix", "(", "URM_train", ")", "\n", "average_popularity_object_train", "=", "AveragePopularity", "(", "URM_train", ")", "\n", "\n", "for", "user_id", "in", "range", "(", "URM_train", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "start_pos", "=", "URM_train", ".", "indptr", "[", "user_id", "]", "\n", "end_pos", "=", "URM_train", ".", "indptr", "[", "user_id", "+", "1", "]", "\n", "\n", "average_popularity_object_train", ".", "add_recommendations", "(", "URM_train", ".", "indices", "[", "start_pos", ":", "end_pos", "]", ")", "\n", "\n", "", "self", ".", "average_popularity_train", "=", "average_popularity_object_train", ".", "get_metric_value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_AveragePopularity.add_recommendations": [[780, 782], ["metrics.Ratio_AveragePopularity.average_popularity_recommendations.add_recommendations"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ")", ":", "\n", "        ", "self", ".", "average_popularity_recommendations", ".", "add_recommendations", "(", "recommended_items_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_AveragePopularity.get_metric_value": [[784, 791], ["metrics.Ratio_AveragePopularity.average_popularity_recommendations.get_metric_value"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "average_popularity_recommendations", "=", "self", ".", "average_popularity_recommendations", ".", "get_metric_value", "(", ")", "\n", "\n", "ratio_value", "=", "average_popularity_recommendations", "/", "self", ".", "average_popularity_train", "\n", "\n", "return", "ratio_value", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Ratio_AveragePopularity.merge_with_other": [[793, 797], ["metrics.Ratio_AveragePopularity.average_popularity_recommendations.merge_with_other"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.merge_with_other"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "Ratio_AveragePopularity", ",", "\"Ratio_AveragePopularity: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "average_popularity_recommendations", ".", "merge_with_other", "(", "other_metric_object", ".", "novelty_object_recommendations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_similarity.__init__": [[812, 822], ["metrics._Metrics_Object.__init__", "numpy.all", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "item_diversity_matrix", ")", ":", "\n", "        ", "super", "(", "Diversity_similarity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "np", ".", "all", "(", "item_diversity_matrix", ">=", "0.0", ")", "and", "np", ".", "all", "(", "item_diversity_matrix", "<=", "1.0", ")", ",", "\"item_diversity_matrix contains value greated than 1.0 or lower than 0.0\"", "\n", "\n", "self", ".", "item_diversity_matrix", "=", "item_diversity_matrix", "\n", "\n", "self", ".", "n_evaluated_users", "=", "0", "\n", "self", ".", "diversity", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_similarity.add_recommendations": [[824, 841], ["range", "numpy.sum", "len", "len", "len"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ")", ":", "\n", "\n", "        ", "current_recommended_items_diversity", "=", "0.0", "\n", "\n", "for", "item_index", "in", "range", "(", "len", "(", "recommended_items_ids", ")", "-", "1", ")", ":", "\n", "\n", "            ", "item_id", "=", "recommended_items_ids", "[", "item_index", "]", "\n", "\n", "item_other_diversity", "=", "self", ".", "item_diversity_matrix", "[", "item_id", ",", "recommended_items_ids", "]", "\n", "item_other_diversity", "[", "item_index", "]", "=", "0.0", "\n", "\n", "current_recommended_items_diversity", "+=", "np", ".", "sum", "(", "item_other_diversity", ")", "\n", "\n", "\n", "", "self", ".", "diversity", "+=", "current_recommended_items_diversity", "/", "(", "len", "(", "recommended_items_ids", ")", "*", "(", "len", "(", "recommended_items_ids", ")", "-", "1", ")", ")", "\n", "\n", "self", ".", "n_evaluated_users", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_similarity.get_metric_value": [[843, 849], ["None"], "methods", ["None"], ["", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "n_evaluated_users", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "return", "self", ".", "diversity", "/", "self", ".", "n_evaluated_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_similarity.merge_with_other": [[850, 855], ["None"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "        ", "assert", "other_metric_object", "is", "Diversity_similarity", ",", "\"Diversity: attempting to merge with a metric object of different type\"", "\n", "\n", "self", ".", "diversity", "=", "self", ".", "diversity", "+", "other_metric_object", ".", "diversity", "\n", "self", ".", "n_evaluated_users", "=", "self", ".", "n_evaluated_users", "+", "other_metric_object", ".", "n_evaluated_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.__init__": [[929, 938], ["metrics._Metrics_Object.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_items", ",", "cutoff", ")", ":", "\n", "        ", "super", "(", "Diversity_MeanInterList", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "recommended_counter", "=", "np", ".", "zeros", "(", "n_items", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "self", ".", "n_evaluated_users", "=", "0", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "diversity", "=", "0.0", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.add_recommendations": [[940, 948], ["len", "len"], "methods", ["None"], ["", "def", "add_recommendations", "(", "self", ",", "recommended_items_ids", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "recommended_items_ids", ")", "<=", "self", ".", "cutoff", ",", "\"Diversity_MeanInterList: recommended list is contains more elements than cutoff\"", "\n", "\n", "self", ".", "n_evaluated_users", "+=", "1", "\n", "\n", "if", "len", "(", "recommended_items_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "recommended_counter", "[", "recommended_items_ids", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value": [[952, 968], ["numpy.sum"], "methods", ["None"], ["", "", "def", "get_metric_value", "(", "self", ")", ":", "\n", "\n", "# Requires to compute the number of common elements for all couples of users", "\n", "        ", "if", "self", ".", "n_evaluated_users", "==", "0", ":", "\n", "            ", "return", "1.0", "\n", "\n", "", "cooccurrences_cumulative", "=", "np", ".", "sum", "(", "self", ".", "recommended_counter", "**", "2", ")", "-", "self", ".", "n_evaluated_users", "*", "self", ".", "cutoff", "\n", "\n", "# All user combinations except diagonal", "\n", "all_user_couples_count", "=", "self", ".", "n_evaluated_users", "**", "2", "-", "self", ".", "n_evaluated_users", "\n", "\n", "diversity_cumulative", "=", "all_user_couples_count", "-", "cooccurrences_cumulative", "/", "self", ".", "cutoff", "\n", "\n", "self", ".", "diversity", "=", "diversity_cumulative", "/", "all_user_couples_count", "\n", "\n", "return", "self", ".", "diversity", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_theoretical_max": [[970, 977], ["None"], "methods", ["None"], ["", "def", "get_theoretical_max", "(", "self", ")", ":", "\n", "\n", "        ", "global_co_occurrence_count", "=", "(", "self", ".", "n_evaluated_users", "*", "self", ".", "cutoff", ")", "**", "2", "/", "self", ".", "n_items", "-", "self", ".", "n_evaluated_users", "*", "self", ".", "cutoff", "\n", "\n", "mild", "=", "1", "-", "1", "/", "(", "self", ".", "n_evaluated_users", "**", "2", "-", "self", ".", "n_evaluated_users", ")", "*", "(", "global_co_occurrence_count", "/", "self", ".", "cutoff", ")", "\n", "\n", "return", "mild", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.merge_with_other": [[978, 987], ["numpy.all", "numpy.all"], "methods", ["None"], ["", "def", "merge_with_other", "(", "self", ",", "other_metric_object", ")", ":", "\n", "\n", "        ", "assert", "other_metric_object", "is", "Diversity_MeanInterList", ",", "\"Diversity_MeanInterList: attempting to merge with a metric object of different type\"", "\n", "\n", "assert", "np", ".", "all", "(", "self", ".", "recommended_counter", ">=", "0.0", ")", ",", "\"Diversity_MeanInterList: self.recommended_counter contains negative counts\"", "\n", "assert", "np", ".", "all", "(", "other_metric_object", ".", "recommended_counter", ">=", "0.0", ")", ",", "\"Diversity_MeanInterList: other.recommended_counter contains negative counts\"", "\n", "\n", "self", ".", "recommended_counter", "+=", "other_metric_object", ".", "recommended_counter", "\n", "self", ".", "n_evaluated_users", "+=", "other_metric_object", ".", "n_evaluated_users", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.TestAUC.runTest": [[1012, 1017], ["numpy.asarray", "numpy.asarray", "metrics.TestAUC.assertTrue", "numpy.allclose", "metrics.roc_auc"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.roc_auc"], ["    ", "def", "runTest", "(", "self", ")", ":", "\n", "        ", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", "]", ")", "\n", "ranked_list", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "roc_auc", "(", "ranked_list", ",", "pos_items", ")", ",", "\n", "(", "2.", "/", "3", "+", "1.", "/", "3", ")", "/", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.TestRecall.runTest": [[1020, 1033], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "metrics.TestRecall.assertTrue", "metrics.TestRecall.assertTrue", "metrics.TestRecall.assertTrue", "zip", "numpy.allclose", "numpy.allclose", "numpy.allclose", "metrics.TestRecall.assertTrue", "metrics.recall", "metrics.recall", "metrics.recall", "numpy.allclose", "numpy.asarray", "metrics.recall"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall"], ["    ", "def", "runTest", "(", "self", ")", ":", "\n", "        ", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "recall", "(", "ranked_list_1", ",", "pos_items", ")", ",", "3.", "/", "4", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "recall", "(", "ranked_list_2", ",", "pos_items", ")", ",", "1.0", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "recall", "(", "ranked_list_3", ",", "pos_items", ")", ",", "0.0", ")", ")", "\n", "\n", "thresholds", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "values", "=", "[", "0.0", ",", "1.", "/", "4", ",", "1.", "/", "4", ",", "2.", "/", "4", ",", "3.", "/", "4", "]", "\n", "for", "at", ",", "val", "in", "zip", "(", "thresholds", ",", "values", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "np", ".", "asarray", "(", "recall", "(", "ranked_list_1", ",", "pos_items", ",", "at", "=", "at", ")", ")", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.TestPrecision.runTest": [[1036, 1049], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "metrics.TestPrecision.assertTrue", "metrics.TestPrecision.assertTrue", "metrics.TestPrecision.assertTrue", "zip", "numpy.allclose", "numpy.allclose", "numpy.allclose", "metrics.TestPrecision.assertTrue", "metrics.precision", "metrics.precision", "metrics.precision", "numpy.allclose", "numpy.asarray", "metrics.precision"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision"], ["    ", "def", "runTest", "(", "self", ")", ":", "\n", "        ", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "precision", "(", "ranked_list_1", ",", "pos_items", ")", ",", "3.", "/", "5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "precision", "(", "ranked_list_2", ",", "pos_items", ")", ",", "4.", "/", "5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "precision", "(", "ranked_list_3", ",", "pos_items", ")", ",", "0.0", ")", ")", "\n", "\n", "thresholds", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "values", "=", "[", "0.0", ",", "1.", "/", "2", ",", "1.", "/", "3", ",", "2.", "/", "4", ",", "3.", "/", "5", "]", "\n", "for", "at", ",", "val", "in", "zip", "(", "thresholds", ",", "values", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "np", ".", "asarray", "(", "precision", "(", "ranked_list_1", ",", "pos_items", ",", "at", "=", "at", ")", ")", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.TestRR.runTest": [[1052, 1065], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "metrics.TestRR.assertTrue", "metrics.TestRR.assertTrue", "metrics.TestRR.assertTrue", "zip", "numpy.allclose", "numpy.allclose", "numpy.allclose", "metrics.TestRR.assertTrue", "metrics.rr", "metrics.rr", "metrics.rr", "numpy.allclose", "numpy.asarray", "metrics.rr"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr"], ["    ", "def", "runTest", "(", "self", ")", ":", "\n", "        ", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "rr", "(", "ranked_list_1", ",", "pos_items", ")", ",", "1.", "/", "2", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "rr", "(", "ranked_list_2", ",", "pos_items", ")", ",", "1.", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "rr", "(", "ranked_list_3", ",", "pos_items", ")", ",", "0.0", ")", ")", "\n", "\n", "thresholds", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "values", "=", "[", "0.0", ",", "1.", "/", "2", ",", "1.", "/", "2", ",", "1.", "/", "2", ",", "1.", "/", "2", "]", "\n", "for", "at", ",", "val", "in", "zip", "(", "thresholds", ",", "values", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "np", ".", "asarray", "(", "rr", "(", "ranked_list_1", ",", "pos_items", ",", "at", "=", "at", ")", ")", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.TestMAP.runTest": [[1068, 1091], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "metrics.TestMAP.assertTrue", "metrics.TestMAP.assertTrue", "metrics.TestMAP.assertTrue", "metrics.TestMAP.assertTrue", "metrics.TestMAP.assertTrue", "zip", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "metrics.TestMAP.assertTrue", "map", "map", "map", "map", "map", "numpy.allclose", "numpy.asarray", "map"], "methods", ["None"], ["    ", "def", "runTest", "(", "self", ")", ":", "\n", "        ", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "ranked_list_4", "=", "np", ".", "asarray", "(", "[", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "ranked_list_5", "=", "np", ".", "asarray", "(", "[", "2", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "4", ",", "5", ",", "10", ",", "16", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "ranked_list_1", ",", "pos_items", ")", ",", "(", "1.", "/", "2", "+", "2.", "/", "4", "+", "3.", "/", "5", ")", "/", "4", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "ranked_list_2", ",", "pos_items", ")", ",", "1.0", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "ranked_list_3", ",", "pos_items", ")", ",", "0.0", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "ranked_list_4", ",", "pos_items", ")", ",", "(", "1.", "/", "7", "+", "2.", "/", "8", "+", "3.", "/", "9", "+", "4.", "/", "10", ")", "/", "4", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "map", "(", "ranked_list_5", ",", "pos_items", ")", ",", "(", "1.", "+", "2.", "/", "7", "+", "3.", "/", "8", "+", "4.", "/", "9", ")", "/", "4", ")", ")", "\n", "\n", "thresholds", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "values", "=", "[", "\n", "0.0", ",", "\n", "1.", "/", "2", "/", "2", ",", "\n", "1.", "/", "2", "/", "3", ",", "\n", "(", "1.", "/", "2", "+", "2.", "/", "4", ")", "/", "4", ",", "\n", "(", "1.", "/", "2", "+", "2.", "/", "4", "+", "3.", "/", "5", ")", "/", "4", "\n", "]", "\n", "for", "at", ",", "val", "in", "zip", "(", "thresholds", ",", "values", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "np", ".", "asarray", "(", "map", "(", "ranked_list_1", ",", "pos_items", ",", "at", ")", ")", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.TestNDCG.runTest": [[1094, 1115], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "metrics.TestNDCG.assertTrue", "metrics.TestNDCG.assertTrue", "metrics.TestNDCG.assertTrue", "metrics.TestNDCG.assertTrue", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.log", "metrics.dcg", "metrics.ndcg", "metrics.ndcg", "metrics.ndcg", "numpy.log", "numpy.log", "numpy.log", "numpy.sort", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.dcg", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.ndcg", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.ndcg", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.ndcg"], ["    ", "def", "runTest", "(", "self", ")", ":", "\n", "        ", "pos_items", "=", "np", ".", "asarray", "(", "[", "2", ",", "4", ",", "5", ",", "10", "]", ")", "\n", "pos_relevances", "=", "np", ".", "asarray", "(", "[", "5", ",", "4", ",", "3", ",", "2", "]", ")", "\n", "ranked_list_1", "=", "np", ".", "asarray", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "# rel = 0, 5, 0, 4, 3", "\n", "ranked_list_2", "=", "np", ".", "asarray", "(", "[", "10", ",", "5", ",", "2", ",", "4", ",", "3", "]", ")", "# rel = 2, 3, 5, 4, 0", "\n", "ranked_list_3", "=", "np", ".", "asarray", "(", "[", "1", ",", "3", ",", "6", ",", "7", ",", "8", "]", ")", "# rel = 0, 0, 0, 0, 0", "\n", "idcg", "=", "(", "(", "2", "**", "5", "-", "1", ")", "/", "np", ".", "log", "(", "2", ")", "+", "\n", "(", "2", "**", "4", "-", "1", ")", "/", "np", ".", "log", "(", "3", ")", "+", "\n", "(", "2", "**", "3", "-", "1", ")", "/", "np", ".", "log", "(", "4", ")", "+", "\n", "(", "2", "**", "2", "-", "1", ")", "/", "np", ".", "log", "(", "5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "dcg", "(", "np", ".", "sort", "(", "pos_relevances", ")", "[", ":", ":", "-", "1", "]", ")", ",", "idcg", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "ndcg", "(", "ranked_list_1", ",", "pos_items", ",", "pos_relevances", ")", ",", "\n", "(", "(", "2", "**", "5", "-", "1", ")", "/", "np", ".", "log", "(", "3", ")", "+", "\n", "(", "2", "**", "4", "-", "1", ")", "/", "np", ".", "log", "(", "5", ")", "+", "\n", "(", "2", "**", "3", "-", "1", ")", "/", "np", ".", "log", "(", "6", ")", ")", "/", "idcg", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "ndcg", "(", "ranked_list_2", ",", "pos_items", ",", "pos_relevances", ")", ",", "\n", "(", "(", "2", "**", "2", "-", "1", ")", "/", "np", ".", "log", "(", "2", ")", "+", "\n", "(", "2", "**", "3", "-", "1", ")", "/", "np", ".", "log", "(", "3", ")", "+", "\n", "(", "2", "**", "5", "-", "1", ")", "/", "np", ".", "log", "(", "4", ")", "+", "\n", "(", "2", "**", "4", "-", "1", ")", "/", "np", ".", "log", "(", "5", ")", ")", "/", "idcg", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "ndcg", "(", "ranked_list_3", ",", "pos_items", ",", "pos_relevances", ")", ",", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.average_precision": [[63, 73], ["len", "numpy.sum", "numpy.min", "numpy.cumsum", "numpy.arange"], "function", ["None"], ["", "", "def", "average_precision", "(", "is_relevant", ",", "pos_items", ")", ":", "\n", "\n", "    ", "if", "len", "(", "is_relevant", ")", "==", "0", ":", "\n", "        ", "a_p", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "p_at_k", "=", "is_relevant", "*", "np", ".", "cumsum", "(", "is_relevant", ",", "dtype", "=", "np", ".", "float32", ")", "/", "(", "1", "+", "np", ".", "arange", "(", "is_relevant", ".", "shape", "[", "0", "]", ")", ")", "\n", "a_p", "=", "np", ".", "sum", "(", "p_at_k", ")", "/", "np", ".", "min", "(", "[", "pos_items", ".", "shape", "[", "0", "]", ",", "is_relevant", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "", "assert", "0", "<=", "a_p", "<=", "1", ",", "a_p", "\n", "return", "a_p", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.roc_auc": [[100, 117], ["numpy.arange", "len", "len", "len", "numpy.sum"], "function", ["None"], ["", "", "def", "roc_auc", "(", "is_relevant", ")", ":", "\n", "\n", "    ", "ranks", "=", "np", ".", "arange", "(", "len", "(", "is_relevant", ")", ")", "\n", "pos_ranks", "=", "ranks", "[", "is_relevant", "]", "\n", "neg_ranks", "=", "ranks", "[", "~", "is_relevant", "]", "\n", "auc_score", "=", "0.0", "\n", "\n", "if", "len", "(", "neg_ranks", ")", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "\n", "", "if", "len", "(", "pos_ranks", ")", ">", "0", ":", "\n", "        ", "for", "pos_pred", "in", "pos_ranks", ":", "\n", "            ", "auc_score", "+=", "np", ".", "sum", "(", "pos_pred", "<", "neg_ranks", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "auc_score", "/=", "(", "pos_ranks", ".", "shape", "[", "0", "]", "*", "neg_ranks", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "assert", "0", "<=", "auc_score", "<=", "1", ",", "auc_score", "\n", "return", "auc_score", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.arhr": [[120, 132], ["is_relevant.dot", "numpy.arange", "numpy.isnan", "len"], "function", ["None"], ["", "def", "arhr", "(", "is_relevant", ")", ":", "\n", "# average reciprocal hit-rank (ARHR) of all relevant items", "\n", "# As opposed to MRR, ARHR takes into account all relevant items and not just the first", "\n", "# pag 17", "\n", "# http://glaros.dtc.umn.edu/gkhome/fetch/papers/itemrsTOIS04.pdf", "\n", "# https://emunix.emich.edu/~sverdlik/COSC562/ItemBasedTopTen.pdf", "\n", "\n", "    ", "p_reciprocal", "=", "1", "/", "np", ".", "arange", "(", "1", ",", "len", "(", "is_relevant", ")", "+", "1", ",", "1.0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "arhr_score", "=", "is_relevant", ".", "dot", "(", "p_reciprocal", ")", "\n", "\n", "assert", "not", "np", ".", "isnan", "(", "arhr_score", ")", ",", "\"ARHR is NaN\"", "\n", "return", "arhr_score", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision": [[134, 143], ["len", "numpy.sum", "len"], "function", ["None"], ["", "def", "precision", "(", "is_relevant", ")", ":", "\n", "\n", "    ", "if", "len", "(", "is_relevant", ")", "==", "0", ":", "\n", "        ", "precision_score", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "precision_score", "=", "np", ".", "sum", "(", "is_relevant", ",", "dtype", "=", "np", ".", "float32", ")", "/", "len", "(", "is_relevant", ")", "\n", "\n", "", "assert", "0", "<=", "precision_score", "<=", "1", ",", "precision_score", "\n", "return", "precision_score", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.precision_recall_min_denominator": [[145, 154], ["len", "numpy.sum", "min", "len"], "function", ["None"], ["", "def", "precision_recall_min_denominator", "(", "is_relevant", ",", "n_test_items", ")", ":", "\n", "\n", "    ", "if", "len", "(", "is_relevant", ")", "==", "0", ":", "\n", "        ", "precision_score", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "precision_score", "=", "np", ".", "sum", "(", "is_relevant", ",", "dtype", "=", "np", ".", "float32", ")", "/", "min", "(", "n_test_items", ",", "len", "(", "is_relevant", ")", ")", "\n", "\n", "", "assert", "0", "<=", "precision_score", "<=", "1", ",", "precision_score", "\n", "return", "precision_score", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.recall": [[157, 163], ["numpy.sum"], "function", ["None"], ["", "def", "recall", "(", "is_relevant", ",", "pos_items", ")", ":", "\n", "\n", "    ", "recall_score", "=", "np", ".", "sum", "(", "is_relevant", ",", "dtype", "=", "np", ".", "float32", ")", "/", "pos_items", ".", "shape", "[", "0", "]", "\n", "\n", "assert", "0", "<=", "recall_score", "<=", "1", ",", "recall_score", "\n", "return", "recall_score", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.rr": [[165, 174], ["numpy.arange", "len", "len"], "function", ["None"], ["", "def", "rr", "(", "is_relevant", ")", ":", "\n", "# reciprocal rank of the FIRST relevant item in the ranked list (0 if none)", "\n", "\n", "    ", "ranks", "=", "np", ".", "arange", "(", "1", ",", "len", "(", "is_relevant", ")", "+", "1", ")", "[", "is_relevant", "]", "\n", "\n", "if", "len", "(", "ranks", ")", ">", "0", ":", "\n", "        ", "return", "1.", "/", "ranks", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.ndcg": [[178, 203], ["numpy.asarray", "metrics.dcg", "metrics.dcg", "numpy.ones_like", "len", "zip", "it2rel.get", "numpy.sort"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.dcg", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.dcg"], ["", "", "def", "ndcg", "(", "ranked_list", ",", "pos_items", ",", "relevance", "=", "None", ",", "at", "=", "None", ")", ":", "\n", "\n", "    ", "if", "relevance", "is", "None", ":", "\n", "        ", "relevance", "=", "np", ".", "ones_like", "(", "pos_items", ")", "\n", "", "assert", "len", "(", "relevance", ")", "==", "pos_items", ".", "shape", "[", "0", "]", "\n", "\n", "# Create a dictionary associating item_id to its relevance", "\n", "# it2rel[item] -> relevance[item]", "\n", "it2rel", "=", "{", "it", ":", "r", "for", "it", ",", "r", "in", "zip", "(", "pos_items", ",", "relevance", ")", "}", "\n", "\n", "# Creates array of length \"at\" with the relevance associated to the item in that position", "\n", "rank_scores", "=", "np", ".", "asarray", "(", "[", "it2rel", ".", "get", "(", "it", ",", "0.0", ")", "for", "it", "in", "ranked_list", "[", ":", "at", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# IDCG has all relevances to 1, up to the number of items in the test set", "\n", "ideal_dcg", "=", "dcg", "(", "np", ".", "sort", "(", "relevance", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "\n", "# DCG uses the relevance of the recommended items", "\n", "rank_dcg", "=", "dcg", "(", "rank_scores", ")", "\n", "\n", "if", "rank_dcg", "==", "0.0", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "ndcg_", "=", "rank_dcg", "/", "ideal_dcg", "\n", "\n", "return", "ndcg_", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.dcg": [[205, 208], ["numpy.sum", "numpy.divide", "numpy.log", "numpy.power", "numpy.arange"], "function", ["None"], ["", "def", "dcg", "(", "scores", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "divide", "(", "np", ".", "power", "(", "2", ",", "scores", ")", "-", "1", ",", "np", ".", "log", "(", "np", ".", "arange", "(", "scores", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "+", "2", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_diversity_gini": [[423, 440], ["len", "numpy.sort", "numpy.arange", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "_compute_diversity_gini", "(", "recommended_counter", ")", ":", "\n", "    ", "\"\"\"\n    The function computes the gini diversity of the given recommended item distribution.\n    This is NOT the Gini index, rather a variation of it such that high values mean higher diversity\n    :param recommended_counter:\n    :return:\n    \"\"\"", "\n", "\n", "n_items", "=", "len", "(", "recommended_counter", ")", "\n", "\n", "recommended_counter_sorted", "=", "np", ".", "sort", "(", "recommended_counter", ")", "# values must be sorted", "\n", "index", "=", "np", ".", "arange", "(", "1", ",", "n_items", "+", "1", ")", "# index per array element", "\n", "\n", "#gini_index = (np.sum((2 * index - n_items  - 1) * recommended_counter_sorted)) / (n_items * np.sum(recommended_counter_sorted))", "\n", "gini_diversity", "=", "2", "*", "np", ".", "sum", "(", "(", "n_items", "+", "1", "-", "index", ")", "/", "(", "n_items", "+", "1", ")", "*", "recommended_counter_sorted", "/", "np", ".", "sum", "(", "recommended_counter_sorted", ")", ")", "\n", "\n", "return", "gini_diversity", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_diversity_herfindahl": [[469, 477], ["recommended_counter.sum", "numpy.sum", "recommended_counter.sum"], "function", ["None"], ["", "", "def", "_compute_diversity_herfindahl", "(", "recommended_counter", ")", ":", "\n", "\n", "    ", "if", "recommended_counter", ".", "sum", "(", ")", "!=", "0", ":", "\n", "        ", "herfindahl_index", "=", "1", "-", "np", ".", "sum", "(", "(", "recommended_counter", "/", "recommended_counter", ".", "sum", "(", ")", ")", "**", "2", ")", "\n", "", "else", ":", "\n", "        ", "herfindahl_index", "=", "np", ".", "nan", "\n", "\n", "", "return", "herfindahl_index", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics._compute_shannon_entropy": [[512, 528], ["numpy.ones_like", "recommended_counter.sum", "numpy.sum", "numpy.log2"], "function", ["None"], ["", "", "def", "_compute_shannon_entropy", "(", "recommended_counter", ")", ":", "\n", "\n", "# Ignore from the computation both ignored items and items with zero occurrence.", "\n", "# Zero occurrence items will have zero probability and will not change the result, butt will generate nans if used in the log", "\n", "    ", "recommended_counter_mask", "=", "np", ".", "ones_like", "(", "recommended_counter", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "recommended_counter_mask", "[", "recommended_counter", "==", "0", "]", "=", "False", "\n", "\n", "recommended_counter", "=", "recommended_counter", "[", "recommended_counter_mask", "]", "\n", "\n", "n_recommendations", "=", "recommended_counter", ".", "sum", "(", ")", "\n", "\n", "recommended_probability", "=", "recommended_counter", "/", "n_recommendations", "\n", "\n", "shannon_entropy", "=", "-", "np", ".", "sum", "(", "recommended_probability", "*", "np", ".", "log2", "(", "recommended_probability", ")", ")", "\n", "\n", "return", "shannon_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.pp_metrics": [[997, 1009], ["isinstance", "len", "len", "len", "zip"], "function", ["None"], ["def", "pp_metrics", "(", "metric_names", ",", "metric_values", ",", "metric_at", ")", ":", "\n", "    ", "\"\"\"\n    Pretty-prints metric values\n    :param metrics_arr:\n    :return:\n    \"\"\"", "\n", "assert", "len", "(", "metric_names", ")", "==", "len", "(", "metric_values", ")", "\n", "if", "isinstance", "(", "metric_at", ",", "int", ")", ":", "\n", "        ", "metric_at", "=", "[", "metric_at", "]", "*", "len", "(", "metric_values", ")", "\n", "", "return", "' '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "mname", ",", "mvalue", ")", "if", "mcutoff", "is", "None", "or", "mcutoff", "==", "0", "else", "\n", "'{}@{}: {:.4f}'", ".", "format", "(", "mname", ",", "mcutoff", ",", "mvalue", ")", "\n", "for", "mname", ",", "mcutoff", ",", "mvalue", "in", "zip", "(", "metric_names", ",", "metric_at", ",", "metric_values", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest.__init__": [[235, 245], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "n_folds", ",", "log_label", "=", "None", ",", "allow_overwrite", "=", "False", ",", "log_file", "=", "None", ")", ":", "\n", "        ", "super", "(", "KFold_SignificanceTest", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "n_folds", ">", "0", ",", "\"KFold_SignificanceTest: n_folds cannot be negative\"", "\n", "\n", "self", ".", "_result_list", "=", "[", "None", "]", "*", "n_folds", "\n", "self", ".", "_n_folds", "=", "n_folds", "\n", "self", ".", "_log_file", "=", "log_file", "\n", "self", ".", "_log_label", "=", "log_label", "\n", "self", ".", "_allow_overwrite", "=", "allow_overwrite", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest.set_results_in_fold": [[247, 253], ["result_dict.copy", "Exception"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "set_results_in_fold", "(", "self", ",", "fold_index", ",", "result_dict", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_result_list", "[", "fold_index", "]", "is", "not", "None", "and", "not", "self", ".", "_allow_overwrite", ":", "\n", "            ", "raise", "Exception", "(", "\"KFold_SignificanceTest: set_results_in_fold {} would overwrite previously set value\"", ".", "format", "(", "fold_index", ")", ")", "\n", "\n", "", "self", ".", "_result_list", "[", "fold_index", "]", "=", "result_dict", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest.get_results": [[255, 257], ["KFold_SignificanceTest.KFold_SignificanceTest._result_list.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_result_list", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest.get_fold_number": [[258, 260], ["None"], "methods", ["None"], ["", "def", "get_fold_number", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_folds", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest._get_label": [[261, 263], ["None"], "methods", ["None"], ["", "def", "_get_label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_log_label", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest.run_significance_test": [[264, 310], ["isinstance", "other_result_repository.get_results", "other_result_repository._get_label", "other_result_repository.get_fold_number", "KFold_SignificanceTest.KFold_SignificanceTest.get_fold_number", "list", "range", "KFold_SignificanceTest.compute_k_fold_significance", "pandas.DataFrame.to_csv", "result_list_other[].keys", "KFold_SignificanceTest.write_log", "list_this.append", "list_other.append", "df_columns.extend", "df_columns.extend", "pandas.DataFrame", "compute_k_fold_significance.keys", "compute_k_fold_significance.keys"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest.get_results", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest._get_label", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest.get_fold_number", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.KFold_SignificanceTest.get_fold_number", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.compute_k_fold_significance", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log"], ["", "def", "run_significance_test", "(", "self", ",", "other_result_repository", ",", "metric", "=", "None", ",", "alpha", "=", "0.05", ",", "verbose", "=", "True", ",", "dataframe_path", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "other_result_repository", ",", "KFold_SignificanceTest", ")", ",", "\"KFold_SignificanceTest: run_significance_test must receive another repository as parameter\"", "\n", "assert", "other_result_repository", ".", "get_fold_number", "(", ")", "==", "self", ".", "get_fold_number", "(", ")", ",", "\"KFold_SignificanceTest: run_significance_test other repository must have the same number of folds\"", "\n", "\n", "result_list_other", "=", "other_result_repository", ".", "get_results", "(", ")", "\n", "other_label", "=", "other_result_repository", ".", "_get_label", "(", ")", "\n", "\n", "if", "metric", "is", "None", ":", "\n", "            ", "metric_list", "=", "list", "(", "result_list_other", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "metric_list", "=", "[", "metric", "]", "\n", "\n", "\n", "", "result_df", "=", "None", "\n", "\n", "for", "metric", "in", "metric_list", ":", "\n", "\n", "            ", "if", "verbose", ":", "\n", "                ", "write_log", "(", "\"Significance test on metric: {}\"", ".", "format", "(", "metric", ")", ",", "log_file", "=", "self", ".", "_log_file", ")", "\n", "\n", "", "list_this", "=", "[", "]", "\n", "list_other", "=", "[", "]", "\n", "\n", "for", "fold_index", "in", "range", "(", "self", ".", "_n_folds", ")", ":", "\n", "\n", "                ", "list_this", ".", "append", "(", "self", ".", "_result_list", "[", "fold_index", "]", "[", "metric", "]", ")", "\n", "list_other", ".", "append", "(", "result_list_other", "[", "fold_index", "]", "[", "metric", "]", ")", "\n", "\n", "", "result_dict", "=", "compute_k_fold_significance", "(", "list_this", ",", "alpha", ",", "list_other", ",", "this_label", "=", "self", ".", "_log_label", ",", "other_label", "=", "other_label", ",", "verbose", "=", "verbose", ",", "log_file", "=", "self", ".", "_log_file", ")", "\n", "# result_dict[\"metric\"] = metric", "\n", "\n", "if", "result_df", "is", "None", ":", "\n", "                ", "df_columns", "=", "[", "\"difference_is_significant_pass\"", ",", "\"difference_is_significant_superior\"", "]", "\n", "df_columns", ".", "extend", "(", "[", "key", "for", "key", "in", "result_dict", ".", "keys", "(", ")", "if", "\"difference\"", "in", "key", "and", "key", "not", "in", "df_columns", "]", ")", "\n", "df_columns", ".", "extend", "(", "[", "key", "for", "key", "in", "result_dict", ".", "keys", "(", ")", "if", "key", "not", "in", "df_columns", "]", ")", "\n", "result_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "df_columns", ",", "index", "=", "metric_list", ")", "\n", "\n", "# result_df = result_df.append(result_dict, ignore_index=True)", "\n", "", "result_df", ".", "loc", "[", "metric", "]", "=", "result_dict", "\n", "\n", "", "if", "dataframe_path", "is", "not", "None", ":", "\n", "            ", "result_df", ".", "to_csv", "(", "dataframe_path", ")", "\n", "\n", "\n", "", "return", "result_df", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.write_log": [[20, 27], ["print", "log_file.write", "log_file.flush"], "function", ["None"], ["def", "write_log", "(", "string", ",", "log_file", "=", "None", ")", ":", "\n", "\n", "    ", "print", "(", "string", ")", "\n", "\n", "if", "log_file", "is", "not", "None", ":", "\n", "        ", "log_file", ".", "write", "(", "string", "+", "\"\\n\"", ")", "\n", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.is_distribution_normal": [[35, 95], ["all", "scipy.stats.shapiro", "len", "scipy.stats.kstest", "float", "float", "traceback.print_exc", "scipy.stats.normaltest", "numpy.mean", "numpy.std", "float", "float", "traceback.print_exc", "float", "float", "traceback.print_exc"], "function", ["None"], ["def", "is_distribution_normal", "(", "data_list", ",", "alpha_input", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Shapiro-Wilk Test of Normality if less than 50 participants; the Kolmogorov-Smirnov Test if equal or more than 50\n    Use the Shapiro-Wilk test first and look at the Kolmogorov Smirnov test afterwards because it is generally more sensitive.\n\n    :param data_list:\n    :param alpha_input:\n    :return:\n    \"\"\"", "\n", "\n", "\"\"\"\n    null hypothesis that the data was drawn from a normal distribution.\n    \n    \"\"\"", "\n", "\n", "result_dict", "=", "{", "}", "\n", "\n", "try", ":", "\n", "        ", "stat", ",", "p_value", "=", "stats", ".", "shapiro", "(", "data_list", ")", "\n", "stat", ",", "p_value", "=", "float", "(", "stat", ")", ",", "float", "(", "p_value", ")", "\n", "result_dict", "[", "\"normal_saphiro_p_value\"", "]", "=", "p_value", "\n", "result_dict", "[", "\"normal_saphiro_pass\"", "]", "=", "p_value", ">=", "alpha_input", "\n", "", "except", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "result_dict", "[", "\"normal_saphiro_p_value\"", "]", "=", "None", "\n", "result_dict", "[", "\"normal_saphiro_pass\"", "]", "=", "None", "\n", "\n", "", "if", "len", "(", "data_list", ")", ">=", "8", ":", "\n", "        ", "try", ":", "\n", "# D\u2019Agostino and Pearson\u2019s test", "\n", "            ", "stat", ",", "p_value", "=", "stats", ".", "normaltest", "(", "data_list", ")", "\n", "stat", ",", "p_value", "=", "float", "(", "stat", ")", ",", "float", "(", "p_value", ")", "\n", "result_dict", "[", "\"normal_dagostino_p_value\"", "]", "=", "p_value", "\n", "result_dict", "[", "\"normal_dagostino_pass\"", "]", "=", "p_value", ">=", "alpha_input", "\n", "", "except", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "# result_dict[\"normal_dagostino_p_value\"] = None", "\n", "# result_dict[\"normal_dagostino_pass\"] = None", "\n", "\n", "\n", "", "", "try", ":", "\n", "# Kolmogorov Smirnov test", "\n", "# Null hypothesis is that the data comes from a normal distribution of given mean and std", "\n", "# KS Test can detect the variance and is more sensitive then others", "\n", "        ", "mean", ",", "std", "=", "np", ".", "mean", "(", "data_list", ")", ",", "np", ".", "std", "(", "data_list", ")", "\n", "stat", ",", "p_value", "=", "stats", ".", "kstest", "(", "data_list", ",", "cdf", "=", "'norm'", ",", "args", "=", "(", "mean", ",", "std", ")", ")", "\n", "stat", ",", "p_value", "=", "float", "(", "stat", ")", ",", "float", "(", "p_value", ")", "\n", "result_dict", "[", "\"normal_kolmogorov_p_value\"", "]", "=", "p_value", "\n", "result_dict", "[", "\"normal_kolmogorov_pass\"", "]", "=", "p_value", ">=", "alpha_input", "\n", "", "except", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "result_dict", "[", "\"normal_kolmogorov_p_value\"", "]", "=", "None", "\n", "result_dict", "[", "\"normal_kolmogorov_pass\"", "]", "=", "None", "\n", "\n", "\n", "", "result_dict", "[", "\"normal_distribution_flag\"", "]", "=", "all", "(", "[", "result_dict", "[", "key", "]", "for", "key", "in", "result_dict", "if", "\"_pass\"", "in", "key", "and", "result_dict", "[", "key", "]", "is", "not", "None", "]", ")", "\n", "\n", "\n", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.compute_k_fold_significance": [[98, 219], ["KFold_SignificanceTest.is_distribution_normal", "KFold_SignificanceTest.is_distribution_normal", "numpy.all", "float", "float", "float", "float", "numpy.all", "numpy.all", "KFold_SignificanceTest.write_log", "isinstance", "isinstance", "len", "len", "len", "len", "numpy.equal", "float", "float", "KFold_SignificanceTest.write_log", "KFold_SignificanceTest.write_log", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.isfinite", "numpy.isfinite", "KFold_SignificanceTest.write_log", "KFold_SignificanceTest.write_log", "KFold_SignificanceTest.write_log", "is_distribution_normal.items", "is_distribution_normal.items", "numpy.zeros_like", "scipy.stats.ttest_rel", "scipy.stats.wilcoxon", "numpy.abs", "numpy.abs", "numpy.mean", "numpy.std", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.logical_not", "numpy.logical_not", "numpy.isfinite", "numpy.isfinite"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.is_distribution_normal", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.KFold_SignificanceTest.is_distribution_normal", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log"], ["", "def", "compute_k_fold_significance", "(", "list_1", ",", "alpha_input", ",", "other_list", ",", "this_label", "=", "None", ",", "other_label", "=", "None", ",", "verbose", "=", "True", ",", "log_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Type 1 Errors: we identify as significant somenthing which is not, due to random chance. Lower alpha values reduce this error rate.\n    Bonferroni correction is VERY conservative and also reduces the true positives rate.\n    http://www.nonlinear.com/support/progenesis/comet/faq/v2.0/pq-values.aspx\n\n\n    https://multithreaded.stitchfix.com/blog/2015/10/15/multiple-hypothesis-testing/\n    https://www.scipy-lectures.org/packages/statistics/index.html\n\n\n    If Data Is Gaussian:\n        Use Parametric Statistical Methods\n    Else:\n        Use Nonparametric Statistical Methods\n\n\n    :param list_1:\n    :param alpha:\n    :param other_lists:\n    :return:\n    \"\"\"", "\n", "\n", "result_dict", "=", "{", "}", "\n", "\n", "this_label", "=", "this_label", "if", "this_label", "is", "not", "None", "else", "\"List 1\"", "\n", "other_label", "=", "other_label", "if", "other_label", "is", "not", "None", "else", "\"List 2\"", "\n", "\n", "result_dict", "[", "this_label", "+", "\" mean\"", "]", ",", "result_dict", "[", "this_label", "+", "\" std\"", "]", "=", "float", "(", "np", ".", "mean", "(", "list_1", ")", ")", ",", "float", "(", "np", ".", "std", "(", "list_1", ")", ")", "\n", "result_dict", "[", "other_label", "+", "\" mean\"", "]", ",", "result_dict", "[", "other_label", "+", "\" std\"", "]", "=", "float", "(", "np", ".", "mean", "(", "other_list", ")", ")", ",", "float", "(", "np", ".", "std", "(", "other_list", ")", ")", "\n", "\n", "format_string", "=", "\"4E\"", "if", "np", ".", "abs", "(", "np", ".", "mean", "(", "list_1", ")", ")", ">", "100", "or", "np", ".", "abs", "(", "np", ".", "mean", "(", "other_list", ")", ")", ">", "100", "else", "\"4f\"", "\n", "\n", "is_all_finite", "=", "np", ".", "all", "(", "np", ".", "isfinite", "(", "list_1", ")", ")", "and", "np", ".", "all", "(", "np", ".", "isfinite", "(", "other_list", ")", ")", "\n", "if", "not", "is_all_finite", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "write_log", "(", "\"{}: has {} non-finite values\"", ".", "format", "(", "this_label", ",", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "np", ".", "isfinite", "(", "list_1", ")", ")", ")", ")", ",", "log_file", "=", "log_file", ")", "\n", "write_log", "(", "\"{}: has {} non-finite values\"", ".", "format", "(", "other_label", ",", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "np", ".", "isfinite", "(", "other_list", ")", ")", ")", ")", ",", "log_file", "=", "log_file", ")", "\n", "write_log", "(", "\"Skipping test due to non-finite values\\n\"", ",", "log_file", "=", "log_file", ")", "\n", "return", "result_dict", "\n", "\n", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "write_log", "(", "\"{}: {:.{format_string}} \u00b1 {:.{format_string}}\"", ".", "format", "(", "this_label", ",", "np", ".", "mean", "(", "list_1", ")", ",", "np", ".", "std", "(", "list_1", ")", ",", "format_string", "=", "format_string", ")", ",", "log_file", "=", "log_file", ")", "\n", "#", "\n", "# if len(other_lists) > 1:", "\n", "#     alpha_threshold = alpha_input/len(other_lists)", "\n", "#     if verbose:", "\n", "#         write_log(\"Applying Bonferroni correction for {} lists, original alpha is {}, corrected alpha is {}\".format(len(other_lists), alpha_input, alpha_threshold), log_file=log_file)", "\n", "\n", "", "assert", "isinstance", "(", "other_list", ",", "list", ")", "or", "isinstance", "(", "other_list", ",", "np", ".", "ndarray", ")", ",", "\"The provided lists must be either Python lists or numpy.ndarray\"", "\n", "assert", "len", "(", "list_1", ")", "==", "len", "(", "other_list", ")", ",", "\"The provided lists have different length, list 1: {}, list 2: {}\"", ".", "format", "(", "len", "(", "list_1", ")", ",", "len", "(", "other_list", ")", ")", "\n", "\n", "###", "\n", "### Check normal distribution", "\n", "###", "\n", "normal_result_dict_1", "=", "is_distribution_normal", "(", "list_1", ",", "alpha_input", ")", "\n", "normal_result_dict_1", "=", "{", "\"{} {}\"", ".", "format", "(", "this_label", ",", "key", ")", ":", "value", "for", "(", "key", ",", "value", ")", "in", "normal_result_dict_1", ".", "items", "(", ")", "}", "\n", "result_dict", "=", "{", "**", "result_dict", ",", "**", "normal_result_dict_1", "}", "\n", "\n", "normal_result_dict_other", "=", "is_distribution_normal", "(", "other_list", ",", "alpha_input", ")", "\n", "normal_result_dict_other", "=", "{", "\"{} {}\"", ".", "format", "(", "other_label", ",", "key", ")", ":", "value", "for", "(", "key", ",", "value", ")", "in", "normal_result_dict_other", ".", "items", "(", ")", "}", "\n", "result_dict", "=", "{", "**", "result_dict", ",", "**", "normal_result_dict_other", "}", "\n", "\n", "###", "\n", "### If normal, paired t-test, if not Wilcoxon Signed Rank Test", "\n", "###", "\n", "is_normal", "=", "result_dict", "[", "this_label", "+", "\" normal_distribution_flag\"", "]", "and", "result_dict", "[", "other_label", "+", "\" normal_distribution_flag\"", "]", "\n", "\n", "###", "\n", "### Check if list are equals", "\n", "###", "\n", "if", "np", ".", "all", "(", "np", ".", "equal", "(", "np", ".", "zeros_like", "(", "list_1", ")", ",", "np", ".", "array", "(", "list_1", ")", "-", "np", ".", "array", "(", "other_list", ")", ")", ")", ":", "\n", "        ", "result_dict", "[", "\"difference_is_significant_test\"", "]", "=", "\"Lists are equal\"", "\n", "statistic", ",", "p_value", "=", "np", ".", "nan", ",", "np", ".", "nan", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "if", "is_normal", ":", "\n", "# Test difference between two observations of the same \"individual\" or data with a paired test", "\n", "# Equivalent to test whether (list_1 - other_list) has an average of 0", "\n", "            ", "statistic", ",", "p_value", "=", "stats", ".", "ttest_rel", "(", "list_1", ",", "other_list", ")", "\n", "result_dict", "[", "\"difference_is_significant_test\"", "]", "=", "\"Paired t-test\"", "\n", "", "else", ":", "\n", "            ", "statistic", ",", "p_value", "=", "stats", ".", "wilcoxon", "(", "list_1", ",", "other_list", ")", "\n", "result_dict", "[", "\"difference_is_significant_test\"", "]", "=", "\"Wilcoxon signed-rank\"", "\n", "\n", "\n", "", "", "statistic", ",", "p_value", "=", "float", "(", "statistic", ")", ",", "float", "(", "p_value", ")", "\n", "result_dict", "[", "\"difference_is_significant_statistic\"", "]", "=", "statistic", "\n", "result_dict", "[", "\"difference_is_significant_p_value\"", "]", "=", "p_value", "\n", "\n", "# Value is significant only if p_value allows", "\n", "is_significant", "=", "p_value", "<", "alpha_input", "\n", "result_dict", "[", "\"difference_is_significant_pass\"", "]", "=", "is_significant", "\n", "\n", "if", "is_significant", ":", "\n", "        ", "result_dict", "[", "\"difference_is_significant_superior\"", "]", "=", "this_label", "if", "np", ".", "mean", "(", "list_1", ")", ">", "np", ".", "mean", "(", "other_list", ")", "else", "other_label", "\n", "", "else", ":", "\n", "        ", "result_dict", "[", "\"difference_is_significant_superior\"", "]", "=", "None", "\n", "\n", "\n", "\n", "", "if", "verbose", ":", "\n", "\n", "        ", "write_log", "(", "\"{}: {:.{format_string}} \u00b1 {:.{format_string}}\"", ".", "format", "(", "other_label", ",", "np", ".", "mean", "(", "other_list", ")", ",", "np", ".", "std", "(", "other_list", ")", ",", "format_string", "=", "format_string", ")", ",", "\n", "log_file", "=", "log_file", ")", "\n", "\n", "write_log", "(", "\"{}, using {}: statistic {:.4f}, p_value: {:.4f}, alpha: {:.4f}. {} {}\\n\"", ".", "format", "(", "\n", "\"IS normal\"", "if", "is_normal", "else", "\"NOT normal\"", ",", "\n", "result_dict", "[", "\"difference_is_significant_test\"", "]", ",", "\n", "statistic", ",", "\n", "p_value", ",", "\n", "alpha_input", ",", "\n", "\"IS significant.\"", "if", "result_dict", "[", "\"difference_is_significant_pass\"", "]", "else", "\"NOT significant.\"", ",", "\n", "\"Higher is {}.\"", ".", "format", "(", "result_dict", "[", "\"difference_is_significant_superior\"", "]", ")", "if", "result_dict", "[", "\"difference_is_significant_superior\"", "]", "is", "not", "None", "else", "\"\"", ")", ",", "\n", "log_file", "=", "log_file", ")", "\n", "\n", "\n", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.split_big_CSR_in_columns": [[17, 52], ["int", "range", "print", "sparse_matrix_split_list.append"], "function", ["None"], ["def", "split_big_CSR_in_columns", "(", "sparse_matrix_to_split", ",", "num_split", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    The function returns a list of split for the given matrix\n    :param sparse_matrix_to_split:\n    :param num_split:\n    :return:\n    \"\"\"", "\n", "\n", "assert", "sparse_matrix_to_split", ".", "shape", "[", "1", "]", ">", "0", ",", "\"split_big_CSR_in_columns: sparse_matrix_to_split has no columns\"", "\n", "assert", "num_split", ">=", "1", "and", "num_split", "<=", "sparse_matrix_to_split", ".", "shape", "[", "1", "]", ",", "\"split_big_CSR_in_columns: num_split parameter not valid, value must be between 1 and {}, provided was {}\"", ".", "format", "(", "sparse_matrix_to_split", ".", "shape", "[", "1", "]", ",", "num_split", ")", "\n", "\n", "\n", "if", "num_split", "==", "1", ":", "\n", "        ", "return", "[", "sparse_matrix_to_split", "]", "\n", "\n", "\n", "\n", "", "n_column_split", "=", "int", "(", "sparse_matrix_to_split", ".", "shape", "[", "1", "]", "/", "num_split", ")", "\n", "\n", "sparse_matrix_split_list", "=", "[", "]", "\n", "\n", "for", "num_current_split", "in", "range", "(", "num_split", ")", ":", "\n", "\n", "        ", "start_col", "=", "n_column_split", "*", "num_current_split", "\n", "\n", "if", "num_current_split", "+", "1", "==", "num_split", ":", "\n", "            ", "end_col", "=", "sparse_matrix_to_split", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "end_col", "=", "n_column_split", "*", "(", "num_current_split", "+", "1", ")", "\n", "\n", "", "print", "(", "\"split_big_CSR_in_columns: Split {}, columns: {}-{}\"", ".", "format", "(", "num_current_split", ",", "start_col", ",", "end_col", ")", ")", "\n", "\n", "sparse_matrix_split_list", ".", "append", "(", "sparse_matrix_to_split", "[", ":", ",", "start_col", ":", "end_col", "]", ")", "\n", "\n", "", "return", "sparse_matrix_split_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.remove_empty_rows_and_cols": [[61, 87], ["recsys.Base.Recommender_utils.check_matrix", "numpy.ediff1d", "numpy.ediff1d", "recsys.Base.Recommender_utils.check_matrix.tocsc", "numpy.arange", "numpy.arange", "recsys.Base.Recommender_utils.check_matrix.tocsr", "len", "numpy.logical_not", "len", "numpy.logical_not", "recsys.Base.Recommender_utils.check_matrix.tocsr", "ICM.tocsr"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "def", "remove_empty_rows_and_cols", "(", "URM", ",", "ICM", "=", "None", ")", ":", "\n", "\n", "    ", "URM", "=", "check_matrix", "(", "URM", ",", "\"csr\"", ")", "\n", "rows", "=", "URM", ".", "indptr", "\n", "numRatings", "=", "np", ".", "ediff1d", "(", "rows", ")", "\n", "user_mask", "=", "numRatings", ">=", "1", "\n", "\n", "URM", "=", "URM", "[", "user_mask", ",", ":", "]", "\n", "\n", "cols", "=", "URM", ".", "tocsc", "(", ")", ".", "indptr", "\n", "numRatings", "=", "np", ".", "ediff1d", "(", "cols", ")", "\n", "item_mask", "=", "numRatings", ">=", "1", "\n", "\n", "URM", "=", "URM", "[", ":", ",", "item_mask", "]", "\n", "\n", "removedUsers", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "user_mask", ")", ")", "[", "np", ".", "logical_not", "(", "user_mask", ")", "]", "\n", "removedItems", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "item_mask", ")", ")", "[", "np", ".", "logical_not", "(", "item_mask", ")", "]", "\n", "\n", "if", "ICM", "is", "not", "None", ":", "\n", "\n", "        ", "ICM", "=", "ICM", "[", "item_mask", ",", ":", "]", "\n", "\n", "return", "URM", ".", "tocsr", "(", ")", ",", "ICM", ".", "tocsr", "(", ")", ",", "removedUsers", ",", "removedItems", "\n", "\n", "\n", "", "return", "URM", ".", "tocsr", "(", ")", ",", "removedUsers", ",", "removedItems", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.load_CSV_into_SparseBuilder": [[96, 171], ["recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "pandas.read_csv", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "len", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_column_token_to_id_mapper", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_row_token_to_id_mapper", "pd.read_csv.drop_duplicates", "pd.read_csv.sort_values", "pd.read_csv.drop_duplicates", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_column_token_to_id_mapper", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_row_token_to_id_mapper", "len", "len"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper"], ["def", "load_CSV_into_SparseBuilder", "(", "filePath", ",", "header", "=", "False", ",", "separator", "=", "\"::\"", ",", "timestamp", "=", "False", ",", "remove_duplicates", "=", "False", ",", "\n", "custom_user_item_rating_columns", "=", "None", ")", ":", "\n", "\n", "    ", "URM_all_builder", "=", "IncrementalSparseMatrix", "(", "auto_create_col_mapper", "=", "True", ",", "auto_create_row_mapper", "=", "True", ")", "\n", "URM_timestamp_builder", "=", "IncrementalSparseMatrix", "(", "auto_create_col_mapper", "=", "True", ",", "auto_create_row_mapper", "=", "True", ")", "\n", "\n", "if", "timestamp", ":", "\n", "        ", "dtype", "=", "{", "0", ":", "str", ",", "1", ":", "str", ",", "2", ":", "float", ",", "3", ":", "float", "}", "\n", "columns", "=", "[", "'userId'", ",", "'itemId'", ",", "'interaction'", ",", "'timestamp'", "]", "\n", "\n", "", "else", ":", "\n", "        ", "dtype", "=", "{", "0", ":", "str", ",", "1", ":", "str", ",", "2", ":", "float", "}", "\n", "columns", "=", "[", "'userId'", ",", "'itemId'", ",", "'interaction'", "]", "\n", "\n", "", "df_original", "=", "pd", ".", "read_csv", "(", "filepath_or_buffer", "=", "filePath", ",", "sep", "=", "separator", ",", "header", "=", "0", "if", "header", "else", "None", ",", "\n", "dtype", "=", "dtype", ",", "usecols", "=", "custom_user_item_rating_columns", ")", "\n", "\n", "# If the original file has more columns, keep them but ignore them", "\n", "df_original", ".", "columns", "=", "columns", "\n", "\n", "\n", "user_id_list", "=", "df_original", "[", "'userId'", "]", ".", "values", "\n", "item_id_list", "=", "df_original", "[", "'itemId'", "]", ".", "values", "\n", "interaction_list", "=", "df_original", "[", "'interaction'", "]", ".", "values", "\n", "\n", "# Check if duplicates exist", "\n", "num_unique_user_item_ids", "=", "df_original", ".", "drop_duplicates", "(", "[", "'userId'", ",", "'itemId'", "]", ",", "keep", "=", "'first'", ",", "inplace", "=", "False", ")", ".", "shape", "[", "0", "]", "\n", "contains_duplicates_flag", "=", "num_unique_user_item_ids", "!=", "len", "(", "user_id_list", ")", "\n", "\n", "if", "contains_duplicates_flag", ":", "\n", "        ", "if", "remove_duplicates", ":", "\n", "# # Remove duplicates.", "\n", "\n", "# This way of removing the duplicates keeping the last tiemstamp without removing other columns", "\n", "# would be the simplest, but it is so slow to the point of being unusable on any dataset but ML100k", "\n", "# idxs = df_original.groupby(by=['userId', 'itemId'], as_index=False)[\"timestamp\"].idxmax()", "\n", "# df_original = df_original.loc[idxs]", "\n", "\n", "# Alternative faster way:", "\n", "# 1 - Sort in ascending order so that the last (bigger) timestamp is in the last position. Set Nan to be in the first position, to remove them if possible", "\n", "# 2 - Then remove duplicates for user-item keeping the last row, which will be the last timestamp.", "\n", "\n", "            ", "if", "timestamp", ":", "\n", "                ", "sort_by", "=", "[", "\"userId\"", ",", "\"itemId\"", ",", "\"timestamp\"", "]", "\n", "", "else", ":", "\n", "                ", "sort_by", "=", "[", "\"userId\"", ",", "\"itemId\"", ",", "'interaction'", "]", "\n", "\n", "", "df_original", ".", "sort_values", "(", "by", "=", "sort_by", ",", "ascending", "=", "True", ",", "inplace", "=", "True", ",", "kind", "=", "\"quicksort\"", ",", "na_position", "=", "\"first\"", ")", "\n", "df_original", ".", "drop_duplicates", "(", "[", "\"userId\"", ",", "\"itemId\"", "]", ",", "keep", "=", "'last'", ",", "inplace", "=", "True", ")", "\n", "\n", "user_id_list", "=", "df_original", "[", "'userId'", "]", ".", "values", "\n", "item_id_list", "=", "df_original", "[", "'itemId'", "]", ".", "values", "\n", "interaction_list", "=", "df_original", "[", "'interaction'", "]", ".", "values", "\n", "\n", "assert", "num_unique_user_item_ids", "==", "len", "(", "user_id_list", ")", ",", "\"load_CSV_into_SparseBuilder: duplicate (user, item) values found\"", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "num_unique_user_item_ids", "==", "len", "(", "user_id_list", ")", ",", "\"load_CSV_into_SparseBuilder: duplicate (user, item) values found\"", "\n", "\n", "\n", "\n", "\n", "", "", "URM_all_builder", ".", "add_data_lists", "(", "user_id_list", ",", "item_id_list", ",", "interaction_list", ")", "\n", "\n", "if", "timestamp", ":", "\n", "        ", "timestamp_list", "=", "df_original", "[", "'timestamp'", "]", ".", "values", "\n", "URM_timestamp_builder", ".", "add_data_lists", "(", "user_id_list", ",", "item_id_list", ",", "timestamp_list", ")", "\n", "\n", "return", "URM_all_builder", ".", "get_SparseMatrix", "(", ")", ",", "URM_timestamp_builder", ".", "get_SparseMatrix", "(", ")", ",", "URM_all_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "URM_all_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n", "\n", "\n", "", "return", "URM_all_builder", ".", "get_SparseMatrix", "(", ")", ",", "URM_all_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "URM_all_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.merge_ICM": [[177, 187], ["scipy.hstack", "mapper_ICM1.copy", "mapper_ICM2.keys", "len"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "merge_ICM", "(", "ICM1", ",", "ICM2", ",", "mapper_ICM1", ",", "mapper_ICM2", ")", ":", "\n", "\n", "    ", "ICM_all", "=", "sps", ".", "hstack", "(", "[", "ICM1", ",", "ICM2", "]", ",", "format", "=", "'csr'", ")", "\n", "\n", "mapper_ICM_all", "=", "mapper_ICM1", ".", "copy", "(", ")", "\n", "\n", "for", "key", "in", "mapper_ICM2", ".", "keys", "(", ")", ":", "\n", "        ", "mapper_ICM_all", "[", "key", "]", "=", "mapper_ICM2", "[", "key", "]", "+", "len", "(", "mapper_ICM1", ")", "\n", "\n", "", "return", "ICM_all", ",", "mapper_ICM_all", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density": [[190, 204], ["float", "float"], "function", ["None"], ["", "def", "compute_density", "(", "URM", ")", ":", "\n", "\n", "    ", "n_users", ",", "n_items", "=", "URM", ".", "shape", "\n", "n_interactions", "=", "URM", ".", "nnz", "\n", "\n", "# This avoids the fixed bit representation of numpy preventing", "\n", "# an overflow when computing the product", "\n", "n_items", "=", "float", "(", "n_items", ")", "\n", "n_users", "=", "float", "(", "n_users", ")", "\n", "\n", "if", "n_interactions", "==", "0", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "return", "n_interactions", "/", "(", "n_items", "*", "n_users", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.remove_features": [[208, 246], ["recsys.Base.Recommender_utils.check_matrix", "numpy.ediff1d", "numpy.logical_and", "print", "numpy.arange", "DataReader_utils.reconcile_mapper_with_removed_tokens", "len", "numpy.logical_not", "sum", "sum", "int"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens"], ["", "def", "remove_features", "(", "ICM", ",", "min_occurrence", "=", "5", ",", "max_percentage_occurrence", "=", "0.30", ",", "reconcile_mapper", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    The function eliminates the values associated to feature occurring in less than the minimal percentage of items\n    or more then the max. Shape of ICM is reduced deleting features.\n    :param ICM:\n    :param minPercOccurrence:\n    :param max_percentage_occurrence:\n    :param reconcile_mapper: DICT mapper [token] -> index\n    :return: ICM\n    :return: deletedFeatures\n    :return: DICT mapper [token] -> index\n    \"\"\"", "\n", "\n", "ICM", "=", "check_matrix", "(", "ICM", ",", "'csc'", ")", "\n", "\n", "n_items", "=", "ICM", ".", "shape", "[", "0", "]", "\n", "\n", "cols", "=", "ICM", ".", "indptr", "\n", "numOccurrences", "=", "np", ".", "ediff1d", "(", "cols", ")", "\n", "\n", "feature_mask", "=", "np", ".", "logical_and", "(", "numOccurrences", ">=", "min_occurrence", ",", "numOccurrences", "<=", "n_items", "*", "max_percentage_occurrence", ")", "\n", "\n", "ICM", "=", "ICM", "[", ":", ",", "feature_mask", "]", "\n", "\n", "deletedFeatures", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "feature_mask", ")", ")", "[", "np", ".", "logical_not", "(", "feature_mask", ")", "]", "\n", "\n", "print", "(", "\"RemoveFeatures: removed {} features with less then {} occurrences, removed {} features with more than {} occurrencies\"", ".", "format", "(", "\n", "sum", "(", "numOccurrences", "<", "min_occurrence", ")", ",", "min_occurrence", ",", "\n", "sum", "(", "numOccurrences", ">", "n_items", "*", "max_percentage_occurrence", ")", ",", "int", "(", "n_items", "*", "max_percentage_occurrence", ")", "\n", ")", ")", "\n", "\n", "if", "reconcile_mapper", "is", "not", "None", ":", "\n", "        ", "reconcile_mapper", "=", "reconcile_mapper_with_removed_tokens", "(", "reconcile_mapper", ",", "deletedFeatures", ")", "\n", "\n", "return", "ICM", ",", "deletedFeatures", ",", "reconcile_mapper", "\n", "\n", "\n", "", "return", "ICM", ",", "deletedFeatures", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens": [[249, 308], ["DataReader_utils.invert_dictionary", "key_to_value_dict.items", "numpy.isfinite", "numpy.cumsum", "key_to_value_dict.items", "len", "len", "numpy.ones", "set", "key_to_value_dict.values", "max", "key_to_value_dict.values"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.invert_dictionary"], ["", "def", "reconcile_mapper_with_removed_tokens", "(", "key_to_value_dict", ",", "values_to_remove", ")", ":", "\n", "    ", "\"\"\"\n\n    :param mapper_dict: must be a mapper of [token] -> index\n    :param indices_to_remove:\n    :return:\n    \"\"\"", "\n", "\n", "# When an index has to be removed:", "\n", "# - Delete the corresponding key", "\n", "# - Decrement all greater indices", "\n", "\n", "# Get all values of the mapper into an array to speed-up the decrementing process", "\n", "# We need a 1-to-1 association between the mapper key and the array position", "\n", "\n", "# Assumptions: in dictionary mapper_dict there is a 1-to-1 association to an index", "\n", "assert", "len", "(", "set", "(", "key_to_value_dict", ".", "values", "(", ")", ")", ")", "==", "len", "(", "key_to_value_dict", ")", ",", "\"mapper_dict values do not have a 1-to-1 correspondance with the key\"", "\n", "\n", "# The value is an index, so we can use it to be both the value and the index of an array.", "\n", "# We do not assume values to be contiguous, the missing ones will be -np.inf", "\n", "mapper_values_array", "=", "np", ".", "ones", "(", "max", "(", "key_to_value_dict", ".", "values", "(", ")", ")", "+", "1", ",", "dtype", "=", "np", ".", "int", ")", "*", "-", "np", ".", "inf", "\n", "\n", "value_to_key", "=", "invert_dictionary", "(", "key_to_value_dict", ")", "\n", "\n", "\n", "# Set all old indices", "\n", "for", "key", ",", "old_index", "in", "key_to_value_dict", ".", "items", "(", ")", ":", "\n", "        ", "mapper_values_array", "[", "old_index", "]", "=", "old_index", "\n", "\n", "\n", "# Set to -np.inf all indices to be removed", "\n", "# Remove keys in original dictionary", "\n", "", "for", "value_to_remove", "in", "values_to_remove", ":", "\n", "\n", "        ", "mapper_values_array", "[", "value_to_remove", "]", "=", "-", "np", ".", "inf", "\n", "\n", "assert", "value_to_remove", "in", "value_to_key", ",", "\"Value to be removed from dictionary is not in dictionary\"", "\n", "\n", "key_to_remove", "=", "value_to_key", "[", "value_to_remove", "]", "\n", "\n", "del", "key_to_value_dict", "[", "key_to_remove", "]", "\n", "\n", "\n", "# To update the indices, start from 0 and allocate the index n to the n-th finite value in mapper_values_array", "\n", "# Use cumulative sum, each cell is equals to the number of finite (e.g. valid) cells before", "\n", "# Ensure the first index is 0 and not 1", "\n", "", "mapper_values_array_finite", "=", "np", ".", "isfinite", "(", "mapper_values_array", ")", "\n", "\n", "mapper_values_array_new_indices", "=", "np", ".", "cumsum", "(", "mapper_values_array_finite", ")", "\n", "mapper_values_array_new_indices", "-=", "1", "\n", "\n", "# Replace old value with new", "\n", "for", "key", ",", "old_index", "in", "key_to_value_dict", ".", "items", "(", ")", ":", "\n", "\n", "        ", "new_index", "=", "mapper_values_array_new_indices", "[", "old_index", "]", "\n", "key_to_value_dict", "[", "key", "]", "=", "new_index", "\n", "\n", "\n", "", "return", "key_to_value_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.download_from_URL": [[312, 338], ["print", "print", "sys.stdout.write", "sys.stdout.flush", "os.path.exists", "os.makedirs", "urlretrieve", "print"], "function", ["None"], ["", "def", "download_from_URL", "(", "URL", ",", "folder_path", ",", "file_name", ")", ":", "\n", "\n", "    ", "import", "urllib", "\n", "from", "urllib", ".", "request", "import", "urlretrieve", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "print", "(", "\"Downloading: {}\"", ".", "format", "(", "URL", ")", ")", "\n", "print", "(", "\"In folder: {}\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "try", ":", "\n", "\n", "        ", "urlretrieve", "(", "URL", ",", "folder_path", "+", "file_name", ",", "reporthook", "=", "urllretrieve_reporthook", ")", "\n", "\n", "", "except", "urllib", ".", "request", ".", "URLError", "as", "urlerror", ":", "\n", "\n", "        ", "print", "(", "\"Unable to complete automatic download, network error\"", ")", "\n", "raise", "urlerror", "\n", "\n", "\n", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.urllretrieve_reporthook": [[346, 367], ["int", "int", "min", "sys.stdout.write", "sys.stdout.flush", "time.time", "float", "numpy.isfinite", "time.time"], "function", ["None"], ["", "def", "urllretrieve_reporthook", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "\n", "    ", "global", "start_time_urllretrieve", "\n", "\n", "if", "count", "==", "0", ":", "\n", "        ", "start_time_urllretrieve", "=", "time", ".", "time", "(", ")", "\n", "return", "\n", "\n", "", "if", "total_size", "<", "0", "or", "not", "np", ".", "isfinite", "(", "total_size", ")", ":", "\n", "        ", "total_size", "=", "np", ".", "nan", "\n", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time_urllretrieve", "+", "1", "\n", "\n", "progress_size", "=", "int", "(", "count", "*", "block_size", ")", "\n", "speed", "=", "int", "(", "progress_size", "/", "(", "1024", "*", "duration", ")", ")", "\n", "percent", "=", "min", "(", "float", "(", "count", "*", "block_size", "*", "100", "/", "total_size", ")", ",", "100", ")", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\rDataReader: Downloaded {:.2f}%, {:.2f} MB, {:.0f} KB/s, {:.0f} seconds passed\"", ".", "format", "(", "\n", "percent", ",", "progress_size", "/", "(", "1024", "*", "1024", ")", ",", "speed", ",", "duration", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.invert_dictionary": [[373, 384], ["id_to_index.keys"], "function", ["None"], ["", "def", "invert_dictionary", "(", "id_to_index", ")", ":", "\n", "\n", "    ", "index_to_id", "=", "{", "}", "\n", "\n", "for", "id", "in", "id_to_index", ".", "keys", "(", ")", ":", "\n", "        ", "index", "=", "id_to_index", "[", "id", "]", "\n", "\n", "assert", "index", "not", "in", "index_to_id", ",", "\"Dictionary is not invertible as it contains duplicate values.\"", "\n", "index_to_id", "[", "index", "]", "=", "id", "\n", "\n", "", "return", "index_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.add_boolean_matrix_iterator": [[389, 404], ["original_data_dict.items", "matrix_object.copy", "matrix_object.copy.astype", "numpy.ones_like", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "add_boolean_matrix_iterator", "(", "original_data_dict", ")", ":", "\n", "\n", "    ", "output_data_dict", "=", "{", "}", "\n", "\n", "for", "matrix_name", ",", "matrix_object", "in", "original_data_dict", ".", "items", "(", ")", ":", "\n", "        ", "output_data_dict", "[", "matrix_name", "]", "=", "matrix_object", "\n", "\n", "if", "np", ".", "max", "(", "matrix_object", ".", "data", ")", "!=", "1.0", "or", "np", ".", "min", "(", "matrix_object", ".", "data", ")", "!=", "1.0", ":", "\n", "            ", "matrix_object_implicit", "=", "matrix_object", ".", "copy", "(", ")", "\n", "matrix_object_implicit", ".", "astype", "(", "np", ".", "bool", ",", "copy", "=", "True", ")", "\n", "matrix_object_implicit", ".", "data", "=", "np", ".", "ones_like", "(", "matrix_object", ".", "data", ")", "\n", "\n", "output_data_dict", "[", "matrix_name", "+", "\"_bool\"", "]", "=", "matrix_object_implicit", "\n", "\n", "", "", "return", "output_data_dict", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_K_Cores.DataPostprocessing_K_Cores.__init__": [[25, 33], ["recsys.Data_manager.DataPostprocessing.DataPostprocessing.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "dataReader_object", ",", "k_cores_value", ")", ":", "\n", "\n", "        ", "assert", "k_cores_value", ">=", "1", ",", "\"DataReaderPostprocessing_K_Cores: k_cores_value must be a positive value >= 1, provided value was {}\"", ".", "format", "(", "k_cores_value", ")", "\n", "\n", "super", "(", "DataPostprocessing_K_Cores", ",", "self", ")", ".", "__init__", "(", "dataReader_object", ")", "\n", "\n", "self", ".", "k_cores_value", "=", "k_cores_value", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_K_Cores.DataPostprocessing_K_Cores._get_dataset_name_data_subfolder": [[36, 54], ["DataPostprocessing_K_Cores.DataPostprocessing_K_Cores.dataReader_object._get_dataset_name_data_subfolder"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._get_dataset_name_data_subfolder"], ["", "def", "_get_dataset_name_data_subfolder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the subfolder inside the dataset folder tree which contains the specific data to be loaded\n        This method must be overridden by any data post processing object like k-cores / user sampling / interaction sampling etc\n        to be applied before the data split\n\n        :return: original or k_cores etc...\n        \"\"\"", "\n", "\n", "subfolder_name", "=", "\"{}_cores/\"", ".", "format", "(", "self", ".", "k_cores_value", ")", "\n", "\n", "inner_subfolder_name", "=", "self", ".", "dataReader_object", ".", "_get_dataset_name_data_subfolder", "(", ")", "\n", "\n", "# Avoid concatenating the original/ part", "\n", "if", "inner_subfolder_name", "!=", "self", ".", "DATASET_SUBFOLDER_ORIGINAL", ":", "\n", "            ", "subfolder_name", "+=", "inner_subfolder_name", "\n", "\n", "", "return", "subfolder_name", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_K_Cores.DataPostprocessing_K_Cores._load_from_original_file": [[57, 72], ["DataPostprocessing_K_Cores.DataPostprocessing_K_Cores.dataReader_object.load_data", "DataPostprocessing_K_Cores.select_k_cores", "DataPostprocessing_K_Cores.DataPostprocessing_K_Cores._remove_items_and_users"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_K_Cores.select_k_cores", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset._remove_items_and_users"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        _load_from_original_file will call the load of the dataset and then apply on it the k-cores\n        :return:\n        \"\"\"", "\n", "\n", "loaded_dataset", "=", "self", ".", "dataReader_object", ".", "load_data", "(", ")", "\n", "URM_all", "=", "loaded_dataset", ".", "AVAILABLE_URM", "[", "\"URM_all\"", "]", "\n", "\n", "# Apply required K - core on zero-core data from ORIGINAL split", "\n", "_", ",", "users_to_remove", ",", "items_to_remove", "=", "select_k_cores", "(", "URM_all", ",", "k_value", "=", "self", ".", "k_cores_value", ")", "\n", "\n", "loaded_dataset", ".", "_remove_items_and_users", "(", "items_to_remove", "=", "items_to_remove", ",", "users_to_remove", "=", "users_to_remove", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_K_Cores.select_k_cores": [[74, 177], ["print", "recsys.Base.Recommender_utils.check_matrix.eliminate_zeros", "set", "set", "print", "print", "recsys.Base.Recommender_utils.check_matrix.eliminate_zeros", "recsys.Base.Recommender_utils.check_matrix", "numpy.ediff1d", "recsys.Base.Recommender_utils.check_matrix", "numpy.ediff1d", "recsys.Data_manager.DataReader_utils.remove_empty_rows_and_cols", "recsys.Base.Recommender_utils.check_matrix.copy", "numpy.array", "numpy.array", "numpy.any", "range", "recsys.Base.Recommender_utils.check_matrix.eliminate_zeros", "numpy.any", "range", "recsys.Base.Recommender_utils.check_matrix.eliminate_zeros", "recsys.Base.Recommender_utils.check_matrix.data.sum", "print", "print", "list", "list", "numpy.array", "numpy.array", "list", "set.add", "list", "set.add", "len", "len", "sum", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.remove_empty_rows_and_cols", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "select_k_cores", "(", "URM", ",", "k_value", "=", "5", ",", "reshape", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param URM:\n    :param k_value:\n    :param reshape:\n    :return: URM, removedUsers, removedItems\n    \"\"\"", "\n", "\n", "print", "(", "\"DataDenseSplit_K_Cores: k-cores extraction will zero out some users and items without changing URM shape\"", ")", "\n", "\n", "URM", ".", "eliminate_zeros", "(", ")", "\n", "\n", "n_users", "=", "URM", ".", "shape", "[", "0", "]", "\n", "n_items", "=", "URM", ".", "shape", "[", "1", "]", "\n", "\n", "removed_users", "=", "set", "(", ")", "\n", "removed_items", "=", "set", "(", ")", "\n", "\n", "print", "(", "\"DataDenseSplit_K_Cores: Initial URM desity is {:.2E}\"", ".", "format", "(", "URM", ".", "nnz", "/", "(", "n_users", "*", "n_items", ")", ")", ")", "\n", "\n", "convergence", "=", "False", "\n", "numIterations", "=", "0", "\n", "\n", "while", "not", "convergence", ":", "\n", "\n", "        ", "convergence_user", "=", "False", "\n", "\n", "URM", "=", "check_matrix", "(", "URM", ",", "'csr'", ")", "\n", "\n", "user_degree", "=", "np", ".", "ediff1d", "(", "URM", ".", "indptr", ")", "\n", "\n", "to_be_removed", "=", "user_degree", "<", "k_value", "\n", "to_be_removed", "[", "np", ".", "array", "(", "list", "(", "removed_users", ")", ",", "dtype", "=", "np", ".", "int", ")", "]", "=", "False", "\n", "\n", "if", "not", "np", ".", "any", "(", "to_be_removed", ")", ":", "\n", "            ", "convergence_user", "=", "True", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "for", "user", "in", "range", "(", "n_users", ")", ":", "\n", "\n", "                ", "if", "to_be_removed", "[", "user", "]", "and", "user", "not", "in", "removed_users", ":", "\n", "                    ", "URM", ".", "data", "[", "URM", ".", "indptr", "[", "user", "]", ":", "URM", ".", "indptr", "[", "user", "+", "1", "]", "]", "=", "0", "\n", "removed_users", ".", "add", "(", "user", ")", "\n", "\n", "", "", "URM", ".", "eliminate_zeros", "(", ")", "\n", "\n", "\n", "\n", "", "convergence_item", "=", "False", "\n", "\n", "URM", "=", "check_matrix", "(", "URM", ",", "'csc'", ")", "\n", "\n", "items_degree", "=", "np", ".", "ediff1d", "(", "URM", ".", "indptr", ")", "\n", "\n", "to_be_removed", "=", "items_degree", "<", "k_value", "\n", "to_be_removed", "[", "np", ".", "array", "(", "list", "(", "removed_items", ")", ",", "dtype", "=", "np", ".", "int", ")", "]", "=", "False", "\n", "\n", "if", "not", "np", ".", "any", "(", "to_be_removed", ")", ":", "\n", "            ", "convergence_item", "=", "True", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "for", "item", "in", "range", "(", "n_items", ")", ":", "\n", "\n", "                ", "if", "to_be_removed", "[", "item", "]", "and", "item", "not", "in", "removed_items", ":", "\n", "                    ", "URM", ".", "data", "[", "URM", ".", "indptr", "[", "item", "]", ":", "URM", ".", "indptr", "[", "item", "+", "1", "]", "]", "=", "0", "\n", "removed_items", ".", "add", "(", "item", ")", "\n", "\n", "", "", "URM", ".", "eliminate_zeros", "(", ")", "\n", "\n", "\n", "\n", "\n", "", "numIterations", "+=", "1", "\n", "convergence", "=", "convergence_item", "and", "convergence_user", "\n", "\n", "\n", "if", "URM", ".", "data", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "convergence", "=", "True", "\n", "print", "(", "\"DataDenseSplit_K_Cores: WARNING on iteration {}. URM is empty.\"", ".", "format", "(", "numIterations", ")", ")", "\n", "\n", "", "else", ":", "\n", "             ", "print", "(", "\"DataDenseSplit_K_Cores: Iteration {}. URM desity without zeroed-out nodes is {:.2E}.\\n\"", "\n", "\"Users with less than {} interactions are {} ( {:.2f}%), Items are {} ( {:.2f}%)\"", ".", "format", "(", "\n", "numIterations", ",", "\n", "sum", "(", "URM", ".", "data", ")", "/", "(", "(", "n_users", "-", "len", "(", "removed_users", ")", ")", "*", "(", "n_items", "-", "len", "(", "removed_items", ")", ")", ")", ",", "\n", "k_value", ",", "\n", "len", "(", "removed_users", ")", ",", "len", "(", "removed_users", ")", "/", "n_users", "*", "100", ",", "\n", "len", "(", "removed_items", ")", ",", "len", "(", "removed_items", ")", "/", "n_items", "*", "100", ")", ")", "\n", "\n", "\n", "", "", "print", "(", "\"DataDenseSplit_K_Cores: split complete\"", ")", "\n", "\n", "URM", ".", "eliminate_zeros", "(", ")", "\n", "\n", "if", "reshape", ":", "\n", "# Remove all columns and rows with no interactions", "\n", "        ", "return", "remove_empty_rows_and_cols", "(", "URM", ")", "\n", "\n", "\n", "", "return", "URM", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "list", "(", "removed_users", ")", ")", ",", "np", ".", "array", "(", "list", "(", "removed_items", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_User_min_interactions.DataPostprocessing_User_min_interactions.__init__": [[25, 33], ["recsys.Data_manager.DataPostprocessing.DataPostprocessing.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "dataReader_object", ",", "min_interactions", ")", ":", "\n", "\n", "        ", "assert", "min_interactions", ">=", "1", ",", "\"DataReaderPostprocessing_User_min_interactions: min_interactions must be a positive value >= 1, provided value was {}\"", ".", "format", "(", "min_interactions", ")", "\n", "\n", "super", "(", "DataPostprocessing_User_min_interactions", ",", "self", ")", ".", "__init__", "(", "dataReader_object", ")", "\n", "\n", "self", ".", "min_interactions", "=", "min_interactions", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_User_min_interactions.DataPostprocessing_User_min_interactions._get_dataset_name_data_subfolder": [[36, 54], ["DataPostprocessing_User_min_interactions.DataPostprocessing_User_min_interactions.dataReader_object._get_dataset_name_data_subfolder"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._get_dataset_name_data_subfolder"], ["", "def", "_get_dataset_name_data_subfolder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the subfolder inside the dataset folder tree which contains the specific data to be loaded\n        This method must be overridden by any data post processing object like k-cores / user sampling / interaction sampling etc\n        to be applied before the data split\n\n        :return: original or k_cores etc...\n        \"\"\"", "\n", "\n", "subfolder_name", "=", "\"{}_user_min_interactions/\"", ".", "format", "(", "self", ".", "min_interactions", ")", "\n", "\n", "inner_subfolder_name", "=", "self", ".", "dataReader_object", ".", "_get_dataset_name_data_subfolder", "(", ")", "\n", "\n", "# Avoid concatenating the original/ part", "\n", "if", "inner_subfolder_name", "!=", "self", ".", "DATASET_SUBFOLDER_ORIGINAL", ":", "\n", "            ", "subfolder_name", "+=", "inner_subfolder_name", "\n", "\n", "", "return", "subfolder_name", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_User_min_interactions.DataPostprocessing_User_min_interactions._load_from_original_file": [[57, 72], ["DataPostprocessing_User_min_interactions.DataPostprocessing_User_min_interactions.dataReader_object.load_data", "DataPostprocessing_User_min_interactions.select_users_with_min_interactions", "DataPostprocessing_User_min_interactions.DataPostprocessing_User_min_interactions._remove_items_and_users"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_User_min_interactions.select_users_with_min_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset._remove_items_and_users"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        _load_from_original_file will call the load of the dataset and then apply on it the k-cores\n        :return:\n        \"\"\"", "\n", "\n", "loaded_dataset", "=", "self", ".", "dataReader_object", ".", "load_data", "(", ")", "\n", "URM_all", "=", "loaded_dataset", ".", "AVAILABLE_URM", "[", "\"URM_all\"", "]", "\n", "\n", "# Apply required min user interactions ORIGINAL split", "\n", "_", ",", "users_to_remove", ",", "items_to_remove", "=", "select_users_with_min_interactions", "(", "URM_all", ",", "min_interactions", "=", "self", ".", "min_interactions", ")", "\n", "\n", "loaded_dataset", ".", "_remove_items_and_users", "(", "items_to_remove", "=", "items_to_remove", ",", "users_to_remove", "=", "users_to_remove", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_User_min_interactions.select_users_with_min_interactions": [[80, 141], ["print", "sps.csr_matrix.eliminate_zeros", "print", "scipy.csr_matrix", "sps.csr_matrix.eliminate_zeros", "scipy.csc_matrix", "print", "scipy.csr_matrix", "numpy.ediff1d", "numpy.arange", "numpy.zeros_like", "numpy.ediff1d", "numpy.arange", "sps.csr_matrix.data.sum", "print", "print", "recsys.Data_manager.DataReader_utils.remove_empty_rows_and_cols", "sps.csr_matrix.copy", "len", "len", "sum", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.remove_empty_rows_and_cols", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "select_users_with_min_interactions", "(", "URM", ",", "min_interactions", "=", "5", ",", "reshape", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param URM:\n    :param min_interactions:\n    :param reshape:\n    :return: URM, removedUsers, removedItems\n    \"\"\"", "\n", "\n", "print", "(", "\"DataReaderPostprocessing_User_min_interactions: min_interactions extraction will zero out some users and items without changing URM shape\"", ")", "\n", "\n", "URM", ".", "eliminate_zeros", "(", ")", "\n", "\n", "n_users", "=", "URM", ".", "shape", "[", "0", "]", "\n", "n_items", "=", "URM", ".", "shape", "[", "1", "]", "\n", "\n", "\n", "print", "(", "\"DataReaderPostprocessing_User_min_interactions: Initial URM desity is {:.2E}\"", ".", "format", "(", "URM", ".", "nnz", "/", "(", "n_users", "*", "n_items", ")", ")", ")", "\n", "\n", "n_users", ",", "n_items", "=", "URM", ".", "shape", "\n", "\n", "URM", "=", "sps", ".", "csr_matrix", "(", "URM", ")", "\n", "user_to_remove_mask", "=", "np", ".", "ediff1d", "(", "URM", ".", "indptr", ")", "<", "min_interactions", "\n", "removed_users", "=", "np", ".", "arange", "(", "0", ",", "n_users", ",", "dtype", "=", "np", ".", "int", ")", "[", "user_to_remove_mask", "]", "\n", "\n", "\n", "for", "user", "in", "removed_users", ":", "\n", "        ", "start_pos", "=", "URM", ".", "indptr", "[", "user", "]", "\n", "end_pos", "=", "URM", ".", "indptr", "[", "user", "+", "1", "]", "\n", "\n", "URM", ".", "data", "[", "start_pos", ":", "end_pos", "]", "=", "np", ".", "zeros_like", "(", "URM", ".", "data", "[", "start_pos", ":", "end_pos", "]", ")", "\n", "\n", "", "URM", ".", "eliminate_zeros", "(", ")", "\n", "\n", "URM", "=", "sps", ".", "csc_matrix", "(", "URM", ")", "\n", "items_to_remove_mask", "=", "np", ".", "ediff1d", "(", "URM", ".", "indptr", ")", "==", "0", "\n", "removed_items", "=", "np", ".", "arange", "(", "0", ",", "n_items", ",", "dtype", "=", "np", ".", "int", ")", "[", "items_to_remove_mask", "]", "\n", "\n", "\n", "if", "URM", ".", "data", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"DataReaderPostprocessing_User_min_interactions: WARNING URM is empty.\"", ")", "\n", "\n", "", "else", ":", "\n", "         ", "print", "(", "\"DataReaderPostprocessing_User_min_interactions: URM desity without zeroed-out nodes is {:.2E}.\\n\"", "\n", "\"Users with less than {} interactions are {} ( {:.2f}%), Items are {} ( {:.2f}%)\"", ".", "format", "(", "\n", "sum", "(", "URM", ".", "data", ")", "/", "(", "(", "n_users", "-", "len", "(", "removed_users", ")", ")", "*", "(", "n_items", "-", "len", "(", "removed_items", ")", ")", ")", ",", "\n", "min_interactions", ",", "\n", "len", "(", "removed_users", ")", ",", "len", "(", "removed_users", ")", "/", "n_users", "*", "100", ",", "\n", "len", "(", "removed_items", ")", ",", "len", "(", "removed_items", ")", "/", "n_items", "*", "100", ")", ")", "\n", "\n", "\n", "", "print", "(", "\"DataReaderPostprocessing_User_min_interactions: split complete\"", ")", "\n", "\n", "URM", "=", "sps", ".", "csr_matrix", "(", "URM", ")", "\n", "\n", "if", "reshape", ":", "\n", "# Remove all columns and rows with no interactions", "\n", "        ", "return", "remove_empty_rows_and_cols", "(", "URM", ")", "\n", "\n", "\n", "", "return", "URM", ".", "copy", "(", ")", ",", "removed_users", ",", "removed_items", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing.DataPostprocessing.__init__": [[19, 27], ["recsys.Data_manager.DataReader.DataReader.__init__", "dataReader_object.AVAILABLE_URM.copy", "dataReader_object.AVAILABLE_ICM.copy", "dataReader_object.AVAILABLE_UCM.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "__init__", "(", "self", ",", "dataReader_object", ":", "DataReader", ")", ":", "\n", "        ", "super", "(", "DataPostprocessing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dataReader_object", "=", "dataReader_object", "\n", "\n", "self", ".", "AVAILABLE_URM", "=", "dataReader_object", ".", "AVAILABLE_URM", ".", "copy", "(", ")", "\n", "self", ".", "AVAILABLE_ICM", "=", "dataReader_object", ".", "AVAILABLE_ICM", ".", "copy", "(", ")", "\n", "self", ".", "AVAILABLE_UCM", "=", "dataReader_object", ".", "AVAILABLE_UCM", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing.DataPostprocessing._get_dataset_name": [[35, 37], ["DataPostprocessing.DataPostprocessing.dataReader_object._get_dataset_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "def", "_get_dataset_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataReader_object", ".", "_get_dataset_name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing.DataPostprocessing._get_dataset_name_root": [[38, 40], ["DataPostprocessing.DataPostprocessing.dataReader_object._get_dataset_name_root"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._get_dataset_name_root"], ["", "def", "_get_dataset_name_root", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataReader_object", ".", "_get_dataset_name_root", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing.DataPostprocessing.is_implicit": [[47, 49], ["DataPostprocessing.DataPostprocessing.dataReader_object.is_implicit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM.is_implicit"], ["", "def", "is_implicit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataReader_object", ".", "is_implicit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing.DataPostprocessing._get_dataset_name_data_subfolder": [[71, 80], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_dataset_name_data_subfolder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the subfolder inside the dataset folder tree which contains the specific data to be loaded\n        This method must be overridden by any data post processing object like k-cores / user sampling / interaction sampling etc\n        to be applied before the data split\n\n        :return: Dataset_name/\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"DataReaderPostprocessing: The following method was not implemented for the required class.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing.DataPostprocessing._load_from_original_file": [[83, 89], ["NotImplementedError"], "methods", ["None"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        _load_from_original_file will call the load of the dataset and then apply on it the postprocessing required\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"DataReaderPostprocessing: The following method was not implemented for the required class.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix_test.MyTestCase.test_IncrementalSparseMatrix_add_lists": [[45, 63], ["scipy.random", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "IncrementalSparseMatrix_test.sparse_are_equals", "scipy.random.row.copy", "scipy.random.col.copy", "scipy.random.data.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix_test.sparse_are_equals", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["    ", "def", "test_IncrementalSparseMatrix_add_lists", "(", "self", ")", ":", "\n", "\n", "        ", "n_rows", "=", "100", "\n", "n_cols", "=", "200", "\n", "\n", "randomMatrix", "=", "sps", ".", "random", "(", "n_rows", ",", "n_cols", ",", "density", "=", "0.01", ",", "format", "=", "'coo'", ")", "\n", "\n", "incrementalMatrix", "=", "IncrementalSparseMatrix", "(", "n_rows", "=", "n_rows", ",", "n_cols", "=", "n_cols", ")", "\n", "\n", "\n", "incrementalMatrix", ".", "add_data_lists", "(", "randomMatrix", ".", "row", ".", "copy", "(", ")", ",", "\n", "randomMatrix", ".", "col", ".", "copy", "(", ")", ",", "\n", "randomMatrix", ".", "data", ".", "copy", "(", ")", ")", "\n", "\n", "\n", "randomMatrix_incremental", "=", "incrementalMatrix", ".", "get_SparseMatrix", "(", ")", "\n", "\n", "assert", "sparse_are_equals", "(", "randomMatrix", ",", "randomMatrix_incremental", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix_test.MyTestCase.test_IncrementalSparseMatrix_add_rows": [[70, 96], ["scipy.random", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "range", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "IncrementalSparseMatrix_test.sparse_are_equals", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row", "np.ones_like"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix_test.sparse_are_equals", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row"], ["", "def", "test_IncrementalSparseMatrix_add_rows", "(", "self", ")", ":", "\n", "\n", "        ", "import", "numpy", "as", "np", "\n", "\n", "n_rows", "=", "100", "\n", "n_cols", "=", "200", "\n", "\n", "randomMatrix", "=", "sps", ".", "random", "(", "n_rows", ",", "n_cols", ",", "density", "=", "0.01", ",", "format", "=", "'csr'", ")", "\n", "\n", "incrementalMatrix", "=", "IncrementalSparseMatrix", "(", "n_rows", "=", "n_rows", ",", "n_cols", "=", "n_cols", ")", "\n", "\n", "\n", "for", "row", "in", "range", "(", "n_rows", ")", ":", "\n", "\n", "            ", "row_data", "=", "randomMatrix", ".", "indices", "[", "randomMatrix", ".", "indptr", "[", "row", "]", ":", "randomMatrix", ".", "indptr", "[", "row", "+", "1", "]", "]", "\n", "\n", "incrementalMatrix", ".", "add_single_row", "(", "row", ",", "\n", "row_data", ",", "\n", "5.0", ")", "\n", "\n", "\n", "", "randomMatrix", ".", "data", "=", "np", ".", "ones_like", "(", "randomMatrix", ".", "data", ")", "*", "5.0", "\n", "\n", "randomMatrix_incremental", "=", "incrementalMatrix", ".", "get_SparseMatrix", "(", ")", "\n", "\n", "assert", "sparse_are_equals", "(", "randomMatrix", ",", "randomMatrix_incremental", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix_test.sparse_are_equals": [[19, 25], ["None"], "function", ["None"], ["def", "sparse_are_equals", "(", "A", ",", "B", ")", ":", "\n", "\n", "    ", "if", "A", ".", "shape", "!=", "B", ".", "shape", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "(", "A", "!=", "B", ")", ".", "nnz", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix_test.random_string": [[28, 39], ["choice", "range", "randint"], "function", ["None"], ["", "def", "random_string", "(", ")", ":", "\n", "\n", "    ", "import", "string", "\n", "from", "random", "import", "choice", ",", "randint", "\n", "\n", "min_char", "=", "8", "\n", "max_char", "=", "12", "\n", "allchar", "=", "string", ".", "ascii_letters", "+", "string", ".", "digits", "+", "string", ".", "punctuation", "\n", "randomstring", "=", "\"\"", ".", "join", "(", "choice", "(", "allchar", ")", "for", "x", "in", "range", "(", "randint", "(", "min_char", ",", "max_char", ")", ")", ")", "\n", "\n", "return", "randomstring", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout.__init__": [[52, 81], ["all", "DataSplitter_Holdout.DataSplitter_Holdout.copy", "recsys.Data_manager.DataSplitter.DataSplitter.__init__", "DataSplitter_Holdout.DataSplitter_Holdout._SPLIT_QUOTA_LIST_DEFAULT.copy", "DataSplitter_Holdout.DataSplitter_Holdout._print", "len", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["def", "__init__", "(", "self", ",", "dataReader_object", ":", "_DataReader", ",", "\n", "split_interaction_quota_list", "=", "None", ",", "user_wise", "=", "True", ",", "allow_cold_users", "=", "False", ",", "\n", "forbid_new_split", "=", "False", ",", "force_new_split", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param dataReader_object:\n        :param n_folds:\n        :param force_new_split:\n        :param forbid_new_split:\n        :param save_folder_path:    path in which to save the loaded dataset\n                                    None    use default \"dataset_name/split_name/\"\n                                    False   do not save\n        \"\"\"", "\n", "\n", "if", "split_interaction_quota_list", "is", "None", ":", "\n", "            ", "split_interaction_quota_list", "=", "self", ".", "_SPLIT_QUOTA_LIST_DEFAULT", ".", "copy", "(", ")", "\n", "self", ".", "_print", "(", "\"input_split_item_quota_list not provided, using default '{}'\"", ".", "format", "(", "split_interaction_quota_list", ")", ")", "\n", "\n", "", "assert", "len", "(", "split_interaction_quota_list", ")", "==", "3", ",", "\"{}: input_split_item_quota_list must contain 3 values: Train, Validation, Test\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "assert", "all", "(", "split_quota", ">=", "0.0", "and", "split_quota", "<=", "100", "for", "split_quota", "in", "split_interaction_quota_list", ")", ",", "\"{}: input_split_item_quota_list must contain values between 0 and 100\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "assert", "sum", "(", "split_interaction_quota_list", ")", "==", "100", ",", "\"{}: input_split_item_quota_list must be a probability distribution and sum to 100, current data sums to '{}'\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ",", "sum", "(", "split_interaction_quota_list", ")", ")", "\n", "\n", "\n", "self", ".", "input_split_interaction_quota_list", "=", "split_interaction_quota_list", ".", "copy", "(", ")", "\n", "self", ".", "actual_split_interaction_quota_list", "=", "None", "\n", "self", ".", "allow_cold_users", "=", "allow_cold_users", "\n", "self", ".", "user_wise", "=", "user_wise", "\n", "\n", "super", "(", "DataSplitter_Holdout", ",", "self", ")", ".", "__init__", "(", "dataReader_object", ",", "forbid_new_split", "=", "forbid_new_split", ",", "force_new_split", "=", "force_new_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._get_split_subfolder_name": [[84, 96], ["str"], "methods", ["None"], ["", "def", "_get_split_subfolder_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: warm_{n_folds}_fold/\n        \"\"\"", "\n", "\n", "if", "self", ".", "user_wise", ":", "\n", "            ", "user_wise_string", "=", "\"user_wise\"", "\n", "", "else", ":", "\n", "            ", "user_wise_string", "=", "\"global_sample\"", "\n", "\n", "", "return", "\"holdout_{}_{}/\"", ".", "format", "(", "'_'", ".", "join", "(", "str", "(", "split_quota", ")", "for", "split_quota", "in", "self", ".", "input_split_interaction_quota_list", ")", ",", "user_wise_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout.get_statistics_URM": [[99, 122], ["DataSplitter_Holdout.DataSplitter_Holdout._assert_is_initialized", "DataSplitter_Holdout.DataSplitter_Holdout._print", "print", "DataSplitter_Holdout.DataSplitter_Holdout.dataReader_object._get_dataset_name", "recsys.Data_manager.DataReader_utils.compute_density", "recsys.Data_manager.DataReader_utils.compute_density", "recsys.Data_manager.DataReader_utils.compute_density"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density"], ["", "def", "get_statistics_URM", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "n_users", ",", "n_items", "=", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "shape", "\n", "\n", "statistics_string", "=", "\"DataReader: {}\\n\"", "\"\\tNum items: {}\\n\"", "\"\\tNum users: {}\\n\"", "\"\\tTrain \\t\\tquota {:.2f} ({:.2f}), \\tinteractions {}, \\tdensity {:.2E}\\n\"", "\"\\tValidation \\tquota {:.2f} ({:.2f}), \\tinteractions {}, \\tdensity {:.2E}\\n\"", "\"\\tTest \\t\\tquota {:.2f} ({:.2f}), \\tinteractions {}, \\tdensity {:.2E}\\n\"", ".", "format", "(", "\n", "self", ".", "dataReader_object", ".", "_get_dataset_name", "(", ")", ",", "\n", "n_items", ",", "\n", "n_users", ",", "\n", "self", ".", "input_split_interaction_quota_list", "[", "0", "]", ",", "self", ".", "actual_split_interaction_quota_list", "[", "0", "]", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "nnz", ",", "compute_density", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ")", ",", "\n", "self", ".", "input_split_interaction_quota_list", "[", "1", "]", ",", "self", ".", "actual_split_interaction_quota_list", "[", "1", "]", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "nnz", ",", "compute_density", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ")", ",", "\n", "self", ".", "input_split_interaction_quota_list", "[", "2", "]", ",", "self", ".", "actual_split_interaction_quota_list", "[", "2", "]", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "nnz", ",", "compute_density", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_print", "(", "statistics_string", ")", "\n", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout.get_ICM_from_name": [[126, 128], ["DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_ICM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_ICM_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "return", "self", ".", "SPLIT_ICM_DICT", "[", "ICM_name", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout.get_UCM_from_name": [[129, 131], ["DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_UCM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_UCM_from_name", "(", "self", ",", "UCM_name", ")", ":", "\n", "        ", "return", "self", ".", "SPLIT_UCM_DICT", "[", "UCM_name", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout.get_statistics_ICM": [[132, 152], ["DataSplitter_Holdout.DataSplitter_Holdout._assert_is_initialized", "len", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_ICM_DICT.items", "print", "DataSplitter_Holdout.DataSplitter_Holdout.dataReader_object.get_loaded_ICM_names", "print", "recsys.Data_manager.DataReader_utils.compute_density"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density"], ["", "def", "get_statistics_ICM", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "dataReader_object", ".", "get_loaded_ICM_names", "(", ")", ")", ">", "0", ":", "\n", "\n", "            ", "for", "ICM_name", ",", "ICM_object", "in", "self", ".", "SPLIT_ICM_DICT", ".", "items", "(", ")", ":", "\n", "\n", "                ", "n_items", ",", "n_features", "=", "ICM_object", ".", "shape", "\n", "\n", "statistics_string", "=", "\"\\tICM name: {}, Num features: {}, feature occurrences: {}, density {:.2E}\"", ".", "format", "(", "\n", "ICM_name", ",", "\n", "n_features", ",", "\n", "ICM_object", ".", "nnz", ",", "\n", "compute_density", "(", "ICM_object", ")", "\n", ")", "\n", "\n", "print", "(", "statistics_string", ")", "\n", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._assert_is_initialized": [[155, 157], ["None"], "methods", ["None"], ["", "", "def", "_assert_is_initialized", "(", "self", ")", ":", "\n", "         ", "assert", "self", ".", "SPLIT_URM_DICT", "is", "not", "None", ",", "\"{}: Unable to load data split. The split has not been generated yet, call the load_data function to do so.\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout.get_holdout_split": [[159, 170], ["DataSplitter_Holdout.DataSplitter_Holdout._assert_is_initialized", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT[].copy", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT[].copy", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_holdout_split", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The train set is defined as all data except the one of that fold, which is the test\n        :return: URM_train, URM_validation, URM_test\n        \"\"\"", "\n", "\n", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "return", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._split_data_from_original_dataset": [[172, 238], ["DataSplitter_Holdout.DataSplitter_Holdout.dataReader_object.load_data", "DataSplitter_Holdout.DataSplitter_Holdout._load_from_DataReader_ICM_and_mappers", "DataSplitter_Holdout.DataSplitter_Holdout.loaded_dataset.get_URM_all", "DataSplitter_Holdout.DataSplitter_Holdout._compute_real_split_interaction_quota", "DataSplitter_Holdout.DataSplitter_Holdout._save_split", "DataSplitter_Holdout.DataSplitter_Holdout._print", "recsys.Data_manager.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_user_wise", "recsys.Data_manager.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_global_sample", "recsys.Data_manager.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_user_wise", "recsys.Data_manager.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_global_sample", "numpy.ediff1d", "numpy.logical_not", "numpy.logical_not.sum", "DataSplitter_Holdout.DataSplitter_Holdout._print", "recsys.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_UCM_DICT.items", "numpy.logical_not.sum", "numpy.arange", "len", "numpy.logical_not.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._load_from_DataReader_ICM_and_mappers", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_URM_all", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._compute_real_split_interaction_quota", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._save_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_user_wise", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_global_sample", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_user_wise", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_global_sample", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens"], ["", "def", "_split_data_from_original_dataset", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "loaded_dataset", "=", "self", ".", "dataReader_object", ".", "load_data", "(", ")", "\n", "self", ".", "_load_from_DataReader_ICM_and_mappers", "(", "self", ".", "loaded_dataset", ")", "\n", "\n", "URM_all", "=", "self", ".", "loaded_dataset", ".", "get_URM_all", "(", ")", "\n", "\n", "train_quota", ",", "validation_quota", ",", "test_quota", "=", "self", ".", "input_split_interaction_quota_list", "\n", "train_quota", "/=", "100", "\n", "validation_quota", "/=", "100", "\n", "test_quota", "/=", "100", "\n", "\n", "if", "self", ".", "user_wise", ":", "\n", "            ", "URM_train_validation", ",", "URM_test", "=", "split_train_in_two_percentage_user_wise", "(", "URM_all", ",", "train_percentage", "=", "train_quota", "+", "validation_quota", ")", "\n", "", "else", ":", "\n", "            ", "URM_train_validation", ",", "URM_test", "=", "split_train_in_two_percentage_global_sample", "(", "URM_all", ",", "train_percentage", "=", "train_quota", "+", "validation_quota", ")", "\n", "\n", "#Adjust train quota to account for the reduced size of the sample", "\n", "# URM_train_validation * adjusted_train_quota = URM_all * train quota", "\n", "\n", "", "adjusted_train_quota", "=", "URM_all", ".", "nnz", "*", "train_quota", "/", "URM_train_validation", ".", "nnz", "\n", "\n", "if", "self", ".", "user_wise", ":", "\n", "            ", "URM_train", ",", "URM_validation", "=", "split_train_in_two_percentage_user_wise", "(", "URM_train_validation", ",", "train_percentage", "=", "adjusted_train_quota", ")", "\n", "", "else", ":", "\n", "            ", "URM_train", ",", "URM_validation", "=", "split_train_in_two_percentage_global_sample", "(", "URM_train_validation", ",", "train_percentage", "=", "adjusted_train_quota", ")", "\n", "\n", "\n", "\n", "\n", "", "if", "not", "self", ".", "allow_cold_users", ":", "\n", "\n", "            ", "user_interactions", "=", "np", ".", "ediff1d", "(", "URM_train", ".", "indptr", ")", "\n", "user_to_preserve", "=", "user_interactions", ">=", "1", "\n", "user_to_remove", "=", "np", ".", "logical_not", "(", "user_to_preserve", ")", "\n", "\n", "n_users", "=", "URM_train", ".", "shape", "[", "0", "]", "\n", "\n", "if", "user_to_remove", ".", "sum", "(", ")", ">", "0", ":", "\n", "\n", "                ", "self", ".", "_print", "(", "\"Removing {} ({:.2f} %) of {} users because they have no interactions in train data.\"", ".", "format", "(", "user_to_remove", ".", "sum", "(", ")", ",", "user_to_remove", ".", "sum", "(", ")", "/", "n_users", "*", "100", ",", "n_users", ")", ")", "\n", "\n", "URM_train", "=", "URM_train", "[", "user_to_preserve", ",", ":", "]", "\n", "URM_validation", "=", "URM_validation", "[", "user_to_preserve", ",", ":", "]", "\n", "URM_test", "=", "URM_test", "[", "user_to_preserve", ",", ":", "]", "\n", "\n", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"user_original_ID_to_index\"", "]", "=", "reconcile_mapper_with_removed_tokens", "(", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"user_original_ID_to_index\"", "]", ",", "\n", "np", ".", "arange", "(", "0", ",", "len", "(", "user_to_remove", ")", ",", "dtype", "=", "np", ".", "int", ")", "[", "user_to_remove", "]", ")", "\n", "\n", "for", "UCM_name", ",", "UCM_object", "in", "self", ".", "SPLIT_UCM_DICT", ".", "items", "(", ")", ":", "\n", "                    ", "UCM_object", "=", "UCM_object", "[", "user_to_preserve", ",", ":", "]", "\n", "self", ".", "SPLIT_UCM_DICT", "[", "UCM_name", "]", "=", "UCM_object", "\n", "\n", "\n", "", "", "", "self", ".", "SPLIT_URM_DICT", "=", "{", "\n", "\"URM_train\"", ":", "URM_train", ",", "\n", "\"URM_validation\"", ":", "URM_validation", ",", "\n", "\"URM_test\"", ":", "URM_test", ",", "\n", "}", "\n", "\n", "self", ".", "_compute_real_split_interaction_quota", "(", ")", "\n", "\n", "self", ".", "_save_split", "(", "save_folder_path", ")", "\n", "\n", "self", ".", "_print", "(", "\"Split complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._compute_real_split_interaction_quota": [[241, 256], ["DataSplitter_Holdout.DataSplitter_Holdout._assert_is_initialized", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT.items", "enumerate", "len", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT.items"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized"], ["", "def", "_compute_real_split_interaction_quota", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "n_interactions_total", "=", "0", "\n", "self", ".", "actual_split_interaction_quota_list", "=", "[", "None", "]", "*", "len", "(", "self", ".", "input_split_interaction_quota_list", ")", "\n", "\n", "for", "_", ",", "URM_object", "in", "self", ".", "SPLIT_URM_DICT", ".", "items", "(", ")", ":", "\n", "            ", "n_interactions_total", "+=", "URM_object", ".", "nnz", "\n", "\n", "", "for", "index", ",", "(", "_", ",", "URM_object", ")", "in", "enumerate", "(", "self", ".", "SPLIT_URM_DICT", ".", "items", "(", ")", ")", ":", "\n", "\n", "            ", "real_quota", "=", "URM_object", ".", "nnz", "/", "n_interactions_total", "*", "100", "\n", "\n", "self", ".", "actual_split_interaction_quota_list", "[", "index", "]", "=", "real_quota", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._save_split": [[261, 311], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "len", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "len", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "", "def", "_save_split", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "        ", "if", "save_folder_path", ":", "\n", "\n", "            ", "if", "self", ".", "allow_cold_users", ":", "\n", "                ", "allow_cold_users_suffix", "=", "\"allow_cold_users\"", "\n", "\n", "", "else", ":", "\n", "                ", "allow_cold_users_suffix", "=", "\"only_warm_users\"", "\n", "\n", "", "if", "self", ".", "user_wise", ":", "\n", "                ", "user_wise_string", "=", "\"user_wise\"", "\n", "", "else", ":", "\n", "                ", "user_wise_string", "=", "\"global_sample\"", "\n", "\n", "\n", "", "name_suffix", "=", "\"_{}_{}\"", ".", "format", "(", "allow_cold_users_suffix", ",", "user_wise_string", ")", "\n", "\n", "\n", "split_parameters_dict", "=", "{", "\n", "\"input_split_interaction_quota_list\"", ":", "self", ".", "input_split_interaction_quota_list", ",", "\n", "\"actual_split_interaction_quota_list\"", ":", "self", ".", "actual_split_interaction_quota_list", ",", "\n", "\"allow_cold_users\"", ":", "self", ".", "allow_cold_users", "\n", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "split_parameters_dict", ",", "\n", "file_name", "=", "\"split_parameters\"", "+", "name_suffix", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", ",", "\n", "file_name", "=", "\"split_mappers\"", "+", "name_suffix", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_URM_DICT", ",", "\n", "file_name", "=", "\"split_URM\"", "+", "name_suffix", ")", "\n", "\n", "if", "len", "(", "self", ".", "SPLIT_ICM_DICT", ")", ">", "0", ":", "\n", "                ", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_ICM_DICT", ",", "\n", "file_name", "=", "\"split_ICM\"", "+", "name_suffix", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_ICM_MAPPER_DICT", ",", "\n", "file_name", "=", "\"split_ICM_mappers\"", "+", "name_suffix", ")", "\n", "\n", "\n", "", "if", "len", "(", "self", ".", "SPLIT_UCM_DICT", ")", ">", "0", ":", "\n", "                ", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_UCM_DICT", ",", "\n", "file_name", "=", "\"split_UCM\"", "+", "name_suffix", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_UCM_MAPPER_DICT", ",", "\n", "file_name", "=", "\"split_UCM_mappers\"", "+", "name_suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._load_previously_built_split_and_attributes": [[314, 355], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data.keys", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "DataSplitter_Holdout.DataSplitter_Holdout.__setattr__", "len", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "len", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "DataSplitter_Holdout.DataSplitter_Holdout.dataReader_object.get_loaded_ICM_names", "DataSplitter_Holdout.DataSplitter_Holdout.dataReader_object.get_loaded_UCM_names"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_UCM_names"], ["", "", "", "def", "_load_previously_built_split_and_attributes", "(", "self", ",", "save_folder_path", ")", ":", "\n", "        ", "\"\"\"\n        Loads all URM and ICM\n        :return:\n        \"\"\"", "\n", "\n", "if", "self", ".", "allow_cold_users", ":", "\n", "            ", "allow_cold_users_suffix", "=", "\"allow_cold_users\"", "\n", "", "else", ":", "\n", "            ", "allow_cold_users_suffix", "=", "\"only_warm_users\"", "\n", "\n", "", "if", "self", ".", "user_wise", ":", "\n", "            ", "user_wise_string", "=", "\"user_wise\"", "\n", "", "else", ":", "\n", "            ", "user_wise_string", "=", "\"global_sample\"", "\n", "\n", "\n", "", "name_suffix", "=", "\"_{}_{}\"", ".", "format", "(", "allow_cold_users_suffix", ",", "user_wise_string", ")", "\n", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "split_parameters_dict", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_parameters\"", "+", "name_suffix", ")", "\n", "\n", "for", "attrib_name", "in", "split_parameters_dict", ".", "keys", "(", ")", ":", "\n", "             ", "self", ".", "__setattr__", "(", "attrib_name", ",", "split_parameters_dict", "[", "attrib_name", "]", ")", "\n", "\n", "\n", "", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_mappers\"", "+", "name_suffix", ")", "\n", "\n", "self", ".", "SPLIT_URM_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_URM\"", "+", "name_suffix", ")", "\n", "\n", "if", "len", "(", "self", ".", "dataReader_object", ".", "get_loaded_ICM_names", "(", ")", ")", ">", "0", ":", "\n", "            ", "self", ".", "SPLIT_ICM_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_ICM\"", "+", "name_suffix", ")", "\n", "\n", "self", ".", "SPLIT_ICM_MAPPER_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_ICM_mappers\"", "+", "name_suffix", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "dataReader_object", ".", "get_loaded_UCM_names", "(", ")", ")", ">", "0", ":", "\n", "            ", "self", ".", "SPLIT_UCM_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_UCM\"", "+", "name_suffix", ")", "\n", "\n", "self", ".", "SPLIT_UCM_MAPPER_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_UCM_mappers\"", "+", "name_suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._verify_data_consistency": [[366, 438], ["DataSplitter_Holdout.DataSplitter_Holdout._assert_is_initialized", "all", "all", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT.items", "enumerate", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT[].copy", "numpy.ediff1d", "recsys.Data_manager.data_consistency_check.assert_disjoint_matrices", "recsys.Data_manager.data_consistency_check.assert_URM_ICM_mapper_consistency", "len", "len", "numpy.all", "list", "len", "len", "print", "scipy.csr_matrix", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT.values", "DataSplitter_Holdout.DataSplitter_Holdout.SPLIT_URM_DICT.keys"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.assertions_on_data_for_experiments.assert_disjoint_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.data_consistency_check.assert_URM_ICM_mapper_consistency"], ["", "", "def", "_verify_data_consistency", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "print_preamble", "=", "\"{} consistency check: \"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n", "assert", "len", "(", "self", ".", "SPLIT_URM_DICT", ")", "==", "len", "(", "self", ".", "_SPLIT_URM_NAME_LIST", ")", ",", "print_preamble", "+", "\"The available URM are not as many as they are supposed to be. URMs are {}, expected URMs are {}\"", ".", "format", "(", "len", "(", "self", ".", "SPLIT_URM_DICT", ")", ",", "len", "(", "self", ".", "_SPLIT_URM_NAME_LIST", ")", ")", "\n", "\n", "assert", "all", "(", "URM_name", "in", "self", ".", "SPLIT_URM_DICT", "for", "URM_name", "in", "self", ".", "_SPLIT_URM_NAME_LIST", ")", ",", "print_preamble", "+", "\"Not all URMs have been created\"", "\n", "assert", "all", "(", "URM_name", "in", "self", ".", "_SPLIT_URM_NAME_LIST", "for", "URM_name", "in", "self", ".", "SPLIT_URM_DICT", ".", "keys", "(", ")", ")", ",", "print_preamble", "+", "\"The split contains URMs that should not exist\"", "\n", "\n", "\n", "URM_shape", "=", "None", "\n", "\n", "for", "URM_name", ",", "URM_object", "in", "self", ".", "SPLIT_URM_DICT", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "URM_shape", "is", "None", ":", "\n", "                ", "URM_shape", "=", "URM_object", ".", "shape", "\n", "\n", "n_users", ",", "n_items", "=", "URM_shape", "\n", "\n", "assert", "n_users", "!=", "0", ",", "print_preamble", "+", "\"Number of users in URM is 0\"", "\n", "assert", "n_items", "!=", "0", ",", "print_preamble", "+", "\"Number of items in URM is 0\"", "\n", "\n", "", "assert", "URM_shape", "==", "URM_object", ".", "shape", ",", "print_preamble", "+", "\"URM shape is inconsistent\"", "\n", "\n", "\n", "", "assert", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "nnz", "!=", "0", ",", "print_preamble", "+", "\"Number of interactions in URM Train is 0\"", "\n", "assert", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "nnz", "!=", "0", ",", "print_preamble", "+", "\"Number of interactions in URM Test is 0\"", "\n", "\n", "# Assert URM_validation is not empty only when the input quota list is zero", "\n", "# It may create problems on the user-wise split if the validation quota is too small and no items gets selected", "\n", "# Although we assume in that case it would be acceptable to receive a warning your validation data cannot be built", "\n", "assert", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "nnz", "==", "0", "and", "self", ".", "input_split_interaction_quota_list", "[", "1", "]", "==", "0.0", ")", "or", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "nnz", "!=", "0", "and", "self", ".", "input_split_interaction_quota_list", "[", "1", "]", ">", "0.0", ")", ",", "print_preamble", "+", "\"Number of interactions in Validation is 0\"", "\n", "\n", "quota_oscillation_allowed", "=", "0.2", "\n", "\n", "for", "URM_index", ",", "URM_name", "in", "enumerate", "(", "self", ".", "_SPLIT_URM_NAME_LIST", ")", ":", "\n", "\n", "            ", "input_quota", "=", "self", ".", "input_split_interaction_quota_list", "[", "URM_index", "]", "\n", "actual_quota", "=", "self", ".", "actual_split_interaction_quota_list", "[", "URM_index", "]", "\n", "max_value_allowed", "=", "input_quota", "*", "(", "1", "+", "quota_oscillation_allowed", ")", "\n", "min_value_allowed", "=", "input_quota", "*", "(", "1", "-", "quota_oscillation_allowed", ")", "\n", "\n", "if", "actual_quota", "<", "min_value_allowed", "or", "actual_quota", ">", "max_value_allowed", ":", "\n", "                ", "print", "(", "print_preamble", "+", "\"The differentce between the input interaction quota '{}' and actual interaction quota '{}' of '{}' higher than {} %\"", ".", "format", "(", "\n", "input_quota", ",", "actual_quota", ",", "URM_name", ",", "quota_oscillation_allowed", "*", "100", ")", ")", "\n", "\n", "\n", "", "", "URM", "=", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "copy", "(", ")", "\n", "\n", "user_interactions", "=", "np", ".", "ediff1d", "(", "sps", ".", "csr_matrix", "(", "URM", ")", ".", "indptr", ")", "\n", "\n", "if", "not", "self", ".", "allow_cold_users", ":", "\n", "            ", "assert", "np", ".", "all", "(", "user_interactions", "!=", "0", ")", ",", "print_preamble", "+", "\"Cold users exist despite not being allowed as per DataSplitter parameters, {} users out of {}\"", ".", "format", "(", "\n", "(", "user_interactions", "==", "0", ")", ".", "sum", "(", ")", ",", "n_users", ")", "\n", "\n", "\n", "", "assert", "assert_disjoint_matrices", "(", "list", "(", "self", ".", "SPLIT_URM_DICT", ".", "values", "(", ")", ")", ")", "\n", "\n", "\n", "assert_URM_ICM_mapper_consistency", "(", "URM_DICT", "=", "self", ".", "SPLIT_URM_DICT", ",", "\n", "user_original_ID_to_index", "=", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"user_original_ID_to_index\"", "]", ",", "\n", "item_original_ID_to_index", "=", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"item_original_ID_to_index\"", "]", ",", "\n", "ICM_DICT", "=", "self", ".", "SPLIT_ICM_DICT", ",", "\n", "ICM_MAPPER_DICT", "=", "self", ".", "SPLIT_ICM_MAPPER_DICT", ",", "\n", "UCM_DICT", "=", "self", ".", "SPLIT_UCM_DICT", ",", "\n", "UCM_MAPPER_DICT", "=", "self", ".", "SPLIT_UCM_MAPPER_DICT", ",", "\n", "DATA_SPLITTER_NAME", "=", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.__init__": [[38, 57], ["recsys.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "dataReader_object", ":", "_DataReader", ",", "\n", "split_interaction_quota_list", "=", "None", ",", "user_wise", "=", "True", ",", "allow_cold_users", "=", "False", ",", "\n", "forbid_new_split", "=", "False", ",", "force_new_split", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param dataReader_object:\n        :param n_folds:\n        :param force_new_split:\n        :param forbid_new_split:\n        :param save_folder_path:    path in which to save the loaded dataset\n                                    None    use default \"dataset_name/split_name/\"\n                                    False   do not save\n        \"\"\"", "\n", "\n", "super", "(", "DataSplitter_Cold_items", ",", "self", ")", ".", "__init__", "(", "dataReader_object", ",", "\n", "split_interaction_quota_list", "=", "split_interaction_quota_list", ",", "\n", "user_wise", "=", "user_wise", ",", "allow_cold_users", "=", "allow_cold_users", ",", "\n", "forbid_new_split", "=", "forbid_new_split", ",", "\n", "force_new_split", "=", "force_new_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items._get_split_subfolder_name": [[58, 71], ["str"], "methods", ["None"], ["", "def", "_get_split_subfolder_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: warm_{n_folds}_fold/\n        \"\"\"", "\n", "\n", "if", "self", ".", "user_wise", ":", "\n", "            ", "user_wise_string", "=", "\"user_wise\"", "\n", "", "else", ":", "\n", "            ", "user_wise_string", "=", "\"global_sample\"", "\n", "\n", "", "return", "\"cold_{}_{}/\"", ".", "format", "(", "\n", "'_'", ".", "join", "(", "str", "(", "split_quota", ")", "for", "split_quota", "in", "self", ".", "input_split_interaction_quota_list", ")", ",", "user_wise_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items._assert_is_initialized": [[72, 78], ["super()._assert_is_initialized"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized"], ["", "def", "_assert_is_initialized", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "SPLIT_URM_WARM_DICT", "is", "not", "None", ",", "\"{}: Unable to load data split. The split has not been generated yet,\"", "\" call the load_data function to do so.\"", ".", "format", "(", "\n", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n", "super", "(", "DataSplitter_Cold_items", ",", "self", ")", ".", "_assert_is_initialized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items._split_data_from_original_dataset": [[79, 164], ["DataSplitter_Cold_items.DataSplitter_Cold_items.dataReader_object.load_data", "DataSplitter_Cold_items.DataSplitter_Cold_items._load_from_DataReader_ICM_and_mappers", "DataSplitter_Cold_items.DataSplitter_Cold_items.loaded_dataset.get_URM_all", "recsys.Data_manager.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_cold_items", "recsys.Data_manager.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_cold_items", "DataSplitter_Cold_items.DataSplitter_Cold_items._consistency_reshape", "DataSplitter_Cold_items.DataSplitter_Cold_items._consistency_reshape", "DataSplitter_Cold_items.DataSplitter_Cold_items._compute_real_split_interaction_quota", "DataSplitter_Cold_items.DataSplitter_Cold_items._save_split", "DataSplitter_Cold_items.DataSplitter_Cold_items._print", "DataSplitter_Cold_items.DataSplitter_Cold_items.copy", "URM_train_validation.copy", "recsys.Data_manager.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_user_wise", "recsys.Data_manager.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_global_sample", "numpy.ediff1d", "numpy.ediff1d", "numpy.logical_and", "numpy.logical_not", "URM_train_validation.copy", "URM_train_validation.copy", "numpy.logical_not.sum", "DataSplitter_Cold_items.DataSplitter_Cold_items._print", "recsys.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_UCM_DICT.items", "numpy.logical_not.sum", "numpy.arange", "len", "numpy.logical_not.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._load_from_DataReader_ICM_and_mappers", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_URM_all", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_cold_items", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_cold_items", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items._consistency_reshape", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items._consistency_reshape", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Holdout.DataSplitter_Holdout._compute_real_split_interaction_quota", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._save_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_user_wise", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_global_sample", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens"], ["", "def", "_split_data_from_original_dataset", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "        ", "self", ".", "loaded_dataset", "=", "self", ".", "dataReader_object", ".", "load_data", "(", ")", "\n", "self", ".", "_load_from_DataReader_ICM_and_mappers", "(", "self", ".", "loaded_dataset", ")", "\n", "\n", "train_quota", ",", "validation_quota", ",", "test_quota", "=", "self", ".", "input_split_interaction_quota_list", "\n", "train_quota", "/=", "100", "\n", "validation_quota", "/=", "100", "\n", "test_quota", "/=", "100", "\n", "\n", "URM_all", "=", "self", ".", "loaded_dataset", ".", "get_URM_all", "(", ")", "\n", "\n", "URM_train_validation", ",", "URM_test", "=", "split_train_in_two_percentage_cold_items", "(", "URM_all", ".", "copy", "(", ")", ",", "\n", "train_percentage", "=", "train_quota", "+", "validation_quota", ")", "\n", "\n", "# Adjust train quota to account for the reduced size of the sample", "\n", "# URM_train_validation * adjusted_train_quota = URM_all * train quota", "\n", "adjusted_train_quota", "=", "URM_all", ".", "nnz", "*", "train_quota", "/", "URM_train_validation", ".", "nnz", "\n", "\n", "URM_train", ",", "URM_validation", "=", "split_train_in_two_percentage_cold_items", "(", "URM_train_validation", ".", "copy", "(", ")", ",", "\n", "train_percentage", "=", "adjusted_train_quota", ")", "\n", "\n", "if", "self", ".", "user_wise", ":", "\n", "            ", "URM_train_warm", ",", "URM_validation_warm", "=", "split_train_in_two_percentage_user_wise", "(", "URM_train_validation", ".", "copy", "(", ")", ",", "\n", "train_percentage", "=", "adjusted_train_quota", ")", "\n", "", "else", ":", "\n", "            ", "URM_train_warm", ",", "URM_validation_warm", "=", "split_train_in_two_percentage_global_sample", "(", "\n", "URM_train_validation", ".", "copy", "(", ")", ",", "\n", "train_percentage", "=", "adjusted_train_quota", ")", "\n", "\n", "", "if", "not", "self", ".", "allow_cold_users", ":", "\n", "\n", "            ", "user_interactions_cold", "=", "np", ".", "ediff1d", "(", "URM_train", ".", "indptr", ")", "\n", "user_to_preserve_cold", "=", "user_interactions_cold", ">=", "1", "\n", "\n", "user_interactions_warm", "=", "np", ".", "ediff1d", "(", "URM_train_warm", ".", "indptr", ")", "\n", "user_to_preserve_warm", "=", "user_interactions_warm", ">=", "1", "\n", "\n", "user_to_preserve", "=", "np", ".", "logical_and", "(", "user_to_preserve_cold", ",", "user_to_preserve_warm", ")", "\n", "user_to_remove", "=", "np", ".", "logical_not", "(", "user_to_preserve", ")", "\n", "\n", "n_users", "=", "URM_train", ".", "shape", "[", "0", "]", "\n", "\n", "if", "user_to_remove", ".", "sum", "(", ")", ">", "0", ":", "\n", "\n", "                ", "self", ".", "_print", "(", "\n", "\"Removing {} ({:.2f} %) of {} users because they have no interactions in train data.\"", ".", "format", "(", "\n", "user_to_remove", ".", "sum", "(", ")", ",", "user_to_remove", ".", "sum", "(", ")", "/", "n_users", "*", "100", ",", "n_users", ")", ")", "\n", "\n", "URM_train", "=", "URM_train", "[", "user_to_preserve", ",", ":", "]", "\n", "URM_validation", "=", "URM_validation", "[", "user_to_preserve", ",", ":", "]", "\n", "URM_test", "=", "URM_test", "[", "user_to_preserve", ",", ":", "]", "\n", "\n", "URM_train_warm", "=", "URM_train_warm", "[", "user_to_preserve", ",", ":", "]", "\n", "URM_validation_warm", "=", "URM_validation_warm", "[", "user_to_preserve", ",", ":", "]", "\n", "\n", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"user_original_ID_to_index\"", "]", "=", "reconcile_mapper_with_removed_tokens", "(", "\n", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"user_original_ID_to_index\"", "]", ",", "\n", "np", ".", "arange", "(", "0", ",", "len", "(", "user_to_remove", ")", ",", "dtype", "=", "np", ".", "int", ")", "[", "user_to_remove", "]", ")", "\n", "\n", "for", "UCM_name", ",", "UCM_object", "in", "self", ".", "SPLIT_UCM_DICT", ".", "items", "(", ")", ":", "\n", "                    ", "UCM_object", "=", "UCM_object", "[", "user_to_preserve", ",", ":", "]", "\n", "self", ".", "SPLIT_UCM_DICT", "[", "UCM_name", "]", "=", "UCM_object", "\n", "\n", "# It can happen that removing users one or more of the URMs lose the last rows, so we reshape them", "\n", "", "", "", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "self", ".", "_consistency_reshape", "(", "URM_train", ",", "URM_validation", ",", "URM_test", ")", "\n", "URM_train_warm", ",", "URM_validation_warm", ",", "URM_test", "=", "self", ".", "_consistency_reshape", "(", "URM_train_warm", ",", "URM_validation_warm", ",", "\n", "URM_test", ")", "\n", "\n", "self", ".", "SPLIT_URM_DICT", "=", "{", "\n", "\"URM_train\"", ":", "URM_train", ",", "\n", "\"URM_validation\"", ":", "URM_validation", ",", "\n", "\"URM_test\"", ":", "URM_test", ",", "\n", "}", "\n", "\n", "self", ".", "SPLIT_URM_WARM_DICT", "=", "{", "\n", "\"URM_train_warm\"", ":", "URM_train_warm", ",", "\n", "\"URM_validation_warm\"", ":", "URM_validation_warm", ",", "\n", "}", "\n", "\n", "self", ".", "_compute_real_split_interaction_quota", "(", ")", "\n", "\n", "self", ".", "_save_split", "(", "save_folder_path", ")", "\n", "\n", "self", ".", "_print", "(", "\"Split complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items._consistency_reshape": [[165, 177], ["max", "max", "recsys.Base.Recommender_utils.reshapeSparse", "recsys.Base.Recommender_utils.reshapeSparse", "recsys.Base.Recommender_utils.reshapeSparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.reshapeSparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.reshapeSparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.reshapeSparse"], ["", "@", "staticmethod", "\n", "def", "_consistency_reshape", "(", "URM_train", ",", "URM_validation", ",", "URM_test", ")", ":", "\n", "\n", "        ", "n_users", "=", "max", "(", "URM_train", ".", "shape", "[", "0", "]", ",", "URM_validation", ".", "shape", "[", "0", "]", ",", "URM_test", ".", "shape", "[", "0", "]", ")", "\n", "n_items", "=", "max", "(", "URM_train", ".", "shape", "[", "1", "]", ",", "URM_validation", ".", "shape", "[", "1", "]", ",", "URM_test", ".", "shape", "[", "1", "]", ")", "\n", "new_shape", "=", "(", "n_users", ",", "n_items", ")", "\n", "\n", "URM_train", "=", "reshapeSparse", "(", "URM_train", ",", "new_shape", ")", "\n", "URM_validation", "=", "reshapeSparse", "(", "URM_validation", ",", "new_shape", ")", "\n", "URM_test", "=", "reshapeSparse", "(", "URM_test", ",", "new_shape", ")", "\n", "\n", "return", "URM_train", ",", "URM_validation", ",", "URM_test", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_both_splits": [[178, 190], ["DataSplitter_Cold_items.DataSplitter_Cold_items._assert_is_initialized", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_URM_DICT[].copy", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_URM_DICT[].copy", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_URM_DICT[].copy", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_URM_WARM_DICT[].copy", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_URM_WARM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_both_splits", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: URM_train, URM_validation, URM_test, URM_train_warm, URM_validation_warm\n        \"\"\"", "\n", "\n", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "return", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_train_warm\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_validation_warm\"", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_cold_split": [[191, 197], ["DataSplitter_Cold_items.DataSplitter_Cold_items.get_holdout_split"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out.get_holdout_split"], ["", "def", "get_cold_split", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: URM_train, URM_validation, URM_test\n        \"\"\"", "\n", "\n", "return", "self", ".", "get_holdout_split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_warm_split": [[198, 208], ["DataSplitter_Cold_items.DataSplitter_Cold_items._assert_is_initialized", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_URM_WARM_DICT[].copy", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_URM_WARM_DICT[].copy", "DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_URM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_warm_split", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: URM_train_warm, URM_validation_warm, URM_test\n        \"\"\"", "\n", "\n", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "return", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_train_warm\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_validation_warm\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_filtered_ICM_from_name": [[209, 237], ["DataSplitter_Cold_items.DataSplitter_Cold_items.SPLIT_ICM_DICT[].copy", "tuple", "range", "numpy.array", "len", "list", "key.startswith", "feature.startswith", "new_to_original_mapper.values"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_filtered_ICM_from_name", "(", "self", ",", "ICM_name", ",", "categories", ",", "exceptions", "=", "None", ")", ":", "\n", "\n", "        ", "ICM", "=", "self", ".", "SPLIT_ICM_DICT", "[", "ICM_name", "]", ".", "copy", "(", ")", "\n", "mapper", "=", "self", ".", "SPLIT_ICM_MAPPER_DICT", "[", "ICM_name", "]", "\n", "categories", "=", "tuple", "(", "categories", ")", "\n", "\n", "if", "exceptions", "is", "None", ":", "\n", "            ", "exceptions", "=", "[", "]", "\n", "\n", "", "inv_mapper", "=", "{", "mapper", "[", "k", "]", ":", "k", "for", "k", "in", "mapper", "}", "\n", "\n", "new_to_original_mapper", "=", "{", "}", "\n", "for", "key", "in", "mapper", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "categories", ")", "and", "key", "not", "in", "exceptions", ":", "\n", "                ", "new_to_original_mapper", "[", "key", "]", "=", "mapper", "[", "key", "]", "\n", "\n", "", "", "new_mapper", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "key", "in", "range", "(", "len", "(", "inv_mapper", ")", ")", ":", "\n", "            ", "feature", "=", "inv_mapper", "[", "key", "]", "\n", "if", "feature", ".", "startswith", "(", "categories", ")", "and", "feature", "not", "in", "exceptions", ":", "\n", "                ", "new_mapper", "[", "feature", "]", "=", "i", "\n", "i", "+=", "1", "\n", "\n", "", "", "selected_features", "=", "np", ".", "array", "(", "list", "(", "new_to_original_mapper", ".", "values", "(", ")", ")", ")", "\n", "ICM", "=", "ICM", "[", ":", ",", "selected_features", "]", "\n", "\n", "return", "ICM", ",", "(", "new_to_original_mapper", ",", "new_mapper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items._save_split": [[238, 261], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "super()._save_split"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._save_split"], ["", "def", "_save_split", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "        ", "if", "save_folder_path", ":", "\n", "\n", "            ", "if", "self", ".", "allow_cold_users", ":", "\n", "                ", "allow_cold_users_suffix", "=", "\"allow_cold_users\"", "\n", "\n", "", "else", ":", "\n", "                ", "allow_cold_users_suffix", "=", "\"only_warm_users\"", "\n", "\n", "", "if", "self", ".", "user_wise", ":", "\n", "                ", "user_wise_string", "=", "\"user_wise\"", "\n", "", "else", ":", "\n", "                ", "user_wise_string", "=", "\"global_sample\"", "\n", "\n", "", "name_suffix", "=", "\"_{}_{}\"", ".", "format", "(", "allow_cold_users_suffix", ",", "user_wise_string", ")", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_URM_WARM_DICT", ",", "\n", "file_name", "=", "\"split_URM_warm\"", "+", "name_suffix", ")", "\n", "\n", "super", "(", "DataSplitter_Cold_items", ",", "self", ")", ".", "_save_split", "(", "save_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items._load_previously_built_split_and_attributes": [[262, 285], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "super()._load_previously_built_split_and_attributes"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._load_previously_built_split_and_attributes"], ["", "", "def", "_load_previously_built_split_and_attributes", "(", "self", ",", "save_folder_path", ")", ":", "\n", "        ", "\"\"\"\n        Loads warm split URMs\n        :return:\n        \"\"\"", "\n", "\n", "if", "self", ".", "allow_cold_users", ":", "\n", "            ", "allow_cold_users_suffix", "=", "\"allow_cold_users\"", "\n", "", "else", ":", "\n", "            ", "allow_cold_users_suffix", "=", "\"only_warm_users\"", "\n", "\n", "", "if", "self", ".", "user_wise", ":", "\n", "            ", "user_wise_string", "=", "\"user_wise\"", "\n", "", "else", ":", "\n", "            ", "user_wise_string", "=", "\"global_sample\"", "\n", "\n", "", "name_suffix", "=", "\"_{}_{}\"", ".", "format", "(", "allow_cold_users_suffix", ",", "user_wise_string", ")", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "self", ".", "SPLIT_URM_WARM_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_URM_warm\"", "+", "name_suffix", ")", "\n", "\n", "super", "(", "DataSplitter_Cold_items", ",", "self", ")", ".", "_load_previously_built_split_and_attributes", "(", "save_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_statistics_URM_warm": [[286, 313], ["DataSplitter_Cold_items.DataSplitter_Cold_items._assert_is_initialized", "DataSplitter_Cold_items.DataSplitter_Cold_items._print", "print", "DataSplitter_Cold_items.DataSplitter_Cold_items.dataReader_object._get_dataset_name", "recsys.Data_manager.DataReader_utils.compute_density", "recsys.Data_manager.DataReader_utils.compute_density", "recsys.Data_manager.DataReader_utils.compute_density"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density"], ["", "def", "get_statistics_URM_warm", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "n_users", ",", "n_items", "=", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_train_warm\"", "]", ".", "shape", "\n", "\n", "statistics_string", "=", "\"DataReader: {}\\n\"", "\"\\tNum items: {}\\n\"", "\"\\tNum users: {}\\n\"", "\"\\tTrain \\t\\tquota {:.2f} ({:.2f}), \\tinteractions {}, \\tdensity {:.2E}\\n\"", "\"\\tValidation \\tquota {:.2f} ({:.2f}), \\tinteractions {}, \\tdensity {:.2E}\\n\"", "\"\\tTest \\t\\tquota {:.2f} ({:.2f}), \\tinteractions {}, \\tdensity {:.2E}\\n\"", ".", "format", "(", "\n", "self", ".", "dataReader_object", ".", "_get_dataset_name", "(", ")", ",", "\n", "n_items", ",", "\n", "n_users", ",", "\n", "self", ".", "input_split_interaction_quota_list", "[", "0", "]", ",", "self", ".", "actual_split_interaction_quota_list", "[", "0", "]", ",", "\n", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_train_warm\"", "]", ".", "nnz", ",", "compute_density", "(", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_train_warm\"", "]", ")", ",", "\n", "self", ".", "input_split_interaction_quota_list", "[", "1", "]", ",", "self", ".", "actual_split_interaction_quota_list", "[", "1", "]", ",", "\n", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_validation_warm\"", "]", ".", "nnz", ",", "\n", "compute_density", "(", "self", ".", "SPLIT_URM_WARM_DICT", "[", "\"URM_validation_warm\"", "]", ")", ",", "\n", "self", ".", "input_split_interaction_quota_list", "[", "2", "]", ",", "self", ".", "actual_split_interaction_quota_list", "[", "2", "]", ",", "\n", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "nnz", ",", "compute_density", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_print", "(", "statistics_string", ")", "\n", "\n", "print", "(", "\"\\n\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils_test.MyTestCase.test_reconcile_mapper_with_removed_tokens": [[16, 35], ["reconcile_mapper_with_removed_tokens", "reconcile_mapper_with_removed_tokens", "reconcile_mapper_with_removed_tokens", "reconcile_mapper_with_removed_tokens", "original_mapper.copy", "original_mapper.copy", "original_mapper.copy", "original_mapper.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["    ", "def", "test_reconcile_mapper_with_removed_tokens", "(", "self", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "Data_manager", ".", "DataReader_utils", "import", "reconcile_mapper_with_removed_tokens", "\n", "\n", "# Create mapping [token] -> index", "\n", "\n", "original_mapper", "=", "{", "\"a\"", ":", "0", ",", "\"b\"", ":", "1", ",", "\"c\"", ":", "2", ",", "\"d\"", ":", "3", ",", "\"e\"", ":", "4", "}", "\n", "\n", "reconciled_mapper", "=", "reconcile_mapper_with_removed_tokens", "(", "original_mapper", ".", "copy", "(", ")", ",", "[", "0", "]", ")", "\n", "assert", "reconciled_mapper", "==", "{", "\"b\"", ":", "0", ",", "\"c\"", ":", "1", ",", "\"d\"", ":", "2", ",", "\"e\"", ":", "3", "}", ",", "\"reconciled_mapper not matching control\"", "\n", "\n", "reconciled_mapper", "=", "reconcile_mapper_with_removed_tokens", "(", "original_mapper", ".", "copy", "(", ")", ",", "[", "4", "]", ")", "\n", "assert", "reconciled_mapper", "==", "{", "\"a\"", ":", "0", ",", "\"b\"", ":", "1", ",", "\"c\"", ":", "2", ",", "\"d\"", ":", "3", "}", ",", "\"reconciled_mapper not matching control\"", "\n", "\n", "reconciled_mapper", "=", "reconcile_mapper_with_removed_tokens", "(", "original_mapper", ".", "copy", "(", ")", ",", "[", "0", ",", "2", "]", ")", "\n", "assert", "reconciled_mapper", "==", "{", "\"b\"", ":", "0", ",", "\"d\"", ":", "1", ",", "\"e\"", ":", "2", "}", ",", "\"reconciled_mapper not matching control\"", "\n", "\n", "reconciled_mapper", "=", "reconcile_mapper_with_removed_tokens", "(", "original_mapper", ".", "copy", "(", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "reconciled_mapper", "==", "{", "}", ",", "\"reconciled_mapper not matching control\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils_test.MyTestCase.test_split_big_CSR_in_columns": [[39, 69], ["sps.random", "split_big_CSR_in_columns", "sps.hstack", "numpy.allclose", "split_big_CSR_in_columns", "sps.hstack", "numpy.allclose", "split_big_CSR_in_columns", "sps.hstack", "numpy.allclose", "split_big_CSR_in_columns", "sps.hstack", "numpy.allclose", "sps.random.copy", "sps.random.toarray", "sps.hstack.toarray", "sps.random.copy", "sps.random.toarray", "sps.hstack.toarray", "sps.random.copy", "sps.random.toarray", "sps.hstack.toarray", "sps.random.copy", "sps.random.toarray", "sps.hstack.toarray"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.split_big_CSR_in_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.split_big_CSR_in_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.split_big_CSR_in_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.split_big_CSR_in_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "test_split_big_CSR_in_columns", "(", "self", ")", ":", "\n", "\n", "        ", "import", "scipy", ".", "sparse", "as", "sps", "\n", "from", "recsys", ".", "Data_manager", ".", "DataReader_utils", "import", "split_big_CSR_in_columns", "\n", "\n", "sparse_matrix", "=", "sps", ".", "random", "(", "50", ",", "12", ",", "density", "=", "0.1", ",", "format", "=", "'csr'", ")", "\n", "\n", "split_list", "=", "split_big_CSR_in_columns", "(", "sparse_matrix", ".", "copy", "(", ")", ",", "num_split", "=", "2", ")", "\n", "split_rebuilt", "=", "sps", ".", "hstack", "(", "split_list", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "sparse_matrix", ".", "toarray", "(", ")", ",", "split_rebuilt", ".", "toarray", "(", ")", ")", ",", "\"split_rebuilt not matching sparse_matrix\"", "\n", "\n", "\n", "\n", "split_list", "=", "split_big_CSR_in_columns", "(", "sparse_matrix", ".", "copy", "(", ")", ",", "num_split", "=", "3", ")", "\n", "split_rebuilt", "=", "sps", ".", "hstack", "(", "split_list", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "sparse_matrix", ".", "toarray", "(", ")", ",", "split_rebuilt", ".", "toarray", "(", ")", ")", ",", "\"split_rebuilt not matching sparse_matrix\"", "\n", "\n", "\n", "split_list", "=", "split_big_CSR_in_columns", "(", "sparse_matrix", ".", "copy", "(", ")", ",", "num_split", "=", "5", ")", "\n", "split_rebuilt", "=", "sps", ".", "hstack", "(", "split_list", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "sparse_matrix", ".", "toarray", "(", ")", ",", "split_rebuilt", ".", "toarray", "(", ")", ")", ",", "\"split_rebuilt not matching sparse_matrix\"", "\n", "\n", "\n", "split_list", "=", "split_big_CSR_in_columns", "(", "sparse_matrix", ".", "copy", "(", ")", ",", "num_split", "=", "12", ")", "\n", "split_rebuilt", "=", "sps", ".", "hstack", "(", "split_list", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "sparse_matrix", ".", "toarray", "(", ")", ",", "split_rebuilt", ".", "toarray", "(", ")", ")", ",", "\"split_rebuilt not matching sparse_matrix\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.TagPreprocessing.tagFilter": [[20, 38], ["re.sub", "re.sub", "processedTag.split.split", "set", "nltk.corpus.stopwords.words", "result.append"], "function", ["None"], ["def", "tagFilter", "(", "originalTag", ")", ":", "\n", "\n", "# Remove non alphabetical character and split on spaces", "\n", "    ", "processedTag", "=", "re", ".", "sub", "(", "\"[^a-zA-Z0-9]\"", ",", "\" \"", ",", "originalTag", ")", "\n", "processedTag", "=", "re", ".", "sub", "(", "\" +\"", ",", "\" \"", ",", "processedTag", ")", "\n", "\n", "processedTag", "=", "processedTag", ".", "split", "(", "\" \"", ")", "\n", "\n", "stopwords_set", "=", "set", "(", "stopwords", ".", "words", "(", "'english'", ")", ")", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "for", "tag", "in", "processedTag", ":", "\n", "\n", "        ", "if", "tag", "not", "in", "stopwords_set", ":", "\n", "            ", "result", ".", "append", "(", "tag", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.TagPreprocessing.tagFilterAndStemming": [[42, 64], ["re.sub", "re.sub", "processedTag.split.split", "set", "nltk.stem.PorterStemmer", "nltk.corpus.stopwords.words", "nltk.stem.PorterStemmer.stem", "result.append"], "function", ["None"], ["", "def", "tagFilterAndStemming", "(", "originalTag", ")", ":", "\n", "\n", "# Remove non alphabetical character and split on spaces", "\n", "    ", "processedTag", "=", "re", ".", "sub", "(", "\"[^a-zA-Z0-9]\"", ",", "\" \"", ",", "originalTag", ")", "\n", "processedTag", "=", "re", ".", "sub", "(", "\" +\"", ",", "\" \"", ",", "processedTag", ")", "\n", "\n", "processedTag", "=", "processedTag", ".", "split", "(", "\" \"", ")", "\n", "\n", "stopwords_set", "=", "set", "(", "stopwords", ".", "words", "(", "'english'", ")", ")", "\n", "\n", "stemmer", "=", "PorterStemmer", "(", ")", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "for", "tag", "in", "processedTag", ":", "\n", "\n", "        ", "tag_stemmed", "=", "stemmer", ".", "stem", "(", "tag", ")", "\n", "\n", "if", "tag_stemmed", "not", "in", "stopwords_set", ":", "\n", "            ", "result", ".", "append", "(", "tag_stemmed", ")", "\n", "\n", "", "", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out.__init__": [[59, 80], ["DataSplitter_leave_k_out.DataSplitter_leave_k_out._print", "recsys.Data_manager.DataSplitter.DataSplitter.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "dataReader_object", ":", "_DataReader", ",", "k_out_value", "=", "1", ",", "forbid_new_split", "=", "False", ",", "force_new_split", "=", "False", ",", "use_validation_set", "=", "True", ",", "leave_random_out", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\n        :param dataReader_object:\n        :param n_folds:\n        :param force_new_split:\n        :param forbid_new_split:\n        \"\"\"", "\n", "\n", "\n", "assert", "k_out_value", ">=", "1", ",", "\"{}: k_out_value must be  greater or equal than 1\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n", "self", ".", "k_out_value", "=", "k_out_value", "\n", "self", ".", "use_validation_set", "=", "use_validation_set", "\n", "self", ".", "allow_cold_users", "=", "False", "\n", "self", ".", "removed_cold_users", "=", "None", "\n", "self", ".", "leave_random_out", "=", "leave_random_out", "\n", "\n", "self", ".", "_print", "(", "\"Cold users not allowed\"", ")", "\n", "\n", "super", "(", "DataSplitter_leave_k_out", ",", "self", ")", ".", "__init__", "(", "dataReader_object", ",", "forbid_new_split", "=", "forbid_new_split", ",", "force_new_split", "=", "force_new_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._get_split_subfolder_name": [[83, 96], ["None"], "methods", ["None"], ["", "def", "_get_split_subfolder_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: warm_{n_folds}_fold/\n        \"\"\"", "\n", "\n", "if", "self", ".", "leave_random_out", ":", "\n", "            ", "order_suffix", "=", "\"random\"", "\n", "", "else", ":", "\n", "            ", "order_suffix", "=", "\"last\"", "\n", "\n", "\n", "", "return", "\"leave_{}_out_{}/\"", ".", "format", "(", "self", ".", "k_out_value", ",", "order_suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out.get_statistics_URM": [[98, 126], ["DataSplitter_leave_k_out.DataSplitter_leave_k_out._assert_is_initialized", "DataSplitter_leave_k_out.DataSplitter_leave_k_out._print", "print", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.dataReader_object._get_dataset_name", "recsys.Data_manager.DataReader_utils.compute_density", "recsys.Data_manager.DataReader_utils.compute_density", "recsys.Data_manager.DataReader_utils.compute_density"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density"], ["", "def", "get_statistics_URM", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "n_users", ",", "n_items", "=", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "shape", "\n", "\n", "statistics_string", "=", "\"DataReader: {}\\n\"", "\"\\tNum items: {}\\n\"", "\"\\tNum users: {}\\n\"", "\"\\tTrain \\t\\tinteractions {}, \\tdensity {:.2E}\\n\"", ".", "format", "(", "\n", "self", ".", "dataReader_object", ".", "_get_dataset_name", "(", ")", ",", "\n", "n_items", ",", "\n", "n_users", ",", "\n", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "nnz", ",", "compute_density", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ")", ")", "\n", "\n", "if", "self", ".", "use_validation_set", ":", "\n", "            ", "statistics_string", "+=", "\"\\tValidation \\tinteractions {}, \\tdensity {:.2E}\\n\"", ".", "format", "(", "\n", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "nnz", ",", "compute_density", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ")", ")", "\n", "\n", "\n", "", "statistics_string", "+=", "\"\\tTest \\t\\tinteractions {}, \\tdensity {:.2E}\\n\"", ".", "format", "(", "\n", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "nnz", ",", "compute_density", "(", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ")", ")", "\n", "\n", "\n", "self", ".", "_print", "(", "statistics_string", ")", "\n", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out.get_ICM_from_name": [[130, 132], ["DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_ICM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_ICM_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "return", "self", ".", "SPLIT_ICM_DICT", "[", "ICM_name", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out.get_statistics_ICM": [[134, 154], ["DataSplitter_leave_k_out.DataSplitter_leave_k_out._assert_is_initialized", "len", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_ICM_DICT.items", "print", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.dataReader_object.get_loaded_ICM_names", "print", "recsys.Data_manager.DataReader_utils.compute_density"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density"], ["", "def", "get_statistics_ICM", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "dataReader_object", ".", "get_loaded_ICM_names", "(", ")", ")", ">", "0", ":", "\n", "\n", "            ", "for", "ICM_name", ",", "ICM_object", "in", "self", ".", "SPLIT_ICM_DICT", ".", "items", "(", ")", ":", "\n", "\n", "                ", "n_items", ",", "n_features", "=", "ICM_object", ".", "shape", "\n", "\n", "statistics_string", "=", "\"\\tICM name: {}, Num features: {}, feature occurrences: {}, density {:.2E}\"", ".", "format", "(", "\n", "ICM_name", ",", "\n", "n_features", ",", "\n", "ICM_object", ".", "nnz", ",", "\n", "compute_density", "(", "ICM_object", ")", "\n", ")", "\n", "\n", "print", "(", "statistics_string", ")", "\n", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._assert_is_initialized": [[157, 159], ["None"], "methods", ["None"], ["", "", "def", "_assert_is_initialized", "(", "self", ")", ":", "\n", "         ", "assert", "self", ".", "SPLIT_URM_DICT", "is", "not", "None", ",", "\"{}: Unable to load data split. The split has not been generated yet, call the load_data function to do so.\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out.get_holdout_split": [[161, 172], ["DataSplitter_leave_k_out.DataSplitter_leave_k_out._assert_is_initialized", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT[].copy", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT[].copy", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_holdout_split", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The train set is defined as all data except the one of that fold, which is the test\n        :return: URM_train, URM_validation, URM_test\n        \"\"\"", "\n", "\n", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "return", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "copy", "(", ")", ",", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._split_data_from_original_dataset": [[174, 234], ["DataSplitter_leave_k_out.DataSplitter_leave_k_out.dataReader_object.load_data", "DataSplitter_leave_k_out.DataSplitter_leave_k_out._load_from_DataReader_ICM_and_mappers", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.loaded_dataset.get_URM_all", "scipy.csr_matrix", "recsys.Data_manager.split_functions.split_train_validation_leave_k_out.split_train_leave_k_out_user_wise", "DataSplitter_leave_k_out.DataSplitter_leave_k_out._save_split", "DataSplitter_leave_k_out.DataSplitter_leave_k_out._print", "numpy.ediff1d", "numpy.logical_not", "DataSplitter_leave_k_out.DataSplitter_leave_k_out._print", "recsys.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_UCM_DICT.items", "numpy.arange", "user_to_preserve.sum", "len", "user_to_preserve.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._load_from_DataReader_ICM_and_mappers", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_URM_all", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_leave_k_out.split_train_leave_k_out_user_wise", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._save_split", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens"], ["", "def", "_split_data_from_original_dataset", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "        ", "self", ".", "loaded_dataset", "=", "self", ".", "dataReader_object", ".", "load_data", "(", ")", "\n", "self", ".", "_load_from_DataReader_ICM_and_mappers", "(", "self", ".", "loaded_dataset", ")", "\n", "\n", "\n", "URM", "=", "self", ".", "loaded_dataset", ".", "get_URM_all", "(", ")", "\n", "URM", "=", "sps", ".", "csr_matrix", "(", "URM", ")", "\n", "\n", "\n", "split_number", "=", "2", "\n", "if", "self", ".", "use_validation_set", ":", "\n", "            ", "split_number", "+=", "1", "\n", "\n", "# Min interactions at least self.k_out_value for each split +1 for train and validation", "\n", "", "min_user_interactions", "=", "(", "split_number", "-", "1", ")", "*", "self", ".", "k_out_value", "+", "1", "\n", "\n", "if", "not", "self", ".", "allow_cold_users", ":", "\n", "            ", "user_interactions", "=", "np", ".", "ediff1d", "(", "URM", ".", "indptr", ")", "\n", "user_to_preserve", "=", "user_interactions", ">=", "min_user_interactions", "\n", "self", ".", "removed_cold_users", "=", "np", ".", "logical_not", "(", "user_to_preserve", ")", "\n", "\n", "self", ".", "_print", "(", "\"Removing {} ({:.2f} %) of {} users because they have less than the {} interactions required for {} splits ({} for test [and validation if requested] +1 for train)\"", ".", "format", "(", "\n", "URM", ".", "shape", "[", "0", "]", "-", "user_to_preserve", ".", "sum", "(", ")", ",", "(", "1", "-", "user_to_preserve", ".", "sum", "(", ")", "/", "URM", ".", "shape", "[", "0", "]", ")", "*", "100", ",", "URM", ".", "shape", "[", "0", "]", ",", "min_user_interactions", ",", "split_number", ",", "self", ".", "k_out_value", ")", ")", "\n", "\n", "URM", "=", "URM", "[", "user_to_preserve", ",", ":", "]", "\n", "\n", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"user_original_ID_to_index\"", "]", "=", "reconcile_mapper_with_removed_tokens", "(", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"user_original_ID_to_index\"", "]", ",", "\n", "np", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "removed_cold_users", ")", ",", "dtype", "=", "np", ".", "int", ")", "[", "self", ".", "removed_cold_users", "]", ")", "\n", "\n", "for", "UCM_name", ",", "UCM_object", "in", "self", ".", "SPLIT_UCM_DICT", ".", "items", "(", ")", ":", "\n", "                ", "UCM_object", "=", "UCM_object", "[", "user_to_preserve", ",", ":", "]", "\n", "self", ".", "SPLIT_UCM_DICT", "[", "UCM_name", "]", "=", "UCM_object", "\n", "\n", "\n", "", "", "splitted_data", "=", "split_train_leave_k_out_user_wise", "(", "URM", ",", "k_out", "=", "self", ".", "k_out_value", ",", "\n", "use_validation_set", "=", "self", ".", "use_validation_set", ",", "\n", "leave_random_out", "=", "self", ".", "leave_random_out", ")", "\n", "\n", "if", "self", ".", "use_validation_set", ":", "\n", "            ", "URM_train", ",", "URM_validation", ",", "URM_test", "=", "splitted_data", "\n", "\n", "", "else", ":", "\n", "            ", "URM_train", ",", "URM_test", "=", "splitted_data", "\n", "\n", "\n", "\n", "", "self", ".", "SPLIT_URM_DICT", "=", "{", "\n", "\"URM_train\"", ":", "URM_train", ",", "\n", "\"URM_test\"", ":", "URM_test", ",", "\n", "}", "\n", "\n", "if", "self", ".", "use_validation_set", ":", "\n", "            ", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", "=", "URM_validation", "\n", "\n", "\n", "\n", "", "self", ".", "_save_split", "(", "save_folder_path", ")", "\n", "\n", "self", ".", "_print", "(", "\"Split complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._save_split": [[238, 288], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "len", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "len", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "_save_split", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "        ", "if", "save_folder_path", ":", "\n", "\n", "            ", "if", "self", ".", "allow_cold_users", ":", "\n", "                ", "allow_cold_users_suffix", "=", "\"allow_cold_users\"", "\n", "\n", "", "else", ":", "\n", "                ", "allow_cold_users_suffix", "=", "\"only_warm_users\"", "\n", "\n", "", "if", "self", ".", "use_validation_set", ":", "\n", "                ", "validation_set_suffix", "=", "\"use_validation_set\"", "\n", "", "else", ":", "\n", "                ", "validation_set_suffix", "=", "\"no_validation_set\"", "\n", "\n", "\n", "", "name_suffix", "=", "\"_{}_{}\"", ".", "format", "(", "allow_cold_users_suffix", ",", "validation_set_suffix", ")", "\n", "\n", "split_parameters_dict", "=", "{", "\"k_out_value\"", ":", "self", ".", "k_out_value", ",", "\n", "\"allow_cold_users\"", ":", "self", ".", "allow_cold_users", ",", "\n", "\"removed_cold_users\"", ":", "self", ".", "removed_cold_users", ",", "\n", "}", "\n", "\n", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "split_parameters_dict", ",", "\n", "file_name", "=", "\"split_parameters\"", "+", "name_suffix", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", ",", "\n", "file_name", "=", "\"split_mappers\"", "+", "name_suffix", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_URM_DICT", ",", "\n", "file_name", "=", "\"split_URM\"", "+", "name_suffix", ")", "\n", "\n", "if", "len", "(", "self", ".", "SPLIT_ICM_DICT", ")", ">", "0", ":", "\n", "                ", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_ICM_DICT", ",", "\n", "file_name", "=", "\"split_ICM\"", "+", "name_suffix", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_ICM_MAPPER_DICT", ",", "\n", "file_name", "=", "\"split_ICM_mappers\"", "+", "name_suffix", ")", "\n", "\n", "\n", "", "if", "len", "(", "self", ".", "SPLIT_UCM_DICT", ")", ">", "0", ":", "\n", "                ", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_UCM_DICT", ",", "\n", "file_name", "=", "\"split_UCM\"", "+", "name_suffix", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "SPLIT_UCM_MAPPER_DICT", ",", "\n", "file_name", "=", "\"split_UCM_mappers\"", "+", "name_suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._load_previously_built_split_and_attributes": [[290, 333], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data.keys", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.__setattr__", "len", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "len", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.dataReader_object.get_loaded_ICM_names", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.dataReader_object.get_loaded_UCM_names"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_UCM_names"], ["", "", "", "def", "_load_previously_built_split_and_attributes", "(", "self", ",", "save_folder_path", ")", ":", "\n", "        ", "\"\"\"\n        Loads all URM and ICM\n        :return:\n        \"\"\"", "\n", "\n", "\n", "if", "self", ".", "use_validation_set", ":", "\n", "            ", "validation_set_suffix", "=", "\"use_validation_set\"", "\n", "", "else", ":", "\n", "            ", "validation_set_suffix", "=", "\"no_validation_set\"", "\n", "\n", "", "if", "self", ".", "allow_cold_users", ":", "\n", "            ", "allow_cold_users_suffix", "=", "\"allow_cold_users\"", "\n", "", "else", ":", "\n", "            ", "allow_cold_users_suffix", "=", "\"only_warm_users\"", "\n", "\n", "\n", "", "name_suffix", "=", "\"_{}_{}\"", ".", "format", "(", "allow_cold_users_suffix", ",", "validation_set_suffix", ")", "\n", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "split_parameters_dict", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_parameters\"", "+", "name_suffix", ")", "\n", "\n", "for", "attrib_name", "in", "split_parameters_dict", ".", "keys", "(", ")", ":", "\n", "             ", "self", ".", "__setattr__", "(", "attrib_name", ",", "split_parameters_dict", "[", "attrib_name", "]", ")", "\n", "\n", "\n", "", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_mappers\"", "+", "name_suffix", ")", "\n", "\n", "self", ".", "SPLIT_URM_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_URM\"", "+", "name_suffix", ")", "\n", "\n", "if", "len", "(", "self", ".", "dataReader_object", ".", "get_loaded_ICM_names", "(", ")", ")", ">", "0", ":", "\n", "            ", "self", ".", "SPLIT_ICM_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_ICM\"", "+", "name_suffix", ")", "\n", "\n", "self", ".", "SPLIT_ICM_MAPPER_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_ICM_mappers\"", "+", "name_suffix", ")", "\n", "\n", "\n", "", "if", "len", "(", "self", ".", "dataReader_object", ".", "get_loaded_UCM_names", "(", ")", ")", ">", "0", ":", "\n", "            ", "self", ".", "SPLIT_UCM_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_UCM\"", "+", "name_suffix", ")", "\n", "\n", "self", ".", "SPLIT_UCM_MAPPER_DICT", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_UCM_mappers\"", "+", "name_suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_leave_k_out.DataSplitter_leave_k_out._verify_data_consistency": [[341, 417], ["DataSplitter_leave_k_out.DataSplitter_leave_k_out._assert_is_initialized", "all", "all", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT.items", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT[].copy", "numpy.ediff1d", "numpy.all", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT[].copy", "numpy.ediff1d", "recsys.Data_manager.data_consistency_check.assert_disjoint_matrices", "recsys.Data_manager.data_consistency_check.assert_URM_ICM_mapper_consistency", "URM_to_load_list.append", "len", "len", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT[].copy", "numpy.ediff1d", "numpy.all", "numpy.all", "list", "len", "len", "scipy.csr_matrix", "scipy.csr_matrix", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT.values", "DataSplitter_leave_k_out.DataSplitter_leave_k_out.SPLIT_URM_DICT.keys", "scipy.csr_matrix"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.assertions_on_data_for_experiments.assert_disjoint_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.data_consistency_check.assert_URM_ICM_mapper_consistency", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "_verify_data_consistency", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "print_preamble", "=", "\"{} consistency check: \"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n", "URM_to_load_list", "=", "[", "\"URM_train\"", ",", "\"URM_test\"", "]", "\n", "\n", "if", "self", ".", "use_validation_set", ":", "\n", "            ", "URM_to_load_list", ".", "append", "(", "\"URM_validation\"", ")", "\n", "\n", "\n", "", "assert", "len", "(", "self", ".", "SPLIT_URM_DICT", ")", "==", "len", "(", "URM_to_load_list", ")", ",", "print_preamble", "+", "\"The available URM are not as many as they are supposed to be. URMs are {}, expected URMs are {}\"", ".", "format", "(", "len", "(", "self", ".", "SPLIT_URM_DICT", ")", ",", "len", "(", "URM_to_load_list", ")", ")", "\n", "\n", "\n", "assert", "all", "(", "URM_name", "in", "self", ".", "SPLIT_URM_DICT", "for", "URM_name", "in", "URM_to_load_list", ")", ",", "print_preamble", "+", "\"Not all URMs have been created\"", "\n", "assert", "all", "(", "URM_name", "in", "URM_to_load_list", "for", "URM_name", "in", "self", ".", "SPLIT_URM_DICT", ".", "keys", "(", ")", ")", ",", "print_preamble", "+", "\"The split contains URMs that should not exist\"", "\n", "\n", "\n", "URM_shape", "=", "None", "\n", "\n", "for", "URM_name", ",", "URM_object", "in", "self", ".", "SPLIT_URM_DICT", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "URM_shape", "is", "None", ":", "\n", "                ", "URM_shape", "=", "URM_object", ".", "shape", "\n", "\n", "n_users", ",", "n_items", "=", "URM_shape", "\n", "\n", "assert", "n_users", "!=", "0", ",", "print_preamble", "+", "\"Number of users in URM is 0\"", "\n", "assert", "n_items", "!=", "0", ",", "print_preamble", "+", "\"Number of items in URM is 0\"", "\n", "\n", "", "assert", "URM_shape", "==", "URM_object", ".", "shape", ",", "print_preamble", "+", "\"URM shape is inconsistent\"", "\n", "\n", "\n", "", "assert", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "nnz", "!=", "0", ",", "print_preamble", "+", "\"Number of interactions in URM Train is 0\"", "\n", "assert", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "nnz", "!=", "0", ",", "print_preamble", "+", "\"Number of interactions in URM Test is 0\"", "\n", "\n", "\n", "URM", "=", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", ".", "copy", "(", ")", "\n", "user_interactions", "=", "np", ".", "ediff1d", "(", "sps", ".", "csr_matrix", "(", "URM", ")", ".", "indptr", ")", "\n", "\n", "assert", "np", ".", "all", "(", "user_interactions", "==", "self", ".", "k_out_value", ")", ",", "print_preamble", "+", "\"Not all users have the desired number of interactions in URM_test, {} users out of {}\"", ".", "format", "(", "\n", "(", "user_interactions", "!=", "self", ".", "k_out_value", ")", ".", "sum", "(", ")", ",", "n_users", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "use_validation_set", ":", "\n", "            ", "assert", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "nnz", "!=", "0", ",", "print_preamble", "+", "\"Number of interactions in URM Validation is 0\"", "\n", "\n", "URM", "=", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_validation\"", "]", ".", "copy", "(", ")", "\n", "user_interactions", "=", "np", ".", "ediff1d", "(", "sps", ".", "csr_matrix", "(", "URM", ")", ".", "indptr", ")", "\n", "\n", "assert", "np", ".", "all", "(", "user_interactions", "==", "self", ".", "k_out_value", ")", ",", "print_preamble", "+", "\"Not all users have the desired number of interactions in URM_validation, {} users out of {}\"", ".", "format", "(", "\n", "(", "user_interactions", "!=", "self", ".", "k_out_value", ")", ".", "sum", "(", ")", ",", "n_users", ")", "\n", "\n", "\n", "\n", "", "URM", "=", "self", ".", "SPLIT_URM_DICT", "[", "\"URM_train\"", "]", ".", "copy", "(", ")", "\n", "user_interactions", "=", "np", ".", "ediff1d", "(", "sps", ".", "csr_matrix", "(", "URM", ")", ".", "indptr", ")", "\n", "\n", "if", "not", "self", ".", "allow_cold_users", ":", "\n", "            ", "assert", "np", ".", "all", "(", "user_interactions", "!=", "0", ")", ",", "print_preamble", "+", "\"Cold users exist despite not being allowed as per DataSplitter parameters, {} users out of {}\"", ".", "format", "(", "\n", "(", "user_interactions", "==", "0", ")", ".", "sum", "(", ")", ",", "n_users", ")", "\n", "\n", "\n", "", "assert", "assert_disjoint_matrices", "(", "list", "(", "self", ".", "SPLIT_URM_DICT", ".", "values", "(", ")", ")", ")", "\n", "\n", "assert_URM_ICM_mapper_consistency", "(", "URM_DICT", "=", "self", ".", "SPLIT_URM_DICT", ",", "\n", "user_original_ID_to_index", "=", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"user_original_ID_to_index\"", "]", ",", "\n", "item_original_ID_to_index", "=", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "[", "\"item_original_ID_to_index\"", "]", ",", "\n", "ICM_DICT", "=", "self", ".", "SPLIT_ICM_DICT", ",", "\n", "ICM_MAPPER_DICT", "=", "self", ".", "SPLIT_ICM_MAPPER_DICT", ",", "\n", "UCM_DICT", "=", "self", ".", "SPLIT_UCM_DICT", ",", "\n", "UCM_MAPPER_DICT", "=", "self", ".", "SPLIT_UCM_MAPPER_DICT", ",", "\n", "DATA_SPLITTER_NAME", "=", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.__init__": [[14, 32], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "auto_create_col_mapper", "=", "False", ",", "auto_create_row_mapper", "=", "False", ",", "n_rows", "=", "None", ",", "n_cols", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "IncrementalSparseMatrix_ListBased", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_row_list", "=", "[", "]", "\n", "self", ".", "_col_list", "=", "[", "]", "\n", "self", ".", "_data_list", "=", "[", "]", "\n", "\n", "self", ".", "_n_rows", "=", "n_rows", "\n", "self", ".", "_n_cols", "=", "n_cols", "\n", "self", ".", "_auto_create_column_mapper", "=", "auto_create_col_mapper", "\n", "self", ".", "_auto_create_row_mapper", "=", "auto_create_row_mapper", "\n", "\n", "if", "self", ".", "_auto_create_column_mapper", ":", "\n", "            ", "self", ".", "_column_original_ID_to_index", "=", "{", "}", "\n", "\n", "", "if", "self", ".", "_auto_create_row_mapper", ":", "\n", "            ", "self", ".", "_row_original_ID_to_index", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.add_data_lists": [[34, 46], ["IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._row_list.extend", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._col_list.extend", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._data_list.extend", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._get_column_index", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._get_row_index", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_column_index", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_row_index"], ["", "", "def", "add_data_lists", "(", "self", ",", "row_list_to_add", ",", "col_list_to_add", ",", "data_list_to_add", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "row_list_to_add", ")", "==", "len", "(", "col_list_to_add", ")", "and", "len", "(", "row_list_to_add", ")", "==", "len", "(", "data_list_to_add", ")", ",", "\"IncrementalSparseMatrix: element lists must have different length\"", "\n", "\n", "\n", "col_list_index", "=", "[", "self", ".", "_get_column_index", "(", "column_id", ")", "for", "column_id", "in", "col_list_to_add", "]", "\n", "row_list_index", "=", "[", "self", ".", "_get_row_index", "(", "row_id", ")", "for", "row_id", "in", "row_list_to_add", "]", "\n", "\n", "self", ".", "_row_list", ".", "extend", "(", "row_list_index", ")", "\n", "self", ".", "_col_list", ".", "extend", "(", "col_list_index", ")", "\n", "self", ".", "_data_list", ".", "extend", "(", "data_list_to_add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.add_single_row": [[50, 60], ["len", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._get_row_index", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._row_list.extend", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._col_list.extend", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._data_list.extend", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._get_column_index"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_row_index", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_column_index"], ["", "def", "add_single_row", "(", "self", ",", "row_id", ",", "col_list", ",", "data", "=", "1.0", ")", ":", "\n", "\n", "        ", "n_elements", "=", "len", "(", "col_list", ")", "\n", "\n", "col_list_index", "=", "[", "self", ".", "_get_column_index", "(", "column_id", ")", "for", "column_id", "in", "col_list", "]", "\n", "row_index", "=", "self", ".", "_get_row_index", "(", "row_id", ")", "\n", "\n", "self", ".", "_row_list", ".", "extend", "(", "[", "row_index", "]", "*", "n_elements", ")", "\n", "self", ".", "_col_list", ".", "extend", "(", "col_list_index", ")", "\n", "self", ".", "_data_list", ".", "extend", "(", "[", "data", "]", "*", "n_elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper": [[63, 76], ["range", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._column_original_ID_to_index.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_column_token_to_id_mapper", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_auto_create_column_mapper", ":", "\n", "            ", "return", "self", ".", "_column_original_ID_to_index", ".", "copy", "(", ")", "\n", "\n", "\n", "\n", "", "dummy_column_original_ID_to_index", "=", "{", "}", "\n", "\n", "for", "col", "in", "range", "(", "self", ".", "_n_cols", ")", ":", "\n", "            ", "dummy_column_original_ID_to_index", "[", "col", "]", "=", "col", "\n", "\n", "", "return", "dummy_column_original_ID_to_index", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper": [[79, 92], ["range", "IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._row_original_ID_to_index.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_row_token_to_id_mapper", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_auto_create_row_mapper", ":", "\n", "            ", "return", "self", ".", "_row_original_ID_to_index", ".", "copy", "(", ")", "\n", "\n", "\n", "\n", "", "dummy_row_original_ID_to_index", "=", "{", "}", "\n", "\n", "for", "row", "in", "range", "(", "self", ".", "_n_rows", ")", ":", "\n", "            ", "dummy_row_original_ID_to_index", "[", "row", "]", "=", "row", "\n", "\n", "", "return", "dummy_row_original_ID_to_index", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._get_column_index": [[95, 110], ["len"], "methods", ["None"], ["", "def", "_get_column_index", "(", "self", ",", "column_id", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "_auto_create_column_mapper", ":", "\n", "            ", "column_index", "=", "column_id", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "if", "column_id", "in", "self", ".", "_column_original_ID_to_index", ":", "\n", "                ", "column_index", "=", "self", ".", "_column_original_ID_to_index", "[", "column_id", "]", "\n", "\n", "", "else", ":", "\n", "                ", "column_index", "=", "len", "(", "self", ".", "_column_original_ID_to_index", ")", "\n", "self", ".", "_column_original_ID_to_index", "[", "column_id", "]", "=", "column_index", "\n", "\n", "", "", "return", "column_index", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased._get_row_index": [[112, 127], ["len"], "methods", ["None"], ["", "def", "_get_row_index", "(", "self", ",", "row_id", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "_auto_create_row_mapper", ":", "\n", "            ", "row_index", "=", "row_id", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "if", "row_id", "in", "self", ".", "_row_original_ID_to_index", ":", "\n", "                ", "row_index", "=", "self", ".", "_row_original_ID_to_index", "[", "row_id", "]", "\n", "\n", "", "else", ":", "\n", "                ", "row_index", "=", "len", "(", "self", ".", "_row_original_ID_to_index", ")", "\n", "self", ".", "_row_original_ID_to_index", "[", "row_id", "]", "=", "row_index", "\n", "\n", "", "", "return", "row_index", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_nnz": [[129, 131], ["len"], "methods", ["None"], ["", "def", "get_nnz", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_row_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_SparseMatrix": [[134, 149], ["scipy.csr_matrix", "scipy.csr_matrix.eliminate_zeros", "max", "max"], "methods", ["None"], ["", "def", "get_SparseMatrix", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_n_rows", "is", "None", ":", "\n", "            ", "self", ".", "_n_rows", "=", "max", "(", "self", ".", "_row_list", ")", "+", "1", "\n", "\n", "", "if", "self", ".", "_n_cols", "is", "None", ":", "\n", "            ", "self", ".", "_n_cols", "=", "max", "(", "self", ".", "_col_list", ")", "+", "1", "\n", "\n", "", "shape", "=", "(", "self", ".", "_n_rows", ",", "self", ".", "_n_cols", ")", "\n", "\n", "sparseMatrix", "=", "sps", ".", "csr_matrix", "(", "(", "self", ".", "_data_list", ",", "(", "self", ".", "_row_list", ",", "self", ".", "_col_list", ")", ")", ",", "shape", "=", "shape", ")", "\n", "sparseMatrix", ".", "eliminate_zeros", "(", ")", "\n", "\n", "\n", "return", "sparseMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.__init__": [[160, 177], ["IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.__init__", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.iinfo"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "auto_create_col_mapper", "=", "False", ",", "auto_create_row_mapper", "=", "False", ",", "n_rows", "=", "None", ",", "n_cols", "=", "None", ",", "dtype", "=", "np", ".", "float64", ")", ":", "\n", "\n", "        ", "super", "(", "IncrementalSparseMatrix", ",", "self", ")", ".", "__init__", "(", "auto_create_col_mapper", "=", "auto_create_col_mapper", ",", "\n", "auto_create_row_mapper", "=", "auto_create_row_mapper", ",", "\n", "n_rows", "=", "n_rows", ",", "\n", "n_cols", "=", "n_cols", ")", "\n", "\n", "self", ".", "_dataBlock", "=", "10000000", "\n", "self", ".", "_next_cell_pointer", "=", "0", "\n", "\n", "self", ".", "_dtype_data", "=", "dtype", "\n", "self", ".", "_dtype_coordinates", "=", "np", ".", "uint32", "\n", "self", ".", "_max_value_of_coordinate_dtype", "=", "np", ".", "iinfo", "(", "self", ".", "_dtype_coordinates", ")", ".", "max", "\n", "\n", "self", ".", "_row_array", "=", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_coordinates", ")", "\n", "self", ".", "_col_array", "=", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_coordinates", ")", "\n", "self", ".", "_data_array", "=", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_nnz": [[179, 181], ["None"], "methods", ["None"], ["", "def", "get_nnz", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_next_cell_pointer", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists": [[183, 204], ["range", "len", "IncrementalSparseMatrix.IncrementalSparseMatrix._get_row_index", "IncrementalSparseMatrix.IncrementalSparseMatrix._get_column_index", "len", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_row_index", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_column_index"], ["", "def", "add_data_lists", "(", "self", ",", "row_list_to_add", ",", "col_list_to_add", ",", "data_list_to_add", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "row_list_to_add", ")", "==", "len", "(", "col_list_to_add", ")", "and", "len", "(", "row_list_to_add", ")", "==", "len", "(", "data_list_to_add", ")", ",", "\"IncrementalSparseMatrix: element lists must have the same length\"", "\n", "\n", "for", "data_point_index", "in", "range", "(", "len", "(", "row_list_to_add", ")", ")", ":", "\n", "\n", "            ", "if", "self", ".", "_next_cell_pointer", "==", "len", "(", "self", ".", "_row_array", ")", ":", "\n", "                ", "self", ".", "_row_array", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_row_array", ",", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_coordinates", ")", ")", ")", "\n", "self", ".", "_col_array", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_col_array", ",", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_coordinates", ")", ")", ")", "\n", "self", ".", "_data_array", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_data_array", ",", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_data", ")", ")", ")", "\n", "\n", "\n", "", "row_index", "=", "self", ".", "_get_row_index", "(", "row_list_to_add", "[", "data_point_index", "]", ")", "\n", "col_index", "=", "self", ".", "_get_column_index", "(", "col_list_to_add", "[", "data_point_index", "]", ")", "\n", "\n", "self", ".", "_row_array", "[", "self", ".", "_next_cell_pointer", "]", "=", "row_index", "\n", "self", ".", "_col_array", "[", "self", ".", "_next_cell_pointer", "]", "=", "col_index", "\n", "self", ".", "_data_array", "[", "self", ".", "_next_cell_pointer", "]", "=", "data_list_to_add", "[", "data_point_index", "]", "\n", "\n", "self", ".", "_next_cell_pointer", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row": [[208, 215], ["len", "IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists"], ["", "", "def", "add_single_row", "(", "self", ",", "row_index", ",", "col_list", ",", "data", "=", "1.0", ")", ":", "\n", "\n", "        ", "n_elements", "=", "len", "(", "col_list", ")", "\n", "\n", "self", ".", "add_data_lists", "(", "[", "row_index", "]", "*", "n_elements", ",", "\n", "col_list", ",", "\n", "[", "data", "]", "*", "n_elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix": [[220, 239], ["scipy.csr_matrix", "scipy.csr_matrix.eliminate_zeros", "IncrementalSparseMatrix.IncrementalSparseMatrix._row_array.max", "IncrementalSparseMatrix.IncrementalSparseMatrix._col_array.max"], "methods", ["None"], ["", "def", "get_SparseMatrix", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_n_rows", "is", "None", ":", "\n", "            ", "self", ".", "_n_rows", "=", "self", ".", "_row_array", ".", "max", "(", ")", "+", "1", "\n", "\n", "", "if", "self", ".", "_n_cols", "is", "None", ":", "\n", "            ", "self", ".", "_n_cols", "=", "self", ".", "_col_array", ".", "max", "(", ")", "+", "1", "\n", "\n", "", "shape", "=", "(", "self", ".", "_n_rows", ",", "self", ".", "_n_cols", ")", "\n", "\n", "sparseMatrix", "=", "sps", ".", "csr_matrix", "(", "(", "self", ".", "_data_array", "[", ":", "self", ".", "_next_cell_pointer", "]", ",", "\n", "(", "self", ".", "_row_array", "[", ":", "self", ".", "_next_cell_pointer", "]", ",", "self", ".", "_col_array", "[", ":", "self", ".", "_next_cell_pointer", "]", ")", ")", ",", "\n", "shape", "=", "shape", ",", "\n", "dtype", "=", "self", ".", "_dtype_data", ")", "\n", "\n", "sparseMatrix", ".", "eliminate_zeros", "(", ")", "\n", "\n", "\n", "return", "sparseMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.__init__": [[253, 305], ["IncrementalSparseMatrix.IncrementalSparseMatrix.__init__", "isinstance", "isinstance", "preinitialized_col_mapper.copy", "preinitialized_row_mapper.copy", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "__init__", "(", "self", ",", "preinitialized_col_mapper", "=", "None", ",", "preinitialized_row_mapper", "=", "None", ",", "\n", "on_new_col", "=", "\"add\"", ",", "on_new_row", "=", "\"add\"", ",", "dtype", "=", "np", ".", "float64", ")", ":", "\n", "        ", "\"\"\"\n        Possible behaviour is:\n        - Automatically add new ids:    if_new_col = \"add\" and predefined_col_mapper = None or predefined_col_mapper = {dict}\n        - Ignore new ids                if_new_col = \"ignore\" and predefined_col_mapper = {dict}\n        :param preinitialized_col_mapper:\n        :param preinitialized_row_mapper:\n        :param on_new_col:\n        :param on_new_row:\n        :param n_rows:\n        :param n_cols:\n        \"\"\"", "\n", "\n", "super", "(", "IncrementalSparseMatrix_FilterIDs", ",", "self", ")", ".", "__init__", "(", "dtype", "=", "dtype", ")", "\n", "\n", "self", ".", "_row_list", "=", "[", "]", "\n", "self", ".", "_col_list", "=", "[", "]", "\n", "self", ".", "_data_list", "=", "[", "]", "\n", "\n", "assert", "on_new_col", "in", "[", "\"add\"", ",", "\"ignore\"", "]", ",", "\"IncrementalSparseMatrix: if_new_col value not recognized, allowed values are 'add', 'ignore', provided was '{}'\"", ".", "format", "(", "on_new_col", ")", "\n", "assert", "on_new_row", "in", "[", "\"add\"", ",", "\"ignore\"", "]", ",", "\"IncrementalSparseMatrix: if_new_row value not recognized, allowed values are 'add', 'ignore', provided was '{}'\"", ".", "format", "(", "on_new_row", ")", "\n", "\n", "if", "on_new_col", "==", "\"add\"", ":", "\n", "            ", "assert", "preinitialized_col_mapper", "is", "None", "or", "isinstance", "(", "preinitialized_col_mapper", ",", "dict", ")", ",", "\"IncrementalSparseMatrix: if on_new_col is 'add' then preinitialized_col_mapper must be either 'None' or contain a dictionary\"", "\n", "\n", "", "if", "on_new_row", "==", "\"add\"", ":", "\n", "            ", "assert", "preinitialized_row_mapper", "is", "None", "or", "isinstance", "(", "preinitialized_row_mapper", ",", "dict", ")", ",", "\"IncrementalSparseMatrix: if on_new_row is 'add' then preinitialized_row_mapper must be either 'None' or contain a dictionary\"", "\n", "\n", "", "if", "on_new_col", "==", "\"ignore\"", ":", "\n", "            ", "assert", "isinstance", "(", "preinitialized_col_mapper", ",", "dict", ")", ",", "\"IncrementalSparseMatrix: if on_new_col is 'ignore' then preinitialized_col_mapper must be a dictionary\"", "\n", "\n", "", "if", "on_new_row", "==", "\"ignore\"", ":", "\n", "            ", "assert", "isinstance", "(", "preinitialized_row_mapper", ",", "dict", ")", ",", "\"IncrementalSparseMatrix: if on_new_row is 'ignore' then preinitialized_row_mapper must be a dictionary\"", "\n", "\n", "\n", "", "self", ".", "_on_new_col_add_flag", "=", "on_new_col", "==", "\"add\"", "\n", "self", ".", "_on_new_row_add_flag", "=", "on_new_row", "==", "\"add\"", "\n", "\n", "self", ".", "_auto_create_row_mapper", "=", "True", "\n", "self", ".", "_auto_create_column_mapper", "=", "True", "\n", "\n", "\n", "if", "preinitialized_col_mapper", "is", "None", ":", "\n", "            ", "self", ".", "_column_original_ID_to_index", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "_column_original_ID_to_index", "=", "preinitialized_col_mapper", ".", "copy", "(", ")", "\n", "\n", "", "if", "preinitialized_row_mapper", "is", "None", ":", "\n", "            ", "self", ".", "_row_original_ID_to_index", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "_row_original_ID_to_index", "=", "preinitialized_row_mapper", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_column_index": [[309, 322], ["len"], "methods", ["None"], ["", "", "def", "_get_column_index", "(", "self", ",", "column_id", ")", ":", "\n", "\n", "        ", "if", "column_id", "in", "self", ".", "_column_original_ID_to_index", ":", "\n", "            ", "column_index", "=", "self", ".", "_column_original_ID_to_index", "[", "column_id", "]", "\n", "\n", "", "elif", "self", ".", "_on_new_col_add_flag", ":", "\n", "            ", "column_index", "=", "len", "(", "self", ".", "_column_original_ID_to_index", ")", "\n", "self", ".", "_column_original_ID_to_index", "[", "column_id", "]", "=", "column_index", "\n", "\n", "", "else", ":", "\n", "            ", "column_index", "=", "None", "\n", "\n", "", "return", "column_index", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_row_index": [[326, 339], ["len"], "methods", ["None"], ["", "def", "_get_row_index", "(", "self", ",", "row_id", ")", ":", "\n", "\n", "        ", "if", "row_id", "in", "self", ".", "_row_original_ID_to_index", ":", "\n", "            ", "row_index", "=", "self", ".", "_row_original_ID_to_index", "[", "row_id", "]", "\n", "\n", "", "elif", "self", ".", "_on_new_row_add_flag", ":", "\n", "            ", "row_index", "=", "len", "(", "self", ".", "_row_original_ID_to_index", ")", "\n", "self", ".", "_row_original_ID_to_index", "[", "row_id", "]", "=", "row_index", "\n", "\n", "", "else", ":", "\n", "            ", "row_index", "=", "None", "\n", "\n", "", "return", "row_index", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists": [[343, 368], ["range", "len", "IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_row_index", "IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_column_index", "len", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_row_index", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs._get_column_index"], ["", "def", "add_data_lists", "(", "self", ",", "row_list_to_add", ",", "col_list_to_add", ",", "data_list_to_add", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "row_list_to_add", ")", "==", "len", "(", "col_list_to_add", ")", "and", "len", "(", "row_list_to_add", ")", "==", "len", "(", "data_list_to_add", ")", ",", "\"IncrementalSparseMatrix: element lists must have different length\"", "\n", "\n", "\n", "for", "data_point_index", "in", "range", "(", "len", "(", "row_list_to_add", ")", ")", ":", "\n", "\n", "            ", "if", "self", ".", "_next_cell_pointer", "==", "len", "(", "self", ".", "_row_array", ")", ":", "\n", "                ", "self", ".", "_row_array", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_row_array", ",", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_coordinates", ")", ")", ")", "\n", "self", ".", "_col_array", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_col_array", ",", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_coordinates", ")", ")", ")", "\n", "self", ".", "_data_array", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_data_array", ",", "np", ".", "zeros", "(", "self", ".", "_dataBlock", ",", "dtype", "=", "self", ".", "_dtype_data", ")", ")", ")", "\n", "\n", "\n", "", "row_index", "=", "self", ".", "_get_row_index", "(", "row_list_to_add", "[", "data_point_index", "]", ")", "\n", "col_index", "=", "self", ".", "_get_column_index", "(", "col_list_to_add", "[", "data_point_index", "]", ")", "\n", "\n", "\n", "if", "row_index", "is", "not", "None", "and", "col_index", "is", "not", "None", ":", "\n", "\n", "                ", "self", ".", "_row_array", "[", "self", ".", "_next_cell_pointer", "]", "=", "row_index", "\n", "self", ".", "_col_array", "[", "self", ".", "_next_cell_pointer", "]", "=", "col_index", "\n", "self", ".", "_data_array", "[", "self", ".", "_next_cell_pointer", "]", "=", "data_list_to_add", "[", "data_point_index", "]", "\n", "\n", "self", ".", "_next_cell_pointer", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix": [[371, 379], ["len", "len", "IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix"], ["", "", "", "def", "get_SparseMatrix", "(", "self", ")", ":", "\n", "\n", "# Set fixed dimension len to ensure that the matrix is not smaller than the number of entries in the dictionary", "\n", "        ", "self", ".", "_n_rows", "=", "len", "(", "self", ".", "_row_original_ID_to_index", ")", "\n", "self", ".", "_n_cols", "=", "len", "(", "self", ".", "_column_original_ID_to_index", ")", "\n", "\n", "\n", "return", "super", "(", "IncrementalSparseMatrix_FilterIDs", ",", "self", ")", ".", "get_SparseMatrix", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader.__init__": [[57, 66], ["object.__init__", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "DataReader.DataReader._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["def", "__init__", "(", "self", ",", "reload_from_original_data", "=", "False", ")", ":", "\n", "        ", "super", "(", "DataReader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ",", "self", ".", "__DATASET_SPLIT_SUBFOLDER", ")", "\n", "self", ".", "DATASET_OFFLINE_ROOT_FOLDER", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ",", "self", ".", "__DATASET_OFFLINE_SUBFOLDER", ")", "\n", "\n", "self", ".", "reload_from_original_data", "=", "reload_from_original_data", "\n", "if", "self", ".", "reload_from_original_data", ":", "\n", "            ", "self", ".", "_print", "(", "\"reload_from_original_data is True, previously loaded data will be ignored\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader._print": [[67, 69], ["print", "DataReader.DataReader._get_dataset_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "", "def", "_print", "(", "self", ",", "message", ")", ":", "\n", "        ", "print", "(", "\"{}: {}\"", ".", "format", "(", "self", ".", "_get_dataset_name", "(", ")", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader._get_dataset_name": [[70, 72], ["DataReader.DataReader._get_dataset_name_root().replace", "DataReader.DataReader._get_dataset_name_root"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._get_dataset_name_root"], ["", "def", "_get_dataset_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_dataset_name_root", "(", ")", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader.get_loaded_ICM_names": [[74, 76], ["DataReader.DataReader.AVAILABLE_ICM.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_loaded_ICM_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "AVAILABLE_ICM", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader.get_loaded_UCM_names": [[78, 80], ["DataReader.DataReader.AVAILABLE_UCM.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_loaded_UCM_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "AVAILABLE_UCM", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader._load_from_original_file": [[81, 83], ["NotImplementedError"], "methods", ["None"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"{}: _load_from_original_file was not implemented for the required dataset. Impossible to load the data\"", ".", "format", "(", "self", ".", "_DATA_READER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader._get_dataset_name_root": [[85, 92], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_dataset_name_root", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the root of the folder tree which contains all of the dataset data/splits and files\n\n        :return: Dataset_name/\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"{}:_get_dataset_name_root was not implemented for the required dataset. Impossible to load the data\"", ".", "format", "(", "self", ".", "_DATA_READER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader._get_dataset_name_data_subfolder": [[96, 105], ["None"], "methods", ["None"], ["", "def", "_get_dataset_name_data_subfolder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the subfolder inside the dataset folder tree which contains the specific data to be loaded\n        This method must be overridden by any data post processing object like k-cores / user sampling / interaction sampling etc\n        to be applied before the data split\n\n        :return: original or k_cores etc...\n        \"\"\"", "\n", "return", "self", ".", "DATASET_SUBFOLDER_ORIGINAL", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader.DataReader.load_data": [[107, 168], ["DataReader.DataReader._print", "DataReader.DataReader._load_from_original_file", "DataReader.DataReader._print", "recsys.Data_manager.Dataset.Dataset.verify_data_consistency", "DataReader.DataReader._print", "recsys.Data_manager.Dataset.Dataset.print_statistics", "recsys.Data_manager.Dataset.Dataset.save_data", "DataReader.DataReader._print", "DataReader.DataReader._get_dataset_name_data_subfolder", "recsys.Data_manager.Dataset.Dataset", "recsys.Data_manager.Dataset.Dataset.load_data", "DataReader.DataReader._print", "recsys.Data_manager.Dataset.Dataset.verify_data_consistency", "DataReader.DataReader._print", "recsys.Data_manager.Dataset.Dataset.print_statistics", "os.path.exists", "DataReader.DataReader._print", "os.makedirs", "DataReader.DataReader._print", "DataReader.DataReader._get_dataset_name_root", "DataReader.DataReader._print", "DataReader.DataReader._print", "traceback.print_exc", "Exception", "DataReader.DataReader._get_dataset_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._load_from_original_file", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.verify_data_consistency", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.print_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._get_dataset_name_data_subfolder", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.verify_data_consistency", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.print_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._get_dataset_name_root", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "def", "load_data", "(", "self", ",", "save_folder_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param save_folder_path:    path in which to save the loaded dataset\n                                    None    use default \"dataset_name/original/\"\n                                    False   do not save\n        :return:\n        \"\"\"", "\n", "\n", "# Use default e.g., \"dataset_name/original/\"", "\n", "if", "save_folder_path", "is", "None", ":", "\n", "            ", "save_folder_path", "=", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "+", "self", ".", "_get_dataset_name_root", "(", ")", "+", "self", ".", "_get_dataset_name_data_subfolder", "(", ")", "\n", "\n", "\n", "# If save_folder_path contains any path try to load a previously built split from it", "\n", "", "if", "save_folder_path", "is", "not", "False", "and", "not", "self", ".", "reload_from_original_data", ":", "\n", "\n", "            ", "try", ":", "\n", "                ", "loaded_dataset", "=", "Dataset", "(", ")", "\n", "loaded_dataset", ".", "load_data", "(", "save_folder_path", ")", "\n", "\n", "self", ".", "_print", "(", "\"Verifying data consistency...\"", ")", "\n", "loaded_dataset", ".", "verify_data_consistency", "(", ")", "\n", "self", ".", "_print", "(", "\"Verifying data consistency... Passed!\"", ")", "\n", "\n", "loaded_dataset", ".", "print_statistics", "(", ")", "\n", "return", "loaded_dataset", "\n", "\n", "", "except", "FileNotFoundError", ":", "\n", "\n", "                ", "self", ".", "_print", "(", "\"Preloaded data not found, reading from original files...\"", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "\n", "                ", "self", ".", "_print", "(", "\"Reading split from {} caused the following exception...\"", ".", "format", "(", "save_folder_path", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "raise", "Exception", "(", "\"{}: Exception while reading split\"", ".", "format", "(", "self", ".", "_get_dataset_name", "(", ")", ")", ")", "\n", "\n", "\n", "", "", "self", ".", "_print", "(", "\"Loading original data\"", ")", "\n", "loaded_dataset", "=", "self", ".", "_load_from_original_file", "(", ")", "\n", "\n", "self", ".", "_print", "(", "\"Verifying data consistency...\"", ")", "\n", "loaded_dataset", ".", "verify_data_consistency", "(", ")", "\n", "self", ".", "_print", "(", "\"Verifying data consistency... Passed!\"", ")", "\n", "\n", "if", "save_folder_path", "not", "in", "[", "False", "]", ":", "\n", "\n", "# If directory does not exist, create", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder_path", ")", ":", "\n", "                ", "self", ".", "_print", "(", "\"Creating folder '{}'\"", ".", "format", "(", "save_folder_path", ")", ")", "\n", "os", ".", "makedirs", "(", "save_folder_path", ")", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "_print", "(", "\"Found already existing folder '{}'\"", ".", "format", "(", "save_folder_path", ")", ")", "\n", "\n", "", "loaded_dataset", ".", "save_data", "(", "save_folder_path", ")", "\n", "\n", "self", ".", "_print", "(", "\"Saving complete!\"", ")", "\n", "\n", "", "loaded_dataset", ".", "print_statistics", "(", ")", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.__init__": [[66, 109], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "dataset_name", "=", "None", ",", "\n", "URM_dictionary", "=", "None", ",", "\n", "ICM_dictionary", "=", "None", ",", "\n", "ICM_feature_mapper_dictionary", "=", "None", ",", "\n", "UCM_dictionary", "=", "None", ",", "\n", "UCM_feature_mapper_dictionary", "=", "None", ",", "\n", "user_original_ID_to_index", "=", "None", ",", "\n", "item_original_ID_to_index", "=", "None", ",", "\n", "is_implicit", "=", "False", ",", "\n", "additional_data_mapper", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param URM_dictionary:                      Dictionary of \"URM_name\":URM_object\n        :param ICM_dictionary:                      Dictionary of \"ICM_name\":ICM_object\n        :param ICM_feature_mapper_dictionary:       Dictionary of \"ICM_name\":feature_original_id_to_index\n        :param UCM_dictionary:                      Dictionary of \"UCM_name\":UCM_object\n        :param UCM_feature_mapper_dictionary:       Dictionary of \"UCM_name\":feature_original_id_to_index\n        :param user_original_ID_to_index:           Dictionary of \"user_original_id\":user_index\n        :param item_original_ID_to_index:           Dictionary of \"item_original_id\":user_index\n        \"\"\"", "\n", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "DATASET_NAME", "=", "dataset_name", "\n", "self", ".", "AVAILABLE_URM", "=", "URM_dictionary", "\n", "\n", "if", "ICM_dictionary", "is", "not", "None", ":", "\n", "            ", "self", ".", "AVAILABLE_ICM", "=", "ICM_dictionary", "\n", "self", ".", "AVAILABLE_ICM_feature_mapper", "=", "ICM_feature_mapper_dictionary", "\n", "self", ".", "_HAS_ICM", "=", "True", "\n", "\n", "", "if", "UCM_dictionary", "is", "not", "None", ":", "\n", "            ", "self", ".", "AVAILABLE_UCM", "=", "UCM_dictionary", "\n", "self", ".", "AVAILABLE_UCM_feature_mapper", "=", "UCM_feature_mapper_dictionary", "\n", "self", ".", "_HAS_UCM", "=", "True", "\n", "\n", "", "if", "additional_data_mapper", "is", "not", "None", ":", "\n", "            ", "self", ".", "additional_data_mapper", "=", "additional_data_mapper", "\n", "self", ".", "_HAS_additional_mapper", "=", "True", "\n", "\n", "", "self", ".", "item_original_ID_to_index", "=", "item_original_ID_to_index", "\n", "self", ".", "user_original_ID_to_index", "=", "user_original_ID_to_index", "\n", "\n", "self", ".", "_IS_IMPLICIT", "=", "is_implicit", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset._assert_is_initialized": [[113, 115], ["Dataset.Dataset._get_dataset_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "def", "_assert_is_initialized", "(", "self", ")", ":", "\n", "         ", "assert", "self", ".", "AVAILABLE_URM", "is", "not", "None", ",", "\"DataReader {}: Unable to load data split. The split has not been generated yet, call the load_data function to do so.\"", ".", "format", "(", "self", ".", "_get_dataset_name", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_dataset_name": [[116, 118], ["None"], "methods", ["None"], ["", "def", "get_dataset_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "DATASET_NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_ICM_from_name": [[119, 122], ["Dataset.Dataset._assert_is_initialized", "Dataset.Dataset.AVAILABLE_ICM[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_ICM_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "return", "self", ".", "AVAILABLE_ICM", "[", "ICM_name", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_URM_from_name": [[123, 126], ["Dataset.Dataset._assert_is_initialized", "Dataset.Dataset.AVAILABLE_URM[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_URM_from_name", "(", "self", ",", "URM_name", ")", ":", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "return", "self", ".", "AVAILABLE_URM", "[", "URM_name", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_ICM_feature_to_index_mapper_from_name": [[127, 130], ["Dataset.Dataset._assert_is_initialized", "Dataset.Dataset.AVAILABLE_ICM_feature_mapper[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_ICM_feature_to_index_mapper_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "return", "self", ".", "AVAILABLE_ICM_feature_mapper", "[", "ICM_name", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_loaded_URM_names": [[131, 133], ["list", "Dataset.Dataset.AVAILABLE_URM.keys"], "methods", ["None"], ["", "def", "get_loaded_URM_names", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "AVAILABLE_URM", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_item_original_ID_to_index_mapper": [[134, 136], ["Dataset.Dataset.item_original_ID_to_index.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_item_original_ID_to_index_mapper", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "item_original_ID_to_index", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_user_original_ID_to_index_mapper": [[137, 139], ["Dataset.Dataset.user_original_ID_to_index.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_user_original_ID_to_index_mapper", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "user_original_ID_to_index", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_loaded_URM_dict": [[140, 142], ["Dataset._clone_dictionary"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset._clone_dictionary"], ["", "def", "get_loaded_URM_dict", "(", "self", ")", ":", "\n", "        ", "return", "_clone_dictionary", "(", "self", ".", "AVAILABLE_URM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_loaded_ICM_dict": [[143, 145], ["Dataset._clone_dictionary"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset._clone_dictionary"], ["", "def", "get_loaded_ICM_dict", "(", "self", ")", ":", "\n", "        ", "return", "_clone_dictionary", "(", "self", ".", "AVAILABLE_ICM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_loaded_ICM_feature_mapper_dict": [[146, 148], ["Dataset.Dataset.AVAILABLE_ICM_feature_mapper.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_loaded_ICM_feature_mapper_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "AVAILABLE_ICM_feature_mapper", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_loaded_UCM_dict": [[149, 151], ["Dataset._clone_dictionary"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset._clone_dictionary"], ["", "def", "get_loaded_UCM_dict", "(", "self", ")", ":", "\n", "        ", "return", "_clone_dictionary", "(", "self", ".", "AVAILABLE_UCM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_loaded_UCM_feature_mapper_dict": [[152, 154], ["Dataset.Dataset.AVAILABLE_UCM_feature_mapper.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_loaded_UCM_feature_mapper_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "AVAILABLE_UCM_feature_mapper", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_URM_all": [[155, 157], ["Dataset.Dataset.get_URM_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_URM_from_name"], ["", "def", "get_URM_all", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_URM_from_name", "(", "\"URM_all\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_global_mapper_dict": [[158, 161], ["None"], "methods", ["None"], ["", "def", "get_global_mapper_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"user_original_ID_to_index\"", ":", "self", ".", "user_original_ID_to_index", ",", "\n", "\"item_original_ID_to_index\"", ":", "self", ".", "item_original_ID_to_index", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.is_implicit": [[162, 164], ["None"], "methods", ["None"], ["", "def", "is_implicit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_IS_IMPLICIT", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data": [[172, 209], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data", "recsys.Base.DataIO.DataIO.save_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "save_data", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "        ", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "global_attributes_dict", "=", "{", "\n", "\"item_original_ID_to_index\"", ":", "self", ".", "item_original_ID_to_index", ",", "\n", "\"user_original_ID_to_index\"", ":", "self", ".", "user_original_ID_to_index", ",", "\n", "\"DATASET_NAME\"", ":", "self", ".", "DATASET_NAME", ",", "\n", "\"_IS_IMPLICIT\"", ":", "self", ".", "_IS_IMPLICIT", ",", "\n", "\"_HAS_ICM\"", ":", "self", ".", "_HAS_ICM", ",", "\n", "\"_HAS_UCM\"", ":", "self", ".", "_HAS_UCM", ",", "\n", "\"_HAS_additional_mapper\"", ":", "self", ".", "_HAS_additional_mapper", "\n", "}", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "global_attributes_dict", ",", "\n", "file_name", "=", "\"dataset_global_attributes\"", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "AVAILABLE_URM", ",", "\n", "file_name", "=", "\"dataset_URM\"", ")", "\n", "\n", "if", "self", ".", "_HAS_ICM", ":", "\n", "            ", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "AVAILABLE_ICM", ",", "\n", "file_name", "=", "\"dataset_ICM\"", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "AVAILABLE_ICM_feature_mapper", ",", "\n", "file_name", "=", "\"dataset_ICM_mappers\"", ")", "\n", "\n", "", "if", "self", ".", "_HAS_UCM", ":", "\n", "            ", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "AVAILABLE_UCM", ",", "\n", "file_name", "=", "\"dataset_UCM\"", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "AVAILABLE_UCM_feature_mapper", ",", "\n", "file_name", "=", "\"dataset_UCM_mappers\"", ")", "\n", "\n", "", "if", "self", ".", "_HAS_additional_mapper", ":", "\n", "            ", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "additional_data_mapper", ",", "\n", "file_name", "=", "\"dataset_additional_mappers\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.load_data": [[212, 233], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data.items", "recsys.Base.DataIO.DataIO.load_data", "Dataset.Dataset.__setattr__", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data"], ["", "", "def", "load_data", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "        ", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "global_attributes_dict", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"dataset_global_attributes\"", ")", "\n", "\n", "for", "attrib_name", ",", "attrib_object", "in", "global_attributes_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "attrib_name", ",", "attrib_object", ")", "\n", "\n", "", "self", ".", "AVAILABLE_URM", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"dataset_URM\"", ")", "\n", "\n", "if", "self", ".", "_HAS_ICM", ">", "0", ":", "\n", "            ", "self", ".", "AVAILABLE_ICM", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"dataset_ICM\"", ")", "\n", "self", ".", "AVAILABLE_ICM_feature_mapper", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"dataset_ICM_mappers\"", ")", "\n", "\n", "", "if", "self", ".", "_HAS_UCM", ">", "0", ":", "\n", "            ", "self", ".", "AVAILABLE_UCM", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"dataset_UCM\"", ")", "\n", "self", ".", "AVAILABLE_UCM_feature_mapper", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"dataset_UCM_mappers\"", ")", "\n", "\n", "", "if", "self", ".", "_HAS_additional_mapper", ":", "\n", "            ", "self", ".", "dataset_additional_mappers", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"dataset_additional_mappers\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.print_statistics": [[242, 323], ["Dataset.Dataset._assert_is_initialized", "Dataset.Dataset.get_URM_all", "scipy.csr_matrix", "numpy.ediff1d", "numpy.ediff1d.max", "numpy.ediff1d.min", "scipy.csc_matrix", "numpy.ediff1d", "numpy.ediff1d.max", "numpy.ediff1d.min", "print", "Dataset.Dataset.AVAILABLE_ICM.items", "print", "numpy.min", "numpy.max", "recsys.Data_manager.DataReader_utils.compute_density", "Dataset.gini_index", "numpy.min", "numpy.max", "print", "recsys.Data_manager.DataReader_utils.compute_density", "numpy.max", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_URM_all", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.gini_index", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.compute_density"], ["", "", "def", "print_statistics", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "URM_all", "=", "self", ".", "get_URM_all", "(", ")", "\n", "\n", "n_users", ",", "n_items", "=", "URM_all", ".", "shape", "\n", "\n", "n_interactions", "=", "URM_all", ".", "nnz", "\n", "\n", "\n", "URM_all", "=", "sps", ".", "csr_matrix", "(", "URM_all", ")", "\n", "user_profile_length", "=", "np", ".", "ediff1d", "(", "URM_all", ".", "indptr", ")", "\n", "\n", "max_interactions_per_user", "=", "user_profile_length", ".", "max", "(", ")", "\n", "avg_interactions_per_user", "=", "n_interactions", "/", "n_users", "\n", "min_interactions_per_user", "=", "user_profile_length", ".", "min", "(", ")", "\n", "\n", "URM_all", "=", "sps", ".", "csc_matrix", "(", "URM_all", ")", "\n", "item_profile_length", "=", "np", ".", "ediff1d", "(", "URM_all", ".", "indptr", ")", "\n", "\n", "max_interactions_per_item", "=", "item_profile_length", ".", "max", "(", ")", "\n", "avg_interactions_per_item", "=", "n_interactions", "/", "n_items", "\n", "min_interactions_per_item", "=", "item_profile_length", ".", "min", "(", ")", "\n", "\n", "\n", "print", "(", "\"DataReader: current dataset is: {}\\n\"", "\n", "\"\\tNumber of items: {}\\n\"", "\n", "\"\\tNumber of users: {}\\n\"", "\n", "\"\\tNumber of interactions in URM_all: {}\\n\"", "\n", "\"\\tValue range in URM_all: {:.2f}-{:.2f}\\n\"", "\n", "\"\\tInteraction density: {:.2E}\\n\"", "\n", "\"\\tInteractions per user:\\n\"", "\n", "\"\\t\\t Min: {:.2E}\\n\"", "\n", "\"\\t\\t Avg: {:.2E}\\n\"", "\n", "\"\\t\\t Max: {:.2E}\\n\"", "\n", "\"\\tInteractions per item:\\n\"", "\n", "\"\\t\\t Min: {:.2E}\\n\"", "\n", "\"\\t\\t Avg: {:.2E}\\n\"", "\n", "\"\\t\\t Max: {:.2E}\\n\"", "\n", "\"\\tGini Index: {:.2f}\\n\"", ".", "format", "(", "\n", "self", ".", "__class__", ",", "\n", "n_items", ",", "\n", "n_users", ",", "\n", "n_interactions", ",", "\n", "np", ".", "min", "(", "URM_all", ".", "data", ")", ",", "np", ".", "max", "(", "URM_all", ".", "data", ")", ",", "\n", "compute_density", "(", "URM_all", ")", ",", "\n", "min_interactions_per_user", ",", "\n", "avg_interactions_per_user", ",", "\n", "max_interactions_per_user", ",", "\n", "min_interactions_per_item", ",", "\n", "avg_interactions_per_item", ",", "\n", "max_interactions_per_item", ",", "\n", "gini_index", "(", "user_profile_length", ")", ",", "\n", ")", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "_HAS_ICM", ":", "\n", "\n", "            ", "for", "ICM_name", ",", "ICM_object", "in", "self", ".", "AVAILABLE_ICM", ".", "items", "(", ")", ":", "\n", "\n", "                ", "n_items", ",", "n_features", "=", "ICM_object", ".", "shape", "\n", "\n", "min_value", "=", "np", ".", "min", "(", "ICM_object", ".", "data", ")", "\n", "max_value", "=", "np", ".", "max", "(", "ICM_object", ".", "data", ")", "\n", "\n", "format_string", "=", "\"2E\"", "if", "np", ".", "max", "(", "[", "np", ".", "abs", "(", "min_value", ")", ",", "np", ".", "abs", "(", "max_value", ")", "]", ")", ">", "100", "else", "\"2f\"", "\n", "\n", "statistics_string", "=", "\"\\tICM name: {}, Value range: {:.{format_string}} / {:.{format_string}}, Num features: {}, feature occurrences: {}, density {:.2E}\"", ".", "format", "(", "\n", "ICM_name", ",", "\n", "min_value", ",", "max_value", ",", "\n", "n_features", ",", "\n", "ICM_object", ".", "nnz", ",", "\n", "compute_density", "(", "ICM_object", ")", ",", "\n", "format_string", "=", "format_string", "\n", ")", "\n", "\n", "print", "(", "statistics_string", ")", "\n", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.copy": [[330, 372], ["Dataset._clone_dictionary", "Dataset.Dataset.user_original_ID_to_index.copy", "Dataset.Dataset.item_original_ID_to_index.copy", "Dataset.Dataset", "Dataset.verify_data_consistency", "Dataset._clone_dictionary", "Dataset.Dataset.AVAILABLE_ICM_feature_mapper.copy", "Dataset._clone_dictionary", "Dataset.Dataset.AVAILABLE_UCM_feature_mapper.copy", "Dataset.Dataset.additional_data_mapper.copy", "Dataset.Dataset.get_dataset_name", "Dataset.Dataset.is_implicit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset._clone_dictionary", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.verify_data_consistency", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset._clone_dictionary", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset._clone_dictionary", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM.is_implicit"], ["", "", "def", "copy", "(", "self", ")", ":", "\n", "\n", "        ", "loaded_URM_dict", "=", "_clone_dictionary", "(", "self", ".", "AVAILABLE_URM", ")", "\n", "user_original_ID_to_index", "=", "self", ".", "user_original_ID_to_index", ".", "copy", "(", ")", "\n", "item_original_ID_to_index", "=", "self", ".", "item_original_ID_to_index", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "AVAILABLE_ICM", "is", "not", "None", ":", "\n", "            ", "loaded_ICM_dict", "=", "_clone_dictionary", "(", "self", ".", "AVAILABLE_ICM", ")", "\n", "loaded_ICM_mapper_dict", "=", "self", ".", "AVAILABLE_ICM_feature_mapper", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "loaded_ICM_dict", "=", "None", "\n", "loaded_ICM_mapper_dict", "=", "None", "\n", "\n", "\n", "", "if", "self", ".", "AVAILABLE_UCM", "is", "not", "None", ":", "\n", "            ", "loaded_UCM_dict", "=", "_clone_dictionary", "(", "self", ".", "AVAILABLE_UCM", ")", "\n", "loaded_UCM_mapper_dict", "=", "self", ".", "AVAILABLE_UCM_feature_mapper", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "loaded_UCM_dict", "=", "None", "\n", "loaded_UCM_mapper_dict", "=", "None", "\n", "\n", "\n", "", "if", "self", ".", "additional_data_mapper", "is", "not", "None", ":", "\n", "            ", "additional_data_mapper", "=", "self", ".", "additional_data_mapper", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "additional_data_mapper", "=", "None", "\n", "\n", "", "loaded_dataset", "=", "Dataset", "(", "dataset_name", "=", "self", ".", "get_dataset_name", "(", ")", ",", "\n", "URM_dictionary", "=", "loaded_URM_dict", ",", "\n", "ICM_dictionary", "=", "loaded_ICM_dict", ",", "\n", "ICM_feature_mapper_dictionary", "=", "loaded_ICM_mapper_dict", ",", "\n", "UCM_dictionary", "=", "loaded_UCM_dict", ",", "\n", "UCM_feature_mapper_dictionary", "=", "loaded_UCM_mapper_dict", ",", "\n", "user_original_ID_to_index", "=", "user_original_ID_to_index", ",", "\n", "item_original_ID_to_index", "=", "item_original_ID_to_index", ",", "\n", "is_implicit", "=", "self", ".", "is_implicit", "(", ")", ",", "\n", "additional_data_mapper", "=", "additional_data_mapper", ",", "\n", ")", "\n", "\n", "loaded_dataset", ".", "verify_data_consistency", "(", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.verify_data_consistency": [[382, 404], ["Dataset.Dataset._assert_is_initialized", "Dataset.Dataset.get_URM_all", "Dataset.Dataset.is_implicit", "recsys.Data_manager.data_consistency_check.assert_URM_ICM_mapper_consistency", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_URM_all", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM.is_implicit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.data_consistency_check.assert_URM_ICM_mapper_consistency"], ["", "def", "verify_data_consistency", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "print_preamble", "=", "\"{} consistency check: \"", ".", "format", "(", "self", ".", "DATASET_NAME", ")", "\n", "\n", "URM_all", "=", "self", ".", "get_URM_all", "(", ")", "\n", "n_interactions", "=", "URM_all", ".", "nnz", "\n", "\n", "assert", "n_interactions", "!=", "0", ",", "print_preamble", "+", "\"Number of interactions in URM is 0\"", "\n", "\n", "if", "self", ".", "is_implicit", "(", ")", ":", "\n", "            ", "assert", "np", ".", "all", "(", "URM_all", ".", "data", "==", "1.0", ")", ",", "print_preamble", "+", "\"The DataReader is stated to be implicit but the main URM is not\"", "\n", "\n", "", "assert_URM_ICM_mapper_consistency", "(", "URM_DICT", "=", "self", ".", "AVAILABLE_URM", ",", "\n", "user_original_ID_to_index", "=", "self", ".", "user_original_ID_to_index", ",", "\n", "item_original_ID_to_index", "=", "self", ".", "item_original_ID_to_index", ",", "\n", "ICM_DICT", "=", "self", ".", "AVAILABLE_ICM", ",", "\n", "ICM_MAPPER_DICT", "=", "self", ".", "AVAILABLE_ICM_feature_mapper", ",", "\n", "UCM_DICT", "=", "self", ".", "AVAILABLE_UCM", ",", "\n", "UCM_MAPPER_DICT", "=", "self", ".", "AVAILABLE_UCM_feature_mapper", ",", "\n", "DATA_SPLITTER_NAME", "=", "self", ".", "DATASET_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset._remove_items_and_users": [[408, 483], ["len", "len", "len", "len", "numpy.ones", "recsys.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "Dataset.Dataset.AVAILABLE_URM.items", "numpy.ones", "recsys.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "Dataset.Dataset.AVAILABLE_URM.items", "numpy.ones", "Dataset.Dataset.AVAILABLE_ICM.items", "numpy.ones", "Dataset.Dataset.AVAILABLE_UCM.items", "print", "recsys.Data_manager.DataReader_utils.remove_features", "print", "recsys.Data_manager.DataReader_utils.remove_features"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.reconcile_mapper_with_removed_tokens", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.remove_features", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.remove_features"], ["", "def", "_remove_items_and_users", "(", "self", ",", "items_to_remove", "=", "None", ",", "users_to_remove", "=", "None", ")", ":", "\n", "\n", "        ", "if", "len", "(", "items_to_remove", ")", "==", "0", ":", "items_to_remove", "=", "None", "\n", "if", "len", "(", "users_to_remove", ")", "==", "0", ":", "users_to_remove", "=", "None", "\n", "\n", "n_items", "=", "len", "(", "self", ".", "item_original_ID_to_index", ")", "\n", "n_users", "=", "len", "(", "self", ".", "user_original_ID_to_index", ")", "\n", "\n", "\n", "\n", "if", "items_to_remove", "is", "not", "None", ":", "\n", "\n", "            ", "items_to_keep_mask", "=", "np", ".", "ones", "(", "n_items", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "items_to_keep_mask", "[", "items_to_remove", "]", "=", "False", "\n", "\n", "self", ".", "item_original_ID_to_index", "=", "reconcile_mapper_with_removed_tokens", "(", "self", ".", "item_original_ID_to_index", ",", "items_to_remove", ")", "\n", "\n", "for", "URM_name", ",", "URM_obj", "in", "self", ".", "AVAILABLE_URM", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "AVAILABLE_URM", "[", "URM_name", "]", "=", "URM_obj", "[", ":", ",", "items_to_keep_mask", "]", "\n", "\n", "\n", "", "if", "self", ".", "_HAS_ICM", ":", "\n", "\n", "                ", "items_to_keep_mask", "=", "np", ".", "ones", "(", "n_items", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "items_to_keep_mask", "[", "items_to_remove", "]", "=", "False", "\n", "\n", "for", "ICM_name", ",", "ICM_object", "in", "self", ".", "AVAILABLE_ICM", ".", "items", "(", ")", ":", "\n", "\n", "                    ", "print", "(", "\"Dataset: Removing items from {}\"", ".", "format", "(", "ICM_name", ")", ")", "\n", "\n", "ICM_object", "=", "ICM_object", "[", "items_to_keep_mask", ",", ":", "]", "\n", "ICM_mapper_object", "=", "self", ".", "AVAILABLE_ICM_feature_mapper", "[", "ICM_name", "]", "\n", "\n", "ICM_object", ",", "_", ",", "ICM_mapper_object", "=", "remove_features", "(", "ICM_object", ",", "\n", "min_occurrence", "=", "1", ",", "\n", "max_percentage_occurrence", "=", "1.00", ",", "\n", "reconcile_mapper", "=", "ICM_mapper_object", ")", "\n", "\n", "self", ".", "AVAILABLE_ICM", "[", "ICM_name", "]", "=", "ICM_object", "\n", "self", ".", "AVAILABLE_ICM_feature_mapper", "[", "ICM_name", "]", "=", "ICM_mapper_object", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "if", "users_to_remove", "is", "not", "None", ":", "\n", "\n", "            ", "users_to_keep_mask", "=", "np", ".", "ones", "(", "n_users", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "users_to_keep_mask", "[", "users_to_remove", "]", "=", "False", "\n", "\n", "self", ".", "user_original_ID_to_index", "=", "reconcile_mapper_with_removed_tokens", "(", "self", ".", "user_original_ID_to_index", ",", "users_to_remove", ")", "\n", "\n", "for", "URM_name", ",", "URM_obj", "in", "self", ".", "AVAILABLE_URM", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "AVAILABLE_URM", "[", "URM_name", "]", "=", "URM_obj", "[", "users_to_keep_mask", ",", ":", "]", "\n", "\n", "\n", "", "if", "self", ".", "_HAS_UCM", ":", "\n", "\n", "                ", "users_to_keep_mask", "=", "np", ".", "ones", "(", "n_users", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "users_to_keep_mask", "[", "users_to_remove", "]", "=", "False", "\n", "\n", "for", "UCM_name", ",", "UCM_object", "in", "self", ".", "AVAILABLE_UCM", ".", "items", "(", ")", ":", "\n", "\n", "                    ", "print", "(", "\"Dataset: Removing users from {}\"", ".", "format", "(", "UCM_name", ")", ")", "\n", "\n", "UCM_object", "=", "UCM_object", "[", "users_to_keep_mask", ",", ":", "]", "\n", "UCM_mapper_object", "=", "self", ".", "AVAILABLE_UCM_feature_mapper", "[", "UCM_name", "]", "\n", "\n", "UCM_object", ",", "_", ",", "UCM_mapper_object", "=", "remove_features", "(", "UCM_object", ",", "\n", "min_occurrence", "=", "1", ",", "\n", "max_percentage_occurrence", "=", "1.00", ",", "\n", "reconcile_mapper", "=", "UCM_mapper_object", ")", "\n", "\n", "self", ".", "AVAILABLE_UCM", "[", "UCM_name", "]", "=", "UCM_object", "\n", "self", ".", "AVAILABLE_UCM_feature_mapper", "[", "UCM_name", "]", "=", "UCM_mapper_object", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset._clone_dictionary": [[17, 20], ["value.copy", "original_dict.items"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "_clone_dictionary", "(", "original_dict", ")", ":", "\n", "    ", "clone_dict", "=", "{", "key", ":", "value", ".", "copy", "(", ")", "for", "key", ",", "value", "in", "original_dict", ".", "items", "(", ")", "}", "\n", "return", "clone_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.gini_index": [[21, 34], ["numpy.array", "np.sort.flatten", "numpy.sort", "numpy.arange", "numpy.amin", "numpy.amin", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "gini_index", "(", "array", ")", ":", "\n", "    ", "\"\"\"Calculate the Gini coefficient of a numpy array.\"\"\"", "\n", "# based on bottom eq: http://www.statsdirect.com/help/content/image/stat0206_wmf.gif", "\n", "# from: http://www.statsdirect.com/help/default.htm#nonparametric_methods/gini.htm", "\n", "array", "=", "np", ".", "array", "(", "array", ",", "dtype", "=", "np", ".", "float", ")", "\n", "array", "=", "array", ".", "flatten", "(", ")", "#all values are treated equally, arrays must be 1d", "\n", "if", "np", ".", "amin", "(", "array", ")", "<", "0", ":", "\n", "        ", "array", "-=", "np", ".", "amin", "(", "array", ")", "#values cannot be negative", "\n", "", "array", "+=", "0.0000001", "#values cannot be 0", "\n", "array", "=", "np", ".", "sort", "(", "array", ")", "#values must be sorted", "\n", "index", "=", "np", ".", "arange", "(", "1", ",", "array", ".", "shape", "[", "0", "]", "+", "1", ")", "#index per array element", "\n", "n", "=", "array", ".", "shape", "[", "0", "]", "#number of array elements", "\n", "return", "(", "(", "np", ".", "sum", "(", "(", "2", "*", "index", "-", "n", "-", "1", ")", "*", "array", ")", ")", "/", "(", "n", "*", "np", ".", "sum", "(", "array", ")", ")", ")", "#Gini coefficient", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random.__init__": [[46, 75], ["recsys.Data_manager.DataSplitter.DataSplitter.__init__", "DataSplitter_k_fold_random.DataSplitter_k_fold_random.dataSplitter_class", "dataSplitter_kwargs.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "__init__", "(", "self", ",", "dataReader_object", ":", "_DataReader", ",", "dataSplitter_class", ",", "\n", "dataSplitter_kwargs", "=", "None", ",", "preload_all", "=", "True", ",", "\n", "n_folds", "=", "5", ",", "forbid_new_split", "=", "False", ",", "force_new_split", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param dataReader_object:\n        :param n_folds:\n        :param force_new_split:\n        :param forbid_new_split:\n        \"\"\"", "\n", "\n", "\n", "assert", "n_folds", ">", "1", ",", "\"{}: Number of folds must be  greater than 1\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n", "super", "(", "DataSplitter_k_fold_random", ",", "self", ")", ".", "__init__", "(", "dataReader_object", ",", "\n", "forbid_new_split", "=", "forbid_new_split", ",", "\n", "force_new_split", "=", "force_new_split", ")", "\n", "\n", "self", ".", "dataSplitter_class", "=", "dataSplitter_class", "\n", "self", ".", "n_folds", "=", "n_folds", "\n", "self", ".", "preload_all", "=", "preload_all", "\n", "\n", "if", "dataSplitter_kwargs", "is", "None", ":", "\n", "            ", "self", ".", "dataSplitter_kwargs", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataSplitter_kwargs", "=", "dataSplitter_kwargs", ".", "copy", "(", ")", "\n", "\n", "# DataSplitter object without load data, to be used to get the subfolder paths", "\n", "", "self", ".", "_dataSplitter_object_empty", "=", "self", ".", "dataSplitter_class", "(", "self", ".", "dataReader_object", ",", "**", "self", ".", "dataSplitter_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized": [[77, 79], ["None"], "methods", ["None"], ["", "def", "_assert_is_initialized", "(", "self", ")", ":", "\n", "         ", "assert", "self", ".", "FOLD_DATA_SPLITTER_LIST", "is", "not", "None", ",", "\"{}: Unable to load data split. The split has not been generated yet, call the load_data function to do so.\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random.get_statistics_URM": [[81, 83], ["None"], "methods", ["None"], ["", "def", "get_statistics_URM", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random.get_statistics_ICM": [[118, 120], ["None"], "methods", ["None"], ["", "def", "get_statistics_ICM", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random.__iter__": [[177, 183], ["DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "self", ".", "__iterator_current_fold", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random.__next__": [[185, 195], ["None"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "\n", "        ", "fold_to_return", "=", "self", ".", "__iterator_current_fold", "\n", "\n", "if", "self", ".", "__iterator_current_fold", ">=", "self", ".", "n_folds", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "self", ".", "__iterator_current_fold", "+=", "1", "\n", "\n", "return", "self", "[", "fold_to_return", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random.__getitem__": [[200, 209], ["DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized"], ["", "def", "__getitem__", "(", "self", ",", "n_fold", ")", ":", "\n", "        ", "\"\"\"\n        :param index:\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "return", "self", ".", "FOLD_DATA_SPLITTER_LIST", "[", "n_fold", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random.__len__": [[213, 216], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "n_folds", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._get_split_subfolder_name": [[234, 242], ["DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._dataSplitter_object_empty._get_split_subfolder_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_split_subfolder_name"], ["def", "_get_split_subfolder_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: random_{n_folds}_fold/\n        \"\"\"", "\n", "inner_subfolder_name", "=", "self", ".", "_dataSplitter_object_empty", ".", "_get_split_subfolder_name", "(", ")", "\n", "\n", "return", "\"random_{}_fold/{}\"", ".", "format", "(", "self", ".", "n_folds", ",", "inner_subfolder_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._split_data_from_original_dataset_fold": [[245, 262], ["DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter.dataSplitter_class", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter.load_data", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._print", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "_split_data_from_original_dataset_fold", "(", "self", ",", "save_folder_path", ",", "fold_index", ")", ":", "\n", "\n", "        ", "dataSplitter_object_fold", "=", "self", ".", "dataSplitter_class", "(", "self", ".", "dataReader_object", ",", "**", "self", ".", "dataSplitter_kwargs", ")", "\n", "\n", "# Either save or not", "\n", "if", "save_folder_path", ":", "\n", "            ", "save_folder_path_fold", "=", "save_folder_path", "+", "\"fold_{}/\"", ".", "format", "(", "fold_index", "+", "1", ")", "\n", "self", ".", "_print", "(", "\"Splitting Fold {}/{}. Saving in '{}'\"", ".", "format", "(", "fold_index", "+", "1", ",", "self", ".", "n_folds", ",", "save_folder_path_fold", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "save_folder_path_fold", "=", "False", "\n", "self", ".", "_print", "(", "\"Splitting Fold {}/{}. Not saving.\"", ".", "format", "(", "fold_index", "+", "1", ",", "self", ".", "n_folds", ")", ")", "\n", "\n", "\n", "", "dataSplitter_object_fold", ".", "load_data", "(", "save_folder_path", "=", "save_folder_path_fold", ")", "\n", "\n", "return", "dataSplitter_object_fold", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._split_data_from_original_dataset": [[265, 296], ["range", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._print", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._get_default_save_path", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._split_data_from_original_dataset_fold", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_default_save_path", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._split_data_from_original_dataset_fold", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "_split_data_from_original_dataset", "(", "self", ",", "save_folder_path", ")", ":", "\n", "\n", "# Perform k random splits.", "\n", "\n", "        ", "self", ".", "FOLD_DATA_SPLITTER_LIST", "=", "[", "None", "]", "*", "self", ".", "n_folds", "\n", "\n", "# If save_folder_path is None use default", "\n", "if", "save_folder_path", "is", "None", "and", "not", "save_folder_path", "==", "False", ":", "\n", "            ", "save_folder_path", "=", "self", ".", "_get_default_save_path", "(", ")", "\n", "\n", "\n", "", "for", "fold_index", "in", "range", "(", "self", ".", "n_folds", ")", ":", "\n", "\n", "            ", "dataSplitter_object_fold", "=", "self", ".", "_split_data_from_original_dataset_fold", "(", "save_folder_path", ",", "fold_index", ")", "\n", "\n", "if", "self", ".", "preload_all", ":", "\n", "                ", "self", ".", "FOLD_DATA_SPLITTER_LIST", "[", "fold_index", "]", "=", "dataSplitter_object_fold", "\n", "\n", "\n", "\n", "", "", "if", "save_folder_path", ":", "\n", "            ", "split_parameters_dict", "=", "{", "\"n_folds\"", ":", "self", ".", "n_folds", ",", "\n", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "split_parameters_dict", ",", "\n", "file_name", "=", "\"split_parameters\"", ")", "\n", "\n", "\n", "", "self", ".", "_print", "(", "\"Split complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter.__getitem__": [[301, 317], ["DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._assert_is_initialized", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._load_previously_built_split_and_attributes_fold"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._load_previously_built_split_and_attributes_fold"], ["", "def", "__getitem__", "(", "self", ",", "n_fold", ")", ":", "\n", "        ", "\"\"\"\n        :param index:\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "_assert_is_initialized", "(", ")", "\n", "\n", "if", "not", "self", ".", "preload_all", ":", "\n", "\n", "# Check if fold was loaded, if not, reset list and load only the required one", "\n", "            ", "if", "self", ".", "FOLD_DATA_SPLITTER_LIST", "[", "n_fold", "]", "is", "None", ":", "\n", "                ", "self", ".", "FOLD_DATA_SPLITTER_LIST", "=", "[", "None", "]", "*", "self", ".", "n_folds", "\n", "self", ".", "FOLD_DATA_SPLITTER_LIST", "[", "n_fold", "]", "=", "self", ".", "_load_previously_built_split_and_attributes_fold", "(", "self", ".", "__save_folder_path", ",", "n_fold", ")", "\n", "\n", "", "", "return", "self", ".", "FOLD_DATA_SPLITTER_LIST", "[", "n_fold", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._load_previously_built_split_and_attributes_fold": [[320, 330], ["DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter.dataSplitter_class", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._print", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter.load_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data"], ["", "def", "_load_previously_built_split_and_attributes_fold", "(", "self", ",", "save_folder_path", ",", "fold_index", ")", ":", "\n", "\n", "        ", "dataSplitter_object", "=", "self", ".", "dataSplitter_class", "(", "self", ".", "dataReader_object", ",", "**", "self", ".", "dataSplitter_kwargs", ")", "\n", "\n", "save_folder_path_fold", "=", "save_folder_path", "+", "\"fold_{}/\"", ".", "format", "(", "fold_index", "+", "1", ")", "\n", "\n", "self", ".", "_print", "(", "\"Splitting Fold {}/{}. Loading from '{}'\"", ".", "format", "(", "fold_index", "+", "1", ",", "self", ".", "n_folds", ",", "save_folder_path_fold", ")", ")", "\n", "dataSplitter_object", ".", "load_data", "(", "save_folder_path", "=", "save_folder_path_fold", ")", "\n", "\n", "return", "dataSplitter_object", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._load_previously_built_split_and_attributes": [[332, 356], ["recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "recsys.Base.DataIO.DataIO.load_data.keys", "range", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter.__setattr__", "DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._load_previously_built_split_and_attributes_fold"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random_fromDataSplitter._load_previously_built_split_and_attributes_fold"], ["", "def", "_load_previously_built_split_and_attributes", "(", "self", ",", "save_folder_path", ")", ":", "\n", "        ", "\"\"\"\n        Loads all URM and ICM\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "__save_folder_path", "=", "save_folder_path", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "save_folder_path", ")", "\n", "\n", "split_parameters_dict", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "\"split_parameters\"", ")", "\n", "\n", "for", "attrib_name", "in", "split_parameters_dict", ".", "keys", "(", ")", ":", "\n", "             ", "self", ".", "__setattr__", "(", "attrib_name", ",", "split_parameters_dict", "[", "attrib_name", "]", ")", "\n", "\n", "\n", "", "self", ".", "FOLD_DATA_SPLITTER_LIST", "=", "[", "None", "]", "*", "self", ".", "n_folds", "\n", "\n", "for", "fold_index", "in", "range", "(", "self", ".", "n_folds", ")", ":", "\n", "\n", "            ", "dataSplitter_object", "=", "self", ".", "_load_previously_built_split_and_attributes_fold", "(", "save_folder_path", ",", "fold_index", ")", "\n", "\n", "if", "self", ".", "preload_all", ":", "\n", "                ", "self", ".", "FOLD_DATA_SPLITTER_LIST", "[", "fold_index", "]", "=", "dataSplitter_object", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.__init__": [[45, 60], ["object.__init__", "os.path.join", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "dataReader_object", ":", "DataReader", ",", "forbid_new_split", "=", "False", ",", "force_new_split", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param dataReader_object:\n        :param n_folds:\n        :param force_new_split:\n        :param forbid_new_split:\n        \"\"\"", "\n", "super", "(", "DataSplitter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ",", "self", ".", "__DATASET_SPLIT_SUBFOLDER", ")", "\n", "\n", "self", ".", "dataReader_object", "=", "dataReader_object", "\n", "self", ".", "forbid_new_split", "=", "forbid_new_split", "\n", "self", ".", "force_new_split", "=", "force_new_split", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_dataReader_object": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_dataReader_object", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataReader_object", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name": [[66, 68], ["DataSplitter.DataSplitter.get_dataReader_object()._get_dataset_name", "DataSplitter.DataSplitter.get_dataReader_object"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_dataReader_object"], ["", "def", "_get_dataset_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_dataReader_object", "(", ")", ".", "_get_dataset_name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_ICM_from_name": [[69, 71], ["DataSplitter.DataSplitter.SPLIT_ICM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_ICM_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "return", "self", ".", "SPLIT_ICM_DICT", "[", "ICM_name", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names": [[72, 74], ["DataSplitter.DataSplitter.get_dataReader_object().get_loaded_ICM_names", "DataSplitter.DataSplitter.get_dataReader_object"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_dataReader_object"], ["", "def", "get_loaded_ICM_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_dataReader_object", "(", ")", ".", "get_loaded_ICM_names", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_all_available_ICM_names": [[75, 77], ["DataSplitter.DataSplitter.get_dataReader_object().get_loaded_ICM_names().copy", "DataSplitter.DataSplitter.get_dataReader_object().get_loaded_ICM_names", "DataSplitter.DataSplitter.get_dataReader_object"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_dataReader_object"], ["", "def", "get_all_available_ICM_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_dataReader_object", "(", ")", ".", "get_loaded_ICM_names", "(", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_UCM_from_name": [[78, 80], ["DataSplitter.DataSplitter.SPLIT_UCM_DICT[].copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_UCM_from_name", "(", "self", ",", "UCM_name", ")", ":", "\n", "        ", "return", "self", ".", "SPLIT_UCM_DICT", "[", "UCM_name", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_UCM_names": [[81, 83], ["DataSplitter.DataSplitter.get_dataReader_object().get_loaded_UCM_names", "DataSplitter.DataSplitter.get_dataReader_object"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_UCM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_dataReader_object"], ["", "def", "get_loaded_UCM_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_dataReader_object", "(", ")", ".", "get_loaded_UCM_names", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_all_available_UCM_names": [[84, 86], ["DataSplitter.DataSplitter.get_dataReader_object().get_loaded_ICM_names().copy", "DataSplitter.DataSplitter.get_dataReader_object().get_loaded_ICM_names", "DataSplitter.DataSplitter.get_dataReader_object"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_dataReader_object"], ["", "def", "get_all_available_UCM_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_dataReader_object", "(", ")", ".", "get_loaded_ICM_names", "(", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_dict": [[87, 97], ["DataSplitter.DataSplitter.get_loaded_ICM_names", "DataSplitter.DataSplitter.get_ICM_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name"], ["", "def", "get_loaded_ICM_dict", "(", "self", ")", ":", "\n", "# return self.get_dataset_object().get_loaded_ICM_dict()", "\n", "\n", "        ", "ICM_dict", "=", "{", "}", "\n", "\n", "for", "ICM_name", "in", "self", ".", "get_loaded_ICM_names", "(", ")", ":", "\n", "\n", "            ", "ICM_dict", "[", "ICM_name", "]", "=", "self", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "\n", "", "return", "ICM_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_UCM_dict": [[98, 108], ["DataSplitter.DataSplitter.get_loaded_UCM_names", "DataSplitter.DataSplitter.get_UCM_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_UCM_names", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_UCM_from_name"], ["", "def", "get_loaded_UCM_dict", "(", "self", ")", ":", "\n", "# return self.get_dataset_object().get_loaded_UCM_dict()", "\n", "\n", "        ", "UCM_dict", "=", "{", "}", "\n", "\n", "for", "UCM_name", "in", "self", ".", "get_loaded_UCM_names", "(", ")", ":", "\n", "\n", "            ", "UCM_dict", "[", "UCM_name", "]", "=", "self", ".", "get_UCM_from_name", "(", "UCM_name", ")", "\n", "\n", "", "return", "UCM_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._print": [[109, 111], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "message", ")", ":", "\n", "        ", "print", "(", "\"{}: {}\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_default_save_path": [[113, 126], ["DataSplitter.DataSplitter.get_dataReader_object()._get_dataset_name_data_subfolder", "DataSplitter.DataSplitter._get_split_subfolder_name", "DataSplitter.DataSplitter.get_dataReader_object()._get_dataset_name_root", "DataSplitter.DataSplitter.get_dataReader_object", "DataSplitter.DataSplitter.get_dataReader_object"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._get_dataset_name_data_subfolder", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_split_subfolder_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._get_dataset_name_root", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_dataReader_object", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_dataReader_object"], ["", "def", "_get_default_save_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the default path in which to save the splitted data\n        # Use default \"dataset_name/split_name/original\" or \"dataset_name/split_name/k-cores\"\n        :return:\n        \"\"\"", "\n", "\n", "save_folder_path", "=", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "+", "self", ".", "get_dataReader_object", "(", ")", ".", "_get_dataset_name_root", "(", ")", "+", "self", ".", "_get_split_subfolder_name", "(", ")", "+", "self", ".", "get_dataReader_object", "(", ")", ".", "_get_dataset_name_data_subfolder", "(", ")", "\n", "\n", "return", "save_folder_path", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.load_data": [[129, 198], ["DataSplitter.DataSplitter.get_statistics_URM", "DataSplitter.DataSplitter.get_statistics_ICM", "DataSplitter.DataSplitter._print", "DataSplitter.DataSplitter._get_default_save_path", "DataSplitter.DataSplitter._print", "DataSplitter.DataSplitter._split_data_from_original_dataset", "DataSplitter.DataSplitter._print", "DataSplitter.DataSplitter._load_previously_built_split_and_attributes", "DataSplitter.DataSplitter._print", "DataSplitter.DataSplitter._verify_data_consistency", "DataSplitter.DataSplitter._print", "DataSplitter.DataSplitter._print", "traceback.print_exc", "Exception", "ValueError", "DataSplitter.DataSplitter._print", "DataSplitter.DataSplitter._split_data_from_original_dataset", "DataSplitter.DataSplitter._load_previously_built_split_and_attributes", "DataSplitter.DataSplitter._print", "DataSplitter.DataSplitter._verify_data_consistency", "DataSplitter.DataSplitter._print", "DataSplitter.DataSplitter._print", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_statistics_URM", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_statistics_ICM", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_default_save_path", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._split_data_from_original_dataset", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._load_previously_built_split_and_attributes", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._verify_data_consistency", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._split_data_from_original_dataset", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._load_previously_built_split_and_attributes", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._verify_data_consistency", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "load_data", "(", "self", ",", "save_folder_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param save_folder_path:    path in which to save the loaded dataset\n                                    None    use default \"dataset_name/split_name/\"\n                                    False   do not save\n        :return:\n        \"\"\"", "\n", "\n", "# Use default \"dataset_name/split_name/original\" or \"dataset_name/split_name/k-cores\"", "\n", "if", "save_folder_path", "is", "None", ":", "\n", "            ", "save_folder_path", "=", "self", ".", "_get_default_save_path", "(", ")", "\n", "\n", "\n", "# If save_folder_path contains any path try to load a previously built split from it", "\n", "", "if", "save_folder_path", "is", "not", "False", "and", "not", "self", ".", "force_new_split", ":", "\n", "\n", "            ", "try", ":", "\n", "\n", "                ", "self", ".", "_load_previously_built_split_and_attributes", "(", "save_folder_path", ")", "\n", "\n", "self", ".", "_print", "(", "\"Verifying data consistency...\"", ")", "\n", "self", ".", "_verify_data_consistency", "(", ")", "\n", "self", ".", "_print", "(", "\"Verifying data consistency... Passed!\"", ")", "\n", "\n", "", "except", "FileNotFoundError", ":", "\n", "\n", "# Split not found, either stop or create a new one", "\n", "                ", "if", "self", ".", "forbid_new_split", ":", "\n", "                    ", "raise", "ValueError", "(", "\"{}: Preloaded data not found, but creating a new split is forbidden. Terminating\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_print", "(", "\"Preloaded data not found, reading from original files...\"", ")", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_folder_path", ")", "\n", "\n", "", "self", ".", "_split_data_from_original_dataset", "(", "save_folder_path", ")", "\n", "self", ".", "_load_previously_built_split_and_attributes", "(", "save_folder_path", ")", "\n", "\n", "self", ".", "_print", "(", "\"Verifying data consistency...\"", ")", "\n", "self", ".", "_verify_data_consistency", "(", ")", "\n", "self", ".", "_print", "(", "\"Verifying data consistency... Passed!\"", ")", "\n", "\n", "self", ".", "_print", "(", "\"Preloaded data not found, reading from original files... Done\"", ")", "\n", "\n", "\n", "", "", "except", "Exception", ":", "\n", "\n", "                ", "self", ".", "_print", "(", "\"Reading split from {} caused the following exception...\"", ".", "format", "(", "save_folder_path", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "raise", "Exception", "(", "\"{}: Exception while reading split\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "self", ".", "_print", "(", "\"Reading from original files...\"", ")", "\n", "\n", "self", ".", "_split_data_from_original_dataset", "(", "save_folder_path", ")", "\n", "\n", "self", ".", "_print", "(", "\"Reading from original files...Done\"", ")", "\n", "\n", "\n", "\n", "\n", "", "self", ".", "get_statistics_URM", "(", ")", "\n", "self", ".", "get_statistics_ICM", "(", ")", "\n", "\n", "self", ".", "_print", "(", "\"Done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._load_from_DataReader_ICM_and_mappers": [[202, 211], ["loaded_dataset.get_loaded_ICM_dict", "loaded_dataset.get_loaded_ICM_feature_mapper_dict", "loaded_dataset.get_loaded_UCM_dict", "loaded_dataset.get_loaded_UCM_feature_mapper_dict", "loaded_dataset.get_global_mapper_dict"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_ICM_dict", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_loaded_ICM_feature_mapper_dict", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_loaded_UCM_dict", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_loaded_UCM_feature_mapper_dict", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.get_global_mapper_dict"], ["", "def", "_load_from_DataReader_ICM_and_mappers", "(", "self", ",", "loaded_dataset", ")", ":", "\n", "\n", "        ", "self", ".", "SPLIT_ICM_DICT", "=", "loaded_dataset", ".", "get_loaded_ICM_dict", "(", ")", "\n", "self", ".", "SPLIT_ICM_MAPPER_DICT", "=", "loaded_dataset", ".", "get_loaded_ICM_feature_mapper_dict", "(", ")", "\n", "\n", "self", ".", "SPLIT_UCM_DICT", "=", "loaded_dataset", ".", "get_loaded_UCM_dict", "(", ")", "\n", "self", ".", "SPLIT_UCM_MAPPER_DICT", "=", "loaded_dataset", ".", "get_loaded_UCM_feature_mapper_dict", "(", ")", "\n", "\n", "self", ".", "SPLIT_GLOBAL_MAPPER_DICT", "=", "loaded_dataset", ".", "get_global_mapper_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_split_subfolder_name": [[216, 221], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_split_subfolder_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: Dataset_name/split_name/\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"{}: _get_split_subfolder_name was not implemented for the required dataset. Impossible to load the data\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._split_data_from_original_dataset": [[225, 227], ["NotImplementedError"], "methods", ["None"], ["", "def", "_split_data_from_original_dataset", "(", "self", ",", "save_folder_path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"{}: _split_data_from_original_dataset was not implemented for the required dataset. Impossible to load the data\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._load_previously_built_split_and_attributes": [[229, 235], ["NotImplementedError"], "methods", ["None"], ["", "def", "_load_previously_built_split_and_attributes", "(", "self", ",", "save_folder_path", ")", ":", "\n", "        ", "\"\"\"\n        Loads all URM and ICM\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"{}: _load_previously_built_split_and_attributes was not implemented for the required dataset. Impossible to load the data\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_statistics_URM": [[237, 240], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_statistics_URM", "(", "self", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "(", "\"{}: get_statistics_URM was not implemented for the required dataset. Impossible to load the data\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter.get_statistics_ICM": [[243, 246], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_statistics_ICM", "(", "self", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "(", "\"{}: get_statistics_ICM was not implemented for the required dataset. Impossible to load the data\"", ".", "format", "(", "self", ".", "DATA_SPLITTER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._verify_data_consistency": [[255, 258], ["DataSplitter.DataSplitter._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "_verify_data_consistency", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_print", "(", "\"WARNING WARNING WARNING _verify_data_consistency not implemented for the current DataSplitter, unable to validate current split.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_User_sample.DataPostprocessing_User_sample.__init__": [[22, 30], ["recsys.Data_manager.DataPostprocessing.DataPostprocessing.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "dataReader_object", ",", "user_quota", "=", "1.0", ")", ":", "\n", "\n", "        ", "assert", "user_quota", ">", "0.0", "and", "user_quota", "<=", "1.0", ",", "\"DataReaderPostprocessing_User_sample: user_quota must be a positive value > 0.0 and <= 1.0, provided value was {}\"", ".", "format", "(", "user_quota", ")", "\n", "\n", "super", "(", "DataPostprocessing_User_sample", ",", "self", ")", ".", "__init__", "(", "dataReader_object", ")", "\n", "\n", "self", ".", "user_quota", "=", "user_quota", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_User_sample.DataPostprocessing_User_sample._get_dataset_name_data_subfolder": [[32, 50], ["DataPostprocessing_User_sample.DataPostprocessing_User_sample.dataReader_object._get_dataset_name_data_subfolder"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._get_dataset_name_data_subfolder"], ["", "def", "_get_dataset_name_data_subfolder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the subfolder inside the dataset folder tree which contains the specific data to be loaded\n        This method must be overridden by any data post processing object like k-cores / user sampling / interaction sampling etc\n        to be applied before the data split\n\n        :return: original or k_cores etc...\n        \"\"\"", "\n", "\n", "subfolder_name", "=", "\"{}_user_sample/\"", ".", "format", "(", "self", ".", "user_quota", ")", "\n", "\n", "inner_subfolder_name", "=", "self", ".", "dataReader_object", ".", "_get_dataset_name_data_subfolder", "(", ")", "\n", "\n", "# Avoid concatenating the original/ part", "\n", "if", "inner_subfolder_name", "!=", "self", ".", "DATASET_SUBFOLDER_ORIGINAL", ":", "\n", "            ", "subfolder_name", "+=", "inner_subfolder_name", "\n", "\n", "", "return", "subfolder_name", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_User_sample.DataPostprocessing_User_sample._load_from_original_file": [[53, 93], ["DataPostprocessing_User_sample.DataPostprocessing_User_sample.dataReader_object.load_data", "int", "print", "numpy.arange", "numpy.random.shuffle", "scipy.csr_matrix", "scipy.csr_matrix.eliminate_zeros", "recsys.Data_manager.DataPostprocessing_K_Cores.select_k_cores", "DataPostprocessing_User_sample.DataPostprocessing_User_sample._remove_items_and_users"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_K_Cores.select_k_cores", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset._remove_items_and_users"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        _load_from_original_file will call the load of the dataset and then apply on it the k-cores\n        :return:\n        \"\"\"", "\n", "\n", "loaded_dataset", "=", "self", ".", "dataReader_object", ".", "load_data", "(", ")", "\n", "URM_all", "=", "loaded_dataset", ".", "AVAILABLE_URM", "[", "\"URM_all\"", "]", "\n", "\n", "n_users", ",", "n_items", "=", "URM_all", ".", "shape", "\n", "\n", "num_users_to_select", "=", "int", "(", "n_users", "*", "self", ".", "user_quota", ")", "\n", "\n", "print", "(", "\"DataReaderPostprocessing_User_sample: Sampling {:.2f} % of all users, their number is {}\"", ".", "format", "(", "self", ".", "user_quota", "*", "100", ",", "num_users_to_select", ")", ")", "\n", "\n", "user_id_list", "=", "np", ".", "arange", "(", "0", ",", "n_users", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "user_id_list", ")", "\n", "\n", "# sampled_user_id_list = user_id_list[0:num_users_to_select]", "\n", "removed_users", "=", "user_id_list", "[", "num_users_to_select", ":", "]", "\n", "\n", "URM_all", "=", "sps", ".", "csr_matrix", "(", "URM_all", ")", "\n", "\n", "# Remove those user's interactions", "\n", "for", "user_id", "in", "removed_users", ":", "\n", "\n", "            ", "start_pos", "=", "URM_all", ".", "indptr", "[", "user_id", "]", "\n", "end_pos", "=", "URM_all", ".", "indptr", "[", "user_id", "+", "1", "]", "\n", "\n", "URM_all", ".", "data", "[", "start_pos", ":", "end_pos", "]", "=", "0", "\n", "\n", "", "URM_all", ".", "eliminate_zeros", "(", ")", "\n", "\n", "# Apply K - core to remove items with no interactions", "\n", "_", ",", "users_to_remove", ",", "items_to_remove", "=", "select_k_cores", "(", "URM_all", ",", "k_value", "=", "1", ")", "\n", "\n", "loaded_dataset", ".", "_remove_items_and_users", "(", "items_to_remove", "=", "items_to_remove", ",", "users_to_remove", "=", "users_to_remove", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.data_consistency_check.assert_implicit_data": [[14, 27], ["print", "numpy.all", "numpy.ones_like"], "function", ["None"], ["def", "assert_implicit_data", "(", "URM_list", ")", ":", "\n", "    ", "\"\"\"\n    Checks whether the URM in the list only contain implicit data in the form 1 or 0\n    :param URM_list:\n    :return:\n    \"\"\"", "\n", "\n", "for", "URM", "in", "URM_list", ":", "\n", "\n", "        ", "assert", "np", ".", "all", "(", "URM", ".", "data", "==", "np", ".", "ones_like", "(", "URM", ".", "data", ")", ")", ",", "\"assert_implicit_data: URM is not implicit as it contains data other than 1.0\"", "\n", "\n", "\n", "", "print", "(", "\"Assertion assert_implicit_data: Passed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.data_consistency_check.assert_disjoint_matrices": [[29, 59], ["URM.copy", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "assert_disjoint_matrices", "(", "URM_list", ")", ":", "\n", "    ", "\"\"\"\n    Checks whether the URM in the list have an empty intersection, therefore there is no data point contained in more than one\n    URM at a time\n    :param URM_list:\n    :return:\n    \"\"\"", "\n", "\n", "URM_implicit_global", "=", "None", "\n", "\n", "cumulative_nnz", "=", "0", "\n", "\n", "for", "URM", "in", "URM_list", ":", "\n", "\n", "        ", "cumulative_nnz", "+=", "URM", ".", "nnz", "\n", "URM_implicit", "=", "URM", ".", "copy", "(", ")", "\n", "URM_implicit", ".", "data", "=", "np", ".", "ones_like", "(", "URM_implicit", ".", "data", ")", "\n", "\n", "if", "URM_implicit_global", "is", "None", ":", "\n", "            ", "URM_implicit_global", "=", "URM_implicit", "\n", "\n", "", "else", ":", "\n", "            ", "URM_implicit_global", "+=", "URM_implicit", "\n", "\n", "\n", "", "", "assert", "cumulative_nnz", "==", "URM_implicit_global", ".", "nnz", ",", "\"assert_disjoint_matrices: URM in list are not disjoint, {} data points are in more than one URM\"", ".", "format", "(", "cumulative_nnz", "-", "URM_implicit_global", ".", "nnz", ")", "\n", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.data_consistency_check.assert_URM_ICM_mapper_consistency": [[64, 199], ["URM_DICT.items", "scipy.csc_matrix", "numpy.isin().all", "scipy.csr_matrix", "numpy.isin().all", "len", "len", "len", "len", "len", "len", "max", "max", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.arange", "all", "all", "ICM_DICT.items", "all", "all", "UCM_DICT.items", "URM_object.copy", "numpy.ones_like", "URM_object.copy", "numpy.ones_like", "set", "set", "user_original_ID_to_index.values", "item_original_ID_to_index.values", "numpy.isin", "numpy.isin", "len", "len", "scipy.csr_matrix", "numpy.isin().all", "scipy.csc_matrix", "numpy.isin().all", "len", "len", "scipy.csr_matrix", "numpy.isin().all", "scipy.csc_matrix", "numpy.isin().all", "user_original_ID_to_index.values", "item_original_ID_to_index.values", "numpy.array", "numpy.array", "len", "len", "len", "max", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.arange", "len", "len", "len", "max", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "numpy.arange", "list", "list", "ICM_DICT.keys", "ICM_MAPPER_DICT.keys", "feature_original_id_to_index.values", "numpy.isin", "numpy.isin", "UCM_DICT.keys", "UCM_MAPPER_DICT.keys", "feature_original_id_to_index.values", "numpy.isin", "numpy.isin", "item_original_ID_to_index.values", "user_original_ID_to_index.values", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "list", "list", "list", "list", "item_original_ID_to_index.values", "feature_original_id_to_index.values", "user_original_ID_to_index.values", "feature_original_id_to_index.values"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "assert_URM_ICM_mapper_consistency", "(", "URM_DICT", ",", "user_original_ID_to_index", ",", "item_original_ID_to_index", ",", "\n", "ICM_DICT", ",", "ICM_MAPPER_DICT", ",", "\n", "UCM_DICT", ",", "UCM_MAPPER_DICT", ",", "\n", "DATA_SPLITTER_NAME", ")", ":", "\n", "\n", "    ", "print_preamble", "=", "\"{} consistency check: \"", ".", "format", "(", "DATA_SPLITTER_NAME", ")", "\n", "\n", "URM_shape", "=", "None", "\n", "\n", "for", "URM_name", ",", "URM_object", "in", "URM_DICT", ".", "items", "(", ")", ":", "\n", "\n", "        ", "if", "URM_shape", "is", "None", ":", "\n", "            ", "URM_shape", "=", "URM_object", ".", "shape", "\n", "\n", "URM_all", "=", "URM_object", ".", "copy", "(", ")", "\n", "URM_all", ".", "data", "=", "np", ".", "ones_like", "(", "URM_all", ".", "data", ")", "\n", "\n", "n_users_URM", ",", "n_items_URM", "=", "URM_shape", "\n", "\n", "assert", "n_users_URM", "!=", "0", ",", "print_preamble", "+", "\"Number of users in URM is 0\"", "\n", "assert", "n_items_URM", "!=", "0", ",", "print_preamble", "+", "\"Number of items in URM is 0\"", "\n", "\n", "", "else", ":", "\n", "            ", "URM_implicit", "=", "URM_object", ".", "copy", "(", ")", "\n", "URM_implicit", ".", "data", "=", "np", ".", "ones_like", "(", "URM_implicit", ".", "data", ")", "\n", "\n", "URM_all", "+=", "URM_implicit", "\n", "\n", "", "assert", "URM_shape", "==", "URM_object", ".", "shape", ",", "print_preamble", "+", "\"URM shape is inconsistent\"", "\n", "\n", "\n", "", "assert", "n_users_URM", "!=", "0", ",", "print_preamble", "+", "\"Number of users in URM is 0\"", "\n", "assert", "n_items_URM", "!=", "0", ",", "print_preamble", "+", "\"Number of items in URM is 0\"", "\n", "\n", "# Check if item index-id and user index-id are consistent", "\n", "assert", "len", "(", "set", "(", "user_original_ID_to_index", ".", "values", "(", ")", ")", ")", "==", "len", "(", "user_original_ID_to_index", ")", ",", "\"user it-to-index mapper values do not have a 1-to-1 correspondance with the key\"", "\n", "assert", "len", "(", "set", "(", "item_original_ID_to_index", ".", "values", "(", ")", ")", ")", "==", "len", "(", "item_original_ID_to_index", ")", ",", "\"item it-to-index mapper values do not have a 1-to-1 correspondance with the key\"", "\n", "\n", "assert", "n_users_URM", "==", "len", "(", "user_original_ID_to_index", ")", ",", "print_preamble", "+", "\"user ID-to-index mapper contains a number of keys different then the number of users\"", "\n", "assert", "n_items_URM", "==", "len", "(", "item_original_ID_to_index", ")", ",", "print_preamble", "+", "\"item ID-to-index mapper contains a number of keys different then the number of items\"", "\n", "\n", "assert", "n_users_URM", ">=", "max", "(", "user_original_ID_to_index", ".", "values", "(", ")", ")", ",", "print_preamble", "+", "\"user ID-to-index mapper contains indices greater than number of users\"", "\n", "assert", "n_items_URM", ">=", "max", "(", "item_original_ID_to_index", ".", "values", "(", ")", ")", ",", "print_preamble", "+", "\"item ID-to-index mapper contains indices greater than number of item\"", "\n", "\n", "\n", "# Check if every non-empty user and item has a mapper value", "\n", "URM_all", "=", "sps", ".", "csc_matrix", "(", "URM_all", ")", "\n", "nonzero_items_mask", "=", "np", ".", "ediff1d", "(", "URM_all", ".", "indptr", ")", ">", "0", "\n", "nonzero_items", "=", "np", ".", "arange", "(", "0", ",", "n_items_URM", ",", "dtype", "=", "np", ".", "int", ")", "[", "nonzero_items_mask", "]", "\n", "assert", "np", ".", "isin", "(", "nonzero_items", ",", "np", ".", "array", "(", "list", "(", "item_original_ID_to_index", ".", "values", "(", ")", ")", ")", ")", ".", "all", "(", ")", ",", "print_preamble", "+", "\"there exist items with interactions that do not have a mapper entry\"", "\n", "\n", "\n", "URM_all", "=", "sps", ".", "csr_matrix", "(", "URM_all", ")", "\n", "nonzero_users_mask", "=", "np", ".", "ediff1d", "(", "URM_all", ".", "indptr", ")", ">", "0", "\n", "nonzero_users", "=", "np", ".", "arange", "(", "0", ",", "n_users_URM", ",", "dtype", "=", "np", ".", "int", ")", "[", "nonzero_users_mask", "]", "\n", "assert", "np", ".", "isin", "(", "nonzero_users", ",", "np", ".", "array", "(", "list", "(", "user_original_ID_to_index", ".", "values", "(", ")", ")", ")", ")", ".", "all", "(", ")", ",", "print_preamble", "+", "\"there exist users with interactions that do not have a mapper entry\"", "\n", "\n", "if", "ICM_MAPPER_DICT", "is", "not", "None", ":", "\n", "\n", "        ", "assert", "len", "(", "ICM_DICT", ")", "==", "len", "(", "ICM_MAPPER_DICT", ")", ",", "print_preamble", "+", "\"The available ICM and the available ICM mappers do not have the same length. ICMs are {}, mappers are {}\"", ".", "format", "(", "len", "(", "ICM_DICT", ")", ",", "len", "(", "ICM_MAPPER_DICT", ")", ")", "\n", "\n", "assert", "all", "(", "ICM_name", "in", "ICM_MAPPER_DICT", "for", "ICM_name", "in", "ICM_DICT", ".", "keys", "(", ")", ")", ",", "print_preamble", "+", "\"Not all ICM sparse matrix have a corresponding ICM mapper\"", "\n", "assert", "all", "(", "ICM_name", "in", "ICM_DICT", "for", "ICM_name", "in", "ICM_MAPPER_DICT", ".", "keys", "(", ")", ")", ",", "print_preamble", "+", "\"Not all ICM mappers have a corresponding ICM sparse matrix\"", "\n", "\n", "\n", "for", "ICM_name", ",", "ICM_object", "in", "ICM_DICT", ".", "items", "(", ")", ":", "\n", "\n", "            ", "assert", "ICM_name", "in", "ICM_MAPPER_DICT", ",", "print_preamble", "+", "\"No mapper is available for ICM '{}'\"", ".", "format", "(", "ICM_name", ")", "\n", "\n", "feature_original_id_to_index", "=", "ICM_MAPPER_DICT", "[", "ICM_name", "]", "\n", "\n", "n_items_ICM", ",", "n_features", "=", "ICM_object", ".", "shape", "\n", "n_feature_occurrences", "=", "ICM_object", ".", "nnz", "\n", "\n", "assert", "n_items_ICM", "==", "n_items_URM", ",", "print_preamble", "+", "\"Number of items in ICM {} is {} while in URM is {}\"", ".", "format", "(", "ICM_name", ",", "n_items_ICM", ",", "n_items_URM", ")", "\n", "assert", "n_features", "!=", "0", ",", "print_preamble", "+", "\"Number of features in ICM {} is 0\"", ".", "format", "(", "ICM_name", ")", "\n", "assert", "n_feature_occurrences", "!=", "0", ",", "print_preamble", "+", "\"Number of interactions in ICM {} is 0\"", ".", "format", "(", "ICM_name", ")", "\n", "\n", "\n", "assert", "n_features", ">=", "len", "(", "feature_original_id_to_index", ")", ",", "print_preamble", "+", "\"feature ID-to-index mapper contains more keys than features in ICM {}\"", ".", "format", "(", "ICM_name", ")", "\n", "assert", "n_features", ">=", "max", "(", "feature_original_id_to_index", ".", "values", "(", ")", ")", ",", "print_preamble", "+", "\"feature ID-to-index mapper contains indices greater than number of features in ICM {}\"", ".", "format", "(", "ICM_name", ")", "\n", "\n", "# Check if every non-empty item and feature has a mapper value", "\n", "ICM_object", "=", "sps", ".", "csr_matrix", "(", "ICM_object", ")", "\n", "nonzero_items_mask", "=", "np", ".", "ediff1d", "(", "ICM_object", ".", "indptr", ")", ">", "0", "\n", "nonzero_items", "=", "np", ".", "arange", "(", "0", ",", "n_items_URM", ",", "dtype", "=", "np", ".", "int", ")", "[", "nonzero_items_mask", "]", "\n", "assert", "np", ".", "isin", "(", "nonzero_items", ",", "np", ".", "array", "(", "list", "(", "item_original_ID_to_index", ".", "values", "(", ")", ")", ")", ")", ".", "all", "(", ")", ",", "print_preamble", "+", "\"there exist items with features that do not have a mapper entry in ICM {}\"", ".", "format", "(", "ICM_name", ")", "\n", "\n", "\n", "ICM_object", "=", "sps", ".", "csc_matrix", "(", "ICM_object", ")", "\n", "nonzero_features_mask", "=", "np", ".", "ediff1d", "(", "ICM_object", ".", "indptr", ")", ">", "0", "\n", "nonzero_features", "=", "np", ".", "arange", "(", "0", ",", "n_features", ",", "dtype", "=", "np", ".", "int", ")", "[", "nonzero_features_mask", "]", "\n", "assert", "np", ".", "isin", "(", "nonzero_features", ",", "np", ".", "array", "(", "list", "(", "feature_original_id_to_index", ".", "values", "(", ")", ")", ")", ")", ".", "all", "(", ")", ",", "print_preamble", "+", "\"there exist users with interactions that do not have a mapper entry in ICM {}\"", ".", "format", "(", "ICM_name", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "if", "UCM_MAPPER_DICT", "is", "not", "None", ":", "\n", "\n", "        ", "assert", "len", "(", "UCM_DICT", ")", "==", "len", "(", "UCM_MAPPER_DICT", ")", ",", "print_preamble", "+", "\"The available UCM and the available UCM mappers do not have the same length. UCMs are {}, mappers are {}\"", ".", "format", "(", "len", "(", "UCM_DICT", ")", ",", "len", "(", "UCM_MAPPER_DICT", ")", ")", "\n", "\n", "assert", "all", "(", "UCM_name", "in", "UCM_MAPPER_DICT", "for", "UCM_name", "in", "UCM_DICT", ".", "keys", "(", ")", ")", ",", "print_preamble", "+", "\"Not all UCM sparse matrix have a corresponding UCM mapper\"", "\n", "assert", "all", "(", "UCM_name", "in", "UCM_DICT", "for", "UCM_name", "in", "UCM_MAPPER_DICT", ".", "keys", "(", ")", ")", ",", "print_preamble", "+", "\"Not all UCM mappers have a corresponding UCM sparse matrix\"", "\n", "\n", "\n", "for", "UCM_name", ",", "UCM_object", "in", "UCM_DICT", ".", "items", "(", ")", ":", "\n", "\n", "            ", "assert", "UCM_name", "in", "UCM_MAPPER_DICT", ",", "print_preamble", "+", "\"No mapper is available for UCM '{}'\"", ".", "format", "(", "UCM_name", ")", "\n", "\n", "feature_original_id_to_index", "=", "UCM_MAPPER_DICT", "[", "UCM_name", "]", "\n", "\n", "n_users_UCM", ",", "n_features", "=", "UCM_object", ".", "shape", "\n", "n_feature_occurrences", "=", "UCM_object", ".", "nnz", "\n", "\n", "assert", "n_users_UCM", "==", "n_users_URM", ",", "print_preamble", "+", "\"Number of users in UCM {} is {} while in URM is {}\"", ".", "format", "(", "UCM_name", ",", "n_users_UCM", ",", "n_users_URM", ")", "\n", "assert", "n_features", "!=", "0", ",", "print_preamble", "+", "\"Number of features in UCM {} is 0\"", ".", "format", "(", "UCM_name", ")", "\n", "assert", "n_feature_occurrences", "!=", "0", ",", "print_preamble", "+", "\"Number of interactions in UCM {} is 0\"", ".", "format", "(", "UCM_name", ")", "\n", "\n", "\n", "assert", "n_features", ">=", "len", "(", "feature_original_id_to_index", ")", ",", "print_preamble", "+", "\"feature ID-to-index mapper contains more keys than features in UCM {}\"", ".", "format", "(", "UCM_name", ")", "\n", "assert", "n_features", ">=", "max", "(", "feature_original_id_to_index", ".", "values", "(", ")", ")", ",", "print_preamble", "+", "\"feature ID-to-index mapper contains indices greater than number of features in UCM {}\"", ".", "format", "(", "UCM_name", ")", "\n", "\n", "# Check if every non-empty user and feature has a mapper value", "\n", "UCM_object", "=", "sps", ".", "csr_matrix", "(", "UCM_object", ")", "\n", "nonzero_users_mask", "=", "np", ".", "ediff1d", "(", "UCM_object", ".", "indptr", ")", ">", "0", "\n", "nonzero_users", "=", "np", ".", "arange", "(", "0", ",", "n_users_URM", ",", "dtype", "=", "np", ".", "int", ")", "[", "nonzero_users_mask", "]", "\n", "assert", "np", ".", "isin", "(", "nonzero_users", ",", "np", ".", "array", "(", "list", "(", "user_original_ID_to_index", ".", "values", "(", ")", ")", ")", ")", ".", "all", "(", ")", ",", "print_preamble", "+", "\"there exist users with features that do not have a mapper entry in UCM {}\"", ".", "format", "(", "UCM_name", ")", "\n", "\n", "\n", "UCM_object", "=", "sps", ".", "csc_matrix", "(", "UCM_object", ")", "\n", "nonzero_features_mask", "=", "np", ".", "ediff1d", "(", "UCM_object", ".", "indptr", ")", ">", "0", "\n", "nonzero_features", "=", "np", ".", "arange", "(", "0", ",", "n_features", ",", "dtype", "=", "np", ".", "int", ")", "[", "nonzero_features_mask", "]", "\n", "assert", "np", ".", "isin", "(", "nonzero_features", ",", "np", ".", "array", "(", "list", "(", "feature_original_id_to_index", ".", "values", "(", ")", ")", ")", ")", ".", "all", "(", ")", ",", "print_preamble", "+", "\"there exist users with interactions that do not have a mapper entry in UCM {}\"", ".", "format", "(", "UCM_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM.__init__": [[20, 22], ["recsys.Data_manager.DataPostprocessing.DataPostprocessing.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "dataReader_object", ")", ":", "\n", "        ", "super", "(", "DataPostprocessing_Implicit_URM", ",", "self", ")", ".", "__init__", "(", "dataReader_object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM.is_implicit": [[23, 25], ["None"], "methods", ["None"], ["", "def", "is_implicit", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._get_dataset_name_data_subfolder": [[26, 44], ["DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM.dataReader_object._get_dataset_name_data_subfolder"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._get_dataset_name_data_subfolder"], ["", "def", "_get_dataset_name_data_subfolder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the subfolder inside the dataset folder tree which contains the specific data to be loaded\n        This method must be overridden by any data post processing object like k-cores / user sampling / interaction sampling etc\n        to be applied before the data split\n\n        :return: original or k_cores etc...\n        \"\"\"", "\n", "\n", "subfolder_name", "=", "\"implicit/\"", "\n", "\n", "inner_subfolder_name", "=", "self", ".", "dataReader_object", ".", "_get_dataset_name_data_subfolder", "(", ")", "\n", "\n", "# Avoid concatenating the original/ part", "\n", "if", "inner_subfolder_name", "!=", "self", ".", "DATASET_SUBFOLDER_ORIGINAL", ":", "\n", "            ", "subfolder_name", "+=", "inner_subfolder_name", "\n", "\n", "", "return", "subfolder_name", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._replace_interactions_with_ones": [[47, 63], ["loaded_dataset.AVAILABLE_URM.items", "len", "min", "numpy.ones", "len"], "methods", ["None"], ["", "def", "_replace_interactions_with_ones", "(", "self", ",", "loaded_dataset", ")", ":", "\n", "\n", "# Split in blocks to avoid duplicating the whole data structure", "\n", "        ", "start_pos", "=", "0", "\n", "end_pos", "=", "0", "\n", "\n", "blockSize", "=", "1000", "\n", "\n", "for", "URM_name", ",", "URM_obj", "in", "loaded_dataset", ".", "AVAILABLE_URM", ".", "items", "(", ")", ":", "\n", "\n", "            ", "while", "end_pos", "<", "len", "(", "URM_obj", ".", "data", ")", ":", "\n", "\n", "                ", "end_pos", "=", "min", "(", "len", "(", "URM_obj", ".", "data", ")", ",", "end_pos", "+", "blockSize", ")", "\n", "URM_obj", ".", "data", "[", "start_pos", ":", "end_pos", "]", "=", "np", ".", "ones", "(", "end_pos", "-", "start_pos", ")", "\n", "\n", "start_pos", "+=", "blockSize", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._load_from_original_file": [[66, 76], ["DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM.dataReader_object.load_data", "DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._replace_interactions_with_ones"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataPostprocessing_Implicit_URM.DataPostprocessing_Implicit_URM._replace_interactions_with_ones"], ["", "", "", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        _load_from_original_file will call the load of the dataset and then apply on it the k-cores\n        :return:\n        \"\"\"", "\n", "\n", "loaded_dataset", "=", "self", ".", "dataReader_object", ".", "load_data", "(", ")", "\n", "self", ".", "_replace_interactions_with_ones", "(", "loaded_dataset", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens.Movielens20MReader.Movielens20MReader._get_dataset_name_root": [[26, 28], ["None"], "methods", ["None"], ["def", "_get_dataset_name_root", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "DATASET_SUBFOLDER", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens.Movielens20MReader.Movielens20MReader._load_from_original_file": [[30, 100], ["zipfile.ZipFile.extract", "zipfile.ZipFile.extract", "zipfile.ZipFile.extract", "Movielens20MReader.Movielens20MReader._print", "recsys.Data_manager.Movielens._utils_movielens_parser._loadICM_genres", "Movielens20MReader.Movielens20MReader._print", "recsys.Data_manager.Movielens._utils_movielens_parser._loadICM_tags", "Movielens20MReader.Movielens20MReader._print", "recsys.Data_manager.Movielens._utils_movielens_parser._loadURM_preinitialized_item_id", "recsys.Data_manager.DataReader_utils.merge_ICM", "recsys.Data_manager.Dataset.Dataset", "Movielens20MReader.Movielens20MReader._print", "shutil.rmtree", "Movielens20MReader.Movielens20MReader._print", "zipfile.ZipFile", "print", "recsys.Data_manager.DataReader_utils.download_from_URL", "zipfile.ZipFile", "Movielens20MReader.Movielens20MReader._get_dataset_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens._utils_movielens_parser._loadICM_genres", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens._utils_movielens_parser._loadICM_tags", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens._utils_movielens_parser._loadURM_preinitialized_item_id", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.merge_ICM", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataReader_utils.download_from_URL", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "# Load data from original", "\n", "\n", "        ", "zipFile_path", "=", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "\n", "try", ":", "\n", "\n", "            ", "dataFile", "=", "zipfile", ".", "ZipFile", "(", "zipFile_path", "+", "\"ml-20m.zip\"", ")", "\n", "\n", "", "except", "(", "FileNotFoundError", ",", "zipfile", ".", "BadZipFile", ")", ":", "\n", "\n", "            ", "print", "(", "\"Movielens20MReader: Unable to fild data zip file. Downloading...\"", ")", "\n", "\n", "download_from_URL", "(", "self", ".", "DATASET_URL", ",", "zipFile_path", ",", "\"ml-20m.zip\"", ")", "\n", "\n", "dataFile", "=", "zipfile", ".", "ZipFile", "(", "zipFile_path", "+", "\"ml-20m.zip\"", ")", "\n", "\n", "\n", "", "genres_path", "=", "dataFile", ".", "extract", "(", "\"ml-20m/movies.csv\"", ",", "path", "=", "zipFile_path", "+", "\"decompressed/\"", ")", "\n", "tags_path", "=", "dataFile", ".", "extract", "(", "\"ml-20m/tags.csv\"", ",", "path", "=", "zipFile_path", "+", "\"decompressed/\"", ")", "\n", "URM_path", "=", "dataFile", ".", "extract", "(", "\"ml-20m/ratings.csv\"", ",", "path", "=", "zipFile_path", "+", "\"decompressed/\"", ")", "\n", "\n", "\n", "self", ".", "_print", "(", "\"loading genres\"", ")", "\n", "ICM_genres", ",", "tokenToFeatureMapper_ICM_genres", ",", "item_original_ID_to_index", "=", "_loadICM_genres", "(", "genres_path", ",", "header", "=", "True", ",", "separator", "=", "','", ",", "genresSeparator", "=", "\"|\"", ")", "\n", "\n", "self", ".", "_print", "(", "\"loading tags\"", ")", "\n", "ICM_tags", ",", "tokenToFeatureMapper_ICM_tags", ",", "_", "=", "_loadICM_tags", "(", "tags_path", ",", "header", "=", "True", ",", "separator", "=", "','", ",", "if_new_item", "=", "\"ignore\"", ",", "\n", "item_original_ID_to_index", "=", "item_original_ID_to_index", ")", "\n", "\n", "self", ".", "_print", "(", "\"loading URM\"", ")", "\n", "URM_all", ",", "item_original_ID_to_index", ",", "user_original_ID_to_index", ",", "URM_timestamp", "=", "_loadURM_preinitialized_item_id", "(", "URM_path", ",", "separator", "=", "\",\"", ",", "\n", "header", "=", "True", ",", "if_new_user", "=", "\"add\"", ",", "if_new_item", "=", "\"ignore\"", ",", "\n", "item_original_ID_to_index", "=", "item_original_ID_to_index", ")", "\n", "\n", "ICM_all", ",", "tokenToFeatureMapper_ICM_all", "=", "merge_ICM", "(", "ICM_genres", ",", "ICM_tags", ",", "\n", "tokenToFeatureMapper_ICM_genres", ",", "\n", "tokenToFeatureMapper_ICM_tags", ")", "\n", "\n", "\n", "loaded_URM_dict", "=", "{", "\"URM_all\"", ":", "URM_all", ",", "\n", "\"URM_timestamp\"", ":", "URM_timestamp", "}", "\n", "\n", "loaded_ICM_dict", "=", "{", "\"ICM_genres\"", ":", "ICM_genres", ",", "\n", "\"ICM_tags\"", ":", "ICM_tags", ",", "\n", "\"ICM_all\"", ":", "ICM_all", "}", "\n", "\n", "loaded_ICM_mapper_dict", "=", "{", "\"ICM_genres\"", ":", "tokenToFeatureMapper_ICM_genres", ",", "\n", "\"ICM_tags\"", ":", "tokenToFeatureMapper_ICM_tags", ",", "\n", "\"ICM_all\"", ":", "tokenToFeatureMapper_ICM_all", "}", "\n", "\n", "\n", "loaded_dataset", "=", "Dataset", "(", "dataset_name", "=", "self", ".", "_get_dataset_name", "(", ")", ",", "\n", "URM_dictionary", "=", "loaded_URM_dict", ",", "\n", "ICM_dictionary", "=", "loaded_ICM_dict", ",", "\n", "ICM_feature_mapper_dictionary", "=", "loaded_ICM_mapper_dict", ",", "\n", "UCM_dictionary", "=", "None", ",", "\n", "UCM_feature_mapper_dictionary", "=", "None", ",", "\n", "user_original_ID_to_index", "=", "user_original_ID_to_index", ",", "\n", "item_original_ID_to_index", "=", "item_original_ID_to_index", ",", "\n", "is_implicit", "=", "self", ".", "IS_IMPLICIT", ",", "\n", ")", "\n", "\n", "self", ".", "_print", "(", "\"cleaning temporary files\"", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "zipFile_path", "+", "\"decompressed\"", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "self", ".", "_print", "(", "\"saving URM and ICM\"", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens._utils_movielens_parser._loadURM_preinitialized_item_id": [[13, 58], ["IncrementalSparseMatrix_FilterIDs", "IncrementalSparseMatrix_FilterIDs", "pd.read_csv.drop", "IncrementalSparseMatrix_FilterIDs.add_data_lists", "IncrementalSparseMatrix_FilterIDs.add_data_lists", "pandas.read_csv", "pandas.read_csv", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix"], ["def", "_loadURM_preinitialized_item_id", "(", "filePath", ",", "header", "=", "False", ",", "separator", "=", "\"::\"", ",", "\n", "if_new_user", "=", "\"add\"", ",", "if_new_item", "=", "\"ignore\"", ",", "\n", "item_original_ID_to_index", "=", "None", ",", "\n", "user_original_ID_to_index", "=", "None", ")", ":", "\n", "\n", "\n", "    ", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix_FilterIDs", "\n", "\n", "URM_all_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "item_original_ID_to_index", ",", "\n", "on_new_col", "=", "if_new_item", ",", "\n", "preinitialized_row_mapper", "=", "user_original_ID_to_index", ",", "\n", "on_new_row", "=", "if_new_user", ")", "\n", "\n", "URM_timestamp_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "item_original_ID_to_index", ",", "\n", "on_new_col", "=", "if_new_item", ",", "\n", "preinitialized_row_mapper", "=", "user_original_ID_to_index", ",", "\n", "on_new_row", "=", "if_new_user", ")", "\n", "\n", "if", "header", ":", "\n", "        ", "df_original", "=", "pd", ".", "read_csv", "(", "filepath_or_buffer", "=", "filePath", ",", "sep", "=", "separator", ",", "header", "=", "0", "if", "header", "else", "None", ",", "\n", "usecols", "=", "[", "'userId'", ",", "'movieId'", ",", "'rating'", ",", "'timestamp'", "]", ",", "\n", "dtype", "=", "{", "'userId'", ":", "str", ",", "'movieId'", ":", "str", ",", "'rating'", ":", "float", ",", "'timestamp'", ":", "float", "}", ")", "\n", "", "else", ":", "\n", "        ", "df_original", "=", "pd", ".", "read_csv", "(", "filepath_or_buffer", "=", "filePath", ",", "sep", "=", "separator", ",", "header", "=", "0", "if", "header", "else", "None", ",", "\n", "dtype", "=", "{", "0", ":", "str", ",", "1", ":", "str", ",", "2", ":", "float", ",", "3", ":", "float", "}", ")", "\n", "\n", "df_original", ".", "columns", "=", "[", "'userId'", ",", "'movieId'", ",", "'rating'", ",", "'timestamp'", "]", "\n", "\n", "# Remove data with rating non valid", "\n", "", "df_original", ".", "drop", "(", "df_original", "[", "df_original", ".", "rating", "==", "0.0", "]", ".", "index", ",", "inplace", "=", "True", ")", "\n", "\n", "user_id_list", "=", "df_original", "[", "'userId'", "]", ".", "values", "\n", "item_id_list", "=", "df_original", "[", "'movieId'", "]", ".", "values", "\n", "rating_list", "=", "df_original", "[", "'rating'", "]", ".", "values", "\n", "timestamp_list", "=", "df_original", "[", "'timestamp'", "]", ".", "values", "\n", "\n", "URM_all_builder", ".", "add_data_lists", "(", "user_id_list", ",", "item_id_list", ",", "rating_list", ")", "\n", "URM_timestamp_builder", ".", "add_data_lists", "(", "user_id_list", ",", "item_id_list", ",", "timestamp_list", ")", "\n", "\n", "\n", "\n", "return", "URM_all_builder", ".", "get_SparseMatrix", "(", ")", ",", "URM_all_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "URM_all_builder", ".", "get_row_token_to_id_mapper", "(", ")", ",", "URM_timestamp_builder", ".", "get_SparseMatrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens._utils_movielens_parser._loadICM_genres": [[63, 105], ["IncrementalSparseMatrix_FilterIDs", "open", "open.close", "open.readline", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "print", "len", "line.split.split", "line[].replace", "genreList.split.split", "IncrementalSparseMatrix_FilterIDs.add_single_row"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row"], ["", "def", "_loadICM_genres", "(", "genres_path", ",", "header", "=", "True", ",", "separator", "=", "','", ",", "genresSeparator", "=", "\"|\"", ")", ":", "\n", "\n", "# Genres", "\n", "    ", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix_FilterIDs", "\n", "\n", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "None", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "None", ",", "on_new_row", "=", "\"add\"", ")", "\n", "\n", "\n", "fileHandle", "=", "open", "(", "genres_path", ",", "\"r\"", ",", "encoding", "=", "\"latin1\"", ")", "\n", "numCells", "=", "0", "\n", "\n", "if", "header", ":", "\n", "        ", "fileHandle", ".", "readline", "(", ")", "\n", "\n", "", "for", "line", "in", "fileHandle", ":", "\n", "        ", "numCells", "+=", "1", "\n", "if", "(", "numCells", "%", "1000000", "==", "0", ")", ":", "\n", "            ", "print", "(", "\"Processed {} cells\"", ".", "format", "(", "numCells", ")", ")", "\n", "\n", "", "if", "(", "len", "(", "line", ")", ")", ">", "1", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "separator", ")", "\n", "\n", "line", "[", "-", "1", "]", "=", "line", "[", "-", "1", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "\n", "movie_id", "=", "line", "[", "0", "]", "\n", "\n", "title", "=", "line", "[", "1", "]", "\n", "# In case the title contains commas, it is enclosed in \"...\"", "\n", "# genre list will always be the last element", "\n", "genreList", "=", "line", "[", "-", "1", "]", "\n", "\n", "genreList", "=", "genreList", ".", "split", "(", "genresSeparator", ")", "\n", "\n", "# Rows movie ID", "\n", "# Cols features", "\n", "ICM_builder", ".", "add_single_row", "(", "movie_id", ",", "genreList", ",", "data", "=", "1.0", ")", "\n", "\n", "\n", "", "", "fileHandle", ".", "close", "(", ")", "\n", "\n", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens._utils_movielens_parser._loadICM_tags": [[111, 159], ["IncrementalSparseMatrix_FilterIDs", "open", "open.close", "open.readline", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "print", "len", "line.split.split", "line[].replace", "tagFilterAndStemming", "IncrementalSparseMatrix_FilterIDs.add_single_row"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.TagPreprocessing.tagFilterAndStemming", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row"], ["", "def", "_loadICM_tags", "(", "tags_path", ",", "header", "=", "True", ",", "separator", "=", "','", ",", "if_new_item", "=", "\"ignore\"", ",", "\n", "item_original_ID_to_index", "=", "None", ",", "preinitialized_col_mapper", "=", "None", ")", ":", "\n", "\n", "# Tags", "\n", "    ", "from", "recsys", ".", "Data_manager", ".", "TagPreprocessing", "import", "tagFilterAndStemming", "\n", "\n", "\n", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix_FilterIDs", "\n", "\n", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "preinitialized_col_mapper", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "item_original_ID_to_index", ",", "on_new_row", "=", "if_new_item", ")", "\n", "\n", "\n", "\n", "fileHandle", "=", "open", "(", "tags_path", ",", "\"r\"", ",", "encoding", "=", "\"latin1\"", ")", "\n", "numCells", "=", "0", "\n", "\n", "if", "header", ":", "\n", "        ", "fileHandle", ".", "readline", "(", ")", "\n", "\n", "", "for", "line", "in", "fileHandle", ":", "\n", "        ", "numCells", "+=", "1", "\n", "if", "(", "numCells", "%", "100000", "==", "0", ")", ":", "\n", "            ", "print", "(", "\"Processed {} cells\"", ".", "format", "(", "numCells", ")", ")", "\n", "\n", "", "if", "(", "len", "(", "line", ")", ")", ">", "1", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "separator", ")", "\n", "\n", "line", "[", "-", "1", "]", "=", "line", "[", "-", "1", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "\n", "# If a movie has no genre, ignore it", "\n", "movie_id", "=", "line", "[", "1", "]", "\n", "\n", "tagList", "=", "line", "[", "2", "]", "\n", "\n", "# Remove non alphabetical character and split on spaces", "\n", "tagList", "=", "tagFilterAndStemming", "(", "tagList", ")", "\n", "\n", "# Rows movie ID", "\n", "# Cols features", "\n", "ICM_builder", ".", "add_single_row", "(", "movie_id", ",", "tagList", ",", "data", "=", "1.0", ")", "\n", "\n", "\n", "", "", "fileHandle", ".", "close", "(", ")", "\n", "\n", "\n", "\n", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Movielens._utils_movielens_parser._loadUCM": [[164, 205], ["IncrementalSparseMatrix_FilterIDs", "open", "open.close", "open.readline", "IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "IncrementalSparseMatrix_FilterIDs.get_column_token_to_id_mapper", "IncrementalSparseMatrix_FilterIDs.get_row_token_to_id_mapper", "print", "len", "line.split.split", "line[].replace", "token_list.append", "token_list.append", "token_list.append", "token_list.append", "IncrementalSparseMatrix_FilterIDs.add_single_row", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row"], ["", "def", "_loadUCM", "(", "UCM_path", ",", "header", "=", "True", ",", "separator", "=", "','", ")", ":", "\n", "\n", "# Genres", "\n", "    ", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix_FilterIDs", "\n", "\n", "ICM_builder", "=", "IncrementalSparseMatrix_FilterIDs", "(", "preinitialized_col_mapper", "=", "None", ",", "on_new_col", "=", "\"add\"", ",", "\n", "preinitialized_row_mapper", "=", "None", ",", "on_new_row", "=", "\"add\"", ")", "\n", "\n", "\n", "fileHandle", "=", "open", "(", "UCM_path", ",", "\"r\"", ",", "encoding", "=", "\"latin1\"", ")", "\n", "numCells", "=", "0", "\n", "\n", "if", "header", ":", "\n", "        ", "fileHandle", ".", "readline", "(", ")", "\n", "\n", "", "for", "line", "in", "fileHandle", ":", "\n", "        ", "numCells", "+=", "1", "\n", "if", "(", "numCells", "%", "1000000", "==", "0", ")", ":", "\n", "            ", "print", "(", "\"Processed {} cells\"", ".", "format", "(", "numCells", ")", ")", "\n", "\n", "", "if", "(", "len", "(", "line", ")", ")", ">", "1", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "separator", ")", "\n", "\n", "line", "[", "-", "1", "]", "=", "line", "[", "-", "1", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "\n", "user_id", "=", "line", "[", "0", "]", "\n", "\n", "token_list", "=", "[", "]", "\n", "token_list", ".", "append", "(", "\"gender_\"", "+", "str", "(", "line", "[", "1", "]", ")", ")", "\n", "token_list", ".", "append", "(", "\"age_group_\"", "+", "str", "(", "line", "[", "2", "]", ")", ")", "\n", "token_list", ".", "append", "(", "\"occupation_\"", "+", "str", "(", "line", "[", "3", "]", ")", ")", "\n", "token_list", ".", "append", "(", "\"zip_code_\"", "+", "str", "(", "line", "[", "4", "]", ")", ")", "\n", "\n", "# Rows movie ID", "\n", "# Cols features", "\n", "ICM_builder", ".", "add_single_row", "(", "user_id", ",", "token_list", ",", "data", "=", "1.0", ")", "\n", "\n", "\n", "", "", "fileHandle", ".", "close", "(", ")", "\n", "\n", "return", "ICM_builder", ".", "get_SparseMatrix", "(", ")", ",", "ICM_builder", ".", "get_column_token_to_id_mapper", "(", ")", ",", "ICM_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._get_dataset_name_root": [[34, 36], ["None"], "methods", ["None"], ["def", "_get_dataset_name_root", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "DATASET_SUBFOLDER", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._load_from_original_file": [[39, 133], ["CiteULikeReader._CiteULikeReader.dataFile.extract", "CiteULikeReader._CiteULikeReader.dataFile.extract", "CiteULikeReader._CiteULikeReader.dataFile.extract", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "CiteULikeReader._CiteULikeReader._load_data_file", "CiteULikeReader._CiteULikeReader._load_data_file", "CiteULikeReader._CiteULikeReader.get_SparseMatrix", "CiteULikeReader._CiteULikeReader.get_column_token_to_id_mapper", "CiteULikeReader._CiteULikeReader.get_row_token_to_id_mapper", "scipy.csr_matrix", "scipy.csr_matrix", "recsys.Data_manager.Dataset.Dataset", "CiteULikeReader._CiteULikeReader._print", "shutil.rmtree", "CiteULikeReader._CiteULikeReader._print", "zipfile.ZipFile", "h5py.File().get", "CiteULikeReader._CiteULikeReader._print", "CiteULikeReader._CiteULikeReader._print", "CiteULikeReader._CiteULikeReader._print", "FileNotFoundError", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.csr_matrix", "scipy.csr_matrix", "range", "CiteULikeReader._CiteULikeReader._get_dataset_name", "os.path.exists", "os.makedirs", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._load_data_file", "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._load_data_file", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_column_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_ListBased.get_row_token_to_id_mapper", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "def", "_load_from_original_file", "(", "self", ")", ":", "\n", "# Load data from original", "\n", "\n", "        ", "self", ".", "zip_file_folder", "=", "self", ".", "DATASET_OFFLINE_ROOT_FOLDER", "+", "\"CiteULike/\"", "\n", "self", ".", "decompressed_zip_file_folder", "=", "self", ".", "DATASET_SPLIT_ROOT_FOLDER", "+", "self", ".", "DATASET_SUBFOLDER", "\n", "\n", "try", ":", "\n", "\n", "            ", "self", ".", "dataFile", "=", "zipfile", ".", "ZipFile", "(", "self", ".", "zip_file_folder", "+", "\"CiteULike_a_t.zip\"", ")", "\n", "\n", "", "except", "(", "FileNotFoundError", ",", "zipfile", ".", "BadZipFile", ")", ":", "\n", "\n", "            ", "self", ".", "_print", "(", "\"Unable to find data zip file.\"", ")", "\n", "self", ".", "_print", "(", "\"Automatic download not available, please ensure the ZIP data file is in folder {}.\"", ".", "format", "(", "self", ".", "zip_file_folder", ")", ")", "\n", "self", ".", "_print", "(", "\"Data can be downloaded here: {}\"", ".", "format", "(", "self", ".", "DATASET_URL", ")", ")", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "zip_file_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "zip_file_folder", ")", "\n", "\n", "", "raise", "FileNotFoundError", "(", "\"Automatic download not available.\"", ")", "\n", "\n", "\n", "", "local_dataset_name", "=", "\"citeulike-{}\"", ".", "format", "(", "self", ".", "dataset_variant", ")", "\n", "train_interactions_file_suffix", "=", "\"1\"", "\n", "\n", "URM_train_path", "=", "self", ".", "dataFile", ".", "extract", "(", "local_dataset_name", "+", "\"/cf-train-{}-users.dat\"", ".", "format", "(", "train_interactions_file_suffix", ")", ",", "\n", "path", "=", "self", ".", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "\n", "URM_test_path", "=", "self", ".", "dataFile", ".", "extract", "(", "local_dataset_name", "+", "\"/cf-test-{}-users.dat\"", ".", "format", "(", "train_interactions_file_suffix", ")", ",", "\n", "path", "=", "self", ".", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "\n", "ICM_path", "=", "self", ".", "dataFile", ".", "extract", "(", "local_dataset_name", "+", "\"/mult_nor.mat\"", ",", "\n", "path", "=", "self", ".", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ")", "\n", "\n", "\n", "URM_all_builder", "=", "IncrementalSparseMatrix", "(", "auto_create_row_mapper", "=", "False", ",", "auto_create_col_mapper", "=", "False", ")", "\n", "\n", "URM_all_builder", "=", "self", ".", "_load_data_file", "(", "URM_train_path", ",", "URM_all_builder", ")", "\n", "URM_all_builder", "=", "self", ".", "_load_data_file", "(", "URM_test_path", ",", "URM_all_builder", ")", "\n", "\n", "\n", "URM_all", "=", "URM_all_builder", ".", "get_SparseMatrix", "(", ")", "\n", "self", ".", "item_original_ID_to_index", "=", "URM_all_builder", ".", "get_column_token_to_id_mapper", "(", ")", "\n", "self", ".", "user_original_ID_to_index", "=", "URM_all_builder", ".", "get_row_token_to_id_mapper", "(", ")", "\n", "\n", "if", "self", ".", "dataset_variant", "==", "\"a\"", ":", "\n", "            ", "ICM_title_abstract", "=", "scipy", ".", "io", ".", "loadmat", "(", "ICM_path", ")", "[", "'X'", "]", "\n", "\n", "", "else", ":", "\n", "# Variant \"t\" uses a different file format and is transposed", "\n", "            ", "ICM_title_abstract", "=", "h5py", ".", "File", "(", "ICM_path", ")", ".", "get", "(", "'X'", ")", "\n", "ICM_title_abstract", "=", "sps", ".", "csr_matrix", "(", "ICM_title_abstract", ")", ".", "T", "\n", "\n", "", "ICM_title_abstract", "=", "sps", ".", "csr_matrix", "(", "ICM_title_abstract", ")", "\n", "\n", "# n_users = self.URM_all.shape[0]", "\n", "# n_items = max(self.URM_all.shape[1], ICM_title_abstract.shape[0])", "\n", "n_features", "=", "ICM_title_abstract", ".", "shape", "[", "1", "]", "\n", "\n", "# URM_shape = (n_users, n_items)", "\n", "# ICM_shape = (n_items, n_features)", "\n", "\n", "tokenToFeatureMapper_ICM_title_abstract", "=", "{", "feature_index", ":", "feature_index", "for", "feature_index", "in", "range", "(", "n_features", ")", "}", "\n", "\n", "# self.URM_all = reshapeSparse(self.URM_all, URM_shape)", "\n", "# ICM_title_abstract = reshapeSparse(ICM_title_abstract, ICM_shape)", "\n", "\n", "loaded_URM_dict", "=", "{", "\"URM_all\"", ":", "URM_all", "}", "\n", "loaded_ICM_dict", "=", "{", "\"ICM_title_abstract\"", ":", "ICM_title_abstract", "}", "\n", "loaded_ICM_mapper_dict", "=", "{", "\"ICM_title_abstract\"", ":", "tokenToFeatureMapper_ICM_title_abstract", "}", "\n", "\n", "\n", "loaded_dataset", "=", "Dataset", "(", "dataset_name", "=", "self", ".", "_get_dataset_name", "(", ")", ",", "\n", "URM_dictionary", "=", "loaded_URM_dict", ",", "\n", "ICM_dictionary", "=", "loaded_ICM_dict", ",", "\n", "ICM_feature_mapper_dictionary", "=", "loaded_ICM_mapper_dict", ",", "\n", "UCM_dictionary", "=", "None", ",", "\n", "UCM_feature_mapper_dictionary", "=", "None", ",", "\n", "user_original_ID_to_index", "=", "self", ".", "user_original_ID_to_index", ",", "\n", "item_original_ID_to_index", "=", "self", ".", "item_original_ID_to_index", ",", "\n", "is_implicit", "=", "self", ".", "IS_IMPLICIT", ",", "\n", ")", "\n", "\n", "\n", "\n", "\n", "self", ".", "_print", "(", "\"cleaning temporary files\"", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "self", ".", "decompressed_zip_file_folder", "+", "\"decompressed/\"", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "self", ".", "_print", "(", "\"loading complete\"", ")", "\n", "\n", "return", "loaded_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader._CiteULikeReader._load_data_file": [[138, 168], ["open", "open.close", "print", "len", "line.split.split.replace", "line.split.split.split", "len", "URM_all_builder.add_single_row", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_single_row"], ["", "def", "_load_data_file", "(", "self", ",", "filePath", ",", "URM_all_builder", ",", "separator", "=", "\" \"", ")", ":", "\n", "\n", "        ", "fileHandle", "=", "open", "(", "filePath", ",", "\"r\"", ")", "\n", "user_index", "=", "0", "\n", "\n", "\n", "for", "line", "in", "fileHandle", ":", "\n", "\n", "            ", "if", "(", "user_index", "%", "1000000", "==", "0", ")", ":", "\n", "                ", "print", "(", "\"Processed {} cells\"", ".", "format", "(", "user_index", ")", ")", "\n", "\n", "", "if", "(", "len", "(", "line", ")", ")", ">", "1", ":", "\n", "\n", "                ", "line", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "line", "=", "line", ".", "split", "(", "separator", ")", "\n", "\n", "if", "len", "(", "line", ")", ">", "0", ":", "\n", "\n", "                    ", "if", "line", "[", "0", "]", "!=", "\"0\"", ":", "\n", "\n", "                        ", "line", "=", "[", "int", "(", "line", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "line", ")", ")", "]", "\n", "\n", "URM_all_builder", ".", "add_single_row", "(", "user_index", ",", "line", "[", "1", ":", "]", ",", "data", "=", "1.0", ")", "\n", "\n", "", "", "", "user_index", "+=", "1", "\n", "\n", "\n", "", "fileHandle", ".", "close", "(", ")", "\n", "\n", "return", "URM_all_builder", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader.CiteULike_aReader.__init__": [[177, 181], ["recsys.Data_manager.DataReader.DataReader.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CiteULike_aReader", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dataset_variant", "=", "\"a\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CiteULike.CiteULikeReader.CiteULike_tReader.__init__": [[189, 193], ["recsys.Data_manager.DataReader.DataReader.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CiteULike_tReader", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dataset_variant", "=", "\"t\"", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_leave_k_out.split_train_leave_k_out_user_wise": [[16, 121], ["scipy.csr_matrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "range", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "scipy.csr_matrix", "numpy.sum", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "print", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "scipy.csr_matrix", "numpy.sum", "numpy.arange", "numpy.random.shuffle", "numpy.argsort", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "numpy.ediff1d", "print", "len", "len", "len", "numpy.ediff1d"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists"], ["def", "split_train_leave_k_out_user_wise", "(", "URM", ",", "k_out", "=", "1", ",", "use_validation_set", "=", "True", ",", "leave_random_out", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    The function splits an URM in two matrices selecting the k_out interactions one user at a time\n    :param URM:\n    :param k_out:\n    :param use_validation_set:\n    :param leave_random_out:\n    :return:\n    \"\"\"", "\n", "\n", "assert", "k_out", ">", "0", ",", "\"k_out must be a value greater than 0, provided was '{}'\"", ".", "format", "(", "k_out", ")", "\n", "\n", "URM", "=", "sps", ".", "csr_matrix", "(", "URM", ")", "\n", "n_users", ",", "n_items", "=", "URM", ".", "shape", "\n", "\n", "\n", "URM_train_builder", "=", "IncrementalSparseMatrix", "(", "auto_create_row_mapper", "=", "False", ",", "n_rows", "=", "n_users", ",", "\n", "auto_create_col_mapper", "=", "False", ",", "n_cols", "=", "n_items", ")", "\n", "\n", "URM_test_builder", "=", "IncrementalSparseMatrix", "(", "auto_create_row_mapper", "=", "False", ",", "n_rows", "=", "n_users", ",", "\n", "auto_create_col_mapper", "=", "False", ",", "n_cols", "=", "n_items", ")", "\n", "\n", "if", "use_validation_set", ":", "\n", "         ", "URM_validation_builder", "=", "IncrementalSparseMatrix", "(", "auto_create_row_mapper", "=", "False", ",", "n_rows", "=", "n_users", ",", "\n", "auto_create_col_mapper", "=", "False", ",", "n_cols", "=", "n_items", ")", "\n", "\n", "\n", "\n", "", "for", "user_id", "in", "range", "(", "n_users", ")", ":", "\n", "\n", "        ", "start_user_position", "=", "URM", ".", "indptr", "[", "user_id", "]", "\n", "end_user_position", "=", "URM", ".", "indptr", "[", "user_id", "+", "1", "]", "\n", "\n", "user_profile", "=", "URM", ".", "indices", "[", "start_user_position", ":", "end_user_position", "]", "\n", "\n", "\n", "if", "leave_random_out", ":", "\n", "            ", "indices_to_suffle", "=", "np", ".", "arange", "(", "len", "(", "user_profile", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "indices_to_suffle", ")", "\n", "\n", "user_interaction_items", "=", "user_profile", "[", "indices_to_suffle", "]", "\n", "user_interaction_data", "=", "URM", ".", "data", "[", "start_user_position", ":", "end_user_position", "]", "[", "indices_to_suffle", "]", "\n", "\n", "", "else", ":", "\n", "\n", "# The first will be sampled so the last interaction must be the first one", "\n", "            ", "interaction_position", "=", "URM", ".", "data", "[", "start_user_position", ":", "end_user_position", "]", "\n", "\n", "sort_interaction_index", "=", "np", ".", "argsort", "(", "-", "interaction_position", ")", "\n", "\n", "user_interaction_items", "=", "user_profile", "[", "sort_interaction_index", "]", "\n", "user_interaction_data", "=", "URM", ".", "data", "[", "start_user_position", ":", "end_user_position", "]", "[", "sort_interaction_index", "]", "\n", "\n", "\n", "\n", "#Test interactions", "\n", "", "user_interaction_items_test", "=", "user_interaction_items", "[", "0", ":", "k_out", "]", "\n", "user_interaction_data_test", "=", "user_interaction_data", "[", "0", ":", "k_out", "]", "\n", "\n", "URM_test_builder", ".", "add_data_lists", "(", "[", "user_id", "]", "*", "len", "(", "user_interaction_items_test", ")", ",", "user_interaction_items_test", ",", "user_interaction_data_test", ")", "\n", "\n", "\n", "#validation interactions", "\n", "if", "use_validation_set", ":", "\n", "            ", "user_interaction_items_validation", "=", "user_interaction_items", "[", "k_out", ":", "k_out", "*", "2", "]", "\n", "user_interaction_data_validation", "=", "user_interaction_data", "[", "k_out", ":", "k_out", "*", "2", "]", "\n", "\n", "URM_validation_builder", ".", "add_data_lists", "(", "[", "user_id", "]", "*", "k_out", ",", "user_interaction_items_validation", ",", "user_interaction_data_validation", ")", "\n", "\n", "\n", "#Train interactions", "\n", "", "user_interaction_items_train", "=", "user_interaction_items", "[", "k_out", "*", "2", ":", "]", "\n", "user_interaction_data_train", "=", "user_interaction_data", "[", "k_out", "*", "2", ":", "]", "\n", "\n", "URM_train_builder", ".", "add_data_lists", "(", "[", "user_id", "]", "*", "len", "(", "user_interaction_items_train", ")", ",", "user_interaction_items_train", ",", "user_interaction_data_train", ")", "\n", "\n", "\n", "\n", "", "URM_train", "=", "URM_train_builder", ".", "get_SparseMatrix", "(", ")", "\n", "URM_test", "=", "URM_test_builder", ".", "get_SparseMatrix", "(", ")", "\n", "\n", "\n", "URM_train", "=", "sps", ".", "csr_matrix", "(", "URM_train", ")", "\n", "user_no_item_train", "=", "np", ".", "sum", "(", "np", ".", "ediff1d", "(", "URM_train", ".", "indptr", ")", "==", "0", ")", "\n", "\n", "if", "user_no_item_train", "!=", "0", ":", "\n", "        ", "print", "(", "\"Warning: {} ({:.2f} %) of {} users have no Train items\"", ".", "format", "(", "user_no_item_train", ",", "user_no_item_train", "/", "n_users", "*", "100", ",", "n_users", ")", ")", "\n", "\n", "\n", "\n", "", "if", "use_validation_set", ":", "\n", "        ", "URM_validation", "=", "URM_validation_builder", ".", "get_SparseMatrix", "(", ")", "\n", "\n", "URM_validation", "=", "sps", ".", "csr_matrix", "(", "URM_validation", ")", "\n", "user_no_item_validation", "=", "np", ".", "sum", "(", "np", ".", "ediff1d", "(", "URM_validation", ".", "indptr", ")", "==", "0", ")", "\n", "\n", "if", "user_no_item_validation", "!=", "0", ":", "\n", "            ", "print", "(", "\"Warning: {} ({:.2f} %) of {} users have no Validation items\"", ".", "format", "(", "user_no_item_validation", ",", "user_no_item_validation", "/", "n_users", "*", "100", ",", "n_users", ")", ")", "\n", "\n", "\n", "", "return", "URM_train", ",", "URM_validation", ",", "URM_test", "\n", "\n", "\n", "", "return", "URM_train", ",", "URM_test", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items._select_train_warm_items": [[16, 87], ["scipy.csc_matrix", "numpy.ediff1d", "numpy.sum", "int", "numpy.random.shuffle", "numpy.arange", "numpy.sum"], "function", ["None"], ["def", "_select_train_warm_items", "(", "URM_all", ",", "train_item_percentage", ",", "train_interaction_percentage", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Selects a certain percentage of the URM_all WARM items and splits the URM in two\n    IMPORTANT: the number of items to be sampled is not computed with respect to the shape of the URM but with respect\n    to the number of WARM items it contains. Cold items don't count.\n    :param URM_all:\n    :param train_item_percentage:\n    :param train_interaction_percentage:\n    :return:\n    \"\"\"", "\n", "\n", "sample_successful", "=", "False", "\n", "terminate", "=", "False", "\n", "\n", "n_interactions", "=", "URM_all", ".", "nnz", "\n", "\n", "URM", "=", "sps", ".", "csc_matrix", "(", "URM_all", ")", "\n", "item_interactions", "=", "np", ".", "ediff1d", "(", "URM", ".", "indptr", ")", "\n", "\n", "n_warm_items", "=", "np", ".", "sum", "(", "item_interactions", ">", "0", ")", "\n", "\n", "n_train_items", "=", "int", "(", "n_warm_items", "*", "train_item_percentage", ")", "\n", "\n", "indices_for_sampling", "=", "np", ".", "arange", "(", "0", ",", "URM_all", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "int", ")", "[", "item_interactions", ">", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "indices_for_sampling", ")", "\n", "\n", "\n", "while", "not", "terminate", ":", "\n", "\n", "        ", "if", "n_train_items", "==", "n_warm_items", "and", "n_train_items", ">", "1", ":", "\n", "            ", "n_train_items", "-=", "1", "\n", "\n", "", "train_items", "=", "indices_for_sampling", "[", "0", ":", "n_train_items", "]", "\n", "\n", "# check if enough interactions are in train", "\n", "if", "train_interaction_percentage", "is", "not", "None", ":", "\n", "\n", "            ", "train_interactions", "=", "np", ".", "sum", "(", "item_interactions", "[", "train_items", "]", ")", "\n", "\n", "current_train_interaction_percentage", "=", "train_interactions", "/", "n_interactions", "\n", "\n", "if", "current_train_interaction_percentage", "<", "train_interaction_percentage", "*", "0.9", ":", "\n", "# Too few interactions in train, add items", "\n", "                ", "if", "n_train_items", "==", "n_warm_items", ":", "\n", "                    ", "terminate", "=", "True", "\n", "sample_successful", "=", "False", "\n", "", "else", ":", "\n", "                    ", "n_train_items", "+=", "1", "\n", "\n", "", "", "elif", "current_train_interaction_percentage", ">", "train_interaction_percentage", "*", "1.1", ":", "\n", "# Too many interactions in train, remove items", "\n", "                ", "if", "n_train_items", "==", "1", ":", "\n", "                    ", "terminate", "=", "True", "\n", "sample_successful", "=", "False", "\n", "", "else", ":", "\n", "                    ", "n_train_items", "-=", "1", "\n", "\n", "", "", "else", ":", "\n", "                ", "terminate", "=", "True", "\n", "sample_successful", "=", "True", "\n", "\n", "", "", "else", ":", "\n", "            ", "terminate", "=", "True", "\n", "sample_successful", "=", "True", "\n", "\n", "\n", "", "", "assert", "sample_successful", ",", "\"Unable to select the train items with the desired specifications\"", "\n", "\n", "\n", "\n", "return", "train_items", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items._zero_out_values": [[90, 109], ["scipy.csr_matrix", "scipy.csr_matrix", "sps.csr_matrix.eliminate_zeros", "numpy.zeros_like", "split_train_validation_cold_items._zero_out_values"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items._zero_out_values"], ["", "def", "_zero_out_values", "(", "sparse_matrix", ",", "columns_to_zero", "=", "None", ",", "rows_to_zero", "=", "None", ")", ":", "\n", "\n", "    ", "if", "rows_to_zero", "is", "not", "None", ":", "\n", "        ", "sparse_matrix", "=", "sps", ".", "csr_matrix", "(", "sparse_matrix", ")", "\n", "\n", "for", "n_row", "in", "rows_to_zero", ":", "\n", "            ", "start_pos", "=", "sparse_matrix", ".", "indptr", "[", "n_row", "]", "\n", "end_pos", "=", "sparse_matrix", ".", "indptr", "[", "n_row", "+", "1", "]", "\n", "\n", "sparse_matrix", ".", "data", "[", "start_pos", ":", "end_pos", "]", "=", "np", ".", "zeros_like", "(", "sparse_matrix", ".", "data", "[", "start_pos", ":", "end_pos", "]", ")", "\n", "\n", "", "sparse_matrix", ".", "eliminate_zeros", "(", ")", "\n", "\n", "", "if", "columns_to_zero", "is", "not", "None", ":", "\n", "        ", "sparse_matrix", "=", "_zero_out_values", "(", "sparse_matrix", ".", "T", ",", "rows_to_zero", "=", "columns_to_zero", ")", ".", "T", "\n", "\n", "", "sparse_matrix", "=", "sps", ".", "csr_matrix", "(", "sparse_matrix", ")", "\n", "\n", "return", "sparse_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items.split_train_in_two_cold_items": [[112, 153], ["scipy.csc_matrix", "split_train_validation_cold_items._select_train_warm_items", "numpy.ones", "split_train_validation_cold_items._zero_out_values", "split_train_validation_cold_items._zero_out_values", "numpy.arange", "sps.csc_matrix.copy", "sps.csc_matrix.copy", "split_train_validation_cold_items._zero_out_values", "split_train_validation_cold_items._zero_out_values", "ICM_train_list.append", "ICM_valiation_list.append", "ICM_object.copy", "ICM_object.copy"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items._select_train_warm_items", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items._zero_out_values", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items._zero_out_values", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items._zero_out_values", "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_cold_items._zero_out_values", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "split_train_in_two_cold_items", "(", "URM_all", ",", "ICM_list", "=", "None", ",", "train_item_percentage", "=", "0.1", ",", "train_interaction_percentage", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    The function splits an URM in two matrices selecting the number of interactions one user at a time\n    :param URM_train:\n    :param train_percentage:\n    :param verbose:\n    :return:\n    \"\"\"", "\n", "\n", "assert", "train_item_percentage", ">=", "0.0", "and", "train_item_percentage", "<=", "1.0", ",", "\"train_item_percentage must be a value between 0.0 and 1.0, provided was '{}'\"", ".", "format", "(", "train_item_percentage", ")", "\n", "\n", "# Use CSC for item-wise split", "\n", "URM_all", "=", "sps", ".", "csc_matrix", "(", "URM_all", ")", "\n", "\n", "n_users", ",", "n_items", "=", "URM_all", ".", "shape", "\n", "\n", "train_items", "=", "_select_train_warm_items", "(", "URM_all", ",", "train_item_percentage", ",", "train_interaction_percentage", "=", "train_interaction_percentage", ")", "\n", "\n", "validation_items_mask", "=", "np", ".", "ones", "(", "n_items", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "validation_items_mask", "[", "train_items", "]", "=", "False", "\n", "validation_items", "=", "np", ".", "arange", "(", "0", ",", "n_items", ",", "dtype", "=", "np", ".", "int", ")", "[", "validation_items_mask", "]", "\n", "\n", "URM_train", "=", "_zero_out_values", "(", "URM_all", ".", "copy", "(", ")", ",", "columns_to_zero", "=", "validation_items", ")", "\n", "URM_validation", "=", "_zero_out_values", "(", "URM_all", ".", "copy", "(", ")", ",", "columns_to_zero", "=", "train_items", ")", "\n", "\n", "if", "ICM_list", "is", "not", "None", ":", "\n", "\n", "        ", "ICM_train_list", "=", "[", "]", "\n", "ICM_valiation_list", "=", "[", "]", "\n", "\n", "for", "ICM_object", "in", "ICM_list", ":", "\n", "            ", "ICM_object_train", "=", "_zero_out_values", "(", "ICM_object", ".", "copy", "(", ")", ",", "rows_to_zero", "=", "validation_items", ")", "\n", "ICM_object_validation", "=", "_zero_out_values", "(", "ICM_object", ".", "copy", "(", ")", ",", "rows_to_zero", "=", "train_items", ")", "\n", "\n", "ICM_train_list", ".", "append", "(", "ICM_object_train", ")", "\n", "ICM_valiation_list", ".", "append", "(", "ICM_object_validation", ")", "\n", "\n", "", "return", "URM_train", ",", "URM_validation", ",", "ICM_train_list", ",", "ICM_valiation_list", ",", "train_items", "\n", "\n", "", "else", ":", "\n", "        ", "return", "URM_train", ",", "URM_validation", ",", "train_items", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_user_wise": [[14, 85], ["URM_train_builder.get_SparseMatrix.tocsr", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "range", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "len", "round", "numpy.arange", "numpy.random.shuffle", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "print", "print", "len", "len", "len", "print", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists"], ["def", "split_train_in_two_percentage_user_wise", "(", "URM_train", ",", "train_percentage", "=", "0.1", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    The function splits an URM in two matrices selecting the number of interactions one user at a time\n    :param URM_train:\n    :param train_percentage:\n    :param verbose:\n    :return:\n    \"\"\"", "\n", "\n", "assert", "train_percentage", ">=", "0.0", "and", "train_percentage", "<=", "1.0", ",", "\"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\"", ".", "format", "(", "train_percentage", ")", "\n", "\n", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix", "\n", "\n", "# ensure to use csr matrix or we get big problem", "\n", "URM_train", "=", "URM_train", ".", "tocsr", "(", ")", "\n", "\n", "\n", "num_users", ",", "num_items", "=", "URM_train", ".", "shape", "\n", "\n", "URM_train_builder", "=", "IncrementalSparseMatrix", "(", "n_rows", "=", "num_users", ",", "n_cols", "=", "num_items", ",", "auto_create_col_mapper", "=", "False", ",", "auto_create_row_mapper", "=", "False", ")", "\n", "URM_validation_builder", "=", "IncrementalSparseMatrix", "(", "n_rows", "=", "num_users", ",", "n_cols", "=", "num_items", ",", "auto_create_col_mapper", "=", "False", ",", "auto_create_row_mapper", "=", "False", ")", "\n", "\n", "user_no_item_train", "=", "0", "\n", "user_no_item_validation", "=", "0", "\n", "\n", "for", "user_id", "in", "range", "(", "URM_train", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "start_pos", "=", "URM_train", ".", "indptr", "[", "user_id", "]", "\n", "end_pos", "=", "URM_train", ".", "indptr", "[", "user_id", "+", "1", "]", "\n", "\n", "\n", "user_profile_items", "=", "URM_train", ".", "indices", "[", "start_pos", ":", "end_pos", "]", "\n", "user_profile_ratings", "=", "URM_train", ".", "data", "[", "start_pos", ":", "end_pos", "]", "\n", "user_profile_length", "=", "len", "(", "user_profile_items", ")", "\n", "\n", "n_train_items", "=", "round", "(", "user_profile_length", "*", "train_percentage", ")", "\n", "\n", "if", "n_train_items", "==", "len", "(", "user_profile_items", ")", "and", "n_train_items", ">", "1", ":", "\n", "            ", "n_train_items", "-=", "1", "\n", "\n", "", "indices_for_sampling", "=", "np", ".", "arange", "(", "0", ",", "user_profile_length", ",", "dtype", "=", "np", ".", "int", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices_for_sampling", ")", "\n", "\n", "train_items", "=", "user_profile_items", "[", "indices_for_sampling", "[", "0", ":", "n_train_items", "]", "]", "\n", "train_ratings", "=", "user_profile_ratings", "[", "indices_for_sampling", "[", "0", ":", "n_train_items", "]", "]", "\n", "\n", "validation_items", "=", "user_profile_items", "[", "indices_for_sampling", "[", "n_train_items", ":", "]", "]", "\n", "validation_ratings", "=", "user_profile_ratings", "[", "indices_for_sampling", "[", "n_train_items", ":", "]", "]", "\n", "\n", "if", "len", "(", "train_items", ")", "==", "0", ":", "\n", "            ", "if", "verbose", ":", "print", "(", "\"User {} has 0 train items\"", ".", "format", "(", "user_id", ")", ")", "\n", "user_no_item_train", "+=", "1", "\n", "\n", "", "if", "len", "(", "validation_items", ")", "==", "0", ":", "\n", "            ", "if", "verbose", ":", "print", "(", "\"User {} has 0 validation items\"", ".", "format", "(", "user_id", ")", ")", "\n", "user_no_item_validation", "+=", "1", "\n", "\n", "\n", "", "URM_train_builder", ".", "add_data_lists", "(", "[", "user_id", "]", "*", "len", "(", "train_items", ")", ",", "train_items", ",", "train_ratings", ")", "\n", "URM_validation_builder", ".", "add_data_lists", "(", "[", "user_id", "]", "*", "len", "(", "validation_items", ")", ",", "validation_items", ",", "validation_ratings", ")", "\n", "\n", "", "if", "user_no_item_train", "!=", "0", ":", "\n", "        ", "print", "(", "\"Warning: {} ({:.2f} %) of {} users have no train items\"", ".", "format", "(", "user_no_item_train", ",", "user_no_item_train", "/", "num_users", "*", "100", ",", "num_users", ")", ")", "\n", "", "if", "user_no_item_validation", "!=", "0", ":", "\n", "        ", "print", "(", "\"Warning: {} ({:.2f} %) of {} users have no sampled items\"", ".", "format", "(", "user_no_item_validation", ",", "user_no_item_validation", "/", "num_users", "*", "100", ",", "num_users", ")", ")", "\n", "\n", "", "URM_train", "=", "URM_train_builder", ".", "get_SparseMatrix", "(", ")", "\n", "URM_validation", "=", "URM_validation_builder", ".", "get_SparseMatrix", "(", ")", "\n", "\n", "\n", "return", "URM_train", ",", "URM_validation", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_global_sample": [[91, 147], ["recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "scipy.coo_matrix", "numpy.arange", "numpy.random.shuffle", "round", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "scipy.csr_matrix", "scipy.csr_matrix", "numpy.sum", "numpy.sum", "print", "print", "numpy.ediff1d", "numpy.ediff1d"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix"], ["", "def", "split_train_in_two_percentage_global_sample", "(", "URM_all", ",", "train_percentage", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"\n    The function splits an URM in two matrices selecting the number of interactions globally\n    :param URM_all:\n    :param train_percentage:\n    :param verbose:\n    :return:\n    \"\"\"", "\n", "\n", "assert", "train_percentage", ">=", "0.0", "and", "train_percentage", "<=", "1.0", ",", "\"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\"", ".", "format", "(", "train_percentage", ")", "\n", "\n", "\n", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix", "\n", "\n", "num_users", ",", "num_items", "=", "URM_all", ".", "shape", "\n", "\n", "URM_train_builder", "=", "IncrementalSparseMatrix", "(", "n_rows", "=", "num_users", ",", "n_cols", "=", "num_items", ",", "auto_create_col_mapper", "=", "False", ",", "auto_create_row_mapper", "=", "False", ")", "\n", "URM_validation_builder", "=", "IncrementalSparseMatrix", "(", "n_rows", "=", "num_users", ",", "n_cols", "=", "num_items", ",", "auto_create_col_mapper", "=", "False", ",", "auto_create_row_mapper", "=", "False", ")", "\n", "\n", "\n", "URM_train", "=", "sps", ".", "coo_matrix", "(", "URM_all", ")", "\n", "\n", "indices_for_sampling", "=", "np", ".", "arange", "(", "0", ",", "URM_all", ".", "nnz", ",", "dtype", "=", "np", ".", "int", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices_for_sampling", ")", "\n", "\n", "n_train_interactions", "=", "round", "(", "URM_all", ".", "nnz", "*", "train_percentage", ")", "\n", "\n", "indices_for_train", "=", "indices_for_sampling", "[", "indices_for_sampling", "[", "0", ":", "n_train_interactions", "]", "]", "\n", "indices_for_validation", "=", "indices_for_sampling", "[", "indices_for_sampling", "[", "n_train_interactions", ":", "]", "]", "\n", "\n", "\n", "URM_train_builder", ".", "add_data_lists", "(", "URM_train", ".", "row", "[", "indices_for_train", "]", ",", "\n", "URM_train", ".", "col", "[", "indices_for_train", "]", ",", "\n", "URM_train", ".", "data", "[", "indices_for_train", "]", ")", "\n", "\n", "URM_validation_builder", ".", "add_data_lists", "(", "URM_train", ".", "row", "[", "indices_for_validation", "]", ",", "\n", "URM_train", ".", "col", "[", "indices_for_validation", "]", ",", "\n", "URM_train", ".", "data", "[", "indices_for_validation", "]", ")", "\n", "\n", "\n", "URM_train", "=", "URM_train_builder", ".", "get_SparseMatrix", "(", ")", "\n", "URM_validation", "=", "URM_validation_builder", ".", "get_SparseMatrix", "(", ")", "\n", "\n", "URM_train", "=", "sps", ".", "csr_matrix", "(", "URM_train", ")", "\n", "URM_validation", "=", "sps", ".", "csr_matrix", "(", "URM_validation", ")", "\n", "\n", "user_no_item_train", "=", "np", ".", "sum", "(", "np", ".", "ediff1d", "(", "URM_train", ".", "indptr", ")", "==", "0", ")", "\n", "user_no_item_validation", "=", "np", ".", "sum", "(", "np", ".", "ediff1d", "(", "URM_validation", ".", "indptr", ")", "==", "0", ")", "\n", "\n", "if", "user_no_item_train", "!=", "0", ":", "\n", "        ", "print", "(", "\"Warning: {} ({:.2f} %) of {} users have no train items\"", ".", "format", "(", "user_no_item_train", ",", "user_no_item_train", "/", "num_users", "*", "100", ",", "num_users", ")", ")", "\n", "", "if", "user_no_item_validation", "!=", "0", ":", "\n", "        ", "print", "(", "\"Warning: {} ({:.2f} %) of {} users have no sampled items\"", ".", "format", "(", "user_no_item_validation", ",", "user_no_item_validation", "/", "num_users", "*", "100", ",", "num_users", ")", ")", "\n", "\n", "\n", "", "return", "URM_train", ",", "URM_validation", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.split_functions.split_train_validation_random_holdout.split_train_in_two_percentage_cold_items": [[153, 210], ["URM_all.tocsc.tocsc", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix", "numpy.arange", "numpy.random.shuffle", "round", "range", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.get_SparseMatrix", "numpy.sum", "numpy.sum", "print", "len", "len", "print", "print", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "recsys.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix.add_data_lists", "numpy.ediff1d", "numpy.ediff1d"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.get_SparseMatrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.IncrementalSparseMatrix.IncrementalSparseMatrix_FilterIDs.add_data_lists"], ["", "def", "split_train_in_two_percentage_cold_items", "(", "URM_all", ",", "train_percentage", "=", "0.1", ")", ":", "\n", "\n", "    ", "assert", "train_percentage", ">=", "0.0", "and", "train_percentage", "<=", "1.0", ",", "\"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\"", ".", "format", "(", "\n", "train_percentage", ")", "\n", "\n", "from", "recsys", ".", "Data_manager", ".", "IncrementalSparseMatrix", "import", "IncrementalSparseMatrix", "\n", "\n", "# ensure to use csc matrix or we get big problem", "\n", "URM_all", "=", "URM_all", ".", "tocsc", "(", ")", "\n", "\n", "num_users", ",", "num_items", "=", "URM_all", ".", "shape", "\n", "\n", "URM_train_builder", "=", "IncrementalSparseMatrix", "(", "n_rows", "=", "num_users", ",", "n_cols", "=", "num_items", ",", "auto_create_col_mapper", "=", "False", ",", "\n", "auto_create_row_mapper", "=", "False", ")", "\n", "URM_validation_builder", "=", "IncrementalSparseMatrix", "(", "n_rows", "=", "num_users", ",", "n_cols", "=", "num_items", ",", "auto_create_col_mapper", "=", "False", ",", "\n", "auto_create_row_mapper", "=", "False", ")", "\n", "\n", "item_indices_for_sampling", "=", "np", ".", "arange", "(", "0", ",", "num_items", ",", "dtype", "=", "np", ".", "int", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "item_indices_for_sampling", ")", "\n", "\n", "n_validation_interactions", "=", "round", "(", "URM_all", ".", "nnz", "*", "(", "1", "-", "train_percentage", ")", ")", "\n", "\n", "n_total_selected_items", "=", "0", "\n", "n_selected_items_interactions", "=", "0", "\n", "\n", "for", "n_selected_items", "in", "range", "(", "len", "(", "item_indices_for_sampling", ")", ")", ":", "\n", "\n", "        ", "item_id", "=", "item_indices_for_sampling", "[", "n_selected_items", "]", "\n", "start_pos", "=", "URM_all", ".", "indptr", "[", "item_id", "]", "\n", "end_pos", "=", "URM_all", ".", "indptr", "[", "item_id", "+", "1", "]", "\n", "\n", "item_profile_users", "=", "URM_all", ".", "indices", "[", "start_pos", ":", "end_pos", "]", "\n", "item_profile_ratings", "=", "URM_all", ".", "data", "[", "start_pos", ":", "end_pos", "]", "\n", "item_profile_length", "=", "len", "(", "item_profile_users", ")", "\n", "\n", "if", "n_selected_items_interactions", ">", "n_validation_interactions", ":", "\n", "            ", "URM_train_builder", ".", "add_data_lists", "(", "item_profile_users", ",", "[", "item_id", "]", "*", "item_profile_length", ",", "item_profile_ratings", ")", "\n", "", "else", ":", "\n", "            ", "URM_validation_builder", ".", "add_data_lists", "(", "item_profile_users", ",", "[", "item_id", "]", "*", "item_profile_length", ",", "\n", "item_profile_ratings", ")", "\n", "n_total_selected_items", "+=", "1", "\n", "\n", "", "n_selected_items_interactions", "+=", "item_profile_length", "\n", "\n", "", "URM_train", "=", "URM_train_builder", ".", "get_SparseMatrix", "(", ")", "\n", "URM_validation", "=", "URM_validation_builder", ".", "get_SparseMatrix", "(", ")", "\n", "\n", "user_no_item_train", "=", "np", ".", "sum", "(", "np", ".", "ediff1d", "(", "URM_train", ".", "indptr", ")", "==", "0", ")", "\n", "user_no_item_validation", "=", "np", ".", "sum", "(", "np", ".", "ediff1d", "(", "URM_validation", ".", "indptr", ")", "==", "0", ")", "\n", "\n", "if", "user_no_item_train", "!=", "0", ":", "\n", "        ", "print", "(", "\"Warning: {} ({:.2f} %) of {} users have no train items\"", ".", "format", "(", "user_no_item_train", ",", "user_no_item_train", "/", "num_users", "*", "100", ",", "num_users", ")", ")", "\n", "", "if", "user_no_item_validation", "!=", "0", ":", "\n", "        ", "print", "(", "\"Warning: {} ({:.2f} %) of {} users have no sampled items\"", ".", "format", "(", "user_no_item_validation", ",", "user_no_item_validation", "/", "num_users", "*", "100", ",", "num_users", ")", ")", "\n", "", "print", "(", "f\"A total of {n_total_selected_items} items has been selected.\"", ")", "\n", "\n", "return", "URM_train", ",", "URM_validation", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.NMFRecommender.NMFRecommender.__init__": [[32, 34], ["recsys.Base.BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "NMFRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.NMFRecommender.NMFRecommender.fit": [[36, 74], ["NMFRecommender.NMFRecommender._print", "sklearn.decomposition.NMF", "sklearn.decomposition.NMF.fit", "sklearn.decomposition.NMF.transform", "NMFRecommender.NMFRecommender._print", "ValueError", "ValueError", "ValueError", "sklearn.decomposition.NMF.components_.copy", "NMFRecommender.NMFRecommender.SOLVER_VALUES.keys"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "fit", "(", "self", ",", "num_factors", "=", "100", ",", "\n", "l1_ratio", "=", "0.5", ",", "\n", "solver", "=", "\"multiplicative_update\"", ",", "\n", "init_type", "=", "\"random\"", ",", "\n", "beta_loss", "=", "\"frobenius\"", ",", "\n", "verbose", "=", "False", ",", "\n", "random_seed", "=", "None", ")", ":", "\n", "\n", "\n", "        ", "assert", "l1_ratio", ">=", "0", "and", "l1_ratio", "<=", "1", ",", "\"{}: l1_ratio must be between 0 and 1, provided value was {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "l1_ratio", ")", "\n", "\n", "if", "solver", "not", "in", "self", ".", "SOLVER_VALUES", ":", "\n", "           ", "raise", "ValueError", "(", "\"Value for 'solver' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "SOLVER_VALUES", ".", "keys", "(", ")", ",", "solver", ")", ")", "\n", "\n", "", "if", "init_type", "not", "in", "self", ".", "INIT_VALUES", ":", "\n", "           ", "raise", "ValueError", "(", "\"Value for 'init_type' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "INIT_VALUES", ",", "init_type", ")", ")", "\n", "\n", "", "if", "beta_loss", "not", "in", "self", ".", "BETA_LOSS_VALUES", ":", "\n", "           ", "raise", "ValueError", "(", "\"Value for 'beta_loss' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "BETA_LOSS_VALUES", ",", "beta_loss", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Computing NMF decomposition...\"", ")", "\n", "\n", "nmf_solver", "=", "NMF", "(", "n_components", "=", "num_factors", ",", "\n", "init", "=", "init_type", ",", "\n", "solver", "=", "self", ".", "SOLVER_VALUES", "[", "solver", "]", ",", "\n", "beta_loss", "=", "beta_loss", ",", "\n", "random_state", "=", "random_seed", ",", "\n", "l1_ratio", "=", "l1_ratio", ",", "\n", "shuffle", "=", "True", ",", "\n", "verbose", "=", "verbose", ",", "\n", "max_iter", "=", "500", ")", "\n", "\n", "nmf_solver", ".", "fit", "(", "self", ".", "URM_train", ")", "\n", "\n", "self", ".", "ITEM_factors", "=", "nmf_solver", ".", "components_", ".", "copy", "(", ")", ".", "T", "\n", "self", ".", "USER_factors", "=", "nmf_solver", ".", "transform", "(", "self", ".", "URM_train", ")", "\n", "\n", "self", ".", "_print", "(", "\"Computing NMF decomposition... Done!\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.PureSVDRecommender.PureSVDRecommender.__init__": [[30, 32], ["recsys.Base.BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "PureSVDRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.PureSVDRecommender.PureSVDRecommender.fit": [[34, 49], ["PureSVDRecommender.PureSVDRecommender._print", "sklearn.utils.extmath.randomized_svd", "PureSVDRecommender.PureSVDRecommender._print", "scipy.diags"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "fit", "(", "self", ",", "num_factors", "=", "100", ",", "random_seed", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "_print", "(", "\"Computing SVD decomposition...\"", ")", "\n", "\n", "U", ",", "Sigma", ",", "QT", "=", "randomized_svd", "(", "self", ".", "URM_train", ",", "\n", "n_components", "=", "num_factors", ",", "\n", "#n_iter=5,", "\n", "random_state", "=", "random_seed", ")", "\n", "\n", "U_s", "=", "U", "*", "sps", ".", "diags", "(", "Sigma", ")", "\n", "\n", "self", ".", "USER_factors", "=", "U_s", "\n", "self", ".", "ITEM_factors", "=", "QT", ".", "T", "\n", "\n", "self", ".", "_print", "(", "\"Computing SVD decomposition... Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.PureSVDRecommender.PureSVDItemRecommender.__init__": [[128, 130], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "PureSVDItemRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.PureSVDRecommender.PureSVDItemRecommender.fit": [[132, 149], ["PureSVDRecommender.PureSVDItemRecommender._print", "sklearn.utils.extmath.randomized_svd", "PureSVDRecommender.compute_W_sparse_from_item_latent_factors", "scipy.csr_matrix", "PureSVDRecommender.PureSVDItemRecommender._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.PureSVDRecommender.compute_W_sparse_from_item_latent_factors", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "fit", "(", "self", ",", "num_factors", "=", "100", ",", "topK", "=", "None", ",", "random_seed", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "_print", "(", "\"Computing SVD decomposition...\"", ")", "\n", "\n", "U", ",", "Sigma", ",", "QT", "=", "randomized_svd", "(", "self", ".", "URM_train", ",", "\n", "n_components", "=", "num_factors", ",", "\n", "#n_iter=5,", "\n", "random_state", "=", "random_seed", ")", "\n", "\n", "if", "topK", "is", "None", ":", "\n", "            ", "topK", "=", "self", ".", "n_items", "\n", "\n", "", "W_sparse", "=", "compute_W_sparse_from_item_latent_factors", "(", "QT", ".", "T", ",", "topK", "=", "topK", ")", "\n", "\n", "self", ".", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "W_sparse", ")", "\n", "\n", "self", ".", "_print", "(", "\"Computing SVD decomposition... Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.PureSVDRecommender.compute_W_sparse_from_item_latent_factors": [[56, 110], ["scipy.csr_matrix", "min", "numpy.dot", "range", "numpy.argsort", "numpy.sum", "values.extend", "rows.extend", "cols.extend", "numpy.ones"], "function", ["None"], ["", "", "def", "compute_W_sparse_from_item_latent_factors", "(", "ITEM_factors", ",", "topK", "=", "100", ")", ":", "\n", "\n", "\n", "    ", "n_items", ",", "n_factors", "=", "ITEM_factors", ".", "shape", "\n", "\n", "block_size", "=", "100", "\n", "\n", "start_item", "=", "0", "\n", "end_item", "=", "0", "\n", "\n", "values", "=", "[", "]", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "\n", "\n", "# Compute all similarities for each item using vectorization", "\n", "while", "start_item", "<", "n_items", ":", "\n", "\n", "        ", "end_item", "=", "min", "(", "n_items", ",", "start_item", "+", "block_size", ")", "\n", "\n", "this_block_weight", "=", "np", ".", "dot", "(", "ITEM_factors", "[", "start_item", ":", "end_item", ",", ":", "]", ",", "ITEM_factors", ".", "T", ")", "\n", "\n", "\n", "for", "col_index_in_block", "in", "range", "(", "this_block_weight", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "            ", "this_column_weights", "=", "this_block_weight", "[", "col_index_in_block", ",", ":", "]", "\n", "item_original_index", "=", "start_item", "+", "col_index_in_block", "\n", "\n", "# Sort indices and select TopK", "\n", "# Sorting is done in three steps. Faster then plain np.argsort for higher number of items", "\n", "# - Partition the data to extract the set of relevant items", "\n", "# - Sort only the relevant items", "\n", "# - Get the original item index", "\n", "relevant_items_partition", "=", "(", "-", "this_column_weights", ")", ".", "argpartition", "(", "topK", "-", "1", ")", "[", "0", ":", "topK", "]", "\n", "relevant_items_partition_sorting", "=", "np", ".", "argsort", "(", "-", "this_column_weights", "[", "relevant_items_partition", "]", ")", "\n", "top_k_idx", "=", "relevant_items_partition", "[", "relevant_items_partition_sorting", "]", "\n", "\n", "# Incrementally build sparse matrix, do not add zeros", "\n", "notZerosMask", "=", "this_column_weights", "[", "top_k_idx", "]", "!=", "0.0", "\n", "numNotZeros", "=", "np", ".", "sum", "(", "notZerosMask", ")", "\n", "\n", "values", ".", "extend", "(", "this_column_weights", "[", "top_k_idx", "]", "[", "notZerosMask", "]", ")", "\n", "rows", ".", "extend", "(", "top_k_idx", "[", "notZerosMask", "]", ")", "\n", "cols", ".", "extend", "(", "np", ".", "ones", "(", "numNotZeros", ")", "*", "item_original_index", ")", "\n", "\n", "\n", "\n", "", "start_item", "+=", "block_size", "\n", "\n", "", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "values", ",", "(", "rows", ",", "cols", ")", ")", ",", "\n", "shape", "=", "(", "n_items", ",", "n_items", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "W_sparse", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender.fit": [[40, 95], ["IALSRecommender.IALSRecommender._init_factors", "IALSRecommender.IALSRecommender._init_factors", "IALSRecommender.IALSRecommender._build_confidence_matrix", "numpy.diag", "IALSRecommender.IALSRecommender._update_best_model", "IALSRecommender.IALSRecommender._train_with_early_stopping", "ValueError", "numpy.ediff1d", "numpy.ediff1d", "numpy.arange", "numpy.arange", "numpy.ones", "IALSRecommender.IALSRecommender.URM_train.tocsc"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._init_factors", "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._init_factors", "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._build_confidence_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._update_best_model", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._train_with_early_stopping"], ["def", "fit", "(", "self", ",", "epochs", "=", "300", ",", "\n", "num_factors", "=", "20", ",", "\n", "confidence_scaling", "=", "\"linear\"", ",", "\n", "alpha", "=", "1.0", ",", "\n", "epsilon", "=", "1.0", ",", "\n", "reg", "=", "1e-3", ",", "\n", "init_mean", "=", "0.0", ",", "\n", "init_std", "=", "0.1", ",", "\n", "**", "earlystopping_kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        :param epochs:\n        :param num_factors:\n        :param confidence_scaling: supported scaling modes for the observed values: 'linear' or 'log'\n        :param alpha: Confidence weight, confidence c = 1 + alpha*r where r is the observed \"rating\".\n        :param reg: Regularization constant.\n        :param epsilon: epsilon used in log scaling only\n        :param init_mean: mean used to initialize the latent factors\n        :param init_std: standard deviation used to initialize the latent factors\n        :return:\n        \"\"\"", "\n", "\n", "if", "confidence_scaling", "not", "in", "self", ".", "AVAILABLE_CONFIDENCE_SCALING", ":", "\n", "           ", "raise", "ValueError", "(", "\"Value for 'confidence_scaling' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "AVAILABLE_CONFIDENCE_SCALING", ",", "confidence_scaling", ")", ")", "\n", "\n", "\n", "", "self", ".", "num_factors", "=", "num_factors", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "reg", "=", "reg", "\n", "\n", "self", ".", "USER_factors", "=", "self", ".", "_init_factors", "(", "self", ".", "n_users", ",", "False", ")", "# don't need values, will compute them", "\n", "self", ".", "ITEM_factors", "=", "self", ".", "_init_factors", "(", "self", ".", "n_items", ")", "\n", "\n", "\n", "self", ".", "_build_confidence_matrix", "(", "confidence_scaling", ")", "\n", "\n", "\n", "warm_user_mask", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "indptr", ")", ">", "0", "\n", "warm_item_mask", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", ">", "0", "\n", "\n", "self", ".", "warm_users", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "n_users", ",", "dtype", "=", "np", ".", "int32", ")", "[", "warm_user_mask", "]", "\n", "self", ".", "warm_items", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "n_items", ",", "dtype", "=", "np", ".", "int32", ")", "[", "warm_item_mask", "]", "\n", "\n", "self", ".", "regularization_diagonal", "=", "np", ".", "diag", "(", "self", ".", "reg", "*", "np", ".", "ones", "(", "self", ".", "num_factors", ")", ")", "\n", "\n", "self", ".", "_update_best_model", "(", ")", "\n", "\n", "self", ".", "_train_with_early_stopping", "(", "epochs", ",", "\n", "algorithm_name", "=", "self", ".", "RECOMMENDER_NAME", ",", "\n", "**", "earlystopping_kwargs", ")", "\n", "\n", "\n", "self", ".", "USER_factors", "=", "self", ".", "USER_factors_best", "\n", "self", ".", "ITEM_factors", "=", "self", ".", "ITEM_factors_best", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._build_confidence_matrix": [[99, 107], ["recsys.Base.Recommender_utils.check_matrix", "IALSRecommender.IALSRecommender._linear_scaling_confidence", "IALSRecommender.IALSRecommender._log_scaling_confidence", "IALSRecommender.IALSRecommender.C.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._linear_scaling_confidence", "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._log_scaling_confidence", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_build_confidence_matrix", "(", "self", ",", "confidence_scaling", ")", ":", "\n", "\n", "        ", "if", "confidence_scaling", "==", "'linear'", ":", "\n", "            ", "self", ".", "C", "=", "self", ".", "_linear_scaling_confidence", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C", "=", "self", ".", "_log_scaling_confidence", "(", ")", "\n", "\n", "", "self", ".", "C_csc", "=", "check_matrix", "(", "self", ".", "C", ".", "copy", "(", ")", ",", "format", "=", "\"csc\"", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._linear_scaling_confidence": [[111, 117], ["recsys.Base.Recommender_utils.check_matrix"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "def", "_linear_scaling_confidence", "(", "self", ")", ":", "\n", "\n", "        ", "C", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "format", "=", "\"csr\"", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "C", ".", "data", "=", "1.0", "+", "self", ".", "alpha", "*", "C", ".", "data", "\n", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._log_scaling_confidence": [[118, 124], ["recsys.Base.Recommender_utils.check_matrix", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "def", "_log_scaling_confidence", "(", "self", ")", ":", "\n", "\n", "        ", "C", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "format", "=", "\"csr\"", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "C", ".", "data", "=", "1.0", "+", "self", ".", "alpha", "*", "np", ".", "log", "(", "1.0", "+", "C", ".", "data", "/", "self", ".", "epsilon", ")", "\n", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._prepare_model_for_validation": [[128, 130], ["None"], "methods", ["None"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._update_best_model": [[132, 135], ["IALSRecommender.IALSRecommender.USER_factors.copy", "IALSRecommender.IALSRecommender.ITEM_factors.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "USER_factors_best", "=", "self", ".", "USER_factors", ".", "copy", "(", ")", "\n", "self", ".", "ITEM_factors_best", "=", "self", ".", "ITEM_factors", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._run_epoch": [[137, 167], ["IALSRecommender.IALSRecommender.ITEM_factors.T.dot", "IALSRecommender.IALSRecommender.USER_factors.T.dot", "IALSRecommender.IALSRecommender._update_row", "IALSRecommender.IALSRecommender._update_row"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._update_row", "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._update_row"], ["", "def", "_run_epoch", "(", "self", ",", "num_epoch", ")", ":", "\n", "\n", "# fit user factors", "\n", "# VV = n_factors x n_factors", "\n", "        ", "VV", "=", "self", ".", "ITEM_factors", ".", "T", ".", "dot", "(", "self", ".", "ITEM_factors", ")", "\n", "\n", "for", "user_id", "in", "self", ".", "warm_users", ":", "\n", "# get (positive i.e. non-zero scored) items for user", "\n", "\n", "            ", "start_pos", "=", "self", ".", "C", ".", "indptr", "[", "user_id", "]", "\n", "end_pos", "=", "self", ".", "C", ".", "indptr", "[", "user_id", "+", "1", "]", "\n", "\n", "user_profile", "=", "self", ".", "C", ".", "indices", "[", "start_pos", ":", "end_pos", "]", "\n", "user_confidence", "=", "self", ".", "C", ".", "data", "[", "start_pos", ":", "end_pos", "]", "\n", "\n", "self", ".", "USER_factors", "[", "user_id", ",", ":", "]", "=", "self", ".", "_update_row", "(", "user_profile", ",", "user_confidence", ",", "self", ".", "ITEM_factors", ",", "VV", ")", "\n", "\n", "# fit item factors", "\n", "# UU = n_factors x n_factors", "\n", "", "UU", "=", "self", ".", "USER_factors", ".", "T", ".", "dot", "(", "self", ".", "USER_factors", ")", "\n", "\n", "for", "item_id", "in", "self", ".", "warm_items", ":", "\n", "\n", "            ", "start_pos", "=", "self", ".", "C_csc", ".", "indptr", "[", "item_id", "]", "\n", "end_pos", "=", "self", ".", "C_csc", ".", "indptr", "[", "item_id", "+", "1", "]", "\n", "\n", "item_profile", "=", "self", ".", "C_csc", ".", "indices", "[", "start_pos", ":", "end_pos", "]", "\n", "item_confidence", "=", "self", ".", "C_csc", ".", "data", "[", "start_pos", ":", "end_pos", "]", "\n", "\n", "self", ".", "ITEM_factors", "[", "item_id", ",", ":", "]", "=", "self", ".", "_update_row", "(", "item_profile", ",", "item_confidence", ",", "self", ".", "USER_factors", ",", "UU", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._update_row": [[170, 202], ["Y_interactions.T.dot", "numpy.dot", "numpy.linalg.inv", "Y_interactions.T.dot"], "methods", ["None"], ["", "", "def", "_update_row", "(", "self", ",", "interaction_profile", ",", "interaction_confidence", ",", "Y", ",", "YtY", ")", ":", "\n", "        ", "\"\"\"\n        Update latent factors for a single user or item.\n\n        Y = |n_interactions|x|n_factors|\n        YtY =   |n_factors|x|n_factors|\n        \"\"\"", "\n", "\n", "# Latent factors ony of item/users for which an interaction exists in the interaction profile", "\n", "Y_interactions", "=", "Y", "[", "interaction_profile", ",", ":", "]", "\n", "\n", "# Following the notation of the original paper we report the update rule for the Item factors (User factors are identical):", "\n", "# Y are the item factors |n_items|x|n_factors|", "\n", "# Cu is a diagonal matrix |n_interactions|x|n_interactions| with the user confidence for the observed items", "\n", "# p(u) is a boolean vectors indexing only observed items. Here it will disappear as we already extract only the observed latent factors", "\n", "#       however, it will have an impact in the dimensions of the matrix, since it transforms Cu from a diagonal matrix to a row vector of 1 row and |n_interactions| columns", "\n", "# (Yt*Cu*Y + reg*I)^-1 * Yt*Cu*profile", "\n", "# which can be decomposed as", "\n", "# (YtY + Yt*(Cu-I)*Y + reg*I)^-1 * Yt*Cu*p(u)", "\n", "\n", "# A = (|n_interactions|x|n_factors|) dot (|n_interactions|x|n_interactions| ) dot (|n_interactions|x|n_factors| )", "\n", "#   = |n_factors|x|n_factors|", "\n", "# A_slow = Y_interactions.T.dot(np.diag(interaction_confidence - 1)).dot(Y_interactions)", "\n", "\n", "# if v = diag(|n_interactions|) and k = |n_interactions|x|n_factors|", "\n", "# computing np.diag(v).dot(k) will be SLOW", "\n", "# we use an equivalent formulation (v * k.T).T which is much faster", "\n", "A", "=", "Y_interactions", ".", "T", ".", "dot", "(", "(", "(", "interaction_confidence", "-", "1", ")", "*", "Y_interactions", ".", "T", ")", ".", "T", ")", "\n", "\n", "B", "=", "YtY", "+", "A", "+", "self", ".", "regularization_diagonal", "\n", "\n", "return", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "B", ")", ",", "Y_interactions", ".", "T", ".", "dot", "(", "interaction_confidence", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.MatrixFactorization.IALSRecommender.IALSRecommender._init_factors": [[204, 211], ["numpy.empty", "numpy.random.random_sample"], "methods", ["None"], ["", "def", "_init_factors", "(", "self", ",", "num_factors", ",", "assign_values", "=", "True", ")", ":", "\n", "\n", "        ", "if", "assign_values", ":", "\n", "            ", "return", "self", ".", "num_factors", "**", "-", "0.5", "*", "np", ".", "random", ".", "random_sample", "(", "(", "num_factors", ",", "self", ".", "num_factors", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "empty", "(", "(", "num_factors", ",", "self", ".", "num_factors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython._MatrixFactorization_Cython.__init__": [[24, 35], ["recsys.Base.BaseMatrixFactorizationRecommender.BaseMatrixFactorizationRecommender.__init__", "print", "MatrixFactorization_Cython._MatrixFactorization_Cython.runCompilationScript", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.runCompilationScript"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ",", "recompile_cython", "=", "False", ",", "algorithm_name", "=", "\"MF_BPR\"", ")", ":", "\n", "        ", "super", "(", "_MatrixFactorization_Cython", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "self", ".", "URM_train", ".", "shape", "\n", "self", ".", "normalize", "=", "False", "\n", "self", ".", "algorithm_name", "=", "algorithm_name", "\n", "\n", "if", "recompile_cython", ":", "\n", "            ", "print", "(", "\"Compiling in Cython\"", ")", "\n", "self", ".", "runCompilationScript", "(", ")", "\n", "print", "(", "\"Compilation Complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython._MatrixFactorization_Cython.fit": [[37, 121], ["MatrixFactorization_Cython._MatrixFactorization_Cython._prepare_model_for_validation", "MatrixFactorization_Cython._MatrixFactorization_Cython._update_best_model", "MatrixFactorization_Cython._MatrixFactorization_Cython._train_with_early_stopping", "sys.stdout.flush", "MatrixFactorization_Cython_Epoch", "MatrixFactorization_Cython._MatrixFactorization_Cython.URM_train.copy", "MatrixFactorization_Cython_Epoch", "MatrixFactorization_Cython._MatrixFactorization_Cython.eliminate_zeros"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._prepare_model_for_validation", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._update_best_model", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._train_with_early_stopping", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "fit", "(", "self", ",", "epochs", "=", "300", ",", "batch_size", "=", "1000", ",", "\n", "num_factors", "=", "10", ",", "positive_threshold_BPR", "=", "None", ",", "\n", "learning_rate", "=", "0.001", ",", "use_bias", "=", "True", ",", "\n", "sgd_mode", "=", "'sgd'", ",", "\n", "negative_interactions_quota", "=", "0.0", ",", "\n", "init_mean", "=", "0.0", ",", "init_std_dev", "=", "0.1", ",", "\n", "user_reg", "=", "0.0", ",", "item_reg", "=", "0.0", ",", "bias_reg", "=", "0.0", ",", "positive_reg", "=", "0.0", ",", "negative_reg", "=", "0.0", ",", "\n", "random_seed", "=", "None", ",", "\n", "**", "earlystopping_kwargs", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "num_factors", "=", "num_factors", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "sgd_mode", "=", "sgd_mode", "\n", "self", ".", "positive_threshold_BPR", "=", "positive_threshold_BPR", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n", "assert", "negative_interactions_quota", ">=", "0.0", "and", "negative_interactions_quota", "<", "1.0", ",", "\"{}: negative_interactions_quota must be a float value >=0 and < 1.0, provided was '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "negative_interactions_quota", ")", "\n", "self", ".", "negative_interactions_quota", "=", "negative_interactions_quota", "\n", "\n", "# Import compiled module", "\n", "from", "recsys", ".", "MatrixFactorization", ".", "Cython", ".", "MatrixFactorization_Cython_Epoch", "import", "MatrixFactorization_Cython_Epoch", "\n", "\n", "\n", "if", "self", ".", "algorithm_name", "in", "[", "\"FUNK_SVD\"", ",", "\"ASY_SVD\"", "]", ":", "\n", "\n", "            ", "self", ".", "cythonEpoch", "=", "MatrixFactorization_Cython_Epoch", "(", "self", ".", "URM_train", ",", "\n", "algorithm_name", "=", "self", ".", "algorithm_name", ",", "\n", "n_factors", "=", "self", ".", "num_factors", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "sgd_mode", "=", "sgd_mode", ",", "\n", "user_reg", "=", "user_reg", ",", "\n", "item_reg", "=", "item_reg", ",", "\n", "bias_reg", "=", "bias_reg", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "init_mean", "=", "init_mean", ",", "\n", "negative_interactions_quota", "=", "negative_interactions_quota", ",", "\n", "init_std_dev", "=", "init_std_dev", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "random_seed", "=", "random_seed", ")", "\n", "\n", "", "elif", "self", ".", "algorithm_name", "==", "\"MF_BPR\"", ":", "\n", "\n", "# Select only positive interactions", "\n", "            ", "URM_train_positive", "=", "self", ".", "URM_train", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "positive_threshold_BPR", "is", "not", "None", ":", "\n", "                ", "URM_train_positive", ".", "data", "=", "URM_train_positive", ".", "data", ">=", "self", ".", "positive_threshold_BPR", "\n", "URM_train_positive", ".", "eliminate_zeros", "(", ")", "\n", "\n", "assert", "URM_train_positive", ".", "nnz", ">", "0", ",", "\"MatrixFactorization_Cython: URM_train_positive is empty, positive threshold is too high\"", "\n", "\n", "", "self", ".", "cythonEpoch", "=", "MatrixFactorization_Cython_Epoch", "(", "URM_train_positive", ",", "\n", "algorithm_name", "=", "self", ".", "algorithm_name", ",", "\n", "n_factors", "=", "self", ".", "num_factors", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "sgd_mode", "=", "sgd_mode", ",", "\n", "user_reg", "=", "user_reg", ",", "\n", "positive_reg", "=", "positive_reg", ",", "\n", "negative_reg", "=", "negative_reg", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "init_mean", "=", "init_mean", ",", "\n", "init_std_dev", "=", "init_std_dev", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "random_seed", "=", "random_seed", ")", "\n", "", "self", ".", "_prepare_model_for_validation", "(", ")", "\n", "self", ".", "_update_best_model", "(", ")", "\n", "\n", "self", ".", "_train_with_early_stopping", "(", "epochs", ",", "\n", "algorithm_name", "=", "self", ".", "algorithm_name", ",", "\n", "**", "earlystopping_kwargs", ")", "\n", "\n", "\n", "self", ".", "USER_factors", "=", "self", ".", "USER_factors_best", "\n", "self", ".", "ITEM_factors", "=", "self", ".", "ITEM_factors_best", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "USER_bias", "=", "self", ".", "USER_bias_best", "\n", "self", ".", "ITEM_bias", "=", "self", ".", "ITEM_bias_best", "\n", "self", ".", "GLOBAL_bias", "=", "self", ".", "GLOBAL_bias_best", "\n", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython._MatrixFactorization_Cython._prepare_model_for_validation": [[124, 132], ["MatrixFactorization_Cython._MatrixFactorization_Cython.cythonEpoch.get_USER_factors", "MatrixFactorization_Cython._MatrixFactorization_Cython.cythonEpoch.get_ITEM_factors", "MatrixFactorization_Cython._MatrixFactorization_Cython.cythonEpoch.get_USER_bias", "MatrixFactorization_Cython._MatrixFactorization_Cython.cythonEpoch.get_ITEM_bias", "MatrixFactorization_Cython._MatrixFactorization_Cython.cythonEpoch.get_GLOBAL_bias"], "methods", ["None"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "        ", "self", ".", "USER_factors", "=", "self", ".", "cythonEpoch", ".", "get_USER_factors", "(", ")", "\n", "self", ".", "ITEM_factors", "=", "self", ".", "cythonEpoch", ".", "get_ITEM_factors", "(", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "USER_bias", "=", "self", ".", "cythonEpoch", ".", "get_USER_bias", "(", ")", "\n", "self", ".", "ITEM_bias", "=", "self", ".", "cythonEpoch", ".", "get_ITEM_bias", "(", ")", "\n", "self", ".", "GLOBAL_bias", "=", "self", ".", "cythonEpoch", ".", "get_GLOBAL_bias", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython._MatrixFactorization_Cython._update_best_model": [[133, 141], ["MatrixFactorization_Cython._MatrixFactorization_Cython.USER_factors.copy", "MatrixFactorization_Cython._MatrixFactorization_Cython.ITEM_factors.copy", "MatrixFactorization_Cython._MatrixFactorization_Cython.USER_bias.copy", "MatrixFactorization_Cython._MatrixFactorization_Cython.ITEM_bias.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "USER_factors_best", "=", "self", ".", "USER_factors", ".", "copy", "(", ")", "\n", "self", ".", "ITEM_factors_best", "=", "self", ".", "ITEM_factors", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "USER_bias_best", "=", "self", ".", "USER_bias", ".", "copy", "(", ")", "\n", "self", ".", "ITEM_bias_best", "=", "self", ".", "ITEM_bias", ".", "copy", "(", ")", "\n", "self", ".", "GLOBAL_bias_best", "=", "self", ".", "GLOBAL_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython._MatrixFactorization_Cython._run_epoch": [[143, 145], ["MatrixFactorization_Cython._MatrixFactorization_Cython.cythonEpoch.epochIteration_Cython"], "methods", ["None"], ["", "", "def", "_run_epoch", "(", "self", ",", "num_epoch", ")", ":", "\n", "       ", "self", ".", "cythonEpoch", ".", "epochIteration_Cython", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython._MatrixFactorization_Cython.runCompilationScript": [[149, 160], ["recsys.CythonCompiler.run_compile_subprocess.run_compile_subprocess", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CythonCompiler.run_compile_subprocess.run_compile_subprocess"], ["", "def", "runCompilationScript", "(", "self", ")", ":", "\n", "\n", "# Run compile script setting the working directory to ensure the compiled file are contained in the", "\n", "# appropriate subfolder and not the project root", "\n", "\n", "        ", "file_subfolder", "=", "\"/MatrixFactorization/Cython\"", "\n", "file_to_compile_list", "=", "[", "'MatrixFactorization_Cython_Epoch.pyx'", "]", "\n", "\n", "run_compile_subprocess", "(", "file_subfolder", ",", "file_to_compile_list", ")", "\n", "\n", "print", "(", "\"{}: Compiled module {} in subfolder: {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "file_to_compile_list", ",", "file_subfolder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_BPR_Cython.__init__": [[178, 180], ["MatrixFactorization_Cython._MatrixFactorization_Cython.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "*", "pos_args", ",", "**", "key_args", ")", ":", "\n", "        ", "super", "(", "MatrixFactorization_BPR_Cython", ",", "self", ")", ".", "__init__", "(", "*", "pos_args", ",", "algorithm_name", "=", "\"MF_BPR\"", ",", "**", "key_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_BPR_Cython.fit": [[181, 187], ["MatrixFactorization_Cython._MatrixFactorization_Cython.fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["", "def", "fit", "(", "self", ",", "**", "key_args", ")", ":", "\n", "\n", "        ", "key_args", "[", "\"use_bias\"", "]", "=", "False", "\n", "key_args", "[", "\"negative_interactions_quota\"", "]", "=", "0.0", "\n", "\n", "super", "(", "MatrixFactorization_BPR_Cython", ",", "self", ")", ".", "fit", "(", "**", "key_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_FunkSVD_Cython.__init__": [[208, 210], ["MatrixFactorization_Cython._MatrixFactorization_Cython.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "*", "pos_args", ",", "**", "key_args", ")", ":", "\n", "        ", "super", "(", "MatrixFactorization_FunkSVD_Cython", ",", "self", ")", ".", "__init__", "(", "*", "pos_args", ",", "algorithm_name", "=", "\"FUNK_SVD\"", ",", "**", "key_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_FunkSVD_Cython.fit": [[212, 215], ["MatrixFactorization_Cython._MatrixFactorization_Cython.fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["", "def", "fit", "(", "self", ",", "**", "key_args", ")", ":", "\n", "\n", "        ", "super", "(", "MatrixFactorization_FunkSVD_Cython", ",", "self", ")", ".", "fit", "(", "**", "key_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.__init__": [[236, 238], ["MatrixFactorization_Cython._MatrixFactorization_Cython.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "*", "pos_args", ",", "**", "key_args", ")", ":", "\n", "        ", "super", "(", "MatrixFactorization_AsySVD_Cython", ",", "self", ")", ".", "__init__", "(", "*", "pos_args", ",", "algorithm_name", "=", "\"ASY_SVD\"", ",", "**", "key_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.fit": [[240, 248], ["MatrixFactorization_Cython._MatrixFactorization_Cython.fit", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["", "def", "fit", "(", "self", ",", "**", "key_args", ")", ":", "\n", "\n", "        ", "if", "\"batch_size\"", "in", "key_args", "and", "key_args", "[", "\"batch_size\"", "]", ">", "1", ":", "\n", "            ", "print", "(", "\"{}: batch_size not supported for this recommender, setting to default value 1.\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", ")", "\n", "\n", "", "key_args", "[", "\"batch_size\"", "]", "=", "1", "\n", "\n", "super", "(", "MatrixFactorization_AsySVD_Cython", ",", "self", ")", ".", "fit", "(", "**", "key_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._prepare_model_for_validation": [[251, 268], ["MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.cythonEpoch.get_USER_factors", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._estimate_user_factors", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.cythonEpoch.get_ITEM_factors", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.cythonEpoch.get_USER_bias", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.cythonEpoch.get_ITEM_bias", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.cythonEpoch.get_GLOBAL_bias"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._estimate_user_factors"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        AsymmetricSVD Computes two |n_items| x |n_features| matrices of latent factors\n        ITEM_factors_Y must be used to estimate user's latent factors via the items they interacted with\n\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "ITEM_factors_Y", "=", "self", ".", "cythonEpoch", ".", "get_USER_factors", "(", ")", "\n", "self", ".", "USER_factors", "=", "self", ".", "_estimate_user_factors", "(", "self", ".", "ITEM_factors_Y", ")", "\n", "\n", "self", ".", "ITEM_factors", "=", "self", ".", "cythonEpoch", ".", "get_ITEM_factors", "(", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "USER_bias", "=", "self", ".", "cythonEpoch", ".", "get_USER_bias", "(", ")", "\n", "self", ".", "ITEM_bias", "=", "self", ".", "cythonEpoch", ".", "get_ITEM_bias", "(", ")", "\n", "self", ".", "GLOBAL_bias", "=", "self", ".", "cythonEpoch", ".", "get_GLOBAL_bias", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._update_best_model": [[270, 279], ["MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.USER_factors.copy", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.ITEM_factors.copy", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.ITEM_factors_Y.copy", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.USER_bias.copy", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.ITEM_bias.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "USER_factors_best", "=", "self", ".", "USER_factors", ".", "copy", "(", ")", "\n", "self", ".", "ITEM_factors_best", "=", "self", ".", "ITEM_factors", ".", "copy", "(", ")", "\n", "self", ".", "ITEM_factors_Y_best", "=", "self", ".", "ITEM_factors_Y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "USER_bias_best", "=", "self", ".", "USER_bias", ".", "copy", "(", ")", "\n", "self", ".", "ITEM_bias_best", "=", "self", ".", "ITEM_bias", ".", "copy", "(", ")", "\n", "self", ".", "GLOBAL_bias_best", "=", "self", ".", "GLOBAL_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._estimate_user_factors": [[281, 303], ["numpy.ediff1d", "numpy.sqrt", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.URM_train.dot", "range", "print", "print"], "methods", ["None"], ["", "", "def", "_estimate_user_factors", "(", "self", ",", "ITEM_factors_Y", ")", ":", "\n", "\n", "        ", "profile_length", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "indptr", ")", "\n", "profile_length_sqrt", "=", "np", ".", "sqrt", "(", "profile_length", ")", "\n", "\n", "# Estimating the USER_factors using ITEM_factors_Y", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"{}: Estimating user factors... \"", ".", "format", "(", "self", ".", "algorithm_name", ")", ")", "\n", "\n", "", "USER_factors", "=", "self", ".", "URM_train", ".", "dot", "(", "ITEM_factors_Y", ")", "\n", "\n", "#Divide every row for the sqrt of the profile length", "\n", "for", "user_index", "in", "range", "(", "self", ".", "n_users", ")", ":", "\n", "\n", "            ", "if", "profile_length_sqrt", "[", "user_index", "]", ">", "0", ":", "\n", "\n", "                ", "USER_factors", "[", "user_index", ",", ":", "]", "/=", "profile_length_sqrt", "[", "user_index", "]", "\n", "\n", "", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"{}: Estimating user factors... done!\"", ".", "format", "(", "self", ".", "algorithm_name", ")", ")", "\n", "\n", "", "return", "USER_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.set_URM_train": [[306, 334], ["recsys.Base.Recommender_utils.check_matrix", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython.URM_train.eliminate_zeros", "len", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._print", "URM_train_new.copy", "numpy.ediff1d", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._print", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._estimate_user_factors", "MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.MatrixFactorization_Cython.MatrixFactorization_AsySVD_Cython._estimate_user_factors", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "set_URM_train", "(", "self", ",", "URM_train_new", ",", "estimate_item_similarity_for_cold_users", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        :param URM_train_new:\n        :param estimate_item_similarity_for_cold_users: Set to TRUE if you want to estimate the USER_factors for cold users\n        :param kwargs:\n        :return:\n        \"\"\"", "\n", "\n", "assert", "self", ".", "URM_train", ".", "shape", "==", "URM_train_new", ".", "shape", ",", "\"{}: set_URM_train old and new URM train have different shapes\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "            ", "self", ".", "_print", "(", "\"set_URM_train keyword arguments not supported for this recommender class. Received: {}\"", ".", "format", "(", "kwargs", ")", ")", "\n", "\n", "", "self", ".", "URM_train", "=", "check_matrix", "(", "URM_train_new", ".", "copy", "(", ")", ",", "'csr'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "URM_train", ".", "eliminate_zeros", "(", ")", "\n", "\n", "# No need to ever use a knn model", "\n", "self", ".", "_cold_user_KNN_model_available", "=", "False", "\n", "self", ".", "_cold_user_mask", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "indptr", ")", "==", "0", "\n", "\n", "if", "estimate_item_similarity_for_cold_users", ":", "\n", "\n", "            ", "self", ".", "_print", "(", "\"Estimating USER_factors for cold users...\"", ")", "\n", "\n", "self", ".", "USER_factors", "=", "self", ".", "_estimate_user_factors", "(", "self", ".", "ITEM_factors_Y_best", ")", "\n", "\n", "self", ".", "_print", "(", "\"Estimating USER_factors for cold users... done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython.__init__": [[30, 43], ["recsys.Base.BaseCBFRecommender.BaseItemCBFRecommender.__init__", "recsys.Base.Recommender_utils.check_matrix", "print", "FBSM_Rating_Cython.FBSM_Rating_Cython.runCompilationScript", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.runCompilationScript"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "ICM", ",", "\n", "recompile_cython", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "FBSM_Rating_Cython", ",", "self", ")", ".", "__init__", "(", "URM_train", ")", "\n", "\n", "self", ".", "n_items_icm", ",", "self", ".", "n_features", "=", "ICM", ".", "shape", "\n", "\n", "self", ".", "ICM", "=", "check_matrix", "(", "ICM", ",", "'csr'", ")", "\n", "\n", "if", "recompile_cython", ":", "\n", "            ", "print", "(", "\"Compiling in Cython\"", ")", "\n", "self", ".", "runCompilationScript", "(", ")", "\n", "print", "(", "\"Compilation Complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython.fit": [[47, 145], ["FBSM_Rating_Cython_SGD", "FBSM_Rating_Cython.FBSM_Rating_Cython._train_with_early_stopping", "FBSM_Rating_Cython.FBSM_Rating_Cython.compute_W_sparse", "sys.stdout.flush", "ValueError", "numpy.random.normal().astype", "print", "numpy.ones", "numpy.random.normal", "numpy.zeros", "numpy.ones", "FBSM_Rating_Cython.FBSM_Rating_Cython.ICM.astype", "recsys.Base.IR_feature_weighting.okapi_BM_25", "numpy.ones", "FBSM_Rating_Cython.FBSM_Rating_Cython.ICM.astype", "recsys.Base.IR_feature_weighting.TF_IDF", "ValueError"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._train_with_early_stopping", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.okapi_BM_25", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.TF_IDF"], ["", "", "def", "fit", "(", "self", ",", "topK", "=", "300", ",", "\n", "epochs", "=", "30", ",", "\n", "n_factors", "=", "2", ",", "\n", "learning_rate", "=", "1e-5", ",", "\n", "precompute_user_feature_count", "=", "False", ",", "\n", "initialization_mode_D", "=", "\"random\"", ",", "\n", "positive_only_D", "=", "True", ",", "\n", "positive_only_V", "=", "True", ",", "\n", "l2_reg_D", "=", "0.01", ",", "\n", "l2_reg_V", "=", "0.01", ",", "\n", "non_negative_weights", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", "sgd_mode", "=", "'adam'", ",", "gamma", "=", "0.9", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "\n", "**", "earlystopping_kwargs", ")", ":", "\n", "\n", "\n", "        ", "if", "initialization_mode_D", "not", "in", "self", ".", "INIT_TYPE_VALUES", ":", "\n", "           ", "raise", "ValueError", "(", "\"Value for 'initialization_mode_D' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "INIT_TYPE_VALUES", ",", "initialization_mode_D", ")", ")", "\n", "\n", "", "from", "recsys", ".", "FeatureWeighting", ".", "Cython", ".", "FBSM_Rating_Cython_SGD", "import", "FBSM_Rating_Cython_SGD", "\n", "\n", "self", ".", "n_factors", "=", "n_factors", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "l2_reg_D", "=", "l2_reg_D", "\n", "self", ".", "l2_reg_V", "=", "l2_reg_V", "\n", "self", ".", "topK", "=", "topK", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "# For mean_init use Xavier Initialization", "\n", "if", "self", ".", "n_factors", "!=", "0", ":", "\n", "            ", "std_init", "=", "1", "/", "self", ".", "n_features", "/", "self", ".", "n_factors", "\n", "", "else", ":", "\n", "            ", "std_init", "=", "0", "\n", "\n", "", "mean_init", "=", "0", "\n", "\n", "\n", "weights_initialization_D", "=", "None", "\n", "\n", "if", "initialization_mode_D", "==", "\"random\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "random", ".", "normal", "(", "0.001", ",", "0.1", ",", "self", ".", "n_features", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"one\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"zero\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "zeros", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"BM25\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "ICM", "=", "self", ".", "ICM", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "ICM", "=", "okapi_BM_25", "(", "self", ".", "ICM", ")", "\n", "\n", "", "elif", "initialization_mode_D", "==", "\"TF-IDF\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "ICM", "=", "self", ".", "ICM", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "ICM", "=", "TF_IDF", "(", "self", ".", "ICM", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"CFW_D_Similarity_Cython: 'init_type' not recognized\"", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "self", ".", "FBSM_Rating", "=", "FBSM_Rating_Cython_SGD", "(", "self", ".", "URM_train", ",", "self", ".", "ICM", ",", "\n", "n_factors", "=", "self", ".", "n_factors", ",", "\n", "precompute_user_feature_count", "=", "precompute_user_feature_count", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "l2_reg_D", "=", "self", ".", "l2_reg_D", ",", "\n", "l2_reg_V", "=", "self", ".", "l2_reg_V", ",", "\n", "weights_initialization_D", "=", "weights_initialization_D", ",", "\n", "weights_initialization_V", "=", "None", ",", "\n", "positive_only_D", "=", "positive_only_D", ",", "\n", "positive_only_V", "=", "positive_only_V", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "sgd_mode", "=", "sgd_mode", ",", "\n", "gamma", "=", "gamma", ",", "\n", "beta_1", "=", "beta_1", ",", "\n", "beta_2", "=", "beta_2", ",", "\n", "mean_init", "=", "mean_init", ",", "\n", "std_init", "=", "std_init", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Initialization completed\"", ")", "\n", "\n", "\n", "", "self", ".", "_train_with_early_stopping", "(", "epochs", ",", "\n", "algorithm_name", "=", "self", ".", "RECOMMENDER_NAME", ",", "\n", "**", "earlystopping_kwargs", ")", "\n", "\n", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"best\"", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython._prepare_model_for_validation": [[152, 158], ["FBSM_Rating_Cython.FBSM_Rating_Cython.FBSM_Rating.get_D", "FBSM_Rating_Cython.FBSM_Rating_Cython.FBSM_Rating.get_V", "FBSM_Rating_Cython.FBSM_Rating_Cython.compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "D_incremental", "=", "self", ".", "FBSM_Rating", ".", "get_D", "(", ")", "\n", "self", ".", "V_incremental", "=", "self", ".", "FBSM_Rating", ".", "get_V", "(", ")", "\n", "\n", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython._update_best_model": [[160, 163], ["FBSM_Rating_Cython.FBSM_Rating_Cython.D_incremental.copy", "FBSM_Rating_Cython.FBSM_Rating_Cython.V_incremental.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "D_best", "=", "self", ".", "D_incremental", ".", "copy", "(", ")", "\n", "self", ".", "V_best", "=", "self", ".", "V_incremental", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython._run_epoch": [[165, 167], ["FBSM_Rating_Cython.FBSM_Rating_Cython.FBSM_Rating.fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["", "def", "_run_epoch", "(", "self", ",", "num_epoch", ")", ":", "\n", "        ", "self", ".", "loss", "=", "self", ".", "FBSM_Rating", ".", "fit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython.set_ICM_and_recompute_W": [[172, 178], ["ICM_new.copy", "FBSM_Rating_Cython.FBSM_Rating_Cython.compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "def", "set_ICM_and_recompute_W", "(", "self", ",", "ICM_new", ",", "recompute_w", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "ICM", "=", "ICM_new", ".", "copy", "(", ")", "\n", "\n", "if", "recompute_w", ":", "\n", "            ", "self", ".", "compute_W_sparse", "(", "use_D", "=", "True", ",", "use_V", "=", "True", ",", "model_to_use", "=", "\"best\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython.compute_W_sparse": [[182, 284], ["time.time", "print", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity", "scipy.csr_matrix", "FBSM_Rating_Cython.FBSM_Rating_Cython.ICM.dot", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "scipy.csr_matrix", "recsys.Base.Recommender_utils.check_matrix", "print", "W1[].dot", "numpy.argsort", "numpy.sum", "range", "numpy.ones", "len", "print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "time.time", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "", "def", "compute_W_sparse", "(", "self", ",", "use_D", "=", "True", ",", "use_V", "=", "True", ",", "model_to_use", "=", "\"best\"", ")", ":", "\n", "\n", "        ", "assert", "model_to_use", "in", "[", "\"last\"", ",", "\"best\"", "]", ",", "\"{}: compute_W_sparse, 'model_to_use' parameter not recognized\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"FBSM_Rating_Cython: Building similarity matrix...\"", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "start_time_print_batch", "=", "start_time", "\n", "\n", "# Diagonal", "\n", "if", "use_D", ":", "\n", "\n", "            ", "if", "model_to_use", "==", "\"last\"", ":", "\n", "                ", "D", "=", "self", ".", "D_incremental", "\n", "", "else", ":", "\n", "                ", "D", "=", "self", ".", "D_best", "\n", "\n", "", "similarity", "=", "Compute_Similarity", "(", "self", ".", "ICM", ".", "T", ",", "shrink", "=", "0", ",", "topK", "=", "self", ".", "topK", ",", "normalize", "=", "False", ",", "row_weights", "=", "D", ")", "\n", "self", ".", "W_sparse", "=", "similarity", ".", "compute_similarity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "self", ".", "n_items", ",", "self", ".", "n_items", ")", ")", "\n", "\n", "\n", "", "if", "use_V", ":", "\n", "\n", "            ", "if", "model_to_use", "==", "\"last\"", ":", "\n", "                ", "V", "=", "self", ".", "V_incremental", "\n", "", "else", ":", "\n", "                ", "V", "=", "self", ".", "V_best", "\n", "\n", "\n", "# V * V.T", "\n", "", "W1", "=", "self", ".", "ICM", ".", "dot", "(", "V", ".", "T", ")", "\n", "\n", "#self.W_sparse += W1.dot(W1.T)", "\n", "\n", "# Use array as it reduces memory requirements compared to lists", "\n", "dataBlock", "=", "10000000", "\n", "\n", "values", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rows", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "cols", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "numCells", "=", "0", "\n", "\n", "\n", "for", "numItem", "in", "range", "(", "self", ".", "n_items", ")", ":", "\n", "\n", "                ", "V_weights", "=", "W1", "[", "numItem", ",", ":", "]", ".", "dot", "(", "W1", ".", "T", ")", "\n", "V_weights", "[", "numItem", "]", "=", "0.0", "\n", "\n", "relevant_items_partition", "=", "(", "-", "V_weights", ")", ".", "argpartition", "(", "self", ".", "topK", "-", "1", ")", "[", "0", ":", "self", ".", "topK", "]", "\n", "relevant_items_partition_sorting", "=", "np", ".", "argsort", "(", "-", "V_weights", "[", "relevant_items_partition", "]", ")", "\n", "top_k_idx", "=", "relevant_items_partition", "[", "relevant_items_partition_sorting", "]", "\n", "\n", "# Incrementally build sparse matrix, do not add zeros", "\n", "notZerosMask", "=", "V_weights", "[", "top_k_idx", "]", "!=", "0.0", "\n", "numNotZeros", "=", "np", ".", "sum", "(", "notZerosMask", ")", "\n", "\n", "\n", "values_to_add", "=", "V_weights", "[", "top_k_idx", "]", "[", "notZerosMask", "]", "\n", "rows_to_add", "=", "top_k_idx", "[", "notZerosMask", "]", "\n", "cols_to_add", "=", "np", ".", "ones", "(", "numNotZeros", ")", "*", "numItem", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "values_to_add", ")", ")", ":", "\n", "\n", "                    ", "if", "numCells", "==", "len", "(", "rows", ")", ":", "\n", "                        ", "rows", "=", "np", ".", "concatenate", "(", "(", "rows", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "cols", "=", "np", ".", "concatenate", "(", "(", "cols", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "\n", "\n", "", "rows", "[", "numCells", "]", "=", "rows_to_add", "[", "index", "]", "\n", "cols", "[", "numCells", "]", "=", "cols_to_add", "[", "index", "]", "\n", "values", "[", "numCells", "]", "=", "values_to_add", "[", "index", "]", "\n", "\n", "numCells", "+=", "1", "\n", "\n", "", "if", "self", ".", "verbose", "and", "(", "time", ".", "time", "(", ")", "-", "start_time_print_batch", ">=", "30", "or", "numItem", "==", "self", ".", "n_items", "-", "1", ")", ":", "\n", "                    ", "columnPerSec", "=", "numItem", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "\n", "print", "(", "\"Weighted similarity column {} ( {:2.0f} % ), {:.2f} column/sec, elapsed time {:.2f} min\"", ".", "format", "(", "\n", "numItem", ",", "numItem", "/", "self", ".", "n_items", "*", "100", ",", "columnPerSec", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_print_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "V_weights", "=", "sps", ".", "csr_matrix", "(", "(", "values", "[", ":", "numCells", "]", ",", "(", "rows", "[", ":", "numCells", "]", ",", "cols", "[", ":", "numCells", "]", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "n_items", ",", "self", ".", "n_items", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "W_sparse", "+=", "V_weights", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "\n", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"FBSM_Rating_Cython: Building similarity matrix... complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython.runCompilationScript": [[289, 300], ["recsys.CythonCompiler.run_compile_subprocess.run_compile_subprocess", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CythonCompiler.run_compile_subprocess.run_compile_subprocess"], ["", "", "def", "runCompilationScript", "(", "self", ")", ":", "\n", "\n", "# Run compile script setting the working directory to ensure the compiled file are contained in the", "\n", "# appropriate subfolder and not the project root", "\n", "\n", "        ", "file_subfolder", "=", "\"/FeatureWeighting/Cython\"", "\n", "file_to_compile_list", "=", "[", "'FBSM_Rating_Cython_SGD.pyx'", "]", "\n", "\n", "run_compile_subprocess", "(", "file_subfolder", ",", "file_to_compile_list", ")", "\n", "\n", "print", "(", "\"{}: Compiled module {} in subfolder: {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "file_to_compile_list", ",", "file_subfolder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.FBSM_Rating_Cython.FBSM_Rating_Cython.save_model": [[310, 328], ["print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "print", "(", "\"{}: Saving model in file '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "\n", "\"D_best\"", ":", "self", ".", "D_best", ",", "\n", "\"V_best\"", ":", "self", ".", "V_best", ",", "\n", "\"topK\"", ":", "self", ".", "topK", ",", "\n", "\"W_sparse\"", ":", "self", ".", "W_sparse", "\n", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "print", "(", "\"{}: Saving complete\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.Evaluator_HP3_wrapper.__init__": [[26, 34], ["ICM_target.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["    ", "def", "__init__", "(", "self", ",", "evaluator_object", ",", "ICM_target", ",", "model_to_use", "=", "\"best\"", ")", ":", "\n", "\n", "        ", "self", ".", "evaluator_object", "=", "evaluator_object", "\n", "self", ".", "ICM_target", "=", "ICM_target", ".", "copy", "(", ")", "\n", "\n", "assert", "model_to_use", "in", "[", "\"best\"", ",", "\"last\"", "]", ",", "\"Evaluator_HP3_wrapper: model_to_use must be either 'best' or 'last'. Provided value is: '{}'\"", ".", "format", "(", "model_to_use", ")", "\n", "\n", "self", ".", "model_to_use", "=", "model_to_use", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.Evaluator_HP3_wrapper.evaluateRecommender": [[36, 44], ["recommender_object.set_cold_start_items", "recommender_object.compute_W_sparse", "HP3_Similarity_Cython.Evaluator_HP3_wrapper.evaluator_object.evaluateRecommender"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython.set_cold_start_items", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper.evaluateRecommender"], ["", "def", "evaluateRecommender", "(", "self", ",", "recommender_object", ")", ":", "\n", "\n", "        ", "recommender_object", ".", "set_cold_start_items", "(", "self", ".", "ICM_target", ",", "recompute_w", "=", "False", ")", "\n", "\n", "# Use either best model or incremental one", "\n", "recommender_object", ".", "compute_W_sparse", "(", "model_to_use", "=", "self", ".", "model_to_use", ")", "\n", "\n", "return", "self", ".", "evaluator_object", ".", "evaluateRecommender", "(", "recommender_object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython.__init__": [[53, 84], ["recsys.Base.BaseCBFRecommender.BaseItemCBFRecommender.__init__", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.Recommender_utils.check_matrix", "numpy.ones", "HP3_Similarity_Cython.HP3_Similarity_Cython.D_incremental.copy", "ValueError", "ValueError", "ValueError", "print", "HP3_Similarity_Cython.HP3_Similarity_Cython.runCompilationScript", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.runCompilationScript"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "ICM", ",", "S_matrix_target", ",", "\n", "recompile_cython", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "super", "(", "HP3_Similarity_Cython", ",", "self", ")", ".", "__init__", "(", "URM_train", ")", "\n", "\n", "if", "(", "URM_train", ".", "shape", "[", "1", "]", "!=", "ICM", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of items not consistent. URM contains {} but ICM contains {}\"", ".", "format", "(", "URM_train", ".", "shape", "[", "1", "]", ",", "\n", "ICM", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "if", "(", "S_matrix_target", ".", "shape", "[", "0", "]", "!=", "S_matrix_target", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Items imilarity matrix is not square: rows are {}, columns are {}\"", ".", "format", "(", "S_matrix_target", ".", "shape", "[", "0", "]", ",", "\n", "S_matrix_target", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "if", "(", "S_matrix_target", ".", "shape", "[", "0", "]", "!=", "ICM", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of items not consistent. S_matrix contains {} but ICM contains {}\"", ".", "format", "(", "S_matrix_target", ".", "shape", "[", "0", "]", ",", "\n", "ICM", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "S_matrix_target", "=", "check_matrix", "(", "S_matrix_target", ",", "'csr'", ")", "\n", "self", ".", "ICM", "=", "check_matrix", "(", "ICM", ",", "'csr'", ")", "\n", "\n", "self", ".", "n_features", "=", "self", ".", "ICM", ".", "shape", "[", "1", "]", "\n", "\n", "\n", "self", ".", "D_incremental", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "D_best", "=", "self", ".", "D_incremental", ".", "copy", "(", ")", "\n", "\n", "if", "recompile_cython", ":", "\n", "            ", "print", "(", "\"Compiling in Cython\"", ")", "\n", "self", ".", "runCompilationScript", "(", ")", "\n", "print", "(", "\"Compilation Complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython.fit": [[91, 160], ["HP3_Similarity_Cython.HP3_Similarity_Cython._generate_train_data", "HP3_Similarity_Cython_SGD", "HP3_Similarity_Cython.HP3_Similarity_Cython.HP3_Similarity.get_weights", "HP3_Similarity_Cython.HP3_Similarity_Cython.D_incremental.copy", "HP3_Similarity_Cython.HP3_Similarity_Cython._train_with_early_stopping", "HP3_Similarity_Cython.HP3_Similarity_Cython.compute_W_sparse", "sys.stdout.flush", "print", "numpy.ones", "print", "str"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._generate_train_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._train_with_early_stopping", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "", "def", "fit", "(", "self", ",", "show_max_performance", "=", "False", ",", "\n", "log_file", "=", "None", ",", "\n", "precompute_common_features", "=", "True", ",", "\n", "learning_rate", "=", "1e-08", ",", "\n", "init_value", "=", "1e-08", ",", "\n", "use_dropout", "=", "True", ",", "\n", "dropout_perc", "=", "0.3", ",", "\n", "l1_reg", "=", "0.0", ",", "\n", "l2_reg", "=", "0.0", ",", "\n", "epochs", "=", "50", ",", "\n", "topK", "=", "300", ",", "\n", "verbose", "=", "False", ",", "\n", "add_zeros_quota", "=", "0.0", ",", "\n", "sgd_mode", "=", "'adagrad'", ",", "gamma", "=", "0.9", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "\n", "**", "earlystopping_kwargs", ")", ":", "\n", "\n", "\n", "        ", "if", "init_value", "<=", "0", ":", "\n", "            ", "init_value", "=", "self", ".", "INIT_VALUE", "\n", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Invalid init value, using default (\"", "+", "str", "(", "self", ".", "INIT_VALUE", ")", "+", "\")\"", ")", "\n", "\n", "# Import compiled module", "\n", "", "from", "recsys", ".", "FeatureWeighting", ".", "Cython", ".", "HP3_Similarity_Cython_SGD", "import", "HP3_Similarity_Cython_SGD", "\n", "\n", "self", ".", "log_file", "=", "log_file", "\n", "self", ".", "show_max_performance", "=", "show_max_performance", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "add_zeros_quota", "=", "add_zeros_quota", "\n", "self", ".", "l1_reg", "=", "l1_reg", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "topK", "=", "topK", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "_generate_train_data", "(", ")", "\n", "\n", "\n", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "*", "init_value", "\n", "\n", "# Instantiate fast Cython implementation", "\n", "self", ".", "HP3_Similarity", "=", "HP3_Similarity_Cython_SGD", "(", "self", ".", "row_list", ",", "self", ".", "col_list", ",", "self", ".", "data_list", ",", "\n", "self", ".", "n_features", ",", "\n", "self", ".", "ICM", ",", "\n", "simplify_model", "=", "True", ",", "\n", "precompute_common_features", "=", "precompute_common_features", ",", "\n", "weights_initialization_D", "=", "weights_initialization_D", ",", "\n", "use_dropout", "=", "use_dropout", ",", "\n", "dropout_perc", "=", "dropout_perc", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "l1_reg", "=", "l1_reg", ",", "\n", "l2_reg", "=", "l2_reg", ",", "\n", "sgd_mode", "=", "sgd_mode", ",", "\n", "gamma", "=", "gamma", ",", "beta_1", "=", "beta_1", ",", "beta_2", "=", "beta_2", ")", "\n", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Initialization completed\"", ")", "\n", "\n", "", "self", ".", "D_incremental", "=", "self", ".", "HP3_Similarity", ".", "get_weights", "(", ")", "\n", "self", ".", "D_best", "=", "self", ".", "D_incremental", ".", "copy", "(", ")", "\n", "\n", "\n", "self", ".", "_train_with_early_stopping", "(", "epochs", ",", "\n", "algorithm_name", "=", "self", ".", "RECOMMENDER_NAME", ",", "\n", "**", "earlystopping_kwargs", ")", "\n", "\n", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"best\"", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython._prepare_model_for_validation": [[163, 166], ["HP3_Similarity_Cython.HP3_Similarity_Cython.HP3_Similarity.get_weights", "HP3_Similarity_Cython.HP3_Similarity_Cython.compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "        ", "self", ".", "D_incremental", "=", "self", ".", "HP3_Similarity", ".", "get_weights", "(", ")", "\n", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython._update_best_model": [[168, 170], ["HP3_Similarity_Cython.HP3_Similarity_Cython.D_incremental.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "D_best", "=", "self", ".", "D_incremental", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython._run_epoch": [[172, 174], ["HP3_Similarity_Cython.HP3_Similarity_Cython.HP3_Similarity.fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["", "def", "_run_epoch", "(", "self", ",", "num_epoch", ")", ":", "\n", "        ", "self", ".", "loss", "=", "self", ".", "HP3_Similarity", ".", "fit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython._generate_train_data": [[180, 295], ["time.time", "HP3_Similarity_Cython.HP3_Similarity_Cython.compute_W_sparse", "recsys.Base.Recommender_utils.check_matrix", "HP3_Similarity_Cython.HP3_Similarity_Cython.write_log", "HP3_Similarity_Cython.HP3_Similarity_Cython.write_log", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "HP3_Similarity_Cython.HP3_Similarity_Cython.write_log", "sum", "sum", "sum", "HP3_Similarity_Cython.HP3_Similarity_Cython.write_log", "print", "numpy.in1d", "numpy.in1d.sum", "range", "len", "print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.random.rand", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log"], ["", "def", "_generate_train_data", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Generating train data\"", ")", "\n", "\n", "", "start_time_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Here is important only the structure", "\n", "self", ".", "compute_W_sparse", "(", ")", "\n", "S_matrix_contentKNN", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "\"csr\"", ")", "\n", "\n", "\n", "self", ".", "write_log", "(", "\"Collaborative S density: {:.2E}, nonzero cells {}\"", ".", "format", "(", "\n", "self", ".", "S_matrix_target", ".", "nnz", "/", "self", ".", "S_matrix_target", ".", "shape", "[", "0", "]", "**", "2", ",", "self", ".", "S_matrix_target", ".", "nnz", ")", ")", "\n", "\n", "self", ".", "write_log", "(", "\"Content S density: {:.2E}, nonzero cells {}\"", ".", "format", "(", "\n", "S_matrix_contentKNN", ".", "nnz", "/", "S_matrix_contentKNN", ".", "shape", "[", "0", "]", "**", "2", ",", "S_matrix_contentKNN", ".", "nnz", ")", ")", "\n", "\n", "\n", "num_common_coordinates", "=", "0", "\n", "\n", "estimated_n_samples", "=", "int", "(", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", "*", "1.2", ")", "\n", "\n", "self", ".", "row_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "col_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "data_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "num_samples", "=", "0", "\n", "\n", "\n", "for", "row_index", "in", "range", "(", "self", ".", "n_items", ")", ":", "\n", "\n", "            ", "start_pos_content", "=", "S_matrix_contentKNN", ".", "indptr", "[", "row_index", "]", "\n", "end_pos_content", "=", "S_matrix_contentKNN", ".", "indptr", "[", "row_index", "+", "1", "]", "\n", "\n", "content_coordinates", "=", "S_matrix_contentKNN", ".", "indices", "[", "start_pos_content", ":", "end_pos_content", "]", "\n", "\n", "start_pos_target", "=", "self", ".", "S_matrix_target", ".", "indptr", "[", "row_index", "]", "\n", "end_pos_target", "=", "self", ".", "S_matrix_target", ".", "indptr", "[", "row_index", "+", "1", "]", "\n", "\n", "target_coordinates", "=", "self", ".", "S_matrix_target", ".", "indices", "[", "start_pos_target", ":", "end_pos_target", "]", "\n", "\n", "# Chech whether the content coordinate is associated to a non zero target value", "\n", "# If true, the content coordinate has a collaborative non-zero value", "\n", "# if false, the content coordinate has a collaborative zero value", "\n", "is_common", "=", "np", ".", "in1d", "(", "content_coordinates", ",", "target_coordinates", ")", "\n", "\n", "num_common_in_current_row", "=", "is_common", ".", "sum", "(", ")", "\n", "num_common_coordinates", "+=", "num_common_in_current_row", "\n", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "is_common", ")", ")", ":", "\n", "\n", "                ", "if", "num_samples", "==", "estimated_n_samples", ":", "\n", "                    ", "dataBlock", "=", "1000000", "\n", "self", ".", "row_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "row_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "self", ".", "col_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "col_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "self", ".", "data_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float64", ")", ")", ")", "\n", "\n", "", "if", "is_common", "[", "index", "]", ":", "\n", "# If cell exists in target matrix, add its value", "\n", "# Otherwise it will remain zero with a certain probability", "\n", "\n", "                    ", "col_index", "=", "content_coordinates", "[", "index", "]", "\n", "\n", "self", ".", "row_list", "[", "num_samples", "]", "=", "row_index", "\n", "self", ".", "col_list", "[", "num_samples", "]", "=", "col_index", "\n", "self", ".", "data_list", "[", "num_samples", "]", "=", "self", ".", "S_matrix_target", "[", "row_index", ",", "col_index", "]", "\n", "\n", "num_samples", "+=", "1", "\n", "\n", "\n", "", "elif", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "add_zeros_quota", ":", "\n", "\n", "                    ", "col_index", "=", "content_coordinates", "[", "index", "]", "\n", "\n", "self", ".", "row_list", "[", "num_samples", "]", "=", "row_index", "\n", "self", ".", "col_list", "[", "num_samples", "]", "=", "col_index", "\n", "self", ".", "data_list", "[", "num_samples", "]", "=", "0.0", "\n", "\n", "num_samples", "+=", "1", "\n", "\n", "\n", "\n", "", "", "if", "self", ".", "verbose", "and", "(", "time", ".", "time", "(", ")", "-", "start_time_batch", ">", "30", "or", "num_samples", "==", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", ")", ":", "\n", "\n", "                ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Generating train data. Sample {} ( {:.2f} %) \"", ".", "format", "(", "\n", "num_samples", ",", "num_samples", "/", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", "*", "100", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "self", ".", "write_log", "(", "\"Content S structure has {} out of {} ( {:.2f}%) nonzero collaborative cells\"", ".", "format", "(", "\n", "num_common_coordinates", ",", "S_matrix_contentKNN", ".", "nnz", ",", "num_common_coordinates", "/", "S_matrix_contentKNN", ".", "nnz", "*", "100", ")", ")", "\n", "\n", "\n", "\n", "# Discard extra cells at the left of the array", "\n", "self", ".", "row_list", "=", "self", ".", "row_list", "[", ":", "num_samples", "]", "\n", "self", ".", "col_list", "=", "self", ".", "col_list", "[", ":", "num_samples", "]", "\n", "self", ".", "data_list", "=", "self", ".", "data_list", "[", ":", "num_samples", "]", "\n", "\n", "\n", "data_nnz", "=", "sum", "(", "np", ".", "array", "(", "self", ".", "data_list", ")", "!=", "0", ")", "\n", "data_sum", "=", "sum", "(", "self", ".", "data_list", ")", "\n", "\n", "collaborative_nnz", "=", "self", ".", "S_matrix_target", ".", "nnz", "\n", "collaborative_sum", "=", "sum", "(", "self", ".", "S_matrix_target", ".", "data", ")", "\n", "\n", "self", ".", "write_log", "(", "\"Nonzero collaborative cell sum is: {:.2E}, average is: {:.2E}, \"", "\n", "\"average over all collaborative data is {:.2E}\"", ".", "format", "(", "\n", "data_sum", ",", "data_sum", "/", "data_nnz", ",", "collaborative_sum", "/", "collaborative_nnz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython.write_log": [[333, 344], ["print", "sys.stdout.flush", "sys.stderr.flush", "HP3_Similarity_Cython.HP3_Similarity_Cython.log_file.write", "HP3_Similarity_Cython.HP3_Similarity_Cython.log_file.flush"], "methods", ["None"], ["", "def", "write_log", "(", "self", ",", "string", ")", ":", "\n", "        ", "string", "=", "self", ".", "RECOMMENDER_NAME", "+", "\": \"", "+", "string", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "string", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "", "if", "self", ".", "log_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "log_file", ".", "write", "(", "string", "+", "\"\\n\"", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython.compute_W_sparse": [[347, 374], ["range", "sklearn.preprocessing.normalize", "recsys.Base.Recommender_utils.check_matrix", "scipy.diags", "HP3_Similarity_Cython.HP3_Similarity_Cython.ICM.astype", "range", "scipy.csr_matrix", "sim[].toarray().ravel", "indices.extend", "indptr.append", "data.extend", "feature_weights.squeeze", "len", "row[].flatten().tolist", "sim[].toarray", "sim[].toarray().ravel.argsort", "row[].flatten"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "", "def", "compute_W_sparse", "(", "self", ",", "model_to_use", "=", "\"best\"", ")", ":", "\n", "\n", "        ", "if", "model_to_use", "==", "\"last\"", ":", "\n", "            ", "feature_weights", "=", "self", ".", "D_incremental", "\n", "", "elif", "model_to_use", "==", "\"best\"", ":", "\n", "            ", "feature_weights", "=", "self", ".", "D_best", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"{}: compute_W_sparse, 'model_to_use' parameter not recognized\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "", "block_dim", "=", "300", "\n", "d_t", "=", "self", ".", "ICM", "*", "sps", ".", "diags", "(", "[", "feature_weights", ".", "squeeze", "(", ")", "]", ",", "[", "0", "]", ")", "\n", "icm_t", "=", "self", ".", "ICM", ".", "astype", "(", "np", ".", "bool", ")", ".", "T", "\n", "indptr", ",", "indices", ",", "data", "=", "[", "0", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "r", "in", "range", "(", "0", ",", "self", ".", "n_items", ",", "block_dim", ")", ":", "\n", "            ", "if", "r", "+", "block_dim", ">", "self", ".", "n_items", ":", "\n", "                ", "block_dim", "=", "self", ".", "n_items", "-", "r", "\n", "", "sim", "=", "d_t", "[", "r", ":", "r", "+", "block_dim", ",", ":", "]", "*", "icm_t", "\n", "for", "s", "in", "range", "(", "block_dim", ")", ":", "\n", "                ", "row", "=", "sim", "[", "s", "]", ".", "toarray", "(", ")", ".", "ravel", "(", ")", "\n", "row", "[", "r", "+", "s", "]", "=", "0", "\n", "best", "=", "row", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "topK", "]", "\n", "indices", ".", "extend", "(", "best", ")", "\n", "indptr", ".", "append", "(", "len", "(", "indices", ")", ")", "\n", "data", ".", "extend", "(", "row", "[", "best", "]", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "self", ".", "W_sparse", "=", "normalize", "(", "sps", ".", "csr_matrix", "(", "(", "data", ",", "indices", ",", "indptr", ")", ",", "shape", "=", "(", "self", ".", "n_items", ",", "self", ".", "n_items", ")", ")", ",", "norm", "=", "\"l1\"", ",", "axis", "=", "1", ")", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython.set_cold_start_items": [[377, 383], ["ICM_cold.copy", "HP3_Similarity_Cython.HP3_Similarity_Cython.compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "def", "set_cold_start_items", "(", "self", ",", "ICM_cold", ",", "recompute_w", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "ICM", "=", "ICM_cold", ".", "copy", "(", ")", "\n", "\n", "if", "recompute_w", ":", "\n", "            ", "self", ".", "compute_W_sparse", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython.runCompilationScript": [[385, 397], ["recsys.CythonCompiler.run_compile_subprocess.run_compile_subprocess", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CythonCompiler.run_compile_subprocess.run_compile_subprocess"], ["", "", "def", "runCompilationScript", "(", "self", ")", ":", "\n", "\n", "# Run compile script setting the working directory to ensure the compiled file are contained in the", "\n", "# appropriate subfolder and not the project root", "\n", "\n", "        ", "file_subfolder", "=", "\"/FW_Similarity/Cython\"", "\n", "file_to_compile_list", "=", "[", "'HP3_Similarity_Cython_SGD.pyx'", "]", "\n", "\n", "\n", "run_compile_subprocess", "(", "file_subfolder", ",", "file_to_compile_list", ")", "\n", "\n", "print", "(", "\"{}: Compiled module {} in subfolder: {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "file_to_compile_list", ",", "file_subfolder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.HP3_Similarity_Cython.HP3_Similarity_Cython.save_model": [[408, 426], ["print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "print", "(", "\"{}: Saving model in file '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "\n", "\"D_best\"", ":", "self", ".", "D_best", ",", "\n", "\"topK\"", ":", "self", ".", "topK", ",", "\n", "\"W_sparse\"", ":", "self", ".", "W_sparse", "\n", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "\n", "print", "(", "\"{}: Saving complete\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.__init__": [[31, 46], ["recsys.Base.BaseCBFRecommender.BaseItemCBFRecommender.__init__", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.Recommender_utils.check_matrix", "print", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.runCompilationScript", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.runCompilationScript"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "ICM", ",", "S_matrix_target", ",", "\n", "recompile_cython", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "CFW_DVV_Similarity_Cython", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "ICM", ")", "\n", "\n", "self", ".", "ICM", "=", "check_matrix", "(", "ICM", ",", "'csr'", ")", "\n", "self", ".", "n_features", "=", "self", ".", "ICM", ".", "shape", "[", "1", "]", "\n", "\n", "self", ".", "S_matrix_target", "=", "check_matrix", "(", "S_matrix_target", ",", "'csr'", ")", "\n", "\n", "\n", "if", "recompile_cython", ":", "\n", "            ", "print", "(", "\"Compiling in Cython\"", ")", "\n", "self", ".", "runCompilationScript", "(", ")", "\n", "print", "(", "\"Compilation Complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.fit": [[50, 145], ["CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._generate_train_data", "CFW_DVV_Similarity_Cython_SGD", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._train_with_early_stopping", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.compute_W_sparse", "sys.stdout.flush", "ValueError", "numpy.random.normal().astype", "print", "numpy.ones", "numpy.random.normal", "numpy.zeros", "numpy.ones", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.ICM.astype", "recsys.Base.IR_feature_weighting.okapi_BM_25", "numpy.ones", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.ICM.astype", "recsys.Base.IR_feature_weighting.TF_IDF", "ValueError"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._generate_train_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._train_with_early_stopping", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.okapi_BM_25", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.TF_IDF"], ["", "", "def", "fit", "(", "self", ",", "\n", "n_factors", "=", "1", ",", "learning_rate", "=", "0.01", ",", "\n", "l2_reg_D", "=", "0.0", ",", "l2_reg_V", "=", "0.0", ",", "\n", "epochs", "=", "50", ",", "topK", "=", "300", ",", "\n", "positive_only_weights", "=", "True", ",", "\n", "precompute_common_features", "=", "False", ",", "\n", "add_zeros_quota", "=", "0.0", ",", "\n", "initialization_mode_D", "=", "\"random\"", ",", "\n", "positive_only_D", "=", "True", ",", "\n", "positive_only_V", "=", "True", ",", "\n", "verbose", "=", "True", ",", "\n", "sgd_mode", "=", "'adagrad'", ",", "gamma", "=", "0.9", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "\n", "**", "earlystopping_kwargs", ")", ":", "\n", "\n", "        ", "from", "recsys", ".", "FeatureWeighting", ".", "Cython", ".", "CFW_DVV_Similarity_Cython_SGD", "import", "CFW_DVV_Similarity_Cython_SGD", "\n", "\n", "if", "initialization_mode_D", "not", "in", "self", ".", "INIT_TYPE_VALUES", ":", "\n", "           ", "raise", "ValueError", "(", "\"Value for 'initialization_mode_D' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "INIT_TYPE_VALUES", ",", "initialization_mode_D", ")", ")", "\n", "\n", "# if initialization_mode_V not in self.INIT_TYPE_VALUES:", "\n", "#    raise ValueError(\"Value for 'initialization_mode_V' not recognized. Acceptable values are {}, provided was '{}'\".format(self.INIT_TYPE_VALUES, initialization_mode_V))", "\n", "\n", "\n", "\n", "", "self", ".", "n_factors", "=", "n_factors", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "add_zeros_quota", "=", "add_zeros_quota", "\n", "self", ".", "precompute_common_features", "=", "precompute_common_features", "\n", "self", ".", "l2_reg_D", "=", "l2_reg_D", "\n", "self", ".", "l2_reg_V", "=", "l2_reg_V", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "topK", "=", "topK", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "_generate_train_data", "(", ")", "\n", "\n", "# For mean_init use Xavier Initialization", "\n", "if", "self", ".", "n_factors", "!=", "0", ":", "\n", "            ", "std_init", "=", "1", "/", "self", ".", "n_features", "/", "self", ".", "n_factors", "\n", "", "else", ":", "\n", "            ", "std_init", "=", "0", "\n", "\n", "", "mean_init", "=", "0", "\n", "\n", "\n", "weights_initialization_D", "=", "None", "\n", "\n", "if", "initialization_mode_D", "==", "\"random\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "random", ".", "normal", "(", "0.001", ",", "0.1", ",", "self", ".", "n_features", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"one\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"zero\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "zeros", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"BM25\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "ICM", "=", "self", ".", "ICM", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "ICM", "=", "okapi_BM_25", "(", "self", ".", "ICM", ")", "\n", "\n", "", "elif", "initialization_mode_D", "==", "\"TF-IDF\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "ICM", "=", "self", ".", "ICM", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "ICM", "=", "TF_IDF", "(", "self", ".", "ICM", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"CFW_D_Similarity_Cython: 'init_type' not recognized\"", ")", "\n", "\n", "\n", "", "self", ".", "CFW_DVV_Cython", "=", "CFW_DVV_Similarity_Cython_SGD", "(", "self", ".", "row_list", ",", "self", ".", "col_list", ",", "self", ".", "data_list", ",", "\n", "self", ".", "ICM", ",", "n_factors", "=", "self", ".", "n_factors", ",", "\n", "precompute_common_features", "=", "precompute_common_features", ",", "\n", "weights_initialization_D", "=", "weights_initialization_D", ",", "\n", "weights_initialization_V", "=", "None", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "add_zeros_quota", "=", "add_zeros_quota", ",", "\n", "positive_only_D", "=", "positive_only_D", ",", "\n", "positive_only_V", "=", "positive_only_V", ",", "\n", "l2_reg_D", "=", "self", ".", "l2_reg_D", ",", "l2_reg_V", "=", "self", ".", "l2_reg_V", ",", "\n", "sgd_mode", "=", "sgd_mode", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "gamma", "=", "gamma", ",", "beta_1", "=", "beta_1", ",", "beta_2", "=", "beta_2", ",", "\n", "mean_init", "=", "mean_init", ",", "std_init", "=", "std_init", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Initialization completed\"", ")", "\n", "\n", "\n", "", "self", ".", "_train_with_early_stopping", "(", "epochs", ",", "\n", "algorithm_name", "=", "self", ".", "RECOMMENDER_NAME", ",", "\n", "**", "earlystopping_kwargs", ")", "\n", "\n", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"best\"", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._prepare_model_for_validation": [[152, 158], ["CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Cython.get_D", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Cython.get_V", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "D_incremental", "=", "self", ".", "CFW_DVV_Cython", ".", "get_D", "(", ")", "\n", "self", ".", "V_incremental", "=", "self", ".", "CFW_DVV_Cython", ".", "get_V", "(", ")", "\n", "\n", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._update_best_model": [[160, 163], ["CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.D_incremental.copy", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.V_incremental.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "D_best", "=", "self", ".", "D_incremental", ".", "copy", "(", ")", "\n", "self", ".", "V_best", "=", "self", ".", "V_incremental", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._run_epoch": [[165, 167], ["CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Cython.fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["", "def", "_run_epoch", "(", "self", ",", "num_epoch", ")", ":", "\n", "        ", "self", ".", "loss", "=", "self", ".", "CFW_DVV_Cython", ".", "fit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.set_ICM_and_recompute_W": [[176, 182], ["ICM_new.copy", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "def", "set_ICM_and_recompute_W", "(", "self", ",", "ICM_new", ",", "recompute_w", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "ICM", "=", "ICM_new", ".", "copy", "(", ")", "\n", "\n", "if", "recompute_w", ":", "\n", "            ", "self", ".", "compute_W_sparse", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._generate_train_data": [[192, 221], ["CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.S_matrix_target.eliminate_zeros", "int", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.S_matrix_target.tocoo", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._add_zeros_in_train_data_row_wise", "len", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._add_zeros_in_train_data_row_wise"], ["", "", "def", "_generate_train_data", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Generating train data...\"", ")", "\n", "\n", "", "self", ".", "S_matrix_target", ".", "eliminate_zeros", "(", ")", "\n", "\n", "\n", "numSamples", "=", "self", ".", "S_matrix_target", ".", "nnz", "\n", "\n", "zeros_to_add", "=", "int", "(", "numSamples", "*", "self", ".", "add_zeros_quota", ")", "\n", "\n", "self", ".", "S_matrix_target", "=", "self", ".", "S_matrix_target", ".", "tocoo", "(", ")", "\n", "\n", "if", "zeros_to_add", "!=", "0.0", ":", "\n", "            ", "self", ".", "row_list", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "self", ".", "S_matrix_target", ".", "row", ",", "dtype", "=", "np", ".", "int32", ")", ",", "np", ".", "zeros", "(", "zeros_to_add", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "self", ".", "col_list", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "self", ".", "S_matrix_target", ".", "col", ",", "dtype", "=", "np", ".", "int32", ")", ",", "np", ".", "zeros", "(", "zeros_to_add", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "self", ".", "data_list", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "self", ".", "S_matrix_target", ".", "data", ",", "dtype", "=", "np", ".", "float64", ")", ",", "np", ".", "zeros", "(", "zeros_to_add", ",", "dtype", "=", "np", ".", "float64", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "row_list", "=", "np", ".", "array", "(", "self", ".", "S_matrix_target", ".", "row", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "col_list", "=", "np", ".", "array", "(", "self", ".", "S_matrix_target", ".", "col", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "data_list", "=", "np", ".", "array", "(", "self", ".", "S_matrix_target", ".", "data", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "self", ".", "_add_zeros_in_train_data_row_wise", "(", ")", "\n", "\n", "# Initialize samples", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython._add_zeros_in_train_data_row_wise": [[227, 281], ["recsys.Base.Recommender_utils.check_matrix", "int", "int", "print", "ValueError", "range", "print", "print", "set", "numpy.random.randint", "set.add", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "def", "_add_zeros_in_train_data_row_wise", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function uses a set of tuples to ensure the zero elements to be added are not already existent\n        :return:\n        \"\"\"", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Adding zeros in train data...\"", ")", "\n", "\n", "", "self", ".", "S_matrix_target", "=", "check_matrix", "(", "self", ".", "S_matrix_target", ",", "\"csr\"", ")", "\n", "\n", "numSamples", "=", "self", ".", "S_matrix_target", ".", "nnz", "\n", "n_items", "=", "self", ".", "S_matrix_target", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "zeros_to_add_global", "=", "int", "(", "numSamples", "*", "self", ".", "add_zeros_quota", ")", "\n", "zeros_added_global", "=", "0", "\n", "\n", "if", "zeros_to_add_global", "+", "numSamples", ">=", "n_items", "**", "2", ":", "\n", "            ", "raise", "ValueError", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Too many zeros to add, not enough unique coordinates in matrix\"", ")", "\n", "\n", "", "zeros_to_add_per_item", "=", "int", "(", "zeros_to_add_global", "/", "self", ".", "n_items", ")", "\n", "\n", "\n", "while", "zeros_added_global", "<", "zeros_to_add_global", ":", "\n", "\n", "            ", "for", "current_item_row", "in", "range", "(", "self", ".", "n_items", ")", ":", "\n", "\n", "                ", "start_pos", "=", "self", ".", "S_matrix_target", ".", "indptr", "[", "current_item_row", "]", "\n", "end_pos", "=", "self", ".", "S_matrix_target", ".", "indptr", "[", "current_item_row", "+", "1", "]", "\n", "\n", "nonzero_coordinates", "=", "set", "(", "self", ".", "S_matrix_target", ".", "indices", "[", "start_pos", ":", "end_pos", "]", ")", "\n", "zeros_added_per_item", "=", "0", "\n", "\n", "while", "zeros_added_per_item", "<", "zeros_to_add_per_item", "and", "zeros_added_global", "<", "zeros_to_add_global", ":", "\n", "\n", "                    ", "new_coordinate", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_items", ")", "\n", "\n", "if", "new_coordinate", "not", "in", "nonzero_coordinates", ":", "\n", "\n", "                        ", "nonzero_coordinates", ".", "add", "(", "new_coordinate", ")", "\n", "\n", "self", ".", "row_list", "[", "numSamples", "+", "zeros_added_global", "]", "=", "current_item_row", "\n", "self", ".", "col_list", "[", "numSamples", "+", "zeros_added_global", "]", "=", "new_coordinate", "\n", "self", ".", "data_list", "[", "numSamples", "+", "zeros_added_global", "]", "=", "0.0", "\n", "\n", "zeros_added_per_item", "+=", "1", "\n", "zeros_added_global", "+=", "1", "\n", "\n", "\n", "\n", "", "", "", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Added: {} zeros. Average per item is: {} \"", ".", "format", "(", "zeros_added_global", ",", "zeros_to_add_per_item", ")", ")", "\n", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Added zeros, data points are {}\"", ".", "format", "(", "len", "(", "self", ".", "data_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.compute_W_sparse": [[284, 385], ["time.time", "print", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity", "scipy.csr_matrix", "CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.ICM.dot", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "scipy.csr_matrix", "recsys.Base.Recommender_utils.check_matrix", "print", "W1[].dot", "numpy.argsort", "numpy.sum", "range", "numpy.ones", "len", "print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "time.time", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "", "def", "compute_W_sparse", "(", "self", ",", "use_D", "=", "True", ",", "use_V", "=", "True", ",", "model_to_use", "=", "\"best\"", ")", ":", "\n", "\n", "        ", "assert", "model_to_use", "in", "[", "\"last\"", ",", "\"best\"", "]", ",", "\"{}: compute_W_sparse, 'model_to_use' parameter not recognized\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Building similarity matrix...\"", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "start_time_print_batch", "=", "start_time", "\n", "\n", "# Diagonal", "\n", "if", "use_D", ":", "\n", "\n", "            ", "if", "model_to_use", "==", "\"last\"", ":", "\n", "                ", "D", "=", "self", ".", "D_incremental", "\n", "", "else", ":", "\n", "                ", "D", "=", "self", ".", "D_best", "\n", "\n", "", "similarity", "=", "Compute_Similarity", "(", "self", ".", "ICM", ".", "T", ",", "shrink", "=", "0", ",", "topK", "=", "self", ".", "topK", ",", "normalize", "=", "False", ",", "row_weights", "=", "D", ")", "\n", "self", ".", "W_sparse", "=", "similarity", ".", "compute_similarity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "self", ".", "n_items", ",", "self", ".", "n_items", ")", ")", "\n", "\n", "\n", "", "if", "use_V", ":", "\n", "\n", "            ", "if", "model_to_use", "==", "\"last\"", ":", "\n", "                ", "V", "=", "self", ".", "V_incremental", "\n", "", "else", ":", "\n", "                ", "V", "=", "self", ".", "V_best", "\n", "\n", "\n", "# V * V.T", "\n", "", "W1", "=", "self", ".", "ICM", ".", "dot", "(", "V", ".", "T", ")", "\n", "\n", "#self.W_sparse += W1.dot(W1.T)", "\n", "\n", "# Use array as it reduces memory requirements compared to lists", "\n", "dataBlock", "=", "10000000", "\n", "\n", "values", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rows", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "cols", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "numCells", "=", "0", "\n", "\n", "for", "numItem", "in", "range", "(", "self", ".", "n_items", ")", ":", "\n", "\n", "                ", "V_weights", "=", "W1", "[", "numItem", ",", ":", "]", ".", "dot", "(", "W1", ".", "T", ")", "\n", "V_weights", "[", "numItem", "]", "=", "0.0", "\n", "\n", "relevant_items_partition", "=", "(", "-", "V_weights", ")", ".", "argpartition", "(", "self", ".", "topK", "-", "1", ")", "[", "0", ":", "self", ".", "topK", "]", "\n", "relevant_items_partition_sorting", "=", "np", ".", "argsort", "(", "-", "V_weights", "[", "relevant_items_partition", "]", ")", "\n", "top_k_idx", "=", "relevant_items_partition", "[", "relevant_items_partition_sorting", "]", "\n", "\n", "# Incrementally build sparse matrix, do not add zeros", "\n", "notZerosMask", "=", "V_weights", "[", "top_k_idx", "]", "!=", "0.0", "\n", "numNotZeros", "=", "np", ".", "sum", "(", "notZerosMask", ")", "\n", "\n", "values_to_add", "=", "V_weights", "[", "top_k_idx", "]", "[", "notZerosMask", "]", "\n", "rows_to_add", "=", "top_k_idx", "[", "notZerosMask", "]", "\n", "cols_to_add", "=", "np", ".", "ones", "(", "numNotZeros", ")", "*", "numItem", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "values_to_add", ")", ")", ":", "\n", "\n", "                    ", "if", "numCells", "==", "len", "(", "rows", ")", ":", "\n", "                        ", "rows", "=", "np", ".", "concatenate", "(", "(", "rows", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "cols", "=", "np", ".", "concatenate", "(", "(", "cols", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "\n", "\n", "", "rows", "[", "numCells", "]", "=", "rows_to_add", "[", "index", "]", "\n", "cols", "[", "numCells", "]", "=", "cols_to_add", "[", "index", "]", "\n", "values", "[", "numCells", "]", "=", "values_to_add", "[", "index", "]", "\n", "\n", "numCells", "+=", "1", "\n", "\n", "", "if", "self", ".", "verbose", "and", "(", "time", ".", "time", "(", ")", "-", "start_time_print_batch", ">=", "30", "or", "numItem", "==", "self", ".", "n_items", "-", "1", ")", ":", "\n", "                    ", "columnPerSec", "=", "numItem", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "\n", "print", "(", "\"{}: Weighted similarity column {} ( {:2.0f} % ), {:.2f} column/sec, elapsed time {:.2f} min\"", ".", "format", "(", "\n", "self", ".", "RECOMMENDER_NAME", ",", "\n", "numItem", ",", "numItem", "/", "self", ".", "n_items", "*", "100", ",", "columnPerSec", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_print_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "V_weights", "=", "sps", ".", "csr_matrix", "(", "(", "values", "[", ":", "numCells", "]", ",", "(", "rows", "[", ":", "numCells", "]", ",", "cols", "[", ":", "numCells", "]", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "n_items", ",", "self", ".", "n_items", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "W_sparse", "+=", "V_weights", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "\n", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Building similarity matrix... complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.runCompilationScript": [[392, 403], ["recsys.CythonCompiler.run_compile_subprocess.run_compile_subprocess", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CythonCompiler.run_compile_subprocess.run_compile_subprocess"], ["", "", "def", "runCompilationScript", "(", "self", ")", ":", "\n", "\n", "# Run compile script setting the working directory to ensure the compiled file are contained in the", "\n", "# appropriate subfolder and not the project root", "\n", "\n", "        ", "file_subfolder", "=", "\"FeatureWeighting/Cython\"", "\n", "file_to_compile_list", "=", "[", "'CFW_DVV_Similarity_Cython_SGD.pyx'", "]", "\n", "\n", "run_compile_subprocess", "(", "file_subfolder", ",", "file_to_compile_list", ")", "\n", "\n", "print", "(", "\"{}: Compiled module {} in subfolder: {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "file_to_compile_list", ",", "file_subfolder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_DVV_Similarity_Cython.CFW_DVV_Similarity_Cython.save_model": [[415, 433], ["print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "print", "(", "\"{}: Saving model in file '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "\n", "\"D_best\"", ":", "self", ".", "D_best", ",", "\n", "\"V_best\"", ":", "self", ".", "V_best", ",", "\n", "\"topK\"", ":", "self", ".", "topK", ",", "\n", "\"W_sparse\"", ":", "self", ".", "W_sparse", "\n", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "print", "(", "\"{}: Saving complete\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper.__init__": [[28, 36], ["ICM_target.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["    ", "def", "__init__", "(", "self", ",", "evaluator_object", ",", "ICM_target", ",", "model_to_use", "=", "\"best\"", ")", ":", "\n", "\n", "        ", "self", ".", "evaluator_object", "=", "evaluator_object", "\n", "self", ".", "ICM_target", "=", "ICM_target", ".", "copy", "(", ")", "\n", "\n", "assert", "model_to_use", "in", "[", "\"best\"", ",", "\"last\"", "]", ",", "\"EvaluatorCFW_D_wrapper: model_to_use must be either 'best' or 'incremental'. Provided value is: '{}'\"", ".", "format", "(", "model_to_use", ")", "\n", "\n", "self", ".", "model_to_use", "=", "model_to_use", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper.evaluateRecommender": [[38, 46], ["recommender_object.set_ICM_and_recompute_W", "recommender_object.compute_W_sparse", "CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper.evaluator_object.evaluateRecommender"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.set_ICM_and_recompute_W", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper.evaluateRecommender"], ["", "def", "evaluateRecommender", "(", "self", ",", "recommender_object", ")", ":", "\n", "\n", "        ", "recommender_object", ".", "set_ICM_and_recompute_W", "(", "self", ".", "ICM_target", ",", "recompute_w", "=", "False", ")", "\n", "\n", "# Use either best model or incremental one", "\n", "recommender_object", ".", "compute_W_sparse", "(", "model_to_use", "=", "self", ".", "model_to_use", ")", "\n", "\n", "return", "self", ".", "evaluator_object", ".", "evaluateRecommender", "(", "recommender_object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.__init__": [[60, 87], ["recsys.Base.BaseCBFRecommender.BaseItemCBFRecommender.__init__", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.Recommender_utils.check_matrix", "ValueError", "ValueError", "ValueError", "print", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.runCompilationScript", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.runCompilationScript"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "ICM_train", ",", "S_matrix_target", ",", "\n", "recompile_cython", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "super", "(", "CFW_D_Similarity_Cython", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "ICM_train", ")", "\n", "\n", "if", "(", "URM_train", ".", "shape", "[", "1", "]", "!=", "ICM_train", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of items not consistent. URM contains {} but ICM contains {}\"", ".", "format", "(", "URM_train", ".", "shape", "[", "1", "]", ",", "\n", "ICM_train", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "if", "(", "S_matrix_target", ".", "shape", "[", "0", "]", "!=", "S_matrix_target", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Items imilarity matrix is not square: rows are {}, columns are {}\"", ".", "format", "(", "S_matrix_target", ".", "shape", "[", "0", "]", ",", "\n", "S_matrix_target", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "if", "(", "S_matrix_target", ".", "shape", "[", "0", "]", "!=", "ICM_train", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of items not consistent. S_matrix contains {} but ICM contains {}\"", ".", "format", "(", "S_matrix_target", ".", "shape", "[", "0", "]", ",", "\n", "ICM_train", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "S_matrix_target", "=", "check_matrix", "(", "S_matrix_target", ",", "'csr'", ")", "\n", "\n", "self", ".", "ICM", "=", "check_matrix", "(", "ICM_train", ",", "'csr'", ")", "\n", "self", ".", "n_features", "=", "self", ".", "ICM", ".", "shape", "[", "1", "]", "\n", "\n", "if", "recompile_cython", ":", "\n", "            ", "print", "(", "\"Compiling in Cython\"", ")", "\n", "self", ".", "runCompilationScript", "(", ")", "\n", "print", "(", "\"Compilation Complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.fit": [[94, 187], ["CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._generate_train_data", "CFW_D_Similarity_Cython_SGD", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.FW_D_Similarity.get_weights", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.D_incremental.copy", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._train_with_early_stopping", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse", "sys.stdout.flush", "ValueError", "numpy.random.normal().astype", "print", "numpy.ones", "numpy.random.normal", "numpy.zeros", "numpy.ones", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.ICM.astype", "recsys.Base.IR_feature_weighting.okapi_BM_25", "numpy.ones", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.ICM.astype", "recsys.Base.IR_feature_weighting.TF_IDF", "ValueError"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._generate_train_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._train_with_early_stopping", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.okapi_BM_25", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.IR_feature_weighting.TF_IDF"], ["", "", "def", "fit", "(", "self", ",", "show_max_performance", "=", "False", ",", "\n", "precompute_common_features", "=", "False", ",", "\n", "learning_rate", "=", "0.1", ",", "\n", "positive_only_D", "=", "True", ",", "\n", "initialization_mode_D", "=", "\"random\"", ",", "\n", "normalize_similarity", "=", "False", ",", "\n", "use_dropout", "=", "True", ",", "\n", "dropout_perc", "=", "0.3", ",", "\n", "l1_reg", "=", "0.0", ",", "\n", "l2_reg", "=", "0.0", ",", "\n", "epochs", "=", "50", ",", "\n", "topK", "=", "300", ",", "\n", "add_zeros_quota", "=", "0.0", ",", "\n", "log_file", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "sgd_mode", "=", "'adagrad'", ",", "gamma", "=", "0.9", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "\n", "**", "earlystopping_kwargs", ")", ":", "\n", "\n", "\n", "        ", "if", "initialization_mode_D", "not", "in", "self", ".", "INIT_TYPE_VALUES", ":", "\n", "           ", "raise", "ValueError", "(", "\"Value for 'initialization_mode_D' not recognized. Acceptable values are {}, provided was '{}'\"", ".", "format", "(", "self", ".", "INIT_TYPE_VALUES", ",", "initialization_mode_D", ")", ")", "\n", "\n", "\n", "# Import compiled module", "\n", "", "from", "recsys", ".", "FeatureWeighting", ".", "Cython", ".", "CFW_D_Similarity_Cython_SGD", "import", "CFW_D_Similarity_Cython_SGD", "\n", "\n", "self", ".", "show_max_performance", "=", "show_max_performance", "\n", "self", ".", "normalize_similarity", "=", "normalize_similarity", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "add_zeros_quota", "=", "add_zeros_quota", "\n", "self", ".", "l1_reg", "=", "l1_reg", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "topK", "=", "topK", "\n", "self", ".", "log_file", "=", "log_file", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "\n", "self", ".", "_generate_train_data", "(", ")", "\n", "\n", "weights_initialization_D", "=", "None", "\n", "\n", "if", "initialization_mode_D", "==", "\"random\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "random", ".", "normal", "(", "0.001", ",", "0.1", ",", "self", ".", "n_features", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"one\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"zero\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "zeros", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "elif", "initialization_mode_D", "==", "\"BM25\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "ICM", "=", "self", ".", "ICM", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "ICM", "=", "okapi_BM_25", "(", "self", ".", "ICM", ")", "\n", "\n", "", "elif", "initialization_mode_D", "==", "\"TF-IDF\"", ":", "\n", "            ", "weights_initialization_D", "=", "np", ".", "ones", "(", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "ICM", "=", "self", ".", "ICM", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "ICM", "=", "TF_IDF", "(", "self", ".", "ICM", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"CFW_D_Similarity_Cython: 'init_type' not recognized\"", ")", "\n", "\n", "\n", "# Instantiate fast Cython implementation", "\n", "", "self", ".", "FW_D_Similarity", "=", "CFW_D_Similarity_Cython_SGD", "(", "self", ".", "row_list", ",", "self", ".", "col_list", ",", "self", ".", "data_list", ",", "\n", "self", ".", "n_features", ",", "\n", "self", ".", "ICM", ",", "\n", "precompute_common_features", "=", "precompute_common_features", ",", "\n", "positive_only_D", "=", "positive_only_D", ",", "\n", "weights_initialization_D", "=", "weights_initialization_D", ",", "\n", "use_dropout", "=", "use_dropout", ",", "dropout_perc", "=", "dropout_perc", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "l1_reg", "=", "l1_reg", ",", "\n", "l2_reg", "=", "l2_reg", ",", "\n", "sgd_mode", "=", "sgd_mode", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "gamma", "=", "gamma", ",", "beta_1", "=", "beta_1", ",", "beta_2", "=", "beta_2", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Initialization completed\"", ")", "\n", "\n", "", "self", ".", "D_incremental", "=", "self", ".", "FW_D_Similarity", ".", "get_weights", "(", ")", "\n", "self", ".", "D_best", "=", "self", ".", "D_incremental", ".", "copy", "(", ")", "\n", "\n", "\n", "self", ".", "_train_with_early_stopping", "(", "epochs", ",", "\n", "algorithm_name", "=", "self", ".", "RECOMMENDER_NAME", ",", "\n", "**", "earlystopping_kwargs", ")", "\n", "\n", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"best\"", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._prepare_model_for_validation": [[190, 193], ["CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.FW_D_Similarity.get_weights", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "        ", "self", ".", "D_incremental", "=", "self", ".", "FW_D_Similarity", ".", "get_weights", "(", ")", "\n", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._update_best_model": [[195, 197], ["CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.D_incremental.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "D_best", "=", "self", ".", "D_incremental", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._run_epoch": [[199, 201], ["CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.FW_D_Similarity.fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["", "def", "_run_epoch", "(", "self", ",", "num_epoch", ")", ":", "\n", "        ", "self", ".", "loss", "=", "self", ".", "FW_D_Similarity", ".", "fit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython._generate_train_data": [[206, 337], ["time.time", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.similarity.compute_similarity", "recsys.Base.Recommender_utils.check_matrix", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "sum", "sum", "sum", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "print", "numpy.array().ravel", "numpy.sqrt", "numpy.in1d", "numpy.in1d.sum", "range", "len", "print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.ICM.T.power().sum", "numpy.random.rand", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time.time", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.ICM.T.power"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log"], ["", "def", "_generate_train_data", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Generating train data\"", ")", "\n", "\n", "", "start_time_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "# Here is important only the structure", "\n", "self", ".", "similarity", "=", "Compute_Similarity", "(", "self", ".", "ICM", ".", "T", ",", "shrink", "=", "0", ",", "topK", "=", "self", ".", "topK", ",", "normalize", "=", "False", ")", "\n", "S_matrix_contentKNN", "=", "self", ".", "similarity", ".", "compute_similarity", "(", ")", "\n", "S_matrix_contentKNN", "=", "check_matrix", "(", "S_matrix_contentKNN", ",", "\"csr\"", ")", "\n", "\n", "\n", "self", ".", "write_log", "(", "\"Collaborative S density: {:.2E}, nonzero cells {}\"", ".", "format", "(", "\n", "self", ".", "S_matrix_target", ".", "nnz", "/", "self", ".", "S_matrix_target", ".", "shape", "[", "0", "]", "**", "2", ",", "self", ".", "S_matrix_target", ".", "nnz", ")", ")", "\n", "\n", "self", ".", "write_log", "(", "\"Content S density: {:.2E}, nonzero cells {}\"", ".", "format", "(", "\n", "S_matrix_contentKNN", ".", "nnz", "/", "S_matrix_contentKNN", ".", "shape", "[", "0", "]", "**", "2", ",", "S_matrix_contentKNN", ".", "nnz", ")", ")", "\n", "\n", "\n", "if", "self", ".", "normalize_similarity", ":", "\n", "\n", "# Compute sum of squared", "\n", "            ", "sum_of_squared_features", "=", "np", ".", "array", "(", "self", ".", "ICM", ".", "T", ".", "power", "(", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "ravel", "(", ")", "\n", "sum_of_squared_features", "=", "np", ".", "sqrt", "(", "sum_of_squared_features", ")", "\n", "\n", "\n", "\n", "", "num_common_coordinates", "=", "0", "\n", "\n", "estimated_n_samples", "=", "int", "(", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", "*", "1.2", ")", "\n", "\n", "self", ".", "row_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "col_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "data_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "num_samples", "=", "0", "\n", "\n", "\n", "for", "row_index", "in", "range", "(", "self", ".", "n_items", ")", ":", "\n", "\n", "            ", "start_pos_content", "=", "S_matrix_contentKNN", ".", "indptr", "[", "row_index", "]", "\n", "end_pos_content", "=", "S_matrix_contentKNN", ".", "indptr", "[", "row_index", "+", "1", "]", "\n", "\n", "content_coordinates", "=", "S_matrix_contentKNN", ".", "indices", "[", "start_pos_content", ":", "end_pos_content", "]", "\n", "\n", "start_pos_target", "=", "self", ".", "S_matrix_target", ".", "indptr", "[", "row_index", "]", "\n", "end_pos_target", "=", "self", ".", "S_matrix_target", ".", "indptr", "[", "row_index", "+", "1", "]", "\n", "\n", "target_coordinates", "=", "self", ".", "S_matrix_target", ".", "indices", "[", "start_pos_target", ":", "end_pos_target", "]", "\n", "\n", "# Chech whether the content coordinate is associated to a non zero target value", "\n", "# If true, the content coordinate has a collaborative non-zero value", "\n", "# if false, the content coordinate has a collaborative zero value", "\n", "is_common", "=", "np", ".", "in1d", "(", "content_coordinates", ",", "target_coordinates", ")", "\n", "\n", "num_common_in_current_row", "=", "is_common", ".", "sum", "(", ")", "\n", "num_common_coordinates", "+=", "num_common_in_current_row", "\n", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "is_common", ")", ")", ":", "\n", "\n", "                ", "if", "num_samples", "==", "estimated_n_samples", ":", "\n", "                    ", "dataBlock", "=", "1000000", "\n", "self", ".", "row_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "row_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "self", ".", "col_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "col_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "self", ".", "data_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float64", ")", ")", ")", "\n", "\n", "", "if", "is_common", "[", "index", "]", ":", "\n", "# If cell exists in target matrix, add its value", "\n", "# Otherwise it will remain zero with a certain probability", "\n", "\n", "                    ", "col_index", "=", "content_coordinates", "[", "index", "]", "\n", "\n", "self", ".", "row_list", "[", "num_samples", "]", "=", "row_index", "\n", "self", ".", "col_list", "[", "num_samples", "]", "=", "col_index", "\n", "\n", "new_data_value", "=", "self", ".", "S_matrix_target", "[", "row_index", ",", "col_index", "]", "\n", "\n", "if", "self", ".", "normalize_similarity", ":", "\n", "                        ", "new_data_value", "*=", "sum_of_squared_features", "[", "row_index", "]", "*", "sum_of_squared_features", "[", "col_index", "]", "\n", "\n", "", "self", ".", "data_list", "[", "num_samples", "]", "=", "new_data_value", "\n", "\n", "num_samples", "+=", "1", "\n", "\n", "\n", "", "elif", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "add_zeros_quota", ":", "\n", "\n", "                    ", "col_index", "=", "content_coordinates", "[", "index", "]", "\n", "\n", "self", ".", "row_list", "[", "num_samples", "]", "=", "row_index", "\n", "self", ".", "col_list", "[", "num_samples", "]", "=", "col_index", "\n", "self", ".", "data_list", "[", "num_samples", "]", "=", "0.0", "\n", "\n", "num_samples", "+=", "1", "\n", "\n", "\n", "\n", "", "", "if", "self", ".", "verbose", "and", "(", "time", ".", "time", "(", ")", "-", "start_time_batch", ">", "30", "or", "num_samples", "==", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", ")", ":", "\n", "\n", "                ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Generating train data. Sample {} ( {:.2f} %) \"", ".", "format", "(", "\n", "num_samples", ",", "num_samples", "/", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", "*", "100", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "self", ".", "write_log", "(", "\"Content S structure has {} out of {} ( {:.2f}%) nonzero collaborative cells\"", ".", "format", "(", "\n", "num_common_coordinates", ",", "S_matrix_contentKNN", ".", "nnz", ",", "num_common_coordinates", "/", "S_matrix_contentKNN", ".", "nnz", "*", "100", ")", ")", "\n", "\n", "\n", "\n", "# Discard extra cells at the left of the array", "\n", "self", ".", "row_list", "=", "self", ".", "row_list", "[", ":", "num_samples", "]", "\n", "self", ".", "col_list", "=", "self", ".", "col_list", "[", ":", "num_samples", "]", "\n", "self", ".", "data_list", "=", "self", ".", "data_list", "[", ":", "num_samples", "]", "\n", "\n", "\n", "data_nnz", "=", "sum", "(", "np", ".", "array", "(", "self", ".", "data_list", ")", "!=", "0", ")", "\n", "data_sum", "=", "sum", "(", "self", ".", "data_list", ")", "\n", "\n", "collaborative_nnz", "=", "self", ".", "S_matrix_target", ".", "nnz", "\n", "collaborative_sum", "=", "sum", "(", "self", ".", "S_matrix_target", ".", "data", ")", "\n", "\n", "self", ".", "write_log", "(", "\"Nonzero collaborative cell sum is: {:.2E}, average is: {:.2E}, \"", "\n", "\"average over all collaborative data is {:.2E}\"", ".", "format", "(", "\n", "data_sum", ",", "data_sum", "/", "data_nnz", ",", "collaborative_sum", "/", "collaborative_nnz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.write_log": [[375, 387], ["print", "sys.stdout.flush", "sys.stderr.flush", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.log_file.write", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.log_file.flush"], "methods", ["None"], ["", "def", "write_log", "(", "self", ",", "string", ")", ":", "\n", "\n", "        ", "string", "=", "self", ".", "RECOMMENDER_NAME", "+", "\": \"", "+", "string", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "string", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "", "if", "self", ".", "log_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "log_file", ".", "write", "(", "string", "+", "\"\\n\"", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse": [[389, 404], ["recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.similarity.compute_similarity", "recsys.Base.Recommender_utils.check_matrix"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "", "def", "compute_W_sparse", "(", "self", ",", "model_to_use", "=", "\"best\"", ")", ":", "\n", "\n", "        ", "if", "model_to_use", "==", "\"last\"", ":", "\n", "            ", "feature_weights", "=", "self", ".", "D_incremental", "\n", "", "elif", "model_to_use", "==", "\"best\"", ":", "\n", "            ", "feature_weights", "=", "self", ".", "D_best", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"{}: compute_W_sparse, 'model_to_use' parameter not recognized\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "\n", "", "self", ".", "similarity", "=", "Compute_Similarity", "(", "self", ".", "ICM", ".", "T", ",", "shrink", "=", "0", ",", "topK", "=", "self", ".", "topK", ",", "\n", "normalize", "=", "self", ".", "normalize_similarity", ",", "row_weights", "=", "feature_weights", ")", "\n", "\n", "self", ".", "W_sparse", "=", "self", ".", "similarity", ".", "compute_similarity", "(", ")", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.set_ICM_and_recompute_W": [[408, 414], ["ICM_new.copy", "CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.compute_W_sparse"], ["", "def", "set_ICM_and_recompute_W", "(", "self", ",", "ICM_new", ",", "recompute_w", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "ICM", "=", "ICM_new", ".", "copy", "(", ")", "\n", "\n", "if", "recompute_w", ":", "\n", "            ", "self", ".", "compute_W_sparse", "(", "model_to_use", "=", "\"best\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.runCompilationScript": [[419, 430], ["recsys.CythonCompiler.run_compile_subprocess.run_compile_subprocess", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CythonCompiler.run_compile_subprocess.run_compile_subprocess"], ["", "", "def", "runCompilationScript", "(", "self", ")", ":", "\n", "\n", "# Run compile script setting the working directory to ensure the compiled file are contained in the", "\n", "# appropriate subfolder and not the project root", "\n", "\n", "        ", "file_subfolder", "=", "\"FeatureWeighting/Cython\"", "\n", "file_to_compile_list", "=", "[", "'CFW_D_Similarity_Cython_SGD.pyx'", "]", "\n", "\n", "run_compile_subprocess", "(", "file_subfolder", ",", "file_to_compile_list", ")", "\n", "\n", "print", "(", "\"{}: Compiled module {} in subfolder: {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "file_to_compile_list", ",", "file_subfolder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.CFW_D_Similarity_Cython.save_model": [[441, 461], ["print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "print", "(", "\"{}: Saving model in file '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "{", "\n", "\"D_best\"", ":", "self", ".", "D_best", ",", "\n", "\"topK\"", ":", "self", ".", "topK", ",", "\n", "\"W_sparse\"", ":", "self", ".", "W_sparse", ",", "\n", "\"normalize_similarity\"", ":", "self", ".", "normalize_similarity", "\n", "}", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "\n", "print", "(", "\"{}: Saving complete\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.__init__": [[55, 73], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender.__init__", "print", "SLIM_BPR_Cython.SLIM_BPR_Cython.runCompilationScript", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.runCompilationScript"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "\n", "verbose", "=", "True", ",", "\n", "free_mem_threshold", "=", "0.5", ",", "\n", "recompile_cython", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "super", "(", "SLIM_BPR_Cython", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n", "assert", "free_mem_threshold", ">=", "0.0", "and", "free_mem_threshold", "<=", "1.0", ",", "\"SLIM_BPR_Recommender: free_mem_threshold must be between 0.0 and 1.0, provided was '{}'\"", ".", "format", "(", "free_mem_threshold", ")", "\n", "\n", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "self", ".", "URM_train", ".", "shape", "\n", "\n", "self", ".", "free_mem_threshold", "=", "free_mem_threshold", "\n", "\n", "if", "recompile_cython", ":", "\n", "            ", "print", "(", "\"Compiling in Cython\"", ")", "\n", "self", ".", "runCompilationScript", "(", ")", "\n", "print", "(", "\"Compilation Complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.fit": [[78, 174], ["SLIM_BPR_Cython.SLIM_BPR_Cython.URM_train.copy", "SLIM_BPR_Cython_Epoch", "SLIM_BPR_Cython.SLIM_BPR_Cython.cythonEpoch.get_S", "SLIM_BPR_Cython.SLIM_BPR_Cython.S_incremental.copy", "SLIM_BPR_Cython.SLIM_BPR_Cython._train_with_early_stopping", "SLIM_BPR_Cython.SLIM_BPR_Cython.get_S_incremental_and_set_W", "SLIM_BPR_Cython.SLIM_BPR_Cython.cythonEpoch._dealloc", "sys.stdout.flush", "SLIM_BPR_Cython.estimate_required_MB", "SLIM_BPR_Cython.get_RAM_status", "SLIM_BPR_Cython.SLIM_BPR_Cython.eliminate_zeros", "ValueError", "SLIM_BPR_Cython.SLIM_BPR_Cython._print", "SLIM_BPR_Cython.SLIM_BPR_Cython._print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping._train_with_early_stopping", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.get_S_incremental_and_set_W", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.estimate_required_MB", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.get_RAM_status", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "", "def", "fit", "(", "self", ",", "epochs", "=", "300", ",", "\n", "positive_threshold_BPR", "=", "None", ",", "\n", "train_with_sparse_weights", "=", "None", ",", "\n", "symmetric", "=", "True", ",", "\n", "random_seed", "=", "None", ",", "\n", "batch_size", "=", "1000", ",", "lambda_i", "=", "0.0", ",", "lambda_j", "=", "0.0", ",", "learning_rate", "=", "1e-4", ",", "topK", "=", "200", ",", "\n", "sgd_mode", "=", "'adagrad'", ",", "gamma", "=", "0.995", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "\n", "**", "earlystopping_kwargs", ")", ":", "\n", "\n", "\n", "# Import compiled module", "\n", "        ", "from", "recsys", ".", "SLIM_BPR", ".", "Cython", ".", "SLIM_BPR_Cython_Epoch", "import", "SLIM_BPR_Cython_Epoch", "\n", "\n", "\n", "\n", "self", ".", "symmetric", "=", "symmetric", "\n", "self", ".", "train_with_sparse_weights", "=", "train_with_sparse_weights", "\n", "\n", "\n", "if", "self", ".", "train_with_sparse_weights", "is", "None", ":", "\n", "\n", "# auto select", "\n", "            ", "required_m", "=", "estimate_required_MB", "(", "self", ".", "n_items", ",", "self", ".", "symmetric", ")", "\n", "\n", "total_m", ",", "_", ",", "available_m", "=", "get_RAM_status", "(", ")", "\n", "\n", "if", "total_m", "is", "not", "None", ":", "\n", "                ", "string", "=", "\"Automatic selection of fastest train mode. Available RAM is {:.2f} MB ({:.2f}%) of {:.2f} MB, required is {:.2f} MB. \"", ".", "format", "(", "available_m", ",", "available_m", "/", "total_m", "*", "100", ",", "total_m", ",", "required_m", ")", "\n", "", "else", ":", "\n", "                ", "string", "=", "\"Automatic selection of fastest train mode. Unable to get current RAM status, you may be using a non-Linux operating system. \"", "\n", "\n", "", "if", "total_m", "is", "None", "or", "required_m", "/", "available_m", "<", "self", ".", "free_mem_threshold", ":", "\n", "                ", "self", ".", "_print", "(", "string", "+", "\"Using dense matrix.\"", ")", "\n", "self", ".", "train_with_sparse_weights", "=", "False", "\n", "", "else", ":", "\n", "                ", "self", ".", "_print", "(", "string", "+", "\"Using sparse matrix.\"", ")", "\n", "self", ".", "train_with_sparse_weights", "=", "True", "\n", "\n", "\n", "\n", "# Select only positive interactions", "\n", "", "", "URM_train_positive", "=", "self", ".", "URM_train", ".", "copy", "(", ")", "\n", "\n", "self", ".", "positive_threshold_BPR", "=", "positive_threshold_BPR", "\n", "self", ".", "sgd_mode", "=", "sgd_mode", "\n", "self", ".", "epochs", "=", "epochs", "\n", "\n", "\n", "if", "self", ".", "positive_threshold_BPR", "is", "not", "None", ":", "\n", "            ", "URM_train_positive", ".", "data", "=", "URM_train_positive", ".", "data", ">=", "self", ".", "positive_threshold_BPR", "\n", "URM_train_positive", ".", "eliminate_zeros", "(", ")", "\n", "\n", "assert", "URM_train_positive", ".", "nnz", ">", "0", ",", "\"SLIM_BPR_Cython: URM_train_positive is empty, positive threshold is too high\"", "\n", "\n", "\n", "", "self", ".", "cythonEpoch", "=", "SLIM_BPR_Cython_Epoch", "(", "URM_train_positive", ",", "\n", "train_with_sparse_weights", "=", "self", ".", "train_with_sparse_weights", ",", "\n", "final_model_sparse_weights", "=", "True", ",", "\n", "topK", "=", "topK", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "li_reg", "=", "lambda_i", ",", "\n", "lj_reg", "=", "lambda_j", ",", "\n", "batch_size", "=", "1", ",", "\n", "symmetric", "=", "self", ".", "symmetric", ",", "\n", "sgd_mode", "=", "sgd_mode", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "random_seed", "=", "random_seed", ",", "\n", "gamma", "=", "gamma", ",", "\n", "beta_1", "=", "beta_1", ",", "\n", "beta_2", "=", "beta_2", ")", "\n", "\n", "\n", "\n", "\n", "if", "(", "topK", "!=", "False", "and", "topK", "<", "1", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"TopK not valid. Acceptable values are either False or a positive integer value. Provided value was '{}'\"", ".", "format", "(", "topK", ")", ")", "\n", "", "self", ".", "topK", "=", "topK", "\n", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "lambda_i", "=", "lambda_i", "\n", "self", ".", "lambda_j", "=", "lambda_j", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n", "self", ".", "S_incremental", "=", "self", ".", "cythonEpoch", ".", "get_S", "(", ")", "\n", "self", ".", "S_best", "=", "self", ".", "S_incremental", ".", "copy", "(", ")", "\n", "\n", "self", ".", "_train_with_early_stopping", "(", "epochs", ",", "\n", "algorithm_name", "=", "self", ".", "RECOMMENDER_NAME", ",", "\n", "**", "earlystopping_kwargs", ")", "\n", "\n", "self", ".", "get_S_incremental_and_set_W", "(", ")", "\n", "\n", "self", ".", "cythonEpoch", ".", "_dealloc", "(", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._prepare_model_for_validation": [[178, 180], ["SLIM_BPR_Cython.SLIM_BPR_Cython.get_S_incremental_and_set_W"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.get_S_incremental_and_set_W"], ["", "def", "_prepare_model_for_validation", "(", "self", ")", ":", "\n", "        ", "self", ".", "get_S_incremental_and_set_W", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._update_best_model": [[182, 184], ["SLIM_BPR_Cython.SLIM_BPR_Cython.S_incremental.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_update_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "S_best", "=", "self", ".", "S_incremental", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython._run_epoch": [[185, 187], ["SLIM_BPR_Cython.SLIM_BPR_Cython.cythonEpoch.epochIteration_Cython"], "methods", ["None"], ["", "def", "_run_epoch", "(", "self", ",", "num_epoch", ")", ":", "\n", "       ", "self", ".", "cythonEpoch", ".", "epochIteration_Cython", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.get_S_incremental_and_set_W": [[189, 199], ["SLIM_BPR_Cython.SLIM_BPR_Cython.cythonEpoch.get_S", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.Recommender_utils.similarityMatrixTopK", "recsys.Base.Recommender_utils.check_matrix"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["", "def", "get_S_incremental_and_set_W", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "S_incremental", "=", "self", ".", "cythonEpoch", ".", "get_S", "(", ")", "\n", "\n", "if", "self", ".", "train_with_sparse_weights", ":", "\n", "            ", "self", ".", "W_sparse", "=", "self", ".", "S_incremental", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W_sparse", "=", "similarityMatrixTopK", "(", "self", ".", "S_incremental", ",", "k", "=", "self", ".", "topK", ")", "\n", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.SLIM_BPR_Cython.runCompilationScript": [[203, 214], ["recsys.CythonCompiler.run_compile_subprocess.run_compile_subprocess", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.CythonCompiler.run_compile_subprocess.run_compile_subprocess"], ["", "", "def", "runCompilationScript", "(", "self", ")", ":", "\n", "\n", "# Run compile script setting the working directory to ensure the compiled file are contained in the", "\n", "# appropriate subfolder and not the project root", "\n", "\n", "        ", "file_subfolder", "=", "\"/SLIM_BPR/Cython\"", "\n", "file_to_compile_list", "=", "[", "'SLIM_BPR_Cython_Epoch.pyx'", "]", "\n", "\n", "run_compile_subprocess", "(", "file_subfolder", ",", "file_to_compile_list", ")", "\n", "\n", "print", "(", "\"{}: Compiled module {} in subfolder: {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "file_to_compile_list", ",", "file_subfolder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.estimate_required_MB": [[19, 27], ["None"], "function", ["None"], ["def", "estimate_required_MB", "(", "n_items", ",", "symmetric", ")", ":", "\n", "\n", "    ", "requiredMB", "=", "8", "*", "n_items", "**", "2", "/", "1e+06", "\n", "\n", "if", "symmetric", ":", "\n", "        ", "requiredMB", "/=", "2", "\n", "\n", "", "return", "requiredMB", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.SLIM_BPR_Cython.get_RAM_status": [[29, 45], ["[].split", "float", "float", "float", "print", "os.popen().readlines", "str", "os.popen"], "function", ["None"], ["", "def", "get_RAM_status", "(", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "data_list", "=", "os", ".", "popen", "(", "'free -t -m'", ")", ".", "readlines", "(", ")", "[", "1", "]", ".", "split", "(", ")", "\n", "tot_m", "=", "float", "(", "data_list", "[", "1", "]", ")", "\n", "used_m", "=", "float", "(", "data_list", "[", "2", "]", ")", "\n", "available_m", "=", "float", "(", "data_list", "[", "6", "]", ")", "\n", "\n", "", "except", "Exception", "as", "exc", ":", "\n", "\n", "        ", "print", "(", "\"Unable to read memory status: {}\"", ".", "format", "(", "str", "(", "exc", ")", ")", ")", "\n", "\n", "tot_m", ",", "used_m", ",", "available_m", "=", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "return", "tot_m", ",", "used_m", ",", "available_m", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.CythonCompiler.run_compile_subprocess.run_compile_subprocess": [[12, 56], ["os.getcwd", "os.getcwd", "subprocess.check_output", "shutil.rmtree", "subprocess.check_output"], "function", ["None"], ["def", "run_compile_subprocess", "(", "file_subfolder", ",", "file_to_compile_list", ")", ":", "\n", "\n", "# Run compile script setting the working directory to ensure the compiled file are contained in the", "\n", "# appropriate subfolder and not the project root", "\n", "\n", "    ", "current_python_path", "=", "sys", ".", "executable", "\n", "\n", "compile_script_absolute_path", "=", "os", ".", "getcwd", "(", ")", "+", "'/CythonCompiler/compile_script.py'", "\n", "file_subfolder_absolute_path", "=", "os", ".", "getcwd", "(", ")", "+", "\"/\"", "+", "file_subfolder", "\n", "\n", "for", "file_to_compile", "in", "file_to_compile_list", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "command", "=", "[", "current_python_path", ",", "\n", "compile_script_absolute_path", ",", "\n", "file_to_compile", ",", "\n", "'build_ext'", ",", "\n", "'--inplace'", "\n", "]", "\n", "\n", "output", "=", "subprocess", ".", "check_output", "(", "' '", ".", "join", "(", "command", ")", ",", "\n", "shell", "=", "True", ",", "\n", "cwd", "=", "file_subfolder_absolute_path", ")", "\n", "\n", "\n", "try", ":", "\n", "\n", "                ", "command", "=", "[", "'cython'", ",", "\n", "file_to_compile", ",", "\n", "'-a'", "\n", "]", "\n", "\n", "output", "=", "subprocess", ".", "check_output", "(", "' '", ".", "join", "(", "command", ")", ",", "\n", "shell", "=", "True", ",", "\n", "cwd", "=", "file_subfolder_absolute_path", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "except", "Exception", "as", "exc", ":", "\n", "            ", "raise", "exc", "\n", "\n", "", "finally", ":", "\n", "# Removing temporary \"build\" subfolder", "\n", "            ", "shutil", ".", "rmtree", "(", "file_subfolder_absolute_path", "+", "\"/build\"", ",", "ignore_errors", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.EASE_R.EASE_R_Recommender.EASE_R_Recommender.__init__": [[37, 39], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ")", ":", "\n", "        ", "super", "(", "EASE_R_Recommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.EASE_R.EASE_R_Recommender.EASE_R_Recommender.fit": [[40, 83], ["time.time", "EASE_R_Recommender.EASE_R_Recommender._print", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity().toarray", "numpy.diag_indices", "numpy.ediff1d", "numpy.linalg.inv", "recsys.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "EASE_R_Recommender.EASE_R_Recommender._print", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "scipy.csr_matrix", "recsys.Base.Recommender_utils.similarityMatrixTopK", "scipy.csr_matrix", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity.compute_similarity", "EASE_R_Recommender.EASE_R_Recommender.URM_train.tocsc", "numpy.diag", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity"], ["", "def", "fit", "(", "self", ",", "topK", "=", "None", ",", "l2_norm", "=", "1e3", ",", "normalize_matrix", "=", "False", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_print", "(", "\"Fitting model... \"", ")", "\n", "\n", "if", "normalize_matrix", ":", "\n", "# Normalize rows and then columns", "\n", "            ", "self", ".", "URM_train", "=", "normalize", "(", "self", ".", "URM_train", ",", "norm", "=", "'l2'", ",", "axis", "=", "1", ")", "\n", "self", ".", "URM_train", "=", "normalize", "(", "self", ".", "URM_train", ",", "norm", "=", "'l2'", ",", "axis", "=", "0", ")", "\n", "self", ".", "URM_train", "=", "sps", ".", "csr_matrix", "(", "self", ".", "URM_train", ")", "\n", "\n", "\n", "# Grahm matrix is X^t X, compute dot product", "\n", "", "similarity", "=", "Compute_Similarity", "(", "self", ".", "URM_train", ",", "shrink", "=", "0", ",", "topK", "=", "self", ".", "URM_train", ".", "shape", "[", "1", "]", ",", "normalize", "=", "False", ",", "similarity", "=", "\"cosine\"", ")", "\n", "grahm_matrix", "=", "similarity", ".", "compute_similarity", "(", ")", ".", "toarray", "(", ")", "\n", "\n", "diag_indices", "=", "np", ".", "diag_indices", "(", "grahm_matrix", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# The Compute_Similarity object ensures the diagonal of the similarity matrix is zero", "\n", "# in this case we need the diagonal as well, which is just the item popularity", "\n", "item_popularity", "=", "np", ".", "ediff1d", "(", "self", ".", "URM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", "\n", "grahm_matrix", "[", "diag_indices", "]", "=", "item_popularity", "+", "l2_norm", "\n", "\n", "P", "=", "np", ".", "linalg", ".", "inv", "(", "grahm_matrix", ")", "\n", "\n", "B", "=", "P", "/", "(", "-", "np", ".", "diag", "(", "P", ")", ")", "\n", "\n", "B", "[", "diag_indices", "]", "=", "0.0", "\n", "\n", "\n", "new_time_value", ",", "new_time_unit", "=", "seconds_to_biggest_unit", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "self", ".", "_print", "(", "\"Fitting model... done in {:.2f} {}\"", ".", "format", "(", "new_time_value", ",", "new_time_unit", ")", ")", "\n", "\n", "if", "topK", "is", "None", ":", "\n", "            ", "self", ".", "W_sparse", "=", "B", "\n", "self", ".", "_W_sparse_format_checked", "=", "True", "\n", "self", ".", "_compute_item_score", "=", "self", ".", "_compute_score_W_dense", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "W_sparse", "=", "similarityMatrixTopK", "(", "B", ",", "k", "=", "topK", ",", "verbose", "=", "False", ")", "\n", "self", ".", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "self", ".", "W_sparse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.EASE_R.EASE_R_Recommender.EASE_R_Recommender._compute_score_W_dense": [[87, 107], ["EASE_R_Recommender.EASE_R_Recommender._check_format", "user_profile_array.dot", "user_profile_array.dot", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.BaseSimilarityMatrixRecommender.BaseSimilarityMatrixRecommender._check_format"], ["", "", "def", "_compute_score_W_dense", "(", "self", ",", "user_id_array", ",", "items_to_compute", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        URM_train and W_sparse must have the same format, CSR\n        :param user_id_array:\n        :param items_to_compute:\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "_check_format", "(", ")", "\n", "\n", "user_profile_array", "=", "self", ".", "URM_train", "[", "user_id_array", "]", "\n", "\n", "if", "items_to_compute", "is", "not", "None", ":", "\n", "            ", "item_scores", "=", "-", "np", ".", "ones", "(", "(", "len", "(", "user_id_array", ")", ",", "self", ".", "URM_train", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "inf", "\n", "item_scores_all", "=", "user_profile_array", ".", "dot", "(", "self", ".", "W_sparse", ")", "#.toarray()", "\n", "item_scores", "[", ":", ",", "items_to_compute", "]", "=", "item_scores_all", "[", ":", ",", "items_to_compute", "]", "\n", "", "else", ":", "\n", "            ", "item_scores", "=", "user_profile_array", ".", "dot", "(", "self", ".", "W_sparse", ")", "#.toarray()", "\n", "\n", "", "return", "item_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.EASE_R.EASE_R_Recommender.EASE_R_Recommender.load_model": [[112, 118], ["super().load_model", "scipy.issparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.EASE_R.EASE_R_Recommender.EASE_R_Recommender.load_model"], ["", "def", "load_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "        ", "super", "(", "EASE_R_Recommender", ",", "self", ")", ".", "load_model", "(", "folder_path", ",", "file_name", "=", "file_name", ")", "\n", "\n", "if", "not", "sps", ".", "issparse", "(", "self", ".", "W_sparse", ")", ":", "\n", "            ", "self", ".", "_W_sparse_format_checked", "=", "True", "\n", "self", ".", "_compute_item_score", "=", "self", ".", "_compute_score_W_dense", "", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.__init__": [[26, 51], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender.__init__", "recsys.Base.Recommender_utils.check_matrix", "recsys.Base.Recommender_utils.check_matrix", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "ICM", ",", "S_matrix_target", ")", ":", "\n", "\n", "        ", "super", "(", "CFW_D_Similarity_Linalg", ",", "self", ")", ".", "__init__", "(", "URM_train", ")", "\n", "\n", "\n", "if", "(", "URM_train", ".", "shape", "[", "1", "]", "!=", "ICM", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of items not consistent. URM contains {} but ICM contains {}\"", ".", "format", "(", "URM_train", ".", "shape", "[", "1", "]", ",", "\n", "ICM", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "if", "(", "S_matrix_target", ".", "shape", "[", "0", "]", "!=", "S_matrix_target", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Items imilarity matrix is not square: rows are {}, columns are {}\"", ".", "format", "(", "S_matrix_target", ".", "shape", "[", "0", "]", ",", "\n", "S_matrix_target", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "if", "(", "S_matrix_target", ".", "shape", "[", "0", "]", "!=", "ICM", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of items not consistent. S_matrix contains {} but ICM contains {}\"", ".", "format", "(", "S_matrix_target", ".", "shape", "[", "0", "]", ",", "\n", "ICM", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "S_matrix_target", "=", "check_matrix", "(", "S_matrix_target", ",", "'csr'", ")", "\n", "self", ".", "ICM", "=", "check_matrix", "(", "ICM", ",", "'csr'", ")", "\n", "\n", "self", ".", "n_items", "=", "self", ".", "URM_train", ".", "shape", "[", "1", "]", "\n", "self", ".", "n_users", "=", "self", ".", "URM_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_features", "=", "self", ".", "ICM", ".", "shape", "[", "1", "]", "\n", "\n", "self", ".", "sparse_weights", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog": [[54, 63], ["print", "sys.stdout.flush", "sys.stderr.flush", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.logFile.write", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.logFile.flush"], "methods", ["None"], ["", "def", "_writeLog", "(", "self", ",", "string", ")", ":", "\n", "\n", "        ", "print", "(", "string", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "if", "self", ".", "logFile", "is", "not", "None", ":", "\n", "            ", "self", ".", "logFile", ".", "write", "(", "string", "+", "\"\\n\"", ")", "\n", "self", ".", "logFile", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._generateTrainData_low_ram": [[67, 197], ["print", "time.time", "recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.similarity.compute_similarity", "recsys.Base.Recommender_utils.check_matrix", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog", "sum", "sum", "sum", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog", "numpy.array().ravel", "numpy.sqrt", "numpy.in1d", "numpy.in1d.sum", "range", "len", "print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.ICM.T.power().sum", "numpy.random.rand", "time.time", "numpy.zeros", "numpy.zeros", "numpy.zeros", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.ICM.T.power"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog", "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog", "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog", "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._writeLog"], ["", "", "def", "_generateTrainData_low_ram", "(", "self", ")", ":", "\n", "\n", "        ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Generating train data\"", ")", "\n", "\n", "start_time_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "# Here is important only the structure", "\n", "self", ".", "similarity", "=", "Compute_Similarity", "(", "self", ".", "ICM", ".", "T", ",", "shrink", "=", "0", ",", "topK", "=", "self", ".", "topK", ",", "normalize", "=", "False", ")", "\n", "S_matrix_contentKNN", "=", "self", ".", "similarity", ".", "compute_similarity", "(", ")", "\n", "S_matrix_contentKNN", "=", "check_matrix", "(", "S_matrix_contentKNN", ",", "\"csr\"", ")", "\n", "\n", "\n", "self", ".", "_writeLog", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Collaborative S density: {:.2E}, nonzero cells {}\"", ".", "format", "(", "\n", "self", ".", "S_matrix_target", ".", "nnz", "/", "self", ".", "S_matrix_target", ".", "shape", "[", "0", "]", "**", "2", ",", "self", ".", "S_matrix_target", ".", "nnz", ")", ")", "\n", "\n", "self", ".", "_writeLog", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Content S density: {:.2E}, nonzero cells {}\"", ".", "format", "(", "\n", "S_matrix_contentKNN", ".", "nnz", "/", "S_matrix_contentKNN", ".", "shape", "[", "0", "]", "**", "2", ",", "S_matrix_contentKNN", ".", "nnz", ")", ")", "\n", "\n", "\n", "if", "self", ".", "normalize_similarity", ":", "\n", "\n", "# Compute sum of squared", "\n", "            ", "sum_of_squared_features", "=", "np", ".", "array", "(", "self", ".", "ICM", ".", "T", ".", "power", "(", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "ravel", "(", ")", "\n", "sum_of_squared_features", "=", "np", ".", "sqrt", "(", "sum_of_squared_features", ")", "\n", "\n", "\n", "\n", "", "num_common_coordinates", "=", "0", "\n", "\n", "estimated_n_samples", "=", "int", "(", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", "*", "1.2", ")", "\n", "\n", "self", ".", "row_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "col_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "data_list", "=", "np", ".", "zeros", "(", "estimated_n_samples", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "num_samples", "=", "0", "\n", "\n", "\n", "for", "row_index", "in", "range", "(", "self", ".", "n_items", ")", ":", "\n", "\n", "            ", "start_pos_content", "=", "S_matrix_contentKNN", ".", "indptr", "[", "row_index", "]", "\n", "end_pos_content", "=", "S_matrix_contentKNN", ".", "indptr", "[", "row_index", "+", "1", "]", "\n", "\n", "content_coordinates", "=", "S_matrix_contentKNN", ".", "indices", "[", "start_pos_content", ":", "end_pos_content", "]", "\n", "\n", "start_pos_target", "=", "self", ".", "S_matrix_target", ".", "indptr", "[", "row_index", "]", "\n", "end_pos_target", "=", "self", ".", "S_matrix_target", ".", "indptr", "[", "row_index", "+", "1", "]", "\n", "\n", "target_coordinates", "=", "self", ".", "S_matrix_target", ".", "indices", "[", "start_pos_target", ":", "end_pos_target", "]", "\n", "\n", "# Chech whether the content coordinate is associated to a non zero target value", "\n", "# If true, the content coordinate has a collaborative non-zero value", "\n", "# if false, the content coordinate has a collaborative zero value", "\n", "is_common", "=", "np", ".", "in1d", "(", "content_coordinates", ",", "target_coordinates", ")", "\n", "\n", "num_common_in_current_row", "=", "is_common", ".", "sum", "(", ")", "\n", "num_common_coordinates", "+=", "num_common_in_current_row", "\n", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "is_common", ")", ")", ":", "\n", "\n", "                ", "if", "num_samples", "==", "estimated_n_samples", ":", "\n", "                    ", "dataBlock", "=", "1000000", "\n", "self", ".", "row_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "row_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "self", ".", "col_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "col_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "self", ".", "data_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data_list", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float64", ")", ")", ")", "\n", "\n", "", "if", "is_common", "[", "index", "]", ":", "\n", "# If cell exists in target matrix, add its value", "\n", "# Otherwise it will remain zero with a certain probability", "\n", "\n", "                    ", "col_index", "=", "content_coordinates", "[", "index", "]", "\n", "\n", "self", ".", "row_list", "[", "num_samples", "]", "=", "row_index", "\n", "self", ".", "col_list", "[", "num_samples", "]", "=", "col_index", "\n", "\n", "new_data_value", "=", "self", ".", "S_matrix_target", "[", "row_index", ",", "col_index", "]", "\n", "\n", "if", "self", ".", "normalize_similarity", ":", "\n", "                        ", "new_data_value", "*=", "sum_of_squared_features", "[", "row_index", "]", "*", "sum_of_squared_features", "[", "col_index", "]", "\n", "\n", "", "self", ".", "data_list", "[", "num_samples", "]", "=", "new_data_value", "\n", "\n", "num_samples", "+=", "1", "\n", "\n", "\n", "", "elif", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "add_zeros_quota", ":", "\n", "\n", "                    ", "col_index", "=", "content_coordinates", "[", "index", "]", "\n", "\n", "self", ".", "row_list", "[", "num_samples", "]", "=", "row_index", "\n", "self", ".", "col_list", "[", "num_samples", "]", "=", "col_index", "\n", "self", ".", "data_list", "[", "num_samples", "]", "=", "0.0", "\n", "\n", "num_samples", "+=", "1", "\n", "\n", "\n", "\n", "", "", "if", "time", ".", "time", "(", ")", "-", "start_time_batch", ">", "30", "or", "num_samples", "==", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", ":", "\n", "\n", "                ", "print", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Generating train data. Sample {} ( {:.2f} %) \"", ".", "format", "(", "\n", "num_samples", ",", "num_samples", "/", "S_matrix_contentKNN", ".", "nnz", "*", "(", "1", "+", "self", ".", "add_zeros_quota", ")", "*", "100", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_batch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "self", ".", "_writeLog", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Content S structure has {} out of {} ( {:.2f}%) nonzero collaborative cells\"", ".", "format", "(", "\n", "num_common_coordinates", ",", "S_matrix_contentKNN", ".", "nnz", ",", "num_common_coordinates", "/", "S_matrix_contentKNN", ".", "nnz", "*", "100", ")", ")", "\n", "\n", "\n", "\n", "# Discard extra cells at the left of the array", "\n", "self", ".", "row_list", "=", "self", ".", "row_list", "[", ":", "num_samples", "]", "\n", "self", ".", "col_list", "=", "self", ".", "col_list", "[", ":", "num_samples", "]", "\n", "self", ".", "data_list", "=", "self", ".", "data_list", "[", ":", "num_samples", "]", "\n", "\n", "\n", "data_nnz", "=", "sum", "(", "np", ".", "array", "(", "self", ".", "data_list", ")", "!=", "0", ")", "\n", "data_sum", "=", "sum", "(", "self", ".", "data_list", ")", "\n", "\n", "collaborative_nnz", "=", "self", ".", "S_matrix_target", ".", "nnz", "\n", "collaborative_sum", "=", "sum", "(", "self", ".", "S_matrix_target", ".", "data", ")", "\n", "\n", "self", ".", "_writeLog", "(", "self", ".", "RECOMMENDER_NAME", "+", "\": Nonzero collaborative cell sum is: {:.2E}, average is: {:.2E}, \"", "\n", "\"average over all collaborative data is {:.2E}\"", ".", "format", "(", "\n", "data_sum", ",", "data_sum", "/", "data_nnz", ",", "collaborative_sum", "/", "collaborative_nnz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.fit": [[201, 232], ["CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._generateTrainData_low_ram", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.ICM[].multiply", "scipy.sparse.linalg.lsqr", "linalg_result[].copy", "linalg_result[].copy", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._compute_W_sparse"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._generateTrainData_low_ram", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._compute_W_sparse"], ["", "def", "fit", "(", "self", ",", "show_max_performance", "=", "False", ",", "logFile", "=", "None", ",", "loss_tolerance", "=", "1e-6", ",", "\n", "iteration_limit", "=", "50000", ",", "damp_coeff", "=", "0.0", ",", "topK", "=", "300", ",", "add_zeros_quota", "=", "0.0", ",", "normalize_similarity", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "logFile", "=", "logFile", "\n", "self", ".", "normalize_similarity", "=", "normalize_similarity", "\n", "\n", "self", ".", "add_zeros_quota", "=", "add_zeros_quota", "\n", "self", ".", "topK", "=", "topK", "\n", "\n", "self", ".", "_generateTrainData_low_ram", "(", ")", "\n", "\n", "\n", "commonFeatures", "=", "self", ".", "ICM", "[", "self", ".", "row_list", "]", ".", "multiply", "(", "self", ".", "ICM", "[", "self", ".", "col_list", "]", ")", "\n", "\n", "linalg_result", "=", "linalg", ".", "lsqr", "(", "commonFeatures", ",", "self", ".", "data_list", ",", "show", "=", "False", ",", "atol", "=", "loss_tolerance", ",", "btol", "=", "loss_tolerance", ",", "\n", "iter_lim", "=", "iteration_limit", ",", "damp", "=", "damp_coeff", ")", "\n", "\n", "# res = linalg.lsmr(commonFeatures, self.data_list, show = False, atol=loss_tolerance, btol=loss_tolerance,", "\n", "#                   maxiter = iteration_limit, damp=damp_coeff)", "\n", "\n", "\n", "\n", "self", ".", "D_incremental", "=", "linalg_result", "[", "0", "]", ".", "copy", "(", ")", "\n", "self", ".", "D_best", "=", "linalg_result", "[", "0", "]", ".", "copy", "(", ")", "\n", "self", ".", "epochs_best", "=", "0", "\n", "\n", "self", ".", "loss", "=", "linalg_result", "[", "3", "]", "\n", "\n", "\n", "self", ".", "_compute_W_sparse", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg._compute_W_sparse": [[235, 248], ["recsys.Base.Similarity.Compute_Similarity.Compute_Similarity", "CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.similarity.compute_similarity"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Similarity.Compute_Similarity_Python.Compute_Similarity_Python.compute_similarity"], ["", "def", "_compute_W_sparse", "(", "self", ",", "use_incremental", "=", "False", ")", ":", "\n", "\n", "        ", "if", "use_incremental", ":", "\n", "            ", "feature_weights", "=", "self", ".", "D_incremental", "\n", "", "else", ":", "\n", "            ", "feature_weights", "=", "self", ".", "D_best", "\n", "\n", "\n", "", "self", ".", "similarity", "=", "Compute_Similarity", "(", "self", ".", "ICM", ".", "T", ",", "shrink", "=", "0", ",", "topK", "=", "self", ".", "topK", ",", "\n", "normalize", "=", "self", ".", "normalize_similarity", ",", "row_weights", "=", "feature_weights", ")", "\n", "\n", "self", ".", "W_sparse", "=", "self", ".", "similarity", ".", "compute_similarity", "(", ")", "\n", "self", ".", "sparse_weights", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.save_model": [[252, 275], ["print", "pickle.dump", "print", "open"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "import", "pickle", "\n", "\n", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "RECOMMENDER_NAME", "\n", "\n", "", "print", "(", "\"{}: Saving model in file '{}'\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "dictionary_to_save", "=", "{", "\n", "\"D_best\"", ":", "self", ".", "D_best", ",", "\n", "\"topK\"", ":", "self", ".", "topK", ",", "\n", "\"sparse_weights\"", ":", "self", ".", "sparse_weights", ",", "\n", "\"W_sparse\"", ":", "self", ".", "W_sparse", ",", "\n", "\"normalize_similarity\"", ":", "self", ".", "normalize_similarity", "\n", "}", "\n", "\n", "pickle", ".", "dump", "(", "dictionary_to_save", ",", "\n", "open", "(", "folder_path", "+", "file_name", ",", "\"wb\"", ")", ",", "\n", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "\n", "print", "(", "\"{}: Saving complete\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt.__init__": [[20, 28], ["recsys.ParameterTuning.SearchAbstractClass.SearchAbstractClass.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "recommender_class", ",", "evaluator_validation", "=", "None", ",", "evaluator_test", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "assert", "evaluator_validation", "is", "not", "None", ",", "\"{}: evaluator_validation must be provided\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ")", "\n", "\n", "super", "(", "SearchBayesianSkopt", ",", "self", ")", ".", "__init__", "(", "recommender_class", ",", "\n", "evaluator_validation", "=", "evaluator_validation", ",", "\n", "evaluator_test", "=", "evaluator_test", ",", "\n", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt._set_skopt_params": [[31, 66], ["None"], "methods", ["None"], ["", "def", "_set_skopt_params", "(", "self", ",", "n_calls", "=", "70", ",", "\n", "n_random_starts", "=", "20", ",", "\n", "n_points", "=", "10000", ",", "\n", "n_jobs", "=", "1", ",", "\n", "# noise = 'gaussian',", "\n", "noise", "=", "1e-5", ",", "\n", "acq_func", "=", "'gp_hedge'", ",", "\n", "acq_optimizer", "=", "'auto'", ",", "\n", "random_state", "=", "None", ",", "\n", "verbose", "=", "True", ",", "\n", "n_restarts_optimizer", "=", "10", ",", "\n", "xi", "=", "0.01", ",", "\n", "kappa", "=", "1.96", ",", "\n", "x0", "=", "None", ",", "\n", "y0", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        wrapper to change the params of the bayesian optimizator.\n        for further details:\n        https://scikit-optimize.github.io/#skopt.gp_minimize\n\n        \"\"\"", "\n", "self", ".", "n_point", "=", "n_points", "\n", "self", ".", "n_calls", "=", "n_calls", "\n", "self", ".", "n_random_starts", "=", "n_random_starts", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "acq_func", "=", "acq_func", "\n", "self", ".", "acq_optimizer", "=", "acq_optimizer", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "n_restarts_optimizer", "=", "n_restarts_optimizer", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "xi", "=", "xi", "\n", "self", ".", "kappa", "=", "kappa", "\n", "self", ".", "noise", "=", "noise", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "y0", "=", "y0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt._resume_from_saved": [[69, 156], ["SearchBayesianSkopt.SearchBayesianSkopt._print", "SearchBayesianSkopt.SearchBayesianSkopt.dataIO.load_data", "range", "hyperparameters_list_input.append", "len", "SearchBayesianSkopt.SearchBayesianSkopt._write_log", "SearchBayesianSkopt.SearchBayesianSkopt._write_log", "traceback.print_exc", "len", "len", "hyperparameters_config_input.append", "result_on_validation_list_input.append", "result_on_validation_list_input.append", "isinstance", "str"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log"], ["", "def", "_resume_from_saved", "(", "self", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "metadata_dict", "=", "self", ".", "dataIO", ".", "load_data", "(", "file_name", "=", "self", ".", "output_file_name_root", "+", "\"_metadata\"", ")", "\n", "\n", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", "as", "e", ":", "\n", "# If getting a interrupt, terminate without saving the exception", "\n", "            ", "raise", "e", "\n", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "self", ".", "_write_log", "(", "\"{}: Resuming '{}' Failed, no such file exists.\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_file_name_root", ")", ")", "\n", "self", ".", "resume_from_saved", "=", "False", "\n", "return", "None", ",", "None", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "self", ".", "_write_log", "(", "\"{}: Resuming '{}' Failed, generic exception: {}.\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_file_name_root", ",", "str", "(", "e", ")", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "self", ".", "resume_from_saved", "=", "False", "\n", "return", "None", ",", "None", "\n", "\n", "# Get hyperparameter list and corresponding result", "\n", "# Make sure that the hyperparameters only contain those given as input and not others like the number of epochs", "\n", "# selected by earlystopping", "\n", "", "hyperparameters_list_saved", "=", "self", ".", "metadata_dict", "[", "'hyperparameters_list'", "]", "\n", "result_on_validation_list_saved", "=", "self", ".", "metadata_dict", "[", "'result_on_validation_list'", "]", "\n", "\n", "hyperparameters_list_input", "=", "[", "]", "\n", "result_on_validation_list_input", "=", "[", "]", "\n", "\n", "# The hyperparameters are saved for all cases even if they throw an exception", "\n", "while", "self", ".", "model_counter", "<", "len", "(", "hyperparameters_list_saved", ")", "and", "hyperparameters_list_saved", "[", "self", ".", "model_counter", "]", "is", "not", "None", ":", "\n", "\n", "            ", "hyperparameters_config_saved", "=", "hyperparameters_list_saved", "[", "self", ".", "model_counter", "]", "\n", "\n", "hyperparameters_config_input", "=", "[", "]", "\n", "\n", "# Add only those having a search space, in the correct ordering", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "hyperparams_names", ")", ")", ":", "\n", "                ", "key", "=", "self", ".", "hyperparams_names", "[", "index", "]", "\n", "value_saved", "=", "hyperparameters_config_saved", "[", "key", "]", "\n", "\n", "# Check if single value categorical. It is aimed at intercepting", "\n", "# Hyperparameters that are chosen via early stopping and set them as the", "\n", "# maximum value as per hyperparameter search space. If not, the gp_minimize will return an error", "\n", "# as some values will be outside (lower) than the search space", "\n", "\n", "if", "isinstance", "(", "self", ".", "hyperparams_values", "[", "index", "]", ",", "Categorical", ")", "and", "self", ".", "hyperparams_values", "[", "index", "]", ".", "transformed_size", "==", "1", ":", "\n", "                    ", "value_input", "=", "self", ".", "hyperparams_values", "[", "index", "]", ".", "bounds", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "value_input", "=", "value_saved", "\n", "\n", "", "hyperparameters_config_input", ".", "append", "(", "value_input", ")", "\n", "\n", "\n", "", "hyperparameters_list_input", ".", "append", "(", "hyperparameters_config_input", ")", "\n", "\n", "# Check if the hyperparameters have a valid result or an exception", "\n", "validation_result", "=", "result_on_validation_list_saved", "[", "self", ".", "model_counter", "]", "\n", "\n", "if", "validation_result", "is", "None", ":", "\n", "# Exception detected", "\n", "                ", "result_on_validation_list_input", ".", "append", "(", "+", "self", ".", "INVALID_CONFIG_VALUE", ")", "\n", "\n", "assert", "self", ".", "metadata_dict", "[", "\"exception_list\"", "]", "[", "self", ".", "model_counter", "]", "is", "not", "None", ",", "\"{}: Resuming '{}' Failed due to inconsistent data. Invalid validation result found in position {} but no corresponding exception detected.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_file_name_root", ",", "self", ".", "model_counter", ")", "\n", "", "else", ":", "\n", "                ", "result_on_validation_list_input", ".", "append", "(", "-", "validation_result", "[", "self", ".", "metric_to_optimize", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "model_counter", "+=", "1", "\n", "\n", "\n", "", "self", ".", "_print", "(", "\"{}: Resuming '{}'... Loaded {} configurations.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_file_name_root", ",", "self", ".", "model_counter", ")", ")", "\n", "\n", "\n", "# If the data structure exists but is empty, return None", "\n", "if", "len", "(", "hyperparameters_list_input", ")", "==", "0", ":", "\n", "            ", "self", ".", "resume_from_saved", "=", "False", "\n", "return", "None", ",", "None", "\n", "\n", "# If loaded less configurations than desired ones", "\n", "", "if", "self", ".", "model_counter", "<", "self", ".", "n_calls", ":", "\n", "            ", "self", ".", "resume_from_saved", "=", "False", "\n", "\n", "\n", "", "return", "hyperparameters_list_input", ",", "result_on_validation_list_input", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt.search": [[164, 273], ["SearchBayesianSkopt.SearchBayesianSkopt._set_skopt_params", "SearchBayesianSkopt.SearchBayesianSkopt._set_search_attributes", "dict", "list", "list", "SearchBayesianSkopt.SearchBayesianSkopt.parameter_search_space.items", "skopt.gp_minimize", "any", "SearchBayesianSkopt.SearchBayesianSkopt._resume_from_saved", "max", "max", "SearchBayesianSkopt.SearchBayesianSkopt._write_log", "SearchBayesianSkopt.SearchBayesianSkopt._evaluate_on_test_with_data_last", "SearchBayesianSkopt.SearchBayesianSkopt.hyperparams_names.append", "SearchBayesianSkopt.SearchBayesianSkopt.hyperparams_values.append", "ValueError", "isinstance", "str", "str"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt._set_skopt_params", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._set_search_attributes", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchSingleCase.SearchSingleCase._resume_from_saved", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_test_with_data_last"], ["", "def", "search", "(", "self", ",", "recommender_input_args", ",", "\n", "parameter_search_space", ",", "\n", "metric_to_optimize", "=", "\"MAP\"", ",", "\n", "n_cases", "=", "20", ",", "\n", "n_random_starts", "=", "5", ",", "\n", "output_folder_path", "=", "None", ",", "\n", "output_file_name_root", "=", "None", ",", "\n", "save_model", "=", "\"best\"", ",", "\n", "save_metadata", "=", "True", ",", "\n", "resume_from_saved", "=", "False", ",", "\n", "recommender_input_args_last_test", "=", "None", ",", "\n", "evaluate_on_test", "=", "\"best\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        :param recommender_input_args:\n        :param parameter_search_space:\n        :param metric_to_optimize:\n        :param n_cases:\n        :param n_random_starts:\n        :param output_folder_path:\n        :param output_file_name_root:\n        :param save_model:          \"no\"    don't save anything\n                                    \"all\"   save every model\n                                    \"best\"  save the best model trained on train data alone and on last, if present\n                                    \"last\"  save only last, if present\n        :param save_metadata:\n        :param recommender_input_args_last_test:\n        :return:\n        \"\"\"", "\n", "\n", "\n", "self", ".", "_set_skopt_params", "(", ")", "### default parameters are set here", "\n", "\n", "self", ".", "_set_search_attributes", "(", "recommender_input_args", ",", "\n", "recommender_input_args_last_test", ",", "\n", "metric_to_optimize", ",", "\n", "output_folder_path", ",", "\n", "output_file_name_root", ",", "\n", "resume_from_saved", ",", "\n", "save_metadata", ",", "\n", "save_model", ",", "\n", "evaluate_on_test", ",", "\n", "n_cases", ")", "\n", "\n", "\n", "self", ".", "parameter_search_space", "=", "parameter_search_space", "\n", "self", ".", "n_random_starts", "=", "n_random_starts", "\n", "self", ".", "n_calls", "=", "n_cases", "\n", "self", ".", "n_jobs", "=", "1", "\n", "self", ".", "n_loaded_counter", "=", "0", "\n", "\n", "\n", "self", ".", "hyperparams", "=", "dict", "(", ")", "\n", "self", ".", "hyperparams_names", "=", "list", "(", ")", "\n", "self", ".", "hyperparams_values", "=", "list", "(", ")", "\n", "\n", "skopt_types", "=", "[", "Real", ",", "Integer", ",", "Categorical", "]", "\n", "\n", "for", "name", ",", "hyperparam", "in", "self", ".", "parameter_search_space", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "any", "(", "isinstance", "(", "hyperparam", ",", "sko_type", ")", "for", "sko_type", "in", "skopt_types", ")", ":", "\n", "                ", "self", ".", "hyperparams_names", ".", "append", "(", "name", ")", "\n", "self", ".", "hyperparams_values", ".", "append", "(", "hyperparam", ")", "\n", "self", ".", "hyperparams", "[", "name", "]", "=", "hyperparam", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"{}: Unexpected parameter type: {} - {}\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "str", "(", "name", ")", ",", "str", "(", "hyperparam", ")", ")", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "resume_from_saved", ":", "\n", "            ", "hyperparameters_list_input", ",", "result_on_validation_list_saved", "=", "self", ".", "_resume_from_saved", "(", ")", "\n", "self", ".", "x0", "=", "hyperparameters_list_input", "\n", "self", ".", "y0", "=", "result_on_validation_list_saved", "\n", "\n", "self", ".", "n_random_starts", "=", "max", "(", "0", ",", "self", ".", "n_random_starts", "-", "self", ".", "model_counter", ")", "\n", "self", ".", "n_calls", "=", "max", "(", "0", ",", "self", ".", "n_calls", "-", "self", ".", "model_counter", ")", "\n", "self", ".", "n_loaded_counter", "=", "self", ".", "model_counter", "\n", "\n", "\n", "\n", "", "self", ".", "result", "=", "gp_minimize", "(", "self", ".", "_objective_function_list_input", ",", "\n", "self", ".", "hyperparams_values", ",", "\n", "base_estimator", "=", "None", ",", "\n", "n_calls", "=", "self", ".", "n_calls", ",", "\n", "n_random_starts", "=", "self", ".", "n_random_starts", ",", "\n", "acq_func", "=", "self", ".", "acq_func", ",", "\n", "acq_optimizer", "=", "self", ".", "acq_optimizer", ",", "\n", "x0", "=", "self", ".", "x0", ",", "\n", "y0", "=", "self", ".", "y0", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "callback", "=", "None", ",", "\n", "n_points", "=", "self", ".", "n_point", ",", "\n", "n_restarts_optimizer", "=", "self", ".", "n_restarts_optimizer", ",", "\n", "xi", "=", "self", ".", "xi", ",", "\n", "kappa", "=", "self", ".", "kappa", ",", "\n", "noise", "=", "self", ".", "noise", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "\n", "\n", "if", "self", ".", "n_loaded_counter", "<", "self", ".", "model_counter", ":", "\n", "            ", "self", ".", "_write_log", "(", "\"{}: Search complete. Best config is {}: {}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "\n", "self", ".", "metadata_dict", "[", "\"hyperparameters_best_index\"", "]", ",", "\n", "self", ".", "metadata_dict", "[", "\"hyperparameters_best\"", "]", ")", ")", "\n", "\n", "\n", "", "if", "self", ".", "recommender_input_args_last_test", "is", "not", "None", ":", "\n", "            ", "self", ".", "_evaluate_on_test_with_data_last", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt._objective_function_list_input": [[280, 285], ["dict", "SearchBayesianSkopt.SearchBayesianSkopt._objective_function", "zip"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._objective_function"], ["", "", "def", "_objective_function_list_input", "(", "self", ",", "current_fit_parameters_list_of_values", ")", ":", "\n", "\n", "        ", "current_fit_parameters_dict", "=", "dict", "(", "zip", "(", "self", ".", "hyperparams_names", ",", "current_fit_parameters_list_of_values", ")", ")", "\n", "\n", "return", "self", ".", "_objective_function", "(", "current_fit_parameters_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchSingleCase.SearchSingleCase.__init__": [[16, 22], ["recsys.ParameterTuning.SearchAbstractClass.SearchAbstractClass.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "recommender_class", ",", "evaluator_validation", "=", "None", ",", "evaluator_test", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "SearchSingleCase", ",", "self", ")", ".", "__init__", "(", "recommender_class", ",", "\n", "evaluator_validation", "=", "evaluator_validation", ",", "\n", "evaluator_test", "=", "evaluator_test", ",", "\n", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchSingleCase.SearchSingleCase._resume_from_saved": [[25, 54], ["SearchSingleCase.SearchSingleCase._print", "SearchSingleCase.SearchSingleCase.dataIO.load_data", "len", "SearchSingleCase.SearchSingleCase._write_log", "SearchSingleCase.SearchSingleCase._write_log", "traceback.print_exc", "str"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log"], ["", "def", "_resume_from_saved", "(", "self", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "metadata_dict", "=", "self", ".", "dataIO", ".", "load_data", "(", "file_name", "=", "self", ".", "output_file_name_root", "+", "\"_metadata\"", ")", "\n", "\n", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", "as", "e", ":", "\n", "# If getting a interrupt, terminate without saving the exception", "\n", "            ", "raise", "e", "\n", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "self", ".", "_write_log", "(", "\"{}: Resuming '{}' Failed, no such file exists.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_file_name_root", ")", ")", "\n", "return", "False", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "self", ".", "_write_log", "(", "\"{}: Resuming '{}' Failed, generic exception: {}.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_file_name_root", ",", "str", "(", "e", ")", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "None", ",", "None", "\n", "\n", "", "assert", "self", ".", "metadata_dict", "[", "'algorithm_name_search'", "]", "==", "self", ".", "ALGORITHM_NAME", ",", "\"{}: Loaded data inconsistent with current search algorithm\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ")", "\n", "\n", "assert", "len", "(", "self", ".", "metadata_dict", "[", "'hyperparameters_list'", "]", ")", "==", "1", ",", "\"{}: Loaded data inconsistent with current search algorithm\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ")", "\n", "\n", "self", ".", "model_counter", "=", "1", "\n", "self", ".", "n_loaded_counter", "=", "self", ".", "model_counter", "\n", "\n", "self", ".", "_print", "(", "\"{}: Resuming '{}'... Loaded {} configurations.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_file_name_root", ",", "self", ".", "model_counter", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchSingleCase.SearchSingleCase._evaluate_on_validation": [[56, 66], ["super()._evaluate_on_validation", "SearchSingleCase.SearchSingleCase._fit_model"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_validation", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._fit_model"], ["", "def", "_evaluate_on_validation", "(", "self", ",", "current_fit_parameters", ")", ":", "\n", "\n", "        ", "if", "self", ".", "evaluator_validation", "is", "not", "None", ":", "\n", "\n", "            ", "return", "super", "(", "SearchSingleCase", ",", "self", ")", ".", "_evaluate_on_validation", "(", "current_fit_parameters", ")", "\n", "\n", "", "else", ":", "\n", "            ", "recommender_instance", ",", "train_time", "=", "self", ".", "_fit_model", "(", "current_fit_parameters", ")", "\n", "\n", "return", "{", "self", ".", "metric_to_optimize", ":", "0.0", "}", ",", "\"\"", ",", "recommender_instance", ",", "train_time", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchSingleCase.SearchSingleCase.search": [[69, 117], ["SearchSingleCase.SearchSingleCase._set_search_attributes", "fit_hyperparameters_values.copy", "SearchSingleCase.SearchSingleCase._objective_function", "SearchSingleCase.SearchSingleCase._write_log", "SearchSingleCase.SearchSingleCase._evaluate_on_test_with_data_last", "SearchSingleCase.SearchSingleCase._resume_from_saved", "SearchSingleCase.SearchSingleCase._objective_function"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._set_search_attributes", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._objective_function", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_test_with_data_last", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchSingleCase.SearchSingleCase._resume_from_saved", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._objective_function"], ["", "", "def", "search", "(", "self", ",", "recommender_input_args", ",", "\n", "fit_hyperparameters_values", "=", "None", ",", "\n", "metric_to_optimize", "=", "\"MAP\"", ",", "\n", "output_folder_path", "=", "None", ",", "\n", "output_file_name_root", "=", "None", ",", "\n", "save_metadata", "=", "True", ",", "\n", "recommender_input_args_last_test", "=", "None", ",", "\n", "resume_from_saved", "=", "False", ",", "\n", "save_model", "=", "\"best\"", ",", "\n", "evaluate_on_test", "=", "\"best\"", ",", "\n", ")", ":", "\n", "\n", "\n", "        ", "assert", "fit_hyperparameters_values", "is", "not", "None", ",", "\"{}: fit_hyperparameters_values must contain a dictionary\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ")", "\n", "\n", "n_cases", "=", "1", "\n", "\n", "self", ".", "_set_search_attributes", "(", "recommender_input_args", ",", "\n", "recommender_input_args_last_test", ",", "\n", "metric_to_optimize", ",", "\n", "output_folder_path", ",", "\n", "output_file_name_root", ",", "\n", "resume_from_saved", ",", "\n", "save_metadata", ",", "\n", "save_model", ",", "\n", "evaluate_on_test", ",", "\n", "n_cases", ")", "\n", "\n", "\n", "\n", "# In case of earlystopping the best_solution_hyperparameters will contain also the number of epochs", "\n", "self", ".", "best_solution_parameters", "=", "fit_hyperparameters_values", ".", "copy", "(", ")", "\n", "self", ".", "n_loaded_counter", "=", "0", "\n", "\n", "if", "self", ".", "resume_from_saved", ":", "\n", "            ", "if", "not", "self", ".", "_resume_from_saved", "(", ")", ":", "\n", "                ", "self", ".", "_objective_function", "(", "fit_hyperparameters_values", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_objective_function", "(", "fit_hyperparameters_values", ")", "\n", "\n", "", "if", "self", ".", "n_loaded_counter", "<", "self", ".", "model_counter", ":", "\n", "            ", "self", ".", "_write_log", "(", "\"{}: Search complete. Best config is {}: {}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "\n", "self", ".", "metadata_dict", "[", "\"hyperparameters_best_index\"", "]", ",", "\n", "self", ".", "metadata_dict", "[", "\"hyperparameters_best\"", "]", ")", ")", "\n", "\n", "\n", "", "if", "self", ".", "recommender_input_args_last_test", "is", "not", "None", ":", "\n", "            ", "self", ".", "_evaluate_on_test_with_data_last", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.__init__": [[17, 55], ["object.__init__", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "# Dictionary of parameters needed by the constructor", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "None", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "None", ",", "\n", "\n", "# List containing all positional arguments needed by the fit function", "\n", "FIT_POSITIONAL_ARGS", "=", "None", ",", "\n", "FIT_KEYWORD_ARGS", "=", "None", "\n", ")", ":", "\n", "\n", "\n", "          ", "super", "(", "SearchInputRecommenderArgs", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "CONSTRUCTOR_POSITIONAL_ARGS", "is", "None", ":", "\n", "              ", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "]", "\n", "\n", "", "if", "CONSTRUCTOR_KEYWORD_ARGS", "is", "None", ":", "\n", "              ", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", "\n", "\n", "", "if", "FIT_POSITIONAL_ARGS", "is", "None", ":", "\n", "              ", "FIT_POSITIONAL_ARGS", "=", "[", "]", "\n", "\n", "", "if", "FIT_KEYWORD_ARGS", "is", "None", ":", "\n", "              ", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", "\n", "\n", "", "assert", "isinstance", "(", "CONSTRUCTOR_POSITIONAL_ARGS", ",", "list", ")", ",", "\"CONSTRUCTOR_POSITIONAL_ARGS must be a list\"", "\n", "assert", "isinstance", "(", "CONSTRUCTOR_KEYWORD_ARGS", ",", "dict", ")", ",", "\"CONSTRUCTOR_KEYWORD_ARGS must be a dict\"", "\n", "\n", "assert", "isinstance", "(", "FIT_POSITIONAL_ARGS", ",", "list", ")", ",", "\"FIT_POSITIONAL_ARGS must be a list\"", "\n", "assert", "isinstance", "(", "FIT_KEYWORD_ARGS", ",", "dict", ")", ",", "\"FIT_KEYWORD_ARGS must be a dict\"", "\n", "\n", "\n", "self", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "CONSTRUCTOR_POSITIONAL_ARGS", "\n", "self", ".", "CONSTRUCTOR_KEYWORD_ARGS", "=", "CONSTRUCTOR_KEYWORD_ARGS", "\n", "\n", "self", ".", "FIT_POSITIONAL_ARGS", "=", "FIT_POSITIONAL_ARGS", "\n", "self", ".", "FIT_KEYWORD_ARGS", "=", "FIT_KEYWORD_ARGS", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy": [[60, 72], ["SearchAbstractClass.SearchInputRecommenderArgs", "SearchAbstractClass.SearchInputRecommenderArgs.CONSTRUCTOR_POSITIONAL_ARGS.copy", "SearchAbstractClass.SearchInputRecommenderArgs.CONSTRUCTOR_KEYWORD_ARGS.copy", "SearchAbstractClass.SearchInputRecommenderArgs.FIT_POSITIONAL_ARGS.copy", "SearchAbstractClass.SearchInputRecommenderArgs.FIT_KEYWORD_ARGS.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "clone_object", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "self", ".", "CONSTRUCTOR_POSITIONAL_ARGS", ".", "copy", "(", ")", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "self", ".", "CONSTRUCTOR_KEYWORD_ARGS", ".", "copy", "(", ")", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "self", ".", "FIT_POSITIONAL_ARGS", ".", "copy", "(", ")", ",", "\n", "FIT_KEYWORD_ARGS", "=", "self", ".", "FIT_KEYWORD_ARGS", ".", "copy", "(", ")", "\n", ")", "\n", "\n", "\n", "return", "clone_object", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass.__init__": [[114, 134], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "recommender_class", ",", "\n", "evaluator_validation", "=", "None", ",", "\n", "evaluator_test", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "SearchAbstractClass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "recommender_class", "=", "recommender_class", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "log_file", "=", "None", "\n", "\n", "self", ".", "results_test_best", "=", "{", "}", "\n", "self", ".", "parameter_dictionary_best", "=", "{", "}", "\n", "\n", "self", ".", "evaluator_validation", "=", "evaluator_validation", "\n", "\n", "if", "evaluator_test", "is", "None", ":", "\n", "            ", "self", ".", "evaluator_test", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "evaluator_test", "=", "evaluator_test", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass.search": [[136, 149], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "search", "(", "self", ",", "recommender_input_args", ",", "\n", "parameter_search_space", ",", "\n", "metric_to_optimize", "=", "\"MAP\"", ",", "\n", "n_cases", "=", "None", ",", "\n", "output_folder_path", "=", "None", ",", "\n", "output_file_name_root", "=", "None", ",", "\n", "parallelize", "=", "False", ",", "\n", "save_model", "=", "\"best\"", ",", "\n", "evaluate_on_test", "=", "\"best\"", ",", "\n", "save_metadata", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "(", "\"Function search not implemented for this class\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._set_search_attributes": [[151, 198], ["open", "SearchAbstractClass.SearchAbstractClass._init_metadata_dict", "ValueError", "ValueError", "os.path.exists", "os.makedirs", "SearchAbstractClass.SearchAbstractClass._write_log", "recsys.Base.DataIO.DataIO"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._init_metadata_dict", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log"], ["", "def", "_set_search_attributes", "(", "self", ",", "recommender_input_args", ",", "\n", "recommender_input_args_last_test", ",", "\n", "metric_to_optimize", ",", "\n", "output_folder_path", ",", "\n", "output_file_name_root", ",", "\n", "resume_from_saved", ",", "\n", "save_metadata", ",", "\n", "save_model", ",", "\n", "evaluate_on_test", ",", "\n", "n_cases", ")", ":", "\n", "\n", "\n", "        ", "if", "save_model", "not", "in", "self", ".", "_SAVE_MODEL_VALUES", ":", "\n", "           ", "raise", "ValueError", "(", "\"{}: parameter save_model must be in '{}', provided was '{}'.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "_SAVE_MODEL_VALUES", ",", "save_model", ")", ")", "\n", "\n", "", "if", "evaluate_on_test", "not", "in", "self", ".", "_EVALUATE_ON_TEST_VALUES", ":", "\n", "           ", "raise", "ValueError", "(", "\"{}: parameter evaluate_on_test must be in '{}', provided was '{}'.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "_EVALUATE_ON_TEST_VALUES", ",", "evaluate_on_test", ")", ")", "\n", "\n", "\n", "", "self", ".", "output_folder_path", "=", "output_folder_path", "\n", "self", ".", "output_file_name_root", "=", "output_file_name_root", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_folder_path", ")", "\n", "\n", "", "self", ".", "log_file", "=", "open", "(", "self", ".", "output_folder_path", "+", "self", ".", "output_file_name_root", "+", "\"_{}.txt\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ")", ",", "\"a\"", ")", "\n", "\n", "if", "save_model", "==", "\"last\"", "and", "recommender_input_args_last_test", "is", "None", ":", "\n", "            ", "self", ".", "_write_log", "(", "\"{}: parameter save_model is 'last' but no recommender_input_args_last_test provided, saving best model on train data alone.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ")", ")", "\n", "save_model", "=", "\"best\"", "\n", "\n", "\n", "\n", "", "self", ".", "recommender_input_args", "=", "recommender_input_args", "\n", "self", ".", "recommender_input_args_last_test", "=", "recommender_input_args_last_test", "\n", "self", ".", "metric_to_optimize", "=", "metric_to_optimize", "\n", "self", ".", "resume_from_saved", "=", "resume_from_saved", "\n", "self", ".", "save_metadata", "=", "save_metadata", "\n", "self", ".", "save_model", "=", "save_model", "\n", "self", ".", "evaluate_on_test", "=", "\"no\"", "if", "self", ".", "evaluator_test", "is", "None", "else", "evaluate_on_test", "\n", "\n", "self", ".", "model_counter", "=", "0", "\n", "self", ".", "_init_metadata_dict", "(", "n_cases", "=", "n_cases", ")", "\n", "\n", "if", "self", ".", "save_metadata", ":", "\n", "            ", "self", ".", "dataIO", "=", "DataIO", "(", "folder_path", "=", "self", ".", "output_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._init_metadata_dict": [[201, 231], ["None"], "methods", ["None"], ["", "", "def", "_init_metadata_dict", "(", "self", ",", "n_cases", ")", ":", "\n", "\n", "        ", "self", ".", "metadata_dict", "=", "{", "\"algorithm_name_search\"", ":", "self", ".", "ALGORITHM_NAME", ",", "\n", "\"algorithm_name_recommender\"", ":", "self", ".", "recommender_class", ".", "RECOMMENDER_NAME", ",", "\n", "\"exception_list\"", ":", "[", "None", "]", "*", "n_cases", ",", "\n", "\n", "\"hyperparameters_list\"", ":", "[", "None", "]", "*", "n_cases", ",", "\n", "\"hyperparameters_best\"", ":", "None", ",", "\n", "\"hyperparameters_best_index\"", ":", "None", ",", "\n", "\n", "\"result_on_validation_list\"", ":", "[", "None", "]", "*", "n_cases", ",", "\n", "\"result_on_validation_best\"", ":", "None", ",", "\n", "\"result_on_test_list\"", ":", "[", "None", "]", "*", "n_cases", ",", "\n", "\"result_on_test_best\"", ":", "None", ",", "\n", "\n", "\"time_on_train_list\"", ":", "[", "None", "]", "*", "n_cases", ",", "\n", "\"time_on_train_total\"", ":", "0.0", ",", "\n", "\"time_on_train_avg\"", ":", "0.0", ",", "\n", "\n", "\"time_on_validation_list\"", ":", "[", "None", "]", "*", "n_cases", ",", "\n", "\"time_on_validation_total\"", ":", "0.0", ",", "\n", "\"time_on_validation_avg\"", ":", "0.0", ",", "\n", "\n", "\"time_on_test_list\"", ":", "[", "None", "]", "*", "n_cases", ",", "\n", "\"time_on_test_total\"", ":", "0.0", ",", "\n", "\"time_on_test_avg\"", ":", "0.0", ",", "\n", "\n", "\"result_on_last\"", ":", "None", ",", "\n", "\"time_on_last_train\"", ":", "None", ",", "\n", "\"time_on_last_test\"", ":", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print": [[234, 238], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "string", ")", ":", "\n", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log": [[240, 247], ["SearchAbstractClass.SearchAbstractClass._print", "SearchAbstractClass.SearchAbstractClass.log_file.write", "SearchAbstractClass.SearchAbstractClass.log_file.flush"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "", "def", "_write_log", "(", "self", ",", "string", ")", ":", "\n", "\n", "        ", "self", ".", "_print", "(", "string", ")", "\n", "\n", "if", "self", ".", "log_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "log_file", ".", "write", "(", "string", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._fit_model": [[249, 268], ["time.time", "SearchAbstractClass.SearchAbstractClass.recommender_class", "SearchAbstractClass.SearchAbstractClass._print", "SearchAbstractClass.SearchAbstractClass.fit", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], ["", "", "def", "_fit_model", "(", "self", ",", "current_fit_parameters", ")", ":", "\n", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Construct a new recommender instance", "\n", "recommender_instance", "=", "self", ".", "recommender_class", "(", "*", "self", ".", "recommender_input_args", ".", "CONSTRUCTOR_POSITIONAL_ARGS", ",", "\n", "**", "self", ".", "recommender_input_args", ".", "CONSTRUCTOR_KEYWORD_ARGS", ")", "\n", "\n", "\n", "self", ".", "_print", "(", "\"{}: Testing config: {}\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "current_fit_parameters", ")", ")", "\n", "\n", "\n", "recommender_instance", ".", "fit", "(", "*", "self", ".", "recommender_input_args", ".", "FIT_POSITIONAL_ARGS", ",", "\n", "**", "self", ".", "recommender_input_args", ".", "FIT_KEYWORD_ARGS", ",", "\n", "**", "current_fit_parameters", ")", "\n", "\n", "train_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "return", "recommender_instance", ",", "train_time", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_validation": [[271, 286], ["SearchAbstractClass.SearchAbstractClass._fit_model", "time.time", "SearchAbstractClass.SearchAbstractClass.evaluator_validation.evaluateRecommender", "SearchAbstractClass.get_result_string_evaluate_on_validation", "time.time", "list", "result_dict.keys"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._fit_model", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper.evaluateRecommender", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.get_result_string_evaluate_on_validation"], ["", "def", "_evaluate_on_validation", "(", "self", ",", "current_fit_parameters", ")", ":", "\n", "\n", "        ", "recommender_instance", ",", "train_time", "=", "self", ".", "_fit_model", "(", "current_fit_parameters", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Evaluate recommender and get results for the first cutoff", "\n", "result_dict", ",", "_", "=", "self", ".", "evaluator_validation", ".", "evaluateRecommender", "(", "recommender_instance", ")", "\n", "result_dict", "=", "result_dict", "[", "list", "(", "result_dict", ".", "keys", "(", ")", ")", "[", "0", "]", "]", "\n", "\n", "evaluation_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "result_string", "=", "get_result_string_evaluate_on_validation", "(", "result_dict", ",", "n_decimals", "=", "7", ")", "\n", "\n", "return", "result_dict", ",", "result_string", ",", "recommender_instance", ",", "train_time", ",", "evaluation_time", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_test": [[289, 304], ["time.time", "SearchAbstractClass.SearchAbstractClass.evaluator_test.evaluateRecommender", "time.time", "SearchAbstractClass.SearchAbstractClass._write_log"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Cython.CFW_D_Similarity_Cython.EvaluatorCFW_D_wrapper.evaluateRecommender", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log"], ["", "def", "_evaluate_on_test", "(", "self", ",", "recommender_instance", ",", "current_fit_parameters_dict", ",", "print_log", "=", "True", ")", ":", "\n", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Evaluate recommender and get results for the first cutoff", "\n", "result_dict", ",", "result_string", "=", "self", ".", "evaluator_test", ".", "evaluateRecommender", "(", "recommender_instance", ")", "\n", "\n", "evaluation_test_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "if", "print_log", ":", "\n", "            ", "self", ".", "_write_log", "(", "\"{}: Best config evaluated with evaluator_test. Config: {} - results:\\n{}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "\n", "current_fit_parameters_dict", ",", "\n", "result_string", ")", ")", "\n", "\n", "", "return", "result_dict", ",", "result_string", ",", "evaluation_test_time", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_test_with_data_last": [[307, 358], ["time.time", "SearchAbstractClass.SearchAbstractClass.recommender_class", "SearchAbstractClass.SearchAbstractClass._print", "SearchAbstractClass.SearchAbstractClass.metadata_dict[].copy", "SearchAbstractClass.SearchAbstractClass.fit", "time.time", "SearchAbstractClass.SearchAbstractClass._evaluate_on_test", "SearchAbstractClass.SearchAbstractClass._write_log", "SearchAbstractClass.SearchAbstractClass.dataIO.save_data", "SearchAbstractClass.SearchAbstractClass._print", "SearchAbstractClass.SearchAbstractClass.save_model", "SearchAbstractClass.SearchAbstractClass._print", "SearchAbstractClass.SearchAbstractClass.metadata_dict.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_test", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.save_model", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_evaluate_on_test_with_data_last", "(", "self", ")", ":", "\n", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Construct a new recommender instance", "\n", "recommender_instance", "=", "self", ".", "recommender_class", "(", "*", "self", ".", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", ",", "\n", "**", "self", ".", "recommender_input_args_last_test", ".", "CONSTRUCTOR_KEYWORD_ARGS", ")", "\n", "\n", "# Check if last was already evaluated", "\n", "if", "self", ".", "resume_from_saved", ":", "\n", "            ", "result_on_last_saved_flag", "=", "self", ".", "metadata_dict", "[", "\"result_on_last\"", "]", "is", "not", "None", "and", "self", ".", "metadata_dict", "[", "\"time_on_last_train\"", "]", "is", "not", "None", "and", "self", ".", "metadata_dict", "[", "\"time_on_last_test\"", "]", "is", "not", "None", "\n", "\n", "if", "result_on_last_saved_flag", ":", "\n", "                ", "self", ".", "_print", "(", "\"{}: Resuming '{}'... Result on last already available.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_file_name_root", ")", ")", "\n", "return", "\n", "\n", "\n", "\n", "", "", "self", ".", "_print", "(", "\"{}: Evaluation with constructor data for final test. Using best config: {}\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "metadata_dict", "[", "\"hyperparameters_best\"", "]", ")", ")", "\n", "\n", "\n", "# Use the hyperparameters that have been saved", "\n", "assert", "self", ".", "metadata_dict", "[", "\"hyperparameters_best\"", "]", "is", "not", "None", ",", "\"{}: Best hyperparameters not available, the search might have failed.\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ")", "\n", "fit_keyword_args", "=", "self", ".", "metadata_dict", "[", "\"hyperparameters_best\"", "]", ".", "copy", "(", ")", "\n", "\n", "\n", "recommender_instance", ".", "fit", "(", "*", "self", ".", "recommender_input_args_last_test", ".", "FIT_POSITIONAL_ARGS", ",", "\n", "**", "fit_keyword_args", ")", "\n", "\n", "train_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "self", ".", "metadata_dict", "[", "\"time_on_last_train\"", "]", "=", "train_time", "\n", "\n", "if", "self", ".", "evaluate_on_test", "in", "[", "\"all\"", ",", "\"best\"", ",", "\"last\"", "]", ":", "\n", "            ", "result_dict_test", ",", "result_string", ",", "evaluation_test_time", "=", "self", ".", "_evaluate_on_test", "(", "recommender_instance", ",", "fit_keyword_args", ",", "print_log", "=", "False", ")", "\n", "\n", "self", ".", "_write_log", "(", "\"{}: Best config evaluated with evaluator_test with constructor data for final test. Config: {} - results:\\n{}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "\n", "self", ".", "metadata_dict", "[", "\"hyperparameters_best\"", "]", ",", "\n", "result_string", ")", ")", "\n", "self", ".", "metadata_dict", "[", "\"result_on_last\"", "]", "=", "result_dict_test", "\n", "self", ".", "metadata_dict", "[", "\"time_on_last_test\"", "]", "=", "evaluation_test_time", "\n", "\n", "\n", "", "if", "self", ".", "save_metadata", ":", "\n", "            ", "self", ".", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "metadata_dict", ".", "copy", "(", ")", ",", "\n", "file_name", "=", "self", ".", "output_file_name_root", "+", "\"_metadata\"", ")", "\n", "\n", "", "if", "self", ".", "save_model", "in", "[", "\"all\"", ",", "\"best\"", ",", "\"last\"", "]", ":", "\n", "            ", "self", ".", "_print", "(", "\"{}: Saving model in {}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_folder_path", "+", "self", ".", "output_file_name_root", ")", ")", "\n", "recommender_instance", ".", "save_model", "(", "self", ".", "output_folder_path", ",", "file_name", "=", "self", ".", "output_file_name_root", "+", "\"_best_model_last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._objective_function": [[363, 490], ["current_fit_parameters_dict.copy.copy.copy", "SearchAbstractClass.SearchAbstractClass._evaluate_on_validation", "isinstance", "result_dict.copy", "SearchAbstractClass._compute_avg_time_non_none_values", "SearchAbstractClass._compute_avg_time_non_none_values", "SearchAbstractClass.SearchAbstractClass.dataIO.save_data", "recommender_instance.get_early_stopping_final_epochs_dict", "current_fit_parameters_dict.copy.copy.copy", "recommender_instance.get_early_stopping_final_epochs_dict.keys", "SearchAbstractClass.SearchAbstractClass._print", "recommender_instance.save_model", "SearchAbstractClass.SearchAbstractClass._write_log", "SearchAbstractClass.SearchAbstractClass._write_log", "SearchAbstractClass.SearchAbstractClass._write_log", "current_fit_parameters_dict.copy.copy.copy", "result_dict.copy", "result_dict_test.copy", "result_dict_test.copy", "SearchAbstractClass._compute_avg_time_non_none_values", "traceback.format_exc", "SearchAbstractClass.SearchAbstractClass._write_log", "traceback.print_exc", "SearchAbstractClass.SearchAbstractClass._print", "recommender_instance.save_model", "SearchAbstractClass.SearchAbstractClass._evaluate_on_test", "SearchAbstractClass.SearchAbstractClass._evaluate_on_test", "SearchAbstractClass.SearchAbstractClass.metadata_dict.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_validation", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass._compute_avg_time_non_none_values", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass._compute_avg_time_non_none_values", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Incremental_Training_Early_Stopping.Incremental_Training_Early_Stopping.get_early_stopping_final_epochs_dict", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.save_model", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass._compute_avg_time_non_none_values", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._write_log", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.FeatureWeighting.CFW_D_Similarity_Linalg.CFW_D_Similarity_Linalg.save_model", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_test", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._evaluate_on_test", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "_objective_function", "(", "self", ",", "current_fit_parameters_dict", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "\n", "            ", "self", ".", "metadata_dict", "[", "\"hyperparameters_list\"", "]", "[", "self", ".", "model_counter", "]", "=", "current_fit_parameters_dict", ".", "copy", "(", ")", "\n", "\n", "result_dict", ",", "result_string", ",", "recommender_instance", ",", "train_time", ",", "evaluation_time", "=", "self", ".", "_evaluate_on_validation", "(", "current_fit_parameters_dict", ")", "\n", "\n", "current_result", "=", "-", "result_dict", "[", "self", ".", "metric_to_optimize", "]", "\n", "\n", "# If the recommender uses Earlystopping, get the selected number of epochs", "\n", "if", "isinstance", "(", "recommender_instance", ",", "Incremental_Training_Early_Stopping", ")", ":", "\n", "\n", "                ", "n_epochs_early_stopping_dict", "=", "recommender_instance", ".", "get_early_stopping_final_epochs_dict", "(", ")", "\n", "current_fit_parameters_dict", "=", "current_fit_parameters_dict", ".", "copy", "(", ")", "\n", "\n", "for", "epoch_label", "in", "n_epochs_early_stopping_dict", ".", "keys", "(", ")", ":", "\n", "\n", "                    ", "epoch_value", "=", "n_epochs_early_stopping_dict", "[", "epoch_label", "]", "\n", "current_fit_parameters_dict", "[", "epoch_label", "]", "=", "epoch_value", "\n", "\n", "\n", "\n", "# Always save best model separately", "\n", "", "", "if", "self", ".", "save_model", "in", "[", "\"all\"", "]", ":", "\n", "                ", "self", ".", "_print", "(", "\"{}: Saving model in {}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_folder_path", "+", "self", ".", "output_file_name_root", ")", ")", "\n", "recommender_instance", ".", "save_model", "(", "self", ".", "output_folder_path", ",", "file_name", "=", "self", ".", "output_file_name_root", "+", "\"_model_{}\"", ".", "format", "(", "self", ".", "model_counter", ")", ")", "\n", "\n", "\n", "", "if", "self", ".", "metadata_dict", "[", "\"result_on_validation_best\"", "]", "is", "None", ":", "\n", "                ", "new_best_config_found", "=", "True", "\n", "", "else", ":", "\n", "                ", "best_solution_val", "=", "self", ".", "metadata_dict", "[", "\"result_on_validation_best\"", "]", "[", "self", ".", "metric_to_optimize", "]", "\n", "new_best_config_found", "=", "best_solution_val", "<", "result_dict", "[", "self", ".", "metric_to_optimize", "]", "\n", "\n", "\n", "", "if", "new_best_config_found", ":", "\n", "\n", "                ", "self", ".", "_write_log", "(", "\"{}: New best config found. Config {}: {} - results: {}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "\n", "self", ".", "model_counter", ",", "\n", "current_fit_parameters_dict", ",", "\n", "result_string", ")", ")", "\n", "\n", "if", "self", ".", "save_model", "in", "[", "\"all\"", ",", "\"best\"", "]", ":", "\n", "                    ", "self", ".", "_print", "(", "\"{}: Saving model in {}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "self", ".", "output_folder_path", "+", "self", ".", "output_file_name_root", ")", ")", "\n", "recommender_instance", ".", "save_model", "(", "self", ".", "output_folder_path", ",", "file_name", "=", "self", ".", "output_file_name_root", "+", "\"_best_model\"", ")", "\n", "\n", "\n", "", "if", "self", ".", "evaluate_on_test", "in", "[", "\"all\"", ",", "\"best\"", "]", ":", "\n", "                    ", "result_dict_test", ",", "_", ",", "evaluation_test_time", "=", "self", ".", "_evaluate_on_test", "(", "recommender_instance", ",", "current_fit_parameters_dict", ",", "print_log", "=", "True", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "\n", "                ", "if", "self", ".", "evaluate_on_test", "in", "[", "\"all\"", "]", ":", "\n", "                    ", "result_dict_test", ",", "_", ",", "evaluation_test_time", "=", "self", ".", "_evaluate_on_test", "(", "recommender_instance", ",", "current_fit_parameters_dict", ",", "print_log", "=", "True", ")", "\n", "\n", "", "self", ".", "_write_log", "(", "\"{}: Config {} is suboptimal. Config: {} - results: {}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "\n", "self", ".", "model_counter", ",", "\n", "current_fit_parameters_dict", ",", "\n", "result_string", ")", ")", "\n", "\n", "\n", "\n", "", "if", "current_result", ">=", "self", ".", "INVALID_CONFIG_VALUE", ":", "\n", "                ", "self", ".", "_write_log", "(", "\"{}: WARNING! Config {} returned a value equal or worse than the default value to be assigned to invalid configurations.\"", "\n", "\" If no better valid configuration is found, this parameter search may produce an invalid result.\\n\"", ")", "\n", "\n", "\n", "\n", "", "self", ".", "metadata_dict", "[", "\"result_on_validation_list\"", "]", "[", "self", ".", "model_counter", "]", "=", "result_dict", ".", "copy", "(", ")", "\n", "\n", "self", ".", "metadata_dict", "[", "\"time_on_train_list\"", "]", "[", "self", ".", "model_counter", "]", "=", "train_time", "\n", "self", ".", "metadata_dict", "[", "\"time_on_validation_list\"", "]", "[", "self", ".", "model_counter", "]", "=", "evaluation_time", "\n", "\n", "self", ".", "metadata_dict", "[", "\"time_on_train_total\"", "]", ",", "self", ".", "metadata_dict", "[", "\"time_on_train_avg\"", "]", "=", "_compute_avg_time_non_none_values", "(", "self", ".", "metadata_dict", "[", "\"time_on_train_list\"", "]", ")", "\n", "self", ".", "metadata_dict", "[", "\"time_on_validation_total\"", "]", ",", "self", ".", "metadata_dict", "[", "\"time_on_validation_avg\"", "]", "=", "_compute_avg_time_non_none_values", "(", "self", ".", "metadata_dict", "[", "\"time_on_validation_list\"", "]", ")", "\n", "\n", "\n", "if", "new_best_config_found", ":", "\n", "                ", "self", ".", "metadata_dict", "[", "\"hyperparameters_best\"", "]", "=", "current_fit_parameters_dict", ".", "copy", "(", ")", "\n", "self", ".", "metadata_dict", "[", "\"hyperparameters_best_index\"", "]", "=", "self", ".", "model_counter", "\n", "self", ".", "metadata_dict", "[", "\"result_on_validation_best\"", "]", "=", "result_dict", ".", "copy", "(", ")", "\n", "\n", "", "if", "(", "new_best_config_found", "and", "self", ".", "evaluate_on_test", "in", "[", "\"best\"", "]", ")", "or", "self", ".", "evaluate_on_test", "in", "[", "\"all\"", "]", ":", "\n", "                ", "self", ".", "metadata_dict", "[", "\"result_on_test_best\"", "]", "=", "result_dict_test", ".", "copy", "(", ")", "\n", "self", ".", "metadata_dict", "[", "\"result_on_test_list\"", "]", "[", "self", ".", "model_counter", "]", "=", "result_dict_test", ".", "copy", "(", ")", "\n", "self", ".", "metadata_dict", "[", "\"time_on_test_list\"", "]", "[", "self", ".", "model_counter", "]", "=", "evaluation_test_time", "\n", "\n", "self", ".", "metadata_dict", "[", "\"time_on_test_total\"", "]", ",", "self", ".", "metadata_dict", "[", "\"time_on_test_avg\"", "]", "=", "_compute_avg_time_non_none_values", "(", "self", ".", "metadata_dict", "[", "\"time_on_test_list\"", "]", ")", "\n", "\n", "\n", "", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", "as", "e", ":", "\n", "# If getting a interrupt, terminate without saving the exception", "\n", "            ", "raise", "e", "\n", "\n", "", "except", ":", "\n", "# Catch any error: Exception, Tensorflow errors etc...", "\n", "\n", "            ", "traceback_string", "=", "traceback", ".", "format_exc", "(", ")", "\n", "\n", "self", ".", "_write_log", "(", "\"{}: Config {} Exception. Config: {} - Exception: {}\\n\"", ".", "format", "(", "self", ".", "ALGORITHM_NAME", ",", "\n", "self", ".", "model_counter", ",", "\n", "current_fit_parameters_dict", ",", "\n", "traceback_string", ")", ")", "\n", "\n", "self", ".", "metadata_dict", "[", "\"exception_list\"", "]", "[", "self", ".", "model_counter", "]", "=", "traceback_string", "\n", "\n", "\n", "# Assign to this configuration the worst possible score", "\n", "# Being a minimization problem, set it to the max value of a float", "\n", "current_result", "=", "+", "self", ".", "INVALID_CONFIG_VALUE", "\n", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "\n", "\n", "\n", "", "if", "self", ".", "save_metadata", ":", "\n", "            ", "self", ".", "dataIO", ".", "save_data", "(", "data_dict_to_save", "=", "self", ".", "metadata_dict", ".", "copy", "(", ")", ",", "\n", "file_name", "=", "self", ".", "output_file_name_root", "+", "\"_metadata\"", ")", "\n", "\n", "", "self", ".", "model_counter", "+=", "1", "\n", "\n", "return", "current_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass._compute_avg_time_non_none_values": [[80, 87], ["sum", "sum"], "function", ["None"], ["", "", "def", "_compute_avg_time_non_none_values", "(", "data_list", ")", ":", "\n", "\n", "    ", "non_none_values", "=", "sum", "(", "[", "value", "is", "not", "None", "for", "value", "in", "data_list", "]", ")", "\n", "total_value", "=", "sum", "(", "[", "value", "if", "value", "is", "not", "None", "else", "0.0", "for", "value", "in", "data_list", "]", ")", "\n", "\n", "return", "total_value", ",", "total_value", "/", "non_none_values", "if", "non_none_values", "!=", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.get_result_string_evaluate_on_validation": [[90, 98], ["results_run_single_cutoff.keys"], "function", ["None"], ["", "def", "get_result_string_evaluate_on_validation", "(", "results_run_single_cutoff", ",", "n_decimals", "=", "7", ")", ":", "\n", "\n", "    ", "output_str", "=", "\"\"", "\n", "\n", "for", "metric", "in", "results_run_single_cutoff", ".", "keys", "(", ")", ":", "\n", "        ", "output_str", "+=", "\"{}: {:.{n_decimals}f}, \"", ".", "format", "(", "metric", ",", "results_run_single_cutoff", "[", "metric", "]", ",", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "", "return", "output_str", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_Hybrid": [[88, 197], ["URM_train.copy.copy", "ICM_object.copy.copy", "recsys.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt", "os.path.exists", "os.makedirs", "URM_train_last_test.copy.copy", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "functools.partial", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "skopt.space.Real", "functools.partial.", "multiprocessing.cpu_count"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "runParameterSearch_Hybrid", "(", "recommender_class", ",", "URM_train", ",", "ICM_object", ",", "ICM_name", ",", "URM_train_last_test", "=", "None", ",", "\n", "n_cases", "=", "30", ",", "n_random_starts", "=", "5", ",", "resume_from_saved", "=", "False", ",", "\n", "save_model", "=", "\"best\"", ",", "evaluate_on_test", "=", "\"best\"", ",", "\n", "evaluator_validation", "=", "None", ",", "evaluator_test", "=", "None", ",", "metric_to_optimize", "=", "\"PRECISION\"", ",", "\n", "output_folder_path", "=", "\"result_experiments/\"", ",", "parallelizeKNN", "=", "False", ",", "allow_weighting", "=", "True", ",", "\n", "similarity_type_list", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function performs the hyperparameter optimization for a hybrid collaborative and content-based recommender\n\n    :param recommender_class:   Class of the recommender object to optimize, it must be a BaseRecommender type\n    :param URM_train:           Sparse matrix containing the URM training data\n    :param ICM_object:          Sparse matrix containing the ICM training data\n    :param ICM_name:            String containing the name of the ICM, will be used for the name of the output files\n    :param URM_train_last_test: Sparse matrix containing the union of URM training and validation data to be used in the last evaluation\n    :param n_cases:             Number of hyperparameter sets to explore\n    :param n_random_starts:     Number of the initial random hyperparameter values to explore, usually set at 30% of n_cases\n    :param resume_from_saved:   Boolean value, if True the optimization is resumed from the saved files, if False a new one is done\n    :param save_model:          [\"no\", \"best\", \"last\"] which of the models to save, see ParameterTuning/SearchAbstractClass for details\n    :param evaluate_on_test:    [\"all\", \"best\", \"last\", \"no\"] when to evaluate the model on the test data, see ParameterTuning/SearchAbstractClass for details\n    :param evaluator_validation:    Evaluator object to be used for the validation of each hyperparameter set\n    :param evaluator_test:          Evaluator object to be used for the test results, the output will only be saved but not used\n    :param metric_to_optimize:  String with the name of the metric to be optimized as contained in the output of the evaluator objects\n    :param output_folder_path:  Folder in which to save the output files\n    :param parallelizeKNN:      Boolean value, if True the various heuristics of the KNNs will be computed in parallel, if False sequentially\n    :param allow_weighting:     Boolean value, if True it enables the use of TF-IDF and BM25 to weight features, users and items in KNNs\n    :param similarity_type_list: List of strings with the similarity heuristics to be used for the KNNs\n    \"\"\"", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_folder_path", ")", "\n", "\n", "", "URM_train", "=", "URM_train", ".", "copy", "(", ")", "\n", "ICM_object", "=", "ICM_object", ".", "copy", "(", ")", "\n", "\n", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "        ", "URM_train_last_test", "=", "URM_train_last_test", ".", "copy", "(", ")", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "output_file_name_root", "=", "recommender_class", ".", "RECOMMENDER_NAME", "+", "\"_{}\"", ".", "format", "(", "ICM_name", ")", "\n", "\n", "parameterSearch", "=", "SearchBayesianSkopt", "(", "recommender_class", ",", "evaluator_validation", "=", "evaluator_validation", ",", "evaluator_test", "=", "evaluator_test", ")", "\n", "\n", "\n", "if", "recommender_class", "in", "[", "ItemKNN_CFCBF_Hybrid_Recommender", ",", "UserKNN_CFCBF_Hybrid_Recommender", "]", ":", "\n", "\n", "        ", "if", "similarity_type_list", "is", "None", ":", "\n", "            ", "similarity_type_list", "=", "[", "'cosine'", ",", "'jaccard'", ",", "\"asymmetric\"", ",", "\"dice\"", ",", "\"tversky\"", "]", "\n", "\n", "\n", "", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "\n", "if", "recommender_class", "is", "ItemKNN_CFCBF_Hybrid_Recommender", ":", "\n", "            ", "hyperparameters_range_dictionary", "[", "\"ICM_weight\"", "]", "=", "Real", "(", "low", "=", "1e-2", ",", "high", "=", "1e2", ",", "prior", "=", "'log-uniform'", ")", "\n", "\n", "", "elif", "recommender_class", "is", "UserKNN_CFCBF_Hybrid_Recommender", ":", "\n", "            ", "hyperparameters_range_dictionary", "[", "\"UCM_weight\"", "]", "=", "Real", "(", "low", "=", "1e-2", ",", "high", "=", "1e2", ",", "prior", "=", "'log-uniform'", ")", "\n", "\n", "\n", "\n", "\n", "", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", ",", "ICM_object", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "            ", "recommender_input_args_last_test", "=", "recommender_input_args", ".", "copy", "(", ")", "\n", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "[", "0", "]", "=", "URM_train_last_test", "\n", "", "else", ":", "\n", "            ", "recommender_input_args_last_test", "=", "None", "\n", "\n", "\n", "", "run_KNNCFRecommender_on_similarity_type_partial", "=", "partial", "(", "run_KNNRecommender_on_similarity_type", ",", "\n", "parameter_search_space", "=", "hyperparameters_range_dictionary", ",", "\n", "recommender_input_args", "=", "recommender_input_args", ",", "\n", "parameterSearch", "=", "parameterSearch", ",", "\n", "resume_from_saved", "=", "resume_from_saved", ",", "\n", "save_model", "=", "save_model", ",", "\n", "evaluate_on_test", "=", "evaluate_on_test", ",", "\n", "n_cases", "=", "n_cases", ",", "\n", "n_random_starts", "=", "n_random_starts", ",", "\n", "output_folder_path", "=", "output_folder_path", ",", "\n", "output_file_name_root", "=", "output_file_name_root", ",", "\n", "metric_to_optimize", "=", "metric_to_optimize", ",", "\n", "allow_weighting", "=", "allow_weighting", ",", "\n", "recommender_input_args_last_test", "=", "recommender_input_args_last_test", ")", "\n", "\n", "\n", "\n", "if", "parallelizeKNN", ":", "\n", "            ", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "maxtasksperchild", "=", "1", ")", "\n", "resultList", "=", "pool", ".", "map", "(", "run_KNNCFRecommender_on_similarity_type_partial", ",", "similarity_type_list", ")", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "for", "similarity_type", "in", "similarity_type_list", ":", "\n", "                ", "run_KNNCFRecommender_on_similarity_type_partial", "(", "similarity_type", ")", "\n", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.run_KNNRecommender_on_similarity_type": [[209, 267], ["skopt.space.Integer", "skopt.space.Integer", "skopt.space.Categorical", "skopt.space.Categorical", "parameterSearch.search", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass.search"], ["", "", "def", "run_KNNRecommender_on_similarity_type", "(", "similarity_type", ",", "parameterSearch", ",", "\n", "parameter_search_space", ",", "\n", "recommender_input_args", ",", "\n", "n_cases", ",", "\n", "n_random_starts", ",", "\n", "resume_from_saved", ",", "\n", "save_model", ",", "\n", "evaluate_on_test", ",", "\n", "output_folder_path", ",", "\n", "output_file_name_root", ",", "\n", "metric_to_optimize", ",", "\n", "allow_weighting", "=", "False", ",", "\n", "recommender_input_args_last_test", "=", "None", ")", ":", "\n", "\n", "    ", "original_parameter_search_space", "=", "parameter_search_space", "\n", "\n", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Integer", "(", "5", ",", "1000", ")", "\n", "hyperparameters_range_dictionary", "[", "\"shrink\"", "]", "=", "Integer", "(", "0", ",", "1000", ")", "\n", "hyperparameters_range_dictionary", "[", "\"similarity\"", "]", "=", "Categorical", "(", "[", "similarity_type", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"normalize\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "\n", "is_set_similarity", "=", "similarity_type", "in", "[", "\"tversky\"", ",", "\"dice\"", ",", "\"jaccard\"", ",", "\"tanimoto\"", "]", "\n", "\n", "if", "similarity_type", "==", "\"asymmetric\"", ":", "\n", "        ", "hyperparameters_range_dictionary", "[", "\"asymmetric_alpha\"", "]", "=", "Real", "(", "low", "=", "0", ",", "high", "=", "2", ",", "prior", "=", "'uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"normalize\"", "]", "=", "Categorical", "(", "[", "True", "]", ")", "\n", "\n", "", "elif", "similarity_type", "==", "\"tversky\"", ":", "\n", "        ", "hyperparameters_range_dictionary", "[", "\"tversky_alpha\"", "]", "=", "Real", "(", "low", "=", "0", ",", "high", "=", "2", ",", "prior", "=", "'uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"tversky_beta\"", "]", "=", "Real", "(", "low", "=", "0", ",", "high", "=", "2", ",", "prior", "=", "'uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"normalize\"", "]", "=", "Categorical", "(", "[", "True", "]", ")", "\n", "\n", "", "elif", "similarity_type", "==", "\"euclidean\"", ":", "\n", "        ", "hyperparameters_range_dictionary", "[", "\"normalize\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"normalize_avg_row\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"similarity_from_distance_mode\"", "]", "=", "Categorical", "(", "[", "\"lin\"", ",", "\"log\"", ",", "\"exp\"", "]", ")", "\n", "\n", "\n", "", "if", "not", "is_set_similarity", ":", "\n", "\n", "        ", "if", "allow_weighting", ":", "\n", "            ", "hyperparameters_range_dictionary", "[", "\"feature_weighting\"", "]", "=", "Categorical", "(", "[", "\"none\"", ",", "\"BM25\"", ",", "\"TF-IDF\"", "]", ")", "\n", "\n", "\n", "", "", "local_parameter_search_space", "=", "{", "**", "hyperparameters_range_dictionary", ",", "**", "original_parameter_search_space", "}", "\n", "\n", "parameterSearch", ".", "search", "(", "recommender_input_args", ",", "\n", "parameter_search_space", "=", "local_parameter_search_space", ",", "\n", "n_cases", "=", "n_cases", ",", "\n", "n_random_starts", "=", "n_random_starts", ",", "\n", "resume_from_saved", "=", "resume_from_saved", ",", "\n", "save_model", "=", "save_model", ",", "\n", "evaluate_on_test", "=", "evaluate_on_test", ",", "\n", "output_folder_path", "=", "output_folder_path", ",", "\n", "output_file_name_root", "=", "output_file_name_root", "+", "\"_\"", "+", "similarity_type", ",", "\n", "metric_to_optimize", "=", "metric_to_optimize", ",", "\n", "recommender_input_args_last_test", "=", "recommender_input_args_last_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_Content": [[272, 375], ["URM_train.copy.copy", "ICM_object.copy.copy", "recsys.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "functools.partial", "os.path.exists", "os.makedirs", "URM_train_last_test.copy.copy", "ICM_last_test.copy.copy", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "functools.partial.", "int", "multiprocessing.cpu_count"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "runParameterSearch_Content", "(", "recommender_class", ",", "URM_train", ",", "ICM_object", ",", "ICM_name", ",", "URM_train_last_test", "=", "None", ",", "\n", "ICM_last_test", "=", "None", ",", "n_cases", "=", "30", ",", "n_random_starts", "=", "5", ",", "resume_from_saved", "=", "False", ",", "\n", "save_model", "=", "\"best\"", ",", "evaluate_on_test", "=", "\"best\"", ",", "\n", "evaluator_validation", "=", "None", ",", "evaluator_test", "=", "None", ",", "metric_to_optimize", "=", "\"PRECISION\"", ",", "\n", "output_folder_path", "=", "\"result_experiments/\"", ",", "parallelizeKNN", "=", "False", ",", "allow_weighting", "=", "True", ",", "\n", "similarity_type_list", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function performs the hyperparameter optimization for a content-based recommender\n\n    :param recommender_class:   Class of the recommender object to optimize, it must be a BaseRecommender type\n    :param URM_train:           Sparse matrix containing the URM training data\n    :param ICM_object:          Sparse matrix containing the ICM training data\n    :param ICM_name:            String containing the name of the ICM, will be used for the name of the output files\n    :param URM_train_last_test: Sparse matrix containing the union of URM training and validation data to be used in the last evaluation\n    :param n_cases:             Number of hyperparameter sets to explore\n    :param n_random_starts:     Number of the initial random hyperparameter values to explore, usually set at 30% of n_cases\n    :param resume_from_saved:   Boolean value, if True the optimization is resumed from the saved files, if False a new one is done\n    :param save_model:          [\"no\", \"best\", \"last\"] which of the models to save, see ParameterTuning/SearchAbstractClass for details\n    :param evaluate_on_test:    [\"all\", \"best\", \"last\", \"no\"] when to evaluate the model on the test data, see ParameterTuning/SearchAbstractClass for details\n    :param evaluator_validation:    Evaluator object to be used for the validation of each hyperparameter set\n    :param evaluator_test:          Evaluator object to be used for the test results, the output will only be saved but not used\n    :param metric_to_optimize:  String with the name of the metric to be optimized as contained in the output of the evaluator objects\n    :param output_folder_path:  Folder in which to save the output files\n    :param parallelizeKNN:      Boolean value, if True the various heuristics of the KNNs will be computed in parallel, if False sequentially\n    :param allow_weighting:     Boolean value, if True it enables the use of TF-IDF and BM25 to weight features, users and items in KNNs\n    :param similarity_type_list: List of strings with the similarity heuristics to be used for the KNNs\n    \"\"\"", "\n", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_folder_path", ")", "\n", "\n", "", "URM_train", "=", "URM_train", ".", "copy", "(", ")", "\n", "ICM_object", "=", "ICM_object", ".", "copy", "(", ")", "\n", "\n", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "        ", "URM_train_last_test", "=", "URM_train_last_test", ".", "copy", "(", ")", "\n", "\n", "", "if", "ICM_last_test", "is", "not", "None", ":", "\n", "        ", "ICM_last_test", "=", "ICM_last_test", ".", "copy", "(", ")", "\n", "\n", "\n", "", "assert", "recommender_class", "in", "[", "ItemKNNCBFRecommender", ",", "UserKNNCBFRecommender", "]", "\n", "\n", "##########################################################################################################", "\n", "\n", "output_file_name_root", "=", "recommender_class", ".", "RECOMMENDER_NAME", "+", "\"_{}\"", ".", "format", "(", "ICM_name", ")", "\n", "\n", "parameterSearch", "=", "SearchBayesianSkopt", "(", "recommender_class", ",", "evaluator_validation", "=", "evaluator_validation", ",", "evaluator_test", "=", "evaluator_test", ")", "\n", "\n", "\n", "if", "similarity_type_list", "is", "None", ":", "\n", "        ", "similarity_type_list", "=", "[", "'cosine'", ",", "'jaccard'", ",", "\"asymmetric\"", ",", "\"dice\"", ",", "\"tversky\"", "]", "\n", "\n", "\n", "", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", ",", "ICM_object", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "\n", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "        ", "recommender_input_args_last_test", "=", "recommender_input_args", ".", "copy", "(", ")", "\n", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "[", "0", "]", "=", "URM_train_last_test", "\n", "\n", "if", "ICM_last_test", "is", "not", "None", ":", "\n", "            ", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "[", "1", "]", "=", "ICM_last_test", "\n", "", "", "else", ":", "\n", "        ", "recommender_input_args_last_test", "=", "None", "\n", "\n", "\n", "", "run_KNNCBFRecommender_on_similarity_type_partial", "=", "partial", "(", "run_KNNRecommender_on_similarity_type", ",", "\n", "recommender_input_args", "=", "recommender_input_args", ",", "\n", "parameter_search_space", "=", "{", "}", ",", "\n", "parameterSearch", "=", "parameterSearch", ",", "\n", "n_cases", "=", "n_cases", ",", "\n", "n_random_starts", "=", "n_random_starts", ",", "\n", "resume_from_saved", "=", "resume_from_saved", ",", "\n", "save_model", "=", "save_model", ",", "\n", "evaluate_on_test", "=", "evaluate_on_test", ",", "\n", "output_folder_path", "=", "output_folder_path", ",", "\n", "output_file_name_root", "=", "output_file_name_root", ",", "\n", "metric_to_optimize", "=", "metric_to_optimize", ",", "\n", "allow_weighting", "=", "allow_weighting", ",", "\n", "recommender_input_args_last_test", "=", "recommender_input_args_last_test", ")", "\n", "\n", "\n", "\n", "if", "parallelizeKNN", ":", "\n", "        ", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "int", "(", "multiprocessing", ".", "cpu_count", "(", ")", ")", ",", "maxtasksperchild", "=", "1", ")", "\n", "pool", ".", "map", "(", "run_KNNCBFRecommender_on_similarity_type_partial", ",", "similarity_type_list", ")", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "for", "similarity_type", "in", "similarity_type_list", ":", "\n", "            ", "run_KNNCBFRecommender_on_similarity_type_partial", "(", "similarity_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_Collaborative": [[383, 791], ["URM_train.copy.copy", "os.path.exists", "os.makedirs", "URM_train_last_test.copy.copy", "recsys.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt", "recsys.ParameterTuning.SearchSingleCase.SearchSingleCase.search", "recsys.ParameterTuning.SearchSingleCase.SearchSingleCase", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "recsys.ParameterTuning.SearchSingleCase.SearchSingleCase.search", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "functools.partial", "skopt.space.Integer", "skopt.space.Real", "skopt.space.Categorical", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Integer", "skopt.space.Real", "skopt.space.Real", "skopt.space.Categorical", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Integer", "skopt.space.Real", "skopt.space.Real", "skopt.space.Real", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Integer", "skopt.space.Real", "skopt.space.Real", "skopt.space.Real", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Integer", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Real", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Integer", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Real", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Integer", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Integer", "skopt.space.Integer", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Integer", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Integer", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Real", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Integer", "skopt.space.Real", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "print", "traceback.print_exc", "open", "open.write", "open.close", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "functools.partial.", "str", "str", "multiprocessing.cpu_count"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass.search", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass.search", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "", "def", "runParameterSearch_Collaborative", "(", "recommender_class", ",", "URM_train", ",", "URM_train_last_test", "=", "None", ",", "\n", "n_cases", "=", "35", ",", "n_random_starts", "=", "5", ",", "resume_from_saved", "=", "False", ",", "\n", "save_model", "=", "\"best\"", ",", "evaluate_on_test", "=", "\"best\"", ",", "\n", "evaluator_validation", "=", "None", ",", "evaluator_test", "=", "None", ",", "evaluator_validation_earlystopping", "=", "None", ",", "\n", "metric_to_optimize", "=", "\"PRECISION\"", ",", "\n", "output_folder_path", "=", "\"result_experiments/\"", ",", "parallelizeKNN", "=", "True", ",", "\n", "allow_weighting", "=", "True", ",", "similarity_type_list", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function performs the hyperparameter optimization for a collaborative recommender\n\n    :param recommender_class:   Class of the recommender object to optimize, it must be a BaseRecommender type\n    :param URM_train:           Sparse matrix containing the URM training data\n    :param URM_train_last_test: Sparse matrix containing the union of URM training and validation data to be used in the last evaluation\n    :param n_cases:             Number of hyperparameter sets to explore\n    :param n_random_starts:     Number of the initial random hyperparameter values to explore, usually set at 30% of n_cases\n    :param resume_from_saved:   Boolean value, if True the optimization is resumed from the saved files, if False a new one is done\n    :param save_model:          [\"no\", \"best\", \"last\"] which of the models to save, see ParameterTuning/SearchAbstractClass for details\n    :param evaluate_on_test:    [\"all\", \"best\", \"last\", \"no\"] when to evaluate the model on the test data, see ParameterTuning/SearchAbstractClass for details\n    :param evaluator_validation:    Evaluator object to be used for the validation of each hyperparameter set\n    :param evaluator_validation_earlystopping:   Evaluator object to be used for the earlystopping of ML algorithms, can be the same of evaluator_validation\n    :param evaluator_test:          Evaluator object to be used for the test results, the output will only be saved but not used\n    :param metric_to_optimize:  String with the name of the metric to be optimized as contained in the output of the evaluator objects\n    :param output_folder_path:  Folder in which to save the output files\n    :param parallelizeKNN:      Boolean value, if True the various heuristics of the KNNs will be computed in parallel, if False sequentially\n    :param allow_weighting:     Boolean value, if True it enables the use of TF-IDF and BM25 to weight features, users and items in KNNs\n    :param similarity_type_list: List of strings with the similarity heuristics to be used for the KNNs\n    \"\"\"", "\n", "\n", "\n", "\n", "# If directory does not exist, create", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_folder_path", ")", "\n", "\n", "", "earlystopping_keywargs", "=", "{", "\"validation_every_n\"", ":", "5", ",", "\n", "\"stop_on_validation\"", ":", "True", ",", "\n", "\"evaluator_object\"", ":", "evaluator_validation_earlystopping", ",", "\n", "\"lower_validations_allowed\"", ":", "5", ",", "\n", "\"validation_metric\"", ":", "metric_to_optimize", ",", "\n", "}", "\n", "\n", "URM_train", "=", "URM_train", ".", "copy", "(", ")", "\n", "\n", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "        ", "URM_train_last_test", "=", "URM_train_last_test", ".", "copy", "(", ")", "\n", "\n", "", "try", ":", "\n", "\n", "        ", "output_file_name_root", "=", "recommender_class", ".", "RECOMMENDER_NAME", "\n", "\n", "parameterSearch", "=", "SearchBayesianSkopt", "(", "recommender_class", ",", "evaluator_validation", "=", "evaluator_validation", ",", "evaluator_test", "=", "evaluator_test", ")", "\n", "\n", "\n", "\n", "\n", "if", "recommender_class", "in", "[", "TopPop", ",", "GlobalEffects", ",", "Random", "]", ":", "\n", "            ", "\"\"\"\n            TopPop, GlobalEffects and Random have no parameters therefore only one evaluation is needed\n            \"\"\"", "\n", "\n", "\n", "parameterSearch", "=", "SearchSingleCase", "(", "recommender_class", ",", "evaluator_validation", "=", "evaluator_validation", ",", "evaluator_test", "=", "evaluator_test", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "                ", "recommender_input_args_last_test", "=", "recommender_input_args", ".", "copy", "(", ")", "\n", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "[", "0", "]", "=", "URM_train_last_test", "\n", "", "else", ":", "\n", "                ", "recommender_input_args_last_test", "=", "None", "\n", "\n", "\n", "", "parameterSearch", ".", "search", "(", "recommender_input_args", ",", "\n", "recommender_input_args_last_test", "=", "recommender_input_args_last_test", ",", "\n", "fit_hyperparameters_values", "=", "{", "}", ",", "\n", "output_folder_path", "=", "output_folder_path", ",", "\n", "output_file_name_root", "=", "output_file_name_root", ",", "\n", "resume_from_saved", "=", "resume_from_saved", ",", "\n", "save_model", "=", "save_model", ",", "\n", "evaluate_on_test", "=", "evaluate_on_test", ",", "\n", ")", "\n", "\n", "\n", "return", "\n", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "in", "[", "ItemKNNCFRecommender", ",", "UserKNNCFRecommender", "]", ":", "\n", "\n", "            ", "if", "similarity_type_list", "is", "None", ":", "\n", "                ", "similarity_type_list", "=", "[", "'cosine'", ",", "'jaccard'", ",", "\"asymmetric\"", ",", "\"dice\"", ",", "\"tversky\"", "]", "\n", "\n", "", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "                ", "recommender_input_args_last_test", "=", "recommender_input_args", ".", "copy", "(", ")", "\n", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "[", "0", "]", "=", "URM_train_last_test", "\n", "", "else", ":", "\n", "                ", "recommender_input_args_last_test", "=", "None", "\n", "\n", "\n", "", "run_KNNCFRecommender_on_similarity_type_partial", "=", "partial", "(", "run_KNNRecommender_on_similarity_type", ",", "\n", "recommender_input_args", "=", "recommender_input_args", ",", "\n", "parameter_search_space", "=", "{", "}", ",", "\n", "parameterSearch", "=", "parameterSearch", ",", "\n", "n_cases", "=", "n_cases", ",", "\n", "n_random_starts", "=", "n_random_starts", ",", "\n", "resume_from_saved", "=", "resume_from_saved", ",", "\n", "save_model", "=", "save_model", ",", "\n", "evaluate_on_test", "=", "evaluate_on_test", ",", "\n", "output_folder_path", "=", "output_folder_path", ",", "\n", "output_file_name_root", "=", "output_file_name_root", ",", "\n", "metric_to_optimize", "=", "metric_to_optimize", ",", "\n", "allow_weighting", "=", "allow_weighting", ",", "\n", "recommender_input_args_last_test", "=", "recommender_input_args_last_test", ")", "\n", "\n", "\n", "\n", "if", "parallelizeKNN", ":", "\n", "                ", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "maxtasksperchild", "=", "1", ")", "\n", "pool", ".", "map", "(", "run_KNNCFRecommender_on_similarity_type_partial", ",", "similarity_type_list", ")", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "for", "similarity_type", "in", "similarity_type_list", ":", "\n", "                    ", "run_KNNCFRecommender_on_similarity_type_partial", "(", "similarity_type", ")", "\n", "\n", "\n", "", "", "return", "\n", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "P3alphaRecommender", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Integer", "(", "5", ",", "1000", ")", "\n", "hyperparameters_range_dictionary", "[", "\"alpha\"", "]", "=", "Real", "(", "low", "=", "0", ",", "high", "=", "2", ",", "prior", "=", "'uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"normalize_similarity\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "RP3betaRecommender", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Integer", "(", "5", ",", "1000", ")", "\n", "hyperparameters_range_dictionary", "[", "\"alpha\"", "]", "=", "Real", "(", "low", "=", "0", ",", "high", "=", "2", ",", "prior", "=", "'uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"beta\"", "]", "=", "Real", "(", "low", "=", "0", ",", "high", "=", "2", ",", "prior", "=", "'uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"normalize_similarity\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "MatrixFactorization_FunkSVD_Cython", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"sgd_mode\"", "]", "=", "Categorical", "(", "[", "\"sgd\"", ",", "\"adagrad\"", ",", "\"adam\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epochs\"", "]", "=", "Categorical", "(", "[", "500", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"use_bias\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"batch_size\"", "]", "=", "Categorical", "(", "[", "1", ",", "2", ",", "4", ",", "8", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"num_factors\"", "]", "=", "Integer", "(", "1", ",", "200", ")", "\n", "hyperparameters_range_dictionary", "[", "\"item_reg\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"user_reg\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"learning_rate\"", "]", "=", "Real", "(", "low", "=", "1e-4", ",", "high", "=", "1e-1", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"negative_interactions_quota\"", "]", "=", "Real", "(", "low", "=", "0.0", ",", "high", "=", "0.5", ",", "prior", "=", "'uniform'", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "earlystopping_keywargs", "\n", ")", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "MatrixFactorization_AsySVD_Cython", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"sgd_mode\"", "]", "=", "Categorical", "(", "[", "\"sgd\"", ",", "\"adagrad\"", ",", "\"adam\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epochs\"", "]", "=", "Categorical", "(", "[", "500", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"use_bias\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"batch_size\"", "]", "=", "Categorical", "(", "[", "1", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"num_factors\"", "]", "=", "Integer", "(", "1", ",", "200", ")", "\n", "hyperparameters_range_dictionary", "[", "\"item_reg\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"user_reg\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"learning_rate\"", "]", "=", "Real", "(", "low", "=", "1e-4", ",", "high", "=", "1e-1", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"negative_interactions_quota\"", "]", "=", "Real", "(", "low", "=", "0.0", ",", "high", "=", "0.5", ",", "prior", "=", "'uniform'", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "earlystopping_keywargs", "\n", ")", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "MatrixFactorization_BPR_Cython", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"sgd_mode\"", "]", "=", "Categorical", "(", "[", "\"sgd\"", ",", "\"adagrad\"", ",", "\"adam\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epochs\"", "]", "=", "Categorical", "(", "[", "1500", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"num_factors\"", "]", "=", "Integer", "(", "1", ",", "200", ")", "\n", "hyperparameters_range_dictionary", "[", "\"batch_size\"", "]", "=", "Categorical", "(", "[", "1", ",", "2", ",", "4", ",", "8", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"positive_reg\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"negative_reg\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"learning_rate\"", "]", "=", "Real", "(", "low", "=", "1e-4", ",", "high", "=", "1e-1", ",", "prior", "=", "'log-uniform'", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "**", "earlystopping_keywargs", ",", "\n", "\"positive_threshold_BPR\"", ":", "None", "}", "\n", ")", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "IALSRecommender", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"num_factors\"", "]", "=", "Integer", "(", "1", ",", "200", ")", "\n", "hyperparameters_range_dictionary", "[", "\"confidence_scaling\"", "]", "=", "Categorical", "(", "[", "\"linear\"", ",", "\"log\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"alpha\"", "]", "=", "Real", "(", "low", "=", "1e-3", ",", "high", "=", "50.0", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epsilon\"", "]", "=", "Real", "(", "low", "=", "1e-3", ",", "high", "=", "10.0", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"reg\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "earlystopping_keywargs", "\n", ")", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "PureSVDRecommender", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"num_factors\"", "]", "=", "Integer", "(", "1", ",", "350", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "PureSVDItemRecommender", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"num_factors\"", "]", "=", "Integer", "(", "1", ",", "350", ")", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Integer", "(", "5", ",", "1000", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "NMFRecommender", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"num_factors\"", "]", "=", "Integer", "(", "1", ",", "350", ")", "\n", "hyperparameters_range_dictionary", "[", "\"solver\"", "]", "=", "Categorical", "(", "[", "\"coordinate_descent\"", ",", "\"multiplicative_update\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"init_type\"", "]", "=", "Categorical", "(", "[", "\"random\"", ",", "\"nndsvda\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"beta_loss\"", "]", "=", "Categorical", "(", "[", "\"frobenius\"", ",", "\"kullback-leibler\"", "]", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "#########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "SLIM_BPR_Cython", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Integer", "(", "5", ",", "1000", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epochs\"", "]", "=", "Categorical", "(", "[", "1500", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"symmetric\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"sgd_mode\"", "]", "=", "Categorical", "(", "[", "\"sgd\"", ",", "\"adagrad\"", ",", "\"adam\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"lambda_i\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"lambda_j\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"learning_rate\"", "]", "=", "Real", "(", "low", "=", "1e-4", ",", "high", "=", "1e-1", ",", "prior", "=", "'log-uniform'", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "**", "earlystopping_keywargs", ",", "\n", "\"positive_threshold_BPR\"", ":", "None", ",", "\n", "'train_with_sparse_weights'", ":", "None", "}", "\n", ")", "\n", "\n", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "SLIMElasticNetRecommender", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Integer", "(", "5", ",", "1000", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l1_ratio\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1.0", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"alpha\"", "]", "=", "Real", "(", "low", "=", "1e-3", ",", "high", "=", "1.0", ",", "prior", "=", "'uniform'", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "#########################################################################################################", "\n", "\n", "", "if", "recommender_class", "is", "EASE_R_Recommender", ":", "\n", "\n", "            ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Categorical", "(", "[", "None", "]", ")", "#Integer(5, 3000)", "\n", "hyperparameters_range_dictionary", "[", "\"normalize_matrix\"", "]", "=", "Categorical", "(", "[", "False", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l2_norm\"", "]", "=", "Real", "(", "low", "=", "1e0", ",", "high", "=", "1e7", ",", "prior", "=", "'log-uniform'", ")", "\n", "\n", "recommender_input_args", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "}", "\n", ")", "\n", "\n", "\n", "#########################################################################################################", "\n", "\n", "", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "            ", "recommender_input_args_last_test", "=", "recommender_input_args", ".", "copy", "(", ")", "\n", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "[", "0", "]", "=", "URM_train_last_test", "\n", "", "else", ":", "\n", "            ", "recommender_input_args_last_test", "=", "None", "\n", "\n", "## Final step, after the hyperparameter range has been defined for each type of algorithm", "\n", "", "parameterSearch", ".", "search", "(", "recommender_input_args", ",", "\n", "parameter_search_space", "=", "hyperparameters_range_dictionary", ",", "\n", "n_cases", "=", "n_cases", ",", "\n", "n_random_starts", "=", "n_random_starts", ",", "\n", "resume_from_saved", "=", "resume_from_saved", ",", "\n", "save_model", "=", "save_model", ",", "\n", "evaluate_on_test", "=", "evaluate_on_test", ",", "\n", "output_folder_path", "=", "output_folder_path", ",", "\n", "output_file_name_root", "=", "output_file_name_root", ",", "\n", "metric_to_optimize", "=", "metric_to_optimize", ",", "\n", "recommender_input_args_last_test", "=", "recommender_input_args_last_test", ")", "\n", "\n", "\n", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\n", "        ", "print", "(", "\"On recommender {} Exception {}\"", ".", "format", "(", "recommender_class", ",", "str", "(", "e", ")", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "\n", "error_file", "=", "open", "(", "output_folder_path", "+", "\"ErrorLog.txt\"", ",", "\"a\"", ")", "\n", "error_file", ".", "write", "(", "\"On recommender {} Exception {}\\n\"", ".", "format", "(", "recommender_class", ",", "str", "(", "e", ")", ")", ")", "\n", "error_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_FeatureWeighting": [[797, 958], ["URM_train.copy.copy", "W_train.copy.copy", "ICM_object.copy.copy", "recsys.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt", "recsys.ParameterTuning.SearchBayesianSkopt.SearchBayesianSkopt.search", "os.path.exists", "os.makedirs", "URM_train_last_test.copy.copy", "ICM_last_test.copy.copy", "skopt.space.Categorical", "skopt.space.Integer", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Real", "skopt.space.Categorical", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Categorical", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Categorical", "skopt.space.Integer", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "skopt.space.Integer", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Real", "skopt.space.Real", "skopt.space.Categorical", "skopt.space.Real", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs", "recsys.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass.search", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "", "def", "runParameterSearch_FeatureWeighting", "(", "recommender_class", ",", "URM_train", ",", "W_train", ",", "ICM_object", ",", "ICM_name", ",", "\n", "URM_train_last_test", "=", "None", ",", "ICM_last_test", "=", "None", ",", "n_cases", "=", "30", ",", "n_random_starts", "=", "5", ",", "\n", "evaluator_validation", "=", "None", ",", "evaluator_test", "=", "None", ",", "\n", "metric_to_optimize", "=", "\"PRECISION\"", ",", "evaluator_validation_earlystopping", "=", "None", ",", "\n", "resume_from_saved", "=", "False", ",", "save_model", "=", "\"best\"", ",", "\n", "output_folder_path", "=", "\"result_experiments/\"", ",", "similarity_type_list", "=", "None", ")", ":", "\n", "\n", "\n", "# If directory does not exist, create", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_folder_path", ")", "\n", "\n", "", "URM_train", "=", "URM_train", ".", "copy", "(", ")", "\n", "W_train", "=", "W_train", ".", "copy", "(", ")", "\n", "ICM_object", "=", "ICM_object", ".", "copy", "(", ")", "\n", "\n", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "        ", "URM_train_last_test", "=", "URM_train_last_test", ".", "copy", "(", ")", "\n", "\n", "", "if", "ICM_last_test", "is", "not", "None", ":", "\n", "        ", "ICM_last_test", "=", "ICM_last_test", ".", "copy", "(", ")", "\n", "\n", "", "earlystopping_keywargs", "=", "{", "\n", "\"validation_every_n\"", ":", "5", ",", "\n", "\"stop_on_validation\"", ":", "True", ",", "\n", "\"evaluator_object\"", ":", "evaluator_validation_earlystopping", ",", "\n", "\"lower_validations_allowed\"", ":", "5", ",", "\n", "\"validation_metric\"", ":", "metric_to_optimize", ",", "\n", "}", "\n", "\n", "##########################################################################################################", "\n", "\n", "output_file_name_root", "=", "recommender_class", ".", "RECOMMENDER_NAME", "+", "\"_{}\"", ".", "format", "(", "ICM_name", ")", "\n", "\n", "parameterSearch", "=", "SearchBayesianSkopt", "(", "recommender_class", ",", "evaluator_validation", "=", "evaluator_validation", ",", "evaluator_test", "=", "evaluator_test", ")", "\n", "\n", "\n", "if", "recommender_class", "is", "FBSM_Rating_Cython", ":", "\n", "\n", "        ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Categorical", "(", "[", "300", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"n_factors\"", "]", "=", "Integer", "(", "1", ",", "5", ")", "\n", "\n", "hyperparameters_range_dictionary", "[", "\"learning_rate\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"sgd_mode\"", "]", "=", "Categorical", "(", "[", "\"adam\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l2_reg_D\"", "]", "=", "Real", "(", "low", "=", "1e-6", ",", "high", "=", "1e1", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l2_reg_V\"", "]", "=", "Real", "(", "low", "=", "1e-6", ",", "high", "=", "1e1", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epochs\"", "]", "=", "Categorical", "(", "[", "300", "]", ")", "\n", "\n", "\n", "recommender_parameters", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", ",", "ICM_object", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "earlystopping_keywargs", ",", "\n", ")", "\n", "\n", "\n", "\n", "\n", "", "if", "recommender_class", "is", "CFW_D_Similarity_Cython", ":", "\n", "\n", "        ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Categorical", "(", "[", "300", "]", ")", "\n", "\n", "hyperparameters_range_dictionary", "[", "\"learning_rate\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"sgd_mode\"", "]", "=", "Categorical", "(", "[", "\"adam\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l1_reg\"", "]", "=", "Real", "(", "low", "=", "1e-3", ",", "high", "=", "1e-2", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l2_reg\"", "]", "=", "Real", "(", "low", "=", "1e-3", ",", "high", "=", "1e-1", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epochs\"", "]", "=", "Categorical", "(", "[", "300", "]", ")", "\n", "\n", "hyperparameters_range_dictionary", "[", "\"initialization_mode_D\"", "]", "=", "Categorical", "(", "[", "\"one\"", ",", "\"random\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"add_zeros_quota\"", "]", "=", "Real", "(", "low", "=", "0.50", ",", "high", "=", "1.0", ",", "prior", "=", "'uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"positive_only_D\"", "]", "=", "Categorical", "(", "[", "True", ",", "False", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"normalize_similarity\"", "]", "=", "Categorical", "(", "[", "True", "]", ")", "\n", "\n", "hyperparameters_range_dictionary", "[", "\"use_dropout\"", "]", "=", "Categorical", "(", "[", "True", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"dropout_perc\"", "]", "=", "Real", "(", "low", "=", "0.30", ",", "high", "=", "0.8", ",", "prior", "=", "'uniform'", ")", "\n", "\n", "\n", "recommender_parameters", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", ",", "ICM_object", ",", "W_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "**", "earlystopping_keywargs", ",", "\n", "\"precompute_common_features\"", ":", "True", ",", "}", "\n", ")", "\n", "\n", "\n", "\n", "\n", "", "if", "recommender_class", "is", "CFW_DVV_Similarity_Cython", ":", "\n", "\n", "        ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Categorical", "(", "[", "300", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"n_factors\"", "]", "=", "Integer", "(", "1", ",", "2", ")", "\n", "\n", "hyperparameters_range_dictionary", "[", "\"learning_rate\"", "]", "=", "Real", "(", "low", "=", "1e-5", ",", "high", "=", "1e-3", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"sgd_mode\"", "]", "=", "Categorical", "(", "[", "\"adam\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l2_reg_D\"", "]", "=", "Real", "(", "low", "=", "1e-6", ",", "high", "=", "1e1", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l2_reg_V\"", "]", "=", "Real", "(", "low", "=", "1e-6", ",", "high", "=", "1e1", ",", "prior", "=", "'log-uniform'", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epochs\"", "]", "=", "Categorical", "(", "[", "300", "]", ")", "\n", "\n", "hyperparameters_range_dictionary", "[", "\"add_zeros_quota\"", "]", "=", "Real", "(", "low", "=", "0.50", ",", "high", "=", "1.0", ",", "prior", "=", "'uniform'", ")", "\n", "\n", "\n", "recommender_parameters", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", ",", "ICM_object", ",", "W_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "**", "earlystopping_keywargs", ",", "\n", "\"precompute_common_features\"", ":", "True", ",", "}", "\n", ")", "\n", "\n", "\n", "\n", "\n", "", "if", "recommender_class", "is", "HP3_Similarity_Cython", ":", "\n", "\n", "        ", "hyperparameters_range_dictionary", "=", "{", "}", "\n", "hyperparameters_range_dictionary", "[", "\"topK\"", "]", "=", "Integer", "(", "50", ",", "500", ")", "#, prior=\"log-uniform\")", "\n", "\n", "hyperparameters_range_dictionary", "[", "\"learning_rate\"", "]", "=", "Real", "(", "low", "=", "1e-10", ",", "high", "=", "1e-2", ",", "prior", "=", "\"log-uniform\"", ")", "\n", "hyperparameters_range_dictionary", "[", "\"sgd_mode\"", "]", "=", "Categorical", "(", "[", "\"sgd\"", "]", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l1_reg\"", "]", "=", "Real", "(", "low", "=", "1e-8", ",", "high", "=", "1e-2", ",", "prior", "=", "\"log-uniform\"", ")", "\n", "hyperparameters_range_dictionary", "[", "\"l2_reg\"", "]", "=", "Real", "(", "low", "=", "1e-8", ",", "high", "=", "1e-2", ",", "prior", "=", "\"log-uniform\"", ")", "\n", "hyperparameters_range_dictionary", "[", "\"epochs\"", "]", "=", "Categorical", "(", "[", "200", "]", ")", "\n", "\n", "hyperparameters_range_dictionary", "[", "\"add_zeros_quota\"", "]", "=", "Real", "(", "low", "=", "0.", ",", "high", "=", "1.", ",", "prior", "=", "\"uniform\"", ")", "\n", "\n", "\n", "recommender_parameters", "=", "SearchInputRecommenderArgs", "(", "\n", "CONSTRUCTOR_POSITIONAL_ARGS", "=", "[", "URM_train", ",", "ICM_object", ",", "W_train", "]", ",", "\n", "CONSTRUCTOR_KEYWORD_ARGS", "=", "{", "}", ",", "\n", "FIT_POSITIONAL_ARGS", "=", "[", "]", ",", "\n", "FIT_KEYWORD_ARGS", "=", "{", "**", "earlystopping_keywargs", ",", "\n", "\"precompute_common_features\"", ":", "True", ",", "}", "\n", ")", "\n", "\n", "##########################################################################################################", "\n", "\n", "", "if", "URM_train_last_test", "is", "not", "None", ":", "\n", "        ", "recommender_input_args_last_test", "=", "recommender_parameters", ".", "copy", "(", ")", "\n", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "[", "0", "]", "=", "URM_train_last_test", "\n", "\n", "if", "ICM_last_test", "is", "not", "None", ":", "\n", "            ", "recommender_input_args_last_test", ".", "CONSTRUCTOR_POSITIONAL_ARGS", "[", "1", "]", "=", "ICM_last_test", "\n", "", "", "else", ":", "\n", "        ", "recommender_input_args_last_test", "=", "None", "\n", "\n", "## Final step, after the hyperparameter range has been defined for each type of algorithm", "\n", "", "parameterSearch", ".", "search", "(", "recommender_parameters", ",", "\n", "parameter_search_space", "=", "hyperparameters_range_dictionary", ",", "\n", "n_cases", "=", "n_cases", ",", "\n", "n_random_starts", "=", "n_random_starts", ",", "\n", "resume_from_saved", "=", "resume_from_saved", ",", "\n", "save_model", "=", "save_model", ",", "\n", "output_folder_path", "=", "output_folder_path", ",", "\n", "output_file_name_root", "=", "output_file_name_root", ",", "\n", "metric_to_optimize", "=", "metric_to_optimize", ",", "\n", "recommender_input_args_last_test", "=", "recommender_input_args_last_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.SLIM_ElasticNet.SLIMElasticNetRecommender.SLIMElasticNetRecommender.__init__": [[37, 39], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "SLIMElasticNetRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.SLIM_ElasticNet.SLIMElasticNetRecommender.SLIMElasticNetRecommender.fit": [[41, 150], ["warnings.simplefilter", "sklearn.linear_model.ElasticNet", "recsys.Base.Recommender_utils.check_matrix", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time.time", "range", "scipy.csr_matrix", "URM_train[].toarray", "recsys.Base.Recommender_utils.check_matrix.data[].copy", "SLIMElasticNetRecommender.SLIMElasticNetRecommender.model.fit", "min", "numpy.argsort", "range", "recsys.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "len", "time.time", "SLIMElasticNetRecommender.SLIMElasticNetRecommender._print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "time.time", "numpy.zeros", "numpy.zeros", "numpy.zeros", "float", "float"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "fit", "(", "self", ",", "l1_ratio", "=", "0.1", ",", "alpha", "=", "1.0", ",", "positive_only", "=", "True", ",", "topK", "=", "100", ")", ":", "\n", "\n", "        ", "assert", "l1_ratio", ">=", "0", "and", "l1_ratio", "<=", "1", ",", "\"{}: l1_ratio must be between 0 and 1, provided value was {}\"", ".", "format", "(", "self", ".", "RECOMMENDER_NAME", ",", "l1_ratio", ")", "\n", "\n", "self", ".", "l1_ratio", "=", "l1_ratio", "\n", "self", ".", "positive_only", "=", "positive_only", "\n", "self", ".", "topK", "=", "topK", "\n", "\n", "# Display ConvergenceWarning only once and not for every item it occurs", "\n", "warnings", ".", "simplefilter", "(", "\"once\"", ",", "category", "=", "ConvergenceWarning", ")", "\n", "\n", "# initialize the ElasticNet model", "\n", "self", ".", "model", "=", "ElasticNet", "(", "alpha", "=", "alpha", ",", "\n", "l1_ratio", "=", "self", ".", "l1_ratio", ",", "\n", "positive", "=", "self", ".", "positive_only", ",", "\n", "fit_intercept", "=", "False", ",", "\n", "copy_X", "=", "False", ",", "\n", "precompute", "=", "True", ",", "\n", "selection", "=", "'random'", ",", "\n", "max_iter", "=", "100", ",", "\n", "tol", "=", "1e-4", ")", "\n", "\n", "URM_train", "=", "check_matrix", "(", "self", ".", "URM_train", ",", "'csc'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "n_items", "=", "URM_train", ".", "shape", "[", "1", "]", "\n", "\n", "# Use array as it reduces memory requirements compared to lists", "\n", "dataBlock", "=", "10000000", "\n", "\n", "rows", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "cols", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "values", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "numCells", "=", "0", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "start_time_printBatch", "=", "start_time", "\n", "\n", "# fit each item's factors sequentially (not in parallel)", "\n", "for", "currentItem", "in", "range", "(", "n_items", ")", ":", "\n", "\n", "# get the target column", "\n", "            ", "y", "=", "URM_train", "[", ":", ",", "currentItem", "]", ".", "toarray", "(", ")", "\n", "\n", "# set the j-th column of X to zero", "\n", "start_pos", "=", "URM_train", ".", "indptr", "[", "currentItem", "]", "\n", "end_pos", "=", "URM_train", ".", "indptr", "[", "currentItem", "+", "1", "]", "\n", "\n", "current_item_data_backup", "=", "URM_train", ".", "data", "[", "start_pos", ":", "end_pos", "]", ".", "copy", "(", ")", "\n", "URM_train", ".", "data", "[", "start_pos", ":", "end_pos", "]", "=", "0.0", "\n", "\n", "# fit one ElasticNet model per column", "\n", "self", ".", "model", ".", "fit", "(", "URM_train", ",", "y", ")", "\n", "\n", "# self.model.coef_ contains the coefficient of the ElasticNet model", "\n", "# let's keep only the non-zero values", "\n", "\n", "# Select topK values", "\n", "# Sorting is done in three steps. Faster then plain np.argsort for higher number of items", "\n", "# - Partition the data to extract the set of relevant items", "\n", "# - Sort only the relevant items", "\n", "# - Get the original item index", "\n", "\n", "nonzero_model_coef_index", "=", "self", ".", "model", ".", "sparse_coef_", ".", "indices", "\n", "nonzero_model_coef_value", "=", "self", ".", "model", ".", "sparse_coef_", ".", "data", "\n", "\n", "local_topK", "=", "min", "(", "len", "(", "nonzero_model_coef_value", ")", "-", "1", ",", "self", ".", "topK", ")", "\n", "\n", "relevant_items_partition", "=", "(", "-", "nonzero_model_coef_value", ")", ".", "argpartition", "(", "local_topK", ")", "[", "0", ":", "local_topK", "]", "\n", "relevant_items_partition_sorting", "=", "np", ".", "argsort", "(", "-", "nonzero_model_coef_value", "[", "relevant_items_partition", "]", ")", "\n", "ranking", "=", "relevant_items_partition", "[", "relevant_items_partition_sorting", "]", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "ranking", ")", ")", ":", "\n", "\n", "                ", "if", "numCells", "==", "len", "(", "rows", ")", ":", "\n", "                    ", "rows", "=", "np", ".", "concatenate", "(", "(", "rows", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "cols", "=", "np", ".", "concatenate", "(", "(", "cols", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "\n", "\n", "", "rows", "[", "numCells", "]", "=", "nonzero_model_coef_index", "[", "ranking", "[", "index", "]", "]", "\n", "cols", "[", "numCells", "]", "=", "currentItem", "\n", "values", "[", "numCells", "]", "=", "nonzero_model_coef_value", "[", "ranking", "[", "index", "]", "]", "\n", "\n", "numCells", "+=", "1", "\n", "\n", "# finally, replace the original values of the j-th column", "\n", "", "URM_train", ".", "data", "[", "start_pos", ":", "end_pos", "]", "=", "current_item_data_backup", "\n", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "new_time_value", ",", "new_time_unit", "=", "seconds_to_biggest_unit", "(", "elapsed_time", ")", "\n", "\n", "\n", "if", "time", ".", "time", "(", ")", "-", "start_time_printBatch", ">", "300", "or", "currentItem", "==", "n_items", "-", "1", ":", "\n", "                ", "self", ".", "_print", "(", "\"Processed {} ( {:.2f}% ) in {:.2f} {}. Items per second: {:.2f}\"", ".", "format", "(", "\n", "currentItem", "+", "1", ",", "\n", "100.0", "*", "float", "(", "currentItem", "+", "1", ")", "/", "n_items", ",", "\n", "new_time_value", ",", "\n", "new_time_unit", ",", "\n", "float", "(", "currentItem", ")", "/", "elapsed_time", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_printBatch", "=", "time", ".", "time", "(", ")", "\n", "\n", "# generate the sparse weight matrix", "\n", "", "", "self", ".", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "values", "[", ":", "numCells", "]", ",", "(", "rows", "[", ":", "numCells", "]", ",", "cols", "[", ":", "numCells", "]", ")", ")", ",", "\n", "shape", "=", "(", "n_items", ",", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit": [[10, 47], ["None"], "function", ["None"], ["def", "seconds_to_biggest_unit", "(", "time_in_seconds", ",", "data_array", "=", "None", ")", ":", "\n", "\n", "    ", "conversion_factor", "=", "[", "\n", "(", "\"sec\"", ",", "60", ")", ",", "\n", "(", "\"min\"", ",", "60", ")", ",", "\n", "(", "\"hour\"", ",", "24", ")", ",", "\n", "(", "\"day\"", ",", "365", ")", ",", "\n", "]", "\n", "\n", "terminate", "=", "False", "\n", "unit_index", "=", "0", "\n", "\n", "new_time_value", "=", "time_in_seconds", "\n", "new_time_unit", "=", "\"sec\"", "\n", "\n", "while", "not", "terminate", ":", "\n", "\n", "        ", "next_time", "=", "new_time_value", "/", "conversion_factor", "[", "unit_index", "]", "[", "1", "]", "\n", "\n", "if", "next_time", ">=", "1.0", ":", "\n", "            ", "new_time_value", "=", "next_time", "\n", "\n", "if", "data_array", "is", "not", "None", ":", "\n", "                ", "data_array", "/=", "conversion_factor", "[", "unit_index", "]", "[", "1", "]", "\n", "\n", "", "unit_index", "+=", "1", "\n", "new_time_unit", "=", "conversion_factor", "[", "unit_index", "]", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "            ", "terminate", "=", "True", "\n", "\n", "\n", "", "", "if", "data_array", "is", "not", "None", ":", "\n", "        ", "return", "new_time_value", ",", "new_time_unit", ",", "data_array", "\n", "\n", "", "else", ":", "\n", "        ", "return", "new_time_value", ",", "new_time_unit", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.plot_popularity.plot_popularity_bias": [[20, 98], ["matplotlib.ioff", "matplotlib.switch_backend", "itertools.cycle", "matplotlib.xlabel", "matplotlib.ylabel", "numpy.arange", "range", "matplotlib.legend", "matplotlib.grid", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "scipy.csc_matrix", "numpy.ediff1d", "len", "scipy.csc_matrix", "numpy.ediff1d", "np.ediff1d.max", "matplotlib.plot", "numpy.argsort", "numpy.argsort", "sps.csc_matrix.copy", "sps.csc_matrix.copy", "itertools.cycle.__next__"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random.__next__"], ["def", "plot_popularity_bias", "(", "URM_object_list", ",", "URM_name_list", ",", "output_img_path", ",", "sort_on_all", "=", "False", ")", ":", "\n", "\n", "    ", "shape", "=", "URM_object_list", "[", "0", "]", ".", "shape", "\n", "\n", "for", "URM_object", "in", "URM_object_list", ":", "\n", "        ", "assert", "URM_object", ".", "shape", "==", "shape", "\n", "\n", "", "n_items", "=", "shape", "[", "1", "]", "\n", "\n", "\n", "\n", "# Turn interactive plotting off", "\n", "plt", ".", "ioff", "(", ")", "\n", "\n", "# Ensure it works even on SSH", "\n", "plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "\n", "marker_list", "=", "[", "'o'", ",", "'s'", ",", "'^'", ",", "'v'", ",", "'D'", "]", "\n", "marker_iterator_local", "=", "itertools", ".", "cycle", "(", "marker_list", ")", "\n", "\n", "\n", "plt", ".", "xlabel", "(", "'Item id'", ")", "\n", "plt", ".", "ylabel", "(", "\"Normalized number of interactions per item\"", ")", "\n", "#plt.title(\"Item popularity distribution for different URM splits\")", "\n", "\n", "x_tick", "=", "np", ".", "arange", "(", "0", ",", "n_items", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "item_sorted_indices", "=", "None", "\n", "\n", "if", "sort_on_all", ":", "\n", "\n", "        ", "URM_all", "=", "None", "\n", "\n", "for", "URM_object", "in", "URM_object_list", ":", "\n", "            ", "if", "URM_all", "is", "None", ":", "\n", "                ", "URM_all", "=", "URM_object", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "URM_all", "+=", "URM_object", ".", "copy", "(", ")", "\n", "\n", "", "", "URM_object", "=", "sps", ".", "csc_matrix", "(", "URM_all", ")", "\n", "\n", "item_popularity", "=", "np", ".", "ediff1d", "(", "URM_object", ".", "indptr", ")", "\n", "\n", "if", "item_sorted_indices", "is", "None", ":", "\n", "            ", "item_sorted_indices", "=", "np", ".", "argsort", "(", "-", "item_popularity", ")", "\n", "\n", "\n", "", "", "for", "URM_index", "in", "range", "(", "len", "(", "URM_name_list", ")", ")", ":", "\n", "\n", "        ", "URM_object", "=", "URM_object_list", "[", "URM_index", "]", "\n", "URM_name", "=", "URM_name_list", "[", "URM_index", "]", "\n", "\n", "URM_object", "=", "sps", ".", "csc_matrix", "(", "URM_object", ")", "\n", "\n", "item_popularity", "=", "np", ".", "ediff1d", "(", "URM_object", ".", "indptr", ")", "\n", "\n", "if", "item_sorted_indices", "is", "None", ":", "\n", "            ", "item_sorted_indices", "=", "np", ".", "argsort", "(", "-", "item_popularity", ")", "\n", "\n", "", "max_popularity", "=", "item_popularity", ".", "max", "(", ")", "\n", "\n", "plt", ".", "plot", "(", "x_tick", ",", "item_popularity", "[", "item_sorted_indices", "]", "/", "max_popularity", ",", "linewidth", "=", "1", ",", "label", "=", "URM_name", ",", "\n", "linestyle", "=", "\"-\"", ",", "marker", "=", "marker_iterator_local", ".", "__next__", "(", ")", ",", "markersize", "=", "3", ",", "zorder", "=", "-", "URM_index", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "grid", "(", "False", ",", "which", "=", "'major'", ")", "\n", "# fig = plt.figure()", "\n", "# fig.patch.set_facecolor('white')", "\n", "# plt.rcParams['figure.facecolor'] = 'white'", "\n", "\n", "plt", ".", "savefig", "(", "output_img_path", "+", "\".png\"", ",", "dpi", "=", "1200", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "plt", ".", "savefig", "(", "output_img_path", "+", "\".pdf\"", ",", "dpi", "=", "1200", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "# plt.savefig(output_img_path + \".pgf\", bbox_inches='tight')", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.plot_popularity.Gini_Index": [[106, 118], ["numpy.abs().mean", "numpy.mean", "numpy.abs", "numpy.subtract.outer"], "function", ["None"], ["def", "Gini_Index", "(", "x", ")", ":", "\n", "# (Warning: This is a concise implementation, but it is O(n**2)", "\n", "# in time and memory, where n = len(x).  *Don't* pass in huge", "\n", "# samples!)", "\n", "\n", "# Mean absolute difference", "\n", "    ", "mad", "=", "np", ".", "abs", "(", "np", ".", "subtract", ".", "outer", "(", "x", ",", "x", ")", ")", ".", "mean", "(", ")", "\n", "# Relative mean absolute difference", "\n", "rmad", "=", "mad", "/", "np", ".", "mean", "(", "x", ")", "\n", "# Gini coefficient", "\n", "g", "=", "0.5", "*", "rmad", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.plot_popularity.gini": [[119, 132], ["numpy.array", "np.sort.flatten", "numpy.sort", "numpy.arange", "numpy.amin", "numpy.amin", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "gini", "(", "array", ")", ":", "\n", "    ", "\"\"\"Calculate the Gini coefficient of a numpy array.\"\"\"", "\n", "# based on bottom eq: http://www.statsdirect.com/help/content/image/stat0206_wmf.gif", "\n", "# from: http://www.statsdirect.com/help/default.htm#nonparametric_methods/gini.htm", "\n", "array", "=", "np", ".", "array", "(", "array", ",", "dtype", "=", "np", ".", "float", ")", "\n", "array", "=", "array", ".", "flatten", "(", ")", "#all values are treated equally, arrays must be 1d", "\n", "if", "np", ".", "amin", "(", "array", ")", "<", "0", ":", "\n", "        ", "array", "-=", "np", ".", "amin", "(", "array", ")", "#values cannot be negative", "\n", "", "array", "+=", "0.0000001", "#values cannot be 0", "\n", "array", "=", "np", ".", "sort", "(", "array", ")", "#values must be sorted", "\n", "index", "=", "np", ".", "arange", "(", "1", ",", "array", ".", "shape", "[", "0", "]", "+", "1", ")", "#index per array element", "\n", "n", "=", "array", ".", "shape", "[", "0", "]", "#number of array elements", "\n", "return", "(", "(", "np", ".", "sum", "(", "(", "2", "*", "index", "-", "n", "-", "1", ")", "*", "array", ")", ")", "/", "(", "n", "*", "np", ".", "sum", "(", "array", ")", ")", ")", "#Gini coefficient", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.plot_popularity.save_popularity_statistics": [[134, 195], ["numpy.array", "open", "open.write", "enumerate", "scipy.csc_matrix", "numpy.ediff1d", "np.ediff1d.max", "np.ediff1d.min", "np.ediff1d.mean", "plot_popularity.gini", "scipy.stats.kendalltau", "metric_object_dict.items", "open.write", "np.ediff1d.copy", "recsys.Base.Evaluation.metrics.Shannon_Entropy", "recsys.Base.Evaluation.metrics.Diversity_Herfindahl", "np.ediff1d.copy", "metric_object.get_metric_value", "values_list.append"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.plot_popularity.gini", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Evaluation.metrics.Diversity_MeanInterList.get_metric_value"], ["", "def", "save_popularity_statistics", "(", "URM_object_list", ",", "URM_name_list", ",", "output_file_path", ")", ":", "\n", "\n", "    ", "shape", "=", "URM_object_list", "[", "0", "]", ".", "shape", "\n", "\n", "for", "URM_object", "in", "URM_object_list", ":", "\n", "        ", "assert", "URM_object", ".", "shape", "==", "shape", "\n", "\n", "", "n_items", "=", "shape", "[", "1", "]", "\n", "ignore_items", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "latex_file", "=", "open", "(", "output_file_path", ",", "\"w\"", ")", "\n", "latex_file", ".", "write", "(", "\"\\tMax pop \\t&Min pop \\t&Avg pop \\t&Gini Index \\t&Kendall Tau \\t&Shannon \\t&Herfindahl \\\\\\\\ \\n\"", ")", "\n", "\n", "base_item_popularity", "=", "None", "\n", "\n", "\n", "for", "URM_index", ",", "URM_name", "in", "enumerate", "(", "URM_name_list", ")", ":", "\n", "\n", "        ", "URM_object", "=", "URM_object_list", "[", "URM_index", "]", "\n", "URM_object", "=", "sps", ".", "csc_matrix", "(", "URM_object", ")", "\n", "\n", "URM_string", "=", "\"{}\\t&\"", ".", "format", "(", "URM_name", ")", "\n", "\n", "item_popularity", "=", "np", ".", "ediff1d", "(", "URM_object", ".", "indptr", ")", "\n", "\n", "max_pop", "=", "item_popularity", ".", "max", "(", ")", "\n", "min_pop", "=", "item_popularity", ".", "min", "(", ")", "\n", "avg_pop", "=", "item_popularity", ".", "mean", "(", ")", "\n", "\n", "gini_index", "=", "gini", "(", "item_popularity", ")", "\n", "\n", "if", "base_item_popularity", "is", "None", ":", "\n", "            ", "base_item_popularity", "=", "item_popularity", ".", "copy", "(", ")", "\n", "\n", "\n", "", "kendall_tau", ",", "p_value", "=", "kendalltau", "(", "base_item_popularity", ",", "item_popularity", ")", "\n", "\n", "\n", "values_list", "=", "[", "max_pop", ",", "min_pop", ",", "avg_pop", ",", "gini_index", ",", "kendall_tau", "]", "\n", "\n", "\n", "\n", "metric_object_dict", "=", "{", "\n", "# \"Gini Diversity\": Gini_Diversity(n_items, ignore_items),", "\n", "\"Shannon Entropy\"", ":", "Shannon_Entropy", "(", "n_items", ",", "ignore_items", ")", ",", "\n", "\"Herfindahl Index\"", ":", "Diversity_Herfindahl", "(", "n_items", ",", "ignore_items", ")", ",", "\n", "}", "\n", "\n", "\n", "\n", "for", "metric_name", ",", "metric_object", "in", "metric_object_dict", ".", "items", "(", ")", ":", "\n", "\n", "            ", "metric_object", ".", "recommended_counter", "=", "item_popularity", ".", "copy", "(", ")", "\n", "metric_value", "=", "metric_object", ".", "get_metric_value", "(", ")", "\n", "\n", "values_list", ".", "append", "(", "metric_value", ")", "\n", "\n", "\n", "", "URM_string", "+=", "\"\\t&\"", ".", "join", "(", "\"{:.2f}\"", ".", "format", "(", "el", ")", "for", "el", "in", "values_list", ")", "\n", "\n", "latex_file", ".", "write", "(", "URM_string", "+", "\"\\\\\\\\ \\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.assertions_on_data_for_experiments.assert_implicit_data": [[12, 25], ["print", "numpy.all", "numpy.ones_like"], "function", ["None"], ["def", "assert_implicit_data", "(", "URM_list", ")", ":", "\n", "    ", "\"\"\"\n    Checks whether the URM in the list only contain implicit data in the form 1 or 0\n    :param URM_list:\n    :return:\n    \"\"\"", "\n", "\n", "for", "URM", "in", "URM_list", ":", "\n", "\n", "        ", "assert", "np", ".", "all", "(", "URM", ".", "data", "==", "np", ".", "ones_like", "(", "URM", ".", "data", ")", ")", ",", "\"assert_implicit_data: URM is not implicit as it contains data other than 1.0\"", "\n", "\n", "\n", "", "print", "(", "\"Assertion assert_implicit_data: Passed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.assertions_on_data_for_experiments.assert_disjoint_matrices": [[28, 58], ["print", "URM.copy", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "assert_disjoint_matrices", "(", "URM_list", ")", ":", "\n", "    ", "\"\"\"\n    Checks whether the URM in the list have an empty intersection, therefore there is no data point contained in more than one\n    URM at a time\n    :param URM_list:\n    :return:\n    \"\"\"", "\n", "\n", "URM_implicit_global", "=", "None", "\n", "\n", "cumulative_nnz", "=", "0", "\n", "\n", "for", "URM", "in", "URM_list", ":", "\n", "\n", "        ", "cumulative_nnz", "+=", "URM", ".", "nnz", "\n", "URM_implicit", "=", "URM", ".", "copy", "(", ")", "\n", "URM_implicit", ".", "data", "=", "np", ".", "ones_like", "(", "URM_implicit", ".", "data", ")", "\n", "\n", "if", "URM_implicit_global", "is", "None", ":", "\n", "            ", "URM_implicit_global", "=", "URM_implicit", "\n", "\n", "", "else", ":", "\n", "            ", "URM_implicit_global", "+=", "URM_implicit", "\n", "\n", "\n", "", "", "assert", "cumulative_nnz", "==", "URM_implicit_global", ".", "nnz", ",", "\"assert_disjoint_matrices: URM in list are not disjoint, {} data points are in more than one URM\"", ".", "format", "(", "cumulative_nnz", "-", "URM_implicit_global", ".", "nnz", ")", "\n", "\n", "\n", "print", "(", "\"Assertion assert_disjoint_matrices: Passed\"", ")", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.__init__": [[569, 598], ["object.__init__", "os.path.isdir", "ResultFolderLoader._get_algorithm_metadata_to_print_list", "base_algorithm_list.copy", "ResultFolderLoader.ResultFolderLoader._DEFAULT_BASE_ALGORITHM_LIST.copy", "other_algorithm_list.copy", "ResultFolderLoader.ResultFolderLoader._algorithm_list.extend"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_algorithm_metadata_to_print_list", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["def", "__init__", "(", "self", ",", "folder_path", ",", "\n", "base_algorithm_list", "=", "None", ",", "\n", "other_algorithm_list", "=", "None", ",", "\n", "KNN_similarity_list", "=", "None", ",", "\n", "ICM_names_list", "=", "None", ",", "\n", "UCM_names_list", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "ResultFolderLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "folder_path", ")", ",", "\"ResultFolderLoader: folder_path does not exist '{}'\"", ".", "format", "(", "folder_path", ")", "\n", "\n", "self", ".", "_folder_path", "=", "folder_path", "\n", "self", ".", "_algorithm_list", "=", "base_algorithm_list", ".", "copy", "(", ")", "if", "base_algorithm_list", "is", "not", "None", "else", "self", ".", "_DEFAULT_BASE_ALGORITHM_LIST", ".", "copy", "(", ")", "\n", "\n", "self", ".", "_ICM_names_list", "=", "ICM_names_list", "\n", "self", ".", "_UCM_names_list", "=", "UCM_names_list", "\n", "\n", "self", ".", "_KNN_similarity_list", "=", "KNN_similarity_list", "if", "KNN_similarity_list", "is", "not", "None", "else", "[", "\"cosine\"", "]", "\n", "self", ".", "_other_algorithm_list", "=", "other_algorithm_list", ".", "copy", "(", ")", "if", "other_algorithm_list", "is", "not", "None", "else", "[", "]", "\n", "\n", "if", "other_algorithm_list", "is", "not", "None", ":", "\n", "            ", "self", ".", "_algorithm_list", ".", "extend", "(", "[", "None", ",", "*", "self", ".", "_other_algorithm_list", "]", ")", "\n", "\n", "\n", "", "self", ".", "_metadata_list", "=", "_get_algorithm_metadata_to_print_list", "(", "self", ".", "_folder_path", ",", "\n", "algorithm_list", "=", "self", ".", "_algorithm_list", ",", "\n", "KNN_similarity_list", "=", "self", ".", "_KNN_similarity_list", ",", "\n", "ICM_names_list", "=", "self", ".", "_ICM_names_list", ",", "\n", "UCM_names_list", "=", "self", ".", "_UCM_names_list", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader._get_column_name": [[601, 604], ["None"], "methods", ["None"], ["", "def", "_get_column_name", "(", "self", ",", "metric_name", ",", "cutoff", ")", ":", "\n", "        ", "metric_label", "=", "self", ".", "_METRIC_NAME_TO_LATEX_LABEL_DICT", "[", "metric_name", "]", "if", "metric_name", "in", "self", ".", "_METRIC_NAME_TO_LATEX_LABEL_DICT", "else", "metric_name", "\n", "return", "\"{}@{}\"", ".", "format", "(", "metric_label", ",", "cutoff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.get_metadata": [[605, 607], ["ResultFolderLoader.ResultFolderLoader._metadata_list.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_metadata", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_metadata_list", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.get_results_dataframe": [[610, 652], ["pandas.MultiIndex.from_product", "pandas.DataFrame", "ResultFolderLoader._remove_duplicate_group_separator", "enumerate", "str", "enumerate"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._remove_duplicate_group_separator"], ["", "def", "get_results_dataframe", "(", "self", ",", "\n", "metrics_list", ",", "\n", "cutoffs_list", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Loads the metadata in a dataframe\n        :param metrics_list:\n        :param cutoffs_list:\n        :return:\n        \"\"\"", "\n", "\n", "algorithm_label_index", "=", "[", "row_dict", "[", "\"algorithm_row_label\"", "]", "if", "row_dict", "is", "not", "None", "else", "\"algorithm_group_{}\"", ".", "format", "(", "row_index", ")", "for", "row_index", ",", "row_dict", "in", "enumerate", "(", "self", ".", "_metadata_list", ")", "]", "\n", "cutoffs_list", "=", "[", "str", "(", "cutoff", ")", "for", "cutoff", "in", "cutoffs_list", "]", "\n", "\n", "# The dataframe will have the algorithm label as index and the carthesian product of cutoff and metric as columns", "\n", "cutoff_metric_multiindex", "=", "pd", ".", "MultiIndex", ".", "from_product", "(", "[", "cutoffs_list", ",", "metrics_list", "]", ")", "#, names=['cutoff', 'metric'])", "\n", "result_dataframe", "=", "pd", ".", "DataFrame", "(", "None", ",", "index", "=", "algorithm_label_index", ",", "columns", "=", "cutoff_metric_multiindex", ")", "\n", "# result_dataframe.rename_axis(\"Algorithm\", inplace=True)", "\n", "\n", "# Remove duplicate group separator", "\n", "result_dataframe", "=", "_remove_duplicate_group_separator", "(", "result_dataframe", ")", "\n", "\n", "\n", "for", "row_index", ",", "row_dict", "in", "enumerate", "(", "self", ".", "_metadata_list", ")", ":", "\n", "\n", "            ", "if", "row_dict", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "algorithm_row_label", "=", "row_dict", "[", "\"algorithm_row_label\"", "]", "\n", "search_metadata", "=", "row_dict", "[", "\"search_metadata\"", "]", "\n", "\n", "for", "cutoff", "in", "cutoffs_list", ":", "\n", "\n", "                ", "for", "metric_name", "in", "metrics_list", ":", "\n", "                    ", "if", "search_metadata", "is", "not", "None", ":", "\n", "                        ", "result_on_last", "=", "search_metadata", "[", "\"result_on_last\"", "]", "\n", "\n", "if", "result_on_last", "is", "not", "None", "and", "cutoff", "in", "result_on_last", "and", "metric_name", "in", "result_on_last", "[", "cutoff", "]", ":", "\n", "                            ", "value", "=", "result_on_last", "[", "cutoff", "]", "[", "metric_name", "]", "\n", "result_dataframe", ".", "loc", "[", "algorithm_row_label", ",", "(", "cutoff", ",", "metric_name", ")", "]", "=", "value", "\n", "\n", "", "", "", "", "", "return", "result_dataframe", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.get_hyperparameters_dataframe": [[656, 703], ["pandas.DataFrame", "enumerate", "result_dataframe.append.append.set_index", "hyperparameters_best.items", "result_dataframe.append.append.append", "result_dataframe.append.append.append", "len"], "methods", ["None"], ["", "def", "get_hyperparameters_dataframe", "(", "self", ")", ":", "\n", "\n", "        ", "column_labels", "=", "[", "\"algorithm_row_label\"", ",", "\"hyperparameter_name\"", ",", "\"hyperparameter_value\"", "]", "\n", "\n", "result_dataframe", "=", "pd", ".", "DataFrame", "(", "columns", "=", "column_labels", ")", "\n", "\n", "\n", "for", "row_index", ",", "row_dict", "in", "enumerate", "(", "self", ".", "_metadata_list", ")", ":", "\n", "\n", "            ", "if", "row_dict", "is", "None", ":", "\n", "# Add None row to preserve the separation between different groups of algorithms", "\n", "# I don't like this but is simple enough and it works", "\n", "                ", "result_dataframe", "=", "result_dataframe", ".", "append", "(", "{", "\n", "\"algorithm_row_label\"", ":", "\"algorithm_group_{}\"", ".", "format", "(", "row_index", ")", ",", "\n", "\"hyperparameter_name\"", ":", "None", ",", "\n", "\"hyperparameter_value\"", ":", "None", ",", "\n", "}", ",", "ignore_index", "=", "True", ")", "\n", "\n", "continue", "\n", "\n", "\n", "", "algorithm_row_label", "=", "row_dict", "[", "\"algorithm_row_label\"", "]", "\n", "search_metadata", "=", "row_dict", "[", "\"search_metadata\"", "]", "\n", "\n", "# If search failed or was not done, add placeholder", "\n", "if", "search_metadata", "is", "None", "or", "search_metadata", "[", "\"hyperparameters_best\"", "]", "is", "None", ":", "\n", "                ", "hyperparameters_best", "=", "{", "None", ":", "None", "}", "\n", "\n", "", "else", ":", "\n", "                ", "hyperparameters_best", "=", "search_metadata", "[", "\"hyperparameters_best\"", "]", "\n", "\n", "# If it doesn't have hyperparameters don't add in dataframe", "\n", "if", "len", "(", "hyperparameters_best", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "\n", "", "", "for", "hyperparameter_name", ",", "hyperparameter_value", "in", "hyperparameters_best", ".", "items", "(", ")", ":", "\n", "\n", "                ", "result_dataframe", "=", "result_dataframe", ".", "append", "(", "{", "\n", "\"algorithm_row_label\"", ":", "algorithm_row_label", ",", "\n", "\"hyperparameter_name\"", ":", "hyperparameter_name", ",", "\n", "\"hyperparameter_value\"", ":", "hyperparameter_value", ",", "\n", "}", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "", "result_dataframe", ".", "set_index", "(", "[", "\"algorithm_row_label\"", ",", "\"hyperparameter_name\"", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "result_dataframe", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.generate_latex_results": [[708, 810], ["ResultFolderLoader.ResultFolderLoader.get_results_dataframe", "open", "pandas.concat.fillna", "len", "pandas.concat.to_latex", "re.sub", "re.sub", "re.sub", "open.write", "open.flush", "open.close", "pandas.concat.rename", "pandas.concat.rename", "dataframe_baselines.apply.apply.max", "dataframe_other_algs.apply.apply.max", "dataframe_baselines.apply.apply.apply", "dataframe_other_algs.apply.apply.apply", "pandas.concat", "re.sub", "len", "dataframe_row_series.index.tolist", "functools.partial", "functools.partial", "len", "len", "len", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.get_results_dataframe"], ["", "def", "generate_latex_results", "(", "self", ",", "output_file_path", ",", "\n", "metrics_list", ",", "\n", "cutoffs_list", ",", "\n", "n_decimals", "=", "4", ",", "\n", "table_title", "=", "None", ",", "\n", "highlight_best", "=", "True", ",", "\n", "collapse_multicolumn_if_needed", "=", "True", ")", ":", "\n", "\n", "        ", "result_dataframe", "=", "self", ".", "get_results_dataframe", "(", "metrics_list", "=", "metrics_list", ",", "cutoffs_list", "=", "cutoffs_list", ")", "\n", "output_file", "=", "open", "(", "output_file_path", ",", "\"w\"", ")", "\n", "\n", "# If there is only a single cutoff, the multilevel columns can be collapsed", "\n", "if", "collapse_multicolumn_if_needed", "and", "(", "len", "(", "metrics_list", ")", "==", "1", ")", ":", "\n", "            ", "result_dataframe", ".", "columns", "=", "[", "'@'", ".", "join", "(", "[", "self", ".", "_METRIC_NAME_TO_LATEX_LABEL_DICT", "[", "col", "[", "1", "]", "]", ",", "col", "[", "0", "]", "]", ")", ".", "strip", "(", ")", "for", "col", "in", "result_dataframe", ".", "columns", ".", "values", "]", "\n", "\n", "", "else", ":", "\n", "# Rename columns in such a way that they are nicely printable in latex", "\n", "            ", "result_dataframe", ".", "rename", "(", "columns", "=", "{", "col_name", ":", "\"@ {}\"", ".", "format", "(", "col_name", ")", "for", "col_name", "in", "result_dataframe", ".", "columns", ".", "levels", "[", "0", "]", "}", ",", "\n", "level", "=", "0", ",", "inplace", "=", "True", ")", "\n", "\n", "result_dataframe", ".", "rename", "(", "columns", "=", "{", "col_name", ":", "self", ".", "_METRIC_NAME_TO_LATEX_LABEL_DICT", "[", "col_name", "]", "for", "col_name", "in", "result_dataframe", ".", "columns", ".", "levels", "[", "1", "]", "}", ",", "\n", "level", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "\n", "\n", "", "if", "highlight_best", ":", "\n", "\n", "            ", "dataframe_baselines", "=", "result_dataframe", ".", "iloc", "[", ":", "-", "len", "(", "self", ".", "_other_algorithm_list", ")", ",", ":", "]", "\n", "dataframe_other_algs", "=", "result_dataframe", ".", "iloc", "[", "-", "len", "(", "self", ".", "_other_algorithm_list", ")", ":", ",", ":", "]", "\n", "\n", "dataframe_best_baseline_value", "=", "dataframe_baselines", ".", "max", "(", "axis", "=", "0", ")", "\n", "dataframe_best_other_alg_value", "=", "dataframe_other_algs", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "\n", "def", "_format_result_row_values", "(", "dataframe_row_series", ",", "dataframe_threshold_value", ",", "n_decimals", ")", ":", "\n", "\n", "                ", "for", "dataset_column", "in", "dataframe_row_series", ".", "index", ".", "tolist", "(", ")", ":", "\n", "\n", "                    ", "result_value", "=", "dataframe_row_series", "[", "dataset_column", "]", "\n", "\n", "if", "dataset_column", "==", "\"Algorithm\"", "or", "not", "np", ".", "isfinite", "(", "result_value", ")", ":", "\n", "                            ", "continue", "\n", "\n", "", "if", "result_value", ">", "dataframe_threshold_value", "[", "dataset_column", "]", ":", "\n", "                        ", "result_string", "=", "\"\\\\textbf{{{:.{n_decimals}f}}}\"", ".", "format", "(", "result_value", ",", "n_decimals", "=", "n_decimals", ")", "\n", "", "else", ":", "\n", "                        ", "result_string", "=", "\"{:.{n_decimals}f}\"", ".", "format", "(", "result_value", ",", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "", "dataframe_row_series", "[", "dataset_column", "]", "=", "result_string", "\n", "\n", "", "return", "dataframe_row_series", "\n", "\n", "", "dataframe_baselines", "=", "dataframe_baselines", ".", "apply", "(", "partial", "(", "_format_result_row_values", ",", "\n", "dataframe_threshold_value", "=", "dataframe_best_other_alg_value", ",", "\n", "n_decimals", "=", "n_decimals", ",", "\n", ")", ",", "axis", "=", "1", ",", "result_type", "=", "\"broadcast\"", ")", "\n", "\n", "dataframe_other_algs", "=", "dataframe_other_algs", ".", "apply", "(", "partial", "(", "_format_result_row_values", ",", "\n", "dataframe_threshold_value", "=", "dataframe_best_baseline_value", ",", "\n", "n_decimals", "=", "n_decimals", ",", "\n", ")", ",", "axis", "=", "1", ",", "result_type", "=", "\"broadcast\"", ")", "\n", "\n", "result_dataframe", "=", "pd", ".", "concat", "(", "[", "dataframe_baselines", ",", "dataframe_other_algs", "]", ",", "ignore_index", "=", "False", ")", "\n", "\n", "\n", "\n", "", "result_dataframe", ".", "fillna", "(", "\"-\"", ",", "inplace", "=", "True", ")", "\n", "\n", "n_metrics_cutoffs", "=", "len", "(", "result_dataframe", ".", "columns", ")", "\n", "latex_code", "=", "result_dataframe", ".", "to_latex", "(", "index", "=", "True", ",", "\n", "escape", "=", "False", ",", "#do not automatically escape special characters", "\n", "multicolumn", "=", "True", ",", "\n", "multicolumn_format", "=", "\"c\"", ",", "\n", "column_format", "=", "\"l|\"", "+", "\"{}|\"", ".", "format", "(", "\"c\"", "*", "len", "(", "metrics_list", ")", ")", "*", "len", "(", "cutoffs_list", ")", ",", "\n", "float_format", "=", "\"{:.4f}\"", ".", "format", ",", "\n", ")", "\n", "\n", "# Replace group separator with \\midrule", "\n", "separator_old", "=", "\"(\\\\\\\\\\\\\\\\\\n)\\s*algorithm_group_.+\\\\\\\\\\\\\\\\(\\n)\"", "\n", "separator_midrule", "=", "r\"\\1\\\\midrule\\2\"", "\n", "\n", "latex_code", "=", "re", ".", "sub", "(", "separator_old", ",", "separator_midrule", ",", "latex_code", ")", "\n", "\n", "# Prints table title", "\n", "if", "table_title", "is", "not", "None", ":", "\n", "            ", "header_old", "=", "\"(\\\\\\\\toprule\\n)\"", "\n", "header_custom_title", "=", "r\"\\1\\t&\\t\\\\multicolumn{{{}}}{{c}}{{{}}} \\\\\\\\\\n\"", ".", "format", "(", "n_metrics_cutoffs", ",", "table_title", ")", "\n", "\n", "latex_code", "=", "re", ".", "sub", "(", "header_old", ",", "header_custom_title", ",", "latex_code", ")", "\n", "\n", "\n", "# ad vline at the end of the line whith multicolumn", "\n", "", "separator_old", "=", "\"(\\\\\\multicolumn{[^}]*}{[^}]*}{[^}]*}\\s*)(\\\\\\\\\\\\\\\\\\n)\"", "\n", "separator_midrule", "=", "r\"\\1\\\\vline\\2\"", "\n", "\n", "latex_code", "=", "re", ".", "sub", "(", "separator_old", ",", "separator_midrule", ",", "latex_code", ")", "\n", "latex_code", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "latex_code", ")", "\n", "\n", "output_file", ".", "write", "(", "latex_code", ")", "\n", "output_file", ".", "flush", "(", ")", "\n", "\n", "output_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.get_time_statistics_dataframe": [[815, 869], ["pandas.DataFrame", "ResultFolderLoader._remove_duplicate_group_separator", "enumerate", "enumerate", "ResultFolderLoader._time_string_builder", "ResultFolderLoader._time_string_builder"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._remove_duplicate_group_separator", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._time_string_builder", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._time_string_builder"], ["", "def", "get_time_statistics_dataframe", "(", "self", ",", "\n", "n_decimals", "=", "2", ",", "\n", "n_evaluation_users", "=", "None", ",", "\n", ")", ":", "\n", "\n", "\n", "# COLUMN HEADERS", "\n", "        ", "column_labels", "=", "[", "\"Train Time\"", ",", "\n", "\"Recommendation Time\"", ",", "\n", "\"Recommendation Throughput\"", "]", "\n", "\n", "algorithm_label_index", "=", "[", "row_dict", "[", "\"algorithm_row_label\"", "]", "if", "row_dict", "is", "not", "None", "else", "\"algorithm_group_{}\"", ".", "format", "(", "row_index", ")", "for", "row_index", ",", "row_dict", "in", "enumerate", "(", "self", ".", "_metadata_list", ")", "]", "\n", "result_dataframe", "=", "pd", ".", "DataFrame", "(", "None", ",", "index", "=", "algorithm_label_index", ",", "columns", "=", "column_labels", ")", "\n", "\n", "# Remove duplicate group separator", "\n", "result_dataframe", "=", "_remove_duplicate_group_separator", "(", "result_dataframe", ")", "\n", "\n", "for", "row_index", ",", "row_dict", "in", "enumerate", "(", "self", ".", "_metadata_list", ")", ":", "\n", "\n", "            ", "if", "row_dict", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "algorithm_row_label", "=", "row_dict", "[", "\"algorithm_row_label\"", "]", "\n", "search_metadata", "=", "row_dict", "[", "\"search_metadata\"", "]", "\n", "\n", "if", "search_metadata", "is", "not", "None", ":", "\n", "\n", "# Print mean and stdv of train time", "\n", "                ", "value_string", "=", "_time_string_builder", "(", "search_metadata", "[", "\"time_on_train_list\"", "]", ",", "\n", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "result_dataframe", ".", "loc", "[", "algorithm_row_label", ",", "\"Train Time\"", "]", "=", "value_string", "\n", "\n", "# Print mean and stdv of evaluation time", "\n", "value_string", "=", "_time_string_builder", "(", "search_metadata", "[", "\"time_on_test_list\"", "]", ",", "\n", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "result_dataframe", ".", "loc", "[", "algorithm_row_label", ",", "\"Recommendation Time\"", "]", "=", "value_string", "\n", "\n", "\n", "# Print n of users evaluated per second for the last model", "\n", "optimal_hyperparameters_index", "=", "search_metadata", "[", "\"hyperparameters_best_index\"", "]", "\n", "\n", "if", "optimal_hyperparameters_index", "is", "None", ":", "\n", "                    ", "optimal_hyperparameters_test_time", "=", "None", "\n", "", "else", ":", "\n", "                    ", "optimal_hyperparameters_test_time", "=", "search_metadata", "[", "\"time_on_test_list\"", "]", "[", "optimal_hyperparameters_index", "]", "\n", "\n", "", "if", "n_evaluation_users", "is", "not", "None", "and", "optimal_hyperparameters_test_time", "is", "not", "None", ":", "\n", "                    ", "value_string", "=", "\"{:.0f}\"", ".", "format", "(", "n_evaluation_users", "/", "optimal_hyperparameters_test_time", ")", "\n", "result_dataframe", ".", "loc", "[", "algorithm_row_label", ",", "\"Recommendation Throughput\"", "]", "=", "value_string", "\n", "\n", "\n", "", "", "", "return", "result_dataframe", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.generate_latex_time_statistics": [[872, 919], ["ResultFolderLoader.ResultFolderLoader.get_time_statistics_dataframe", "open", "ResultFolderLoader.ResultFolderLoader.rename", "ResultFolderLoader.ResultFolderLoader.fillna", "len", "ResultFolderLoader.ResultFolderLoader.to_latex", "re.sub", "re.sub", "re.sub", "open.write", "open.flush", "open.close", "re.sub"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.get_time_statistics_dataframe"], ["", "def", "generate_latex_time_statistics", "(", "self", ",", "output_file_path", ",", "\n", "n_decimals", "=", "2", ",", "\n", "n_evaluation_users", "=", "None", ",", "\n", "table_title", "=", "None", ")", ":", "\n", "\n", "        ", "result_dataframe", "=", "self", ".", "get_time_statistics_dataframe", "(", "n_decimals", "=", "n_decimals", ",", "n_evaluation_users", "=", "n_evaluation_users", ")", "\n", "output_file", "=", "open", "(", "output_file_path", ",", "\"w\"", ")", "\n", "\n", "result_dataframe", ".", "rename", "(", "columns", "=", "{", "\"Recommendation Time\"", ":", "\"\\\\begin{tabular}{@{}c@{}}Recommendation\\\\\\\\Time\\\\end{tabular}\"", ",", "\n", "\"Recommendation Throughput\"", ":", "\"\\\\begin{tabular}{@{}c@{}}Recommendation\\\\\\\\Throughput\\\\end{tabular}\"", "}", ",", "\n", "inplace", "=", "True", ")", "\n", "\n", "\n", "result_dataframe", ".", "fillna", "(", "\"-\"", ",", "inplace", "=", "True", ")", "\n", "\n", "n_columns", "=", "len", "(", "result_dataframe", ".", "columns", ")", "\n", "latex_code", "=", "result_dataframe", ".", "to_latex", "(", "index", "=", "True", ",", "\n", "escape", "=", "False", ",", "#do not automatically escape special characters", "\n", "column_format", "=", "\"l|\"", "+", "\"r\"", "*", "n_columns", "+", "\"|\"", ",", "\n", "float_format", "=", "\"{:.4f}\"", ".", "format", ",", "\n", ")", "\n", "\n", "# Replace group separator with \\midrule", "\n", "separator_old", "=", "\"(\\\\\\\\\\\\\\\\\\n)\\s*algorithm_group_.+\\\\\\\\\\\\\\\\(\\n)\"", "\n", "separator_midrule", "=", "r\"\\1\\\\midrule\\2\"", "\n", "\n", "latex_code", "=", "re", ".", "sub", "(", "separator_old", ",", "separator_midrule", ",", "latex_code", ")", "\n", "\n", "\n", "# Prints table title", "\n", "if", "table_title", "is", "not", "None", ":", "\n", "            ", "header_old", "=", "\"(\\\\\\\\toprule\\n)\"", "\n", "header_custom_title", "=", "r\"\\1\\t&\\t\\\\multicolumn{{{}}}{{c}}{{{}}}  \\\\\\\\\\n\"", ".", "format", "(", "n_columns", ",", "table_title", ")", "\n", "\n", "latex_code", "=", "re", ".", "sub", "(", "header_old", ",", "header_custom_title", ",", "latex_code", ")", "\n", "\n", "# ad vline at the end of the line whith multicolumn", "\n", "", "separator_old", "=", "\"(\\\\\\multicolumn{[^}]*}{[^}]*}{[^}]*}\\s*)(\\\\\\\\\\\\\\\\\\n)\"", "\n", "separator_midrule", "=", "r\"\\1\\\\vline\\2\"", "\n", "\n", "latex_code", "=", "re", ".", "sub", "(", "separator_old", ",", "separator_midrule", ",", "latex_code", ")", "\n", "latex_code", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "latex_code", ")", "\n", "\n", "output_file", ".", "write", "(", "latex_code", ")", "\n", "output_file", ".", "flush", "(", ")", "\n", "\n", "output_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_printable_recommender_name": [[15, 33], ["re.sub.replace", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub"], "function", ["None"], ["def", "_get_printable_recommender_name", "(", "RECOMMENDER_NAME", ")", ":", "\n", "\n", "    ", "recommender_printable_name", "=", "RECOMMENDER_NAME", "\n", "recommender_printable_name", "=", "recommender_printable_name", ".", "replace", "(", "\"Recommender\"", ",", "\"\"", ")", "\n", "recommender_printable_name", "=", "recommender_printable_name", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", "\n", "recommender_printable_name", "=", "re", ".", "sub", "(", "\"CF$\"", ",", "\" CF\"", ",", "recommender_printable_name", ")", "\n", "recommender_printable_name", "=", "re", ".", "sub", "(", "\"CBF$\"", ",", "\" CBF\"", ",", "recommender_printable_name", ")", "\n", "recommender_printable_name", "=", "re", ".", "sub", "(", "\"SLIM\"", ",", "\"SLIM \"", ",", "recommender_printable_name", ")", "\n", "recommender_printable_name", "=", "recommender_printable_name", ".", "replace", "(", "\"MatrixFactorization\"", ",", "\"MF\"", ")", "\n", "recommender_printable_name", "=", "recommender_printable_name", ".", "replace", "(", "\"SLIM\"", ",", "\"SLIM \"", ")", "\n", "recommender_printable_name", "=", "recommender_printable_name", ".", "replace", "(", "\" Hybrid\"", ",", "\"\"", ")", "\n", "recommender_printable_name", "=", "recommender_printable_name", ".", "replace", "(", "\" Cython\"", ",", "\"\"", ")", "\n", "recommender_printable_name", "=", "recommender_printable_name", ".", "replace", "(", "\" Wrapper\"", ",", "\"\"", ")", "\n", "recommender_printable_name", "=", "recommender_printable_name", ".", "replace", "(", "\" Matlab\"", ",", "\"\"", ")", "\n", "\n", "recommender_printable_name", "=", "re", ".", "sub", "(", "\" +\"", ",", "\" \"", ",", "recommender_printable_name", ")", "\n", "\n", "return", "recommender_printable_name", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_algorithm_similarity_and_feature_combinations": [[43, 76], ["len", "algorithm_data_to_print_list.append", "len", "ResultFolderLoader._get_printable_recommender_name"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_printable_recommender_name"], ["", "def", "_get_algorithm_similarity_and_feature_combinations", "(", "algorithm", ",", "algorithm_row_label", ",", "algorithm_file_name", ",", "\n", "KNN_similarity_list", ",", "feature_matrix_names_to_report_list", ")", ":", "\n", "\n", "    ", "algorithm_data_to_print_list", "=", "[", "]", "\n", "\n", "# If the list is empty, add empty string", "\n", "if", "len", "(", "feature_matrix_names_to_report_list", ")", "==", "0", ":", "\n", "        ", "feature_matrix_names_to_report_list", "=", "[", "\"\"", "]", "\n", "\n", "\n", "", "for", "similarity", "in", "KNN_similarity_list", ":", "\n", "\n", "        ", "for", "feature_matrix_name", "in", "feature_matrix_names_to_report_list", ":", "\n", "\n", "# If only one feature matrix, don't print its name", "\n", "            ", "if", "len", "(", "feature_matrix_names_to_report_list", ")", "==", "1", ":", "\n", "                ", "feature_matrix_row_label", "=", "\"\"", "\n", "\n", "", "else", ":", "\n", "                ", "feature_matrix_row_label", "=", "_get_printable_recommender_name", "(", "feature_matrix_name", ")", "\n", "feature_matrix_row_label", "+=", "\" \"", "\n", "\n", "", "if", "feature_matrix_name", "!=", "\"\"", ":", "\n", "                ", "feature_matrix_name", "=", "\"_\"", "+", "feature_matrix_name", "\n", "\n", "\n", "", "algorithm_data_to_print_list", ".", "append", "(", "{", "\n", "\"algorithm\"", ":", "algorithm", ",", "\n", "\"algorithm_row_label\"", ":", "algorithm_row_label", "+", "\" \"", "+", "feature_matrix_row_label", "+", "similarity", ",", "\n", "\"algorithm_file_name\"", ":", "algorithm_file_name", "+", "feature_matrix_name", "+", "\"_\"", "+", "similarity", ",", "\n", "}", ")", "\n", "\n", "", "", "return", "algorithm_data_to_print_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_algorithm_file_name_list": [[79, 155], ["ResultFolderLoader._get_printable_recommender_name", "algorithm_data_to_print_list.append", "ResultFolderLoader._get_algorithm_similarity_and_feature_combinations", "algorithm_data_to_print_list.extend", "ResultFolderLoader._get_algorithm_similarity_and_feature_combinations", "algorithm_data_to_print_list.extend", "algorithm_data_to_print_list.append", "ResultFolderLoader._get_algorithm_similarity_and_feature_combinations", "algorithm_data_to_print_list.extend"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_printable_recommender_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_algorithm_similarity_and_feature_combinations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_algorithm_similarity_and_feature_combinations", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_algorithm_similarity_and_feature_combinations"], ["", "def", "_get_algorithm_file_name_list", "(", "algorithm_list", ",", "\n", "KNN_similarity_list", "=", "None", ",", "\n", "ICM_names_list", "=", "None", ",", "\n", "UCM_names_list", "=", "None", ",", "\n", ")", ":", "\n", "\n", "\n", "    ", "if", "KNN_similarity_list", "is", "None", ":", "\n", "        ", "KNN_similarity_list", "=", "[", "\"cosine\"", "]", "\n", "\n", "", "algorithm_data_to_print_list", "=", "[", "]", "\n", "\n", "\n", "for", "algorithm", "in", "algorithm_list", ":", "\n", "\n", "        ", "if", "algorithm", "is", "None", ":", "\n", "            ", "algorithm_data_to_print_list", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "\n", "", "algorithm_row_label", "=", "_get_printable_recommender_name", "(", "algorithm", ".", "RECOMMENDER_NAME", ")", "\n", "\n", "algorithm_file_name", "=", "algorithm", ".", "RECOMMENDER_NAME", "\n", "\n", "# If KNN collaborative, expand similarity tipe but put no feature matrix", "\n", "if", "algorithm", "in", "[", "ItemKNNCFRecommender", ",", "\n", "UserKNNCFRecommender", "]", ":", "\n", "\n", "            ", "this_algorithm_data_list", "=", "_get_algorithm_similarity_and_feature_combinations", "(", "algorithm", ",", "algorithm_row_label", ",", "\n", "algorithm_file_name", ",", "\n", "KNN_similarity_list", ",", "\n", "[", "]", ")", "\n", "\n", "algorithm_data_to_print_list", ".", "extend", "(", "this_algorithm_data_list", ")", "\n", "\n", "\n", "# If KNN item content based or hybrid item based, expand similarity type and ICM names", "\n", "", "elif", "algorithm", "in", "[", "ItemKNNCBFRecommender", ",", "\n", "ItemKNN_CFCBF_Hybrid_Recommender", ",", "\n", "# ItemKNNCBF_FW_Recommender", "\n", "]", ":", "\n", "\n", "            ", "if", "ICM_names_list", "is", "not", "None", ":", "\n", "                ", "this_algorithm_data_list", "=", "_get_algorithm_similarity_and_feature_combinations", "(", "algorithm", ",", "algorithm_row_label", ",", "\n", "algorithm_file_name", ",", "\n", "KNN_similarity_list", ",", "\n", "ICM_names_list", ")", "\n", "\n", "algorithm_data_to_print_list", ".", "extend", "(", "this_algorithm_data_list", ")", "\n", "\n", "\n", "# If KNN user content based or hybrid user based, expand similarity type and UCM names", "\n", "", "", "elif", "algorithm", "in", "[", "UserKNNCBFRecommender", ",", "\n", "UserKNN_CFCBF_Hybrid_Recommender", ",", "\n", "# UserKNNCBF_FW_Recommender", "\n", "]", ":", "\n", "\n", "            ", "if", "UCM_names_list", "is", "not", "None", ":", "\n", "                ", "this_algorithm_data_list", "=", "_get_algorithm_similarity_and_feature_combinations", "(", "algorithm", ",", "algorithm_row_label", ",", "\n", "algorithm_file_name", ",", "\n", "KNN_similarity_list", ",", "\n", "UCM_names_list", ")", "\n", "\n", "algorithm_data_to_print_list", ".", "extend", "(", "this_algorithm_data_list", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "algorithm_data_to_print_list", ".", "append", "(", "{", "\n", "\"algorithm\"", ":", "algorithm", ",", "\n", "\"algorithm_row_label\"", ":", "algorithm_row_label", ",", "\n", "\"algorithm_file_name\"", ":", "algorithm_file_name", ",", "\n", "}", ")", "\n", "\n", "\n", "", "", "return", "algorithm_data_to_print_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_algorithm_metadata_to_print_list": [[158, 198], ["recsys.Base.DataIO.DataIO", "ResultFolderLoader._get_algorithm_file_name_list", "algorithm_metadata_to_print_list.append", "algorithm_metadata_to_print_list.append", "recsys.Base.DataIO.DataIO.load_data"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_algorithm_file_name_list", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data"], ["", "def", "_get_algorithm_metadata_to_print_list", "(", "result_folder_path", ",", "\n", "algorithm_list", ",", "\n", "KNN_similarity_list", "=", "None", ",", "\n", "ICM_names_list", "=", "None", ",", "\n", "UCM_names_list", "=", "None", ",", "\n", ")", ":", "\n", "\n", "\n", "    ", "dataIO", "=", "DataIO", "(", "folder_path", "=", "result_folder_path", ")", "\n", "\n", "algorithm_file_name_list", "=", "_get_algorithm_file_name_list", "(", "\n", "algorithm_list", "=", "algorithm_list", ",", "\n", "KNN_similarity_list", "=", "KNN_similarity_list", ",", "\n", "ICM_names_list", "=", "ICM_names_list", ",", "\n", "UCM_names_list", "=", "UCM_names_list", ")", "\n", "\n", "algorithm_metadata_to_print_list", "=", "[", "]", "\n", "\n", "\n", "for", "algorithm_file_dict", "in", "algorithm_file_name_list", ":", "\n", "\n", "        ", "if", "algorithm_file_dict", "is", "None", ":", "\n", "            ", "algorithm_metadata_to_print_list", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "algorithm_file_name", "=", "algorithm_file_dict", "[", "\"algorithm_file_name\"", "]", "\n", "\n", "search_metadata", "=", "None", "\n", "\n", "if", "algorithm_file_name", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "search_metadata", "=", "dataIO", ".", "load_data", "(", "algorithm_file_name", "+", "\"_metadata\"", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "algorithm_file_dict", "[", "\"search_metadata\"", "]", "=", "search_metadata", "\n", "algorithm_metadata_to_print_list", ".", "append", "(", "algorithm_file_dict", ")", "\n", "\n", "\n", "", "return", "algorithm_metadata_to_print_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._mean_and_stdd_of_array": [[210, 220], ["numpy.mean", "len", "numpy.std"], "function", ["None"], ["", "def", "_mean_and_stdd_of_array", "(", "data_array", ")", ":", "\n", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "data_array", ")", "\n", "\n", "if", "len", "(", "data_array", ")", "==", "1", ":", "\n", "        ", "stddev", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "stddev", "=", "np", ".", "std", "(", "data_array", ",", "ddof", "=", "1", ")", "\n", "\n", "", "return", "mean", ",", "stddev", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._convert_sec_list_into_biggest_unit": [[222, 239], ["numpy.array", "ResultFolderLoader._mean_and_stdd_of_array", "recsys.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "ResultFolderLoader._mean_and_stdd_of_array"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._mean_and_stdd_of_array", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.seconds_to_biggest_unit.seconds_to_biggest_unit", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._mean_and_stdd_of_array"], ["", "def", "_convert_sec_list_into_biggest_unit", "(", "data_list", ")", ":", "\n", "    ", "\"\"\"\n    Converts a list containing seconds into an equivalent list with a bigger time unit\n    adjusting standard deviation as well\n    :param data_list:\n    :return:\n    \"\"\"", "\n", "\n", "data_array", "=", "np", ".", "array", "(", "data_list", ")", "\n", "\n", "mean_sec", ",", "stddev_sec", "=", "_mean_and_stdd_of_array", "(", "data_array", ")", "\n", "\n", "_", ",", "new_time_unit", ",", "data_array", "=", "seconds_to_biggest_unit", "(", "mean_sec", ",", "data_array", "=", "data_array", ")", "\n", "\n", "mean_new_unit", ",", "stddev_new_unit", "=", "_mean_and_stdd_of_array", "(", "data_array", ")", "\n", "\n", "return", "mean_sec", ",", "stddev_sec", ",", "new_time_unit", ",", "mean_new_unit", ",", "stddev_new_unit", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._time_string_builder": [[242, 283], ["len", "ResultFolderLoader._convert_sec_list_into_biggest_unit", "len", "ResultFolderLoader._time_string_builder._measure_unit_string"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._convert_sec_list_into_biggest_unit"], ["", "def", "_time_string_builder", "(", "data_list", ",", "n_decimals", "=", "4", ")", ":", "\n", "    ", "\"\"\"\n    Creates a nice printable string from the list of time lengths\n    :param data_list:\n    :param n_decimals:\n    :return:\n    \"\"\"", "\n", "\n", "data_list", "=", "[", "finite_val", "for", "finite_val", "in", "data_list", "if", "finite_val", "is", "not", "None", "and", "np", ".", "isfinite", "(", "finite_val", ")", "]", "\n", "\n", "\n", "def", "_measure_unit_string", "(", "mean_sec", ",", "stddev", ",", "unit", ",", "n_decimals", "=", "4", ")", ":", "\n", "\n", "        ", "result_row_string", "=", "\"{:.{n_decimals}f}\"", ".", "format", "(", "mean_sec", ",", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "if", "len", "(", "data_list", ")", ">", "1", ":", "\n", "            ", "result_row_string", "+=", "\" $\\\\pm$ {:.{n_decimals}f}\"", ".", "format", "(", "stddev", ",", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "", "result_row_string", "+=", "\" [{}] \"", ".", "format", "(", "unit", ")", "\n", "\n", "return", "result_row_string", "\n", "\n", "\n", "\n", "", "if", "len", "(", "data_list", ")", ">", "0", ":", "\n", "\n", "# Step1: choose the appropriate measuring unit", "\n", "        ", "mean_sec", ",", "stddev_sec", ",", "new_time_unit", ",", "mean_new_unit", ",", "stddev_new_unit", "=", "_convert_sec_list_into_biggest_unit", "(", "data_list", ")", "\n", "\n", "if", "new_time_unit", "!=", "\"sec\"", ":", "\n", "            ", "result_row_string", "=", "\"{:.{n_decimals}f} [{}]\"", ".", "format", "(", "mean_sec", ",", "\"sec\"", ",", "n_decimals", "=", "n_decimals", ")", "\n", "result_row_string", "+=", "\" / \"", "+", "_measure_unit_string", "(", "mean_new_unit", ",", "stddev_new_unit", ",", "new_time_unit", ",", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "", "else", ":", "\n", "            ", "result_row_string", "=", "_measure_unit_string", "(", "mean_sec", ",", "stddev_sec", ",", "\"sec\"", ",", "n_decimals", "=", "n_decimals", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "result_row_string", "=", "\"-\"", "\n", "\n", "\n", "", "return", "result_row_string", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._format_hyperparameter_row_values": [[295, 316], ["isinstance", "any", "isinstance"], "function", ["None"], ["", "def", "_format_hyperparameter_row_values", "(", "dataframe_row_series", ")", ":", "\n", "\n", "    ", "algorithm_name", ",", "hyperparameter_name", "=", "dataframe_row_series", ".", "name", "\n", "\n", "for", "dataset_column", "in", "dataframe_row_series", ".", "index", ":", "\n", "        ", "hyperparameter_value", "=", "dataframe_row_series", "[", "dataset_column", "]", "\n", "\n", "if", "isinstance", "(", "hyperparameter_value", ",", "numbers", ".", "Real", ")", "and", "not", "isinstance", "(", "hyperparameter_value", ",", "numbers", ".", "Integral", ")", ":", "\n", "# If the number is real valued, use exponential notation in some cases, fixed decimal in all others", "\n", "            ", "if", "any", "(", "substring", "in", "hyperparameter_name", "for", "substring", "in", "[", "\"penalty\"", ",", "\"rate\"", ",", "\"reg\"", ",", "\"l1\"", ",", "\"lambda\"", ",", "\"l2\"", ",", "\"decay\"", "]", ")", ":", "\n", "                ", "hyperparameter_value", "=", "\"{:.2E}\"", ".", "format", "(", "hyperparameter_value", ")", "\n", "", "else", ":", "\n", "                ", "hyperparameter_value", "=", "\"{:.4f}\"", ".", "format", "(", "hyperparameter_value", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "hyperparameter_value", "=", "\"{}\"", ".", "format", "(", "hyperparameter_value", ")", "\n", "\n", "", "dataframe_row_series", "[", "dataset_column", "]", "=", "hyperparameter_value", "\n", "\n", "\n", "", "return", "dataframe_row_series", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._print_latex_hyperparameters_from_dataframe": [[320, 365], ["hyperparameters_dataframe.copy.copy", "hyperparameters_dataframe.copy.rename_axis", "len", "hyperparameters_dataframe.copy.to_latex", "re.sub.replace", "re.sub", "re.sub", "re.sub", "hyperparameters_file.write", "hyperparameters_file.close", "hyperparameters_dataframe.copy.index.get_level_values().str.contains", "hyperparameters_dataframe.copy.index.get_level_values"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "_print_latex_hyperparameters_from_dataframe", "(", "hyperparameters_dataframe", ",", "hyperparameters_file", ")", ":", "\n", "\n", "    ", "hyperparameters_dataframe", "=", "hyperparameters_dataframe", ".", "copy", "(", ")", "\n", "hyperparameters_dataframe", ".", "rename_axis", "(", "[", "\"Algorithm\"", ",", "\"Hyperparameter\"", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "# Get the columns before changing the index structure", "\n", "n_datasets", "=", "len", "(", "hyperparameters_dataframe", ".", "columns", ")", "\n", "\n", "hyperparameters_dataframe", "=", "hyperparameters_dataframe", "[", "~", "hyperparameters_dataframe", ".", "index", ".", "get_level_values", "(", "\"Algorithm\"", ")", ".", "str", ".", "contains", "(", "\"algorithm_group\"", ")", "]", "\n", "\n", "# Set index as the combination of algorithm label and hyperparam name, this will create a multiindex dataframe", "\n", "# and enable the automatic multirow latex code", "\n", "# hyperparameters_dataframe.set_index([\"Algorithm\", \"Hyperparameter\"], inplace=True)", "\n", "latex_code", "=", "hyperparameters_dataframe", ".", "to_latex", "(", "index", "=", "True", ",", "\n", "multirow", "=", "True", ",", "\n", "escape", "=", "False", ",", "\n", "column_format", "=", "\"ll|\"", "+", "\"c\"", "*", "n_datasets", ")", "\n", "\n", "# Replace cline with midrule", "\n", "latex_code", "=", "latex_code", ".", "replace", "(", "\"\\\\cline{{1-{}}}\"", ".", "format", "(", "n_datasets", "+", "2", ")", ",", "\"\\\\midrule\"", ")", "\n", "\n", "# Also to_latex adds extra empty header row when index has a name, known BUG", "\n", "# https://github.com/pandas-dev/pandas/issues/26111", "\n", "\n", "header_wrong_code", "=", "\" +& +\"", "+", "\"\"", ".", "join", "(", "[", "\"& +{} \"", ".", "format", "(", "dataset", ")", "for", "dataset", "in", "hyperparameters_dataframe", ".", "columns", "]", ")", "+", "\"\\\\\\\\\\\\\\\\\\n\"", "+", "\"Algorithm & Hyperparameter \"", "+", "\"& +\"", "*", "n_datasets", "+", "\"\\\\\\\\\\\\\\\\\\n\"", "\n", "\n", "header_correct_code", "=", "\"Algorithm & Hyperparameter \"", "+", "\"\"", ".", "join", "(", "[", "\"&\\t {} \"", ".", "format", "(", "dataset", ")", "for", "dataset", "in", "hyperparameters_dataframe", ".", "columns", "]", ")", "+", "\"\\\\\\\\\\\\\\\\\\n\"", "\n", "\n", "latex_code", "=", "re", ".", "sub", "(", "header_wrong_code", ",", "header_correct_code", ",", "latex_code", ")", "\n", "\n", "# Also, when the algorithm has only 1 hyperparameter the multirow is not added, therefore no midrule is added", "\n", "# We want to add the midrule", "\n", "# Rows with hyperparameters will have spaces at the beginning, a new algoritm block will have the name", "\n", "# Select all rows which are after a data row (which ends in \"\\\\\")", "\n", "# then they should contain some non-space and non-newline characters (i.e., the name of an algorithm either simple text or \\multirow)", "\n", "# then get all the cell content until the & (some algorithm names will contain a space)", "\n", "separator_wrong_code", "=", "\"(\\\\\\\\\\\\\\\\\\n)([^ \\n]+[^&\\n]+&)\"", "\n", "separator_correct_code", "=", "r\"\\1\\\\midrule\\n\\2\"", "\n", "\n", "latex_code", "=", "re", ".", "sub", "(", "separator_wrong_code", ",", "separator_correct_code", ",", "latex_code", ")", "\n", "latex_code", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "latex_code", ")", "\n", "\n", "hyperparameters_file", ".", "write", "(", "latex_code", ")", "\n", "hyperparameters_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._remove_missing_runs_for_algorithm": [[369, 391], ["hyperparameters_dataframe.groupby().size", "hyperparameters_dataframe.index.get_level_values().isin", "hyperparameters_dataframe.index.get_level_values().isnull", "hyperparameters_dataframe.index.get_level_values().isnull", "none_hyperpar.index.get_level_values", "hyperparameters_dataframe.groupby", "hyperparameters_dataframe.index.get_level_values", "hyperparameters_dataframe.index.get_level_values", "hyperparameters_dataframe.index.get_level_values"], "function", ["None"], ["", "def", "_remove_missing_runs_for_algorithm", "(", "hyperparameters_dataframe", ")", ":", "\n", "    ", "\"\"\"\n    Sometimes an algorithm is present only for some datasets. When it is missing this will generate\n    an extra row with hyperparameter \"nan\", that should be removed if other hyperparameters are present\n    :param hyperparameters_dataframe:\n    :return:\n    \"\"\"", "\n", "\n", "# Search all algorithms having a hyperparameter whose name is \"nan\"", "\n", "none_hyperpar", "=", "hyperparameters_dataframe", "[", "hyperparameters_dataframe", ".", "index", ".", "get_level_values", "(", "\"hyperparameter_name\"", ")", ".", "isnull", "(", ")", "]", "\n", "\n", "# Check if they have more hyperparameters", "\n", "alg_number_hyperparam", "=", "hyperparameters_dataframe", ".", "groupby", "(", "'algorithm_row_label'", ")", ".", "size", "(", ")", ">", "1", "\n", "\n", "# If so, remove the single \"nan\" hyperparameter", "\n", "single_nan_to_remove_flag", "=", "alg_number_hyperparam", "[", "none_hyperpar", ".", "index", ".", "get_level_values", "(", "\"algorithm_row_label\"", ")", "]", "\n", "single_nan_to_remove_flag", "=", "single_nan_to_remove_flag", "[", "single_nan_to_remove_flag", "]", "\n", "\n", "rows_to_drop", "=", "hyperparameters_dataframe", ".", "index", ".", "get_level_values", "(", "\"algorithm_row_label\"", ")", ".", "isin", "(", "single_nan_to_remove_flag", ".", "index", ")", "&", "hyperparameters_dataframe", ".", "index", ".", "get_level_values", "(", "\"hyperparameter_name\"", ")", ".", "isnull", "(", ")", "\n", "hyperparameters_dataframe", "=", "hyperparameters_dataframe", "[", "~", "rows_to_drop", "]", "\n", "\n", "return", "hyperparameters_dataframe", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.generate_latex_hyperparameters": [[399, 488], ["ResultFolderLoader._remove_missing_runs_for_algorithm", "hyperparameters_dataframe.merge.fillna", "pandas.MultiIndex.from_frame", "hyperparameters_dataframe.merge.apply", "open", "ResultFolderLoader._print_latex_hyperparameters_from_dataframe", "ResultFolderLoader.ResultFolderLoader", "ResultFolderLoader.get_hyperparameters_dataframe", "result_loader.get_hyperparameters_dataframe.rename", "hyperparameters_dataframe.merge.index.to_frame().fillna", "algorithm_type_group.items", "hyperparameters_dataframe.merge.merge", "hyperparameters_dataframe.merge.index.get_level_values().str.contains", "hyperparameters_dataframe.merge.index.to_frame", "ResultFolderLoader._get_printable_recommender_name", "len", "open", "ResultFolderLoader._print_latex_hyperparameters_from_dataframe", "hyperparameters_dataframe.merge.index.get_level_values"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._remove_missing_runs_for_algorithm", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._print_latex_hyperparameters_from_dataframe", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader.ResultFolderLoader.get_hyperparameters_dataframe", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._get_printable_recommender_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._print_latex_hyperparameters_from_dataframe"], ["", "def", "generate_latex_hyperparameters", "(", "result_folder_path", ",", "\n", "algorithm_name", ",", "\n", "experiment_subfolder_list", ",", "\n", "other_algorithm_list", ",", "\n", "file_name_suffix", "=", "\"\"", ",", "\n", "KNN_similarity_to_report_list", "=", "None", ",", "\n", "ICM_names_to_report_list", "=", "None", ",", "\n", "UCM_names_to_report_list", "=", "None", ",", "\n", "split_per_algorithm_type", "=", "False", ",", "\n", ")", ":", "\n", "\n", "    ", "hyperparameters_dataframe", "=", "None", "\n", "\n", "for", "experiment_subfolder", "in", "experiment_subfolder_list", ":", "\n", "\n", "        ", "result_loader", "=", "ResultFolderLoader", "(", "\"{}/{}_{}/\"", ".", "format", "(", "result_folder_path", ",", "algorithm_name", ",", "experiment_subfolder", ")", ",", "\n", "base_algorithm_list", "=", "None", ",", "\n", "other_algorithm_list", "=", "other_algorithm_list", ",", "\n", "KNN_similarity_list", "=", "KNN_similarity_to_report_list", ",", "\n", "ICM_names_list", "=", "ICM_names_to_report_list", ",", "\n", "UCM_names_list", "=", "UCM_names_to_report_list", ")", "\n", "\n", "hyperparameters_dataframe_subfolder", "=", "result_loader", ".", "get_hyperparameters_dataframe", "(", ")", "\n", "hyperparameters_dataframe_subfolder", ".", "rename", "(", "columns", "=", "{", "\"hyperparameter_value\"", ":", "experiment_subfolder", "}", ",", "inplace", "=", "True", ")", "\n", "\n", "if", "hyperparameters_dataframe", "is", "None", ":", "\n", "            ", "hyperparameters_dataframe", "=", "hyperparameters_dataframe_subfolder", "\n", "", "else", ":", "\n", "# Perform outer join on two keys", "\n", "# We want that each hyperparameter value is mapped to the right algorithm and the right hyperparameter name", "\n", "# By using \"outer\" we ensure that even if a name is present only in one of the dataframes it will appear in the result", "\n", "# Furthermore validate=\"one_to_one\" checks that there are not duplicates in the keys", "\n", "            ", "hyperparameters_dataframe", "=", "hyperparameters_dataframe", ".", "merge", "(", "hyperparameters_dataframe_subfolder", ",", "\n", "validate", "=", "\"one_to_one\"", ",", "\n", "how", "=", "'outer'", ",", "\n", "on", "=", "[", "\"algorithm_row_label\"", ",", "\"hyperparameter_name\"", "]", ")", "\n", "\n", "", "", "hyperparameters_dataframe", "=", "_remove_missing_runs_for_algorithm", "(", "hyperparameters_dataframe", ")", "\n", "\n", "# Generate latex code", "\n", "# Clean dataframe", "\n", "\n", "# Format hyperparameter values BEFORE splitting the dataframe, because that sometimes changes the data types", "\n", "hyperparameters_dataframe", ".", "fillna", "(", "\"-\"", ",", "inplace", "=", "True", ")", "\n", "hyperparameters_dataframe", ".", "index", "=", "pd", ".", "MultiIndex", ".", "from_frame", "(", "hyperparameters_dataframe", ".", "index", ".", "to_frame", "(", ")", ".", "fillna", "(", "'-'", ")", ")", "\n", "hyperparameters_dataframe", ".", "apply", "(", "_format_hyperparameter_row_values", ",", "axis", "=", "1", ")", "\n", "\n", "hyperparameters_file", "=", "open", "(", "result_folder_path", "+", "algorithm_name", "+", "file_name_suffix", "+", "\"_latex_hyperparameters.txt\"", ",", "\"w\"", ")", "\n", "_print_latex_hyperparameters_from_dataframe", "(", "hyperparameters_dataframe", ",", "hyperparameters_file", ")", "\n", "\n", "\n", "if", "split_per_algorithm_type", ":", "\n", "\n", "        ", "algorithm_type_group", "=", "{", "\n", "\"KNN\"", ":", "[", "UserKNNCFRecommender", ",", "\n", "ItemKNNCFRecommender", ",", "\n", "]", ",", "\n", "\"ML_graph\"", ":", "[", "P3alphaRecommender", ",", "\n", "RP3betaRecommender", ",", "\n", "EASE_R_Recommender", ",", "\n", "SLIM_BPR_Cython", ",", "\n", "SLIMElasticNetRecommender", ",", "\n", "MatrixFactorization_BPR_Cython", ",", "\n", "MatrixFactorization_FunkSVD_Cython", ",", "\n", "PureSVDRecommender", ",", "\n", "NMFRecommender", ",", "\n", "IALSRecommender", ",", "\n", "]", ",", "\n", "\"CBF\"", ":", "[", "ItemKNNCBFRecommender", ",", "\n", "UserKNNCBFRecommender", ",", "\n", "]", ",", "\n", "\"CFCBF\"", ":", "[", "ItemKNN_CFCBF_Hybrid_Recommender", ",", "\n", "UserKNN_CFCBF_Hybrid_Recommender", ",", "\n", "]", ",", "\n", "\"neural\"", ":", "other_algorithm_list", ",", "\n", "}", "\n", "\n", "\n", "for", "group_label", ",", "group_alg_list", "in", "algorithm_type_group", ".", "items", "(", ")", ":", "\n", "# Create a dataframe with only algorithms in group", "\n", "            ", "group_label_list", "=", "[", "_get_printable_recommender_name", "(", "recommender_class", ".", "RECOMMENDER_NAME", ")", "for", "recommender_class", "in", "group_alg_list", "]", "\n", "\n", "# The group is matched if the index contains the label of the algorithm + a space or ends (to account for ItemKNN CF cosine and such)", "\n", "group_entries_flag", "=", "hyperparameters_dataframe", ".", "index", ".", "get_level_values", "(", "\"algorithm_row_label\"", ")", ".", "str", ".", "contains", "(", "'|'", ".", "join", "(", "[", "\"{label}\\s|{label}$\"", ".", "format", "(", "label", "=", "label", ")", "for", "label", "in", "group_label_list", "]", ")", ")", "\n", "group_hyperparameters_dataframe", "=", "hyperparameters_dataframe", "[", "group_entries_flag", "]", "\n", "\n", "if", "len", "(", "group_hyperparameters_dataframe", ")", ">", "0", ":", "\n", "                ", "hyperparameters_file", "=", "open", "(", "result_folder_path", "+", "algorithm_name", "+", "file_name_suffix", "+", "\"_latex_hyperparameters_\"", "+", "group_label", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "_print_latex_hyperparameters_from_dataframe", "(", "group_hyperparameters_dataframe", ",", "hyperparameters_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.ResultFolderLoader._remove_duplicate_group_separator": [[494, 503], ["result_dataframe.index.str.startswith", "numpy.logical_and", "numpy.append", "numpy.logical_not"], "function", ["None"], ["", "", "", "", "def", "_remove_duplicate_group_separator", "(", "result_dataframe", ")", ":", "\n", "\n", "        ", "group_separator_flag", "=", "result_dataframe", ".", "index", ".", "str", ".", "startswith", "(", "'algorithm_group'", ")", "\n", "duplicate_consecutive_separators", "=", "np", ".", "logical_and", "(", "group_separator_flag", "[", ":", "-", "1", "]", ",", "group_separator_flag", "[", "1", ":", "]", ")", "\n", "duplicate_consecutive_separators", "=", "np", ".", "append", "(", "duplicate_consecutive_separators", ",", "False", ")", "\n", "\n", "result_dataframe", "=", "result_dataframe", "[", "np", ".", "logical_not", "(", "duplicate_consecutive_separators", ")", "]", "\n", "\n", "return", "result_dataframe", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.logical_iff": [[13, 21], ["numpy.logical_or", "numpy.logical_or", "numpy.logical_and", "numpy.logical_not", "numpy.logical_not"], "function", ["None"], ["def", "logical_iff", "(", "a", ",", "b", ")", ":", "\n", "\n", "    ", "a_or_not_b", "=", "np", ".", "logical_or", "(", "a", ",", "np", ".", "logical_not", "(", "b", ")", ")", "\n", "not_a_or_b", "=", "np", ".", "logical_or", "(", "np", ".", "logical_not", "(", "a", ")", ",", "b", ")", "\n", "\n", "xnor", "=", "np", ".", "logical_and", "(", "a_or_not_b", ",", "not_a_or_b", ")", "\n", "\n", "return", "xnor", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.logical_implies": [[23, 25], ["numpy.logical_or", "numpy.logical_not"], "function", ["None"], ["", "def", "logical_implies", "(", "p", ",", "q", ")", ":", "\n", "    ", "return", "np", ".", "logical_or", "(", "np", ".", "logical_not", "(", "p", ")", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.logical_implies_false_count": [[26, 28], ["numpy.logical_not().sum", "numpy.logical_not", "print_negative_items_stats.logical_implies"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.logical_implies"], ["", "def", "logical_implies_false_count", "(", "p", ",", "q", ")", ":", "\n", "    ", "return", "np", ".", "logical_not", "(", "logical_implies", "(", "p", ",", "q", ")", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.print_implication_result": [[30, 44], ["numpy.sum", "print_negative_items_stats.logical_implies_false_count", "print"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.logical_implies_false_count"], ["", "def", "print_implication_result", "(", "string_message", ",", "p", ",", "q", ")", ":", "\n", "\n", "    ", "p_true_count", "=", "np", ".", "sum", "(", "p", ")", "\n", "#", "\n", "# implication_flag_array = logical_implies(p, q)", "\n", "\n", "# Count how many times the implication is false", "\n", "# So, how many times P is True but Q is false", "\n", "false_count", "=", "logical_implies_false_count", "(", "p", ",", "q", ")", "\n", "\n", "print", "(", "\"{}, False for {}/{} ({:.2f} %) users\"", ".", "format", "(", "string_message", ",", "\n", "false_count", ",", "\n", "p_true_count", ",", "\n", "false_count", "/", "p_true_count", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.print_iff_result": [[48, 60], ["print_negative_items_stats.logical_iff", "logical_iff.sum", "print", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.logical_iff"], ["", "def", "print_iff_result", "(", "string_message", ",", "p", ",", "q", ")", ":", "\n", "\n", "    ", "iff_outcome", "=", "logical_iff", "(", "p", ",", "q", ")", "\n", "\n", "true_count", "=", "iff_outcome", ".", "sum", "(", ")", "\n", "false_count", "=", "len", "(", "iff_outcome", ")", "-", "true_count", "\n", "\n", "print", "(", "\"{}, True for {}/{} ({:.2f} %) users, False for {}\"", ".", "format", "(", "string_message", ",", "\n", "true_count", ",", "\n", "len", "(", "p", ")", ",", "\n", "true_count", "/", "len", "(", "p", ")", "*", "100", ",", "\n", "false_count", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.print_negative_items_stats": [[66, 144], ["URM_train.copy.copy", "URM_validation.copy.copy", "URM_test.copy.copy", "URM_test_negative.copy.copy", "scipy.csr_matrix", "numpy.ediff1d", "print", "print", "print", "scipy.csr_matrix", "numpy.ediff1d", "numpy.ediff1d", "numpy.array_equal", "print_negative_items_stats.print_iff_result", "print_negative_items_stats.print_iff_result", "print_negative_items_stats.print_iff_result", "assert_disjoint_matrices", "assert_disjoint_matrices", "print", "numpy.ones_like", "numpy.ones_like", "scipy.csr_matrix", "numpy.ediff1d", "print", "print_negative_items_stats.logical_iff", "numpy.array", "numpy.max", "numpy.min", "numpy.min", "numpy.sum", "traceback.print_exc", "traceback.print_exc", "URM_test_negative.copy.multiply", "scipy.csr_matrix", "numpy.array", "numpy.array", "numpy.max", "numpy.min", "numpy.min", "numpy.sum", "numpy.max", "numpy.max"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.print_iff_result", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.print_iff_result", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.print_iff_result", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.assertions_on_data_for_experiments.assert_disjoint_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.assertions_on_data_for_experiments.assert_disjoint_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Utils.print_negative_items_stats.logical_iff"], ["", "def", "print_negative_items_stats", "(", "URM_train", ",", "URM_validation", ",", "URM_test", ",", "URM_test_negative", ")", ":", "\n", "\n", "    ", "URM_train", "=", "URM_train", ".", "copy", "(", ")", "\n", "URM_validation", "=", "URM_validation", ".", "copy", "(", ")", "\n", "URM_test", "=", "URM_test", ".", "copy", "(", ")", "\n", "URM_test_negative", "=", "URM_test_negative", ".", "copy", "(", ")", "\n", "\n", "import", "traceback", "\n", "\n", "URM_test_negative_csr", "=", "sps", ".", "csr_matrix", "(", "URM_test_negative", ")", "\n", "\n", "user_negatives", "=", "np", ".", "ediff1d", "(", "URM_test_negative_csr", ".", "indptr", ")", "\n", "\n", "print", "(", "\"Max num negatives is {}, min num negatives is {} (nonzero is {}), users with less than max are {} of {}\"", ".", "format", "(", "np", ".", "max", "(", "user_negatives", ")", ",", "\n", "np", ".", "min", "(", "user_negatives", ")", ",", "\n", "np", ".", "min", "(", "user_negatives", "[", "user_negatives", "!=", "0", "]", ")", ",", "\n", "np", ".", "sum", "(", "user_negatives", "!=", "np", ".", "max", "(", "user_negatives", ")", ")", ",", "\n", "URM_test_negative_csr", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "from", "recsys", ".", "Utils", ".", "assertions_on_data_for_experiments", "import", "assert_disjoint_matrices", "\n", "\n", "remove_overlapping_data_flag", "=", "False", "\n", "\n", "print", "(", "\"Intersection between URM_test_negative and URM_train + URM_validation\"", ")", "\n", "try", ":", "\n", "        ", "assert_disjoint_matrices", "(", "[", "URM_train", "+", "URM_validation", ",", "URM_test_negative", "]", ")", "\n", "", "except", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "remove_overlapping_data_flag", "=", "True", "\n", "\n", "\n", "", "print", "(", "\"Intersection between URM_test_negative and URM_test\"", ")", "\n", "try", ":", "\n", "        ", "assert_disjoint_matrices", "(", "[", "URM_test", ",", "URM_test_negative", "]", ")", "\n", "", "except", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "remove_overlapping_data_flag", "=", "True", "\n", "\n", "\n", "", "if", "remove_overlapping_data_flag", ":", "\n", "\n", "        ", "print", "(", "\"Removing overlapping data from URM_negative\"", ")", "\n", "URM_positive", "=", "URM_train", "+", "URM_validation", "+", "URM_test", "\n", "URM_positive", ".", "data", "=", "np", ".", "ones_like", "(", "URM_positive", ".", "data", ")", "\n", "\n", "URM_test_negative", ".", "data", "=", "np", ".", "ones_like", "(", "URM_test_negative", ".", "data", ")", "\n", "\n", "# Subtract from the URM_test_negative train items", "\n", "# A - B = B - A*B", "\n", "\n", "URM_test_negative_not_positive", "=", "URM_test_negative", "-", "URM_test_negative", ".", "multiply", "(", "URM_positive", ")", "\n", "URM_test_negative_not_positive", "=", "sps", ".", "csr_matrix", "(", "URM_test_negative_not_positive", ")", "\n", "\n", "user_negatives_not_positives", "=", "np", ".", "ediff1d", "(", "URM_test_negative_not_positive", ".", "indptr", ")", "\n", "\n", "print", "(", "\"URM test negatives non overlapping with positives: Max num negatives is {}, min num negatives is {} (nonzero is {}), users with less than max are {} of {}\"", ".", "format", "(", "np", ".", "max", "(", "user_negatives_not_positives", ")", ",", "\n", "np", ".", "min", "(", "user_negatives_not_positives", ")", ",", "\n", "np", ".", "min", "(", "user_negatives_not_positives", "[", "user_negatives_not_positives", "!=", "0", "]", ")", ",", "\n", "np", ".", "sum", "(", "user_negatives_not_positives", "!=", "np", ".", "max", "(", "user_negatives_not_positives", ")", ")", ",", "\n", "URM_test_negative_csr", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "\n", "\n", "", "URM_train_all", "=", "URM_train", "+", "URM_validation", "\n", "URM_train_all", "=", "sps", ".", "csr_matrix", "(", "URM_train_all", ")", "\n", "user_train_profile", "=", "np", ".", "ediff1d", "(", "URM_train_all", ".", "indptr", ")", "\n", "\n", "user_test_profile", "=", "np", ".", "ediff1d", "(", "sps", ".", "csr_matrix", "(", "URM_test", ")", ".", "indptr", ")", "\n", "\n", "\n", "assert", "np", ".", "array_equal", "(", "logical_iff", "(", "np", ".", "array", "(", "[", "False", ",", "False", ",", "True", ",", "True", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "False", ",", "True", ",", "False", ",", "True", "]", ")", ")", ",", "\n", "np", ".", "array", "(", "[", "True", ",", "False", ",", "False", ",", "True", "]", ")", ")", "\n", "\n", "\n", "print_iff_result", "(", "\"User presence in train data IFF presence in test\"", ",", "user_train_profile", ">", "0", ",", "user_test_profile", ">", "0", ")", "\n", "print_iff_result", "(", "\"User presence in test data IFF presence in negative items test\"", ",", "user_test_profile", ">", "0", ",", "user_negatives", ">", "0", ")", "\n", "print_iff_result", "(", "\"User presence in train data IFF presence in negative items test\"", ",", "user_train_profile", ">", "0", ",", "user_negatives", ">", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.GraphBased.RP3betaRecommender.RP3betaRecommender.__init__": [[21, 23], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "RP3betaRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.GraphBased.RP3betaRecommender.RP3betaRecommender.__str__": [[25, 29], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"RP3beta(alpha={}, beta={}, min_rating={}, topk={}, implicit={}, normalize_similarity={})\"", ".", "format", "(", "self", ".", "alpha", ",", "\n", "self", ".", "beta", ",", "self", ".", "min_rating", ",", "self", ".", "topK", ",", "\n", "self", ".", "implicit", ",", "self", ".", "normalize_similarity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.GraphBased.RP3betaRecommender.RP3betaRecommender.fit": [[30, 152], ["sklearn.preprocessing.normalize", "RP3betaRecommender.RP3betaRecommender.URM_train.transpose", "numpy.ones", "numpy.array().ravel", "numpy.zeros", "numpy.power", "sklearn.preprocessing.normalize", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time.time", "range", "scipy.csr_matrix", "recsys.Base.Recommender_utils.check_matrix", "RP3betaRecommender.RP3betaRecommender.URM_train.eliminate_zeros", "Pui.power.power.power", "Piu.power.power.power", "similarity_block.toarray.toarray.toarray", "range", "sklearn.preprocessing.normalize", "recsys.Base.Recommender_utils.similarityMatrixTopK", "numpy.ones", "numpy.array", "numpy.multiply", "range", "RP3betaRecommender.RP3betaRecommender._print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "RP3betaRecommender.RP3betaRecommender.sum", "len", "time.time", "numpy.multiply.argsort", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "float", "numpy.zeros", "numpy.zeros", "numpy.zeros", "float", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "fit", "(", "self", ",", "alpha", "=", "1.", ",", "beta", "=", "0.6", ",", "min_rating", "=", "0", ",", "topK", "=", "100", ",", "implicit", "=", "False", ",", "normalize_similarity", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "min_rating", "=", "min_rating", "\n", "self", ".", "topK", "=", "topK", "\n", "self", ".", "implicit", "=", "implicit", "\n", "self", ".", "normalize_similarity", "=", "normalize_similarity", "\n", "\n", "\n", "# if X.dtype != np.float32:", "\n", "#     print(\"RP3beta fit: For memory usage reasons, we suggest to use np.float32 as dtype for the dataset\")", "\n", "\n", "if", "self", ".", "min_rating", ">", "0", ":", "\n", "            ", "self", ".", "URM_train", ".", "data", "[", "self", ".", "URM_train", ".", "data", "<", "self", ".", "min_rating", "]", "=", "0", "\n", "self", ".", "URM_train", ".", "eliminate_zeros", "(", ")", "\n", "if", "self", ".", "implicit", ":", "\n", "                ", "self", ".", "URM_train", ".", "data", "=", "np", ".", "ones", "(", "self", ".", "URM_train", ".", "data", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "#Pui is the row-normalized urm", "\n", "", "", "Pui", "=", "normalize", "(", "self", ".", "URM_train", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", "\n", "\n", "#Piu is the column-normalized, \"boolean\" urm transposed", "\n", "X_bool", "=", "self", ".", "URM_train", ".", "transpose", "(", "copy", "=", "True", ")", "\n", "X_bool", ".", "data", "=", "np", ".", "ones", "(", "X_bool", ".", "data", ".", "size", ",", "np", ".", "float32", ")", "\n", "\n", "# Taking the degree of each item to penalize top popular", "\n", "# Some rows might be zero, make sure their degree remains zero", "\n", "X_bool_sum", "=", "np", ".", "array", "(", "X_bool", ".", "sum", "(", "axis", "=", "1", ")", ")", ".", "ravel", "(", ")", "\n", "\n", "degree", "=", "np", ".", "zeros", "(", "self", ".", "URM_train", ".", "shape", "[", "1", "]", ")", "\n", "\n", "nonZeroMask", "=", "X_bool_sum", "!=", "0.0", "\n", "\n", "degree", "[", "nonZeroMask", "]", "=", "np", ".", "power", "(", "X_bool_sum", "[", "nonZeroMask", "]", ",", "-", "self", ".", "beta", ")", "\n", "\n", "#ATTENTION: axis is still 1 because i transposed before the normalization", "\n", "Piu", "=", "normalize", "(", "X_bool", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", "\n", "del", "(", "X_bool", ")", "\n", "\n", "# Alfa power", "\n", "if", "self", ".", "alpha", "!=", "1.", ":", "\n", "            ", "Pui", "=", "Pui", ".", "power", "(", "self", ".", "alpha", ")", "\n", "Piu", "=", "Piu", ".", "power", "(", "self", ".", "alpha", ")", "\n", "\n", "# Final matrix is computed as Pui * Piu * Pui", "\n", "# Multiplication unpacked for memory usage reasons", "\n", "", "block_dim", "=", "200", "\n", "d_t", "=", "Piu", "\n", "\n", "\n", "# Use array as it reduces memory requirements compared to lists", "\n", "dataBlock", "=", "10000000", "\n", "\n", "rows", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "cols", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "values", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "numCells", "=", "0", "\n", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "start_time_printBatch", "=", "start_time", "\n", "\n", "for", "current_block_start_row", "in", "range", "(", "0", ",", "Pui", ".", "shape", "[", "1", "]", ",", "block_dim", ")", ":", "\n", "\n", "            ", "if", "current_block_start_row", "+", "block_dim", ">", "Pui", ".", "shape", "[", "1", "]", ":", "\n", "                ", "block_dim", "=", "Pui", ".", "shape", "[", "1", "]", "-", "current_block_start_row", "\n", "\n", "", "similarity_block", "=", "d_t", "[", "current_block_start_row", ":", "current_block_start_row", "+", "block_dim", ",", ":", "]", "*", "Pui", "\n", "similarity_block", "=", "similarity_block", ".", "toarray", "(", ")", "\n", "\n", "for", "row_in_block", "in", "range", "(", "block_dim", ")", ":", "\n", "                ", "row_data", "=", "np", ".", "multiply", "(", "similarity_block", "[", "row_in_block", ",", ":", "]", ",", "degree", ")", "\n", "row_data", "[", "current_block_start_row", "+", "row_in_block", "]", "=", "0", "\n", "\n", "best", "=", "row_data", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "topK", "]", "\n", "\n", "notZerosMask", "=", "row_data", "[", "best", "]", "!=", "0.0", "\n", "\n", "values_to_add", "=", "row_data", "[", "best", "]", "[", "notZerosMask", "]", "\n", "cols_to_add", "=", "best", "[", "notZerosMask", "]", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "values_to_add", ")", ")", ":", "\n", "\n", "                    ", "if", "numCells", "==", "len", "(", "rows", ")", ":", "\n", "                        ", "rows", "=", "np", ".", "concatenate", "(", "(", "rows", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "cols", "=", "np", ".", "concatenate", "(", "(", "cols", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "\n", "\n", "", "rows", "[", "numCells", "]", "=", "current_block_start_row", "+", "row_in_block", "\n", "cols", "[", "numCells", "]", "=", "cols_to_add", "[", "index", "]", "\n", "values", "[", "numCells", "]", "=", "values_to_add", "[", "index", "]", "\n", "\n", "numCells", "+=", "1", "\n", "\n", "\n", "", "", "if", "time", ".", "time", "(", ")", "-", "start_time_printBatch", ">", "60", ":", "\n", "                ", "self", ".", "_print", "(", "\"Processed {} ( {:.2f}% ) in {:.2f} minutes. Rows per second: {:.0f}\"", ".", "format", "(", "\n", "current_block_start_row", ",", "\n", "100.0", "*", "float", "(", "current_block_start_row", ")", "/", "Pui", ".", "shape", "[", "1", "]", ",", "\n", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ",", "\n", "float", "(", "current_block_start_row", ")", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_printBatch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "self", ".", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "values", "[", ":", "numCells", "]", ",", "(", "rows", "[", ":", "numCells", "]", ",", "cols", "[", ":", "numCells", "]", ")", ")", ",", "shape", "=", "(", "Pui", ".", "shape", "[", "1", "]", ",", "Pui", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "if", "self", ".", "normalize_similarity", ":", "\n", "            ", "self", ".", "W_sparse", "=", "normalize", "(", "self", ".", "W_sparse", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "", "if", "self", ".", "topK", "!=", "False", ":", "\n", "            ", "self", ".", "W_sparse", "=", "similarityMatrixTopK", "(", "self", ".", "W_sparse", ",", "k", "=", "self", ".", "topK", ")", "\n", "\n", "\n", "", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.GraphBased.P3alphaRecommender.P3alphaRecommender.__init__": [[24, 26], ["recsys.Base.BaseSimilarityMatrixRecommender.BaseItemSimilarityMatrixRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "URM_train", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "P3alphaRecommender", ",", "self", ")", ".", "__init__", "(", "URM_train", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.GraphBased.P3alphaRecommender.P3alphaRecommender.__str__": [[28, 32], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"P3alpha(alpha={}, min_rating={}, topk={}, implicit={}, normalize_similarity={})\"", ".", "format", "(", "self", ".", "alpha", ",", "\n", "self", ".", "min_rating", ",", "self", ".", "topK", ",", "self", ".", "implicit", ",", "\n", "self", ".", "normalize_similarity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.GraphBased.P3alphaRecommender.P3alphaRecommender.fit": [[33, 142], ["sklearn.preprocessing.normalize", "P3alphaRecommender.P3alphaRecommender.URM_train.transpose", "numpy.ones", "sklearn.preprocessing.normalize", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time.time", "range", "scipy.csr_matrix", "recsys.Base.Recommender_utils.check_matrix", "P3alphaRecommender.P3alphaRecommender.URM_train.eliminate_zeros", "Pui.power.power.power", "Piu.power.power.power", "similarity_block.toarray.toarray.toarray", "range", "sklearn.preprocessing.normalize", "recsys.Base.Recommender_utils.similarityMatrixTopK", "numpy.ones", "range", "P3alphaRecommender.P3alphaRecommender._print", "sys.stdout.flush", "sys.stderr.flush", "time.time", "len", "time.time", "row_data.argsort", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "float", "numpy.zeros", "numpy.zeros", "numpy.zeros", "float", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.check_matrix", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Base.Recommender_utils.similarityMatrixTopK", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchAbstractClass._print"], ["", "def", "fit", "(", "self", ",", "topK", "=", "100", ",", "alpha", "=", "1.", ",", "min_rating", "=", "0", ",", "implicit", "=", "False", ",", "normalize_similarity", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "topK", "=", "topK", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "min_rating", "=", "min_rating", "\n", "self", ".", "implicit", "=", "implicit", "\n", "self", ".", "normalize_similarity", "=", "normalize_similarity", "\n", "\n", "\n", "#", "\n", "# if X.dtype != np.float32:", "\n", "#     print(\"P3ALPHA fit: For memory usage reasons, we suggest to use np.float32 as dtype for the dataset\")", "\n", "\n", "if", "self", ".", "min_rating", ">", "0", ":", "\n", "            ", "self", ".", "URM_train", ".", "data", "[", "self", ".", "URM_train", ".", "data", "<", "self", ".", "min_rating", "]", "=", "0", "\n", "self", ".", "URM_train", ".", "eliminate_zeros", "(", ")", "\n", "if", "self", ".", "implicit", ":", "\n", "                ", "self", ".", "URM_train", ".", "data", "=", "np", ".", "ones", "(", "self", ".", "URM_train", ".", "data", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "#Pui is the row-normalized urm", "\n", "", "", "Pui", "=", "normalize", "(", "self", ".", "URM_train", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", "\n", "\n", "#Piu is the column-normalized, \"boolean\" urm transposed", "\n", "X_bool", "=", "self", ".", "URM_train", ".", "transpose", "(", "copy", "=", "True", ")", "\n", "X_bool", ".", "data", "=", "np", ".", "ones", "(", "X_bool", ".", "data", ".", "size", ",", "np", ".", "float32", ")", "\n", "#ATTENTION: axis is still 1 because i transposed before the normalization", "\n", "Piu", "=", "normalize", "(", "X_bool", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", "\n", "del", "(", "X_bool", ")", "\n", "\n", "# Alfa power", "\n", "if", "self", ".", "alpha", "!=", "1.", ":", "\n", "            ", "Pui", "=", "Pui", ".", "power", "(", "self", ".", "alpha", ")", "\n", "Piu", "=", "Piu", ".", "power", "(", "self", ".", "alpha", ")", "\n", "\n", "# Final matrix is computed as Pui * Piu * Pui", "\n", "# Multiplication unpacked for memory usage reasons", "\n", "", "block_dim", "=", "200", "\n", "d_t", "=", "Piu", "\n", "\n", "# Use array as it reduces memory requirements compared to lists", "\n", "dataBlock", "=", "10000000", "\n", "\n", "rows", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "cols", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "values", "=", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "numCells", "=", "0", "\n", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "start_time_printBatch", "=", "start_time", "\n", "\n", "for", "current_block_start_row", "in", "range", "(", "0", ",", "Pui", ".", "shape", "[", "1", "]", ",", "block_dim", ")", ":", "\n", "\n", "            ", "if", "current_block_start_row", "+", "block_dim", ">", "Pui", ".", "shape", "[", "1", "]", ":", "\n", "                ", "block_dim", "=", "Pui", ".", "shape", "[", "1", "]", "-", "current_block_start_row", "\n", "\n", "", "similarity_block", "=", "d_t", "[", "current_block_start_row", ":", "current_block_start_row", "+", "block_dim", ",", ":", "]", "*", "Pui", "\n", "similarity_block", "=", "similarity_block", ".", "toarray", "(", ")", "\n", "\n", "for", "row_in_block", "in", "range", "(", "block_dim", ")", ":", "\n", "                ", "row_data", "=", "similarity_block", "[", "row_in_block", ",", ":", "]", "\n", "row_data", "[", "current_block_start_row", "+", "row_in_block", "]", "=", "0", "\n", "\n", "best", "=", "row_data", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "topK", "]", "\n", "\n", "notZerosMask", "=", "row_data", "[", "best", "]", "!=", "0.0", "\n", "\n", "values_to_add", "=", "row_data", "[", "best", "]", "[", "notZerosMask", "]", "\n", "cols_to_add", "=", "best", "[", "notZerosMask", "]", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "values_to_add", ")", ")", ":", "\n", "\n", "                    ", "if", "numCells", "==", "len", "(", "rows", ")", ":", "\n", "                        ", "rows", "=", "np", ".", "concatenate", "(", "(", "rows", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "cols", "=", "np", ".", "concatenate", "(", "(", "cols", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values", ",", "np", ".", "zeros", "(", "dataBlock", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "\n", "\n", "", "rows", "[", "numCells", "]", "=", "current_block_start_row", "+", "row_in_block", "\n", "cols", "[", "numCells", "]", "=", "cols_to_add", "[", "index", "]", "\n", "values", "[", "numCells", "]", "=", "values_to_add", "[", "index", "]", "\n", "\n", "numCells", "+=", "1", "\n", "\n", "\n", "", "", "if", "time", ".", "time", "(", ")", "-", "start_time_printBatch", ">", "60", ":", "\n", "                ", "self", ".", "_print", "(", "\"Processed {} ( {:.2f}% ) in {:.2f} minutes. Rows per second: {:.0f}\"", ".", "format", "(", "\n", "current_block_start_row", ",", "\n", "100.0", "*", "float", "(", "current_block_start_row", ")", "/", "Pui", ".", "shape", "[", "1", "]", ",", "\n", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ",", "\n", "float", "(", "current_block_start_row", ")", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "start_time_printBatch", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "self", ".", "W_sparse", "=", "sps", ".", "csr_matrix", "(", "(", "values", "[", ":", "numCells", "]", ",", "(", "rows", "[", ":", "numCells", "]", ",", "cols", "[", ":", "numCells", "]", ")", ")", ",", "shape", "=", "(", "Pui", ".", "shape", "[", "1", "]", ",", "Pui", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "\n", "if", "self", ".", "normalize_similarity", ":", "\n", "            ", "self", ".", "W_sparse", "=", "normalize", "(", "self", ".", "W_sparse", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "", "if", "self", ".", "topK", "!=", "False", ":", "\n", "            ", "self", ".", "W_sparse", "=", "similarityMatrixTopK", "(", "self", ".", "W_sparse", ",", "k", "=", "self", ".", "topK", ")", "\n", "\n", "", "self", ".", "W_sparse", "=", "check_matrix", "(", "self", ".", "W_sparse", ",", "format", "=", "'csr'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.__init__": [[12, 29], ["data_reader", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items", "range", "len", "p", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_reader", ",", "preprocessing", "=", "None", ",", "preprocessing_params", "=", "None", ")", ":", "\n", "# self.data_reader = data_reader", "\n", "        ", "data_splitter", "=", "data_reader", "(", ")", "\n", "\n", "if", "preprocessing", "is", "not", "None", ":", "\n", "            ", "assert", "preprocessing_params", "is", "not", "None", "and", "len", "(", "preprocessing", ")", "==", "len", "(", "preprocessing_params", ")", ",", "\"Please, provide preprocessing parameters for each preprocessing reader.\"", "\n", "\n", "for", "pi", "in", "range", "(", "len", "(", "preprocessing", ")", ")", ":", "\n", "                ", "p", "=", "preprocessing", "[", "pi", "]", "\n", "params", "=", "preprocessing_params", "[", "pi", "]", "\n", "data_splitter", "=", "p", "(", "data_splitter", ",", "**", "params", ")", "\n", "\n", "", "", "self", ".", "data_splitter", "=", "DataSplitter_Cold_items", "(", "data_splitter", ")", "\n", "\n", "self", ".", "available_ICMs", "=", "{", "}", "\n", "self", ".", "feature_mappers", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data": [[30, 32], ["DataLoader.DataLoader.data_splitter.load_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data"], ["", "def", "load_data", "(", "self", ",", "save_folder_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_splitter", ".", "load_data", "(", "save_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_dataset_name": [[33, 35], ["DataLoader.DataLoader.data_splitter._get_dataset_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter.DataSplitter._get_dataset_name"], ["", "def", "get_dataset_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_splitter", ".", "_get_dataset_name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_splitter": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_splitter", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_splitter", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_both_splits": [[39, 41], ["DataLoader.DataLoader.data_splitter.get_both_splits"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_both_splits"], ["", "def", "get_both_splits", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_splitter", ".", "get_both_splits", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_cold_split": [[42, 44], ["DataLoader.DataLoader.data_splitter.get_cold_split"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_cold_split"], ["", "def", "get_cold_split", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_splitter", ".", "get_cold_split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_warm_split": [[45, 47], ["DataLoader.DataLoader.data_splitter.get_warm_split"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_warm_split"], ["", "def", "get_warm_split", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_splitter", ".", "get_warm_split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_ICM_from_name": [[48, 57], ["DataLoader.DataLoader.available_ICMs.get", "DataLoader.DataLoader.data_splitter.get_ICM_from_name", "DataLoader.DataLoader.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_ICM_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "ICM", "=", "self", ".", "available_ICMs", ".", "get", "(", "ICM_name", ")", "\n", "\n", "if", "ICM", "is", "None", ":", "\n", "            ", "ICM", "=", "self", ".", "data_splitter", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "self", ".", "available_ICMs", "[", "ICM_name", "]", "=", "ICM", ".", "copy", "(", ")", "\n", "self", ".", "feature_mappers", "[", "ICM_name", "]", "=", "self", ".", "data_splitter", ".", "SPLIT_ICM_MAPPER_DICT", "[", "ICM_name", "]", "\n", "\n", "", "return", "ICM", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_original_ICM_train_from_name": [[58, 60], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_original_ICM_train_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This method is not implemented in the parent class.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_ICM_train_from_name": [[61, 81], ["DataLoader.DataLoader.get_original_ICM_train_from_name", "DataLoader.DataLoader.data_splitter._assert_is_initialized", "utils.recsys.remove_ICM_item_interactions", "numpy.alltrue", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "len", "URM_test.tocsc"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_original_ICM_train_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_k_fold_random.DataSplitter_k_fold_random._assert_is_initialized", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.remove_ICM_item_interactions"], ["", "def", "get_ICM_train_from_name", "(", "self", ",", "ICM_name", ",", "return_original", "=", "False", ")", ":", "\n", "        ", "original_ICM_train", "=", "self", ".", "get_original_ICM_train_from_name", "(", "ICM_name", ")", "\n", "\n", "# Remove cold items interactions from the ICM", "\n", "self", ".", "data_splitter", ".", "_assert_is_initialized", "(", ")", "\n", "URM_test", "=", "self", ".", "data_splitter", ".", "SPLIT_URM_DICT", "[", "\"URM_test\"", "]", "\n", "\n", "test_items", "=", "np", ".", "ediff1d", "(", "URM_test", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "test_items", "=", "np", ".", "arange", "(", "len", "(", "test_items", ")", ")", "[", "test_items", "]", "\n", "ICM_train", "=", "remove_ICM_item_interactions", "(", "original_ICM_train", ",", "test_items", ")", "\n", "\n", "# Check if the removal was correct", "\n", "no_ICM_interaction_item_mask", "=", "np", ".", "ediff1d", "(", "ICM_train", ".", "indptr", ")", "==", "0", "\n", "assert", "np", ".", "alltrue", "(", "\n", "no_ICM_interaction_item_mask", "[", "test_items", "]", ")", ",", "\"Test items were not correctly removed from the train ICM.\"", "\n", "\n", "if", "return_original", ":", "\n", "            ", "return", "ICM_train", ",", "original_ICM_train", "\n", "\n", "", "return", "ICM_train", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_feature_to_index_mapper_from_name": [[82, 84], ["DataLoader.DataLoader.feature_mappers.get"], "methods", ["None"], ["", "def", "get_feature_to_index_mapper_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "return", "self", ".", "feature_mappers", ".", "get", "(", "ICM_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_index_to_feature_mapper_from_name": [[85, 88], ["DataLoader.DataLoader.feature_mappers.get"], "methods", ["None"], ["", "def", "get_index_to_feature_mapper_from_name", "(", "self", ",", "ICM_name", ")", ":", "\n", "        ", "mapper", "=", "self", ".", "feature_mappers", ".", "get", "(", "ICM_name", ")", "\n", "return", "{", "mapper", "[", "k", "]", ":", "k", "for", "k", "in", "mapper", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.TheMoviesDatasetLoader.__init__": [[92, 94], ["DataLoader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "preprocessing", "=", "None", ",", "preprocessing_params", "=", "None", ")", ":", "\n", "        ", "super", "(", "TheMoviesDatasetLoader", ",", "self", ")", ".", "__init__", "(", "TheMoviesDatasetReader", ",", "preprocessing", ",", "preprocessing_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.TheMoviesDatasetLoader.get_ICM_from_name": [[95, 97], ["DataLoader.DataLoader.get_ICM_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name"], ["", "def", "get_ICM_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_metadata'", ")", ":", "\n", "        ", "return", "super", "(", "TheMoviesDatasetLoader", ",", "self", ")", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.TheMoviesDatasetLoader.get_original_ICM_train_from_name": [[98, 114], ["DataLoader.TheMoviesDatasetLoader.get_ICM_from_name", "numpy.array", "numpy.ediff1d", "list", "numpy.arange", "DataLoader.TheMoviesDatasetLoader.data_splitter.SPLIT_ICM_MAPPER_DICT[].keys", "len", "range", "DataLoader.TheMoviesDatasetLoader.tocsc", "len"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name"], ["", "def", "get_original_ICM_train_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_metadata'", ")", ":", "\n", "# Filter the ICM removing all the features with less than 5 interactions", "\n", "        ", "ICM", "=", "self", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "features_with_more_than_5_interactions", "=", "np", ".", "ediff1d", "(", "ICM", ".", "tocsc", "(", ")", ".", "indptr", ")", ">=", "5", "\n", "\n", "original_features", "=", "np", ".", "array", "(", "list", "(", "self", ".", "data_splitter", ".", "SPLIT_ICM_MAPPER_DICT", "[", "ICM_name", "]", ".", "keys", "(", ")", ")", ")", "\n", "filtered_features", "=", "original_features", "[", "features_with_more_than_5_interactions", "]", "\n", "filtered_features_index", "=", "np", ".", "arange", "(", "len", "(", "features_with_more_than_5_interactions", ")", ")", "[", "\n", "features_with_more_than_5_interactions", "]", "\n", "\n", "# self.feature_mappers[ICM_name] = {filtered_features[i]: filtered_features_index[i] for i in", "\n", "#                                   range(len(filtered_features))}", "\n", "\n", "self", ".", "feature_mappers", "[", "ICM_name", "]", "=", "{", "filtered_features", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "filtered_features", ")", ")", "}", "\n", "\n", "return", "ICM", "[", ":", ",", "features_with_more_than_5_interactions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.TheMoviesDatasetLoader.get_ICM_train_from_name": [[115, 117], ["DataLoader.DataLoader.get_ICM_train_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name"], ["", "def", "get_ICM_train_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_metadata'", ",", "return_original", "=", "False", ")", ":", "\n", "        ", "return", "super", "(", "TheMoviesDatasetLoader", ",", "self", ")", ".", "get_ICM_train_from_name", "(", "ICM_name", ",", "return_original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.CiteULike_aLoader.__init__": [[121, 123], ["DataLoader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "preprocessing", "=", "None", ",", "preprocessing_params", "=", "None", ")", ":", "\n", "        ", "super", "(", "CiteULike_aLoader", ",", "self", ")", ".", "__init__", "(", "CiteULike_aReader", ",", "preprocessing", ",", "preprocessing_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.CiteULike_aLoader.get_ICM_from_name": [[124, 126], ["DataLoader.DataLoader.get_ICM_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name"], ["", "def", "get_ICM_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_title_abstract'", ")", ":", "\n", "        ", "return", "super", "(", "CiteULike_aLoader", ",", "self", ")", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.CiteULike_aLoader.get_original_ICM_train_from_name": [[127, 129], ["DataLoader.CiteULike_aLoader.get_ICM_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name"], ["", "def", "get_original_ICM_train_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_title_abstract'", ")", ":", "\n", "        ", "return", "self", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.CiteULike_aLoader.get_ICM_train_from_name": [[130, 132], ["DataLoader.DataLoader.get_ICM_train_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name"], ["", "def", "get_ICM_train_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_title_abstract'", ",", "return_original", "=", "False", ")", ":", "\n", "        ", "return", "super", "(", "CiteULike_aLoader", ",", "self", ")", ".", "get_ICM_train_from_name", "(", "ICM_name", ",", "return_original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.__init__": [[138, 144], ["DataLoader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["def", "__init__", "(", "self", ",", "preprocessing", "=", "None", ",", "preprocessing_params", "=", "None", ")", ":", "\n", "        ", "if", "preprocessing", "is", "None", ":", "\n", "            ", "preprocessing", "=", "[", "DataPostprocessing_K_Cores", "]", "\n", "preprocessing_params", "=", "[", "{", "'k_cores_value'", ":", "5", "}", "]", "\n", "\n", "", "super", "(", "XingChallenge2017Loader", ",", "self", ")", ".", "__init__", "(", "XingChallenge2017Reader", ",", "preprocessing", ",", "preprocessing_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name": [[145, 147], ["DataLoader.DataLoader.get_ICM_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name"], ["", "def", "get_ICM_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_all'", ")", ":", "\n", "        ", "return", "super", "(", "XingChallenge2017Loader", ",", "self", ")", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_original_ICM_train_from_name": [[148, 154], ["DataLoader.XingChallenge2017Loader.data_splitter.get_filtered_ICM_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_filtered_ICM_from_name"], ["", "def", "get_original_ICM_train_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_all'", ")", ":", "\n", "        ", "original_ICM_train", ",", "mappers_ICM_train", "=", "self", ".", "data_splitter", ".", "get_filtered_ICM_from_name", "(", "ICM_name", ",", "self", ".", "CATEGORIES", ",", "\n", "self", ".", "EXCEPTIONS", ")", "\n", "\n", "self", ".", "feature_mappers", "[", "ICM_name", "]", "=", "mappers_ICM_train", "[", "1", "]", "\n", "return", "original_ICM_train", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name": [[155, 157], ["DataLoader.DataLoader.get_ICM_train_from_name"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_train_from_name"], ["", "def", "get_ICM_train_from_name", "(", "self", ",", "ICM_name", "=", "'ICM_all'", ",", "return_original", "=", "False", ")", ":", "\n", "        ", "return", "super", "(", "XingChallenge2017Loader", ",", "self", ")", ".", "get_ICM_train_from_name", "(", "ICM_name", ",", "return_original", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.split_XingChallenge2017.main": [[10, 57], ["recsys.Data_manager.XingChallenge2017Reader", "recsys.Data_manager.DataPostprocessing_K_Cores.DataPostprocessing_K_Cores", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.load_data", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_both_splits", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_statistics_URM_warm", "utils.sparse.merge_sparse_matrices().tocsr", "utils.sparse.merge_sparse_matrices().tocsr", "numpy.equal().all", "numpy.equal().all", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_filtered_ICM_from_name", "utils.recsys.remove_ICM_item_interactions", "numpy.alltrue", "print", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "utils.sparse.merge_sparse_matrices", "utils.sparse.merge_sparse_matrices", "numpy.equal", "numpy.equal", "len", "URM_test.tocsc"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_both_splits", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_statistics_URM_warm", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_filtered_ICM_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.remove_ICM_item_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices"], ["def", "main", "(", ")", ":", "\n", "    ", "CATEGORIES", "=", "[", "\"career_level\"", ",", "\"discipline\"", ",", "\"industry\"", ",", "\"country\"", ",", "\"region\"", ",", "\"is_paid\"", ",", "\"employment\"", "]", "\n", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "data_reader", "=", "XingChallenge2017Reader", "(", ")", "\n", "\n", "# Process the dataset to keep only users and items that have at least 5 interactions (5 cores)", "\n", "data_reader_5_cores", "=", "DataPostprocessing_K_Cores", "(", "data_reader", ",", "5", ")", "\n", "\n", "# Split the data into train, validation and test (70, 10, 20) through the DataSplitter", "\n", "# The test and validation splits are cold items splits", "\n", "data_splitter", "=", "DataSplitter_Cold_items", "(", "data_reader_5_cores", ")", "\n", "data_splitter", ".", "load_data", "(", ")", "\n", "\n", "# Get the split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", ",", "URM_train_warm", ",", "URM_validation_warm", "=", "data_splitter", ".", "get_both_splits", "(", ")", "\n", "data_splitter", ".", "get_statistics_URM_warm", "(", ")", "\n", "\n", "# Get the warm items URM", "\n", "URM_train_validation", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "URM_train_validation_warm", "=", "merge_sparse_matrices", "(", "URM_train_warm", ",", "URM_validation_warm", ")", ".", "tocsr", "(", ")", "\n", "assert", "URM_train_validation", ".", "nnz", "==", "URM_train_validation_warm", ".", "nnz", ",", "\"WRONG SPLIT!\"", "\n", "assert", "np", ".", "equal", "(", "URM_train_validation", ".", "indptr", ",", "URM_train_validation_warm", ".", "indptr", ")", ".", "all", "(", ")", ",", "\"WRONG SPLIT!\"", "\n", "assert", "np", ".", "equal", "(", "URM_train_validation", ".", "indices", ",", "URM_train_validation_warm", ".", "indices", ")", ".", "all", "(", ")", ",", "\"WRONG SPLIT!\"", "\n", "\n", "# Get the original ICM", "\n", "ICM_name", "=", "'ICM_all'", "\n", "original_ICM_train", ",", "mapper_ICM_train", "=", "data_splitter", ".", "get_filtered_ICM_from_name", "(", "ICM_name", ",", "CATEGORIES", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "# Remove cold items interactions from the ICM", "\n", "test_items", "=", "np", ".", "ediff1d", "(", "URM_test", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "test_items", "=", "np", ".", "arange", "(", "len", "(", "test_items", ")", ")", "[", "test_items", "]", "\n", "ICM_train", "=", "remove_ICM_item_interactions", "(", "original_ICM_train", ",", "test_items", ")", "\n", "\n", "# Check if the removal was correct", "\n", "no_ICM_interaction_item_mask", "=", "np", ".", "ediff1d", "(", "ICM_train", ".", "indptr", ")", "==", "0", "\n", "assert", "np", ".", "alltrue", "(", "\n", "no_ICM_interaction_item_mask", "[", "test_items", "]", ")", ",", "\"Test items were not correctly removed from the train ICM.\"", "\n", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.split_CiteULike_a.main": [[9, 51], ["recsys.Data_manager.CiteULike_aReader", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.load_data", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_both_splits", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_statistics_URM_warm", "utils.sparse.merge_sparse_matrices().tocsr", "utils.sparse.merge_sparse_matrices().tocsr", "numpy.equal().all", "numpy.equal().all", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_ICM_from_name", "utils.recsys.remove_ICM_item_interactions", "numpy.alltrue", "print", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "utils.sparse.merge_sparse_matrices", "utils.sparse.merge_sparse_matrices", "numpy.equal", "numpy.equal", "len", "URM_test.tocsc"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_both_splits", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_statistics_URM_warm", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.remove_ICM_item_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices"], ["def", "main", "(", ")", ":", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "    ", "data_reader", "=", "CiteULike_aReader", "(", ")", "\n", "\n", "# Split the data into train, validation and test (70, 10, 20) through the DataSplitter", "\n", "# The test and validation splits are cold items splits", "\n", "data_splitter", "=", "DataSplitter_Cold_items", "(", "data_reader", ")", "\n", "data_splitter", ".", "load_data", "(", ")", "\n", "\n", "# Get the split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", ",", "URM_train_warm", ",", "URM_validation_warm", "=", "data_splitter", ".", "get_both_splits", "(", ")", "\n", "data_splitter", ".", "get_statistics_URM_warm", "(", ")", "\n", "\n", "# Get the warm items URM", "\n", "URM_train_validation", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "URM_train_validation_warm", "=", "merge_sparse_matrices", "(", "URM_train_warm", ",", "URM_validation_warm", ")", ".", "tocsr", "(", ")", "\n", "assert", "URM_train_validation", ".", "nnz", "==", "URM_train_validation_warm", ".", "nnz", ",", "\"WRONG SPLIT!\"", "\n", "assert", "np", ".", "equal", "(", "URM_train_validation", ".", "indptr", ",", "URM_train_validation_warm", ".", "indptr", ")", ".", "all", "(", ")", ",", "\"WRONG SPLIT!\"", "\n", "assert", "np", ".", "equal", "(", "URM_train_validation", ".", "indices", ",", "URM_train_validation_warm", ".", "indices", ")", ".", "all", "(", ")", ",", "\"WRONG SPLIT!\"", "\n", "\n", "# Get the original ICM", "\n", "ICM_name", "=", "'ICM_title_abstract'", "\n", "original_ICM_train", "=", "data_splitter", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "# Remove cold items interactions from the ICM", "\n", "test_items", "=", "np", ".", "ediff1d", "(", "URM_test", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "test_items", "=", "np", ".", "arange", "(", "len", "(", "test_items", ")", ")", "[", "test_items", "]", "\n", "ICM_train", "=", "remove_ICM_item_interactions", "(", "original_ICM_train", ",", "test_items", ")", "\n", "\n", "# Check if the removal was correct", "\n", "no_ICM_interaction_item_mask", "=", "np", ".", "ediff1d", "(", "ICM_train", ".", "indptr", ")", "==", "0", "\n", "assert", "np", ".", "alltrue", "(", "\n", "no_ICM_interaction_item_mask", "[", "test_items", "]", ")", ",", "\"Test items were not correctly removed from the train ICM.\"", "\n", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.split_TheMoviesDataset.main": [[9, 55], ["recsys.Data_manager.TheMoviesDatasetReader", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.load_data", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_both_splits", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_statistics_URM_warm", "utils.sparse.merge_sparse_matrices().tocsr", "utils.sparse.merge_sparse_matrices().tocsr", "numpy.equal().all", "numpy.equal().all", "recsys.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_ICM_from_name", "utils.recsys.remove_ICM_item_interactions", "numpy.alltrue", "print", "numpy.ediff1d", "numpy.ediff1d", "numpy.arange", "numpy.ediff1d", "utils.sparse.merge_sparse_matrices", "utils.sparse.merge_sparse_matrices", "numpy.equal", "numpy.equal", "len", "data_splitter.get_ICM_from_name.tocsc", "URM_test.tocsc"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.get_both_splits", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.DataSplitter_Cold_items.DataSplitter_Cold_items.get_statistics_URM_warm", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.XingChallenge2017Loader.get_ICM_from_name", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.recsys.remove_ICM_item_interactions", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.merge_sparse_matrices"], ["def", "main", "(", ")", ":", "\n", "##################################################", "\n", "# Data loading and splitting", "\n", "\n", "    ", "data_reader", "=", "TheMoviesDatasetReader", "(", ")", "\n", "\n", "# Split the data into train, validation and test (70, 10, 20) through the DataSplitter", "\n", "# The test and validation splits are cold items splits", "\n", "data_splitter", "=", "DataSplitter_Cold_items", "(", "data_reader", ")", "\n", "data_splitter", ".", "load_data", "(", ")", "\n", "\n", "# Get the split", "\n", "URM_train", ",", "URM_validation", ",", "URM_test", ",", "URM_train_warm", ",", "URM_validation_warm", "=", "data_splitter", ".", "get_both_splits", "(", ")", "\n", "data_splitter", ".", "get_statistics_URM_warm", "(", ")", "\n", "\n", "# Get the warm items URM", "\n", "URM_train_validation", "=", "merge_sparse_matrices", "(", "URM_train", ",", "URM_validation", ")", ".", "tocsr", "(", ")", "\n", "URM_train_validation_warm", "=", "merge_sparse_matrices", "(", "URM_train_warm", ",", "URM_validation_warm", ")", ".", "tocsr", "(", ")", "\n", "assert", "URM_train_validation", ".", "nnz", "==", "URM_train_validation_warm", ".", "nnz", ",", "\"WRONG SPLIT!\"", "\n", "assert", "np", ".", "equal", "(", "URM_train_validation", ".", "indptr", ",", "URM_train_validation_warm", ".", "indptr", ")", ".", "all", "(", ")", ",", "\"WRONG SPLIT!\"", "\n", "assert", "np", ".", "equal", "(", "URM_train_validation", ".", "indices", ",", "URM_train_validation_warm", ".", "indices", ")", ".", "all", "(", ")", ",", "\"WRONG SPLIT!\"", "\n", "\n", "# Get the original ICM", "\n", "ICM_name", "=", "'ICM_metadata'", "\n", "unfiltered_ICM_train", "=", "data_splitter", ".", "get_ICM_from_name", "(", "ICM_name", ")", "\n", "\n", "##################################################", "\n", "# ICM preparation", "\n", "\n", "# Filter the ICM removing all the features with less than 5 interactions", "\n", "features_with_more_than_5_interactions", "=", "np", ".", "ediff1d", "(", "unfiltered_ICM_train", ".", "tocsc", "(", ")", ".", "indptr", ")", ">=", "5", "\n", "original_ICM_train", "=", "unfiltered_ICM_train", "[", ":", ",", "features_with_more_than_5_interactions", "]", "\n", "\n", "# Remove cold items interactions from the ICM", "\n", "test_items", "=", "np", ".", "ediff1d", "(", "URM_test", ".", "tocsc", "(", ")", ".", "indptr", ")", "!=", "0", "\n", "test_items", "=", "np", ".", "arange", "(", "len", "(", "test_items", ")", ")", "[", "test_items", "]", "\n", "ICM_train", "=", "remove_ICM_item_interactions", "(", "original_ICM_train", ",", "test_items", ")", "\n", "\n", "# Check if the removal was correct", "\n", "no_ICM_interaction_item_mask", "=", "np", ".", "ediff1d", "(", "ICM_train", ".", "indptr", ")", "==", "0", "\n", "assert", "np", ".", "alltrue", "(", "\n", "no_ICM_interaction_item_mask", "[", "test_items", "]", ")", ",", "\"Test items were not correctly removed from the train ICM.\"", "\n", "\n", "n_items", ",", "n_features", "=", "ICM_train", ".", "shape", "\n", "\n", "print", "(", "f\"Training ICM has {n_items} items and {n_features} features.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSEmbedding.__init__": [[26, 45], ["dwave.system.DWaveSampler"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "target_sampler", "=", "None", ",", "qpu_topology", "=", "DEFAULT_QPU_TOPOLOGY", ",", "\n", "n_embedding_cases", "=", "DEFAULT_N_EMBEDDING_CASES", ",", "embedding_folder_path", "=", "None", ",", "clique_embedding", "=", "False", ")", ":", "\n", "        ", "assert", "qpu_topology", "in", "ACCEPTED_TOPOLOGIES", ",", "f\"QPU topology should be one of {ACCEPTED_TOPOLOGIES}.\"", "\n", "\n", "if", "target_sampler", "is", "None", ":", "\n", "            ", "target_sampler", "=", "DWaveSampler", "(", "solver", "=", "{", "'topology__type'", ":", "qpu_topology", "}", ")", "\n", "", "self", ".", "qpu_topology", "=", "qpu_topology", "\n", "self", ".", "target", "=", "target_sampler", ".", "edgelist", "\n", "\n", "self", ".", "embeddings", "=", "{", "}", "\n", "self", ".", "n_embedding_cases", "=", "n_embedding_cases", "\n", "if", "embedding_folder_path", "is", "None", ":", "\n", "            ", "self", ".", "embedding_folder_path", "=", "self", ".", "TEMP_EMBEDDING_FOLDER_PATH", "\n", "self", ".", "save_embeddings", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding_folder_path", "=", "embedding_folder_path", "\n", "self", ".", "save_embeddings", "=", "True", "\n", "\n", "", "self", ".", "clique_embedding", "=", "clique_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSEmbedding.get_embedding": [[46, 75], ["bqm.to_networkx_graph", "print", "core.Embedding.EmbeddingGroup", "core.Embedding.EmbeddingGroup.find_embedding", "core.Embedding.EmbeddingGroup.get_embedding", "shutil.rmtree", "core.Embedding.EmbeddingGroup.get_embedding.save_embedding"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.EmbeddingGroup.find_embedding", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.EmbeddingGroup.get_embedding", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.save_embedding"], ["", "def", "get_embedding", "(", "self", ",", "bqm", ",", "exp_id", "=", "''", ",", "resume_from_saved", "=", "False", ")", ":", "\n", "        ", "bqm_graph", "=", "bqm", ".", "to_networkx_graph", "(", ")", "\n", "# bqm_graph_hash = nx.weisfeiler_lehman_graph_hash(bqm_graph)", "\n", "# embedding_dict = self.embeddings.get(bqm_graph_hash)", "\n", "\n", "# if embedding_dict is not None:", "\n", "#     if _check_embedding_validity(embedding_dict, self.qpu_topology):", "\n", "#         return embedding_dict", "\n", "\n", "print", "(", "f\"Searching for an embedding of the problem onto the {self.qpu_topology} graph...\"", ")", "\n", "\n", "output_folder_path", "=", "f\"{self.embedding_folder_path}/{exp_id}/embedding/\"", "\n", "# embedding_group = EmbeddingGroup(bqm_graph, self.target, qpu_graph=self.qpu_topology,", "\n", "#                                  source_hash=bqm_graph_hash)", "\n", "embedding_group", "=", "EmbeddingGroup", "(", "bqm_graph", ",", "self", ".", "target", ",", "qpu_graph", "=", "self", ".", "qpu_topology", ",", "\n", "clique_embedding", "=", "self", ".", "clique_embedding", ")", "\n", "embedding_group", ".", "find_embedding", "(", "self", ".", "n_embedding_cases", ",", "output_folder_path", "=", "output_folder_path", ",", "\n", "resume_from_saved", "=", "resume_from_saved", ")", "\n", "\n", "found_embedding", "=", "embedding_group", ".", "get_embedding", "(", ")", "\n", "embedding_dict", "=", "found_embedding", ".", "embedding", "\n", "# self.embeddings[bqm_graph_hash] = embedding_dict", "\n", "\n", "if", "not", "self", ".", "save_embeddings", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "output_folder_path", ")", "\n", "", "else", ":", "\n", "            ", "found_embedding", ".", "save_embedding", "(", "output_folder_path", ",", "'best_embedding'", ")", "\n", "\n", "", "return", "embedding_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSSampler.__init__": [[79, 88], ["dwave.system.FixedEmbeddingComposite", "dwave.system.DWaveSampler"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "target_sampler", "=", "None", ",", "qpu_topology", "=", "DEFAULT_QPU_TOPOLOGY", ",", "num_reads", "=", "DEFAULT_NUM_READS", ",", "\n", "return_embedding", "=", "True", ")", ":", "\n", "        ", "assert", "qpu_topology", "in", "ACCEPTED_TOPOLOGIES", ",", "f\"QPU topology should be one of {ACCEPTED_TOPOLOGIES}.\"", "\n", "\n", "if", "target_sampler", "is", "None", ":", "\n", "            ", "target_sampler", "=", "DWaveSampler", "(", "solver", "=", "{", "'topology__type'", ":", "qpu_topology", "}", ")", "\n", "", "self", ".", "sampler", "=", "FixedEmbeddingComposite", "(", "target_sampler", ",", "embedding", "=", "embedding", ")", "\n", "self", ".", "num_reads", "=", "num_reads", "\n", "self", ".", "return_embedding", "=", "return_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSSampler.properties": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "properties", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sampler", ".", "properties", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSSampler.parameters": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sampler", ".", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSSampler.sample": [[97, 106], ["CQFSSampler.CQFSSampler.sampler.sample", "parameters.get", "parameters.get"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample"], ["", "def", "sample", "(", "self", ",", "bqm", ",", "**", "parameters", ")", ":", "\n", "\n", "        ", "if", "parameters", ".", "get", "(", "'num_reads'", ")", "is", "None", ":", "\n", "            ", "parameters", "[", "'num_reads'", "]", "=", "self", ".", "num_reads", "\n", "\n", "", "if", "parameters", ".", "get", "(", "'return_embedding'", ")", "is", "None", ":", "\n", "            ", "parameters", "[", "'return_embedding'", "]", "=", "self", ".", "return_embedding", "\n", "\n", "", "return", "self", ".", "sampler", ".", "sample", "(", "bqm", ",", "**", "parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSSimulatedAnnealingSampler.__init__": [[110, 113], ["neal.SimulatedAnnealingSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_reads", "=", "DEFAULT_NUM_READS", ")", ":", "\n", "        ", "super", "(", "CQFSSimulatedAnnealingSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_reads", "=", "num_reads", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSSimulatedAnnealingSampler.sample": [[114, 119], ["super().sample", "parameters.get"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample"], ["", "def", "sample", "(", "self", ",", "bqm", ",", "**", "parameters", ")", ":", "\n", "        ", "if", "parameters", ".", "get", "(", "'num_reads'", ")", "is", "None", ":", "\n", "            ", "parameters", "[", "'num_reads'", "]", "=", "self", ".", "num_reads", "\n", "\n", "", "return", "super", "(", "CQFSSimulatedAnnealingSampler", ",", "self", ")", ".", "sample", "(", "bqm", ",", "**", "parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSQBSolvTabuSampler.__init__": [[123, 128], ["dwave_qbsolv.QBSolv.__init__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_reads", "=", "50", ",", "solver_limit", "=", "DEFAULT_SOLVER_LIMIT", "[", "DEFAULT_QPU_TOPOLOGY", "]", ")", ":", "\n", "        ", "super", "(", "CQFSQBSolvTabuSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_reads", "=", "num_reads", "\n", "self", ".", "solver_limit", "=", "solver_limit", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSQBSolvTabuSampler.sample": [[129, 143], ["super().sample", "parameters.get", "parameters.get", "parameters.get"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample"], ["", "def", "sample", "(", "self", ",", "bqm", ",", "**", "parameters", ")", ":", "\n", "\n", "        ", "if", "parameters", ".", "get", "(", "'num_repeats'", ")", "is", "None", ":", "\n", "            ", "parameters", "[", "'num_repeats'", "]", "=", "self", ".", "num_reads", "\n", "\n", "", "if", "parameters", ".", "get", "(", "'solver_limit'", ")", "is", "None", ":", "\n", "            ", "parameters", "[", "'solver_limit'", "]", "=", "self", ".", "solver_limit", "\n", "\n", "", "if", "parameters", ".", "get", "(", "'solver'", ")", "is", "not", "None", ":", "\n", "            ", "assert", "parameters", "[", "'solver'", "]", "==", "'tabu'", ",", "\"Should not use a different solver than 'tabu' with CQFSQBSolvTabuSampler.\"", "\n", "\n", "", "sampleset", "=", "super", "(", "CQFSQBSolvTabuSampler", ",", "self", ")", ".", "sample", "(", "bqm", ",", "**", "parameters", ")", "\n", "return", "sampleset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSQBSolvSampler.__init__": [[147, 158], ["dwave_qbsolv.QBSolv.__init__", "core.CountSampler.CountSampler", "neal.SimulatedAnnealingSampler"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "child_sampler", "=", "None", ",", "num_reads", "=", "DEFAULT_NUM_READS", ",", "\n", "solver_limit", "=", "DEFAULT_SOLVER_LIMIT", "[", "DEFAULT_QPU_TOPOLOGY", "]", ")", ":", "\n", "        ", "super", "(", "CQFSQBSolvSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_reads", "=", "num_reads", "\n", "\n", "if", "child_sampler", "is", "None", ":", "\n", "            ", "child_sampler", "=", "neal", ".", "SimulatedAnnealingSampler", "(", ")", "\n", "", "self", ".", "child_sampler", "=", "CountSampler", "(", "child_sampler", ")", "\n", "\n", "self", ".", "solver_limit", "=", "solver_limit", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSSampler.CQFSQBSolvSampler.sample": [[159, 175], ["super().sample", "CQFSSampler.CQFSQBSolvSampler.child_sampler.get_count", "CQFSSampler.CQFSQBSolvSampler.child_sampler.reset_count", "parameters.get", "parameters.get", "parameters.get"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.get_count", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.reset_count"], ["", "def", "sample", "(", "self", ",", "bqm", ",", "**", "parameters", ")", ":", "\n", "\n", "        ", "if", "parameters", ".", "get", "(", "'num_repeats'", ")", "is", "None", ":", "\n", "            ", "parameters", "[", "'num_repeats'", "]", "=", "self", ".", "num_reads", "\n", "\n", "", "if", "parameters", ".", "get", "(", "'solver'", ")", "is", "None", ":", "\n", "            ", "parameters", "[", "'solver'", "]", "=", "self", ".", "child_sampler", "\n", "\n", "", "if", "parameters", ".", "get", "(", "'solver_limit'", ")", "is", "None", ":", "\n", "            ", "parameters", "[", "'solver_limit'", "]", "=", "self", ".", "solver_limit", "\n", "\n", "", "sampleset", "=", "super", "(", "CQFSQBSolvSampler", ",", "self", ")", ".", "sample", "(", "bqm", ",", "**", "parameters", ")", "\n", "sampleset", ".", "info", "[", "'subproblem_sampler_calls'", "]", "=", "self", ".", "child_sampler", ".", "get_count", "(", ")", "\n", "self", ".", "child_sampler", ".", "reset_count", "(", ")", "\n", "\n", "return", "sampleset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.__init__": [[22, 40], ["utils.graph.get_edges", "utils.graph.get_edges", "utils.graph._graph_hash"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_edges", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_edges", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._graph_hash"], ["def", "__init__", "(", "self", ",", "source", ",", "target", ",", "embedding_name", "=", "'embedding'", ",", "qpu_graph", "=", "'pegasus'", ",", "source_hash", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "embedding_name", "=", "embedding_name", "\n", "\n", "self", ".", "source", "=", "get_edges", "(", "source", ")", "\n", "self", ".", "target", "=", "get_edges", "(", "target", ")", "\n", "\n", "self", ".", "embedding", "=", "None", "\n", "self", ".", "nodelist", "=", "[", "]", "\n", "self", ".", "node_count", "=", "0", "\n", "self", ".", "elapsed_time", "=", "0", "\n", "\n", "self", ".", "qpu_graph", "=", "qpu_graph", "\n", "\n", "if", "source_hash", "is", "None", ":", "\n", "            ", "self", ".", "source_hash", "=", "_graph_hash", "(", "source", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "source_hash", "=", "source_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.__lt__": [[41, 46], ["None"], "methods", ["None"], ["", "", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "\n", "        ", "if", "self", ".", "node_count", ">", "0", "and", "other", ".", "node_count", ">", "0", ":", "\n", "            ", "return", "self", ".", "node_count", "<", "other", ".", "node_count", "\n", "", "return", "self", ".", "node_count", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.find_embedding": [[47, 59], ["time.time", "find_embedding_function", "sorted", "len", "utils.graph.get_nodes_from_embedding", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes_from_embedding"], ["", "def", "find_embedding", "(", "self", ",", "find_embedding_function", "=", "minorminer", ".", "find_embedding", ",", "**", "embedding_parameters", ")", ":", "\n", "\n", "# print(\"Finding possible embeddings...\")", "\n", "        ", "s_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "find_embedding_function", "(", "self", ".", "source", ",", "self", ".", "target", ",", "**", "embedding_parameters", ")", "\n", "self", ".", "nodelist", "=", "sorted", "(", "get_nodes_from_embedding", "(", "self", ".", "embedding", ")", ")", "\n", "self", ".", "node_count", "=", "len", "(", "self", ".", "nodelist", ")", "\n", "\n", "self", ".", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "s_time", "\n", "\n", "return", "self", ".", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.find_clique_embedding": [[60, 75], ["utils.graph.get_nodes", "time.time", "find_clique_embedding_function", "sorted", "len", "utils.graph.get_nodes_from_embedding", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes_from_embedding"], ["", "def", "find_clique_embedding", "(", "self", ",", "**", "embedding_parameters", ")", ":", "\n", "\n", "        ", "find_clique_embedding_function", "=", "self", ".", "EMBEDDING_FUNCTIONS", "[", "self", ".", "qpu_graph", "]", "\n", "clique_graph", "=", "get_nodes", "(", "self", ".", "source", ")", "\n", "target_clique_size", "=", "self", ".", "TARGET_SIZE", "[", "self", ".", "qpu_graph", "]", "\n", "\n", "s_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "find_clique_embedding_function", "(", "clique_graph", ",", "target_clique_size", ",", "**", "embedding_parameters", ")", "\n", "self", ".", "nodelist", "=", "sorted", "(", "get_nodes_from_embedding", "(", "self", ".", "embedding", ")", ")", "\n", "self", ".", "node_count", "=", "len", "(", "self", ".", "nodelist", ")", "\n", "\n", "self", ".", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "s_time", "\n", "\n", "return", "self", ".", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.find_embedding_from_source_target": [[76, 89], ["time.time", "find_embedding_function", "sorted", "len", "utils.graph.get_nodes_from_embedding", "time.time"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_nodes_from_embedding"], ["", "def", "find_embedding_from_source_target", "(", "self", ",", "S", ",", "T", ",", "\n", "find_embedding_function", "=", "minorminer", ".", "find_embedding", ",", "**", "embedding_parameters", ")", ":", "\n", "\n", "# print(\"Finding possible embeddings...\")", "\n", "        ", "s_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "find_embedding_function", "(", "S", ",", "T", ",", "**", "embedding_parameters", ")", "\n", "self", ".", "nodelist", "=", "sorted", "(", "get_nodes_from_embedding", "(", "self", ".", "embedding", ")", ")", "\n", "self", ".", "node_count", "=", "len", "(", "self", ".", "nodelist", ")", "\n", "\n", "self", ".", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "s_time", "\n", "\n", "return", "self", ".", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.draw_embedding": [[90, 97], ["list", "utils.graph.draw_embedding", "set"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.draw_embedding"], ["", "def", "draw_embedding", "(", "self", ",", "highlight_variables", "=", "None", ",", "full_drawing", "=", "True", ",", "show", "=", "True", ")", ":", "\n", "\n", "        ", "active_nodes", "=", "[", "node", "for", "edge", "in", "self", ".", "target", "for", "node", "in", "edge", "]", "\n", "active_nodes", "=", "list", "(", "set", "(", "active_nodes", ")", ")", "\n", "\n", "draw_embedding", "(", "self", ".", "embedding", ",", "active_nodes", "=", "active_nodes", ",", "highlight_variables", "=", "highlight_variables", ",", "\n", "full_drawing", "=", "full_drawing", ",", "show", "=", "show", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.save_embedding": [[98, 111], ["print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.save_data", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], ["", "def", "save_embedding", "(", "self", ",", "folder_path", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "embedding_name", "\n", "\n", "", "print", "(", "\"Saving model in file '{}'\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "data_dict_to_save", "=", "self", ".", "__dict__", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "dataIO", ".", "save_data", "(", "file_name", "=", "file_name", ",", "data_dict_to_save", "=", "data_dict_to_save", ")", "\n", "\n", "print", "(", "\"Saving complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.load_embedding": [[112, 127], ["print", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "cls", "recsys.Base.DataIO.DataIO.load_data.keys", "print", "cls.__setattr__"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data"], ["", "@", "classmethod", "\n", "def", "load_embedding", "(", "cls", ",", "folder_path", ",", "file_name", ")", ":", "\n", "\n", "        ", "print", "(", "\"Loading embedding from file '{}'\"", ".", "format", "(", "folder_path", "+", "file_name", ")", ")", "\n", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "folder_path", ")", "\n", "data_dict", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "file_name", ")", "\n", "\n", "embedding", "=", "cls", "(", "None", ",", "None", ")", "\n", "for", "attrib_name", "in", "data_dict", ".", "keys", "(", ")", ":", "\n", "            ", "embedding", ".", "__setattr__", "(", "attrib_name", ",", "data_dict", "[", "attrib_name", "]", ")", "\n", "\n", "", "print", "(", "\"Loading complete\"", ")", "\n", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.EmbeddingGroup.__init__": [[132, 153], ["utils.graph.get_edges", "utils.graph.get_edges", "utils.graph._graph_hash"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_edges", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph.get_edges", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.graph._graph_hash"], ["def", "__init__", "(", "self", ",", "source", ",", "target", ",", "embedding_name", "=", "'embedding'", ",", "qpu_graph", "=", "'pegasus'", ",", "clique_embedding", "=", "False", ",", "\n", "source_hash", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "embedding_name", "=", "embedding_name", "\n", "\n", "self", ".", "source", "=", "get_edges", "(", "source", ")", "\n", "self", ".", "target", "=", "get_edges", "(", "target", ")", "\n", "\n", "self", ".", "embeddings", "=", "[", "]", "\n", "\n", "self", ".", "n_cases", "=", "0", "\n", "self", ".", "total_time", "=", "0", "\n", "self", ".", "average_time", "=", "0", "\n", "\n", "self", ".", "qpu_graph", "=", "qpu_graph", "\n", "self", ".", "clique_embedding", "=", "clique_embedding", "\n", "\n", "if", "source_hash", "is", "None", ":", "\n", "            ", "self", ".", "source_hash", "=", "_graph_hash", "(", "source", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "source_hash", "=", "source_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.EmbeddingGroup.find_embedding": [[154, 213], ["recsys.Base.DataIO.DataIO", "range", "Embedding.EmbeddingGroup.embeddings.clear", "Embedding.Embedding", "Embedding.load_embedding.save_embedding", "recsys.Base.DataIO.DataIO.save_data", "Embedding.EmbeddingGroup.embeddings.append", "recsys.Base.DataIO.DataIO.load_data", "range", "Embedding.EmbeddingGroup.embeddings.clear", "Embedding.EmbeddingGroup.embeddings.extend", "print", "Embedding.load_embedding.find_clique_embedding", "Embedding.load_embedding.find_embedding", "Embedding.load_embedding", "done_embeddings.append", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.save_embedding", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.find_clique_embedding", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.EmbeddingGroup.find_embedding", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.Embedding.load_embedding"], ["", "", "def", "find_embedding", "(", "self", ",", "n_cases", "=", "10", ",", "find_embedding_function", "=", "minorminer", ".", "find_embedding", ",", "\n", "reset_previous_search", "=", "True", ",", "resume_from_saved", "=", "False", ",", "output_folder_path", "=", "None", ",", "\n", "**", "embedding_parameters", ")", ":", "\n", "\n", "        ", "if", "output_folder_path", "is", "None", ":", "\n", "            ", "output_folder_path", "=", "f\"./{self.embedding_name}_embedding_group/\"", "\n", "\n", "", "if", "reset_previous_search", ":", "\n", "            ", "self", ".", "embeddings", ".", "clear", "(", ")", "\n", "self", ".", "n_cases", "=", "0", "\n", "self", ".", "total_time", "=", "0", "\n", "self", ".", "average_time", "=", "0", "\n", "\n", "", "embedding_check_name", "=", "\"group_metadata\"", "\n", "dataIO", "=", "DataIO", "(", "folder_path", "=", "output_folder_path", ")", "\n", "\n", "if", "resume_from_saved", ":", "\n", "            ", "try", ":", "\n", "                ", "metadata_dict", "=", "dataIO", ".", "load_data", "(", "file_name", "=", "embedding_check_name", ")", "\n", "done_cases", "=", "metadata_dict", "[", "'n_cases'", "]", "\n", "self", ".", "total_time", "=", "metadata_dict", "[", "'total_time'", "]", "\n", "\n", "done_embeddings", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "done_cases", ")", ":", "\n", "                    ", "i_filename", "=", "f\"e{i:05d}\"", "\n", "embedding", "=", "Embedding", ".", "load_embedding", "(", "folder_path", "=", "output_folder_path", ",", "file_name", "=", "i_filename", ")", "\n", "done_embeddings", ".", "append", "(", "embedding", ")", "\n", "\n", "", "self", ".", "embeddings", ".", "clear", "(", ")", "\n", "self", ".", "embeddings", ".", "extend", "(", "done_embeddings", ")", "\n", "self", ".", "n_cases", "=", "done_cases", "+", "1", "\n", "\n", "print", "(", "f\"Found an already existing EmbeddingGroup with {done_cases + 1} done cases.\"", ")", "\n", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "print", "(", "\"Could not resume from a saved run. Starting a new one...\"", ")", "\n", "\n", "", "", "assert", "n_cases", ">=", "self", ".", "n_cases", ",", "\"Expected more cases than the ones already done. Choose a larger n_cases.\"", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_cases", ",", "n_cases", ")", ":", "\n", "            ", "embedding", "=", "Embedding", "(", "self", ".", "source", ",", "self", ".", "target", ",", "embedding_name", "=", "self", ".", "embedding_name", ",", "\n", "qpu_graph", "=", "self", ".", "qpu_graph", ",", "source_hash", "=", "self", ".", "source_hash", ")", "\n", "\n", "if", "self", ".", "clique_embedding", ":", "\n", "                ", "embedding", ".", "find_clique_embedding", "(", "**", "embedding_parameters", ")", "\n", "", "else", ":", "\n", "                ", "embedding", ".", "find_embedding", "(", "find_embedding_function", ",", "**", "embedding_parameters", ")", "\n", "\n", "", "i_filename", "=", "f\"e{i:05d}\"", "\n", "embedding", ".", "save_embedding", "(", "output_folder_path", ",", "i_filename", ")", "\n", "\n", "self", ".", "total_time", "+=", "embedding", ".", "elapsed_time", "\n", "saved_cases", "=", "{", "'n_cases'", ":", "i", ",", "'total_time'", ":", "self", ".", "total_time", "}", "\n", "dataIO", ".", "save_data", "(", "embedding_check_name", ",", "saved_cases", ")", "\n", "\n", "self", ".", "embeddings", ".", "append", "(", "embedding", ")", "\n", "\n", "", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "n_cases", "\n", "self", ".", "n_cases", "=", "n_cases", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.EmbeddingGroup.get_embedding": [[214, 229], ["len", "sorted", "sorted", "random.choice", "Embedding.EmbeddingGroup.embeddings.copy"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy"], ["", "def", "get_embedding", "(", "self", ",", "type", "=", "'best'", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "embeddings", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "type", "==", "'best'", ":", "\n", "            ", "sorted_embeddings", "=", "sorted", "(", "self", ".", "embeddings", ")", "\n", "return", "sorted_embeddings", "[", "0", "]", "\n", "", "elif", "type", "==", "'average'", ":", "\n", "            ", "sorted_embeddings", "=", "sorted", "(", "self", ".", "embeddings", ")", "\n", "return", "sorted_embeddings", "[", "self", ".", "n_cases", "//", "2", "]", "\n", "", "elif", "type", "==", "'random'", ":", "\n", "            ", "return", "random", ".", "choice", "(", "self", ".", "embeddings", ")", "\n", "", "elif", "type", "==", "'all'", ":", "\n", "            ", "return", "self", ".", "embeddings", ".", "copy", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.__init__": [[7, 10], ["core.Counter.Counter.get_instance"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.get_instance"], ["    ", "def", "__init__", "(", "self", ",", "child_sampler", ":", "dimod", ".", "Sampler", ")", ":", "\n", "        ", "self", ".", "child_sampler", ":", "dimod", ".", "Sampler", "=", "child_sampler", "\n", "self", ".", "counter", ":", "Counter", "=", "Counter", ".", "get_instance", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.properties": [[11, 14], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "properties", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "child_sampler", ".", "properties", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.parameters": [[15, 18], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "child_sampler", ".", "properties", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample": [[19, 22], ["CountSampler.CountSampler.counter.count", "CountSampler.CountSampler.child_sampler.sample"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.count", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample"], ["", "def", "sample", "(", "self", ",", "bqm", ":", "dimod", ".", "BinaryQuadraticModel", ",", "**", "parameters", ")", ":", "\n", "        ", "self", ".", "counter", ".", "count", "(", ")", "\n", "return", "self", ".", "child_sampler", ".", "sample", "(", "bqm", ",", "**", "parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.get_count": [[23, 25], ["CountSampler.CountSampler.counter.get_count"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.get_count"], ["", "def", "get_count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "counter", ".", "get_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.reset_count": [[26, 28], ["CountSampler.CountSampler.counter.reset_count"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.reset_count"], ["", "def", "reset_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "counter", ".", "reset_count", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__init__": [[21, 54], ["CQFSTrainer.CQFSTrainer.__get_evaluator_validation", "CQFSTrainer.CQFSTrainer.__get_evaluator_test"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_evaluator_validation", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_evaluator_test"], ["solver_class", "=", "LeapHybridSampler", "\n", "# solver_class = SimulatedAnnealingSampler", "\n", "# solver_class = CQFSSimulatedAnnealingSampler", "\n", "# solver_class = CQFSQBSolvSampler", "\n", "\n", "CF_recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "\n", "cpu_count_div", "=", "1", "\n", "cpu_count_sub", "=", "0", "\n", "\n", "train_CQFS", "(", "data_loader", ",", "ICM_name", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "solver_class", ",", "\n", "CF_recommender_classes", ",", "cpu_count_div", "=", "cpu_count_div", ",", "cpu_count_sub", "=", "cpu_count_sub", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__print": [[55, 58], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_evaluator_validation": [[59, 62], ["recsys.Base.Evaluation.Evaluator.EvaluatorHoldout"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_evaluator_test": [[63, 65], ["recsys.Base.Evaluation.Evaluator.EvaluatorHoldout"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_selection": [[66, 79], ["recsys.Base.DataIO.DataIO", "CQFSTrainer.CQFSTrainer.__print", "recsys.Base.DataIO.DataIO.load_data", "CQFSTrainer.CQFSTrainer.__print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.train": [[80, 90], ["CQFSTrainer.CQFSTrainer.__get_selection", "CQFSTrainer.CQFSTrainer.train"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_selection", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.train"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_experiment_ids": [[91, 100], ["utils.naming.get_experiment_id", "utils.naming.get_experiment_id", "itertools.product", "zip"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.naming.get_experiment_id", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.naming.get_experiment_id"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.train_many": [[101, 129], ["CQFSTrainer.CQFSTrainer.__get_experiment_ids", "utils.multithreading.parallelize_function", "CQFSTrainer.CQFSTrainer.train", "CQFSTrainer.CQFSTrainer.__get_evaluator_validation", "CQFSTrainer.CQFSTrainer.__get_evaluator_test", "CQFSTrainer.CQFSTrainer.__get_selection"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_experiment_ids", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.multithreading.parallelize_function", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.train", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_evaluator_validation", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_evaluator_test", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_selection"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.compute_statistics": [[130, 179], ["CQFSTrainer.CQFSTrainer.__get_experiment_ids", "numpy.ones_like", "numpy.ones_like", "S_CF.astype", "S_CBF.astype", "S_CBF.astype.multiply", "CQFSTrainer.CQFSTrainer.__get_selection", "utils.sparse.select_columns", "recsys.Base.DataIO.DataIO", "recsys.Base.DataIO.DataIO.load_data", "numpy.ones_like", "recsys.Base.DataIO.DataIO.load_data.astype", "dataIO.load_data.astype.multiply", "utils.statistics.results_similarity_statistics", "utils.statistics.error_statistics", "recsys.Base.DataIO.DataIO.save_data", "numpy.ediff1d", "print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_experiment_ids", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.CQFSTrainer.__get_selection", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.select_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.results_similarity_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.error_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.__print": [[181, 183], ["print"], "function", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer._print_train_failed": [[185, 187], ["CQFSTrainer.__print"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer.train": [[190, 216], ["CQFSTrainer.__print", "utils.sparse.select_columns", "utils.sparse.select_columns", "recsys.ParameterTuning.run_parameter_search.runParameterSearch_Content", "CQFSTrainer.__print", "CQFSTrainer._print_train_failed"], "function", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.select_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.sparse.select_columns", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.run_parameter_search.runParameterSearch_Content", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFSTrainer._print_train_failed"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__init__": [[32, 181], ["ICM_train.copy", "recsys.Base.DataIO.DataIO", "CQFS.CQFS.__load_timings", "CQFS.CQFS.__load_previously_saved_models", "re.match", "CQFS.CQFS.__print", "CQFS.CQFS.__print", "time.time", "numpy.ones_like", "numpy.ones_like", "S_CF.astype", "S_CBF.astype", "time.time", "S_CBF.multiply", "time.time", "S_CBF.astype.multiply", "S_CBF.multiply", "utils.statistics.similarity_statistics", "CQFS.CQFS.__save_statistics", "CQFS.CQFS.__save_timings", "CQFS.CQFS.dataIO.save_data", "CQFS.CQFS.dataIO.save_data", "CQFS.CQFS.dataIO.save_data", "CQFS.CQFS.__print", "CQFS.CQFS.__print", "dwave.system.DWaveSampler", "core.CQFSSampler.CQFSEmbedding", "dwave.system.EmbeddingComposite", "CQFS.CQFS.timings[].get", "time.time", "time.time", "time.time", "utils.samplers.get_hybrid_from_topology", "solver_class", "solver_class", "solver_class", "solver_class", "solver_class"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__load_timings", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__load_previously_saved_models", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.similarity_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__save_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__save_timings", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.samplers.get_hybrid_from_topology"], ["# solver_class = CQFSSimulatedAnnealingSampler", "\n", "# solver_class = CQFSQBSolvSampler", "\n", "# solver_class = CQFSQBSolvTabuSampler", "\n", "\n", "CF_recommender_classes", "=", "[", "ItemKNNCFRecommender", ",", "PureSVDItemRecommender", ",", "RP3betaRecommender", "]", "\n", "\n", "save_FPMs", "=", "False", "\n", "save_BQMs", "=", "False", "\n", "\n", "run_CQFS", "(", "data_loader", ",", "ICM_name", ",", "percentages", ",", "alphas", ",", "betas", ",", "combination_strengths", ",", "solver_class", ",", "\n", "CF_recommender_classes", ",", "save_FPMs", ",", "save_BQMs", ",", "parameter_product", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print": [[182, 185], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__save_statistics": [[186, 188], ["CQFS.CQFS.dataIO.save_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__save_timings": [[189, 191], ["CQFS.CQFS.dataIO.save_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__load_timings": [[192, 199], ["CQFS.CQFS.dataIO.load_data", "CQFS.CQFS.__print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__load_base_model": [[200, 213], ["CQFS.CQFS.dataIO.load_data", "CQFS.CQFS.dataIO.load_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__load_previously_saved_models": [[214, 235], ["CQFS.CQFS.__print", "CQFS.CQFS.dataIO.save_data", "CQFS.CQFS.dataIO.load_data", "CQFS.CQFS.__print", "CQFS.CQFS.__load_base_model"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__load_base_model"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__p_to_k": [[236, 247], ["ValueError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit": [[248, 335], ["utils.naming.get_experiment_id", "CQFS.CQFS.__print", "CQFS.CQFS.BQMs.get", "time.time", "time.time", "IPM.eliminate_zeros", "time.time", "IFPM.eliminate_zeros", "FPM.eliminate_zeros", "time.time", "dimod.as_bqm", "CQFS.CQFS.__get_experiment_dataIO", "CQFS.CQFS.save_data", "CQFS.CQFS.__save_timings", "CQFS.CQFS.__print", "dimod.as_bqm.copy", "time.time", "time.time", "FPM.toarray", "time.time", "time.time", "CQFS.CQFS.load_data", "CQFS.CQFS.__print", "FPM.diagonal", "FPM.tocsr", "FPM.tocsr.setdiag", "FPM.tocsr.eliminate_zeros", "utils.statistics.BQM_statistics", "CQFS.CQFS.__print", "CQFS.CQFS.save_data", "CQFS.CQFS.load_data", "CQFS.CQFS.__print", "CQFS.CQFS.__print", "CQFS.CQFS.save_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.naming.get_experiment_id", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_experiment_dataIO", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__save_timings", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.BQM_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit_many": [[342, 347], ["CQFS.CQFS.fit"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_selection_from_sample": [[348, 357], ["numpy.zeros", "sample.items", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_experiment_dataIO": [[358, 361], ["recsys.Base.DataIO.DataIO"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_selection_dataIO": [[362, 365], ["recsys.Base.DataIO.DataIO"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__save_selection": [[366, 375], ["CQFS.CQFS.__get_selection_dataIO", "CQFS.CQFS.save_data", "CQFS.CQFS.__print", "response.to_serializable"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_selection_dataIO", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__load_selection": [[376, 387], ["CQFS.CQFS.__get_selection_dataIO", "CQFS.CQFS.__print", "selection.copy", "CQFS.CQFS.load_data", "CQFS.CQFS.__print"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_selection_dataIO", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__compute_and_save_BQM_statistics": [[388, 401], ["experiment_dataIO.load_data", "CQFS.CQFS.__print", "BQM.to_numpy_vectors", "utils.statistics.BQM_statistics", "CQFS.CQFS.__print", "experiment_dataIO.save_data"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.data.DataLoader.DataLoader.load_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.statistics.BQM_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.select": [[402, 404], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.select_p": [[405, 482], ["CQFS.CQFS.__p_to_k", "utils.naming.get_experiment_id", "CQFS.CQFS.__load_selection", "CQFS.CQFS.__print", "CQFS.CQFS.BQMs.get", "time.time", "dimod.generators.combinations", "dimod.AdjVectorBQM", "dimod.AdjVectorBQM.update", "dimod.AdjVectorBQM.copy", "CQFS.CQFS.__get_experiment_dataIO", "CQFS.CQFS.__compute_and_save_BQM_statistics", "CQFS.CQFS.__print", "CQFS.CQFS.__print", "time.time", "CQFS.CQFS.solver.sample", "CQFS.CQFS.__get_selection_dataIO", "CQFS.CQFS.save_data", "CQFS.CQFS.__save_timings", "CQFS.CQFS.__get_selection_from_sample", "CQFS.CQFS.__print", "CQFS.CQFS.copy", "CQFS.CQFS.__save_selection", "CQFS.CQFS.selections.get", "CQFS.CQFS.selections[].copy", "utils.naming.get_experiment_id", "CQFS.CQFS.BQMs.get", "time.time", "time.time", "dimod.AdjVectorBQM.normalize", "CQFS.CQFS.__compute_and_save_BQM_statistics", "CQFS.CQFS.__print", "CQFS.CQFS.save_data", "CQFS.CQFS.__print", "CQFS.CQFS.embedder.get_embedding", "core.CQFSSampler.CQFSSampler", "time.time", "CQFS.CQFS.fit", "CQFS.CQFS.BQMs.get", "time.time", "dimod.AdjVectorBQM.to_numpy_matrix", "CQFS.CQFS.sum"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__p_to_k", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.naming.get_experiment_id", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__load_selection", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_experiment_dataIO", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__compute_and_save_BQM_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CountSampler.CountSampler.sample", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_selection_dataIO", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__save_timings", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__get_selection_from_sample", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__save_selection", "home.repos.pwc.inspect_result.qcpolimi_cqfs.ParameterTuning.SearchAbstractClass.SearchInputRecommenderArgs.copy", "home.repos.pwc.inspect_result.qcpolimi_cqfs.utils.naming.get_experiment_id", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__compute_and_save_BQM_statistics", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.Data_manager.Dataset.Dataset.save_data", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.__print", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Embedding.EmbeddingGroup.get_embedding", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.fit"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.select_many_p": [[483, 498], ["zip", "CQFS.CQFS.select_p", "CQFS.CQFS.select_p"], "methods", ["home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.select_p", "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.CQFS.CQFS.select_p"], []], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.__init__": [[9, 17], ["Exception", "multiprocessing.Lock"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Virtually private constructor. \"\"\"", "\n", "if", "Counter", ".", "__instance", "is", "not", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"This class is a singleton!\"", ")", "\n", "", "else", ":", "\n", "            ", "Counter", ".", "__instance", "=", "self", "\n", "self", ".", "__count", "=", "0", "\n", "self", ".", "__lock", "=", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.get_instance": [[18, 24], ["Counter.Counter"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_instance", "(", ")", ":", "\n", "        ", "\"\"\" Static access method. \"\"\"", "\n", "if", "Counter", ".", "__instance", "is", "None", ":", "\n", "            ", "Counter", "(", ")", "\n", "", "return", "Counter", ".", "__instance", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.count": [[25, 29], ["Counter.Counter.__lock.acquire", "Counter.Counter.__lock.release"], "methods", ["None"], ["", "def", "count", "(", "self", ")", ":", "\n", "        ", "self", ".", "__lock", ".", "acquire", "(", ")", "\n", "self", ".", "__count", "+=", "1", "\n", "self", ".", "__lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.get_count": [[30, 35], ["Counter.Counter.__lock.acquire", "Counter.Counter.__lock.release"], "methods", ["None"], ["", "def", "get_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "__lock", ".", "acquire", "(", ")", "\n", "count", "=", "self", ".", "__count", "\n", "self", ".", "__lock", ".", "release", "(", ")", "\n", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.qcpolimi_cqfs.core.Counter.Counter.reset_count": [[36, 40], ["Counter.Counter.__lock.acquire", "Counter.Counter.__lock.release"], "methods", ["None"], ["", "def", "reset_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "__lock", ".", "acquire", "(", ")", "\n", "self", ".", "__count", "=", "0", "\n", "self", ".", "__lock", ".", "release", "(", ")", "\n", "", "", ""]]}