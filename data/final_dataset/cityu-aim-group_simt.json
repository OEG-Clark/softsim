{"home.repos.pwc.inspect_result.cityu-aim-group_simt.utils.loss.CrossEntropy2d.__init__": [[8, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ",", "ignore_label", "=", "255", ",", "is_softmax", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "is_softmax", "=", "is_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.utils.loss.CrossEntropy2d.forward": [[14, 41], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "if", "self", ".", "is_softmax", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "reduction", "=", "'mean'", ")", "\n", "", "else", ":", "\n", "            ", "log_out", "=", "torch", ".", "log", "(", "predict", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "log_out", ",", "target", ",", "weight", "=", "weight", ",", "reduction", "=", "'mean'", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.utils.loss.EntropyLoss.__init__": [[43, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.utils.loss.EntropyLoss.forward": [[46, 50], ["b.mean", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "b.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "b", "=", "-", "1.0", "*", "b", ".", "sum", "(", "1", ")", "\n", "return", "b", ".", "mean", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.gta5_dataset.GTA5DataSet.__init__": [[14, 40], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "gta5_dataset.GTA5DataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"images/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"labels/%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.gta5_dataset.GTA5DataSet.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.gta5_dataset.GTA5DataSet.__getitem__": [[46, 71], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "gta5_dataset.GTA5DataSet.id_to_trainid.items", "image.transpose.transpose.transpose", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.cityscapes_dataset.RandomRotate.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.cityscapes_dataset.RandomRotate.__call__": [[17, 20], ["torchvision.transforms.functional.affine", "torchvision.transforms.functional.affine", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "tf", ".", "affine", "(", "img", ",", "translate", "=", "(", "0", ",", "0", ")", ",", "scale", "=", "1.0", ",", "angle", "=", "rotate_degree", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "0", ",", "0", ",", "0", ")", ",", "shear", "=", "0.0", ")", ",", "tf", ".", "affine", "(", "mask", ",", "translate", "=", "(", "0", ",", "0", ")", ",", "scale", "=", "1.0", ",", "angle", "=", "rotate_degree", ",", "resample", "=", "Image", ".", "NEAREST", ",", "fillcolor", "=", "255", ",", "shear", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.cityscapes_dataset.cityscapesDataSet.__init__": [[22, 42], ["i_id.strip", "os.join", "os.join", "cityscapes_dataset.cityscapesDataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ",", "set", "=", "'val'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "set", "=", "set", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.cityscapes_dataset.cityscapesDataSet.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.cityscapes_dataset.cityscapesDataSet.__getitem__": [[47, 64], ["PIL.Image.open().convert", "image.transpose.transpose.resize", "numpy.asarray", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.cityscapes_dataset.cityscapesPseudo.__init__": [[67, 91], ["cityscapes_dataset.RandomRotate", "i_id.strip().split", "os.join", "os.join", "os.join", "os.join", "cityscapes_dataset.cityscapesPseudo.files.append", "open", "int", "os.splitext", "os.splitext", "i_id.strip", "numpy.ceil", "os.basename", "os.basename", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "False", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "rotate", "=", "RandomRotate", "(", "5", ")", "\n", "\n", "for", "item", "in", "self", ".", "img_ids", ":", "\n", "            ", "image_path", ",", "label_path", "=", "item", "\n", "name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "label_path", ")", ")", "[", "0", "]", "\n", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "image_path", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "label_path", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.cityscapes_dataset.cityscapesPseudo.__len__": [[94, 96], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.dataset.cityscapes_dataset.cityscapesPseudo.__getitem__": [[97, 121], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "numpy.asarray.copy", "numpy.array", "PIL.Image.open", "numpy.random.choice"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "is_mirror", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ConfusionMatrix.fast_hist": [[54, 57], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "a", ",", "b", ",", "n33", ",", "n19", ")", ":", "\n", "    ", "ka", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n33", ")", "\n", "return", "np", ".", "bincount", "(", "n19", "*", "a", "[", "ka", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "ka", "]", ",", "minlength", "=", "n33", "*", "n19", ")", ".", "reshape", "(", "n33", ",", "n19", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ConfusionMatrix.per_class_iu": [[58, 60], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ConfusionMatrix.label_mapping": [[61, 66], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ConfusionMatrix.compute_CM": [[68, 99], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.zeros", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "numpy.zeros", "range", "open", "json.load", "os.path.join", "os.path.join", "len", "numpy.array", "numpy.array", "compute_ConfusionMatrix.label_mapping", "compute_ConfusionMatrix.fast_hist", "os.path.join", "open().read", "open().read", "PIL.Image.open", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "x.split", "label_mapping.flatten", "np.array.flatten", "open", "open", "len", "len", "label_mapping.flatten", "np.array.flatten"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.label_mapping", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.fast_hist"], ["", "def", "compute_CM", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "'/home/xiaoqiguo2/MetaCorrection/datasets/cityscapes_list'", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "'Num classes'", ",", "num_classes", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train_1'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'train.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'train_label.txt'", ")", "\n", "# image_path_list = join(devkit_dir, 'val.txt')", "\n", "# label_path_list = join(devkit_dir, 'label.txt')", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "CM", "=", "np", ".", "zeros", "(", "(", "34", ",", "19", ")", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "continue", "\n", "", "CM", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "34", ",", "19", ")", "\n", "", "return", "CM", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ConfusionMatrix.plot_NTM": [[100, 114], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.colorbar", "itertools.product", "matplotlib.savefig", "trans_mat.max", "range", "range", "matplotlib.text", "int", "numpy.float"], "function", ["None"], ["", "def", "plot_NTM", "(", "trans_mat", ",", "normalize", "=", "True", ",", "title", "=", "'NTM1'", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "trans_mat", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "thresh", "=", "trans_mat", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "trans_mat", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "trans_mat", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "num", "=", "'{:.3f}'", ".", "format", "(", "trans_mat", "[", "i", ",", "j", "]", ")", "if", "normalize", "else", "int", "(", "trans_mat", "[", "i", ",", "j", "]", ")", "\n", "plt", ".", "text", "(", "j", ",", "i", ",", "num", ",", "\n", "fontsize", "=", "2", ",", "\n", "verticalalignment", "=", "'center'", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "np", ".", "float", "(", "num", ")", ">", "thresh", "else", "\"black\"", ")", "\n", "", "plt", ".", "savefig", "(", "'/home/xiaoqiguo2/MetaCorrection/'", "+", "title", "+", "'.png'", ",", "transparent", "=", "True", ",", "dpi", "=", "600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV2_simt.get_arguments": [[72, 158], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : DeepLab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-T\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_T", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-seg\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_SEG", ",", "\n", "help", "=", "\"lambda_seg.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--Threshold-high\"", ",", "type", "=", "float", ",", "default", "=", "Threshold_high", ",", "\n", "help", "=", "\"Threshold_high\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--Threshold-low\"", ",", "type", "=", "float", ",", "default", "=", "Threshold_low", ",", "\n", "help", "=", "\"Threshold_low\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-Place\"", ",", "type", "=", "float", ",", "default", "=", "lambda_Place", ",", "\n", "help", "=", "\"lambda_Place\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-Convex\"", ",", "type", "=", "float", ",", "default", "=", "lambda_Convex", ",", "\n", "help", "=", "\"lambda_Convex\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-Volume\"", ",", "type", "=", "float", ",", "default", "=", "lambda_Volume", ",", "\n", "help", "=", "\"lambda_Volume\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-Anchor\"", ",", "type", "=", "float", ",", "default", "=", "lambda_Anchor", ",", "\n", "help", "=", "\"lambda_Anchor\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--open-classes\"", ",", "type", "=", "int", ",", "default", "=", "OPEN_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log-dir\"", ",", "type", "=", "str", ",", "default", "=", "LOG_DIR", ",", "\n", "help", "=", "\"Path to the directory of log.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV2_simt.lr_poly": [[174, 176], ["float"], "function", ["None"], ["def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV2_simt.adjust_learning_rate": [[177, 182], ["trainV2_simt.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV2_simt.adjust_learning_rate_T": [[183, 186], ["trainV2_simt.lr_poly"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.lr_poly"], ["", "", "def", "adjust_learning_rate_T", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate_T", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV2_simt.plot_NTM": [[187, 201], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.colorbar", "itertools.product", "matplotlib.savefig", "trans_mat.max", "range", "range", "matplotlib.text", "int", "numpy.float"], "function", ["None"], ["", "def", "plot_NTM", "(", "trans_mat", ",", "normalize", "=", "True", ",", "title", "=", "'NTM1'", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "trans_mat", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "thresh", "=", "trans_mat", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "trans_mat", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "trans_mat", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "num", "=", "'{:.2f}'", ".", "format", "(", "trans_mat", "[", "i", ",", "j", "]", ")", "if", "normalize", "else", "int", "(", "trans_mat", "[", "i", ",", "j", "]", ")", "\n", "plt", ".", "text", "(", "j", ",", "i", ",", "num", ",", "\n", "fontsize", "=", "2", ",", "\n", "verticalalignment", "=", "'center'", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "np", ".", "float", "(", "num", ")", ">", "thresh", "else", "\"black\"", ")", "\n", "", "plt", ".", "savefig", "(", "'../NTM_vis/'", "+", "title", "+", "'.png'", ",", "transparent", "=", "True", ",", "dpi", "=", "600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV2_simt.Placeholder_loss": [[202, 231], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "[].permute().float().cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.nn.CrossEntropyLoss.", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "predict[].clone().detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.nn.CrossEntropyLoss.", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "[].permute().float", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "predict[].clone", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "[].permute", "pred.clone().detach", "pred.clone", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "Placeholder_loss", "(", "pred", ",", "num_classes", ",", "open_classes", ",", "thres", "=", "None", ")", ":", "\n", "    ", "seg_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "#### del maximum elements in prediction####", "\n", "pseudo", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "long", "(", ")", "\n", "pseudo_onehot", "=", "torch", ".", "eye", "(", "num_classes", "+", "open_classes", ")", "[", "pseudo", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "pseudo_onehot", ")", "\n", "ones", "=", "torch", ".", "zeros_like", "(", "pseudo_onehot", ")", "\n", "predict", "=", "torch", ".", "where", "(", "pseudo_onehot", ">", "zeros", ",", "-", "1000.", "*", "ones", ",", "pred", ")", "\n", "\n", "#### del pixels with armgmax < num_classes ####", "\n", "ones", "=", "torch", ".", "ones_like", "(", "pseudo", ")", "\n", "pseudo1", "=", "torch", ".", "where", "(", "pseudo", "<", "num_classes", "*", "ones", ",", "pseudo", ",", "255", "*", "ones", ")", "\n", "if", "thres", "is", "not", "None", ":", "\n", "        ", "pred_max", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "pred", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ",", "1", ")", "[", "0", "]", "\n", "pseudo1", "=", "torch", ".", "where", "(", "pred_max", ">", "thres", ",", "pseudo1", ",", "255", "*", "ones", ")", "\n", "", "loss_known", "=", "seg_loss", "(", "pred", ",", "pseudo1", ")", "\n", "\n", "#### find out the maximum logit within open set classes as the label ####", "\n", "predict_open", "=", "torch", ".", "zeros_like", "(", "predict", ")", "\n", "predict_open", "[", ":", ",", "args", ".", "num_classes", ":", ",", ":", ",", ":", "]", "=", "predict", "[", ":", ",", "args", ".", "num_classes", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "Placeholder_y", "=", "torch", ".", "argmax", "(", "predict_open", ",", "dim", "=", "1", ")", "\n", "Placeholder_y", "=", "torch", ".", "where", "(", "pseudo1", "==", "255", "*", "ones", ",", "255", "*", "ones", ",", "Placeholder_y", ")", "\n", "\n", "# yy = torch.where(pseudo1 == 255 * ones, (num_classes + open_classes) * ones, Placeholder_y)", "\n", "# Placeholder_y_onehot = torch.eye(num_classes + open_classes + 1)[yy].permute(0, 3, 1, 2).float().cuda()[:,:(num_classes + open_classes),:,:]", "\n", "# predict[:,args.num_classes:,:,:] = torch.where(Placeholder_y_onehot > zeros, predict, -1000. * ones)[:,args.num_classes:,:,:]", "\n", "\n", "loss_unknown", "=", "seg_loss", "(", "predict", ",", "Placeholder_y", ")", "\n", "return", "loss_known", "+", "args", ".", "lambda_Place", "*", "loss_unknown", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV2_simt.main": [[232, 465], ["print", "map", "map", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.deeplab_multi.DeeplabMulti().cuda", "DeeplabMulti().cuda.state_dict", "fixed_model.state_dict.update", "DeeplabMulti().cuda.load_state_dict", "DeeplabMulti().cuda.train", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.deeplab_multi.DeeplabMulti().cuda", "DeeplabMulti().cuda.state_dict", "fixed_model.state_dict.update", "DeeplabMulti().cuda.load_state_dict", "DeeplabMulti().cuda.eval", "DeeplabMulti().cuda.parameters", "model.deeplab_multi.sig_NTM", "torch.Adam", "model.deeplab_multi.sig_NTM", "torch.Adam", "model.deeplab_multi.sig_W", "torch.Adam", "model.deeplab_multi.sig_W", "torch.Adam", "torch.utils.data.DataLoader", "enumerate", "torch.SGD", "optim.SGD.zero_grad", "torch.Upsample", "torch.Upsample", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "utils.loss.CrossEntropy2d().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "utils.loss.EntropyLoss().cuda", "range", "args.input_size.split", "args.input_size_target.split", "model.deeplab_multi.sig_NTM.parameters", "model.deeplab_multi.sig_NTM.parameters", "model.deeplab_multi.sig_W.parameters", "model.deeplab_multi.sig_W.parameters", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "dataset.cityscapes_dataset.cityscapesPseudo", "DeeplabMulti().cuda.optim_parameters", "DeeplabMulti().cuda.train", "optim.SGD.zero_grad", "trainV2_simt.adjust_learning_rate", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "trainV2_simt.adjust_learning_rate_T", "trainV2_simt.adjust_learning_rate_T", "trainV2_simt.adjust_learning_rate_T", "trainV2_simt.adjust_learning_rate_T", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "range", "optim.SGD.step", "optim.Adam.step", "optim.Adam.step", "time.asctime", "model.deeplab_multi.DeeplabMulti", "torch.load.items", "model.deeplab_multi.DeeplabMulti", "torch.load.items", "utils.loss.CrossEntropy2d", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "utils.loss.EntropyLoss", "model.deeplab_multi.sig_NTM.", "model.deeplab_multi.sig_NTM.", "model.deeplab_multi.sig_W.", "model.deeplab_multi.sig_W.", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "NTM_loss.backward", "optim.Adam.step", "optim.Adam.step", "model.deeplab_multi.sig_NTM.", "model.deeplab_multi.sig_NTM.", "enumerate.__next__", "image_target.cuda.cuda", "label_target.long().cuda.long().cuda", "DeeplabMulti().cuda.", "nn.Upsample.", "nn.Upsample.", "torch.mm().view().permute.clone().permute().view().detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.nn.MSELoss().cuda.", "torch.mm().view().permute.clone().permute().view().detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.nn.MSELoss().cuda.", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "trainV2_simt.Placeholder_loss", "torch.softmax().permute().contiguous().view", "torch.softmax().permute().contiguous().view", "torch.softmax().permute().contiguous().view", "torch.softmax().permute().contiguous().view", "torch.softmax().permute().contiguous().view", "torch.mm().view().permute", "torch.mm().view().permute", "torch.mm().view().permute", "torch.mm().view().permute", "torch.mm().view().permute", "torch.softmax().permute().contiguous().view", "torch.softmax().permute().contiguous().view", "torch.softmax().permute().contiguous().view", "torch.softmax().permute().contiguous().view", "torch.softmax().permute().contiguous().view", "torch.mm().view().permute", "torch.mm().view().permute", "torch.mm().view().permute", "torch.mm().view().permute", "torch.mm().view().permute", "CrossEntropy2d().cuda.", "CrossEntropy2d().cuda.", "model.deeplab_multi.sig_W.", "model.deeplab_multi.sig_W.", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "loss.backward", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "datetime.datetime.now", "print", "evaluate_cityscapes.evaluate_simt", "print", "time.localtime", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.MSELoss().cuda.", "torch.nn.MSELoss().cuda.", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "DeeplabMulti().cuda.load_state_dict", "DeeplabMulti().cuda.", "nn.Upsample.", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.argmax().float", "torch.argmax().float", "torch.argmax().float", "torch.argmax().float", "torch.argmax().float", "torch.where.permute().view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "trainV2_simt.Placeholder_loss", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "seg_loss.data.cpu().numpy", "seg_loss.data.cpu().numpy", "Tseg_loss.data.cpu().numpy", "Tseg_loss.data.cpu().numpy", "DeeplabMulti().cuda.state_dict", "os.join", "datetime.datetime.now.strftime", "os.join", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "NTM_W1.mm", "NTM_W2.mm", "label_target.long().cuda.long", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm().view().permute.clone().permute().view", "torch.mm().view().permute.clone().permute().view", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.softmax().permute().contiguous", "torch.softmax().permute().contiguous", "torch.softmax().permute().contiguous", "torch.softmax().permute().contiguous", "torch.softmax().permute().contiguous", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.softmax().permute().contiguous", "torch.softmax().permute().contiguous", "torch.softmax().permute().contiguous", "torch.softmax().permute().contiguous", "torch.softmax().permute().contiguous", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.MSELoss().cuda.", "torch.nn.MSELoss().cuda.", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "time.asctime", "os.path.exists", "os.path.exists", "os.remove", "os.remove", "DeeplabMulti().cuda.state_dict", "os.join", "output2.clone", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.where.permute", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.mm().view().permute.clone", "NTM_W1.mm", "NTM_W2.mm", "torch.linalg.det", "torch.linalg.det", "torch.linalg.det", "torch.linalg.det", "torch.linalg.det", "torch.linalg.det", "torch.linalg.det", "torch.linalg.det", "torch.linalg.det", "torch.linalg.det", "seg_loss.data.cpu", "seg_loss.data.cpu", "Tseg_loss.data.cpu", "Tseg_loss.data.cpu", "time.localtime", "torch.mm().view().permute.clone().permute", "torch.mm().view().permute.clone().permute", "torch.softmax().permute", "torch.softmax().permute", "torch.softmax().permute", "torch.softmax().permute", "torch.softmax().permute", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.softmax().permute", "torch.softmax().permute", "torch.softmax().permute", "torch.softmax().permute", "torch.softmax().permute", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "NTM1.transpose().mm", "NTM2.transpose().mm", "str", "time.time", "str", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "torch.where.detach().clone().cpu().numpy", "torch.mm().view().permute.clone", "torch.mm().view().permute.clone", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "NTM1.transpose", "NTM2.transpose", "str", "nn.Upsample.", "nn.Upsample.", "str", "torch.where.detach().clone().cpu", "torch.where.detach().clone", "torch.where.detach"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.optim_parameters", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.adjust_learning_rate", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.adjust_learning_rate_T", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.adjust_learning_rate_T", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.adjust_learning_rate_T", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.adjust_learning_rate_T", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.DeeplabMulti", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.DeeplabMulti", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.Placeholder_loss", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.evaluate_simt", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.Placeholder_loss"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "print", "(", "'Start: '", "+", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "best_iter", "=", "0", "\n", "best_mIoU", "=", "0", "\n", "mIoU", "=", "0", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "input_size_target", "=", "(", "w", ",", "h", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "gpu", "=", "args", ".", "gpu", "\n", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "# Create network", "\n", "model", "=", "DeeplabMulti", "(", "num_classes", "=", "args", ".", "num_classes", ",", "open_classes", "=", "args", ".", "open_classes", ",", "openset", "=", "True", ")", ".", "cuda", "(", ")", "\n", "net_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "(", "k", "in", "net_dict", ")", "}", "\n", "# pretrained_dict = {k[6:]: v for k, v in pretrained_dict.items() if (k[6:] in net_dict) and (v.shape==net_dict[k[6:]].shape)}", "\n", "net_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "net_dict", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# Create fixed network", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "fixed_model", "=", "DeeplabMulti", "(", "num_classes", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "net_dict", "=", "fixed_model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "(", "k", "in", "net_dict", ")", "}", "\n", "net_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "fixed_model", ".", "load_state_dict", "(", "net_dict", ")", "\n", "fixed_model", ".", "eval", "(", ")", "\n", "for", "param", "in", "fixed_model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# Create NTM", "\n", "", "NTM1", "=", "sig_NTM", "(", "args", ".", "num_classes", ",", "args", ".", "open_classes", ")", "\n", "optimizer_t1", "=", "optim", ".", "Adam", "(", "NTM1", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_T", ",", "weight_decay", "=", "0", ")", "\n", "\n", "NTM2", "=", "sig_NTM", "(", "args", ".", "num_classes", ",", "args", ".", "open_classes", ")", "\n", "optimizer_t2", "=", "optim", ".", "Adam", "(", "NTM2", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_T", ",", "weight_decay", "=", "0", ")", "\n", "\n", "NTM_W1", "=", "sig_W", "(", "args", ".", "num_classes", ",", "args", ".", "open_classes", ")", "\n", "optimizer_w1", "=", "optim", ".", "Adam", "(", "NTM_W1", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_T", ",", "weight_decay", "=", "0", ")", "\n", "\n", "NTM_W2", "=", "sig_W", "(", "args", ".", "num_classes", ",", "args", ".", "open_classes", ")", "\n", "optimizer_w2", "=", "optim", ".", "Adam", "(", "NTM_W2", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_T", ",", "weight_decay", "=", "0", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "", "targetloader", "=", "data", ".", "DataLoader", "(", "cityscapesPseudo", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target", ",", "\n", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_target", ",", "\n", "scale", "=", "False", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "args", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "1", "]", ",", "input_size", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "seg_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "Tseg_loss", "=", "CrossEntropy2d", "(", "is_softmax", "=", "False", ")", ".", "cuda", "(", ")", "\n", "loss_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'sum'", ")", ".", "cuda", "(", ")", "\n", "Info_loss", "=", "EntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "for", "i_iter", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "loss_seg_p1", "=", "0", "\n", "loss_seg_p2", "=", "0", "\n", "loss_seg_y1", "=", "0", "\n", "loss_seg_y2", "=", "0", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "optimizer_t1", ".", "zero_grad", "(", ")", "\n", "optimizer_t2", ".", "zero_grad", "(", ")", "\n", "optimizer_w1", ".", "zero_grad", "(", ")", "\n", "optimizer_w2", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate_T", "(", "optimizer_t1", ",", "i_iter", ")", "\n", "adjust_learning_rate_T", "(", "optimizer_t2", ",", "i_iter", ")", "\n", "adjust_learning_rate_T", "(", "optimizer_w1", ",", "i_iter", ")", "\n", "adjust_learning_rate_T", "(", "optimizer_w2", ",", "i_iter", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", "+", "args", ".", "open_classes", ",", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "for", "iter", "in", "range", "(", "10", ")", ":", "\n", "## optimize weight ###", "\n", "            ", "T1", "=", "NTM1", "(", ")", "\n", "T2", "=", "NTM2", "(", ")", "\n", "W1", "=", "NTM_W1", "(", ")", "\n", "W2", "=", "NTM_W2", "(", ")", "\n", "optimizer_w1", ".", "zero_grad", "(", ")", "\n", "optimizer_w2", ".", "zero_grad", "(", ")", "\n", "\n", "NTM_loss", "=", "(", "loss_mse", "(", "W1", ".", "mm", "(", "T1", ")", ",", "zeros", ")", "+", "loss_mse", "(", "W2", ".", "mm", "(", "T2", ")", ",", "zeros", ")", ")", "\n", "NTM_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer_w1", ".", "step", "(", ")", "\n", "optimizer_w2", ".", "step", "(", ")", "\n", "\n", "", "for", "sub_i", "in", "range", "(", "args", ".", "iter_size", ")", ":", "\n", "            ", "T1", "=", "NTM1", "(", ")", "\n", "T2", "=", "NTM2", "(", ")", "\n", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "image_target", ",", "label_target", ",", "_", ",", "name", "=", "batch", "\n", "image_target", "=", "image_target", ".", "cuda", "(", ")", "\n", "label_target", "=", "label_target", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "##### Generate pseudo label #####", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fixed_model", ".", "load_state_dict", "(", "net_dict", ")", "\n", "output1", ",", "output2", "=", "fixed_model", "(", "image_target", ")", "\n", "labelC", "=", "interp_target", "(", "torch", ".", "softmax", "(", "output2", ".", "clone", "(", ")", ",", "dim", "=", "1", ")", ")", "\n", "labelC_max", "=", "torch", ".", "max", "(", "labelC", ",", "1", ")", "\n", "labelC_argmax", "=", "torch", ".", "argmax", "(", "labelC", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "labelC_flat", "=", "labelC", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "-", "1", ",", "args", ".", "num_classes", ")", "\n", "thres", "=", "args", ".", "Threshold_high", "\n", "labelC", "=", "torch", ".", "where", "(", "labelC_max", "[", "0", "]", ">", "thres", ",", "labelC_argmax", ",", "255.", "*", "torch", ".", "ones_like", "(", "labelC_argmax", ")", ")", "\n", "thres", "=", "args", ".", "Threshold_low", "\n", "labelC", "=", "torch", ".", "where", "(", "labelC_max", "[", "0", "]", "<", "thres", ",", "args", ".", "num_classes", "*", "torch", ".", "ones_like", "(", "labelC_argmax", ")", ",", "labelC", ")", "\n", "Conf_label_target", "=", "torch", ".", "from_numpy", "(", "labelC", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "del", "labelC", "\n", "del", "output1", "\n", "del", "output2", "\n", "\n", "###############################", "\n", "##### Train target images #####", "\n", "###############################", "\n", "", "pred1", ",", "pred2", "=", "model", "(", "image_target", ")", "\n", "pred1", "=", "interp_target", "(", "pred1", ")", "\n", "pred2", "=", "interp_target", "(", "pred2", ")", "\n", "\n", "######## Anchor loss ########", "\n", "pseudo_flat1", "=", "pred1", ".", "clone", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "-", "1", ",", "args", ".", "num_classes", "+", "args", ".", "open_classes", ")", ".", "detach", "(", ")", "\n", "Anchor_index", "=", "torch", ".", "argmax", "(", "pseudo_flat1", ",", "dim", "=", "0", ")", "\n", "Exist_label", "=", "torch", ".", "unique", "(", "torch", ".", "argmax", "(", "pseudo_flat1", ",", "dim", "=", "1", ")", ")", "\n", "Anchor1", "=", "labelC_flat", "[", "Anchor_index", "]", "\n", "NTM_Anchor_loss", "=", "loss_mse", "(", "T1", "[", "Exist_label", "]", ",", "Anchor1", "[", "Exist_label", "]", ")", "\n", "pseudo_flat2", "=", "pred2", ".", "clone", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "-", "1", ",", "args", ".", "num_classes", "+", "args", ".", "open_classes", ")", ".", "detach", "(", ")", "\n", "Anchor_index", "=", "torch", ".", "argmax", "(", "pseudo_flat2", ",", "dim", "=", "0", ")", "\n", "Exist_label", "=", "torch", ".", "unique", "(", "torch", ".", "argmax", "(", "pseudo_flat2", ",", "dim", "=", "1", ")", ")", "\n", "Anchor2", "=", "labelC_flat", "[", "Anchor_index", "]", "\n", "NTM_Anchor_loss", "+=", "loss_mse", "(", "T2", "[", "Exist_label", "]", ",", "Anchor2", "[", "Exist_label", "]", ")", "\n", "\n", "######## Class posterior constraint ########", "\n", "pseudo", "=", "torch", ".", "argmax", "(", "pred2", ".", "clone", "(", ")", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "Conf_label_target", ")", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "Conf_label_target", ")", "\n", "mask", "=", "torch", ".", "where", "(", "Conf_label_target", "==", "args", ".", "num_classes", "*", "ones", ",", "ones", ",", "zeros", ")", "\n", "pseudo1", "=", "mask", "*", "pseudo", "\n", "pseudo1", "=", "torch", ".", "where", "(", "pseudo1", ">=", "args", ".", "num_classes", "*", "ones", ",", "pseudo1", ",", "255", "*", "ones", ")", "\n", "Conf_label_target", "=", "torch", ".", "where", "(", "Conf_label_target", "==", "args", ".", "num_classes", "*", "ones", ",", "pseudo1", ",", "Conf_label_target", ")", "\n", "loss_p1", "=", "seg_loss", "(", "pred1", ",", "Conf_label_target", ")", "\n", "loss_p2", "=", "seg_loss", "(", "pred2", ",", "Conf_label_target", ")", "\n", "\n", "######## Placeholder loss ########", "\n", "Place_loss", "=", "args", ".", "lambda_seg", "*", "Placeholder_loss", "(", "pred1", ",", "args", ".", "num_classes", ",", "args", ".", "open_classes", ",", "thres", "=", "args", ".", "Threshold_high", ")", "\n", "Place_loss", "+=", "Placeholder_loss", "(", "pred2", ",", "args", ".", "num_classes", ",", "args", ".", "open_classes", ",", "thres", "=", "args", ".", "Threshold_high", ")", "\n", "\n", "######## Noise class posterior constraint ########", "\n", "pred1", "=", "torch", ".", "softmax", "(", "interp_target", "(", "pred1", ")", ",", "dim", "=", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "args", ".", "num_classes", "+", "args", ".", "open_classes", ")", "\n", "pred1", "=", "torch", ".", "mm", "(", "pred1", ",", "T1", ")", ".", "view", "(", "args", ".", "batch_size", ",", "h", ",", "w", ",", "args", ".", "num_classes", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "pred2", "=", "torch", ".", "softmax", "(", "interp_target", "(", "pred2", ")", ",", "dim", "=", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "args", ".", "num_classes", "+", "args", ".", "open_classes", ")", "\n", "pred2", "=", "torch", ".", "mm", "(", "pred2", ",", "T2", ")", ".", "view", "(", "args", ".", "batch_size", ",", "h", ",", "w", ",", "args", ".", "num_classes", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "loss_y1", "=", "Tseg_loss", "(", "pred1", ",", "label_target", ")", "\n", "loss_y2", "=", "Tseg_loss", "(", "pred2", ",", "label_target", ")", "\n", "\n", "## optimze NTM ###", "\n", "W1", "=", "NTM_W1", "(", ")", "\n", "W2", "=", "NTM_W2", "(", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", "+", "args", ".", "open_classes", ",", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "NTM_Convex_loss", "=", "0.", "-", "(", "loss_mse", "(", "W1", ".", "mm", "(", "T1", ")", ",", "zeros", ")", "+", "loss_mse", "(", "W2", ".", "mm", "(", "T2", ")", ",", "zeros", ")", ")", "\n", "\n", "NTM_Volume_loss", "=", "torch", ".", "log", "(", "torch", ".", "sqrt", "(", "torch", ".", "abs", "(", "torch", ".", "linalg", ".", "det", "(", "T1", ".", "transpose", "(", "1", ",", "0", ")", ".", "mm", "(", "T1", ")", ")", ")", ")", ")", "\n", "NTM_Volume_loss", "+=", "torch", ".", "log", "(", "torch", ".", "sqrt", "(", "torch", ".", "abs", "(", "torch", ".", "linalg", ".", "det", "(", "T2", ".", "transpose", "(", "1", ",", "0", ")", ".", "mm", "(", "T2", ")", ")", ")", ")", ")", "\n", "\n", "if", "torch", ".", "isinf", "(", "NTM_Volume_loss", ")", "or", "torch", ".", "isnan", "(", "NTM_Volume_loss", ")", ":", "\n", "                ", "NTM_Volume_loss", "=", "0.", "\n", "\n", "", "loss_target", "=", "loss_p2", "+", "loss_y2", "+", "args", ".", "lambda_seg", "*", "loss_p1", "+", "args", ".", "lambda_seg", "*", "loss_y1", "\n", "loss", "=", "Place_loss", "+", "loss_target", "+", "args", ".", "lambda_Convex", "*", "NTM_Convex_loss", "+", "args", ".", "lambda_Volume", "*", "NTM_Volume_loss", "+", "args", ".", "lambda_Anchor", "*", "NTM_Anchor_loss", "\n", "\n", "# proper normalization", "\n", "loss", "=", "loss", "/", "args", ".", "iter_size", "\n", "loss", ".", "backward", "(", ")", "\n", "loss_seg_p1", "+=", "loss_p1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "args", ".", "iter_size", "\n", "loss_seg_p2", "+=", "loss_p2", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "args", ".", "iter_size", "\n", "loss_seg_y1", "+=", "loss_y1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "args", ".", "iter_size", "\n", "loss_seg_y2", "+=", "loss_y2", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "args", ".", "iter_size", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer_t1", ".", "step", "(", ")", "\n", "optimizer_t2", ".", "step", "(", ")", "\n", "\n", "if", "(", "i_iter", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\n", "'iter = {0:8d}/{1:8d}, loss_seg_p = {2:.3f} loss_seg_y = {3:.3f} Convex = {4:.3f} Volume = {5:.3f} Anchor = {6:.3f} Place_loss = {7:.3f}'", ".", "format", "(", "\n", "i_iter", ",", "args", ".", "num_steps", ",", "loss_seg_p1", "+", "loss_seg_p2", ",", "loss_seg_y1", "+", "loss_seg_y2", ",", "NTM_Convex_loss", ",", "NTM_Volume_loss", ",", "NTM_Anchor_loss", ",", "Place_loss", ")", ")", "\n", "\n", "# if (i_iter) % 5000 == 0:", "\n", "#     plot_NTM(NTM1().detach().cpu().numpy(), normalize=True, title='NTM1_'+str(i_iter), cmap=plt.cm.Blues)", "\n", "#     plot_NTM(NTM2().detach().cpu().numpy(), normalize=True, title='NTM2_'+str(i_iter), cmap=plt.cm.Blues)", "\n", "\n", "", "if", "i_iter", ">=", "args", ".", "num_steps_stop", "-", "1", ":", "\n", "            ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'.pth'", ")", ")", "\n", "break", "\n", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "now", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ",", "'  Begin evaluation on iter {0:8d}/{1:8d}  '", ".", "format", "(", "i_iter", ",", "args", ".", "num_steps", ")", ")", "\n", "mIoU", "=", "evaluate_simt", "(", "model", ")", "\n", "print", "(", "'Finish Evaluation: '", "+", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "if", "mIoU", ">", "best_mIoU", ":", "\n", "                ", "old_file", "=", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_iter'", "+", "str", "(", "best_iter", ")", "+", "'_mIoU'", "+", "str", "(", "best_mIoU", ")", "+", "'.pth'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "old_file", ")", "is", "True", ":", "\n", "                    ", "os", ".", "remove", "(", "old_file", ")", "\n", "", "print", "(", "'Saving model with mIoU: '", ",", "mIoU", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_iter'", "+", "str", "(", "i_iter", ")", "+", "'_mIoU'", "+", "str", "(", "mIoU", ")", "+", "'.pth'", ")", ")", "\n", "best_mIoU", "=", "mIoU", "\n", "best_iter", "=", "i_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ClassDistribution.fast_hist": [[52, 55], ["numpy.bincount"], "function", ["None"], ["", "def", "fast_hist", "(", "a", ",", "n", ")", ":", "\n", "    ", "ka", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "a", "[", "ka", "]", ",", "minlength", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ClassDistribution.per_class_iu": [[56, 58], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ClassDistribution.label_mapping": [[59, 64], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_ClassDistribution.compute_CD": [[66, 87], ["numpy.int", "print", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "open().read().splitlines", "numpy.zeros", "range", "open", "json.load", "os.path.join", "len", "numpy.array", "compute_ClassDistribution.fast_hist", "os.path.join", "open().read", "PIL.Image.open", "np.array.flatten", "x.split", "open"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.fast_hist"], ["", "def", "compute_CD", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "'/home/xiaoqiguo2/MetaCorrection/datasets/cityscapes_list'", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "'Num classes'", ",", "num_classes", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'train.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'train_label.txt'", ")", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "CM", "=", "np", ".", "zeros", "(", "19", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "pred_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "CM", "+=", "fast_hist", "(", "pred", ".", "flatten", "(", ")", ",", "19", ")", "\n", "", "return", "CM", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV1_warmup.get_arguments": [[66, 140], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : DeepLab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-T\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_T", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-seg\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_SEG", ",", "\n", "help", "=", "\"lambda_seg.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--open-classes\"", ",", "type", "=", "int", ",", "default", "=", "OPEN_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log-dir\"", ",", "type", "=", "str", ",", "default", "=", "LOG_DIR", ",", "\n", "help", "=", "\"Path to the directory of log.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV1_warmup.lr_poly": [[146, 148], ["float"], "function", ["None"], ["def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV1_warmup.adjust_learning_rate": [[150, 155], ["trainV1_warmup.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.trainV1_warmup.main": [[156, 257], ["print", "map", "map", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.deeplab_multi.DeeplabMulti().cuda", "DeeplabMulti().cuda.state_dict", "model.state_dict.update", "DeeplabMulti().cuda.load_state_dict", "DeeplabMulti().cuda.train", "torch.utils.data.DataLoader", "enumerate", "torch.SGD", "optim.SGD.zero_grad", "torch.Upsample", "torch.Upsample", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "range", "args.input_size.split", "args.input_size_target.split", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "dataset.cityscapes_dataset.cityscapesPseudo", "DeeplabMulti().cuda.optim_parameters", "DeeplabMulti().cuda.train", "optim.SGD.zero_grad", "trainV1_warmup.adjust_learning_rate", "range", "optim.SGD.step", "time.asctime", "model.deeplab_multi.DeeplabMulti", "torch.load.items", "enumerate.__next__", "image_target.cuda.cuda", "label_target.long().cuda.long().cuda", "DeeplabMulti().cuda.", "nn.Upsample.", "nn.Upsample.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "loss.backward", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "datetime.datetime.now", "print", "evaluate_cityscapes.evaluate_warmup", "print", "time.localtime", "seg_loss.data.cpu().numpy", "seg_loss.data.cpu().numpy", "DeeplabMulti().cuda.state_dict", "os.join", "datetime.datetime.now.strftime", "os.join", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "label_target.long().cuda.long", "time.asctime", "os.path.exists", "os.path.exists", "os.remove", "os.remove", "DeeplabMulti().cuda.state_dict", "os.join", "seg_loss.data.cpu", "seg_loss.data.cpu", "time.localtime", "str", "time.time", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.optim_parameters", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.adjust_learning_rate", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.DeeplabMulti", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.evaluate_warmup"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "print", "(", "'Start: '", "+", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "best_iter", "=", "0", "\n", "best_mIoU", "=", "0", "\n", "mIoU", "=", "0", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "input_size_target", "=", "(", "w", ",", "h", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "gpu", "=", "args", ".", "gpu", "\n", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "# Create network", "\n", "model", "=", "DeeplabMulti", "(", "num_classes", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "net_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# pretrained_dict = {k: v for k, v in pretrained_dict.items() if (k in net_dict)}", "\n", "pretrained_dict", "=", "{", "k", "[", "6", ":", "]", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "(", "k", "[", "6", ":", "]", "in", "net_dict", ")", "and", "(", "v", ".", "shape", "==", "net_dict", "[", "k", "[", "6", ":", "]", "]", ".", "shape", ")", "}", "\n", "net_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "net_dict", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "", "targetloader", "=", "data", ".", "DataLoader", "(", "cityscapesPseudo", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target", ",", "\n", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_target", ",", "\n", "scale", "=", "False", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "args", ",", "warmup", "=", "True", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "1", "]", ",", "input_size", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "seg_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "for", "i_iter", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "loss_seg_value1", "=", "0", "\n", "loss_seg_value2", "=", "0", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "for", "sub_i", "in", "range", "(", "args", ".", "iter_size", ")", ":", "\n", "            ", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "image_target", ",", "label_target", ",", "_", ",", "name", "=", "batch", "\n", "image_target", "=", "image_target", ".", "cuda", "(", ")", "\n", "label_target", "=", "label_target", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "pred1", ",", "pred2", "=", "model", "(", "image_target", ")", "\n", "pred1", "=", "interp_target", "(", "pred1", ")", "\n", "pred2", "=", "interp_target", "(", "pred2", ")", "\n", "\n", "loss_seg1", "=", "seg_loss", "(", "pred1", ",", "label_target", ")", "\n", "loss_seg2", "=", "seg_loss", "(", "pred2", ",", "label_target", ")", "\n", "loss", "=", "loss_seg2", "+", "args", ".", "lambda_seg", "*", "loss_seg1", "\n", "\n", "# proper normalization", "\n", "loss", "=", "loss", "/", "args", ".", "iter_size", "\n", "loss", ".", "backward", "(", ")", "\n", "loss_seg_value1", "+=", "loss_seg1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "args", ".", "iter_size", "\n", "loss_seg_value2", "+=", "loss_seg2", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "args", ".", "iter_size", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "i_iter", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\n", "'iter = {0:8d}/{1:8d}, loss_seg1 = {2:.3f} loss_seg2 = {3:.3f}'", ".", "format", "(", "\n", "i_iter", ",", "args", ".", "num_steps", ",", "loss_seg_value1", ",", "loss_seg_value2", ")", ")", "\n", "\n", "", "if", "i_iter", ">=", "args", ".", "num_steps_stop", "-", "1", ":", "\n", "            ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'.pth'", ")", ")", "\n", "break", "\n", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "now", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ",", "'  Begin evaluation on iter {0:8d}/{1:8d}  '", ".", "format", "(", "i_iter", ",", "args", ".", "num_steps", ")", ")", "\n", "mIoU", "=", "evaluate_warmup", "(", "model", ")", "\n", "print", "(", "'Finish Evaluation: '", "+", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "if", "mIoU", ">", "best_mIoU", ":", "\n", "                ", "old_file", "=", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_BAPA_warmup_iter'", "+", "str", "(", "best_iter", ")", "+", "'_mIoU'", "+", "str", "(", "best_mIoU", ")", "+", "'.pth'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "old_file", ")", "is", "True", ":", "\n", "                    ", "os", ".", "remove", "(", "old_file", ")", "\n", "", "print", "(", "'Saving model with mIoU: '", ",", "mIoU", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_BAPA_warmup_iter'", "+", "str", "(", "i_iter", ")", "+", "'_mIoU'", "+", "str", "(", "mIoU", ")", "+", "'.pth'", ")", ")", "\n", "best_mIoU", "=", "mIoU", "\n", "best_iter", "=", "i_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools._init_paths.add_path": [[8, 11], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.get_arguments": [[72, 158], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : DeepLab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-T\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_T", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-seg\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_SEG", ",", "\n", "help", "=", "\"lambda_seg.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--Threshold-high\"", ",", "type", "=", "float", ",", "default", "=", "Threshold_high", ",", "\n", "help", "=", "\"Threshold_high\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--Threshold-low\"", ",", "type", "=", "float", ",", "default", "=", "Threshold_low", ",", "\n", "help", "=", "\"Threshold_low\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-Place\"", ",", "type", "=", "float", ",", "default", "=", "lambda_Place", ",", "\n", "help", "=", "\"lambda_Place\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-Convex\"", ",", "type", "=", "float", ",", "default", "=", "lambda_Convex", ",", "\n", "help", "=", "\"lambda_Convex\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-Volume\"", ",", "type", "=", "float", ",", "default", "=", "lambda_Volume", ",", "\n", "help", "=", "\"lambda_Volume\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-Anchor\"", ",", "type", "=", "float", ",", "default", "=", "lambda_Anchor", ",", "\n", "help", "=", "\"lambda_Anchor\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--open-classes\"", ",", "type", "=", "int", ",", "default", "=", "OPEN_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log-dir\"", ",", "type", "=", "str", ",", "default", "=", "LOG_DIR", ",", "\n", "help", "=", "\"Path to the directory of log.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.lr_poly": [[174, 176], ["float"], "function", ["None"], ["def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.adjust_learning_rate": [[177, 182], ["test.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.adjust_learning_rate_T": [[183, 186], ["test.lr_poly"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.lr_poly"], ["", "", "def", "adjust_learning_rate_T", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate_T", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.plot_NTM": [[187, 201], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.colorbar", "itertools.product", "matplotlib.savefig", "trans_mat.max", "range", "range", "matplotlib.text", "int", "numpy.float"], "function", ["None"], ["", "def", "plot_NTM", "(", "trans_mat", ",", "normalize", "=", "True", ",", "title", "=", "'NTM1'", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "trans_mat", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "thresh", "=", "trans_mat", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "trans_mat", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "trans_mat", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "num", "=", "'{:.2f}'", ".", "format", "(", "trans_mat", "[", "i", ",", "j", "]", ")", "if", "normalize", "else", "int", "(", "trans_mat", "[", "i", ",", "j", "]", ")", "\n", "plt", ".", "text", "(", "j", ",", "i", ",", "num", ",", "\n", "fontsize", "=", "2", ",", "\n", "verticalalignment", "=", "'center'", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "np", ".", "float", "(", "num", ")", ">", "thresh", "else", "\"black\"", ")", "\n", "", "plt", ".", "savefig", "(", "'../NTM_vis/'", "+", "title", "+", "'.png'", ",", "transparent", "=", "True", ",", "dpi", "=", "600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.Placeholder_loss": [[202, 227], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "[].permute().float().cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.nn.CrossEntropyLoss.", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "predict[].clone().detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.nn.CrossEntropyLoss.", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "[].permute().float", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "predict[].clone", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "[].permute", "pred.clone().detach", "pred.clone", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "Placeholder_loss", "(", "pred", ",", "num_classes", ",", "open_classes", ",", "thres", "=", "None", ")", ":", "\n", "    ", "seg_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "#### del maximum elements in prediction####", "\n", "pseudo", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "long", "(", ")", "\n", "pseudo_onehot", "=", "torch", ".", "eye", "(", "num_classes", "+", "open_classes", ")", "[", "pseudo", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "pseudo_onehot", ")", "\n", "ones", "=", "torch", ".", "zeros_like", "(", "pseudo_onehot", ")", "\n", "predict", "=", "torch", ".", "where", "(", "pseudo_onehot", ">", "zeros", ",", "-", "100.", "*", "ones", ",", "pred", ")", "\n", "\n", "#### del pixels with armgmax < num_classes ####", "\n", "ones", "=", "torch", ".", "ones_like", "(", "pseudo", ")", "\n", "pseudo1", "=", "torch", ".", "where", "(", "pseudo", "<", "num_classes", "*", "ones", ",", "pseudo", ",", "255", "*", "ones", ")", "\n", "if", "thres", "is", "not", "None", ":", "\n", "        ", "pred_max", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "pred", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ",", "1", ")", "[", "0", "]", "\n", "pseudo1", "=", "torch", ".", "where", "(", "pred_max", ">", "thres", ",", "pseudo1", ",", "255", "*", "ones", ")", "\n", "", "loss_known", "=", "seg_loss", "(", "pred", ",", "pseudo1", ")", "\n", "\n", "#### find out the maximum logit within open set classes as the label ####", "\n", "predict_open", "=", "torch", ".", "zeros_like", "(", "predict", ")", "\n", "predict_open", "[", ":", ",", "args", ".", "num_classes", ":", ",", ":", ",", ":", "]", "=", "predict", "[", ":", ",", "args", ".", "num_classes", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "Placeholder_y", "=", "torch", ".", "argmax", "(", "predict_open", ",", "dim", "=", "1", ")", "\n", "Placeholder_y", "=", "torch", ".", "where", "(", "pseudo1", "==", "255", "*", "ones", ",", "255", "*", "ones", ",", "Placeholder_y", ")", "\n", "\n", "loss_unknown", "=", "seg_loss", "(", "predict", ",", "Placeholder_y", ")", "\n", "return", "loss_known", "+", "args", ".", "lambda_Place", "*", "loss_unknown", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.test.main": [[228, 244], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.deeplab_multi.DeeplabMulti().cuda", "DeeplabMulti().cuda.state_dict", "model.state_dict.update", "DeeplabMulti().cuda.load_state_dict", "datetime.datetime.now", "print", "evaluate_cityscapes.evaluate_simt", "print", "datetime.datetime.now.strftime", "model.deeplab_multi.DeeplabMulti", "torch.load.items", "time.asctime", "time.localtime", "time.time"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.evaluate_simt", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.DeeplabMulti"], ["", "def", "main", "(", ")", ":", "\n", "    ", "cudnn", ".", "enabled", "=", "True", "\n", "gpu", "=", "args", ".", "gpu", "\n", "\n", "# Create network", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "model", "=", "DeeplabMulti", "(", "num_classes", "=", "args", ".", "num_classes", ",", "open_classes", "=", "args", ".", "open_classes", ",", "openset", "=", "True", ")", ".", "cuda", "(", ")", "\n", "net_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "(", "k", "in", "net_dict", ")", "}", "\n", "net_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "net_dict", ")", "\n", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "now", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ")", "\n", "mIoU", "=", "evaluate_simt", "(", "model", ")", "\n", "print", "(", "'Finish Evaluation: '", "+", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_iou.fast_hist": [[9, 12], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_iou.per_class_iu": [[14, 16], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_iou.label_mapping": [[18, 23], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_iou.compute_mIoU": [[25, 60], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.zeros", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "range", "compute_iou.per_class_iu", "range", "print", "open", "json.load", "os.path.join", "os.path.join", "len", "numpy.array", "numpy.array", "compute_iou.label_mapping", "compute_iou.fast_hist", "print", "os.path.join", "open().read", "open().read", "PIL.Image.open", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "print", "str", "x.split", "label_mapping.flatten", "np.array.flatten", "str", "round", "open", "open", "len", "len", "len", "round", "label_mapping.flatten", "np.array.flatten", "numpy.mean", "numpy.nanmean", "compute_iou.per_class_iu"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.per_class_iu", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.label_mapping", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.fast_hist", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.per_class_iu"], ["", "def", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "'Num classes'", ",", "num_classes", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'val.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'label.txt'", ")", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "mean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "return", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_iou.main": [[62, 64], ["compute_iou.compute_mIoU"], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.compute_iou.compute_mIoU"], ["", "def", "main", "(", "args", ")", ":", "\n", "   ", "compute_mIoU", "(", "args", ".", "gt_dir", ",", "args", ".", "pred_dir", ",", "args", ".", "devkit_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.colorize_mask": [[48, 54], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.get_arguments": [[55, 81], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"Model Choice (DeeplabMulti/DeeplabVGG/Oracle).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.fast_hist": [[82, 85], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.per_class_iu": [[87, 89], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.label_mapping": [[91, 96], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.evaluate_simt": [[97, 164], ["torch.device", "torch.device", "torch.device", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.Upsample", "print", "numpy.int", "numpy.array", "numpy.array", "numpy.zeros", "seg_model.eval", "evaluate_cityscapes.per_class_iu", "range", "print", "round", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "open", "json.load", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "os.path.join", "zip", "image.to.to", "image_640.to.to", "seg_model", "nn.Upsample.cpu().data[].numpy", "seg_model", "nn.Upsample.cpu().data[].numpy", "np.asarray.transpose", "numpy.asarray", "numpy.array", "evaluate_cityscapes.label_mapping", "evaluate_cityscapes.fast_hist", "str", "numpy.nanmean", "numpy.argmax", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.asarray.flatten", "str", "round", "label_mapping.flatten", "np.asarray.flatten", "round", "len", "len", "numpy.nanmean", "nn.Upsample.cpu", "nn.Upsample.cpu", "name[].split", "label_mapping.flatten", "pred.flatten", "nn.Upsample.", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.per_class_iu", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.label_mapping", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.fast_hist"], ["", "def", "evaluate_simt", "(", "seg_model", ",", "pred_dir", "=", "None", ",", "devkit_dir", "=", "'/home/xiaoqiguo2/SimT/dataset/cityscapes_list'", ",", "post", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "# if not os.path.exists(pred_dir):", "\n", "#     os.makedirs(pred_dir)", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "DATA_DIRECTORY", ",", "DATA_LIST_PATH", ",", "crop_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "SET", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "testloader_640", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "DATA_DIRECTORY", ",", "DATA_LIST_PATH", ",", "crop_size", "=", "(", "1280", ",", "640", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "SET", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "print", "(", "'Evaluate for testing data'", ")", "\n", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "seg_model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "(", "batch", ",", "batch_640", ")", "in", "enumerate", "(", "zip", "(", "testloader", ",", "testloader_640", ")", ")", ":", "\n", "            ", "image", ",", "_", ",", "name", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "\n", "image_640", ",", "_", ",", "name", "=", "batch_640", "\n", "image_640", "=", "image_640", ".", "to", "(", "device", ")", "\n", "\n", "output1", ",", "output2", "=", "seg_model", "(", "image", ")", "\n", "output", "=", "interp", "(", "output2", "[", ":", ",", ":", "num_classes", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "del", "output1", "\n", "del", "output2", "\n", "\n", "output1", ",", "output2", "=", "seg_model", "(", "image_640", ")", "\n", "output", "+=", "interp", "(", "output2", "[", ":", ",", ":", "num_classes", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "del", "output1", "\n", "del", "output2", "\n", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ")", "\n", "\n", "gt_dir", "=", "'/home/xiaoqiguo2/scratch/UDA_Natural/Cityscapes/label'", "\n", "gt_path", "=", "'%s/%s'", "%", "(", "gt_dir", ",", "name", "[", "0", "]", ".", "split", "(", "'leftImg8bit'", ")", "[", "0", "]", "+", "'gtFine_labelIds.png'", ")", "\n", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_path", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "output", ".", "flatten", "(", ")", ")", ":", "\n", "                ", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "\n", "# output_col = colorize_mask(np.uint8(output))", "\n", "# output = Image.fromarray(np.uint8(output))", "\n", "# name = name[0].split('/')[-1]", "\n", "# # pred_dir = '/home/xiaoqiguo2/scratch/UDA_Natural/Cityscapes/pseudo_sfdaseg_so'", "\n", "# pred_dir = '/home/xiaoqiguo2/SimT/result_SFDA'", "\n", "# output.save('%s/%s' % (pred_dir, name))", "\n", "# output_col.save('%s/%s_color.png' % (pred_dir, name.split('.')[0]))", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "return", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.evaluate_warmup": [[166, 227], ["torch.device", "torch.device", "torch.device", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.Upsample", "print", "numpy.int", "numpy.array", "numpy.array", "numpy.zeros", "seg_model.eval", "evaluate_cityscapes.per_class_iu", "range", "print", "round", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "open", "json.load", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "os.path.join", "zip", "image.to.to", "image_640.to.to", "seg_model", "nn.Upsample.cpu().data[].numpy", "np.asarray.transpose", "numpy.asarray", "numpy.array", "evaluate_cityscapes.label_mapping", "evaluate_cityscapes.fast_hist", "str", "numpy.nanmean", "numpy.argmax", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.asarray.flatten", "str", "round", "label_mapping.flatten", "np.asarray.flatten", "round", "len", "len", "numpy.nanmean", "nn.Upsample.cpu", "name[].split", "label_mapping.flatten", "pred.flatten", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.per_class_iu", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.label_mapping", "home.repos.pwc.inspect_result.cityu-aim-group_simt.tools.evaluate_cityscapes.fast_hist"], ["", "def", "evaluate_warmup", "(", "seg_model", ",", "pred_dir", "=", "None", ",", "devkit_dir", "=", "'/home/xiaoqiguo2/SimT/dataset/cityscapes_list'", ",", "post", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "# if not os.path.exists(pred_dir):", "\n", "#     os.makedirs(pred_dir)", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "DATA_DIRECTORY", ",", "DATA_LIST_PATH", ",", "crop_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "SET", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "testloader_640", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "DATA_DIRECTORY", ",", "DATA_LIST_PATH", ",", "crop_size", "=", "(", "1280", ",", "640", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "SET", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "print", "(", "'Evaluate for testing data'", ")", "\n", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "seg_model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "(", "batch", ",", "batch_640", ")", "in", "enumerate", "(", "zip", "(", "testloader", ",", "testloader_640", ")", ")", ":", "\n", "            ", "image", ",", "_", ",", "name", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "\n", "image_640", ",", "_", ",", "name", "=", "batch_640", "\n", "image_640", "=", "image_640", ".", "to", "(", "device", ")", "\n", "\n", "output1", ",", "output2", "=", "seg_model", "(", "image", ")", "\n", "output", "=", "interp", "(", "output2", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "del", "output1", "\n", "del", "output2", "\n", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ")", "\n", "\n", "gt_dir", "=", "'/home/xiaoqiguo2/scratch/UDA_Natural/Cityscapes/label'", "\n", "gt_path", "=", "'%s/%s'", "%", "(", "gt_dir", ",", "name", "[", "0", "]", ".", "split", "(", "'leftImg8bit'", ")", "[", "0", "]", "+", "'gtFine_labelIds.png'", ")", "\n", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_path", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "output", ".", "flatten", "(", ")", ")", ":", "\n", "                ", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "\n", "# output_col = colorize_mask(np.uint8(output))", "\n", "# output = Image.fromarray(np.uint8(output))", "\n", "# name = name[0].split('/')[-1]", "\n", "# pred_dir = '/home/xiaoqiguo2/scratch/UDA_Natural/Cityscapes/pseudo_adapt_warmup'", "\n", "# output.save('%s/%s' % (pred_dir, name))", "\n", "# output_col.save('%s/%s_color.png' % (pred_dir, name.split('.')[0]))", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "return", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", "", "", ""]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.discriminator.FCDiscriminator.__init__": [[7, 17], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["\t", "def", "__init__", "(", "self", ",", "num_classes", ",", "ndf", "=", "64", ")", ":", "\n", "\t\t", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "#self.up_sample = nn.Upsample(scale_factor=32, mode='bilinear')", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.discriminator.FCDiscriminator.forward": [[21, 35], ["discriminator.FCDiscriminator.conv1", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv2", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv3", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv4", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "#x = self.up_sample(x)", "\n", "#x = self.sigmoid(x) ", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.BasicBlock.__init__": [[25, 34], ["torch.Module.__init__", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.conv3x3", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.BasicBlock.forward": [[35, 52], ["deeplab.BasicBlock.conv1", "deeplab.BasicBlock.bn1", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.conv2", "deeplab.BasicBlock.bn2", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.Bottleneck.__init__": [[57, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.Bottleneck.forward": [[79, 100], ["deeplab.Bottleneck.conv1", "deeplab.Bottleneck.bn1", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv2", "deeplab.Bottleneck.bn2", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv3", "deeplab.Bottleneck.bn3", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.Classifier_Module.__init__": [[103, 111], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "2048", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.Classifier_Module.forward": [[112, 117], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.ResNet.__init__": [[121, 144], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_pred_layer", "deeplab.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.ResNet._make_layer": [[147, 163], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.ResNet._make_pred_layer": [[163, 165], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.ResNet.forward": [[166, 178], ["deeplab.ResNet.conv1", "deeplab.ResNet.bn1", "deeplab.ResNet.relu", "deeplab.ResNet.maxpool", "deeplab.ResNet.layer1", "deeplab.ResNet.layer2", "deeplab.ResNet.layer3", "deeplab.ResNet.layer4", "deeplab.ResNet.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "return", "x", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.ResNet.get_1x_lr_params_NOscale": [[179, 203], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for \n        the last classification layer. Note that for each batchnorm layer, \n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return \n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.ResNet.get_10x_lr_params": [[204, 215], ["b.append", "range", "deeplab.ResNet.layer5.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.ResNet.optim_parameters": [[218, 221], ["deeplab.ResNet.get_1x_lr_params_NOscale", "deeplab.ResNet.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.outS": [[9, 15], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab.Res_Deeplab": [[223, 239], ["deeplab.ResNet", "torch.load", "torch.load", "torch.load", "ResNet.state_dict().copy", "ResNet.load_state_dict", "print", "i.split", "ResNet.state_dict"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", "=", "21", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "if", "pretrained", ":", "\n", "# restore_from = '/data1/val/jogendra/amit/machine@54/amit_54/sdd1/amit/DLCV_project/code/phase2/pretrained_model/DeepLab_resnet_pretrained_init-f81d91e8.pth'", "\n", "        ", "restore_from", "=", "'checkpoints/DeepLab_init.pth'", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "restore_from", ")", "\n", "\n", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "            ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "                ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "print", "(", "'ImageNet pretrained weights loaded'", ")", "\n", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "deeplab_multi.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab_multi.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.conv3x3", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.BasicBlock.forward": [[38, 55], ["deeplab_multi.BasicBlock.conv1", "deeplab_multi.BasicBlock.bn1", "deeplab_multi.BasicBlock.relu", "deeplab_multi.BasicBlock.conv2", "deeplab_multi.BasicBlock.bn2", "deeplab_multi.BasicBlock.relu", "deeplab_multi.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.Bottleneck.__init__": [[60, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.Bottleneck.forward": [[81, 102], ["deeplab_multi.Bottleneck.conv1", "deeplab_multi.Bottleneck.bn1", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.conv2", "deeplab_multi.Bottleneck.bn2", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.conv3", "deeplab_multi.Bottleneck.bn3", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.Classifier_Module.__init__": [[105, 114], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab_multi.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.Classifier_Module.forward": [[115, 120], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti.__init__": [[123, 151], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_pred_layer", "deeplab_multi.ResNetMulti._make_pred_layer", "deeplab_multi.ResNetMulti.modules", "deeplab_multi.ResNetMulti._make_pred_layer", "deeplab_multi.ResNetMulti._make_pred_layer", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_pred_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_pred_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_pred_layer", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "open_classes", "=", "0", ",", "openset", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "openset", "=", "openset", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "if", "self", ".", "openset", ":", "\n", "            ", "self", ".", "layer5_1", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "open_classes", ")", "\n", "self", ".", "layer6_1", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "open_classes", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_layer": [[152, 168], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti._make_pred_layer": [[169, 171], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti.forward": [[172, 193], ["deeplab_multi.ResNetMulti.conv1", "deeplab_multi.ResNetMulti.bn1", "deeplab_multi.ResNetMulti.relu", "deeplab_multi.ResNetMulti.maxpool", "deeplab_multi.ResNetMulti.layer1", "deeplab_multi.ResNetMulti.layer2", "deeplab_multi.ResNetMulti.layer3", "deeplab_multi.ResNetMulti.layer5", "deeplab_multi.ResNetMulti.layer4", "deeplab_multi.ResNetMulti.layer6", "deeplab_multi.ResNetMulti.layer5_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplab_multi.ResNetMulti.layer6_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "if", "self", ".", "openset", ":", "\n", "            ", "x1_1", "=", "self", ".", "layer5_1", "(", "x", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x1_1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x", ")", "\n", "if", "self", ".", "openset", ":", "\n", "            ", "x2_1", "=", "self", ".", "layer6_1", "(", "x", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x2_1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti.get_1x_lr_params_NOscale": [[194, 218], ["b.append", "b.append", "range", "b.append", "b.append", "b.append", "b.append", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ",", "warmup", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "if", "warmup", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "# if k.requires_grad:", "\n", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti.get_10x_lr_params": [[219, 234], ["b.append", "b.append", "range", "deeplab_multi.ResNetMulti.layer5.parameters", "deeplab_multi.ResNetMulti.layer6.parameters", "b.append", "b.append", "len", "deeplab_multi.ResNetMulti.layer5_1.parameters", "deeplab_multi.ResNetMulti.layer6_1.parameters"], "methods", ["None"], ["", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "openset", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5_1", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6_1", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.ResNetMulti.optim_parameters": [[235, 238], ["deeplab_multi.ResNetMulti.get_1x_lr_params_NOscale", "deeplab_multi.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ",", "warmup", "=", "False", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", "warmup", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.sig_NTM.__init__": [[245, 258], ["torch.Module.__init__", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "deeplab_multi.sig_NTM.register_parameter", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.load", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.tile", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "open_classes", "=", "0", ",", "init", "=", "None", ")", ":", "\n", "        ", "super", "(", "sig_NTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "T", "=", "torch", ".", "ones", "(", "num_classes", "+", "open_classes", ",", "num_classes", ")", "\n", "self", ".", "register_parameter", "(", "name", "=", "'NTM'", ",", "param", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "T", ")", ")", ")", "\n", "self", ".", "NTM", "\n", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "NTM", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n", "self", ".", "Identity_prior", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "num_classes", ",", "num_classes", ")", ",", "torch", ".", "zeros", "(", "open_classes", ",", "num_classes", ")", "]", ",", "0", ")", "\n", "Class_dist", "=", "np", ".", "load", "(", "'../ClassDist/ClassDist_bapa.npy'", ")", "\n", "# Class_dist = Class_dist / Class_dist.max()", "\n", "self", ".", "Class_dist", "=", "torch", ".", "FloatTensor", "(", "np", ".", "tile", "(", "Class_dist", ",", "(", "num_classes", "+", "open_classes", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.sig_NTM.forward": [[259, 264], ["torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.mul", "deeplab_multi.sig_NTM.Identity_prior.cuda().detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "deeplab_multi.sig_NTM.Class_dist.cuda().detach", "deeplab_multi.sig_NTM.Identity_prior.cuda", "deeplab_multi.sig_NTM.Class_dist.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "T", "=", "torch", ".", "sigmoid", "(", "self", ".", "NTM", ")", ".", "cuda", "(", ")", "\n", "T", "=", "T", ".", "mul", "(", "self", ".", "Class_dist", ".", "cuda", "(", ")", ".", "detach", "(", ")", ")", "+", "self", ".", "Identity_prior", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "T", "=", "F", ".", "normalize", "(", "T", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.sig_W.__init__": [[266, 277], ["torch.Module.__init__", "deeplab_multi.sig_W.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "open_classes", "=", "0", ")", ":", "\n", "        ", "super", "(", "sig_W", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "classes", "=", "num_classes", "+", "open_classes", "\n", "init", "=", "1.", "/", "(", "self", ".", "classes", "-", "1.", ")", "\n", "\n", "self", ".", "register_parameter", "(", "name", "=", "'weight'", ",", "param", "=", "nn", ".", "parameter", ".", "Parameter", "(", "init", "*", "torch", ".", "ones", "(", "self", ".", "classes", ",", "self", ".", "classes", ")", ")", ")", "\n", "\n", "self", ".", "weight", "\n", "\n", "self", ".", "identity", "=", "torch", ".", "zeros", "(", "self", ".", "classes", ",", "self", ".", "classes", ")", "-", "torch", ".", "eye", "(", "self", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.sig_W.forward": [[278, 287], ["numpy.diag_indices", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "deeplab_multi.sig_W.identity.detach().cuda", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "deeplab_multi.sig_W.identity.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "ind", "=", "np", ".", "diag_indices", "(", "self", ".", "classes", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "weight", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "-", "10000.", "*", "torch", ".", "ones", "(", "self", ".", "classes", ")", ".", "detach", "(", ")", "\n", "\n", "", "w", "=", "torch", ".", "softmax", "(", "self", ".", "weight", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "weight", "=", "self", ".", "identity", ".", "detach", "(", ")", ".", "cuda", "(", ")", "+", "w", "\n", "return", "weight", "", "", "", ""]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.outS": [[11, 17], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_multi.DeeplabMulti": [[240, 243], ["deeplab_multi.ResNetMulti"], "function", ["None"], ["", "", "def", "DeeplabMulti", "(", "num_classes", "=", "21", ",", "open_classes", "=", "0", ",", "openset", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "open_classes", ",", "openset", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_vgg.Classifier_Module.__init__": [[8, 16], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "zip", "deeplab_vgg.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dims_in", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "dims_in", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_vgg.Classifier_Module.forward": [[17, 22], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_vgg.DeeplabVGG.__init__": [[25, 46], ["torch.nn.Module.__init__", "torchvision.models.vgg16", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "deeplab_vgg.Classifier_Module", "torchvision.models.vgg16.load_state_dict", "list", "list", "torch.load", "torchvision.models.vgg16.features.children", "torchvision.models.vgg16.classifier.children", "torch.nn.ReLU", "torch.nn.ReLU", "range", "range", "range", "len"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "vgg16_caffe_path", "=", "None", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeeplabVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg", "=", "models", ".", "vgg16", "(", ")", "\n", "if", "pretrained", ":", "\n", "            ", "vgg", ".", "load_state_dict", "(", "torch", ".", "load", "(", "vgg16_caffe_path", ")", ")", "\n", "\n", "", "features", ",", "classifier", "=", "list", "(", "vgg", ".", "features", ".", "children", "(", ")", ")", ",", "list", "(", "vgg", ".", "classifier", ".", "children", "(", ")", ")", "\n", "\n", "#remove pool4/pool5", "\n", "features", "=", "nn", ".", "Sequential", "(", "*", "(", "features", "[", "i", "]", "for", "i", "in", "range", "(", "23", ")", "+", "range", "(", "24", ",", "30", ")", ")", ")", "\n", "\n", "for", "i", "in", "[", "23", ",", "25", ",", "27", "]", ":", "\n", "            ", "features", "[", "i", "]", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "features", "[", "i", "]", ".", "padding", "=", "(", "2", ",", "2", ")", "\n", "\n", "", "fc6", "=", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "fc7", "=", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "(", "[", "features", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "features", ")", ")", "]", "+", "[", "fc6", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "fc7", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "Classifier_Module", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_vgg.DeeplabVGG.forward": [[48, 52], ["deeplab_vgg.DeeplabVGG.features", "deeplab_vgg.DeeplabVGG.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplab_vgg.DeeplabVGG.optim_parameters": [[53, 55], ["deeplab_vgg.DeeplabVGG.parameters"], "methods", ["None"], ["", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "self", ".", "parameters", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.ResNet_50.__init__": [[10, 14], ["torch.Module.__init__", "torchvision.models.resnet50", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "conv1_out", "=", "64", ")", ":", "\n", "        ", "super", "(", "ResNet_50", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet_50", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.ResNet_50.forward": [[15, 22], ["deeplabv3.ResNet_50.relu", "deeplabv3.ResNet_50.resnet_50.maxpool", "deeplabv3.ResNet_50.resnet_50.layer1", "deeplabv3.ResNet_50.resnet_50.layer2", "deeplabv3.ResNet_50.resnet_50.layer3", "deeplabv3.ResNet_50.resnet_50.bn1", "deeplabv3.ResNet_50.resnet_50.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "resnet_50", ".", "bn1", "(", "self", ".", "resnet_50", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "resnet_50", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet_50", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet_50", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet_50", ".", "layer3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.ASSP.__init__": [[24, 80], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", "=", "256", ")", ":", "\n", "        ", "super", "(", "ASSP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "6", ",", "\n", "dilation", "=", "6", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "12", ",", "\n", "dilation", "=", "12", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "18", ",", "\n", "dilation", "=", "18", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "convf", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "out_channels", "*", "5", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bnf", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "adapool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.ASSP.forward": [[81, 109], ["deeplabv3.ASSP.conv1", "deeplabv3.ASSP.bn1", "deeplabv3.ASSP.relu", "deeplabv3.ASSP.conv2", "deeplabv3.ASSP.bn2", "deeplabv3.ASSP.relu", "deeplabv3.ASSP.conv3", "deeplabv3.ASSP.bn3", "deeplabv3.ASSP.relu", "deeplabv3.ASSP.conv4", "deeplabv3.ASSP.bn4", "deeplabv3.ASSP.relu", "deeplabv3.ASSP.conv5", "deeplabv3.ASSP.bn5", "deeplabv3.ASSP.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplabv3.ASSP.convf", "deeplabv3.ASSP.bnf", "deeplabv3.ASSP.relu", "tuple"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "relu", "(", "x1", ")", "\n", "\n", "x2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "relu", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "x3", "=", "self", ".", "relu", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x4", "=", "self", ".", "bn4", "(", "x4", ")", "\n", "x4", "=", "self", ".", "relu", "(", "x4", ")", "\n", "\n", "# x5 = self.adapool(x)", "\n", "x5", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x5", "=", "self", ".", "bn5", "(", "x5", ")", "\n", "x5", "=", "self", ".", "relu", "(", "x5", ")", "\n", "x5", "=", "F", ".", "interpolate", "(", "x5", ",", "size", "=", "tuple", "(", "x4", ".", "shape", "[", "-", "2", ":", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ")", ",", "dim", "=", "1", ")", "#channels first", "\n", "x", "=", "self", ".", "convf", "(", "x", ")", "\n", "x", "=", "self", ".", "bnf", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.__init__": [[112, 128], ["torch.Module.__init__", "deeplabv3.ResNet_50", "deeplabv3.ASSP", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "openc", "=", "0", ",", "openset", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeepLabv3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nc", "=", "nc", "\n", "self", ".", "openc", "=", "openc", "\n", "self", ".", "openset", "=", "openset", "\n", "\n", "self", ".", "resnet", "=", "ResNet_50", "(", ")", "\n", "\n", "self", ".", "assp", "=", "ASSP", "(", "in_channels", "=", "1024", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "self", ".", "nc", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "openset", ":", "\n", "            ", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "self", ".", "openc", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.forward": [[129, 139], ["deeplabv3.DeepLabv3.resnet", "deeplabv3.DeepLabv3.assp", "deeplabv3.DeepLabv3.conv", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplabv3.DeepLabv3.conv_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "resnet", "(", "x", ")", "\n", "x", "=", "self", ".", "assp", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "openset", ":", "\n", "            ", "x1_1", "=", "self", ".", "conv_1", "(", "x", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x1_1", "]", ",", "dim", "=", "1", ")", "\n", "", "x1", "=", "F", ".", "interpolate", "(", "x1", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "#scale_factor = 16, mode='bilinear')", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.get_1x_lr_params_NOscale": [[140, 152], ["b.append", "range", "len", "b[].modules", "j.named_parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "resnet", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "'resnet_50.layer3'", "in", "k", "[", "0", "]", "or", "'resnet_50.layer4'", "in", "k", "[", "0", "]", "or", "'resnet_50.fc'", "in", "k", "[", "0", "]", ":", "\n", "# if k.requires_grad:", "\n", "                        ", "yield", "k", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.get_10x_lr_params": [[153, 163], ["b.append", "b.append", "range", "deeplabv3.DeepLabv3.assp.parameters", "deeplabv3.DeepLabv3.conv.parameters", "b.append", "len", "deeplabv3.DeepLabv3.conv_1.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "assp", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "conv", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "openset", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "conv_1", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.optim_parameters": [[164, 167], ["deeplabv3.DeepLabv3.get_1x_lr_params_NOscale", "deeplabv3.DeepLabv3.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.DeepLabv3.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_NTM.__init__": [[169, 182], ["torch.Module.__init__", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "deeplabv3.sig_NTM.register_parameter", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.load", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.tile", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "open_classes", "=", "0", ",", "init", "=", "None", ")", ":", "\n", "        ", "super", "(", "sig_NTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "T", "=", "torch", ".", "ones", "(", "num_classes", "+", "open_classes", ",", "num_classes", ")", "\n", "self", ".", "register_parameter", "(", "name", "=", "'NTM'", ",", "param", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "T", ")", ")", ")", "\n", "self", ".", "NTM", "\n", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "NTM", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n", "self", ".", "Identity_prior", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "num_classes", ",", "num_classes", ")", ",", "torch", ".", "zeros", "(", "open_classes", ",", "num_classes", ")", "]", ",", "0", ")", "\n", "Class_dist", "=", "np", ".", "load", "(", "'../ClassDist/ClassDist_source.npy'", ")", "\n", "# Class_dist = Class_dist / Class_dist.max()", "\n", "self", ".", "Class_dist", "=", "torch", ".", "FloatTensor", "(", "np", ".", "tile", "(", "Class_dist", ",", "(", "num_classes", "+", "open_classes", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_NTM.forward": [[183, 188], ["torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.sigmoid().cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.mul", "deeplabv3.sig_NTM.Identity_prior.cuda().detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "deeplabv3.sig_NTM.Class_dist.cuda().detach", "deeplabv3.sig_NTM.Identity_prior.cuda", "deeplabv3.sig_NTM.Class_dist.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "T", "=", "torch", ".", "sigmoid", "(", "self", ".", "NTM", ")", ".", "cuda", "(", ")", "\n", "T", "=", "T", ".", "mul", "(", "self", ".", "Class_dist", ".", "cuda", "(", ")", ".", "detach", "(", ")", ")", "+", "self", ".", "Identity_prior", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "T", "=", "F", ".", "normalize", "(", "T", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__": [[190, 201], ["torch.Module.__init__", "deeplabv3.sig_W.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "open_classes", "=", "0", ")", ":", "\n", "        ", "super", "(", "sig_W", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "classes", "=", "num_classes", "+", "open_classes", "\n", "init", "=", "1.", "/", "(", "self", ".", "classes", "-", "1.", ")", "\n", "\n", "self", ".", "register_parameter", "(", "name", "=", "'weight'", ",", "param", "=", "nn", ".", "parameter", ".", "Parameter", "(", "init", "*", "torch", ".", "ones", "(", "self", ".", "classes", ",", "self", ".", "classes", ")", ")", ")", "\n", "\n", "self", ".", "weight", "\n", "\n", "self", ".", "identity", "=", "torch", ".", "zeros", "(", "self", ".", "classes", ",", "self", ".", "classes", ")", "-", "torch", ".", "eye", "(", "self", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cityu-aim-group_simt.model.deeplabv3.sig_W.forward": [[202, 211], ["numpy.diag_indices", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.softmax().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "deeplabv3.sig_W.identity.detach().cuda", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "deeplabv3.sig_W.identity.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "ind", "=", "np", ".", "diag_indices", "(", "self", ".", "classes", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "weight", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "-", "10000.", "*", "torch", ".", "ones", "(", "self", ".", "classes", ")", ".", "detach", "(", ")", "\n", "\n", "", "w", "=", "torch", ".", "softmax", "(", "self", ".", "weight", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "weight", "=", "self", ".", "identity", ".", "detach", "(", ")", ".", "cuda", "(", ")", "+", "w", "\n", "return", "weight", "", "", "", ""]]}