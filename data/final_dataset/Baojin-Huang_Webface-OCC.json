{"home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv": [[39, 46], ["mxnet.sym.Convolution"], "function", ["None"], ["def", "Conv", "(", "**", "kwargs", ")", ":", "\n", "#name = kwargs.get('name')", "\n", "#_weight = mx.symbol.Variable(name+'_weight')", "\n", "#_bias = mx.symbol.Variable(name+'_bias', lr_mult=2.0, wd_mult=0.0)", "\n", "#body = mx.sym.Convolution(weight = _weight, bias = _bias, **kwargs)", "\n", "    ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "**", "kwargs", ")", "\n", "return", "body", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act": [[48, 54], ["mxnet.sym.LeakyReLU", "mxnet.symbol.Activation"], "function", ["None"], ["", "def", "Act", "(", "data", ",", "act_type", ",", "name", ")", ":", "\n", "    ", "if", "act_type", "==", "'prelu'", ":", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "LeakyReLU", "(", "data", "=", "data", ",", "act_type", "=", "'prelu'", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "        ", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "data", ",", "act_type", "=", "act_type", ",", "name", "=", "name", ")", "\n", "", "return", "body", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v1": [[56, 249], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "int", "int"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv"], ["", "def", "residual_unit_v1", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Return ResNet Unit symbol for building ResNet\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tuple\n        Stride used in convolution\n    dim_match : Boolean\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "use_se", "=", "kwargs", ".", "get", "(", "'version_se'", ",", "1", ")", "\n", "bn_mom", "=", "kwargs", ".", "get", "(", "'bn_mom'", ",", "0.9", ")", "\n", "workspace", "=", "kwargs", ".", "get", "(", "'workspace'", ",", "256", ")", "\n", "memonger", "=", "kwargs", ".", "get", "(", "'memonger'", ",", "False", ")", "\n", "act_type", "=", "kwargs", ".", "get", "(", "'version_act'", ",", "'prelu'", ")", "\n", "#print('in unit1')", "\n", "if", "bottle_neck", ":", "\n", "        ", "conv1", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn1", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "Act", "(", "data", "=", "bn2", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv3", "=", "Conv", "(", "data", "=", "act2", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv3'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv3", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn3'", ")", "\n", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "            ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "bn3", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "bn3", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "bn3", ",", "body", ")", "\n", "#se end", "\n", "\n", "", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "conv1sc", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "Act", "(", "data", "=", "bn3", "+", "shortcut", ",", "\n", "act_type", "=", "act_type", ",", "\n", "name", "=", "name", "+", "'_relu3'", ")", "\n", "", "else", ":", "\n", "        ", "conv1", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn1", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "            ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "bn2", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "bn2", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "bn2", ",", "body", ")", "\n", "#se end", "\n", "\n", "", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "conv1sc", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "Act", "(", "data", "=", "bn2", "+", "shortcut", ",", "\n", "act_type", "=", "act_type", ",", "\n", "name", "=", "name", "+", "'_relu3'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v1_L": [[251, 444], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "int", "int"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv"], ["", "", "def", "residual_unit_v1_L", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Return ResNet Unit symbol for building ResNet\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tuple\n        Stride used in convolution\n    dim_match : Boolean\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "use_se", "=", "kwargs", ".", "get", "(", "'version_se'", ",", "1", ")", "\n", "bn_mom", "=", "kwargs", ".", "get", "(", "'bn_mom'", ",", "0.9", ")", "\n", "workspace", "=", "kwargs", ".", "get", "(", "'workspace'", ",", "256", ")", "\n", "memonger", "=", "kwargs", ".", "get", "(", "'memonger'", ",", "False", ")", "\n", "act_type", "=", "kwargs", ".", "get", "(", "'version_act'", ",", "'prelu'", ")", "\n", "#print('in unit1')", "\n", "if", "bottle_neck", ":", "\n", "        ", "conv1", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn1", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "Act", "(", "data", "=", "bn2", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv3", "=", "Conv", "(", "data", "=", "act2", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv3'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv3", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn3'", ")", "\n", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "            ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "bn3", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "bn3", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "bn3", ",", "body", ")", "\n", "#se end", "\n", "\n", "", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "conv1sc", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "Act", "(", "data", "=", "bn3", "+", "shortcut", ",", "\n", "act_type", "=", "act_type", ",", "\n", "name", "=", "name", "+", "'_relu3'", ")", "\n", "", "else", ":", "\n", "        ", "conv1", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn1", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "            ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "bn2", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "bn2", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "bn2", ",", "body", ")", "\n", "#se end", "\n", "\n", "", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "conv1sc", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "Act", "(", "data", "=", "bn2", "+", "shortcut", ",", "\n", "act_type", "=", "act_type", ",", "\n", "name", "=", "name", "+", "'_relu3'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v2": [[446, 623], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "Conv._set_attr", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "Conv._set_attr", "int", "int"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv"], ["", "", "def", "residual_unit_v2", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Return ResNet Unit symbol for building ResNet\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tuple\n        Stride used in convolution\n    dim_match : Boolean\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "use_se", "=", "kwargs", ".", "get", "(", "'version_se'", ",", "1", ")", "\n", "bn_mom", "=", "kwargs", ".", "get", "(", "'bn_mom'", ",", "0.9", ")", "\n", "workspace", "=", "kwargs", ".", "get", "(", "'workspace'", ",", "256", ")", "\n", "memonger", "=", "kwargs", ".", "get", "(", "'memonger'", ",", "False", ")", "\n", "act_type", "=", "kwargs", ".", "get", "(", "'version_act'", ",", "'prelu'", ")", "\n", "#print('in unit2')", "\n", "if", "bottle_neck", ":", "\n", "# the same as https://github.com/facebook/fb.resnet.torch#notes, a bit difference with origin paper", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn1", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "Act", "(", "data", "=", "bn2", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act2", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn3'", ")", "\n", "act3", "=", "Act", "(", "data", "=", "bn3", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu3'", ")", "\n", "conv3", "=", "Conv", "(", "data", "=", "act3", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv3'", ")", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "            ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "conv3", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "conv3", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "conv3", ",", "body", ")", "\n", "", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "conv3", "+", "shortcut", "\n", "", "else", ":", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn1", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "Act", "(", "data", "=", "bn2", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act2", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "            ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "conv2", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "conv2", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "conv2", ",", "body", ")", "\n", "", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "conv2", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v3": [[625, 828], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "mxnet.sym.BatchNorm", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mxnet.sym.BatchNorm", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "int", "int"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv"], ["", "", "def", "residual_unit_v3", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Return ResNet Unit symbol for building ResNet\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tuple\n        Stride used in convolution\n    dim_match : Boolean\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "use_se", "=", "kwargs", ".", "get", "(", "'version_se'", ",", "1", ")", "\n", "bn_mom", "=", "kwargs", ".", "get", "(", "'bn_mom'", ",", "0.9", ")", "\n", "workspace", "=", "kwargs", ".", "get", "(", "'workspace'", ",", "256", ")", "\n", "memonger", "=", "kwargs", ".", "get", "(", "'memonger'", ",", "False", ")", "\n", "act_type", "=", "kwargs", ".", "get", "(", "'version_act'", ",", "'prelu'", ")", "\n", "#print('in unit3')", "\n", "if", "bottle_neck", ":", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "conv1", "=", "Conv", "(", "data", "=", "bn1", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn2", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn3'", ")", "\n", "act2", "=", "Act", "(", "data", "=", "bn3", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv3", "=", "Conv", "(", "data", "=", "act2", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv3'", ")", "\n", "bn4", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv3", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn4'", ")", "\n", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "            ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "bn4", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "bn4", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "bn4", ",", "body", ")", "\n", "#se end", "\n", "\n", "", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "conv1sc", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "bn4", "+", "shortcut", "\n", "", "else", ":", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "conv1", "=", "Conv", "(", "data", "=", "bn1", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn2", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn3'", ")", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "            ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "bn3", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "bn3", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "bn3", ",", "body", ")", "\n", "#se end", "\n", "\n", "", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "conv1sc", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "eps", "=", "2e-5", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "# arg_name = shortcut.list_arguments()", "\n", "# out_name = shortcut.list_outputs()", "\n", "# arg_shape, out_shape, _ = shortcut.infer_shape(data=(1,3,112,112))", "\n", "# print({'input' : dict(zip(arg_name, arg_shape)),'output' : dict(zip(out_name, out_shape))})", "\n", "", "return", "bn3", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v3_x": [[830, 953], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "mxnet.sym.BatchNorm", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mxnet.sym.Pooling", "fresnet52.Conv", "fresnet52.Act", "fresnet52.Conv", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "int", "int"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv"], ["", "", "def", "residual_unit_v3_x", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Return ResNeXt Unit symbol for building ResNeXt\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tuple\n        Stride used in convolution\n    dim_match : Boolean\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "assert", "(", "bottle_neck", ")", "\n", "use_se", "=", "kwargs", ".", "get", "(", "'version_se'", ",", "1", ")", "\n", "bn_mom", "=", "kwargs", ".", "get", "(", "'bn_mom'", ",", "0.9", ")", "\n", "workspace", "=", "kwargs", ".", "get", "(", "'workspace'", ",", "256", ")", "\n", "memonger", "=", "kwargs", ".", "get", "(", "'memonger'", ",", "False", ")", "\n", "act_type", "=", "kwargs", ".", "get", "(", "'version_act'", ",", "'prelu'", ")", "\n", "num_group", "=", "32", "\n", "#print('in unit3')", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn1'", ")", "\n", "conv1", "=", "Conv", "(", "data", "=", "bn1", ",", "\n", "num_group", "=", "num_group", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.5", ")", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act1", "=", "Act", "(", "data", "=", "bn2", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "Conv", "(", "data", "=", "act1", ",", "\n", "num_group", "=", "num_group", ",", "\n", "num_filter", "=", "int", "(", "num_filter", "*", "0.5", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn3'", ")", "\n", "act2", "=", "Act", "(", "data", "=", "bn3", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv3", "=", "Conv", "(", "data", "=", "act2", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv3'", ")", "\n", "bn4", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv3", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_bn4'", ")", "\n", "\n", "if", "use_se", ":", "\n", "#se begin", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "bn4", ",", "\n", "global_pool", "=", "True", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "name", "=", "name", "+", "'_se_pool1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", "//", "16", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "name", "+", "'_se_relu1'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "name", "=", "name", "+", "\"_se_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "body", ",", "\n", "act_type", "=", "'sigmoid'", ",", "\n", "name", "=", "name", "+", "\"_se_sigmoid\"", ")", "\n", "bn4", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "bn4", ",", "body", ")", "\n", "#se end", "\n", "\n", "", "if", "dim_match", ":", "\n", "        ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "        ", "conv1sc", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "\n", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "        ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "bn4", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit": [[955, 975], ["kwargs.get", "kwargs.get", "fresnet52.residual_unit_v1", "fresnet52.residual_unit_v1_L", "fresnet52.residual_unit_v2", "residual_unit_v4", "fresnet52.residual_unit_v3"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v1", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v1_L", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v2", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit_v3"], ["", "def", "residual_unit", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "uv", "=", "kwargs", ".", "get", "(", "'version_unit'", ",", "3", ")", "\n", "version_input", "=", "kwargs", ".", "get", "(", "'version_input'", ",", "1", ")", "\n", "if", "uv", "==", "1", ":", "\n", "        ", "if", "version_input", "==", "0", ":", "\n", "            ", "return", "residual_unit_v1", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "\n", "bottle_neck", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "residual_unit_v1_L", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "\n", "name", ",", "bottle_neck", ",", "**", "kwargs", ")", "\n", "", "", "elif", "uv", "==", "2", ":", "\n", "        ", "return", "residual_unit_v2", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "\n", "bottle_neck", ",", "**", "kwargs", ")", "\n", "", "elif", "uv", "==", "4", ":", "\n", "        ", "return", "residual_unit_v4", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "\n", "bottle_neck", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "residual_unit_v3", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "\n", "bottle_neck", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.resnet": [[977, 1341], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "print", "len", "mxnet.sym.Variable", "range", "mxnet.symbol.slice", "mxnet.sym.Deconvolution", "mxnet.sym.BatchNorm", "fresnet52.Act", "mxnet.symbol.slice", "mxnet.sym.Deconvolution", "mxnet.sym.BatchNorm", "fresnet52.Act", "mxnet.symbol.slice", "mxnet.sym.Deconvolution", "mxnet.sym.BatchNorm", "fresnet52.Act", "mxnet.symbol.slice", "mxnet.sym.Deconvolution", "mxnet.sym.BatchNorm", "fresnet52.Act", "mxnet.symbol.slice", "fresnet52.Conv", "mxnet.sym.BatchNorm", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "fresnet52.residual_unit", "mxnet.sym.Pooling", "mxnet.symbol.concat", "fresnet52.residual_unit", "mxnet.sym.Pooling", "mxnet.symbol.concat", "fresnet52.residual_unit", "mxnet.sym.Pooling", "mxnet.symbol.concat", "fresnet52.residual_unit", "mxnet.sym.Pooling", "mxnet.symbol.slice", "mxnet.symbol.broadcast_mul", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "range", "symbol_utils.get_fc1", "mxnet.sym.identity", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.residual_unit", "range", "mxnet.symbol.Activation", "mxnet.symbol.broadcast_mul", "mxnet.symbol.broadcast_mul", "fresnet52.residual_unit", "range", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "mxnet.sym.BatchNorm", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "mxnet.sym.identity", "fresnet52.Conv", "mxnet.sym.BatchNorm", "fresnet52.Act", "fresnet52.residual_unit", "fresnet52.residual_unit", "int", "int"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Conv", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.Act", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.residual_unit"], ["", "", "def", "resnet", "(", "units", ",", "num_stages", ",", "filter_list", ",", "num_classes", ",", "bottle_neck", ")", ":", "\n", "    ", "bn_mom", "=", "config", ".", "bn_mom", "\n", "workspace", "=", "config", ".", "workspace", "\n", "kwargs", "=", "{", "\n", "'version_se'", ":", "config", ".", "net_se", ",", "\n", "'version_input'", ":", "config", ".", "net_input", ",", "\n", "'version_output'", ":", "config", ".", "net_output", ",", "\n", "'version_unit'", ":", "config", ".", "net_unit", ",", "\n", "'version_act'", ":", "config", ".", "net_act", ",", "\n", "'bn_mom'", ":", "bn_mom", ",", "\n", "'workspace'", ":", "workspace", ",", "\n", "'memonger'", ":", "config", ".", "memonger", ",", "\n", "}", "\n", "\"\"\"Return ResNet symbol of\n    Parameters\n    ----------\n    units : list\n        Number of units in each stage\n    num_stages : int\n        Number of stage\n    filter_list : list\n        Channel size of each stage\n    num_classes : int\n        Ouput size of symbol\n    dataset : str\n        Dataset type, only cifar10 and imagenet supports\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "version_se", "=", "kwargs", ".", "get", "(", "'version_se'", ",", "1", ")", "\n", "version_input", "=", "kwargs", ".", "get", "(", "'version_input'", ",", "1", ")", "\n", "assert", "version_input", ">=", "0", "\n", "version_output", "=", "kwargs", ".", "get", "(", "'version_output'", ",", "'E'", ")", "\n", "fc_type", "=", "version_output", "\n", "version_unit", "=", "kwargs", ".", "get", "(", "'version_unit'", ",", "3", ")", "\n", "act_type", "=", "kwargs", ".", "get", "(", "'version_act'", ",", "'prelu'", ")", "\n", "memonger", "=", "kwargs", ".", "get", "(", "'memonger'", ",", "False", ")", "\n", "print", "(", "version_se", ",", "version_input", ",", "version_output", ",", "version_unit", ",", "act_type", ",", "\n", "memonger", ")", "\n", "num_unit", "=", "len", "(", "units", ")", "\n", "assert", "(", "num_unit", "==", "num_stages", ")", "\n", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "'data'", ")", "\n", "# data = mx.sym.Cast(data=data, dtype=np.float16)", "\n", "if", "version_input", "==", "0", ":", "\n", "#data = mx.sym.BatchNorm(data=data, fix_gamma=True, eps=2e-5, momentum=bn_mom, name='bn_data')", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "identity", "(", "data", "=", "data", ",", "name", "=", "'id'", ")", "\n", "data", "=", "data", "-", "127.5", "\n", "data", "=", "data", "*", "0.0078125", "\n", "body", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "filter_list", "[", "0", "]", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "\"conv0\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'bn0'", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "'relu0'", ")", "\n", "#body = mx.sym.Pooling(data=body, kernel=(3, 3), stride=(2,2), pad=(1,1), pool_type='max')", "\n", "", "elif", "version_input", "==", "2", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "\n", "fix_gamma", "=", "True", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'bn_data'", ")", "\n", "body", "=", "Conv", "(", "data", "=", "data", ",", "\n", "num_filter", "=", "filter_list", "[", "0", "]", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "\"conv0\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'bn0'", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "'relu0'", ")", "\n", "", "else", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "identity", "(", "data", "=", "data", ",", "name", "=", "'id'", ")", "\n", "data", "=", "data", "-", "127.5", "\n", "data", "=", "data", "*", "0.0078125", "\n", "body", "=", "data", "\n", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "filter_list", "[", "0", "]", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "\"conv0\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'bn0'", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "'relu0'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "#if version_input==0:", "\n", "#  body = residual_unit(body, filter_list[i+1], (1 if i==0 else 2, 1 if i==0 else 2), False,", "\n", "#                       name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, **kwargs)", "\n", "#else:", "\n", "#  body = residual_unit(body, filter_list[i+1], (2, 2), False,", "\n", "#    name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, **kwargs)", "\n", "# if i==num_stages-1:", "\n", "#     body = mx.sym.Cast(data=body, dtype=np.float32)", "\n", "        ", "body", "=", "residual_unit", "(", "body", ",", "\n", "filter_list", "[", "i", "+", "1", "]", ",", "(", "2", ",", "2", ")", ",", "\n", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "1", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "**", "kwargs", ")", "\n", "for", "j", "in", "range", "(", "units", "[", "i", "]", "-", "1", ")", ":", "\n", "            ", "body", "=", "residual_unit", "(", "body", ",", "\n", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", ",", "1", ")", ",", "\n", "True", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "j", "+", "2", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "", "de_body", "=", "mx", ".", "symbol", ".", "slice", "(", "body", ",", "begin", "=", "(", "None", ",", "0", ",", "None", ",", "None", ")", ",", "end", "=", "(", "None", ",", "256", ",", "None", ",", "None", ")", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "Deconvolution", "(", "data", "=", "de_body", ",", "num_filter", "=", "256", ",", "kernel", "=", "(", "4", ",", "4", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"de_conv1\"", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "de_body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'de_bnd1'", ")", "\n", "de_body", "=", "Act", "(", "data", "=", "de_body", ",", "act_type", "=", "act_type", ",", "name", "=", "'de_relud1'", ")", "\n", "de_body0", "=", "mx", ".", "symbol", ".", "slice", "(", "de_body", ",", "begin", "=", "(", "None", ",", "128", ",", "None", ",", "None", ")", ",", "end", "=", "(", "None", ",", "256", ",", "None", ",", "None", ")", ")", "\n", "\n", "de_body", "=", "mx", ".", "sym", ".", "Deconvolution", "(", "data", "=", "de_body", ",", "num_filter", "=", "128", ",", "kernel", "=", "(", "4", ",", "4", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"de_conv2\"", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "de_body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'de_bnd2'", ")", "\n", "de_body", "=", "Act", "(", "data", "=", "de_body", ",", "act_type", "=", "act_type", ",", "name", "=", "'de_relud2'", ")", "\n", "de_body1", "=", "mx", ".", "symbol", ".", "slice", "(", "de_body", ",", "begin", "=", "(", "None", ",", "64", ",", "None", ",", "None", ")", ",", "end", "=", "(", "None", ",", "128", ",", "None", ",", "None", ")", ")", "\n", "\n", "de_body", "=", "mx", ".", "sym", ".", "Deconvolution", "(", "data", "=", "de_body", ",", "num_filter", "=", "64", ",", "kernel", "=", "(", "4", ",", "4", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"de_conv3\"", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "de_body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'de_bnd3'", ")", "\n", "de_body", "=", "Act", "(", "data", "=", "de_body", ",", "act_type", "=", "act_type", ",", "name", "=", "'de_relud3'", ")", "\n", "de_body2", "=", "mx", ".", "symbol", ".", "slice", "(", "de_body", ",", "begin", "=", "(", "None", ",", "32", ",", "None", ",", "None", ")", ",", "end", "=", "(", "None", ",", "64", ",", "None", ",", "None", ")", ")", "\n", "\n", "de_body", "=", "mx", ".", "sym", ".", "Deconvolution", "(", "data", "=", "de_body", ",", "num_filter", "=", "32", ",", "kernel", "=", "(", "4", ",", "4", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"de_conv4\"", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "de_body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'de_bnd4'", ")", "\n", "de_body_temp", "=", "Act", "(", "data", "=", "de_body", ",", "act_type", "=", "act_type", ",", "name", "=", "'de_relud4'", ")", "\n", "de_body3", "=", "mx", ".", "symbol", ".", "slice", "(", "de_body_temp", ",", "begin", "=", "(", "None", ",", "16", ",", "None", ",", "None", ")", ",", "end", "=", "(", "None", ",", "32", ",", "None", ",", "None", ")", ")", "\n", "de_body", "=", "Conv", "(", "data", "=", "de_body_temp", ",", "\n", "num_filter", "=", "1", ",", "\n", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "\"dd_conv5\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "de_body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'de_bnd5'", ")", "\n", "weight", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "de_body", ",", "act_type", "=", "'sigmoid'", ",", "name", "=", "\"pw_sigmoid\"", ")", "\n", "\n", "de_body", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "weight", ",", "de_body_temp", ")", "\n", "\n", "de_body", "=", "residual_unit", "(", "de_body", ",", "\n", "32", ",", "(", "1", ",", "1", ")", ",", "\n", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "5", ",", "1", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "**", "kwargs", ")", "\n", "# arg_name = de_body.list_arguments()", "\n", "# out_name = de_body.list_outputs()", "\n", "# arg_shape, out_shape, _ = de_body.infer_shape(data=(1,3,112,112))", "\n", "# print({'input' : dict(zip(arg_name, arg_shape)),'output' : dict(zip(out_name, out_shape))})", "\n", "de_body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "de_body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "de_body", "=", "mx", ".", "symbol", ".", "concat", "(", "de_body", ",", "de_body2", ",", "dim", "=", "1", ")", "\n", "de_body", "=", "residual_unit", "(", "de_body", ",", "\n", "64", ",", "(", "1", ",", "1", ")", ",", "\n", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "5", ",", "2", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "**", "kwargs", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "de_body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "de_body", "=", "mx", ".", "symbol", ".", "concat", "(", "de_body", ",", "de_body1", ",", "dim", "=", "1", ")", "\n", "de_body", "=", "residual_unit", "(", "de_body", ",", "\n", "128", ",", "(", "1", ",", "1", ")", ",", "\n", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "5", ",", "3", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "**", "kwargs", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "de_body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "de_body", "=", "mx", ".", "symbol", ".", "concat", "(", "de_body", ",", "de_body0", ",", "dim", "=", "1", ")", "\n", "de_body", "=", "residual_unit", "(", "de_body", ",", "\n", "256", ",", "(", "1", ",", "1", ")", ",", "\n", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "5", ",", "4", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "**", "kwargs", ")", "\n", "de_body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "de_body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "# de_body = Conv(data=de_body,", "\n", "#                 num_filter=int(num_classes),", "\n", "#                 kernel=(3, 3),", "\n", "#                 stride=(1, 1),", "\n", "#                 pad=(1, 1),", "\n", "#                 no_bias=True,", "\n", "#                 name=\"ww_conv1\",", "\n", "#                 workspace=workspace)", "\n", "# de_body = mx.sym.BatchNorm(data=de_body,", "\n", "#                             fix_gamma=False,", "\n", "#                             eps=2e-5,", "\n", "#                             momentum=bn_mom,", "\n", "#                             name='ww_bnd1')", "\n", "# de_body = Act(data=de_body, act_type=act_type, name='ww_relud1')", "\n", "# de_body = Conv(data=de_body,", "\n", "#                 num_filter=int(num_classes),", "\n", "#                 kernel=(3, 3),", "\n", "#                 stride=(1, 1),", "\n", "#                 pad=(1, 1),", "\n", "#                 no_bias=True,", "\n", "#                 name=\"ww_conv2\",", "\n", "#                 workspace=workspace)", "\n", "# de_body = mx.sym.BatchNorm(data=de_body,", "\n", "#                             fix_gamma=False,", "\n", "#                             eps=2e-5,", "\n", "#                             momentum=bn_mom,", "\n", "#                             name='ww_bnd2')", "\n", "# de_body = Act(data=de_body, act_type=act_type, name='ww_relud2')", "\n", "\n", "# de_body = Conv(data=de_body,", "\n", "#                 num_filter=1,", "\n", "#                 kernel=(1, 1),", "\n", "#                 stride=(1, 1),", "\n", "#                 pad=(1, 1),", "\n", "#                 no_bias=True,", "\n", "#                 name=\"ww_conv3\",", "\n", "#                 workspace=workspace)", "\n", "\n", "weight_f", "=", "de_body", "\n", "# weight_f = Conv(data=weight_f,", "\n", "#                 num_filter=num_classes,", "\n", "#                 kernel=(3, 3),", "\n", "#                 stride=(1, 1),", "\n", "#                 pad=(1, 1),", "\n", "#                 no_bias=True,", "\n", "#                 name=\"act_conv2\",", "\n", "#                 workspace=workspace)", "\n", "# weight_f = mx.sym.BatchNorm(data=weight_f,", "\n", "#                             fix_gamma=False,", "\n", "#                             eps=2e-5,", "\n", "#                             momentum=bn_mom,", "\n", "#                             name='act_bnd2')", "\n", "# weight_f = Act(data=weight_f, act_type=act_type, name='act_relud2')", "\n", "weight_f", "=", "1", "+", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "weight_f", ",", "act_type", "=", "'sigmoid'", ",", "name", "=", "\"act_sigmoid\"", ")", "\n", "# weight_f = mx.symbol.repeat(weight_f, repeats=num_classes, axis=1)", "\n", "\n", "# arg_name = weight.list_arguments()", "\n", "# out_name = weight.list_outputs()", "\n", "# arg_shape, out_shape, _ = weight.infer_shape(data=(1,3,112,112))", "\n", "# print({'input' : dict(zip(arg_name, arg_shape)),'output' : dict(zip(out_name, out_shape))})", "\n", "# mx.sym.exp", "\n", "body", "=", "mx", ".", "symbol", ".", "slice", "(", "body", ",", "begin", "=", "(", "None", ",", "256", ",", "None", ",", "None", ")", ",", "end", "=", "(", "None", ",", "512", ",", "None", ",", "None", ")", ")", "\n", "body_weight", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "weight_f", ",", "body", ")", "\n", "body_add", "=", "body", "+", "body_weight", "\n", "\n", "body_add", "=", "Conv", "(", "data", "=", "body_add", ",", "\n", "num_filter", "=", "int", "(", "num_classes", ")", "//", "32", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "\"add_conv1\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body_add", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body_add", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'add_bnd1'", ")", "\n", "body_add", "=", "Act", "(", "data", "=", "body_add", ",", "act_type", "=", "act_type", ",", "name", "=", "'add_sigmoid1'", ")", "\n", "\n", "body_add", "=", "Conv", "(", "data", "=", "body_add", ",", "\n", "num_filter", "=", "int", "(", "num_classes", ")", "//", "2", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "\"add_conv2\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body_add", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body_add", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'add_bnd2'", ")", "\n", "body_add", "=", "Act", "(", "data", "=", "body_add", ",", "act_type", "=", "'sigmoid'", ",", "name", "=", "'add_sigmoid2'", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "body_add", ",", "body", ")", "+", "mx", ".", "symbol", ".", "broadcast_mul", "(", "1", "-", "body_add", ",", "body_weight", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "4", ",", "num_stages", ")", ":", "\n", "#if version_input==0:", "\n", "#  body = residual_unit(body, filter_list[i+1], (1 if i==0 else 2, 1 if i==0 else 2), False,", "\n", "#                       name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, **kwargs)", "\n", "#else:", "\n", "#  body = residual_unit(body, filter_list[i+1], (2, 2), False,", "\n", "#    name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, **kwargs)", "\n", "        ", "body", "=", "residual_unit", "(", "body", ",", "\n", "filter_list", "[", "i", "+", "1", "]", ",", "(", "2", ",", "2", ")", ",", "\n", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "1", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "**", "kwargs", ")", "\n", "for", "j", "in", "range", "(", "units", "[", "i", "]", "-", "1", ")", ":", "\n", "            ", "body", "=", "residual_unit", "(", "body", ",", "\n", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", ",", "1", ")", ",", "\n", "True", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "j", "+", "2", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "", "if", "bottle_neck", ":", "\n", "        ", "body", "=", "Conv", "(", "data", "=", "body", ",", "\n", "num_filter", "=", "512", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "\"convd\"", ",", "\n", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "\n", "fix_gamma", "=", "False", ",", "\n", "eps", "=", "2e-5", ",", "\n", "momentum", "=", "bn_mom", ",", "\n", "name", "=", "'bnd'", ")", "\n", "body", "=", "Act", "(", "data", "=", "body", ",", "act_type", "=", "act_type", ",", "name", "=", "'relud'", ")", "\n", "\n", "\n", "# weight = mx.symbol.Activation(data=de_body, act_type='sigmoid', name=\"pw_sigmoid\")", "\n", "# min_ = mx.symbol.min(weight,axis=[2,3],keepdims= 1)", "\n", "# min_ = mx.symbol.repeat(min_, repeats=112, axis=2)", "\n", "# min_ = mx.symbol.repeat(min_, repeats=112, axis=3)", "\n", "# max_ = mx.symbol.max(weight,axis=[2,3],keepdims= 1)", "\n", "# max_ = mx.symbol.repeat(max_, repeats=112, axis=2)", "\n", "# max_ = mx.symbol.repeat(max_, repeats=112, axis=3)", "\n", "# weight = (weight - min_)/(max_ - min_)", "\n", "\n", "", "fc1", "=", "symbol_utils", ".", "get_fc1", "(", "body", ",", "num_classes", ",", "fc_type", ")", "\n", "return", "fc1", ",", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.get_symbol": [[1343, 1415], ["fresnet52.resnet", "memonger.search_plan", "memonger.get_cost", "memonger.get_cost", "print", "print", "ValueError"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.symbol.fresnet52.resnet"], ["", "def", "get_symbol", "(", ")", ":", "\n", "    ", "\"\"\"\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/train_resnet.py\n    Original author Wei Wu\n    \"\"\"", "\n", "num_classes", "=", "config", ".", "emb_size", "\n", "num_layers", "=", "config", ".", "num_layers", "\n", "if", "num_layers", ">=", "500", ":", "\n", "        ", "filter_list", "=", "[", "64", ",", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "bottle_neck", "=", "True", "\n", "", "else", ":", "\n", "        ", "filter_list", "=", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "bottle_neck", "=", "False", "\n", "", "num_stages", "=", "4", "\n", "if", "num_layers", "==", "18", ":", "\n", "        ", "units", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "num_layers", "==", "34", ":", "\n", "        ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "49", ":", "\n", "        ", "units", "=", "[", "3", ",", "4", ",", "14", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "50", ":", "\n", "        ", "units", "=", "[", "3", ",", "4", ",", "14", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "74", ":", "\n", "        ", "units", "=", "[", "3", ",", "6", ",", "24", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "90", ":", "\n", "        ", "units", "=", "[", "3", ",", "8", ",", "30", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "98", ":", "\n", "        ", "units", "=", "[", "3", ",", "4", ",", "38", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "99", ":", "\n", "        ", "units", "=", "[", "3", ",", "8", ",", "35", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "100", ":", "\n", "        ", "units", "=", "[", "3", ",", "13", ",", "30", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "134", ":", "\n", "        ", "units", "=", "[", "3", ",", "10", ",", "50", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "136", ":", "\n", "        ", "units", "=", "[", "3", ",", "13", ",", "48", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "140", ":", "\n", "        ", "units", "=", "[", "3", ",", "15", ",", "48", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "124", ":", "\n", "        ", "units", "=", "[", "3", ",", "13", ",", "40", ",", "5", "]", "\n", "", "elif", "num_layers", "==", "160", ":", "\n", "        ", "units", "=", "[", "3", ",", "24", ",", "49", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "101", ":", "\n", "        ", "units", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "        ", "units", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "200", ":", "\n", "        ", "units", "=", "[", "3", ",", "24", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "269", ":", "\n", "        ", "units", "=", "[", "3", ",", "30", ",", "48", ",", "8", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "\n", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "net", "=", "resnet", "(", "units", "=", "units", ",", "\n", "num_stages", "=", "num_stages", ",", "\n", "filter_list", "=", "filter_list", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "bottle_neck", "=", "bottle_neck", ")", "\n", "\n", "if", "config", ".", "memonger", ":", "\n", "        ", "dshape", "=", "(", "config", ".", "per_batch_size", ",", "config", ".", "image_shape", "[", "2", "]", ",", "\n", "config", ".", "image_shape", "[", "0", "]", ",", "config", ".", "image_shape", "[", "1", "]", ")", "\n", "net_mem_planned", "=", "memonger", ".", "search_plan", "(", "net", ",", "data", "=", "dshape", ")", "\n", "old_cost", "=", "memonger", ".", "get_cost", "(", "net", ",", "data", "=", "dshape", ")", "\n", "new_cost", "=", "memonger", ".", "get_cost", "(", "net_mem_planned", ",", "data", "=", "dshape", ")", "\n", "\n", "print", "(", "'Old feature map cost=%d MB'", "%", "old_cost", ")", "\n", "print", "(", "'New feature map cost=%d MB'", "%", "new_cost", ")", "\n", "net", "=", "net_mem_planned", "\n", "", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.config.generate_config": [[204, 223], ["loss[].items", "network[].items", "dataset[].items", "int"], "function", ["None"], ["def", "generate_config", "(", "_network", ",", "_dataset", ",", "_loss", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "loss", "[", "_loss", "]", ".", "items", "(", ")", ":", "\n", "        ", "config", "[", "k", "]", "=", "v", "\n", "if", "k", "in", "default", ":", "\n", "            ", "default", "[", "k", "]", "=", "v", "\n", "", "", "for", "k", ",", "v", "in", "network", "[", "_network", "]", ".", "items", "(", ")", ":", "\n", "        ", "config", "[", "k", "]", "=", "v", "\n", "if", "k", "in", "default", ":", "\n", "            ", "default", "[", "k", "]", "=", "v", "\n", "", "", "for", "k", ",", "v", "in", "dataset", "[", "_dataset", "]", ".", "items", "(", ")", ":", "\n", "        ", "config", "[", "k", "]", "=", "v", "\n", "if", "k", "in", "default", ":", "\n", "            ", "default", "[", "k", "]", "=", "v", "\n", "", "", "config", ".", "loss", "=", "_loss", "\n", "config", ".", "network", "=", "_network", "\n", "config", ".", "dataset", "=", "_dataset", "\n", "config", ".", "num_workers", "=", "1", "\n", "if", "'DMLC_NUM_WORKER'", "in", "os", ".", "environ", ":", "\n", "        ", "config", ".", "num_workers", "=", "int", "(", "os", ".", "environ", "[", "'DMLC_NUM_WORKER'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.parse_args": [[36, 100], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "config.generate_config", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.config.generate_config", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train face network'", ")", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "\n", "default", "=", "default", ".", "dataset", ",", "\n", "help", "=", "'dataset config'", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "\n", "default", "=", "default", ".", "network", ",", "\n", "help", "=", "'network config'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "default", "=", "default", ".", "loss", ",", "help", "=", "'loss config'", ")", "\n", "args", ",", "rest", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "generate_config", "(", "args", ".", "network", ",", "args", ".", "dataset", ",", "args", ".", "loss", ")", "\n", "parser", ".", "add_argument", "(", "'--models-root'", ",", "\n", "default", "=", "default", ".", "models_root", ",", "\n", "help", "=", "'root directory to save model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "\n", "default", "=", "default", ".", "pretrained", ",", "\n", "help", "=", "'pretrained model to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained-epoch'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "default", ".", "pretrained_epoch", ",", "\n", "help", "=", "'pretrained epoch to load'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--ckpt'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "default", ".", "ckpt", ",", "\n", "help", "=", "\n", "'checkpoint saving option. 0: discard saving. 1: save when necessary. 2: always save'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--verbose'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "default", ".", "verbose", ",", "\n", "help", "=", "'do verification testing and model saving every verbose batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "default", ".", "lr", ",", "\n", "help", "=", "'start learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-steps'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "default", ".", "lr_steps", ",", "\n", "help", "=", "'steps of lr changing'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "default", ".", "wd", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--mom'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "default", ".", "mom", ",", "\n", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--frequent'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "default", ".", "frequent", ",", "\n", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--per-batch-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "default", ".", "per_batch_size", ",", "\n", "help", "=", "'batch size in each context'", ")", "\n", "parser", ".", "add_argument", "(", "'--kvstore'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "default", ".", "kvstore", ",", "\n", "help", "=", "'kvstore setting'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", "def", "dice_coef", "(", "y_true", ",", "y_pred", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.dice_coef": [[100, 103], ["mxnet.sym.sum", "mxnet.sym.broadcast_div", "mxnet.sym.broadcast_mul", "mxnet.sym.sum", "mxnet.sym.sum"], "function", ["None"], ["", "def", "dice_coef", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "intersection", "=", "mx", ".", "sym", ".", "sum", "(", "mx", ".", "sym", ".", "broadcast_mul", "(", "y_true", ",", "y_pred", ")", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "mx", ".", "sym", ".", "broadcast_div", "(", "(", "2.", "*", "intersection", "+", "1.", ")", ",", "(", "mx", ".", "sym", ".", "sum", "(", "y_true", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "mx", ".", "sym", ".", "sum", "(", "y_pred", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "1.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.dice_coef_loss": [[104, 107], ["mxnet.sym.sum", "mxnet.sym.broadcast_div", "mxnet.sym.broadcast_mul", "mxnet.sym.broadcast_add", "mxnet.sym.sum", "mxnet.sym.sum"], "function", ["None"], ["", "def", "dice_coef_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "intersection", "=", "mx", ".", "sym", ".", "sum", "(", "mx", ".", "sym", ".", "broadcast_mul", "(", "y_true", ",", "y_pred", ")", ",", "axis", "=", "1", ",", ")", "\n", "return", "mx", ".", "sym", ".", "broadcast_div", "(", "(", "2.", "*", "intersection", "+", "1.", ")", ",", "(", "mx", ".", "sym", ".", "broadcast_add", "(", "mx", ".", "sym", ".", "sum", "(", "y_true", ",", "axis", "=", "1", ")", ",", "mx", ".", "sym", ".", "sum", "(", "y_pred", ",", "axis", "=", "1", ")", ")", "+", "1.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.get_symbol": [[108, 269], ["eval().get_symbol", "mxnet.symbol.Variable", "mxnet.symbol.Variable", "mxnet.symbol.mean", "mxnet.symbol.MakeLoss", "print", "mxnet.symbol.Group", "mxnet.symbol.square", "mxnet.symbol.Variable", "mxnet.symbol.BlockGrad", "mxnet.symbol.SoftmaxOutput", "out_list.append", "out_list.append", "out_list.append", "out_list.append", "eval", "mxnet.sym.FullyConnected", "mxnet.symbol.Variable", "mxnet.sym.FullyConnected", "mxnet.symbol.Variable", "mxnet.symbol.L2Normalization", "mxnet.sym.FullyConnected", "mxnet.symbol.SoftmaxActivation", "mxnet.symbol.log", "mxnet.sym.one_hot", "out_list.append", "out_list.append", "mxnet.sym.BlockGrad", "mxnet.symbol.sqrt", "mxnet.init.Normal", "mxnet.symbol.L2Normalization", "config.config.loss_name.find", "mxnet.symbol.L2Normalization", "mxnet.symbol.slice_axis", "mxnet.symbol.slice_axis", "mxnet.symbol.slice_axis", "mxnet.symbol.MakeLoss", "mxnet.symbol.sum", "mxnet.symbol.BlockGrad", "mxnet.symbol.BlockGrad", "mxnet.init.Normal", "mxnet.sym.one_hot", "mxnet.sym.pick", "mxnet.sym.arccos", "mxnet.sym.cos", "mxnet.sym.expand_dims", "mxnet.sym.one_hot", "mxnet.sym.broadcast_mul", "mxnet.symbol.sum", "mxnet.symbol.sum", "mxnet.symbol.Activation", "mxnet.symbol.mean", "mxnet.symbol.sum", "mxnet.symbol.sum", "mxnet.sym.arccos", "mxnet.sym.arccos", "mxnet.symbol.Activation", "mxnet.symbol.mean"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.get_symbol"], ["", "def", "get_symbol", "(", "args", ")", ":", "\n", "    ", "embedding", ",", "mask_weight", "=", "eval", "(", "config", ".", "net_name", "+", "\"52\"", ")", ".", "get_symbol", "(", ")", "\n", "all_label", "=", "mx", ".", "symbol", ".", "Variable", "(", "'softmax_label'", ")", "\n", "mask_label", "=", "mx", ".", "symbol", ".", "Variable", "(", "'mask_label'", ")", "\n", "\n", "# mask_pre = mx.sym.Reshape(mask_weight, (args.per_batch_size, 1, config.image_shape[0]*config.image_shape[1]))", "\n", "# mask_label = mx.sym.Reshape(mask_label, (args.per_batch_size, 1, config.image_shape[0]*config.image_shape[1]))", "\n", "# mae_loss_ = dice_coef_loss(mask_label, mask_pre)", "\n", "# mae_loss = mx.symbol.LogisticRegressionOutput(data = mask_pre, label = mask_label)", "\n", "# mae_loss = mx.symbol.MakeLoss(mae_loss)", "\n", "# mae_loss = mx.symbol.LinearRegressionOutput(data=mask_weight,label=mask_label,name='mask_loss')", "\n", "\n", "# min_ = mx.symbol.min(mask_weight,axis=[2,3],keepdims= 1)", "\n", "# min_ = mx.symbol.repeat(min_, repeats=112, axis=2)", "\n", "# min_ = mx.symbol.repeat(min_, repeats=112, axis=3)", "\n", "# max_ = mx.symbol.max(mask_weight,axis=[2,3],keepdims= 1)", "\n", "# max_ = mx.symbol.repeat(max_, repeats=112, axis=2)", "\n", "# max_ = mx.symbol.repeat(max_, repeats=112, axis=3)", "\n", "# mask_pre = (mask_weight - min_)/(max_ - min_)", "\n", "\n", "mae_loss_", "=", "mx", ".", "symbol", ".", "mean", "(", "mx", ".", "symbol", ".", "square", "(", "mask_weight", "-", "mask_label", ")", ")", "\n", "mae_loss", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "100", "*", "mx", ".", "symbol", ".", "sqrt", "(", "mae_loss_", ")", "/", "args", ".", "per_batch_size", ")", "\n", "# arg_name = temp2.list_arguments()", "\n", "# out_name = temp2.list_outputs()", "\n", "# arg_shape, out_shape, _ = temp2.infer_shape(data=(64,3,112,112))", "\n", "# print({'input' : dict(zip(arg_name, arg_shape)),'output' : dict(zip(out_name, out_shape))})", "\n", "# mae_loss = mx.sym.MakeLoss(mx.sym.square(weight - mask_label))", "\n", "gt_label", "=", "all_label", "\n", "is_softmax", "=", "True", "\n", "if", "config", ".", "loss_name", "==", "'softmax'", ":", "#softmax", "\n", "        ", "_weight", "=", "mx", ".", "symbol", ".", "Variable", "(", "\"fc7_weight\"", ",", "\n", "shape", "=", "(", "config", ".", "num_classes", ",", "\n", "config", ".", "emb_size", ")", ",", "\n", "lr_mult", "=", "config", ".", "fc7_lr_mult", ",", "\n", "wd_mult", "=", "config", ".", "fc7_wd_mult", ",", "\n", "init", "=", "mx", ".", "init", ".", "Normal", "(", "0.01", ")", ")", "\n", "if", "config", ".", "fc7_no_bias", ":", "\n", "            ", "fc7", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "embedding", ",", "\n", "weight", "=", "_weight", ",", "\n", "no_bias", "=", "True", ",", "\n", "num_hidden", "=", "config", ".", "num_classes", ",", "\n", "name", "=", "'fc7'", ")", "\n", "", "else", ":", "\n", "            ", "_bias", "=", "mx", ".", "symbol", ".", "Variable", "(", "'fc7_bias'", ",", "lr_mult", "=", "2.0", ",", "wd_mult", "=", "0.0", ")", "\n", "fc7", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "embedding", ",", "\n", "weight", "=", "_weight", ",", "\n", "bias", "=", "_bias", ",", "\n", "num_hidden", "=", "config", ".", "num_classes", ",", "\n", "name", "=", "'fc7'", ")", "\n", "", "", "elif", "config", ".", "loss_name", "==", "'margin_softmax'", ":", "\n", "        ", "_weight", "=", "mx", ".", "symbol", ".", "Variable", "(", "\"fc7_weight\"", ",", "\n", "shape", "=", "(", "config", ".", "num_classes", ",", "\n", "config", ".", "emb_size", ")", ",", "\n", "lr_mult", "=", "config", ".", "fc7_lr_mult", ",", "\n", "wd_mult", "=", "config", ".", "fc7_wd_mult", ",", "\n", "init", "=", "mx", ".", "init", ".", "Normal", "(", "0.01", ")", ")", "\n", "s", "=", "config", ".", "loss_s", "\n", "_weight", "=", "mx", ".", "symbol", ".", "L2Normalization", "(", "_weight", ",", "mode", "=", "'instance'", ")", "\n", "nembedding", "=", "mx", ".", "symbol", ".", "L2Normalization", "(", "\n", "embedding", ",", "mode", "=", "'instance'", ",", "name", "=", "'fc1n'", ")", "*", "s", "\n", "fc7", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "nembedding", ",", "\n", "weight", "=", "_weight", ",", "\n", "no_bias", "=", "True", ",", "\n", "num_hidden", "=", "config", ".", "num_classes", ",", "\n", "name", "=", "'fc7'", ")", "\n", "if", "config", ".", "loss_m1", "!=", "1.0", "or", "config", ".", "loss_m2", "!=", "0.0", "or", "config", ".", "loss_m3", "!=", "0.0", ":", "\n", "            ", "if", "config", ".", "loss_m1", "==", "1.0", "and", "config", ".", "loss_m2", "==", "0.0", ":", "\n", "                ", "s_m", "=", "s", "*", "config", ".", "loss_m3", "\n", "gt_one_hot", "=", "mx", ".", "sym", ".", "one_hot", "(", "gt_label", ",", "\n", "depth", "=", "config", ".", "num_classes", ",", "\n", "on_value", "=", "s_m", ",", "\n", "off_value", "=", "0.0", ")", "\n", "fc7", "=", "fc7", "-", "gt_one_hot", "\n", "", "else", ":", "\n", "                ", "zy", "=", "mx", ".", "sym", ".", "pick", "(", "fc7", ",", "gt_label", ",", "axis", "=", "1", ")", "\n", "cos_t", "=", "zy", "/", "s", "\n", "t", "=", "mx", ".", "sym", ".", "arccos", "(", "cos_t", ")", "\n", "if", "config", ".", "loss_m1", "!=", "1.0", ":", "\n", "                    ", "t", "=", "t", "*", "config", ".", "loss_m1", "\n", "", "if", "config", ".", "loss_m2", ">", "0.0", ":", "\n", "                    ", "t", "=", "t", "+", "config", ".", "loss_m2", "\n", "", "body", "=", "mx", ".", "sym", ".", "cos", "(", "t", ")", "\n", "if", "config", ".", "loss_m3", ">", "0.0", ":", "\n", "                    ", "body", "=", "body", "-", "config", ".", "loss_m3", "\n", "", "new_zy", "=", "body", "*", "s", "\n", "diff", "=", "new_zy", "-", "zy", "\n", "diff", "=", "mx", ".", "sym", ".", "expand_dims", "(", "diff", ",", "1", ")", "\n", "gt_one_hot", "=", "mx", ".", "sym", ".", "one_hot", "(", "gt_label", ",", "\n", "depth", "=", "config", ".", "num_classes", ",", "\n", "on_value", "=", "1.0", ",", "\n", "off_value", "=", "0.0", ")", "\n", "body", "=", "mx", ".", "sym", ".", "broadcast_mul", "(", "gt_one_hot", ",", "diff", ")", "\n", "fc7", "=", "fc7", "+", "body", "\n", "", "", "", "elif", "config", ".", "loss_name", ".", "find", "(", "'triplet'", ")", ">=", "0", ":", "\n", "        ", "is_softmax", "=", "False", "\n", "nembedding", "=", "mx", ".", "symbol", ".", "L2Normalization", "(", "embedding", ",", "\n", "mode", "=", "'instance'", ",", "\n", "name", "=", "'fc1n'", ")", "\n", "anchor", "=", "mx", ".", "symbol", ".", "slice_axis", "(", "nembedding", ",", "\n", "axis", "=", "0", ",", "\n", "begin", "=", "0", ",", "\n", "end", "=", "args", ".", "per_batch_size", "//", "3", ")", "\n", "positive", "=", "mx", ".", "symbol", ".", "slice_axis", "(", "nembedding", ",", "\n", "axis", "=", "0", ",", "\n", "begin", "=", "args", ".", "per_batch_size", "//", "3", ",", "\n", "end", "=", "2", "*", "args", ".", "per_batch_size", "//", "3", ")", "\n", "negative", "=", "mx", ".", "symbol", ".", "slice_axis", "(", "nembedding", ",", "\n", "axis", "=", "0", ",", "\n", "begin", "=", "2", "*", "args", ".", "per_batch_size", "//", "3", ",", "\n", "end", "=", "args", ".", "per_batch_size", ")", "\n", "if", "config", ".", "loss_name", "==", "'triplet'", ":", "\n", "            ", "ap", "=", "anchor", "-", "positive", "\n", "an", "=", "anchor", "-", "negative", "\n", "ap", "=", "ap", "*", "ap", "\n", "an", "=", "an", "*", "an", "\n", "ap", "=", "mx", ".", "symbol", ".", "sum", "(", "ap", ",", "axis", "=", "1", ",", "keepdims", "=", "1", ")", "#(T,1)", "\n", "an", "=", "mx", ".", "symbol", ".", "sum", "(", "an", ",", "axis", "=", "1", ",", "keepdims", "=", "1", ")", "#(T,1)", "\n", "triplet_loss", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "(", "ap", "-", "an", "+", "\n", "config", ".", "triplet_alpha", ")", ",", "\n", "act_type", "=", "'relu'", ")", "\n", "triplet_loss", "=", "mx", ".", "symbol", ".", "mean", "(", "triplet_loss", ")", "\n", "", "else", ":", "\n", "            ", "ap", "=", "anchor", "*", "positive", "\n", "an", "=", "anchor", "*", "negative", "\n", "ap", "=", "mx", ".", "symbol", ".", "sum", "(", "ap", ",", "axis", "=", "1", ",", "keepdims", "=", "1", ")", "#(T,1)", "\n", "an", "=", "mx", ".", "symbol", ".", "sum", "(", "an", ",", "axis", "=", "1", ",", "keepdims", "=", "1", ")", "#(T,1)", "\n", "ap", "=", "mx", ".", "sym", ".", "arccos", "(", "ap", ")", "\n", "an", "=", "mx", ".", "sym", ".", "arccos", "(", "an", ")", "\n", "triplet_loss", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "(", "ap", "-", "an", "+", "\n", "config", ".", "triplet_alpha", ")", ",", "\n", "act_type", "=", "'relu'", ")", "\n", "triplet_loss", "=", "mx", ".", "symbol", ".", "mean", "(", "triplet_loss", ")", "\n", "", "triplet_loss", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "triplet_loss", ")", "\n", "", "out_list", "=", "[", "mx", ".", "symbol", ".", "BlockGrad", "(", "embedding", ")", "]", "\n", "if", "is_softmax", ":", "\n", "        ", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc7", ",", "\n", "label", "=", "gt_label", ",", "\n", "name", "=", "'softmax'", ",", "\n", "normalization", "=", "'valid'", ")", "\n", "out_list", ".", "append", "(", "mae_loss", ")", "\n", "out_list", ".", "append", "(", "softmax", ")", "\n", "if", "config", ".", "ce_loss", ":", "\n", "#ce_loss = mx.symbol.softmax_cross_entropy(data=fc7, label = gt_label, name='ce_loss')/args.per_batch_size", "\n", "            ", "body", "=", "mx", ".", "symbol", ".", "SoftmaxActivation", "(", "data", "=", "fc7", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "log", "(", "body", ")", "\n", "_label", "=", "mx", ".", "sym", ".", "one_hot", "(", "gt_label", ",", "\n", "depth", "=", "config", ".", "num_classes", ",", "\n", "on_value", "=", "-", "1.0", ",", "\n", "off_value", "=", "0.0", ")", "\n", "body", "=", "body", "*", "_label", "\n", "ce_loss", "=", "mx", ".", "symbol", ".", "sum", "(", "body", ")", "/", "args", ".", "per_batch_size", "\n", "out_list", ".", "append", "(", "mx", ".", "symbol", ".", "BlockGrad", "(", "ce_loss", ")", ")", "\n", "out_list", ".", "append", "(", "mx", ".", "symbol", ".", "BlockGrad", "(", "mae_loss", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "out_list", ".", "append", "(", "mx", ".", "sym", ".", "BlockGrad", "(", "gt_label", ")", ")", "\n", "out_list", ".", "append", "(", "triplet_loss", ")", "\n", "# out_list.append(mx.symbol.BlockGrad(mask_label))", "\n", "# out_list.append(mx.symbol.BlockGrad(mae_loss))", "\n", "", "print", "(", "out_list", ")", "\n", "out", "=", "mx", ".", "symbol", ".", "Group", "(", "out_list", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.train_net": [[271, 516], ["os.environ[].strip", "os.path.join", "os.path.dirname", "print", "len", "print", "print", "os.path.join", "print", "mxnet.mod.Module", "mx.mod.Module.bind", "mxnet.SGD", "mxnet.callback.Speedometer", "print", "mxnet.io.PrefetchingIter", "mx.mod.Module.fit", "len", "range", "len", "print", "print", "os.path.exists", "os.makedirs", "len", "len", "train.get_symbol", "print", "mxnet.model.load_checkpoint", "train.get_symbol", "get_symbol.get_internals", "flops_counter.count_flops", "flops_counter.flops_str", "print", "config.config.loss_name.find", "FaceImageIter", "metric.Id_LossValueMetric", "FaceImageIter", "metric.AccMetric", "mxnet.init.Xavier", "mxnet.init.Xavier", "os.path.join", "os.path.exists", "range", "int", "mx.callback.Speedometer.", "len", "ctx.append", "mxnet.cpu", "len", "spherenet.init_weights", "mxnet.metric.create", "mxnet.metric.create", "metric.Id_LossValueMetric", "metric.Mask_LossValueMetric", "eval_metrics.append", "eval_metrics.append", "verification.load_bin", "ver_list.append", "ver_name_list.append", "print", "len", "verification.test", "print", "print", "results.append", "args.lr_steps.split", "print", "train.train_net.ver_test"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.get_symbol", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.get_symbol", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.count_flops", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.flops_str", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.load_bin", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.test", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split"], ["", "def", "train_net", "(", "args", ")", ":", "\n", "    ", "ctx", "=", "[", "]", "\n", "cvd", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "strip", "(", ")", "\n", "if", "len", "(", "cvd", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "cvd", ".", "split", "(", "','", ")", ")", ")", ":", "\n", "            ", "ctx", ".", "append", "(", "mx", ".", "gpu", "(", "i", ")", ")", "\n", "", "", "if", "len", "(", "ctx", ")", "==", "0", ":", "\n", "        ", "ctx", "=", "[", "mx", ".", "cpu", "(", ")", "]", "\n", "print", "(", "'use cpu'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'gpu num:'", ",", "len", "(", "ctx", ")", ")", "\n", "", "prefix", "=", "os", ".", "path", ".", "join", "(", "args", ".", "models_root", ",", "\n", "'%s-%s-%s'", "%", "(", "args", ".", "network", ",", "args", ".", "loss", ",", "args", ".", "dataset", ")", ",", "\n", "'model'", ")", "\n", "prefix_dir", "=", "os", ".", "path", ".", "dirname", "(", "prefix", ")", "\n", "print", "(", "'prefix'", ",", "prefix", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "prefix_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "prefix_dir", ")", "\n", "", "args", ".", "ctx_num", "=", "len", "(", "ctx", ")", "\n", "args", ".", "batch_size", "=", "args", ".", "per_batch_size", "*", "args", ".", "ctx_num", "\n", "args", ".", "rescale_threshold", "=", "0", "\n", "args", ".", "image_channel", "=", "config", ".", "image_shape", "[", "2", "]", "\n", "config", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "config", ".", "per_batch_size", "=", "args", ".", "per_batch_size", "\n", "\n", "data_dir", "=", "config", ".", "dataset_path", "\n", "path_imgrec", "=", "None", "\n", "path_imglist", "=", "None", "\n", "image_size", "=", "config", ".", "image_shape", "[", "0", ":", "2", "]", "\n", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "assert", "image_size", "[", "0", "]", "==", "image_size", "[", "1", "]", "\n", "print", "(", "'image_size'", ",", "image_size", ")", "\n", "print", "(", "'num_classes'", ",", "config", ".", "num_classes", ")", "\n", "path_imgrec", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.rec\"", ")", "\n", "\n", "print", "(", "'Called with argument:'", ",", "args", ",", "config", ")", "\n", "data_shape", "=", "(", "args", ".", "image_channel", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", "\n", "mean", "=", "None", "\n", "\n", "begin_epoch", "=", "0", "\n", "if", "len", "(", "args", ".", "pretrained", ")", "==", "0", ":", "\n", "        ", "arg_params", "=", "None", "\n", "aux_params", "=", "None", "\n", "sym", "=", "get_symbol", "(", "args", ")", "\n", "if", "config", ".", "net_name", "==", "'spherenet'", ":", "\n", "            ", "data_shape_dict", "=", "{", "'data'", ":", "(", "args", ".", "per_batch_size", ",", ")", "+", "data_shape", "}", "\n", "spherenet", ".", "init_weights", "(", "sym", ",", "data_shape_dict", ",", "args", ".", "num_layers", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'loading'", ",", "args", ".", "pretrained", ",", "args", ".", "pretrained_epoch", ")", "\n", "_", ",", "arg_params", ",", "aux_params", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "\n", "args", ".", "pretrained", ",", "args", ".", "pretrained_epoch", ")", "\n", "sym", "=", "get_symbol", "(", "args", ")", "\n", "\n", "", "if", "config", ".", "count_flops", ":", "\n", "        ", "all_layers", "=", "sym", ".", "get_internals", "(", ")", "\n", "_sym", "=", "all_layers", "[", "'fc1_output'", "]", "\n", "FLOPs", "=", "flops_counter", ".", "count_flops", "(", "_sym", ",", "\n", "data", "=", "(", "1", ",", "3", ",", "image_size", "[", "0", "]", ",", "\n", "image_size", "[", "1", "]", ")", ")", "\n", "_str", "=", "flops_counter", ".", "flops_str", "(", "FLOPs", ")", "\n", "print", "(", "'Network FLOPs: %s'", "%", "_str", ")", "\n", "\n", "#label_name = 'softmax_label'", "\n", "#label_shape = (args.batch_size,)", "\n", "", "model", "=", "mx", ".", "mod", ".", "Module", "(", "\n", "context", "=", "ctx", ",", "\n", "symbol", "=", "sym", ",", "\n", "label_names", "=", "[", "'softmax_label'", ",", "'mask_label'", "]", "\n", ")", "\n", "model", ".", "bind", "(", "[", "(", "\"data\"", ",", "(", "args", ".", "batch_size", ",", "args", ".", "image_channel", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "]", ",", "[", "(", "\"softmax_label\"", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "(", "\"mask_label\"", ",", "(", "args", ".", "batch_size", ",", "1", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "]", ")", "\n", "val_dataiter", "=", "None", "\n", "\n", "\n", "# mx.viz.plot_network(sym).view()", "\n", "\n", "if", "config", ".", "loss_name", ".", "find", "(", "'triplet'", ")", ">=", "0", ":", "\n", "        ", "from", "triplet_image_iter", "import", "FaceImageIter", "\n", "triplet_params", "=", "[", "\n", "config", ".", "triplet_bag_size", ",", "config", ".", "triplet_alpha", ",", "\n", "config", ".", "triplet_max_ap", "\n", "]", "\n", "train_dataiter", "=", "FaceImageIter", "(", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "data_shape", "=", "data_shape", ",", "\n", "path_imgrec", "=", "path_imgrec", ",", "\n", "shuffle", "=", "True", ",", "\n", "rand_mirror", "=", "config", ".", "data_rand_mirror", ",", "\n", "mean", "=", "mean", ",", "\n", "cutoff", "=", "config", ".", "data_cutoff", ",", "\n", "ctx_num", "=", "args", ".", "ctx_num", ",", "\n", "images_per_identity", "=", "config", ".", "images_per_identity", ",", "\n", "triplet_params", "=", "triplet_params", ",", "\n", "mx_model", "=", "model", ",", "\n", ")", "\n", "_metric", "=", "Id_LossValueMetric", "(", ")", "\n", "eval_metrics", "=", "[", "mx", ".", "metric", ".", "create", "(", "_metric", ")", "]", "\n", "", "else", ":", "\n", "        ", "from", "image_iter", "import", "FaceImageIter", "\n", "train_dataiter", "=", "FaceImageIter", "(", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "data_shape", "=", "data_shape", ",", "\n", "path_imgrec", "=", "path_imgrec", ",", "\n", "shuffle", "=", "True", ",", "\n", "rand_mirror", "=", "config", ".", "data_rand_mirror", ",", "\n", "mean", "=", "mean", ",", "\n", "cutoff", "=", "config", ".", "data_cutoff", ",", "\n", "color_jittering", "=", "config", ".", "data_color", ",", "\n", "images_filter", "=", "config", ".", "data_images_filter", ",", "\n", ")", "\n", "metric1", "=", "AccMetric", "(", ")", "\n", "eval_metrics", "=", "[", "mx", ".", "metric", ".", "create", "(", "metric1", ")", "]", "\n", "if", "config", ".", "ce_loss", ":", "\n", "            ", "metric2", "=", "Id_LossValueMetric", "(", ")", "\n", "metric3", "=", "Mask_LossValueMetric", "(", ")", "\n", "eval_metrics", ".", "append", "(", "mx", ".", "metric", ".", "create", "(", "metric2", ")", ")", "\n", "eval_metrics", ".", "append", "(", "mx", ".", "metric", ".", "create", "(", "metric3", ")", ")", "\n", "\n", "", "", "if", "config", ".", "net_name", "==", "'fresnet'", "or", "config", ".", "net_name", "==", "'fmobilefacenet'", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "Xavier", "(", "rnd_type", "=", "'gaussian'", ",", "\n", "factor_type", "=", "\"out\"", ",", "\n", "magnitude", "=", "2", ")", "#resnet style", "\n", "", "else", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "Xavier", "(", "rnd_type", "=", "'uniform'", ",", "\n", "factor_type", "=", "\"in\"", ",", "\n", "magnitude", "=", "2", ")", "\n", "#initializer = mx.init.Xavier(rnd_type='gaussian', factor_type=\"out\", magnitude=2) #resnet style", "\n", "", "_rescale", "=", "1.0", "/", "args", ".", "ctx_num", "\n", "opt", "=", "optimizer", ".", "SGD", "(", "learning_rate", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "mom", ",", "\n", "wd", "=", "args", ".", "wd", ",", "\n", "rescale_grad", "=", "_rescale", ")", "\n", "_cb", "=", "mx", ".", "callback", ".", "Speedometer", "(", "args", ".", "batch_size", ",", "args", ".", "frequent", ")", "\n", "\n", "ver_list", "=", "[", "]", "\n", "ver_name_list", "=", "[", "]", "\n", "for", "name", "in", "config", ".", "val_targets", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", "+", "\".bin\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "data_set", "=", "verification", ".", "load_bin", "(", "path", ",", "image_size", ")", "\n", "ver_list", ".", "append", "(", "data_set", ")", "\n", "ver_name_list", ".", "append", "(", "name", ")", "\n", "print", "(", "'ver'", ",", "name", ")", "\n", "\n", "", "", "def", "ver_test", "(", "nbatch", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ver_list", ")", ")", ":", "\n", "            ", "acc1", ",", "std1", ",", "acc2", ",", "std2", ",", "xnorm", ",", "embeddings_list", "=", "verification", ".", "test", "(", "\n", "ver_list", "[", "i", "]", ",", "model", ",", "args", ".", "batch_size", ",", "10", ",", "None", ",", "None", ")", "\n", "print", "(", "'[%s][%d]XNorm: %f'", "%", "(", "ver_name_list", "[", "i", "]", ",", "nbatch", ",", "xnorm", ")", ")", "\n", "#print('[%s][%d]Accuracy: %1.5f+-%1.5f' % (ver_name_list[i], nbatch, acc1, std1))", "\n", "print", "(", "'[%s][%d]Accuracy-Flip: %1.5f+-%1.5f'", "%", "\n", "(", "ver_name_list", "[", "i", "]", ",", "nbatch", ",", "acc2", ",", "std2", ")", ")", "\n", "results", ".", "append", "(", "acc2", ")", "\n", "", "return", "results", "\n", "\n", "", "highest_acc", "=", "[", "0.0", ",", "0.0", "]", "#lfw and target", "\n", "#for i in range(len(ver_list)):", "\n", "#  highest_acc.append(0.0)", "\n", "global_step", "=", "[", "0", "]", "\n", "save_step", "=", "[", "0", "]", "\n", "lr_steps", "=", "[", "int", "(", "x", ")", "for", "x", "in", "args", ".", "lr_steps", ".", "split", "(", "','", ")", "]", "\n", "print", "(", "'lr_steps'", ",", "lr_steps", ")", "\n", "\n", "def", "_batch_callback", "(", "param", ")", ":", "\n", "#global global_step", "\n", "        ", "global_step", "[", "0", "]", "+=", "1", "\n", "mbatch", "=", "global_step", "[", "0", "]", "\n", "for", "step", "in", "lr_steps", ":", "\n", "            ", "if", "mbatch", "==", "step", ":", "\n", "                ", "opt", ".", "lr", "*=", "0.1", "\n", "print", "(", "'lr change to'", ",", "opt", ".", "lr", ")", "\n", "break", "\n", "\n", "", "", "_cb", "(", "param", ")", "\n", "if", "mbatch", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'lr-batch-epoch:'", ",", "opt", ".", "lr", ",", "param", ".", "nbatch", ",", "param", ".", "epoch", ")", "\n", "\n", "", "if", "mbatch", ">=", "0", "and", "mbatch", "%", "args", ".", "verbose", "==", "0", ":", "\n", "            ", "acc_list", "=", "ver_test", "(", "mbatch", ")", "\n", "save_step", "[", "0", "]", "+=", "1", "\n", "msave", "=", "save_step", "[", "0", "]", "\n", "do_save", "=", "False", "\n", "is_highest", "=", "False", "\n", "if", "len", "(", "acc_list", ")", ">", "0", ":", "\n", "#lfw_score = acc_list[0]", "\n", "#if lfw_score>highest_acc[0]:", "\n", "#  highest_acc[0] = lfw_score", "\n", "#  if lfw_score>=0.998:", "\n", "#    do_save = True", "\n", "                ", "score", "=", "sum", "(", "acc_list", ")", "\n", "if", "acc_list", "[", "-", "1", "]", ">=", "highest_acc", "[", "-", "1", "]", ":", "\n", "                    ", "if", "acc_list", "[", "-", "1", "]", ">", "highest_acc", "[", "-", "1", "]", ":", "\n", "                        ", "is_highest", "=", "True", "\n", "", "else", ":", "\n", "                        ", "if", "score", ">=", "highest_acc", "[", "0", "]", ":", "\n", "                            ", "is_highest", "=", "True", "\n", "highest_acc", "[", "0", "]", "=", "score", "\n", "", "", "highest_acc", "[", "-", "1", "]", "=", "acc_list", "[", "-", "1", "]", "\n", "#if lfw_score>=0.99:", "\n", "#  do_save = True", "\n", "", "", "if", "is_highest", ":", "\n", "                ", "do_save", "=", "True", "\n", "", "if", "args", ".", "ckpt", "==", "0", ":", "\n", "                ", "do_save", "=", "False", "\n", "", "elif", "args", ".", "ckpt", "==", "2", ":", "\n", "                ", "do_save", "=", "True", "\n", "", "elif", "args", ".", "ckpt", "==", "3", ":", "\n", "                ", "msave", "=", "1", "\n", "\n", "", "if", "do_save", ":", "\n", "                ", "print", "(", "'saving'", ",", "msave", ")", "\n", "arg", ",", "aux", "=", "model", ".", "get_params", "(", ")", "\n", "if", "config", ".", "ckpt_embedding", ":", "\n", "                    ", "all_layers", "=", "model", ".", "symbol", ".", "get_internals", "(", ")", "\n", "_sym", "=", "all_layers", "[", "'fc1_output'", "]", "\n", "_arg", "=", "{", "}", "\n", "for", "k", "in", "arg", ":", "\n", "                        ", "if", "not", "k", ".", "startswith", "(", "'fc7'", ")", ":", "\n", "                            ", "_arg", "[", "k", "]", "=", "arg", "[", "k", "]", "\n", "", "", "mx", ".", "model", ".", "save_checkpoint", "(", "prefix", ",", "msave", ",", "_sym", ",", "_arg", ",", "aux", ")", "\n", "", "else", ":", "\n", "                    ", "mx", ".", "model", ".", "save_checkpoint", "(", "prefix", ",", "msave", ",", "model", ".", "symbol", ",", "arg", ",", "\n", "aux", ")", "\n", "", "", "print", "(", "'[%d]Accuracy-Highest: %1.5f'", "%", "(", "mbatch", ",", "highest_acc", "[", "-", "1", "]", ")", ")", "\n", "", "if", "config", ".", "max_steps", ">", "0", "and", "mbatch", ">", "config", ".", "max_steps", ":", "\n", "            ", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "", "epoch_cb", "=", "None", "\n", "train_dataiter", "=", "mx", ".", "io", ".", "PrefetchingIter", "(", "train_dataiter", ")", "\n", "\n", "model", ".", "fit", "(", "\n", "train_dataiter", ",", "\n", "begin_epoch", "=", "begin_epoch", ",", "\n", "num_epoch", "=", "999999", ",", "\n", "eval_data", "=", "val_dataiter", ",", "\n", "eval_metric", "=", "eval_metrics", ",", "\n", "kvstore", "=", "args", ".", "kvstore", ",", "\n", "optimizer", "=", "opt", ",", "\n", "#optimizer_params   = optimizer_params,", "\n", "initializer", "=", "initializer", ",", "\n", "arg_params", "=", "arg_params", ",", "\n", "aux_params", "=", "aux_params", ",", "\n", "allow_missing", "=", "True", ",", "\n", "batch_end_callback", "=", "_batch_callback", ",", "\n", "epoch_end_callback", "=", "epoch_cb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.main": [[518, 522], ["train.parse_args", "train.train_net"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.parse_args", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.train.train_net"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parse_args", "(", ")", "\n", "train_net", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.metric.AccMetric.__init__": [[6, 14], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "axis", "=", "1", "\n", "super", "(", "AccMetric", ",", "self", ")", ".", "__init__", "(", "'acc'", ",", "\n", "axis", "=", "self", ".", "axis", ",", "\n", "output_names", "=", "None", ",", "\n", "label_names", "=", "None", ")", "\n", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.metric.AccMetric.update": [[15, 32], ["mxnet.ndarray.argmax.asnumpy().astype().flatten", "label.astype().flatten.astype().flatten.asnumpy", "label.astype().flatten.astype().flatten.astype().flatten", "len", "mxnet.ndarray.argmax", "mxnet.ndarray.argmax.asnumpy().astype", "label.astype().flatten.astype().flatten.astype", "mxnet.ndarray.argmax.asnumpy"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "labels", ",", "preds", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "label", "=", "labels", "[", "0", "]", "\n", "pred_label", "=", "preds", "[", "2", "]", "# 2", "\n", "# print('ACC', label.shape, pred_label.shape)", "\n", "# print(np.sum(labels[1].asnumpy()<0.9))", "\n", "# print(preds)", "\n", "if", "pred_label", ".", "shape", "!=", "label", ".", "shape", ":", "\n", "            ", "pred_label", "=", "mx", ".", "ndarray", ".", "argmax", "(", "pred_label", ",", "axis", "=", "self", ".", "axis", ")", "\n", "", "pred_label", "=", "pred_label", ".", "asnumpy", "(", ")", ".", "astype", "(", "'int32'", ")", ".", "flatten", "(", ")", "\n", "label", "=", "label", ".", "asnumpy", "(", ")", "\n", "if", "label", ".", "ndim", "==", "2", ":", "\n", "            ", "label", "=", "label", "[", ":", ",", "0", "]", "\n", "", "label", "=", "label", ".", "astype", "(", "'int32'", ")", ".", "flatten", "(", ")", "\n", "assert", "label", ".", "shape", "==", "pred_label", ".", "shape", "\n", "self", ".", "sum_metric", "+=", "(", "pred_label", ".", "flat", "==", "label", ".", "flat", ")", ".", "sum", "(", ")", "\n", "self", ".", "num_inst", "+=", "len", "(", "pred_label", ".", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.metric.Id_LossValueMetric.__init__": [[35, 42], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "axis", "=", "1", "\n", "super", "(", "Id_LossValueMetric", ",", "self", ")", ".", "__init__", "(", "'ce_lossvalue'", ",", "\n", "axis", "=", "self", ".", "axis", ",", "\n", "output_names", "=", "None", ",", "\n", "label_names", "=", "None", ")", "\n", "self", ".", "losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.metric.Id_LossValueMetric.update": [[43, 50], ["preds[].asnumpy"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "labels", ",", "preds", ")", ":", "\n", "#label = labels[0].asnumpy()", "\n", "# print(preds)", "\n", "        ", "pred", "=", "preds", "[", "-", "2", "]", ".", "asnumpy", "(", ")", "# -2", "\n", "loss", "=", "pred", "[", "0", "]", "\n", "self", ".", "sum_metric", "+=", "loss", "\n", "self", ".", "num_inst", "+=", "1.0", "\n", "#gt_label = preds[-2].asnumpy()", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.metric.Mask_LossValueMetric.__init__": [[54, 61], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "axis", "=", "1", "\n", "super", "(", "Mask_LossValueMetric", ",", "self", ")", ".", "__init__", "(", "'mask_lossvalue'", ",", "\n", "axis", "=", "self", ".", "axis", ",", "\n", "output_names", "=", "None", ",", "\n", "label_names", "=", "None", ")", "\n", "self", ".", "losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.metric.Mask_LossValueMetric.update": [[62, 68], ["preds[].asnumpy"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "labels", ",", "preds", ")", ":", "\n", "#label = labels[0].asnumpy()", "\n", "        ", "pred", "=", "preds", "[", "-", "1", "]", ".", "asnumpy", "(", ")", "\n", "loss", "=", "pred", "[", "0", "]", "\n", "self", ".", "sum_metric", "+=", "loss", "\n", "self", ".", "num_inst", "+=", "1.0", "\n", "#gt_label = preds[-2].asnumpy()", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.__init__": [[25, 98], ["mxnet.io.DataIter.__init__", "image_iter.FaceImageIter.check_data_shape", "print", "mxnet.image.ColorJitterAug", "logging.info", "mxnet.recordio.MXIndexedRecordIO", "image_iter.FaceImageIter.imgrec.read_idx", "mxnet.recordio.unpack", "numpy.array().reshape", "mxnet.nd.array().reshape", "print", "range", "print", "list", "print", "int", "int", "int", "int", "image_iter.FaceImageIter.imgrec.read_idx", "mxnet.recordio.unpack", "range", "len", "len", "numpy.array", "mxnet.nd.array", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.__init__", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.check_data_shape"], ["    ", "def", "__init__", "(", "self", ",", "\n", "batch_size", ",", "\n", "data_shape", ",", "\n", "path_imgrec", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "aug_list", "=", "None", ",", "\n", "mean", "=", "None", ",", "\n", "rand_mirror", "=", "False", ",", "\n", "cutoff", "=", "0", ",", "\n", "color_jittering", "=", "0", ",", "\n", "images_filter", "=", "0", ",", "\n", "data_name", "=", "'data'", ",", "\n", "label_name", "=", "'softmax_label'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FaceImageIter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "path_imgrec", "\n", "if", "path_imgrec", ":", "\n", "            ", "logging", ".", "info", "(", "'loading recordio %s...'", ",", "path_imgrec", ")", "\n", "path_imgidx", "=", "path_imgrec", "[", "0", ":", "-", "4", "]", "+", "\".idx\"", "\n", "self", ".", "imgrec", "=", "recordio", ".", "MXIndexedRecordIO", "(", "path_imgidx", ",", "path_imgrec", ",", "\n", "'r'", ")", "# pylint: disable=redefined-variable-type", "\n", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "0", ")", "\n", "header", ",", "_", "=", "recordio", ".", "unpack", "(", "s", ")", "\n", "if", "header", ".", "flag", ">", "0", ":", "\n", "                ", "print", "(", "'header0 label'", ",", "header", ".", "label", ")", "\n", "self", ".", "header0", "=", "(", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "int", "(", "header", ".", "label", "[", "1", "]", ")", ")", "\n", "#assert(header.flag==1)", "\n", "#self.imgidx = range(1, int(header.label[0]))", "\n", "self", ".", "imgidx", "=", "[", "]", "\n", "self", ".", "id2range", "=", "{", "}", "\n", "self", ".", "seq_identity", "=", "range", "(", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "\n", "int", "(", "header", ".", "label", "[", "1", "]", ")", ")", "\n", "for", "identity", "in", "self", ".", "seq_identity", ":", "\n", "                    ", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "identity", ")", "\n", "header", ",", "_", "=", "recordio", ".", "unpack", "(", "s", ")", "\n", "a", ",", "b", "=", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "int", "(", "header", ".", "label", "[", "1", "]", ")", "\n", "count", "=", "b", "-", "a", "\n", "if", "count", "<", "images_filter", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "id2range", "[", "identity", "]", "=", "(", "a", ",", "b", ")", "\n", "self", ".", "imgidx", "+=", "range", "(", "a", ",", "b", ")", "\n", "", "print", "(", "'id2range'", ",", "len", "(", "self", ".", "id2range", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "imgidx", "=", "list", "(", "self", ".", "imgrec", ".", "keys", ")", "\n", "", "if", "shuffle", ":", "\n", "                ", "self", ".", "seq", "=", "self", ".", "imgidx", "\n", "self", ".", "oseq", "=", "self", ".", "imgidx", "\n", "print", "(", "len", "(", "self", ".", "seq", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "seq", "=", "None", "\n", "\n", "", "", "self", ".", "mean", "=", "mean", "\n", "self", ".", "nd_mean", "=", "None", "\n", "if", "self", ".", "mean", ":", "\n", "            ", "self", ".", "mean", "=", "np", ".", "array", "(", "self", ".", "mean", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "nd_mean", "=", "mx", ".", "nd", ".", "array", "(", "self", ".", "mean", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "\n", "", "self", ".", "check_data_shape", "(", "data_shape", ")", "\n", "self", ".", "provide_data", "=", "[", "(", "data_name", ",", "(", "batch_size", ",", ")", "+", "data_shape", ")", "]", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "image_size", "=", "'%d,%d'", "%", "(", "data_shape", "[", "1", "]", ",", "data_shape", "[", "2", "]", ")", "\n", "self", ".", "rand_mirror", "=", "rand_mirror", "\n", "print", "(", "'rand_mirror'", ",", "rand_mirror", ")", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "self", ".", "color_jittering", "=", "color_jittering", "\n", "self", ".", "CJA", "=", "mx", ".", "image", ".", "ColorJitterAug", "(", "0.125", ",", "0.125", ",", "0.125", ")", "\n", "self", ".", "provide_label", "=", "[", "(", "'softmax_label'", ",", "(", "batch_size", ",", ")", ")", ",", "(", "'mask_label'", ",", "(", "batch_size", ",", ")", ")", "]", "\n", "#print(self.provide_label[0][1])", "\n", "self", ".", "cur", "=", "0", "\n", "self", ".", "nbatch", "=", "0", "\n", "self", ".", "is_init", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.reset": [[99, 107], ["print", "random.shuffle", "image_iter.FaceImageIter.imgrec.reset"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIterList.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the iterator to the beginning of the data.\"\"\"", "\n", "print", "(", "'call reset()'", ")", "\n", "self", ".", "cur", "=", "0", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "seq", ")", "\n", "", "if", "self", ".", "seq", "is", "None", "and", "self", ".", "imgrec", "is", "not", "None", ":", "\n", "            ", "self", ".", "imgrec", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.num_samples": [[108, 110], ["len"], "methods", ["None"], ["", "", "def", "num_samples", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.next_sample": [[111, 136], ["image_iter.FaceImageIter.imgrec.read", "mxnet.recordio.unpack", "len", "image_iter.FaceImageIter.imgrec.read_idx", "mxnet.recordio.unpack", "image_iter.FaceImageIter.read_image"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_preprocess.read_image"], ["", "def", "next_sample", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper function for reading in next sample.\"\"\"", "\n", "#set total batch size, for example, 1800, and maximum size for each people, for example 45", "\n", "if", "self", ".", "seq", "is", "not", "None", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "self", ".", "cur", ">=", "len", "(", "self", ".", "seq", ")", ":", "\n", "                    ", "raise", "StopIteration", "\n", "", "idx", "=", "self", ".", "seq", "[", "self", ".", "cur", "]", "\n", "self", ".", "cur", "+=", "1", "\n", "if", "self", ".", "imgrec", "is", "not", "None", ":", "\n", "                    ", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "idx", ")", "\n", "header", ",", "img", "=", "recordio", ".", "unpack", "(", "s", ")", "\n", "label", "=", "header", ".", "label", "\n", "# if not isinstance(label, numbers.Number):", "\n", "#     label = label[0]", "\n", "return", "label", ",", "img", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "                    ", "label", ",", "fname", ",", "bbox", ",", "landmark", "=", "self", ".", "imglist", "[", "idx", "]", "\n", "return", "label", ",", "self", ".", "read_image", "(", "fname", ")", ",", "bbox", ",", "landmark", "\n", "", "", "", "else", ":", "\n", "            ", "s", "=", "self", ".", "imgrec", ".", "read", "(", ")", "\n", "if", "s", "is", "None", ":", "\n", "                ", "raise", "StopIteration", "\n", "", "header", ",", "img", "=", "recordio", ".", "unpack", "(", "s", ")", "\n", "return", "header", ".", "label", ",", "img", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.brightness_aug": [[137, 141], ["random.uniform"], "methods", ["None"], ["", "", "def", "brightness_aug", "(", "self", ",", "src", ",", "x", ")", ":", "\n", "        ", "alpha", "=", "1.0", "+", "random", ".", "uniform", "(", "-", "x", ",", "x", ")", "\n", "src", "*=", "alpha", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.contrast_aug": [[142, 150], ["mxnet.ndarray.array", "random.uniform", "mxnet.ndarray.sum"], "methods", ["None"], ["", "def", "contrast_aug", "(", "self", ",", "src", ",", "x", ")", ":", "\n", "        ", "alpha", "=", "1.0", "+", "random", ".", "uniform", "(", "-", "x", ",", "x", ")", "\n", "coef", "=", "nd", ".", "array", "(", "[", "[", "[", "0.299", ",", "0.587", ",", "0.114", "]", "]", "]", ")", "\n", "gray", "=", "src", "*", "coef", "\n", "gray", "=", "(", "3.0", "*", "(", "1.0", "-", "alpha", ")", "/", "gray", ".", "size", ")", "*", "nd", ".", "sum", "(", "gray", ")", "\n", "src", "*=", "alpha", "\n", "src", "+=", "gray", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.saturation_aug": [[151, 160], ["mxnet.ndarray.array", "mxnet.ndarray.sum", "random.uniform"], "methods", ["None"], ["", "def", "saturation_aug", "(", "self", ",", "src", ",", "x", ")", ":", "\n", "        ", "alpha", "=", "1.0", "+", "random", ".", "uniform", "(", "-", "x", ",", "x", ")", "\n", "coef", "=", "nd", ".", "array", "(", "[", "[", "[", "0.299", ",", "0.587", ",", "0.114", "]", "]", "]", ")", "\n", "gray", "=", "src", "*", "coef", "\n", "gray", "=", "nd", ".", "sum", "(", "gray", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "gray", "*=", "(", "1.0", "-", "alpha", ")", "\n", "src", "*=", "alpha", "\n", "src", "+=", "gray", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.color_aug": [[161, 170], ["image_iter.FaceImageIter.CJA"], "methods", ["None"], ["", "def", "color_aug", "(", "self", ",", "img", ",", "x", ")", ":", "\n", "#augs = [self.brightness_aug, self.contrast_aug, self.saturation_aug]", "\n", "#random.shuffle(augs)", "\n", "#for aug in augs:", "\n", "#  #print(img.shape)", "\n", "#  img = aug(img, x)", "\n", "#  #print(img.shape)", "\n", "#return img", "\n", "        ", "return", "self", ".", "CJA", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.mirror_aug": [[171, 177], ["random.randint", "range", "numpy.fliplr"], "methods", ["None"], ["", "def", "mirror_aug", "(", "self", ",", "img", ")", ":", "\n", "        ", "_rd", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "_rd", "==", "1", ":", "\n", "            ", "for", "c", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "img", "[", ":", ",", ":", ",", "c", "]", "=", "np", ".", "fliplr", "(", "img", "[", ":", ",", ":", ",", "c", "]", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.compress_aug": [[178, 188], ["BytesIO", "Image.fromarray", "random.randint", "Image.open.save", "buf.getvalue.getvalue.getvalue", "Image.open", "mxnet.ndarray.array", "Image.open.asnumpy", "BytesIO", "numpy.asarray"], "methods", ["None"], ["", "def", "compress_aug", "(", "self", ",", "img", ")", ":", "\n", "        ", "from", "PIL", "import", "Image", "\n", "from", "io", "import", "BytesIO", "\n", "buf", "=", "BytesIO", "(", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "asnumpy", "(", ")", ",", "'RGB'", ")", "\n", "q", "=", "random", ".", "randint", "(", "2", ",", "20", ")", "\n", "img", ".", "save", "(", "buf", ",", "format", "=", "'JPEG'", ",", "quality", "=", "q", ")", "\n", "buf", "=", "buf", ".", "getvalue", "(", ")", "\n", "img", "=", "Image", ".", "open", "(", "BytesIO", "(", "buf", ")", ")", "\n", "return", "nd", ".", "array", "(", "np", ".", "asarray", "(", "img", ",", "'float32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.next": [[189, 261], ["mxnet.ndarray.empty", "mxnet.io.DataBatch", "image_iter.FaceImageIter.reset", "mxnet.ndarray.empty", "mxnet.ndarray.empty", "image_iter.FaceImageIter.next_sample", "label[].reshape", "image_iter.FaceImageIter.imdecode", "mxnet.image.resize_short", "random.randint", "image_iter.FaceImageIter.astype", "image_iter.FaceImageIter.color_aug", "image_iter.FaceImageIter.astype", "random.randint", "image_iter.FaceImageIter.check_valid_image", "image_iter.FaceImageIter.postprocess_data", "mxnet.ndarray.flip", "mxnet.ndarray.flip", "random.randint", "random.randint", "random.randint", "max", "min", "max", "min", "logging.debug", "image_iter.FaceImageIter.compress_aug", "str", "mxnet.ndarray.array"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIterList.reset", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.next_sample", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.imdecode", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.color_aug", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.check_valid_image", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.postprocess_data", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.compress_aug"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_init", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "self", ".", "is_init", "=", "True", "\n", "", "\"\"\"Returns the next batch of data.\"\"\"", "\n", "#print('in next', self.cur, self.labelcur)", "\n", "self", ".", "nbatch", "+=", "1", "\n", "batch_size", "=", "self", ".", "batch_size", "\n", "c", ",", "h", ",", "w", "=", "self", ".", "data_shape", "\n", "batch_data", "=", "nd", ".", "empty", "(", "(", "batch_size", ",", "c", ",", "h", ",", "w", ")", ")", "\n", "if", "self", ".", "provide_label", "is", "not", "None", ":", "\n", "            ", "batch_label", "=", "nd", ".", "empty", "(", "self", ".", "provide_label", "[", "0", "]", "[", "1", "]", ")", "\n", "batch_mask", "=", "nd", ".", "empty", "(", "(", "batch_size", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "", "i", "=", "0", "\n", "try", ":", "\n", "            ", "while", "i", "<", "batch_size", ":", "\n", "                ", "label", ",", "s", ",", "bbox", ",", "landmark", "=", "self", ".", "next_sample", "(", ")", "\n", "_label_mask", "=", "label", "[", "2", ":", "]", ".", "reshape", "(", "(", "1", ",", "h", ",", "w", ")", ")", "\n", "_data", "=", "self", ".", "imdecode", "(", "s", ")", "\n", "if", "_data", ".", "shape", "[", "0", "]", "!=", "self", ".", "data_shape", "[", "1", "]", ":", "\n", "                    ", "_data", "=", "mx", ".", "image", ".", "resize_short", "(", "_data", ",", "self", ".", "data_shape", "[", "1", "]", ")", "\n", "", "if", "self", ".", "rand_mirror", ":", "\n", "                    ", "_rd", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "_rd", "==", "1", ":", "\n", "                        ", "_data", "=", "mx", ".", "ndarray", ".", "flip", "(", "data", "=", "_data", ",", "axis", "=", "1", ")", "\n", "_label_mask", "=", "mx", ".", "ndarray", ".", "flip", "(", "data", "=", "nd", ".", "array", "(", "_label_mask", ")", ",", "axis", "=", "2", ")", "\n", "", "", "if", "self", ".", "color_jittering", ">", "0", ":", "\n", "                    ", "if", "self", ".", "color_jittering", ">", "1", ":", "\n", "                        ", "_rd", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "_rd", "==", "1", ":", "\n", "                            ", "_data", "=", "self", ".", "compress_aug", "(", "_data", ")", "\n", "#print('do color aug')", "\n", "", "", "_data", "=", "_data", ".", "astype", "(", "'float32'", ",", "copy", "=", "False", ")", "\n", "#print(_data.__class__)", "\n", "_data", "=", "self", ".", "color_aug", "(", "_data", ",", "0.125", ")", "\n", "", "if", "self", ".", "nd_mean", "is", "not", "None", ":", "\n", "                    ", "_data", "=", "_data", ".", "astype", "(", "'float32'", ",", "copy", "=", "False", ")", "\n", "_data", "-=", "self", ".", "nd_mean", "\n", "_data", "*=", "0.0078125", "\n", "", "if", "self", ".", "cutoff", ">", "0", ":", "\n", "                    ", "_rd", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "_rd", "==", "1", ":", "\n", "#print('do cutoff aug', self.cutoff)", "\n", "                        ", "centerh", "=", "random", ".", "randint", "(", "0", ",", "_data", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "centerw", "=", "random", ".", "randint", "(", "0", ",", "_data", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "half", "=", "self", ".", "cutoff", "//", "2", "\n", "starth", "=", "max", "(", "0", ",", "centerh", "-", "half", ")", "\n", "endh", "=", "min", "(", "_data", ".", "shape", "[", "0", "]", ",", "centerh", "+", "half", ")", "\n", "startw", "=", "max", "(", "0", ",", "centerw", "-", "half", ")", "\n", "endw", "=", "min", "(", "_data", ".", "shape", "[", "1", "]", ",", "centerw", "+", "half", ")", "\n", "#print(starth, endh, startw, endw, _data.shape)", "\n", "_data", "[", "starth", ":", "endh", ",", "startw", ":", "endw", ",", ":", "]", "=", "128", "\n", "", "", "data", "=", "[", "_data", "]", "\n", "try", ":", "\n", "                    ", "self", ".", "check_valid_image", "(", "data", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Invalid image, skipping:  %s'", ",", "str", "(", "e", ")", ")", "\n", "continue", "\n", "#print('aa',data[0].shape)", "\n", "#data = self.augmentation_transform(data)", "\n", "#print('bb',data[0].shape)", "\n", "", "for", "datum", "in", "data", ":", "\n", "                    ", "assert", "i", "<", "batch_size", ",", "'Batch size must be multiples of augmenter output length'", "\n", "batch_data", "[", "i", "]", "[", ":", "]", "=", "self", ".", "postprocess_data", "(", "datum", ")", "\n", "batch_label", "[", "i", "]", "[", ":", "]", "=", "label", "[", "0", "]", "\n", "batch_mask", "[", "i", "]", "[", ":", "]", "=", "_label_mask", "\n", "i", "+=", "1", "\n", "", "", "", "except", "StopIteration", ":", "\n", "            ", "if", "i", "<", "batch_size", ":", "\n", "                ", "raise", "StopIteration", "\n", "\n", "", "", "return", "io", ".", "DataBatch", "(", "[", "batch_data", "]", ",", "[", "batch_label", ",", "batch_mask", "]", ",", "batch_size", "-", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.check_data_shape": [[262, 270], ["ValueError", "ValueError", "len"], "methods", ["None"], ["", "def", "check_data_shape", "(", "self", ",", "data_shape", ")", ":", "\n", "        ", "\"\"\"Checks if the input data shape is valid\"\"\"", "\n", "if", "not", "len", "(", "data_shape", ")", "==", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'data_shape should have length 3, with dimensions CxHxW'", ")", "\n", "", "if", "not", "data_shape", "[", "0", "]", "==", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'This iterator expects inputs to have 3 channels.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.check_valid_image": [[271, 275], ["len", "RuntimeError"], "methods", ["None"], ["", "", "def", "check_valid_image", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Checks if the input data is valid\"\"\"", "\n", "if", "len", "(", "data", "[", "0", "]", ".", "shape", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Data shape is wrong'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.imdecode": [[276, 281], ["mxnet.image.imdecode"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.imdecode"], ["", "", "def", "imdecode", "(", "self", ",", "s", ")", ":", "\n", "        ", "\"\"\"Decodes a string or byte string to an NDArray.\n        See mx.img.imdecode for more details.\"\"\"", "\n", "img", "=", "mx", ".", "image", ".", "imdecode", "(", "s", ")", "#mx.ndarray", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.read_image": [[282, 292], ["open", "fin.read", "os.path.join"], "methods", ["None"], ["", "def", "read_image", "(", "self", ",", "fname", ")", ":", "\n", "        ", "\"\"\"Reads an input image `fname` and returns the decoded raw bytes.\n\n        Example usage:\n        ----------\n        >>> dataIter.read_image('Face.jpg') # returns decoded raw bytes.\n        \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path_root", ",", "fname", ")", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "img", "=", "fin", ".", "read", "(", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.augmentation_transform": [[293, 298], ["aug"], "methods", ["None"], ["", "def", "augmentation_transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Transforms input data with specified augmentation.\"\"\"", "\n", "for", "aug", "in", "self", ".", "auglist", ":", "\n", "            ", "data", "=", "[", "ret", "for", "src", "in", "data", "for", "ret", "in", "aug", "(", "src", ")", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.postprocess_data": [[299, 302], ["mxnet.ndarray.transpose"], "methods", ["None"], ["", "def", "postprocess_data", "(", "self", ",", "datum", ")", ":", "\n", "        ", "\"\"\"Final postprocessing step before image is loaded into the batch.\"\"\"", "\n", "return", "nd", ".", "transpose", "(", "datum", ",", "axes", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIterList.__init__": [[305, 311], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "iter_list", ")", ":", "\n", "        ", "assert", "len", "(", "iter_list", ")", ">", "0", "\n", "self", ".", "provide_data", "=", "iter_list", "[", "0", "]", ".", "provide_data", "\n", "self", ".", "provide_label", "=", "iter_list", "[", "0", "]", ".", "provide_label", "\n", "self", ".", "iter_list", "=", "iter_list", "\n", "self", ".", "cur_iter", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIterList.reset": [[312, 314], ["image_iter.FaceImageIterList.cur_iter.reset"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIterList.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_iter", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIterList.next": [[315, 324], ["random.choice", "image_iter.FaceImageIterList.cur_iter.next", "image_iter.FaceImageIterList.cur_iter.reset"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIterList.next", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIterList.reset"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_iter", "=", "random", ".", "choice", "(", "self", ".", "iter_list", ")", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "ret", "=", "self", ".", "cur_iter", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "self", ".", "cur_iter", ".", "reset", "(", ")", "\n", "continue", "\n", "", "return", "ret", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.LFold.__init__": [[48, 52], ["sklearn.model_selection.KFold"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_splits", "=", "2", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "n_splits", "=", "n_splits", "\n", "if", "self", ".", "n_splits", ">", "1", ":", "\n", "            ", "self", ".", "k_fold", "=", "KFold", "(", "n_splits", "=", "n_splits", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.LFold.split": [[53, 58], ["verification.LFold.k_fold.split"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split"], ["", "", "def", "split", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "self", ".", "n_splits", ">", "1", ":", "\n", "            ", "return", "self", ".", "k_fold", ".", "split", "(", "indices", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "(", "indices", ",", "indices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.calculate_roc": [[60, 121], ["min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "len", "numpy.subtract", "numpy.sum", "verification.LFold.split", "numpy.zeros", "enumerate", "numpy.argmax", "enumerate", "verification.calculate_accuracy", "numpy.square", "print", "numpy.concatenate", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "sklearn.decomposition.PCA.transform", "sklearn.decomposition.PCA.transform", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.subtract", "numpy.sum", "verification.calculate_accuracy", "verification.calculate_accuracy", "numpy.square"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy"], ["", "", "", "def", "calculate_roc", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "actual_issame", ",", "\n", "nrof_folds", "=", "10", ",", "\n", "pca", "=", "0", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "tprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "fprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "accuracy", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ")", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "#print('pca', pca)", "\n", "\n", "if", "pca", "==", "0", ":", "\n", "        ", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "#print('train_set', train_set)", "\n", "#print('test_set', test_set)", "\n", "        ", "if", "pca", ">", "0", ":", "\n", "            ", "print", "(", "'doing pca on'", ",", "fold_idx", ")", "\n", "embed1_train", "=", "embeddings1", "[", "train_set", "]", "\n", "embed2_train", "=", "embeddings2", "[", "train_set", "]", "\n", "_embed_train", "=", "np", ".", "concatenate", "(", "(", "embed1_train", ",", "embed2_train", ")", ",", "axis", "=", "0", ")", "\n", "#print(_embed_train.shape)", "\n", "pca_model", "=", "PCA", "(", "n_components", "=", "pca", ")", "\n", "pca_model", ".", "fit", "(", "_embed_train", ")", "\n", "embed1", "=", "pca_model", ".", "transform", "(", "embeddings1", ")", "\n", "embed2", "=", "pca_model", ".", "transform", "(", "embeddings2", ")", "\n", "embed1", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embed1", ")", "\n", "embed2", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embed2", ")", "\n", "#print(embed1.shape, embed2.shape)", "\n", "diff", "=", "np", ".", "subtract", "(", "embed1", ",", "embed2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "# Find the best threshold for the fold", "\n", "", "acc_train", "=", "np", ".", "zeros", "(", "(", "nrof_thresholds", ")", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "_", ",", "acc_train", "[", "threshold_idx", "]", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "best_threshold_index", "=", "np", ".", "argmax", "(", "acc_train", ")", "\n", "#print('threshold', thresholds[best_threshold_index])", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "tprs", "[", "fold_idx", ",", "\n", "threshold_idx", "]", ",", "fprs", "[", "fold_idx", ",", "\n", "threshold_idx", "]", ",", "_", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "", "_", ",", "_", ",", "accuracy", "[", "fold_idx", "]", "=", "calculate_accuracy", "(", "\n", "thresholds", "[", "best_threshold_index", "]", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "tpr", "=", "np", ".", "mean", "(", "tprs", ",", "0", ")", "\n", "fpr", "=", "np", ".", "mean", "(", "fprs", ",", "0", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.calculate_accuracy": [[123, 136], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "float", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "float", "float", "float", "float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "\n", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "\n", "tpr", "=", "0", "if", "(", "tp", "+", "fn", "==", "0", ")", "else", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fpr", "=", "0", "if", "(", "fp", "+", "tn", "==", "0", ")", "else", "float", "(", "fp", ")", "/", "float", "(", "fp", "+", "tn", ")", "\n", "acc", "=", "float", "(", "tp", "+", "tn", ")", "/", "dist", ".", "size", "\n", "return", "tpr", ",", "fpr", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.calculate_val": [[138, 177], ["min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.subtract", "numpy.sum", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "numpy.std", "len", "numpy.square", "verification.LFold.split", "numpy.zeros", "enumerate", "verification.calculate_val_far", "verification.calculate_val_far", "numpy.max", "scipy.interpolate.interp1d", "interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_val_far", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_val_far"], ["", "def", "calculate_val", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "actual_issame", ",", "\n", "far_target", ",", "\n", "nrof_folds", "=", "10", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "val", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "far", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "# Find the threshold that gives FAR = far_target", "\n", "        ", "far_train", "=", "np", ".", "zeros", "(", "nrof_thresholds", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "far_train", "[", "threshold_idx", "]", "=", "calculate_val_far", "(", "\n", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "if", "np", ".", "max", "(", "far_train", ")", ">=", "far_target", ":", "\n", "            ", "f", "=", "interpolate", ".", "interp1d", "(", "far_train", ",", "thresholds", ",", "kind", "=", "'slinear'", ")", "\n", "threshold", "=", "f", "(", "far_target", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "\n", "", "val", "[", "fold_idx", "]", ",", "far", "[", "fold_idx", "]", "=", "calculate_val_far", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "val_mean", "=", "np", ".", "mean", "(", "val", ")", "\n", "far_mean", "=", "np", ".", "mean", "(", "far", ")", "\n", "val_std", "=", "np", ".", "std", "(", "val", ")", "\n", "return", "val_mean", ",", "val_std", ",", "far_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.calculate_val_far": [[179, 191], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_not", "float", "float", "float", "float", "numpy.logical_not"], "function", ["None"], ["", "def", "calculate_val_far", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "true_accept", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "false_accept", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "n_same", "=", "np", ".", "sum", "(", "actual_issame", ")", "\n", "n_diff", "=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "actual_issame", ")", ")", "\n", "#print(true_accept, false_accept)", "\n", "#print(n_same, n_diff)", "\n", "val", "=", "float", "(", "true_accept", ")", "/", "float", "(", "n_same", ")", "\n", "far", "=", "float", "(", "false_accept", ")", "/", "float", "(", "n_diff", ")", "\n", "return", "val", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.evaluate": [[193, 212], ["numpy.arange", "verification.calculate_roc", "numpy.arange", "verification.calculate_val", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_roc", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_val"], ["", "def", "evaluate", "(", "embeddings", ",", "actual_issame", ",", "nrof_folds", "=", "10", ",", "pca", "=", "0", ")", ":", "\n", "# Calculate evaluation metrics", "\n", "    ", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.01", ")", "\n", "embeddings1", "=", "embeddings", "[", "0", ":", ":", "2", "]", "\n", "embeddings2", "=", "embeddings", "[", "1", ":", ":", "2", "]", "\n", "tpr", ",", "fpr", ",", "accuracy", "=", "calculate_roc", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "\n", "nrof_folds", "=", "nrof_folds", ",", "\n", "pca", "=", "pca", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.001", ")", "\n", "val", ",", "val_std", ",", "far", "=", "calculate_val", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "\n", "1e-3", ",", "\n", "nrof_folds", "=", "nrof_folds", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.load_bin": [[214, 247], ["range", "print", "mxnet.ndarray.empty", "data_list.append", "mxnet.image.imdecode", "mxnet.ndarray.transpose", "open", "pickle.load", "len", "print", "open", "pickle.load", "mxnet.ndarray.flip", "len"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.imdecode"], ["", "def", "load_bin", "(", "path", ",", "image_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bins", ",", "issame_list", "=", "pickle", ".", "load", "(", "f", ")", "#py2", "\n", "", "", "except", "UnicodeDecodeError", "as", "e", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bins", ",", "issame_list", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "#py3", "\n", "", "", "data_list", "=", "[", "]", "\n", "for", "flip", "in", "[", "0", ",", "1", "]", ":", "\n", "        ", "data", "=", "nd", ".", "empty", "(", "\n", "(", "len", "(", "issame_list", ")", "*", "2", ",", "3", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "\n", "data_list", ".", "append", "(", "data", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "issame_list", ")", "*", "2", ")", ":", "\n", "        ", "_bin", "=", "bins", "[", "i", "]", "\n", "img", "=", "mx", ".", "image", ".", "imdecode", "(", "_bin", ")", "\n", "# if img.shape[1] != image_size[0]:", "\n", "#     img = mx.image.resize_short(img, image_size[0])", "\n", "# print(img.shape)", "\n", "# img1 = img[0:112,:,:]", "\n", "# img2 = img[112:224,:,:]", "\n", "# img1 = nd.transpose(img1, axes=(2, 0, 1))", "\n", "# img2 = nd.transpose(img2, axes=(2, 0, 1))", "\n", "img", "=", "nd", ".", "transpose", "(", "img", ",", "axes", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "for", "flip", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "if", "flip", "==", "1", ":", "\n", "# img1 = mx.ndarray.flip(data=img1, axis=2)", "\n", "# img2 = mx.ndarray.flip(data=img2, axis=2)", "\n", "                ", "img", "=", "mx", ".", "ndarray", ".", "flip", "(", "data", "=", "img", ",", "axis", "=", "2", ")", "\n", "", "data_list", "[", "flip", "]", "[", "i", "]", "[", ":", "]", "=", "img", "#np.concatenate((img1,img2))", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'loading bin'", ",", "i", ")", "\n", "", "", "print", "(", "data_list", "[", "0", "]", ".", "shape", ")", "\n", "return", "(", "data_list", ",", "issame_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.test": [[249, 336], ["print", "range", "embeddings_list[].copy", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "print", "print", "verification.evaluate", "mxnet.ndarray.array", "mxnet.ndarray.ones", "mxnet.ndarray.ones", "len", "embeddings_list.append", "range", "numpy.mean", "numpy.std", "min", "mxnet.ndarray.slice_axis", "datetime.datetime.now", "model.forward", "model.get_outputs", "net_out[].asnumpy", "datetime.datetime.now", "diff.total_seconds", "numpy.linalg.norm", "mxnet.io.DataBatch", "mxnet.io.DataBatch", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.evaluate"], ["", "def", "test", "(", "data_set", ",", "\n", "mx_model", ",", "\n", "batch_size", ",", "\n", "nfolds", "=", "10", ",", "\n", "data_extra", "=", "None", ",", "\n", "label_shape", "=", "None", ")", ":", "\n", "    ", "print", "(", "'testing verification..'", ")", "\n", "data_list", "=", "data_set", "[", "0", "]", "\n", "issame_list", "=", "data_set", "[", "1", "]", "\n", "model", "=", "mx_model", "\n", "embeddings_list", "=", "[", "]", "\n", "if", "data_extra", "is", "not", "None", ":", "\n", "        ", "_data_extra", "=", "nd", ".", "array", "(", "data_extra", ")", "\n", "", "time_consumed", "=", "0.0", "\n", "if", "label_shape", "is", "None", ":", "\n", "        ", "_label", "=", "nd", ".", "ones", "(", "(", "batch_size", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "_label", "=", "nd", ".", "ones", "(", "label_shape", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "embeddings", "=", "None", "\n", "ba", "=", "0", "\n", "while", "ba", "<", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bb", "=", "min", "(", "ba", "+", "batch_size", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "count", "=", "bb", "-", "ba", "\n", "_data", "=", "nd", ".", "slice_axis", "(", "data", ",", "axis", "=", "0", ",", "begin", "=", "bb", "-", "batch_size", ",", "end", "=", "bb", ")", "\n", "#print(_data.shape, _label.shape)", "\n", "time0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "if", "data_extra", "is", "None", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", ")", ",", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", "_data_extra", ")", ",", "\n", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "net_out", "=", "model", ".", "get_outputs", "(", ")", "\n", "#_arg, _aux = model.get_params()", "\n", "#__arg = {}", "\n", "#for k,v in _arg.iteritems():", "\n", "#  __arg[k] = v.as_in_context(_ctx)", "\n", "#_arg = __arg", "\n", "#_arg[\"data\"] = _data.as_in_context(_ctx)", "\n", "#_arg[\"softmax_label\"] = _label.as_in_context(_ctx)", "\n", "#for k,v in _arg.iteritems():", "\n", "#  print(k,v.context)", "\n", "#exe = sym.bind(_ctx, _arg ,args_grad=None, grad_req=\"null\", aux_states=_aux)", "\n", "#exe.forward(is_train=False)", "\n", "#net_out = exe.outputs", "\n", "_embeddings", "=", "net_out", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "time_now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "diff", "=", "time_now", "-", "time0", "\n", "time_consumed", "+=", "diff", ".", "total_seconds", "(", ")", "\n", "#print(_embeddings.shape)", "\n", "if", "embeddings", "is", "None", ":", "\n", "                ", "embeddings", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "_embeddings", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "embeddings", "[", "ba", ":", "bb", ",", ":", "]", "=", "_embeddings", "[", "(", "batch_size", "-", "count", ")", ":", ",", ":", "]", "\n", "ba", "=", "bb", "\n", "", "embeddings_list", ".", "append", "(", "embeddings", ")", "\n", "\n", "", "_xnorm", "=", "0.0", "\n", "_xnorm_cnt", "=", "0", "\n", "for", "embed", "in", "embeddings_list", ":", "\n", "        ", "for", "i", "in", "range", "(", "embed", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "_em", "=", "embed", "[", "i", "]", "\n", "_norm", "=", "np", ".", "linalg", ".", "norm", "(", "_em", ")", "\n", "#print(_em.shape, _norm)", "\n", "_xnorm", "+=", "_norm", "\n", "_xnorm_cnt", "+=", "1", "\n", "", "", "_xnorm", "/=", "_xnorm_cnt", "\n", "\n", "embeddings", "=", "embeddings_list", "[", "0", "]", ".", "copy", "(", ")", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "acc1", "=", "0.0", "\n", "std1", "=", "0.0", "\n", "#_, _, accuracy, val, val_std, far = evaluate(embeddings, issame_list, nrof_folds=10)", "\n", "#acc1, std1 = np.mean(accuracy), np.std(accuracy)", "\n", "\n", "#print('Validation rate: %2.5f+-%2.5f @ FAR=%2.5f' % (val, val_std, far))", "\n", "#embeddings = np.concatenate(embeddings_list, axis=1)", "\n", "embeddings", "=", "embeddings_list", "[", "0", "]", "+", "embeddings_list", "[", "1", "]", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "print", "(", "embeddings", ".", "shape", ")", "\n", "print", "(", "'infer time'", ",", "time_consumed", ")", "\n", "_", ",", "_", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "=", "evaluate", "(", "embeddings", ",", "\n", "issame_list", ",", "\n", "nrof_folds", "=", "nfolds", ")", "\n", "acc2", ",", "std2", "=", "np", ".", "mean", "(", "accuracy", ")", ",", "np", ".", "std", "(", "accuracy", ")", "\n", "return", "acc1", ",", "std1", ",", "acc2", ",", "std2", ",", "_xnorm", ",", "embeddings_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.test_badcase": [[338, 539], ["print", "range", "sklearn.preprocessing.normalize", "numpy.arange", "numpy.asarray", "min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.subtract", "numpy.sum", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "sorted", "sorted", "print", "print", "mxnet.ndarray.array", "mxnet.ndarray.ones", "mxnet.ndarray.ones", "len", "embeddings_list.append", "len", "numpy.square", "verification.LFold.split", "numpy.zeros", "enumerate", "numpy.argmax", "enumerate", "verification.calculate_accuracy", "len", "len", "os.path.exists", "os.makedirs", "len", "int", "min", "os.path.join", "numpy.zeros", "enumerate", "cv2.putText", "cv2.imwrite", "min", "mxnet.ndarray.slice_axis", "datetime.datetime.now", "model.forward", "model.get_outputs", "net_out[].asnumpy", "datetime.datetime.now", "np.subtract.total_seconds", "verification.calculate_accuracy", "verification.calculate_accuracy", "len", "math.ceil", "name.startswith", "item[].startswith", "len", "out[].copy", "out[].copy", "numpy.concatenate", "cv2.putText", "mxnet.io.DataBatch", "mxnet.io.DataBatch", "numpy.zeros", "print", "cv2.imread", "data[].asnumpy().transpose", "data[].asnumpy().transpose", "sorted.append", "sorted.append", "len", "data[].asnumpy", "data[].asnumpy"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy"], ["", "def", "test_badcase", "(", "data_set", ",", "\n", "mx_model", ",", "\n", "batch_size", ",", "\n", "name", "=", "''", ",", "\n", "data_extra", "=", "None", ",", "\n", "label_shape", "=", "None", ")", ":", "\n", "    ", "print", "(", "'testing verification badcase..'", ")", "\n", "data_list", "=", "data_set", "[", "0", "]", "\n", "issame_list", "=", "data_set", "[", "1", "]", "\n", "model", "=", "mx_model", "\n", "embeddings_list", "=", "[", "]", "\n", "if", "data_extra", "is", "not", "None", ":", "\n", "        ", "_data_extra", "=", "nd", ".", "array", "(", "data_extra", ")", "\n", "", "time_consumed", "=", "0.0", "\n", "if", "label_shape", "is", "None", ":", "\n", "        ", "_label", "=", "nd", ".", "ones", "(", "(", "batch_size", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "_label", "=", "nd", ".", "ones", "(", "label_shape", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "embeddings", "=", "None", "\n", "ba", "=", "0", "\n", "while", "ba", "<", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bb", "=", "min", "(", "ba", "+", "batch_size", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "count", "=", "bb", "-", "ba", "\n", "_data", "=", "nd", ".", "slice_axis", "(", "data", ",", "axis", "=", "0", ",", "begin", "=", "bb", "-", "batch_size", ",", "end", "=", "bb", ")", "\n", "#print(_data.shape, _label.shape)", "\n", "time0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "if", "data_extra", "is", "None", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", ")", ",", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", "_data_extra", ")", ",", "\n", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "net_out", "=", "model", ".", "get_outputs", "(", ")", "\n", "_embeddings", "=", "net_out", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "time_now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "diff", "=", "time_now", "-", "time0", "\n", "time_consumed", "+=", "diff", ".", "total_seconds", "(", ")", "\n", "if", "embeddings", "is", "None", ":", "\n", "                ", "embeddings", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "_embeddings", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "embeddings", "[", "ba", ":", "bb", ",", ":", "]", "=", "_embeddings", "[", "(", "batch_size", "-", "count", ")", ":", ",", ":", "]", "\n", "ba", "=", "bb", "\n", "", "embeddings_list", ".", "append", "(", "embeddings", ")", "\n", "", "embeddings", "=", "embeddings_list", "[", "0", "]", "+", "embeddings_list", "[", "1", "]", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.01", ")", "\n", "actual_issame", "=", "np", ".", "asarray", "(", "issame_list", ")", "\n", "nrof_folds", "=", "10", "\n", "embeddings1", "=", "embeddings", "[", "0", ":", ":", "2", "]", "\n", "embeddings2", "=", "embeddings", "[", "1", ":", ":", "2", "]", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "tprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "fprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "accuracy", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ")", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "data", "=", "data_list", "[", "0", "]", "\n", "\n", "pouts", "=", "[", "]", "\n", "nouts", "=", "[", "]", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "# Find the best threshold for the fold", "\n", "        ", "acc_train", "=", "np", ".", "zeros", "(", "(", "nrof_thresholds", ")", ")", "\n", "#print(train_set)", "\n", "#print(train_set.__class__)", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "p2", "=", "dist", "[", "train_set", "]", "\n", "p3", "=", "actual_issame", "[", "train_set", "]", "\n", "_", ",", "_", ",", "acc_train", "[", "threshold_idx", "]", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "p2", ",", "p3", ")", "\n", "", "best_threshold_index", "=", "np", ".", "argmax", "(", "acc_train", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "tprs", "[", "fold_idx", ",", "\n", "threshold_idx", "]", ",", "fprs", "[", "fold_idx", ",", "\n", "threshold_idx", "]", ",", "_", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "", "_", ",", "_", ",", "accuracy", "[", "fold_idx", "]", "=", "calculate_accuracy", "(", "\n", "thresholds", "[", "best_threshold_index", "]", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "best_threshold", "=", "thresholds", "[", "best_threshold_index", "]", "\n", "for", "iid", "in", "test_set", ":", "\n", "            ", "ida", "=", "iid", "*", "2", "\n", "idb", "=", "ida", "+", "1", "\n", "asame", "=", "actual_issame", "[", "iid", "]", "\n", "_dist", "=", "dist", "[", "iid", "]", "\n", "violate", "=", "_dist", "-", "best_threshold", "\n", "if", "not", "asame", ":", "\n", "                ", "violate", "*=", "-", "1.0", "\n", "", "if", "violate", ">", "0.0", ":", "\n", "                ", "imga", "=", "data", "[", "ida", "]", ".", "asnumpy", "(", ")", ".", "transpose", "(", "\n", "(", "1", ",", "2", ",", "0", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "#to bgr", "\n", "imgb", "=", "data", "[", "idb", "]", ".", "asnumpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "#print(imga.shape, imgb.shape, violate, asame, _dist)", "\n", "if", "asame", ":", "\n", "                    ", "pouts", ".", "append", "(", "(", "imga", ",", "imgb", ",", "_dist", ",", "best_threshold", ",", "ida", ")", ")", "\n", "", "else", ":", "\n", "                    ", "nouts", ".", "append", "(", "(", "imga", ",", "imgb", ",", "_dist", ",", "best_threshold", ",", "ida", ")", ")", "\n", "\n", "", "", "", "", "tpr", "=", "np", ".", "mean", "(", "tprs", ",", "0", ")", "\n", "fpr", "=", "np", ".", "mean", "(", "fprs", ",", "0", ")", "\n", "acc", "=", "np", ".", "mean", "(", "accuracy", ")", "\n", "pouts", "=", "sorted", "(", "pouts", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ",", "reverse", "=", "True", ")", "\n", "nouts", "=", "sorted", "(", "nouts", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ",", "reverse", "=", "False", ")", "\n", "print", "(", "len", "(", "pouts", ")", ",", "len", "(", "nouts", ")", ")", "\n", "print", "(", "'acc'", ",", "acc", ")", "\n", "gap", "=", "10", "\n", "image_shape", "=", "(", "112", ",", "224", ",", "3", ")", "\n", "out_dir", "=", "\"./badcases\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "if", "len", "(", "nouts", ")", ">", "0", ":", "\n", "        ", "threshold", "=", "nouts", "[", "0", "]", "[", "3", "]", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "pouts", "[", "-", "1", "]", "[", "3", "]", "\n", "\n", "", "for", "item", "in", "[", "(", "pouts", ",", "'positive(false_negative).png'", ")", ",", "\n", "(", "nouts", ",", "'negative(false_positive).png'", ")", "]", ":", "\n", "        ", "cols", "=", "4", "\n", "rows", "=", "8000", "\n", "outs", "=", "item", "[", "0", "]", "\n", "if", "len", "(", "outs", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "#if len(outs)==9:", "\n", "#  cols = 3", "\n", "#  rows = 3", "\n", "\n", "", "_rows", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "outs", ")", "/", "cols", ")", ")", "\n", "rows", "=", "min", "(", "rows", ",", "_rows", ")", "\n", "hack", "=", "{", "}", "\n", "\n", "if", "name", ".", "startswith", "(", "'cfp'", ")", "and", "item", "[", "1", "]", ".", "startswith", "(", "'pos'", ")", ":", "\n", "            ", "hack", "=", "{", "\n", "0", ":", "'manual/238_13.jpg.jpg'", ",", "\n", "6", ":", "'manual/088_14.jpg.jpg'", ",", "\n", "10", ":", "'manual/470_14.jpg.jpg'", ",", "\n", "25", ":", "'manual/238_13.jpg.jpg'", ",", "\n", "28", ":", "'manual/143_11.jpg.jpg'", "\n", "}", "\n", "\n", "", "filename", "=", "item", "[", "1", "]", "\n", "if", "len", "(", "name", ")", ">", "0", ":", "\n", "            ", "filename", "=", "name", "+", "\"_\"", "+", "filename", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "filename", ")", "\n", "img", "=", "np", ".", "zeros", "(", "(", "image_shape", "[", "0", "]", "*", "rows", "+", "20", ",", "image_shape", "[", "1", "]", "*", "cols", "+", "\n", "(", "cols", "-", "1", ")", "*", "gap", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "[", ":", ",", ":", ",", ":", "]", "=", "255", "\n", "text_color", "=", "(", "0", ",", "0", ",", "153", ")", "\n", "text_color", "=", "(", "255", ",", "178", ",", "102", ")", "\n", "text_color", "=", "(", "153", ",", "255", ",", "51", ")", "\n", "for", "outi", ",", "out", "in", "enumerate", "(", "outs", ")", ":", "\n", "            ", "row", "=", "outi", "//", "cols", "\n", "col", "=", "outi", "%", "cols", "\n", "if", "row", "==", "rows", ":", "\n", "                ", "break", "\n", "", "imga", "=", "out", "[", "0", "]", ".", "copy", "(", ")", "\n", "imgb", "=", "out", "[", "1", "]", ".", "copy", "(", ")", "\n", "if", "outi", "in", "hack", ":", "\n", "                ", "idx", "=", "out", "[", "4", "]", "\n", "print", "(", "'noise idx'", ",", "idx", ")", "\n", "aa", "=", "hack", "[", "outi", "]", "\n", "imgb", "=", "cv2", ".", "imread", "(", "aa", ")", "\n", "#if aa==1:", "\n", "#  imgb = cv2.transpose(imgb)", "\n", "#  imgb = cv2.flip(imgb, 1)", "\n", "#elif aa==3:", "\n", "#  imgb = cv2.transpose(imgb)", "\n", "#  imgb = cv2.flip(imgb, 0)", "\n", "#else:", "\n", "#  for ii in range(2):", "\n", "#    imgb = cv2.transpose(imgb)", "\n", "#    imgb = cv2.flip(imgb, 1)", "\n", "", "dist", "=", "out", "[", "2", "]", "\n", "_img", "=", "np", ".", "concatenate", "(", "(", "imga", ",", "imgb", ")", ",", "axis", "=", "1", ")", "\n", "k", "=", "\"%.3f\"", "%", "dist", "\n", "#print(k)", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "cv2", ".", "putText", "(", "_img", ",", "k", ",", "(", "80", ",", "image_shape", "[", "0", "]", "//", "2", "+", "7", ")", ",", "font", ",", "0.6", ",", "\n", "text_color", ",", "2", ")", "\n", "#_filename = filename+\"_%d.png\"%outi", "\n", "#cv2.imwrite(_filename, _img)", "\n", "img", "[", "row", "*", "image_shape", "[", "0", "]", ":", "(", "row", "+", "1", ")", "*", "image_shape", "[", "0", "]", ",", "\n", "(", "col", "*", "image_shape", "[", "1", "]", "+", "\n", "gap", "*", "col", ")", ":", "(", "(", "col", "+", "1", ")", "*", "image_shape", "[", "1", "]", "+", "gap", "*", "col", ")", ",", ":", "]", "=", "_img", "\n", "#threshold = outs[0][3]", "\n", "", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "k", "=", "\"threshold: %.3f\"", "%", "threshold", "\n", "cv2", ".", "putText", "(", "img", ",", "k", ",", "(", "img", ".", "shape", "[", "1", "]", "//", "2", "-", "70", ",", "img", ".", "shape", "[", "0", "]", "-", "5", ")", ",", "font", ",", "\n", "0.6", ",", "text_color", ",", "2", ")", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.verification.dumpR": [[541, 593], ["print", "range", "sklearn.preprocessing.normalize", "numpy.asarray", "os.path.join", "mxnet.ndarray.array", "mxnet.ndarray.ones", "mxnet.ndarray.ones", "len", "embeddings_list.append", "open", "pickle.dump", "min", "mxnet.ndarray.slice_axis", "datetime.datetime.now", "model.forward", "model.get_outputs", "net_out[].asnumpy", "datetime.datetime.now", "diff.total_seconds", "mxnet.io.DataBatch", "mxnet.io.DataBatch", "numpy.zeros"], "function", ["None"], ["", "", "def", "dumpR", "(", "data_set", ",", "\n", "mx_model", ",", "\n", "batch_size", ",", "\n", "name", "=", "''", ",", "\n", "data_extra", "=", "None", ",", "\n", "label_shape", "=", "None", ")", ":", "\n", "    ", "print", "(", "'dump verification embedding..'", ")", "\n", "data_list", "=", "data_set", "[", "0", "]", "\n", "issame_list", "=", "data_set", "[", "1", "]", "\n", "model", "=", "mx_model", "\n", "embeddings_list", "=", "[", "]", "\n", "if", "data_extra", "is", "not", "None", ":", "\n", "        ", "_data_extra", "=", "nd", ".", "array", "(", "data_extra", ")", "\n", "", "time_consumed", "=", "0.0", "\n", "if", "label_shape", "is", "None", ":", "\n", "        ", "_label", "=", "nd", ".", "ones", "(", "(", "batch_size", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "_label", "=", "nd", ".", "ones", "(", "label_shape", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "embeddings", "=", "None", "\n", "ba", "=", "0", "\n", "while", "ba", "<", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bb", "=", "min", "(", "ba", "+", "batch_size", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "count", "=", "bb", "-", "ba", "\n", "_data", "=", "nd", ".", "slice_axis", "(", "data", ",", "axis", "=", "0", ",", "begin", "=", "bb", "-", "batch_size", ",", "end", "=", "bb", ")", "\n", "#print(_data.shape, _label.shape)", "\n", "time0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "if", "data_extra", "is", "None", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", ")", ",", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", "_data_extra", ")", ",", "\n", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "net_out", "=", "model", ".", "get_outputs", "(", ")", "\n", "_embeddings", "=", "net_out", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "time_now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "diff", "=", "time_now", "-", "time0", "\n", "time_consumed", "+=", "diff", ".", "total_seconds", "(", ")", "\n", "if", "embeddings", "is", "None", ":", "\n", "                ", "embeddings", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "_embeddings", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "embeddings", "[", "ba", ":", "bb", ",", ":", "]", "=", "_embeddings", "[", "(", "batch_size", "-", "count", ")", ":", ",", ":", "]", "\n", "ba", "=", "bb", "\n", "", "embeddings_list", ".", "append", "(", "embeddings", ")", "\n", "", "embeddings", "=", "embeddings_list", "[", "0", "]", "+", "embeddings_list", "[", "1", "]", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "actual_issame", "=", "np", ".", "asarray", "(", "issame_list", ")", "\n", "outname", "=", "os", ".", "path", ".", "join", "(", "'temp.bin'", ")", "\n", "with", "open", "(", "outname", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "(", "embeddings", ",", "issame_list", ")", ",", "\n", "f", ",", "\n", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_align.estimate_norm": [[42, 66], ["skimage.transform.SimilarityTransform", "numpy.insert", "float", "numpy.arange", "trans.SimilarityTransform.estimate", "numpy.dot", "numpy.sum", "numpy.ones", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["def", "estimate_norm", "(", "lmk", ",", "image_size", "=", "112", ",", "mode", "=", "'arcface'", ")", ":", "\n", "    ", "assert", "lmk", ".", "shape", "==", "(", "5", ",", "2", ")", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "lmk_tran", "=", "np", ".", "insert", "(", "lmk", ",", "2", ",", "values", "=", "np", ".", "ones", "(", "5", ")", ",", "axis", "=", "1", ")", "\n", "min_M", "=", "[", "]", "\n", "min_index", "=", "[", "]", "\n", "min_error", "=", "float", "(", "'inf'", ")", "\n", "if", "mode", "==", "'arcface'", ":", "\n", "        ", "assert", "image_size", "==", "112", "\n", "src", "=", "arcface_src", "\n", "", "else", ":", "\n", "        ", "src", "=", "src_map", "[", "image_size", "]", "\n", "", "for", "i", "in", "np", ".", "arange", "(", "src", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tform", ".", "estimate", "(", "lmk", ",", "src", "[", "i", "]", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "results", "=", "np", ".", "dot", "(", "M", ",", "lmk_tran", ".", "T", ")", "\n", "results", "=", "results", ".", "T", "\n", "error", "=", "np", ".", "sum", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "results", "-", "src", "[", "i", "]", ")", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "#         print(error)", "\n", "if", "error", "<", "min_error", ":", "\n", "            ", "min_error", "=", "error", "\n", "min_M", "=", "M", "\n", "min_index", "=", "i", "\n", "", "", "return", "min_M", ",", "min_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_align.norm_crop": [[68, 72], ["face_align.estimate_norm", "cv2.warpAffine"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_align.estimate_norm"], ["", "def", "norm_crop", "(", "img", ",", "landmark", ",", "image_size", "=", "112", ",", "mode", "=", "'arcface'", ")", ":", "\n", "    ", "M", ",", "pose_index", "=", "estimate_norm", "(", "landmark", ",", "image_size", ",", "mode", ")", "\n", "warped", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "image_size", ",", "image_size", ")", ",", "borderValue", "=", "0.0", ")", "\n", "return", "warped", "\n", "", ""]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.is_no_bias": [[17, 23], ["None"], "function", ["None"], ["def", "is_no_bias", "(", "attr", ")", ":", "\n", "    ", "ret", "=", "False", "\n", "if", "'no_bias'", "in", "attr", "and", "(", "attr", "[", "'no_bias'", "]", "==", "True", "\n", "or", "attr", "[", "'no_bias'", "]", "==", "'True'", ")", ":", "\n", "        ", "ret", "=", "True", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.count_fc_flops": [[25, 31], ["flops_counter.is_no_bias", "int"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.is_no_bias"], ["", "def", "count_fc_flops", "(", "input_filter", ",", "output_filter", ",", "attr", ")", ":", "\n", "#print(input_filter, output_filter ,attr)", "\n", "    ", "ret", "=", "2", "*", "input_filter", "*", "output_filter", "\n", "if", "is_no_bias", "(", "attr", ")", ":", "\n", "        ", "ret", "-=", "output_filter", "\n", "", "return", "int", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.count_conv_flops": [[33, 49], ["[].split", "flops_counter.is_no_bias", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.is_no_bias"], ["", "def", "count_conv_flops", "(", "input_shape", ",", "output_shape", ",", "attr", ")", ":", "\n", "    ", "kernel", "=", "attr", "[", "'kernel'", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "kernel", "=", "[", "int", "(", "x", ")", "for", "x", "in", "kernel", "]", "\n", "\n", "#print('kernel', kernel)", "\n", "if", "is_no_bias", "(", "attr", ")", ":", "\n", "        ", "ret", "=", "(", "2", "*", "input_shape", "[", "1", "]", "*", "kernel", "[", "0", "]", "*", "kernel", "[", "1", "]", "-", "\n", "1", ")", "*", "output_shape", "[", "2", "]", "*", "output_shape", "[", "3", "]", "*", "output_shape", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "ret", "=", "2", "*", "input_shape", "[", "1", "]", "*", "kernel", "[", "0", "]", "*", "kernel", "[", "1", "]", "*", "output_shape", "[", "\n", "2", "]", "*", "output_shape", "[", "3", "]", "*", "output_shape", "[", "1", "]", "\n", "", "num_group", "=", "1", "\n", "if", "'num_group'", "in", "attr", ":", "\n", "        ", "num_group", "=", "int", "(", "attr", "[", "'num_group'", "]", ")", "\n", "", "ret", "/=", "num_group", "\n", "return", "int", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.count_flops": [[51, 88], ["sym.get_internals", "sym.get_internals.infer_shape", "dict", "enumerate", "enumerate", "zip", "json.loads", "sym.get_internals.list_outputs", "sym.tojson", "flops_counter.count_conv_flops", "flops_counter.count_fc_flops"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.count_conv_flops", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.count_fc_flops"], ["", "def", "count_flops", "(", "sym", ",", "**", "data_shapes", ")", ":", "\n", "    ", "all_layers", "=", "sym", ".", "get_internals", "(", ")", "\n", "#print(all_layers)", "\n", "arg_shapes", ",", "out_shapes", ",", "aux_shapes", "=", "all_layers", ".", "infer_shape", "(", "**", "data_shapes", ")", "\n", "out_shape_dict", "=", "dict", "(", "zip", "(", "all_layers", ".", "list_outputs", "(", ")", ",", "out_shapes", ")", ")", "\n", "\n", "nodes", "=", "json", ".", "loads", "(", "sym", ".", "tojson", "(", ")", ")", "[", "'nodes'", "]", "\n", "nodeid_shape", "=", "{", "}", "\n", "for", "nodeid", ",", "node", "in", "enumerate", "(", "nodes", ")", ":", "\n", "        ", "name", "=", "node", "[", "'name'", "]", "\n", "layer_name", "=", "name", "+", "\"_output\"", "\n", "if", "layer_name", "in", "out_shape_dict", ":", "\n", "            ", "nodeid_shape", "[", "nodeid", "]", "=", "out_shape_dict", "[", "layer_name", "]", "\n", "#print(nodeid_shape)", "\n", "", "", "FLOPs", "=", "0", "\n", "for", "nodeid", ",", "node", "in", "enumerate", "(", "nodes", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "if", "node", "[", "'op'", "]", "==", "'Convolution'", ":", "\n", "            ", "output_shape", "=", "nodeid_shape", "[", "nodeid", "]", "\n", "name", "=", "node", "[", "'name'", "]", "\n", "attr", "=", "node", "[", "'attrs'", "]", "\n", "input_nodeid", "=", "node", "[", "'inputs'", "]", "[", "0", "]", "[", "0", "]", "\n", "input_shape", "=", "nodeid_shape", "[", "input_nodeid", "]", "\n", "flops", "=", "count_conv_flops", "(", "input_shape", ",", "output_shape", ",", "attr", ")", "\n", "", "elif", "node", "[", "'op'", "]", "==", "'FullyConnected'", ":", "\n", "            ", "attr", "=", "node", "[", "'attrs'", "]", "\n", "output_shape", "=", "nodeid_shape", "[", "nodeid", "]", "\n", "input_nodeid", "=", "node", "[", "'inputs'", "]", "[", "0", "]", "[", "0", "]", "\n", "input_shape", "=", "nodeid_shape", "[", "input_nodeid", "]", "\n", "output_filter", "=", "output_shape", "[", "1", "]", "\n", "input_filter", "=", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", "*", "input_shape", "[", "3", "]", "\n", "#assert len(input_shape)==4 and input_shape[2]==1 and input_shape[3]==1", "\n", "flops", "=", "count_fc_flops", "(", "input_filter", ",", "output_filter", ",", "attr", ")", "\n", "#print(node, flops)", "\n", "", "FLOPs", "+=", "flops", "\n", "\n", "", "return", "FLOPs", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.flops_counter.flops_str": [[90, 100], ["None"], "function", ["None"], ["", "def", "flops_str", "(", "FLOPs", ")", ":", "\n", "    ", "preset", "=", "[", "(", "1e12", ",", "'T'", ")", ",", "(", "1e9", ",", "'G'", ")", ",", "(", "1e6", ",", "'M'", ")", ",", "(", "1e3", ",", "'K'", ")", "]", "\n", "\n", "for", "p", "in", "preset", ":", "\n", "        ", "if", "FLOPs", "//", "p", "[", "0", "]", ">", "0", ":", "\n", "            ", "N", "=", "FLOPs", "/", "p", "[", "0", "]", "\n", "ret", "=", "\"%.1f%s\"", "%", "(", "N", ",", "p", "[", "1", "]", ")", "\n", "return", "ret", "\n", "", "", "ret", "=", "\"%.1f\"", "%", "(", "FLOPs", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.build_eval_pack.to_rgb": [[19, 24], ["numpy.empty"], "function", ["None"], ["def", "to_rgb", "(", "img", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "shape", "\n", "ret", "=", "np", ".", "empty", "(", "(", "w", ",", "h", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ret", "[", ":", ",", ":", ",", "0", "]", "=", "ret", "[", ":", ",", ":", ",", "1", "]", "=", "ret", "[", ":", ",", ":", ",", "2", "]", "=", "img", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.build_eval_pack.IOU": [[26, 53], ["max", "min", "max", "min"], "function", ["None"], ["", "def", "IOU", "(", "Reframe", ",", "GTframe", ")", ":", "\n", "    ", "x1", "=", "Reframe", "[", "0", "]", "\n", "y1", "=", "Reframe", "[", "1", "]", "\n", "width1", "=", "Reframe", "[", "2", "]", "-", "Reframe", "[", "0", "]", "\n", "height1", "=", "Reframe", "[", "3", "]", "-", "Reframe", "[", "1", "]", "\n", "\n", "x2", "=", "GTframe", "[", "0", "]", "\n", "y2", "=", "GTframe", "[", "1", "]", "\n", "width2", "=", "GTframe", "[", "2", "]", "-", "GTframe", "[", "0", "]", "\n", "height2", "=", "GTframe", "[", "3", "]", "-", "GTframe", "[", "1", "]", "\n", "\n", "endx", "=", "max", "(", "x1", "+", "width1", ",", "x2", "+", "width2", ")", "\n", "startx", "=", "min", "(", "x1", ",", "x2", ")", "\n", "width", "=", "width1", "+", "width2", "-", "(", "endx", "-", "startx", ")", "\n", "\n", "endy", "=", "max", "(", "y1", "+", "height1", ",", "y2", "+", "height2", ")", "\n", "starty", "=", "min", "(", "y1", ",", "y2", ")", "\n", "height", "=", "height1", "+", "height2", "-", "(", "endy", "-", "starty", ")", "\n", "\n", "if", "width", "<=", "0", "or", "height", "<=", "0", ":", "\n", "        ", "ratio", "=", "0", "\n", "", "else", ":", "\n", "        ", "Area", "=", "width", "*", "height", "\n", "Area1", "=", "width1", "*", "height1", "\n", "Area2", "=", "width2", "*", "height2", "\n", "ratio", "=", "Area", "*", "1.", "/", "(", "Area1", "+", "Area2", "-", "Area", ")", "\n", "", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.build_eval_pack.get_norm_crop": [[72, 112], ["cv2.imread", "numpy.min", "numpy.max", "detector.detect", "float", "float", "numpy.round", "detector.detect", "print", "face_align.norm_crop", "float", "float", "numpy.asarray", "numpy.vstack", "numpy.sum", "numpy.argmax", "numpy.power"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_align.norm_crop"], ["def", "get_norm_crop", "(", "image_path", ")", ":", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# prevent bigger axis from being more than max_size:", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "max_size", ":", "\n", "        ", "im_scale", "=", "float", "(", "max_size", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "bbox", ",", "landmark", "=", "detector", ".", "detect", "(", "im", ",", "threshold", "=", "0.5", ",", "scales", "=", "[", "im_scale", "]", ")", "\n", "#print(im.shape, bbox.shape, landmark.shape)", "\n", "if", "bbox", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "bbox", ",", "landmark", "=", "detector", ".", "detect", "(", "\n", "im", ",", "\n", "threshold", "=", "0.05", ",", "\n", "scales", "=", "[", "im_scale", "*", "0.75", ",", "im_scale", ",", "im_scale", "*", "2.0", "]", ")", "\n", "print", "(", "'refine'", ",", "im", ".", "shape", ",", "bbox", ".", "shape", ",", "landmark", ".", "shape", ")", "\n", "", "nrof_faces", "=", "bbox", ".", "shape", "[", "0", "]", "\n", "if", "nrof_faces", ">", "0", ":", "\n", "        ", "det", "=", "bbox", "[", ":", ",", "0", ":", "4", "]", "\n", "img_size", "=", "np", ".", "asarray", "(", "im", ".", "shape", ")", "[", "0", ":", "2", "]", "\n", "bindex", "=", "0", "\n", "if", "nrof_faces", ">", "1", ":", "\n", "            ", "bounding_box_size", "=", "(", "det", "[", ":", ",", "2", "]", "-", "det", "[", ":", ",", "0", "]", ")", "*", "(", "det", "[", ":", ",", "3", "]", "-", "\n", "det", "[", ":", ",", "1", "]", ")", "\n", "img_center", "=", "img_size", "/", "2", "\n", "offsets", "=", "np", ".", "vstack", "(", "[", "(", "det", "[", ":", ",", "0", "]", "+", "det", "[", ":", ",", "2", "]", ")", "/", "2", "-", "img_center", "[", "1", "]", ",", "\n", "(", "det", "[", ":", ",", "1", "]", "+", "det", "[", ":", ",", "3", "]", ")", "/", "2", "-", "img_center", "[", "0", "]", "]", ")", "\n", "offset_dist_squared", "=", "np", ".", "sum", "(", "np", ".", "power", "(", "offsets", ",", "2.0", ")", ",", "0", ")", "\n", "bindex", "=", "np", ".", "argmax", "(", "bounding_box_size", "-", "offset_dist_squared", "*", "\n", "2.0", ")", "# some extra weight on the centering", "\n", "#_bbox = bounding_boxes[bindex, 0:4]", "\n", "", "_landmark", "=", "landmark", "[", "bindex", "]", "\n", "warped", "=", "face_align", ".", "norm_crop", "(", "im", ",", "\n", "landmark", "=", "_landmark", ",", "\n", "image_size", "=", "args", ".", "image_size", ",", "\n", "mode", "=", "args", ".", "align_mode", ")", "\n", "return", "warped", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_preprocess.parse_lst_line": [[6, 27], ["line.strip().split", "int", "int", "len", "float", "len", "numpy.zeros", "xrange", "line.strip", "int", "len", "xrange", "_l.append", "numpy.array().reshape", "float", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split"], ["def", "parse_lst_line", "(", "line", ")", ":", "\n", "  ", "vec", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "assert", "len", "(", "vec", ")", ">=", "3", "\n", "aligned", "=", "int", "(", "vec", "[", "0", "]", ")", "\n", "image_path", "=", "vec", "[", "2", "]", "\n", "label", "=", "int", "(", "float", "(", "vec", "[", "1", "]", ")", ")", "\n", "bbox", "=", "None", "\n", "landmark", "=", "None", "\n", "#print(vec)", "\n", "if", "len", "(", "vec", ")", ">", "3", ":", "\n", "    ", "bbox", "=", "np", ".", "zeros", "(", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "xrange", "(", "3", ",", "7", ")", ":", "\n", "      ", "bbox", "[", "i", "-", "3", "]", "=", "int", "(", "vec", "[", "i", "]", ")", "\n", "", "landmark", "=", "None", "\n", "if", "len", "(", "vec", ")", ">", "7", ":", "\n", "      ", "_l", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "7", ",", "17", ")", ":", "\n", "        ", "_l", ".", "append", "(", "float", "(", "vec", "[", "i", "]", ")", ")", "\n", "", "landmark", "=", "np", ".", "array", "(", "_l", ")", ".", "reshape", "(", "(", "2", ",", "5", ")", ")", ".", "T", "\n", "#print(aligned)", "\n", "", "", "return", "image_path", ",", "label", ",", "bbox", ",", "landmark", ",", "aligned", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_preprocess.read_image": [[31, 44], ["kwargs.get", "kwargs.get", "cv2.imread", "cv2.imread", "numpy.transpose"], "function", ["None"], ["", "def", "read_image", "(", "img_path", ",", "**", "kwargs", ")", ":", "\n", "  ", "mode", "=", "kwargs", ".", "get", "(", "'mode'", ",", "'rgb'", ")", "\n", "layout", "=", "kwargs", ".", "get", "(", "'layout'", ",", "'HWC'", ")", "\n", "if", "mode", "==", "'gray'", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "cv2", ".", "CV_LOAD_IMAGE_GRAYSCALE", ")", "\n", "", "else", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "cv2", ".", "CV_LOAD_IMAGE_COLOR", ")", "\n", "if", "mode", "==", "'rgb'", ":", "\n", "#print('to rgb')", "\n", "      ", "img", "=", "img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "", "if", "layout", "==", "'CHW'", ":", "\n", "      ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_preprocess.preprocess": [[46, 112], ["isinstance", "kwargs.get", "face_preprocess.read_image", "len", "numpy.array", "landmark.astype", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "kwargs.get", "numpy.zeros", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "cv2.warpAffine", "int", "len", "len", "len", "numpy.zeros", "int", "int", "len", "cv2.resize", "len", "kwargs.get.split"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_preprocess.read_image", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split"], ["", "def", "preprocess", "(", "img", ",", "bbox", "=", "None", ",", "landmark", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "  ", "if", "isinstance", "(", "img", ",", "str", ")", ":", "\n", "    ", "img", "=", "read_image", "(", "img", ",", "**", "kwargs", ")", "\n", "", "M", "=", "None", "\n", "image_size", "=", "[", "]", "\n", "str_image_size", "=", "kwargs", ".", "get", "(", "'image_size'", ",", "''", ")", "\n", "if", "len", "(", "str_image_size", ")", ">", "0", ":", "\n", "    ", "image_size", "=", "[", "int", "(", "x", ")", "for", "x", "in", "str_image_size", ".", "split", "(", "','", ")", "]", "\n", "if", "len", "(", "image_size", ")", "==", "1", ":", "\n", "      ", "image_size", "=", "[", "image_size", "[", "0", "]", ",", "image_size", "[", "0", "]", "]", "\n", "", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "#assert image_size[0]==112", "\n", "#assert image_size[0]==112 or image_size[1]==96", "\n", "", "if", "landmark", "is", "not", "None", ":", "\n", "    ", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "src", "=", "np", ".", "array", "(", "[", "\n", "[", "30.2946", ",", "51.6963", "]", ",", "\n", "[", "65.5318", ",", "51.5014", "]", ",", "\n", "[", "48.0252", ",", "71.7366", "]", ",", "\n", "[", "33.5493", ",", "92.3655", "]", ",", "\n", "[", "62.7299", ",", "92.2041", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "image_size", "[", "1", "]", "==", "112", ":", "\n", "      ", "src", "[", ":", ",", "0", "]", "+=", "8.0", "\n", "", "dst", "=", "landmark", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "dst", ",", "src", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "#M = cv2.estimateRigidTransform( dst.reshape(1,5,2), src.reshape(1,5,2), False)", "\n", "\n", "", "if", "M", "is", "None", ":", "\n", "    ", "if", "bbox", "is", "None", ":", "#use center crop", "\n", "      ", "det", "=", "np", ".", "zeros", "(", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "det", "[", "0", "]", "=", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "0.0625", ")", "\n", "det", "[", "1", "]", "=", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "0.0625", ")", "\n", "det", "[", "2", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "det", "[", "0", "]", "\n", "det", "[", "3", "]", "=", "img", ".", "shape", "[", "0", "]", "-", "det", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "det", "=", "bbox", "\n", "", "margin", "=", "kwargs", ".", "get", "(", "'margin'", ",", "44", ")", "\n", "bb", "=", "np", ".", "zeros", "(", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "bb", "[", "0", "]", "=", "np", ".", "maximum", "(", "det", "[", "0", "]", "-", "margin", "/", "2", ",", "0", ")", "\n", "bb", "[", "1", "]", "=", "np", ".", "maximum", "(", "det", "[", "1", "]", "-", "margin", "/", "2", ",", "0", ")", "\n", "bb", "[", "2", "]", "=", "np", ".", "minimum", "(", "det", "[", "2", "]", "+", "margin", "/", "2", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "bb", "[", "3", "]", "=", "np", ".", "minimum", "(", "det", "[", "3", "]", "+", "margin", "/", "2", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "ret", "=", "img", "[", "bb", "[", "1", "]", ":", "bb", "[", "3", "]", ",", "bb", "[", "0", "]", ":", "bb", "[", "2", "]", ",", ":", "]", "\n", "if", "len", "(", "image_size", ")", ">", "0", ":", "\n", "      ", "ret", "=", "cv2", ".", "resize", "(", "ret", ",", "(", "image_size", "[", "1", "]", ",", "image_size", "[", "0", "]", ")", ")", "\n", "", "return", "ret", "\n", "", "else", ":", "#do align using landmark", "\n", "    ", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "\n", "#src = src[0:3,:]", "\n", "#dst = dst[0:3,:]", "\n", "\n", "\n", "#print(src.shape, dst.shape)", "\n", "#print(src)", "\n", "#print(dst)", "\n", "#print(M)", "\n", "warped", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "image_size", "[", "1", "]", ",", "image_size", "[", "0", "]", ")", ",", "borderValue", "=", "0.0", ")", "\n", "\n", "#tform3 = trans.ProjectiveTransform()", "\n", "#tform3.estimate(src, dst)", "\n", "#warped = trans.warp(img, tform3, output_shape=_shape)", "\n", "return", "warped", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_preprocess.preprocess_o": [[113, 179], ["isinstance", "kwargs.get", "face_preprocess.read_image", "len", "numpy.array", "landmark.astype", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "kwargs.get", "numpy.zeros", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "cv2.warpAffine", "int", "len", "len", "len", "numpy.zeros", "int", "int", "len", "cv2.resize", "len", "kwargs.get.split"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.face_preprocess.read_image", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split"], ["", "", "def", "preprocess_o", "(", "img", ",", "bbox", "=", "None", ",", "landmark", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "  ", "if", "isinstance", "(", "img", ",", "str", ")", ":", "\n", "    ", "img", "=", "read_image", "(", "img", ",", "**", "kwargs", ")", "\n", "", "M", "=", "None", "\n", "image_size", "=", "[", "]", "\n", "str_image_size", "=", "kwargs", ".", "get", "(", "'image_size'", ",", "''", ")", "\n", "if", "len", "(", "str_image_size", ")", ">", "0", ":", "\n", "    ", "image_size", "=", "[", "int", "(", "x", ")", "for", "x", "in", "str_image_size", ".", "split", "(", "','", ")", "]", "\n", "if", "len", "(", "image_size", ")", "==", "1", ":", "\n", "      ", "image_size", "=", "[", "image_size", "[", "0", "]", ",", "image_size", "[", "0", "]", "]", "\n", "", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "assert", "image_size", "[", "0", "]", "==", "112", "\n", "assert", "image_size", "[", "0", "]", "==", "112", "or", "image_size", "[", "1", "]", "==", "96", "\n", "", "if", "landmark", "is", "not", "None", ":", "\n", "    ", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "src", "=", "np", ".", "array", "(", "[", "\n", "[", "30.2946", ",", "51.6963", "]", ",", "\n", "[", "65.5318", ",", "51.5014", "]", ",", "\n", "[", "48.0252", ",", "71.7366", "]", ",", "\n", "[", "33.5493", ",", "92.3655", "]", ",", "\n", "[", "62.7299", ",", "92.2041", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "image_size", "[", "1", "]", "==", "112", ":", "\n", "      ", "src", "[", ":", ",", "0", "]", "+=", "8.0", "\n", "", "dst", "=", "landmark", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "dst", ",", "src", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "#M = cv2.estimateRigidTransform( dst.reshape(1,5,2), src.reshape(1,5,2), False)", "\n", "\n", "", "if", "M", "is", "None", ":", "\n", "    ", "if", "bbox", "is", "None", ":", "#use center crop", "\n", "      ", "det", "=", "np", ".", "zeros", "(", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "det", "[", "0", "]", "=", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "0.0625", ")", "\n", "det", "[", "1", "]", "=", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "0.0625", ")", "\n", "det", "[", "2", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "det", "[", "0", "]", "\n", "det", "[", "3", "]", "=", "img", ".", "shape", "[", "0", "]", "-", "det", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "det", "=", "bbox", "\n", "", "margin", "=", "kwargs", ".", "get", "(", "'margin'", ",", "44", ")", "\n", "bb", "=", "np", ".", "zeros", "(", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "bb", "[", "0", "]", "=", "np", ".", "maximum", "(", "det", "[", "0", "]", "-", "margin", "/", "2", ",", "0", ")", "\n", "bb", "[", "1", "]", "=", "np", ".", "maximum", "(", "det", "[", "1", "]", "-", "margin", "/", "2", ",", "0", ")", "\n", "bb", "[", "2", "]", "=", "np", ".", "minimum", "(", "det", "[", "2", "]", "+", "margin", "/", "2", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "bb", "[", "3", "]", "=", "np", ".", "minimum", "(", "det", "[", "3", "]", "+", "margin", "/", "2", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "ret", "=", "img", "[", "bb", "[", "1", "]", ":", "bb", "[", "3", "]", ",", "bb", "[", "0", "]", ":", "bb", "[", "2", "]", ",", ":", "]", "\n", "if", "len", "(", "image_size", ")", ">", "0", ":", "\n", "      ", "ret", "=", "cv2", ".", "resize", "(", "ret", ",", "(", "image_size", "[", "1", "]", ",", "image_size", "[", "0", "]", ")", ")", "\n", "", "return", "ret", "\n", "", "else", ":", "#do align using landmark", "\n", "    ", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "\n", "#src = src[0:3,:]", "\n", "#dst = dst[0:3,:]", "\n", "\n", "\n", "#print(src.shape, dst.shape)", "\n", "#print(src)", "\n", "#print(dst)", "\n", "#print(M)", "\n", "warped", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "image_size", "[", "1", "]", ",", "image_size", "[", "0", "]", ")", ",", "borderValue", "=", "0.0", ")", "\n", "\n", "#tform3 = trans.ProjectiveTransform()", "\n", "#tform3.estimate(src, dst)", "\n", "#warped = trans.warp(img, tform3, output_shape=_shape)", "\n", "return", "warped", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.rec_builder.SeqRecBuilder.__init__": [[14, 25], ["mxnet.recordio.MXIndexedRecordIO", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "image_size", "=", "(", "112", ",", "112", ")", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "last_label", "=", "-", "1", "\n", "self", ".", "widx", "=", "0", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "self", ".", "writer", "=", "mx", ".", "recordio", ".", "MXIndexedRecordIO", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.idx'", ")", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'train.rec'", ")", ",", "\n", "'w'", ")", "\n", "self", ".", "label_stat", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.rec_builder.SeqRecBuilder.add": [[26, 43], ["mxnet.recordio.IRHeader", "rec_builder.SeqRecBuilder.writer.write_idx", "mxnet.recordio.pack_img", "mxnet.recordio.pack", "min", "max"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "label", ",", "img", ",", "is_image", "=", "True", ")", ":", "\n", "#img should be BGR", "\n", "#if self.sis:", "\n", "#    assert label>=self.last_label", "\n", "        ", "idx", "=", "self", ".", "widx", "\n", "self", ".", "widx", "+=", "1", "\n", "header", "=", "mx", ".", "recordio", ".", "IRHeader", "(", "0", ",", "label", ",", "idx", ",", "0", ")", "\n", "if", "is_image", ":", "\n", "            ", "s", "=", "mx", ".", "recordio", ".", "pack_img", "(", "header", ",", "img", ",", "quality", "=", "95", ",", "img_fmt", "=", "'.jpg'", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "mx", ".", "recordio", ".", "pack", "(", "header", ",", "img", ")", "\n", "", "self", ".", "writer", ".", "write_idx", "(", "idx", ",", "s", ")", "\n", "if", "self", ".", "label_stat", "[", "0", "]", "<", "0", ":", "\n", "            ", "self", ".", "label_stat", "=", "[", "label", ",", "label", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "label_stat", "[", "0", "]", "=", "min", "(", "self", ".", "label_stat", "[", "0", "]", ",", "label", ")", "\n", "self", ".", "label_stat", "[", "1", "]", "=", "max", "(", "self", ".", "label_stat", "[", "1", "]", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.rec_builder.SeqRecBuilder.close": [[44, 48], ["open", "f.write", "os.path.join"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'property'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"%d,%d,%d\\n\"", "%", "(", "self", ".", "label_stat", "[", "1", "]", "+", "1", ",", "self", ".", "image_size", "[", "0", "]", ",", "\n", "self", ".", "image_size", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.rec_builder.RecBuilder.__init__": [[51, 63], ["mxnet.recordio.MXIndexedRecordIO", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "image_size", "=", "(", "112", ",", "112", ")", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "last_label", "=", "-", "1", "\n", "self", ".", "widx", "=", "1", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "self", ".", "writer", "=", "mx", ".", "recordio", ".", "MXIndexedRecordIO", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.idx'", ")", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'train.rec'", ")", ",", "\n", "'w'", ")", "\n", "self", ".", "label_stat", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "self", ".", "identities", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.rec_builder.RecBuilder.add": [[64, 90], ["rec_builder.RecBuilder.identities.append", "len", "mxnet.recordio.IRHeader", "isinstance", "rec_builder.RecBuilder.writer.write_idx", "min", "max", "mxnet.recordio.pack_img", "mxnet.recordio.pack"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "label", ",", "imgs", ")", ":", "\n", "#img should be BGR", "\n", "        ", "assert", "label", ">=", "0", "\n", "assert", "label", ">", "self", ".", "last_label", "\n", "assert", "len", "(", "imgs", ")", ">", "0", "\n", "idflag", "=", "[", "self", ".", "widx", ",", "-", "1", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "idx", "=", "self", ".", "widx", "\n", "self", ".", "widx", "+=", "1", "\n", "header", "=", "mx", ".", "recordio", ".", "IRHeader", "(", "0", ",", "label", ",", "idx", ",", "0", ")", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "s", "=", "mx", ".", "recordio", ".", "pack_img", "(", "header", ",", "\n", "img", ",", "\n", "quality", "=", "95", ",", "\n", "img_fmt", "=", "'.jpg'", ")", "\n", "", "else", ":", "\n", "                ", "s", "=", "mx", ".", "recordio", ".", "pack", "(", "header", ",", "img", ")", "\n", "", "self", ".", "writer", ".", "write_idx", "(", "idx", ",", "s", ")", "\n", "", "idflag", "[", "1", "]", "=", "self", ".", "widx", "\n", "self", ".", "identities", ".", "append", "(", "idflag", ")", "\n", "if", "self", ".", "label_stat", "[", "0", "]", "<", "0", ":", "\n", "            ", "self", ".", "label_stat", "=", "[", "label", ",", "label", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "label_stat", "[", "0", "]", "=", "min", "(", "self", ".", "label_stat", "[", "0", "]", ",", "label", ")", "\n", "self", ".", "label_stat", "[", "1", "]", "=", "max", "(", "self", ".", "label_stat", "[", "1", "]", ",", "label", ")", "\n", "", "self", ".", "last_label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.rec_builder.RecBuilder.close": [[91, 110], ["print", "mxnet.recordio.IRHeader", "mxnet.recordio.pack", "rec_builder.RecBuilder.writer.write_idx", "print", "mxnet.recordio.IRHeader", "mxnet.recordio.pack", "rec_builder.RecBuilder.writer.write_idx", "open", "f.write", "os.path.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "id_idx", "=", "self", ".", "widx", "\n", "for", "id_flag", "in", "self", ".", "identities", ":", "\n", "            ", "idx", "=", "self", ".", "widx", "\n", "self", ".", "widx", "+=", "1", "\n", "_header", "=", "mx", ".", "recordio", ".", "IRHeader", "(", "0", ",", "id_flag", ",", "idx", ",", "0", ")", "\n", "s", "=", "mx", ".", "recordio", ".", "pack", "(", "_header", ",", "b''", ")", "\n", "self", ".", "writer", ".", "write_idx", "(", "idx", ",", "s", ")", "\n", "\n", "", "print", "(", "'id0:'", ",", "(", "id_idx", ",", "self", ".", "widx", ")", ")", "\n", "idx", "=", "0", "\n", "_header", "=", "mx", ".", "recordio", ".", "IRHeader", "(", "0", ",", "(", "id_idx", ",", "self", ".", "widx", ")", ",", "idx", ",", "1", ")", "\n", "s", "=", "mx", ".", "recordio", ".", "pack", "(", "_header", ",", "b''", ")", "\n", "self", ".", "writer", ".", "write_idx", "(", "idx", ",", "s", ")", "\n", "print", "(", "'label stat:'", ",", "self", ".", "label_stat", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'property'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"%d,%d,%d\\n\"", "%", "(", "self", ".", "label_stat", "[", "1", "]", "+", "1", ",", "self", ".", "image_size", "[", "0", "]", ",", "\n", "self", ".", "image_size", "[", "1", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.rec2image.main": [[16, 52], ["args.include.split", "range", "os.path.join", "os.path.join", "mxnet.recordio.MXIndexedRecordIO", "rec_list.append", "os.path.exists", "os.makedirs", "len", "mx.recordio.MXIndexedRecordIO.read_idx", "mxnet.recordio.unpack", "print", "range", "int", "int", "int", "int", "os.path.join", "os.makedirs", "mx.recordio.MXIndexedRecordIO.read_idx", "mxnet.recordio.unpack", "range", "print", "int", "int", "mx.recordio.MXIndexedRecordIO.read_idx", "mxnet.recordio.unpack", "os.path.join", "cv2.imwrite", "mxnet.image.imdecode().asnumpy", "mxnet.image.imdecode"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.imdecode"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "include_datasets", "=", "args", ".", "include", ".", "split", "(", "','", ")", "\n", "rec_list", "=", "[", "]", "\n", "for", "ds", "in", "include_datasets", ":", "\n", "        ", "path_imgrec", "=", "os", ".", "path", ".", "join", "(", "ds", ",", "'train.rec'", ")", "\n", "path_imgidx", "=", "os", ".", "path", ".", "join", "(", "ds", ",", "'train.idx'", ")", "\n", "imgrec", "=", "mx", ".", "recordio", ".", "MXIndexedRecordIO", "(", "path_imgidx", ",", "path_imgrec", ",", "'r'", ")", "# pylint: disable=redefined-variable-type", "\n", "rec_list", ".", "append", "(", "imgrec", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output", ")", "\n", "", "for", "ds_id", "in", "range", "(", "len", "(", "rec_list", ")", ")", ":", "\n", "        ", "id_list", "=", "[", "]", "\n", "imgrec", "=", "rec_list", "[", "ds_id", "]", "\n", "s", "=", "imgrec", ".", "read_idx", "(", "0", ")", "\n", "header", ",", "_", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "assert", "header", ".", "flag", ">", "0", "\n", "print", "(", "'header0 label'", ",", "header", ".", "label", ")", "\n", "header0", "=", "(", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "int", "(", "header", ".", "label", "[", "1", "]", ")", ")", "\n", "seq_identity", "=", "range", "(", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "int", "(", "header", ".", "label", "[", "1", "]", ")", ")", "\n", "pp", "=", "0", "\n", "for", "identity", "in", "seq_identity", ":", "\n", "            ", "id_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "\"%d_%d\"", "%", "(", "ds_id", ",", "identity", ")", ")", "\n", "os", ".", "makedirs", "(", "id_dir", ")", "\n", "pp", "+=", "1", "\n", "if", "pp", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'processing id'", ",", "pp", ")", "\n", "", "s", "=", "imgrec", ".", "read_idx", "(", "identity", ")", "\n", "header", ",", "_", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "imgid", "=", "0", "\n", "for", "_idx", "in", "range", "(", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "int", "(", "header", ".", "label", "[", "1", "]", ")", ")", ":", "\n", "                ", "s", "=", "imgrec", ".", "read_idx", "(", "_idx", ")", "\n", "_header", ",", "_img", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "_img", "=", "mx", ".", "image", ".", "imdecode", "(", "_img", ")", ".", "asnumpy", "(", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# to bgr", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "id_dir", ",", "\"%d.jpg\"", "%", "imgid", ")", "\n", "cv2", ".", "imwrite", "(", "image_path", ",", "_img", ")", "\n", "imgid", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.__init__": [[48, 52], ["sklearn.model_selection.KFold"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_splits", "=", "2", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "n_splits", "=", "n_splits", "\n", "if", "self", ".", "n_splits", ">", "1", ":", "\n", "            ", "self", ".", "k_fold", "=", "KFold", "(", "n_splits", "=", "n_splits", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split": [[53, 58], ["verification.LFold.k_fold.split"], "methods", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split"], ["", "", "def", "split", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "self", ".", "n_splits", ">", "1", ":", "\n", "            ", "return", "self", ".", "k_fold", ".", "split", "(", "indices", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "(", "indices", ",", "indices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_roc": [[60, 121], ["min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "len", "numpy.subtract", "numpy.sum", "verification.LFold.split", "numpy.zeros", "enumerate", "numpy.argmax", "enumerate", "verification.calculate_accuracy", "numpy.square", "print", "numpy.concatenate", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "sklearn.decomposition.PCA.transform", "sklearn.decomposition.PCA.transform", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.subtract", "numpy.sum", "verification.calculate_accuracy", "verification.calculate_accuracy", "numpy.square"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy"], ["", "", "", "def", "calculate_roc", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "actual_issame", ",", "\n", "nrof_folds", "=", "10", ",", "\n", "pca", "=", "0", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "tprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "fprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "accuracy", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ")", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "#print('pca', pca)", "\n", "\n", "if", "pca", "==", "0", ":", "\n", "        ", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "#print('train_set', train_set)", "\n", "#print('test_set', test_set)", "\n", "        ", "if", "pca", ">", "0", ":", "\n", "            ", "print", "(", "'doing pca on'", ",", "fold_idx", ")", "\n", "embed1_train", "=", "embeddings1", "[", "train_set", "]", "\n", "embed2_train", "=", "embeddings2", "[", "train_set", "]", "\n", "_embed_train", "=", "np", ".", "concatenate", "(", "(", "embed1_train", ",", "embed2_train", ")", ",", "axis", "=", "0", ")", "\n", "#print(_embed_train.shape)", "\n", "pca_model", "=", "PCA", "(", "n_components", "=", "pca", ")", "\n", "pca_model", ".", "fit", "(", "_embed_train", ")", "\n", "embed1", "=", "pca_model", ".", "transform", "(", "embeddings1", ")", "\n", "embed2", "=", "pca_model", ".", "transform", "(", "embeddings2", ")", "\n", "embed1", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embed1", ")", "\n", "embed2", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embed2", ")", "\n", "#print(embed1.shape, embed2.shape)", "\n", "diff", "=", "np", ".", "subtract", "(", "embed1", ",", "embed2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "# Find the best threshold for the fold", "\n", "", "acc_train", "=", "np", ".", "zeros", "(", "(", "nrof_thresholds", ")", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "_", ",", "acc_train", "[", "threshold_idx", "]", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "best_threshold_index", "=", "np", ".", "argmax", "(", "acc_train", ")", "\n", "#print('threshold', thresholds[best_threshold_index])", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "tprs", "[", "fold_idx", ",", "\n", "threshold_idx", "]", ",", "fprs", "[", "fold_idx", ",", "\n", "threshold_idx", "]", ",", "_", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "", "_", ",", "_", ",", "accuracy", "[", "fold_idx", "]", "=", "calculate_accuracy", "(", "\n", "thresholds", "[", "best_threshold_index", "]", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "tpr", "=", "np", ".", "mean", "(", "tprs", ",", "0", ")", "\n", "fpr", "=", "np", ".", "mean", "(", "fprs", ",", "0", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_accuracy": [[123, 136], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "float", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "float", "float", "float", "float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "\n", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "\n", "tpr", "=", "0", "if", "(", "tp", "+", "fn", "==", "0", ")", "else", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fpr", "=", "0", "if", "(", "fp", "+", "tn", "==", "0", ")", "else", "float", "(", "fp", ")", "/", "float", "(", "fp", "+", "tn", ")", "\n", "acc", "=", "float", "(", "tp", "+", "tn", ")", "/", "dist", ".", "size", "\n", "return", "tpr", ",", "fpr", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_val": [[138, 177], ["min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.subtract", "numpy.sum", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "numpy.std", "len", "numpy.square", "verification.LFold.split", "numpy.zeros", "enumerate", "verification.calculate_val_far", "verification.calculate_val_far", "numpy.max", "scipy.interpolate.interp1d", "interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.LFold.split", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_val_far", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_val_far"], ["", "def", "calculate_val", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "actual_issame", ",", "\n", "far_target", ",", "\n", "nrof_folds", "=", "10", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "val", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "far", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "# Find the threshold that gives FAR = far_target", "\n", "        ", "far_train", "=", "np", ".", "zeros", "(", "nrof_thresholds", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "far_train", "[", "threshold_idx", "]", "=", "calculate_val_far", "(", "\n", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "if", "np", ".", "max", "(", "far_train", ")", ">=", "far_target", ":", "\n", "            ", "f", "=", "interpolate", ".", "interp1d", "(", "far_train", ",", "thresholds", ",", "kind", "=", "'slinear'", ")", "\n", "threshold", "=", "f", "(", "far_target", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "\n", "", "val", "[", "fold_idx", "]", ",", "far", "[", "fold_idx", "]", "=", "calculate_val_far", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "val_mean", "=", "np", ".", "mean", "(", "val", ")", "\n", "far_mean", "=", "np", ".", "mean", "(", "far", ")", "\n", "val_std", "=", "np", ".", "std", "(", "val", ")", "\n", "return", "val_mean", ",", "val_std", ",", "far_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_val_far": [[179, 191], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_not", "float", "float", "float", "float", "numpy.logical_not"], "function", ["None"], ["", "def", "calculate_val_far", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "true_accept", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "false_accept", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "n_same", "=", "np", ".", "sum", "(", "actual_issame", ")", "\n", "n_diff", "=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "actual_issame", ")", ")", "\n", "#print(true_accept, false_accept)", "\n", "#print(n_same, n_diff)", "\n", "val", "=", "float", "(", "true_accept", ")", "/", "float", "(", "n_same", ")", "\n", "far", "=", "float", "(", "false_accept", ")", "/", "float", "(", "n_diff", ")", "\n", "return", "val", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.evaluate": [[193, 212], ["numpy.arange", "verification.calculate_roc", "numpy.arange", "verification.calculate_val", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_roc", "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.calculate_val"], ["", "def", "evaluate", "(", "embeddings", ",", "actual_issame", ",", "nrof_folds", "=", "10", ",", "pca", "=", "0", ")", ":", "\n", "# Calculate evaluation metrics", "\n", "    ", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.01", ")", "\n", "embeddings1", "=", "embeddings", "[", "0", ":", ":", "2", "]", "\n", "embeddings2", "=", "embeddings", "[", "1", ":", ":", "2", "]", "\n", "tpr", ",", "fpr", ",", "accuracy", "=", "calculate_roc", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "\n", "nrof_folds", "=", "nrof_folds", ",", "\n", "pca", "=", "pca", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.001", ")", "\n", "val", ",", "val_std", ",", "far", "=", "calculate_val", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "\n", "1e-3", ",", "\n", "nrof_folds", "=", "nrof_folds", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.load_bin": [[214, 240], ["range", "print", "mxnet.ndarray.empty", "data_list.append", "mxnet.image.imdecode", "mxnet.ndarray.transpose", "open", "pickle.load", "len", "mxnet.image.resize_short", "print", "open", "pickle.load", "mxnet.ndarray.flip", "len"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.ArcFace_occ.image_iter.FaceImageIter.imdecode"], ["", "def", "load_bin", "(", "path", ",", "image_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bins", ",", "issame_list", "=", "pickle", ".", "load", "(", "f", ")", "#py2", "\n", "", "", "except", "UnicodeDecodeError", "as", "e", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bins", ",", "issame_list", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "#py3", "\n", "", "", "data_list", "=", "[", "]", "\n", "for", "flip", "in", "[", "0", ",", "1", "]", ":", "\n", "        ", "data", "=", "nd", ".", "empty", "(", "\n", "(", "len", "(", "issame_list", ")", "*", "2", ",", "3", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "\n", "data_list", ".", "append", "(", "data", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "issame_list", ")", "*", "2", ")", ":", "\n", "        ", "_bin", "=", "bins", "[", "i", "]", "\n", "img", "=", "mx", ".", "image", ".", "imdecode", "(", "_bin", ")", "\n", "# if img.shape[1] != image_size[0]:", "\n", "#     img = mx.image.resize_short(img, image_size[0])", "\n", "# print(img.shape)", "\n", "# img1 = img[0:112,:,:]", "\n", "# img2 = img[112:224,:,:]", "\n", "# img1 = nd.transpose(img1, axes=(2, 0, 1))", "\n", "# img2 = nd.transpose(img2, axes=(2, 0, 1))", "\n", "img", "=", "nd", ".", "transpose", "(", "img", ",", "axes", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "for", "flip", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "if", "flip", "==", "1", ":", "\n", "# img1 = mx.ndarray.flip(data=img1, axis=2)", "\n", "# img2 = mx.ndarray.flip(data=img2, axis=2)", "\n"]], "home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.test": [[242, 329], ["print", "range", "embeddings_list[].copy", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "print", "print", "verification.evaluate", "mxnet.ndarray.array", "mxnet.ndarray.ones", "mxnet.ndarray.ones", "len", "embeddings_list.append", "range", "numpy.mean", "numpy.std", "min", "mxnet.ndarray.slice_axis", "datetime.datetime.now", "model.forward", "model.get_outputs", "net_out[].asnumpy", "datetime.datetime.now", "diff.total_seconds", "numpy.linalg.norm", "mxnet.io.DataBatch", "mxnet.io.DataBatch", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.Baojin-Huang_Webface-OCC.common.verification.evaluate"], ["", "data_list", "[", "flip", "]", "[", "i", "]", "[", ":", "]", "=", "img", "#np.concatenate((img1,img2))", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'loading bin'", ",", "i", ")", "\n", "", "", "print", "(", "data_list", "[", "0", "]", ".", "shape", ")", "\n", "return", "(", "data_list", ",", "issame_list", ")", "\n", "\n", "\n", "", "def", "test", "(", "data_set", ",", "\n", "mx_model", ",", "\n", "batch_size", ",", "\n", "nfolds", "=", "10", ",", "\n", "data_extra", "=", "None", ",", "\n", "label_shape", "=", "None", ")", ":", "\n", "    ", "print", "(", "'testing verification..'", ")", "\n", "data_list", "=", "data_set", "[", "0", "]", "\n", "issame_list", "=", "data_set", "[", "1", "]", "\n", "model", "=", "mx_model", "\n", "embeddings_list", "=", "[", "]", "\n", "if", "data_extra", "is", "not", "None", ":", "\n", "        ", "_data_extra", "=", "nd", ".", "array", "(", "data_extra", ")", "\n", "", "time_consumed", "=", "0.0", "\n", "if", "label_shape", "is", "None", ":", "\n", "        ", "_label", "=", "nd", ".", "ones", "(", "(", "batch_size", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "_label", "=", "nd", ".", "ones", "(", "label_shape", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "embeddings", "=", "None", "\n", "ba", "=", "0", "\n", "while", "ba", "<", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bb", "=", "min", "(", "ba", "+", "batch_size", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "count", "=", "bb", "-", "ba", "\n", "_data", "=", "nd", ".", "slice_axis", "(", "data", ",", "axis", "=", "0", ",", "begin", "=", "bb", "-", "batch_size", ",", "end", "=", "bb", ")", "\n", "#print(_data.shape, _label.shape)", "\n", "time0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "if", "data_extra", "is", "None", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", ")", ",", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", "_data_extra", ")", ",", "\n", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "net_out", "=", "model", ".", "get_outputs", "(", ")", "\n", "#_arg, _aux = model.get_params()", "\n", "#__arg = {}", "\n", "#for k,v in _arg.iteritems():", "\n", "#  __arg[k] = v.as_in_context(_ctx)", "\n", "#_arg = __arg", "\n", "#_arg[\"data\"] = _data.as_in_context(_ctx)", "\n", "#_arg[\"softmax_label\"] = _label.as_in_context(_ctx)", "\n", "#for k,v in _arg.iteritems():", "\n", "#  print(k,v.context)", "\n", "#exe = sym.bind(_ctx, _arg ,args_grad=None, grad_req=\"null\", aux_states=_aux)", "\n", "#exe.forward(is_train=False)", "\n", "#net_out = exe.outputs", "\n", "_embeddings", "=", "net_out", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "time_now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "diff", "=", "time_now", "-", "time0", "\n", "time_consumed", "+=", "diff", ".", "total_seconds", "(", ")", "\n", "#print(_embeddings.shape)", "\n", "if", "embeddings", "is", "None", ":", "\n", "                ", "embeddings", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "_embeddings", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "embeddings", "[", "ba", ":", "bb", ",", ":", "]", "=", "_embeddings", "[", "(", "batch_size", "-", "count", ")", ":", ",", ":", "]", "\n", "ba", "=", "bb", "\n", "", "embeddings_list", ".", "append", "(", "embeddings", ")", "\n", "\n", "", "_xnorm", "=", "0.0", "\n", "_xnorm_cnt", "=", "0", "\n", "for", "embed", "in", "embeddings_list", ":", "\n", "        ", "for", "i", "in", "range", "(", "embed", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "_em", "=", "embed", "[", "i", "]", "\n", "_norm", "=", "np", ".", "linalg", ".", "norm", "(", "_em", ")", "\n", "#print(_em.shape, _norm)", "\n", "_xnorm", "+=", "_norm", "\n", "_xnorm_cnt", "+=", "1", "\n", "", "", "_xnorm", "/=", "_xnorm_cnt", "\n", "\n", "embeddings", "=", "embeddings_list", "[", "0", "]", ".", "copy", "(", ")", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "acc1", "=", "0.0", "\n", "std1", "=", "0.0", "\n", "#_, _, accuracy, val, val_std, far = evaluate(embeddings, issame_list, nrof_folds=10)", "\n", "#acc1, std1 = np.mean(accuracy), np.std(accuracy)", "\n", "\n", "#print('Validation rate: %2.5f+-%2.5f @ FAR=%2.5f' % (val, val_std, far))", "\n", "#embeddings = np.concatenate(embeddings_list, axis=1)", "\n", "embeddings", "=", "embeddings_list", "[", "0", "]", "+", "embeddings_list", "[", "1", "]", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "print", "(", "embeddings", ".", "shape", ")", "\n"]]}