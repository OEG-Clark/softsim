{"home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.docs.conf.Mock.__getattr__": [[34, 37], ["unittest.mock.MagicMock"], "methods", ["None"], ["@", "classmethod", "\n", "def", "__getattr__", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "MagicMock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.docs.conf.setup": [[129, 131], ["app.add_css_file"], "function", ["None"], ["def", "setup", "(", "app", ")", ":", "\n", "    ", "app", ".", "add_css_file", "(", "\"css/baselines_theme.css\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.stable_baselines3.__init__.HER": [[18, 21], ["ImportError"], "function", ["None"], ["", "def", "HER", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "ImportError", "(", "\n", "\"Since Stable Baselines 2.1.0, `HER` is now a replay buffer class `HerReplayBuffer`.\\n \"", "\n", "\"Please check the documentation for more information: https://stable-baselines3.readthedocs.io/\"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.a2c.a2c.A2C.__init__": [[60, 122], ["stable_baselines3.common.on_policy_algorithm.OnPolicyAlgorithm.__init__", "dict", "a2c.A2C._setup_model"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Union", "[", "str", ",", "Type", "[", "ActorCriticPolicy", "]", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", "=", "7e-4", ",", "\n", "n_steps", ":", "int", "=", "5", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "gae_lambda", ":", "float", "=", "1.0", ",", "\n", "ent_coef", ":", "float", "=", "0.0", ",", "\n", "vf_coef", ":", "float", "=", "0.5", ",", "\n", "max_grad_norm", ":", "float", "=", "0.5", ",", "\n", "rms_prop_eps", ":", "float", "=", "1e-5", ",", "\n", "use_rms_prop", ":", "bool", "=", "True", ",", "\n", "use_sde", ":", "bool", "=", "False", ",", "\n", "sde_sample_freq", ":", "int", "=", "-", "1", ",", "\n", "normalize_advantage", ":", "bool", "=", "False", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "_init_setup_model", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", ",", "\n", "env", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "gamma", "=", "gamma", ",", "\n", "gae_lambda", "=", "gae_lambda", ",", "\n", "ent_coef", "=", "ent_coef", ",", "\n", "vf_coef", "=", "vf_coef", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "\n", "use_sde", "=", "use_sde", ",", "\n", "sde_sample_freq", "=", "sde_sample_freq", ",", "\n", "tensorboard_log", "=", "tensorboard_log", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "verbose", "=", "verbose", ",", "\n", "device", "=", "device", ",", "\n", "create_eval_env", "=", "create_eval_env", ",", "\n", "seed", "=", "seed", ",", "\n", "_init_setup_model", "=", "False", ",", "\n", "supported_action_spaces", "=", "(", "\n", "spaces", ".", "Box", ",", "\n", "spaces", ".", "Discrete", ",", "\n", "spaces", ".", "MultiDiscrete", ",", "\n", "spaces", ".", "MultiBinary", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "normalize_advantage", "=", "normalize_advantage", "\n", "\n", "# Update optimizer inside the policy if we want to use RMSProp", "\n", "# (original implementation) rather than Adam", "\n", "if", "use_rms_prop", "and", "\"optimizer_class\"", "not", "in", "self", ".", "policy_kwargs", ":", "\n", "            ", "self", ".", "policy_kwargs", "[", "\"optimizer_class\"", "]", "=", "th", ".", "optim", ".", "RMSprop", "\n", "self", ".", "policy_kwargs", "[", "\"optimizer_kwargs\"", "]", "=", "dict", "(", "alpha", "=", "0.99", ",", "eps", "=", "rms_prop_eps", ",", "weight_decay", "=", "0", ")", "\n", "\n", "", "if", "_init_setup_model", ":", "\n", "            ", "self", ".", "_setup_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.a2c.a2c.A2C.train": [[123, 183], ["a2c.A2C.policy.set_training_mode", "a2c.A2C._update_learning_rate", "a2c.A2C.rollout_buffer.get", "stable_baselines3.common.utils.explained_variance", "a2c.A2C.logger.record", "a2c.A2C.logger.record", "a2c.A2C.logger.record", "a2c.A2C.logger.record", "a2c.A2C.logger.record", "hasattr", "isinstance", "a2c.A2C.policy.evaluate_actions", "values.flatten.flatten.flatten", "torch.nn.functional.mse_loss", "a2c.A2C.policy.optimizer.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "a2c.A2C.policy.optimizer.step", "a2c.A2C.rollout_buffer.values.flatten", "a2c.A2C.rollout_buffer.returns.flatten", "entropy_loss.item", "policy_loss.item", "torch.nn.functional.mse_loss.item", "a2c.A2C.logger.record", "actions.long().flatten.long().flatten.long().flatten", "a2c.A2C.policy.parameters", "torch.exp().mean().item", "torch.mean", "torch.mean", "actions.long().flatten.long().flatten.long", "advantages.mean", "advantages.std", "torch.exp().mean", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_learning_rate", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.explained_variance", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.evaluate_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record"], ["", "", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update policy using the currently gathered\n        rollout buffer (one gradient step over whole data).\n        \"\"\"", "\n", "# Switch to train mode (this affects batch norm / dropout)", "\n", "self", ".", "policy", ".", "set_training_mode", "(", "True", ")", "\n", "\n", "# Update optimizer learning rate", "\n", "self", ".", "_update_learning_rate", "(", "self", ".", "policy", ".", "optimizer", ")", "\n", "\n", "# This will only loop once (get all data in one go)", "\n", "for", "rollout_data", "in", "self", ".", "rollout_buffer", ".", "get", "(", "batch_size", "=", "None", ")", ":", "\n", "\n", "            ", "actions", "=", "rollout_data", ".", "actions", "\n", "if", "isinstance", "(", "self", ".", "action_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "# Convert discrete action from float to long", "\n", "                ", "actions", "=", "actions", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "\n", "", "values", ",", "log_prob", ",", "entropy", "=", "self", ".", "policy", ".", "evaluate_actions", "(", "rollout_data", ".", "observations", ",", "actions", ")", "\n", "values", "=", "values", ".", "flatten", "(", ")", "\n", "\n", "# Normalize advantage (not present in the original implementation)", "\n", "advantages", "=", "rollout_data", ".", "advantages", "\n", "if", "self", ".", "normalize_advantage", ":", "\n", "                ", "advantages", "=", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "(", "advantages", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "\n", "# Policy gradient loss", "\n", "", "policy_loss", "=", "-", "(", "advantages", "*", "log_prob", ")", ".", "mean", "(", ")", "\n", "\n", "# Value loss using the TD(gae_lambda) target", "\n", "value_loss", "=", "F", ".", "mse_loss", "(", "rollout_data", ".", "returns", ",", "values", ")", "\n", "\n", "# Entropy loss favor exploration", "\n", "if", "entropy", "is", "None", ":", "\n", "# Approximate entropy when no analytical form", "\n", "                ", "entropy_loss", "=", "-", "th", ".", "mean", "(", "-", "log_prob", ")", "\n", "", "else", ":", "\n", "                ", "entropy_loss", "=", "-", "th", ".", "mean", "(", "entropy", ")", "\n", "\n", "", "loss", "=", "policy_loss", "+", "self", ".", "ent_coef", "*", "entropy_loss", "+", "self", ".", "vf_coef", "*", "value_loss", "\n", "\n", "# Optimization step", "\n", "self", ".", "policy", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Clip grad norm", "\n", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "policy", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "explained_var", "=", "explained_variance", "(", "self", ".", "rollout_buffer", ".", "values", ".", "flatten", "(", ")", ",", "self", ".", "rollout_buffer", ".", "returns", ".", "flatten", "(", ")", ")", "\n", "\n", "self", ".", "_n_updates", "+=", "1", "\n", "self", ".", "logger", ".", "record", "(", "\"train/n_updates\"", ",", "self", ".", "_n_updates", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/explained_variance\"", ",", "explained_var", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/entropy_loss\"", ",", "entropy_loss", ".", "item", "(", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/policy_loss\"", ",", "policy_loss", ".", "item", "(", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/value_loss\"", ",", "value_loss", ".", "item", "(", ")", ")", "\n", "if", "hasattr", "(", "self", ".", "policy", ",", "\"log_std\"", ")", ":", "\n", "            ", "self", ".", "logger", ".", "record", "(", "\"train/std\"", ",", "th", ".", "exp", "(", "self", ".", "policy", ".", "log_std", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.a2c.a2c.A2C.learn": [[184, 207], ["super().learn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "100", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "tb_log_name", ":", "str", "=", "\"A2C\"", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "\"A2C\"", ":", "\n", "\n", "        ", "return", "super", "(", ")", ".", "learn", "(", "\n", "total_timesteps", "=", "total_timesteps", ",", "\n", "callback", "=", "callback", ",", "\n", "log_interval", "=", "log_interval", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "eval_freq", "=", "eval_freq", ",", "\n", "n_eval_episodes", "=", "n_eval_episodes", ",", "\n", "tb_log_name", "=", "tb_log_name", ",", "\n", "eval_log_path", "=", "eval_log_path", ",", "\n", "reset_num_timesteps", "=", "reset_num_timesteps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.Actor.__init__": [[35, 61], ["stable_baselines3.common.policies.BasePolicy.__init__", "stable_baselines3.common.preprocessing.get_action_dim", "stable_baselines3.common.torch_layers.create_mlp", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_action_dim", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.create_mlp"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.Actor._get_constructor_parameters": [[62, 74], ["super()._get_constructor_parameters", "super()._get_constructor_parameters.update", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.Actor.forward": [[75, 79], ["policies.Actor.extract_features", "policies.Actor.mu"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.Actor._predict": [[80, 84], ["policies.Actor."], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.TD3Policy.__init__": [[109, 167], ["stable_baselines3.common.policies.BasePolicy.__init__", "stable_baselines3.common.torch_layers.get_actor_critic_arch", "policies.TD3Policy.net_args.copy", "policies.TD3Policy.net_args.copy", "policies.TD3Policy.critic_kwargs.update", "policies.TD3Policy._build"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.get_actor_critic_arch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._build"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.TD3Policy._build": [[168, 197], ["policies.TD3Policy.make_actor", "policies.TD3Policy.make_actor", "policies.TD3Policy.actor_target.load_state_dict", "policies.TD3Policy.optimizer_class", "policies.TD3Policy.critic_target.load_state_dict", "policies.TD3Policy.optimizer_class", "policies.TD3Policy.actor_target.set_training_mode", "policies.TD3Policy.critic_target.set_training_mode", "policies.TD3Policy.actor.state_dict", "policies.TD3Policy.actor.parameters", "policies.TD3Policy.make_critic", "policies.TD3Policy.make_critic", "policies.TD3Policy.make_critic", "policies.TD3Policy.make_critic", "policies.TD3Policy.critic.state_dict", "policies.TD3Policy.critic.parameters", "lr_schedule", "lr_schedule"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_actor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_actor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_critic", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_critic", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_critic", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_critic"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.TD3Policy._get_constructor_parameters": [[198, 215], ["super()._get_constructor_parameters", "super()._get_constructor_parameters.update", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.TD3Policy.make_actor": [[216, 219], ["policies.TD3Policy._update_features_extractor", "Actor().to", "policies.Actor"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel._update_features_extractor"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.TD3Policy.make_critic": [[220, 223], ["policies.TD3Policy._update_features_extractor", "stable_baselines3.common.policies.ContinuousCritic().to", "stable_baselines3.common.policies.ContinuousCritic"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel._update_features_extractor"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.TD3Policy.forward": [[224, 226], ["policies.TD3Policy._predict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._predict"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.TD3Policy._predict": [[227, 231], ["policies.TD3Policy.actor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.TD3Policy.set_training_mode": [[232, 243], ["policies.TD3Policy.actor.set_training_mode", "policies.TD3Policy.critic.set_training_mode"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.CnnPolicy.__init__": [[271, 299], ["policies.TD3Policy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.policies.MultiInputPolicy.__init__": [[325, 353], ["policies.TD3Policy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.td3.TD3.__init__": [[70, 130], ["stable_baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.__init__", "td3.TD3._setup_model"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Union", "[", "str", ",", "Type", "[", "TD3Policy", "]", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", "=", "1e-3", ",", "\n", "buffer_size", ":", "int", "=", "1_000_000", ",", "# 1e6", "\n", "learning_starts", ":", "int", "=", "100", ",", "\n", "batch_size", ":", "int", "=", "100", ",", "\n", "tau", ":", "float", "=", "0.005", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "train_freq", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "str", "]", "]", "=", "(", "1", ",", "\"episode\"", ")", ",", "\n", "gradient_steps", ":", "int", "=", "-", "1", ",", "\n", "action_noise", ":", "Optional", "[", "ActionNoise", "]", "=", "None", ",", "\n", "replay_buffer_class", ":", "Optional", "[", "ReplayBuffer", "]", "=", "None", ",", "\n", "replay_buffer_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "optimize_memory_usage", ":", "bool", "=", "False", ",", "\n", "policy_delay", ":", "int", "=", "2", ",", "\n", "target_policy_noise", ":", "float", "=", "0.2", ",", "\n", "target_noise_clip", ":", "float", "=", "0.5", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "_init_setup_model", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", ",", "\n", "env", ",", "\n", "learning_rate", ",", "\n", "buffer_size", ",", "\n", "learning_starts", ",", "\n", "batch_size", ",", "\n", "tau", ",", "\n", "gamma", ",", "\n", "train_freq", ",", "\n", "gradient_steps", ",", "\n", "action_noise", "=", "action_noise", ",", "\n", "replay_buffer_class", "=", "replay_buffer_class", ",", "\n", "replay_buffer_kwargs", "=", "replay_buffer_kwargs", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "tensorboard_log", "=", "tensorboard_log", ",", "\n", "verbose", "=", "verbose", ",", "\n", "device", "=", "device", ",", "\n", "create_eval_env", "=", "create_eval_env", ",", "\n", "seed", "=", "seed", ",", "\n", "sde_support", "=", "False", ",", "\n", "optimize_memory_usage", "=", "optimize_memory_usage", ",", "\n", "supported_action_spaces", "=", "(", "gym", ".", "spaces", ".", "Box", ")", ",", "\n", "support_multi_env", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "policy_delay", "=", "policy_delay", "\n", "self", ".", "target_noise_clip", "=", "target_noise_clip", "\n", "self", ".", "target_policy_noise", "=", "target_policy_noise", "\n", "\n", "if", "_init_setup_model", ":", "\n", "            ", "self", ".", "_setup_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.td3.TD3._setup_model": [[131, 134], ["super()._setup_model", "td3.TD3._create_aliases"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN._create_aliases"], ["", "", "def", "_setup_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "_setup_model", "(", ")", "\n", "self", ".", "_create_aliases", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.td3.TD3._create_aliases": [[135, 140], ["None"], "methods", ["None"], ["", "def", "_create_aliases", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "actor", "=", "self", ".", "policy", ".", "actor", "\n", "self", ".", "actor_target", "=", "self", ".", "policy", ".", "actor_target", "\n", "self", ".", "critic", "=", "self", ".", "policy", ".", "critic", "\n", "self", ".", "critic_target", "=", "self", ".", "policy", ".", "critic_target", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.td3.TD3.train": [[141, 197], ["td3.TD3.policy.set_training_mode", "td3.TD3._update_learning_rate", "range", "td3.TD3.logger.record", "td3.TD3.logger.record", "td3.TD3.replay_buffer.sample", "td3.TD3.critic", "sum", "critic_losses.append", "td3.TD3.critic.optimizer.zero_grad", "sum.backward", "td3.TD3.critic.optimizer.step", "len", "td3.TD3.logger.record", "numpy.mean", "torch.no_grad", "td3.TD3.actions.clone().data.normal_", "noise.clamp.clamp.clamp", "torch.cat", "torch.min", "sum.item", "actor_losses.append", "td3.TD3.actor.optimizer.zero_grad", "actor_loss.backward", "td3.TD3.actor.optimizer.step", "stable_baselines3.common.utils.polyak_update", "stable_baselines3.common.utils.polyak_update", "numpy.mean", "td3.TD3.critic_target", "torch.nn.functional.mse_loss", "td3.TD3.critic.q1_forward().mean", "actor_loss.item", "td3.TD3.critic.parameters", "td3.TD3.critic_target.parameters", "td3.TD3.actor.parameters", "td3.TD3.actor_target.parameters", "td3.TD3.actions.clone", "td3.TD3.actor_target", "td3.TD3.critic.q1_forward", "td3.TD3.actor"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_learning_rate", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.polyak_update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.polyak_update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ContinuousCritic.q1_forward"], ["", "def", "train", "(", "self", ",", "gradient_steps", ":", "int", ",", "batch_size", ":", "int", "=", "100", ")", "->", "None", ":", "\n", "# Switch to train mode (this affects batch norm / dropout)", "\n", "        ", "self", ".", "policy", ".", "set_training_mode", "(", "True", ")", "\n", "\n", "# Update learning rate according to lr schedule", "\n", "self", ".", "_update_learning_rate", "(", "[", "self", ".", "actor", ".", "optimizer", ",", "self", ".", "critic", ".", "optimizer", "]", ")", "\n", "\n", "actor_losses", ",", "critic_losses", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "gradient_steps", ")", ":", "\n", "\n", "            ", "self", ".", "_n_updates", "+=", "1", "\n", "# Sample replay buffer", "\n", "replay_data", "=", "self", ".", "replay_buffer", ".", "sample", "(", "batch_size", ",", "env", "=", "self", ".", "_vec_normalize_env", ")", "\n", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "# Select action according to policy and add clipped noise", "\n", "                ", "noise", "=", "replay_data", ".", "actions", ".", "clone", "(", ")", ".", "data", ".", "normal_", "(", "0", ",", "self", ".", "target_policy_noise", ")", "\n", "noise", "=", "noise", ".", "clamp", "(", "-", "self", ".", "target_noise_clip", ",", "self", ".", "target_noise_clip", ")", "\n", "next_actions", "=", "(", "self", ".", "actor_target", "(", "replay_data", ".", "next_observations", ")", "+", "noise", ")", ".", "clamp", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Compute the next Q-values: min over all critics targets", "\n", "next_q_values", "=", "th", ".", "cat", "(", "self", ".", "critic_target", "(", "replay_data", ".", "next_observations", ",", "next_actions", ")", ",", "dim", "=", "1", ")", "\n", "next_q_values", ",", "_", "=", "th", ".", "min", "(", "next_q_values", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "target_q_values", "=", "replay_data", ".", "rewards", "+", "(", "1", "-", "replay_data", ".", "dones", ")", "*", "self", ".", "gamma", "*", "next_q_values", "\n", "\n", "# Get current Q-values estimates for each critic network", "\n", "", "current_q_values", "=", "self", ".", "critic", "(", "replay_data", ".", "observations", ",", "replay_data", ".", "actions", ")", "\n", "\n", "# Compute critic loss", "\n", "critic_loss", "=", "sum", "(", "F", ".", "mse_loss", "(", "current_q", ",", "target_q_values", ")", "for", "current_q", "in", "current_q_values", ")", "\n", "critic_losses", ".", "append", "(", "critic_loss", ".", "item", "(", ")", ")", "\n", "\n", "# Optimize the critics", "\n", "self", ".", "critic", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Delayed policy updates", "\n", "if", "self", ".", "_n_updates", "%", "self", ".", "policy_delay", "==", "0", ":", "\n", "# Compute actor loss", "\n", "                ", "actor_loss", "=", "-", "self", ".", "critic", ".", "q1_forward", "(", "replay_data", ".", "observations", ",", "self", ".", "actor", "(", "replay_data", ".", "observations", ")", ")", ".", "mean", "(", ")", "\n", "actor_losses", ".", "append", "(", "actor_loss", ".", "item", "(", ")", ")", "\n", "\n", "# Optimize the actor", "\n", "self", ".", "actor", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "self", ".", "actor", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "polyak_update", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "self", ".", "critic_target", ".", "parameters", "(", ")", ",", "self", ".", "tau", ")", "\n", "polyak_update", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "self", ".", "actor_target", ".", "parameters", "(", ")", ",", "self", ".", "tau", ")", "\n", "\n", "", "", "self", ".", "logger", ".", "record", "(", "\"train/n_updates\"", ",", "self", ".", "_n_updates", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "if", "len", "(", "actor_losses", ")", ">", "0", ":", "\n", "            ", "self", ".", "logger", ".", "record", "(", "\"train/actor_loss\"", ",", "np", ".", "mean", "(", "actor_losses", ")", ")", "\n", "", "self", ".", "logger", ".", "record", "(", "\"train/critic_loss\"", ",", "np", ".", "mean", "(", "critic_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.td3.TD3.learn": [[198, 221], ["super().learn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "4", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "tb_log_name", ":", "str", "=", "\"TD3\"", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "OffPolicyAlgorithm", ":", "\n", "\n", "        ", "return", "super", "(", ")", ".", "learn", "(", "\n", "total_timesteps", "=", "total_timesteps", ",", "\n", "callback", "=", "callback", ",", "\n", "log_interval", "=", "log_interval", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "eval_freq", "=", "eval_freq", ",", "\n", "n_eval_episodes", "=", "n_eval_episodes", ",", "\n", "tb_log_name", "=", "tb_log_name", ",", "\n", "eval_log_path", "=", "eval_log_path", ",", "\n", "reset_num_timesteps", "=", "reset_num_timesteps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.td3.TD3._excluded_save_params": [[223, 225], ["super()._excluded_save_params"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._excluded_save_params"], ["", "def", "_excluded_save_params", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "super", "(", ")", ".", "_excluded_save_params", "(", ")", "+", "[", "\"actor\"", ",", "\"critic\"", ",", "\"actor_target\"", ",", "\"critic_target\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.td3.td3.TD3._get_torch_save_params": [[226, 229], ["None"], "methods", ["None"], ["", "def", "_get_torch_save_params", "(", "self", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "state_dicts", "=", "[", "\"policy\"", ",", "\"actor.optimizer\"", ",", "\"critic.optimizer\"", "]", "\n", "return", "state_dicts", ",", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.__init__": [[72, 153], ["stable_baselines3.common.buffers.DictReplayBuffer.__init__", "isinstance", "isinstance", "her_replay_buffer.get_time_limit", "stable_baselines3.common.preprocessing.get_obs_shape", "stable_baselines3.common.preprocessing.get_obs_shape", "numpy.zeros", "numpy.zeros", "collections.deque", "list", "input_shape.items", "range", "goal_selection_strategy.lower"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.get_time_limit", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_obs_shape", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_obs_shape"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env", ":", "VecEnv", ",", "\n", "buffer_size", ":", "int", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"cpu\"", ",", "\n", "replay_buffer", ":", "Optional", "[", "DictReplayBuffer", "]", "=", "None", ",", "\n", "max_episode_length", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "n_sampled_goal", ":", "int", "=", "4", ",", "\n", "goal_selection_strategy", ":", "Union", "[", "GoalSelectionStrategy", ",", "str", "]", "=", "\"future\"", ",", "\n", "online_sampling", ":", "bool", "=", "True", ",", "\n", "handle_timeout_termination", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "buffer_size", ",", "env", ".", "observation_space", ",", "env", ".", "action_space", ",", "device", ",", "env", ".", "num_envs", ")", "\n", "\n", "# convert goal_selection_strategy into GoalSelectionStrategy if string", "\n", "if", "isinstance", "(", "goal_selection_strategy", ",", "str", ")", ":", "\n", "            ", "self", ".", "goal_selection_strategy", "=", "KEY_TO_GOAL_STRATEGY", "[", "goal_selection_strategy", ".", "lower", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "goal_selection_strategy", "=", "goal_selection_strategy", "\n", "\n", "# check if goal_selection_strategy is valid", "\n", "", "assert", "isinstance", "(", "\n", "self", ".", "goal_selection_strategy", ",", "GoalSelectionStrategy", "\n", ")", ",", "f\"Invalid goal selection strategy, please use one of {list(GoalSelectionStrategy)}\"", "\n", "\n", "self", ".", "n_sampled_goal", "=", "n_sampled_goal", "\n", "# if we sample her transitions online use custom replay buffer", "\n", "self", ".", "online_sampling", "=", "online_sampling", "\n", "# compute ratio between HER replays and regular replays in percent for online HER sampling", "\n", "self", ".", "her_ratio", "=", "1", "-", "(", "1.0", "/", "(", "self", ".", "n_sampled_goal", "+", "1", ")", ")", "\n", "# maximum steps in episode", "\n", "self", ".", "max_episode_length", "=", "get_time_limit", "(", "env", ",", "max_episode_length", ")", "\n", "# storage for transitions of current episode for offline sampling", "\n", "# for online sampling, it replaces the \"classic\" replay buffer completely", "\n", "her_buffer_size", "=", "buffer_size", "if", "online_sampling", "else", "self", ".", "max_episode_length", "\n", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "buffer_size", "=", "her_buffer_size", "\n", "\n", "if", "online_sampling", ":", "\n", "            ", "replay_buffer", "=", "None", "\n", "", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "online_sampling", "=", "online_sampling", "\n", "\n", "# Handle timeouts termination properly if needed", "\n", "# see https://github.com/DLR-RM/stable-baselines3/issues/284", "\n", "self", ".", "handle_timeout_termination", "=", "handle_timeout_termination", "\n", "\n", "# buffer with episodes", "\n", "# number of episodes which can be stored until buffer size is reached", "\n", "self", ".", "max_episode_stored", "=", "self", ".", "buffer_size", "//", "self", ".", "max_episode_length", "\n", "self", ".", "current_idx", "=", "0", "\n", "# Counter to prevent overflow", "\n", "self", ".", "episode_steps", "=", "0", "\n", "\n", "# Get shape of observation and goal (usually the same)", "\n", "self", ".", "obs_shape", "=", "get_obs_shape", "(", "self", ".", "env", ".", "observation_space", ".", "spaces", "[", "\"observation\"", "]", ")", "\n", "self", ".", "goal_shape", "=", "get_obs_shape", "(", "self", ".", "env", ".", "observation_space", ".", "spaces", "[", "\"achieved_goal\"", "]", ")", "\n", "\n", "# input dimensions for buffer initialization", "\n", "input_shape", "=", "{", "\n", "\"observation\"", ":", "(", "self", ".", "env", ".", "num_envs", ",", ")", "+", "self", ".", "obs_shape", ",", "\n", "\"achieved_goal\"", ":", "(", "self", ".", "env", ".", "num_envs", ",", ")", "+", "self", ".", "goal_shape", ",", "\n", "\"desired_goal\"", ":", "(", "self", ".", "env", ".", "num_envs", ",", ")", "+", "self", ".", "goal_shape", ",", "\n", "\"action\"", ":", "(", "self", ".", "action_dim", ",", ")", ",", "\n", "\"reward\"", ":", "(", "1", ",", ")", ",", "\n", "\"next_obs\"", ":", "(", "self", ".", "env", ".", "num_envs", ",", ")", "+", "self", ".", "obs_shape", ",", "\n", "\"next_achieved_goal\"", ":", "(", "self", ".", "env", ".", "num_envs", ",", ")", "+", "self", ".", "goal_shape", ",", "\n", "\"next_desired_goal\"", ":", "(", "self", ".", "env", ".", "num_envs", ",", ")", "+", "self", ".", "goal_shape", ",", "\n", "\"done\"", ":", "(", "1", ",", ")", ",", "\n", "}", "\n", "self", ".", "_observation_keys", "=", "[", "\"observation\"", ",", "\"achieved_goal\"", ",", "\"desired_goal\"", "]", "\n", "self", ".", "_buffer", "=", "{", "\n", "key", ":", "np", ".", "zeros", "(", "(", "self", ".", "max_episode_stored", ",", "self", ".", "max_episode_length", ",", "*", "dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "key", ",", "dim", "in", "input_shape", ".", "items", "(", ")", "\n", "}", "\n", "# Store info dicts are it can be used to compute the reward (e.g. continuity cost)", "\n", "self", ".", "info_buffer", "=", "[", "deque", "(", "maxlen", "=", "self", ".", "max_episode_length", ")", "for", "_", "in", "range", "(", "self", ".", "max_episode_stored", ")", "]", "\n", "# episode length storage, needed for episodes which has less steps than the maximum length", "\n", "self", ".", "episode_lengths", "=", "np", ".", "zeros", "(", "self", ".", "max_episode_stored", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.__getstate__": [[154, 165], ["her_replay_buffer.HerReplayBuffer.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["", "def", "__getstate__", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Gets state for pickling.\n\n        Excludes self.env, as in general Env's may not be pickleable.\n        Note: when using offline sampling, this will also save the offline replay buffer.\n        \"\"\"", "\n", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "# these attributes are not pickleable", "\n", "del", "state", "[", "\"env\"", "]", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.__setstate__": [[166, 177], ["her_replay_buffer.HerReplayBuffer.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Restores pickled state.\n\n        User must call ``set_env()`` after unpickling before using.\n\n        :param state:\n        \"\"\"", "\n", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "assert", "\"env\"", "not", "in", "state", "\n", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.set_env": [[178, 188], ["ValueError"], "methods", ["None"], ["", "def", "set_env", "(", "self", ",", "env", ":", "VecEnv", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Sets the environment.\n\n        :param env:\n        \"\"\"", "\n", "if", "self", ".", "env", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trying to set env of already initialized environment.\"", ")", "\n", "\n", "", "self", ".", "env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer._get_samples": [[189, 194], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_samples", "(", "self", ",", "batch_inds", ":", "np", ".", "ndarray", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "DictReplayBufferSamples", ":", "\n", "        ", "\"\"\"\n        Abstract method from base class.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.sample": [[195, 209], ["her_replay_buffer.HerReplayBuffer._sample_transitions", "her_replay_buffer.HerReplayBuffer.replay_buffer.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer._sample_transitions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ":", "int", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "DictReplayBufferSamples", ":", "\n", "        ", "\"\"\"\n        Sample function for online sampling of HER transition,\n        this replaces the \"regular\" replay buffer ``sample()``\n        method in the ``train()`` function.\n\n        :param batch_size: Number of element to sample\n        :param env: Associated gym VecEnv\n            to normalize the observations/rewards when sampling\n        :return: Samples.\n        \"\"\"", "\n", "if", "self", ".", "replay_buffer", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "replay_buffer", ".", "sample", "(", "batch_size", ",", "env", ")", "\n", "", "return", "self", ".", "_sample_transitions", "(", "batch_size", ",", "maybe_vec_env", "=", "env", ",", "online_sampling", "=", "True", ")", "# pytype: disable=bad-return-type", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer._sample_offline": [[210, 229], ["her_replay_buffer.HerReplayBuffer._sample_transitions"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer._sample_transitions"], ["", "def", "_sample_offline", "(", "\n", "self", ",", "\n", "n_sampled_goal", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Sample function for offline sampling of HER transition,\n        in that case, only one episode is used and transitions\n        are added to the regular replay buffer.\n\n        :param n_sampled_goal: Number of sampled goals for replay\n        :return: at most(n_sampled_goal * episode_length) HER transitions.\n        \"\"\"", "\n", "# `maybe_vec_env=None` as we should store unnormalized transitions,", "\n", "# they will be normalized at sampling time", "\n", "return", "self", ".", "_sample_transitions", "(", "\n", "batch_size", "=", "None", ",", "\n", "maybe_vec_env", "=", "None", ",", "\n", "online_sampling", "=", "False", ",", "\n", "n_sampled_goal", "=", "n_sampled_goal", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.sample_goals": [[231, 266], ["numpy.random.randint", "numpy.random.randint", "ValueError"], "methods", ["None"], ["", "def", "sample_goals", "(", "\n", "self", ",", "\n", "episode_indices", ":", "np", ".", "ndarray", ",", "\n", "her_indices", ":", "np", ".", "ndarray", ",", "\n", "transitions_indices", ":", "np", ".", "ndarray", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Sample goals based on goal_selection_strategy.\n        This is a vectorized (fast) version.\n\n        :param episode_indices: Episode indices to use.\n        :param her_indices: HER indices.\n        :param transitions_indices: Transition indices to use.\n        :return: Return sampled goals.\n        \"\"\"", "\n", "her_episode_indices", "=", "episode_indices", "[", "her_indices", "]", "\n", "\n", "if", "self", ".", "goal_selection_strategy", "==", "GoalSelectionStrategy", ".", "FINAL", ":", "\n", "# replay with final state of current episode", "\n", "            ", "transitions_indices", "=", "self", ".", "episode_lengths", "[", "her_episode_indices", "]", "-", "1", "\n", "\n", "", "elif", "self", ".", "goal_selection_strategy", "==", "GoalSelectionStrategy", ".", "FUTURE", ":", "\n", "# replay with random state which comes from the same episode and was observed after current transition", "\n", "            ", "transitions_indices", "=", "np", ".", "random", ".", "randint", "(", "\n", "transitions_indices", "[", "her_indices", "]", ",", "self", ".", "episode_lengths", "[", "her_episode_indices", "]", "\n", ")", "\n", "\n", "", "elif", "self", ".", "goal_selection_strategy", "==", "GoalSelectionStrategy", ".", "EPISODE", ":", "\n", "# replay with random state which comes from the same episode as current transition", "\n", "            ", "transitions_indices", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "episode_lengths", "[", "her_episode_indices", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Strategy {self.goal_selection_strategy} for sampling goals not supported!\"", ")", "\n", "\n", "", "return", "self", ".", "_buffer", "[", "\"next_achieved_goal\"", "]", "[", "her_episode_indices", ",", "transitions_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer._sample_transitions": [[267, 382], ["her_replay_buffer.HerReplayBuffer.sample_goals", "numpy.array", "her_replay_buffer.HerReplayBuffer._normalize_obs", "her_replay_buffer.HerReplayBuffer._normalize_obs", "numpy.tile", "numpy.arange", "numpy.random.randint", "[].copy", "len", "her_replay_buffer.HerReplayBuffer.env.env_method", "stable_baselines3.common.type_aliases.DictReplayBufferSamples", "numpy.random.randint", "numpy.arange", "len", "numpy.tile", "numpy.arange", "her_replay_buffer.HerReplayBuffer._buffer.keys", "her_replay_buffer.HerReplayBuffer.to_torch", "her_replay_buffer.HerReplayBuffer.to_torch", "int", "numpy.zeros", "numpy.zeros", "numpy.arange", "len", "zip", "her_replay_buffer.HerReplayBuffer.to_torch", "her_replay_buffer.HerReplayBuffer.to_torch", "her_replay_buffer.HerReplayBuffer.to_torch", "numpy.random.randint", "her_replay_buffer.HerReplayBuffer._normalize_reward"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.sample_goals", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_method", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer._normalize_reward"], ["", "def", "_sample_transitions", "(", "\n", "self", ",", "\n", "batch_size", ":", "Optional", "[", "int", "]", ",", "\n", "maybe_vec_env", ":", "Optional", "[", "VecNormalize", "]", ",", "\n", "online_sampling", ":", "bool", ",", "\n", "n_sampled_goal", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "Union", "[", "DictReplayBufferSamples", ",", "Tuple", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"\n        :param batch_size: Number of element to sample (only used for online sampling)\n        :param env: associated gym VecEnv to normalize the observations/rewards\n            Only valid when using online sampling\n        :param online_sampling: Using online_sampling for HER or not.\n        :param n_sampled_goal: Number of sampled goals for replay. (offline sampling)\n        :return: Samples.\n        \"\"\"", "\n", "# Select which episodes to use", "\n", "if", "online_sampling", ":", "\n", "            ", "assert", "batch_size", "is", "not", "None", ",", "\"No batch_size specified for online sampling of HER transitions\"", "\n", "# Do not sample the episode with index `self.pos` as the episode is invalid", "\n", "if", "self", ".", "full", ":", "\n", "                ", "episode_indices", "=", "(", "\n", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "n_episodes_stored", ",", "batch_size", ")", "+", "self", ".", "pos", "\n", ")", "%", "self", ".", "n_episodes_stored", "\n", "", "else", ":", "\n", "                ", "episode_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_episodes_stored", ",", "batch_size", ")", "\n", "# A subset of the transitions will be relabeled using HER algorithm", "\n", "", "her_indices", "=", "np", ".", "arange", "(", "batch_size", ")", "[", ":", "int", "(", "self", ".", "her_ratio", "*", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "maybe_vec_env", "is", "None", ",", "\"Transitions must be stored unnormalized in the replay buffer\"", "\n", "assert", "n_sampled_goal", "is", "not", "None", ",", "\"No n_sampled_goal specified for offline sampling of HER transitions\"", "\n", "# Offline sampling: there is only one episode stored", "\n", "episode_length", "=", "self", ".", "episode_lengths", "[", "0", "]", "\n", "# we sample n_sampled_goal per timestep in the episode (only one is stored).", "\n", "episode_indices", "=", "np", ".", "tile", "(", "0", ",", "(", "episode_length", "*", "n_sampled_goal", ")", ")", "\n", "# we only sample virtual transitions", "\n", "# as real transitions are already stored in the replay buffer", "\n", "her_indices", "=", "np", ".", "arange", "(", "len", "(", "episode_indices", ")", ")", "\n", "\n", "", "ep_lengths", "=", "self", ".", "episode_lengths", "[", "episode_indices", "]", "\n", "\n", "if", "online_sampling", ":", "\n", "# Select which transitions to use", "\n", "            ", "transitions_indices", "=", "np", ".", "random", ".", "randint", "(", "ep_lengths", ")", "\n", "", "else", ":", "\n", "            ", "if", "her_indices", ".", "size", "==", "0", ":", "\n", "# Episode of one timestep, not enough for using the \"future\" strategy", "\n", "# no virtual transitions are created in that case", "\n", "                ", "return", "{", "}", ",", "{", "}", ",", "np", ".", "zeros", "(", "0", ")", ",", "np", ".", "zeros", "(", "0", ")", "\n", "", "else", ":", "\n", "# Repeat every transition index n_sampled_goals times", "\n", "# to sample n_sampled_goal per timestep in the episode (only one is stored).", "\n", "# Now with the corrected episode length when using \"future\" strategy", "\n", "                ", "transitions_indices", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "ep_lengths", "[", "0", "]", ")", ",", "n_sampled_goal", ")", "\n", "episode_indices", "=", "episode_indices", "[", "transitions_indices", "]", "\n", "her_indices", "=", "np", ".", "arange", "(", "len", "(", "episode_indices", ")", ")", "\n", "\n", "# get selected transitions", "\n", "", "", "transitions", "=", "{", "key", ":", "self", ".", "_buffer", "[", "key", "]", "[", "episode_indices", ",", "transitions_indices", "]", ".", "copy", "(", ")", "for", "key", "in", "self", ".", "_buffer", ".", "keys", "(", ")", "}", "\n", "\n", "# sample new desired goals and relabel the transitions", "\n", "new_goals", "=", "self", ".", "sample_goals", "(", "episode_indices", ",", "her_indices", ",", "transitions_indices", ")", "\n", "transitions", "[", "\"desired_goal\"", "]", "[", "her_indices", "]", "=", "new_goals", "\n", "\n", "# Convert info buffer to numpy array", "\n", "transitions", "[", "\"info\"", "]", "=", "np", ".", "array", "(", "\n", "[", "\n", "self", ".", "info_buffer", "[", "episode_idx", "]", "[", "transition_idx", "]", "\n", "for", "episode_idx", ",", "transition_idx", "in", "zip", "(", "episode_indices", ",", "transitions_indices", ")", "\n", "]", "\n", ")", "\n", "\n", "# Edge case: episode of one timesteps with the future strategy", "\n", "# no virtual transition can be created", "\n", "if", "len", "(", "her_indices", ")", ">", "0", ":", "\n", "# Vectorized computation of the new reward", "\n", "            ", "transitions", "[", "\"reward\"", "]", "[", "her_indices", ",", "0", "]", "=", "self", ".", "env", ".", "env_method", "(", "\n", "\"compute_reward\"", ",", "\n", "# the new state depends on the previous state and action", "\n", "# s_{t+1} = f(s_t, a_t)", "\n", "# so the next_achieved_goal depends also on the previous state and action", "\n", "# because we are in a GoalEnv:", "\n", "# r_t = reward(s_t, a_t) = reward(next_achieved_goal, desired_goal)", "\n", "# therefore we have to use \"next_achieved_goal\" and not \"achieved_goal\"", "\n", "transitions", "[", "\"next_achieved_goal\"", "]", "[", "her_indices", ",", "0", "]", ",", "\n", "# here we use the new desired goal", "\n", "transitions", "[", "\"desired_goal\"", "]", "[", "her_indices", ",", "0", "]", ",", "\n", "transitions", "[", "\"info\"", "]", "[", "her_indices", ",", "0", "]", ",", "\n", ")", "\n", "\n", "# concatenate observation with (desired) goal", "\n", "", "observations", "=", "self", ".", "_normalize_obs", "(", "transitions", ",", "maybe_vec_env", ")", "\n", "\n", "# HACK to make normalize obs and `add()` work with the next observation", "\n", "next_observations", "=", "{", "\n", "\"observation\"", ":", "transitions", "[", "\"next_obs\"", "]", ",", "\n", "\"achieved_goal\"", ":", "transitions", "[", "\"next_achieved_goal\"", "]", ",", "\n", "# The desired goal for the next observation must be the same as the previous one", "\n", "\"desired_goal\"", ":", "transitions", "[", "\"desired_goal\"", "]", ",", "\n", "}", "\n", "next_observations", "=", "self", ".", "_normalize_obs", "(", "next_observations", ",", "maybe_vec_env", ")", "\n", "\n", "if", "online_sampling", ":", "\n", "            ", "next_obs", "=", "{", "key", ":", "self", ".", "to_torch", "(", "next_observations", "[", "key", "]", "[", ":", ",", "0", ",", ":", "]", ")", "for", "key", "in", "self", ".", "_observation_keys", "}", "\n", "\n", "normalized_obs", "=", "{", "key", ":", "self", ".", "to_torch", "(", "observations", "[", "key", "]", "[", ":", ",", "0", ",", ":", "]", ")", "for", "key", "in", "self", ".", "_observation_keys", "}", "\n", "\n", "return", "DictReplayBufferSamples", "(", "\n", "observations", "=", "normalized_obs", ",", "\n", "actions", "=", "self", ".", "to_torch", "(", "transitions", "[", "\"action\"", "]", ")", ",", "\n", "next_observations", "=", "next_obs", ",", "\n", "dones", "=", "self", ".", "to_torch", "(", "transitions", "[", "\"done\"", "]", ")", ",", "\n", "rewards", "=", "self", ".", "to_torch", "(", "self", ".", "_normalize_reward", "(", "transitions", "[", "\"reward\"", "]", ",", "maybe_vec_env", ")", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "observations", ",", "next_observations", ",", "transitions", "[", "\"action\"", "]", ",", "transitions", "[", "\"reward\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.add": [[383, 441], ["her_replay_buffer.HerReplayBuffer.info_buffer[].append", "collections.deque", "her_replay_buffer.HerReplayBuffer.replay_buffer.add", "her_replay_buffer.HerReplayBuffer.store_episode", "her_replay_buffer.HerReplayBuffer._sample_her_transitions", "her_replay_buffer.HerReplayBuffer.reset", "numpy.array", "info.get"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.store_episode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer._sample_her_transitions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get"], ["", "", "def", "add", "(", "\n", "self", ",", "\n", "obs", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "next_obs", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "action", ":", "np", ".", "ndarray", ",", "\n", "reward", ":", "np", ".", "ndarray", ",", "\n", "done", ":", "np", ".", "ndarray", ",", "\n", "infos", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "if", "self", ".", "current_idx", "==", "0", "and", "self", ".", "full", ":", "\n", "# Clear info buffer", "\n", "            ", "self", ".", "info_buffer", "[", "self", ".", "pos", "]", "=", "deque", "(", "maxlen", "=", "self", ".", "max_episode_length", ")", "\n", "\n", "# Remove termination signals due to timeout", "\n", "", "if", "self", ".", "handle_timeout_termination", ":", "\n", "            ", "done_", "=", "done", "*", "(", "1", "-", "np", ".", "array", "(", "[", "info", ".", "get", "(", "\"TimeLimit.truncated\"", ",", "False", ")", "for", "info", "in", "infos", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "done_", "=", "done", "\n", "\n", "", "self", ".", "_buffer", "[", "\"observation\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "obs", "[", "\"observation\"", "]", "\n", "self", ".", "_buffer", "[", "\"achieved_goal\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "obs", "[", "\"achieved_goal\"", "]", "\n", "self", ".", "_buffer", "[", "\"desired_goal\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "obs", "[", "\"desired_goal\"", "]", "\n", "self", ".", "_buffer", "[", "\"action\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "action", "\n", "self", ".", "_buffer", "[", "\"done\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "done_", "\n", "self", ".", "_buffer", "[", "\"reward\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "reward", "\n", "self", ".", "_buffer", "[", "\"next_obs\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "next_obs", "[", "\"observation\"", "]", "\n", "self", ".", "_buffer", "[", "\"next_achieved_goal\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "next_obs", "[", "\"achieved_goal\"", "]", "\n", "self", ".", "_buffer", "[", "\"next_desired_goal\"", "]", "[", "self", ".", "pos", "]", "[", "self", ".", "current_idx", "]", "=", "next_obs", "[", "\"desired_goal\"", "]", "\n", "\n", "# When doing offline sampling", "\n", "# Add real transition to normal replay buffer", "\n", "if", "self", ".", "replay_buffer", "is", "not", "None", ":", "\n", "            ", "self", ".", "replay_buffer", ".", "add", "(", "\n", "obs", ",", "\n", "next_obs", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "done", ",", "\n", "infos", ",", "\n", ")", "\n", "\n", "", "self", ".", "info_buffer", "[", "self", ".", "pos", "]", ".", "append", "(", "infos", ")", "\n", "\n", "# update current pointer", "\n", "self", ".", "current_idx", "+=", "1", "\n", "\n", "self", ".", "episode_steps", "+=", "1", "\n", "\n", "if", "done", "or", "self", ".", "episode_steps", ">=", "self", ".", "max_episode_length", ":", "\n", "            ", "self", ".", "store_episode", "(", ")", "\n", "if", "not", "self", ".", "online_sampling", ":", "\n", "# sample virtual transitions and store them in replay buffer", "\n", "                ", "self", ".", "_sample_her_transitions", "(", ")", "\n", "# clear storage for current episode", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "self", ".", "episode_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.store_episode": [[442, 460], ["None"], "methods", ["None"], ["", "", "def", "store_episode", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Increment episode counter\n        and reset transition pointer.\n        \"\"\"", "\n", "# add episode length to length storage", "\n", "self", ".", "episode_lengths", "[", "self", ".", "pos", "]", "=", "self", ".", "current_idx", "\n", "\n", "# update current episode pointer", "\n", "# Note: in the OpenAI implementation", "\n", "# when the buffer is full, the episode replaced", "\n", "# is randomly chosen", "\n", "self", ".", "pos", "+=", "1", "\n", "if", "self", ".", "pos", "==", "self", ".", "max_episode_stored", ":", "\n", "            ", "self", ".", "full", "=", "True", "\n", "self", ".", "pos", "=", "0", "\n", "# reset transition pointer", "\n", "", "self", ".", "current_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer._sample_her_transitions": [[461, 481], ["her_replay_buffer.HerReplayBuffer._sample_offline", "len", "range", "len", "her_replay_buffer.HerReplayBuffer.replay_buffer.add", "observations.items", "next_observations.items"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer._sample_offline", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add"], ["", "def", "_sample_her_transitions", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Sample additional goals and store new transitions in replay buffer\n        when using offline sampling.\n        \"\"\"", "\n", "\n", "# Sample goals to create virtual transitions for the last episode.", "\n", "observations", ",", "next_observations", ",", "actions", ",", "rewards", "=", "self", ".", "_sample_offline", "(", "n_sampled_goal", "=", "self", ".", "n_sampled_goal", ")", "\n", "\n", "# Store virtual transitions in the replay buffer, if available", "\n", "if", "len", "(", "observations", ")", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "observations", "[", "\"observation\"", "]", ")", ")", ":", "\n", "                ", "self", ".", "replay_buffer", ".", "add", "(", "\n", "{", "key", ":", "obs", "[", "i", "]", "for", "key", ",", "obs", "in", "observations", ".", "items", "(", ")", "}", ",", "\n", "{", "key", ":", "next_obs", "[", "i", "]", "for", "key", ",", "next_obs", "in", "next_observations", ".", "items", "(", ")", "}", ",", "\n", "actions", "[", "i", "]", ",", "\n", "rewards", "[", "i", "]", ",", "\n", "# We consider the transition as non-terminal", "\n", "done", "=", "[", "False", "]", ",", "\n", "infos", "=", "[", "{", "}", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.n_episodes_stored": [[483, 488], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "n_episodes_stored", "(", "self", ")", "->", "int", ":", "\n", "        ", "if", "self", ".", "full", ":", "\n", "            ", "return", "self", ".", "max_episode_stored", "\n", "", "return", "self", ".", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.size": [[489, 494], ["int", "numpy.sum"], "methods", ["None"], ["", "def", "size", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        :return: The current number of transitions in the buffer.\n        \"\"\"", "\n", "return", "int", "(", "np", ".", "sum", "(", "self", ".", "episode_lengths", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.reset": [[495, 503], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Reset the buffer.\n        \"\"\"", "\n", "self", ".", "pos", "=", "0", "\n", "self", ".", "current_idx", "=", "0", "\n", "self", ".", "full", "=", "False", "\n", "self", ".", "episode_lengths", "=", "np", ".", "zeros", "(", "self", ".", "max_episode_stored", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.truncate_last_trajectory": [[504, 534], ["warnings.warn", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "def", "truncate_last_trajectory", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Only for online sampling, called when loading the replay buffer.\n        If called, we assume that the last trajectory in the replay buffer was finished\n        (and truncate it).\n        If not called, we assume that we continue the same trajectory (same episode).\n        \"\"\"", "\n", "# If we are at the start of an episode, no need to truncate", "\n", "current_idx", "=", "self", ".", "current_idx", "\n", "\n", "# truncate interrupted episode", "\n", "if", "current_idx", ">", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"The last trajectory in the replay buffer will be truncated.\\n\"", "\n", "\"If you are in the same episode as when the replay buffer was saved,\\n\"", "\n", "\"you should use `truncate_last_trajectory=False` to avoid that issue.\"", "\n", ")", "\n", "# get current episode and transition index", "\n", "pos", "=", "self", ".", "pos", "\n", "# set episode length for current episode", "\n", "self", ".", "episode_lengths", "[", "pos", "]", "=", "current_idx", "\n", "# set done = True for current episode", "\n", "# current_idx was already incremented", "\n", "self", ".", "_buffer", "[", "\"done\"", "]", "[", "pos", "]", "[", "current_idx", "-", "1", "]", "=", "np", ".", "array", "(", "[", "True", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# reset current transition index", "\n", "self", ".", "current_idx", "=", "0", "\n", "# increment episode counter", "\n", "self", ".", "pos", "=", "(", "self", ".", "pos", "+", "1", ")", "%", "self", ".", "max_episode_stored", "\n", "# update \"full\" indicator", "\n", "self", ".", "full", "=", "self", ".", "full", "or", "self", ".", "pos", "==", "0", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.get_time_limit": [[15, 39], ["ValueError", "env.get_attr"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr"], ["def", "get_time_limit", "(", "env", ":", "VecEnv", ",", "current_max_episode_length", ":", "Optional", "[", "int", "]", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Get time limit from environment.\n\n    :param env: Environment from which we want to get the time limit.\n    :param current_max_episode_length: Current value for max_episode_length.\n    :return: max episode length\n    \"\"\"", "\n", "# try to get the attribute from environment", "\n", "if", "current_max_episode_length", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "current_max_episode_length", "=", "env", ".", "get_attr", "(", "\"spec\"", ")", "[", "0", "]", ".", "max_episode_steps", "\n", "# Raise the error because the attribute is present but is None", "\n", "if", "current_max_episode_length", "is", "None", ":", "\n", "                ", "raise", "AttributeError", "\n", "# if not available check if a valid value was passed as an argument", "\n", "", "", "except", "AttributeError", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The max episode length could not be inferred.\\n\"", "\n", "\"You must specify a `max_episode_steps` when registering the environment,\\n\"", "\n", "\"use a `gym.wrappers.TimeLimit` wrapper \"", "\n", "\"or pass `max_episode_length` to the model constructor\"", "\n", ")", "from", "e", "\n", "", "", "return", "current_max_episode_length", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.ppo.ppo.PPO.__init__": [[74, 163], ["stable_baselines3.common.on_policy_algorithm.OnPolicyAlgorithm.__init__", "ppo.PPO._setup_model", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Union", "[", "str", ",", "Type", "[", "ActorCriticPolicy", "]", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", "=", "3e-4", ",", "\n", "n_steps", ":", "int", "=", "2048", ",", "\n", "batch_size", ":", "int", "=", "64", ",", "\n", "n_epochs", ":", "int", "=", "10", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "gae_lambda", ":", "float", "=", "0.95", ",", "\n", "clip_range", ":", "Union", "[", "float", ",", "Schedule", "]", "=", "0.2", ",", "\n", "clip_range_vf", ":", "Union", "[", "None", ",", "float", ",", "Schedule", "]", "=", "None", ",", "\n", "normalize_advantage", ":", "bool", "=", "True", ",", "\n", "ent_coef", ":", "float", "=", "0.0", ",", "\n", "vf_coef", ":", "float", "=", "0.5", ",", "\n", "max_grad_norm", ":", "float", "=", "0.5", ",", "\n", "use_sde", ":", "bool", "=", "False", ",", "\n", "sde_sample_freq", ":", "int", "=", "-", "1", ",", "\n", "target_kl", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "_init_setup_model", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", ",", "\n", "env", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "gamma", "=", "gamma", ",", "\n", "gae_lambda", "=", "gae_lambda", ",", "\n", "ent_coef", "=", "ent_coef", ",", "\n", "vf_coef", "=", "vf_coef", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "\n", "use_sde", "=", "use_sde", ",", "\n", "sde_sample_freq", "=", "sde_sample_freq", ",", "\n", "tensorboard_log", "=", "tensorboard_log", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "verbose", "=", "verbose", ",", "\n", "device", "=", "device", ",", "\n", "create_eval_env", "=", "create_eval_env", ",", "\n", "seed", "=", "seed", ",", "\n", "_init_setup_model", "=", "False", ",", "\n", "supported_action_spaces", "=", "(", "\n", "spaces", ".", "Box", ",", "\n", "spaces", ".", "Discrete", ",", "\n", "spaces", ".", "MultiDiscrete", ",", "\n", "spaces", ".", "MultiBinary", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Sanity check, otherwise it will lead to noisy gradient and NaN", "\n", "# because of the advantage normalization", "\n", "if", "normalize_advantage", ":", "\n", "            ", "assert", "(", "\n", "batch_size", ">", "1", "\n", ")", ",", "\"`batch_size` must be greater than 1. See https://github.com/DLR-RM/stable-baselines3/issues/440\"", "\n", "\n", "", "if", "self", ".", "env", "is", "not", "None", ":", "\n", "# Check that `n_steps * n_envs > 1` to avoid NaN", "\n", "# when doing advantage normalization", "\n", "            ", "buffer_size", "=", "self", ".", "env", ".", "num_envs", "*", "self", ".", "n_steps", "\n", "assert", "(", "\n", "buffer_size", ">", "1", "\n", ")", ",", "f\"`n_steps * n_envs` must be greater than 1. Currently n_steps={self.n_steps} and n_envs={self.env.num_envs}\"", "\n", "# Check that the rollout buffer size is a multiple of the mini-batch size", "\n", "untruncated_batches", "=", "buffer_size", "//", "batch_size", "\n", "if", "buffer_size", "%", "batch_size", ">", "0", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "f\"You have specified a mini-batch size of {batch_size},\"", "\n", "f\" but because the `RolloutBuffer` is of size `n_steps * n_envs = {buffer_size}`,\"", "\n", "f\" after every {untruncated_batches} untruncated mini-batches,\"", "\n", "f\" there will be a truncated mini-batch of size {buffer_size % batch_size}\\n\"", "\n", "f\"We recommend using a `batch_size` that is a factor of `n_steps * n_envs`.\\n\"", "\n", "f\"Info: (n_steps={self.n_steps} and n_envs={self.env.num_envs})\"", "\n", ")", "\n", "", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "clip_range", "=", "clip_range", "\n", "self", ".", "clip_range_vf", "=", "clip_range_vf", "\n", "self", ".", "normalize_advantage", "=", "normalize_advantage", "\n", "self", ".", "target_kl", "=", "target_kl", "\n", "\n", "if", "_init_setup_model", ":", "\n", "            ", "self", ".", "_setup_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.ppo.ppo.PPO._setup_model": [[164, 174], ["super()._setup_model", "stable_baselines3.common.utils.get_schedule_fn", "isinstance", "stable_baselines3.common.utils.get_schedule_fn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_schedule_fn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_schedule_fn"], ["", "", "def", "_setup_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "_setup_model", "(", ")", "\n", "\n", "# Initialize schedules for policy/value clipping", "\n", "self", ".", "clip_range", "=", "get_schedule_fn", "(", "self", ".", "clip_range", ")", "\n", "if", "self", ".", "clip_range_vf", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "clip_range_vf", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "                ", "assert", "self", ".", "clip_range_vf", ">", "0", ",", "\"`clip_range_vf` must be positive, \"", "\"pass `None` to deactivate vf clipping\"", "\n", "\n", "", "self", ".", "clip_range_vf", "=", "get_schedule_fn", "(", "self", ".", "clip_range_vf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.ppo.ppo.PPO.train": [[175, 296], ["ppo.PPO.policy.set_training_mode", "ppo.PPO._update_learning_rate", "ppo.PPO.clip_range", "range", "stable_baselines3.common.utils.explained_variance", "ppo.PPO.logger.record", "ppo.PPO.logger.record", "ppo.PPO.logger.record", "ppo.PPO.logger.record", "ppo.PPO.logger.record", "ppo.PPO.logger.record", "ppo.PPO.logger.record", "hasattr", "ppo.PPO.logger.record", "ppo.PPO.logger.record", "ppo.PPO.clip_range_vf", "ppo.PPO.rollout_buffer.get", "ppo.PPO.rollout_buffer.values.flatten", "ppo.PPO.rollout_buffer.returns.flatten", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "loss.item", "ppo.PPO.logger.record", "ppo.PPO.logger.record", "isinstance", "ppo.PPO.policy.evaluate_actions", "values.flatten.flatten.flatten", "torch.exp", "pg_losses.append", "torch.mean().item", "clip_fractions.append", "torch.nn.functional.mse_loss", "value_losses.append", "entropy_losses.append", "ppo.PPO.policy.optimizer.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "ppo.PPO.policy.optimizer.step", "torch.exp().mean().item", "rollout_data.actions.long().flatten", "ppo.PPO.policy.reset_noise", "torch.clamp", "torch.min().mean", "policy_loss.item", "torch.nn.functional.mse_loss.item", "entropy_loss.item", "torch.no_grad", "torch.mean().cpu().numpy", "approx_kl_divs.append", "ppo.PPO.policy.parameters", "torch.mean", "torch.clamp", "torch.mean", "torch.mean", "print", "torch.exp().mean", "rollout_data.actions.long", "advantages.mean", "advantages.std", "torch.min", "torch.mean().cpu", "torch.exp", "torch.mean", "torch.abs", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_learning_rate", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.explained_variance", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.evaluate_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise"], ["", "", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update policy using the currently gathered rollout buffer.\n        \"\"\"", "\n", "# Switch to train mode (this affects batch norm / dropout)", "\n", "self", ".", "policy", ".", "set_training_mode", "(", "True", ")", "\n", "# Update optimizer learning rate", "\n", "self", ".", "_update_learning_rate", "(", "self", ".", "policy", ".", "optimizer", ")", "\n", "# Compute current clip range", "\n", "clip_range", "=", "self", ".", "clip_range", "(", "self", ".", "_current_progress_remaining", ")", "\n", "# Optional: clip range for the value function", "\n", "if", "self", ".", "clip_range_vf", "is", "not", "None", ":", "\n", "            ", "clip_range_vf", "=", "self", ".", "clip_range_vf", "(", "self", ".", "_current_progress_remaining", ")", "\n", "\n", "", "entropy_losses", "=", "[", "]", "\n", "pg_losses", ",", "value_losses", "=", "[", "]", ",", "[", "]", "\n", "clip_fractions", "=", "[", "]", "\n", "\n", "continue_training", "=", "True", "\n", "\n", "# train for n_epochs epochs", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "approx_kl_divs", "=", "[", "]", "\n", "# Do a complete pass on the rollout buffer", "\n", "for", "rollout_data", "in", "self", ".", "rollout_buffer", ".", "get", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "actions", "=", "rollout_data", ".", "actions", "\n", "if", "isinstance", "(", "self", ".", "action_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "# Convert discrete action from float to long", "\n", "                    ", "actions", "=", "rollout_data", ".", "actions", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "\n", "# Re-sample the noise matrix because the log_std has changed", "\n", "", "if", "self", ".", "use_sde", ":", "\n", "                    ", "self", ".", "policy", ".", "reset_noise", "(", "self", ".", "batch_size", ")", "\n", "\n", "", "values", ",", "log_prob", ",", "entropy", "=", "self", ".", "policy", ".", "evaluate_actions", "(", "rollout_data", ".", "observations", ",", "actions", ")", "\n", "values", "=", "values", ".", "flatten", "(", ")", "\n", "# Normalize advantage", "\n", "advantages", "=", "rollout_data", ".", "advantages", "\n", "if", "self", ".", "normalize_advantage", ":", "\n", "                    ", "advantages", "=", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "(", "advantages", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "\n", "# ratio between old and new policy, should be one at the first iteration", "\n", "", "ratio", "=", "th", ".", "exp", "(", "log_prob", "-", "rollout_data", ".", "old_log_prob", ")", "\n", "\n", "# clipped surrogate loss", "\n", "policy_loss_1", "=", "advantages", "*", "ratio", "\n", "policy_loss_2", "=", "advantages", "*", "th", ".", "clamp", "(", "ratio", ",", "1", "-", "clip_range", ",", "1", "+", "clip_range", ")", "\n", "policy_loss", "=", "-", "th", ".", "min", "(", "policy_loss_1", ",", "policy_loss_2", ")", ".", "mean", "(", ")", "\n", "\n", "# Logging", "\n", "pg_losses", ".", "append", "(", "policy_loss", ".", "item", "(", ")", ")", "\n", "clip_fraction", "=", "th", ".", "mean", "(", "(", "th", ".", "abs", "(", "ratio", "-", "1", ")", ">", "clip_range", ")", ".", "float", "(", ")", ")", ".", "item", "(", ")", "\n", "clip_fractions", ".", "append", "(", "clip_fraction", ")", "\n", "\n", "if", "self", ".", "clip_range_vf", "is", "None", ":", "\n", "# No clipping", "\n", "                    ", "values_pred", "=", "values", "\n", "", "else", ":", "\n", "# Clip the different between old and new value", "\n", "# NOTE: this depends on the reward scaling", "\n", "                    ", "values_pred", "=", "rollout_data", ".", "old_values", "+", "th", ".", "clamp", "(", "\n", "values", "-", "rollout_data", ".", "old_values", ",", "-", "clip_range_vf", ",", "clip_range_vf", "\n", ")", "\n", "# Value loss using the TD(gae_lambda) target", "\n", "", "value_loss", "=", "F", ".", "mse_loss", "(", "rollout_data", ".", "returns", ",", "values_pred", ")", "\n", "value_losses", ".", "append", "(", "value_loss", ".", "item", "(", ")", ")", "\n", "\n", "# Entropy loss favor exploration", "\n", "if", "entropy", "is", "None", ":", "\n", "# Approximate entropy when no analytical form", "\n", "                    ", "entropy_loss", "=", "-", "th", ".", "mean", "(", "-", "log_prob", ")", "\n", "", "else", ":", "\n", "                    ", "entropy_loss", "=", "-", "th", ".", "mean", "(", "entropy", ")", "\n", "\n", "", "entropy_losses", ".", "append", "(", "entropy_loss", ".", "item", "(", ")", ")", "\n", "\n", "loss", "=", "policy_loss", "+", "self", ".", "ent_coef", "*", "entropy_loss", "+", "self", ".", "vf_coef", "*", "value_loss", "\n", "\n", "# Calculate approximate form of reverse KL Divergence for early stopping", "\n", "# see issue #417: https://github.com/DLR-RM/stable-baselines3/issues/417", "\n", "# and discussion in PR #419: https://github.com/DLR-RM/stable-baselines3/pull/419", "\n", "# and Schulman blog: http://joschu.net/blog/kl-approx.html", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "                    ", "log_ratio", "=", "log_prob", "-", "rollout_data", ".", "old_log_prob", "\n", "approx_kl_div", "=", "th", ".", "mean", "(", "(", "th", ".", "exp", "(", "log_ratio", ")", "-", "1", ")", "-", "log_ratio", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "approx_kl_divs", ".", "append", "(", "approx_kl_div", ")", "\n", "\n", "", "if", "self", ".", "target_kl", "is", "not", "None", "and", "approx_kl_div", ">", "1.5", "*", "self", ".", "target_kl", ":", "\n", "                    ", "continue_training", "=", "False", "\n", "if", "self", ".", "verbose", ">=", "1", ":", "\n", "                        ", "print", "(", "f\"Early stopping at step {epoch} due to reaching max kl: {approx_kl_div:.2f}\"", ")", "\n", "", "break", "\n", "\n", "# Optimization step", "\n", "", "self", ".", "policy", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Clip grad norm", "\n", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "policy", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "not", "continue_training", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "_n_updates", "+=", "self", ".", "n_epochs", "\n", "explained_var", "=", "explained_variance", "(", "self", ".", "rollout_buffer", ".", "values", ".", "flatten", "(", ")", ",", "self", ".", "rollout_buffer", ".", "returns", ".", "flatten", "(", ")", ")", "\n", "\n", "# Logs", "\n", "self", ".", "logger", ".", "record", "(", "\"train/entropy_loss\"", ",", "np", ".", "mean", "(", "entropy_losses", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/policy_gradient_loss\"", ",", "np", ".", "mean", "(", "pg_losses", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/value_loss\"", ",", "np", ".", "mean", "(", "value_losses", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/approx_kl\"", ",", "np", ".", "mean", "(", "approx_kl_divs", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/clip_fraction\"", ",", "np", ".", "mean", "(", "clip_fractions", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/loss\"", ",", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/explained_variance\"", ",", "explained_var", ")", "\n", "if", "hasattr", "(", "self", ".", "policy", ",", "\"log_std\"", ")", ":", "\n", "            ", "self", ".", "logger", ".", "record", "(", "\"train/std\"", ",", "th", ".", "exp", "(", "self", ".", "policy", ".", "log_std", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "record", "(", "\"train/n_updates\"", ",", "self", ".", "_n_updates", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/clip_range\"", ",", "clip_range", ")", "\n", "if", "self", ".", "clip_range_vf", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "record", "(", "\"train/clip_range_vf\"", ",", "clip_range_vf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.ppo.ppo.PPO.learn": [[297, 320], ["super().learn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "1", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "tb_log_name", ":", "str", "=", "\"PPO\"", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "\"PPO\"", ":", "\n", "\n", "        ", "return", "super", "(", ")", ".", "learn", "(", "\n", "total_timesteps", "=", "total_timesteps", ",", "\n", "callback", "=", "callback", ",", "\n", "log_interval", "=", "log_interval", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "eval_freq", "=", "eval_freq", ",", "\n", "n_eval_episodes", "=", "n_eval_episodes", ",", "\n", "tb_log_name", "=", "tb_log_name", ",", "\n", "eval_log_path", "=", "eval_log_path", ",", "\n", "reset_num_timesteps", "=", "reset_num_timesteps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.ddpg.ddpg.DDPG.__init__": [[56, 116], ["stable_baselines3.td3.td3.TD3.__init__", "ddpg.DDPG._setup_model"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Union", "[", "str", ",", "Type", "[", "TD3Policy", "]", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", "=", "1e-3", ",", "\n", "buffer_size", ":", "int", "=", "1_000_000", ",", "# 1e6", "\n", "learning_starts", ":", "int", "=", "100", ",", "\n", "batch_size", ":", "int", "=", "100", ",", "\n", "tau", ":", "float", "=", "0.005", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "train_freq", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "str", "]", "]", "=", "(", "1", ",", "\"episode\"", ")", ",", "\n", "gradient_steps", ":", "int", "=", "-", "1", ",", "\n", "action_noise", ":", "Optional", "[", "ActionNoise", "]", "=", "None", ",", "\n", "replay_buffer_class", ":", "Optional", "[", "ReplayBuffer", "]", "=", "None", ",", "\n", "replay_buffer_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "optimize_memory_usage", ":", "bool", "=", "False", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "_init_setup_model", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policy", ",", "\n", "env", "=", "env", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "learning_starts", "=", "learning_starts", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "tau", "=", "tau", ",", "\n", "gamma", "=", "gamma", ",", "\n", "train_freq", "=", "train_freq", ",", "\n", "gradient_steps", "=", "gradient_steps", ",", "\n", "action_noise", "=", "action_noise", ",", "\n", "replay_buffer_class", "=", "replay_buffer_class", ",", "\n", "replay_buffer_kwargs", "=", "replay_buffer_kwargs", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "tensorboard_log", "=", "tensorboard_log", ",", "\n", "verbose", "=", "verbose", ",", "\n", "device", "=", "device", ",", "\n", "create_eval_env", "=", "create_eval_env", ",", "\n", "seed", "=", "seed", ",", "\n", "optimize_memory_usage", "=", "optimize_memory_usage", ",", "\n", "# Remove all tricks from TD3 to obtain DDPG:", "\n", "# we still need to specify target_policy_noise > 0 to avoid errors", "\n", "policy_delay", "=", "1", ",", "\n", "target_noise_clip", "=", "0.0", ",", "\n", "target_policy_noise", "=", "0.1", ",", "\n", "_init_setup_model", "=", "False", ",", "\n", ")", "\n", "\n", "# Use only one critic", "\n", "if", "\"n_critics\"", "not", "in", "self", ".", "policy_kwargs", ":", "\n", "            ", "self", ".", "policy_kwargs", "[", "\"n_critics\"", "]", "=", "1", "\n", "\n", "", "if", "_init_setup_model", ":", "\n", "            ", "self", ".", "_setup_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.ddpg.ddpg.DDPG.learn": [[117, 140], ["super().learn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "4", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "tb_log_name", ":", "str", "=", "\"DDPG\"", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "OffPolicyAlgorithm", ":", "\n", "\n", "        ", "return", "super", "(", ")", ".", "learn", "(", "\n", "total_timesteps", "=", "total_timesteps", ",", "\n", "callback", "=", "callback", ",", "\n", "log_interval", "=", "log_interval", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "eval_freq", "=", "eval_freq", ",", "\n", "n_eval_episodes", "=", "n_eval_episodes", ",", "\n", "tb_log_name", "=", "tb_log_name", ",", "\n", "eval_log_path", "=", "eval_log_path", ",", "\n", "reset_num_timesteps", "=", "reset_num_timesteps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.__init__": [[52, 111], ["stable_baselines3.common.policies.BasePolicy.__init__", "stable_baselines3.common.preprocessing.get_action_dim", "stable_baselines3.common.torch_layers.create_mlp", "torch.nn.Sequential", "warnings.warn", "stable_baselines3.common.distributions.StateDependentNoiseDistribution", "policies.Actor.action_dist.proba_distribution_net", "stable_baselines3.common.distributions.SquashedDiagGaussianDistribution", "torch.nn.Linear", "torch.nn.Linear", "len", "torch.nn.Sequential", "torch.nn.Hardtanh"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_action_dim", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.create_mlp", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor._get_constructor_parameters": [[112, 129], ["super()._get_constructor_parameters", "super()._get_constructor_parameters.update", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.get_std": [[130, 143], ["isinstance", "policies.Actor.action_dist.get_std"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.get_std"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.reset_noise": [[144, 153], ["isinstance", "policies.Actor.action_dist.sample_weights"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample_weights"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.get_action_dist_params": [[154, 173], ["policies.Actor.extract_features", "policies.Actor.latent_pi", "policies.Actor.mu", "policies.Actor.log_std", "torch.clamp", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.forward": [[174, 178], ["policies.Actor.get_action_dist_params", "policies.Actor.action_dist.actions_from_params"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.get_action_dist_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.actions_from_params"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.action_log_prob": [[179, 183], ["policies.Actor.get_action_dist_params", "policies.Actor.action_dist.log_prob_from_params"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.get_action_dist_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob_from_params"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor._predict": [[184, 186], ["policies.Actor."], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.__init__": [[220, 290], ["stable_baselines3.common.policies.BasePolicy.__init__", "stable_baselines3.common.torch_layers.get_actor_critic_arch", "policies.SACPolicy.net_args.copy", "policies.SACPolicy.actor_kwargs.update", "policies.SACPolicy.net_args.copy", "policies.SACPolicy.critic_kwargs.update", "policies.SACPolicy._build", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.get_actor_critic_arch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._build", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy._build": [[291, 314], ["policies.SACPolicy.make_actor", "policies.SACPolicy.optimizer_class", "policies.SACPolicy.make_critic", "policies.SACPolicy.critic_target.load_state_dict", "policies.SACPolicy.optimizer_class", "policies.SACPolicy.critic_target.set_training_mode", "policies.SACPolicy.actor.parameters", "policies.SACPolicy.make_critic", "policies.SACPolicy.make_critic", "policies.SACPolicy.critic.parameters", "policies.SACPolicy.critic.state_dict", "lr_schedule", "lr_schedule", "policies.SACPolicy.critic.named_parameters"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_actor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_critic", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_critic", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_critic"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy._get_constructor_parameters": [[315, 335], ["super()._get_constructor_parameters", "super()._get_constructor_parameters.update", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.reset_noise": [[336, 343], ["policies.SACPolicy.actor.reset_noise"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_actor": [[344, 347], ["policies.SACPolicy._update_features_extractor", "Actor().to", "policies.Actor"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel._update_features_extractor"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.make_critic": [[348, 351], ["policies.SACPolicy._update_features_extractor", "stable_baselines3.common.policies.ContinuousCritic().to", "stable_baselines3.common.policies.ContinuousCritic"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel._update_features_extractor"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.forward": [[352, 354], ["policies.SACPolicy._predict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._predict"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy._predict": [[355, 357], ["policies.SACPolicy.actor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.SACPolicy.set_training_mode": [[358, 369], ["policies.SACPolicy.actor.set_training_mode", "policies.SACPolicy.critic.set_training_mode"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.CnnPolicy.__init__": [[404, 442], ["policies.SACPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.MultiInputPolicy.__init__": [[475, 513], ["policies.SACPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.sac.SAC.__init__": [[82, 151], ["stable_baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.__init__", "sac.SAC._setup_model"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Union", "[", "str", ",", "Type", "[", "SACPolicy", "]", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", "=", "3e-4", ",", "\n", "buffer_size", ":", "int", "=", "1_000_000", ",", "# 1e6", "\n", "learning_starts", ":", "int", "=", "100", ",", "\n", "batch_size", ":", "int", "=", "256", ",", "\n", "tau", ":", "float", "=", "0.005", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "train_freq", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "str", "]", "]", "=", "1", ",", "\n", "gradient_steps", ":", "int", "=", "1", ",", "\n", "action_noise", ":", "Optional", "[", "ActionNoise", "]", "=", "None", ",", "\n", "replay_buffer_class", ":", "Optional", "[", "ReplayBuffer", "]", "=", "None", ",", "\n", "replay_buffer_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "optimize_memory_usage", ":", "bool", "=", "False", ",", "\n", "ent_coef", ":", "Union", "[", "str", ",", "float", "]", "=", "\"auto\"", ",", "\n", "target_update_interval", ":", "int", "=", "1", ",", "\n", "target_entropy", ":", "Union", "[", "str", ",", "float", "]", "=", "\"auto\"", ",", "\n", "use_sde", ":", "bool", "=", "False", ",", "\n", "sde_sample_freq", ":", "int", "=", "-", "1", ",", "\n", "use_sde_at_warmup", ":", "bool", "=", "False", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "_init_setup_model", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", ",", "\n", "env", ",", "\n", "learning_rate", ",", "\n", "buffer_size", ",", "\n", "learning_starts", ",", "\n", "batch_size", ",", "\n", "tau", ",", "\n", "gamma", ",", "\n", "train_freq", ",", "\n", "gradient_steps", ",", "\n", "action_noise", ",", "\n", "replay_buffer_class", "=", "replay_buffer_class", ",", "\n", "replay_buffer_kwargs", "=", "replay_buffer_kwargs", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "tensorboard_log", "=", "tensorboard_log", ",", "\n", "verbose", "=", "verbose", ",", "\n", "device", "=", "device", ",", "\n", "create_eval_env", "=", "create_eval_env", ",", "\n", "seed", "=", "seed", ",", "\n", "use_sde", "=", "use_sde", ",", "\n", "sde_sample_freq", "=", "sde_sample_freq", ",", "\n", "use_sde_at_warmup", "=", "use_sde_at_warmup", ",", "\n", "optimize_memory_usage", "=", "optimize_memory_usage", ",", "\n", "supported_action_spaces", "=", "(", "gym", ".", "spaces", ".", "Box", ")", ",", "\n", "support_multi_env", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "target_entropy", "=", "target_entropy", "\n", "self", ".", "log_ent_coef", "=", "None", "# type: Optional[th.Tensor]", "\n", "# Entropy coefficient / Entropy temperature", "\n", "# Inverse of the reward scale", "\n", "self", ".", "ent_coef", "=", "ent_coef", "\n", "self", ".", "target_update_interval", "=", "target_update_interval", "\n", "self", ".", "ent_coef_optimizer", "=", "None", "\n", "\n", "if", "_init_setup_model", ":", "\n", "            ", "self", ".", "_setup_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.sac.SAC._setup_model": [[152, 183], ["super()._setup_model", "sac.SAC._create_aliases", "float", "isinstance", "sac.SAC.ent_coef.startswith", "torch.log().requires_grad_", "torch.optim.Adam", "torch.tensor().to", "numpy.prod().astype", "float", "torch.log", "sac.SAC.lr_schedule", "torch.tensor", "numpy.prod", "sac.SAC.ent_coef.split", "float", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN._create_aliases", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "", "def", "_setup_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "_setup_model", "(", ")", "\n", "self", ".", "_create_aliases", "(", ")", "\n", "# Target entropy is used when learning the entropy coefficient", "\n", "if", "self", ".", "target_entropy", "==", "\"auto\"", ":", "\n", "# automatically set target entropy if needed", "\n", "            ", "self", ".", "target_entropy", "=", "-", "np", ".", "prod", "(", "self", ".", "env", ".", "action_space", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "# Force conversion", "\n", "# this will also throw an error for unexpected string", "\n", "            ", "self", ".", "target_entropy", "=", "float", "(", "self", ".", "target_entropy", ")", "\n", "\n", "# The entropy coefficient or entropy can be learned automatically", "\n", "# see Automating Entropy Adjustment for Maximum Entropy RL section", "\n", "# of https://arxiv.org/abs/1812.05905", "\n", "", "if", "isinstance", "(", "self", ".", "ent_coef", ",", "str", ")", "and", "self", ".", "ent_coef", ".", "startswith", "(", "\"auto\"", ")", ":", "\n", "# Default initial value of ent_coef when learned", "\n", "            ", "init_value", "=", "1.0", "\n", "if", "\"_\"", "in", "self", ".", "ent_coef", ":", "\n", "                ", "init_value", "=", "float", "(", "self", ".", "ent_coef", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "assert", "init_value", ">", "0.0", ",", "\"The initial value of ent_coef must be greater than 0\"", "\n", "\n", "# Note: we optimize the log of the entropy coeff which is slightly different from the paper", "\n", "# as discussed in https://github.com/rail-berkeley/softlearning/issues/37", "\n", "", "self", ".", "log_ent_coef", "=", "th", ".", "log", "(", "th", ".", "ones", "(", "1", ",", "device", "=", "self", ".", "device", ")", "*", "init_value", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "ent_coef_optimizer", "=", "th", ".", "optim", ".", "Adam", "(", "[", "self", ".", "log_ent_coef", "]", ",", "lr", "=", "self", ".", "lr_schedule", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "# Force conversion to float", "\n", "# this will throw an error if a malformed string (different from 'auto')", "\n", "# is passed", "\n", "            ", "self", ".", "ent_coef_tensor", "=", "th", ".", "tensor", "(", "float", "(", "self", ".", "ent_coef", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.sac.SAC._create_aliases": [[184, 188], ["None"], "methods", ["None"], ["", "", "def", "_create_aliases", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "actor", "=", "self", ".", "policy", ".", "actor", "\n", "self", ".", "critic", "=", "self", ".", "policy", ".", "critic", "\n", "self", ".", "critic_target", "=", "self", ".", "policy", ".", "critic_target", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.sac.SAC.train": [[189, 284], ["sac.SAC.policy.set_training_mode", "sac.SAC._update_learning_rate", "range", "sac.SAC.logger.record", "sac.SAC.logger.record", "sac.SAC.logger.record", "sac.SAC.logger.record", "sac.SAC.replay_buffer.sample", "sac.SAC.actor.action_log_prob", "log_prob.reshape.reshape.reshape", "ent_coefs.append", "sac.SAC.critic", "critic_losses.append", "sac.SAC.critic.optimizer.zero_grad", "critic_loss.backward", "sac.SAC.critic.optimizer.step", "torch.cat", "torch.min", "actor_losses.append", "sac.SAC.actor.optimizer.zero_grad", "actor_loss.backward", "sac.SAC.actor.optimizer.step", "numpy.mean", "numpy.mean", "numpy.mean", "len", "sac.SAC.logger.record", "sac.SAC.actor.reset_noise", "torch.exp", "ent_coef_losses.append", "torch.exp.item", "sac.SAC.ent_coef_optimizer.zero_grad", "ent_coef_loss.backward", "sac.SAC.ent_coef_optimizer.step", "torch.no_grad", "sac.SAC.actor.action_log_prob", "torch.cat", "torch.min", "sum", "critic_loss.item", "sac.SAC.critic", "actor_loss.item", "stable_baselines3.common.utils.polyak_update", "numpy.mean", "sac.SAC.log_ent_coef.detach", "ent_coef_loss.item", "sac.SAC.critic_target", "sac.SAC.critic.parameters", "sac.SAC.critic_target.parameters", "next_log_prob.reshape", "torch.nn.functional.mse_loss"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_learning_rate", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.action_log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.policies.Actor.action_log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.polyak_update"], ["", "def", "train", "(", "self", ",", "gradient_steps", ":", "int", ",", "batch_size", ":", "int", "=", "64", ")", "->", "None", ":", "\n", "# Switch to train mode (this affects batch norm / dropout)", "\n", "        ", "self", ".", "policy", ".", "set_training_mode", "(", "True", ")", "\n", "# Update optimizers learning rate", "\n", "optimizers", "=", "[", "self", ".", "actor", ".", "optimizer", ",", "self", ".", "critic", ".", "optimizer", "]", "\n", "if", "self", ".", "ent_coef_optimizer", "is", "not", "None", ":", "\n", "            ", "optimizers", "+=", "[", "self", ".", "ent_coef_optimizer", "]", "\n", "\n", "# Update learning rate according to lr schedule", "\n", "", "self", ".", "_update_learning_rate", "(", "optimizers", ")", "\n", "\n", "ent_coef_losses", ",", "ent_coefs", "=", "[", "]", ",", "[", "]", "\n", "actor_losses", ",", "critic_losses", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "gradient_step", "in", "range", "(", "gradient_steps", ")", ":", "\n", "# Sample replay buffer", "\n", "            ", "replay_data", "=", "self", ".", "replay_buffer", ".", "sample", "(", "batch_size", ",", "env", "=", "self", ".", "_vec_normalize_env", ")", "\n", "\n", "# We need to sample because `log_std` may have changed between two gradient steps", "\n", "if", "self", ".", "use_sde", ":", "\n", "                ", "self", ".", "actor", ".", "reset_noise", "(", ")", "\n", "\n", "# Action by the current actor for the sampled state", "\n", "", "actions_pi", ",", "log_prob", "=", "self", ".", "actor", ".", "action_log_prob", "(", "replay_data", ".", "observations", ")", "\n", "log_prob", "=", "log_prob", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "ent_coef_loss", "=", "None", "\n", "if", "self", ".", "ent_coef_optimizer", "is", "not", "None", ":", "\n", "# Important: detach the variable from the graph", "\n", "# so we don't change it with other losses", "\n", "# see https://github.com/rail-berkeley/softlearning/issues/60", "\n", "                ", "ent_coef", "=", "th", ".", "exp", "(", "self", ".", "log_ent_coef", ".", "detach", "(", ")", ")", "\n", "ent_coef_loss", "=", "-", "(", "self", ".", "log_ent_coef", "*", "(", "log_prob", "+", "self", ".", "target_entropy", ")", ".", "detach", "(", ")", ")", ".", "mean", "(", ")", "\n", "ent_coef_losses", ".", "append", "(", "ent_coef_loss", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "ent_coef", "=", "self", ".", "ent_coef_tensor", "\n", "\n", "", "ent_coefs", ".", "append", "(", "ent_coef", ".", "item", "(", ")", ")", "\n", "\n", "# Optimize entropy coefficient, also called", "\n", "# entropy temperature or alpha in the paper", "\n", "if", "ent_coef_loss", "is", "not", "None", ":", "\n", "                ", "self", ".", "ent_coef_optimizer", ".", "zero_grad", "(", ")", "\n", "ent_coef_loss", ".", "backward", "(", ")", "\n", "self", ".", "ent_coef_optimizer", ".", "step", "(", ")", "\n", "\n", "", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "# Select action according to policy", "\n", "                ", "next_actions", ",", "next_log_prob", "=", "self", ".", "actor", ".", "action_log_prob", "(", "replay_data", ".", "next_observations", ")", "\n", "# Compute the next Q values: min over all critics targets", "\n", "next_q_values", "=", "th", ".", "cat", "(", "self", ".", "critic_target", "(", "replay_data", ".", "next_observations", ",", "next_actions", ")", ",", "dim", "=", "1", ")", "\n", "next_q_values", ",", "_", "=", "th", ".", "min", "(", "next_q_values", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# add entropy term", "\n", "next_q_values", "=", "next_q_values", "-", "ent_coef", "*", "next_log_prob", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "# td error + entropy term", "\n", "target_q_values", "=", "replay_data", ".", "rewards", "+", "(", "1", "-", "replay_data", ".", "dones", ")", "*", "self", ".", "gamma", "*", "next_q_values", "\n", "\n", "# Get current Q-values estimates for each critic network", "\n", "# using action from the replay buffer", "\n", "", "current_q_values", "=", "self", ".", "critic", "(", "replay_data", ".", "observations", ",", "replay_data", ".", "actions", ")", "\n", "\n", "# Compute critic loss", "\n", "critic_loss", "=", "0.5", "*", "sum", "(", "F", ".", "mse_loss", "(", "current_q", ",", "target_q_values", ")", "for", "current_q", "in", "current_q_values", ")", "\n", "critic_losses", ".", "append", "(", "critic_loss", ".", "item", "(", ")", ")", "\n", "\n", "# Optimize the critic", "\n", "self", ".", "critic", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Compute actor loss", "\n", "# Alternative: actor_loss = th.mean(log_prob - qf1_pi)", "\n", "# Mean over all critic networks", "\n", "q_values_pi", "=", "th", ".", "cat", "(", "self", ".", "critic", "(", "replay_data", ".", "observations", ",", "actions_pi", ")", ",", "dim", "=", "1", ")", "\n", "min_qf_pi", ",", "_", "=", "th", ".", "min", "(", "q_values_pi", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "actor_loss", "=", "(", "ent_coef", "*", "log_prob", "-", "min_qf_pi", ")", ".", "mean", "(", ")", "\n", "actor_losses", ".", "append", "(", "actor_loss", ".", "item", "(", ")", ")", "\n", "\n", "# Optimize the actor", "\n", "self", ".", "actor", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "self", ".", "actor", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Update target networks", "\n", "if", "gradient_step", "%", "self", ".", "target_update_interval", "==", "0", ":", "\n", "                ", "polyak_update", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "self", ".", "critic_target", ".", "parameters", "(", ")", ",", "self", ".", "tau", ")", "\n", "\n", "", "", "self", ".", "_n_updates", "+=", "gradient_steps", "\n", "\n", "self", ".", "logger", ".", "record", "(", "\"train/n_updates\"", ",", "self", ".", "_n_updates", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/ent_coef\"", ",", "np", ".", "mean", "(", "ent_coefs", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/actor_loss\"", ",", "np", ".", "mean", "(", "actor_losses", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/critic_loss\"", ",", "np", ".", "mean", "(", "critic_losses", ")", ")", "\n", "if", "len", "(", "ent_coef_losses", ")", ">", "0", ":", "\n", "            ", "self", ".", "logger", ".", "record", "(", "\"train/ent_coef_loss\"", ",", "np", ".", "mean", "(", "ent_coef_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.sac.SAC.learn": [[285, 308], ["super().learn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "4", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "tb_log_name", ":", "str", "=", "\"SAC\"", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "OffPolicyAlgorithm", ":", "\n", "\n", "        ", "return", "super", "(", ")", ".", "learn", "(", "\n", "total_timesteps", "=", "total_timesteps", ",", "\n", "callback", "=", "callback", ",", "\n", "log_interval", "=", "log_interval", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "eval_freq", "=", "eval_freq", ",", "\n", "n_eval_episodes", "=", "n_eval_episodes", ",", "\n", "tb_log_name", "=", "tb_log_name", ",", "\n", "eval_log_path", "=", "eval_log_path", ",", "\n", "reset_num_timesteps", "=", "reset_num_timesteps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.sac.SAC._excluded_save_params": [[310, 312], ["super()._excluded_save_params"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._excluded_save_params"], ["", "def", "_excluded_save_params", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "super", "(", ")", ".", "_excluded_save_params", "(", ")", "+", "[", "\"actor\"", ",", "\"critic\"", ",", "\"critic_target\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sac.sac.SAC._get_torch_save_params": [[313, 321], ["state_dicts.append"], "methods", ["None"], ["", "def", "_get_torch_save_params", "(", "self", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "state_dicts", "=", "[", "\"policy\"", ",", "\"actor.optimizer\"", ",", "\"critic.optimizer\"", "]", "\n", "if", "self", ".", "ent_coef_optimizer", "is", "not", "None", ":", "\n", "            ", "saved_pytorch_variables", "=", "[", "\"log_ent_coef\"", "]", "\n", "state_dicts", ".", "append", "(", "\"ent_coef_optimizer\"", ")", "\n", "", "else", ":", "\n", "            ", "saved_pytorch_variables", "=", "[", "\"ent_coef_tensor\"", "]", "\n", "", "return", "state_dicts", ",", "saved_pytorch_variables", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN.__init__": [[69, 139], ["stable_baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.__init__", "dqn.DQN._setup_model"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Union", "[", "str", ",", "Type", "[", "DQNPolicy", "]", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", "=", "1e-4", ",", "\n", "buffer_size", ":", "int", "=", "1_000_000", ",", "# 1e6", "\n", "learning_starts", ":", "int", "=", "50000", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "tau", ":", "float", "=", "1.0", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "train_freq", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "str", "]", "]", "=", "4", ",", "\n", "gradient_steps", ":", "int", "=", "1", ",", "\n", "replay_buffer_class", ":", "Optional", "[", "ReplayBuffer", "]", "=", "None", ",", "\n", "replay_buffer_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "optimize_memory_usage", ":", "bool", "=", "False", ",", "\n", "target_update_interval", ":", "int", "=", "10000", ",", "\n", "exploration_fraction", ":", "float", "=", "0.1", ",", "\n", "exploration_initial_eps", ":", "float", "=", "1.0", ",", "\n", "exploration_final_eps", ":", "float", "=", "0.05", ",", "\n", "max_grad_norm", ":", "float", "=", "10", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "_init_setup_model", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", ",", "\n", "env", ",", "\n", "learning_rate", ",", "\n", "buffer_size", ",", "\n", "learning_starts", ",", "\n", "batch_size", ",", "\n", "tau", ",", "\n", "gamma", ",", "\n", "train_freq", ",", "\n", "gradient_steps", ",", "\n", "action_noise", "=", "None", ",", "# No action noise", "\n", "replay_buffer_class", "=", "replay_buffer_class", ",", "\n", "replay_buffer_kwargs", "=", "replay_buffer_kwargs", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "tensorboard_log", "=", "tensorboard_log", ",", "\n", "verbose", "=", "verbose", ",", "\n", "device", "=", "device", ",", "\n", "create_eval_env", "=", "create_eval_env", ",", "\n", "seed", "=", "seed", ",", "\n", "sde_support", "=", "False", ",", "\n", "optimize_memory_usage", "=", "optimize_memory_usage", ",", "\n", "supported_action_spaces", "=", "(", "gym", ".", "spaces", ".", "Discrete", ",", ")", ",", "\n", "support_multi_env", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "exploration_initial_eps", "=", "exploration_initial_eps", "\n", "self", ".", "exploration_final_eps", "=", "exploration_final_eps", "\n", "self", ".", "exploration_fraction", "=", "exploration_fraction", "\n", "self", ".", "target_update_interval", "=", "target_update_interval", "\n", "# For updating the target network with multiple envs:", "\n", "self", ".", "_n_calls", "=", "0", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "# \"epsilon\" for the epsilon-greedy exploration", "\n", "self", ".", "exploration_rate", "=", "0.0", "\n", "# Linear schedule will be defined in `_setup_model()`", "\n", "self", ".", "exploration_schedule", "=", "None", "\n", "self", ".", "q_net", ",", "self", ".", "q_net_target", "=", "None", ",", "None", "\n", "\n", "if", "_init_setup_model", ":", "\n", "            ", "self", ".", "_setup_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN._setup_model": [[140, 160], ["super()._setup_model", "dqn.DQN._create_aliases", "stable_baselines3.common.utils.get_linear_fn", "max", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN._create_aliases", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_linear_fn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "", "def", "_setup_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "_setup_model", "(", ")", "\n", "self", ".", "_create_aliases", "(", ")", "\n", "self", ".", "exploration_schedule", "=", "get_linear_fn", "(", "\n", "self", ".", "exploration_initial_eps", ",", "\n", "self", ".", "exploration_final_eps", ",", "\n", "self", ".", "exploration_fraction", ",", "\n", ")", "\n", "# Account for multiple environments", "\n", "# each call to step() corresponds to n_envs transitions", "\n", "if", "self", ".", "n_envs", ">", "1", ":", "\n", "            ", "if", "self", ".", "n_envs", ">", "self", ".", "target_update_interval", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"The number of environments used is greater than the target network \"", "\n", "f\"update interval ({self.n_envs} > {self.target_update_interval}), \"", "\n", "\"therefore the target network will be updated after each call to env.step() \"", "\n", "f\"which corresponds to {self.n_envs} steps.\"", "\n", ")", "\n", "\n", "", "self", ".", "target_update_interval", "=", "max", "(", "self", ".", "target_update_interval", "//", "self", ".", "n_envs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN._create_aliases": [[161, 164], ["None"], "methods", ["None"], ["", "", "def", "_create_aliases", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "q_net", "=", "self", ".", "policy", ".", "q_net", "\n", "self", ".", "q_net_target", "=", "self", ".", "policy", ".", "q_net_target", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN._on_step": [[165, 176], ["dqn.DQN.exploration_schedule", "dqn.DQN.logger.record", "stable_baselines3.common.utils.polyak_update", "dqn.DQN.q_net.parameters", "dqn.DQN.q_net_target.parameters"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.polyak_update"], ["", "def", "_on_step", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the exploration rate and target network if needed.\n        This method is called in ``collect_rollouts()`` after each step in the environment.\n        \"\"\"", "\n", "self", ".", "_n_calls", "+=", "1", "\n", "if", "self", ".", "_n_calls", "%", "self", ".", "target_update_interval", "==", "0", ":", "\n", "            ", "polyak_update", "(", "self", ".", "q_net", ".", "parameters", "(", ")", ",", "self", ".", "q_net_target", ".", "parameters", "(", ")", ",", "self", ".", "tau", ")", "\n", "\n", "", "self", ".", "exploration_rate", "=", "self", ".", "exploration_schedule", "(", "self", ".", "_current_progress_remaining", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"rollout/exploration_rate\"", ",", "self", ".", "exploration_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN.train": [[177, 220], ["dqn.DQN.policy.set_training_mode", "dqn.DQN._update_learning_rate", "range", "dqn.DQN.logger.record", "dqn.DQN.logger.record", "dqn.DQN.replay_buffer.sample", "dqn.DQN.q_net", "torch.gather", "torch.nn.functional.smooth_l1_loss", "losses.append", "dqn.DQN.policy.optimizer.zero_grad", "torch.nn.functional.smooth_l1_loss.backward", "torch.nn.utils.clip_grad_norm_", "dqn.DQN.policy.optimizer.step", "numpy.mean", "torch.no_grad", "dqn.DQN.q_net_target", "next_q_values.reshape.reshape.max", "next_q_values.reshape.reshape.reshape", "torch.nn.functional.smooth_l1_loss.item", "dqn.DQN.policy.parameters", "dqn.DQN.actions.long"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_learning_rate", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step"], ["", "def", "train", "(", "self", ",", "gradient_steps", ":", "int", ",", "batch_size", ":", "int", "=", "100", ")", "->", "None", ":", "\n", "# Switch to train mode (this affects batch norm / dropout)", "\n", "        ", "self", ".", "policy", ".", "set_training_mode", "(", "True", ")", "\n", "# Update learning rate according to schedule", "\n", "self", ".", "_update_learning_rate", "(", "self", ".", "policy", ".", "optimizer", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "gradient_steps", ")", ":", "\n", "# Sample replay buffer", "\n", "            ", "replay_data", "=", "self", ".", "replay_buffer", ".", "sample", "(", "batch_size", ",", "env", "=", "self", ".", "_vec_normalize_env", ")", "\n", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "# Compute the next Q-values using the target network", "\n", "                ", "next_q_values", "=", "self", ".", "q_net_target", "(", "replay_data", ".", "next_observations", ")", "\n", "# Follow greedy policy: use the one with the highest value", "\n", "next_q_values", ",", "_", "=", "next_q_values", ".", "max", "(", "dim", "=", "1", ")", "\n", "# Avoid potential broadcast issue", "\n", "next_q_values", "=", "next_q_values", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "# 1-step TD target", "\n", "target_q_values", "=", "replay_data", ".", "rewards", "+", "(", "1", "-", "replay_data", ".", "dones", ")", "*", "self", ".", "gamma", "*", "next_q_values", "\n", "\n", "# Get current Q-values estimates", "\n", "", "current_q_values", "=", "self", ".", "q_net", "(", "replay_data", ".", "observations", ")", "\n", "\n", "# Retrieve the q-values for the actions from the replay buffer", "\n", "current_q_values", "=", "th", ".", "gather", "(", "current_q_values", ",", "dim", "=", "1", ",", "index", "=", "replay_data", ".", "actions", ".", "long", "(", ")", ")", "\n", "\n", "# Compute Huber loss (less sensitive to outliers)", "\n", "loss", "=", "F", ".", "smooth_l1_loss", "(", "current_q_values", ",", "target_q_values", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# Optimize the policy", "\n", "self", ".", "policy", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Clip gradient norm", "\n", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "policy", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Increase update counter", "\n", "", "self", ".", "_n_updates", "+=", "gradient_steps", "\n", "\n", "self", ".", "logger", ".", "record", "(", "\"train/n_updates\"", ",", "self", ".", "_n_updates", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"train/loss\"", ",", "np", ".", "mean", "(", "losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN.predict": [[221, 250], ["stable_baselines3.common.utils.is_vectorized_observation", "dqn.DQN.policy.predict", "numpy.random.rand", "stable_baselines3.common.preprocessing.maybe_transpose", "isinstance", "numpy.array", "numpy.array", "dqn.DQN.action_space.sample", "dqn.DQN.action_space.sample", "range", "list", "observation.keys"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.maybe_transpose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "predict", "(", "\n", "self", ",", "\n", "observation", ":", "np", ".", "ndarray", ",", "\n", "state", ":", "Optional", "[", "Tuple", "[", "np", ".", "ndarray", ",", "...", "]", "]", "=", "None", ",", "\n", "episode_start", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "deterministic", ":", "bool", "=", "False", ",", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "Optional", "[", "Tuple", "[", "np", ".", "ndarray", ",", "...", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        Overrides the base_class predict function to include epsilon-greedy exploration.\n\n        :param observation: the input observation\n        :param state: The last states (can be None, used in recurrent policies)\n        :param episode_start: The last masks (can be None, used in recurrent policies)\n        :param deterministic: Whether or not to return deterministic actions.\n        :return: the model's action and the next state\n            (used in recurrent policies)\n        \"\"\"", "\n", "if", "not", "deterministic", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "exploration_rate", ":", "\n", "            ", "if", "is_vectorized_observation", "(", "maybe_transpose", "(", "observation", ",", "self", ".", "observation_space", ")", ",", "self", ".", "observation_space", ")", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "                    ", "n_batch", "=", "observation", "[", "list", "(", "observation", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "n_batch", "=", "observation", ".", "shape", "[", "0", "]", "\n", "", "action", "=", "np", ".", "array", "(", "[", "self", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "n_batch", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "np", ".", "array", "(", "self", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "action", ",", "state", "=", "self", ".", "policy", ".", "predict", "(", "observation", ",", "state", ",", "episode_start", ",", "deterministic", ")", "\n", "", "return", "action", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN.learn": [[251, 274], ["super().learn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "4", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "tb_log_name", ":", "str", "=", "\"DQN\"", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "OffPolicyAlgorithm", ":", "\n", "\n", "        ", "return", "super", "(", ")", ".", "learn", "(", "\n", "total_timesteps", "=", "total_timesteps", ",", "\n", "callback", "=", "callback", ",", "\n", "log_interval", "=", "log_interval", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "eval_freq", "=", "eval_freq", ",", "\n", "n_eval_episodes", "=", "n_eval_episodes", ",", "\n", "tb_log_name", "=", "tb_log_name", ",", "\n", "eval_log_path", "=", "eval_log_path", ",", "\n", "reset_num_timesteps", "=", "reset_num_timesteps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN._excluded_save_params": [[276, 278], ["super()._excluded_save_params"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._excluded_save_params"], ["", "def", "_excluded_save_params", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "super", "(", ")", ".", "_excluded_save_params", "(", ")", "+", "[", "\"q_net\"", ",", "\"q_net_target\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.dqn.DQN._get_torch_save_params": [[279, 283], ["None"], "methods", ["None"], ["", "def", "_get_torch_save_params", "(", "self", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "state_dicts", "=", "[", "\"policy\"", ",", "\"policy.optimizer\"", "]", "\n", "\n", "return", "state_dicts", ",", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.QNetwork.__init__": [[30, 58], ["stable_baselines3.common.policies.BasePolicy.__init__", "stable_baselines3.common.torch_layers.create_mlp", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.create_mlp"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.QNetwork.forward": [[59, 67], ["policies.QNetwork.q_net", "policies.QNetwork.extract_features"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.QNetwork._predict": [[68, 73], ["policies.QNetwork.", "policies.QNetwork.argmax().reshape", "policies.QNetwork.argmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.QNetwork._get_constructor_parameters": [[74, 86], ["super()._get_constructor_parameters", "super()._get_constructor_parameters.update", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy.__init__": [[108, 150], ["stable_baselines3.common.policies.BasePolicy.__init__", "policies.DQNPolicy._build"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._build"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy._build": [[151, 168], ["policies.DQNPolicy.make_q_net", "policies.DQNPolicy.make_q_net", "policies.DQNPolicy.q_net_target.load_state_dict", "policies.DQNPolicy.q_net_target.set_training_mode", "policies.DQNPolicy.optimizer_class", "policies.DQNPolicy.q_net.state_dict", "policies.DQNPolicy.parameters", "lr_schedule"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy.make_q_net", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy.make_q_net", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy.make_q_net": [[169, 173], ["policies.DQNPolicy._update_features_extractor", "QNetwork().to", "policies.QNetwork"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel._update_features_extractor"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy.forward": [[174, 176], ["policies.DQNPolicy._predict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._predict"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy._predict": [[177, 179], ["policies.DQNPolicy.q_net._predict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._predict"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy._get_constructor_parameters": [[180, 195], ["super()._get_constructor_parameters", "super()._get_constructor_parameters.update", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.DQNPolicy.set_training_mode": [[196, 206], ["policies.DQNPolicy.q_net.set_training_mode"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.CnnPolicy.__init__": [[229, 253], ["policies.DQNPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.dqn.policies.MultiInputPolicy.__init__": [[274, 298], ["policies.DQNPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.ActionNoise.__init__": [[13, 15], ["abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.ActionNoise.reset": [[16, 21], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        call end of episode reset for the noise\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.ActionNoise.__call__": [[22, 25], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.NormalActionNoise.__init__": [[35, 39], ["noise.ActionNoise.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "mean", ":", "np", ".", "ndarray", ",", "sigma", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "self", ".", "_mu", "=", "mean", "\n", "self", ".", "_sigma", "=", "sigma", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.NormalActionNoise.__call__": [[40, 42], ["numpy.random.normal"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "random", ".", "normal", "(", "self", ".", "_mu", ",", "self", ".", "_sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.NormalActionNoise.__repr__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"NormalActionNoise(mu={self._mu}, sigma={self._sigma})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.OrnsteinUhlenbeckActionNoise.__init__": [[60, 76], ["numpy.zeros_like", "noise.OrnsteinUhlenbeckActionNoise.reset", "noise.ActionNoise.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "mean", ":", "np", ".", "ndarray", ",", "\n", "sigma", ":", "np", ".", "ndarray", ",", "\n", "theta", ":", "float", "=", "0.15", ",", "\n", "dt", ":", "float", "=", "1e-2", ",", "\n", "initial_noise", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_theta", "=", "theta", "\n", "self", ".", "_mu", "=", "mean", "\n", "self", ".", "_sigma", "=", "sigma", "\n", "self", ".", "_dt", "=", "dt", "\n", "self", ".", "initial_noise", "=", "initial_noise", "\n", "self", ".", "noise_prev", "=", "np", ".", "zeros_like", "(", "self", ".", "_mu", ")", "\n", "self", ".", "reset", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.OrnsteinUhlenbeckActionNoise.__call__": [[77, 85], ["numpy.random.normal", "numpy.sqrt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "noise", "=", "(", "\n", "self", ".", "noise_prev", "\n", "+", "self", ".", "_theta", "*", "(", "self", ".", "_mu", "-", "self", ".", "noise_prev", ")", "*", "self", ".", "_dt", "\n", "+", "self", ".", "_sigma", "*", "np", ".", "sqrt", "(", "self", ".", "_dt", ")", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "_mu", ".", "shape", ")", "\n", ")", "\n", "self", ".", "noise_prev", "=", "noise", "\n", "return", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.OrnsteinUhlenbeckActionNoise.reset": [[86, 91], ["numpy.zeros_like"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        reset the Ornstein Uhlenbeck noise, to the initial position\n        \"\"\"", "\n", "self", ".", "noise_prev", "=", "self", ".", "initial_noise", "if", "self", ".", "initial_noise", "is", "not", "None", "else", "np", ".", "zeros_like", "(", "self", ".", "_mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.OrnsteinUhlenbeckActionNoise.__repr__": [[92, 94], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"OrnsteinUhlenbeckActionNoise(mu={self._mu}, sigma={self._sigma})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.VectorizedActionNoise.__init__": [[104, 113], ["int", "copy.deepcopy", "ValueError", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_noise", ":", "ActionNoise", ",", "n_envs", ":", "int", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "n_envs", "=", "int", "(", "n_envs", ")", "\n", "assert", "self", ".", "n_envs", ">", "0", "\n", "", "except", "(", "TypeError", ",", "AssertionError", ")", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Expected n_envs={n_envs} to be positive integer greater than 0\"", ")", "from", "e", "\n", "\n", "", "self", ".", "base_noise", "=", "base_noise", "\n", "self", ".", "noises", "=", "[", "copy", ".", "deepcopy", "(", "self", ".", "base_noise", ")", "for", "_", "in", "range", "(", "n_envs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.VectorizedActionNoise.reset": [[114, 126], ["range", "noise.VectorizedActionNoise.noises[].reset", "len"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ",", "indices", ":", "Optional", "[", "Iterable", "[", "int", "]", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Reset all the noise processes, or those listed in indices\n\n        :param indices: Optional[Iterable[int]] The indices to reset. Default: None.\n            If the parameter is None, then all processes are reset to their initial position.\n        \"\"\"", "\n", "if", "indices", "is", "None", ":", "\n", "            ", "indices", "=", "range", "(", "len", "(", "self", ".", "noises", ")", ")", "\n", "\n", "", "for", "index", "in", "indices", ":", "\n", "            ", "self", ".", "noises", "[", "index", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.VectorizedActionNoise.__repr__": [[127, 129], ["repr", "len"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"VecNoise(BaseNoise={repr(self.base_noise)}), n_envs={len(self.noises)})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.VectorizedActionNoise.__call__": [[130, 136], ["numpy.stack", "numpy.stack."], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Generate and stack the action noise from each noise object\n        \"\"\"", "\n", "noise", "=", "np", ".", "stack", "(", "[", "noise", "(", ")", "for", "noise", "in", "self", ".", "noises", "]", ")", "\n", "return", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.VectorizedActionNoise.base_noise": [[141, 148], ["ValueError", "isinstance", "TypeError"], "methods", ["None"], ["", "@", "base_noise", ".", "setter", "\n", "def", "base_noise", "(", "self", ",", "base_noise", ":", "ActionNoise", ")", "->", "None", ":", "\n", "        ", "if", "base_noise", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected base_noise to be an instance of ActionNoise, not None\"", ",", "ActionNoise", ")", "\n", "", "if", "not", "isinstance", "(", "base_noise", ",", "ActionNoise", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Expected base_noise to be an instance of type ActionNoise\"", ",", "ActionNoise", ")", "\n", "", "self", ".", "_base_noise", "=", "base_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.noise.VectorizedActionNoise.noises": [[153, 168], ["list", "len", "len", "ValueError", "noise.reset", "len", "enumerate", "type", "isinstance", "type"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "@", "noises", ".", "setter", "\n", "def", "noises", "(", "self", ",", "noises", ":", "List", "[", "ActionNoise", "]", ")", "->", "None", ":", "\n", "        ", "noises", "=", "list", "(", "noises", ")", "# raises TypeError if not iterable", "\n", "assert", "len", "(", "noises", ")", "==", "self", ".", "n_envs", ",", "f\"Expected a list of {self.n_envs} ActionNoises, found {len(noises)}.\"", "\n", "\n", "different_types", "=", "[", "i", "for", "i", ",", "noise", "in", "enumerate", "(", "noises", ")", "if", "not", "isinstance", "(", "noise", ",", "type", "(", "self", ".", "base_noise", ")", ")", "]", "\n", "\n", "if", "len", "(", "different_types", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Noise instances at indices {different_types} don't match the type of base_noise\"", ",", "type", "(", "self", ".", "base_noise", ")", "\n", ")", "\n", "\n", "", "self", ".", "_noises", "=", "noises", "\n", "for", "noise", "in", "noises", ":", "\n", "            ", "noise", ".", "reset", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.unwrap_wrapper": [[11, 25], ["isinstance", "isinstance"], "function", ["None"], ["def", "unwrap_wrapper", "(", "env", ":", "gym", ".", "Env", ",", "wrapper_class", ":", "Type", "[", "gym", ".", "Wrapper", "]", ")", "->", "Optional", "[", "gym", ".", "Wrapper", "]", ":", "\n", "    ", "\"\"\"\n    Retrieve a ``VecEnvWrapper`` object by recursively searching.\n\n    :param env: Environment to unwrap\n    :param wrapper_class: Wrapper to look for\n    :return: Environment unwrapped till ``wrapper_class`` if it has been wrapped with it\n    \"\"\"", "\n", "env_tmp", "=", "env", "\n", "while", "isinstance", "(", "env_tmp", ",", "gym", ".", "Wrapper", ")", ":", "\n", "        ", "if", "isinstance", "(", "env_tmp", ",", "wrapper_class", ")", ":", "\n", "            ", "return", "env_tmp", "\n", "", "env_tmp", "=", "env_tmp", ".", "env", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.is_wrapped": [[27, 36], ["env_util.unwrap_wrapper"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.unwrap_wrapper"], ["", "def", "is_wrapped", "(", "env", ":", "Type", "[", "gym", ".", "Env", "]", ",", "wrapper_class", ":", "Type", "[", "gym", ".", "Wrapper", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Check if a given environment has been wrapped with a given wrapper.\n\n    :param env: Environment to check\n    :param wrapper_class: Wrapper class to look for\n    :return: True if environment has been wrapped with ``wrapper_class``.\n    \"\"\"", "\n", "return", "unwrap_wrapper", "(", "env", ",", "wrapper_class", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env": [[38, 106], ["vec_env_cls", "isinstance", "stable_baselines3.common.monitor.Monitor", "env_util.make_vec_env.make_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.make_env"], ["", "def", "make_vec_env", "(", "\n", "env_id", ":", "Union", "[", "str", ",", "Type", "[", "gym", ".", "Env", "]", "]", ",", "\n", "n_envs", ":", "int", "=", "1", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "start_index", ":", "int", "=", "0", ",", "\n", "monitor_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "wrapper_class", ":", "Optional", "[", "Callable", "[", "[", "gym", ".", "Env", "]", ",", "gym", ".", "Env", "]", "]", "=", "None", ",", "\n", "env_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "vec_env_cls", ":", "Optional", "[", "Type", "[", "Union", "[", "DummyVecEnv", ",", "SubprocVecEnv", "]", "]", "]", "=", "None", ",", "\n", "vec_env_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "monitor_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "wrapper_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "VecEnv", ":", "\n", "    ", "\"\"\"\n    Create a wrapped, monitored ``VecEnv``.\n    By default it uses a ``DummyVecEnv`` which is usually faster\n    than a ``SubprocVecEnv``.\n\n    :param env_id: the environment ID or the environment class\n    :param n_envs: the number of environments you wish to have in parallel\n    :param seed: the initial seed for the random number generator\n    :param start_index: start rank index\n    :param monitor_dir: Path to a folder where the monitor files will be saved.\n        If None, no file will be written, however, the env will still be wrapped\n        in a Monitor wrapper to provide additional information about training.\n    :param wrapper_class: Additional wrapper to use on the environment.\n        This can also be a function with single argument that wraps the environment in many things.\n    :param env_kwargs: Optional keyword argument to pass to the env constructor\n    :param vec_env_cls: A custom ``VecEnv`` class constructor. Default: None.\n    :param vec_env_kwargs: Keyword arguments to pass to the ``VecEnv`` class constructor.\n    :param monitor_kwargs: Keyword arguments to pass to the ``Monitor`` class constructor.\n    :param wrapper_kwargs: Keyword arguments to pass to the ``Wrapper`` class constructor.\n    :return: The wrapped environment\n    \"\"\"", "\n", "env_kwargs", "=", "{", "}", "if", "env_kwargs", "is", "None", "else", "env_kwargs", "\n", "vec_env_kwargs", "=", "{", "}", "if", "vec_env_kwargs", "is", "None", "else", "vec_env_kwargs", "\n", "monitor_kwargs", "=", "{", "}", "if", "monitor_kwargs", "is", "None", "else", "monitor_kwargs", "\n", "wrapper_kwargs", "=", "{", "}", "if", "wrapper_kwargs", "is", "None", "else", "wrapper_kwargs", "\n", "\n", "def", "make_env", "(", "rank", ")", ":", "\n", "        ", "def", "_init", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "env_id", ",", "str", ")", ":", "\n", "                ", "env", "=", "gym", ".", "make", "(", "env_id", ",", "**", "env_kwargs", ")", "\n", "", "else", ":", "\n", "                ", "env", "=", "env_id", "(", "**", "env_kwargs", ")", "\n", "", "if", "seed", "is", "not", "None", ":", "\n", "                ", "env", ".", "seed", "(", "seed", "+", "rank", ")", "\n", "env", ".", "action_space", ".", "seed", "(", "seed", "+", "rank", ")", "\n", "# Wrap the env in a Monitor wrapper", "\n", "# to have additional training information", "\n", "", "monitor_path", "=", "os", ".", "path", ".", "join", "(", "monitor_dir", ",", "str", "(", "rank", ")", ")", "if", "monitor_dir", "is", "not", "None", "else", "None", "\n", "# Create the monitor folder if needed", "\n", "if", "monitor_path", "is", "not", "None", ":", "\n", "                ", "os", ".", "makedirs", "(", "monitor_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "env", "=", "Monitor", "(", "env", ",", "filename", "=", "monitor_path", ",", "**", "monitor_kwargs", ")", "\n", "# Optionally, wrap the environment with the provided wrapper", "\n", "if", "wrapper_class", "is", "not", "None", ":", "\n", "                ", "env", "=", "wrapper_class", "(", "env", ",", "**", "wrapper_kwargs", ")", "\n", "", "return", "env", "\n", "\n", "", "return", "_init", "\n", "\n", "# No custom VecEnv is passed", "\n", "", "if", "vec_env_cls", "is", "None", ":", "\n", "# Default: use a DummyVecEnv", "\n", "        ", "vec_env_cls", "=", "DummyVecEnv", "\n", "\n", "", "return", "vec_env_cls", "(", "[", "make_env", "(", "i", "+", "start_index", ")", "for", "i", "in", "range", "(", "n_envs", ")", "]", ",", "**", "vec_env_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_atari_env": [[108, 156], ["env_util.make_vec_env", "stable_baselines3.common.atari_wrappers.AtariWrapper"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env"], ["", "def", "make_atari_env", "(", "\n", "env_id", ":", "Union", "[", "str", ",", "Type", "[", "gym", ".", "Env", "]", "]", ",", "\n", "n_envs", ":", "int", "=", "1", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "start_index", ":", "int", "=", "0", ",", "\n", "monitor_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "wrapper_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "env_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "vec_env_cls", ":", "Optional", "[", "Union", "[", "DummyVecEnv", ",", "SubprocVecEnv", "]", "]", "=", "None", ",", "\n", "vec_env_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "monitor_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "VecEnv", ":", "\n", "    ", "\"\"\"\n    Create a wrapped, monitored VecEnv for Atari.\n    It is a wrapper around ``make_vec_env`` that includes common preprocessing for Atari games.\n\n    :param env_id: the environment ID or the environment class\n    :param n_envs: the number of environments you wish to have in parallel\n    :param seed: the initial seed for the random number generator\n    :param start_index: start rank index\n    :param monitor_dir: Path to a folder where the monitor files will be saved.\n        If None, no file will be written, however, the env will still be wrapped\n        in a Monitor wrapper to provide additional information about training.\n    :param wrapper_kwargs: Optional keyword argument to pass to the ``AtariWrapper``\n    :param env_kwargs: Optional keyword argument to pass to the env constructor\n    :param vec_env_cls: A custom ``VecEnv`` class constructor. Default: None.\n    :param vec_env_kwargs: Keyword arguments to pass to the ``VecEnv`` class constructor.\n    :param monitor_kwargs: Keyword arguments to pass to the ``Monitor`` class constructor.\n    :return: The wrapped environment\n    \"\"\"", "\n", "if", "wrapper_kwargs", "is", "None", ":", "\n", "        ", "wrapper_kwargs", "=", "{", "}", "\n", "\n", "", "def", "atari_wrapper", "(", "env", ":", "gym", ".", "Env", ")", "->", "gym", ".", "Env", ":", "\n", "        ", "env", "=", "AtariWrapper", "(", "env", ",", "**", "wrapper_kwargs", ")", "\n", "return", "env", "\n", "\n", "", "return", "make_vec_env", "(", "\n", "env_id", ",", "\n", "n_envs", "=", "n_envs", ",", "\n", "seed", "=", "seed", ",", "\n", "start_index", "=", "start_index", ",", "\n", "monitor_dir", "=", "monitor_dir", ",", "\n", "wrapper_class", "=", "atari_wrapper", ",", "\n", "env_kwargs", "=", "env_kwargs", ",", "\n", "vec_env_cls", "=", "vec_env_cls", ",", "\n", "vec_env_kwargs", "=", "vec_env_kwargs", ",", "\n", "monitor_kwargs", "=", "monitor_kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._is_numpy_array_space": [[12, 18], ["isinstance"], "function", ["None"], ["def", "_is_numpy_array_space", "(", "space", ":", "spaces", ".", "Space", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Returns False if provided space is not representable as a single numpy array\n    (e.g. Dict and Tuple spaces return False)\n    \"\"\"", "\n", "return", "not", "isinstance", "(", "space", ",", "(", "spaces", ".", "Dict", ",", "spaces", ".", "Tuple", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_image_input": [[20, 49], ["stable_baselines3.common.preprocessing.is_image_space_channels_first", "warnings.warn", "numpy.any", "numpy.any", "warnings.warn", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "def", "_check_image_input", "(", "observation_space", ":", "spaces", ".", "Box", ",", "key", ":", "str", "=", "\"\"", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Check that the input will be compatible with Stable-Baselines\n    when the observation is apparently an image.\n    \"\"\"", "\n", "if", "observation_space", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"It seems that your observation {key} is an image but the `dtype` \"", "\n", "\"of your observation_space is not `np.uint8`. \"", "\n", "\"If your observation is not an image, we recommend you to flatten the observation \"", "\n", "\"to have only a 1D vector\"", "\n", ")", "\n", "\n", "", "if", "np", ".", "any", "(", "observation_space", ".", "low", "!=", "0", ")", "or", "np", ".", "any", "(", "observation_space", ".", "high", "!=", "255", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"It seems that your observation space {key} is an image but the \"", "\n", "\"upper and lower bounds are not in [0, 255]. \"", "\n", "\"Because the CNN policy normalize automatically the observation \"", "\n", "\"you may encounter issue if the values are not in that range.\"", "\n", ")", "\n", "\n", "", "non_channel_idx", "=", "0", "\n", "# Check only if width/height of the image is big enough", "\n", "if", "is_image_space_channels_first", "(", "observation_space", ")", ":", "\n", "        ", "non_channel_idx", "=", "-", "1", "\n", "\n", "", "if", "observation_space", ".", "shape", "[", "non_channel_idx", "]", "<", "36", "or", "observation_space", ".", "shape", "[", "1", "]", "<", "36", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"The minimal resolution for an image is 36x36 for the default `CnnPolicy`. \"", "\n", "\"You might need to use a custom feature extractor \"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_unsupported_spaces": [[54, 83], ["isinstance", "isinstance", "observation_space.spaces.values", "warnings.warn", "env_checker._is_numpy_array_space", "warnings.warn", "isinstance", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._is_numpy_array_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "", "def", "_check_unsupported_spaces", "(", "env", ":", "gym", ".", "Env", ",", "observation_space", ":", "spaces", ".", "Space", ",", "action_space", ":", "spaces", ".", "Space", ")", "->", "None", ":", "\n", "    ", "\"\"\"Emit warnings when the observation space or action space used is not supported by Stable-Baselines.\"\"\"", "\n", "\n", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "        ", "nested_dict", "=", "False", "\n", "for", "space", "in", "observation_space", ".", "spaces", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "space", ",", "spaces", ".", "Dict", ")", ":", "\n", "                ", "nested_dict", "=", "True", "\n", "", "", "if", "nested_dict", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Nested observation spaces are not supported by Stable Baselines3 \"", "\n", "\"(Dict spaces inside Dict space). \"", "\n", "\"You should flatten it to have only one level of keys.\"", "\n", "\"For example, `dict(space1=dict(space2=Box(), space3=Box()), spaces4=Discrete())` \"", "\n", "\"is not supported but `dict(space2=Box(), spaces3=Box(), spaces4=Discrete())` is.\"", "\n", ")", "\n", "\n", "", "", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Tuple", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"The observation space is a Tuple,\"", "\n", "\"this is currently not supported by Stable Baselines3. \"", "\n", "\"However, you can convert it to a Dict observation space \"", "\n", "\"(cf. https://github.com/openai/gym/blob/master/gym/spaces/dict.py). \"", "\n", "\"which is supported by SB3.\"", "\n", ")", "\n", "\n", "", "if", "not", "_is_numpy_array_space", "(", "action_space", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"The action space is not based off a numpy array. Typically this means it's either a Dict or Tuple space. \"", "\n", "\"This type of action space is currently not supported by Stable Baselines 3. You should try to flatten the \"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_nan": [[88, 94], ["stable_baselines3.common.vec_env.VecCheckNan", "range", "stable_baselines3.common.vec_env.DummyVecEnv", "numpy.array", "stable_baselines3.common.vec_env.VecCheckNan.step", "env.action_space.sample"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "def", "_check_nan", "(", "env", ":", "gym", ".", "Env", ")", "->", "None", ":", "\n", "    ", "\"\"\"Check for Inf and NaN using the VecWrapper.\"\"\"", "\n", "vec_env", "=", "VecCheckNan", "(", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "action", "=", "np", ".", "array", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "\n", "_", ",", "_", ",", "_", ",", "_", "=", "vec_env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_obs": [[96, 115], ["isinstance", "observation_space.contains", "isinstance", "isinstance", "env_checker._is_numpy_array_space", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._is_numpy_array_space"], ["", "", "def", "_check_obs", "(", "obs", ":", "Union", "[", "tuple", ",", "dict", ",", "np", ".", "ndarray", ",", "int", "]", ",", "observation_space", ":", "spaces", ".", "Space", ",", "method_name", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Check that the observation returned by the environment\n    correspond to the declared one.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "observation_space", ",", "spaces", ".", "Tuple", ")", ":", "\n", "        ", "assert", "not", "isinstance", "(", "\n", "obs", ",", "tuple", "\n", ")", ",", "f\"The observation returned by the `{method_name}()` method should be a single value, not a tuple\"", "\n", "\n", "# The check for a GoalEnv is done by the base class", "\n", "", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs", ",", "int", ")", ",", "f\"The observation returned by `{method_name}()` method must be an int\"", "\n", "", "elif", "_is_numpy_array_space", "(", "observation_space", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs", ",", "np", ".", "ndarray", ")", ",", "f\"The observation returned by `{method_name}()` method must be a numpy array\"", "\n", "\n", "", "assert", "observation_space", ".", "contains", "(", "\n", "obs", "\n", ")", ",", "f\"The observation returned by the `{method_name}()` method does not match the given observation space\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_box_obs": [[117, 132], ["len", "env_checker._check_image_input", "len", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_image_input", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "def", "_check_box_obs", "(", "observation_space", ":", "spaces", ".", "Box", ",", "key", ":", "str", "=", "\"\"", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Check that the observation space is correctly formatted\n    when dealing with a ``Box()`` space. In particular, it checks:\n    - that the dimensions are big enough when it is an image, and that the type matches\n    - that the observation has an expected shape (warn the user if not)\n    \"\"\"", "\n", "# If image, check the low and high values, the type and the number of channels", "\n", "# and the shape (minimal value)", "\n", "if", "len", "(", "observation_space", ".", "shape", ")", "==", "3", ":", "\n", "        ", "_check_image_input", "(", "observation_space", ")", "\n", "\n", "", "if", "len", "(", "observation_space", ".", "shape", ")", "not", "in", "[", "1", ",", "3", "]", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"Your observation {key} has an unconventional shape (neither an image, nor a 1D vector). \"", "\n", "\"We recommend you to flatten the observation \"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_returned_values": [[137, 182], ["env.reset", "isinstance", "action_space.sample", "env.step", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "observation_space.spaces.keys", "env_checker._check_obs", "len", "isinstance", "observation_space.spaces.keys", "env_checker._check_obs", "env.compute_reward", "env_checker._check_obs", "env_checker._check_obs", "AssertionError", "AssertionError", "str", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.compute_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_obs"], ["", "", "def", "_check_returned_values", "(", "env", ":", "gym", ".", "Env", ",", "observation_space", ":", "spaces", ".", "Space", ",", "action_space", ":", "spaces", ".", "Space", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Check the returned values by the env when calling `.reset()` or `.step()` methods.\n    \"\"\"", "\n", "# because env inherits from gym.Env, we assume that `reset()` and `step()` methods exists", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs", ",", "dict", ")", ",", "\"The observation returned by `reset()` must be a dictionary\"", "\n", "for", "key", "in", "observation_space", ".", "spaces", ".", "keys", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "_check_obs", "(", "obs", "[", "key", "]", ",", "observation_space", ".", "spaces", "[", "key", "]", ",", "\"reset\"", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "raise", "AssertionError", "(", "f\"Error while checking key={key}: \"", "+", "str", "(", "e", ")", ")", "from", "e", "\n", "", "", "", "else", ":", "\n", "        ", "_check_obs", "(", "obs", ",", "observation_space", ",", "\"reset\"", ")", "\n", "\n", "# Sample a random action", "\n", "", "action", "=", "action_space", ".", "sample", "(", ")", "\n", "data", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "assert", "len", "(", "data", ")", "==", "4", ",", "\"The `step()` method must return four values: obs, reward, done, info\"", "\n", "\n", "# Unpack", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "data", "\n", "\n", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs", ",", "dict", ")", ",", "\"The observation returned by `step()` must be a dictionary\"", "\n", "for", "key", "in", "observation_space", ".", "spaces", ".", "keys", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "_check_obs", "(", "obs", "[", "key", "]", ",", "observation_space", ".", "spaces", "[", "key", "]", ",", "\"step\"", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "raise", "AssertionError", "(", "f\"Error while checking key={key}: \"", "+", "str", "(", "e", ")", ")", "from", "e", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "_check_obs", "(", "obs", ",", "observation_space", ",", "\"step\"", ")", "\n", "\n", "# We also allow int because the reward will be cast to float", "\n", "", "assert", "isinstance", "(", "reward", ",", "(", "float", ",", "int", ")", ")", ",", "\"The reward returned by `step()` must be a float\"", "\n", "assert", "isinstance", "(", "done", ",", "bool", ")", ",", "\"The `done` signal must be a boolean\"", "\n", "assert", "isinstance", "(", "info", ",", "dict", ")", ",", "\"The `info` returned by `step()` must be a python dictionary\"", "\n", "\n", "if", "isinstance", "(", "env", ",", "gym", ".", "GoalEnv", ")", ":", "\n", "# For a GoalEnv, the keys are checked at reset", "\n", "        ", "assert", "reward", "==", "env", ".", "compute_reward", "(", "obs", "[", "\"achieved_goal\"", "]", ",", "obs", "[", "\"desired_goal\"", "]", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_spaces": [[184, 197], ["hasattr", "hasattr", "isinstance", "isinstance"], "function", ["None"], ["", "", "def", "_check_spaces", "(", "env", ":", "gym", ".", "Env", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Check that the observation and action spaces are defined\n    and inherit from gym.spaces.Space.\n    \"\"\"", "\n", "# Helper to link to the code, because gym has no proper documentation", "\n", "gym_spaces", "=", "\" cf https://github.com/openai/gym/blob/master/gym/spaces/\"", "\n", "\n", "assert", "hasattr", "(", "env", ",", "\"observation_space\"", ")", ",", "\"You must specify an observation space (cf gym.spaces)\"", "+", "gym_spaces", "\n", "assert", "hasattr", "(", "env", ",", "\"action_space\"", ")", ",", "\"You must specify an action space (cf gym.spaces)\"", "+", "gym_spaces", "\n", "\n", "assert", "isinstance", "(", "env", ".", "observation_space", ",", "spaces", ".", "Space", ")", ",", "\"The observation space must inherit from gym.spaces\"", "+", "gym_spaces", "\n", "assert", "isinstance", "(", "env", ".", "action_space", ",", "spaces", ".", "Space", ")", ",", "\"The action space must inherit from gym.spaces\"", "+", "gym_spaces", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_render": [[200, 228], ["env.metadata.get", "env.close", "warnings.warn", "env.metadata.get.remove", "env.render"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render"], ["", "def", "_check_render", "(", "env", ":", "gym", ".", "Env", ",", "warn", ":", "bool", "=", "True", ",", "headless", ":", "bool", "=", "False", ")", "->", "None", ":", "# pragma: no cover", "\n", "    ", "\"\"\"\n    Check the declared render modes and the `render()`/`close()`\n    method of the environment.\n\n    :param env: The environment to check\n    :param warn: Whether to output additional warnings\n    :param headless: Whether to disable render modes\n        that require a graphical interface. False by default.\n    \"\"\"", "\n", "render_modes", "=", "env", ".", "metadata", ".", "get", "(", "\"render.modes\"", ")", "\n", "if", "render_modes", "is", "None", ":", "\n", "        ", "if", "warn", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"No render modes was declared in the environment \"", "\n", "\" (env.metadata['render.modes'] is None or not defined), \"", "\n", "\"you may have trouble when calling `.render()`\"", "\n", ")", "\n", "\n", "", "", "else", ":", "\n", "# Don't check render mode that require a", "\n", "# graphical interface (useful for CI)", "\n", "        ", "if", "headless", "and", "\"human\"", "in", "render_modes", ":", "\n", "            ", "render_modes", ".", "remove", "(", "\"human\"", ")", "\n", "# Check all declared render modes", "\n", "", "for", "render_mode", "in", "render_modes", ":", "\n", "            ", "env", ".", "render", "(", "mode", "=", "render_mode", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env": [[230, 297], ["isinstance", "env_checker._check_spaces", "env_checker._check_returned_values", "env_checker._check_unsupported_spaces", "obs_spaces.items", "isinstance", "env_checker._check_render", "env_checker._is_numpy_array_space", "env_checker._is_numpy_array_space", "env_checker._check_nan", "isinstance", "isinstance", "isinstance", "warnings.warn", "numpy.all", "isinstance", "warnings.warn", "env_checker._check_box_obs", "numpy.any", "numpy.any", "numpy.any", "numpy.isfinite", "numpy.dtype", "numpy.array", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_returned_values", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_unsupported_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_render", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._is_numpy_array_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._is_numpy_array_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_nan", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker._check_box_obs"], ["", "", "def", "check_env", "(", "env", ":", "gym", ".", "Env", ",", "warn", ":", "bool", "=", "True", ",", "skip_render_check", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Check that an environment follows Gym API.\n    This is particularly useful when using a custom environment.\n    Please take a look at https://github.com/openai/gym/blob/master/gym/core.py\n    for more information about the API.\n\n    It also optionally check that the environment is compatible with Stable-Baselines.\n\n    :param env: The Gym environment that will be checked\n    :param warn: Whether to output additional warnings\n        mainly related to the interaction with Stable Baselines\n    :param skip_render_check: Whether to skip the checks for the render method.\n        True by default (useful for the CI)\n    \"\"\"", "\n", "assert", "isinstance", "(", "\n", "env", ",", "gym", ".", "Env", "\n", ")", ",", "\"Your environment must inherit from the gym.Env class cf https://github.com/openai/gym/blob/master/gym/core.py\"", "\n", "\n", "# ============= Check the spaces (observation and action) ================", "\n", "_check_spaces", "(", "env", ")", "\n", "\n", "# Define aliases for convenience", "\n", "observation_space", "=", "env", ".", "observation_space", "\n", "action_space", "=", "env", ".", "action_space", "\n", "\n", "# Warn the user if needed.", "\n", "# A warning means that the environment may run but not work properly with Stable Baselines algorithms", "\n", "if", "warn", ":", "\n", "        ", "_check_unsupported_spaces", "(", "env", ",", "observation_space", ",", "action_space", ")", "\n", "\n", "obs_spaces", "=", "observation_space", ".", "spaces", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Dict", ")", "else", "{", "\"\"", ":", "observation_space", "}", "\n", "for", "key", ",", "space", "in", "obs_spaces", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "space", ",", "spaces", ".", "Box", ")", ":", "\n", "                ", "_check_box_obs", "(", "space", ",", "key", ")", "\n", "\n", "# Check for the action space, it may lead to hard-to-debug issues", "\n", "", "", "if", "isinstance", "(", "action_space", ",", "spaces", ".", "Box", ")", "and", "(", "\n", "np", ".", "any", "(", "np", ".", "abs", "(", "action_space", ".", "low", ")", "!=", "np", ".", "abs", "(", "action_space", ".", "high", ")", ")", "\n", "or", "np", ".", "any", "(", "action_space", ".", "low", "!=", "-", "1", ")", "\n", "or", "np", ".", "any", "(", "action_space", ".", "high", "!=", "1", ")", "\n", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"We recommend you to use a symmetric and normalized Box action space (range=[-1, 1]) \"", "\n", "\"cf https://stable-baselines3.readthedocs.io/en/master/guide/rl_tips.html\"", "\n", ")", "\n", "\n", "", "if", "isinstance", "(", "action_space", ",", "spaces", ".", "Box", ")", ":", "\n", "            ", "assert", "np", ".", "all", "(", "\n", "np", ".", "isfinite", "(", "np", ".", "array", "(", "[", "action_space", ".", "low", ",", "action_space", ".", "high", "]", ")", ")", "\n", ")", ",", "\"Continuous action space must have a finite lower and upper bound\"", "\n", "\n", "", "if", "isinstance", "(", "action_space", ",", "spaces", ".", "Box", ")", "and", "action_space", ".", "dtype", "!=", "np", ".", "dtype", "(", "np", ".", "float32", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "f\"Your action space has dtype {action_space.dtype}, we recommend using np.float32 to avoid cast errors.\"", "\n", ")", "\n", "\n", "# ============ Check the returned values ===============", "\n", "", "", "_check_returned_values", "(", "env", ",", "observation_space", ",", "action_space", ")", "\n", "\n", "# ==== Check the render method and the declared render modes ====", "\n", "if", "not", "skip_render_check", ":", "\n", "        ", "_check_render", "(", "env", ",", "warn", "=", "warn", ")", "# pragma: no cover", "\n", "\n", "# The check only works with numpy arrays", "\n", "", "if", "_is_numpy_array_space", "(", "observation_space", ")", "and", "_is_numpy_array_space", "(", "action_space", ")", ":", "\n", "        ", "_check_nan", "(", "env", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.__init__": [[59, 89], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.forward": [[90, 93], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel._update_features_extractor": [[94, 115], ["net_kwargs.copy.copy.copy", "net_kwargs.copy.copy.update", "policies.BaseModel.make_features_extractor", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.make_features_extractor"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.make_features_extractor": [[116, 119], ["policies.BaseModel.features_extractor_class"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features": [[120, 130], ["stable_baselines3.common.preprocessing.preprocess_obs", "policies.BaseModel.features_extractor"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.preprocess_obs"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel._get_constructor_parameters": [[131, 144], ["dict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.device": [[146, 155], ["policies.BaseModel.parameters", "stable_baselines3.common.utils.get_device"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.save": [[156, 163], ["torch.save", "policies.BaseModel.state_dict", "policies.BaseModel._get_constructor_parameters"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.load": [[164, 190], ["stable_baselines3.common.utils.get_device", "torch.load", "cls", "cls.load_state_dict", "cls.to", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.load_from_vector": [[191, 198], ["torch.nn.utils.vector_to_parameters", "torch.FloatTensor().to", "policies.BaseModel.parameters", "torch.FloatTensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.parameters_to_vector": [[199, 206], ["torch.nn.utils.parameters_to_vector().detach().cpu().numpy", "torch.nn.utils.parameters_to_vector().detach().cpu", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector", "policies.BaseModel.parameters"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.parameters_to_vector"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode": [[207, 216], ["policies.BaseModel.train"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.train"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.obs_to_tensor": [[217, 256], ["isinstance", "stable_baselines3.common.utils.obs_as_tensor", "copy.deepcopy", "numpy.array.items", "stable_baselines3.common.preprocessing.is_image_space", "isinstance", "stable_baselines3.common.utils.is_vectorized_observation", "numpy.array.reshape", "stable_baselines3.common.preprocessing.is_image_space", "numpy.array.reshape", "stable_baselines3.common.preprocessing.maybe_transpose", "numpy.array", "stable_baselines3.common.preprocessing.maybe_transpose", "numpy.array", "stable_baselines3.common.utils.is_vectorized_observation"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.obs_as_tensor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.maybe_transpose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.maybe_transpose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.__init__": [[269, 272], ["policies.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy._dummy_schedule": [[273, 278], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.squash_output": [[279, 283], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.init_weights": [[284, 293], ["isinstance", "torch.nn.init.orthogonal_", "module.bias.data.fill_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy._predict": [[294, 306], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.predict": [[307, 356], ["policies.BasePolicy.set_training_mode", "policies.BasePolicy.obs_to_tensor", "numpy.clip.cpu().numpy", "isinstance", "torch.no_grad", "policies.BasePolicy._predict", "numpy.clip.cpu", "policies.BasePolicy.unscale_action", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.obs_to_tensor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.unscale_action"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.scale_action": [[357, 367], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.unscale_action": [[368, 377], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.__init__": [[413, 486], ["policies.BasePolicy.__init__", "features_extractor_class", "stable_baselines3.common.distributions.make_proba_distribution", "policies.ActorCriticPolicy._build", "warnings.warn", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.make_proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._build", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters": [[487, 510], ["policies.BaseModel._get_constructor_parameters", "super()._get_constructor_parameters.update", "collections.defaultdict", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_constructor_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise": [[511, 519], ["isinstance", "policies.ActorCriticPolicy.action_dist.sample_weights"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample_weights"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._build_mlp_extractor": [[520, 533], ["stable_baselines3.common.torch_layers.MlpExtractor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._build": [[535, 578], ["policies.ActorCriticPolicy._build_mlp_extractor", "isinstance", "torch.nn.Linear", "policies.ActorCriticPolicy.optimizer_class", "policies.ActorCriticPolicy.action_dist.proba_distribution_net", "isinstance", "module_gains.items", "policies.ActorCriticPolicy.parameters", "policies.ActorCriticPolicy.action_dist.proba_distribution_net", "isinstance", "numpy.sqrt", "numpy.sqrt", "module.apply", "lr_schedule", "policies.ActorCriticPolicy.action_dist.proba_distribution_net", "NotImplementedError", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._build_mlp_extractor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.forward": [[579, 596], ["policies.ActorCriticPolicy.extract_features", "policies.ActorCriticPolicy.mlp_extractor", "policies.ActorCriticPolicy.value_net", "policies.ActorCriticPolicy._get_action_dist_from_latent", "policies.ActorCriticPolicy.get_actions", "policies.ActorCriticPolicy.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_action_dist_from_latent", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_action_dist_from_latent": [[597, 621], ["policies.ActorCriticPolicy.action_net", "isinstance", "policies.ActorCriticPolicy.action_dist.proba_distribution", "isinstance", "policies.ActorCriticPolicy.action_dist.proba_distribution", "isinstance", "policies.ActorCriticPolicy.action_dist.proba_distribution", "isinstance", "policies.ActorCriticPolicy.action_dist.proba_distribution", "isinstance", "policies.ActorCriticPolicy.action_dist.proba_distribution", "ValueError"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._predict": [[622, 631], ["policies.ActorCriticPolicy.get_distribution().get_actions", "policies.ActorCriticPolicy.get_distribution"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.get_distribution"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.evaluate_actions": [[632, 649], ["policies.ActorCriticPolicy.extract_features", "policies.ActorCriticPolicy.mlp_extractor", "policies.ActorCriticPolicy._get_action_dist_from_latent", "policies.ActorCriticPolicy.log_prob", "policies.ActorCriticPolicy.value_net", "policies.ActorCriticPolicy.entropy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_action_dist_from_latent", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.get_distribution": [[650, 660], ["policies.ActorCriticPolicy.extract_features", "policies.ActorCriticPolicy.mlp_extractor.forward_actor", "policies.ActorCriticPolicy._get_action_dist_from_latent"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.MlpExtractor.forward_actor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy._get_action_dist_from_latent"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.predict_values": [[661, 671], ["policies.ActorCriticPolicy.extract_features", "policies.ActorCriticPolicy.mlp_extractor.forward_critic", "policies.ActorCriticPolicy.value_net"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.MlpExtractor.forward_critic"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticCnnPolicy.__init__": [[707, 745], ["policies.ActorCriticPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.MultiInputActorCriticPolicy.__init__": [[782, 820], ["policies.ActorCriticPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ContinuousCritic.__init__": [[850, 879], ["policies.BaseModel.__init__", "stable_baselines3.common.preprocessing.get_action_dim", "range", "stable_baselines3.common.torch_layers.create_mlp", "torch.nn.Sequential", "policies.ContinuousCritic.add_module", "policies.ContinuousCritic.q_networks.append"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_action_dim", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.create_mlp"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ContinuousCritic.forward": [[880, 887], ["torch.cat", "tuple", "torch.set_grad_enabled", "policies.ContinuousCritic.extract_features", "q_net"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ContinuousCritic.q1_forward": [[888, 897], ["torch.no_grad", "policies.ContinuousCritic.extract_features", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.extract_features"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.rolling_window": [[19, 30], ["numpy.lib.stride_tricks.as_strided"], "function", ["None"], ["def", "rolling_window", "(", "array", ":", "np", ".", "ndarray", ",", "window", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Apply a rolling window to a np.ndarray\n\n    :param array: the input Array\n    :param window: length of the rolling window\n    :return: rolling window on the input array\n    \"\"\"", "\n", "shape", "=", "array", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "array", ".", "shape", "[", "-", "1", "]", "-", "window", "+", "1", ",", "window", ")", "\n", "strides", "=", "array", ".", "strides", "+", "(", "array", ".", "strides", "[", "-", "1", "]", ",", ")", "\n", "return", "np", ".", "lib", ".", "stride_tricks", ".", "as_strided", "(", "array", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.window_func": [[32, 45], ["results_plotter.rolling_window", "numpy.np.mean"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.rolling_window"], ["", "def", "window_func", "(", "var_1", ":", "np", ".", "ndarray", ",", "var_2", ":", "np", ".", "ndarray", ",", "window", ":", "int", ",", "func", ":", "Callable", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Apply a function to the rolling window of 2 arrays\n\n    :param var_1: variable 1\n    :param var_2: variable 2\n    :param window: length of the rolling window\n    :param func: function to apply on the rolling window on variable 2 (such as np.mean)\n    :return:  the rolling output with applied function\n    \"\"\"", "\n", "var_2_window", "=", "rolling_window", "(", "var_2", ",", "window", ")", "\n", "function_on_var2", "=", "func", "(", "var_2_window", ",", "axis", "=", "-", "1", ")", "\n", "return", "var_1", "[", "window", "-", "1", ":", "]", ",", "function_on_var2", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.ts2xy": [[47, 69], ["numpy.cumsum", "numpy.arange", "len"], "function", ["None"], ["", "def", "ts2xy", "(", "data_frame", ":", "pd", ".", "DataFrame", ",", "x_axis", ":", "str", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Decompose a data frame variable to x ans ys\n\n    :param data_frame: the input data\n    :param x_axis: the axis for the x and y output\n        (can be X_TIMESTEPS='timesteps', X_EPISODES='episodes' or X_WALLTIME='walltime_hrs')\n    :return: the x and y output\n    \"\"\"", "\n", "if", "x_axis", "==", "X_TIMESTEPS", ":", "\n", "        ", "x_var", "=", "np", ".", "cumsum", "(", "data_frame", ".", "l", ".", "values", ")", "\n", "y_var", "=", "data_frame", ".", "r", ".", "values", "\n", "", "elif", "x_axis", "==", "X_EPISODES", ":", "\n", "        ", "x_var", "=", "np", ".", "arange", "(", "len", "(", "data_frame", ")", ")", "\n", "y_var", "=", "data_frame", ".", "r", ".", "values", "\n", "", "elif", "x_axis", "==", "X_WALLTIME", ":", "\n", "# Convert to hours", "\n", "        ", "x_var", "=", "data_frame", ".", "t", ".", "values", "/", "3600.0", "\n", "y_var", "=", "data_frame", ".", "r", ".", "values", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "x_var", ",", "y_var", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.plot_curves": [[71, 99], ["matplotlib.pyplot.figure", "max", "enumerate", "matplotlib.pyplot.xlim", "matplotlib.pyplot.title", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.scatter", "results_plotter.window_func", "matplotlib.pyplot.plot"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.window_func"], ["", "def", "plot_curves", "(", "\n", "xy_list", ":", "List", "[", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", "]", ",", "x_axis", ":", "str", ",", "title", ":", "str", ",", "figsize", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "8", ",", "2", ")", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    plot the curves\n\n    :param xy_list: the x and y coordinates to plot\n    :param x_axis: the axis for the x and y output\n        (can be X_TIMESTEPS='timesteps', X_EPISODES='episodes' or X_WALLTIME='walltime_hrs')\n    :param title: the title of the plot\n    :param figsize: Size of the figure (width, height)\n    \"\"\"", "\n", "\n", "plt", ".", "figure", "(", "title", ",", "figsize", "=", "figsize", ")", "\n", "max_x", "=", "max", "(", "xy", "[", "0", "]", "[", "-", "1", "]", "for", "xy", "in", "xy_list", ")", "\n", "min_x", "=", "0", "\n", "for", "(", "_", ",", "(", "x", ",", "y", ")", ")", "in", "enumerate", "(", "xy_list", ")", ":", "\n", "        ", "plt", ".", "scatter", "(", "x", ",", "y", ",", "s", "=", "2", ")", "\n", "# Do not plot the smoothed curve at all if the timeseries is shorter than window size.", "\n", "if", "x", ".", "shape", "[", "0", "]", ">=", "EPISODES_WINDOW", ":", "\n", "# Compute and plot rolling mean with window of size EPISODE_WINDOW", "\n", "            ", "x", ",", "y_mean", "=", "window_func", "(", "x", ",", "y", ",", "EPISODES_WINDOW", ",", "np", ".", "mean", ")", "\n", "plt", ".", "plot", "(", "x", ",", "y_mean", ")", "\n", "", "", "plt", ".", "xlim", "(", "min_x", ",", "max_x", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "x_axis", ")", "\n", "plt", ".", "ylabel", "(", "\"Episode Rewards\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.plot_results": [[101, 123], ["results_plotter.plot_curves", "stable_baselines3.common.monitor.load_results", "data_frames.append", "results_plotter.ts2xy", "stable_baselines3.common.monitor.load_results.l.cumsum"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.plot_curves", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.load_results", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.results_plotter.ts2xy"], ["", "def", "plot_results", "(", "\n", "dirs", ":", "List", "[", "str", "]", ",", "num_timesteps", ":", "Optional", "[", "int", "]", ",", "x_axis", ":", "str", ",", "task_name", ":", "str", ",", "figsize", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "8", ",", "2", ")", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Plot the results using csv files from ``Monitor`` wrapper.\n\n    :param dirs: the save location of the results to plot\n    :param num_timesteps: only plot the points below this value\n    :param x_axis: the axis for the x and y output\n        (can be X_TIMESTEPS='timesteps', X_EPISODES='episodes' or X_WALLTIME='walltime_hrs')\n    :param task_name: the title of the task to plot\n    :param figsize: Size of the figure (width, height)\n    \"\"\"", "\n", "\n", "data_frames", "=", "[", "]", "\n", "for", "folder", "in", "dirs", ":", "\n", "        ", "data_frame", "=", "load_results", "(", "folder", ")", "\n", "if", "num_timesteps", "is", "not", "None", ":", "\n", "            ", "data_frame", "=", "data_frame", "[", "data_frame", ".", "l", ".", "cumsum", "(", ")", "<=", "num_timesteps", "]", "\n", "", "data_frames", ".", "append", "(", "data_frame", ")", "\n", "", "xy_list", "=", "[", "ts2xy", "(", "data_frame", ",", "x_axis", ")", "for", "data_frame", "in", "data_frames", "]", "\n", "plot_curves", "(", "xy_list", ",", "x_axis", ",", "task_name", ",", "figsize", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.recursive_getattr": [[24, 41], ["functools.reduce", "getattr", "attr.split"], "function", ["None"], ["def", "recursive_getattr", "(", "obj", ":", "Any", ",", "attr", ":", "str", ",", "*", "args", ")", "->", "Any", ":", "\n", "    ", "\"\"\"\n    Recursive version of getattr\n    taken from https://stackoverflow.com/questions/31174295\n\n    Ex:\n    > MyObject.sub_object = SubObject(name='test')\n    > recursive_getattr(MyObject, 'sub_object.name')  # return test\n    :param obj:\n    :param attr: Attribute to retrieve\n    :return: The attribute\n    \"\"\"", "\n", "\n", "def", "_getattr", "(", "obj", ":", "Any", ",", "attr", ":", "str", ")", "->", "Any", ":", "\n", "        ", "return", "getattr", "(", "obj", ",", "attr", ",", "*", "args", ")", "\n", "\n", "", "return", "functools", ".", "reduce", "(", "_getattr", ",", "[", "obj", "]", "+", "attr", ".", "split", "(", "\".\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.recursive_setattr": [[43, 57], ["attr.rpartition", "setattr", "save_util.recursive_getattr"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.recursive_getattr"], ["", "def", "recursive_setattr", "(", "obj", ":", "Any", ",", "attr", ":", "str", ",", "val", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Recursive version of setattr\n    taken from https://stackoverflow.com/questions/31174295\n\n    Ex:\n    > MyObject.sub_object = SubObject(name='test')\n    > recursive_setattr(MyObject, 'sub_object.name', 'hello')\n    :param obj:\n    :param attr: Attribute to set\n    :param val: New value of the attribute\n    \"\"\"", "\n", "pre", ",", "_", ",", "post", "=", "attr", ".", "rpartition", "(", "\".\"", ")", "\n", "return", "setattr", "(", "recursive_getattr", "(", "obj", ",", "pre", ")", "if", "pre", "else", "obj", ",", "post", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.is_json_serializable": [[59, 73], ["json.dumps"], "function", ["None"], ["", "def", "is_json_serializable", "(", "item", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Test if an object is serializable into JSON\n\n    :param item: The object to be tested for JSON serialization.\n    :return: True if object is JSON serializable, false otherwise.\n    \"\"\"", "\n", "# Try with try-except struct.", "\n", "json_serializable", "=", "True", "\n", "try", ":", "\n", "        ", "_", "=", "json", ".", "dumps", "(", "item", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "json_serializable", "=", "False", "\n", "", "return", "json_serializable", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.data_to_json": [[75, 128], ["data.items", "json.dumps", "save_util.is_json_serializable", "base64.b64encode().decode", "str", "hasattr", "isinstance", "item_generator", "base64.b64encode", "type", "isinstance", "save_util.is_json_serializable", "cloudpickle.dumps", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.is_json_serializable", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.is_json_serializable"], ["", "def", "data_to_json", "(", "data", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Turn data (class parameters) into a JSON string for storing\n\n    :param data: Dictionary of class parameters to be\n        stored. Items that are not JSON serializable will be\n        pickled with Cloudpickle and stored as bytearray in\n        the JSON file\n    :return: JSON string of the data serialized.\n    \"\"\"", "\n", "# First, check what elements can not be JSONfied,", "\n", "# and turn them into byte-strings", "\n", "serializable_data", "=", "{", "}", "\n", "for", "data_key", ",", "data_item", "in", "data", ".", "items", "(", ")", ":", "\n", "# See if object is JSON serializable", "\n", "        ", "if", "is_json_serializable", "(", "data_item", ")", ":", "\n", "# All good, store as it is", "\n", "            ", "serializable_data", "[", "data_key", "]", "=", "data_item", "\n", "", "else", ":", "\n", "# Not serializable, cloudpickle it into", "\n", "# bytes and convert to base64 string for storing.", "\n", "# Also store type of the class for consumption", "\n", "# from other languages/humans, so we have an", "\n", "# idea what was being stored.", "\n", "            ", "base64_encoded", "=", "base64", ".", "b64encode", "(", "cloudpickle", ".", "dumps", "(", "data_item", ")", ")", ".", "decode", "(", ")", "\n", "\n", "# Use \":\" to make sure we do", "\n", "# not override these keys", "\n", "# when we include variables of the object later", "\n", "cloudpickle_serialization", "=", "{", "\n", "\":type:\"", ":", "str", "(", "type", "(", "data_item", ")", ")", ",", "\n", "\":serialized:\"", ":", "base64_encoded", ",", "\n", "}", "\n", "\n", "# Add first-level JSON-serializable items of the", "\n", "# object for further details (but not deeper than this to", "\n", "# avoid deep nesting).", "\n", "# First we check that object has attributes (not all do,", "\n", "# e.g. numpy scalars)", "\n", "if", "hasattr", "(", "data_item", ",", "\"__dict__\"", ")", "or", "isinstance", "(", "data_item", ",", "dict", ")", ":", "\n", "# Take elements from __dict__ for custom classes", "\n", "                ", "item_generator", "=", "data_item", ".", "items", "if", "isinstance", "(", "data_item", ",", "dict", ")", "else", "data_item", ".", "__dict__", ".", "items", "\n", "for", "variable_name", ",", "variable_item", "in", "item_generator", "(", ")", ":", "\n", "# Check if serializable. If not, just include the", "\n", "# string-representation of the object.", "\n", "                    ", "if", "is_json_serializable", "(", "variable_item", ")", ":", "\n", "                        ", "cloudpickle_serialization", "[", "variable_name", "]", "=", "variable_item", "\n", "", "else", ":", "\n", "                        ", "cloudpickle_serialization", "[", "variable_name", "]", "=", "str", "(", "variable_item", ")", "\n", "\n", "", "", "", "serializable_data", "[", "data_key", "]", "=", "cloudpickle_serialization", "\n", "", "", "json_string", "=", "json", ".", "dumps", "(", "serializable_data", ",", "indent", "=", "4", ")", "\n", "return", "json_string", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.json_to_data": [[130, 176], ["json.loads", "json.loads.items", "ValueError", "isinstance", "custom_objects.keys", "isinstance", "data_item.keys", "base64.b64decode", "cloudpickle.loads", "serialization.encode", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "def", "json_to_data", "(", "json_string", ":", "str", ",", "custom_objects", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Turn JSON serialization of class-parameters back into dictionary.\n\n    :param json_string: JSON serialization of the class-parameters\n        that should be loaded.\n    :param custom_objects: Dictionary of objects to replace\n        upon loading. If a variable is present in this dictionary as a\n        key, it will not be deserialized and the corresponding item\n        will be used instead. Similar to custom_objects in\n        ``keras.models.load_model``. Useful when you have an object in\n        file that can not be deserialized.\n    :return: Loaded class parameters.\n    \"\"\"", "\n", "if", "custom_objects", "is", "not", "None", "and", "not", "isinstance", "(", "custom_objects", ",", "dict", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"custom_objects argument must be a dict or None\"", ")", "\n", "\n", "", "json_dict", "=", "json", ".", "loads", "(", "json_string", ")", "\n", "# This will be filled with deserialized data", "\n", "return_data", "=", "{", "}", "\n", "for", "data_key", ",", "data_item", "in", "json_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "custom_objects", "is", "not", "None", "and", "data_key", "in", "custom_objects", ".", "keys", "(", ")", ":", "\n", "# If item is provided in custom_objects, replace", "\n", "# the one from JSON with the one in custom_objects", "\n", "            ", "return_data", "[", "data_key", "]", "=", "custom_objects", "[", "data_key", "]", "\n", "", "elif", "isinstance", "(", "data_item", ",", "dict", ")", "and", "\":serialized:\"", "in", "data_item", ".", "keys", "(", ")", ":", "\n", "# If item is dictionary with \":serialized:\"", "\n", "# key, this means it is serialized with cloudpickle.", "\n", "            ", "serialization", "=", "data_item", "[", "\":serialized:\"", "]", "\n", "# Try-except deserialization in case we run into", "\n", "# errors. If so, we can tell bit more information to", "\n", "# user.", "\n", "try", ":", "\n", "                ", "base64_object", "=", "base64", ".", "b64decode", "(", "serialization", ".", "encode", "(", ")", ")", "\n", "deserialized_object", "=", "cloudpickle", ".", "loads", "(", "base64_object", ")", "\n", "", "except", "(", "RuntimeError", ",", "TypeError", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "f\"Could not deserialize object {data_key}. \"", "\n", "+", "\"Consider using `custom_objects` argument to replace \"", "\n", "+", "\"this object.\"", "\n", ")", "\n", "", "return_data", "[", "data_key", "]", "=", "deserialized_object", "\n", "", "else", ":", "\n", "# Read as it is", "\n", "            ", "return_data", "[", "data_key", "]", "=", "data_item", "\n", "", "", "return", "return_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path": [[178, 215], ["mode.lower.lower", "isinstance", "TypeError", "ValueError", "ValueError", "ValueError", "path.writable", "path.readable", "pathlib.Path"], "function", ["None"], ["", "@", "functools", ".", "singledispatch", "\n", "def", "open_path", "(", "path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ",", "mode", ":", "str", ",", "verbose", ":", "int", "=", "0", ",", "suffix", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Opens a path for reading or writing with a preferred suffix and raises debug information.\n    If the provided path is a derivative of io.BufferedIOBase it ensures that the file\n    matches the provided mode, i.e. If the mode is read (\"r\", \"read\") it checks that the path is readable.\n    If the mode is write (\"w\", \"write\") it checks that the file is writable.\n\n    If the provided path is a string or a pathlib.Path, it ensures that it exists. If the mode is \"read\"\n    it checks that it exists, if it doesn't exist it attempts to read path.suffix if a suffix is provided.\n    If the mode is \"write\" and the path does not exist, it creates all the parent folders. If the path\n    points to a folder, it changes the path to path_2. If the path already exists and verbose == 2,\n    it raises a warning.\n\n    :param path: the path to open.\n        if save_path is a str or pathlib.Path and mode is \"w\", single dispatch ensures that the\n        path actually exists. If path is a io.BufferedIOBase the path exists.\n    :param mode: how to open the file. \"w\"|\"write\" for writing, \"r\"|\"read\" for reading.\n    :param verbose: Verbosity level, 0 means only warnings, 2 means debug information.\n    :param suffix: The preferred suffix. If mode is \"w\" then the opened file has the suffix.\n        If mode is \"r\" then we attempt to open the path. If an error is raised and the suffix\n        is not None, we attempt to open the path with the suffix.\n    :return:\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "path", ",", "io", ".", "BufferedIOBase", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Path parameter has invalid type.\"", ",", "io", ".", "BufferedIOBase", ")", "\n", "", "if", "path", ".", "closed", ":", "\n", "        ", "raise", "ValueError", "(", "\"File stream is closed.\"", ")", "\n", "", "mode", "=", "mode", ".", "lower", "(", ")", "\n", "try", ":", "\n", "        ", "mode", "=", "{", "\"write\"", ":", "\"w\"", ",", "\"read\"", ":", "\"r\"", ",", "\"w\"", ":", "\"w\"", ",", "\"r\"", ":", "\"r\"", "}", "[", "mode", "]", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "        ", "raise", "ValueError", "(", "\"Expected mode to be either 'w' or 'r'.\"", ")", "from", "e", "\n", "", "if", "(", "\"w\"", "==", "mode", ")", "and", "not", "path", ".", "writable", "(", ")", "or", "(", "\"r\"", "==", "mode", ")", "and", "not", "path", ".", "readable", "(", ")", ":", "\n", "        ", "e1", "=", "\"writable\"", "if", "\"w\"", "==", "mode", "else", "\"readable\"", "\n", "raise", "ValueError", "(", "f\"Expected a {e1} file.\"", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path_str": [[217, 233], ["open_path.register", "save_util.open_path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path"], ["", "@", "open_path", ".", "register", "(", "str", ")", "\n", "def", "open_path_str", "(", "path", ":", "str", ",", "mode", ":", "str", ",", "verbose", ":", "int", "=", "0", ",", "suffix", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "io", ".", "BufferedIOBase", ":", "\n", "    ", "\"\"\"\n    Open a path given by a string. If writing to the path, the function ensures\n    that the path exists.\n\n    :param path: the path to open. If mode is \"w\" then it ensures that the path exists\n        by creating the necessary folders and renaming path if it points to a folder.\n    :param mode: how to open the file. \"w\" for writing, \"r\" for reading.\n    :param verbose: Verbosity level, 0 means only warnings, 2 means debug information.\n    :param suffix: The preferred suffix. If mode is \"w\" then the opened file has the suffix.\n        If mode is \"r\" then we attempt to open the path. If an error is raised and the suffix\n        is not None, we attempt to open the path with the suffix.\n    :return:\n    \"\"\"", "\n", "return", "open_path", "(", "pathlib", ".", "Path", "(", "path", ")", ",", "mode", ",", "verbose", ",", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path_pathlib": [[235, 285], ["open_path.register", "save_util.open_path", "ValueError", "pathlib.Path.open", "pathlib.Path.open", "pathlib.Path", "pathlib.Path.exists", "pathlib.Path.is_file", "warnings.warn", "warnings.warn", "pathlib.Path", "warnings.warn", "pathlib.Path.parent.mkdir", "pathlib.Path", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "@", "open_path", ".", "register", "(", "pathlib", ".", "Path", ")", "\n", "def", "open_path_pathlib", "(", "path", ":", "pathlib", ".", "Path", ",", "mode", ":", "str", ",", "verbose", ":", "int", "=", "0", ",", "suffix", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "io", ".", "BufferedIOBase", ":", "\n", "    ", "\"\"\"\n    Open a path given by a string. If writing to the path, the function ensures\n    that the path exists.\n\n    :param path: the path to check. If mode is \"w\" then it\n        ensures that the path exists by creating the necessary folders and\n        renaming path if it points to a folder.\n    :param mode: how to open the file. \"w\" for writing, \"r\" for reading.\n    :param verbose: Verbosity level, 0 means only warnings, 2 means debug information.\n    :param suffix: The preferred suffix. If mode is \"w\" then the opened file has the suffix.\n        If mode is \"r\" then we attempt to open the path. If an error is raised and the suffix\n        is not None, we attempt to open the path with the suffix.\n    :return:\n    \"\"\"", "\n", "if", "mode", "not", "in", "(", "\"w\"", ",", "\"r\"", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Expected mode to be either 'w' or 'r'.\"", ")", "\n", "\n", "", "if", "mode", "==", "\"r\"", ":", "\n", "        ", "try", ":", "\n", "            ", "path", "=", "path", ".", "open", "(", "\"rb\"", ")", "\n", "", "except", "FileNotFoundError", "as", "error", ":", "\n", "            ", "if", "suffix", "is", "not", "None", "and", "suffix", "!=", "\"\"", ":", "\n", "                ", "newpath", "=", "pathlib", ".", "Path", "(", "f\"{path}.{suffix}\"", ")", "\n", "if", "verbose", "==", "2", ":", "\n", "                    ", "warnings", ".", "warn", "(", "f\"Path '{path}' not found. Attempting {newpath}.\"", ")", "\n", "", "path", ",", "suffix", "=", "newpath", ",", "None", "\n", "", "else", ":", "\n", "                ", "raise", "error", "\n", "", "", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "path", ".", "suffix", "==", "\"\"", "and", "suffix", "is", "not", "None", "and", "suffix", "!=", "\"\"", ":", "\n", "                ", "path", "=", "pathlib", ".", "Path", "(", "f\"{path}.{suffix}\"", ")", "\n", "", "if", "path", ".", "exists", "(", ")", "and", "path", ".", "is_file", "(", ")", "and", "verbose", "==", "2", ":", "\n", "                ", "warnings", ".", "warn", "(", "f\"Path '{path}' exists, will overwrite it.\"", ")", "\n", "", "path", "=", "path", ".", "open", "(", "\"wb\"", ")", "\n", "", "except", "IsADirectoryError", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"Path '{path}' is a folder. Will save instead to {path}_2\"", ")", "\n", "path", "=", "pathlib", ".", "Path", "(", "f\"{path}_2\"", ")", "\n", "", "except", "FileNotFoundError", ":", "# Occurs when the parent folder doesn't exist", "\n", "            ", "warnings", ".", "warn", "(", "f\"Path '{path.parent}' does not exist. Will create it.\"", ")", "\n", "path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "# if opening was successful uses the identity function", "\n", "# if opening failed with IsADirectory|FileNotFound, calls open_path_pathlib", "\n", "#   with corrections", "\n", "# if reading failed with FileNotFoundError, calls open_path_pathlib with suffix", "\n", "\n", "", "", "return", "open_path", "(", "path", ",", "mode", ",", "verbose", ",", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.save_to_zip_file": [[287, 327], ["save_util.open_path", "save_util.data_to_json", "zipfile.ZipFile", "archive.writestr", "archive.writestr", "archive.writestr", "params.items", "archive.open", "torch.save", "stable_baselines3.common.utils.get_system_info", "archive.open", "torch.save"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.data_to_json", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_system_info", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save"], ["", "def", "save_to_zip_file", "(", "\n", "save_path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ",", "\n", "data", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "params", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "pytorch_variables", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Save model data to a zip archive.\n\n    :param save_path: Where to store the model.\n        if save_path is a str or pathlib.Path ensures that the path actually exists.\n    :param data: Class parameters being stored (non-PyTorch variables)\n    :param params: Model parameters being stored expected to contain an entry for every\n                   state_dict with its name and the state_dict.\n    :param pytorch_variables: Other PyTorch variables expected to contain name and value of the variable.\n    :param verbose: Verbosity level, 0 means only warnings, 2 means debug information\n    \"\"\"", "\n", "save_path", "=", "open_path", "(", "save_path", ",", "\"w\"", ",", "verbose", "=", "0", ",", "suffix", "=", "\"zip\"", ")", "\n", "# data/params can be None, so do not", "\n", "# try to serialize them blindly", "\n", "if", "data", "is", "not", "None", ":", "\n", "        ", "serialized_data", "=", "data_to_json", "(", "data", ")", "\n", "\n", "# Create a zip-archive and write our objects there.", "\n", "", "with", "zipfile", ".", "ZipFile", "(", "save_path", ",", "mode", "=", "\"w\"", ")", "as", "archive", ":", "\n", "# Do not try to save \"None\" elements", "\n", "        ", "if", "data", "is", "not", "None", ":", "\n", "            ", "archive", ".", "writestr", "(", "\"data\"", ",", "serialized_data", ")", "\n", "", "if", "pytorch_variables", "is", "not", "None", ":", "\n", "            ", "with", "archive", ".", "open", "(", "\"pytorch_variables.pth\"", ",", "mode", "=", "\"w\"", ",", "force_zip64", "=", "True", ")", "as", "pytorch_variables_file", ":", "\n", "                ", "th", ".", "save", "(", "pytorch_variables", ",", "pytorch_variables_file", ")", "\n", "", "", "if", "params", "is", "not", "None", ":", "\n", "            ", "for", "file_name", ",", "dict_", "in", "params", ".", "items", "(", ")", ":", "\n", "                ", "with", "archive", ".", "open", "(", "file_name", "+", "\".pth\"", ",", "mode", "=", "\"w\"", ",", "force_zip64", "=", "True", ")", "as", "param_file", ":", "\n", "                    ", "th", ".", "save", "(", "dict_", ",", "param_file", ")", "\n", "# Save metadata: library version when file was saved", "\n", "", "", "", "archive", ".", "writestr", "(", "\"_stable_baselines3_version\"", ",", "sb3", ".", "__version__", ")", "\n", "# Save system info about the current python env", "\n", "archive", ".", "writestr", "(", "\"system_info.txt\"", ",", "get_system_info", "(", "print_info", "=", "False", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.save_to_pkl": [[329, 345], ["save_util.open_path", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump"], ["", "", "def", "save_to_pkl", "(", "path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ",", "obj", ":", "Any", ",", "verbose", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Save an object to path creating the necessary folders along the way.\n    If the path exists and is a directory, it will raise a warning and rename the path.\n    If a suffix is provided in the path, it will use that suffix, otherwise, it will use '.pkl'.\n\n    :param path: the path to open.\n        if save_path is a str or pathlib.Path and mode is \"w\", single dispatch ensures that the\n        path actually exists. If path is a io.BufferedIOBase the path exists.\n    :param obj: The object to save.\n    :param verbose: Verbosity level, 0 means only warnings, 2 means debug information.\n    \"\"\"", "\n", "with", "open_path", "(", "path", ",", "\"w\"", ",", "verbose", "=", "verbose", ",", "suffix", "=", "\"pkl\"", ")", "as", "file_handler", ":", "\n", "# Use protocol>=4 to support saving replay buffers >= 4Gb", "\n", "# See https://docs.python.org/3/library/pickle.html", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "file_handler", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_pkl": [[347, 359], ["save_util.open_path", "pickle.load"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load"], ["", "", "def", "load_from_pkl", "(", "path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ",", "verbose", ":", "int", "=", "0", ")", "->", "Any", ":", "\n", "    ", "\"\"\"\n    Load an object from the path. If a suffix is provided in the path, it will use that suffix.\n    If the path does not exist, it will attempt to load using the .pkl suffix.\n\n    :param path: the path to open.\n        if save_path is a str or pathlib.Path and mode is \"w\", single dispatch ensures that the\n        path actually exists. If path is a io.BufferedIOBase the path exists.\n    :param verbose: Verbosity level, 0 means only warnings, 2 means debug information.\n    \"\"\"", "\n", "with", "open_path", "(", "path", ",", "\"r\"", ",", "verbose", "=", "verbose", ",", "suffix", "=", "\"pkl\"", ")", "as", "file_handler", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "file_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_zip_file": [[361, 448], ["save_util.open_path", "stable_baselines3.common.utils.get_device", "zipfile.ZipFile", "archive.namelist", "ValueError", "archive.read().decode", "save_util.json_to_data", "print", "print", "warnings.warn", "archive.open", "io.BytesIO", "io.BytesIO.write", "io.BytesIO.seek", "torch.load", "archive.read().decode", "archive.read", "param_file.read", "os.path.splitext", "archive.read", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.json_to_data", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load"], ["", "", "def", "load_from_zip_file", "(", "\n", "load_path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ",", "\n", "load_data", ":", "bool", "=", "True", ",", "\n", "custom_objects", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "print_system_info", ":", "bool", "=", "False", ",", "\n", ")", "->", "(", "Tuple", "[", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "Optional", "[", "TensorDict", "]", ",", "Optional", "[", "TensorDict", "]", "]", ")", ":", "\n", "    ", "\"\"\"\n    Load model data from a .zip archive\n\n    :param load_path: Where to load the model from\n    :param load_data: Whether we should load and return data\n        (class parameters). Mainly used by 'load_parameters' to only load model parameters (weights)\n    :param custom_objects: Dictionary of objects to replace\n        upon loading. If a variable is present in this dictionary as a\n        key, it will not be deserialized and the corresponding item\n        will be used instead. Similar to custom_objects in\n        ``keras.models.load_model``. Useful when you have an object in\n        file that can not be deserialized.\n    :param device: Device on which the code should run.\n    :param verbose: Verbosity level, 0 means only warnings, 2 means debug information.\n    :param print_system_info: Whether to print or not the system info\n        about the saved model.\n    :return: Class parameters, model state_dicts (aka \"params\", dict of state_dict)\n        and dict of pytorch variables\n    \"\"\"", "\n", "load_path", "=", "open_path", "(", "load_path", ",", "\"r\"", ",", "verbose", "=", "verbose", ",", "suffix", "=", "\"zip\"", ")", "\n", "\n", "# set device to cpu if cuda is not available", "\n", "device", "=", "get_device", "(", "device", "=", "device", ")", "\n", "\n", "# Open the zip archive and load data", "\n", "try", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "load_path", ")", "as", "archive", ":", "\n", "            ", "namelist", "=", "archive", ".", "namelist", "(", ")", "\n", "# If data or parameters is not in the", "\n", "# zip archive, assume they were stored", "\n", "# as None (_save_to_file_zip allows this).", "\n", "data", "=", "None", "\n", "pytorch_variables", "=", "None", "\n", "params", "=", "{", "}", "\n", "\n", "# Debug system info first", "\n", "if", "print_system_info", ":", "\n", "                ", "if", "\"system_info.txt\"", "in", "namelist", ":", "\n", "                    ", "print", "(", "\"== SAVED MODEL SYSTEM INFO ==\"", ")", "\n", "print", "(", "archive", ".", "read", "(", "\"system_info.txt\"", ")", ".", "decode", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "\"The model was saved with SB3 <= 1.2.0 and thus cannot print system information.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "\n", "", "", "if", "\"data\"", "in", "namelist", "and", "load_data", ":", "\n", "# Load class parameters that are stored", "\n", "# with either JSON or pickle (not PyTorch variables).", "\n", "                ", "json_data", "=", "archive", ".", "read", "(", "\"data\"", ")", ".", "decode", "(", ")", "\n", "data", "=", "json_to_data", "(", "json_data", ",", "custom_objects", "=", "custom_objects", ")", "\n", "\n", "# Check for all .pth files and load them using th.load.", "\n", "# \"pytorch_variables.pth\" stores PyTorch variables, and any other .pth", "\n", "# files store state_dicts of variables with custom names (e.g. policy, policy.optimizer)", "\n", "", "pth_files", "=", "[", "file_name", "for", "file_name", "in", "namelist", "if", "os", ".", "path", ".", "splitext", "(", "file_name", ")", "[", "1", "]", "==", "\".pth\"", "]", "\n", "for", "file_path", "in", "pth_files", ":", "\n", "                ", "with", "archive", ".", "open", "(", "file_path", ",", "mode", "=", "\"r\"", ")", "as", "param_file", ":", "\n", "# File has to be seekable, but param_file is not, so load in BytesIO first", "\n", "# fixed in python >= 3.7", "\n", "                    ", "file_content", "=", "io", ".", "BytesIO", "(", ")", "\n", "file_content", ".", "write", "(", "param_file", ".", "read", "(", ")", ")", "\n", "# go to start of file", "\n", "file_content", ".", "seek", "(", "0", ")", "\n", "# Load the parameters with the right ``map_location``.", "\n", "# Remove \".pth\" ending with splitext", "\n", "th_object", "=", "th", ".", "load", "(", "file_content", ",", "map_location", "=", "device", ")", "\n", "# \"tensors.pth\" was renamed \"pytorch_variables.pth\" in v0.9.0, see PR #138", "\n", "if", "file_path", "==", "\"pytorch_variables.pth\"", "or", "file_path", "==", "\"tensors.pth\"", ":", "\n", "# PyTorch variables (not state_dicts)", "\n", "                        ", "pytorch_variables", "=", "th_object", "\n", "", "else", ":", "\n", "# State dicts. Store into params dictionary", "\n", "# with same name as in .zip file (without .pth)", "\n", "                        ", "params", "[", "os", ".", "path", ".", "splitext", "(", "file_path", ")", "[", "0", "]", "]", "=", "th_object", "\n", "", "", "", "", "", "except", "zipfile", ".", "BadZipFile", "as", "e", ":", "\n", "# load_path wasn't a zip file", "\n", "        ", "raise", "ValueError", "(", "f\"Error: the file {load_path} wasn't a zip-file\"", ")", "from", "e", "\n", "", "return", "data", ",", "params", ",", "pytorch_variables", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.BaseFeaturesExtractor.__init__": [[21, 26], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "observation_space", ":", "gym", ".", "Space", ",", "features_dim", ":", "int", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "features_dim", ">", "0", "\n", "self", ".", "_observation_space", "=", "observation_space", "\n", "self", ".", "_features_dim", "=", "features_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.BaseFeaturesExtractor.features_dim": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "features_dim", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_features_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.BaseFeaturesExtractor.forward": [[31, 33], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "observations", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.FlattenExtractor.__init__": [[43, 46], ["torch_layers.BaseFeaturesExtractor.__init__", "torch.nn.Flatten", "stable_baselines3.common.preprocessing.get_flattened_obs_dim"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_flattened_obs_dim"], ["def", "__init__", "(", "self", ",", "observation_space", ":", "gym", ".", "Space", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "observation_space", ",", "get_flattened_obs_dim", "(", "observation_space", ")", ")", "\n", "self", ".", "flatten", "=", "nn", ".", "Flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.FlattenExtractor.forward": [[47, 49], ["torch_layers.FlattenExtractor.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "observations", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "flatten", "(", "observations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.NatureCNN.__init__": [[63, 91], ["torch_layers.BaseFeaturesExtractor.__init__", "stable_baselines3.common.preprocessing.is_image_space", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Flatten", "torch.no_grad", "torch.nn.Linear", "torch.nn.ReLU", "torch_layers.NatureCNN.cnn", "torch.as_tensor().float", "torch.as_tensor", "observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["def", "__init__", "(", "self", ",", "observation_space", ":", "gym", ".", "spaces", ".", "Box", ",", "features_dim", ":", "int", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "observation_space", ",", "features_dim", ")", "\n", "# We assume CxHxW images (channels first)", "\n", "# Re-ordering will be done by pre-preprocessing or wrapper", "\n", "assert", "is_image_space", "(", "observation_space", ",", "check_channels", "=", "False", ")", ",", "(", "\n", "\"You should use NatureCNN \"", "\n", "f\"only with images not with {observation_space}\\n\"", "\n", "\"(you are probably using `CnnPolicy` instead of `MlpPolicy` or `MultiInputPolicy`)\\n\"", "\n", "\"If you are using a custom environment,\\n\"", "\n", "\"please check it using our env checker:\\n\"", "\n", "\"https://stable-baselines3.readthedocs.io/en/master/common/env_checker.html\"", "\n", ")", "\n", "n_input_channels", "=", "observation_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "cnn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "n_input_channels", ",", "32", ",", "kernel_size", "=", "8", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", ")", "\n", "\n", "# Compute shape by doing one forward pass", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "n_flatten", "=", "self", ".", "cnn", "(", "th", ".", "as_tensor", "(", "observation_space", ".", "sample", "(", ")", "[", "None", "]", ")", ".", "float", "(", ")", ")", ".", "shape", "[", "1", "]", "\n", "\n", "", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_flatten", ",", "features_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.NatureCNN.forward": [[92, 94], ["torch_layers.NatureCNN.linear", "torch_layers.NatureCNN.cnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "observations", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "linear", "(", "self", ".", "cnn", "(", "observations", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.MlpExtractor.__init__": [[165, 223], ["torch.nn.Module.__init__", "stable_baselines3.common.utils.get_device", "itertools.zip_longest", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "isinstance", "shared_net.append", "shared_net.append", "isinstance", "isinstance", "policy_net.append", "policy_net.append", "isinstance", "value_net.append", "value_net.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "activation_fn", "isinstance", "isinstance", "torch.nn.Linear", "activation_fn", "torch.nn.Linear", "activation_fn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device"], ["def", "__init__", "(", "\n", "self", ",", "\n", "feature_dim", ":", "int", ",", "\n", "net_arch", ":", "List", "[", "Union", "[", "int", ",", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "]", "]", ",", "\n", "activation_fn", ":", "Type", "[", "nn", ".", "Module", "]", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "device", "=", "get_device", "(", "device", ")", "\n", "shared_net", ",", "policy_net", ",", "value_net", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "policy_only_layers", "=", "[", "]", "# Layer sizes of the network that only belongs to the policy network", "\n", "value_only_layers", "=", "[", "]", "# Layer sizes of the network that only belongs to the value network", "\n", "last_layer_dim_shared", "=", "feature_dim", "\n", "\n", "# Iterate through the shared layers and build the shared parts of the network", "\n", "for", "layer", "in", "net_arch", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "int", ")", ":", "# Check that this is a shared layer", "\n", "# TODO: give layer a meaningful name", "\n", "                ", "shared_net", ".", "append", "(", "nn", ".", "Linear", "(", "last_layer_dim_shared", ",", "layer", ")", ")", "# add linear of size layer", "\n", "shared_net", ".", "append", "(", "activation_fn", "(", ")", ")", "\n", "last_layer_dim_shared", "=", "layer", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "layer", ",", "dict", ")", ",", "\"Error: the net_arch list can only contain ints and dicts\"", "\n", "if", "\"pi\"", "in", "layer", ":", "\n", "                    ", "assert", "isinstance", "(", "layer", "[", "\"pi\"", "]", ",", "list", ")", ",", "\"Error: net_arch[-1]['pi'] must contain a list of integers.\"", "\n", "policy_only_layers", "=", "layer", "[", "\"pi\"", "]", "\n", "\n", "", "if", "\"vf\"", "in", "layer", ":", "\n", "                    ", "assert", "isinstance", "(", "layer", "[", "\"vf\"", "]", ",", "list", ")", ",", "\"Error: net_arch[-1]['vf'] must contain a list of integers.\"", "\n", "value_only_layers", "=", "layer", "[", "\"vf\"", "]", "\n", "", "break", "# From here on the network splits up in policy and value network", "\n", "\n", "", "", "last_layer_dim_pi", "=", "last_layer_dim_shared", "\n", "last_layer_dim_vf", "=", "last_layer_dim_shared", "\n", "\n", "# Build the non-shared part of the network", "\n", "for", "pi_layer_size", ",", "vf_layer_size", "in", "zip_longest", "(", "policy_only_layers", ",", "value_only_layers", ")", ":", "\n", "            ", "if", "pi_layer_size", "is", "not", "None", ":", "\n", "                ", "assert", "isinstance", "(", "pi_layer_size", ",", "int", ")", ",", "\"Error: net_arch[-1]['pi'] must only contain integers.\"", "\n", "policy_net", ".", "append", "(", "nn", ".", "Linear", "(", "last_layer_dim_pi", ",", "pi_layer_size", ")", ")", "\n", "policy_net", ".", "append", "(", "activation_fn", "(", ")", ")", "\n", "last_layer_dim_pi", "=", "pi_layer_size", "\n", "\n", "", "if", "vf_layer_size", "is", "not", "None", ":", "\n", "                ", "assert", "isinstance", "(", "vf_layer_size", ",", "int", ")", ",", "\"Error: net_arch[-1]['vf'] must only contain integers.\"", "\n", "value_net", ".", "append", "(", "nn", ".", "Linear", "(", "last_layer_dim_vf", ",", "vf_layer_size", ")", ")", "\n", "value_net", ".", "append", "(", "activation_fn", "(", ")", ")", "\n", "last_layer_dim_vf", "=", "vf_layer_size", "\n", "\n", "# Save dim, used to create the distributions", "\n", "", "", "self", ".", "latent_dim_pi", "=", "last_layer_dim_pi", "\n", "self", ".", "latent_dim_vf", "=", "last_layer_dim_vf", "\n", "\n", "# Create networks", "\n", "# If the list of layers is empty, the network will just act as an Identity module", "\n", "self", ".", "shared_net", "=", "nn", ".", "Sequential", "(", "*", "shared_net", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "policy_net", "=", "nn", ".", "Sequential", "(", "*", "policy_net", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "value_net", "=", "nn", ".", "Sequential", "(", "*", "value_net", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.MlpExtractor.forward": [[224, 231], ["torch_layers.MlpExtractor.shared_net", "torch_layers.MlpExtractor.policy_net", "torch_layers.MlpExtractor.value_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ":", "th", ".", "Tensor", ")", "->", "Tuple", "[", "th", ".", "Tensor", ",", "th", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :return: latent_policy, latent_value of the specified network.\n            If all layers are shared, then ``latent_policy == latent_value``\n        \"\"\"", "\n", "shared_latent", "=", "self", ".", "shared_net", "(", "features", ")", "\n", "return", "self", ".", "policy_net", "(", "shared_latent", ")", ",", "self", ".", "value_net", "(", "shared_latent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.MlpExtractor.forward_actor": [[232, 234], ["torch_layers.MlpExtractor.policy_net", "torch_layers.MlpExtractor.shared_net"], "methods", ["None"], ["", "def", "forward_actor", "(", "self", ",", "features", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "policy_net", "(", "self", ".", "shared_net", "(", "features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.MlpExtractor.forward_critic": [[235, 237], ["torch_layers.MlpExtractor.value_net", "torch_layers.MlpExtractor.shared_net"], "methods", ["None"], ["", "def", "forward_critic", "(", "self", ",", "features", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "value_net", "(", "self", ".", "shared_net", "(", "features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.CombinedExtractor.__init__": [[251, 271], ["torch_layers.BaseFeaturesExtractor.__init__", "observation_space.spaces.items", "torch.nn.ModuleDict", "stable_baselines3.common.preprocessing.is_image_space", "torch_layers.NatureCNN", "torch.nn.Flatten", "stable_baselines3.common.preprocessing.get_flattened_obs_dim"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_flattened_obs_dim"], ["def", "__init__", "(", "self", ",", "observation_space", ":", "gym", ".", "spaces", ".", "Dict", ",", "cnn_output_dim", ":", "int", "=", "256", ")", ":", "\n", "# TODO we do not know features-dim here before going over all the items, so put something there. This is dirty!", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "observation_space", ",", "features_dim", "=", "1", ")", "\n", "\n", "extractors", "=", "{", "}", "\n", "\n", "total_concat_size", "=", "0", "\n", "for", "key", ",", "subspace", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", ":", "\n", "            ", "if", "is_image_space", "(", "subspace", ")", ":", "\n", "                ", "extractors", "[", "key", "]", "=", "NatureCNN", "(", "subspace", ",", "features_dim", "=", "cnn_output_dim", ")", "\n", "total_concat_size", "+=", "cnn_output_dim", "\n", "", "else", ":", "\n", "# The observation key is a vector, flatten it if needed", "\n", "                ", "extractors", "[", "key", "]", "=", "nn", ".", "Flatten", "(", ")", "\n", "total_concat_size", "+=", "get_flattened_obs_dim", "(", "subspace", ")", "\n", "\n", "", "", "self", ".", "extractors", "=", "nn", ".", "ModuleDict", "(", "extractors", ")", "\n", "\n", "# Update the features dim manually", "\n", "self", ".", "_features_dim", "=", "total_concat_size", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.CombinedExtractor.forward": [[272, 278], ["torch_layers.CombinedExtractor.extractors.items", "torch.cat", "encoded_tensor_list.append", "extractor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "observations", ":", "TensorDict", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "encoded_tensor_list", "=", "[", "]", "\n", "\n", "for", "key", ",", "extractor", "in", "self", ".", "extractors", ".", "items", "(", ")", ":", "\n", "            ", "encoded_tensor_list", ".", "append", "(", "extractor", "(", "observations", "[", "key", "]", ")", ")", "\n", "", "return", "th", ".", "cat", "(", "encoded_tensor_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.create_mlp": [[96, 134], ["range", "len", "modules.append", "modules.append", "modules.append", "modules.append", "torch.nn.Linear", "activation_fn", "len", "torch.nn.Linear", "activation_fn", "torch.nn.Linear", "torch.nn.Tanh", "len"], "function", ["None"], ["", "", "def", "create_mlp", "(", "\n", "input_dim", ":", "int", ",", "\n", "output_dim", ":", "int", ",", "\n", "net_arch", ":", "List", "[", "int", "]", ",", "\n", "activation_fn", ":", "Type", "[", "nn", ".", "Module", "]", "=", "nn", ".", "ReLU", ",", "\n", "squash_output", ":", "bool", "=", "False", ",", "\n", ")", "->", "List", "[", "nn", ".", "Module", "]", ":", "\n", "    ", "\"\"\"\n    Create a multi layer perceptron (MLP), which is\n    a collection of fully-connected layers each followed by an activation function.\n\n    :param input_dim: Dimension of the input vector\n    :param output_dim:\n    :param net_arch: Architecture of the neural net\n        It represents the number of units per layer.\n        The length of this list is the number of layers.\n    :param activation_fn: The activation function\n        to use after each layer.\n    :param squash_output: Whether to squash the output using a Tanh\n        activation function\n    :return:\n    \"\"\"", "\n", "\n", "if", "len", "(", "net_arch", ")", ">", "0", ":", "\n", "        ", "modules", "=", "[", "nn", ".", "Linear", "(", "input_dim", ",", "net_arch", "[", "0", "]", ")", ",", "activation_fn", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "net_arch", ")", "-", "1", ")", ":", "\n", "        ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "net_arch", "[", "idx", "]", ",", "net_arch", "[", "idx", "+", "1", "]", ")", ")", "\n", "modules", ".", "append", "(", "activation_fn", "(", ")", ")", "\n", "\n", "", "if", "output_dim", ">", "0", ":", "\n", "        ", "last_layer_dim", "=", "net_arch", "[", "-", "1", "]", "if", "len", "(", "net_arch", ")", ">", "0", "else", "input_dim", "\n", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "last_layer_dim", ",", "output_dim", ")", ")", "\n", "", "if", "squash_output", ":", "\n", "        ", "modules", ".", "append", "(", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.torch_layers.get_actor_critic_arch": [[280, 318], ["isinstance", "isinstance"], "function", ["None"], ["", "", "def", "get_actor_critic_arch", "(", "net_arch", ":", "Union", "[", "List", "[", "int", "]", ",", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "]", ")", "->", "Tuple", "[", "List", "[", "int", "]", ",", "List", "[", "int", "]", "]", ":", "\n", "    ", "\"\"\"\n    Get the actor and critic network architectures for off-policy actor-critic algorithms (SAC, TD3, DDPG).\n\n    The ``net_arch`` parameter allows to specify the amount and size of the hidden layers,\n    which can be different for the actor and the critic.\n    It is assumed to be a list of ints or a dict.\n\n    1. If it is a list, actor and critic networks will have the same architecture.\n        The architecture is represented by a list of integers (of arbitrary length (zero allowed))\n        each specifying the number of units per layer.\n       If the number of ints is zero, the network will be linear.\n    2. If it is a dict,  it should have the following structure:\n       ``dict(qf=[<critic network architecture>], pi=[<actor network architecture>])``.\n       where the network architecture is a list as described in 1.\n\n    For example, to have actor and critic that share the same network architecture,\n    you only need to specify ``net_arch=[256, 256]`` (here, two hidden layers of 256 units each).\n\n    If you want a different architecture for the actor and the critic,\n    then you can specify ``net_arch=dict(qf=[400, 300], pi=[64, 64])``.\n\n    .. note::\n        Compared to their on-policy counterparts, no shared layers (other than the features extractor)\n        between the actor and the critic are allowed (to prevent issues with target networks).\n\n    :param net_arch: The specification of the actor and critic networks.\n        See above for details on its formatting.\n    :return: The network architectures for the actor and the critic\n    \"\"\"", "\n", "if", "isinstance", "(", "net_arch", ",", "list", ")", ":", "\n", "        ", "actor_arch", ",", "critic_arch", "=", "net_arch", ",", "net_arch", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "net_arch", ",", "dict", ")", ",", "\"Error: the net_arch can only contain be a list of ints or a dict\"", "\n", "assert", "\"pi\"", "in", "net_arch", ",", "\"Error: no key 'pi' was provided in net_arch for the actor network\"", "\n", "assert", "\"qf\"", "in", "net_arch", ",", "\"Error: no key 'qf' was provided in net_arch for the critic network\"", "\n", "actor_arch", ",", "critic_arch", "=", "net_arch", "[", "\"pi\"", "]", ",", "net_arch", "[", "\"qf\"", "]", "\n", "", "return", "actor_arch", ",", "critic_arch", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.on_policy_algorithm.OnPolicyAlgorithm.__init__": [[51, 101], ["stable_baselines3.common.base_class.BaseAlgorithm.__init__", "on_policy_algorithm.OnPolicyAlgorithm._setup_model"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Union", "[", "str", ",", "Type", "[", "ActorCriticPolicy", "]", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", ",", "\n", "n_steps", ":", "int", ",", "\n", "gamma", ":", "float", ",", "\n", "gae_lambda", ":", "float", ",", "\n", "ent_coef", ":", "float", ",", "\n", "vf_coef", ":", "float", ",", "\n", "max_grad_norm", ":", "float", ",", "\n", "use_sde", ":", "bool", ",", "\n", "sde_sample_freq", ":", "int", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "monitor_wrapper", ":", "bool", "=", "True", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "_init_setup_model", ":", "bool", "=", "True", ",", "\n", "supported_action_spaces", ":", "Optional", "[", "Tuple", "[", "gym", ".", "spaces", ".", "Space", ",", "...", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policy", ",", "\n", "env", "=", "env", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "verbose", "=", "verbose", ",", "\n", "device", "=", "device", ",", "\n", "use_sde", "=", "use_sde", ",", "\n", "sde_sample_freq", "=", "sde_sample_freq", ",", "\n", "create_eval_env", "=", "create_eval_env", ",", "\n", "support_multi_env", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "tensorboard_log", "=", "tensorboard_log", ",", "\n", "supported_action_spaces", "=", "supported_action_spaces", ",", "\n", ")", "\n", "\n", "self", ".", "n_steps", "=", "n_steps", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "gae_lambda", "=", "gae_lambda", "\n", "self", ".", "ent_coef", "=", "ent_coef", "\n", "self", ".", "vf_coef", "=", "vf_coef", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "rollout_buffer", "=", "None", "\n", "\n", "if", "_init_setup_model", ":", "\n", "            ", "self", ".", "_setup_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.on_policy_algorithm.OnPolicyAlgorithm._setup_model": [[102, 125], ["on_policy_algorithm.OnPolicyAlgorithm._setup_lr_schedule", "on_policy_algorithm.OnPolicyAlgorithm.set_random_seed", "buffer_cls", "on_policy_algorithm.OnPolicyAlgorithm.policy_class", "on_policy_algorithm.OnPolicyAlgorithm.policy.to", "isinstance"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_lr_schedule", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.set_random_seed"], ["", "", "def", "_setup_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_setup_lr_schedule", "(", ")", "\n", "self", ".", "set_random_seed", "(", "self", ".", "seed", ")", "\n", "\n", "buffer_cls", "=", "DictRolloutBuffer", "if", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", "else", "RolloutBuffer", "\n", "\n", "self", ".", "rollout_buffer", "=", "buffer_cls", "(", "\n", "self", ".", "n_steps", ",", "\n", "self", ".", "observation_space", ",", "\n", "self", ".", "action_space", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "gae_lambda", "=", "self", ".", "gae_lambda", ",", "\n", "n_envs", "=", "self", ".", "n_envs", ",", "\n", ")", "\n", "self", ".", "policy", "=", "self", ".", "policy_class", "(", "# pytype:disable=not-instantiable", "\n", "self", ".", "observation_space", ",", "\n", "self", ".", "action_space", ",", "\n", "self", ".", "lr_schedule", ",", "\n", "use_sde", "=", "self", ".", "use_sde", ",", "\n", "**", "self", ".", "policy_kwargs", "# pytype:disable=not-instantiable", "\n", ")", "\n", "self", ".", "policy", "=", "self", ".", "policy", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.on_policy_algorithm.OnPolicyAlgorithm.collect_rollouts": [[126, 217], ["on_policy_algorithm.OnPolicyAlgorithm.policy.set_training_mode", "rollout_buffer.reset", "callback.on_rollout_start", "rollout_buffer.compute_returns_and_advantage", "callback.on_rollout_end", "on_policy_algorithm.OnPolicyAlgorithm.policy.reset_noise", "actions.reshape.reshape.cpu().numpy", "isinstance", "env.step", "callback.update_locals", "on_policy_algorithm.OnPolicyAlgorithm._update_info_buffer", "isinstance", "enumerate", "rollout_buffer.add", "torch.no_grad", "on_policy_algorithm.OnPolicyAlgorithm.policy.predict_values", "on_policy_algorithm.OnPolicyAlgorithm.policy.reset_noise", "torch.no_grad", "stable_baselines3.common.utils.obs_as_tensor", "on_policy_algorithm.OnPolicyAlgorithm.policy", "numpy.clip", "locals", "callback.on_step", "actions.reshape.reshape.reshape", "stable_baselines3.common.utils.obs_as_tensor", "actions.reshape.reshape.cpu", "infos[].get", "infos[].get", "on_policy_algorithm.OnPolicyAlgorithm.policy.obs_to_tensor", "torch.no_grad", "on_policy_algorithm.OnPolicyAlgorithm.policy.predict_values"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_rollout_start", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.RolloutBuffer.compute_returns_and_advantage", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_rollout_end", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.update_locals", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_info_buffer", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.predict_values", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.obs_as_tensor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.obs_as_tensor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.obs_to_tensor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.predict_values"], ["", "def", "collect_rollouts", "(", "\n", "self", ",", "\n", "env", ":", "VecEnv", ",", "\n", "callback", ":", "BaseCallback", ",", "\n", "rollout_buffer", ":", "RolloutBuffer", ",", "\n", "n_rollout_steps", ":", "int", ",", "\n", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Collect experiences using the current policy and fill a ``RolloutBuffer``.\n        The term rollout here refers to the model-free notion and should not\n        be used with the concept of rollout used in model-based RL or planning.\n\n        :param env: The training environment\n        :param callback: Callback that will be called at each step\n            (and at the beginning and end of the rollout)\n        :param rollout_buffer: Buffer to fill with rollouts\n        :param n_steps: Number of experiences to collect per environment\n        :return: True if function returned with at least `n_rollout_steps`\n            collected, False if callback terminated rollout prematurely.\n        \"\"\"", "\n", "assert", "self", ".", "_last_obs", "is", "not", "None", ",", "\"No previous observation was provided\"", "\n", "# Switch to eval mode (this affects batch norm / dropout)", "\n", "self", ".", "policy", ".", "set_training_mode", "(", "False", ")", "\n", "\n", "n_steps", "=", "0", "\n", "rollout_buffer", ".", "reset", "(", ")", "\n", "# Sample new weights for the state dependent exploration", "\n", "if", "self", ".", "use_sde", ":", "\n", "            ", "self", ".", "policy", ".", "reset_noise", "(", "env", ".", "num_envs", ")", "\n", "\n", "", "callback", ".", "on_rollout_start", "(", ")", "\n", "\n", "while", "n_steps", "<", "n_rollout_steps", ":", "\n", "            ", "if", "self", ".", "use_sde", "and", "self", ".", "sde_sample_freq", ">", "0", "and", "n_steps", "%", "self", ".", "sde_sample_freq", "==", "0", ":", "\n", "# Sample a new noise matrix", "\n", "                ", "self", ".", "policy", ".", "reset_noise", "(", "env", ".", "num_envs", ")", "\n", "\n", "", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "# Convert to pytorch tensor or to TensorDict", "\n", "                ", "obs_tensor", "=", "obs_as_tensor", "(", "self", ".", "_last_obs", ",", "self", ".", "device", ")", "\n", "actions", ",", "values", ",", "log_probs", "=", "self", ".", "policy", "(", "obs_tensor", ")", "\n", "", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Rescale and perform action", "\n", "clipped_actions", "=", "actions", "\n", "# Clip the actions to avoid out of bound error", "\n", "if", "isinstance", "(", "self", ".", "action_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "                ", "clipped_actions", "=", "np", ".", "clip", "(", "actions", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "\n", "", "new_obs", ",", "rewards", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "clipped_actions", ")", "\n", "\n", "self", ".", "num_timesteps", "+=", "env", ".", "num_envs", "\n", "\n", "# Give access to local variables", "\n", "callback", ".", "update_locals", "(", "locals", "(", ")", ")", "\n", "if", "callback", ".", "on_step", "(", ")", "is", "False", ":", "\n", "                ", "return", "False", "\n", "\n", "", "self", ".", "_update_info_buffer", "(", "infos", ")", "\n", "n_steps", "+=", "1", "\n", "\n", "if", "isinstance", "(", "self", ".", "action_space", ",", "gym", ".", "spaces", ".", "Discrete", ")", ":", "\n", "# Reshape in case of discrete action", "\n", "                ", "actions", "=", "actions", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Handle timeout by bootstraping with value function", "\n", "# see GitHub issue #633", "\n", "", "for", "idx", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "                ", "if", "(", "\n", "done", "\n", "and", "infos", "[", "idx", "]", ".", "get", "(", "\"terminal_observation\"", ")", "is", "not", "None", "\n", "and", "infos", "[", "idx", "]", ".", "get", "(", "\"TimeLimit.truncated\"", ",", "False", ")", "\n", ")", ":", "\n", "                    ", "terminal_obs", "=", "self", ".", "policy", ".", "obs_to_tensor", "(", "infos", "[", "idx", "]", "[", "\"terminal_observation\"", "]", ")", "[", "0", "]", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "                        ", "terminal_value", "=", "self", ".", "policy", ".", "predict_values", "(", "terminal_obs", ")", "[", "0", "]", "\n", "", "rewards", "[", "idx", "]", "+=", "self", ".", "gamma", "*", "terminal_value", "\n", "\n", "", "", "rollout_buffer", ".", "add", "(", "self", ".", "_last_obs", ",", "actions", ",", "rewards", ",", "self", ".", "_last_episode_starts", ",", "values", ",", "log_probs", ")", "\n", "self", ".", "_last_obs", "=", "new_obs", "\n", "self", ".", "_last_episode_starts", "=", "dones", "\n", "\n", "", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "# Compute value for the last timestep", "\n", "            ", "values", "=", "self", ".", "policy", ".", "predict_values", "(", "obs_as_tensor", "(", "new_obs", ",", "self", ".", "device", ")", ")", "\n", "\n", "", "rollout_buffer", ".", "compute_returns_and_advantage", "(", "last_values", "=", "values", ",", "dones", "=", "dones", ")", "\n", "\n", "callback", ".", "on_rollout_end", "(", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.on_policy_algorithm.OnPolicyAlgorithm.train": [[218, 224], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Consume current rollout data and update policy parameters.\n        Implemented by individual algorithms.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.on_policy_algorithm.OnPolicyAlgorithm.learn": [[225, 272], ["on_policy_algorithm.OnPolicyAlgorithm._setup_learn", "callback.on_training_start", "callback.on_training_end", "locals", "globals", "on_policy_algorithm.OnPolicyAlgorithm.collect_rollouts", "on_policy_algorithm.OnPolicyAlgorithm._update_current_progress_remaining", "on_policy_algorithm.OnPolicyAlgorithm.train", "int", "on_policy_algorithm.OnPolicyAlgorithm.logger.record", "on_policy_algorithm.OnPolicyAlgorithm.logger.record", "on_policy_algorithm.OnPolicyAlgorithm.logger.record", "on_policy_algorithm.OnPolicyAlgorithm.logger.record", "on_policy_algorithm.OnPolicyAlgorithm.logger.dump", "on_policy_algorithm.OnPolicyAlgorithm.logger.record", "on_policy_algorithm.OnPolicyAlgorithm.logger.record", "int", "len", "len", "stable_baselines3.common.utils.safe_mean", "stable_baselines3.common.utils.safe_mean", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_start", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_end", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.collect_rollouts", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_current_progress_remaining", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.train", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.safe_mean", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.safe_mean"], ["", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "1", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "tb_log_name", ":", "str", "=", "\"OnPolicyAlgorithm\"", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "\"OnPolicyAlgorithm\"", ":", "\n", "        ", "iteration", "=", "0", "\n", "\n", "total_timesteps", ",", "callback", "=", "self", ".", "_setup_learn", "(", "\n", "total_timesteps", ",", "eval_env", ",", "callback", ",", "eval_freq", ",", "n_eval_episodes", ",", "eval_log_path", ",", "reset_num_timesteps", ",", "tb_log_name", "\n", ")", "\n", "\n", "callback", ".", "on_training_start", "(", "locals", "(", ")", ",", "globals", "(", ")", ")", "\n", "\n", "while", "self", ".", "num_timesteps", "<", "total_timesteps", ":", "\n", "\n", "            ", "continue_training", "=", "self", ".", "collect_rollouts", "(", "self", ".", "env", ",", "callback", ",", "self", ".", "rollout_buffer", ",", "n_rollout_steps", "=", "self", ".", "n_steps", ")", "\n", "\n", "if", "continue_training", "is", "False", ":", "\n", "                ", "break", "\n", "\n", "", "iteration", "+=", "1", "\n", "self", ".", "_update_current_progress_remaining", "(", "self", ".", "num_timesteps", ",", "total_timesteps", ")", "\n", "\n", "# Display training infos", "\n", "if", "log_interval", "is", "not", "None", "and", "iteration", "%", "log_interval", "==", "0", ":", "\n", "                ", "fps", "=", "int", "(", "(", "self", ".", "num_timesteps", "-", "self", ".", "_num_timesteps_at_start", ")", "/", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"time/iterations\"", ",", "iteration", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "if", "len", "(", "self", ".", "ep_info_buffer", ")", ">", "0", "and", "len", "(", "self", ".", "ep_info_buffer", "[", "0", "]", ")", ">", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "record", "(", "\"rollout/ep_rew_mean\"", ",", "safe_mean", "(", "[", "ep_info", "[", "\"r\"", "]", "for", "ep_info", "in", "self", ".", "ep_info_buffer", "]", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"rollout/ep_len_mean\"", ",", "safe_mean", "(", "[", "ep_info", "[", "\"l\"", "]", "for", "ep_info", "in", "self", ".", "ep_info_buffer", "]", ")", ")", "\n", "", "self", ".", "logger", ".", "record", "(", "\"time/fps\"", ",", "fps", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"time/time_elapsed\"", ",", "int", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"time/total_timesteps\"", ",", "self", ".", "num_timesteps", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "self", ".", "logger", ".", "dump", "(", "step", "=", "self", ".", "num_timesteps", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "\n", "\n", "", "callback", ".", "on_training_end", "(", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.on_policy_algorithm.OnPolicyAlgorithm._get_torch_save_params": [[273, 277], ["None"], "methods", ["None"], ["", "def", "_get_torch_save_params", "(", "self", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "state_dicts", "=", "[", "\"policy\"", ",", "\"policy.optimizer\"", "]", "\n", "\n", "return", "state_dicts", ",", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Video.__init__": [[36, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "frames", ":", "th", ".", "Tensor", ",", "fps", ":", "Union", "[", "float", ",", "int", "]", ")", ":", "\n", "        ", "self", ".", "frames", "=", "frames", "\n", "self", ".", "fps", "=", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Figure.__init__": [[49, 52], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "figure", ":", "plt", ".", "figure", ",", "close", ":", "bool", ")", ":", "\n", "        ", "self", ".", "figure", "=", "figure", "\n", "self", ".", "close", "=", "close", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Image.__init__": [[64, 67], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image", ":", "Union", "[", "th", ".", "Tensor", ",", "np", ".", "ndarray", ",", "str", "]", ",", "dataformats", ":", "str", ")", ":", "\n", "        ", "self", ".", "image", "=", "image", "\n", "self", ".", "dataformats", "=", "dataformats", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.FormatUnsupportedError.__init__": [[79, 86], ["NotImplementedError.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "unsupported_formats", ":", "Sequence", "[", "str", "]", ",", "value_description", ":", "str", ")", ":", "\n", "        ", "if", "len", "(", "unsupported_formats", ")", ">", "1", ":", "\n", "            ", "format_str", "=", "f\"formats {', '.join(unsupported_formats)} are\"", "\n", "", "else", ":", "\n", "            ", "format_str", "=", "f\"format {unsupported_formats[0]} is\"", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "f\"The {format_str} not supported for the {value_description} value logged.\\n\"", "\n", "f\"You can exclude formats via the `exclude` parameter of the logger's `record` function.\"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.KVWriter.write": [[95, 104], ["None"], "methods", ["None"], ["def", "write", "(", "self", ",", "key_values", ":", "Dict", "[", "str", ",", "Any", "]", ",", "key_excluded", ":", "Dict", "[", "str", ",", "Union", "[", "str", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", ",", "step", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write a dictionary to file\n\n        :param key_values:\n        :param key_excluded:\n        :param step:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.KVWriter.close": [[105, 110], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Close owned resources\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.SeqWriter.write_sequence": [[117, 124], ["None"], "methods", ["None"], ["def", "write_sequence", "(", "self", ",", "sequence", ":", "List", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        write_sequence an array to file\n\n        :param sequence:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat.__init__": [[140, 149], ["isinstance", "open", "hasattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filename_or_file", ":", "Union", "[", "str", ",", "TextIO", "]", ",", "max_length", ":", "int", "=", "36", ")", ":", "\n", "        ", "self", ".", "max_length", "=", "max_length", "\n", "if", "isinstance", "(", "filename_or_file", ",", "str", ")", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "filename_or_file", ",", "\"wt\"", ")", "\n", "self", ".", "own_file", "=", "True", "\n", "", "else", ":", "\n", "            ", "assert", "hasattr", "(", "filename_or_file", ",", "\"write\"", ")", ",", "f\"Expected file or str, got {filename_or_file}\"", "\n", "self", ".", "file", "=", "filename_or_file", "\n", "self", ".", "own_file", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat.write": [[150, 208], ["zip", "key2str.items", "lines.append", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "sorted", "sorted", "logger.HumanOutputFormat._truncate", "logger.HumanOutputFormat._truncate", "len", "warnings.warn", "max", "max", "lines.append", "key_values.items", "key_excluded.items", "isinstance", "str.find", "str", "ValueError", "map", "map", "logger.FormatUnsupportedError", "isinstance", "key2str.keys", "key2str.values", "len", "len", "logger.FormatUnsupportedError", "isinstance", "logger.HumanOutputFormat._truncate", "logger.FormatUnsupportedError", "isinstance", "str.find", "str", "len"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat._truncate"], ["", "", "def", "write", "(", "self", ",", "key_values", ":", "Dict", ",", "key_excluded", ":", "Dict", ",", "step", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "# Create strings for printing", "\n", "        ", "key2str", "=", "{", "}", "\n", "tag", "=", "None", "\n", "for", "(", "key", ",", "value", ")", ",", "(", "_", ",", "excluded", ")", "in", "zip", "(", "sorted", "(", "key_values", ".", "items", "(", ")", ")", ",", "sorted", "(", "key_excluded", ".", "items", "(", ")", ")", ")", ":", "\n", "\n", "            ", "if", "excluded", "is", "not", "None", "and", "(", "\"stdout\"", "in", "excluded", "or", "\"log\"", "in", "excluded", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "elif", "isinstance", "(", "value", ",", "Video", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"stdout\"", ",", "\"log\"", "]", ",", "\"video\"", ")", "\n", "\n", "", "elif", "isinstance", "(", "value", ",", "Figure", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"stdout\"", ",", "\"log\"", "]", ",", "\"figure\"", ")", "\n", "\n", "", "elif", "isinstance", "(", "value", ",", "Image", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"stdout\"", ",", "\"log\"", "]", ",", "\"image\"", ")", "\n", "\n", "", "elif", "isinstance", "(", "value", ",", "float", ")", ":", "\n", "# Align left", "\n", "                ", "value_str", "=", "f\"{value:<8.3g}\"", "\n", "", "else", ":", "\n", "                ", "value_str", "=", "str", "(", "value", ")", "\n", "\n", "", "if", "key", ".", "find", "(", "\"/\"", ")", ">", "0", ":", "# Find tag and add it to the dict", "\n", "                ", "tag", "=", "key", "[", ":", "key", ".", "find", "(", "\"/\"", ")", "+", "1", "]", "\n", "key2str", "[", "self", ".", "_truncate", "(", "tag", ")", "]", "=", "\"\"", "\n", "# Remove tag from key", "\n", "", "if", "tag", "is", "not", "None", "and", "tag", "in", "key", ":", "\n", "                ", "key", "=", "str", "(", "\"   \"", "+", "key", "[", "len", "(", "tag", ")", ":", "]", ")", "\n", "\n", "", "truncated_key", "=", "self", ".", "_truncate", "(", "key", ")", "\n", "if", "truncated_key", "in", "key2str", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Key '{key}' truncated to '{truncated_key}' that already exists. Consider increasing `max_length`.\"", "\n", ")", "\n", "", "key2str", "[", "truncated_key", "]", "=", "self", ".", "_truncate", "(", "value_str", ")", "\n", "\n", "# Find max widths", "\n", "", "if", "len", "(", "key2str", ")", "==", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Tried to write empty key-value dict\"", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "key_width", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "keys", "(", ")", ")", ")", "\n", "val_width", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Write out the data", "\n", "", "dashes", "=", "\"-\"", "*", "(", "key_width", "+", "val_width", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "key", ",", "value", "in", "key2str", ".", "items", "(", ")", ":", "\n", "            ", "key_space", "=", "\" \"", "*", "(", "key_width", "-", "len", "(", "key", ")", ")", "\n", "val_space", "=", "\" \"", "*", "(", "val_width", "-", "len", "(", "value", ")", ")", "\n", "lines", ".", "append", "(", "f\"| {key}{key_space} | {value}{val_space} |\"", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "self", ".", "file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "lines", ")", "+", "\"\\n\"", ")", "\n", "\n", "# Flush the output to the file", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat._truncate": [[209, 213], ["len"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "string", ":", "str", ")", "->", "str", ":", "\n", "        ", "if", "len", "(", "string", ")", ">", "self", ".", "max_length", ":", "\n", "            ", "string", "=", "string", "[", ":", "self", ".", "max_length", "-", "3", "]", "+", "\"...\"", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat.write_sequence": [[214, 222], ["list", "enumerate", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.write", "len"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["", "def", "write_sequence", "(", "self", ",", "sequence", ":", "List", ")", "->", "None", ":", "\n", "        ", "sequence", "=", "list", "(", "sequence", ")", "\n", "for", "i", ",", "elem", "in", "enumerate", "(", "sequence", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "elem", ")", "\n", "if", "i", "<", "len", "(", "sequence", ")", "-", "1", ":", "# add space unless this is the last one", "\n", "                ", "self", ".", "file", ".", "write", "(", "\" \"", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat.close": [[223, 229], ["logger.HumanOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        closes the file\n        \"\"\"", "\n", "if", "self", ".", "own_file", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.JSONOutputFormat.__init__": [[256, 258], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filename", ":", "str", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.JSONOutputFormat.write": [[259, 282], ["logger.JSONOutputFormat.file.write", "logger.JSONOutputFormat.file.flush", "isinstance", "isinstance", "isinstance", "hasattr", "logger.JSONOutputFormat.write.cast_to_json_serializable"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["", "def", "write", "(", "self", ",", "key_values", ":", "Dict", "[", "str", ",", "Any", "]", ",", "key_excluded", ":", "Dict", "[", "str", ",", "Union", "[", "str", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", ",", "step", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "def", "cast_to_json_serializable", "(", "value", ":", "Any", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "Video", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"json\"", "]", ",", "\"video\"", ")", "\n", "", "if", "isinstance", "(", "value", ",", "Figure", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"json\"", "]", ",", "\"figure\"", ")", "\n", "", "if", "isinstance", "(", "value", ",", "Image", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"json\"", "]", ",", "\"image\"", ")", "\n", "", "if", "hasattr", "(", "value", ",", "\"dtype\"", ")", ":", "\n", "                ", "if", "value", ".", "shape", "==", "(", ")", "or", "len", "(", "value", ")", "==", "1", ":", "\n", "# if value is a dimensionless numpy array or of length 1, serialize as a float", "\n", "                    ", "return", "float", "(", "value", ")", "\n", "", "else", ":", "\n", "# otherwise, a value is a numpy array, serialize as a list or nested lists", "\n", "                    ", "return", "value", ".", "tolist", "(", ")", "\n", "", "", "return", "value", "\n", "\n", "", "key_values", "=", "{", "\n", "key", ":", "cast_to_json_serializable", "(", "value", ")", "\n", "for", "key", ",", "value", "in", "filter_excluded_keys", "(", "key_values", ",", "key_excluded", ",", "\"json\"", ")", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "file", ".", "write", "(", "json", ".", "dumps", "(", "key_values", ")", "+", "\"\\n\"", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.JSONOutputFormat.close": [[283, 289], ["logger.JSONOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        closes the file\n        \"\"\"", "\n", "\n", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.CSVOutputFormat.__init__": [[298, 303], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filename", ":", "str", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "\"w+t\"", ")", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "separator", "=", "\",\"", "\n", "self", ".", "quotechar", "=", "'\"'", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.CSVOutputFormat.write": [[304, 347], ["logger.filter_excluded_keys", "enumerate", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.flush", "filter_excluded_keys.keys", "logger.CSVOutputFormat.keys.extend", "logger.CSVOutputFormat.file.seek", "logger.CSVOutputFormat.file.readlines", "logger.CSVOutputFormat.file.seek", "enumerate", "logger.CSVOutputFormat.file.write", "filter_excluded_keys.get", "isinstance", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.FormatUnsupportedError", "isinstance", "logger.CSVOutputFormat.file.write", "logger.FormatUnsupportedError", "isinstance", "len", "logger.FormatUnsupportedError", "isinstance", "value.replace.replace.replace", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "str"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.filter_excluded_keys", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.extend", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["", "def", "write", "(", "self", ",", "key_values", ":", "Dict", "[", "str", ",", "Any", "]", ",", "key_excluded", ":", "Dict", "[", "str", ",", "Union", "[", "str", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", ",", "step", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "# Add our current row to the history", "\n", "        ", "key_values", "=", "filter_excluded_keys", "(", "key_values", ",", "key_excluded", ",", "\"csv\"", ")", "\n", "extra_keys", "=", "key_values", ".", "keys", "(", ")", "-", "self", ".", "keys", "\n", "if", "extra_keys", ":", "\n", "            ", "self", ".", "keys", ".", "extend", "(", "extra_keys", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "lines", "=", "self", ".", "file", ".", "readlines", "(", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "for", "(", "i", ",", "key", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "                ", "if", "i", ">", "0", ":", "\n", "                    ", "self", ".", "file", ".", "write", "(", "\",\"", ")", "\n", "", "self", ".", "file", ".", "write", "(", "key", ")", "\n", "", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "file", ".", "write", "(", "self", ".", "separator", "*", "len", "(", "extra_keys", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "\",\"", ")", "\n", "", "value", "=", "key_values", ".", "get", "(", "key", ")", "\n", "\n", "if", "isinstance", "(", "value", ",", "Video", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"csv\"", "]", ",", "\"video\"", ")", "\n", "\n", "", "elif", "isinstance", "(", "value", ",", "Figure", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"csv\"", "]", ",", "\"figure\"", ")", "\n", "\n", "", "elif", "isinstance", "(", "value", ",", "Image", ")", ":", "\n", "                ", "raise", "FormatUnsupportedError", "(", "[", "\"csv\"", "]", ",", "\"image\"", ")", "\n", "\n", "", "elif", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "# escape quotechars by prepending them with another quotechar", "\n", "                ", "value", "=", "value", ".", "replace", "(", "self", ".", "quotechar", ",", "self", ".", "quotechar", "+", "self", ".", "quotechar", ")", "\n", "\n", "# additionally wrap text with quotechars so that any delimiters in the text are ignored by csv readers", "\n", "self", ".", "file", ".", "write", "(", "self", ".", "quotechar", "+", "value", "+", "self", ".", "quotechar", ")", "\n", "\n", "", "elif", "value", "is", "not", "None", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "str", "(", "value", ")", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.CSVOutputFormat.close": [[348, 353], ["logger.CSVOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        closes the file\n        \"\"\"", "\n", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.__init__": [[362, 365], ["SummaryWriter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "folder", ":", "str", ")", ":", "\n", "        ", "assert", "SummaryWriter", "is", "not", "None", ",", "\"tensorboard is not installed, you can use \"", "\"pip install tensorboard to do so\"", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write": [[366, 394], ["zip", "logger.TensorBoardOutputFormat.writer.flush", "sorted", "sorted", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "key_values.items", "key_excluded.items", "isinstance", "logger.TensorBoardOutputFormat.writer.add_histogram", "logger.TensorBoardOutputFormat.writer.add_video", "logger.TensorBoardOutputFormat.writer.add_figure", "logger.TensorBoardOutputFormat.writer.add_image", "logger.TensorBoardOutputFormat.writer.add_text", "logger.TensorBoardOutputFormat.writer.add_scalar"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "key_values", ":", "Dict", "[", "str", ",", "Any", "]", ",", "key_excluded", ":", "Dict", "[", "str", ",", "Union", "[", "str", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", ",", "step", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "\n", "        ", "for", "(", "key", ",", "value", ")", ",", "(", "_", ",", "excluded", ")", "in", "zip", "(", "sorted", "(", "key_values", ".", "items", "(", ")", ")", ",", "sorted", "(", "key_excluded", ".", "items", "(", ")", ")", ")", ":", "\n", "\n", "            ", "if", "excluded", "is", "not", "None", "and", "\"tensorboard\"", "in", "excluded", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "value", ",", "np", ".", "ScalarType", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "# str is considered a np.ScalarType", "\n", "                    ", "self", ".", "writer", ".", "add_text", "(", "key", ",", "value", ",", "step", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ",", "step", ")", "\n", "\n", "", "", "if", "isinstance", "(", "value", ",", "th", ".", "Tensor", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_histogram", "(", "key", ",", "value", ",", "step", ")", "\n", "\n", "", "if", "isinstance", "(", "value", ",", "Video", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_video", "(", "key", ",", "value", ".", "frames", ",", "step", ",", "value", ".", "fps", ")", "\n", "\n", "", "if", "isinstance", "(", "value", ",", "Figure", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_figure", "(", "key", ",", "value", ".", "figure", ",", "step", ",", "close", "=", "value", ".", "close", ")", "\n", "\n", "", "if", "isinstance", "(", "value", ",", "Image", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_image", "(", "key", ",", "value", ".", "image", ",", "step", ",", "dataformats", "=", "value", ".", "dataformats", ")", "\n", "\n", "# Flush the output to the file", "\n", "", "", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.close": [[395, 402], ["logger.TensorBoardOutputFormat.writer.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        closes the file\n        \"\"\"", "\n", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.__init__": [[441, 448], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "folder", ":", "Optional", "[", "str", "]", ",", "output_formats", ":", "List", "[", "KVWriter", "]", ")", ":", "\n", "        ", "self", ".", "name_to_value", "=", "defaultdict", "(", "float", ")", "# values this iteration", "\n", "self", ".", "name_to_count", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "name_to_excluded", "=", "defaultdict", "(", "str", ")", "\n", "self", ".", "level", "=", "INFO", "\n", "self", ".", "dir", "=", "folder", "\n", "self", ".", "output_formats", "=", "output_formats", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record": [[449, 461], ["None"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "key", ":", "str", ",", "value", ":", "Any", ",", "exclude", ":", "Optional", "[", "Union", "[", "str", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Log a value of some diagnostic\n        Call this once for each diagnostic quantity, each iteration\n        If called many times, last value will be used.\n\n        :param key: save to log this key\n        :param value: save to log this value\n        :param exclude: outputs to be excluded\n        \"\"\"", "\n", "self", ".", "name_to_value", "[", "key", "]", "=", "value", "\n", "self", ".", "name_to_excluded", "[", "key", "]", "=", "exclude", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record_mean": [[462, 477], ["None"], "methods", ["None"], ["", "def", "record_mean", "(", "self", ",", "key", ":", "str", ",", "value", ":", "Any", ",", "exclude", ":", "Optional", "[", "Union", "[", "str", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        The same as record(), but if called many times, values averaged.\n\n        :param key: save to log this key\n        :param value: save to log this value\n        :param exclude: outputs to be excluded\n        \"\"\"", "\n", "if", "value", "is", "None", ":", "\n", "            ", "self", ".", "name_to_value", "[", "key", "]", "=", "None", "\n", "return", "\n", "", "old_val", ",", "count", "=", "self", ".", "name_to_value", "[", "key", "]", ",", "self", ".", "name_to_count", "[", "key", "]", "\n", "self", ".", "name_to_value", "[", "key", "]", "=", "old_val", "*", "count", "/", "(", "count", "+", "1", ")", "+", "value", "/", "(", "count", "+", "1", ")", "\n", "self", ".", "name_to_count", "[", "key", "]", "=", "count", "+", "1", "\n", "self", ".", "name_to_excluded", "[", "key", "]", "=", "exclude", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.dump": [[478, 491], ["logger.Logger.name_to_value.clear", "logger.Logger.name_to_count.clear", "logger.Logger.name_to_excluded.clear", "isinstance", "_format.write"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["", "def", "dump", "(", "self", ",", "step", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write all of the diagnostics from the current iteration\n        \"\"\"", "\n", "if", "self", ".", "level", "==", "DISABLED", ":", "\n", "            ", "return", "\n", "", "for", "_format", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "_format", ",", "KVWriter", ")", ":", "\n", "                ", "_format", ".", "write", "(", "self", ".", "name_to_value", ",", "self", ".", "name_to_excluded", ",", "step", ")", "\n", "\n", "", "", "self", ".", "name_to_value", ".", "clear", "(", ")", "\n", "self", ".", "name_to_count", ".", "clear", "(", ")", "\n", "self", ".", "name_to_excluded", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log": [[492, 505], ["logger.Logger._do_log"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger._do_log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "level", ":", "int", "=", "INFO", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write the sequence of args, with no separators,\n        to the console and output files (if you've configured an output file).\n\n        level: int. (see logger.py docs) If the global logger level is higher than\n                    the level argument here, don't print to stdout.\n\n        :param args: log the arguments\n        :param level: the logging level (can be DEBUG=10, INFO=20, WARN=30, ERROR=40, DISABLED=50)\n        \"\"\"", "\n", "if", "self", ".", "level", "<=", "level", ":", "\n", "            ", "self", ".", "_do_log", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.debug": [[506, 515], ["logger.Logger.log"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "", "def", "debug", "(", "self", ",", "*", "args", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write the sequence of args, with no separators,\n        to the console and output files (if you've configured an output file).\n        Using the DEBUG level.\n\n        :param args: log the arguments\n        \"\"\"", "\n", "self", ".", "log", "(", "*", "args", ",", "level", "=", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.info": [[516, 525], ["logger.Logger.log"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "def", "info", "(", "self", ",", "*", "args", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write the sequence of args, with no separators,\n        to the console and output files (if you've configured an output file).\n        Using the INFO level.\n\n        :param args: log the arguments\n        \"\"\"", "\n", "self", ".", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn": [[526, 535], ["logger.Logger.log"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "def", "warn", "(", "self", ",", "*", "args", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write the sequence of args, with no separators,\n        to the console and output files (if you've configured an output file).\n        Using the WARN level.\n\n        :param args: log the arguments\n        \"\"\"", "\n", "self", ".", "log", "(", "*", "args", ",", "level", "=", "WARN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.error": [[536, 545], ["logger.Logger.log"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "def", "error", "(", "self", ",", "*", "args", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write the sequence of args, with no separators,\n        to the console and output files (if you've configured an output file).\n        Using the ERROR level.\n\n        :param args: log the arguments\n        \"\"\"", "\n", "self", ".", "log", "(", "*", "args", ",", "level", "=", "ERROR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.set_level": [[548, 555], ["None"], "methods", ["None"], ["", "def", "set_level", "(", "self", ",", "level", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set logging threshold on current logger.\n\n        :param level: the logging level (can be DEBUG=10, INFO=20, WARN=30, ERROR=40, DISABLED=50)\n        \"\"\"", "\n", "self", ".", "level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.get_dir": [[556, 564], ["None"], "methods", ["None"], ["", "def", "get_dir", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Get directory that log files are being written to.\n        will be None if there is no output directory (i.e., if you didn't call start)\n\n        :return: the logging directory\n        \"\"\"", "\n", "return", "self", ".", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.close": [[565, 571], ["_format.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        closes the file\n        \"\"\"", "\n", "for", "_format", "in", "self", ".", "output_formats", ":", "\n", "            ", "_format", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger._do_log": [[574, 583], ["isinstance", "_format.write_sequence", "map"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.HumanOutputFormat.write_sequence"], ["", "", "def", "_do_log", "(", "self", ",", "args", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        log to the requested format outputs\n\n        :param args: the arguments to log\n        \"\"\"", "\n", "for", "_format", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "_format", ",", "SeqWriter", ")", ":", "\n", "                ", "_format", ".", "write_sequence", "(", "map", "(", "str", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.filter_excluded_keys": [[231, 247], ["key_values.items", "logger.filter_excluded_keys.is_excluded"], "function", ["None"], ["", "", "", "def", "filter_excluded_keys", "(", "\n", "key_values", ":", "Dict", "[", "str", ",", "Any", "]", ",", "key_excluded", ":", "Dict", "[", "str", ",", "Union", "[", "str", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", ",", "_format", ":", "str", "\n", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Filters the keys specified by ``key_exclude`` for the specified format\n\n    :param key_values: log dictionary to be filtered\n    :param key_excluded: keys to be excluded per format\n    :param _format: format for which this filter is run\n    :return: dict without the excluded keys\n    \"\"\"", "\n", "\n", "def", "is_excluded", "(", "key", ":", "str", ")", "->", "bool", ":", "\n", "        ", "return", "key", "in", "key_excluded", "and", "key_excluded", "[", "key", "]", "is", "not", "None", "and", "_format", "in", "key_excluded", "[", "key", "]", "\n", "\n", "", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "key_values", ".", "items", "(", ")", "if", "not", "is_excluded", "(", "key", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format": [[404, 426], ["os.makedirs", "logger.HumanOutputFormat", "logger.HumanOutputFormat", "os.path.join", "logger.JSONOutputFormat", "os.path.join", "logger.CSVOutputFormat", "os.path.join", "logger.TensorBoardOutputFormat", "ValueError"], "function", ["None"], ["", "", "", "def", "make_output_format", "(", "_format", ":", "str", ",", "log_dir", ":", "str", ",", "log_suffix", ":", "str", "=", "\"\"", ")", "->", "KVWriter", ":", "\n", "    ", "\"\"\"\n    return a logger for the requested format\n\n    :param _format: the requested format to log to ('stdout', 'log', 'json' or 'csv' or 'tensorboard')\n    :param log_dir: the logging directory\n    :param log_suffix: the suffix for the log file\n    :return: the logger\n    \"\"\"", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "_format", "==", "\"stdout\"", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "sys", ".", "stdout", ")", "\n", "", "elif", "_format", "==", "\"log\"", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f\"log{log_suffix}.txt\"", ")", ")", "\n", "", "elif", "_format", "==", "\"json\"", ":", "\n", "        ", "return", "JSONOutputFormat", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f\"progress{log_suffix}.json\"", ")", ")", "\n", "", "elif", "_format", "==", "\"csv\"", ":", "\n", "        ", "return", "CSVOutputFormat", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f\"progress{log_suffix}.csv\"", ")", ")", "\n", "", "elif", "_format", "==", "\"tensorboard\"", ":", "\n", "        ", "return", "TensorBoardOutputFormat", "(", "log_dir", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown format specified: {_format}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.configure": [[585, 614], ["isinstance", "os.makedirs", "list", "logger.Logger", "os.getenv", "os.path.join", "os.getenv().split", "filter", "logger.make_output_format", "logger.Logger.log", "tempfile.gettempdir", "datetime.datetime.now().strftime", "len", "os.getenv", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "", "", "", "def", "configure", "(", "folder", ":", "Optional", "[", "str", "]", "=", "None", ",", "format_strings", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ")", "->", "Logger", ":", "\n", "    ", "\"\"\"\n    Configure the current logger.\n\n    :param folder: the save location\n        (if None, $SB3_LOGDIR, if still None, tempdir/SB3-[date & time])\n    :param format_strings: the output logging format\n        (if None, $SB3_LOG_FORMAT, if still None, ['stdout', 'log', 'csv'])\n    :return: The logger object.\n    \"\"\"", "\n", "if", "folder", "is", "None", ":", "\n", "        ", "folder", "=", "os", ".", "getenv", "(", "\"SB3_LOGDIR\"", ")", "\n", "", "if", "folder", "is", "None", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"SB3-%Y-%m-%d-%H-%M-%S-%f\"", ")", ")", "\n", "", "assert", "isinstance", "(", "folder", ",", "str", ")", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log_suffix", "=", "\"\"", "\n", "if", "format_strings", "is", "None", ":", "\n", "        ", "format_strings", "=", "os", ".", "getenv", "(", "\"SB3_LOG_FORMAT\"", ",", "\"stdout,log,csv\"", ")", ".", "split", "(", "\",\"", ")", "\n", "\n", "", "format_strings", "=", "list", "(", "filter", "(", "None", ",", "format_strings", ")", ")", "\n", "output_formats", "=", "[", "make_output_format", "(", "f", ",", "folder", ",", "log_suffix", ")", "for", "f", "in", "format_strings", "]", "\n", "\n", "logger", "=", "Logger", "(", "folder", "=", "folder", ",", "output_formats", "=", "output_formats", ")", "\n", "# Only print when some files will be saved", "\n", "if", "len", "(", "format_strings", ")", ">", "0", "and", "format_strings", "!=", "[", "\"stdout\"", "]", ":", "\n", "        ", "logger", ".", "log", "(", "f\"Logging to {folder}\"", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.read_json": [[621, 633], ["pandas.DataFrame", "open", "data.append", "json.loads"], "function", ["None"], ["", "def", "read_json", "(", "filename", ":", "str", ")", "->", "pandas", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n    read a json file using pandas\n\n    :param filename: the file path to read\n    :return: the data in the json\n    \"\"\"", "\n", "data", "=", "[", "]", "\n", "with", "open", "(", "filename", ")", "as", "file_handler", ":", "\n", "        ", "for", "line", "in", "file_handler", ":", "\n", "            ", "data", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "", "", "return", "pandas", ".", "DataFrame", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.read_csv": [[635, 643], ["pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.read_csv"], ["", "def", "read_csv", "(", "filename", ":", "str", ")", "->", "pandas", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n    read a csv file using pandas\n\n    :param filename: the file path to read\n    :return: the data in the csv\n    \"\"\"", "\n", "return", "pandas", ".", "read_csv", "(", "filename", ",", "index_col", "=", "None", ",", "comment", "=", "\"#\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.__init__": [[7, 18], ["numpy.zeros", "numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", ":", "float", "=", "1e-4", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", "=", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        Calulates the running mean and std of a data stream\n        https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Parallel_algorithm\n\n        :param epsilon: helps with arithmetic issues\n        :param shape: the shape of the data stream's output\n        \"\"\"", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "np", ".", "float64", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "np", ".", "float64", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy": [[19, 28], ["running_mean_std.RunningMeanStd", "running_mean_std.RunningMeanStd.mean.copy", "running_mean_std.RunningMeanStd.var.copy", "float"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["", "def", "copy", "(", "self", ")", "->", "\"RunningMeanStd\"", ":", "\n", "        ", "\"\"\"\n        :return: Return a copy of the current object.\n        \"\"\"", "\n", "new_object", "=", "RunningMeanStd", "(", "shape", "=", "self", ".", "mean", ".", "shape", ")", "\n", "new_object", ".", "mean", "=", "self", ".", "mean", ".", "copy", "(", ")", "\n", "new_object", ".", "var", "=", "self", ".", "var", ".", "copy", "(", ")", "\n", "new_object", ".", "count", "=", "float", "(", "self", ".", "count", ")", "\n", "return", "new_object", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.combine": [[29, 36], ["running_mean_std.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.update_from_moments"], ["", "def", "combine", "(", "self", ",", "other", ":", "\"RunningMeanStd\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Combine stats from another ``RunningMeanStd`` object.\n\n        :param other: The other object to combine with.\n        \"\"\"", "\n", "self", ".", "update_from_moments", "(", "other", ".", "mean", ",", "other", ".", "var", ",", "other", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.update": [[37, 42], ["numpy.mean", "numpy.var", "running_mean_std.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.update_from_moments"], ["", "def", "update", "(", "self", ",", "arr", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "arr", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "arr", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "arr", ".", "shape", "[", "0", "]", "\n", "self", ".", "update_from_moments", "(", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.update_from_moments": [[43, 58], ["numpy.square"], "methods", ["None"], ["", "def", "update_from_moments", "(", "self", ",", "batch_mean", ":", "np", ".", "ndarray", ",", "batch_var", ":", "np", ".", "ndarray", ",", "batch_count", ":", "Union", "[", "int", ",", "float", "]", ")", "->", "None", ":", "\n", "        ", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "self", ".", "count", "\n", "m_b", "=", "batch_var", "*", "batch_count", "\n", "m_2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "new_var", "=", "m_2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.__init__": [[74, 145], ["stable_baselines3.common.base_class.BaseAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Type", "[", "BasePolicy", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", ",", "\n", "buffer_size", ":", "int", "=", "1_000_000", ",", "# 1e6", "\n", "learning_starts", ":", "int", "=", "100", ",", "\n", "batch_size", ":", "int", "=", "256", ",", "\n", "tau", ":", "float", "=", "0.005", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "train_freq", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "str", "]", "]", "=", "(", "1", ",", "\"step\"", ")", ",", "\n", "gradient_steps", ":", "int", "=", "1", ",", "\n", "action_noise", ":", "Optional", "[", "ActionNoise", "]", "=", "None", ",", "\n", "replay_buffer_class", ":", "Optional", "[", "ReplayBuffer", "]", "=", "None", ",", "\n", "replay_buffer_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "optimize_memory_usage", ":", "bool", "=", "False", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "support_multi_env", ":", "bool", "=", "False", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "monitor_wrapper", ":", "bool", "=", "True", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "use_sde", ":", "bool", "=", "False", ",", "\n", "sde_sample_freq", ":", "int", "=", "-", "1", ",", "\n", "use_sde_at_warmup", ":", "bool", "=", "False", ",", "\n", "sde_support", ":", "bool", "=", "True", ",", "\n", "supported_action_spaces", ":", "Optional", "[", "Tuple", "[", "gym", ".", "spaces", ".", "Space", ",", "...", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policy", ",", "\n", "env", "=", "env", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "tensorboard_log", "=", "tensorboard_log", ",", "\n", "verbose", "=", "verbose", ",", "\n", "device", "=", "device", ",", "\n", "support_multi_env", "=", "support_multi_env", ",", "\n", "create_eval_env", "=", "create_eval_env", ",", "\n", "monitor_wrapper", "=", "monitor_wrapper", ",", "\n", "seed", "=", "seed", ",", "\n", "use_sde", "=", "use_sde", ",", "\n", "sde_sample_freq", "=", "sde_sample_freq", ",", "\n", "supported_action_spaces", "=", "supported_action_spaces", ",", "\n", ")", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "learning_starts", "=", "learning_starts", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "gradient_steps", "=", "gradient_steps", "\n", "self", ".", "action_noise", "=", "action_noise", "\n", "self", ".", "optimize_memory_usage", "=", "optimize_memory_usage", "\n", "self", ".", "replay_buffer_class", "=", "replay_buffer_class", "\n", "if", "replay_buffer_kwargs", "is", "None", ":", "\n", "            ", "replay_buffer_kwargs", "=", "{", "}", "\n", "", "self", ".", "replay_buffer_kwargs", "=", "replay_buffer_kwargs", "\n", "self", ".", "_episode_storage", "=", "None", "\n", "\n", "# Save train freq parameter, will be converted later to TrainFreq object", "\n", "self", ".", "train_freq", "=", "train_freq", "\n", "\n", "self", ".", "actor", "=", "None", "# type: Optional[th.nn.Module]", "\n", "self", ".", "replay_buffer", "=", "None", "# type: Optional[ReplayBuffer]", "\n", "# Update policy keyword arguments", "\n", "if", "sde_support", ":", "\n", "            ", "self", ".", "policy_kwargs", "[", "\"use_sde\"", "]", "=", "self", ".", "use_sde", "\n", "# For gSDE only", "\n", "", "self", ".", "use_sde_at_warmup", "=", "use_sde_at_warmup", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._convert_train_freq": [[146, 169], ["isinstance", "stable_baselines3.common.type_aliases.TrainFreq", "isinstance", "isinstance", "ValueError", "stable_baselines3.common.type_aliases.TrainFrequencyUnit", "ValueError"], "methods", ["None"], ["", "def", "_convert_train_freq", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Convert `train_freq` parameter (int or tuple)\n        to a TrainFreq object.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "self", ".", "train_freq", ",", "TrainFreq", ")", ":", "\n", "            ", "train_freq", "=", "self", ".", "train_freq", "\n", "\n", "# The value of the train frequency will be checked later", "\n", "if", "not", "isinstance", "(", "train_freq", ",", "tuple", ")", ":", "\n", "                ", "train_freq", "=", "(", "train_freq", ",", "\"step\"", ")", "\n", "\n", "", "try", ":", "\n", "                ", "train_freq", "=", "(", "train_freq", "[", "0", "]", ",", "TrainFrequencyUnit", "(", "train_freq", "[", "1", "]", ")", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"The unit of the `train_freq` must be either 'step' or 'episode' not '{train_freq[1]}'!\"", "\n", ")", "from", "e", "\n", "\n", "", "if", "not", "isinstance", "(", "train_freq", "[", "0", "]", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f\"The frequency of `train_freq` must be an integer and not {train_freq[0]}\"", ")", "\n", "\n", "", "self", ".", "train_freq", "=", "TrainFreq", "(", "*", "train_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._setup_model": [[170, 225], ["off_policy_algorithm.OffPolicyAlgorithm._setup_lr_schedule", "off_policy_algorithm.OffPolicyAlgorithm.set_random_seed", "off_policy_algorithm.OffPolicyAlgorithm.policy_class", "off_policy_algorithm.OffPolicyAlgorithm.policy.to", "off_policy_algorithm.OffPolicyAlgorithm._convert_train_freq", "isinstance", "off_policy_algorithm.OffPolicyAlgorithm.replay_buffer_class", "off_policy_algorithm.OffPolicyAlgorithm.replay_buffer_kwargs.get", "stable_baselines3.her.her_replay_buffer.HerReplayBuffer", "stable_baselines3.common.buffers.DictReplayBuffer"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_lr_schedule", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.set_random_seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._convert_train_freq", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get"], ["", "", "def", "_setup_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_setup_lr_schedule", "(", ")", "\n", "self", ".", "set_random_seed", "(", "self", ".", "seed", ")", "\n", "\n", "# Use DictReplayBuffer if needed", "\n", "if", "self", ".", "replay_buffer_class", "is", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "                ", "self", ".", "replay_buffer_class", "=", "DictReplayBuffer", "\n", "", "else", ":", "\n", "                ", "self", ".", "replay_buffer_class", "=", "ReplayBuffer", "\n", "\n", "", "", "elif", "self", ".", "replay_buffer_class", "==", "HerReplayBuffer", ":", "\n", "            ", "assert", "self", ".", "env", "is", "not", "None", ",", "\"You must pass an environment when using `HerReplayBuffer`\"", "\n", "\n", "# If using offline sampling, we need a classic replay buffer too", "\n", "if", "self", ".", "replay_buffer_kwargs", ".", "get", "(", "\"online_sampling\"", ",", "True", ")", ":", "\n", "                ", "replay_buffer", "=", "None", "\n", "", "else", ":", "\n", "                ", "replay_buffer", "=", "DictReplayBuffer", "(", "\n", "self", ".", "buffer_size", ",", "\n", "self", ".", "observation_space", ",", "\n", "self", ".", "action_space", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "optimize_memory_usage", "=", "self", ".", "optimize_memory_usage", ",", "\n", ")", "\n", "\n", "", "self", ".", "replay_buffer", "=", "HerReplayBuffer", "(", "\n", "self", ".", "env", ",", "\n", "self", ".", "buffer_size", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "**", "self", ".", "replay_buffer_kwargs", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "replay_buffer", "is", "None", ":", "\n", "            ", "self", ".", "replay_buffer", "=", "self", ".", "replay_buffer_class", "(", "\n", "self", ".", "buffer_size", ",", "\n", "self", ".", "observation_space", ",", "\n", "self", ".", "action_space", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "n_envs", "=", "self", ".", "n_envs", ",", "\n", "optimize_memory_usage", "=", "self", ".", "optimize_memory_usage", ",", "\n", "**", "self", ".", "replay_buffer_kwargs", ",", "\n", ")", "\n", "\n", "", "self", ".", "policy", "=", "self", ".", "policy_class", "(", "# pytype:disable=not-instantiable", "\n", "self", ".", "observation_space", ",", "\n", "self", ".", "action_space", ",", "\n", "self", ".", "lr_schedule", ",", "\n", "**", "self", ".", "policy_kwargs", ",", "# pytype:disable=not-instantiable", "\n", ")", "\n", "self", ".", "policy", "=", "self", ".", "policy", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Convert train freq parameter to TrainFreq object", "\n", "self", ".", "_convert_train_freq", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.save_replay_buffer": [[226, 235], ["stable_baselines3.common.save_util.save_to_pkl"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.save_to_pkl"], ["", "def", "save_replay_buffer", "(", "self", ",", "path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save the replay buffer as a pickle file.\n\n        :param path: Path to the file where the replay buffer should be saved.\n            if path is a str or pathlib.Path, the path is automatically created if necessary.\n        \"\"\"", "\n", "assert", "self", ".", "replay_buffer", "is", "not", "None", ",", "\"The replay buffer is not defined\"", "\n", "save_to_pkl", "(", "path", ",", "self", ".", "replay_buffer", ",", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.load_replay_buffer": [[236, 264], ["stable_baselines3.common.save_util.load_from_pkl", "isinstance", "isinstance", "hasattr", "numpy.zeros_like", "off_policy_algorithm.OffPolicyAlgorithm.replay_buffer.set_env", "off_policy_algorithm.OffPolicyAlgorithm.get_env", "off_policy_algorithm.OffPolicyAlgorithm.replay_buffer.truncate_last_trajectory"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.HerReplayBuffer.truncate_last_trajectory"], ["", "def", "load_replay_buffer", "(", "\n", "self", ",", "\n", "path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ",", "\n", "truncate_last_traj", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Load a replay buffer from a pickle file.\n\n        :param path: Path to the pickled replay buffer.\n        :param truncate_last_traj: When using ``HerReplayBuffer`` with online sampling:\n            If set to ``True``, we assume that the last trajectory in the replay buffer was finished\n            (and truncate it).\n            If set to ``False``, we assume that we continue the same trajectory (same episode).\n        \"\"\"", "\n", "self", ".", "replay_buffer", "=", "load_from_pkl", "(", "path", ",", "self", ".", "verbose", ")", "\n", "assert", "isinstance", "(", "self", ".", "replay_buffer", ",", "ReplayBuffer", ")", ",", "\"The replay buffer must inherit from ReplayBuffer class\"", "\n", "\n", "# Backward compatibility with SB3 < 2.1.0 replay buffer", "\n", "# Keep old behavior: do not handle timeout termination separately", "\n", "if", "not", "hasattr", "(", "self", ".", "replay_buffer", ",", "\"handle_timeout_termination\"", ")", ":", "# pragma: no cover", "\n", "            ", "self", ".", "replay_buffer", ".", "handle_timeout_termination", "=", "False", "\n", "self", ".", "replay_buffer", ".", "timeouts", "=", "np", ".", "zeros_like", "(", "self", ".", "replay_buffer", ".", "dones", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "replay_buffer", ",", "HerReplayBuffer", ")", ":", "\n", "            ", "assert", "self", ".", "env", "is", "not", "None", ",", "\"You must pass an environment at load time when using `HerReplayBuffer`\"", "\n", "self", ".", "replay_buffer", ".", "set_env", "(", "self", ".", "get_env", "(", ")", ")", "\n", "if", "truncate_last_traj", ":", "\n", "                ", "self", ".", "replay_buffer", ".", "truncate_last_trajectory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._setup_learn": [[265, 317], ["isinstance", "super()._setup_learn", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "", "", "def", "_setup_learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "10000", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", "tb_log_name", ":", "str", "=", "\"run\"", ",", "\n", ")", "->", "Tuple", "[", "int", ",", "BaseCallback", "]", ":", "\n", "        ", "\"\"\"\n        cf `BaseAlgorithm`.\n        \"\"\"", "\n", "# Prevent continuity issue by truncating trajectory", "\n", "# when using memory efficient replay buffer", "\n", "# see https://github.com/DLR-RM/stable-baselines3/issues/46", "\n", "\n", "# Special case when using HerReplayBuffer,", "\n", "# the classic replay buffer is inside it when using offline sampling", "\n", "if", "isinstance", "(", "self", ".", "replay_buffer", ",", "HerReplayBuffer", ")", ":", "\n", "            ", "replay_buffer", "=", "self", ".", "replay_buffer", ".", "replay_buffer", "\n", "", "else", ":", "\n", "            ", "replay_buffer", "=", "self", ".", "replay_buffer", "\n", "\n", "", "truncate_last_traj", "=", "(", "\n", "self", ".", "optimize_memory_usage", "\n", "and", "reset_num_timesteps", "\n", "and", "replay_buffer", "is", "not", "None", "\n", "and", "(", "replay_buffer", ".", "full", "or", "replay_buffer", ".", "pos", ">", "0", ")", "\n", ")", "\n", "\n", "if", "truncate_last_traj", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"The last trajectory in the replay buffer will be truncated, \"", "\n", "\"see https://github.com/DLR-RM/stable-baselines3/issues/46.\"", "\n", "\"You should use `reset_num_timesteps=False` or `optimize_memory_usage=False`\"", "\n", "\"to avoid that issue.\"", "\n", ")", "\n", "# Go to the previous index", "\n", "pos", "=", "(", "replay_buffer", ".", "pos", "-", "1", ")", "%", "replay_buffer", ".", "buffer_size", "\n", "replay_buffer", ".", "dones", "[", "pos", "]", "=", "True", "\n", "\n", "", "return", "super", "(", ")", ".", "_setup_learn", "(", "\n", "total_timesteps", ",", "\n", "eval_env", ",", "\n", "callback", ",", "\n", "eval_freq", ",", "\n", "n_eval_episodes", ",", "\n", "log_path", ",", "\n", "reset_num_timesteps", ",", "\n", "tb_log_name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.learn": [[319, 370], ["off_policy_algorithm.OffPolicyAlgorithm._setup_learn", "callback.on_training_start", "callback.on_training_end", "locals", "globals", "off_policy_algorithm.OffPolicyAlgorithm.collect_rollouts", "off_policy_algorithm.OffPolicyAlgorithm.train"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_start", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_end", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.collect_rollouts", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.train"], ["", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "4", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "tb_log_name", ":", "str", "=", "\"run\"", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "\"OffPolicyAlgorithm\"", ":", "\n", "\n", "        ", "total_timesteps", ",", "callback", "=", "self", ".", "_setup_learn", "(", "\n", "total_timesteps", ",", "\n", "eval_env", ",", "\n", "callback", ",", "\n", "eval_freq", ",", "\n", "n_eval_episodes", ",", "\n", "eval_log_path", ",", "\n", "reset_num_timesteps", ",", "\n", "tb_log_name", ",", "\n", ")", "\n", "\n", "callback", ".", "on_training_start", "(", "locals", "(", ")", ",", "globals", "(", ")", ")", "\n", "\n", "while", "self", ".", "num_timesteps", "<", "total_timesteps", ":", "\n", "            ", "rollout", "=", "self", ".", "collect_rollouts", "(", "\n", "self", ".", "env", ",", "\n", "train_freq", "=", "self", ".", "train_freq", ",", "\n", "action_noise", "=", "self", ".", "action_noise", ",", "\n", "callback", "=", "callback", ",", "\n", "learning_starts", "=", "self", ".", "learning_starts", ",", "\n", "replay_buffer", "=", "self", ".", "replay_buffer", ",", "\n", "log_interval", "=", "log_interval", ",", "\n", ")", "\n", "\n", "if", "rollout", ".", "continue_training", "is", "False", ":", "\n", "                ", "break", "\n", "\n", "", "if", "self", ".", "num_timesteps", ">", "0", "and", "self", ".", "num_timesteps", ">", "self", ".", "learning_starts", ":", "\n", "# If no `gradient_steps` is specified,", "\n", "# do as many gradients steps as steps performed during the rollout", "\n", "                ", "gradient_steps", "=", "self", ".", "gradient_steps", "if", "self", ".", "gradient_steps", ">=", "0", "else", "rollout", ".", "episode_timesteps", "\n", "# Special case when the user passes `gradient_steps=0`", "\n", "if", "gradient_steps", ">", "0", ":", "\n", "                    ", "self", ".", "train", "(", "batch_size", "=", "self", ".", "batch_size", ",", "gradient_steps", "=", "gradient_steps", ")", "\n", "\n", "", "", "", "callback", ".", "on_training_end", "(", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.train": [[371, 377], ["NotImplementedError"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "gradient_steps", ":", "int", ",", "batch_size", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Sample the replay buffer and do the updates\n        (gradient descent and update target networks)\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._sample_action": [[378, 425], ["isinstance", "numpy.array", "off_policy_algorithm.OffPolicyAlgorithm.predict", "off_policy_algorithm.OffPolicyAlgorithm.policy.scale_action", "off_policy_algorithm.OffPolicyAlgorithm.policy.unscale_action", "numpy.clip", "off_policy_algorithm.OffPolicyAlgorithm.action_space.sample", "range", "action_noise"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.scale_action", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BasePolicy.unscale_action", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "_sample_action", "(", "\n", "self", ",", "\n", "learning_starts", ":", "int", ",", "\n", "action_noise", ":", "Optional", "[", "ActionNoise", "]", "=", "None", ",", "\n", "n_envs", ":", "int", "=", "1", ",", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Sample an action according to the exploration policy.\n        This is either done by sampling the probability distribution of the policy,\n        or sampling a random action (from a uniform distribution over the action space)\n        or by adding noise to the deterministic output.\n\n        :param action_noise: Action noise that will be used for exploration\n            Required for deterministic policy (e.g. TD3). This can also be used\n            in addition to the stochastic policy for SAC.\n        :param learning_starts: Number of steps before learning for the warm-up phase.\n        :param n_envs:\n        :return: action to take in the environment\n            and scaled action that will be stored in the replay buffer.\n            The two differs when the action space is not normalized (bounds are not [-1, 1]).\n        \"\"\"", "\n", "# Select action randomly or according to policy", "\n", "if", "self", ".", "num_timesteps", "<", "learning_starts", "and", "not", "(", "self", ".", "use_sde", "and", "self", ".", "use_sde_at_warmup", ")", ":", "\n", "# Warmup phase", "\n", "            ", "unscaled_action", "=", "np", ".", "array", "(", "[", "self", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "n_envs", ")", "]", ")", "\n", "", "else", ":", "\n", "# Note: when using continuous actions,", "\n", "# we assume that the policy uses tanh to scale the action", "\n", "# We use non-deterministic action in the case of SAC, for TD3, it does not matter", "\n", "            ", "unscaled_action", ",", "_", "=", "self", ".", "predict", "(", "self", ".", "_last_obs", ",", "deterministic", "=", "False", ")", "\n", "\n", "# Rescale the action from [low, high] to [-1, 1]", "\n", "", "if", "isinstance", "(", "self", ".", "action_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "            ", "scaled_action", "=", "self", ".", "policy", ".", "scale_action", "(", "unscaled_action", ")", "\n", "\n", "# Add noise to the action (improve exploration)", "\n", "if", "action_noise", "is", "not", "None", ":", "\n", "                ", "scaled_action", "=", "np", ".", "clip", "(", "scaled_action", "+", "action_noise", "(", ")", ",", "-", "1", ",", "1", ")", "\n", "\n", "# We store the scaled action in the buffer", "\n", "", "buffer_action", "=", "scaled_action", "\n", "action", "=", "self", ".", "policy", ".", "unscale_action", "(", "scaled_action", ")", "\n", "", "else", ":", "\n", "# Discrete case, no need to normalize or clip", "\n", "            ", "buffer_action", "=", "unscaled_action", "\n", "action", "=", "buffer_action", "\n", "", "return", "action", ",", "buffer_action", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._dump_logs": [[426, 446], ["int", "off_policy_algorithm.OffPolicyAlgorithm.logger.record", "off_policy_algorithm.OffPolicyAlgorithm.logger.record", "off_policy_algorithm.OffPolicyAlgorithm.logger.record", "off_policy_algorithm.OffPolicyAlgorithm.logger.record", "off_policy_algorithm.OffPolicyAlgorithm.logger.dump", "time.time", "off_policy_algorithm.OffPolicyAlgorithm.logger.record", "off_policy_algorithm.OffPolicyAlgorithm.logger.record", "int", "off_policy_algorithm.OffPolicyAlgorithm.logger.record", "len", "off_policy_algorithm.OffPolicyAlgorithm.logger.record", "len", "len", "stable_baselines3.common.utils.safe_mean", "stable_baselines3.common.utils.safe_mean", "off_policy_algorithm.OffPolicyAlgorithm.actor.get_std().mean().item", "stable_baselines3.common.utils.safe_mean", "off_policy_algorithm.OffPolicyAlgorithm.actor.get_std().mean", "off_policy_algorithm.OffPolicyAlgorithm.actor.get_std"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.safe_mean", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.safe_mean", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.safe_mean", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.get_std"], ["", "def", "_dump_logs", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write log.\n        \"\"\"", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "fps", "=", "int", "(", "(", "self", ".", "num_timesteps", "-", "self", ".", "_num_timesteps_at_start", ")", "/", "(", "time_elapsed", "+", "1e-8", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"time/episodes\"", ",", "self", ".", "_episode_num", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "if", "len", "(", "self", ".", "ep_info_buffer", ")", ">", "0", "and", "len", "(", "self", ".", "ep_info_buffer", "[", "0", "]", ")", ">", "0", ":", "\n", "            ", "self", ".", "logger", ".", "record", "(", "\"rollout/ep_rew_mean\"", ",", "safe_mean", "(", "[", "ep_info", "[", "\"r\"", "]", "for", "ep_info", "in", "self", ".", "ep_info_buffer", "]", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"rollout/ep_len_mean\"", ",", "safe_mean", "(", "[", "ep_info", "[", "\"l\"", "]", "for", "ep_info", "in", "self", ".", "ep_info_buffer", "]", ")", ")", "\n", "", "self", ".", "logger", ".", "record", "(", "\"time/fps\"", ",", "fps", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"time/time_elapsed\"", ",", "int", "(", "time_elapsed", ")", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"time/total_timesteps\"", ",", "self", ".", "num_timesteps", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "if", "self", ".", "use_sde", ":", "\n", "            ", "self", ".", "logger", ".", "record", "(", "\"train/std\"", ",", "(", "self", ".", "actor", ".", "get_std", "(", ")", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "ep_success_buffer", ")", ">", "0", ":", "\n", "            ", "self", ".", "logger", ".", "record", "(", "\"rollout/success_rate\"", ",", "safe_mean", "(", "self", ".", "ep_success_buffer", ")", ")", "\n", "# Pass the number of timesteps for tensorboard", "\n", "", "self", ".", "logger", ".", "dump", "(", "step", "=", "self", ".", "num_timesteps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._on_step": [[447, 454], ["None"], "methods", ["None"], ["", "def", "_on_step", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Method called after each step in the environment.\n        It is meant to trigger DQN target network update\n        but can be used for other purposes\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._store_transition": [[455, 519], ["copy.deepcopy", "enumerate", "replay_buffer.add", "off_policy_algorithm.OffPolicyAlgorithm._vec_normalize_env.get_original_obs", "off_policy_algorithm.OffPolicyAlgorithm._vec_normalize_env.get_original_reward", "isinstance", "infos[].get", "copy.deepcopy.keys", "off_policy_algorithm.OffPolicyAlgorithm._vec_normalize_env.unnormalize_obs", "off_policy_algorithm.OffPolicyAlgorithm._vec_normalize_env.unnormalize_obs"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.unnormalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.unnormalize_obs"], ["", "def", "_store_transition", "(", "\n", "self", ",", "\n", "replay_buffer", ":", "ReplayBuffer", ",", "\n", "buffer_action", ":", "np", ".", "ndarray", ",", "\n", "new_obs", ":", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ",", "\n", "reward", ":", "np", ".", "ndarray", ",", "\n", "dones", ":", "np", ".", "ndarray", ",", "\n", "infos", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Store transition in the replay buffer.\n        We store the normalized action and the unnormalized observation.\n        It also handles terminal observations (because VecEnv resets automatically).\n\n        :param replay_buffer: Replay buffer object where to store the transition.\n        :param buffer_action: normalized action\n        :param new_obs: next observation in the current episode\n            or first observation of the episode (when dones is True)\n        :param reward: reward for the current transition\n        :param dones: Termination signal\n        :param infos: List of additional information about the transition.\n            It may contain the terminal observations and information about timeout.\n        \"\"\"", "\n", "# Store only the unnormalized version", "\n", "if", "self", ".", "_vec_normalize_env", "is", "not", "None", ":", "\n", "            ", "new_obs_", "=", "self", ".", "_vec_normalize_env", ".", "get_original_obs", "(", ")", "\n", "reward_", "=", "self", ".", "_vec_normalize_env", ".", "get_original_reward", "(", ")", "\n", "", "else", ":", "\n", "# Avoid changing the original ones", "\n", "            ", "self", ".", "_last_original_obs", ",", "new_obs_", ",", "reward_", "=", "self", ".", "_last_obs", ",", "new_obs", ",", "reward", "\n", "\n", "# Avoid modification by reference", "\n", "", "next_obs", "=", "deepcopy", "(", "new_obs_", ")", "\n", "# As the VecEnv resets automatically, new_obs is already the", "\n", "# first observation of the next episode", "\n", "for", "i", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "done", "and", "infos", "[", "i", "]", ".", "get", "(", "\"terminal_observation\"", ")", "is", "not", "None", ":", "\n", "                ", "if", "isinstance", "(", "next_obs", ",", "dict", ")", ":", "\n", "                    ", "next_obs_", "=", "infos", "[", "i", "]", "[", "\"terminal_observation\"", "]", "\n", "# VecNormalize normalizes the terminal observation", "\n", "if", "self", ".", "_vec_normalize_env", "is", "not", "None", ":", "\n", "                        ", "next_obs_", "=", "self", ".", "_vec_normalize_env", ".", "unnormalize_obs", "(", "next_obs_", ")", "\n", "# Replace next obs for the correct envs", "\n", "", "for", "key", "in", "next_obs", ".", "keys", "(", ")", ":", "\n", "                        ", "next_obs", "[", "key", "]", "[", "i", "]", "=", "next_obs_", "[", "key", "]", "\n", "", "", "else", ":", "\n", "                    ", "next_obs", "[", "i", "]", "=", "infos", "[", "i", "]", "[", "\"terminal_observation\"", "]", "\n", "# VecNormalize normalizes the terminal observation", "\n", "if", "self", ".", "_vec_normalize_env", "is", "not", "None", ":", "\n", "                        ", "next_obs", "[", "i", "]", "=", "self", ".", "_vec_normalize_env", ".", "unnormalize_obs", "(", "next_obs", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "", "", "", "replay_buffer", ".", "add", "(", "\n", "self", ".", "_last_original_obs", ",", "\n", "next_obs", ",", "\n", "buffer_action", ",", "\n", "reward_", ",", "\n", "dones", ",", "\n", "infos", ",", "\n", ")", "\n", "\n", "self", ".", "_last_obs", "=", "new_obs", "\n", "# Save the unnormalized observation", "\n", "if", "self", ".", "_vec_normalize_env", "is", "not", "None", ":", "\n", "            ", "self", ".", "_last_original_obs", "=", "new_obs_", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.collect_rollouts": [[520, 621], ["off_policy_algorithm.OffPolicyAlgorithm.policy.set_training_mode", "isinstance", "callback.on_rollout_start", "stable_baselines3.common.utils.should_collect_more_steps", "callback.on_rollout_end", "stable_baselines3.common.type_aliases.RolloutReturn", "stable_baselines3.common.noise.VectorizedActionNoise", "off_policy_algorithm.OffPolicyAlgorithm.actor.reset_noise", "off_policy_algorithm.OffPolicyAlgorithm._sample_action", "env.step", "callback.update_locals", "off_policy_algorithm.OffPolicyAlgorithm._update_info_buffer", "off_policy_algorithm.OffPolicyAlgorithm._store_transition", "off_policy_algorithm.OffPolicyAlgorithm._update_current_progress_remaining", "off_policy_algorithm.OffPolicyAlgorithm._on_step", "enumerate", "isinstance", "off_policy_algorithm.OffPolicyAlgorithm.actor.reset_noise", "locals", "callback.on_step", "stable_baselines3.common.type_aliases.RolloutReturn", "stable_baselines3.common.noise.VectorizedActionNoise.reset", "off_policy_algorithm.OffPolicyAlgorithm._dump_logs", "dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.set_training_mode", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_rollout_start", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.should_collect_more_steps", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_rollout_end", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._sample_action", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.update_locals", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_info_buffer", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._store_transition", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_current_progress_remaining", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CheckGAECallback._on_step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm._dump_logs"], ["", "", "def", "collect_rollouts", "(", "\n", "self", ",", "\n", "env", ":", "VecEnv", ",", "\n", "callback", ":", "BaseCallback", ",", "\n", "train_freq", ":", "TrainFreq", ",", "\n", "replay_buffer", ":", "ReplayBuffer", ",", "\n", "action_noise", ":", "Optional", "[", "ActionNoise", "]", "=", "None", ",", "\n", "learning_starts", ":", "int", "=", "0", ",", "\n", "log_interval", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "RolloutReturn", ":", "\n", "        ", "\"\"\"\n        Collect experiences and store them into a ``ReplayBuffer``.\n\n        :param env: The training environment\n        :param callback: Callback that will be called at each step\n            (and at the beginning and end of the rollout)\n        :param train_freq: How much experience to collect\n            by doing rollouts of current policy.\n            Either ``TrainFreq(<n>, TrainFrequencyUnit.STEP)``\n            or ``TrainFreq(<n>, TrainFrequencyUnit.EPISODE)``\n            with ``<n>`` being an integer greater than 0.\n        :param action_noise: Action noise that will be used for exploration\n            Required for deterministic policy (e.g. TD3). This can also be used\n            in addition to the stochastic policy for SAC.\n        :param learning_starts: Number of steps before learning for the warm-up phase.\n        :param replay_buffer:\n        :param log_interval: Log data every ``log_interval`` episodes\n        :return:\n        \"\"\"", "\n", "# Switch to eval mode (this affects batch norm / dropout)", "\n", "self", ".", "policy", ".", "set_training_mode", "(", "False", ")", "\n", "\n", "num_collected_steps", ",", "num_collected_episodes", "=", "0", ",", "0", "\n", "\n", "assert", "isinstance", "(", "env", ",", "VecEnv", ")", ",", "\"You must pass a VecEnv\"", "\n", "assert", "train_freq", ".", "frequency", ">", "0", ",", "\"Should at least collect one step or episode.\"", "\n", "\n", "if", "env", ".", "num_envs", ">", "1", ":", "\n", "            ", "assert", "train_freq", ".", "unit", "==", "TrainFrequencyUnit", ".", "STEP", ",", "\"You must use only one env when doing episodic training.\"", "\n", "\n", "# Vectorize action noise if needed", "\n", "", "if", "action_noise", "is", "not", "None", "and", "env", ".", "num_envs", ">", "1", "and", "not", "isinstance", "(", "action_noise", ",", "VectorizedActionNoise", ")", ":", "\n", "            ", "action_noise", "=", "VectorizedActionNoise", "(", "action_noise", ",", "env", ".", "num_envs", ")", "\n", "\n", "", "if", "self", ".", "use_sde", ":", "\n", "            ", "self", ".", "actor", ".", "reset_noise", "(", "env", ".", "num_envs", ")", "\n", "\n", "", "callback", ".", "on_rollout_start", "(", ")", "\n", "continue_training", "=", "True", "\n", "\n", "while", "should_collect_more_steps", "(", "train_freq", ",", "num_collected_steps", ",", "num_collected_episodes", ")", ":", "\n", "            ", "if", "self", ".", "use_sde", "and", "self", ".", "sde_sample_freq", ">", "0", "and", "num_collected_steps", "%", "self", ".", "sde_sample_freq", "==", "0", ":", "\n", "# Sample a new noise matrix", "\n", "                ", "self", ".", "actor", ".", "reset_noise", "(", "env", ".", "num_envs", ")", "\n", "\n", "# Select action randomly or according to policy", "\n", "", "actions", ",", "buffer_actions", "=", "self", ".", "_sample_action", "(", "learning_starts", ",", "action_noise", ",", "env", ".", "num_envs", ")", "\n", "\n", "# Rescale and perform action", "\n", "new_obs", ",", "rewards", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "actions", ")", "\n", "\n", "self", ".", "num_timesteps", "+=", "env", ".", "num_envs", "\n", "num_collected_steps", "+=", "1", "\n", "\n", "# Give access to local variables", "\n", "callback", ".", "update_locals", "(", "locals", "(", ")", ")", "\n", "# Only stop training if return value is False, not when it is None.", "\n", "if", "callback", ".", "on_step", "(", ")", "is", "False", ":", "\n", "                ", "return", "RolloutReturn", "(", "num_collected_steps", "*", "env", ".", "num_envs", ",", "num_collected_episodes", ",", "continue_training", "=", "False", ")", "\n", "\n", "# Retrieve reward and episode length if using Monitor wrapper", "\n", "", "self", ".", "_update_info_buffer", "(", "infos", ",", "dones", ")", "\n", "\n", "# Store data in replay buffer (normalized action and unnormalized observation)", "\n", "self", ".", "_store_transition", "(", "replay_buffer", ",", "buffer_actions", ",", "new_obs", ",", "rewards", ",", "dones", ",", "infos", ")", "\n", "\n", "self", ".", "_update_current_progress_remaining", "(", "self", ".", "num_timesteps", ",", "self", ".", "_total_timesteps", ")", "\n", "\n", "# For DQN, check if the target network should be updated", "\n", "# and update the exploration schedule", "\n", "# For SAC/TD3, the update is dones as the same time as the gradient update", "\n", "# see https://github.com/hill-a/stable-baselines/issues/900", "\n", "self", ".", "_on_step", "(", ")", "\n", "\n", "for", "idx", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "                ", "if", "done", ":", "\n", "# Update stats", "\n", "                    ", "num_collected_episodes", "+=", "1", "\n", "self", ".", "_episode_num", "+=", "1", "\n", "\n", "if", "action_noise", "is", "not", "None", ":", "\n", "                        ", "kwargs", "=", "dict", "(", "indices", "=", "[", "idx", "]", ")", "if", "env", ".", "num_envs", ">", "1", "else", "{", "}", "\n", "action_noise", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n", "# Log training infos", "\n", "", "if", "log_interval", "is", "not", "None", "and", "self", ".", "_episode_num", "%", "log_interval", "==", "0", ":", "\n", "                        ", "self", ".", "_dump_logs", "(", ")", "\n", "\n", "", "", "", "", "callback", ".", "on_rollout_end", "(", ")", "\n", "\n", "return", "RolloutReturn", "(", "num_collected_steps", "*", "env", ".", "num_envs", ",", "num_collected_episodes", ",", "continue_training", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first": [[10, 25], ["numpy.argmin().item", "warnings.warn", "numpy.argmin"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["def", "is_image_space_channels_first", "(", "observation_space", ":", "spaces", ".", "Box", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Check if an image observation space (see ``is_image_space``)\n    is channels-first (CxHxW, True) or channels-last (HxWxC, False).\n\n    Use a heuristic that channel dimension is the smallest of the three.\n    If second dimension is smallest, raise an exception (no support).\n\n    :param observation_space:\n    :return: True if observation space is channels-first image, False if channels-last.\n    \"\"\"", "\n", "smallest_dimension", "=", "np", ".", "argmin", "(", "observation_space", ".", "shape", ")", ".", "item", "(", ")", "\n", "if", "smallest_dimension", "==", "1", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Treating image space as channels-last, while second dimension was smallest of the three.\"", ")", "\n", "", "return", "smallest_dimension", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space": [[27, 63], ["isinstance", "preprocessing.is_image_space_channels_first", "len", "numpy.any", "numpy.any"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first"], ["", "def", "is_image_space", "(", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "check_channels", ":", "bool", "=", "False", ",", "\n", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Check if a observation space has the shape, limits and dtype\n    of a valid image.\n    The check is conservative, so that it returns False if there is a doubt.\n\n    Valid images: RGB, RGBD, GrayScale with values in [0, 255]\n\n    :param observation_space:\n    :param check_channels: Whether to do or not the check for the number of channels.\n        e.g., with frame-stacking, the observation space may have more channels than expected.\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Box", ")", "and", "len", "(", "observation_space", ".", "shape", ")", "==", "3", ":", "\n", "# Check the type", "\n", "        ", "if", "observation_space", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "            ", "return", "False", "\n", "\n", "# Check the value range", "\n", "", "if", "np", ".", "any", "(", "observation_space", ".", "low", "!=", "0", ")", "or", "np", ".", "any", "(", "observation_space", ".", "high", "!=", "255", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "# Skip channels check", "\n", "", "if", "not", "check_channels", ":", "\n", "            ", "return", "True", "\n", "# Check the number of channels", "\n", "", "if", "is_image_space_channels_first", "(", "observation_space", ")", ":", "\n", "            ", "n_channels", "=", "observation_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "n_channels", "=", "observation_space", ".", "shape", "[", "-", "1", "]", "\n", "# RGB, RGBD, GrayScale", "\n", "", "return", "n_channels", "in", "[", "1", ",", "3", ",", "4", "]", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.maybe_transpose": [[65, 83], ["preprocessing.is_image_space", "VecTransposeImage.transpose_image"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_image"], ["", "def", "maybe_transpose", "(", "observation", ":", "np", ".", "ndarray", ",", "observation_space", ":", "spaces", ".", "Space", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Handle the different cases for images as PyTorch use channel first format.\n\n    :param observation:\n    :param observation_space:\n    :return: channel first observation if observation is an image\n    \"\"\"", "\n", "# Avoid circular import", "\n", "from", "stable_baselines3", ".", "common", ".", "vec_env", "import", "VecTransposeImage", "\n", "\n", "if", "is_image_space", "(", "observation_space", ")", ":", "\n", "        ", "if", "not", "(", "observation", ".", "shape", "==", "observation_space", ".", "shape", "or", "observation", ".", "shape", "[", "1", ":", "]", "==", "observation_space", ".", "shape", ")", ":", "\n", "# Try to re-order the channels", "\n", "            ", "transpose_obs", "=", "VecTransposeImage", ".", "transpose_image", "(", "observation", ")", "\n", "if", "transpose_obs", ".", "shape", "==", "observation_space", ".", "shape", "or", "transpose_obs", ".", "shape", "[", "1", ":", "]", "==", "observation_space", ".", "shape", ":", "\n", "                ", "observation", "=", "transpose_obs", "\n", "", "", "", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.preprocess_obs": [[85, 132], ["isinstance", "obs.float", "isinstance", "preprocessing.is_image_space", "torch.nn.functional.one_hot().float", "isinstance", "obs.float", "torch.cat().view", "isinstance", "torch.nn.functional.one_hot", "sum", "obs.float", "isinstance", "obs.long", "torch.cat", "obs.items", "NotImplementedError", "preprocessing.preprocess_obs", "torch.nn.functional.one_hot().float", "enumerate", "torch.nn.functional.one_hot", "torch.split", "obs_.long", "obs.long", "int"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.preprocess_obs"], ["", "def", "preprocess_obs", "(", "\n", "obs", ":", "th", ".", "Tensor", ",", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "normalize_images", ":", "bool", "=", "True", ",", "\n", ")", "->", "Union", "[", "th", ".", "Tensor", ",", "Dict", "[", "str", ",", "th", ".", "Tensor", "]", "]", ":", "\n", "    ", "\"\"\"\n    Preprocess observation to be to a neural network.\n    For images, it normalizes the values by dividing them by 255 (to have values in [0, 1])\n    For discrete observations, it create a one hot vector.\n\n    :param obs: Observation\n    :param observation_space:\n    :param normalize_images: Whether to normalize images or not\n        (True by default)\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "if", "is_image_space", "(", "observation_space", ")", "and", "normalize_images", ":", "\n", "            ", "return", "obs", ".", "float", "(", ")", "/", "255.0", "\n", "", "return", "obs", ".", "float", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "# One hot encoding and convert to float to avoid errors", "\n", "        ", "return", "F", ".", "one_hot", "(", "obs", ".", "long", "(", ")", ",", "num_classes", "=", "observation_space", ".", "n", ")", ".", "float", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "# Tensor concatenation of one hot encodings of each Categorical sub-space", "\n", "        ", "return", "th", ".", "cat", "(", "\n", "[", "\n", "F", ".", "one_hot", "(", "obs_", ".", "long", "(", ")", ",", "num_classes", "=", "int", "(", "observation_space", ".", "nvec", "[", "idx", "]", ")", ")", ".", "float", "(", ")", "\n", "for", "idx", ",", "obs_", "in", "enumerate", "(", "th", ".", "split", "(", "obs", ".", "long", "(", ")", ",", "1", ",", "dim", "=", "1", ")", ")", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", ".", "view", "(", "obs", ".", "shape", "[", "0", "]", ",", "sum", "(", "observation_space", ".", "nvec", ")", ")", "\n", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "spaces", ".", "MultiBinary", ")", ":", "\n", "        ", "return", "obs", ".", "float", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "# Do not modify by reference the original observation", "\n", "        ", "preprocessed_obs", "=", "{", "}", "\n", "for", "key", ",", "_obs", "in", "obs", ".", "items", "(", ")", ":", "\n", "            ", "preprocessed_obs", "[", "key", "]", "=", "preprocess_obs", "(", "_obs", ",", "observation_space", "[", "key", "]", ",", "normalize_images", "=", "normalize_images", ")", "\n", "", "return", "preprocessed_obs", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Preprocessing not implemented for {observation_space}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_obs_shape": [[134, 159], ["isinstance", "isinstance", "isinstance", "isinstance", "int", "isinstance", "len", "int", "NotImplementedError", "preprocessing.get_obs_shape", "observation_space.spaces.items"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_obs_shape"], ["", "", "def", "get_obs_shape", "(", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", ")", "->", "Union", "[", "Tuple", "[", "int", ",", "...", "]", ",", "Dict", "[", "str", ",", "Tuple", "[", "int", ",", "...", "]", "]", "]", ":", "\n", "    ", "\"\"\"\n    Get the shape of the observation (useful for the buffers).\n\n    :param observation_space:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "return", "observation_space", ".", "shape", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "# Observation is an int", "\n", "        ", "return", "(", "1", ",", ")", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "# Number of discrete features", "\n", "        ", "return", "(", "int", "(", "len", "(", "observation_space", ".", "nvec", ")", ")", ",", ")", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "spaces", ".", "MultiBinary", ")", ":", "\n", "# Number of binary features", "\n", "        ", "return", "(", "int", "(", "observation_space", ".", "n", ")", ",", ")", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "        ", "return", "{", "key", ":", "get_obs_shape", "(", "subspace", ")", "for", "(", "key", ",", "subspace", ")", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", "}", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"{observation_space} observation space is not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_flattened_obs_dim": [[161, 178], ["isinstance", "sum", "gym.spaces.utils.flatdim"], "function", ["None"], ["", "", "def", "get_flattened_obs_dim", "(", "observation_space", ":", "spaces", ".", "Space", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Get the dimension of the observation space when flattened.\n    It does not apply to image observation space.\n\n    Used by the ``FlattenExtractor`` to compute the input shape.\n\n    :param observation_space:\n    :return:\n    \"\"\"", "\n", "# See issue https://github.com/openai/gym/issues/1915", "\n", "# it may be a problem for Dict/Tuple spaces too...", "\n", "if", "isinstance", "(", "observation_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "        ", "return", "sum", "(", "observation_space", ".", "nvec", ")", "\n", "", "else", ":", "\n", "# Use Gym internal method", "\n", "        ", "return", "spaces", ".", "utils", ".", "flatdim", "(", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_action_dim": [[180, 200], ["isinstance", "int", "isinstance", "numpy.prod", "isinstance", "int", "isinstance", "len", "int", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_action_dim", "(", "action_space", ":", "spaces", ".", "Space", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Get the dimension of the action space.\n\n    :param action_space:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "action_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "return", "int", "(", "np", ".", "prod", "(", "action_space", ".", "shape", ")", ")", "\n", "", "elif", "isinstance", "(", "action_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "# Action is an int", "\n", "        ", "return", "1", "\n", "", "elif", "isinstance", "(", "action_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "# Number of discrete actions", "\n", "        ", "return", "int", "(", "len", "(", "action_space", ".", "nvec", ")", ")", "\n", "", "elif", "isinstance", "(", "action_space", ",", "spaces", ".", "MultiBinary", ")", ":", "\n", "# Number of binary actions", "\n", "        ", "return", "int", "(", "action_space", ".", "n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"{action_space} action space is not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.check_for_nested_spaces": [[202, 216], ["isinstance", "isinstance", "obs_space.spaces.values", "isinstance", "NotImplementedError"], "function", ["None"], ["", "", "def", "check_for_nested_spaces", "(", "obs_space", ":", "spaces", ".", "Space", ")", ":", "\n", "    ", "\"\"\"\n    Make sure the observation space does not have nested spaces (Dicts/Tuples inside Dicts/Tuples).\n    If so, raise an Exception informing that there is no support for this.\n\n    :param obs_space: an observation space\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "obs_space", ",", "(", "spaces", ".", "Dict", ",", "spaces", ".", "Tuple", ")", ")", ":", "\n", "        ", "sub_spaces", "=", "obs_space", ".", "spaces", ".", "values", "(", ")", "if", "isinstance", "(", "obs_space", ",", "spaces", ".", "Dict", ")", "else", "obs_space", ".", "spaces", "\n", "for", "sub_space", "in", "sub_spaces", ":", "\n", "            ", "if", "isinstance", "(", "sub_space", ",", "(", "spaces", ".", "Dict", ",", "spaces", ".", "Tuple", ")", ")", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "\"Nested observation spaces are not supported (Tuple/Dict space inside Tuple/Dict space).\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.__init__": [[18, 21], ["abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "distribution", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.proba_distribution_net": [[22, 28], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "proba_distribution_net", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Union", "[", "nn", ".", "Module", ",", "Tuple", "[", "nn", ".", "Module", ",", "nn", ".", "Parameter", "]", "]", ":", "\n", "        ", "\"\"\"Create the layers and parameters that represent the distribution.\n\n        Subclasses must define this, but the arguments and return type vary between\n        concrete classes.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.proba_distribution": [[29, 35], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "proba_distribution", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "\"Distribution\"", ":", "\n", "        ", "\"\"\"Set parameters of the distribution.\n\n        :return: self\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.log_prob": [[36, 44], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "log_prob", "(", "self", ",", "x", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the log likelihood\n\n        :param x: the taken action\n        :return: The log likelihood of the distribution\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.entropy": [[45, 52], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "entropy", "(", "self", ")", "->", "Optional", "[", "th", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Returns Shannon's entropy of the probability\n\n        :return: the entropy, or None if no analytical form is known\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.sample": [[53, 60], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sample", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns a sample from the probability distribution\n\n        :return: the stochastic action\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.mode": [[61, 69], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "mode", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the most likely action (deterministic output)\n        from the probability distribution\n\n        :return: the stochastic action\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions": [[70, 80], ["distributions.Distribution.sample", "distributions.Distribution.mode"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.mode"], ["", "def", "get_actions", "(", "self", ",", "deterministic", ":", "bool", "=", "False", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Return actions according to the probability distribution.\n\n        :param deterministic:\n        :return:\n        \"\"\"", "\n", "if", "deterministic", ":", "\n", "            ", "return", "self", ".", "mode", "(", ")", "\n", "", "return", "self", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.actions_from_params": [[81, 89], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "actions_from_params", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns samples from the probability distribution\n        given its parameters.\n\n        :return: actions\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.log_prob_from_params": [[90, 98], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "log_prob_from_params", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Tuple", "[", "th", ".", "Tensor", ",", "th", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Returns samples and the associated log probabilities\n        from the probability distribution given its parameters.\n\n        :return: actions and log prob\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.__init__": [[122, 127], ["distributions.Distribution.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "action_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "mean_actions", "=", "None", "\n", "self", ".", "log_std", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.proba_distribution_net": [[128, 142], ["torch.nn.Linear", "torch.nn.Parameter", "torch.ones"], "methods", ["None"], ["", "def", "proba_distribution_net", "(", "self", ",", "latent_dim", ":", "int", ",", "log_std_init", ":", "float", "=", "0.0", ")", "->", "Tuple", "[", "nn", ".", "Module", ",", "nn", ".", "Parameter", "]", ":", "\n", "        ", "\"\"\"\n        Create the layers and parameter that represent the distribution:\n        one output will be the mean of the Gaussian, the other parameter will be the\n        standard deviation (log std in fact to allow negative values)\n\n        :param latent_dim: Dimension of the last layer of the policy (before the action layer)\n        :param log_std_init: Initial value for the log standard deviation\n        :return:\n        \"\"\"", "\n", "mean_actions", "=", "nn", ".", "Linear", "(", "latent_dim", ",", "self", ".", "action_dim", ")", "\n", "# TODO: allow action dependent std", "\n", "log_std", "=", "nn", ".", "Parameter", "(", "th", ".", "ones", "(", "self", ".", "action_dim", ")", "*", "log_std_init", ",", "requires_grad", "=", "True", ")", "\n", "return", "mean_actions", ",", "log_std", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.proba_distribution": [[143, 154], ["torch.distributions.Normal", "torch.ones_like", "log_std.exp"], "methods", ["None"], ["", "def", "proba_distribution", "(", "self", ",", "mean_actions", ":", "th", ".", "Tensor", ",", "log_std", ":", "th", ".", "Tensor", ")", "->", "\"DiagGaussianDistribution\"", ":", "\n", "        ", "\"\"\"\n        Create the distribution given its parameters (mean, std)\n\n        :param mean_actions:\n        :param log_std:\n        :return:\n        \"\"\"", "\n", "action_std", "=", "th", ".", "ones_like", "(", "mean_actions", ")", "*", "log_std", ".", "exp", "(", ")", "\n", "self", ".", "distribution", "=", "Normal", "(", "mean_actions", ",", "action_std", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.log_prob": [[155, 165], ["distributions.DiagGaussianDistribution.distribution.log_prob", "distributions.sum_independent_dims"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.sum_independent_dims"], ["", "def", "log_prob", "(", "self", ",", "actions", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Get the log probabilities of actions according to the distribution.\n        Note that you must first call the ``proba_distribution()`` method.\n\n        :param actions:\n        :return:\n        \"\"\"", "\n", "log_prob", "=", "self", ".", "distribution", ".", "log_prob", "(", "actions", ")", "\n", "return", "sum_independent_dims", "(", "log_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.entropy": [[166, 168], ["distributions.sum_independent_dims", "distributions.DiagGaussianDistribution.distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.sum_independent_dims", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy"], ["", "def", "entropy", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "sum_independent_dims", "(", "self", ".", "distribution", ".", "entropy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.sample": [[169, 172], ["distributions.DiagGaussianDistribution.distribution.rsample"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "# Reparametrization trick to pass gradients", "\n", "        ", "return", "self", ".", "distribution", ".", "rsample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.mode": [[173, 175], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.actions_from_params": [[176, 180], ["distributions.DiagGaussianDistribution.proba_distribution", "distributions.DiagGaussianDistribution.get_actions"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions"], ["", "def", "actions_from_params", "(", "self", ",", "mean_actions", ":", "th", ".", "Tensor", ",", "log_std", ":", "th", ".", "Tensor", ",", "deterministic", ":", "bool", "=", "False", ")", "->", "th", ".", "Tensor", ":", "\n", "# Update the proba distribution", "\n", "        ", "self", ".", "proba_distribution", "(", "mean_actions", ",", "log_std", ")", "\n", "return", "self", ".", "get_actions", "(", "deterministic", "=", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.DiagGaussianDistribution.log_prob_from_params": [[181, 193], ["distributions.DiagGaussianDistribution.actions_from_params", "distributions.DiagGaussianDistribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.actions_from_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob_from_params", "(", "self", ",", "mean_actions", ":", "th", ".", "Tensor", ",", "log_std", ":", "th", ".", "Tensor", ")", "->", "Tuple", "[", "th", ".", "Tensor", ",", "th", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Compute the log probability of taking an action\n        given the distribution parameters.\n\n        :param mean_actions:\n        :param log_std:\n        :return:\n        \"\"\"", "\n", "actions", "=", "self", ".", "actions_from_params", "(", "mean_actions", ",", "log_std", ")", "\n", "log_prob", "=", "self", ".", "log_prob", "(", "actions", ")", "\n", "return", "actions", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.SquashedDiagGaussianDistribution.__init__": [[203, 208], ["distributions.DiagGaussianDistribution.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "action_dim", ":", "int", ",", "epsilon", ":", "float", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "action_dim", ")", "\n", "# Avoid NaN (prevents division by zero or log of zero)", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "gaussian_actions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.SquashedDiagGaussianDistribution.proba_distribution": [[209, 212], ["distributions.DiagGaussianDistribution.proba_distribution"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution"], ["", "def", "proba_distribution", "(", "self", ",", "mean_actions", ":", "th", ".", "Tensor", ",", "log_std", ":", "th", ".", "Tensor", ")", "->", "\"SquashedDiagGaussianDistribution\"", ":", "\n", "        ", "super", "(", ")", ".", "proba_distribution", "(", "mean_actions", ",", "log_std", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.SquashedDiagGaussianDistribution.log_prob": [[213, 227], ["distributions.DiagGaussianDistribution.log_prob", "torch.sum", "distributions.TanhBijector.inverse", "torch.log"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.inverse", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "def", "log_prob", "(", "self", ",", "actions", ":", "th", ".", "Tensor", ",", "gaussian_actions", ":", "Optional", "[", "th", ".", "Tensor", "]", "=", "None", ")", "->", "th", ".", "Tensor", ":", "\n", "# Inverse tanh", "\n", "# Naive implementation (not stable): 0.5 * torch.log((1 + x) / (1 - x))", "\n", "# We use numpy to avoid numerical instability", "\n", "        ", "if", "gaussian_actions", "is", "None", ":", "\n", "# It will be clipped to avoid NaN when inversing tanh", "\n", "            ", "gaussian_actions", "=", "TanhBijector", ".", "inverse", "(", "actions", ")", "\n", "\n", "# Log likelihood for a Gaussian distribution", "\n", "", "log_prob", "=", "super", "(", ")", ".", "log_prob", "(", "gaussian_actions", ")", "\n", "# Squash correction (from original SAC implementation)", "\n", "# this comes from the fact that tanh is bijective and differentiable", "\n", "log_prob", "-=", "th", ".", "sum", "(", "th", ".", "log", "(", "1", "-", "actions", "**", "2", "+", "self", ".", "epsilon", ")", ",", "dim", "=", "1", ")", "\n", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.SquashedDiagGaussianDistribution.entropy": [[228, 232], ["None"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", "->", "Optional", "[", "th", ".", "Tensor", "]", ":", "\n", "# No analytical form,", "\n", "# entropy needs to be estimated using -log_prob.mean()", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.SquashedDiagGaussianDistribution.sample": [[233, 237], ["distributions.DiagGaussianDistribution.sample", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "sample", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "# Reparametrization trick to pass gradients", "\n", "        ", "self", ".", "gaussian_actions", "=", "super", "(", ")", ".", "sample", "(", ")", "\n", "return", "th", ".", "tanh", "(", "self", ".", "gaussian_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.SquashedDiagGaussianDistribution.mode": [[238, 242], ["distributions.DiagGaussianDistribution.mode", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.mode"], ["", "def", "mode", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "self", ".", "gaussian_actions", "=", "super", "(", ")", ".", "mode", "(", ")", "\n", "# Squash the output", "\n", "return", "th", ".", "tanh", "(", "self", ".", "gaussian_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.SquashedDiagGaussianDistribution.log_prob_from_params": [[243, 247], ["distributions.SquashedDiagGaussianDistribution.actions_from_params", "distributions.SquashedDiagGaussianDistribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.actions_from_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob_from_params", "(", "self", ",", "mean_actions", ":", "th", ".", "Tensor", ",", "log_std", ":", "th", ".", "Tensor", ")", "->", "Tuple", "[", "th", ".", "Tensor", ",", "th", ".", "Tensor", "]", ":", "\n", "        ", "action", "=", "self", ".", "actions_from_params", "(", "mean_actions", ",", "log_std", ")", "\n", "log_prob", "=", "self", ".", "log_prob", "(", "action", ",", "self", ".", "gaussian_actions", ")", "\n", "return", "action", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.__init__": [[256, 259], ["distributions.Distribution.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "action_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.proba_distribution_net": [[260, 272], ["torch.nn.Linear"], "methods", ["None"], ["", "def", "proba_distribution_net", "(", "self", ",", "latent_dim", ":", "int", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"\n        Create the layer that represents the distribution:\n        it will be the logits of the Categorical distribution.\n        You can then get probabilities using a softmax.\n\n        :param latent_dim: Dimension of the last layer\n            of the policy network (before the action layer)\n        :return:\n        \"\"\"", "\n", "action_logits", "=", "nn", ".", "Linear", "(", "latent_dim", ",", "self", ".", "action_dim", ")", "\n", "return", "action_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.proba_distribution": [[273, 276], ["torch.distributions.Categorical"], "methods", ["None"], ["", "def", "proba_distribution", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ")", "->", "\"CategoricalDistribution\"", ":", "\n", "        ", "self", ".", "distribution", "=", "Categorical", "(", "logits", "=", "action_logits", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.log_prob": [[277, 279], ["distributions.CategoricalDistribution.distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob", "(", "self", ",", "actions", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "log_prob", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.entropy": [[280, 282], ["distributions.CategoricalDistribution.distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy"], ["", "def", "entropy", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "entropy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.sample": [[283, 285], ["distributions.CategoricalDistribution.distribution.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "sample", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.mode": [[286, 288], ["torch.argmax"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "th", ".", "argmax", "(", "self", ".", "distribution", ".", "probs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.actions_from_params": [[289, 293], ["distributions.CategoricalDistribution.proba_distribution", "distributions.CategoricalDistribution.get_actions"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions"], ["", "def", "actions_from_params", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ",", "deterministic", ":", "bool", "=", "False", ")", "->", "th", ".", "Tensor", ":", "\n", "# Update the proba distribution", "\n", "        ", "self", ".", "proba_distribution", "(", "action_logits", ")", "\n", "return", "self", ".", "get_actions", "(", "deterministic", "=", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.CategoricalDistribution.log_prob_from_params": [[294, 298], ["distributions.CategoricalDistribution.actions_from_params", "distributions.CategoricalDistribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.actions_from_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob_from_params", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ")", "->", "Tuple", "[", "th", ".", "Tensor", ",", "th", ".", "Tensor", "]", ":", "\n", "        ", "actions", "=", "self", ".", "actions_from_params", "(", "action_logits", ")", "\n", "log_prob", "=", "self", ".", "log_prob", "(", "actions", ")", "\n", "return", "actions", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.__init__": [[307, 310], ["distributions.Distribution.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "action_dims", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "action_dims", "=", "action_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.proba_distribution_net": [[311, 324], ["torch.nn.Linear", "sum"], "methods", ["None"], ["", "def", "proba_distribution_net", "(", "self", ",", "latent_dim", ":", "int", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"\n        Create the layer that represents the distribution:\n        it will be the logits (flattened) of the MultiCategorical distribution.\n        You can then get probabilities using a softmax on each sub-space.\n\n        :param latent_dim: Dimension of the last layer\n            of the policy network (before the action layer)\n        :return:\n        \"\"\"", "\n", "\n", "action_logits", "=", "nn", ".", "Linear", "(", "latent_dim", ",", "sum", "(", "self", ".", "action_dims", ")", ")", "\n", "return", "action_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.proba_distribution": [[325, 328], ["torch.distributions.Categorical", "torch.split", "tuple"], "methods", ["None"], ["", "def", "proba_distribution", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ")", "->", "\"MultiCategoricalDistribution\"", ":", "\n", "        ", "self", ".", "distribution", "=", "[", "Categorical", "(", "logits", "=", "split", ")", "for", "split", "in", "th", ".", "split", "(", "action_logits", ",", "tuple", "(", "self", ".", "action_dims", ")", ",", "dim", "=", "1", ")", "]", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.log_prob": [[329, 334], ["torch.stack().sum", "torch.stack", "dist.log_prob", "zip", "torch.unbind"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob", "(", "self", ",", "actions", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "# Extract each discrete action and compute log prob for their respective distributions", "\n", "        ", "return", "th", ".", "stack", "(", "\n", "[", "dist", ".", "log_prob", "(", "action", ")", "for", "dist", ",", "action", "in", "zip", "(", "self", ".", "distribution", ",", "th", ".", "unbind", "(", "actions", ",", "dim", "=", "1", ")", ")", "]", ",", "dim", "=", "1", "\n", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.entropy": [[335, 337], ["torch.stack().sum", "torch.stack", "dist.entropy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy"], ["", "def", "entropy", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "th", ".", "stack", "(", "[", "dist", ".", "entropy", "(", ")", "for", "dist", "in", "self", ".", "distribution", "]", ",", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.sample": [[338, 340], ["torch.stack", "dist.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "sample", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "th", ".", "stack", "(", "[", "dist", ".", "sample", "(", ")", "for", "dist", "in", "self", ".", "distribution", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.mode": [[341, 343], ["torch.stack", "torch.argmax"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "th", ".", "stack", "(", "[", "th", ".", "argmax", "(", "dist", ".", "probs", ",", "dim", "=", "1", ")", "for", "dist", "in", "self", ".", "distribution", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.actions_from_params": [[344, 348], ["distributions.MultiCategoricalDistribution.proba_distribution", "distributions.MultiCategoricalDistribution.get_actions"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions"], ["", "def", "actions_from_params", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ",", "deterministic", ":", "bool", "=", "False", ")", "->", "th", ".", "Tensor", ":", "\n", "# Update the proba distribution", "\n", "        ", "self", ".", "proba_distribution", "(", "action_logits", ")", "\n", "return", "self", ".", "get_actions", "(", "deterministic", "=", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.MultiCategoricalDistribution.log_prob_from_params": [[349, 353], ["distributions.MultiCategoricalDistribution.actions_from_params", "distributions.MultiCategoricalDistribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.actions_from_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob_from_params", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ")", "->", "Tuple", "[", "th", ".", "Tensor", ",", "th", ".", "Tensor", "]", ":", "\n", "        ", "actions", "=", "self", ".", "actions_from_params", "(", "action_logits", ")", "\n", "log_prob", "=", "self", ".", "log_prob", "(", "actions", ")", "\n", "return", "actions", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.__init__": [[362, 365], ["distributions.Distribution.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "action_dims", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "action_dims", "=", "action_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.proba_distribution_net": [[366, 377], ["torch.nn.Linear"], "methods", ["None"], ["", "def", "proba_distribution_net", "(", "self", ",", "latent_dim", ":", "int", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"\n        Create the layer that represents the distribution:\n        it will be the logits of the Bernoulli distribution.\n\n        :param latent_dim: Dimension of the last layer\n            of the policy network (before the action layer)\n        :return:\n        \"\"\"", "\n", "action_logits", "=", "nn", ".", "Linear", "(", "latent_dim", ",", "self", ".", "action_dims", ")", "\n", "return", "action_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.proba_distribution": [[378, 381], ["torch.distributions.Bernoulli"], "methods", ["None"], ["", "def", "proba_distribution", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ")", "->", "\"BernoulliDistribution\"", ":", "\n", "        ", "self", ".", "distribution", "=", "Bernoulli", "(", "logits", "=", "action_logits", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.log_prob": [[382, 384], ["distributions.BernoulliDistribution.distribution.log_prob().sum", "distributions.BernoulliDistribution.distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob", "(", "self", ",", "actions", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "log_prob", "(", "actions", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.entropy": [[385, 387], ["distributions.BernoulliDistribution.distribution.entropy().sum", "distributions.BernoulliDistribution.distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy"], ["", "def", "entropy", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "entropy", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.sample": [[388, 390], ["distributions.BernoulliDistribution.distribution.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "sample", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.mode": [[391, 393], ["torch.round"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "th", ".", "round", "(", "self", ".", "distribution", ".", "probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.actions_from_params": [[394, 398], ["distributions.BernoulliDistribution.proba_distribution", "distributions.BernoulliDistribution.get_actions"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions"], ["", "def", "actions_from_params", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ",", "deterministic", ":", "bool", "=", "False", ")", "->", "th", ".", "Tensor", ":", "\n", "# Update the proba distribution", "\n", "        ", "self", ".", "proba_distribution", "(", "action_logits", ")", "\n", "return", "self", ".", "get_actions", "(", "deterministic", "=", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.BernoulliDistribution.log_prob_from_params": [[399, 403], ["distributions.BernoulliDistribution.actions_from_params", "distributions.BernoulliDistribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.actions_from_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob_from_params", "(", "self", ",", "action_logits", ":", "th", ".", "Tensor", ")", "->", "Tuple", "[", "th", ".", "Tensor", ",", "th", ".", "Tensor", "]", ":", "\n", "        ", "actions", "=", "self", ".", "actions_from_params", "(", "action_logits", ")", "\n", "log_prob", "=", "self", ".", "log_prob", "(", "actions", ")", "\n", "return", "actions", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.__init__": [[427, 453], ["distributions.Distribution.__init__", "distributions.TanhBijector"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "action_dim", ":", "int", ",", "\n", "full_std", ":", "bool", "=", "True", ",", "\n", "use_expln", ":", "bool", "=", "False", ",", "\n", "squash_output", ":", "bool", "=", "False", ",", "\n", "learn_features", ":", "bool", "=", "False", ",", "\n", "epsilon", ":", "float", "=", "1e-6", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "latent_sde_dim", "=", "None", "\n", "self", ".", "mean_actions", "=", "None", "\n", "self", ".", "log_std", "=", "None", "\n", "self", ".", "weights_dist", "=", "None", "\n", "self", ".", "exploration_mat", "=", "None", "\n", "self", ".", "exploration_matrices", "=", "None", "\n", "self", ".", "_latent_sde", "=", "None", "\n", "self", ".", "use_expln", "=", "use_expln", "\n", "self", ".", "full_std", "=", "full_std", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "learn_features", "=", "learn_features", "\n", "if", "squash_output", ":", "\n", "            ", "self", ".", "bijector", "=", "TanhBijector", "(", "epsilon", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bijector", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.get_std": [[454, 478], ["torch.exp", "torch.ones().to", "torch.exp", "torch.log1p", "torch.ones"], "methods", ["None"], ["", "", "def", "get_std", "(", "self", ",", "log_std", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Get the standard deviation from the learned parameter\n        (log of it by default). This ensures that the std is positive.\n\n        :param log_std:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "use_expln", ":", "\n", "# From gSDE paper, it allows to keep variance", "\n", "# above zero and prevent it from growing too fast", "\n", "            ", "below_threshold", "=", "th", ".", "exp", "(", "log_std", ")", "*", "(", "log_std", "<=", "0", ")", "\n", "# Avoid NaN: zeros values that are below zero", "\n", "safe_log_std", "=", "log_std", "*", "(", "log_std", ">", "0", ")", "+", "self", ".", "epsilon", "\n", "above_threshold", "=", "(", "th", ".", "log1p", "(", "safe_log_std", ")", "+", "1.0", ")", "*", "(", "log_std", ">", "0", ")", "\n", "std", "=", "below_threshold", "+", "above_threshold", "\n", "", "else", ":", "\n", "# Use normal exponential", "\n", "            ", "std", "=", "th", ".", "exp", "(", "log_std", ")", "\n", "\n", "", "if", "self", ".", "full_std", ":", "\n", "            ", "return", "std", "\n", "# Reduce the number of parameters:", "\n", "", "return", "th", ".", "ones", "(", "self", ".", "latent_sde_dim", ",", "self", ".", "action_dim", ")", ".", "to", "(", "log_std", ".", "device", ")", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample_weights": [[479, 493], ["distributions.StateDependentNoiseDistribution.get_std", "torch.distributions.Normal", "distributions.StateDependentNoiseDistribution.weights_dist.rsample", "distributions.StateDependentNoiseDistribution.weights_dist.rsample", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.get_std"], ["", "def", "sample_weights", "(", "self", ",", "log_std", ":", "th", ".", "Tensor", ",", "batch_size", ":", "int", "=", "1", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Sample weights for the noise exploration matrix,\n        using a centered Gaussian distribution.\n\n        :param log_std:\n        :param batch_size:\n        \"\"\"", "\n", "std", "=", "self", ".", "get_std", "(", "log_std", ")", "\n", "self", ".", "weights_dist", "=", "Normal", "(", "th", ".", "zeros_like", "(", "std", ")", ",", "std", ")", "\n", "# Reparametrization trick to pass gradients", "\n", "self", ".", "exploration_mat", "=", "self", ".", "weights_dist", ".", "rsample", "(", ")", "\n", "# Pre-compute matrices in case of parallel exploration", "\n", "self", ".", "exploration_matrices", "=", "self", ".", "weights_dist", ".", "rsample", "(", "(", "batch_size", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net": [[494, 520], ["torch.nn.Linear", "torch.nn.Parameter", "distributions.StateDependentNoiseDistribution.sample_weights", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample_weights"], ["", "def", "proba_distribution_net", "(", "\n", "self", ",", "latent_dim", ":", "int", ",", "log_std_init", ":", "float", "=", "-", "2.0", ",", "latent_sde_dim", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "nn", ".", "Module", ",", "nn", ".", "Parameter", "]", ":", "\n", "        ", "\"\"\"\n        Create the layers and parameter that represent the distribution:\n        one output will be the deterministic action, the other parameter will be the\n        standard deviation of the distribution that control the weights of the noise matrix.\n\n        :param latent_dim: Dimension of the last layer of the policy (before the action layer)\n        :param log_std_init: Initial value for the log standard deviation\n        :param latent_sde_dim: Dimension of the last layer of the features extractor\n            for gSDE. By default, it is shared with the policy network.\n        :return:\n        \"\"\"", "\n", "# Network for the deterministic action, it represents the mean of the distribution", "\n", "mean_actions_net", "=", "nn", ".", "Linear", "(", "latent_dim", ",", "self", ".", "action_dim", ")", "\n", "# When we learn features for the noise, the feature dimension", "\n", "# can be different between the policy and the noise network", "\n", "self", ".", "latent_sde_dim", "=", "latent_dim", "if", "latent_sde_dim", "is", "None", "else", "latent_sde_dim", "\n", "# Reduce the number of parameters if needed", "\n", "log_std", "=", "th", ".", "ones", "(", "self", ".", "latent_sde_dim", ",", "self", ".", "action_dim", ")", "if", "self", ".", "full_std", "else", "th", ".", "ones", "(", "self", ".", "latent_sde_dim", ",", "1", ")", "\n", "# Transform it to a parameter so it can be optimized", "\n", "log_std", "=", "nn", ".", "Parameter", "(", "log_std", "*", "log_std_init", ",", "requires_grad", "=", "True", ")", "\n", "# Sample an exploration matrix", "\n", "self", ".", "sample_weights", "(", "log_std", ")", "\n", "return", "mean_actions_net", ",", "log_std", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution": [[521, 537], ["torch.mm", "torch.distributions.Normal", "latent_sde.detach", "torch.sqrt", "distributions.StateDependentNoiseDistribution.get_std"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.get_std"], ["", "def", "proba_distribution", "(", "\n", "self", ",", "mean_actions", ":", "th", ".", "Tensor", ",", "log_std", ":", "th", ".", "Tensor", ",", "latent_sde", ":", "th", ".", "Tensor", "\n", ")", "->", "\"StateDependentNoiseDistribution\"", ":", "\n", "        ", "\"\"\"\n        Create the distribution given its parameters (mean, std)\n\n        :param mean_actions:\n        :param log_std:\n        :param latent_sde:\n        :return:\n        \"\"\"", "\n", "# Stop gradient if we don't want to influence the features", "\n", "self", ".", "_latent_sde", "=", "latent_sde", "if", "self", ".", "learn_features", "else", "latent_sde", ".", "detach", "(", ")", "\n", "variance", "=", "th", ".", "mm", "(", "self", ".", "_latent_sde", "**", "2", ",", "self", ".", "get_std", "(", "log_std", ")", "**", "2", ")", "\n", "self", ".", "distribution", "=", "Normal", "(", "mean_actions", ",", "th", ".", "sqrt", "(", "variance", "+", "self", ".", "epsilon", ")", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob": [[538, 552], ["distributions.StateDependentNoiseDistribution.distribution.log_prob", "distributions.sum_independent_dims", "distributions.StateDependentNoiseDistribution.bijector.inverse", "torch.sum", "distributions.StateDependentNoiseDistribution.bijector.log_prob_correction"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.sum_independent_dims", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.inverse", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.log_prob_correction"], ["", "def", "log_prob", "(", "self", ",", "actions", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "bijector", "is", "not", "None", ":", "\n", "            ", "gaussian_actions", "=", "self", ".", "bijector", ".", "inverse", "(", "actions", ")", "\n", "", "else", ":", "\n", "            ", "gaussian_actions", "=", "actions", "\n", "# log likelihood for a gaussian", "\n", "", "log_prob", "=", "self", ".", "distribution", ".", "log_prob", "(", "gaussian_actions", ")", "\n", "# Sum along action dim", "\n", "log_prob", "=", "sum_independent_dims", "(", "log_prob", ")", "\n", "\n", "if", "self", ".", "bijector", "is", "not", "None", ":", "\n", "# Squash correction (from original SAC implementation)", "\n", "            ", "log_prob", "-=", "th", ".", "sum", "(", "self", ".", "bijector", ".", "log_prob_correction", "(", "gaussian_actions", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy": [[553, 559], ["distributions.sum_independent_dims", "distributions.StateDependentNoiseDistribution.distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.sum_independent_dims", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy"], ["", "def", "entropy", "(", "self", ")", "->", "Optional", "[", "th", ".", "Tensor", "]", ":", "\n", "        ", "if", "self", ".", "bijector", "is", "not", "None", ":", "\n", "# No analytical form,", "\n", "# entropy needs to be estimated using -log_prob.mean()", "\n", "            ", "return", "None", "\n", "", "return", "sum_independent_dims", "(", "self", ".", "distribution", ".", "entropy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample": [[560, 566], ["distributions.StateDependentNoiseDistribution.get_noise", "distributions.StateDependentNoiseDistribution.bijector.forward"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.get_noise", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.FlattenBatchNormDropoutExtractor.forward"], ["", "def", "sample", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "noise", "=", "self", ".", "get_noise", "(", "self", ".", "_latent_sde", ")", "\n", "actions", "=", "self", ".", "distribution", ".", "mean", "+", "noise", "\n", "if", "self", ".", "bijector", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "bijector", ".", "forward", "(", "actions", ")", "\n", "", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.mode": [[567, 572], ["distributions.StateDependentNoiseDistribution.bijector.forward"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.FlattenBatchNormDropoutExtractor.forward"], ["", "def", "mode", "(", "self", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "actions", "=", "self", ".", "distribution", ".", "mean", "\n", "if", "self", ".", "bijector", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "bijector", ".", "forward", "(", "actions", ")", "\n", "", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.get_noise": [[573, 584], ["latent_sde.unsqueeze.unsqueeze.unsqueeze", "torch.bmm", "torch.bmm.squeeze", "latent_sde.unsqueeze.unsqueeze.detach", "torch.mm", "len", "len", "len"], "methods", ["None"], ["", "def", "get_noise", "(", "self", ",", "latent_sde", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "latent_sde", "=", "latent_sde", "if", "self", ".", "learn_features", "else", "latent_sde", ".", "detach", "(", ")", "\n", "# Default case: only one exploration matrix", "\n", "if", "len", "(", "latent_sde", ")", "==", "1", "or", "len", "(", "latent_sde", ")", "!=", "len", "(", "self", ".", "exploration_matrices", ")", ":", "\n", "            ", "return", "th", ".", "mm", "(", "latent_sde", ",", "self", ".", "exploration_mat", ")", "\n", "# Use batch matrix multiplication for efficient computation", "\n", "# (batch_size, n_features) -> (batch_size, 1, n_features)", "\n", "", "latent_sde", "=", "latent_sde", ".", "unsqueeze", "(", "1", ")", "\n", "# (batch_size, 1, n_actions)", "\n", "noise", "=", "th", ".", "bmm", "(", "latent_sde", ",", "self", ".", "exploration_matrices", ")", "\n", "return", "noise", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.actions_from_params": [[585, 591], ["distributions.StateDependentNoiseDistribution.proba_distribution", "distributions.StateDependentNoiseDistribution.get_actions"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions"], ["", "def", "actions_from_params", "(", "\n", "self", ",", "mean_actions", ":", "th", ".", "Tensor", ",", "log_std", ":", "th", ".", "Tensor", ",", "latent_sde", ":", "th", ".", "Tensor", ",", "deterministic", ":", "bool", "=", "False", "\n", ")", "->", "th", ".", "Tensor", ":", "\n", "# Update the proba distribution", "\n", "        ", "self", ".", "proba_distribution", "(", "mean_actions", ",", "log_std", ",", "latent_sde", ")", "\n", "return", "self", ".", "get_actions", "(", "deterministic", "=", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob_from_params": [[592, 598], ["distributions.StateDependentNoiseDistribution.actions_from_params", "distributions.StateDependentNoiseDistribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.actions_from_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["", "def", "log_prob_from_params", "(", "\n", "self", ",", "mean_actions", ":", "th", ".", "Tensor", ",", "log_std", ":", "th", ".", "Tensor", ",", "latent_sde", ":", "th", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "th", ".", "Tensor", ",", "th", ".", "Tensor", "]", ":", "\n", "        ", "actions", "=", "self", ".", "actions_from_params", "(", "mean_actions", ",", "log_std", ",", "latent_sde", ")", "\n", "log_prob", "=", "self", ".", "log_prob", "(", "actions", ")", "\n", "return", "actions", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.__init__": [[609, 612], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", ":", "float", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.forward": [[613, 616], ["torch.tanh"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward", "(", "x", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "return", "th", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.atanh": [[617, 626], ["x.log1p"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "atanh", "(", "x", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Inverse of Tanh\n\n        Taken from Pyro: https://github.com/pyro-ppl/pyro\n        0.5 * torch.log((1 + x ) / (1 - x))\n        \"\"\"", "\n", "return", "0.5", "*", "(", "x", ".", "log1p", "(", ")", "-", "(", "-", "x", ")", ".", "log1p", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.inverse": [[627, 638], ["distributions.TanhBijector.atanh", "torch.finfo", "y.clamp"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.atanh"], ["", "@", "staticmethod", "\n", "def", "inverse", "(", "y", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Inverse tanh.\n\n        :param y:\n        :return:\n        \"\"\"", "\n", "eps", "=", "th", ".", "finfo", "(", "y", ".", "dtype", ")", ".", "eps", "\n", "# Clip the action to avoid NaN", "\n", "return", "TanhBijector", ".", "atanh", "(", "y", ".", "clamp", "(", "min", "=", "-", "1.0", "+", "eps", ",", "max", "=", "1.0", "-", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.log_prob_correction": [[639, 642], ["torch.log", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "def", "log_prob_correction", "(", "self", ",", "x", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "# Squash correction (from original SAC implementation)", "\n", "        ", "return", "th", ".", "log", "(", "1.0", "-", "th", ".", "tanh", "(", "x", ")", "**", "2", "+", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.sum_independent_dims": [[100, 113], ["len", "tensor.sum.sum", "tensor.sum.sum"], "function", ["None"], ["", "", "def", "sum_independent_dims", "(", "tensor", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Continuous actions are usually considered to be independent,\n    so we can sum components of the ``log_prob`` or the entropy.\n\n    :param tensor: shape: (n_batch, n_actions) or (n_batch,)\n    :return: shape: (n_batch,)\n    \"\"\"", "\n", "if", "len", "(", "tensor", ".", "shape", ")", ">", "1", ":", "\n", "        ", "tensor", "=", "tensor", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "tensor", "=", "tensor", ".", "sum", "(", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.make_proba_distribution": [[644, 672], ["isinstance", "cls", "isinstance", "len", "stable_baselines3.common.preprocessing.get_action_dim", "distributions.CategoricalDistribution", "isinstance", "distributions.MultiCategoricalDistribution", "isinstance", "distributions.BernoulliDistribution", "NotImplementedError", "type"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_action_dim"], ["", "", "def", "make_proba_distribution", "(", "\n", "action_space", ":", "gym", ".", "spaces", ".", "Space", ",", "use_sde", ":", "bool", "=", "False", ",", "dist_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", "\n", ")", "->", "Distribution", ":", "\n", "    ", "\"\"\"\n    Return an instance of Distribution for the correct type of action space\n\n    :param action_space: the input action space\n    :param use_sde: Force the use of StateDependentNoiseDistribution\n        instead of DiagGaussianDistribution\n    :param dist_kwargs: Keyword arguments to pass to the probability distribution\n    :return: the appropriate Distribution object\n    \"\"\"", "\n", "if", "dist_kwargs", "is", "None", ":", "\n", "        ", "dist_kwargs", "=", "{", "}", "\n", "\n", "", "if", "isinstance", "(", "action_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "assert", "len", "(", "action_space", ".", "shape", ")", "==", "1", ",", "\"Error: the action space must be a vector\"", "\n", "cls", "=", "StateDependentNoiseDistribution", "if", "use_sde", "else", "DiagGaussianDistribution", "\n", "return", "cls", "(", "get_action_dim", "(", "action_space", ")", ",", "**", "dist_kwargs", ")", "\n", "", "elif", "isinstance", "(", "action_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "        ", "return", "CategoricalDistribution", "(", "action_space", ".", "n", ",", "**", "dist_kwargs", ")", "\n", "", "elif", "isinstance", "(", "action_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "        ", "return", "MultiCategoricalDistribution", "(", "action_space", ".", "nvec", ",", "**", "dist_kwargs", ")", "\n", "", "elif", "isinstance", "(", "action_space", ",", "spaces", ".", "MultiBinary", ")", ":", "\n", "        ", "return", "BernoulliDistribution", "(", "action_space", ".", "n", ",", "**", "dist_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Error: probability distribution, not implemented for action space\"", "\n", "f\"of type {type(action_space)}.\"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.kl_divergence": [[677, 700], ["isinstance", "torch.stack().sum", "torch.distributions.kl_divergence", "torch.stack", "torch.distributions.kl_divergence", "zip"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.kl_divergence", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.kl_divergence"], ["", "", "def", "kl_divergence", "(", "dist_true", ":", "Distribution", ",", "dist_pred", ":", "Distribution", ")", "->", "th", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Wrapper for the PyTorch implementation of the full form KL Divergence\n\n    :param dist_true: the p distribution\n    :param dist_pred: the q distribution\n    :return: KL(dist_true||dist_pred)\n    \"\"\"", "\n", "# KL Divergence for different distribution types is out of scope", "\n", "assert", "dist_true", ".", "__class__", "==", "dist_pred", ".", "__class__", ",", "\"Error: input distributions should be the same type\"", "\n", "\n", "# MultiCategoricalDistribution is not a PyTorch Distribution subclass", "\n", "# so we need to implement it ourselves!", "\n", "if", "isinstance", "(", "dist_pred", ",", "MultiCategoricalDistribution", ")", ":", "\n", "        ", "assert", "dist_pred", ".", "action_dims", "==", "dist_true", ".", "action_dims", ",", "\"Error: distributions must have the same input space\"", "\n", "return", "th", ".", "stack", "(", "\n", "[", "th", ".", "distributions", ".", "kl_divergence", "(", "p", ",", "q", ")", "for", "p", ",", "q", "in", "zip", "(", "dist_true", ".", "distribution", ",", "dist_pred", ".", "distribution", ")", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# Use the PyTorch kl_divergence implementation", "\n", "", "else", ":", "\n", "        ", "return", "th", ".", "distributions", ".", "kl_divergence", "(", "dist_true", ".", "distribution", ",", "dist_pred", ".", "distribution", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.NoopResetEnv.__init__": [[24, 30], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "env", ":", "gym", ".", "Env", ",", "noop_max", ":", "int", "=", "30", ")", ":", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "self", ".", "noop_action", "=", "0", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "\"NOOP\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.NoopResetEnv.reset": [[31, 44], ["atari_wrappers.NoopResetEnv.env.reset", "numpy.zeros", "range", "atari_wrappers.NoopResetEnv.unwrapped.np_random.randint", "atari_wrappers.NoopResetEnv.env.step", "atari_wrappers.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "np", ".", "zeros", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "self", ".", "noop_action", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.FireResetEnv.__init__": [[53, 57], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "env", ":", "gym", ".", "Env", ")", ":", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "\"FIRE\"", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.FireResetEnv.reset": [[58, 67], ["atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.EpisodicLifeEnv.__init__": [[77, 81], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "env", ":", "gym", ".", "Env", ")", ":", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.EpisodicLifeEnv.step": [[82, 95], ["atari_wrappers.EpisodicLifeEnv.env.step", "atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step"], ["", "def", "step", "(", "self", ",", "action", ":", "int", ")", "->", "GymStepReturn", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "0", "<", "lives", "<", "self", ".", "lives", ":", "\n", "# for Qbert sometimes we stay in lives == 0 condtion for a few frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.EpisodicLifeEnv.reset": [[96, 112], ["atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "atari_wrappers.EpisodicLifeEnv.env.reset", "atari_wrappers.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Calls the Gym environment reset, only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n\n        :param kwargs: Extra keywords passed to env.reset() call\n        :return: the first observation of the environment\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.MaxAndSkipEnv.__init__": [[122, 127], ["gym.Wrapper.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "env", ":", "gym", ".", "Env", ",", "skip", ":", "int", "=", "4", ")", ":", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "env", ".", "observation_space", ".", "dtype", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.MaxAndSkipEnv.step": [[128, 152], ["range", "atari_wrappers.MaxAndSkipEnv._obs_buffer.max", "atari_wrappers.MaxAndSkipEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step"], ["", "def", "step", "(", "self", ",", "action", ":", "int", ")", "->", "GymStepReturn", ":", "\n", "        ", "\"\"\"\n        Step the environment with the given action\n        Repeat action, sum reward, and max over last observations.\n\n        :param action: the action\n        :return: observation, reward, done, information\n        \"\"\"", "\n", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "i", "==", "self", ".", "_skip", "-", "2", ":", "\n", "                ", "self", ".", "_obs_buffer", "[", "0", "]", "=", "obs", "\n", "", "if", "i", "==", "self", ".", "_skip", "-", "1", ":", "\n", "                ", "self", ".", "_obs_buffer", "[", "1", "]", "=", "obs", "\n", "", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "# Note that the observation on the done=True frame", "\n", "# doesn't matter", "\n", "", "", "max_frame", "=", "self", ".", "_obs_buffer", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.MaxAndSkipEnv.reset": [[153, 155], ["atari_wrappers.MaxAndSkipEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", "->", "GymObs", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.ClipRewardEnv.__init__": [[164, 166], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "env", ":", "gym", ".", "Env", ")", ":", "\n", "        ", "gym", ".", "RewardWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.ClipRewardEnv.reward": [[167, 175], ["numpy.sign"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Bin reward to {+1, 0, -1} by its sign.\n\n        :param reward:\n        :return:\n        \"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.WarpFrame.__init__": [[187, 193], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "env", ":", "gym", ".", "Env", ",", "width", ":", "int", "=", "84", ",", "height", ":", "int", "=", "84", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ",", "1", ")", ",", "dtype", "=", "env", ".", "observation_space", ".", "dtype", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.WarpFrame.observation": [[195, 205], ["cv2.cvtColor", "cv2.resize"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "frame", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        returns the current observation from a frame\n\n        :param frame: environment frame\n        :return: the observation\n        \"\"\"", "\n", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "return", "frame", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.atari_wrappers.AtariWrapper.__init__": [[229, 249], ["atari_wrappers.NoopResetEnv", "atari_wrappers.MaxAndSkipEnv", "atari_wrappers.WarpFrame", "gym.Wrapper.__init__", "atari_wrappers.EpisodicLifeEnv", "ClipRewardEnv.unwrapped.get_action_meanings", "atari_wrappers.FireResetEnv", "atari_wrappers.ClipRewardEnv"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env", ":", "gym", ".", "Env", ",", "\n", "noop_max", ":", "int", "=", "30", ",", "\n", "frame_skip", ":", "int", "=", "4", ",", "\n", "screen_size", ":", "int", "=", "84", ",", "\n", "terminal_on_life_loss", ":", "bool", "=", "True", ",", "\n", "clip_reward", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "noop_max", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "frame_skip", ")", "\n", "if", "terminal_on_life_loss", ":", "\n", "            ", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "", "if", "\"FIRE\"", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "            ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", "=", "WarpFrame", "(", "env", ",", "width", "=", "screen_size", ",", "height", "=", "screen_size", ")", "\n", "if", "clip_reward", ":", "\n", "            ", "env", "=", "ClipRewardEnv", "(", "env", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.__init__": [[88, 192], ["isinstance", "stable_baselines3.common.utils.get_device", "stable_baselines3.common.vec_env.unwrap_vec_normalize", "base_class.BaseAlgorithm._get_policy_from_name", "print", "isinstance", "base_class.maybe_make_env", "base_class.BaseAlgorithm._wrap_env", "isinstance", "isinstance", "ValueError", "isinstance", "ValueError", "ValueError", "numpy.all", "base_class.maybe_make_env", "isinstance", "numpy.isfinite", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_normalize", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._get_policy_from_name", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.maybe_make_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._wrap_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.maybe_make_env"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ":", "Type", "[", "BasePolicy", "]", ",", "\n", "env", ":", "Union", "[", "GymEnv", ",", "str", ",", "None", "]", ",", "\n", "learning_rate", ":", "Union", "[", "float", ",", "Schedule", "]", ",", "\n", "policy_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "support_multi_env", ":", "bool", "=", "False", ",", "\n", "create_eval_env", ":", "bool", "=", "False", ",", "\n", "monitor_wrapper", ":", "bool", "=", "True", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "use_sde", ":", "bool", "=", "False", ",", "\n", "sde_sample_freq", ":", "int", "=", "-", "1", ",", "\n", "supported_action_spaces", ":", "Optional", "[", "Tuple", "[", "gym", ".", "spaces", ".", "Space", ",", "...", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "isinstance", "(", "policy", ",", "str", ")", ":", "\n", "            ", "self", ".", "policy_class", "=", "self", ".", "_get_policy_from_name", "(", "policy", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "policy_class", "=", "policy", "\n", "\n", "", "self", ".", "device", "=", "get_device", "(", "device", ")", "\n", "if", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "f\"Using {self.device} device\"", ")", "\n", "\n", "", "self", ".", "env", "=", "None", "# type: Optional[GymEnv]", "\n", "# get VecNormalize object if needed", "\n", "self", ".", "_vec_normalize_env", "=", "unwrap_vec_normalize", "(", "env", ")", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "policy_kwargs", "=", "{", "}", "if", "policy_kwargs", "is", "None", "else", "policy_kwargs", "\n", "self", ".", "observation_space", "=", "None", "# type: Optional[gym.spaces.Space]", "\n", "self", ".", "action_space", "=", "None", "# type: Optional[gym.spaces.Space]", "\n", "self", ".", "n_envs", "=", "None", "\n", "self", ".", "num_timesteps", "=", "0", "\n", "# Used for updating schedules", "\n", "self", ".", "_total_timesteps", "=", "0", "\n", "# Used for computing fps, it is updated at each call of learn()", "\n", "self", ".", "_num_timesteps_at_start", "=", "0", "\n", "self", ".", "eval_env", "=", "None", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "action_noise", "=", "None", "# type: Optional[ActionNoise]", "\n", "self", ".", "start_time", "=", "None", "\n", "self", ".", "policy", "=", "None", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "tensorboard_log", "=", "tensorboard_log", "\n", "self", ".", "lr_schedule", "=", "None", "# type: Optional[Schedule]", "\n", "self", ".", "_last_obs", "=", "None", "# type: Optional[Union[np.ndarray, Dict[str, np.ndarray]]]", "\n", "self", ".", "_last_episode_starts", "=", "None", "# type: Optional[np.ndarray]", "\n", "# When using VecNormalize:", "\n", "self", ".", "_last_original_obs", "=", "None", "# type: Optional[Union[np.ndarray, Dict[str, np.ndarray]]]", "\n", "self", ".", "_episode_num", "=", "0", "\n", "# Used for gSDE only", "\n", "self", ".", "use_sde", "=", "use_sde", "\n", "self", ".", "sde_sample_freq", "=", "sde_sample_freq", "\n", "# Track the training progress remaining (from 1 to 0)", "\n", "# this is used to update the learning rate", "\n", "self", ".", "_current_progress_remaining", "=", "1", "\n", "# Buffers for logging", "\n", "self", ".", "ep_info_buffer", "=", "None", "# type: Optional[deque]", "\n", "self", ".", "ep_success_buffer", "=", "None", "# type: Optional[deque]", "\n", "# For logging (and TD3 delayed updates)", "\n", "self", ".", "_n_updates", "=", "0", "# type: int", "\n", "# The logger object", "\n", "self", ".", "_logger", "=", "None", "# type: Logger", "\n", "# Whether the user passed a custom logger or not", "\n", "self", ".", "_custom_logger", "=", "False", "\n", "\n", "# Create and wrap the env if needed", "\n", "if", "env", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "env", ",", "str", ")", ":", "\n", "                ", "if", "create_eval_env", ":", "\n", "                    ", "self", ".", "eval_env", "=", "maybe_make_env", "(", "env", ",", "self", ".", "verbose", ")", "\n", "\n", "", "", "env", "=", "maybe_make_env", "(", "env", ",", "self", ".", "verbose", ")", "\n", "env", "=", "self", ".", "_wrap_env", "(", "env", ",", "self", ".", "verbose", ",", "monitor_wrapper", ")", "\n", "\n", "self", ".", "observation_space", "=", "env", ".", "observation_space", "\n", "self", ".", "action_space", "=", "env", ".", "action_space", "\n", "self", ".", "n_envs", "=", "env", ".", "num_envs", "\n", "self", ".", "env", "=", "env", "\n", "\n", "if", "supported_action_spaces", "is", "not", "None", ":", "\n", "                ", "assert", "isinstance", "(", "self", ".", "action_space", ",", "supported_action_spaces", ")", ",", "(", "\n", "f\"The algorithm only supports {supported_action_spaces} as action spaces \"", "\n", "f\"but {self.action_space} was provided\"", "\n", ")", "\n", "\n", "", "if", "not", "support_multi_env", "and", "self", ".", "n_envs", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Error: the model does not support multiple envs; it requires \"", "\"a single vectorized environment.\"", "\n", ")", "\n", "\n", "# Catch common mistake: using MlpPolicy/CnnPolicy instead of MultiInputPolicy", "\n", "", "if", "policy", "in", "[", "\"MlpPolicy\"", ",", "\"CnnPolicy\"", "]", "and", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f\"You must use `MultiInputPolicy` when working with dict observation space, not {policy}\"", ")", "\n", "\n", "", "if", "self", ".", "use_sde", "and", "not", "isinstance", "(", "self", ".", "action_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"generalized State-Dependent Exploration (gSDE) can only be used with continuous actions.\"", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "action_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "                ", "assert", "np", ".", "all", "(", "\n", "np", ".", "isfinite", "(", "np", ".", "array", "(", "[", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", "]", ")", ")", "\n", ")", ",", "\"Continuous action space must have a finite lower and upper bound\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._wrap_env": [[193, 238], ["stable_baselines3.common.preprocessing.check_for_nested_spaces", "isinstance", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.is_vecenv_wrapped", "isinstance", "stable_baselines3.common.monitor.Monitor", "print", "stable_baselines3.common.vec_env.VecTransposeImage.observation_space.spaces.values", "stable_baselines3.common.vec_env.VecTransposeImage", "stable_baselines3.common.env_util.is_wrapped", "print", "stable_baselines3.common.preprocessing.is_image_space", "print", "stable_baselines3.common.preprocessing.is_image_space_channels_first", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space_channels_first"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.check_for_nested_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.is_vecenv_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first"], ["", "", "", "@", "staticmethod", "\n", "def", "_wrap_env", "(", "env", ":", "GymEnv", ",", "verbose", ":", "int", "=", "0", ",", "monitor_wrapper", ":", "bool", "=", "True", ")", "->", "VecEnv", ":", "\n", "        ", "\"\"\" \"\n        Wrap environment with the appropriate wrappers if needed.\n        For instance, to have a vectorized environment\n        or to re-order the image channels.\n\n        :param env:\n        :param verbose:\n        :param monitor_wrapper: Whether to wrap the env in a ``Monitor`` when possible.\n        :return: The wrapped environment.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "env", ",", "VecEnv", ")", ":", "\n", "            ", "if", "not", "is_wrapped", "(", "env", ",", "Monitor", ")", "and", "monitor_wrapper", ":", "\n", "                ", "if", "verbose", ">=", "1", ":", "\n", "                    ", "print", "(", "\"Wrapping the env with a `Monitor` wrapper\"", ")", "\n", "", "env", "=", "Monitor", "(", "env", ")", "\n", "", "if", "verbose", ">=", "1", ":", "\n", "                ", "print", "(", "\"Wrapping the env in a DummyVecEnv.\"", ")", "\n", "", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "\n", "# Make sure that dict-spaces are not nested (not supported)", "\n", "", "check_for_nested_spaces", "(", "env", ".", "observation_space", ")", "\n", "\n", "if", "not", "is_vecenv_wrapped", "(", "env", ",", "VecTransposeImage", ")", ":", "\n", "            ", "wrap_with_vectranspose", "=", "False", "\n", "if", "isinstance", "(", "env", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "# If even one of the keys is a image-space in need of transpose, apply transpose", "\n", "# If the image spaces are not consistent (for instance one is channel first,", "\n", "# the other channel last), VecTransposeImage will throw an error", "\n", "                ", "for", "space", "in", "env", ".", "observation_space", ".", "spaces", ".", "values", "(", ")", ":", "\n", "                    ", "wrap_with_vectranspose", "=", "wrap_with_vectranspose", "or", "(", "\n", "is_image_space", "(", "space", ")", "and", "not", "is_image_space_channels_first", "(", "space", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "                ", "wrap_with_vectranspose", "=", "is_image_space", "(", "env", ".", "observation_space", ")", "and", "not", "is_image_space_channels_first", "(", "\n", "env", ".", "observation_space", "\n", ")", "\n", "\n", "", "if", "wrap_with_vectranspose", ":", "\n", "                ", "if", "verbose", ">=", "1", ":", "\n", "                    ", "print", "(", "\"Wrapping the env in a VecTransposeImage.\"", ")", "\n", "", "env", "=", "VecTransposeImage", "(", "env", ")", "\n", "\n", "", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model": [[239, 242], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_setup_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Create networks, buffer and optimizers.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_logger": [[243, 256], ["None"], "methods", ["None"], ["", "def", "set_logger", "(", "self", ",", "logger", ":", "Logger", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Setter for for logger object.\n\n        .. warning::\n\n          When passing a custom logger object,\n          this will overwrite ``tensorboard_log`` and ``verbose`` settings\n          passed to the constructor.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logger", "\n", "# User defined logger", "\n", "self", ".", "_custom_logger", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.logger": [[257, 261], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "logger", "(", "self", ")", "->", "Logger", ":", "\n", "        ", "\"\"\"Getter for the logger object.\"\"\"", "\n", "return", "self", ".", "_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._get_eval_env": [[262, 276], ["base_class.BaseAlgorithm._wrap_env"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._wrap_env"], ["", "def", "_get_eval_env", "(", "self", ",", "eval_env", ":", "Optional", "[", "GymEnv", "]", ")", "->", "Optional", "[", "GymEnv", "]", ":", "\n", "        ", "\"\"\"\n        Return the environment that will be used for evaluation.\n\n        :param eval_env:)\n        :return:\n        \"\"\"", "\n", "if", "eval_env", "is", "None", ":", "\n", "            ", "eval_env", "=", "self", ".", "eval_env", "\n", "\n", "", "if", "eval_env", "is", "not", "None", ":", "\n", "            ", "eval_env", "=", "self", ".", "_wrap_env", "(", "eval_env", ",", "self", ".", "verbose", ")", "\n", "assert", "eval_env", ".", "num_envs", "==", "1", "\n", "", "return", "eval_env", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_lr_schedule": [[277, 280], ["stable_baselines3.common.utils.get_schedule_fn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_schedule_fn"], ["", "def", "_setup_lr_schedule", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Transform to callable if needed.\"\"\"", "\n", "self", ".", "lr_schedule", "=", "get_schedule_fn", "(", "self", ".", "learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_current_progress_remaining": [[281, 289], ["float", "float"], "methods", ["None"], ["", "def", "_update_current_progress_remaining", "(", "self", ",", "num_timesteps", ":", "int", ",", "total_timesteps", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Compute current progress remaining (starts from 1 and ends to 0)\n\n        :param num_timesteps: current number of timesteps\n        :param total_timesteps:\n        \"\"\"", "\n", "self", ".", "_current_progress_remaining", "=", "1.0", "-", "float", "(", "num_timesteps", ")", "/", "float", "(", "total_timesteps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_learning_rate": [[290, 305], ["base_class.BaseAlgorithm.logger.record", "base_class.BaseAlgorithm.lr_schedule", "isinstance", "stable_baselines3.common.utils.update_learning_rate", "base_class.BaseAlgorithm.lr_schedule"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.update_learning_rate"], ["", "def", "_update_learning_rate", "(", "self", ",", "optimizers", ":", "Union", "[", "List", "[", "th", ".", "optim", ".", "Optimizer", "]", ",", "th", ".", "optim", ".", "Optimizer", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the optimizers learning rate using the current learning rate schedule\n        and the current progress remaining (from 1 to 0).\n\n        :param optimizers:\n            An optimizer or a list of optimizers.\n        \"\"\"", "\n", "# Log the current learning rate", "\n", "self", ".", "logger", ".", "record", "(", "\"train/learning_rate\"", ",", "self", ".", "lr_schedule", "(", "self", ".", "_current_progress_remaining", ")", ")", "\n", "\n", "if", "not", "isinstance", "(", "optimizers", ",", "list", ")", ":", "\n", "            ", "optimizers", "=", "[", "optimizers", "]", "\n", "", "for", "optimizer", "in", "optimizers", ":", "\n", "            ", "update_learning_rate", "(", "optimizer", ",", "self", ".", "lr_schedule", "(", "self", ".", "_current_progress_remaining", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._excluded_save_params": [[306, 326], ["None"], "methods", ["None"], ["", "", "def", "_excluded_save_params", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Returns the names of the parameters that should be excluded from being\n        saved by pickling. E.g. replay buffers are skipped by default\n        as they take up a lot of space. PyTorch variables should be excluded\n        with this so they can be stored with ``th.save``.\n\n        :return: List of parameters that should be excluded from being saved with pickle.\n        \"\"\"", "\n", "return", "[", "\n", "\"policy\"", ",", "\n", "\"device\"", ",", "\n", "\"env\"", ",", "\n", "\"eval_env\"", ",", "\n", "\"replay_buffer\"", ",", "\n", "\"rollout_buffer\"", ",", "\n", "\"_vec_normalize_env\"", ",", "\n", "\"_episode_storage\"", ",", "\n", "\"_logger\"", ",", "\n", "\"_custom_logger\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._get_policy_from_name": [[328, 344], ["ValueError"], "methods", ["None"], ["", "def", "_get_policy_from_name", "(", "self", ",", "policy_name", ":", "str", ")", "->", "Type", "[", "BasePolicy", "]", ":", "\n", "        ", "\"\"\"\n        Get a policy class from its name representation.\n\n        The goal here is to standardize policy naming, e.g.\n        all algorithms can call upon \"MlpPolicy\" or \"CnnPolicy\",\n        and they receive respective policies that work for them.\n\n        :param policy_name: Alias of the policy\n        :return: A policy class (type)\n        \"\"\"", "\n", "\n", "if", "policy_name", "in", "self", ".", "policy_aliases", ":", "\n", "            ", "return", "self", ".", "policy_aliases", "[", "policy_name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Policy {policy_name} unknown\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._get_torch_save_params": [[345, 362], ["None"], "methods", ["None"], ["", "", "def", "_get_torch_save_params", "(", "self", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Get the name of the torch variables that will be saved with\n        PyTorch ``th.save``, ``th.load`` and ``state_dicts`` instead of the default\n        pickling strategy. This is to handle device placement correctly.\n\n        Names can point to specific variables under classes, e.g.\n        \"policy.optimizer\" would point to ``optimizer`` object of ``self.policy``\n        if this object.\n\n        :return:\n            List of Torch variables whose state dicts to save (e.g. th.nn.Modules),\n            and list of other Torch variables to store with ``th.save``.\n        \"\"\"", "\n", "state_dicts", "=", "[", "\"policy\"", "]", "\n", "\n", "return", "state_dicts", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._init_callback": [[363, 400], ["isinstance", "stable_baselines3.common.callbacks.CallbackList.init_callback", "stable_baselines3.common.callbacks.CallbackList", "isinstance", "stable_baselines3.common.callbacks.ConvertCallback", "stable_baselines3.common.callbacks.EvalCallback", "stable_baselines3.common.callbacks.CallbackList"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback.init_callback"], ["", "def", "_init_callback", "(", "\n", "self", ",", "\n", "callback", ":", "MaybeCallback", ",", "\n", "eval_env", ":", "Optional", "[", "VecEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "10000", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "BaseCallback", ":", "\n", "        ", "\"\"\"\n        :param callback: Callback(s) called at every step with state of the algorithm.\n        :param eval_freq: How many steps between evaluations; if None, do not evaluate.\n        :param n_eval_episodes: How many episodes to play per evaluation\n        :param n_eval_episodes: Number of episodes to rollout during evaluation.\n        :param log_path: Path to a folder where the evaluations will be saved\n        :return: A hybrid callback calling `callback` and performing evaluation.\n        \"\"\"", "\n", "# Convert a list of callbacks into a callback", "\n", "if", "isinstance", "(", "callback", ",", "list", ")", ":", "\n", "            ", "callback", "=", "CallbackList", "(", "callback", ")", "\n", "\n", "# Convert functional callback to object", "\n", "", "if", "not", "isinstance", "(", "callback", ",", "BaseCallback", ")", ":", "\n", "            ", "callback", "=", "ConvertCallback", "(", "callback", ")", "\n", "\n", "# Create eval callback in charge of the evaluation", "\n", "", "if", "eval_env", "is", "not", "None", ":", "\n", "            ", "eval_callback", "=", "EvalCallback", "(", "\n", "eval_env", ",", "\n", "best_model_save_path", "=", "log_path", ",", "\n", "log_path", "=", "log_path", ",", "\n", "eval_freq", "=", "eval_freq", ",", "\n", "n_eval_episodes", "=", "n_eval_episodes", ",", "\n", ")", "\n", "callback", "=", "CallbackList", "(", "[", "callback", ",", "eval_callback", "]", ")", "\n", "\n", "", "callback", ".", "init_callback", "(", "self", ")", "\n", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_learn": [[401, 465], ["time.time", "base_class.BaseAlgorithm._get_eval_env", "base_class.BaseAlgorithm._init_callback", "collections.deque", "collections.deque", "base_class.BaseAlgorithm.action_noise.reset", "base_class.BaseAlgorithm.env.reset", "numpy.ones", "base_class.BaseAlgorithm.seed", "stable_baselines3.common.utils.configure_logger", "base_class.BaseAlgorithm._vec_normalize_env.get_original_obs"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._get_eval_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnMaxEpisodes._init_callback", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.configure_logger", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs"], ["", "def", "_setup_learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "10000", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", "tb_log_name", ":", "str", "=", "\"run\"", ",", "\n", ")", "->", "Tuple", "[", "int", ",", "BaseCallback", "]", ":", "\n", "        ", "\"\"\"\n        Initialize different variables needed for training.\n\n        :param total_timesteps: The total number of samples (env steps) to train on\n        :param eval_env: Environment to use for evaluation.\n        :param callback: Callback(s) called at every step with state of the algorithm.\n        :param eval_freq: How many steps between evaluations\n        :param n_eval_episodes: How many episodes to play per evaluation\n        :param log_path: Path to a folder where the evaluations will be saved\n        :param reset_num_timesteps: Whether to reset or not the ``num_timesteps`` attribute\n        :param tb_log_name: the name of the run for tensorboard log\n        :return:\n        \"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "ep_info_buffer", "is", "None", "or", "reset_num_timesteps", ":", "\n", "# Initialize buffers if they don't exist, or reinitialize if resetting counters", "\n", "            ", "self", ".", "ep_info_buffer", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "self", ".", "ep_success_buffer", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "\n", "", "if", "self", ".", "action_noise", "is", "not", "None", ":", "\n", "            ", "self", ".", "action_noise", ".", "reset", "(", ")", "\n", "\n", "", "if", "reset_num_timesteps", ":", "\n", "            ", "self", ".", "num_timesteps", "=", "0", "\n", "self", ".", "_episode_num", "=", "0", "\n", "", "else", ":", "\n", "# Make sure training timesteps are ahead of the internal counter", "\n", "            ", "total_timesteps", "+=", "self", ".", "num_timesteps", "\n", "", "self", ".", "_total_timesteps", "=", "total_timesteps", "\n", "self", ".", "_num_timesteps_at_start", "=", "self", ".", "num_timesteps", "\n", "\n", "# Avoid resetting the environment when calling ``.learn()`` consecutive times", "\n", "if", "reset_num_timesteps", "or", "self", ".", "_last_obs", "is", "None", ":", "\n", "            ", "self", ".", "_last_obs", "=", "self", ".", "env", ".", "reset", "(", ")", "# pytype: disable=annotation-type-mismatch", "\n", "self", ".", "_last_episode_starts", "=", "np", ".", "ones", "(", "(", "self", ".", "env", ".", "num_envs", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "# Retrieve unnormalized observation for saving into the buffer", "\n", "if", "self", ".", "_vec_normalize_env", "is", "not", "None", ":", "\n", "                ", "self", ".", "_last_original_obs", "=", "self", ".", "_vec_normalize_env", ".", "get_original_obs", "(", ")", "\n", "\n", "", "", "if", "eval_env", "is", "not", "None", "and", "self", ".", "seed", "is", "not", "None", ":", "\n", "            ", "eval_env", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "", "eval_env", "=", "self", ".", "_get_eval_env", "(", "eval_env", ")", "\n", "\n", "# Configure logger's outputs if no logger was passed", "\n", "if", "not", "self", ".", "_custom_logger", ":", "\n", "            ", "self", ".", "_logger", "=", "utils", ".", "configure_logger", "(", "self", ".", "verbose", ",", "self", ".", "tensorboard_log", ",", "tb_log_name", ",", "reset_num_timesteps", ")", "\n", "\n", "# Create eval callback if needed", "\n", "", "callback", "=", "self", ".", "_init_callback", "(", "callback", ",", "eval_env", ",", "eval_freq", ",", "n_eval_episodes", ",", "log_path", ")", "\n", "\n", "return", "total_timesteps", ",", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._update_info_buffer": [[466, 483], ["enumerate", "numpy.array", "info.get", "info.get", "base_class.BaseAlgorithm.ep_info_buffer.extend", "base_class.BaseAlgorithm.ep_success_buffer.append", "len"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.extend"], ["", "def", "_update_info_buffer", "(", "self", ",", "infos", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "dones", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Retrieve reward, episode length, episode success and update the buffer\n        if using Monitor wrapper or a GoalEnv.\n\n        :param infos: List of additional information about the transition.\n        :param dones: Termination signals\n        \"\"\"", "\n", "if", "dones", "is", "None", ":", "\n", "            ", "dones", "=", "np", ".", "array", "(", "[", "False", "]", "*", "len", "(", "infos", ")", ")", "\n", "", "for", "idx", ",", "info", "in", "enumerate", "(", "infos", ")", ":", "\n", "            ", "maybe_ep_info", "=", "info", ".", "get", "(", "\"episode\"", ")", "\n", "maybe_is_success", "=", "info", ".", "get", "(", "\"is_success\"", ")", "\n", "if", "maybe_ep_info", "is", "not", "None", ":", "\n", "                ", "self", ".", "ep_info_buffer", ".", "extend", "(", "[", "maybe_ep_info", "]", ")", "\n", "", "if", "maybe_is_success", "is", "not", "None", "and", "dones", "[", "idx", "]", ":", "\n", "                ", "self", ".", "ep_success_buffer", ".", "append", "(", "maybe_is_success", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env": [[484, 491], ["None"], "methods", ["None"], ["", "", "", "def", "get_env", "(", "self", ")", "->", "Optional", "[", "VecEnv", "]", ":", "\n", "        ", "\"\"\"\n        Returns the current environment (can be None if not defined).\n\n        :return: The current environment\n        \"\"\"", "\n", "return", "self", ".", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_vec_normalize_env": [[492, 500], ["None"], "methods", ["None"], ["", "def", "get_vec_normalize_env", "(", "self", ")", "->", "Optional", "[", "VecNormalize", "]", ":", "\n", "        ", "\"\"\"\n        Return the ``VecNormalize`` wrapper of the training env\n        if it exists.\n\n        :return: The ``VecNormalize`` env.\n        \"\"\"", "\n", "return", "self", ".", "_vec_normalize_env", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_env": [[501, 530], ["base_class.BaseAlgorithm._wrap_env", "stable_baselines3.common.utils.check_for_correct_spaces", "stable_baselines3.common.vec_env.unwrap_vec_normalize"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._wrap_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.check_for_correct_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_normalize"], ["", "def", "set_env", "(", "self", ",", "env", ":", "GymEnv", ",", "force_reset", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Checks the validity of the environment, and if it is coherent, set it as the current environment.\n        Furthermore wrap any non vectorized env into a vectorized\n        checked parameters:\n        - observation_space\n        - action_space\n\n        :param env: The environment for learning a policy\n        :param force_reset: Force call to ``reset()`` before training\n            to avoid unexpected behavior.\n            See issue https://github.com/DLR-RM/stable-baselines3/issues/597\n        \"\"\"", "\n", "# if it is not a VecEnv, make it a VecEnv", "\n", "# and do other transformations (dict obs, image transpose) if needed", "\n", "env", "=", "self", ".", "_wrap_env", "(", "env", ",", "self", ".", "verbose", ")", "\n", "# Check that the observation spaces match", "\n", "check_for_correct_spaces", "(", "env", ",", "self", ".", "observation_space", ",", "self", ".", "action_space", ")", "\n", "# Update VecNormalize object", "\n", "# otherwise the wrong env may be used, see https://github.com/DLR-RM/stable-baselines3/issues/637", "\n", "self", ".", "_vec_normalize_env", "=", "unwrap_vec_normalize", "(", "env", ")", "\n", "\n", "# Discard `_last_obs`, this will force the env to reset before training", "\n", "# See issue https://github.com/DLR-RM/stable-baselines3/issues/597", "\n", "if", "force_reset", ":", "\n", "            ", "self", ".", "_last_obs", "=", "None", "\n", "\n", "", "self", ".", "n_envs", "=", "env", ".", "num_envs", "\n", "self", ".", "env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn": [[531, 558], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "learn", "(", "\n", "self", ",", "\n", "total_timesteps", ":", "int", ",", "\n", "callback", ":", "MaybeCallback", "=", "None", ",", "\n", "log_interval", ":", "int", "=", "100", ",", "\n", "tb_log_name", ":", "str", "=", "\"run\"", ",", "\n", "eval_env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "eval_freq", ":", "int", "=", "-", "1", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "eval_log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "\"BaseAlgorithm\"", ":", "\n", "        ", "\"\"\"\n        Return a trained model.\n\n        :param total_timesteps: The total number of samples (env steps) to train on\n        :param callback: callback(s) called at every step with state of the algorithm.\n        :param log_interval: The number of timesteps before logging.\n        :param tb_log_name: the name of the run for TensorBoard logging\n        :param eval_env: Environment that will be used to evaluate the agent\n        :param eval_freq: Evaluate the agent every ``eval_freq`` timesteps (this may vary a little)\n        :param n_eval_episodes: Number of episode to evaluate the agent\n        :param eval_log_path: Path to a folder where the evaluations will be saved\n        :param reset_num_timesteps: whether or not to reset the current timestep number (used in logging)\n        :return: the trained model\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict": [[559, 580], ["base_class.BaseAlgorithm.policy.predict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict"], ["", "def", "predict", "(", "\n", "self", ",", "\n", "observation", ":", "np", ".", "ndarray", ",", "\n", "state", ":", "Optional", "[", "Tuple", "[", "np", ".", "ndarray", ",", "...", "]", "]", "=", "None", ",", "\n", "episode_start", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "deterministic", ":", "bool", "=", "False", ",", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "Optional", "[", "Tuple", "[", "np", ".", "ndarray", ",", "...", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        Get the policy action from an observation (and optional hidden state).\n        Includes sugar-coating to handle different observations (e.g. normalizing images).\n\n        :param observation: the input observation\n        :param state: The last hidden states (can be None, used in recurrent policies)\n        :param episode_start: The last masks (can be None, used in recurrent policies)\n            this correspond to beginning of episodes,\n            where the hidden states of the RNN must be reset.\n        :param deterministic: Whether or not to return deterministic actions.\n        :return: the model's action and the next hidden state\n            (used in recurrent policies)\n        \"\"\"", "\n", "return", "self", ".", "policy", ".", "predict", "(", "observation", ",", "state", ",", "episode_start", ",", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_random_seed": [[581, 596], ["stable_baselines3.common.utils.set_random_seed", "base_class.BaseAlgorithm.action_space.seed", "base_class.BaseAlgorithm.env.seed", "base_class.BaseAlgorithm.eval_env.seed", "torch.device"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.set_random_seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.device"], ["", "def", "set_random_seed", "(", "self", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set the seed of the pseudo-random generators\n        (python, numpy, pytorch, gym, action_space)\n\n        :param seed:\n        \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "            ", "return", "\n", "", "set_random_seed", "(", "seed", ",", "using_cuda", "=", "self", ".", "device", ".", "type", "==", "th", ".", "device", "(", "\"cuda\"", ")", ".", "type", ")", "\n", "self", ".", "action_space", ".", "seed", "(", "seed", ")", "\n", "if", "self", ".", "env", "is", "not", "None", ":", "\n", "            ", "self", ".", "env", ".", "seed", "(", "seed", ")", "\n", "", "if", "self", ".", "eval_env", "is", "not", "None", ":", "\n", "            ", "self", ".", "eval_env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_parameters": [[597, 662], ["isinstance", "set", "set", "stable_baselines3.common.save_util.load_from_zip_file", "isinstance", "set.add", "ValueError", "base_class.BaseAlgorithm._get_torch_save_params", "stable_baselines3.common.save_util.recursive_getattr", "stable_baselines3.common.save_util.recursive_getattr.load_state_dict", "stable_baselines3.common.save_util.recursive_getattr.load_state_dict", "ValueError"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_zip_file", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._get_torch_save_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.recursive_getattr"], ["", "", "def", "set_parameters", "(", "\n", "self", ",", "\n", "load_path_or_dict", ":", "Union", "[", "str", ",", "Dict", "[", "str", ",", "Dict", "]", "]", ",", "\n", "exact_match", ":", "bool", "=", "True", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Load parameters from a given zip-file or a nested dictionary containing parameters for\n        different modules (see ``get_parameters``).\n\n        :param load_path_or_iter: Location of the saved data (path or file-like, see ``save``), or a nested\n            dictionary containing nn.Module parameters used by the policy. The dictionary maps\n            object names to a state-dictionary returned by ``torch.nn.Module.state_dict()``.\n        :param exact_match: If True, the given parameters should include parameters for each\n            module and each of their parameters, otherwise raises an Exception. If set to False, this\n            can be used to update only specific parameters.\n        :param device: Device on which the code should run.\n        \"\"\"", "\n", "params", "=", "None", "\n", "if", "isinstance", "(", "load_path_or_dict", ",", "dict", ")", ":", "\n", "            ", "params", "=", "load_path_or_dict", "\n", "", "else", ":", "\n", "            ", "_", ",", "params", ",", "_", "=", "load_from_zip_file", "(", "load_path_or_dict", ",", "device", "=", "device", ")", "\n", "\n", "# Keep track which objects were updated.", "\n", "# `_get_torch_save_params` returns [params, other_pytorch_variables].", "\n", "# We are only interested in former here.", "\n", "", "objects_needing_update", "=", "set", "(", "self", ".", "_get_torch_save_params", "(", ")", "[", "0", "]", ")", "\n", "updated_objects", "=", "set", "(", ")", "\n", "\n", "for", "name", "in", "params", ":", "\n", "            ", "attr", "=", "None", "\n", "try", ":", "\n", "                ", "attr", "=", "recursive_getattr", "(", "self", ",", "name", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# What errors recursive_getattr could throw? KeyError, but", "\n", "# possible something else too (e.g. if key is an int?).", "\n", "# Catch anything for now.", "\n", "                ", "raise", "ValueError", "(", "f\"Key {name} is an invalid object name.\"", ")", "from", "e", "\n", "\n", "", "if", "isinstance", "(", "attr", ",", "th", ".", "optim", ".", "Optimizer", ")", ":", "\n", "# Optimizers do not support \"strict\" keyword...", "\n", "# Seems like they will just replace the whole", "\n", "# optimizer state with the given one.", "\n", "# On top of this, optimizer state-dict", "\n", "# seems to change (e.g. first ``optim.step()``),", "\n", "# which makes comparing state dictionary keys", "\n", "# invalid (there is also a nesting of dictionaries", "\n", "# with lists with dictionaries with ...), adding to the", "\n", "# mess.", "\n", "#", "\n", "# TL;DR: We might not be able to reliably say", "\n", "# if given state-dict is missing keys.", "\n", "#", "\n", "# Solution: Just load the state-dict as is, and trust", "\n", "# the user has provided a sensible state dictionary.", "\n", "                ", "attr", ".", "load_state_dict", "(", "params", "[", "name", "]", ")", "\n", "", "else", ":", "\n", "# Assume attr is th.nn.Module", "\n", "                ", "attr", ".", "load_state_dict", "(", "params", "[", "name", "]", ",", "strict", "=", "exact_match", ")", "\n", "", "updated_objects", ".", "add", "(", "name", ")", "\n", "\n", "", "if", "exact_match", "and", "updated_objects", "!=", "objects_needing_update", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Names of parameters do not match agents' parameters: \"", "\n", "f\"expected {objects_needing_update}, got {updated_objects}\"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.load": [[665, 771], ["stable_baselines3.common.save_util.load_from_zip_file", "cls", "cls.__dict__.update", "cls.__dict__.update", "cls._setup_model", "cls.set_parameters", "print", "stable_baselines3.common.utils.get_system_info", "ValueError", "KeyError", "cls._wrap_env", "stable_baselines3.common.utils.check_for_correct_spaces", "cls.policy.reset_noise", "stable_baselines3.common.save_util.recursive_setattr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_zip_file", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_model", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_system_info", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._wrap_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.check_for_correct_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.recursive_setattr"], ["", "", "@", "classmethod", "\n", "def", "load", "(", "\n", "cls", ",", "\n", "path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ",", "\n", "env", ":", "Optional", "[", "GymEnv", "]", "=", "None", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ",", "\n", "custom_objects", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "print_system_info", ":", "bool", "=", "False", ",", "\n", "force_reset", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "\"BaseAlgorithm\"", ":", "\n", "        ", "\"\"\"\n        Load the model from a zip-file.\n        Warning: ``load`` re-creates the model from scratch, it does not update it in-place!\n        For an in-place load use ``set_parameters`` instead.\n\n        :param path: path to the file (or a file-like) where to\n            load the agent from\n        :param env: the new environment to run the loaded model on\n            (can be None if you only need prediction from a trained model) has priority over any saved environment\n        :param device: Device on which the code should run.\n        :param custom_objects: Dictionary of objects to replace\n            upon loading. If a variable is present in this dictionary as a\n            key, it will not be deserialized and the corresponding item\n            will be used instead. Similar to custom_objects in\n            ``keras.models.load_model``. Useful when you have an object in\n            file that can not be deserialized.\n        :param print_system_info: Whether to print system info from the saved model\n            and the current system info (useful to debug loading issues)\n        :param force_reset: Force call to ``reset()`` before training\n            to avoid unexpected behavior.\n            See https://github.com/DLR-RM/stable-baselines3/issues/597\n        :param kwargs: extra arguments to change the model when loading\n        :return: new model instance with loaded parameters\n        \"\"\"", "\n", "if", "print_system_info", ":", "\n", "            ", "print", "(", "\"== CURRENT SYSTEM INFO ==\"", ")", "\n", "get_system_info", "(", ")", "\n", "\n", "", "data", ",", "params", ",", "pytorch_variables", "=", "load_from_zip_file", "(", "\n", "path", ",", "device", "=", "device", ",", "custom_objects", "=", "custom_objects", ",", "print_system_info", "=", "print_system_info", "\n", ")", "\n", "\n", "# Remove stored device information and replace with ours", "\n", "if", "\"policy_kwargs\"", "in", "data", ":", "\n", "            ", "if", "\"device\"", "in", "data", "[", "\"policy_kwargs\"", "]", ":", "\n", "                ", "del", "data", "[", "\"policy_kwargs\"", "]", "[", "\"device\"", "]", "\n", "\n", "", "", "if", "\"policy_kwargs\"", "in", "kwargs", "and", "kwargs", "[", "\"policy_kwargs\"", "]", "!=", "data", "[", "\"policy_kwargs\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"The specified policy kwargs do not equal the stored policy kwargs.\"", "\n", "f\"Stored kwargs: {data['policy_kwargs']}, specified kwargs: {kwargs['policy_kwargs']}\"", "\n", ")", "\n", "\n", "", "if", "\"observation_space\"", "not", "in", "data", "or", "\"action_space\"", "not", "in", "data", ":", "\n", "            ", "raise", "KeyError", "(", "\"The observation_space and action_space were not given, can't verify new environments\"", ")", "\n", "\n", "", "if", "env", "is", "not", "None", ":", "\n", "# Wrap first if needed", "\n", "            ", "env", "=", "cls", ".", "_wrap_env", "(", "env", ",", "data", "[", "\"verbose\"", "]", ")", "\n", "# Check if given env is valid", "\n", "check_for_correct_spaces", "(", "env", ",", "data", "[", "\"observation_space\"", "]", ",", "data", "[", "\"action_space\"", "]", ")", "\n", "# Discard `_last_obs`, this will force the env to reset before training", "\n", "# See issue https://github.com/DLR-RM/stable-baselines3/issues/597", "\n", "if", "force_reset", "and", "data", "is", "not", "None", ":", "\n", "                ", "data", "[", "\"_last_obs\"", "]", "=", "None", "\n", "", "", "else", ":", "\n", "# Use stored env, if one exists. If not, continue as is (can be used for predict)", "\n", "            ", "if", "\"env\"", "in", "data", ":", "\n", "                ", "env", "=", "data", "[", "\"env\"", "]", "\n", "\n", "# noinspection PyArgumentList", "\n", "", "", "model", "=", "cls", "(", "# pytype: disable=not-instantiable,wrong-keyword-args", "\n", "policy", "=", "data", "[", "\"policy_class\"", "]", ",", "\n", "env", "=", "env", ",", "\n", "device", "=", "device", ",", "\n", "_init_setup_model", "=", "False", ",", "# pytype: disable=not-instantiable,wrong-keyword-args", "\n", ")", "\n", "\n", "# load parameters", "\n", "model", ".", "__dict__", ".", "update", "(", "data", ")", "\n", "model", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "model", ".", "_setup_model", "(", ")", "\n", "\n", "# put state_dicts back in place", "\n", "model", ".", "set_parameters", "(", "params", ",", "exact_match", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "# put other pytorch variables back in place", "\n", "if", "pytorch_variables", "is", "not", "None", ":", "\n", "            ", "for", "name", "in", "pytorch_variables", ":", "\n", "# Skip if PyTorch variable was not defined (to ensure backward compatibility).", "\n", "# This happens when using SAC/TQC.", "\n", "# SAC has an entropy coefficient which can be fixed or optimized.", "\n", "# If it is optimized, an additional PyTorch variable `log_ent_coef` is defined,", "\n", "# otherwise it is initialized to `None`.", "\n", "                ", "if", "pytorch_variables", "[", "name", "]", "is", "None", ":", "\n", "                    ", "continue", "\n", "# Set the data attribute directly to avoid issue when using optimizers", "\n", "# See https://github.com/DLR-RM/stable-baselines3/issues/391", "\n", "", "recursive_setattr", "(", "model", ",", "name", "+", "\".data\"", ",", "pytorch_variables", "[", "name", "]", ".", "data", ")", "\n", "\n", "# Sample gSDE exploration matrix, so it uses the right device", "\n", "# see issue #44", "\n", "", "", "if", "model", ".", "use_sde", ":", "\n", "            ", "model", ".", "policy", ".", "reset_noise", "(", ")", "# pytype: disable=attribute-error", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_parameters": [[772, 786], ["base_class.BaseAlgorithm._get_torch_save_params", "stable_baselines3.common.save_util.recursive_getattr", "stable_baselines3.common.save_util.recursive_getattr.state_dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._get_torch_save_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.recursive_getattr"], ["", "def", "get_parameters", "(", "self", ")", "->", "Dict", "[", "str", ",", "Dict", "]", ":", "\n", "        ", "\"\"\"\n        Return the parameters of the agent. This includes parameters from different networks, e.g.\n        critics (value functions) and policies (pi functions).\n\n        :return: Mapping of from names of the objects to PyTorch state-dicts.\n        \"\"\"", "\n", "state_dicts_names", ",", "_", "=", "self", ".", "_get_torch_save_params", "(", ")", "\n", "params", "=", "{", "}", "\n", "for", "name", "in", "state_dicts_names", ":", "\n", "            ", "attr", "=", "recursive_getattr", "(", "self", ",", "name", ")", "\n", "# Retrieve state dict", "\n", "params", "[", "name", "]", "=", "attr", ".", "state_dict", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.save": [[787, 836], ["base_class.BaseAlgorithm.__dict__.copy", "set().union", "base_class.BaseAlgorithm._get_torch_save_params", "base_class.BaseAlgorithm.get_parameters", "stable_baselines3.common.save_util.save_to_zip_file", "base_class.BaseAlgorithm._excluded_save_params", "exclude.difference.difference.difference", "exclude.difference.difference.add", "base_class.BaseAlgorithm.pop", "set", "torch_var.split", "stable_baselines3.common.save_util.recursive_getattr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._get_torch_save_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.save_to_zip_file", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._excluded_save_params", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.recursive_getattr"], ["", "def", "save", "(", "\n", "self", ",", "\n", "path", ":", "Union", "[", "str", ",", "pathlib", ".", "Path", ",", "io", ".", "BufferedIOBase", "]", ",", "\n", "exclude", ":", "Optional", "[", "Iterable", "[", "str", "]", "]", "=", "None", ",", "\n", "include", ":", "Optional", "[", "Iterable", "[", "str", "]", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save all the attributes of the object and the model parameters in a zip-file.\n\n        :param path: path to the file where the rl agent should be saved\n        :param exclude: name of parameters that should be excluded in addition to the default ones\n        :param include: name of parameters that might be excluded but should be included anyway\n        \"\"\"", "\n", "# Copy parameter list so we don't mutate the original dict", "\n", "data", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n", "# Exclude is union of specified parameters (if any) and standard exclusions", "\n", "if", "exclude", "is", "None", ":", "\n", "            ", "exclude", "=", "[", "]", "\n", "", "exclude", "=", "set", "(", "exclude", ")", ".", "union", "(", "self", ".", "_excluded_save_params", "(", ")", ")", "\n", "\n", "# Do not exclude params if they are specifically included", "\n", "if", "include", "is", "not", "None", ":", "\n", "            ", "exclude", "=", "exclude", ".", "difference", "(", "include", ")", "\n", "\n", "", "state_dicts_names", ",", "torch_variable_names", "=", "self", ".", "_get_torch_save_params", "(", ")", "\n", "all_pytorch_variables", "=", "state_dicts_names", "+", "torch_variable_names", "\n", "for", "torch_var", "in", "all_pytorch_variables", ":", "\n", "# We need to get only the name of the top most module as we'll remove that", "\n", "            ", "var_name", "=", "torch_var", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "# Any params that are in the save vars must not be saved by data", "\n", "exclude", ".", "add", "(", "var_name", ")", "\n", "\n", "# Remove parameter entries of parameters which are to be excluded", "\n", "", "for", "param_name", "in", "exclude", ":", "\n", "            ", "data", ".", "pop", "(", "param_name", ",", "None", ")", "\n", "\n", "# Build dict of torch variables", "\n", "", "pytorch_variables", "=", "None", "\n", "if", "torch_variable_names", "is", "not", "None", ":", "\n", "            ", "pytorch_variables", "=", "{", "}", "\n", "for", "name", "in", "torch_variable_names", ":", "\n", "                ", "attr", "=", "recursive_getattr", "(", "self", ",", "name", ")", "\n", "pytorch_variables", "[", "name", "]", "=", "attr", "\n", "\n", "# Build dict of state_dicts", "\n", "", "", "params_to_save", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "save_to_zip_file", "(", "path", ",", "data", "=", "data", ",", "params", "=", "params_to_save", ",", "pytorch_variables", "=", "pytorch_variables", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.maybe_make_env": [[42, 54], ["isinstance", "gym.make", "print"], "function", ["None"], ["def", "maybe_make_env", "(", "env", ":", "Union", "[", "GymEnv", ",", "str", ",", "None", "]", ",", "verbose", ":", "int", ")", "->", "Optional", "[", "GymEnv", "]", ":", "\n", "    ", "\"\"\"If env is a string, make the environment; otherwise, return env.\n\n    :param env: The environment to learn from.\n    :param verbose: logging verbosity\n    :return A Gym (vector) environment.\n    \"\"\"", "\n", "if", "isinstance", "(", "env", ",", "str", ")", ":", "\n", "        ", "if", "verbose", ">=", "1", ":", "\n", "            ", "print", "(", "f\"Creating environment from the given name '{env}'\"", ")", "\n", "", "env", "=", "gym", ".", "make", "(", "env", ")", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.__init__": [[21, 38], ["abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "verbose", ":", "int", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# The RL model", "\n", "self", ".", "model", "=", "None", "# type: Optional[base_class.BaseAlgorithm]", "\n", "# An alias for self.model.get_env(), the environment used for training", "\n", "self", ".", "training_env", "=", "None", "# type: Union[gym.Env, VecEnv, None]", "\n", "# Number of time the callback was called", "\n", "self", ".", "n_calls", "=", "0", "# type: int", "\n", "# n_envs * n times env.step() was called", "\n", "self", ".", "num_timesteps", "=", "0", "# type: int", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "locals", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "self", ".", "globals", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "self", ".", "logger", "=", "None", "\n", "# Sometimes, for event callback, it is useful", "\n", "# to have access to the parent object", "\n", "self", ".", "parent", "=", "None", "# type: Optional[BaseCallback]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.init_callback": [[40, 49], ["model.get_env", "callbacks.BaseCallback._init_callback"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnMaxEpisodes._init_callback"], ["", "def", "init_callback", "(", "self", ",", "model", ":", "\"base_class.BaseAlgorithm\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize the callback by saving references to the\n        RL model and the training environment for convenience.\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "training_env", "=", "model", ".", "get_env", "(", ")", "\n", "self", ".", "logger", "=", "model", ".", "logger", "\n", "self", ".", "_init_callback", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback._init_callback": [[50, 52], ["None"], "methods", ["None"], ["", "def", "_init_callback", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_start": [[53, 58], ["callbacks.BaseCallback._on_training_start"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._on_training_start"], ["", "def", "on_training_start", "(", "self", ",", "locals_", ":", "Dict", "[", "str", ",", "Any", "]", ",", "globals_", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "# Those are reference and will be updated automatically", "\n", "        ", "self", ".", "locals", "=", "locals_", "\n", "self", ".", "globals", "=", "globals_", "\n", "self", ".", "_on_training_start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback._on_training_start": [[59, 61], ["None"], "methods", ["None"], ["", "def", "_on_training_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_rollout_start": [[62, 64], ["callbacks.BaseCallback._on_rollout_start"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._on_rollout_start"], ["", "def", "on_rollout_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_on_rollout_start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback._on_rollout_start": [[65, 67], ["None"], "methods", ["None"], ["", "def", "_on_rollout_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback._on_step": [[68, 74], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        :return: If the callback returns False, training is aborted early.\n        \"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_step": [[75, 89], ["callbacks.BaseCallback._on_step"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CheckGAECallback._on_step"], ["", "def", "on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        This method will be called by the model after each call to ``env.step()``.\n\n        For child callback (of an ``EventCallback``), this will be called\n        when the event is triggered.\n\n        :return: If the callback returns False, training is aborted early.\n        \"\"\"", "\n", "self", ".", "n_calls", "+=", "1", "\n", "# timesteps start at zero", "\n", "self", ".", "num_timesteps", "=", "self", ".", "model", ".", "num_timesteps", "\n", "\n", "return", "self", ".", "_on_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_end": [[90, 92], ["callbacks.BaseCallback._on_training_end"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._on_training_end"], ["", "def", "on_training_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_on_training_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback._on_training_end": [[93, 95], ["None"], "methods", ["None"], ["", "def", "_on_training_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_rollout_end": [[96, 98], ["callbacks.BaseCallback._on_rollout_end"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CheckGAECallback._on_rollout_end"], ["", "def", "on_rollout_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_on_rollout_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback._on_rollout_end": [[99, 101], ["None"], "methods", ["None"], ["", "def", "_on_rollout_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.update_locals": [[102, 110], ["callbacks.BaseCallback.locals.update", "callbacks.BaseCallback.update_child_locals"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EvalCallback.update_child_locals"], ["", "def", "update_locals", "(", "self", ",", "locals_", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the references to the local variables.\n\n        :param locals_: the local variables during rollout collection\n        \"\"\"", "\n", "self", ".", "locals", ".", "update", "(", "locals_", ")", "\n", "self", ".", "update_child_locals", "(", "locals_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.update_child_locals": [[111, 118], ["None"], "methods", ["None"], ["", "def", "update_child_locals", "(", "self", ",", "locals_", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the references to the local variables on sub callbacks.\n\n        :param locals_: the local variables during rollout collection\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback.__init__": [[129, 135], ["callbacks.BaseCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "callback", ":", "Optional", "[", "BaseCallback", "]", "=", "None", ",", "verbose", ":", "int", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", "=", "verbose", ")", "\n", "self", ".", "callback", "=", "callback", "\n", "# Give access to the parent", "\n", "if", "callback", "is", "not", "None", ":", "\n", "            ", "self", ".", "callback", ".", "parent", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback.init_callback": [[136, 140], ["callbacks.BaseCallback.init_callback", "callbacks.EventCallback.callback.init_callback"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback.init_callback", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback.init_callback"], ["", "", "def", "init_callback", "(", "self", ",", "model", ":", "\"base_class.BaseAlgorithm\"", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "init_callback", "(", "model", ")", "\n", "if", "self", ".", "callback", "is", "not", "None", ":", "\n", "            ", "self", ".", "callback", ".", "init_callback", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback._on_training_start": [[141, 144], ["callbacks.EventCallback.callback.on_training_start"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_start"], ["", "", "def", "_on_training_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "callback", "is", "not", "None", ":", "\n", "            ", "self", ".", "callback", ".", "on_training_start", "(", "self", ".", "locals", ",", "self", ".", "globals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback._on_event": [[145, 149], ["callbacks.EventCallback.callback.on_step"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_step"], ["", "", "def", "_on_event", "(", "self", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "callback", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "callback", ".", "on_step", "(", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback._on_step": [[150, 152], ["None"], "methods", ["None"], ["", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback.update_child_locals": [[153, 161], ["callbacks.EventCallback.callback.update_locals"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.update_locals"], ["", "def", "update_child_locals", "(", "self", ",", "locals_", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the references to the local variables.\n\n        :param locals_: the local variables during rollout collection\n        \"\"\"", "\n", "if", "self", ".", "callback", "is", "not", "None", ":", "\n", "            ", "self", ".", "callback", ".", "update_locals", "(", "locals_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList.__init__": [[171, 175], ["callbacks.BaseCallback.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "callbacks", ":", "List", "[", "BaseCallback", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "callbacks", ",", "list", ")", "\n", "self", ".", "callbacks", "=", "callbacks", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._init_callback": [[176, 179], ["callback.init_callback"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback.init_callback"], ["", "def", "_init_callback", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "init_callback", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._on_training_start": [[180, 183], ["callback.on_training_start"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_start"], ["", "", "def", "_on_training_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_training_start", "(", "self", ".", "locals", ",", "self", ".", "globals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._on_rollout_start": [[184, 187], ["callback.on_rollout_start"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_rollout_start"], ["", "", "def", "_on_rollout_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_rollout_start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._on_step": [[188, 194], ["callback.on_step"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_step"], ["", "", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "continue_training", "=", "True", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "# Return False (stop training) if at least one callback returns False", "\n", "            ", "continue_training", "=", "callback", ".", "on_step", "(", ")", "and", "continue_training", "\n", "", "return", "continue_training", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._on_rollout_end": [[195, 198], ["callback.on_rollout_end"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_rollout_end"], ["", "def", "_on_rollout_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_rollout_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList._on_training_end": [[199, 202], ["callback.on_training_end"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_training_end"], ["", "", "def", "_on_training_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_training_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CallbackList.update_child_locals": [[203, 211], ["callback.update_locals"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.update_locals"], ["", "", "def", "update_child_locals", "(", "self", ",", "locals_", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the references to the local variables.\n\n        :param locals_: the local variables during rollout collection\n        \"\"\"", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "update_locals", "(", "locals_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CheckpointCallback.__init__": [[230, 235], ["callbacks.BaseCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "save_freq", ":", "int", ",", "save_path", ":", "str", ",", "name_prefix", ":", "str", "=", "\"rl_model\"", ",", "verbose", ":", "int", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", ")", "\n", "self", ".", "save_freq", "=", "save_freq", "\n", "self", ".", "save_path", "=", "save_path", "\n", "self", ".", "name_prefix", "=", "name_prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CheckpointCallback._init_callback": [[236, 240], ["os.makedirs"], "methods", ["None"], ["", "def", "_init_callback", "(", "self", ")", "->", "None", ":", "\n", "# Create folder if needed", "\n", "        ", "if", "self", ".", "save_path", "is", "not", "None", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.CheckpointCallback._on_step": [[241, 248], ["os.path.join", "callbacks.CheckpointCallback.model.save", "print"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save"], ["", "", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "n_calls", "%", "self", ".", "save_freq", "==", "0", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "f\"{self.name_prefix}_{self.num_timesteps}_steps\"", ")", "\n", "self", ".", "model", ".", "save", "(", "path", ")", "\n", "if", "self", ".", "verbose", ">", "1", ":", "\n", "                ", "print", "(", "f\"Saving model checkpoint to {path}\"", ")", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.ConvertCallback.__init__": [[258, 261], ["callbacks.BaseCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "callback", ":", "Callable", "[", "[", "Dict", "[", "str", ",", "Any", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ",", "bool", "]", ",", "verbose", ":", "int", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", ")", "\n", "self", ".", "callback", "=", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.ConvertCallback._on_step": [[262, 266], ["callbacks.ConvertCallback.callback"], "methods", ["None"], ["", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "callback", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "callback", "(", "self", ".", "locals", ",", "self", ".", "globals", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EvalCallback.__init__": [[296, 341], ["callbacks.EventCallback.__init__", "isinstance", "stable_baselines3.common.vec_env.DummyVecEnv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "eval_env", ":", "Union", "[", "gym", ".", "Env", ",", "VecEnv", "]", ",", "\n", "callback_on_new_best", ":", "Optional", "[", "BaseCallback", "]", "=", "None", ",", "\n", "callback_after_eval", ":", "Optional", "[", "BaseCallback", "]", "=", "None", ",", "\n", "n_eval_episodes", ":", "int", "=", "5", ",", "\n", "eval_freq", ":", "int", "=", "10000", ",", "\n", "log_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "best_model_save_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "deterministic", ":", "bool", "=", "True", ",", "\n", "render", ":", "bool", "=", "False", ",", "\n", "verbose", ":", "int", "=", "1", ",", "\n", "warn", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "callback_after_eval", ",", "verbose", "=", "verbose", ")", "\n", "\n", "self", ".", "callback_on_new_best", "=", "callback_on_new_best", "\n", "if", "self", ".", "callback_on_new_best", "is", "not", "None", ":", "\n", "# Give access to the parent", "\n", "            ", "self", ".", "callback_on_new_best", ".", "parent", "=", "self", "\n", "\n", "", "self", ".", "n_eval_episodes", "=", "n_eval_episodes", "\n", "self", ".", "eval_freq", "=", "eval_freq", "\n", "self", ".", "best_mean_reward", "=", "-", "np", ".", "inf", "\n", "self", ".", "last_mean_reward", "=", "-", "np", ".", "inf", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "render", "=", "render", "\n", "self", ".", "warn", "=", "warn", "\n", "\n", "# Convert to VecEnv for consistency", "\n", "if", "not", "isinstance", "(", "eval_env", ",", "VecEnv", ")", ":", "\n", "            ", "eval_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "eval_env", "]", ")", "\n", "\n", "", "self", ".", "eval_env", "=", "eval_env", "\n", "self", ".", "best_model_save_path", "=", "best_model_save_path", "\n", "# Logs will be written in ``evaluations.npz``", "\n", "if", "log_path", "is", "not", "None", ":", "\n", "            ", "log_path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "\"evaluations\"", ")", "\n", "", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "evaluations_results", "=", "[", "]", "\n", "self", ".", "evaluations_timesteps", "=", "[", "]", "\n", "self", ".", "evaluations_length", "=", "[", "]", "\n", "# For computing success rate", "\n", "self", ".", "_is_success_buffer", "=", "[", "]", "\n", "self", ".", "evaluations_successes", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EvalCallback._init_callback": [[342, 356], ["isinstance", "warnings.warn", "os.makedirs", "os.makedirs", "callbacks.EvalCallback.callback_on_new_best.init_callback", "type", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback.init_callback"], ["", "def", "_init_callback", "(", "self", ")", "->", "None", ":", "\n", "# Does not work in some corner cases, where the wrapper is not the same", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "training_env", ",", "type", "(", "self", ".", "eval_env", ")", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Training and eval env are not of the same type\"", "f\"{self.training_env} != {self.eval_env}\"", ")", "\n", "\n", "# Create folders if needed", "\n", "", "if", "self", ".", "best_model_save_path", "is", "not", "None", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "best_model_save_path", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "self", ".", "log_path", "is", "not", "None", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "log_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Init callback called on new best model", "\n", "", "if", "self", ".", "callback_on_new_best", "is", "not", "None", ":", "\n", "            ", "self", ".", "callback_on_new_best", ".", "init_callback", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EvalCallback._log_success_callback": [[357, 372], ["info.get", "callbacks.EvalCallback._is_success_buffer.append"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get"], ["", "", "def", "_log_success_callback", "(", "self", ",", "locals_", ":", "Dict", "[", "str", ",", "Any", "]", ",", "globals_", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Callback passed to the  ``evaluate_policy`` function\n        in order to log the success rate (when applicable),\n        for instance when using HER.\n\n        :param locals_:\n        :param globals_:\n        \"\"\"", "\n", "info", "=", "locals_", "[", "\"info\"", "]", "\n", "\n", "if", "locals_", "[", "\"done\"", "]", ":", "\n", "            ", "maybe_is_success", "=", "info", ".", "get", "(", "\"is_success\"", ")", "\n", "if", "maybe_is_success", "is", "not", "None", ":", "\n", "                ", "self", ".", "_is_success_buffer", ".", "append", "(", "maybe_is_success", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EvalCallback._on_step": [[373, 459], ["stable_baselines3.common.evaluation.evaluate_policy", "callbacks.EvalCallback.logger.record", "callbacks.EvalCallback.logger.record", "callbacks.EvalCallback.logger.record", "callbacks.EvalCallback.logger.dump", "callbacks.EvalCallback.model.get_vec_normalize_env", "callbacks.EvalCallback.evaluations_timesteps.append", "callbacks.EvalCallback.evaluations_results.append", "callbacks.EvalCallback.evaluations_length.append", "numpy.savez", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "print", "print", "float", "len", "numpy.mean", "callbacks.EvalCallback.logger.record", "stable_baselines3.common.vec_env.sync_envs_normalization", "len", "callbacks.EvalCallback.evaluations_successes.append", "dict", "print", "print", "callbacks.EvalCallback.model.save", "callbacks.EvalCallback.callback_on_new_best.on_step", "callbacks.EvalCallback._on_event", "AssertionError", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_vec_normalize_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.sync_envs_normalization", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.on_step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback._on_event"], ["", "", "", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "\n", "        ", "continue_training", "=", "True", "\n", "\n", "if", "self", ".", "eval_freq", ">", "0", "and", "self", ".", "n_calls", "%", "self", ".", "eval_freq", "==", "0", ":", "\n", "\n", "# Sync training and eval env if there is VecNormalize", "\n", "            ", "if", "self", ".", "model", ".", "get_vec_normalize_env", "(", ")", "is", "not", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "sync_envs_normalization", "(", "self", ".", "training_env", ",", "self", ".", "eval_env", ")", "\n", "", "except", "AttributeError", "as", "e", ":", "\n", "                    ", "raise", "AssertionError", "(", "\n", "\"Training and eval env are not wrapped the same way, \"", "\n", "\"see https://stable-baselines3.readthedocs.io/en/master/guide/callbacks.html#evalcallback \"", "\n", "\"and warning above.\"", "\n", ")", "from", "e", "\n", "\n", "# Reset success rate buffer", "\n", "", "", "self", ".", "_is_success_buffer", "=", "[", "]", "\n", "\n", "episode_rewards", ",", "episode_lengths", "=", "evaluate_policy", "(", "\n", "self", ".", "model", ",", "\n", "self", ".", "eval_env", ",", "\n", "n_eval_episodes", "=", "self", ".", "n_eval_episodes", ",", "\n", "render", "=", "self", ".", "render", ",", "\n", "deterministic", "=", "self", ".", "deterministic", ",", "\n", "return_episode_rewards", "=", "True", ",", "\n", "warn", "=", "self", ".", "warn", ",", "\n", "callback", "=", "self", ".", "_log_success_callback", ",", "\n", ")", "\n", "\n", "if", "self", ".", "log_path", "is", "not", "None", ":", "\n", "                ", "self", ".", "evaluations_timesteps", ".", "append", "(", "self", ".", "num_timesteps", ")", "\n", "self", ".", "evaluations_results", ".", "append", "(", "episode_rewards", ")", "\n", "self", ".", "evaluations_length", ".", "append", "(", "episode_lengths", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "# Save success log if present", "\n", "if", "len", "(", "self", ".", "_is_success_buffer", ")", ">", "0", ":", "\n", "                    ", "self", ".", "evaluations_successes", ".", "append", "(", "self", ".", "_is_success_buffer", ")", "\n", "kwargs", "=", "dict", "(", "successes", "=", "self", ".", "evaluations_successes", ")", "\n", "\n", "", "np", ".", "savez", "(", "\n", "self", ".", "log_path", ",", "\n", "timesteps", "=", "self", ".", "evaluations_timesteps", ",", "\n", "results", "=", "self", ".", "evaluations_results", ",", "\n", "ep_lengths", "=", "self", ".", "evaluations_length", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "", "mean_reward", ",", "std_reward", "=", "np", ".", "mean", "(", "episode_rewards", ")", ",", "np", ".", "std", "(", "episode_rewards", ")", "\n", "mean_ep_length", ",", "std_ep_length", "=", "np", ".", "mean", "(", "episode_lengths", ")", ",", "np", ".", "std", "(", "episode_lengths", ")", "\n", "self", ".", "last_mean_reward", "=", "mean_reward", "\n", "\n", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                ", "print", "(", "f\"Eval num_timesteps={self.num_timesteps}, \"", "f\"episode_reward={mean_reward:.2f} +/- {std_reward:.2f}\"", ")", "\n", "print", "(", "f\"Episode length: {mean_ep_length:.2f} +/- {std_ep_length:.2f}\"", ")", "\n", "# Add to current Logger", "\n", "", "self", ".", "logger", ".", "record", "(", "\"eval/mean_reward\"", ",", "float", "(", "mean_reward", ")", ")", "\n", "self", ".", "logger", ".", "record", "(", "\"eval/mean_ep_length\"", ",", "mean_ep_length", ")", "\n", "\n", "if", "len", "(", "self", ".", "_is_success_buffer", ")", ">", "0", ":", "\n", "                ", "success_rate", "=", "np", ".", "mean", "(", "self", ".", "_is_success_buffer", ")", "\n", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                    ", "print", "(", "f\"Success rate: {100 * success_rate:.2f}%\"", ")", "\n", "", "self", ".", "logger", ".", "record", "(", "\"eval/success_rate\"", ",", "success_rate", ")", "\n", "\n", "# Dump log so the evaluation results are printed with the correct timestep", "\n", "", "self", ".", "logger", ".", "record", "(", "\"time/total_timesteps\"", ",", "self", ".", "num_timesteps", ",", "exclude", "=", "\"tensorboard\"", ")", "\n", "self", ".", "logger", ".", "dump", "(", "self", ".", "num_timesteps", ")", "\n", "\n", "if", "mean_reward", ">", "self", ".", "best_mean_reward", ":", "\n", "                ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                    ", "print", "(", "\"New best mean reward!\"", ")", "\n", "", "if", "self", ".", "best_model_save_path", "is", "not", "None", ":", "\n", "                    ", "self", ".", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "best_model_save_path", ",", "\"best_model\"", ")", ")", "\n", "", "self", ".", "best_mean_reward", "=", "mean_reward", "\n", "# Trigger callback on new best model, if needed", "\n", "if", "self", ".", "callback_on_new_best", "is", "not", "None", ":", "\n", "                    ", "continue_training", "=", "self", ".", "callback_on_new_best", ".", "on_step", "(", ")", "\n", "\n", "# Trigger callback after every evaluation, if needed", "\n", "", "", "if", "self", ".", "callback", "is", "not", "None", ":", "\n", "                ", "continue_training", "=", "continue_training", "and", "self", ".", "_on_event", "(", ")", "\n", "\n", "", "", "return", "continue_training", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EvalCallback.update_child_locals": [[460, 468], ["callbacks.EvalCallback.callback.update_locals"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.BaseCallback.update_locals"], ["", "def", "update_child_locals", "(", "self", ",", "locals_", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the references to the local variables.\n\n        :param locals_: the local variables during rollout collection\n        \"\"\"", "\n", "if", "self", ".", "callback", ":", "\n", "            ", "self", ".", "callback", ".", "update_locals", "(", "locals_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnRewardThreshold.__init__": [[482, 485], ["callbacks.BaseCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "reward_threshold", ":", "float", ",", "verbose", ":", "int", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", "=", "verbose", ")", "\n", "self", ".", "reward_threshold", "=", "reward_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnRewardThreshold._on_step": [[486, 496], ["bool", "print"], "methods", ["None"], ["", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "assert", "self", ".", "parent", "is", "not", "None", ",", "\"``StopTrainingOnMinimumReward`` callback must be used \"", "\"with an ``EvalCallback``\"", "\n", "# Convert np.bool_ to bool, otherwise callback() is False won't work", "\n", "continue_training", "=", "bool", "(", "self", ".", "parent", ".", "best_mean_reward", "<", "self", ".", "reward_threshold", ")", "\n", "if", "self", ".", "verbose", ">", "0", "and", "not", "continue_training", ":", "\n", "            ", "print", "(", "\n", "f\"Stopping training because the mean reward {self.parent.best_mean_reward:.2f} \"", "\n", "f\" is above the threshold {self.reward_threshold}\"", "\n", ")", "\n", "", "return", "continue_training", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EveryNTimesteps.__init__": [[507, 511], ["callbacks.EventCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "n_steps", ":", "int", ",", "callback", ":", "BaseCallback", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "callback", ")", "\n", "self", ".", "n_steps", "=", "n_steps", "\n", "self", ".", "last_time_trigger", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EveryNTimesteps._on_step": [[512, 517], ["callbacks.EveryNTimesteps._on_event"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.EventCallback._on_event"], ["", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "if", "(", "self", ".", "num_timesteps", "-", "self", ".", "last_time_trigger", ")", ">=", "self", ".", "n_steps", ":", "\n", "            ", "self", ".", "last_time_trigger", "=", "self", ".", "num_timesteps", "\n", "return", "self", ".", "_on_event", "(", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnMaxEpisodes.__init__": [[530, 535], ["callbacks.BaseCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "max_episodes", ":", "int", ",", "verbose", ":", "int", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", "=", "verbose", ")", "\n", "self", ".", "max_episodes", "=", "max_episodes", "\n", "self", ".", "_total_max_episodes", "=", "max_episodes", "\n", "self", ".", "n_episodes", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnMaxEpisodes._init_callback": [[536, 539], ["None"], "methods", ["None"], ["", "def", "_init_callback", "(", "self", ")", "->", "None", ":", "\n", "# At start set total max according to number of envirnments", "\n", "        ", "self", ".", "_total_max_episodes", "=", "self", ".", "max_episodes", "*", "self", ".", "training_env", ".", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnMaxEpisodes._on_step": [[540, 560], ["numpy.sum().item", "print", "numpy.sum", "callbacks.StopTrainingOnMaxEpisodes.locals.get"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get"], ["", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "# Check that the `dones` local variable is defined", "\n", "        ", "assert", "\"dones\"", "in", "self", ".", "locals", ",", "\"`dones` variable is not defined, please check your code next to `callback.on_step()`\"", "\n", "self", ".", "n_episodes", "+=", "np", ".", "sum", "(", "self", ".", "locals", "[", "\"dones\"", "]", ")", ".", "item", "(", ")", "\n", "\n", "continue_training", "=", "self", ".", "n_episodes", "<", "self", ".", "_total_max_episodes", "\n", "\n", "if", "self", ".", "verbose", ">", "0", "and", "not", "continue_training", ":", "\n", "            ", "mean_episodes_per_env", "=", "self", ".", "n_episodes", "/", "self", ".", "training_env", ".", "num_envs", "\n", "mean_ep_str", "=", "(", "\n", "f\"with an average of {mean_episodes_per_env:.2f} episodes per env\"", "if", "self", ".", "training_env", ".", "num_envs", ">", "1", "else", "\"\"", "\n", ")", "\n", "\n", "print", "(", "\n", "f\"Stopping training with a total of {self.num_timesteps} steps because the \"", "\n", "f\"{self.locals.get('tb_log_name')} model reached max_episodes={self.max_episodes}, \"", "\n", "f\"by playing for {self.n_episodes} episodes \"", "\n", "f\"{mean_ep_str}\"", "\n", ")", "\n", "", "return", "continue_training", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnNoModelImprovement.__init__": [[575, 581], ["callbacks.BaseCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "max_no_improvement_evals", ":", "int", ",", "min_evals", ":", "int", "=", "0", ",", "verbose", ":", "int", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", "=", "verbose", ")", "\n", "self", ".", "max_no_improvement_evals", "=", "max_no_improvement_evals", "\n", "self", ".", "min_evals", "=", "min_evals", "\n", "self", ".", "last_best_mean_reward", "=", "-", "np", ".", "inf", "\n", "self", ".", "no_improvement_evals", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.callbacks.StopTrainingOnNoModelImprovement._on_step": [[582, 603], ["print"], "methods", ["None"], ["", "def", "_on_step", "(", "self", ")", "->", "bool", ":", "\n", "        ", "assert", "self", ".", "parent", "is", "not", "None", ",", "\"``StopTrainingOnNoModelImprovement`` callback must be used with an ``EvalCallback``\"", "\n", "\n", "continue_training", "=", "True", "\n", "\n", "if", "self", ".", "n_calls", ">", "self", ".", "min_evals", ":", "\n", "            ", "if", "self", ".", "parent", ".", "best_mean_reward", ">", "self", ".", "last_best_mean_reward", ":", "\n", "                ", "self", ".", "no_improvement_evals", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "no_improvement_evals", "+=", "1", "\n", "if", "self", ".", "no_improvement_evals", ">", "self", ".", "max_no_improvement_evals", ":", "\n", "                    ", "continue_training", "=", "False", "\n", "\n", "", "", "", "self", ".", "last_best_mean_reward", "=", "self", ".", "parent", ".", "best_mean_reward", "\n", "\n", "if", "self", ".", "verbose", ">", "0", "and", "not", "continue_training", ":", "\n", "            ", "print", "(", "\n", "f\"Stopping training because there was no new best model in the last {self.no_improvement_evals:d} evaluations\"", "\n", ")", "\n", "\n", "", "return", "continue_training", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.set_random_seed": [[25, 43], ["random.seed", "numpy.random.seed", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed"], ["def", "set_random_seed", "(", "seed", ":", "int", ",", "using_cuda", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Seed the different random generators.\n\n    :param seed:\n    :param using_cuda:\n    \"\"\"", "\n", "# Seed python RNG", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "# Seed numpy RNG", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "# seed the RNG for all devices (both CPU and CUDA)", "\n", "th", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "if", "using_cuda", ":", "\n", "# Deterministic operations for CuDNN, it may impact performances", "\n", "        ", "th", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "th", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.explained_variance": [[46, 63], ["numpy.var", "numpy.var"], "function", ["None"], ["", "", "def", "explained_variance", "(", "y_pred", ":", "np", ".", "ndarray", ",", "y_true", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Computes fraction of variance that ypred explains about y.\n    Returns 1 - Var[y-ypred] / Var[y]\n\n    interpretation:\n        ev=0  =>  might as well have predicted zero\n        ev=1  =>  perfect prediction\n        ev<0  =>  worse than just predicting zero\n\n    :param y_pred: the prediction\n    :param y_true: the expected value\n    :return: explained variance of ypred and y\n    \"\"\"", "\n", "assert", "y_true", ".", "ndim", "==", "1", "and", "y_pred", ".", "ndim", "==", "1", "\n", "var_y", "=", "np", ".", "var", "(", "y_true", ")", "\n", "return", "np", ".", "nan", "if", "var_y", "==", "0", "else", "1", "-", "np", ".", "var", "(", "y_true", "-", "y_pred", ")", "/", "var_y", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.update_learning_rate": [[65, 75], ["None"], "function", ["None"], ["", "def", "update_learning_rate", "(", "optimizer", ":", "th", ".", "optim", ".", "Optimizer", ",", "learning_rate", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Update the learning rate for a given optimizer.\n    Useful when doing linear schedule.\n\n    :param optimizer:\n    :param learning_rate:\n    \"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_schedule_fn": [[77, 93], ["isinstance", "utils.constant_fn", "callable", "float"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.constant_fn"], ["", "", "def", "get_schedule_fn", "(", "value_schedule", ":", "Union", "[", "Schedule", ",", "float", ",", "int", "]", ")", "->", "Schedule", ":", "\n", "    ", "\"\"\"\n    Transform (if needed) learning rate and clip range (for PPO)\n    to callable.\n\n    :param value_schedule:\n    :return:\n    \"\"\"", "\n", "# If the passed schedule is a float", "\n", "# create a constant function", "\n", "if", "isinstance", "(", "value_schedule", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "# Cast to float to avoid errors", "\n", "        ", "value_schedule", "=", "constant_fn", "(", "float", "(", "value_schedule", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "callable", "(", "value_schedule", ")", "\n", "", "return", "value_schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_linear_fn": [[95, 117], ["None"], "function", ["None"], ["", "def", "get_linear_fn", "(", "start", ":", "float", ",", "end", ":", "float", ",", "end_fraction", ":", "float", ")", "->", "Schedule", ":", "\n", "    ", "\"\"\"\n    Create a function that interpolates linearly between start and end\n    between ``progress_remaining`` = 1 and ``progress_remaining`` = ``end_fraction``.\n    This is used in DQN for linearly annealing the exploration fraction\n    (epsilon for the epsilon-greedy strategy).\n\n    :params start: value to start with if ``progress_remaining`` = 1\n    :params end: value to end with if ``progress_remaining`` = 0\n    :params end_fraction: fraction of ``progress_remaining``\n        where end is reached e.g 0.1 then end is reached after 10%\n        of the complete training process.\n    :return:\n    \"\"\"", "\n", "\n", "def", "func", "(", "progress_remaining", ":", "float", ")", "->", "float", ":", "\n", "        ", "if", "(", "1", "-", "progress_remaining", ")", ">", "end_fraction", ":", "\n", "            ", "return", "end", "\n", "", "else", ":", "\n", "            ", "return", "start", "+", "(", "1", "-", "progress_remaining", ")", "*", "(", "end", "-", "start", ")", "/", "end_fraction", "\n", "\n", "", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.constant_fn": [[119, 132], ["None"], "function", ["None"], ["", "def", "constant_fn", "(", "val", ":", "float", ")", "->", "Schedule", ":", "\n", "    ", "\"\"\"\n    Create a function that returns a constant\n    It is useful for learning rate schedule (to avoid code duplication)\n\n    :param val:\n    :return:\n    \"\"\"", "\n", "\n", "def", "func", "(", "_", ")", ":", "\n", "        ", "return", "val", "\n", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device": [[134, 155], ["torch.device", "torch.device", "torch.cuda.is_available", "torch.device"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.device", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.device", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.device"], ["", "def", "get_device", "(", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"auto\"", ")", "->", "th", ".", "device", ":", "\n", "    ", "\"\"\"\n    Retrieve PyTorch device.\n    It checks that the requested device is available first.\n    For now, it supports only cpu and cuda.\n    By default, it tries to use the gpu.\n\n    :param device: One for 'auto', 'cuda', 'cpu'\n    :return:\n    \"\"\"", "\n", "# Cuda by default", "\n", "if", "device", "==", "\"auto\"", ":", "\n", "        ", "device", "=", "\"cuda\"", "\n", "# Force conversion to th.device", "\n", "", "device", "=", "th", ".", "device", "(", "device", ")", "\n", "\n", "# Cuda not available", "\n", "if", "device", ".", "type", "==", "th", ".", "device", "(", "\"cuda\"", ")", ".", "type", "and", "not", "th", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "th", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_latest_run_id": [[157, 174], ["glob.glob", "os.path.join", "path.split", "file_name.split", "ext.isdigit", "int", "int", "glob.escape", "file_name.split"], "function", ["None"], ["", "def", "get_latest_run_id", "(", "log_path", ":", "str", "=", "\"\"", ",", "log_name", ":", "str", "=", "\"\"", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Returns the latest run number for the given log name and log path,\n    by finding the greatest number in the directories.\n\n    :param log_path: Path to the log folder containing several runs.\n    :param log_name: Name of the experiment. Each run is stored\n        in a folder named ``log_name_1``, ``log_name_2``, ...\n    :return: latest run number\n    \"\"\"", "\n", "max_run_id", "=", "0", "\n", "for", "path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "log_path", ",", "f\"{glob.escape(log_name)}_[0-9]*\"", ")", ")", ":", "\n", "        ", "file_name", "=", "path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "ext", "=", "file_name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", "if", "log_name", "==", "\"_\"", ".", "join", "(", "file_name", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "1", "]", ")", "and", "ext", ".", "isdigit", "(", ")", "and", "int", "(", "ext", ")", ">", "max_run_id", ":", "\n", "            ", "max_run_id", "=", "int", "(", "ext", ")", "\n", "", "", "return", "max_run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.configure_logger": [[176, 211], ["stable_baselines3.common.logger.configure", "ImportError", "utils.get_latest_run_id", "os.path.join"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.configure", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_latest_run_id"], ["", "def", "configure_logger", "(", "\n", "verbose", ":", "int", "=", "0", ",", "\n", "tensorboard_log", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "tb_log_name", ":", "str", "=", "\"\"", ",", "\n", "reset_num_timesteps", ":", "bool", "=", "True", ",", "\n", ")", "->", "Logger", ":", "\n", "    ", "\"\"\"\n    Configure the logger's outputs.\n\n    :param verbose: the verbosity level: 0 no output, 1 info, 2 debug\n    :param tensorboard_log: the log location for tensorboard (if None, no logging)\n    :param tb_log_name: tensorboard log\n    :param reset_num_timesteps:  Whether the ``num_timesteps`` attribute is reset or not.\n        It allows to continue a previous learning curve (``reset_num_timesteps=False``)\n        or start from t=0 (``reset_num_timesteps=True``, the default).\n    :return: The logger object\n    \"\"\"", "\n", "save_path", ",", "format_strings", "=", "None", ",", "[", "\"stdout\"", "]", "\n", "\n", "if", "tensorboard_log", "is", "not", "None", "and", "SummaryWriter", "is", "None", ":", "\n", "        ", "raise", "ImportError", "(", "\"Trying to log data to tensorboard but tensorboard is not installed.\"", ")", "\n", "\n", "", "if", "tensorboard_log", "is", "not", "None", "and", "SummaryWriter", "is", "not", "None", ":", "\n", "        ", "latest_run_id", "=", "get_latest_run_id", "(", "tensorboard_log", ",", "tb_log_name", ")", "\n", "if", "not", "reset_num_timesteps", ":", "\n", "# Continue training in the same directory", "\n", "            ", "latest_run_id", "-=", "1", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "tensorboard_log", ",", "f\"{tb_log_name}_{latest_run_id + 1}\"", ")", "\n", "if", "verbose", ">=", "1", ":", "\n", "            ", "format_strings", "=", "[", "\"stdout\"", ",", "\"tensorboard\"", "]", "\n", "", "else", ":", "\n", "            ", "format_strings", "=", "[", "\"tensorboard\"", "]", "\n", "", "", "elif", "verbose", "==", "0", ":", "\n", "        ", "format_strings", "=", "[", "\"\"", "]", "\n", "", "return", "configure", "(", "save_path", ",", "format_strings", "=", "format_strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.check_for_correct_spaces": [[213, 229], ["ValueError", "ValueError"], "function", ["None"], ["", "def", "check_for_correct_spaces", "(", "env", ":", "GymEnv", ",", "observation_space", ":", "gym", ".", "spaces", ".", "Space", ",", "action_space", ":", "gym", ".", "spaces", ".", "Space", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Checks that the environment has same spaces as provided ones. Used by BaseAlgorithm to check if\n    spaces match after loading the model with given env.\n    Checked parameters:\n    - observation_space\n    - action_space\n\n    :param env: Environment to check for valid spaces\n    :param observation_space: Observation space to check against\n    :param action_space: Action space to check against\n    \"\"\"", "\n", "if", "observation_space", "!=", "env", ".", "observation_space", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Observation spaces do not match: {observation_space} != {env.observation_space}\"", ")", "\n", "", "if", "action_space", "!=", "env", ".", "action_space", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Action spaces do not match: {action_space} != {env.action_space}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_box_observation": [[231, 249], ["ValueError", "map"], "function", ["None"], ["", "", "def", "is_vectorized_box_observation", "(", "observation", ":", "np", ".", "ndarray", ",", "observation_space", ":", "gym", ".", "spaces", ".", "Box", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    For box observation type, detects and validates the shape,\n    then returns whether or not the observation is vectorized.\n\n    :param observation: the input observation to validate\n    :param observation_space: the observation space\n    :return: whether the given observation is vectorized or not\n    \"\"\"", "\n", "if", "observation", ".", "shape", "==", "observation_space", ".", "shape", ":", "\n", "        ", "return", "False", "\n", "", "elif", "observation", ".", "shape", "[", "1", ":", "]", "==", "observation_space", ".", "shape", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Error: Unexpected observation shape {observation.shape} for \"", "\n", "+", "f\"Box environment, please use {observation_space.shape} \"", "\n", "+", "\"or (n_env, {}) for the observation shape.\"", ".", "format", "(", "\", \"", ".", "join", "(", "map", "(", "str", ",", "observation_space", ".", "shape", ")", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_discrete_observation": [[252, 269], ["isinstance", "len", "ValueError"], "function", ["None"], ["", "", "def", "is_vectorized_discrete_observation", "(", "observation", ":", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ",", "observation_space", ":", "gym", ".", "spaces", ".", "Discrete", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    For discrete observation type, detects and validates the shape,\n    then returns whether or not the observation is vectorized.\n\n    :param observation: the input observation to validate\n    :param observation_space: the observation space\n    :return: whether the given observation is vectorized or not\n    \"\"\"", "\n", "if", "isinstance", "(", "observation", ",", "int", ")", "or", "observation", ".", "shape", "==", "(", ")", ":", "# A numpy array of a number, has shape empty tuple '()'", "\n", "        ", "return", "False", "\n", "", "elif", "len", "(", "observation", ".", "shape", ")", "==", "1", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Error: Unexpected observation shape {observation.shape} for \"", "\n", "+", "\"Discrete environment, please use () or (n_env,) for the observation shape.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_multidiscrete_observation": [[272, 290], ["len", "ValueError", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "is_vectorized_multidiscrete_observation", "(", "observation", ":", "np", ".", "ndarray", ",", "observation_space", ":", "gym", ".", "spaces", ".", "MultiDiscrete", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    For multidiscrete observation type, detects and validates the shape,\n    then returns whether or not the observation is vectorized.\n\n    :param observation: the input observation to validate\n    :param observation_space: the observation space\n    :return: whether the given observation is vectorized or not\n    \"\"\"", "\n", "if", "observation", ".", "shape", "==", "(", "len", "(", "observation_space", ".", "nvec", ")", ",", ")", ":", "\n", "        ", "return", "False", "\n", "", "elif", "len", "(", "observation", ".", "shape", ")", "==", "2", "and", "observation", ".", "shape", "[", "1", "]", "==", "len", "(", "observation_space", ".", "nvec", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Error: Unexpected observation shape {observation.shape} for MultiDiscrete \"", "\n", "+", "f\"environment, please use ({len(observation_space.nvec)},) or \"", "\n", "+", "f\"(n_env, {len(observation_space.nvec)}) for the observation shape.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_multibinary_observation": [[293, 311], ["ValueError", "len"], "function", ["None"], ["", "", "def", "is_vectorized_multibinary_observation", "(", "observation", ":", "np", ".", "ndarray", ",", "observation_space", ":", "gym", ".", "spaces", ".", "MultiBinary", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    For multibinary observation type, detects and validates the shape,\n    then returns whether or not the observation is vectorized.\n\n    :param observation: the input observation to validate\n    :param observation_space: the observation space\n    :return: whether the given observation is vectorized or not\n    \"\"\"", "\n", "if", "observation", ".", "shape", "==", "(", "observation_space", ".", "n", ",", ")", ":", "\n", "        ", "return", "False", "\n", "", "elif", "len", "(", "observation", ".", "shape", ")", "==", "2", "and", "observation", ".", "shape", "[", "1", "]", "==", "observation_space", ".", "n", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Error: Unexpected observation shape {observation.shape} for MultiBinary \"", "\n", "+", "f\"environment, please use ({observation_space.n},) or \"", "\n", "+", "f\"(n_env, {observation_space.n}) for the observation shape.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_dict_observation": [[314, 353], ["observation_space.spaces.items", "observation_space.spaces.items", "ValueError", "utils.is_vectorized_observation"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation"], ["", "", "def", "is_vectorized_dict_observation", "(", "observation", ":", "np", ".", "ndarray", ",", "observation_space", ":", "gym", ".", "spaces", ".", "Dict", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    For dict observation type, detects and validates the shape,\n    then returns whether or not the observation is vectorized.\n\n    :param observation: the input observation to validate\n    :param observation_space: the observation space\n    :return: whether the given observation is vectorized or not\n    \"\"\"", "\n", "# We first assume that all observations are not vectorized", "\n", "all_non_vectorized", "=", "True", "\n", "for", "key", ",", "subspace", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", ":", "\n", "# This fails when the observation is not vectorized", "\n", "# or when it has the wrong shape", "\n", "        ", "if", "observation", "[", "key", "]", ".", "shape", "!=", "subspace", ".", "shape", ":", "\n", "            ", "all_non_vectorized", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "all_non_vectorized", ":", "\n", "        ", "return", "False", "\n", "\n", "", "all_vectorized", "=", "True", "\n", "# Now we check that all observation are vectorized and have the correct shape", "\n", "for", "key", ",", "subspace", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", ":", "\n", "        ", "if", "observation", "[", "key", "]", ".", "shape", "[", "1", ":", "]", "!=", "subspace", ".", "shape", ":", "\n", "            ", "all_vectorized", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "all_vectorized", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "# Retrieve error message", "\n", "        ", "error_msg", "=", "\"\"", "\n", "try", ":", "\n", "            ", "is_vectorized_observation", "(", "observation", "[", "key", "]", ",", "observation_space", ".", "spaces", "[", "key", "]", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "error_msg", "=", "f\"{e}\"", "\n", "", "raise", "ValueError", "(", "\n", "f\"There seems to be a mix of vectorized and non-vectorized observations. \"", "\n", "f\"Unexpected observation shape {observation[key].shape} for key {key} \"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation": [[358, 382], ["is_vec_obs_func_dict.items", "isinstance", "ValueError", "is_vec_obs_func"], "function", ["None"], ["", "", "def", "is_vectorized_observation", "(", "observation", ":", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ",", "observation_space", ":", "gym", ".", "spaces", ".", "Space", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    For every observation type, detects and validates the shape,\n    then returns whether or not the observation is vectorized.\n\n    :param observation: the input observation to validate\n    :param observation_space: the observation space\n    :return: whether the given observation is vectorized or not\n    \"\"\"", "\n", "\n", "is_vec_obs_func_dict", "=", "{", "\n", "gym", ".", "spaces", ".", "Box", ":", "is_vectorized_box_observation", ",", "\n", "gym", ".", "spaces", ".", "Discrete", ":", "is_vectorized_discrete_observation", ",", "\n", "gym", ".", "spaces", ".", "MultiDiscrete", ":", "is_vectorized_multidiscrete_observation", ",", "\n", "gym", ".", "spaces", ".", "MultiBinary", ":", "is_vectorized_multibinary_observation", ",", "\n", "gym", ".", "spaces", ".", "Dict", ":", "is_vectorized_dict_observation", ",", "\n", "}", "\n", "\n", "for", "space_type", ",", "is_vec_obs_func", "in", "is_vec_obs_func_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "observation_space", ",", "space_type", ")", ":", "\n", "            ", "return", "is_vec_obs_func", "(", "observation", ",", "observation_space", ")", "\n", "", "", "else", ":", "\n", "# for-else happens if no break is called", "\n", "        ", "raise", "ValueError", "(", "f\"Error: Cannot determine if the observation is vectorized with the space type {observation_space}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.safe_mean": [[384, 393], ["numpy.mean", "len"], "function", ["None"], ["", "", "def", "safe_mean", "(", "arr", ":", "Union", "[", "np", ".", "ndarray", ",", "list", ",", "deque", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Compute the mean of an array if there is at least one element.\n    For empty array, return NaN. It is used for logging only.\n\n    :param arr:\n    :return:\n    \"\"\"", "\n", "return", "np", ".", "nan", "if", "len", "(", "arr", ")", "==", "0", "else", "np", ".", "mean", "(", "arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.zip_strict": [[395, 411], ["object", "itertools.zip_longest", "ValueError"], "function", ["None"], ["", "def", "zip_strict", "(", "*", "iterables", ":", "Iterable", ")", "->", "Iterable", ":", "\n", "    ", "r\"\"\"\n    ``zip()`` function but enforces that iterables are of equal length.\n    Raises ``ValueError`` if iterables not of equal length.\n    Code inspired by Stackoverflow answer for question #32954486.\n\n    :param \\*iterables: iterables to ``zip()``\n    \"\"\"", "\n", "# As in Stackoverflow #32954486, use", "\n", "# new object for \"empty\" in case we have", "\n", "# Nones in iterable.", "\n", "sentinel", "=", "object", "(", ")", "\n", "for", "combo", "in", "zip_longest", "(", "*", "iterables", ",", "fillvalue", "=", "sentinel", ")", ":", "\n", "        ", "if", "sentinel", "in", "combo", ":", "\n", "            ", "raise", "ValueError", "(", "\"Iterables have different lengths\"", ")", "\n", "", "yield", "combo", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.polyak_update": [[413, 438], ["torch.no_grad", "utils.zip_strict", "target_param.data.mul_", "torch.add"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.zip_strict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add"], ["", "", "def", "polyak_update", "(", "\n", "params", ":", "Iterable", "[", "th", ".", "nn", ".", "Parameter", "]", ",", "\n", "target_params", ":", "Iterable", "[", "th", ".", "nn", ".", "Parameter", "]", ",", "\n", "tau", ":", "float", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Perform a Polyak average update on ``target_params`` using ``params``:\n    target parameters are slowly updated towards the main parameters.\n    ``tau``, the soft update coefficient controls the interpolation:\n    ``tau=1`` corresponds to copying the parameters to the target ones whereas nothing happens when ``tau=0``.\n    The Polyak update is done in place, with ``no_grad``, and therefore does not create intermediate tensors,\n    or a computation graph, reducing memory cost and improving performance.  We scale the target params\n    by ``1-tau`` (in-place), add the new weights, scaled by ``tau`` and store the result of the sum in the target\n    params (in place).\n    See https://github.com/DLR-RM/stable-baselines3/issues/93\n\n    :param params: parameters to use to update the target params\n    :param target_params: parameters to update\n    :param tau: the soft update coefficient (\"Polyak update\", between 0 and 1)\n    \"\"\"", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "# zip does not raise an exception if length of parameters does not match.", "\n", "        ", "for", "param", ",", "target_param", "in", "zip_strict", "(", "params", ",", "target_params", ")", ":", "\n", "            ", "target_param", ".", "data", ".", "mul_", "(", "1", "-", "tau", ")", "\n", "th", ".", "add", "(", "target_param", ".", "data", ",", "param", ".", "data", ",", "alpha", "=", "tau", ",", "out", "=", "target_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.obs_as_tensor": [[440, 456], ["isinstance", "torch.as_tensor().to", "isinstance", "Exception", "torch.as_tensor", "torch.as_tensor().to", "obs.items", "torch.as_tensor", "type"], "function", ["None"], ["", "", "", "def", "obs_as_tensor", "(", "\n", "obs", ":", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "Union", "[", "str", ",", "int", "]", ",", "np", ".", "ndarray", "]", "]", ",", "device", ":", "th", ".", "device", "\n", ")", "->", "Union", "[", "th", ".", "Tensor", ",", "TensorDict", "]", ":", "\n", "    ", "\"\"\"\n    Moves the observation to the given device.\n\n    :param obs:\n    :param device: PyTorch device\n    :return: PyTorch tensor of the observation on a desired device.\n    \"\"\"", "\n", "if", "isinstance", "(", "obs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "th", ".", "as_tensor", "(", "obs", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "isinstance", "(", "obs", ",", "dict", ")", ":", "\n", "        ", "return", "{", "key", ":", "th", ".", "as_tensor", "(", "_obs", ")", ".", "to", "(", "device", ")", "for", "(", "key", ",", "_obs", ")", "in", "obs", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f\"Unrecognized type of observation {type(obs)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.should_collect_more_steps": [[458, 482], ["ValueError"], "function", ["None"], ["", "", "def", "should_collect_more_steps", "(", "\n", "train_freq", ":", "TrainFreq", ",", "\n", "num_collected_steps", ":", "int", ",", "\n", "num_collected_episodes", ":", "int", ",", "\n", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Helper used in ``collect_rollouts()`` of off-policy algorithms\n    to determine the termination condition.\n\n    :param train_freq: How much experience should be collected before updating the policy.\n    :param num_collected_steps: The number of already collected steps.\n    :param num_collected_episodes: The number of already collected episodes.\n    :return: Whether to continue or not collecting experience\n        by doing rollouts of the current policy.\n    \"\"\"", "\n", "if", "train_freq", ".", "unit", "==", "TrainFrequencyUnit", ".", "STEP", ":", "\n", "        ", "return", "num_collected_steps", "<", "train_freq", ".", "frequency", "\n", "\n", "", "elif", "train_freq", ".", "unit", "==", "TrainFrequencyUnit", ".", "EPISODE", ":", "\n", "        ", "return", "num_collected_episodes", "<", "train_freq", ".", "frequency", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The unit of the `train_freq` must be either TrainFrequencyUnit.STEP \"", "\n", "f\"or TrainFrequencyUnit.EPISODE not '{train_freq.unit}'!\"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_system_info": [[486, 509], ["env_info.items", "platform.python_version", "str", "print", "torch.cuda.is_available", "platform.platform", "platform.version"], "function", ["None"], ["", "", "def", "get_system_info", "(", "print_info", ":", "bool", "=", "True", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "str", "]", ",", "str", "]", ":", "\n", "    ", "\"\"\"\n    Retrieve system and python env info for the current system.\n\n    :param print_info: Whether to print or not those infos\n    :return: Dictionary summing up the version for each relevant package\n        and a formatted string.\n    \"\"\"", "\n", "env_info", "=", "{", "\n", "\"OS\"", ":", "f\"{platform.platform()} {platform.version()}\"", ",", "\n", "\"Python\"", ":", "platform", ".", "python_version", "(", ")", ",", "\n", "\"Stable-Baselines3\"", ":", "sb3", ".", "__version__", ",", "\n", "\"PyTorch\"", ":", "th", ".", "__version__", ",", "\n", "\"GPU Enabled\"", ":", "str", "(", "th", ".", "cuda", ".", "is_available", "(", ")", ")", ",", "\n", "\"Numpy\"", ":", "np", ".", "__version__", ",", "\n", "\"Gym\"", ":", "gym", ".", "__version__", ",", "\n", "}", "\n", "env_info_str", "=", "\"\"", "\n", "for", "key", ",", "value", "in", "env_info", ".", "items", "(", ")", ":", "\n", "        ", "env_info_str", "+=", "f\"{key}: {value}\\n\"", "\n", "", "if", "print_info", ":", "\n", "        ", "print", "(", "env_info_str", ")", "\n", "", "return", "env_info", ",", "env_info_str", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.__init__": [[31, 59], ["gym.Wrapper.__init__", "time.time", "monitor.ResultsWriter"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env", ":", "gym", ".", "Env", ",", "\n", "filename", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "allow_early_resets", ":", "bool", "=", "True", ",", "\n", "reset_keywords", ":", "Tuple", "[", "str", ",", "...", "]", "=", "(", ")", ",", "\n", "info_keywords", ":", "Tuple", "[", "str", ",", "...", "]", "=", "(", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", "=", "env", ")", "\n", "self", ".", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "            ", "self", ".", "results_writer", "=", "ResultsWriter", "(", "\n", "filename", ",", "\n", "header", "=", "{", "\"t_start\"", ":", "self", ".", "t_start", ",", "\"env_id\"", ":", "env", ".", "spec", "and", "env", ".", "spec", ".", "id", "}", ",", "\n", "extra_keys", "=", "reset_keywords", "+", "info_keywords", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "results_writer", "=", "None", "\n", "", "self", ".", "reset_keywords", "=", "reset_keywords", "\n", "self", ".", "info_keywords", "=", "info_keywords", "\n", "self", ".", "allow_early_resets", "=", "allow_early_resets", "\n", "self", ".", "rewards", "=", "None", "\n", "self", ".", "needs_reset", "=", "True", "\n", "self", ".", "episode_returns", "=", "[", "]", "\n", "self", ".", "episode_lengths", "=", "[", "]", "\n", "self", ".", "episode_times", "=", "[", "]", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "current_reset_info", "=", "{", "}", "# extra info about the current episode, that was passed in during reset()", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.reset": [[60, 80], ["monitor.Monitor.env.reset", "RuntimeError", "kwargs.get", "ValueError"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", "->", "GymObs", ":", "\n", "        ", "\"\"\"\n        Calls the Gym environment reset. Can only be called if the environment is over, or if allow_early_resets is True\n\n        :param kwargs: Extra keywords saved for the next episode. only if defined by reset_keywords\n        :return: the first observation of the environment\n        \"\"\"", "\n", "if", "not", "self", ".", "allow_early_resets", "and", "not", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Tried to reset an environment before done. If you want to allow early resets, \"", "\n", "\"wrap your env with Monitor(env, path, allow_early_resets=True)\"", "\n", ")", "\n", "", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "needs_reset", "=", "False", "\n", "for", "key", "in", "self", ".", "reset_keywords", ":", "\n", "            ", "value", "=", "kwargs", ".", "get", "(", "key", ")", "\n", "if", "value", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Expected you to pass keyword argument {key} into reset\"", ")", "\n", "", "self", ".", "current_reset_info", "[", "key", "]", "=", "value", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.step": [[81, 108], ["monitor.Monitor.env.step", "monitor.Monitor.rewards.append", "RuntimeError", "sum", "len", "monitor.Monitor.episode_returns.append", "monitor.Monitor.episode_lengths.append", "monitor.Monitor.episode_times.append", "ep_info.update", "round", "round", "monitor.Monitor.results_writer.write_row", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.ResultsWriter.write_row"], ["", "def", "step", "(", "self", ",", "action", ":", "Union", "[", "np", ".", "ndarray", ",", "int", "]", ")", "->", "GymStepReturn", ":", "\n", "        ", "\"\"\"\n        Step the environment with the given action\n\n        :param action: the action\n        :return: observation, reward, done, information\n        \"\"\"", "\n", "if", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to step environment that needs reset\"", ")", "\n", "", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "rewards", ".", "append", "(", "reward", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "needs_reset", "=", "True", "\n", "ep_rew", "=", "sum", "(", "self", ".", "rewards", ")", "\n", "ep_len", "=", "len", "(", "self", ".", "rewards", ")", "\n", "ep_info", "=", "{", "\"r\"", ":", "round", "(", "ep_rew", ",", "6", ")", ",", "\"l\"", ":", "ep_len", ",", "\"t\"", ":", "round", "(", "time", ".", "time", "(", ")", "-", "self", ".", "t_start", ",", "6", ")", "}", "\n", "for", "key", "in", "self", ".", "info_keywords", ":", "\n", "                ", "ep_info", "[", "key", "]", "=", "info", "[", "key", "]", "\n", "", "self", ".", "episode_returns", ".", "append", "(", "ep_rew", ")", "\n", "self", ".", "episode_lengths", ".", "append", "(", "ep_len", ")", "\n", "self", ".", "episode_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "t_start", ")", "\n", "ep_info", ".", "update", "(", "self", ".", "current_reset_info", ")", "\n", "if", "self", ".", "results_writer", ":", "\n", "                ", "self", ".", "results_writer", ".", "write_row", "(", "ep_info", ")", "\n", "", "info", "[", "\"episode\"", "]", "=", "ep_info", "\n", "", "self", ".", "total_steps", "+=", "1", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.close": [[109, 116], ["super().close", "monitor.Monitor.results_writer.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Closes the environment\n        \"\"\"", "\n", "super", "(", ")", ".", "close", "(", ")", "\n", "if", "self", ".", "results_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "results_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.get_total_steps": [[117, 124], ["None"], "methods", ["None"], ["", "", "def", "get_total_steps", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the total number of timesteps\n\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.get_episode_rewards": [[125, 132], ["None"], "methods", ["None"], ["", "def", "get_episode_rewards", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "\"\"\"\n        Returns the rewards of all the episodes\n\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "episode_returns", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.get_episode_lengths": [[133, 140], ["None"], "methods", ["None"], ["", "def", "get_episode_lengths", "(", "self", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        Returns the number of timesteps of all the episodes\n\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "episode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.get_episode_times": [[141, 148], ["None"], "methods", ["None"], ["", "def", "get_episode_times", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "\"\"\"\n        Returns the runtime in seconds of all the episodes\n\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "episode_times", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.ResultsWriter.__init__": [[168, 187], ["open", "monitor.ResultsWriter.file_handler.write", "csv.DictWriter", "monitor.ResultsWriter.logger.writeheader", "monitor.ResultsWriter.file_handler.flush", "os.path.join.endswith", "os.path.isdir", "os.path.join", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["def", "__init__", "(", "\n", "self", ",", "\n", "filename", ":", "str", "=", "\"\"", ",", "\n", "header", ":", "Optional", "[", "Dict", "[", "str", ",", "Union", "[", "float", ",", "str", "]", "]", "]", "=", "None", ",", "\n", "extra_keys", ":", "Tuple", "[", "str", ",", "...", "]", "=", "(", ")", ",", "\n", ")", ":", "\n", "        ", "if", "header", "is", "None", ":", "\n", "            ", "header", "=", "{", "}", "\n", "", "if", "not", "filename", ".", "endswith", "(", "Monitor", ".", "EXT", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "filename", ")", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "join", "(", "filename", ",", "Monitor", ".", "EXT", ")", "\n", "", "else", ":", "\n", "                ", "filename", "=", "filename", "+", "\".\"", "+", "Monitor", ".", "EXT", "\n", "# Prevent newline issue on Windows, see GH issue #692", "\n", "", "", "self", ".", "file_handler", "=", "open", "(", "filename", ",", "\"wt\"", ",", "newline", "=", "\"\\n\"", ")", "\n", "self", ".", "file_handler", ".", "write", "(", "\"#%s\\n\"", "%", "json", ".", "dumps", "(", "header", ")", ")", "\n", "self", ".", "logger", "=", "csv", ".", "DictWriter", "(", "self", ".", "file_handler", ",", "fieldnames", "=", "(", "\"r\"", ",", "\"l\"", ",", "\"t\"", ")", "+", "extra_keys", ")", "\n", "self", ".", "logger", ".", "writeheader", "(", ")", "\n", "self", ".", "file_handler", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.ResultsWriter.write_row": [[188, 197], ["monitor.ResultsWriter.logger.writerow", "monitor.ResultsWriter.file_handler.flush"], "methods", ["None"], ["", "def", "write_row", "(", "self", ",", "epinfo", ":", "Dict", "[", "str", ",", "Union", "[", "float", ",", "int", "]", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Close the file handler\n\n        :param epinfo: the information on episodic return, length, and time\n        \"\"\"", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "writerow", "(", "epinfo", ")", "\n", "self", ".", "file_handler", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.ResultsWriter.close": [[198, 203], ["monitor.ResultsWriter.file_handler.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Close the file handler\n        \"\"\"", "\n", "self", ".", "file_handler", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.get_monitor_files": [[205, 213], ["glob.glob", "os.path.join"], "function", ["None"], ["", "", "def", "get_monitor_files", "(", "path", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    get all the monitor files in the given path\n\n    :param path: the logging folder\n    :return: the log files\n    \"\"\"", "\n", "return", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"*\"", "+", "Monitor", ".", "EXT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.load_results": [[215, 240], ["monitor.get_monitor_files", "pandas.concat", "pandas.read_csv.sort_values", "pandas.read_csv.reset_index", "min", "len", "monitor.LoadMonitorResultsError", "data_frames.append", "open", "file_handler.readline", "json.loads", "pandas.read_csv", "headers.append"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.get_monitor_files", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.read_csv"], ["", "def", "load_results", "(", "path", ":", "str", ")", "->", "pandas", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n    Load all Monitor logs from a given directory path matching ``*monitor.csv``\n\n    :param path: the directory path containing the log file(s)\n    :return: the logged data\n    \"\"\"", "\n", "monitor_files", "=", "get_monitor_files", "(", "path", ")", "\n", "if", "len", "(", "monitor_files", ")", "==", "0", ":", "\n", "        ", "raise", "LoadMonitorResultsError", "(", "f\"No monitor files of the form *{Monitor.EXT} found in {path}\"", ")", "\n", "", "data_frames", ",", "headers", "=", "[", "]", ",", "[", "]", "\n", "for", "file_name", "in", "monitor_files", ":", "\n", "        ", "with", "open", "(", "file_name", ")", "as", "file_handler", ":", "\n", "            ", "first_line", "=", "file_handler", ".", "readline", "(", ")", "\n", "assert", "first_line", "[", "0", "]", "==", "\"#\"", "\n", "header", "=", "json", ".", "loads", "(", "first_line", "[", "1", ":", "]", ")", "\n", "data_frame", "=", "pandas", ".", "read_csv", "(", "file_handler", ",", "index_col", "=", "None", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "data_frame", "[", "\"t\"", "]", "+=", "header", "[", "\"t_start\"", "]", "\n", "", "data_frames", ".", "append", "(", "data_frame", ")", "\n", "", "data_frame", "=", "pandas", ".", "concat", "(", "data_frames", ")", "\n", "data_frame", ".", "sort_values", "(", "\"t\"", ",", "inplace", "=", "True", ")", "\n", "data_frame", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "data_frame", "[", "\"t\"", "]", "-=", "min", "(", "header", "[", "\"t_start\"", "]", "for", "header", "in", "headers", ")", "\n", "return", "data_frame", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy": [[11, 132], ["numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "stable_baselines3.common.vec_env.DummyVecEnv.reset", "numpy.ones", "numpy.mean", "numpy.std", "isinstance", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.is_vecenv_wrapped", "warnings.warn", "model.predict", "stable_baselines3.common.vec_env.DummyVecEnv.step", "range", "stable_baselines3.common.vec_env.DummyVecEnv.env_is_wrapped", "stable_baselines3.common.vec_env.DummyVecEnv.render", "range", "callback", "locals", "globals", "episode_rewards.append", "episode_lengths.append", "info.keys", "episode_rewards.append", "episode_lengths.append"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.is_vecenv_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render"], ["def", "evaluate_policy", "(", "\n", "model", ":", "\"base_class.BaseAlgorithm\"", ",", "\n", "env", ":", "Union", "[", "gym", ".", "Env", ",", "VecEnv", "]", ",", "\n", "n_eval_episodes", ":", "int", "=", "10", ",", "\n", "deterministic", ":", "bool", "=", "True", ",", "\n", "render", ":", "bool", "=", "False", ",", "\n", "callback", ":", "Optional", "[", "Callable", "[", "[", "Dict", "[", "str", ",", "Any", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ",", "None", "]", "]", "=", "None", ",", "\n", "reward_threshold", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "return_episode_rewards", ":", "bool", "=", "False", ",", "\n", "warn", ":", "bool", "=", "True", ",", "\n", ")", "->", "Union", "[", "Tuple", "[", "float", ",", "float", "]", ",", "Tuple", "[", "List", "[", "float", "]", ",", "List", "[", "int", "]", "]", "]", ":", "\n", "    ", "\"\"\"\n    Runs policy for ``n_eval_episodes`` episodes and returns average reward.\n    If a vector env is passed in, this divides the episodes to evaluate onto the\n    different elements of the vector env. This static division of work is done to\n    remove bias. See https://github.com/DLR-RM/stable-baselines3/issues/402 for more\n    details and discussion.\n\n    .. note::\n        If environment has not been wrapped with ``Monitor`` wrapper, reward and\n        episode lengths are counted as it appears with ``env.step`` calls. If\n        the environment contains wrappers that modify rewards or episode lengths\n        (e.g. reward scaling, early episode reset), these will affect the evaluation\n        results as well. You can avoid this by wrapping environment with ``Monitor``\n        wrapper before anything else.\n\n    :param model: The RL agent you want to evaluate.\n    :param env: The gym environment or ``VecEnv`` environment.\n    :param n_eval_episodes: Number of episode to evaluate the agent\n    :param deterministic: Whether to use deterministic or stochastic actions\n    :param render: Whether to render the environment or not\n    :param callback: callback function to do additional checks,\n        called after each step. Gets locals() and globals() passed as parameters.\n    :param reward_threshold: Minimum expected reward per episode,\n        this will raise an error if the performance is not met\n    :param return_episode_rewards: If True, a list of rewards and episode lengths\n        per episode will be returned instead of the mean.\n    :param warn: If True (default), warns user about lack of a Monitor wrapper in the\n        evaluation environment.\n    :return: Mean reward per episode, std of reward per episode.\n        Returns ([float], [int]) when ``return_episode_rewards`` is True, first\n        list containing per-episode rewards and second containing per-episode lengths\n        (in number of steps).\n    \"\"\"", "\n", "is_monitor_wrapped", "=", "False", "\n", "# Avoid circular import", "\n", "from", "stable_baselines3", ".", "common", ".", "monitor", "import", "Monitor", "\n", "\n", "if", "not", "isinstance", "(", "env", ",", "VecEnv", ")", ":", "\n", "        ", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "\n", "", "is_monitor_wrapped", "=", "is_vecenv_wrapped", "(", "env", ",", "VecMonitor", ")", "or", "env", ".", "env_is_wrapped", "(", "Monitor", ")", "[", "0", "]", "\n", "\n", "if", "not", "is_monitor_wrapped", "and", "warn", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"Evaluation environment is not wrapped with a ``Monitor`` wrapper. \"", "\n", "\"This may result in reporting modified episode lengths and rewards, if other wrappers happen to modify these. \"", "\n", "\"Consider wrapping environment first with ``Monitor`` wrapper.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "\n", "", "n_envs", "=", "env", ".", "num_envs", "\n", "episode_rewards", "=", "[", "]", "\n", "episode_lengths", "=", "[", "]", "\n", "\n", "episode_counts", "=", "np", ".", "zeros", "(", "n_envs", ",", "dtype", "=", "\"int\"", ")", "\n", "# Divides episodes among different sub environments in the vector as evenly as possible", "\n", "episode_count_targets", "=", "np", ".", "array", "(", "[", "(", "n_eval_episodes", "+", "i", ")", "//", "n_envs", "for", "i", "in", "range", "(", "n_envs", ")", "]", ",", "dtype", "=", "\"int\"", ")", "\n", "\n", "current_rewards", "=", "np", ".", "zeros", "(", "n_envs", ")", "\n", "current_lengths", "=", "np", ".", "zeros", "(", "n_envs", ",", "dtype", "=", "\"int\"", ")", "\n", "observations", "=", "env", ".", "reset", "(", ")", "\n", "states", "=", "None", "\n", "episode_starts", "=", "np", ".", "ones", "(", "(", "env", ".", "num_envs", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "while", "(", "episode_counts", "<", "episode_count_targets", ")", ".", "any", "(", ")", ":", "\n", "        ", "actions", ",", "states", "=", "model", ".", "predict", "(", "observations", ",", "state", "=", "states", ",", "episode_start", "=", "episode_starts", ",", "deterministic", "=", "deterministic", ")", "\n", "observations", ",", "rewards", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "actions", ")", "\n", "current_rewards", "+=", "rewards", "\n", "current_lengths", "+=", "1", "\n", "for", "i", "in", "range", "(", "n_envs", ")", ":", "\n", "            ", "if", "episode_counts", "[", "i", "]", "<", "episode_count_targets", "[", "i", "]", ":", "\n", "\n", "# unpack values so that the callback can access the local variables", "\n", "                ", "reward", "=", "rewards", "[", "i", "]", "\n", "done", "=", "dones", "[", "i", "]", "\n", "info", "=", "infos", "[", "i", "]", "\n", "episode_starts", "[", "i", "]", "=", "done", "\n", "\n", "if", "callback", "is", "not", "None", ":", "\n", "                    ", "callback", "(", "locals", "(", ")", ",", "globals", "(", ")", ")", "\n", "\n", "", "if", "dones", "[", "i", "]", ":", "\n", "                    ", "if", "is_monitor_wrapped", ":", "\n", "# Atari wrapper can send a \"done\" signal when", "\n", "# the agent loses a life, but it does not correspond", "\n", "# to the true end of episode", "\n", "                        ", "if", "\"episode\"", "in", "info", ".", "keys", "(", ")", ":", "\n", "# Do not trust \"done\" with episode endings.", "\n", "# Monitor wrapper includes \"episode\" key in info if environment", "\n", "# has been wrapped with it. Use those rewards instead.", "\n", "                            ", "episode_rewards", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"r\"", "]", ")", "\n", "episode_lengths", ".", "append", "(", "info", "[", "\"episode\"", "]", "[", "\"l\"", "]", ")", "\n", "# Only increment at the real end of an episode", "\n", "episode_counts", "[", "i", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "                        ", "episode_rewards", ".", "append", "(", "current_rewards", "[", "i", "]", ")", "\n", "episode_lengths", ".", "append", "(", "current_lengths", "[", "i", "]", ")", "\n", "episode_counts", "[", "i", "]", "+=", "1", "\n", "", "current_rewards", "[", "i", "]", "=", "0", "\n", "current_lengths", "[", "i", "]", "=", "0", "\n", "\n", "", "", "", "if", "render", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "\n", "", "", "mean_reward", "=", "np", ".", "mean", "(", "episode_rewards", ")", "\n", "std_reward", "=", "np", ".", "std", "(", "episode_rewards", ")", "\n", "if", "reward_threshold", "is", "not", "None", ":", "\n", "        ", "assert", "mean_reward", ">", "reward_threshold", ",", "\"Mean reward below threshold: \"", "f\"{mean_reward:.2f} < {reward_threshold:.2f}\"", "\n", "", "if", "return_episode_rewards", ":", "\n", "        ", "return", "episode_rewards", ",", "episode_lengths", "\n", "", "return", "mean_reward", ",", "std_reward", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.__init__": [[37, 56], ["abc.ABC.__init__", "stable_baselines3.common.preprocessing.get_obs_shape", "stable_baselines3.common.preprocessing.get_action_dim"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_obs_shape", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_action_dim"], ["def", "__init__", "(", "\n", "self", ",", "\n", "buffer_size", ":", "int", ",", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"cpu\"", ",", "\n", "n_envs", ":", "int", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "observation_space", "=", "observation_space", "\n", "self", ".", "action_space", "=", "action_space", "\n", "self", ".", "obs_shape", "=", "get_obs_shape", "(", "observation_space", ")", "\n", "\n", "self", ".", "action_dim", "=", "get_action_dim", "(", "action_space", ")", "\n", "self", ".", "pos", "=", "0", "\n", "self", ".", "full", "=", "False", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_envs", "=", "n_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.swap_and_flatten": [[57, 71], ["arr.swapaxes().reshape", "len", "arr.swapaxes"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "swap_and_flatten", "(", "arr", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Swap and then flatten axes 0 (buffer_size) and 1 (n_envs)\n        to convert shape from [n_steps, n_envs, ...] (when ... is the shape of the features)\n        to [n_steps * n_envs, ...] (which maintain the order)\n\n        :param arr:\n        :return:\n        \"\"\"", "\n", "shape", "=", "arr", ".", "shape", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "shape", "=", "shape", "+", "(", "1", ",", ")", "\n", "", "return", "arr", ".", "swapaxes", "(", "0", ",", "1", ")", ".", "reshape", "(", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", ",", "*", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.size": [[72, 79], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        :return: The current size of the buffer\n        \"\"\"", "\n", "if", "self", ".", "full", ":", "\n", "            ", "return", "self", ".", "buffer_size", "\n", "", "return", "self", ".", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.add": [[80, 85], ["NotImplementedError"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Add elements to the buffer.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.extend": [[86, 93], ["zip", "buffers.BaseBuffer.add"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add"], ["", "def", "extend", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Add a new batch of transitions to the buffer\n        \"\"\"", "\n", "# Do a for loop along the batch axis", "\n", "for", "data", "in", "zip", "(", "*", "args", ")", ":", "\n", "            ", "self", ".", "add", "(", "*", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.reset": [[94, 100], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Reset the buffer.\n        \"\"\"", "\n", "self", ".", "pos", "=", "0", "\n", "self", ".", "full", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.sample": [[101, 111], ["numpy.random.randint", "buffers.BaseBuffer._get_samples"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer._get_samples"], ["", "def", "sample", "(", "self", ",", "batch_size", ":", "int", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_size: Number of element to sample\n        :param env: associated gym VecEnv\n            to normalize the observations/rewards when sampling\n        :return:\n        \"\"\"", "\n", "upper_bound", "=", "self", ".", "buffer_size", "if", "self", ".", "full", "else", "self", ".", "pos", "\n", "batch_inds", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "upper_bound", ",", "size", "=", "batch_size", ")", "\n", "return", "self", ".", "_get_samples", "(", "batch_inds", ",", "env", "=", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer._get_samples": [[112, 122], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_get_samples", "(", "\n", "self", ",", "batch_inds", ":", "np", ".", "ndarray", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", "\n", ")", "->", "Union", "[", "ReplayBufferSamples", ",", "RolloutBufferSamples", "]", ":", "\n", "        ", "\"\"\"\n        :param batch_inds:\n        :param env:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch": [[123, 136], ["torch.as_tensor().to", "torch.tensor().to", "torch.as_tensor", "torch.tensor"], "methods", ["None"], ["", "def", "to_torch", "(", "self", ",", "array", ":", "np", ".", "ndarray", ",", "copy", ":", "bool", "=", "True", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Convert a numpy array to a PyTorch tensor.\n        Note: it copies the data by default\n\n        :param array:\n        :param copy: Whether to copy or not the data\n            (may be useful to avoid changing things be reference)\n        :return:\n        \"\"\"", "\n", "if", "copy", ":", "\n", "            ", "return", "th", ".", "tensor", "(", "array", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "return", "th", ".", "as_tensor", "(", "array", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer._normalize_obs": [[137, 145], ["env.normalize_obs"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs"], ["", "@", "staticmethod", "\n", "def", "_normalize_obs", "(", "\n", "obs", ":", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ",", "\n", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ",", "\n", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "if", "env", "is", "not", "None", ":", "\n", "            ", "return", "env", ".", "normalize_obs", "(", "obs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer._normalize_reward": [[146, 151], ["env.normalize_reward().astype", "env.normalize_reward"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_reward"], ["", "@", "staticmethod", "\n", "def", "_normalize_reward", "(", "reward", ":", "np", ".", "ndarray", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "if", "env", "is", "not", "None", ":", "\n", "            ", "return", "env", ".", "normalize_reward", "(", "reward", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.ReplayBuffer.__init__": [[172, 222], ["buffers.BaseBuffer.__init__", "max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "psutil.virtual_memory", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["def", "__init__", "(", "\n", "self", ",", "\n", "buffer_size", ":", "int", ",", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"cpu\"", ",", "\n", "n_envs", ":", "int", "=", "1", ",", "\n", "optimize_memory_usage", ":", "bool", "=", "False", ",", "\n", "handle_timeout_termination", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "buffer_size", ",", "observation_space", ",", "action_space", ",", "device", ",", "n_envs", "=", "n_envs", ")", "\n", "\n", "# Adjust buffer size", "\n", "self", ".", "buffer_size", "=", "max", "(", "buffer_size", "//", "n_envs", ",", "1", ")", "\n", "\n", "# Check that the replay buffer can fit into the memory", "\n", "if", "psutil", "is", "not", "None", ":", "\n", "            ", "mem_available", "=", "psutil", ".", "virtual_memory", "(", ")", ".", "available", "\n", "\n", "", "self", ".", "optimize_memory_usage", "=", "optimize_memory_usage", "\n", "\n", "self", ".", "observations", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", "+", "self", ".", "obs_shape", ",", "dtype", "=", "observation_space", ".", "dtype", ")", "\n", "\n", "if", "optimize_memory_usage", ":", "\n", "# `observations` contains also the next observation", "\n", "            ", "self", ".", "next_observations", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "next_observations", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", "+", "self", ".", "obs_shape", ",", "dtype", "=", "observation_space", ".", "dtype", ")", "\n", "\n", "", "self", ".", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ",", "self", ".", "action_dim", ")", ",", "dtype", "=", "action_space", ".", "dtype", ")", "\n", "\n", "self", ".", "rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "dones", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# Handle timeouts termination properly if needed", "\n", "# see https://github.com/DLR-RM/stable-baselines3/issues/284", "\n", "self", ".", "handle_timeout_termination", "=", "handle_timeout_termination", "\n", "self", ".", "timeouts", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "psutil", "is", "not", "None", ":", "\n", "            ", "total_memory_usage", "=", "self", ".", "observations", ".", "nbytes", "+", "self", ".", "actions", ".", "nbytes", "+", "self", ".", "rewards", ".", "nbytes", "+", "self", ".", "dones", ".", "nbytes", "\n", "\n", "if", "self", ".", "next_observations", "is", "not", "None", ":", "\n", "                ", "total_memory_usage", "+=", "self", ".", "next_observations", ".", "nbytes", "\n", "\n", "", "if", "total_memory_usage", ">", "mem_available", ":", "\n", "# Convert to GB", "\n", "                ", "total_memory_usage", "/=", "1e9", "\n", "mem_available", "/=", "1e9", "\n", "warnings", ".", "warn", "(", "\n", "\"This system does not have apparently enough memory to store the complete \"", "\n", "f\"replay buffer {total_memory_usage:.2f}GB > {mem_available:.2f}GB\"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.ReplayBuffer.add": [[225, 264], ["isinstance", "isinstance", "numpy.array().copy", "numpy.array().copy", "numpy.array().copy", "numpy.array().copy", "obs.reshape.reshape.reshape", "next_obs.reshape.reshape.reshape", "action.reshape.reshape.reshape", "numpy.array().copy", "numpy.array().copy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "info.get"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get"], ["", "", "", "def", "add", "(", "\n", "self", ",", "\n", "obs", ":", "np", ".", "ndarray", ",", "\n", "next_obs", ":", "np", ".", "ndarray", ",", "\n", "action", ":", "np", ".", "ndarray", ",", "\n", "reward", ":", "np", ".", "ndarray", ",", "\n", "done", ":", "np", ".", "ndarray", ",", "\n", "infos", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", ")", "->", "None", ":", "\n", "\n", "# Reshape needed when using multiple envs with discrete observations", "\n", "# as numpy cannot broadcast (n_discrete,) to (n_discrete, 1)", "\n", "        ", "if", "isinstance", "(", "self", ".", "observation_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "            ", "obs", "=", "obs", ".", "reshape", "(", "(", "self", ".", "n_envs", ",", ")", "+", "self", ".", "obs_shape", ")", "\n", "next_obs", "=", "next_obs", ".", "reshape", "(", "(", "self", ".", "n_envs", ",", ")", "+", "self", ".", "obs_shape", ")", "\n", "\n", "# Same, for actions", "\n", "", "if", "isinstance", "(", "self", ".", "action_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "            ", "action", "=", "action", ".", "reshape", "(", "(", "self", ".", "n_envs", ",", "self", ".", "action_dim", ")", ")", "\n", "\n", "# Copy to avoid modification by reference", "\n", "", "self", ".", "observations", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "obs", ")", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "optimize_memory_usage", ":", "\n", "            ", "self", ".", "observations", "[", "(", "self", ".", "pos", "+", "1", ")", "%", "self", ".", "buffer_size", "]", "=", "np", ".", "array", "(", "next_obs", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "next_observations", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "next_obs", ")", ".", "copy", "(", ")", "\n", "\n", "", "self", ".", "actions", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "action", ")", ".", "copy", "(", ")", "\n", "self", ".", "rewards", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "reward", ")", ".", "copy", "(", ")", "\n", "self", ".", "dones", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "done", ")", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "handle_timeout_termination", ":", "\n", "            ", "self", ".", "timeouts", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "[", "info", ".", "get", "(", "\"TimeLimit.truncated\"", ",", "False", ")", "for", "info", "in", "infos", "]", ")", "\n", "\n", "", "self", ".", "pos", "+=", "1", "\n", "if", "self", ".", "pos", "==", "self", ".", "buffer_size", ":", "\n", "            ", "self", ".", "full", "=", "True", "\n", "self", ".", "pos", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.ReplayBuffer.sample": [[265, 286], ["buffers.ReplayBuffer._get_samples", "buffers.BaseBuffer.sample", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer._get_samples", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "def", "sample", "(", "self", ",", "batch_size", ":", "int", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "ReplayBufferSamples", ":", "\n", "        ", "\"\"\"\n        Sample elements from the replay buffer.\n        Custom sampling when using memory efficient variant,\n        as we should not sample the element with index `self.pos`\n        See https://github.com/DLR-RM/stable-baselines3/pull/28#issuecomment-637559274\n\n        :param batch_size: Number of element to sample\n        :param env: associated gym VecEnv\n            to normalize the observations/rewards when sampling\n        :return:\n        \"\"\"", "\n", "if", "not", "self", ".", "optimize_memory_usage", ":", "\n", "            ", "return", "super", "(", ")", ".", "sample", "(", "batch_size", "=", "batch_size", ",", "env", "=", "env", ")", "\n", "# Do not sample the element with index `self.pos` as the transitions is invalid", "\n", "# (we use only one array to store `obs` and `next_obs`)", "\n", "", "if", "self", ".", "full", ":", "\n", "            ", "batch_inds", "=", "(", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "buffer_size", ",", "size", "=", "batch_size", ")", "+", "self", ".", "pos", ")", "%", "self", ".", "buffer_size", "\n", "", "else", ":", "\n", "            ", "batch_inds", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "pos", ",", "size", "=", "batch_size", ")", "\n", "", "return", "self", ".", "_get_samples", "(", "batch_inds", ",", "env", "=", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.ReplayBuffer._get_samples": [[287, 306], ["numpy.random.randint", "stable_baselines3.common.type_aliases.ReplayBufferSamples", "buffers.ReplayBuffer._normalize_obs", "buffers.ReplayBuffer._normalize_obs", "buffers.ReplayBuffer._normalize_obs", "buffers.ReplayBuffer._normalize_reward", "buffers.ReplayBuffer.rewards[].reshape", "tuple", "len", "map"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer._normalize_reward"], ["", "def", "_get_samples", "(", "self", ",", "batch_inds", ":", "np", ".", "ndarray", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "ReplayBufferSamples", ":", "\n", "# Sample randomly the env idx", "\n", "        ", "env_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "high", "=", "self", ".", "n_envs", ",", "size", "=", "(", "len", "(", "batch_inds", ")", ",", ")", ")", "\n", "\n", "if", "self", ".", "optimize_memory_usage", ":", "\n", "            ", "next_obs", "=", "self", ".", "_normalize_obs", "(", "self", ".", "observations", "[", "(", "batch_inds", "+", "1", ")", "%", "self", ".", "buffer_size", ",", "env_indices", ",", ":", "]", ",", "env", ")", "\n", "", "else", ":", "\n", "            ", "next_obs", "=", "self", ".", "_normalize_obs", "(", "self", ".", "next_observations", "[", "batch_inds", ",", "env_indices", ",", ":", "]", ",", "env", ")", "\n", "\n", "", "data", "=", "(", "\n", "self", ".", "_normalize_obs", "(", "self", ".", "observations", "[", "batch_inds", ",", "env_indices", ",", ":", "]", ",", "env", ")", ",", "\n", "self", ".", "actions", "[", "batch_inds", ",", "env_indices", ",", ":", "]", ",", "\n", "next_obs", ",", "\n", "# Only use dones that are not due to timeouts", "\n", "# deactivated by default (timeouts is initialized as an array of False)", "\n", "(", "self", ".", "dones", "[", "batch_inds", ",", "env_indices", "]", "*", "(", "1", "-", "self", ".", "timeouts", "[", "batch_inds", ",", "env_indices", "]", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "self", ".", "_normalize_reward", "(", "self", ".", "rewards", "[", "batch_inds", ",", "env_indices", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "env", ")", ",", "\n", ")", "\n", "return", "ReplayBufferSamples", "(", "*", "tuple", "(", "map", "(", "self", ".", "to_torch", ",", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.RolloutBuffer.__init__": [[331, 349], ["buffers.BaseBuffer.__init__", "buffers.RolloutBuffer.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "buffer_size", ":", "int", ",", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"cpu\"", ",", "\n", "gae_lambda", ":", "float", "=", "1", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "n_envs", ":", "int", "=", "1", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "buffer_size", ",", "observation_space", ",", "action_space", ",", "device", ",", "n_envs", "=", "n_envs", ")", "\n", "self", ".", "gae_lambda", "=", "gae_lambda", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "observations", ",", "self", ".", "actions", ",", "self", ".", "rewards", ",", "self", ".", "advantages", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "self", ".", "returns", ",", "self", ".", "episode_starts", ",", "self", ".", "values", ",", "self", ".", "log_probs", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "self", ".", "generator_ready", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.RolloutBuffer.reset": [[350, 362], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "buffers.BaseBuffer.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "\n", "        ", "self", ".", "observations", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", "+", "self", ".", "obs_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ",", "self", ".", "action_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "returns", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "episode_starts", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "values", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "log_probs", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "advantages", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "generator_ready", "=", "False", "\n", "super", "(", ")", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.RolloutBuffer.compute_returns_and_advantage": [[363, 399], ["last_values.clone().cpu().numpy().flatten.clone().cpu().numpy().flatten.clone().cpu().numpy().flatten", "reversed", "range", "last_values.clone().cpu().numpy().flatten.clone().cpu().numpy().flatten.clone().cpu().numpy", "last_values.clone().cpu().numpy().flatten.clone().cpu().numpy().flatten.clone().cpu", "last_values.clone().cpu().numpy().flatten.clone().cpu().numpy().flatten.clone"], "methods", ["None"], ["", "def", "compute_returns_and_advantage", "(", "self", ",", "last_values", ":", "th", ".", "Tensor", ",", "dones", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Post-processing step: compute the lambda-return (TD(lambda) estimate)\n        and GAE(lambda) advantage.\n\n        Uses Generalized Advantage Estimation (https://arxiv.org/abs/1506.02438)\n        to compute the advantage. To obtain Monte-Carlo advantage estimate (A(s) = R - V(S))\n        where R is the sum of discounted reward with value bootstrap\n        (because we don't always have full episode), set ``gae_lambda=1.0`` during initialization.\n\n        The TD(lambda) estimator has also two special cases:\n        - TD(1) is Monte-Carlo estimate (sum of discounted rewards)\n        - TD(0) is one-step estimate with bootstrapping (r_t + gamma * v(s_{t+1}))\n\n        For more information, see discussion in https://github.com/DLR-RM/stable-baselines3/pull/375.\n\n        :param last_values: state value estimation for the last step (one for each env)\n        :param dones: if the last step was a terminal step (one bool for each env).\n        \"\"\"", "\n", "# Convert to numpy", "\n", "last_values", "=", "last_values", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n", "last_gae_lam", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "buffer_size", ")", ")", ":", "\n", "            ", "if", "step", "==", "self", ".", "buffer_size", "-", "1", ":", "\n", "                ", "next_non_terminal", "=", "1.0", "-", "dones", "\n", "next_values", "=", "last_values", "\n", "", "else", ":", "\n", "                ", "next_non_terminal", "=", "1.0", "-", "self", ".", "episode_starts", "[", "step", "+", "1", "]", "\n", "next_values", "=", "self", ".", "values", "[", "step", "+", "1", "]", "\n", "", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "self", ".", "gamma", "*", "next_values", "*", "next_non_terminal", "-", "self", ".", "values", "[", "step", "]", "\n", "last_gae_lam", "=", "delta", "+", "self", ".", "gamma", "*", "self", ".", "gae_lambda", "*", "next_non_terminal", "*", "last_gae_lam", "\n", "self", ".", "advantages", "[", "step", "]", "=", "last_gae_lam", "\n", "# TD(lambda) estimator, see Github PR #375 or \"Telescoping in TD(lambda)\"", "\n", "# in David Silver Lecture 4: https://www.youtube.com/watch?v=PnHCvfgC_ZA", "\n", "", "self", ".", "returns", "=", "self", ".", "advantages", "+", "self", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.RolloutBuffer.add": [[400, 437], ["isinstance", "numpy.array().copy", "numpy.array().copy", "numpy.array().copy", "numpy.array().copy", "value.clone().cpu().numpy().flatten", "log_prob.reshape.reshape.clone().cpu().numpy", "len", "log_prob.reshape.reshape.reshape", "obs.reshape.reshape.reshape", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "value.clone().cpu().numpy", "log_prob.reshape.reshape.clone().cpu", "value.clone().cpu", "log_prob.reshape.reshape.clone", "value.clone"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["", "def", "add", "(", "\n", "self", ",", "\n", "obs", ":", "np", ".", "ndarray", ",", "\n", "action", ":", "np", ".", "ndarray", ",", "\n", "reward", ":", "np", ".", "ndarray", ",", "\n", "episode_start", ":", "np", ".", "ndarray", ",", "\n", "value", ":", "th", ".", "Tensor", ",", "\n", "log_prob", ":", "th", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        :param obs: Observation\n        :param action: Action\n        :param reward:\n        :param episode_start: Start of episode signal.\n        :param value: estimated value of the current state\n            following the current policy.\n        :param log_prob: log probability of the action\n            following the current policy.\n        \"\"\"", "\n", "if", "len", "(", "log_prob", ".", "shape", ")", "==", "0", ":", "\n", "# Reshape 0-d tensor to avoid error", "\n", "            ", "log_prob", "=", "log_prob", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Reshape needed when using multiple envs with discrete observations", "\n", "# as numpy cannot broadcast (n_discrete,) to (n_discrete, 1)", "\n", "", "if", "isinstance", "(", "self", ".", "observation_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "            ", "obs", "=", "obs", ".", "reshape", "(", "(", "self", ".", "n_envs", ",", ")", "+", "self", ".", "obs_shape", ")", "\n", "\n", "", "self", ".", "observations", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "obs", ")", ".", "copy", "(", ")", "\n", "self", ".", "actions", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "action", ")", ".", "copy", "(", ")", "\n", "self", ".", "rewards", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "reward", ")", ".", "copy", "(", ")", "\n", "self", ".", "episode_starts", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "episode_start", ")", ".", "copy", "(", ")", "\n", "self", ".", "values", "[", "self", ".", "pos", "]", "=", "value", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "self", ".", "log_probs", "[", "self", ".", "pos", "]", "=", "log_prob", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "pos", "+=", "1", "\n", "if", "self", ".", "pos", "==", "self", ".", "buffer_size", ":", "\n", "            ", "self", ".", "full", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.RolloutBuffer.get": [[438, 465], ["numpy.random.permutation", "buffers.RolloutBuffer.swap_and_flatten", "buffers.RolloutBuffer._get_samples"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.swap_and_flatten", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer._get_samples"], ["", "", "def", "get", "(", "self", ",", "batch_size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Generator", "[", "RolloutBufferSamples", ",", "None", ",", "None", "]", ":", "\n", "        ", "assert", "self", ".", "full", ",", "\"\"", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "buffer_size", "*", "self", ".", "n_envs", ")", "\n", "# Prepare the data", "\n", "if", "not", "self", ".", "generator_ready", ":", "\n", "\n", "            ", "_tensor_names", "=", "[", "\n", "\"observations\"", ",", "\n", "\"actions\"", ",", "\n", "\"values\"", ",", "\n", "\"log_probs\"", ",", "\n", "\"advantages\"", ",", "\n", "\"returns\"", ",", "\n", "]", "\n", "\n", "for", "tensor", "in", "_tensor_names", ":", "\n", "                ", "self", ".", "__dict__", "[", "tensor", "]", "=", "self", ".", "swap_and_flatten", "(", "self", ".", "__dict__", "[", "tensor", "]", ")", "\n", "", "self", ".", "generator_ready", "=", "True", "\n", "\n", "# Return everything, don't create minibatches", "\n", "", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "buffer_size", "*", "self", ".", "n_envs", "\n", "\n", "", "start_idx", "=", "0", "\n", "while", "start_idx", "<", "self", ".", "buffer_size", "*", "self", ".", "n_envs", ":", "\n", "            ", "yield", "self", ".", "_get_samples", "(", "indices", "[", "start_idx", ":", "start_idx", "+", "batch_size", "]", ")", "\n", "start_idx", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.RolloutBuffer._get_samples": [[466, 476], ["stable_baselines3.common.type_aliases.RolloutBufferSamples", "buffers.RolloutBuffer.values[].flatten", "buffers.RolloutBuffer.log_probs[].flatten", "buffers.RolloutBuffer.advantages[].flatten", "buffers.RolloutBuffer.returns[].flatten", "tuple", "map"], "methods", ["None"], ["", "", "def", "_get_samples", "(", "self", ",", "batch_inds", ":", "np", ".", "ndarray", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "RolloutBufferSamples", ":", "\n", "        ", "data", "=", "(", "\n", "self", ".", "observations", "[", "batch_inds", "]", ",", "\n", "self", ".", "actions", "[", "batch_inds", "]", ",", "\n", "self", ".", "values", "[", "batch_inds", "]", ".", "flatten", "(", ")", ",", "\n", "self", ".", "log_probs", "[", "batch_inds", "]", ".", "flatten", "(", ")", ",", "\n", "self", ".", "advantages", "[", "batch_inds", "]", ".", "flatten", "(", ")", ",", "\n", "self", ".", "returns", "[", "batch_inds", "]", ".", "flatten", "(", ")", ",", "\n", ")", "\n", "return", "RolloutBufferSamples", "(", "*", "tuple", "(", "map", "(", "self", ".", "to_torch", ",", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictReplayBuffer.__init__": [[495, 555], ["buffers.ReplayBuffer.__init__", "isinstance", "max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "buffers.DictReplayBuffer.observations.items", "psutil.virtual_memory", "buffers.DictReplayBuffer.obs_shape.items", "buffers.DictReplayBuffer.obs_shape.items", "buffers.DictReplayBuffer.observations.items", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["def", "__init__", "(", "\n", "self", ",", "\n", "buffer_size", ":", "int", ",", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"cpu\"", ",", "\n", "n_envs", ":", "int", "=", "1", ",", "\n", "optimize_memory_usage", ":", "bool", "=", "False", ",", "\n", "handle_timeout_termination", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ReplayBuffer", ",", "self", ")", ".", "__init__", "(", "buffer_size", ",", "observation_space", ",", "action_space", ",", "device", ",", "n_envs", "=", "n_envs", ")", "\n", "\n", "assert", "isinstance", "(", "self", ".", "obs_shape", ",", "dict", ")", ",", "\"DictReplayBuffer must be used with Dict obs space only\"", "\n", "self", ".", "buffer_size", "=", "max", "(", "buffer_size", "//", "n_envs", ",", "1", ")", "\n", "\n", "# Check that the replay buffer can fit into the memory", "\n", "if", "psutil", "is", "not", "None", ":", "\n", "            ", "mem_available", "=", "psutil", ".", "virtual_memory", "(", ")", ".", "available", "\n", "\n", "", "assert", "optimize_memory_usage", "is", "False", ",", "\"DictReplayBuffer does not support optimize_memory_usage\"", "\n", "# disabling as this adds quite a bit of complexity", "\n", "# https://github.com/DLR-RM/stable-baselines3/pull/243#discussion_r531535702", "\n", "self", ".", "optimize_memory_usage", "=", "optimize_memory_usage", "\n", "\n", "self", ".", "observations", "=", "{", "\n", "key", ":", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", "+", "_obs_shape", ",", "dtype", "=", "observation_space", "[", "key", "]", ".", "dtype", ")", "\n", "for", "key", ",", "_obs_shape", "in", "self", ".", "obs_shape", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "next_observations", "=", "{", "\n", "key", ":", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", "+", "_obs_shape", ",", "dtype", "=", "observation_space", "[", "key", "]", ".", "dtype", ")", "\n", "for", "key", ",", "_obs_shape", "in", "self", ".", "obs_shape", ".", "items", "(", ")", "\n", "}", "\n", "\n", "self", ".", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ",", "self", ".", "action_dim", ")", ",", "dtype", "=", "action_space", ".", "dtype", ")", "\n", "self", ".", "rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "dones", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Handle timeouts termination properly if needed", "\n", "# see https://github.com/DLR-RM/stable-baselines3/issues/284", "\n", "self", ".", "handle_timeout_termination", "=", "handle_timeout_termination", "\n", "self", ".", "timeouts", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "psutil", "is", "not", "None", ":", "\n", "            ", "obs_nbytes", "=", "0", "\n", "for", "_", ",", "obs", "in", "self", ".", "observations", ".", "items", "(", ")", ":", "\n", "                ", "obs_nbytes", "+=", "obs", ".", "nbytes", "\n", "\n", "", "total_memory_usage", "=", "obs_nbytes", "+", "self", ".", "actions", ".", "nbytes", "+", "self", ".", "rewards", ".", "nbytes", "+", "self", ".", "dones", ".", "nbytes", "\n", "if", "self", ".", "next_observations", "is", "not", "None", ":", "\n", "                ", "next_obs_nbytes", "=", "0", "\n", "for", "_", ",", "obs", "in", "self", ".", "observations", ".", "items", "(", ")", ":", "\n", "                    ", "next_obs_nbytes", "+=", "obs", ".", "nbytes", "\n", "", "total_memory_usage", "+=", "next_obs_nbytes", "\n", "\n", "", "if", "total_memory_usage", ">", "mem_available", ":", "\n", "# Convert to GB", "\n", "                ", "total_memory_usage", "/=", "1e9", "\n", "mem_available", "/=", "1e9", "\n", "warnings", ".", "warn", "(", "\n", "\"This system does not have apparently enough memory to store the complete \"", "\n", "f\"replay buffer {total_memory_usage:.2f}GB > {mem_available:.2f}GB\"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictReplayBuffer.add": [[558, 595], ["buffers.DictReplayBuffer.observations.keys", "buffers.DictReplayBuffer.next_observations.keys", "isinstance", "numpy.array().copy", "numpy.array().copy", "numpy.array().copy", "isinstance", "numpy.array", "isinstance", "numpy.array().copy", "action.reshape.reshape.reshape", "numpy.array", "obs[].reshape", "next_obs[].reshape", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "info.get"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get"], ["", "", "", "def", "add", "(", "\n", "self", ",", "\n", "obs", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "next_obs", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "action", ":", "np", ".", "ndarray", ",", "\n", "reward", ":", "np", ".", "ndarray", ",", "\n", "done", ":", "np", ".", "ndarray", ",", "\n", "infos", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", ")", "->", "None", ":", "\n", "# Copy to avoid modification by reference", "\n", "        ", "for", "key", "in", "self", ".", "observations", ".", "keys", "(", ")", ":", "\n", "# Reshape needed when using multiple envs with discrete observations", "\n", "# as numpy cannot broadcast (n_discrete,) to (n_discrete, 1)", "\n", "            ", "if", "isinstance", "(", "self", ".", "observation_space", ".", "spaces", "[", "key", "]", ",", "spaces", ".", "Discrete", ")", ":", "\n", "                ", "obs", "[", "key", "]", "=", "obs", "[", "key", "]", ".", "reshape", "(", "(", "self", ".", "n_envs", ",", ")", "+", "self", ".", "obs_shape", "[", "key", "]", ")", "\n", "", "self", ".", "observations", "[", "key", "]", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "obs", "[", "key", "]", ")", "\n", "\n", "", "for", "key", "in", "self", ".", "next_observations", ".", "keys", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "observation_space", ".", "spaces", "[", "key", "]", ",", "spaces", ".", "Discrete", ")", ":", "\n", "                ", "next_obs", "[", "key", "]", "=", "next_obs", "[", "key", "]", ".", "reshape", "(", "(", "self", ".", "n_envs", ",", ")", "+", "self", ".", "obs_shape", "[", "key", "]", ")", "\n", "", "self", ".", "next_observations", "[", "key", "]", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "next_obs", "[", "key", "]", ")", ".", "copy", "(", ")", "\n", "\n", "# Same reshape, for actions", "\n", "", "if", "isinstance", "(", "self", ".", "action_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "            ", "action", "=", "action", ".", "reshape", "(", "(", "self", ".", "n_envs", ",", "self", ".", "action_dim", ")", ")", "\n", "\n", "", "self", ".", "actions", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "action", ")", ".", "copy", "(", ")", "\n", "self", ".", "rewards", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "reward", ")", ".", "copy", "(", ")", "\n", "self", ".", "dones", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "done", ")", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "handle_timeout_termination", ":", "\n", "            ", "self", ".", "timeouts", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "[", "info", ".", "get", "(", "\"TimeLimit.truncated\"", ",", "False", ")", "for", "info", "in", "infos", "]", ")", "\n", "\n", "", "self", ".", "pos", "+=", "1", "\n", "if", "self", ".", "pos", "==", "self", ".", "buffer_size", ":", "\n", "            ", "self", ".", "full", "=", "True", "\n", "self", ".", "pos", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictReplayBuffer.sample": [[596, 606], ["buffers.ReplayBuffer.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "def", "sample", "(", "self", ",", "batch_size", ":", "int", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "DictReplayBufferSamples", ":", "\n", "        ", "\"\"\"\n        Sample elements from the replay buffer.\n\n        :param batch_size: Number of element to sample\n        :param env: associated gym VecEnv\n            to normalize the observations/rewards when sampling\n        :return:\n        \"\"\"", "\n", "return", "super", "(", "ReplayBuffer", ",", "self", ")", ".", "sample", "(", "batch_size", "=", "batch_size", ",", "env", "=", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictReplayBuffer._get_samples": [[607, 631], ["numpy.random.randint", "buffers.DictReplayBuffer._normalize_obs", "buffers.DictReplayBuffer._normalize_obs", "stable_baselines3.common.type_aliases.DictReplayBufferSamples", "buffers.DictReplayBuffer.to_torch", "buffers.DictReplayBuffer.to_torch", "buffers.DictReplayBuffer.items", "buffers.DictReplayBuffer.items", "buffers.DictReplayBuffer.to_torch", "buffers.DictReplayBuffer.to_torch().reshape", "buffers.DictReplayBuffer.to_torch", "len", "buffers.DictReplayBuffer.observations.items", "buffers.DictReplayBuffer.next_observations.items", "buffers.DictReplayBuffer._normalize_reward", "buffers.DictReplayBuffer.to_torch", "buffers.DictReplayBuffer.rewards[].reshape"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer._normalize_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch"], ["", "def", "_get_samples", "(", "self", ",", "batch_inds", ":", "np", ".", "ndarray", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "DictReplayBufferSamples", ":", "\n", "# Sample randomly the env idx", "\n", "        ", "env_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "high", "=", "self", ".", "n_envs", ",", "size", "=", "(", "len", "(", "batch_inds", ")", ",", ")", ")", "\n", "\n", "# Normalize if needed and remove extra dimension (we are using only one env for now)", "\n", "obs_", "=", "self", ".", "_normalize_obs", "(", "{", "key", ":", "obs", "[", "batch_inds", ",", "env_indices", ",", ":", "]", "for", "key", ",", "obs", "in", "self", ".", "observations", ".", "items", "(", ")", "}", ",", "env", ")", "\n", "next_obs_", "=", "self", ".", "_normalize_obs", "(", "\n", "{", "key", ":", "obs", "[", "batch_inds", ",", "env_indices", ",", ":", "]", "for", "key", ",", "obs", "in", "self", ".", "next_observations", ".", "items", "(", ")", "}", ",", "env", "\n", ")", "\n", "\n", "# Convert to torch tensor", "\n", "observations", "=", "{", "key", ":", "self", ".", "to_torch", "(", "obs", ")", "for", "key", ",", "obs", "in", "obs_", ".", "items", "(", ")", "}", "\n", "next_observations", "=", "{", "key", ":", "self", ".", "to_torch", "(", "obs", ")", "for", "key", ",", "obs", "in", "next_obs_", ".", "items", "(", ")", "}", "\n", "\n", "return", "DictReplayBufferSamples", "(", "\n", "observations", "=", "observations", ",", "\n", "actions", "=", "self", ".", "to_torch", "(", "self", ".", "actions", "[", "batch_inds", ",", "env_indices", "]", ")", ",", "\n", "next_observations", "=", "next_observations", ",", "\n", "# Only use dones that are not due to timeouts", "\n", "# deactivated by default (timeouts is initialized as an array of False)", "\n", "dones", "=", "self", ".", "to_torch", "(", "self", ".", "dones", "[", "batch_inds", ",", "env_indices", "]", "*", "(", "1", "-", "self", ".", "timeouts", "[", "batch_inds", ",", "env_indices", "]", ")", ")", ".", "reshape", "(", "\n", "-", "1", ",", "1", "\n", ")", ",", "\n", "rewards", "=", "self", ".", "to_torch", "(", "self", ".", "_normalize_reward", "(", "self", ".", "rewards", "[", "batch_inds", ",", "env_indices", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "env", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.__init__": [[659, 680], ["buffers.RolloutBuffer.__init__", "isinstance", "buffers.DictRolloutBuffer.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "buffer_size", ":", "int", ",", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "device", ":", "Union", "[", "th", ".", "device", ",", "str", "]", "=", "\"cpu\"", ",", "\n", "gae_lambda", ":", "float", "=", "1", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "n_envs", ":", "int", "=", "1", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "RolloutBuffer", ",", "self", ")", ".", "__init__", "(", "buffer_size", ",", "observation_space", ",", "action_space", ",", "device", ",", "n_envs", "=", "n_envs", ")", "\n", "\n", "assert", "isinstance", "(", "self", ".", "obs_shape", ",", "dict", ")", ",", "\"DictRolloutBuffer must be used with Dict obs space only\"", "\n", "\n", "self", ".", "gae_lambda", "=", "gae_lambda", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "observations", ",", "self", ".", "actions", ",", "self", ".", "rewards", ",", "self", ".", "advantages", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "self", ".", "returns", ",", "self", ".", "episode_starts", ",", "self", ".", "values", ",", "self", ".", "log_probs", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "self", ".", "generator_ready", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.reset": [[681, 695], ["isinstance", "buffers.DictRolloutBuffer.obs_shape.items", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "buffers.RolloutBuffer.reset", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "assert", "isinstance", "(", "self", ".", "obs_shape", ",", "dict", ")", ",", "\"DictRolloutBuffer must be used with Dict obs space only\"", "\n", "self", ".", "observations", "=", "{", "}", "\n", "for", "key", ",", "obs_input_shape", "in", "self", ".", "obs_shape", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "observations", "[", "key", "]", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", "+", "obs_input_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "self", ".", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ",", "self", ".", "action_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "returns", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "episode_starts", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "values", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "log_probs", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "advantages", "=", "np", ".", "zeros", "(", "(", "self", ".", "buffer_size", ",", "self", ".", "n_envs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "generator_ready", "=", "False", "\n", "super", "(", "RolloutBuffer", ",", "self", ")", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add": [[696, 735], ["buffers.DictRolloutBuffer.observations.keys", "numpy.array().copy", "numpy.array().copy", "numpy.array().copy", "value.clone().cpu().numpy().flatten", "log_prob.reshape.reshape.clone().cpu().numpy", "len", "log_prob.reshape.reshape.reshape", "numpy.array().copy", "isinstance", "obs_.reshape.reshape.reshape", "numpy.array", "numpy.array", "numpy.array", "value.clone().cpu().numpy", "log_prob.reshape.reshape.clone().cpu", "numpy.array", "value.clone().cpu", "log_prob.reshape.reshape.clone", "value.clone"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["", "def", "add", "(", "\n", "self", ",", "\n", "obs", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "action", ":", "np", ".", "ndarray", ",", "\n", "reward", ":", "np", ".", "ndarray", ",", "\n", "episode_start", ":", "np", ".", "ndarray", ",", "\n", "value", ":", "th", ".", "Tensor", ",", "\n", "log_prob", ":", "th", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        :param obs: Observation\n        :param action: Action\n        :param reward:\n        :param episode_start: Start of episode signal.\n        :param value: estimated value of the current state\n            following the current policy.\n        :param log_prob: log probability of the action\n            following the current policy.\n        \"\"\"", "\n", "if", "len", "(", "log_prob", ".", "shape", ")", "==", "0", ":", "\n", "# Reshape 0-d tensor to avoid error", "\n", "            ", "log_prob", "=", "log_prob", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "for", "key", "in", "self", ".", "observations", ".", "keys", "(", ")", ":", "\n", "            ", "obs_", "=", "np", ".", "array", "(", "obs", "[", "key", "]", ")", ".", "copy", "(", ")", "\n", "# Reshape needed when using multiple envs with discrete observations", "\n", "# as numpy cannot broadcast (n_discrete,) to (n_discrete, 1)", "\n", "if", "isinstance", "(", "self", ".", "observation_space", ".", "spaces", "[", "key", "]", ",", "spaces", ".", "Discrete", ")", ":", "\n", "                ", "obs_", "=", "obs_", ".", "reshape", "(", "(", "self", ".", "n_envs", ",", ")", "+", "self", ".", "obs_shape", "[", "key", "]", ")", "\n", "", "self", ".", "observations", "[", "key", "]", "[", "self", ".", "pos", "]", "=", "obs_", "\n", "\n", "", "self", ".", "actions", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "action", ")", ".", "copy", "(", ")", "\n", "self", ".", "rewards", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "reward", ")", ".", "copy", "(", ")", "\n", "self", ".", "episode_starts", "[", "self", ".", "pos", "]", "=", "np", ".", "array", "(", "episode_start", ")", ".", "copy", "(", ")", "\n", "self", ".", "values", "[", "self", ".", "pos", "]", "=", "value", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "self", ".", "log_probs", "[", "self", ".", "pos", "]", "=", "log_prob", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "pos", "+=", "1", "\n", "if", "self", ".", "pos", "==", "self", ".", "buffer_size", ":", "\n", "            ", "self", ".", "full", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.get": [[736, 759], ["numpy.random.permutation", "buffers.DictRolloutBuffer.observations.items", "buffers.DictRolloutBuffer.swap_and_flatten", "buffers.DictRolloutBuffer.swap_and_flatten", "buffers.DictRolloutBuffer._get_samples"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.swap_and_flatten", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.swap_and_flatten", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer._get_samples"], ["", "", "def", "get", "(", "self", ",", "batch_size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Generator", "[", "DictRolloutBufferSamples", ",", "None", ",", "None", "]", ":", "\n", "        ", "assert", "self", ".", "full", ",", "\"\"", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "buffer_size", "*", "self", ".", "n_envs", ")", "\n", "# Prepare the data", "\n", "if", "not", "self", ".", "generator_ready", ":", "\n", "\n", "            ", "for", "key", ",", "obs", "in", "self", ".", "observations", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "observations", "[", "key", "]", "=", "self", ".", "swap_and_flatten", "(", "obs", ")", "\n", "\n", "", "_tensor_names", "=", "[", "\"actions\"", ",", "\"values\"", ",", "\"log_probs\"", ",", "\"advantages\"", ",", "\"returns\"", "]", "\n", "\n", "for", "tensor", "in", "_tensor_names", ":", "\n", "                ", "self", ".", "__dict__", "[", "tensor", "]", "=", "self", ".", "swap_and_flatten", "(", "self", ".", "__dict__", "[", "tensor", "]", ")", "\n", "", "self", ".", "generator_ready", "=", "True", "\n", "\n", "# Return everything, don't create minibatches", "\n", "", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "buffer_size", "*", "self", ".", "n_envs", "\n", "\n", "", "start_idx", "=", "0", "\n", "while", "start_idx", "<", "self", ".", "buffer_size", "*", "self", ".", "n_envs", ":", "\n", "            ", "yield", "self", ".", "_get_samples", "(", "indices", "[", "start_idx", ":", "start_idx", "+", "batch_size", "]", ")", "\n", "start_idx", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer._get_samples": [[760, 769], ["stable_baselines3.common.type_aliases.DictRolloutBufferSamples", "buffers.DictRolloutBuffer.to_torch", "buffers.DictRolloutBuffer.to_torch", "buffers.DictRolloutBuffer.to_torch", "buffers.DictRolloutBuffer.to_torch", "buffers.DictRolloutBuffer.to_torch", "buffers.DictRolloutBuffer.to_torch", "buffers.DictRolloutBuffer.values[].flatten", "buffers.DictRolloutBuffer.log_probs[].flatten", "buffers.DictRolloutBuffer.advantages[].flatten", "buffers.DictRolloutBuffer.returns[].flatten", "buffers.DictRolloutBuffer.observations.items"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.to_torch"], ["", "", "def", "_get_samples", "(", "self", ",", "batch_inds", ":", "np", ".", "ndarray", ",", "env", ":", "Optional", "[", "VecNormalize", "]", "=", "None", ")", "->", "DictRolloutBufferSamples", ":", "\n", "\n", "        ", "return", "DictRolloutBufferSamples", "(", "\n", "observations", "=", "{", "key", ":", "self", ".", "to_torch", "(", "obs", "[", "batch_inds", "]", ")", "for", "(", "key", ",", "obs", ")", "in", "self", ".", "observations", ".", "items", "(", ")", "}", ",", "\n", "actions", "=", "self", ".", "to_torch", "(", "self", ".", "actions", "[", "batch_inds", "]", ")", ",", "\n", "old_values", "=", "self", ".", "to_torch", "(", "self", ".", "values", "[", "batch_inds", "]", ".", "flatten", "(", ")", ")", ",", "\n", "old_log_prob", "=", "self", ".", "to_torch", "(", "self", ".", "log_probs", "[", "batch_inds", "]", ".", "flatten", "(", ")", ")", ",", "\n", "advantages", "=", "self", ".", "to_torch", "(", "self", ".", "advantages", "[", "batch_inds", "]", ".", "flatten", "(", ")", ")", ",", "\n", "returns", "=", "self", ".", "to_torch", "(", "self", ".", "returns", "[", "batch_inds", "]", ".", "flatten", "(", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sb2_compat.rmsprop_tf_like.RMSpropTFLike.__init__": [[46, 69], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "params", ":", "Iterable", "[", "torch", ".", "nn", ".", "Parameter", "]", ",", "\n", "lr", ":", "float", "=", "1e-2", ",", "\n", "alpha", ":", "float", "=", "0.99", ",", "\n", "eps", ":", "float", "=", "1e-8", ",", "\n", "weight_decay", ":", "float", "=", "0", ",", "\n", "momentum", ":", "float", "=", "0", ",", "\n", "centered", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid learning rate: {lr}\"", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid epsilon value: {eps}\"", ")", "\n", "", "if", "not", "0.0", "<=", "momentum", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid momentum value: {momentum}\"", ")", "\n", "", "if", "not", "0.0", "<=", "weight_decay", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid weight_decay value: {weight_decay}\"", ")", "\n", "", "if", "not", "0.0", "<=", "alpha", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid alpha value: {alpha}\"", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "alpha", "=", "alpha", ",", "eps", "=", "eps", ",", "centered", "=", "centered", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sb2_compat.rmsprop_tf_like.RMSpropTFLike.__setstate__": [[70, 75], ["super().__setstate__", "group.setdefault", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "\"momentum\"", ",", "0", ")", "\n", "group", ".", "setdefault", "(", "\"centered\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.sb2_compat.rmsprop_tf_like.RMSpropTFLike.step": [[76, 137], ["torch.no_grad", "torch.enable_grad", "closure", "square_avg.mul_().addcmul_", "RuntimeError", "len", "torch.ones_like", "grad.add.add.add", "grad_avg.mul_().add_", "square_avg.addcmul().add_().sqrt_", "square_avg.add().sqrt_", "buf.mul_().addcdiv_", "p.add_", "p.addcdiv_", "torch.zeros_like", "torch.zeros_like", "square_avg.mul_", "grad_avg.mul_", "square_avg.addcmul().add_", "square_avg.add", "buf.mul_", "square_avg.addcmul"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", ":", "Optional", "[", "Callable", "[", "[", "]", ",", "None", "]", "]", "=", "None", ")", "->", "Optional", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        :param closure: A closure that reevaluates the model\n            and returns the loss.\n        :return: loss\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"RMSpropTF does not support sparse gradients\"", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "\"step\"", "]", "=", "0", "\n", "# PyTorch initialized to zeros here", "\n", "state", "[", "\"square_avg\"", "]", "=", "torch", ".", "ones_like", "(", "p", ",", "memory_format", "=", "torch", ".", "preserve_format", ")", "\n", "if", "group", "[", "\"momentum\"", "]", ">", "0", ":", "\n", "                        ", "state", "[", "\"momentum_buffer\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ",", "memory_format", "=", "torch", ".", "preserve_format", ")", "\n", "", "if", "group", "[", "\"centered\"", "]", ":", "\n", "                        ", "state", "[", "\"grad_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ",", "memory_format", "=", "torch", ".", "preserve_format", ")", "\n", "\n", "", "", "square_avg", "=", "state", "[", "\"square_avg\"", "]", "\n", "alpha", "=", "group", "[", "\"alpha\"", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "\n", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "p", ",", "alpha", "=", "group", "[", "\"weight_decay\"", "]", ")", "\n", "\n", "", "square_avg", ".", "mul_", "(", "alpha", ")", ".", "addcmul_", "(", "grad", ",", "grad", ",", "value", "=", "1", "-", "alpha", ")", "\n", "\n", "if", "group", "[", "\"centered\"", "]", ":", "\n", "                    ", "grad_avg", "=", "state", "[", "\"grad_avg\"", "]", "\n", "grad_avg", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "grad", ",", "alpha", "=", "1", "-", "alpha", ")", "\n", "# PyTorch added epsilon after square root", "\n", "# avg = square_avg.addcmul(grad_avg, grad_avg, value=-1).sqrt_().add_(group['eps'])", "\n", "avg", "=", "square_avg", ".", "addcmul", "(", "grad_avg", ",", "grad_avg", ",", "value", "=", "-", "1", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", ".", "sqrt_", "(", ")", "\n", "", "else", ":", "\n", "# PyTorch added epsilon after square root", "\n", "# avg = square_avg.sqrt().add_(group['eps'])", "\n", "                    ", "avg", "=", "square_avg", ".", "add", "(", "group", "[", "\"eps\"", "]", ")", ".", "sqrt_", "(", ")", "\n", "\n", "", "if", "group", "[", "\"momentum\"", "]", ">", "0", ":", "\n", "                    ", "buf", "=", "state", "[", "\"momentum_buffer\"", "]", "\n", "buf", ".", "mul_", "(", "group", "[", "\"momentum\"", "]", ")", ".", "addcdiv_", "(", "grad", ",", "avg", ")", "\n", "p", ".", "add_", "(", "buf", ",", "alpha", "=", "-", "group", "[", "\"lr\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "addcdiv_", "(", "grad", ",", "avg", ",", "value", "=", "-", "group", "[", "\"lr\"", "]", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.__init__": [[30, 104], ["gym.GoalEnv.__init__", "gym.spaces.MultiBinary", "numpy.ones", "gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Dict", "gym.spaces.Dict", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.MultiBinary", "gym.spaces.MultiBinary", "gym.spaces.MultiBinary"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_bits", ":", "int", "=", "10", ",", "\n", "continuous", ":", "bool", "=", "False", ",", "\n", "max_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "discrete_obs_space", ":", "bool", "=", "False", ",", "\n", "image_obs_space", ":", "bool", "=", "False", ",", "\n", "channel_first", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Shape of the observation when using image space", "\n", "self", ".", "image_shape", "=", "(", "1", ",", "36", ",", "36", ")", "if", "channel_first", "else", "(", "36", ",", "36", ",", "1", ")", "\n", "# The achieved goal is determined by the current state", "\n", "# here, it is a special where they are equal", "\n", "if", "discrete_obs_space", ":", "\n", "# In the discrete case, the agent act on the binary", "\n", "# representation of the observation", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"observation\"", ":", "spaces", ".", "Discrete", "(", "2", "**", "n_bits", ")", ",", "\n", "\"achieved_goal\"", ":", "spaces", ".", "Discrete", "(", "2", "**", "n_bits", ")", ",", "\n", "\"desired_goal\"", ":", "spaces", ".", "Discrete", "(", "2", "**", "n_bits", ")", ",", "\n", "}", "\n", ")", "\n", "", "elif", "image_obs_space", ":", "\n", "# When using image as input,", "\n", "# one image contains the bits 0 -> 0, 1 -> 255", "\n", "# and the rest is filled with zeros", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"observation\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "self", ".", "image_shape", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", ",", "\n", "\"achieved_goal\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "self", ".", "image_shape", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", ",", "\n", "\"desired_goal\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "self", ".", "image_shape", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", ",", "\n", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"observation\"", ":", "spaces", ".", "MultiBinary", "(", "n_bits", ")", ",", "\n", "\"achieved_goal\"", ":", "spaces", ".", "MultiBinary", "(", "n_bits", ")", ",", "\n", "\"desired_goal\"", ":", "spaces", ".", "MultiBinary", "(", "n_bits", ")", ",", "\n", "}", "\n", ")", "\n", "\n", "", "self", ".", "obs_space", "=", "spaces", ".", "MultiBinary", "(", "n_bits", ")", "\n", "\n", "if", "continuous", ":", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "-", "1", ",", "1", ",", "shape", "=", "(", "n_bits", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "n_bits", ")", "\n", "", "self", ".", "continuous", "=", "continuous", "\n", "self", ".", "discrete_obs_space", "=", "discrete_obs_space", "\n", "self", ".", "image_obs_space", "=", "image_obs_space", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "desired_goal", "=", "np", ".", "ones", "(", "(", "n_bits", ",", ")", ")", "\n", "if", "max_steps", "is", "None", ":", "\n", "            ", "max_steps", "=", "n_bits", "\n", "", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "current_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.seed": [[105, 107], ["bit_flipping_env.BitFlippingEnv.obs_space.seed"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed"], ["", "def", "seed", "(", "self", ",", "seed", ":", "int", ")", "->", "None", ":", "\n", "        ", "self", ".", "obs_space", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.convert_if_needed": [[108, 125], ["int", "numpy.prod", "numpy.concatenate", "numpy.concatenate.reshape().astype", "sum", "numpy.zeros", "numpy.concatenate.reshape", "range", "len", "len"], "methods", ["None"], ["", "def", "convert_if_needed", "(", "self", ",", "state", ":", "np", ".", "ndarray", ")", "->", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Convert to discrete space if needed.\n\n        :param state:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "discrete_obs_space", ":", "\n", "# The internal state is the binary representation of the", "\n", "# observed one", "\n", "            ", "return", "int", "(", "sum", "(", "state", "[", "i", "]", "*", "2", "**", "i", "for", "i", "in", "range", "(", "len", "(", "state", ")", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "image_obs_space", ":", "\n", "            ", "size", "=", "np", ".", "prod", "(", "self", ".", "image_shape", ")", "\n", "image", "=", "np", ".", "concatenate", "(", "(", "state", "*", "255", ",", "np", ".", "zeros", "(", "size", "-", "len", "(", "state", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", ")", "\n", "return", "image", ".", "reshape", "(", "self", ".", "image_shape", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.convert_to_bit_vector": [[126, 145], ["isinstance", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array().reshape.reshape", "numpy.array", "numpy.arange", "len", "len"], "methods", ["None"], ["", "def", "convert_to_bit_vector", "(", "self", ",", "state", ":", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ",", "batch_size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Convert to bit vector if needed.\n\n        :param state:\n        :param batch_size:\n        :return:\n        \"\"\"", "\n", "# Convert back to bit vector", "\n", "if", "isinstance", "(", "state", ",", "int", ")", ":", "\n", "            ", "state", "=", "np", ".", "array", "(", "state", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "# Convert to binary representation", "\n", "state", "=", "(", "(", "state", "[", ":", ",", ":", "]", "&", "(", "1", "<<", "np", ".", "arange", "(", "len", "(", "self", ".", "state", ")", ")", ")", ")", ">", "0", ")", ".", "astype", "(", "int", ")", "\n", "", "elif", "self", ".", "image_obs_space", ":", "\n", "            ", "state", "=", "state", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "[", ":", ",", ":", "len", "(", "self", ".", "state", ")", "]", "/", "255", "\n", "", "else", ":", "\n", "            ", "state", "=", "np", ".", "array", "(", "state", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv._get_obs": [[146, 157], ["collections.OrderedDict", "bit_flipping_env.BitFlippingEnv.convert_if_needed", "bit_flipping_env.BitFlippingEnv.convert_if_needed", "bit_flipping_env.BitFlippingEnv.convert_if_needed", "bit_flipping_env.BitFlippingEnv.state.copy", "bit_flipping_env.BitFlippingEnv.state.copy", "bit_flipping_env.BitFlippingEnv.desired_goal.copy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.convert_if_needed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.convert_if_needed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.convert_if_needed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["", "def", "_get_obs", "(", "self", ")", "->", "Dict", "[", "str", ",", "Union", "[", "int", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"\n        Helper to create the observation.\n\n        :return: The current observation.\n        \"\"\"", "\n", "return", "OrderedDict", "(", "\n", "[", "\n", "(", "\"observation\"", ",", "self", ".", "convert_if_needed", "(", "self", ".", "state", ".", "copy", "(", ")", ")", ")", ",", "\n", "(", "\"achieved_goal\"", ",", "self", ".", "convert_if_needed", "(", "self", ".", "state", ".", "copy", "(", ")", ")", ")", ",", "\n", "(", "\"desired_goal\"", ",", "self", ".", "convert_if_needed", "(", "self", ".", "desired_goal", ".", "copy", "(", ")", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.reset": [[160, 164], ["bit_flipping_env.BitFlippingEnv.obs_space.sample", "bit_flipping_env.BitFlippingEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv._get_obs"], ["", "def", "reset", "(", "self", ")", "->", "Dict", "[", "str", ",", "Union", "[", "int", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "self", ".", "current_step", "=", "0", "\n", "self", ".", "state", "=", "self", ".", "obs_space", ".", "sample", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.step": [[165, 178], ["bit_flipping_env.BitFlippingEnv._get_obs", "float", "bit_flipping_env.BitFlippingEnv.compute_reward"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv._get_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.compute_reward"], ["", "def", "step", "(", "self", ",", "action", ":", "Union", "[", "np", ".", "ndarray", ",", "int", "]", ")", "->", "GymStepReturn", ":", "\n", "        ", "if", "self", ".", "continuous", ":", "\n", "            ", "self", ".", "state", "[", "action", ">", "0", "]", "=", "1", "-", "self", ".", "state", "[", "action", ">", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "state", "[", "action", "]", "=", "1", "-", "self", ".", "state", "[", "action", "]", "\n", "", "obs", "=", "self", ".", "_get_obs", "(", ")", "\n", "reward", "=", "float", "(", "self", ".", "compute_reward", "(", "obs", "[", "\"achieved_goal\"", "]", ",", "obs", "[", "\"desired_goal\"", "]", ",", "None", ")", ")", "\n", "done", "=", "reward", "==", "0", "\n", "self", ".", "current_step", "+=", "1", "\n", "# Episode terminate when we reached the goal or the max number of steps", "\n", "info", "=", "{", "\"is_success\"", ":", "done", "}", "\n", "done", "=", "done", "or", "self", ".", "current_step", ">=", "self", ".", "max_steps", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.compute_reward": [[179, 197], ["isinstance", "bit_flipping_env.BitFlippingEnv.convert_to_bit_vector", "bit_flipping_env.BitFlippingEnv.convert_to_bit_vector", "numpy.linalg.norm", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.convert_to_bit_vector", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.convert_to_bit_vector"], ["", "def", "compute_reward", "(", "\n", "self", ",", "achieved_goal", ":", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ",", "desired_goal", ":", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ",", "_info", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "\n", ")", "->", "np", ".", "float32", ":", "\n", "# As we are using a vectorized version, we need to keep track of the `batch_size`", "\n", "        ", "if", "isinstance", "(", "achieved_goal", ",", "int", ")", ":", "\n", "            ", "batch_size", "=", "1", "\n", "", "elif", "self", ".", "image_obs_space", ":", "\n", "            ", "batch_size", "=", "achieved_goal", ".", "shape", "[", "0", "]", "if", "len", "(", "achieved_goal", ".", "shape", ")", ">", "3", "else", "1", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "achieved_goal", ".", "shape", "[", "0", "]", "if", "len", "(", "achieved_goal", ".", "shape", ")", ">", "1", "else", "1", "\n", "\n", "", "desired_goal", "=", "self", ".", "convert_to_bit_vector", "(", "desired_goal", ",", "batch_size", ")", "\n", "achieved_goal", "=", "self", ".", "convert_to_bit_vector", "(", "achieved_goal", ",", "batch_size", ")", "\n", "\n", "# Deceptive reward: it is positive only when the goal is achieved", "\n", "# Here we are using a vectorized version", "\n", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "achieved_goal", "-", "desired_goal", ",", "axis", "=", "-", "1", ")", "\n", "return", "-", "(", "distance", ">", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.render": [[198, 202], ["print", "bit_flipping_env.BitFlippingEnv.state.copy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"human\"", ")", "->", "Optional", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "if", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "return", "self", ".", "state", ".", "copy", "(", ")", "\n", "", "print", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.bit_flipping_env.BitFlippingEnv.close": [[203, 205], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnv.__init__": [[11, 34], ["identity_env.IdentityEnv.reset", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["    ", "def", "__init__", "(", "self", ",", "dim", ":", "Optional", "[", "int", "]", "=", "None", ",", "space", ":", "Optional", "[", "Space", "]", "=", "None", ",", "ep_length", ":", "int", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Identity environment for testing purposes\n\n        :param dim: the size of the action and observation dimension you want\n            to learn. Provide at most one of ``dim`` and ``space``. If both are\n            None, then initialization proceeds with ``dim=1`` and ``space=None``.\n        :param space: the action and observation space. Provide at most one of\n            ``dim`` and ``space``.\n        :param ep_length: the length of each episode in timesteps\n        \"\"\"", "\n", "if", "space", "is", "None", ":", "\n", "            ", "if", "dim", "is", "None", ":", "\n", "                ", "dim", "=", "1", "\n", "", "space", "=", "Discrete", "(", "dim", ")", "\n", "", "else", ":", "\n", "            ", "assert", "dim", "is", "None", ",", "\"arguments for both 'dim' and 'space' provided: at most one allowed\"", "\n", "\n", "", "self", ".", "action_space", "=", "self", ".", "observation_space", "=", "space", "\n", "self", ".", "ep_length", "=", "ep_length", "\n", "self", ".", "current_step", "=", "0", "\n", "self", ".", "num_resets", "=", "-", "1", "# Becomes 0 after __init__ exits.", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnv.reset": [[35, 40], ["identity_env.IdentityEnv._choose_next_state"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv._choose_next_state"], ["", "def", "reset", "(", "self", ")", "->", "GymObs", ":", "\n", "        ", "self", ".", "current_step", "=", "0", "\n", "self", ".", "num_resets", "+=", "1", "\n", "self", ".", "_choose_next_state", "(", ")", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnv.step": [[41, 47], ["identity_env.IdentityEnv._get_reward", "identity_env.IdentityEnv._choose_next_state"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnvBox._get_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv._choose_next_state"], ["", "def", "step", "(", "self", ",", "action", ":", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ")", "->", "GymStepReturn", ":", "\n", "        ", "reward", "=", "self", ".", "_get_reward", "(", "action", ")", "\n", "self", ".", "_choose_next_state", "(", ")", "\n", "self", ".", "current_step", "+=", "1", "\n", "done", "=", "self", ".", "current_step", ">=", "self", ".", "ep_length", "\n", "return", "self", ".", "state", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnv._choose_next_state": [[48, 50], ["identity_env.IdentityEnv.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "_choose_next_state", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "action_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnv._get_reward": [[51, 53], ["numpy.all"], "methods", ["None"], ["", "def", "_get_reward", "(", "self", ",", "action", ":", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ")", "->", "float", ":", "\n", "        ", "return", "1.0", "if", "np", ".", "all", "(", "self", ".", "state", "==", "action", ")", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnv.render": [[54, 56], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"human\"", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnvBox.__init__": [[59, 71], ["gym.spaces.Box", "identity_env.IdentityEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "low", ":", "float", "=", "-", "1.0", ",", "high", ":", "float", "=", "1.0", ",", "eps", ":", "float", "=", "0.05", ",", "ep_length", ":", "int", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Identity environment for testing purposes\n\n        :param low: the lower bound of the box dim\n        :param high: the upper bound of the box dim\n        :param eps: the epsilon bound for correct value\n        :param ep_length: the length of each episode in timesteps\n        \"\"\"", "\n", "space", "=", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "super", "(", ")", ".", "__init__", "(", "ep_length", "=", "ep_length", ",", "space", "=", "space", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnvBox.step": [[72, 78], ["identity_env.IdentityEnvBox._get_reward", "identity_env.IdentityEnvBox._choose_next_state"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnvBox._get_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv._choose_next_state"], ["", "def", "step", "(", "self", ",", "action", ":", "np", ".", "ndarray", ")", "->", "GymStepReturn", ":", "\n", "        ", "reward", "=", "self", ".", "_get_reward", "(", "action", ")", "\n", "self", ".", "_choose_next_state", "(", ")", "\n", "self", ".", "current_step", "+=", "1", "\n", "done", "=", "self", ".", "current_step", ">=", "self", ".", "ep_length", "\n", "return", "self", ".", "state", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnvBox._get_reward": [[79, 81], ["None"], "methods", ["None"], ["", "def", "_get_reward", "(", "self", ",", "action", ":", "np", ".", "ndarray", ")", "->", "float", ":", "\n", "        ", "return", "1.0", "if", "(", "self", ".", "state", "-", "self", ".", "eps", ")", "<=", "action", "<=", "(", "self", ".", "state", "+", "self", ".", "eps", ")", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnvMultiDiscrete.__init__": [[84, 93], ["gym.spaces.MultiDiscrete", "identity_env.IdentityEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ":", "int", "=", "1", ",", "ep_length", ":", "int", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Identity environment for testing purposes\n\n        :param dim: the size of the dimensions you want to learn\n        :param ep_length: the length of each episode in timesteps\n        \"\"\"", "\n", "space", "=", "MultiDiscrete", "(", "[", "dim", ",", "dim", "]", ")", "\n", "super", "(", ")", ".", "__init__", "(", "ep_length", "=", "ep_length", ",", "space", "=", "space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.IdentityEnvMultiBinary.__init__": [[96, 105], ["gym.spaces.MultiBinary", "identity_env.IdentityEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ":", "int", "=", "1", ",", "ep_length", ":", "int", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Identity environment for testing purposes\n\n        :param dim: the size of the dimensions you want to learn\n        :param ep_length: the length of each episode in timesteps\n        \"\"\"", "\n", "space", "=", "MultiBinary", "(", "dim", ")", "\n", "super", "(", ")", ".", "__init__", "(", "ep_length", "=", "ep_length", ",", "space", "=", "space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.FakeImageEnv.__init__": [[119, 138], ["gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Box"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "action_dim", ":", "int", "=", "6", ",", "\n", "screen_height", ":", "int", "=", "84", ",", "\n", "screen_width", ":", "int", "=", "84", ",", "\n", "n_channels", ":", "int", "=", "1", ",", "\n", "discrete", ":", "bool", "=", "True", ",", "\n", "channel_first", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "observation_shape", "=", "(", "screen_height", ",", "screen_width", ",", "n_channels", ")", "\n", "if", "channel_first", ":", "\n", "            ", "self", ".", "observation_shape", "=", "(", "n_channels", ",", "screen_height", ",", "screen_width", ")", "\n", "", "self", ".", "observation_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "self", ".", "observation_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "discrete", ":", "\n", "            ", "self", ".", "action_space", "=", "Discrete", "(", "action_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_space", "=", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "5", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "self", ".", "ep_length", "=", "10", "\n", "self", ".", "current_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.FakeImageEnv.reset": [[139, 142], ["identity_env.FakeImageEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "self", ".", "current_step", "=", "0", "\n", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.FakeImageEnv.step": [[143, 148], ["identity_env.FakeImageEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "step", "(", "self", ",", "action", ":", "Union", "[", "np", ".", "ndarray", ",", "int", "]", ")", "->", "GymStepReturn", ":", "\n", "        ", "reward", "=", "0.0", "\n", "self", ".", "current_step", "+=", "1", "\n", "done", "=", "self", ".", "current_step", ">=", "self", ".", "ep_length", "\n", "return", "self", ".", "observation_space", ".", "sample", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.identity_env.FakeImageEnv.render": [[149, 151], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"human\"", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.__init__": [[37, 79], ["gym.Env.__init__", "gym.spaces.Dict", "multi_input_envs.SimpleMultiObsEnv.init_possible_transitions", "multi_input_envs.SimpleMultiObsEnv.init_state_mapping", "gym.spaces.Discrete", "gym.spaces.Box", "len", "gym.spaces.Box", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.init_possible_transitions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.init_state_mapping"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_col", ":", "int", "=", "4", ",", "\n", "num_row", ":", "int", "=", "4", ",", "\n", "random_start", ":", "bool", "=", "True", ",", "\n", "discrete_actions", ":", "bool", "=", "True", ",", "\n", "channel_last", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vector_size", "=", "5", "\n", "if", "channel_last", ":", "\n", "            ", "self", ".", "img_size", "=", "[", "64", ",", "64", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_size", "=", "[", "1", ",", "64", ",", "64", "]", "\n", "\n", "", "self", ".", "random_start", "=", "random_start", "\n", "self", ".", "discrete_actions", "=", "discrete_actions", "\n", "if", "discrete_actions", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "0", ",", "1", ",", "(", "4", ",", ")", ")", "\n", "\n", "", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Dict", "(", "\n", "spaces", "=", "{", "\n", "\"vec\"", ":", "gym", ".", "spaces", ".", "Box", "(", "0", ",", "1", ",", "(", "self", ".", "vector_size", ",", ")", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "\"img\"", ":", "gym", ".", "spaces", ".", "Box", "(", "0", ",", "255", ",", "self", ".", "img_size", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "}", "\n", ")", "\n", "self", ".", "count", "=", "0", "\n", "# Timeout", "\n", "self", ".", "max_count", "=", "100", "\n", "self", ".", "log", "=", "\"\"", "\n", "self", ".", "state", "=", "0", "\n", "self", ".", "action2str", "=", "[", "\"left\"", ",", "\"down\"", ",", "\"right\"", ",", "\"up\"", "]", "\n", "self", ".", "init_possible_transitions", "(", ")", "\n", "\n", "self", ".", "num_col", "=", "num_col", "\n", "self", ".", "state_mapping", "=", "[", "]", "\n", "self", ".", "init_state_mapping", "(", "num_col", ",", "num_row", ")", "\n", "\n", "self", ".", "max_state", "=", "len", "(", "self", ".", "state_mapping", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.init_state_mapping": [[80, 95], ["numpy.random.random", "numpy.random.randint", "range", "range", "multi_input_envs.SimpleMultiObsEnv.state_mapping.append", "row_imgs[].reshape"], "methods", ["None"], ["", "def", "init_state_mapping", "(", "self", ",", "num_col", ":", "int", ",", "num_row", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initializes the state_mapping array which holds the observation values for each state\n\n        :param num_col: Number of columns.\n        :param num_row: Number of rows.\n        \"\"\"", "\n", "# Each column is represented by a random vector", "\n", "col_vecs", "=", "np", ".", "random", ".", "random", "(", "(", "num_col", ",", "self", ".", "vector_size", ")", ")", "\n", "# Each row is represented by a random image", "\n", "row_imgs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "(", "num_row", ",", "64", ",", "64", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_col", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_row", ")", ":", "\n", "                ", "self", ".", "state_mapping", ".", "append", "(", "{", "\"vec\"", ":", "col_vecs", "[", "i", "]", ",", "\"img\"", ":", "row_imgs", "[", "j", "]", ".", "reshape", "(", "self", ".", "img_size", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.get_state_mapping": [[96, 103], ["None"], "methods", ["None"], ["", "", "", "def", "get_state_mapping", "(", "self", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Uses the state to get the observation mapping.\n\n        :return: observation dict {'vec': ..., 'img': ...}\n        \"\"\"", "\n", "return", "self", ".", "state_mapping", "[", "self", ".", "state", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.init_possible_transitions": [[104, 122], ["None"], "methods", ["None"], ["", "def", "init_possible_transitions", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initializes the transitions of the environment\n        The environment exploits the cardinal directions of the grid by noting that\n        they correspond to simple addition and subtraction from the cell id within the grid\n\n        - up => means moving up a row => means subtracting the length of a column\n        - down => means moving down a row => means adding the length of a column\n        - left => means moving left by one => means subtracting 1\n        - right => means moving right by one => means adding 1\n\n        Thus one only needs to specify in which states each action is possible\n        in order to define the transitions of the environment\n        \"\"\"", "\n", "self", ".", "left_possible", "=", "[", "1", ",", "2", ",", "3", ",", "13", ",", "14", ",", "15", "]", "\n", "self", ".", "down_possible", "=", "[", "0", ",", "4", ",", "8", ",", "3", ",", "7", ",", "11", "]", "\n", "self", ".", "right_possible", "=", "[", "0", ",", "1", ",", "2", ",", "12", ",", "13", ",", "14", "]", "\n", "self", ".", "up_possible", "=", "[", "4", ",", "8", ",", "12", ",", "7", ",", "11", ",", "15", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.step": [[123, 160], ["numpy.argmax", "int", "multi_input_envs.SimpleMultiObsEnv.get_state_mapping"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.get_state_mapping"], ["", "def", "step", "(", "self", ",", "action", ":", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", ")", "->", "GymStepReturn", ":", "\n", "        ", "\"\"\"\n        Run one timestep of the environment's dynamics. When end of\n        episode is reached, you are responsible for calling `reset()`\n        to reset this environment's state.\n        Accepts an action and returns a tuple (observation, reward, done, info).\n\n        :param action:\n        :return: tuple (observation, reward, done, info).\n        \"\"\"", "\n", "if", "not", "self", ".", "discrete_actions", ":", "\n", "            ", "action", "=", "np", ".", "argmax", "(", "action", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "int", "(", "action", ")", "\n", "\n", "", "self", ".", "count", "+=", "1", "\n", "\n", "prev_state", "=", "self", ".", "state", "\n", "\n", "reward", "=", "-", "0.1", "\n", "# define state transition", "\n", "if", "self", ".", "state", "in", "self", ".", "left_possible", "and", "action", "==", "0", ":", "# left", "\n", "            ", "self", ".", "state", "-=", "1", "\n", "", "elif", "self", ".", "state", "in", "self", ".", "down_possible", "and", "action", "==", "1", ":", "# down", "\n", "            ", "self", ".", "state", "+=", "self", ".", "num_col", "\n", "", "elif", "self", ".", "state", "in", "self", ".", "right_possible", "and", "action", "==", "2", ":", "# right", "\n", "            ", "self", ".", "state", "+=", "1", "\n", "", "elif", "self", ".", "state", "in", "self", ".", "up_possible", "and", "action", "==", "3", ":", "# up", "\n", "            ", "self", ".", "state", "-=", "self", ".", "num_col", "\n", "\n", "", "got_to_end", "=", "self", ".", "state", "==", "self", ".", "max_state", "\n", "reward", "=", "1", "if", "got_to_end", "else", "reward", "\n", "done", "=", "self", ".", "count", ">", "self", ".", "max_count", "or", "got_to_end", "\n", "\n", "self", ".", "log", "=", "f\"Went {self.action2str[action]} in state {prev_state}, got to state {self.state}\"", "\n", "\n", "return", "self", ".", "get_state_mapping", "(", ")", ",", "reward", ",", "done", ",", "{", "\"got_to_end\"", ":", "got_to_end", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.render": [[161, 168], ["print"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"human\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Prints the log of the environment.\n\n        :param mode:\n        \"\"\"", "\n", "print", "(", "self", ".", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.envs.multi_input_envs.SimpleMultiObsEnv.reset": [[169, 181], ["numpy.random.randint"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Resets the environment state and step count and returns reset observation.\n\n        :return: observation dict {'vec': ..., 'img': ...}\n        \"\"\"", "\n", "self", ".", "count", "=", "0", "\n", "if", "not", "self", ".", "random_start", ":", "\n", "            ", "self", ".", "state", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "state", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "max_state", ")", "\n", "", "return", "self", ".", "state_mapping", "[", "self", ".", "state", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_extract_dict_obs.VecExtractDictObs.__init__": [[14, 17], ["stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "venv", ":", "VecEnv", ",", "key", ":", "str", ")", ":", "\n", "        ", "self", ".", "key", "=", "key", "\n", "super", "(", ")", ".", "__init__", "(", "venv", "=", "venv", ",", "observation_space", "=", "venv", ".", "observation_space", ".", "spaces", "[", "self", ".", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_extract_dict_obs.VecExtractDictObs.reset": [[18, 21], ["vec_extract_dict_obs.VecExtractDictObs.venv.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "return", "obs", "[", "self", ".", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_extract_dict_obs.VecExtractDictObs.step_wait": [[22, 25], ["vec_extract_dict_obs.VecExtractDictObs.venv.step_wait"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait"], ["", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "return", "obs", "[", "self", ".", "key", "]", ",", "reward", ",", "done", ",", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_check_nan.VecCheckNan.__init__": [[19, 27], ["stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "venv", ":", "VecEnv", ",", "raise_exception", ":", "bool", "=", "False", ",", "warn_once", ":", "bool", "=", "True", ",", "check_inf", ":", "bool", "=", "True", ")", ":", "\n", "        ", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "self", ".", "raise_exception", "=", "raise_exception", "\n", "self", ".", "warn_once", "=", "warn_once", "\n", "self", ".", "check_inf", "=", "check_inf", "\n", "self", ".", "_actions", "=", "None", "\n", "self", ".", "_observations", "=", "None", "\n", "self", ".", "_user_warned", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_check_nan.VecCheckNan.step_async": [[28, 33], ["vec_check_nan.VecCheckNan._check_val", "vec_check_nan.VecCheckNan.venv.step_async"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_check_nan.VecCheckNan._check_val", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_async"], ["", "def", "step_async", "(", "self", ",", "actions", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "self", ".", "_check_val", "(", "async_step", "=", "True", ",", "actions", "=", "actions", ")", "\n", "\n", "self", ".", "_actions", "=", "actions", "\n", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_check_nan.VecCheckNan.step_wait": [[34, 41], ["vec_check_nan.VecCheckNan.venv.step_wait", "vec_check_nan.VecCheckNan._check_val"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_check_nan.VecCheckNan._check_val"], ["", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "observations", ",", "rewards", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "\n", "self", ".", "_check_val", "(", "async_step", "=", "False", ",", "observations", "=", "observations", ",", "rewards", "=", "rewards", ",", "news", "=", "news", ")", "\n", "\n", "self", ".", "_observations", "=", "observations", "\n", "return", "observations", ",", "rewards", ",", "news", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_check_nan.VecCheckNan.reset": [[42, 50], ["vec_check_nan.VecCheckNan.venv.reset", "vec_check_nan.VecCheckNan._check_val"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_check_nan.VecCheckNan._check_val"], ["", "def", "reset", "(", "self", ")", "->", "VecEnvObs", ":", "\n", "        ", "observations", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "_actions", "=", "None", "\n", "\n", "self", ".", "_check_val", "(", "async_step", "=", "False", ",", "observations", "=", "observations", ")", "\n", "\n", "self", ".", "_observations", "=", "observations", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_check_nan.VecCheckNan._check_val": [[51, 87], ["kwargs.items", "numpy.any", "enumerate", "numpy.isnan", "numpy.any", "found.append", "found.append", "ValueError", "warnings.warn", "numpy.isinf", "len"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "def", "_check_val", "(", "self", ",", "*", ",", "async_step", ":", "bool", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "# if warn and warn once and have warned once: then stop checking", "\n", "        ", "if", "not", "self", ".", "raise_exception", "and", "self", ".", "warn_once", "and", "self", ".", "_user_warned", ":", "\n", "            ", "return", "\n", "\n", "", "found", "=", "[", "]", "\n", "for", "name", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "has_nan", "=", "np", ".", "any", "(", "np", ".", "isnan", "(", "val", ")", ")", "\n", "has_inf", "=", "self", ".", "check_inf", "and", "np", ".", "any", "(", "np", ".", "isinf", "(", "val", ")", ")", "\n", "if", "has_inf", ":", "\n", "                ", "found", ".", "append", "(", "(", "name", ",", "\"inf\"", ")", ")", "\n", "", "if", "has_nan", ":", "\n", "                ", "found", ".", "append", "(", "(", "name", ",", "\"nan\"", ")", ")", "\n", "\n", "", "", "if", "found", ":", "\n", "            ", "self", ".", "_user_warned", "=", "True", "\n", "msg", "=", "\"\"", "\n", "for", "i", ",", "(", "name", ",", "type_val", ")", "in", "enumerate", "(", "found", ")", ":", "\n", "                ", "msg", "+=", "f\"found {type_val} in {name}\"", "\n", "if", "i", "!=", "len", "(", "found", ")", "-", "1", ":", "\n", "                    ", "msg", "+=", "\", \"", "\n", "\n", "", "", "msg", "+=", "\".\\r\\nOriginated from the \"", "\n", "\n", "if", "not", "async_step", ":", "\n", "                ", "if", "self", ".", "_actions", "is", "None", ":", "\n", "                    ", "msg", "+=", "\"environment observation (at reset)\"", "\n", "", "else", ":", "\n", "                    ", "msg", "+=", "f\"environment, Last given value was: \\r\\n\\taction={self._actions}\"", "\n", "", "", "else", ":", "\n", "                ", "msg", "+=", "f\"RL model, Last given value was: \\r\\n\\tobservations={self._observations}\"", "\n", "\n", "", "if", "self", ".", "raise_exception", ":", "\n", "                ", "raise", "ValueError", "(", "msg", ")", "\n", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "msg", ",", "UserWarning", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_frame_stack.VecFrameStack.__init__": [[23, 43], ["isinstance", "vec_frame_stack.VecFrameStack.stackedobs.stack_observation_space", "stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__", "stable_baselines3.common.vec_env.stacked_observations.StackedObservations", "isinstance", "isinstance", "stable_baselines3.common.vec_env.stacked_observations.StackedDictObservations", "Exception"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.stack_observation_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "venv", ":", "VecEnv", ",", "n_stack", ":", "int", ",", "channels_order", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "n_stack", "=", "n_stack", "\n", "\n", "wrapped_obs_space", "=", "venv", ".", "observation_space", "\n", "\n", "if", "isinstance", "(", "wrapped_obs_space", ",", "spaces", ".", "Box", ")", ":", "\n", "            ", "assert", "not", "isinstance", "(", "\n", "channels_order", ",", "dict", "\n", ")", ",", "f\"Expected None or string for channels_order but received {channels_order}\"", "\n", "self", ".", "stackedobs", "=", "StackedObservations", "(", "venv", ".", "num_envs", ",", "n_stack", ",", "wrapped_obs_space", ",", "channels_order", ")", "\n", "\n", "", "elif", "isinstance", "(", "wrapped_obs_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "self", ".", "stackedobs", "=", "StackedDictObservations", "(", "venv", ".", "num_envs", ",", "n_stack", ",", "wrapped_obs_space", ",", "channels_order", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"VecFrameStack only works with gym.spaces.Box and gym.spaces.Dict observation spaces\"", ")", "\n", "\n", "", "observation_space", "=", "self", ".", "stackedobs", ".", "stack_observation_space", "(", "wrapped_obs_space", ")", "\n", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ",", "observation_space", "=", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_frame_stack.VecFrameStack.step_wait": [[44, 53], ["vec_frame_stack.VecFrameStack.venv.step_wait", "vec_frame_stack.VecFrameStack.stackedobs.update"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["", "def", "step_wait", "(", "\n", "self", ",", "\n", ")", "->", "Tuple", "[", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "]", ":", "\n", "\n", "        ", "observations", ",", "rewards", ",", "dones", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "\n", "observations", ",", "infos", "=", "self", ".", "stackedobs", ".", "update", "(", "observations", ",", "dones", ",", "infos", ")", "\n", "\n", "return", "observations", ",", "rewards", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_frame_stack.VecFrameStack.reset": [[54, 62], ["vec_frame_stack.VecFrameStack.venv.reset", "vec_frame_stack.VecFrameStack.stackedobs.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        \"\"\"", "\n", "observation", "=", "self", ".", "venv", ".", "reset", "(", ")", "# pytype:disable=annotation-type-mismatch", "\n", "\n", "observation", "=", "self", ".", "stackedobs", ".", "reset", "(", "observation", ")", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_frame_stack.VecFrameStack.close": [[63, 65], ["vec_frame_stack.VecFrameStack.venv.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.__init__": [[87, 113], ["len", "multiprocessing.get_context", "zip", "zip", "subproc_vec_env.SubprocVecEnv.remotes[].send", "subproc_vec_env.SubprocVecEnv.remotes[].recv", "stable_baselines3.common.vec_env.base_vec_env.VecEnv.__init__", "multiprocessing.get_context.Process", "mp.get_context.Process.start", "subproc_vec_env.SubprocVecEnv.processes.append", "work_remote.close", "len", "multiprocessing.get_all_start_methods", "stable_baselines3.common.vec_env.base_vec_env.CloudpickleWrapper", "multiprocessing.get_context.Pipe", "range"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["def", "__init__", "(", "self", ",", "env_fns", ":", "List", "[", "Callable", "[", "[", "]", ",", "gym", ".", "Env", "]", "]", ",", "start_method", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "waiting", "=", "False", "\n", "self", ".", "closed", "=", "False", "\n", "n_envs", "=", "len", "(", "env_fns", ")", "\n", "\n", "if", "start_method", "is", "None", ":", "\n", "# Fork is not a thread safe method (see issue #217)", "\n", "# but is more user friendly (does not require to wrap the code in", "\n", "# a `if __name__ == \"__main__\":`)", "\n", "            ", "forkserver_available", "=", "\"forkserver\"", "in", "mp", ".", "get_all_start_methods", "(", ")", "\n", "start_method", "=", "\"forkserver\"", "if", "forkserver_available", "else", "\"spawn\"", "\n", "", "ctx", "=", "mp", ".", "get_context", "(", "start_method", ")", "\n", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "ctx", ".", "Pipe", "(", ")", "for", "_", "in", "range", "(", "n_envs", ")", "]", ")", "\n", "self", ".", "processes", "=", "[", "]", "\n", "for", "work_remote", ",", "remote", ",", "env_fn", "in", "zip", "(", "self", ".", "work_remotes", ",", "self", ".", "remotes", ",", "env_fns", ")", ":", "\n", "            ", "args", "=", "(", "work_remote", ",", "remote", ",", "CloudpickleWrapper", "(", "env_fn", ")", ")", "\n", "# daemon=True: if the main process crashes, we should not cause things to hang", "\n", "process", "=", "ctx", ".", "Process", "(", "target", "=", "_worker", ",", "args", "=", "args", ",", "daemon", "=", "True", ")", "# pytype:disable=attribute-error", "\n", "process", ".", "start", "(", ")", "\n", "self", ".", "processes", ".", "append", "(", "process", ")", "\n", "work_remote", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "\"get_spaces\"", ",", "None", ")", ")", "\n", "observation_space", ",", "action_space", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "observation_space", ",", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.step_async": [[114, 118], ["zip", "remote.send"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"step\"", ",", "action", ")", ")", "\n", "", "self", ".", "waiting", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.step_wait": [[119, 124], ["zip", "remote.recv", "subproc_vec_env._flatten_obs", "numpy.stack", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env._flatten_obs"], ["", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "self", ".", "waiting", "=", "False", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "_flatten_obs", "(", "obs", ",", "self", ".", "observation_space", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.seed": [[125, 131], ["enumerate", "numpy.random.randint", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "List", "[", "Union", "[", "None", ",", "int", "]", "]", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "**", "32", "-", "1", ")", "\n", "", "for", "idx", ",", "remote", "in", "enumerate", "(", "self", ".", "remotes", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"seed\"", ",", "seed", "+", "idx", ")", ")", "\n", "", "return", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.reset": [[132, 137], ["subproc_vec_env._flatten_obs", "remote.send", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env._flatten_obs"], ["", "def", "reset", "(", "self", ")", "->", "VecEnvObs", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"reset\"", ",", "None", ")", ")", "\n", "", "obs", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "return", "_flatten_obs", "(", "obs", ",", "self", ".", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.close": [[138, 149], ["remote.send", "process.join", "remote.recv"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "waiting", ":", "\n", "            ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "                ", "remote", ".", "recv", "(", ")", "\n", "", "", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"close\"", ",", "None", ")", ")", "\n", "", "for", "process", "in", "self", ".", "processes", ":", "\n", "            ", "process", ".", "join", "(", ")", "\n", "", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.get_images": [[150, 157], ["pipe.send", "pipe.recv"], "methods", ["None"], ["", "def", "get_images", "(", "self", ")", "->", "Sequence", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "for", "pipe", "in", "self", ".", "remotes", ":", "\n", "# gather images from subprocesses", "\n", "# `mode` will be taken into account later", "\n", "            ", "pipe", ".", "send", "(", "(", "\"render\"", ",", "\"rgb_array\"", ")", ")", "\n", "", "imgs", "=", "[", "pipe", ".", "recv", "(", ")", "for", "pipe", "in", "self", ".", "remotes", "]", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.get_attr": [[158, 164], ["subproc_vec_env.SubprocVecEnv._get_target_remotes", "remote.send", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv._get_target_remotes"], ["", "def", "get_attr", "(", "self", ",", "attr_name", ":", "str", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "\"\"\"Return attribute from vectorized environment (see base class).\"\"\"", "\n", "target_remotes", "=", "self", ".", "_get_target_remotes", "(", "indices", ")", "\n", "for", "remote", "in", "target_remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"get_attr\"", ",", "attr_name", ")", ")", "\n", "", "return", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "target_remotes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.set_attr": [[165, 172], ["subproc_vec_env.SubprocVecEnv._get_target_remotes", "remote.send", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv._get_target_remotes"], ["", "def", "set_attr", "(", "self", ",", "attr_name", ":", "str", ",", "value", ":", "Any", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set attribute inside vectorized environments (see base class).\"\"\"", "\n", "target_remotes", "=", "self", ".", "_get_target_remotes", "(", "indices", ")", "\n", "for", "remote", "in", "target_remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"set_attr\"", ",", "(", "attr_name", ",", "value", ")", ")", ")", "\n", "", "for", "remote", "in", "target_remotes", ":", "\n", "            ", "remote", ".", "recv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.env_method": [[173, 179], ["subproc_vec_env.SubprocVecEnv._get_target_remotes", "remote.send", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv._get_target_remotes"], ["", "", "def", "env_method", "(", "self", ",", "method_name", ":", "str", ",", "*", "method_args", ",", "indices", ":", "VecEnvIndices", "=", "None", ",", "**", "method_kwargs", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "\"\"\"Call instance methods of vectorized environments.\"\"\"", "\n", "target_remotes", "=", "self", ".", "_get_target_remotes", "(", "indices", ")", "\n", "for", "remote", "in", "target_remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"env_method\"", ",", "(", "method_name", ",", "method_args", ",", "method_kwargs", ")", ")", ")", "\n", "", "return", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "target_remotes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv.env_is_wrapped": [[180, 186], ["subproc_vec_env.SubprocVecEnv._get_target_remotes", "remote.send", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv._get_target_remotes"], ["", "def", "env_is_wrapped", "(", "self", ",", "wrapper_class", ":", "Type", "[", "gym", ".", "Wrapper", "]", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "List", "[", "bool", "]", ":", "\n", "        ", "\"\"\"Check if worker environments are wrapped with a given wrapper\"\"\"", "\n", "target_remotes", "=", "self", ".", "_get_target_remotes", "(", "indices", ")", "\n", "for", "remote", "in", "target_remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"is_wrapped\"", ",", "wrapper_class", ")", ")", "\n", "", "return", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "target_remotes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env.SubprocVecEnv._get_target_remotes": [[187, 197], ["subproc_vec_env.SubprocVecEnv._get_indices"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv._get_indices"], ["", "def", "_get_target_remotes", "(", "self", ",", "indices", ":", "VecEnvIndices", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Get the connection object needed to communicate with the wanted\n        envs that are in subprocesses.\n\n        :param indices: refers to indices of envs.\n        :return: Connection object to communicate between processes.\n        \"\"\"", "\n", "indices", "=", "self", ".", "_get_indices", "(", "indices", ")", "\n", "return", "[", "self", ".", "remotes", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env._worker": [[17, 61], ["parent_remote.close", "env_fn_wrapper.var", "remote.recv", "env_fn_wrapper.var.step", "remote.send", "env_fn_wrapper.var.reset", "remote.send", "env_fn_wrapper.var.seed", "env_fn_wrapper.var.reset", "remote.send", "remote.send", "env_fn_wrapper.var.render", "env_fn_wrapper.var.close", "remote.close", "remote.send", "getattr", "remote.send", "getattr.", "remote.send", "getattr", "remote.send", "setattr", "remote.send", "NotImplementedError", "is_wrapped"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.is_wrapped"], ["def", "_worker", "(", "\n", "remote", ":", "mp", ".", "connection", ".", "Connection", ",", "parent_remote", ":", "mp", ".", "connection", ".", "Connection", ",", "env_fn_wrapper", ":", "CloudpickleWrapper", "\n", ")", "->", "None", ":", "\n", "# Import here to avoid a circular import", "\n", "    ", "from", "stable_baselines3", ".", "common", ".", "env_util", "import", "is_wrapped", "\n", "\n", "parent_remote", ".", "close", "(", ")", "\n", "env", "=", "env_fn_wrapper", ".", "var", "(", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "\"step\"", ":", "\n", "                ", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "done", ":", "\n", "# save final observation where user can get it, then reset", "\n", "                    ", "info", "[", "\"terminal_observation\"", "]", "=", "observation", "\n", "observation", "=", "env", ".", "reset", "(", ")", "\n", "", "remote", ".", "send", "(", "(", "observation", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "\"seed\"", ":", "\n", "                ", "remote", ".", "send", "(", "env", ".", "seed", "(", "data", ")", ")", "\n", "", "elif", "cmd", "==", "\"reset\"", ":", "\n", "                ", "observation", "=", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "observation", ")", "\n", "", "elif", "cmd", "==", "\"render\"", ":", "\n", "                ", "remote", ".", "send", "(", "env", ".", "render", "(", "data", ")", ")", "\n", "", "elif", "cmd", "==", "\"close\"", ":", "\n", "                ", "env", ".", "close", "(", ")", "\n", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "\"get_spaces\"", ":", "\n", "                ", "remote", ".", "send", "(", "(", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", ")", "\n", "", "elif", "cmd", "==", "\"env_method\"", ":", "\n", "                ", "method", "=", "getattr", "(", "env", ",", "data", "[", "0", "]", ")", "\n", "remote", ".", "send", "(", "method", "(", "*", "data", "[", "1", "]", ",", "**", "data", "[", "2", "]", ")", ")", "\n", "", "elif", "cmd", "==", "\"get_attr\"", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "data", ")", ")", "\n", "", "elif", "cmd", "==", "\"set_attr\"", ":", "\n", "                ", "remote", ".", "send", "(", "setattr", "(", "env", ",", "data", "[", "0", "]", ",", "data", "[", "1", "]", ")", ")", "\n", "", "elif", "cmd", "==", "\"is_wrapped\"", ":", "\n", "                ", "remote", ".", "send", "(", "is_wrapped", "(", "env", ",", "data", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"`{cmd}` is not implemented in the worker\"", ")", "\n", "", "", "except", "EOFError", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.subproc_vec_env._flatten_obs": [[199, 223], ["isinstance", "isinstance", "len", "isinstance", "isinstance", "collections.OrderedDict", "isinstance", "isinstance", "len", "tuple", "numpy.stack", "numpy.stack", "space.spaces.keys", "numpy.stack", "range"], "function", ["None"], ["", "", "def", "_flatten_obs", "(", "obs", ":", "Union", "[", "List", "[", "VecEnvObs", "]", ",", "Tuple", "[", "VecEnvObs", "]", "]", ",", "space", ":", "gym", ".", "spaces", ".", "Space", ")", "->", "VecEnvObs", ":", "\n", "    ", "\"\"\"\n    Flatten observations, depending on the observation space.\n\n    :param obs: observations.\n                A list or tuple of observations, one per environment.\n                Each environment observation may be a NumPy array, or a dict or tuple of NumPy arrays.\n    :return: flattened observations.\n            A flattened NumPy array or an OrderedDict or tuple of flattened numpy arrays.\n            Each NumPy array has the environment index as its first axis.\n    \"\"\"", "\n", "assert", "isinstance", "(", "obs", ",", "(", "list", ",", "tuple", ")", ")", ",", "\"expected list or tuple of observations per environment\"", "\n", "assert", "len", "(", "obs", ")", ">", "0", ",", "\"need observations from at least one environment\"", "\n", "\n", "if", "isinstance", "(", "space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "        ", "assert", "isinstance", "(", "space", ".", "spaces", ",", "OrderedDict", ")", ",", "\"Dict space must have ordered subspaces\"", "\n", "assert", "isinstance", "(", "obs", "[", "0", "]", ",", "dict", ")", ",", "\"non-dict observation for environment with Dict observation space\"", "\n", "return", "OrderedDict", "(", "[", "(", "k", ",", "np", ".", "stack", "(", "[", "o", "[", "k", "]", "for", "o", "in", "obs", "]", ")", ")", "for", "k", "in", "space", ".", "spaces", ".", "keys", "(", ")", "]", ")", "\n", "", "elif", "isinstance", "(", "space", ",", "gym", ".", "spaces", ".", "Tuple", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs", "[", "0", "]", ",", "tuple", ")", ",", "\"non-tuple observation for environment with Tuple observation space\"", "\n", "obs_len", "=", "len", "(", "space", ".", "spaces", ")", "\n", "return", "tuple", "(", "np", ".", "stack", "(", "[", "o", "[", "i", "]", "for", "o", "in", "obs", "]", ")", "for", "i", "in", "range", "(", "obs_len", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "stack", "(", "obs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.__init__": [[24, 37], ["stable_baselines3.common.vec_env.base_vec_env.VecEnv.__init__", "stable_baselines3.common.vec_env.util.obs_space_info", "collections.OrderedDict", "numpy.zeros", "numpy.zeros", "fn", "len", "range", "numpy.zeros", "tuple"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.util.obs_space_info"], ["def", "__init__", "(", "self", ",", "env_fns", ":", "List", "[", "Callable", "[", "[", "]", ",", "gym", ".", "Env", "]", "]", ")", ":", "\n", "        ", "self", ".", "envs", "=", "[", "fn", "(", ")", "for", "fn", "in", "env_fns", "]", "\n", "env", "=", "self", ".", "envs", "[", "0", "]", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "self", ".", "keys", ",", "shapes", ",", "dtypes", "=", "obs_space_info", "(", "obs_space", ")", "\n", "\n", "self", ".", "buf_obs", "=", "OrderedDict", "(", "[", "(", "k", ",", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", "+", "tuple", "(", "shapes", "[", "k", "]", ")", ",", "dtype", "=", "dtypes", "[", "k", "]", ")", ")", "for", "k", "in", "self", ".", "keys", "]", ")", "\n", "self", ".", "buf_dones", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "self", ".", "buf_rews", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "buf_infos", "=", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "self", ".", "actions", "=", "None", "\n", "self", ".", "metadata", "=", "env", ".", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.step_async": [[38, 40], ["None"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "self", ".", "actions", "=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.step_wait": [[41, 52], ["range", "dummy_vec_env.DummyVecEnv.envs[].step", "dummy_vec_env.DummyVecEnv._save_obs", "dummy_vec_env.DummyVecEnv._obs_from_buf", "numpy.copy", "numpy.copy", "copy.deepcopy", "dummy_vec_env.DummyVecEnv.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._save_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "for", "env_idx", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", ",", "self", ".", "buf_rews", "[", "env_idx", "]", ",", "self", ".", "buf_dones", "[", "env_idx", "]", ",", "self", ".", "buf_infos", "[", "env_idx", "]", "=", "self", ".", "envs", "[", "env_idx", "]", ".", "step", "(", "\n", "self", ".", "actions", "[", "env_idx", "]", "\n", ")", "\n", "if", "self", ".", "buf_dones", "[", "env_idx", "]", ":", "\n", "# save final observation where user can get it, then reset", "\n", "                ", "self", ".", "buf_infos", "[", "env_idx", "]", "[", "\"terminal_observation\"", "]", "=", "obs", "\n", "obs", "=", "self", ".", "envs", "[", "env_idx", "]", ".", "reset", "(", ")", "\n", "", "self", ".", "_save_obs", "(", "env_idx", ",", "obs", ")", "\n", "", "return", "(", "self", ".", "_obs_from_buf", "(", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_rews", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_dones", ")", ",", "deepcopy", "(", "self", ".", "buf_infos", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.seed": [[53, 60], ["enumerate", "numpy.random.randint", "seeds.append", "env.seed"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed"], ["", "def", "seed", "(", "self", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "List", "[", "Union", "[", "None", ",", "int", "]", "]", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "**", "32", "-", "1", ")", "\n", "", "seeds", "=", "[", "]", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "self", ".", "envs", ")", ":", "\n", "            ", "seeds", ".", "append", "(", "env", ".", "seed", "(", "seed", "+", "idx", ")", ")", "\n", "", "return", "seeds", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.reset": [[61, 66], ["range", "dummy_vec_env.DummyVecEnv._obs_from_buf", "dummy_vec_env.DummyVecEnv.envs[].reset", "dummy_vec_env.DummyVecEnv._save_obs"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._save_obs"], ["", "def", "reset", "(", "self", ")", "->", "VecEnvObs", ":", "\n", "        ", "for", "env_idx", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", "=", "self", ".", "envs", "[", "env_idx", "]", ".", "reset", "(", ")", "\n", "self", ".", "_save_obs", "(", "env_idx", ",", "obs", ")", "\n", "", "return", "self", ".", "_obs_from_buf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.close": [[67, 70], ["env.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.get_images": [[71, 73], ["env.render"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render"], ["", "", "def", "get_images", "(", "self", ")", "->", "Sequence", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "return", "[", "env", ".", "render", "(", "mode", "=", "\"rgb_array\"", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.render": [[74, 90], ["dummy_vec_env.DummyVecEnv.envs[].render", "super().render"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"human\"", ")", "->", "Optional", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Gym environment rendering. If there are multiple environments then\n        they are tiled together in one image via ``BaseVecEnv.render()``.\n        Otherwise (if ``self.num_envs == 1``), we pass the render call directly to the\n        underlying environment.\n\n        Therefore, some arguments such as ``mode`` will have values that are valid\n        only when ``num_envs == 1``.\n\n        :param mode: The rendering type.\n        \"\"\"", "\n", "if", "self", ".", "num_envs", "==", "1", ":", "\n", "            ", "return", "self", ".", "envs", "[", "0", "]", ".", "render", "(", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "render", "(", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._save_obs": [[91, 97], ["None"], "methods", ["None"], ["", "", "def", "_save_obs", "(", "self", ",", "env_idx", ":", "int", ",", "obs", ":", "VecEnvObs", ")", "->", "None", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "if", "key", "is", "None", ":", "\n", "                ", "self", ".", "buf_obs", "[", "key", "]", "[", "env_idx", "]", "=", "obs", "\n", "", "else", ":", "\n", "                ", "self", ".", "buf_obs", "[", "key", "]", "[", "env_idx", "]", "=", "obs", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf": [[98, 100], ["stable_baselines3.common.vec_env.util.dict_to_obs", "stable_baselines3.common.vec_env.util.copy_obs_dict"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.util.dict_to_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.util.copy_obs_dict"], ["", "", "", "def", "_obs_from_buf", "(", "self", ")", "->", "VecEnvObs", ":", "\n", "        ", "return", "dict_to_obs", "(", "self", ".", "observation_space", ",", "copy_obs_dict", "(", "self", ".", "buf_obs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.get_attr": [[101, 105], ["dummy_vec_env.DummyVecEnv._get_target_envs", "getattr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._get_target_envs"], ["", "def", "get_attr", "(", "self", ",", "attr_name", ":", "str", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "\"\"\"Return attribute from vectorized environment (see base class).\"\"\"", "\n", "target_envs", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "return", "[", "getattr", "(", "env_i", ",", "attr_name", ")", "for", "env_i", "in", "target_envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.set_attr": [[106, 111], ["dummy_vec_env.DummyVecEnv._get_target_envs", "setattr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._get_target_envs"], ["", "def", "set_attr", "(", "self", ",", "attr_name", ":", "str", ",", "value", ":", "Any", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set attribute inside vectorized environments (see base class).\"\"\"", "\n", "target_envs", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "for", "env_i", "in", "target_envs", ":", "\n", "            ", "setattr", "(", "env_i", ",", "attr_name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.env_method": [[112, 116], ["dummy_vec_env.DummyVecEnv._get_target_envs", "getattr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._get_target_envs"], ["", "", "def", "env_method", "(", "self", ",", "method_name", ":", "str", ",", "*", "method_args", ",", "indices", ":", "VecEnvIndices", "=", "None", ",", "**", "method_kwargs", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "\"\"\"Call instance methods of vectorized environments.\"\"\"", "\n", "target_envs", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "return", "[", "getattr", "(", "env_i", ",", "method_name", ")", "(", "*", "method_args", ",", "**", "method_kwargs", ")", "for", "env_i", "in", "target_envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv.env_is_wrapped": [[117, 124], ["dummy_vec_env.DummyVecEnv._get_target_envs", "env_util.is_wrapped"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._get_target_envs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.is_wrapped"], ["", "def", "env_is_wrapped", "(", "self", ",", "wrapper_class", ":", "Type", "[", "gym", ".", "Wrapper", "]", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "List", "[", "bool", "]", ":", "\n", "        ", "\"\"\"Check if worker environments are wrapped with a given wrapper\"\"\"", "\n", "target_envs", "=", "self", ".", "_get_target_envs", "(", "indices", ")", "\n", "# Import here to avoid a circular import", "\n", "from", "stable_baselines3", ".", "common", "import", "env_util", "\n", "\n", "return", "[", "env_util", ".", "is_wrapped", "(", "env_i", ",", "wrapper_class", ")", "for", "env_i", "in", "target_envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.dummy_vec_env.DummyVecEnv._get_target_envs": [[125, 128], ["dummy_vec_env.DummyVecEnv._get_indices"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv._get_indices"], ["", "def", "_get_target_envs", "(", "self", ",", "indices", ":", "VecEnvIndices", ")", "->", "List", "[", "gym", ".", "Env", "]", ":", "\n", "        ", "indices", "=", "self", ".", "_get_indices", "(", "indices", ")", "\n", "return", "[", "self", ".", "envs", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.__init__": [[58, 62], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_envs", ":", "int", ",", "observation_space", ":", "gym", ".", "spaces", ".", "Space", ",", "action_space", ":", "gym", ".", "spaces", ".", "Space", ")", ":", "\n", "        ", "self", ".", "num_envs", "=", "num_envs", "\n", "self", ".", "observation_space", "=", "observation_space", "\n", "self", ".", "action_space", "=", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.reset": [[63, 76], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", "->", "VecEnvObs", ":", "\n", "        ", "\"\"\"\n        Reset all the environments and return an array of\n        observations, or a tuple of observation arrays.\n\n        If step_async is still doing work, that work will\n        be cancelled and step_wait() should not be called\n        until step_async() is invoked again.\n\n        :return: observation\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.step_async": [[77, 88], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_async", "(", "self", ",", "actions", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Tell all the environments to start taking a step\n        with the given actions.\n        Call step_wait() to get the results of the step.\n\n        You should not call this if a step_async run is\n        already pending.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.step_wait": [[89, 97], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "\"\"\"\n        Wait for the step taken with step_async().\n\n        :return: observation, reward, done, information\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.close": [[98, 104], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Clean up the environment's resources.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.get_attr": [[105, 115], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_attr", "(", "self", ",", "attr_name", ":", "str", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Return attribute from vectorized environment.\n\n        :param attr_name: The name of the attribute whose value to return\n        :param indices: Indices of envs to get attribute from\n        :return: List of values of 'attr_name' in all environments\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.set_attr": [[116, 127], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_attr", "(", "self", ",", "attr_name", ":", "str", ",", "value", ":", "Any", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set attribute inside vectorized environments.\n\n        :param attr_name: The name of attribute to assign new value\n        :param value: Value to assign to `attr_name`\n        :param indices: Indices of envs to assign value\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.env_method": [[128, 140], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "env_method", "(", "self", ",", "method_name", ":", "str", ",", "*", "method_args", ",", "indices", ":", "VecEnvIndices", "=", "None", ",", "**", "method_kwargs", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Call instance methods of vectorized environments.\n\n        :param method_name: The name of the environment method to invoke.\n        :param indices: Indices of envs whose method to call\n        :param method_args: Any positional arguments to provide in the call\n        :param method_kwargs: Any keyword arguments to provide in the call\n        :return: List of items returned by the environment's method call\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.env_is_wrapped": [[141, 153], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "env_is_wrapped", "(", "self", ",", "wrapper_class", ":", "Type", "[", "gym", ".", "Wrapper", "]", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "List", "[", "bool", "]", ":", "\n", "        ", "\"\"\"\n        Check if environments are wrapped with a given wrapper.\n\n        :param method_name: The name of the environment method to invoke.\n        :param indices: Indices of envs whose method to call\n        :param method_args: Any positional arguments to provide in the call\n        :param method_kwargs: Any keyword arguments to provide in the call\n        :return: True if the env is wrapped, False otherwise, for each env queried.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.step": [[154, 163], ["base_vec_env.VecEnv.step_async", "base_vec_env.VecEnv.step_wait"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_async", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait"], ["", "def", "step", "(", "self", ",", "actions", ":", "np", ".", "ndarray", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "\"\"\"\n        Step the environments with the given action\n\n        :param actions: the action\n        :return: observation, reward, done, information\n        \"\"\"", "\n", "self", ".", "step_async", "(", "actions", ")", "\n", "return", "self", ".", "step_wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.get_images": [[164, 169], ["None"], "methods", ["None"], ["", "def", "get_images", "(", "self", ")", "->", "Sequence", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Return RGB images from each environment\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.render": [[170, 193], ["base_vec_env.tile_images", "base_vec_env.VecEnv.get_images", "cv2.imshow", "cv2.waitKey", "warnings.warn", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.tile_images", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_images", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"human\"", ")", "->", "Optional", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Gym environment rendering\n\n        :param mode: the rendering type\n        \"\"\"", "\n", "try", ":", "\n", "            ", "imgs", "=", "self", ".", "get_images", "(", ")", "\n", "", "except", "NotImplementedError", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"Render not defined for {self}\"", ")", "\n", "return", "\n", "\n", "# Create a big image by tiling images from subprocesses", "\n", "", "bigimg", "=", "tile_images", "(", "imgs", ")", "\n", "if", "mode", "==", "\"human\"", ":", "\n", "            ", "import", "cv2", "# pytype:disable=import-error", "\n", "\n", "cv2", ".", "imshow", "(", "\"vecenv\"", ",", "bigimg", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "", "elif", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "return", "bigimg", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Render mode {mode} is not supported by VecEnvs\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.seed": [[194, 205], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "seed", "(", "self", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "List", "[", "Union", "[", "None", ",", "int", "]", "]", ":", "\n", "        ", "\"\"\"\n        Sets the random seeds for all environments, based on a given seed.\n        Each individual environment will still get its own seed, by incrementing the given seed.\n\n        :param seed: The random seed. May be None for completely random seeding.\n        :return: Returns a list containing the seeds for each individual env.\n            Note that all list elements may be None, if the env does not return anything when being seeded.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.unwrapped": [[206, 212], ["isinstance"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", "->", "\"VecEnv\"", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "VecEnvWrapper", ")", ":", "\n", "            ", "return", "self", ".", "venv", ".", "unwrapped", "\n", "", "else", ":", "\n", "            ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv.getattr_depth_check": [[213, 224], ["hasattr", "type", "type"], "methods", ["None"], ["", "", "def", "getattr_depth_check", "(", "self", ",", "name", ":", "str", ",", "already_found", ":", "bool", ")", "->", "Optional", "[", "str", "]", ":", "\n", "        ", "\"\"\"Check if an attribute reference is being hidden in a recursive call to __getattr__\n\n        :param name: name of attribute to check for\n        :param already_found: whether this attribute has already been found in a wrapper\n        :return: name of module whose attribute is being shadowed, if any.\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "name", ")", "and", "already_found", ":", "\n", "            ", "return", "f\"{type(self).__module__}.{type(self).__name__}\"", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnv._get_indices": [[225, 237], ["range", "isinstance"], "methods", ["None"], ["", "", "def", "_get_indices", "(", "self", ",", "indices", ":", "VecEnvIndices", ")", "->", "Iterable", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        Convert a flexibly-typed reference to environment indices to an implied list of indices.\n\n        :param indices: refers to indices of envs.\n        :return: the implied list of indices.\n        \"\"\"", "\n", "if", "indices", "is", "None", ":", "\n", "            ", "indices", "=", "range", "(", "self", ".", "num_envs", ")", "\n", "", "elif", "isinstance", "(", "indices", ",", "int", ")", ":", "\n", "            ", "indices", "=", "[", "indices", "]", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.__init__": [[248, 262], ["base_vec_env.VecEnv.__init__", "dict", "inspect.getmembers"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "venv", ":", "VecEnv", ",", "\n", "observation_space", ":", "Optional", "[", "gym", ".", "spaces", ".", "Space", "]", "=", "None", ",", "\n", "action_space", ":", "Optional", "[", "gym", ".", "spaces", ".", "Space", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "VecEnv", ".", "__init__", "(", "\n", "self", ",", "\n", "num_envs", "=", "venv", ".", "num_envs", ",", "\n", "observation_space", "=", "observation_space", "or", "venv", ".", "observation_space", ",", "\n", "action_space", "=", "action_space", "or", "venv", ".", "action_space", ",", "\n", ")", "\n", "self", ".", "class_attributes", "=", "dict", "(", "inspect", ".", "getmembers", "(", "self", ".", "__class__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.step_async": [[263, 265], ["base_vec_env.VecEnvWrapper.venv.step_async"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_async"], ["", "def", "step_async", "(", "self", ",", "actions", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.reset": [[266, 269], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", "->", "VecEnvObs", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.step_wait": [[270, 273], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.seed": [[274, 276], ["base_vec_env.VecEnvWrapper.venv.seed"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed"], ["", "def", "seed", "(", "self", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "List", "[", "Union", "[", "None", ",", "int", "]", "]", ":", "\n", "        ", "return", "self", ".", "venv", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.close": [[277, 279], ["base_vec_env.VecEnvWrapper.venv.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "return", "self", ".", "venv", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.render": [[280, 282], ["base_vec_env.VecEnvWrapper.venv.render"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"human\"", ")", "->", "Optional", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "return", "self", ".", "venv", ".", "render", "(", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_images": [[283, 285], ["base_vec_env.VecEnvWrapper.venv.get_images"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_images"], ["", "def", "get_images", "(", "self", ")", "->", "Sequence", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "return", "self", ".", "venv", ".", "get_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr": [[286, 288], ["base_vec_env.VecEnvWrapper.venv.get_attr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr"], ["", "def", "get_attr", "(", "self", ",", "attr_name", ":", "str", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "return", "self", ".", "venv", ".", "get_attr", "(", "attr_name", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.set_attr": [[289, 291], ["base_vec_env.VecEnvWrapper.venv.set_attr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.set_attr"], ["", "def", "set_attr", "(", "self", ",", "attr_name", ":", "str", ",", "value", ":", "Any", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "None", ":", "\n", "        ", "return", "self", ".", "venv", ".", "set_attr", "(", "attr_name", ",", "value", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_method": [[292, 294], ["base_vec_env.VecEnvWrapper.venv.env_method"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_method"], ["", "def", "env_method", "(", "self", ",", "method_name", ":", "str", ",", "*", "method_args", ",", "indices", ":", "VecEnvIndices", "=", "None", ",", "**", "method_kwargs", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "return", "self", ".", "venv", ".", "env_method", "(", "method_name", ",", "*", "method_args", ",", "indices", "=", "indices", ",", "**", "method_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped": [[295, 297], ["base_vec_env.VecEnvWrapper.venv.env_is_wrapped"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped"], ["", "def", "env_is_wrapped", "(", "self", ",", "wrapper_class", ":", "Type", "[", "gym", ".", "Wrapper", "]", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", "->", "List", "[", "bool", "]", ":", "\n", "        ", "return", "self", ".", "venv", ".", "env_is_wrapped", "(", "wrapper_class", ",", "indices", "=", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.__getattr__": [[298, 313], ["base_vec_env.VecEnvWrapper.getattr_depth_check", "base_vec_env.VecEnvWrapper.getattr_recursive", "AttributeError", "type", "type"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.getattr_depth_check", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.getattr_recursive"], ["", "def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "\"\"\"Find attribute from wrapped venv(s) if this wrapper does not have it.\n        Useful for accessing attributes from venvs which are wrapped with multiple wrappers\n        which have unique attributes of interest.\n        \"\"\"", "\n", "blocked_class", "=", "self", ".", "getattr_depth_check", "(", "name", ",", "already_found", "=", "False", ")", "\n", "if", "blocked_class", "is", "not", "None", ":", "\n", "            ", "own_class", "=", "f\"{type(self).__module__}.{type(self).__name__}\"", "\n", "error_str", "=", "(", "\n", "f\"Error: Recursive attribute lookup for {name} from {own_class} is \"", "\n", "f\"ambiguous and hides attribute from {blocked_class}\"", "\n", ")", "\n", "raise", "AttributeError", "(", "error_str", ")", "\n", "\n", "", "return", "self", ".", "getattr_recursive", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper._get_all_attributes": [[314, 322], ["base_vec_env.VecEnvWrapper.__dict__.copy", "base_vec_env.VecEnvWrapper.update"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["", "def", "_get_all_attributes", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"Get all (inherited) instance and class attributes\n\n        :return: all_attributes\n        \"\"\"", "\n", "all_attributes", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "all_attributes", ".", "update", "(", "self", ".", "class_attributes", ")", "\n", "return", "all_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.getattr_recursive": [[323, 340], ["base_vec_env.VecEnvWrapper._get_all_attributes", "getattr", "hasattr", "base_vec_env.VecEnvWrapper.venv.getattr_recursive", "getattr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper._get_all_attributes", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.getattr_recursive"], ["", "def", "getattr_recursive", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "\"\"\"Recursively check wrappers to find attribute.\n\n        :param name: name of attribute to look for\n        :return: attribute\n        \"\"\"", "\n", "all_attributes", "=", "self", ".", "_get_all_attributes", "(", ")", "\n", "if", "name", "in", "all_attributes", ":", "# attribute is present in this wrapper", "\n", "            ", "attr", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "elif", "hasattr", "(", "self", ".", "venv", ",", "\"getattr_recursive\"", ")", ":", "\n", "# Attribute not present, child is wrapper. Call getattr_recursive rather than getattr", "\n", "# to avoid a duplicate call to getattr_depth_check.", "\n", "            ", "attr", "=", "self", ".", "venv", ".", "getattr_recursive", "(", "name", ")", "\n", "", "else", ":", "# attribute not present, child is an unwrapped VecEnv", "\n", "            ", "attr", "=", "getattr", "(", "self", ".", "venv", ",", "name", ")", "\n", "\n", "", "return", "attr", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.getattr_depth_check": [[341, 358], ["base_vec_env.VecEnvWrapper._get_all_attributes", "base_vec_env.VecEnvWrapper.venv.getattr_depth_check", "base_vec_env.VecEnvWrapper.venv.getattr_depth_check", "type", "type"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper._get_all_attributes", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.getattr_depth_check", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.getattr_depth_check"], ["", "def", "getattr_depth_check", "(", "self", ",", "name", ":", "str", ",", "already_found", ":", "bool", ")", "->", "str", ":", "\n", "        ", "\"\"\"See base class.\n\n        :return: name of module whose attribute is being shadowed, if any.\n        \"\"\"", "\n", "all_attributes", "=", "self", ".", "_get_all_attributes", "(", ")", "\n", "if", "name", "in", "all_attributes", "and", "already_found", ":", "\n", "# this venv's attribute is being hidden because of a higher venv.", "\n", "            ", "shadowed_wrapper_class", "=", "f\"{type(self).__module__}.{type(self).__name__}\"", "\n", "", "elif", "name", "in", "all_attributes", "and", "not", "already_found", ":", "\n", "# we have found the first reference to the attribute. Now check for duplicates.", "\n", "            ", "shadowed_wrapper_class", "=", "self", ".", "venv", ".", "getattr_depth_check", "(", "name", ",", "True", ")", "\n", "", "else", ":", "\n", "# this wrapper does not have the attribute. Keep searching.", "\n", "            ", "shadowed_wrapper_class", "=", "self", ".", "venv", ".", "getattr_depth_check", "(", "name", ",", "already_found", ")", "\n", "\n", "", "return", "shadowed_wrapper_class", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.CloudpickleWrapper.__init__": [[367, 369], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "var", ":", "Any", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.CloudpickleWrapper.__getstate__": [[370, 372], ["cloudpickle.dumps"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", "->", "Any", ":", "\n", "        ", "return", "cloudpickle", ".", "dumps", "(", "self", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.CloudpickleWrapper.__setstate__": [[373, 375], ["cloudpickle.loads"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "var", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "var", "=", "cloudpickle", ".", "loads", "(", "var", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.tile_images": [[21, 45], ["numpy.asarray", "int", "int", "numpy.array", "np.array.reshape", "out_image.reshape.transpose", "out_image.reshape.reshape", "numpy.ceil", "numpy.ceil", "numpy.sqrt", "list", "float", "range"], "function", ["None"], ["def", "tile_images", "(", "img_nhwc", ":", "Sequence", "[", "np", ".", "ndarray", "]", ")", "->", "np", ".", "ndarray", ":", "# pragma: no cover", "\n", "    ", "\"\"\"\n    Tile N images into one big PxQ image\n    (P,Q) are chosen to be as close as possible, and if N\n    is square, then P=Q.\n\n    :param img_nhwc: list or array of images, ndim=4 once turned into array. img nhwc\n        n = batch index, h = height, w = width, c = channel\n    :return: img_HWc, ndim=3\n    \"\"\"", "\n", "img_nhwc", "=", "np", ".", "asarray", "(", "img_nhwc", ")", "\n", "n_images", ",", "height", ",", "width", ",", "n_channels", "=", "img_nhwc", ".", "shape", "\n", "# new_height was named H before", "\n", "new_height", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "n_images", ")", ")", ")", "\n", "# new_width was named W before", "\n", "new_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "n_images", ")", "/", "new_height", ")", ")", "\n", "img_nhwc", "=", "np", ".", "array", "(", "list", "(", "img_nhwc", ")", "+", "[", "img_nhwc", "[", "0", "]", "*", "0", "for", "_", "in", "range", "(", "n_images", ",", "new_height", "*", "new_width", ")", "]", ")", "\n", "# img_HWhwc", "\n", "out_image", "=", "img_nhwc", ".", "reshape", "(", "(", "new_height", ",", "new_width", ",", "height", ",", "width", ",", "n_channels", ")", ")", "\n", "# img_HhWwc", "\n", "out_image", "=", "out_image", ".", "transpose", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "# img_Hh_Ww_c", "\n", "out_image", "=", "out_image", ".", "reshape", "(", "(", "new_height", "*", "height", ",", "new_width", "*", "width", ",", "n_channels", ")", ")", "\n", "return", "out_image", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.__init__": [[21, 43], ["isinstance", "stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__", "stable_baselines3.common.preprocessing.is_image_space", "isinstance", "stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__", "copy.deepcopy", "vec_transpose.VecTransposeImage.spaces.items", "vec_transpose.VecTransposeImage.transpose_space", "stable_baselines3.common.preprocessing.is_image_space", "vec_transpose.VecTransposeImage.image_space_keys.append", "vec_transpose.VecTransposeImage.transpose_space"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_space"], ["def", "__init__", "(", "self", ",", "venv", ":", "VecEnv", ",", "skip", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "is_image_space", "(", "venv", ".", "observation_space", ")", "or", "isinstance", "(", "\n", "venv", ".", "observation_space", ",", "spaces", ".", "dict", ".", "Dict", "\n", ")", ",", "\"The observation space must be an image or dictionary observation space\"", "\n", "\n", "self", ".", "skip", "=", "skip", "\n", "# Do nothing", "\n", "if", "skip", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "venv", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "venv", ".", "observation_space", ",", "spaces", ".", "dict", ".", "Dict", ")", ":", "\n", "            ", "self", ".", "image_space_keys", "=", "[", "]", "\n", "observation_space", "=", "deepcopy", "(", "venv", ".", "observation_space", ")", "\n", "for", "key", ",", "space", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", ":", "\n", "                ", "if", "is_image_space", "(", "space", ")", ":", "\n", "# Keep track of which keys should be transposed later", "\n", "                    ", "self", ".", "image_space_keys", ".", "append", "(", "key", ")", "\n", "observation_space", ".", "spaces", "[", "key", "]", "=", "self", ".", "transpose_space", "(", "space", ",", "key", ")", "\n", "", "", "", "else", ":", "\n", "            ", "observation_space", "=", "self", ".", "transpose_space", "(", "venv", ".", "observation_space", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "venv", ",", "observation_space", "=", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_space": [[44, 61], ["stable_baselines3.common.preprocessing.is_image_space", "gym.spaces.Box", "stable_baselines3.common.preprocessing.is_image_space_channels_first"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first"], ["", "@", "staticmethod", "\n", "def", "transpose_space", "(", "observation_space", ":", "spaces", ".", "Box", ",", "key", ":", "str", "=", "\"\"", ")", "->", "spaces", ".", "Box", ":", "\n", "        ", "\"\"\"\n        Transpose an observation space (re-order channels).\n\n        :param observation_space:\n        :param key: In case of dictionary space, the key of the observation space.\n        :return:\n        \"\"\"", "\n", "# Sanity checks", "\n", "assert", "is_image_space", "(", "observation_space", ")", ",", "\"The observation space must be an image\"", "\n", "assert", "not", "is_image_space_channels_first", "(", "\n", "observation_space", "\n", ")", ",", "f\"The observation space {key} must follow the channel last convention\"", "\n", "height", ",", "width", ",", "channels", "=", "observation_space", ".", "shape", "\n", "new_shape", "=", "(", "channels", ",", "height", ",", "width", ")", "\n", "return", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "new_shape", ",", "dtype", "=", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_image": [[62, 73], ["numpy.transpose", "len", "numpy.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "transpose_image", "(", "image", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Transpose an image or batch of images (re-order channels).\n\n        :param image:\n        :return:\n        \"\"\"", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "            ", "return", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "np", ".", "transpose", "(", "image", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_observations": [[74, 93], ["isinstance", "copy.deepcopy", "vec_transpose.VecTransposeImage.transpose_image", "vec_transpose.VecTransposeImage.transpose_image"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_image", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_image"], ["", "def", "transpose_observations", "(", "self", ",", "observations", ":", "Union", "[", "np", ".", "ndarray", ",", "Dict", "]", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "]", ":", "\n", "        ", "\"\"\"\n        Transpose (if needed) and return new observations.\n\n        :param observations:\n        :return: Transposed observations\n        \"\"\"", "\n", "# Do nothing", "\n", "if", "self", ".", "skip", ":", "\n", "            ", "return", "observations", "\n", "\n", "", "if", "isinstance", "(", "observations", ",", "dict", ")", ":", "\n", "# Avoid modifying the original object in place", "\n", "            ", "observations", "=", "deepcopy", "(", "observations", ")", "\n", "for", "k", "in", "self", ".", "image_space_keys", ":", "\n", "                ", "observations", "[", "k", "]", "=", "self", ".", "transpose_image", "(", "observations", "[", "k", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "observations", "=", "self", ".", "transpose_image", "(", "observations", ")", "\n", "", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.step_wait": [[94, 105], ["vec_transpose.VecTransposeImage.venv.step_wait", "enumerate", "vec_transpose.VecTransposeImage.transpose_observations", "vec_transpose.VecTransposeImage.transpose_observations"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_observations", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_observations"], ["", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "observations", ",", "rewards", ",", "dones", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "\n", "# Transpose the terminal observations", "\n", "for", "idx", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "not", "done", ":", "\n", "                ", "continue", "\n", "", "if", "\"terminal_observation\"", "in", "infos", "[", "idx", "]", ":", "\n", "                ", "infos", "[", "idx", "]", "[", "\"terminal_observation\"", "]", "=", "self", ".", "transpose_observations", "(", "infos", "[", "idx", "]", "[", "\"terminal_observation\"", "]", ")", "\n", "\n", "", "", "return", "self", ".", "transpose_observations", "(", "observations", ")", ",", "rewards", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.reset": [[106, 111], ["vec_transpose.VecTransposeImage.transpose_observations", "vec_transpose.VecTransposeImage.venv.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.transpose_observations", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "]", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        \"\"\"", "\n", "return", "self", ".", "transpose_observations", "(", "self", ".", "venv", ".", "reset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_transpose.VecTransposeImage.close": [[112, 114], ["vec_transpose.VecTransposeImage.venv.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.__init__": [[25, 65], ["stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__", "isinstance", "os.path.abspath", "os.makedirs", "isinstance", "isinstance", "temp_env.get_attr"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr"], ["def", "__init__", "(", "\n", "self", ",", "\n", "venv", ":", "VecEnv", ",", "\n", "video_folder", ":", "str", ",", "\n", "record_video_trigger", ":", "Callable", "[", "[", "int", "]", ",", "bool", "]", ",", "\n", "video_length", ":", "int", "=", "200", ",", "\n", "name_prefix", ":", "str", "=", "\"rl-video\"", ",", "\n", ")", ":", "\n", "\n", "        ", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "\n", "self", ".", "env", "=", "venv", "\n", "# Temp variable to retrieve metadata", "\n", "temp_env", "=", "venv", "\n", "\n", "# Unwrap to retrieve metadata dict", "\n", "# that will be used by gym recorder", "\n", "while", "isinstance", "(", "temp_env", ",", "VecEnvWrapper", ")", ":", "\n", "            ", "temp_env", "=", "temp_env", ".", "venv", "\n", "\n", "", "if", "isinstance", "(", "temp_env", ",", "DummyVecEnv", ")", "or", "isinstance", "(", "temp_env", ",", "SubprocVecEnv", ")", ":", "\n", "            ", "metadata", "=", "temp_env", ".", "get_attr", "(", "\"metadata\"", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "metadata", "=", "temp_env", ".", "metadata", "\n", "\n", "", "self", ".", "env", ".", "metadata", "=", "metadata", "\n", "\n", "self", ".", "record_video_trigger", "=", "record_video_trigger", "\n", "self", ".", "video_recorder", "=", "None", "\n", "\n", "self", ".", "video_folder", "=", "os", ".", "path", ".", "abspath", "(", "video_folder", ")", "\n", "# Create output folder if needed", "\n", "os", ".", "makedirs", "(", "self", ".", "video_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "name_prefix", "=", "name_prefix", "\n", "self", ".", "step_id", "=", "0", "\n", "self", ".", "video_length", "=", "video_length", "\n", "\n", "self", ".", "recording", "=", "False", "\n", "self", ".", "recorded_frames", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.reset": [[66, 70], ["vec_video_recorder.VecVideoRecorder.venv.reset", "vec_video_recorder.VecVideoRecorder.start_video_recorder"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.start_video_recorder"], ["", "def", "reset", "(", "self", ")", "->", "VecEnvObs", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "start_video_recorder", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.start_video_recorder": [[71, 83], ["vec_video_recorder.VecVideoRecorder.close_video_recorder", "os.path.join", "gym.wrappers.monitoring.video_recorder.VideoRecorder", "vec_video_recorder.VecVideoRecorder.video_recorder.capture_frame"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.close_video_recorder"], ["", "def", "start_video_recorder", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "close_video_recorder", "(", ")", "\n", "\n", "video_name", "=", "f\"{self.name_prefix}-step-{self.step_id}-to-step-{self.step_id + self.video_length}\"", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "video_folder", ",", "video_name", ")", "\n", "self", ".", "video_recorder", "=", "video_recorder", ".", "VideoRecorder", "(", "\n", "env", "=", "self", ".", "env", ",", "base_path", "=", "base_path", ",", "metadata", "=", "{", "\"step_id\"", ":", "self", ".", "step_id", "}", "\n", ")", "\n", "\n", "self", ".", "video_recorder", ".", "capture_frame", "(", ")", "\n", "self", ".", "recorded_frames", "=", "1", "\n", "self", ".", "recording", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder._video_enabled": [[84, 86], ["vec_video_recorder.VecVideoRecorder.record_video_trigger"], "methods", ["None"], ["", "def", "_video_enabled", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "record_video_trigger", "(", "self", ".", "step_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.step_wait": [[87, 101], ["vec_video_recorder.VecVideoRecorder.venv.step_wait", "vec_video_recorder.VecVideoRecorder.video_recorder.capture_frame", "vec_video_recorder.VecVideoRecorder._video_enabled", "print", "vec_video_recorder.VecVideoRecorder.close_video_recorder", "vec_video_recorder.VecVideoRecorder.start_video_recorder"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder._video_enabled", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.close_video_recorder", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.start_video_recorder"], ["", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "\n", "self", ".", "step_id", "+=", "1", "\n", "if", "self", ".", "recording", ":", "\n", "            ", "self", ".", "video_recorder", ".", "capture_frame", "(", ")", "\n", "self", ".", "recorded_frames", "+=", "1", "\n", "if", "self", ".", "recorded_frames", ">", "self", ".", "video_length", ":", "\n", "                ", "print", "(", "f\"Saving video to {self.video_recorder.path}\"", ")", "\n", "self", ".", "close_video_recorder", "(", ")", "\n", "", "", "elif", "self", ".", "_video_enabled", "(", ")", ":", "\n", "            ", "self", ".", "start_video_recorder", "(", ")", "\n", "\n", "", "return", "obs", ",", "rews", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.close_video_recorder": [[102, 107], ["vec_video_recorder.VecVideoRecorder.video_recorder.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close_video_recorder", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "recording", ":", "\n", "            ", "self", ".", "video_recorder", ".", "close", "(", ")", "\n", "", "self", ".", "recording", "=", "False", "\n", "self", ".", "recorded_frames", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.close": [[108, 111], ["stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.close", "vec_video_recorder.VecVideoRecorder.close_video_recorder"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.close_video_recorder"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "VecEnvWrapper", ".", "close", "(", "self", ")", "\n", "self", ".", "close_video_recorder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_video_recorder.VecVideoRecorder.__del__": [[112, 114], ["vec_video_recorder.VecVideoRecorder.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.__init__": [[31, 70], ["stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__", "stable_baselines3.common.running_mean_std.RunningMeanStd", "numpy.zeros", "numpy.array", "numpy.array", "vec_normalize.VecNormalize._sanity_checks", "isinstance", "stable_baselines3.common.running_mean_std.RunningMeanStd", "stable_baselines3.common.running_mean_std.RunningMeanStd"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._sanity_checks"], ["def", "__init__", "(", "\n", "self", ",", "\n", "venv", ":", "VecEnv", ",", "\n", "training", ":", "bool", "=", "True", ",", "\n", "norm_obs", ":", "bool", "=", "True", ",", "\n", "norm_reward", ":", "bool", "=", "True", ",", "\n", "clip_obs", ":", "float", "=", "10.0", ",", "\n", "clip_reward", ":", "float", "=", "10.0", ",", "\n", "gamma", ":", "float", "=", "0.99", ",", "\n", "epsilon", ":", "float", "=", "1e-8", ",", "\n", "norm_obs_keys", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "\n", "self", ".", "norm_obs", "=", "norm_obs", "\n", "self", ".", "norm_obs_keys", "=", "norm_obs_keys", "\n", "# Check observation spaces", "\n", "if", "self", ".", "norm_obs", ":", "\n", "            ", "self", ".", "_sanity_checks", "(", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "                ", "self", ".", "obs_spaces", "=", "self", ".", "observation_space", ".", "spaces", "\n", "self", ".", "obs_rms", "=", "{", "key", ":", "RunningMeanStd", "(", "shape", "=", "self", ".", "obs_spaces", "[", "key", "]", ".", "shape", ")", "for", "key", "in", "self", ".", "norm_obs_keys", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "obs_spaces", "=", "None", "\n", "self", ".", "obs_rms", "=", "RunningMeanStd", "(", "shape", "=", "self", ".", "observation_space", ".", "shape", ")", "\n", "\n", "", "", "self", ".", "ret_rms", "=", "RunningMeanStd", "(", "shape", "=", "(", ")", ")", "\n", "self", ".", "clip_obs", "=", "clip_obs", "\n", "self", ".", "clip_reward", "=", "clip_reward", "\n", "# Returns: discounted rewards", "\n", "self", ".", "returns", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "norm_obs", "=", "norm_obs", "\n", "self", ".", "norm_reward", "=", "norm_reward", "\n", "self", ".", "old_obs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "old_reward", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._sanity_checks": [[71, 96], ["isinstance", "isinstance", "list", "ValueError", "vec_normalize.VecNormalize.observation_space.spaces.keys", "isinstance", "ValueError", "ValueError"], "methods", ["None"], ["", "def", "_sanity_checks", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Check the observations that are going to be normalized are of the correct type (spaces.Box).\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "# By default, we normalize all keys", "\n", "            ", "if", "self", ".", "norm_obs_keys", "is", "None", ":", "\n", "                ", "self", ".", "norm_obs_keys", "=", "list", "(", "self", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", ")", "\n", "# Check that all keys are of type Box", "\n", "", "for", "obs_key", "in", "self", ".", "norm_obs_keys", ":", "\n", "                ", "if", "not", "isinstance", "(", "self", ".", "observation_space", ".", "spaces", "[", "obs_key", "]", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f\"VecNormalize only supports `gym.spaces.Box` observation spaces but {obs_key} \"", "\n", "f\"is of type {self.observation_space.spaces[obs_key]}. \"", "\n", "\"You should probably explicitely pass the observation keys \"", "\n", "\" that should be normalized via the `norm_obs_keys` parameter.\"", "\n", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "            ", "if", "self", ".", "norm_obs_keys", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"`norm_obs_keys` param is applicable only with `gym.spaces.Dict` observation spaces\"", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"VecNormalize only supports `gym.spaces.Box` and `gym.spaces.Dict` observation spaces, \"", "\n", "f\"not {self.observation_space}\"", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.__getstate__": [[99, 111], ["vec_normalize.VecNormalize.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["", "", "def", "__getstate__", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Gets state for pickling.\n\n        Excludes self.venv, as in general VecEnv's may not be pickleable.\"\"\"", "\n", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "# these attributes are not pickleable", "\n", "del", "state", "[", "\"venv\"", "]", "\n", "del", "state", "[", "\"class_attributes\"", "]", "\n", "# these attributes depend on the above and so we would prefer not to pickle", "\n", "del", "state", "[", "\"returns\"", "]", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.__setstate__": [[112, 125], ["vec_normalize.VecNormalize.__dict__.update", "isinstance", "list", "state[].spaces.keys"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Restores pickled state.\n\n        User must call set_venv() after unpickling before using.\n\n        :param state:\"\"\"", "\n", "# Backward compatibility", "\n", "if", "\"norm_obs_keys\"", "not", "in", "state", "and", "isinstance", "(", "state", "[", "\"observation_space\"", "]", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "            ", "state", "[", "\"norm_obs_keys\"", "]", "=", "list", "(", "state", "[", "\"observation_space\"", "]", ".", "spaces", ".", "keys", "(", ")", ")", "\n", "", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "assert", "\"venv\"", "not", "in", "state", "\n", "self", ".", "venv", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.set_venv": [[126, 141], ["stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__", "stable_baselines3.common.utils.check_for_correct_spaces", "numpy.zeros", "ValueError"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.check_for_correct_spaces"], ["", "def", "set_venv", "(", "self", ",", "venv", ":", "VecEnv", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Sets the vector environment to wrap to venv.\n\n        Also sets attributes derived from this such as `num_env`.\n\n        :param venv:\n        \"\"\"", "\n", "if", "self", ".", "venv", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trying to set venv of already initialized VecNormalize wrapper.\"", ")", "\n", "", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "\n", "# Check only that the observation_space match", "\n", "utils", ".", "check_for_correct_spaces", "(", "venv", ",", "self", ".", "observation_space", ",", "venv", ".", "action_space", ")", "\n", "self", ".", "returns", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.step_wait": [[142, 175], ["vec_normalize.VecNormalize.venv.step_wait", "vec_normalize.VecNormalize.normalize_obs", "vec_normalize.VecNormalize.normalize_reward", "enumerate", "vec_normalize.VecNormalize._update_reward", "isinstance", "isinstance", "vec_normalize.VecNormalize.obs_rms.keys", "vec_normalize.VecNormalize.obs_rms.update", "vec_normalize.VecNormalize.normalize_obs", "vec_normalize.VecNormalize.obs_rms[].update"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._update_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "\"\"\"\n        Apply sequence of actions to sequence of environments\n        actions -> (observations, rewards, dones)\n\n        where ``dones`` is a boolean vector indicating whether each element is new.\n        \"\"\"", "\n", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "old_obs", "=", "obs", "\n", "self", ".", "old_reward", "=", "rewards", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "norm_obs", ":", "\n", "            ", "if", "isinstance", "(", "obs", ",", "dict", ")", "and", "isinstance", "(", "self", ".", "obs_rms", ",", "dict", ")", ":", "\n", "                ", "for", "key", "in", "self", ".", "obs_rms", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "obs_rms", "[", "key", "]", ".", "update", "(", "obs", "[", "key", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "obs_rms", ".", "update", "(", "obs", ")", "\n", "\n", "", "", "obs", "=", "self", ".", "normalize_obs", "(", "obs", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_update_reward", "(", "rewards", ")", "\n", "", "rewards", "=", "self", ".", "normalize_reward", "(", "rewards", ")", "\n", "\n", "# Normalize the terminal observations", "\n", "for", "idx", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "not", "done", ":", "\n", "                ", "continue", "\n", "", "if", "\"terminal_observation\"", "in", "infos", "[", "idx", "]", ":", "\n", "                ", "infos", "[", "idx", "]", "[", "\"terminal_observation\"", "]", "=", "self", ".", "normalize_obs", "(", "infos", "[", "idx", "]", "[", "\"terminal_observation\"", "]", ")", "\n", "\n", "", "", "self", ".", "returns", "[", "dones", "]", "=", "0", "\n", "return", "obs", ",", "rewards", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._update_reward": [[176, 180], ["vec_normalize.VecNormalize.ret_rms.update"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["", "def", "_update_reward", "(", "self", ",", "reward", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "\"\"\"Update reward normalization statistics.\"\"\"", "\n", "self", ".", "returns", "=", "self", ".", "returns", "*", "self", ".", "gamma", "+", "reward", "\n", "self", ".", "ret_rms", ".", "update", "(", "self", ".", "returns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs": [[181, 189], ["numpy.clip", "numpy.sqrt"], "methods", ["None"], ["", "def", "_normalize_obs", "(", "self", ",", "obs", ":", "np", ".", "ndarray", ",", "obs_rms", ":", "RunningMeanStd", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Helper to normalize observation.\n        :param obs:\n        :param obs_rms: associated statistics\n        :return: normalized observation\n        \"\"\"", "\n", "return", "np", ".", "clip", "(", "(", "obs", "-", "obs_rms", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "obs_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._unnormalize_obs": [[190, 198], ["numpy.sqrt"], "methods", ["None"], ["", "def", "_unnormalize_obs", "(", "self", ",", "obs", ":", "np", ".", "ndarray", ",", "obs_rms", ":", "RunningMeanStd", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Helper to unnormalize observation.\n        :param obs:\n        :param obs_rms: associated statistics\n        :return: unnormalized observation\n        \"\"\"", "\n", "return", "(", "obs", "*", "np", ".", "sqrt", "(", "obs_rms", ".", "var", "+", "self", ".", "epsilon", ")", ")", "+", "obs_rms", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs": [[199, 214], ["copy.deepcopy", "isinstance", "isinstance", "vec_normalize.VecNormalize._normalize_obs().astype", "vec_normalize.VecNormalize._normalize_obs().astype", "vec_normalize.VecNormalize._normalize_obs", "vec_normalize.VecNormalize._normalize_obs"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._normalize_obs"], ["", "def", "normalize_obs", "(", "self", ",", "obs", ":", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"\n        Normalize observations using this VecNormalize's observations statistics.\n        Calling this method does not update statistics.\n        \"\"\"", "\n", "# Avoid modifying by reference the original object", "\n", "obs_", "=", "deepcopy", "(", "obs", ")", "\n", "if", "self", ".", "norm_obs", ":", "\n", "            ", "if", "isinstance", "(", "obs", ",", "dict", ")", "and", "isinstance", "(", "self", ".", "obs_rms", ",", "dict", ")", ":", "\n", "# Only normalize the specified keys", "\n", "                ", "for", "key", "in", "self", ".", "norm_obs_keys", ":", "\n", "                    ", "obs_", "[", "key", "]", "=", "self", ".", "_normalize_obs", "(", "obs", "[", "key", "]", ",", "self", ".", "obs_rms", "[", "key", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "                ", "obs_", "=", "self", ".", "_normalize_obs", "(", "obs", ",", "self", ".", "obs_rms", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "", "return", "obs_", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_reward": [[215, 223], ["numpy.clip", "numpy.sqrt"], "methods", ["None"], ["", "def", "normalize_reward", "(", "self", ",", "reward", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Normalize rewards using this VecNormalize's rewards statistics.\n        Calling this method does not update statistics.\n        \"\"\"", "\n", "if", "self", ".", "norm_reward", ":", "\n", "            ", "reward", "=", "np", ".", "clip", "(", "reward", "/", "np", ".", "sqrt", "(", "self", ".", "ret_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "clip_reward", ",", "self", ".", "clip_reward", ")", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.unnormalize_obs": [[224, 234], ["copy.deepcopy", "isinstance", "isinstance", "vec_normalize.VecNormalize._unnormalize_obs", "vec_normalize.VecNormalize._unnormalize_obs"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._unnormalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize._unnormalize_obs"], ["", "def", "unnormalize_obs", "(", "self", ",", "obs", ":", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "# Avoid modifying by reference the original object", "\n", "        ", "obs_", "=", "deepcopy", "(", "obs", ")", "\n", "if", "self", ".", "norm_obs", ":", "\n", "            ", "if", "isinstance", "(", "obs", ",", "dict", ")", "and", "isinstance", "(", "self", ".", "obs_rms", ",", "dict", ")", ":", "\n", "                ", "for", "key", "in", "self", ".", "norm_obs_keys", ":", "\n", "                    ", "obs_", "[", "key", "]", "=", "self", ".", "_unnormalize_obs", "(", "obs", "[", "key", "]", ",", "self", ".", "obs_rms", "[", "key", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "obs_", "=", "self", ".", "_unnormalize_obs", "(", "obs", ",", "self", ".", "obs_rms", ")", "\n", "", "", "return", "obs_", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.unnormalize_reward": [[235, 239], ["numpy.sqrt"], "methods", ["None"], ["", "def", "unnormalize_reward", "(", "self", ",", "reward", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "if", "self", ".", "norm_reward", ":", "\n", "            ", "return", "reward", "*", "np", ".", "sqrt", "(", "self", ".", "ret_rms", ".", "var", "+", "self", ".", "epsilon", ")", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs": [[240, 246], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_original_obs", "(", "self", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"\n        Returns an unnormalized version of the observations from the most recent\n        step or reset.\n        \"\"\"", "\n", "return", "deepcopy", "(", "self", ".", "old_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_reward": [[247, 252], ["vec_normalize.VecNormalize.old_reward.copy"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["", "def", "get_original_reward", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Returns an unnormalized version of the rewards from the most recent step.\n        \"\"\"", "\n", "return", "self", ".", "old_reward", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.reset": [[253, 268], ["vec_normalize.VecNormalize.venv.reset", "numpy.zeros", "vec_normalize.VecNormalize.normalize_obs", "isinstance", "isinstance", "vec_normalize.VecNormalize.obs_rms.keys", "vec_normalize.VecNormalize.obs_rms.update", "vec_normalize.VecNormalize.obs_rms[].update"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["", "def", "reset", "(", "self", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        :return: first observation of the episode\n        \"\"\"", "\n", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "old_obs", "=", "obs", "\n", "self", ".", "returns", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "if", "self", ".", "training", "and", "self", ".", "norm_obs", ":", "\n", "            ", "if", "isinstance", "(", "obs", ",", "dict", ")", "and", "isinstance", "(", "self", ".", "obs_rms", ",", "dict", ")", ":", "\n", "                ", "for", "key", "in", "self", ".", "obs_rms", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "obs_rms", "[", "key", "]", ".", "update", "(", "obs", "[", "key", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "obs_rms", ".", "update", "(", "obs", ")", "\n", "", "", "return", "self", ".", "normalize_obs", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load": [[269, 282], ["pickle.load.set_venv", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.set_venv", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load"], ["", "@", "staticmethod", "\n", "def", "load", "(", "load_path", ":", "str", ",", "venv", ":", "VecEnv", ")", "->", "\"VecNormalize\"", ":", "\n", "        ", "\"\"\"\n        Loads a saved VecNormalize object.\n\n        :param load_path: the path to load from.\n        :param venv: the VecEnv to wrap.\n        :return:\n        \"\"\"", "\n", "with", "open", "(", "load_path", ",", "\"rb\"", ")", "as", "file_handler", ":", "\n", "            ", "vec_normalize", "=", "pickle", ".", "load", "(", "file_handler", ")", "\n", "", "vec_normalize", ".", "set_venv", "(", "venv", ")", "\n", "return", "vec_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save": [[283, 292], ["open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump"], ["", "def", "save", "(", "self", ",", "save_path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save current VecNormalize object with\n        all running statistics and settings (e.g. clip_obs)\n\n        :param save_path: The path to save to\n        \"\"\"", "\n", "with", "open", "(", "save_path", ",", "\"wb\"", ")", "as", "file_handler", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ",", "file_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.ret": [[293, 297], ["warnings.warn"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "", "@", "property", "\n", "def", "ret", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"`VecNormalize` `ret` attribute is deprecated. Please use `returns` instead.\"", ",", "DeprecationWarning", ")", "\n", "return", "self", ".", "returns", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.__init__": [[26, 68], ["stable_baselines3.common.vec_env.base_vec_env.VecEnvWrapper.__init__", "time.time", "warnings.warn", "hasattr", "ResultsWriter", "venv.env_is_wrapped"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped"], ["def", "__init__", "(", "\n", "self", ",", "\n", "venv", ":", "VecEnv", ",", "\n", "filename", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "info_keywords", ":", "Tuple", "[", "str", ",", "...", "]", "=", "(", ")", ",", "\n", ")", ":", "\n", "# Avoid circular import", "\n", "        ", "from", "stable_baselines3", ".", "common", ".", "monitor", "import", "Monitor", ",", "ResultsWriter", "\n", "\n", "# This check is not valid for special `VecEnv`", "\n", "# like the ones created by Procgen, that does follow completely", "\n", "# the `VecEnv` interface", "\n", "try", ":", "\n", "            ", "is_wrapped_with_monitor", "=", "venv", ".", "env_is_wrapped", "(", "Monitor", ")", "[", "0", "]", "\n", "", "except", "AttributeError", ":", "\n", "            ", "is_wrapped_with_monitor", "=", "False", "\n", "\n", "", "if", "is_wrapped_with_monitor", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"The environment is already wrapped with a `Monitor` wrapper\"", "\n", "\"but you are wrapping it with a `VecMonitor` wrapper, the `Monitor` statistics will be\"", "\n", "\"overwritten by the `VecMonitor` ones.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "\n", "", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "self", ".", "episode_returns", "=", "None", "\n", "self", ".", "episode_lengths", "=", "None", "\n", "self", ".", "episode_count", "=", "0", "\n", "self", ".", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "env_id", "=", "None", "\n", "if", "hasattr", "(", "venv", ",", "\"spec\"", ")", "and", "venv", ".", "spec", "is", "not", "None", ":", "\n", "            ", "env_id", "=", "venv", ".", "spec", ".", "id", "\n", "\n", "", "if", "filename", ":", "\n", "            ", "self", ".", "results_writer", "=", "ResultsWriter", "(", "\n", "filename", ",", "header", "=", "{", "\"t_start\"", ":", "self", ".", "t_start", ",", "\"env_id\"", ":", "env_id", "}", ",", "extra_keys", "=", "info_keywords", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "results_writer", "=", "None", "\n", "", "self", ".", "info_keywords", "=", "info_keywords", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.reset": [[69, 74], ["vec_monitor.VecMonitor.venv.reset", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ")", "->", "VecEnvObs", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "episode_returns", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "episode_lengths", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.step_wait": [[75, 96], ["vec_monitor.VecMonitor.venv.step_wait", "list", "range", "len", "infos[].copy", "round", "vec_monitor.VecMonitor.results_writer.write_row", "time.time"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.ResultsWriter.write_row"], ["", "def", "step_wait", "(", "self", ")", "->", "VecEnvStepReturn", ":", "\n", "        ", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "episode_returns", "+=", "rewards", "\n", "self", ".", "episode_lengths", "+=", "1", "\n", "new_infos", "=", "list", "(", "infos", "[", ":", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dones", ")", ")", ":", "\n", "            ", "if", "dones", "[", "i", "]", ":", "\n", "                ", "info", "=", "infos", "[", "i", "]", ".", "copy", "(", ")", "\n", "episode_return", "=", "self", ".", "episode_returns", "[", "i", "]", "\n", "episode_length", "=", "self", ".", "episode_lengths", "[", "i", "]", "\n", "episode_info", "=", "{", "\"r\"", ":", "episode_return", ",", "\"l\"", ":", "episode_length", ",", "\"t\"", ":", "round", "(", "time", ".", "time", "(", ")", "-", "self", ".", "t_start", ",", "6", ")", "}", "\n", "for", "key", "in", "self", ".", "info_keywords", ":", "\n", "                    ", "episode_info", "[", "key", "]", "=", "info", "[", "key", "]", "\n", "", "info", "[", "\"episode\"", "]", "=", "episode_info", "\n", "self", ".", "episode_count", "+=", "1", "\n", "self", ".", "episode_returns", "[", "i", "]", "=", "0", "\n", "self", ".", "episode_lengths", "[", "i", "]", "=", "0", "\n", "if", "self", ".", "results_writer", ":", "\n", "                    ", "self", ".", "results_writer", ".", "write_row", "(", "episode_info", ")", "\n", "", "new_infos", "[", "i", "]", "=", "info", "\n", "", "", "return", "obs", ",", "rewards", ",", "dones", ",", "new_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close": [[97, 101], ["vec_monitor.VecMonitor.venv.close", "vec_monitor.VecMonitor.results_writer.close"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "results_writer", ":", "\n", "            ", "self", ".", "results_writer", ".", "close", "(", ")", "\n", "", "return", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedObservations.__init__": [[26, 42], ["stacked_observations.StackedObservations.compute_stacking", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedObservations.compute_stacking", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_envs", ":", "int", ",", "\n", "n_stack", ":", "int", ",", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "channels_order", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "n_stack", "=", "n_stack", "\n", "(", "\n", "self", ".", "channels_first", ",", "\n", "self", ".", "stack_dimension", ",", "\n", "self", ".", "stackedobs", ",", "\n", "self", ".", "repeat_axis", ",", "\n", ")", "=", "self", ".", "compute_stacking", "(", "num_envs", ",", "n_stack", ",", "observation_space", ",", "channels_order", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedObservations.compute_stacking": [[43, 81], ["numpy.repeat", "numpy.zeros", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space_channels_first"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first"], ["", "@", "staticmethod", "\n", "def", "compute_stacking", "(", "\n", "num_envs", ":", "int", ",", "\n", "n_stack", ":", "int", ",", "\n", "observation_space", ":", "spaces", ".", "Box", ",", "\n", "channels_order", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "bool", ",", "int", ",", "np", ".", "ndarray", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Calculates the parameters in order to stack observations\n\n        :param num_envs: Number of environments in the stack\n        :param n_stack: The number of observations to stack\n        :param observation_space: The observation space\n        :param channels_order: The order of the channels\n        :return: tuple of channels_first, stack_dimension, stackedobs, repeat_axis\n        \"\"\"", "\n", "channels_first", "=", "False", "\n", "if", "channels_order", "is", "None", ":", "\n", "# Detect channel location automatically for images", "\n", "            ", "if", "is_image_space", "(", "observation_space", ")", ":", "\n", "                ", "channels_first", "=", "is_image_space_channels_first", "(", "observation_space", ")", "\n", "", "else", ":", "\n", "# Default behavior for non-image space, stack on the last axis", "\n", "                ", "channels_first", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "assert", "channels_order", "in", "{", "\n", "\"last\"", ",", "\n", "\"first\"", ",", "\n", "}", ",", "\"`channels_order` must be one of following: 'last', 'first'\"", "\n", "\n", "channels_first", "=", "channels_order", "==", "\"first\"", "\n", "\n", "# This includes the vec-env dimension (first)", "\n", "", "stack_dimension", "=", "1", "if", "channels_first", "else", "-", "1", "\n", "repeat_axis", "=", "0", "if", "channels_first", "else", "-", "1", "\n", "low", "=", "np", ".", "repeat", "(", "observation_space", ".", "low", ",", "n_stack", ",", "axis", "=", "repeat_axis", ")", "\n", "stackedobs", "=", "np", ".", "zeros", "(", "(", "num_envs", ",", ")", "+", "low", ".", "shape", ",", "low", ".", "dtype", ")", "\n", "return", "channels_first", ",", "stack_dimension", ",", "stackedobs", ",", "repeat_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedObservations.stack_observation_space": [[82, 91], ["numpy.repeat", "numpy.repeat", "gym.spaces.Box"], "methods", ["None"], ["", "def", "stack_observation_space", "(", "self", ",", "observation_space", ":", "spaces", ".", "Box", ")", "->", "spaces", ".", "Box", ":", "\n", "        ", "\"\"\"\n        Given an observation space, returns a new observation space with stacked observations\n\n        :return: New observation space with stacked dimensions\n        \"\"\"", "\n", "low", "=", "np", ".", "repeat", "(", "observation_space", ".", "low", ",", "self", ".", "n_stack", ",", "axis", "=", "self", ".", "repeat_axis", ")", "\n", "high", "=", "np", ".", "repeat", "(", "observation_space", ".", "high", ",", "self", ".", "n_stack", ",", "axis", "=", "self", ".", "repeat_axis", ")", "\n", "return", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedObservations.reset": [[92, 105], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "observation", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Resets the stackedobs, adds the reset observation to the stack, and returns the stack\n\n        :param observation: Reset observation\n        :return: The stacked reset observation\n        \"\"\"", "\n", "self", ".", "stackedobs", "[", "...", "]", "=", "0", "\n", "if", "self", ".", "channels_first", ":", "\n", "            ", "self", ".", "stackedobs", "[", ":", ",", "-", "observation", ".", "shape", "[", "self", ".", "stack_dimension", "]", ":", ",", "...", "]", "=", "observation", "\n", "", "else", ":", "\n", "            ", "self", ".", "stackedobs", "[", "...", ",", "-", "observation", ".", "shape", "[", "self", ".", "stack_dimension", "]", ":", "]", "=", "observation", "\n", "", "return", "self", ".", "stackedobs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedObservations.update": [[106, 145], ["numpy.roll", "enumerate", "warnings.warn", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "def", "update", "(", "\n", "self", ",", "\n", "observations", ":", "np", ".", "ndarray", ",", "\n", "dones", ":", "np", ".", "ndarray", ",", "\n", "infos", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        Adds the observations to the stack and uses the dones to update the infos.\n\n        :param observations: numpy array of observations\n        :param dones: numpy array of done info\n        :param infos: numpy array of info dicts\n        :return: tuple of the stacked observations and the updated infos\n        \"\"\"", "\n", "stack_ax_size", "=", "observations", ".", "shape", "[", "self", ".", "stack_dimension", "]", "\n", "self", ".", "stackedobs", "=", "np", ".", "roll", "(", "self", ".", "stackedobs", ",", "shift", "=", "-", "stack_ax_size", ",", "axis", "=", "self", ".", "stack_dimension", ")", "\n", "for", "i", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "if", "\"terminal_observation\"", "in", "infos", "[", "i", "]", ":", "\n", "                    ", "old_terminal", "=", "infos", "[", "i", "]", "[", "\"terminal_observation\"", "]", "\n", "if", "self", ".", "channels_first", ":", "\n", "                        ", "new_terminal", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "stackedobs", "[", "i", ",", ":", "-", "stack_ax_size", ",", "...", "]", ",", "old_terminal", ")", ",", "\n", "axis", "=", "0", ",", "# self.stack_dimension - 1, as there is not batch dim", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "new_terminal", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "stackedobs", "[", "i", ",", "...", ",", ":", "-", "stack_ax_size", "]", ",", "old_terminal", ")", ",", "\n", "axis", "=", "self", ".", "stack_dimension", ",", "\n", ")", "\n", "", "infos", "[", "i", "]", "[", "\"terminal_observation\"", "]", "=", "new_terminal", "\n", "", "else", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"VecFrameStack wrapping a VecEnv without terminal_observation info\"", ")", "\n", "", "self", ".", "stackedobs", "[", "i", "]", "=", "0", "\n", "", "", "if", "self", ".", "channels_first", ":", "\n", "            ", "self", ".", "stackedobs", "[", ":", ",", "-", "observations", ".", "shape", "[", "self", ".", "stack_dimension", "]", ":", ",", "...", "]", "=", "observations", "\n", "", "else", ":", "\n", "            ", "self", ".", "stackedobs", "[", "...", ",", "-", "observations", ".", "shape", "[", "self", ".", "stack_dimension", "]", ":", "]", "=", "observations", "\n", "", "return", "self", ".", "stackedobs", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.__init__": [[162, 187], ["observation_space.spaces.items", "isinstance", "stacked_observations.StackedDictObservations.compute_stacking", "isinstance"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedObservations.compute_stacking"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_envs", ":", "int", ",", "\n", "n_stack", ":", "int", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", "channels_order", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_stack", "=", "n_stack", "\n", "self", ".", "channels_first", "=", "{", "}", "\n", "self", ".", "stack_dimension", "=", "{", "}", "\n", "self", ".", "stackedobs", "=", "{", "}", "\n", "self", ".", "repeat_axis", "=", "{", "}", "\n", "\n", "for", "key", ",", "subspace", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "subspace", ",", "spaces", ".", "Box", ")", ",", "\"StackedDictObservations only works with nested gym.spaces.Box\"", "\n", "if", "isinstance", "(", "channels_order", ",", "str", ")", "or", "channels_order", "is", "None", ":", "\n", "                ", "subspace_channel_order", "=", "channels_order", "\n", "", "else", ":", "\n", "                ", "subspace_channel_order", "=", "channels_order", "[", "key", "]", "\n", "", "(", "\n", "self", ".", "channels_first", "[", "key", "]", ",", "\n", "self", ".", "stack_dimension", "[", "key", "]", ",", "\n", "self", ".", "stackedobs", "[", "key", "]", ",", "\n", "self", ".", "repeat_axis", "[", "key", "]", ",", "\n", ")", "=", "self", ".", "compute_stacking", "(", "num_envs", ",", "n_stack", ",", "subspace", ",", "subspace_channel_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.stack_observation_space": [[188, 201], ["observation_space.spaces.items", "gym.spaces.Dict", "numpy.repeat", "numpy.repeat", "gym.spaces.Box"], "methods", ["None"], ["", "", "def", "stack_observation_space", "(", "self", ",", "observation_space", ":", "spaces", ".", "Dict", ")", "->", "spaces", ".", "Dict", ":", "\n", "        ", "\"\"\"\n        Returns the stacked verson of a Dict observation space\n\n        :param observation_space: Dict observation space to stack\n        :return: stacked observation space\n        \"\"\"", "\n", "spaces_dict", "=", "{", "}", "\n", "for", "key", ",", "subspace", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", ":", "\n", "            ", "low", "=", "np", ".", "repeat", "(", "subspace", ".", "low", ",", "self", ".", "n_stack", ",", "axis", "=", "self", ".", "repeat_axis", "[", "key", "]", ")", "\n", "high", "=", "np", ".", "repeat", "(", "subspace", ".", "high", ",", "self", ".", "n_stack", ",", "axis", "=", "self", ".", "repeat_axis", "[", "key", "]", ")", "\n", "spaces_dict", "[", "key", "]", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "subspace", ".", "dtype", ")", "\n", "", "return", "spaces", ".", "Dict", "(", "spaces", "=", "spaces_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.reset": [[202, 216], ["observation.items"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "observation", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Resets the stacked observations, adds the reset observation to the stack, and returns the stack\n\n        :param observation: Reset observation\n        :return: Stacked reset observations\n        \"\"\"", "\n", "for", "key", ",", "obs", "in", "observation", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "stackedobs", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "if", "self", ".", "channels_first", "[", "key", "]", ":", "\n", "                ", "self", ".", "stackedobs", "[", "key", "]", "[", ":", ",", "-", "obs", ".", "shape", "[", "self", ".", "stack_dimension", "[", "key", "]", "]", ":", ",", "...", "]", "=", "obs", "\n", "", "else", ":", "\n", "                ", "self", ".", "stackedobs", "[", "key", "]", "[", "...", ",", "-", "obs", ".", "shape", "[", "self", ".", "stack_dimension", "[", "key", "]", "]", ":", "]", "=", "obs", "\n", "", "", "return", "self", ".", "stackedobs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update": [[217, 267], ["stacked_observations.StackedDictObservations.stackedobs.keys", "numpy.roll", "enumerate", "warnings.warn", "numpy.vstack", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn"], ["", "def", "update", "(", "\n", "self", ",", "\n", "observations", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "np", ".", "ndarray", ",", "\n", "infos", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        Adds the observations to the stack and uses the dones to update the infos.\n\n        :param observations: Dict of numpy arrays of observations\n        :param dones: numpy array of dones\n        :param infos: dict of infos\n        :return: tuple of the stacked observations and the updated infos\n        \"\"\"", "\n", "for", "key", "in", "self", ".", "stackedobs", ".", "keys", "(", ")", ":", "\n", "            ", "stack_ax_size", "=", "observations", "[", "key", "]", ".", "shape", "[", "self", ".", "stack_dimension", "[", "key", "]", "]", "\n", "self", ".", "stackedobs", "[", "key", "]", "=", "np", ".", "roll", "(", "\n", "self", ".", "stackedobs", "[", "key", "]", ",", "\n", "shift", "=", "-", "stack_ax_size", ",", "\n", "axis", "=", "self", ".", "stack_dimension", "[", "key", "]", ",", "\n", ")", "\n", "\n", "for", "i", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "                ", "if", "done", ":", "\n", "                    ", "if", "\"terminal_observation\"", "in", "infos", "[", "i", "]", ":", "\n", "                        ", "old_terminal", "=", "infos", "[", "i", "]", "[", "\"terminal_observation\"", "]", "[", "key", "]", "\n", "if", "self", ".", "channels_first", "[", "key", "]", ":", "\n", "                            ", "new_terminal", "=", "np", ".", "vstack", "(", "\n", "(", "\n", "self", ".", "stackedobs", "[", "key", "]", "[", "i", ",", ":", "-", "stack_ax_size", ",", "...", "]", ",", "\n", "old_terminal", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "new_terminal", "=", "np", ".", "concatenate", "(", "\n", "(", "\n", "self", ".", "stackedobs", "[", "key", "]", "[", "i", ",", "...", ",", ":", "-", "stack_ax_size", "]", ",", "\n", "old_terminal", ",", "\n", ")", ",", "\n", "axis", "=", "self", ".", "stack_dimension", "[", "key", "]", ",", "\n", ")", "\n", "", "infos", "[", "i", "]", "[", "\"terminal_observation\"", "]", "[", "key", "]", "=", "new_terminal", "\n", "", "else", ":", "\n", "                        ", "warnings", ".", "warn", "(", "\"VecFrameStack wrapping a VecEnv without terminal_observation info\"", ")", "\n", "", "self", ".", "stackedobs", "[", "key", "]", "[", "i", "]", "=", "0", "\n", "", "", "if", "self", ".", "channels_first", "[", "key", "]", ":", "\n", "                ", "self", ".", "stackedobs", "[", "key", "]", "[", ":", ",", "-", "stack_ax_size", ":", ",", "...", "]", "=", "observations", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "stackedobs", "[", "key", "]", "[", "...", ",", "-", "stack_ax_size", ":", "]", "=", "observations", "[", "key", "]", "\n", "", "", "return", "self", ".", "stackedobs", ",", "infos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_wrapper": [[23, 37], ["isinstance", "isinstance", "stable_baselines3.common.vec_env.vec_normalize.VecNormalize"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_normalize": [[39, 45], ["__init__.unwrap_vec_wrapper"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_wrapper"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.is_vecenv_wrapped": [[47, 56], ["__init__.unwrap_vec_wrapper"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_wrapper"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.sync_envs_normalization": [[59, 75], ["isinstance", "isinstance", "hasattr", "copy.deepcopy", "copy.deepcopy"], "function", ["None"], []], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.util.copy_obs_dict": [[14, 23], ["isinstance", "collections.OrderedDict", "type", "numpy.copy", "obs.items"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy"], ["def", "copy_obs_dict", "(", "obs", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Deep-copy a dict of numpy arrays.\n\n    :param obs: a dict of numpy arrays.\n    :return: a dict of copied numpy arrays.\n    \"\"\"", "\n", "assert", "isinstance", "(", "obs", ",", "OrderedDict", ")", ",", "f\"unexpected type for observations '{type(obs)}'\"", "\n", "return", "OrderedDict", "(", "[", "(", "k", ",", "np", ".", "copy", "(", "v", ")", ")", "for", "k", ",", "v", "in", "obs", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.util.dict_to_obs": [[25, 44], ["isinstance", "isinstance", "tuple", "len", "len", "set", "obs_dict.keys", "range", "len"], "function", ["None"], ["", "def", "dict_to_obs", "(", "obs_space", ":", "gym", ".", "spaces", ".", "Space", ",", "obs_dict", ":", "Dict", "[", "Any", ",", "np", ".", "ndarray", "]", ")", "->", "VecEnvObs", ":", "\n", "    ", "\"\"\"\n    Convert an internal representation raw_obs into the appropriate type\n    specified by space.\n\n    :param obs_space: an observation space.\n    :param obs_dict: a dict of numpy arrays.\n    :return: returns an observation of the same type as space.\n        If space is Dict, function is identity; if space is Tuple, converts dict to Tuple;\n        otherwise, space is unstructured and returns the value raw_obs[None].\n    \"\"\"", "\n", "if", "isinstance", "(", "obs_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "        ", "return", "obs_dict", "\n", "", "elif", "isinstance", "(", "obs_space", ",", "gym", ".", "spaces", ".", "Tuple", ")", ":", "\n", "        ", "assert", "len", "(", "obs_dict", ")", "==", "len", "(", "obs_space", ".", "spaces", ")", ",", "\"size of observation does not match size of observation space\"", "\n", "return", "tuple", "(", "obs_dict", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "obs_space", ".", "spaces", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "set", "(", "obs_dict", ".", "keys", "(", ")", ")", "==", "{", "None", "}", ",", "\"multiple observation keys for unstructured observation space\"", "\n", "return", "obs_dict", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.util.obs_space_info": [[46, 77], ["stable_baselines3.common.preprocessing.check_for_nested_spaces", "isinstance", "subspaces.items", "isinstance", "isinstance", "keys.append", "hasattr", "enumerate", "type"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.check_for_nested_spaces"], ["", "", "def", "obs_space_info", "(", "obs_space", ":", "gym", ".", "spaces", ".", "Space", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Dict", "[", "Any", ",", "Tuple", "[", "int", ",", "...", "]", "]", ",", "Dict", "[", "Any", ",", "np", ".", "dtype", "]", "]", ":", "\n", "    ", "\"\"\"\n    Get dict-structured information about a gym.Space.\n\n    Dict spaces are represented directly by their dict of subspaces.\n    Tuple spaces are converted into a dict with keys indexing into the tuple.\n    Unstructured spaces are represented by {None: obs_space}.\n\n    :param obs_space: an observation space\n    :return: A tuple (keys, shapes, dtypes):\n        keys: a list of dict keys.\n        shapes: a dict mapping keys to shapes.\n        dtypes: a dict mapping keys to dtypes.\n    \"\"\"", "\n", "check_for_nested_spaces", "(", "obs_space", ")", "\n", "if", "isinstance", "(", "obs_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs_space", ".", "spaces", ",", "OrderedDict", ")", ",", "\"Dict space must have ordered subspaces\"", "\n", "subspaces", "=", "obs_space", ".", "spaces", "\n", "", "elif", "isinstance", "(", "obs_space", ",", "gym", ".", "spaces", ".", "Tuple", ")", ":", "\n", "        ", "subspaces", "=", "{", "i", ":", "space", "for", "i", ",", "space", "in", "enumerate", "(", "obs_space", ".", "spaces", ")", "}", "\n", "", "else", ":", "\n", "        ", "assert", "not", "hasattr", "(", "obs_space", ",", "\"spaces\"", ")", ",", "f\"Unsupported structured space '{type(obs_space)}'\"", "\n", "subspaces", "=", "{", "None", ":", "obs_space", "}", "\n", "", "keys", "=", "[", "]", "\n", "shapes", "=", "{", "}", "\n", "dtypes", "=", "{", "}", "\n", "for", "key", ",", "box", "in", "subspaces", ".", "items", "(", ")", ":", "\n", "        ", "keys", ".", "append", "(", "key", ")", "\n", "shapes", "[", "key", "]", "=", "box", ".", "shape", "\n", "dtypes", "[", "key", "]", "=", "box", ".", "dtype", "\n", "", "return", "keys", ",", "shapes", ",", "dtypes", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv.__init__": [[19, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "space", ")", ":", "\n", "        ", "\"\"\"\n        Custom gym environment for testing purposes\n        \"\"\"", "\n", "self", ".", "action_space", "=", "space", "\n", "self", ".", "observation_space", "=", "space", "\n", "self", ".", "current_step", "=", "0", "\n", "self", ".", "ep_length", "=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv.reset": [[28, 32], ["test_vec_envs.CustomGymEnv._choose_next_state"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv._choose_next_state"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_step", "=", "0", "\n", "self", ".", "_choose_next_state", "(", ")", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv.step": [[33, 39], ["float", "test_vec_envs.CustomGymEnv._choose_next_state", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv._choose_next_state"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "reward", "=", "float", "(", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "self", ".", "_choose_next_state", "(", ")", "\n", "self", ".", "current_step", "+=", "1", "\n", "done", "=", "self", ".", "current_step", ">=", "self", ".", "ep_length", "\n", "return", "self", ".", "state", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv._choose_next_state": [[40, 42], ["test_vec_envs.CustomGymEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "_choose_next_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv.render": [[43, 46], ["numpy.zeros"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"human\"", ")", ":", "\n", "        ", "if", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "4", ",", "4", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv.seed": [[47, 51], ["numpy.random.seed", "test_vec_envs.CustomGymEnv.observation_space.seed"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "observation_space", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomGymEnv.custom_method": [[52, 63], ["numpy.ones"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "custom_method", "(", "dim_0", "=", "1", ",", "dim_1", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Dummy method to test call to custom method\n        from VecEnv\n\n        :param dim_0: (int)\n        :param dim_1: (int)\n        :return: (np.ndarray)\n        \"\"\"", "\n", "return", "np", ".", "ones", "(", "(", "dim_0", ",", "dim_1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.StepEnv.__init__": [[137, 144], ["gym.spaces.Discrete", "gym.spaces.Box", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_steps", ")", ":", "\n", "        ", "\"\"\"Gym environment for testing that terminal observation is inserted\n        correctly.\"\"\"", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "array", "(", "[", "999", "]", ")", ",", "dtype", "=", "\"int\"", ")", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "current_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.StepEnv.reset": [[145, 148], ["numpy.array"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_step", "=", "0", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "current_step", "]", ",", "dtype", "=", "\"int\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.StepEnv.step": [[149, 154], ["numpy.array"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "prev_step", "=", "self", ".", "current_step", "\n", "self", ".", "current_step", "+=", "1", "\n", "done", "=", "self", ".", "current_step", ">=", "self", ".", "max_steps", "\n", "return", "np", ".", "array", "(", "[", "prev_step", "]", ",", "dtype", "=", "\"int\"", ")", ",", "0.0", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample": [[248, 250], ["dict", "super().sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "super", "(", ")", ".", "sample", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomWrapperA.__init__": [[306, 309], ["stable_baselines3.common.vec_env.VecNormalize.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "venv", ")", ":", "\n", "        ", "VecNormalize", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "self", ".", "var_a", "=", "\"a\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomWrapperB.__init__": [[312, 315], ["stable_baselines3.common.vec_env.VecNormalize.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "venv", ")", ":", "\n", "        ", "VecNormalize", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "self", ".", "var_b", "=", "\"b\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomWrapperB.func_b": [[316, 318], ["None"], "methods", ["None"], ["", "def", "func_b", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "var_b", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomWrapperB.name_test": [[319, 321], ["None"], "methods", ["None"], ["", "def", "name_test", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomWrapperBB.__init__": [[324, 327], ["test_vec_envs.CustomWrapperB.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "venv", ")", ":", "\n", "        ", "CustomWrapperB", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "self", ".", "var_bb", "=", "\"bb\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_vecenv_custom_calls": [[65, 134], ["pytest.mark.parametrize", "pytest.mark.parametrize", "vec_env_class", "vec_env_wrapper.seed", "vec_env_wrapper.render", "vec_env_wrapper.env_method", "range", "vec_env_wrapper.get_attr", "range", "vec_env_wrapper.env_method", "vec_env_wrapper.set_attr", "vec_env_wrapper.get_attr", "vec_env_wrapper.reset", "vec_env_wrapper.set_attr", "vec_env_wrapper.get_attr", "vec_env_wrapper.get_attr", "vec_env_wrapper.reset", "vec_env_wrapper.set_attr", "vec_env_wrapper.get_attr", "vec_env_wrapper.close", "test_vec_envs.CustomGymEnv", "setattr_results.append", "len", "len", "len", "len", "vec_env_wrapper.get_attr", "vec_env_wrapper.get_attr", "gym.spaces.Box", "vec_env_wrapper", "vec_env_wrapper", "vec_env_wrapper.set_attr", "range", "numpy.ones", "numpy.ones", "range", "numpy.zeros", "numpy.ones", "numpy.ones", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_method", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_method", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.set_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.set_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.set_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.set_attr"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_class\"", ",", "VEC_ENV_CLASSES", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_wrapper\"", ",", "VEC_ENV_WRAPPERS", ")", "\n", "def", "test_vecenv_custom_calls", "(", "vec_env_class", ",", "vec_env_wrapper", ")", ":", "\n", "    ", "\"\"\"Test access to methods/attributes of vectorized environments\"\"\"", "\n", "\n", "def", "make_env", "(", ")", ":", "\n", "        ", "return", "CustomGymEnv", "(", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "np", ".", "zeros", "(", "2", ")", ",", "high", "=", "np", ".", "ones", "(", "2", ")", ")", ")", "\n", "\n", "", "vec_env", "=", "vec_env_class", "(", "[", "make_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "\n", "if", "vec_env_wrapper", "is", "not", "None", ":", "\n", "        ", "if", "vec_env_wrapper", "==", "VecFrameStack", ":", "\n", "            ", "vec_env", "=", "vec_env_wrapper", "(", "vec_env", ",", "n_stack", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "vec_env", "=", "vec_env_wrapper", "(", "vec_env", ")", "\n", "\n", "# Test seed method", "\n", "", "", "vec_env", ".", "seed", "(", "0", ")", "\n", "# Test render method call", "\n", "# vec_env.render()  # we need a X server  to test the \"human\" mode", "\n", "vec_env", ".", "render", "(", "mode", "=", "\"rgb_array\"", ")", "\n", "env_method_results", "=", "vec_env", ".", "env_method", "(", "\"custom_method\"", ",", "1", ",", "indices", "=", "None", ",", "dim_1", "=", "2", ")", "\n", "setattr_results", "=", "[", "]", "\n", "# Set current_step to an arbitrary value", "\n", "for", "env_idx", "in", "range", "(", "N_ENVS", ")", ":", "\n", "        ", "setattr_results", ".", "append", "(", "vec_env", ".", "set_attr", "(", "\"current_step\"", ",", "env_idx", ",", "indices", "=", "env_idx", ")", ")", "\n", "# Retrieve the value for each environment", "\n", "", "getattr_results", "=", "vec_env", ".", "get_attr", "(", "\"current_step\"", ")", "\n", "\n", "assert", "len", "(", "env_method_results", ")", "==", "N_ENVS", "\n", "assert", "len", "(", "setattr_results", ")", "==", "N_ENVS", "\n", "assert", "len", "(", "getattr_results", ")", "==", "N_ENVS", "\n", "\n", "for", "env_idx", "in", "range", "(", "N_ENVS", ")", ":", "\n", "        ", "assert", "(", "env_method_results", "[", "env_idx", "]", "==", "np", ".", "ones", "(", "(", "1", ",", "2", ")", ")", ")", ".", "all", "(", ")", "\n", "assert", "setattr_results", "[", "env_idx", "]", "is", "None", "\n", "assert", "getattr_results", "[", "env_idx", "]", "==", "env_idx", "\n", "\n", "# Call env_method on a subset of the VecEnv", "\n", "", "env_method_subset", "=", "vec_env", ".", "env_method", "(", "\"custom_method\"", ",", "1", ",", "indices", "=", "[", "0", ",", "2", "]", ",", "dim_1", "=", "3", ")", "\n", "assert", "(", "env_method_subset", "[", "0", "]", "==", "np", ".", "ones", "(", "(", "1", ",", "3", ")", ")", ")", ".", "all", "(", ")", "\n", "assert", "(", "env_method_subset", "[", "1", "]", "==", "np", ".", "ones", "(", "(", "1", ",", "3", ")", ")", ")", ".", "all", "(", ")", "\n", "assert", "len", "(", "env_method_subset", ")", "==", "2", "\n", "\n", "# Test to change value for all the environments", "\n", "setattr_result", "=", "vec_env", ".", "set_attr", "(", "\"current_step\"", ",", "42", ",", "indices", "=", "None", ")", "\n", "getattr_result", "=", "vec_env", ".", "get_attr", "(", "\"current_step\"", ")", "\n", "assert", "setattr_result", "is", "None", "\n", "assert", "getattr_result", "==", "[", "42", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", "\n", "\n", "# Additional tests for setattr that does not affect all the environments", "\n", "vec_env", ".", "reset", "(", ")", "\n", "setattr_result", "=", "vec_env", ".", "set_attr", "(", "\"current_step\"", ",", "12", ",", "indices", "=", "[", "0", ",", "1", "]", ")", "\n", "getattr_result", "=", "vec_env", ".", "get_attr", "(", "\"current_step\"", ")", "\n", "getattr_result_subset", "=", "vec_env", ".", "get_attr", "(", "\"current_step\"", ",", "indices", "=", "[", "0", ",", "1", "]", ")", "\n", "assert", "setattr_result", "is", "None", "\n", "assert", "getattr_result", "==", "[", "12", "for", "_", "in", "range", "(", "2", ")", "]", "+", "[", "0", "for", "_", "in", "range", "(", "N_ENVS", "-", "2", ")", "]", "\n", "assert", "getattr_result_subset", "==", "[", "12", ",", "12", "]", "\n", "assert", "vec_env", ".", "get_attr", "(", "\"current_step\"", ",", "indices", "=", "[", "0", ",", "2", "]", ")", "==", "[", "12", ",", "0", "]", "\n", "\n", "vec_env", ".", "reset", "(", ")", "\n", "# Change value only for first and last environment", "\n", "setattr_result", "=", "vec_env", ".", "set_attr", "(", "\"current_step\"", ",", "12", ",", "indices", "=", "[", "0", ",", "-", "1", "]", ")", "\n", "getattr_result", "=", "vec_env", ".", "get_attr", "(", "\"current_step\"", ")", "\n", "assert", "setattr_result", "is", "None", "\n", "assert", "getattr_result", "==", "[", "12", "]", "+", "[", "0", "for", "_", "in", "range", "(", "N_ENVS", "-", "2", ")", "]", "+", "[", "12", "]", "\n", "assert", "vec_env", ".", "get_attr", "(", "\"current_step\"", ",", "indices", "=", "[", "-", "1", "]", ")", "==", "[", "12", "]", "\n", "\n", "vec_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_vecenv_terminal_obs": [[156, 199], ["pytest.mark.parametrize", "pytest.mark.parametrize", "vec_env_class", "numpy.zeros", "vec_env_wrapper.reset", "range", "vec_env_wrapper.close", "vec_env_wrapper.step", "zip", "range", "functools.partial", "vec_env_wrapper", "vec_env_wrapper", "max", "len", "len", "len", "numpy.all", "numpy.all", "isinstance", "numpy.all", "numpy.all"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_class\"", ",", "VEC_ENV_CLASSES", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_wrapper\"", ",", "VEC_ENV_WRAPPERS", ")", "\n", "def", "test_vecenv_terminal_obs", "(", "vec_env_class", ",", "vec_env_wrapper", ")", ":", "\n", "    ", "\"\"\"Test that 'terminal_observation' gets added to info dict upon\n    termination.\"\"\"", "\n", "step_nums", "=", "[", "i", "+", "5", "for", "i", "in", "range", "(", "N_ENVS", ")", "]", "\n", "vec_env", "=", "vec_env_class", "(", "[", "functools", ".", "partial", "(", "StepEnv", ",", "n", ")", "for", "n", "in", "step_nums", "]", ")", "\n", "\n", "if", "vec_env_wrapper", "is", "not", "None", ":", "\n", "        ", "if", "vec_env_wrapper", "==", "VecFrameStack", ":", "\n", "            ", "vec_env", "=", "vec_env_wrapper", "(", "vec_env", ",", "n_stack", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "vec_env", "=", "vec_env_wrapper", "(", "vec_env", ")", "\n", "\n", "", "", "zero_acts", "=", "np", ".", "zeros", "(", "(", "N_ENVS", ",", ")", ",", "dtype", "=", "\"int\"", ")", "\n", "prev_obs_b", "=", "vec_env", ".", "reset", "(", ")", "\n", "for", "step_num", "in", "range", "(", "1", ",", "max", "(", "step_nums", ")", "+", "1", ")", ":", "\n", "        ", "obs_b", ",", "_", ",", "done_b", ",", "info_b", "=", "vec_env", ".", "step", "(", "zero_acts", ")", "\n", "assert", "len", "(", "obs_b", ")", "==", "N_ENVS", "\n", "assert", "len", "(", "done_b", ")", "==", "N_ENVS", "\n", "assert", "len", "(", "info_b", ")", "==", "N_ENVS", "\n", "env_iter", "=", "zip", "(", "prev_obs_b", ",", "obs_b", ",", "done_b", ",", "info_b", ",", "step_nums", ")", "\n", "for", "prev_obs", ",", "obs", ",", "done", ",", "info", ",", "final_step_num", "in", "env_iter", ":", "\n", "            ", "assert", "done", "==", "(", "step_num", "==", "final_step_num", ")", "\n", "if", "not", "done", ":", "\n", "                ", "assert", "\"terminal_observation\"", "not", "in", "info", "\n", "", "else", ":", "\n", "                ", "terminal_obs", "=", "info", "[", "\"terminal_observation\"", "]", "\n", "\n", "# do some rough ordering checks that should work for all", "\n", "# wrappers, including VecNormalize", "\n", "assert", "np", ".", "all", "(", "prev_obs", "<", "terminal_obs", ")", "\n", "assert", "np", ".", "all", "(", "obs", "<", "prev_obs", ")", "\n", "\n", "if", "not", "isinstance", "(", "vec_env", ",", "VecNormalize", ")", ":", "\n", "# more precise tests that we can't do with VecNormalize", "\n", "# (which changes observation values)", "\n", "                    ", "assert", "np", ".", "all", "(", "prev_obs", "+", "1", "==", "terminal_obs", ")", "\n", "assert", "np", ".", "all", "(", "obs", "==", "0", ")", "\n", "\n", "", "", "", "prev_obs_b", "=", "obs_b", "\n", "\n", "", "vec_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_spaces": [[211, 227], ["vec_env_class", "vec_env_class.reset", "test_vec_envs.test_vecenv_single_space.obs_assert", "vec_env_class.close", "test_vec_envs.CustomGymEnv", "any", "vec_env_class.step", "test_vec_envs.test_vecenv_single_space.obs_assert", "vec_env_class.action_space.sample", "range", "range"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["def", "check_vecenv_spaces", "(", "vec_env_class", ",", "space", ",", "obs_assert", ")", ":", "\n", "    ", "\"\"\"Helper method to check observation spaces in vectorized environments.\"\"\"", "\n", "\n", "def", "make_env", "(", ")", ":", "\n", "        ", "return", "CustomGymEnv", "(", "space", ")", "\n", "\n", "", "vec_env", "=", "vec_env_class", "(", "[", "make_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "obs", "=", "vec_env", ".", "reset", "(", ")", "\n", "obs_assert", "(", "obs", ")", "\n", "\n", "dones", "=", "[", "False", "]", "*", "N_ENVS", "\n", "while", "not", "any", "(", "dones", ")", ":", "\n", "        ", "actions", "=", "[", "vec_env", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", "\n", "obs", ",", "_rews", ",", "dones", ",", "_infos", "=", "vec_env", ".", "step", "(", "actions", ")", "\n", "obs_assert", "(", "obs", ")", "\n", "", "vec_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_obs": [[229, 235], ["space.contains"], "function", ["None"], ["", "def", "check_vecenv_obs", "(", "obs", ",", "space", ")", ":", "\n", "    ", "\"\"\"Helper method to check observations from multiple environments each belong to\n    the appropriate observation space.\"\"\"", "\n", "assert", "obs", ".", "shape", "[", "0", "]", "==", "N_ENVS", "\n", "for", "value", "in", "obs", ":", "\n", "        ", "assert", "space", ".", "contains", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_vecenv_single_space": [[237, 243], ["pytest.mark.parametrize", "test_vec_envs.check_vecenv_spaces", "itertools.product", "test_vec_envs.check_vecenv_obs", "SPACES.values"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_obs"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_class,space\"", ",", "itertools", ".", "product", "(", "VEC_ENV_CLASSES", ",", "SPACES", ".", "values", "(", ")", ")", ")", "\n", "def", "test_vecenv_single_space", "(", "vec_env_class", ",", "space", ")", ":", "\n", "    ", "def", "obs_assert", "(", "obs", ")", ":", "\n", "        ", "return", "check_vecenv_obs", "(", "obs", ",", "space", ")", "\n", "\n", "", "check_vecenv_spaces", "(", "vec_env_class", ",", "space", ",", "obs_assert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_vecenv_dict_spaces": [[252, 268], ["pytest.mark.parametrize", "gym.spaces.Dict", "test_vec_envs.check_vecenv_spaces", "test_vec_envs._UnorderedDictSpace", "test_vec_envs.check_vecenv_spaces", "isinstance", "obs.items", "obs.keys", "gym.spaces.Dict.spaces.keys", "test_vec_envs.check_vecenv_obs"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_obs"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_class\"", ",", "VEC_ENV_CLASSES", ")", "\n", "def", "test_vecenv_dict_spaces", "(", "vec_env_class", ")", ":", "\n", "    ", "\"\"\"Test dictionary observation spaces with vectorized environments.\"\"\"", "\n", "space", "=", "gym", ".", "spaces", ".", "Dict", "(", "SPACES", ")", "\n", "\n", "def", "obs_assert", "(", "obs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs", ",", "collections", ".", "OrderedDict", ")", "\n", "assert", "obs", ".", "keys", "(", ")", "==", "space", ".", "spaces", ".", "keys", "(", ")", "\n", "for", "key", ",", "values", "in", "obs", ".", "items", "(", ")", ":", "\n", "            ", "check_vecenv_obs", "(", "values", ",", "space", ".", "spaces", "[", "key", "]", ")", "\n", "\n", "", "", "check_vecenv_spaces", "(", "vec_env_class", ",", "space", ",", "obs_assert", ")", "\n", "\n", "unordered_space", "=", "_UnorderedDictSpace", "(", "SPACES", ")", "\n", "# Check that vec_env_class can accept unordered dict observations (and convert to OrderedDict)", "\n", "check_vecenv_spaces", "(", "vec_env_class", ",", "unordered_space", ",", "obs_assert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_vecenv_tuple_spaces": [[270, 282], ["pytest.mark.parametrize", "gym.spaces.Tuple", "test_vec_envs.check_vecenv_spaces", "tuple", "isinstance", "zip", "SPACES.values", "len", "len", "test_vec_envs.check_vecenv_obs"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_obs"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_class\"", ",", "VEC_ENV_CLASSES", ")", "\n", "def", "test_vecenv_tuple_spaces", "(", "vec_env_class", ")", ":", "\n", "    ", "\"\"\"Test tuple observation spaces with vectorized environments.\"\"\"", "\n", "space", "=", "gym", ".", "spaces", ".", "Tuple", "(", "tuple", "(", "SPACES", ".", "values", "(", ")", ")", ")", "\n", "\n", "def", "obs_assert", "(", "obs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs", ",", "tuple", ")", "\n", "assert", "len", "(", "obs", ")", "==", "len", "(", "space", ".", "spaces", ")", "\n", "for", "values", ",", "inner_space", "in", "zip", "(", "obs", ",", "space", ".", "spaces", ")", ":", "\n", "            ", "check_vecenv_obs", "(", "values", ",", "inner_space", ")", "\n", "\n", "", "", "return", "check_vecenv_spaces", "(", "vec_env_class", ",", "space", ",", "obs_assert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_subproc_start_method": [[284, 303], ["multiprocessing.get_all_start_methods", "list", "gym.spaces.Discrete", "all_methods.intersection", "test_vec_envs.check_vecenv_obs", "functools.partial", "test_vec_envs.check_vecenv_spaces", "pytest.raises", "functools.partial", "test_vec_envs.check_vecenv_spaces"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_spaces", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.check_vecenv_spaces"], ["", "def", "test_subproc_start_method", "(", ")", ":", "\n", "    ", "start_methods", "=", "[", "None", "]", "\n", "# Only test thread-safe methods. Others may deadlock tests! (gh/428)", "\n", "# Note: adding unsafe `fork` method as we are now using PyTorch", "\n", "all_methods", "=", "{", "\"forkserver\"", ",", "\"spawn\"", ",", "\"fork\"", "}", "\n", "available_methods", "=", "multiprocessing", ".", "get_all_start_methods", "(", ")", "\n", "start_methods", "+=", "list", "(", "all_methods", ".", "intersection", "(", "available_methods", ")", ")", "\n", "space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", "\n", "\n", "def", "obs_assert", "(", "obs", ")", ":", "\n", "        ", "return", "check_vecenv_obs", "(", "obs", ",", "space", ")", "\n", "\n", "", "for", "start_method", "in", "start_methods", ":", "\n", "        ", "vec_env_class", "=", "functools", ".", "partial", "(", "SubprocVecEnv", ",", "start_method", "=", "start_method", ")", "\n", "check_vecenv_spaces", "(", "vec_env_class", ",", "space", ",", "obs_assert", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "\"cannot find context for 'illegal_method'\"", ")", ":", "\n", "        ", "vec_env_class", "=", "functools", ".", "partial", "(", "SubprocVecEnv", ",", "start_method", "=", "\"illegal_method\"", ")", "\n", "check_vecenv_spaces", "(", "vec_env_class", ",", "space", ",", "obs_assert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_vecenv_wrapper_getattr": [[329, 347], ["stable_baselines3.common.vec_env.DummyVecEnv", "test_vec_envs.CustomWrapperA", "test_vec_envs.CustomWrapperA", "test_vec_envs.CustomGymEnv", "test_vec_envs.CustomWrapperBB", "CustomWrapperA.func_b", "CustomWrapperA.name_test", "test_vec_envs.CustomWrapperB", "pytest.raises", "pytest.raises", "gym.spaces.Box", "range", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomWrapperB.func_b", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.CustomWrapperB.name_test"], ["", "", "def", "test_vecenv_wrapper_getattr", "(", ")", ":", "\n", "    ", "def", "make_env", "(", ")", ":", "\n", "        ", "return", "CustomGymEnv", "(", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "np", ".", "zeros", "(", "2", ")", ",", "high", "=", "np", ".", "ones", "(", "2", ")", ")", ")", "\n", "\n", "", "vec_env", "=", "DummyVecEnv", "(", "[", "make_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "wrapped", "=", "CustomWrapperA", "(", "CustomWrapperBB", "(", "vec_env", ")", ")", "\n", "assert", "wrapped", ".", "var_a", "==", "\"a\"", "\n", "assert", "wrapped", ".", "var_b", "==", "\"b\"", "\n", "assert", "wrapped", ".", "var_bb", "==", "\"bb\"", "\n", "assert", "wrapped", ".", "func_b", "(", ")", "==", "\"b\"", "\n", "assert", "wrapped", ".", "name_test", "(", ")", "==", "CustomWrapperBB", "\n", "\n", "double_wrapped", "=", "CustomWrapperA", "(", "CustomWrapperB", "(", "wrapped", ")", ")", "\n", "_", "=", "double_wrapped", ".", "var_a", "# should not raise as it is directly defined here", "\n", "with", "pytest", ".", "raises", "(", "AttributeError", ")", ":", "# should raise due to ambiguity", "\n", "        ", "_", "=", "double_wrapped", ".", "var_b", "\n", "", "with", "pytest", ".", "raises", "(", "AttributeError", ")", ":", "# should raise as does not exist", "\n", "        ", "_", "=", "double_wrapped", ".", "nonexistent_attribute", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_framestack_vecenv": [[349, 421], ["numpy.zeros", "numpy.zeros", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecFrameStack", "stable_baselines3.common.vec_env.VecFrameStack.step", "stable_baselines3.common.vec_env.VecFrameStack.close", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecFrameStack", "stable_baselines3.common.vec_env.VecFrameStack.step", "stable_baselines3.common.vec_env.VecFrameStack.close", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecFrameStack", "stable_baselines3.common.vec_env.VecFrameStack.step", "stable_baselines3.common.vec_env.VecFrameStack.close", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecFrameStack", "stable_baselines3.common.vec_env.VecFrameStack.step", "stable_baselines3.common.vec_env.VecFrameStack.close", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecFrameStack", "test_vec_envs.CustomGymEnv", "test_vec_envs.CustomGymEnv", "test_vec_envs.CustomGymEnv", "pytest.raises", "stable_baselines3.common.vec_env.VecFrameStack", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "range", "range", "range", "range", "range", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["", "", "def", "test_framestack_vecenv", "(", ")", ":", "\n", "    ", "\"\"\"Test that framestack environment stacks on desired axis\"\"\"", "\n", "\n", "image_space_shape", "=", "[", "12", ",", "8", ",", "3", "]", "\n", "zero_acts", "=", "np", ".", "zeros", "(", "[", "N_ENVS", "]", "+", "image_space_shape", ")", "\n", "\n", "transposed_image_space_shape", "=", "image_space_shape", "[", ":", ":", "-", "1", "]", "\n", "transposed_zero_acts", "=", "np", ".", "zeros", "(", "[", "N_ENVS", "]", "+", "transposed_image_space_shape", ")", "\n", "\n", "def", "make_image_env", "(", ")", ":", "\n", "        ", "return", "CustomGymEnv", "(", "\n", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "zeros", "(", "image_space_shape", ")", ",", "\n", "high", "=", "np", ".", "ones", "(", "image_space_shape", ")", "*", "255", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n", ")", "\n", "\n", "", "def", "make_transposed_image_env", "(", ")", ":", "\n", "        ", "return", "CustomGymEnv", "(", "\n", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "zeros", "(", "transposed_image_space_shape", ")", ",", "\n", "high", "=", "np", ".", "ones", "(", "transposed_image_space_shape", ")", "*", "255", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n", ")", "\n", "\n", "", "def", "make_non_image_env", "(", ")", ":", "\n", "        ", "return", "CustomGymEnv", "(", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", ")", ",", "high", "=", "np", ".", "ones", "(", "(", "2", ",", ")", ")", ")", ")", "\n", "\n", "", "vec_env", "=", "DummyVecEnv", "(", "[", "make_image_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "vec_env", "=", "VecFrameStack", "(", "vec_env", ",", "n_stack", "=", "2", ")", "\n", "obs", ",", "_", ",", "_", ",", "_", "=", "vec_env", ".", "step", "(", "zero_acts", ")", "\n", "vec_env", ".", "close", "(", ")", "\n", "\n", "# Should be stacked on the last dimension", "\n", "assert", "obs", ".", "shape", "[", "-", "1", "]", "==", "(", "image_space_shape", "[", "-", "1", "]", "*", "2", ")", "\n", "\n", "# Try automatic stacking on first dimension now", "\n", "vec_env", "=", "DummyVecEnv", "(", "[", "make_transposed_image_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "vec_env", "=", "VecFrameStack", "(", "vec_env", ",", "n_stack", "=", "2", ")", "\n", "obs", ",", "_", ",", "_", ",", "_", "=", "vec_env", ".", "step", "(", "transposed_zero_acts", ")", "\n", "vec_env", ".", "close", "(", ")", "\n", "\n", "# Should be stacked on the first dimension (note the transposing in make_transposed_image_env)", "\n", "assert", "obs", ".", "shape", "[", "1", "]", "==", "(", "image_space_shape", "[", "-", "1", "]", "*", "2", ")", "\n", "\n", "# Try forcing dimensions", "\n", "vec_env", "=", "DummyVecEnv", "(", "[", "make_image_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "vec_env", "=", "VecFrameStack", "(", "vec_env", ",", "n_stack", "=", "2", ",", "channels_order", "=", "\"last\"", ")", "\n", "obs", ",", "_", ",", "_", ",", "_", "=", "vec_env", ".", "step", "(", "zero_acts", ")", "\n", "vec_env", ".", "close", "(", ")", "\n", "\n", "# Should be stacked on the last dimension", "\n", "assert", "obs", ".", "shape", "[", "-", "1", "]", "==", "(", "image_space_shape", "[", "-", "1", "]", "*", "2", ")", "\n", "\n", "vec_env", "=", "DummyVecEnv", "(", "[", "make_image_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "vec_env", "=", "VecFrameStack", "(", "vec_env", ",", "n_stack", "=", "2", ",", "channels_order", "=", "\"first\"", ")", "\n", "obs", ",", "_", ",", "_", ",", "_", "=", "vec_env", ".", "step", "(", "zero_acts", ")", "\n", "vec_env", ".", "close", "(", ")", "\n", "\n", "# Should be stacked on the first dimension", "\n", "assert", "obs", ".", "shape", "[", "1", "]", "==", "(", "image_space_shape", "[", "0", "]", "*", "2", ")", "\n", "\n", "# Test invalid channels_order", "\n", "vec_env", "=", "DummyVecEnv", "(", "[", "make_image_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "vec_env", "=", "VecFrameStack", "(", "vec_env", ",", "n_stack", "=", "2", ",", "channels_order", "=", "\"not_valid\"", ")", "\n", "\n", "# Test that it works with non-image envs when no channels_order is given", "\n", "", "vec_env", "=", "DummyVecEnv", "(", "[", "make_non_image_env", "for", "_", "in", "range", "(", "N_ENVS", ")", "]", ")", "\n", "vec_env", "=", "VecFrameStack", "(", "vec_env", ",", "n_stack", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_vec_env_is_wrapped": [[423, 445], ["stable_baselines3.common.vec_env.SubprocVecEnv", "stable_baselines3.common.vec_env.VecFrameStack.close", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecFrameStack", "test_vec_envs.CustomGymEnv", "stable_baselines3.common.monitor.Monitor", "stable_baselines3.common.vec_env.VecFrameStack.env_is_wrapped", "stable_baselines3.common.vec_env.VecFrameStack.env_is_wrapped", "stable_baselines3.common.vec_env.VecFrameStack.env_is_wrapped", "gym.spaces.Box", "test_vec_envs.CustomGymEnv", "gym.spaces.Box", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped"], ["", "def", "test_vec_env_is_wrapped", "(", ")", ":", "\n", "# Test is_wrapped call of subproc workers", "\n", "    ", "def", "make_env", "(", ")", ":", "\n", "        ", "return", "CustomGymEnv", "(", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "np", ".", "zeros", "(", "2", ")", ",", "high", "=", "np", ".", "ones", "(", "2", ")", ")", ")", "\n", "\n", "", "def", "make_monitored_env", "(", ")", ":", "\n", "        ", "return", "Monitor", "(", "CustomGymEnv", "(", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "np", ".", "zeros", "(", "2", ")", ",", "high", "=", "np", ".", "ones", "(", "2", ")", ")", ")", ")", "\n", "\n", "# One with monitor, one without", "\n", "", "vec_env", "=", "SubprocVecEnv", "(", "[", "make_env", ",", "make_monitored_env", "]", ")", "\n", "\n", "assert", "vec_env", ".", "env_is_wrapped", "(", "Monitor", ")", "==", "[", "False", ",", "True", "]", "\n", "\n", "vec_env", ".", "close", "(", ")", "\n", "\n", "# One with monitor, one without", "\n", "vec_env", "=", "DummyVecEnv", "(", "[", "make_env", ",", "make_monitored_env", "]", ")", "\n", "\n", "assert", "vec_env", ".", "env_is_wrapped", "(", "Monitor", ")", "==", "[", "False", ",", "True", "]", "\n", "\n", "vec_env", "=", "VecFrameStack", "(", "vec_env", ",", "n_stack", "=", "2", ")", "\n", "assert", "vec_env", ".", "env_is_wrapped", "(", "Monitor", ")", "==", "[", "False", ",", "True", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs.test_vec_seeding": [[447, 476], ["pytest.mark.parametrize", "test_vec_envs.CustomGymEnv", "multiprocessing.get_all_start_methods", "list", "functools.partial.", "vec_env_class.seed", "vec_env_class.reset", "vec_env_class.step", "vec_env_class.close", "gym.spaces.Box", "all_methods.intersection", "functools.partial", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.zeros", "numpy.ones", "vec_env_class.action_space.sample", "range"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_class\"", ",", "VEC_ENV_CLASSES", ")", "\n", "def", "test_vec_seeding", "(", "vec_env_class", ")", ":", "\n", "    ", "def", "make_env", "(", ")", ":", "\n", "        ", "return", "CustomGymEnv", "(", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "np", ".", "zeros", "(", "2", ")", ",", "high", "=", "np", ".", "ones", "(", "2", ")", ")", ")", "\n", "\n", "# For SubprocVecEnv check for all starting methods", "\n", "", "start_methods", "=", "[", "None", "]", "\n", "if", "vec_env_class", "!=", "DummyVecEnv", ":", "\n", "        ", "all_methods", "=", "{", "\"forkserver\"", ",", "\"spawn\"", ",", "\"fork\"", "}", "\n", "available_methods", "=", "multiprocessing", ".", "get_all_start_methods", "(", ")", "\n", "start_methods", "=", "list", "(", "all_methods", ".", "intersection", "(", "available_methods", ")", ")", "\n", "\n", "", "for", "start_method", "in", "start_methods", ":", "\n", "        ", "if", "start_method", "is", "not", "None", ":", "\n", "            ", "vec_env_class", "=", "functools", ".", "partial", "(", "SubprocVecEnv", ",", "start_method", "=", "start_method", ")", "\n", "\n", "", "n_envs", "=", "3", "\n", "vec_env", "=", "vec_env_class", "(", "[", "make_env", "]", "*", "n_envs", ")", "\n", "# Seed with no argument", "\n", "vec_env", ".", "seed", "(", ")", "\n", "obs", "=", "vec_env", ".", "reset", "(", ")", "\n", "_", ",", "rewards", ",", "_", ",", "_", "=", "vec_env", ".", "step", "(", "np", ".", "array", "(", "[", "vec_env", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "n_envs", ")", "]", ")", ")", "\n", "# Seed should be different per process", "\n", "assert", "not", "np", ".", "allclose", "(", "obs", "[", "0", "]", ",", "obs", "[", "1", "]", ")", "\n", "assert", "not", "np", ".", "allclose", "(", "rewards", "[", "0", "]", ",", "rewards", "[", "1", "]", ")", "\n", "assert", "not", "np", ".", "allclose", "(", "obs", "[", "1", "]", ",", "obs", "[", "2", "]", ")", "\n", "assert", "not", "np", ".", "allclose", "(", "rewards", "[", "1", "]", ",", "rewards", "[", "2", "]", ")", "\n", "\n", "vec_env", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_identity.test_discrete": [[13, 35], ["pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "model_class().learn", "stable_baselines3.common.evaluation.evaluate_policy", "env.reset", "dict", "isinstance", "numpy.shape", "numpy.shape", "stable_baselines3.common.envs.IdentityEnv", "stable_baselines3.common.envs.IdentityEnvMultiDiscrete", "stable_baselines3.common.envs.IdentityEnvMultiBinary", "model_class", "model_class().learn.predict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", ",", "DQN", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env\"", ",", "[", "IdentityEnv", "(", "DIM", ")", ",", "IdentityEnvMultiDiscrete", "(", "DIM", ")", ",", "IdentityEnvMultiBinary", "(", "DIM", ")", "]", ")", "\n", "def", "test_discrete", "(", "model_class", ",", "env", ")", ":", "\n", "    ", "env_", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "kwargs", "=", "{", "}", "\n", "n_steps", "=", "3000", "\n", "if", "model_class", "==", "DQN", ":", "\n", "        ", "kwargs", "=", "dict", "(", "learning_starts", "=", "0", ")", "\n", "n_steps", "=", "4000", "\n", "# DQN only support discrete actions", "\n", "if", "isinstance", "(", "env", ",", "(", "IdentityEnvMultiDiscrete", ",", "IdentityEnvMultiBinary", ")", ")", ":", "\n", "            ", "return", "\n", "", "", "elif", "model_class", "==", "A2C", ":", "\n", "# slightly higher budget", "\n", "        ", "n_steps", "=", "3500", "\n", "\n", "", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env_", ",", "gamma", "=", "0.4", ",", "seed", "=", "1", ",", "**", "kwargs", ")", ".", "learn", "(", "n_steps", ")", "\n", "\n", "evaluate_policy", "(", "model", ",", "env_", ",", "n_eval_episodes", "=", "20", ",", "reward_threshold", "=", "90", ",", "warn", "=", "False", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "assert", "np", ".", "shape", "(", "model", ".", "predict", "(", "obs", ")", "[", "0", "]", ")", "==", "np", ".", "shape", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_identity.test_continuous": [[37, 52], ["pytest.mark.parametrize", "stable_baselines3.common.envs.IdentityEnvBox", "dict", "model_class().learn", "stable_baselines3.common.evaluation.evaluate_policy", "stable_baselines3.common.noise.NormalActionNoise", "dict", "model_class", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", ",", "SAC", ",", "DDPG", ",", "TD3", "]", ")", "\n", "def", "test_continuous", "(", "model_class", ")", ":", "\n", "    ", "env", "=", "IdentityEnvBox", "(", "eps", "=", "0.5", ")", "\n", "\n", "n_steps", "=", "{", "A2C", ":", "3500", ",", "PPO", ":", "3000", ",", "SAC", ":", "700", ",", "TD3", ":", "500", ",", "DDPG", ":", "500", "}", "[", "model_class", "]", "\n", "\n", "kwargs", "=", "dict", "(", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", ",", "64", "]", ")", ",", "seed", "=", "0", ",", "gamma", "=", "0.95", ")", "\n", "if", "model_class", "in", "[", "TD3", "]", ":", "\n", "        ", "n_actions", "=", "1", "\n", "action_noise", "=", "NormalActionNoise", "(", "mean", "=", "np", ".", "zeros", "(", "n_actions", ")", ",", "sigma", "=", "0.1", "*", "np", ".", "ones", "(", "n_actions", ")", ")", "\n", "kwargs", "[", "\"action_noise\"", "]", "=", "action_noise", "\n", "\n", "", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "**", "kwargs", ")", ".", "learn", "(", "n_steps", ")", "\n", "\n", "evaluate_policy", "(", "model", ",", "env", ",", "n_eval_episodes", "=", "20", ",", "reward_threshold", "=", "90", ",", "warn", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_her.test_import_error": [[21, 27], ["pytest.raises", "HER", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.stable_baselines3.__init__.HER"], ["def", "test_import_error", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "ImportError", ")", "as", "excinfo", ":", "\n", "        ", "from", "stable_baselines3", "import", "HER", "\n", "\n", "HER", "(", "\"MlpPolicy\"", ")", "\n", "", "assert", "\"documentation\"", "in", "str", "(", "excinfo", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_her.test_her": [[29, 62], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.envs.BitFlippingEnv", "model_class", "model_class.learn", "stable_baselines3.common.evaluation.evaluate_policy", "stable_baselines3.common.monitor.Monitor", "dict", "dict", "int"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "TD3", ",", "DDPG", ",", "DQN", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"online_sampling\"", ",", "[", "True", ",", "False", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"image_obs_space\"", ",", "[", "True", ",", "False", "]", ")", "\n", "def", "test_her", "(", "model_class", ",", "online_sampling", ",", "image_obs_space", ")", ":", "\n", "    ", "\"\"\"\n    Test Hindsight Experience Replay.\n    \"\"\"", "\n", "n_bits", "=", "4", "\n", "env", "=", "BitFlippingEnv", "(", "\n", "n_bits", "=", "n_bits", ",", "\n", "continuous", "=", "not", "(", "model_class", "==", "DQN", ")", ",", "\n", "image_obs_space", "=", "image_obs_space", ",", "\n", ")", "\n", "\n", "model", "=", "model_class", "(", "\n", "\"MultiInputPolicy\"", ",", "\n", "env", ",", "\n", "replay_buffer_class", "=", "HerReplayBuffer", ",", "\n", "replay_buffer_kwargs", "=", "dict", "(", "\n", "n_sampled_goal", "=", "2", ",", "\n", "goal_selection_strategy", "=", "\"future\"", ",", "\n", "online_sampling", "=", "online_sampling", ",", "\n", "max_episode_length", "=", "n_bits", ",", "\n", ")", ",", "\n", "train_freq", "=", "4", ",", "\n", "gradient_steps", "=", "1", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ",", "\n", "learning_starts", "=", "100", ",", "\n", "buffer_size", "=", "int", "(", "2e4", ")", ",", "\n", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ")", "\n", "evaluate_policy", "(", "model", ",", "Monitor", "(", "env", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_her.test_goal_selection_strategy": [[64, 103], ["pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.envs.BitFlippingEnv", "stable_baselines3.common.noise.NormalActionNoise", "stable_baselines3.SAC", "stable_baselines3.SAC.learn", "numpy.zeros", "numpy.ones", "dict", "dict", "int"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"goal_selection_strategy\"", ",", "\n", "[", "\n", "\"final\"", ",", "\n", "\"episode\"", ",", "\n", "\"future\"", ",", "\n", "GoalSelectionStrategy", ".", "FINAL", ",", "\n", "GoalSelectionStrategy", ".", "EPISODE", ",", "\n", "GoalSelectionStrategy", ".", "FUTURE", ",", "\n", "]", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"online_sampling\"", ",", "[", "True", ",", "False", "]", ")", "\n", "def", "test_goal_selection_strategy", "(", "goal_selection_strategy", ",", "online_sampling", ")", ":", "\n", "    ", "\"\"\"\n    Test different goal strategies.\n    \"\"\"", "\n", "env", "=", "BitFlippingEnv", "(", "continuous", "=", "True", ")", "\n", "\n", "normal_action_noise", "=", "NormalActionNoise", "(", "np", ".", "zeros", "(", "1", ")", ",", "0.1", "*", "np", ".", "ones", "(", "1", ")", ")", "\n", "\n", "model", "=", "SAC", "(", "\n", "\"MultiInputPolicy\"", ",", "\n", "env", ",", "\n", "replay_buffer_class", "=", "HerReplayBuffer", ",", "\n", "replay_buffer_kwargs", "=", "dict", "(", "\n", "goal_selection_strategy", "=", "goal_selection_strategy", ",", "\n", "online_sampling", "=", "online_sampling", ",", "\n", "max_episode_length", "=", "10", ",", "\n", "n_sampled_goal", "=", "2", ",", "\n", ")", ",", "\n", "train_freq", "=", "4", ",", "\n", "gradient_steps", "=", "1", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ",", "\n", "learning_starts", "=", "100", ",", "\n", "buffer_size", "=", "int", "(", "1e5", ")", ",", "\n", "action_noise", "=", "normal_action_noise", ",", "\n", ")", "\n", "assert", "model", ".", "action_noise", "is", "not", "None", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_her.test_save_load": [[105, 211], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.envs.BitFlippingEnv", "model_class", "model_class.load.learn", "stable_baselines3.common.envs.BitFlippingEnv.reset", "range", "copy.deepcopy", "model_class.load.policy.load_state_dict", "model_class.load.policy.state_dict", "model_class.load.predict", "model_class.load.save", "dict", "model_class.load", "model_class.load", "model_class.load.policy.state_dict", "model_class.load.predict", "numpy.allclose", "model_class.load.learn", "model_class.load", "os.remove", "pytest.skip", "dict", "env.reset.keys", "numpy.array", "model_class.load.policy.state_dict", "torch.rand_like", "str", "hasattr", "str", "torch.allclose", "str", "dict", "dict", "int", "env.reset.keys", "stable_baselines3.common.envs.BitFlippingEnv.step", "observations[].append", "observations.items", "copy.deepcopy.items", "torch.allclose", "stable_baselines3.common.envs.BitFlippingEnv.action_space.sample"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "TD3", ",", "DDPG", ",", "DQN", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"use_sde\"", ",", "[", "False", ",", "True", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"online_sampling\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_save_load", "(", "tmp_path", ",", "model_class", ",", "use_sde", ",", "online_sampling", ")", ":", "\n", "    ", "\"\"\"\n    Test if 'save' and 'load' saves and loads model correctly\n    \"\"\"", "\n", "if", "use_sde", "and", "model_class", "!=", "SAC", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Only SAC has gSDE support\"", ")", "\n", "\n", "", "n_bits", "=", "4", "\n", "env", "=", "BitFlippingEnv", "(", "n_bits", "=", "n_bits", ",", "continuous", "=", "not", "(", "model_class", "==", "DQN", ")", ")", "\n", "\n", "kwargs", "=", "dict", "(", "use_sde", "=", "True", ")", "if", "use_sde", "else", "{", "}", "\n", "\n", "# create model", "\n", "model", "=", "model_class", "(", "\n", "\"MultiInputPolicy\"", ",", "\n", "env", ",", "\n", "replay_buffer_class", "=", "HerReplayBuffer", ",", "\n", "replay_buffer_kwargs", "=", "dict", "(", "\n", "n_sampled_goal", "=", "2", ",", "\n", "goal_selection_strategy", "=", "\"future\"", ",", "\n", "online_sampling", "=", "online_sampling", ",", "\n", "max_episode_length", "=", "n_bits", ",", "\n", ")", ",", "\n", "verbose", "=", "0", ",", "\n", "tau", "=", "0.05", ",", "\n", "batch_size", "=", "128", ",", "\n", "learning_rate", "=", "0.001", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ",", "\n", "buffer_size", "=", "int", "(", "1e5", ")", ",", "\n", "gamma", "=", "0.98", ",", "\n", "gradient_steps", "=", "1", ",", "\n", "train_freq", "=", "4", ",", "\n", "learning_starts", "=", "100", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "observations", "=", "{", "key", ":", "[", "]", "for", "key", "in", "obs", ".", "keys", "(", ")", "}", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "obs", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "[", "0", "]", "\n", "for", "key", "in", "obs", ".", "keys", "(", ")", ":", "\n", "            ", "observations", "[", "key", "]", ".", "append", "(", "obs", "[", "key", "]", ")", "\n", "", "", "observations", "=", "{", "key", ":", "np", ".", "array", "(", "obs", ")", "for", "key", ",", "obs", "in", "observations", ".", "items", "(", ")", "}", "\n", "\n", "# Get dictionary of current parameters", "\n", "params", "=", "deepcopy", "(", "model", ".", "policy", ".", "state_dict", "(", ")", ")", "\n", "\n", "# Modify all parameters to be random values", "\n", "random_params", "=", "{", "param_name", ":", "th", ".", "rand_like", "(", "param", ")", "for", "param_name", ",", "param", "in", "params", ".", "items", "(", ")", "}", "\n", "\n", "# Update model parameters with the new random values", "\n", "model", ".", "policy", ".", "load_state_dict", "(", "random_params", ")", "\n", "\n", "new_params", "=", "model", ".", "policy", ".", "state_dict", "(", ")", "\n", "# Check that all params are different now", "\n", "for", "k", "in", "params", ":", "\n", "        ", "assert", "not", "th", ".", "allclose", "(", "params", "[", "k", "]", ",", "new_params", "[", "k", "]", ")", ",", "\"Parameters did not change as expected.\"", "\n", "\n", "", "params", "=", "new_params", "\n", "\n", "# get selected actions", "\n", "selected_actions", ",", "_", "=", "model", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "\n", "# Check", "\n", "model", ".", "save", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "del", "model", "\n", "\n", "# test custom_objects", "\n", "# Load with custom objects", "\n", "custom_objects", "=", "dict", "(", "learning_rate", "=", "2e-5", ",", "dummy", "=", "1.0", ")", "\n", "model_", "=", "model_class", ".", "load", "(", "str", "(", "tmp_path", "/", "\"test_save.zip\"", ")", ",", "env", "=", "env", ",", "custom_objects", "=", "custom_objects", ",", "verbose", "=", "2", ")", "\n", "assert", "model_", ".", "verbose", "==", "2", "\n", "# Check that the custom object was taken into account", "\n", "assert", "model_", ".", "learning_rate", "==", "custom_objects", "[", "\"learning_rate\"", "]", "\n", "# Check that only parameters that are here already are replaced", "\n", "assert", "not", "hasattr", "(", "model_", ",", "\"dummy\"", ")", "\n", "\n", "model", "=", "model_class", ".", "load", "(", "str", "(", "tmp_path", "/", "\"test_save.zip\"", ")", ",", "env", "=", "env", ")", "\n", "\n", "# check if params are still the same after load", "\n", "new_params", "=", "model", ".", "policy", ".", "state_dict", "(", ")", "\n", "\n", "# Check that all params are the same as before save load procedure now", "\n", "for", "key", "in", "params", ":", "\n", "        ", "assert", "th", ".", "allclose", "(", "params", "[", "key", "]", ",", "new_params", "[", "key", "]", ")", ",", "\"Model parameters not the same after save and load.\"", "\n", "\n", "# check if model still selects the same actions", "\n", "", "new_selected_actions", ",", "_", "=", "model", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "assert", "np", ".", "allclose", "(", "selected_actions", ",", "new_selected_actions", ",", "1e-4", ")", "\n", "\n", "# check if learn still works", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ")", "\n", "\n", "# Test that the change of parameters works", "\n", "model", "=", "model_class", ".", "load", "(", "str", "(", "tmp_path", "/", "\"test_save.zip\"", ")", ",", "env", "=", "env", ",", "verbose", "=", "3", ",", "learning_rate", "=", "2.0", ")", "\n", "assert", "model", ".", "learning_rate", "==", "2.0", "\n", "assert", "model", ".", "verbose", "==", "3", "\n", "\n", "# clear file from os", "\n", "os", ".", "remove", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_her.test_save_load_replay_buffer": [[213, 299], ["pytest.mark.parametrize", "pytest.mark.parametrize", "warnings.filterwarnings", "warnings.filterwarnings", "pathlib.Path", "pathlib.Path.parent.mkdir", "stable_baselines3.common.envs.BitFlippingEnv", "stable_baselines3.SAC", "stable_baselines3.SAC.learn", "stable_baselines3.SAC.save_replay_buffer", "stable_baselines3.SAC.load_replay_buffer", "stable_baselines3.SAC.learn", "copy.deepcopy", "copy.deepcopy", "pytest.raises", "len", "recwarn.pop", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "dict", "int", "dict", "len", "str", "len"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.save_replay_buffer", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.load_replay_buffer", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"online_sampling\"", ",", "[", "False", ",", "True", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"truncate_last_trajectory\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_save_load_replay_buffer", "(", "tmp_path", ",", "recwarn", ",", "online_sampling", ",", "truncate_last_trajectory", ")", ":", "\n", "    ", "\"\"\"\n    Test if 'save_replay_buffer' and 'load_replay_buffer' works correctly\n    \"\"\"", "\n", "# remove gym warnings", "\n", "warnings", ".", "filterwarnings", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "warnings", ".", "filterwarnings", "(", "action", "=", "\"ignore\"", ",", "category", "=", "UserWarning", ",", "module", "=", "\"gym\"", ")", "\n", "\n", "path", "=", "pathlib", ".", "Path", "(", "tmp_path", "/", "\"replay_buffer.pkl\"", ")", "\n", "path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "# to not raise a warning", "\n", "env", "=", "BitFlippingEnv", "(", "n_bits", "=", "4", ",", "continuous", "=", "True", ")", "\n", "model", "=", "SAC", "(", "\n", "\"MultiInputPolicy\"", ",", "\n", "env", ",", "\n", "replay_buffer_class", "=", "HerReplayBuffer", ",", "\n", "replay_buffer_kwargs", "=", "dict", "(", "\n", "n_sampled_goal", "=", "2", ",", "\n", "goal_selection_strategy", "=", "\"future\"", ",", "\n", "online_sampling", "=", "online_sampling", ",", "\n", "max_episode_length", "=", "4", ",", "\n", ")", ",", "\n", "gradient_steps", "=", "1", ",", "\n", "train_freq", "=", "4", ",", "\n", "buffer_size", "=", "int", "(", "2e4", ")", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ",", "\n", "seed", "=", "1", ",", "\n", ")", "\n", "model", ".", "learn", "(", "200", ")", "\n", "if", "online_sampling", ":", "\n", "        ", "old_replay_buffer", "=", "deepcopy", "(", "model", ".", "replay_buffer", ")", "\n", "", "else", ":", "\n", "        ", "old_replay_buffer", "=", "deepcopy", "(", "model", ".", "replay_buffer", ".", "replay_buffer", ")", "\n", "", "model", ".", "save_replay_buffer", "(", "path", ")", "\n", "del", "model", ".", "replay_buffer", "\n", "\n", "with", "pytest", ".", "raises", "(", "AttributeError", ")", ":", "\n", "        ", "model", ".", "replay_buffer", "\n", "\n", "# Check that there is no warning", "\n", "", "assert", "len", "(", "recwarn", ")", "==", "0", "\n", "\n", "model", ".", "load_replay_buffer", "(", "path", ",", "truncate_last_traj", "=", "truncate_last_trajectory", ")", "\n", "\n", "if", "truncate_last_trajectory", ":", "\n", "        ", "assert", "len", "(", "recwarn", ")", "==", "1", "\n", "warning", "=", "recwarn", ".", "pop", "(", "UserWarning", ")", "\n", "assert", "\"The last trajectory in the replay buffer will be truncated\"", "in", "str", "(", "warning", ".", "message", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "recwarn", ")", "==", "0", "\n", "\n", "", "if", "online_sampling", ":", "\n", "        ", "n_episodes_stored", "=", "model", ".", "replay_buffer", ".", "n_episodes_stored", "\n", "assert", "np", ".", "allclose", "(", "\n", "old_replay_buffer", ".", "_buffer", "[", "\"observation\"", "]", "[", ":", "n_episodes_stored", "]", ",", "\n", "model", ".", "replay_buffer", ".", "_buffer", "[", "\"observation\"", "]", "[", ":", "n_episodes_stored", "]", ",", "\n", ")", "\n", "assert", "np", ".", "allclose", "(", "\n", "old_replay_buffer", ".", "_buffer", "[", "\"next_obs\"", "]", "[", ":", "n_episodes_stored", "]", ",", "\n", "model", ".", "replay_buffer", ".", "_buffer", "[", "\"next_obs\"", "]", "[", ":", "n_episodes_stored", "]", ",", "\n", ")", "\n", "assert", "np", ".", "allclose", "(", "\n", "old_replay_buffer", ".", "_buffer", "[", "\"action\"", "]", "[", ":", "n_episodes_stored", "]", ",", "\n", "model", ".", "replay_buffer", ".", "_buffer", "[", "\"action\"", "]", "[", ":", "n_episodes_stored", "]", ",", "\n", ")", "\n", "assert", "np", ".", "allclose", "(", "\n", "old_replay_buffer", ".", "_buffer", "[", "\"reward\"", "]", "[", ":", "n_episodes_stored", "]", ",", "\n", "model", ".", "replay_buffer", ".", "_buffer", "[", "\"reward\"", "]", "[", ":", "n_episodes_stored", "]", ",", "\n", ")", "\n", "# we might change the last done of the last trajectory so we don't compare it", "\n", "assert", "np", ".", "allclose", "(", "\n", "old_replay_buffer", ".", "_buffer", "[", "\"done\"", "]", "[", ":", "n_episodes_stored", "-", "1", "]", ",", "\n", "model", ".", "replay_buffer", ".", "_buffer", "[", "\"done\"", "]", "[", ":", "n_episodes_stored", "-", "1", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "replay_buffer", "=", "model", ".", "replay_buffer", ".", "replay_buffer", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "observations", "[", "\"observation\"", "]", ",", "replay_buffer", ".", "observations", "[", "\"observation\"", "]", ")", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "observations", "[", "\"desired_goal\"", "]", ",", "replay_buffer", ".", "observations", "[", "\"desired_goal\"", "]", ")", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "actions", ",", "replay_buffer", ".", "actions", ")", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "rewards", ",", "replay_buffer", ".", "rewards", ")", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "dones", ",", "replay_buffer", ".", "dones", ")", "\n", "\n", "# test if continuing training works properly", "\n", "", "reset_num_timesteps", "=", "False", "if", "truncate_last_trajectory", "is", "False", "else", "True", "\n", "model", ".", "learn", "(", "200", ",", "reset_num_timesteps", "=", "reset_num_timesteps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_her.test_full_replay_buffer": [[301, 330], ["stable_baselines3.common.envs.BitFlippingEnv", "stable_baselines3.SAC", "stable_baselines3.SAC.learn", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "test_full_replay_buffer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test if HER works correctly with a full replay buffer when using online sampling.\n    It should not sample the current episode which is not finished.\n    \"\"\"", "\n", "n_bits", "=", "4", "\n", "env", "=", "BitFlippingEnv", "(", "n_bits", "=", "n_bits", ",", "continuous", "=", "True", ")", "\n", "\n", "# use small buffer size to get the buffer full", "\n", "model", "=", "SAC", "(", "\n", "\"MultiInputPolicy\"", ",", "\n", "env", ",", "\n", "replay_buffer_class", "=", "HerReplayBuffer", ",", "\n", "replay_buffer_kwargs", "=", "dict", "(", "\n", "n_sampled_goal", "=", "2", ",", "\n", "goal_selection_strategy", "=", "\"future\"", ",", "\n", "online_sampling", "=", "True", ",", "\n", "max_episode_length", "=", "n_bits", ",", "\n", ")", ",", "\n", "gradient_steps", "=", "1", ",", "\n", "train_freq", "=", "4", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ",", "\n", "learning_starts", "=", "1", ",", "\n", "buffer_size", "=", "20", ",", "\n", "verbose", "=", "1", ",", "\n", "seed", "=", "757", ",", "\n", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_her.test_get_max_episode_length": [[332, 365], ["stable_baselines3.common.vec_env.DummyVecEnv", "gym.make", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.DQN", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.DQN", "pytest.raises", "stable_baselines3.her.her_replay_buffer.get_time_limit", "stable_baselines3.her.her_replay_buffer.get_time_limit", "stable_baselines3.her.her_replay_buffer.get_time_limit", "stable_baselines3.her.her_replay_buffer.get_time_limit", "pytest.raises", "stable_baselines3.her.her_replay_buffer.get_time_limit", "pytest.raises", "stable_baselines3.DQN", "dict", "dict", "stable_baselines3.common.envs.BitFlippingEnv", "gym.wrappers.TimeLimit", "stable_baselines3.common.envs.BitFlippingEnv"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.get_time_limit", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.get_time_limit", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.get_time_limit", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.get_time_limit", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.her.her_replay_buffer.get_time_limit"], ["", "def", "test_get_max_episode_length", "(", ")", ":", "\n", "    ", "dict_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "BitFlippingEnv", "(", ")", "]", ")", "\n", "\n", "# Cannot infer max epsiode length", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "get_time_limit", "(", "dict_env", ",", "current_max_episode_length", "=", "None", ")", "\n", "\n", "", "default_length", "=", "10", "\n", "assert", "get_time_limit", "(", "dict_env", ",", "current_max_episode_length", "=", "default_length", ")", "==", "default_length", "\n", "\n", "env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "vec_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "\n", "assert", "get_time_limit", "(", "vec_env", ",", "current_max_episode_length", "=", "None", ")", "==", "500", "\n", "# Overwrite max_episode_steps", "\n", "assert", "get_time_limit", "(", "vec_env", ",", "current_max_episode_length", "=", "default_length", ")", "==", "default_length", "\n", "\n", "# Set max_episode_steps to None", "\n", "env", ".", "spec", ".", "max_episode_steps", "=", "None", "\n", "vec_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "get_time_limit", "(", "vec_env", ",", "current_max_episode_length", "=", "None", ")", "\n", "\n", "# Initialize HER and specify max_episode_length, should not raise an issue", "\n", "", "DQN", "(", "\"MultiInputPolicy\"", ",", "dict_env", ",", "replay_buffer_class", "=", "HerReplayBuffer", ",", "replay_buffer_kwargs", "=", "dict", "(", "max_episode_length", "=", "5", ")", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "DQN", "(", "\"MultiInputPolicy\"", ",", "dict_env", ",", "replay_buffer_class", "=", "HerReplayBuffer", ")", "\n", "\n", "# Wrapped in a timelimit, should be fine", "\n", "# Note: it requires env.spec to be defined", "\n", "", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "wrappers", ".", "TimeLimit", "(", "BitFlippingEnv", "(", ")", ",", "10", ")", "]", ")", "\n", "DQN", "(", "\"MultiInputPolicy\"", ",", "env", ",", "replay_buffer_class", "=", "HerReplayBuffer", ",", "replay_buffer_kwargs", "=", "dict", "(", "max_episode_length", "=", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_her.test_performance_her": [[367, 401], ["pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.envs.BitFlippingEnv", "stable_baselines3.DQN", "stable_baselines3.DQN.learn", "numpy.mean", "dict", "int"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"online_sampling\"", ",", "[", "False", ",", "True", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_bits\"", ",", "[", "10", "]", ")", "\n", "def", "test_performance_her", "(", "online_sampling", ",", "n_bits", ")", ":", "\n", "    ", "\"\"\"\n    That DQN+HER can solve BitFlippingEnv.\n    It should not work when n_sampled_goal=0 (DQN alone).\n    \"\"\"", "\n", "env", "=", "BitFlippingEnv", "(", "n_bits", "=", "n_bits", ",", "continuous", "=", "False", ")", "\n", "\n", "model", "=", "DQN", "(", "\n", "\"MultiInputPolicy\"", ",", "\n", "env", ",", "\n", "replay_buffer_class", "=", "HerReplayBuffer", ",", "\n", "replay_buffer_kwargs", "=", "dict", "(", "\n", "n_sampled_goal", "=", "5", ",", "\n", "goal_selection_strategy", "=", "\"future\"", ",", "\n", "online_sampling", "=", "online_sampling", ",", "\n", "max_episode_length", "=", "n_bits", ",", "\n", ")", ",", "\n", "verbose", "=", "1", ",", "\n", "learning_rate", "=", "5e-4", ",", "\n", "train_freq", "=", "1", ",", "\n", "learning_starts", "=", "100", ",", "\n", "exploration_final_eps", "=", "0.02", ",", "\n", "target_update_interval", "=", "500", ",", "\n", "seed", "=", "0", ",", "\n", "batch_size", "=", "32", ",", "\n", "buffer_size", "=", "int", "(", "1e5", ")", ",", "\n", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "5000", ",", "log_interval", "=", "50", ")", "\n", "\n", "# 90% training success", "\n", "assert", "np", ".", "mean", "(", "model", ".", "ep_success_buffer", ")", ">", "0.90", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_custom_policy.test_flexible_mlp": [[8, 23], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_class().learn", "model_class", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"net_arch\"", ",", "\n", "[", "\n", "[", "12", ",", "dict", "(", "vf", "=", "[", "16", "]", ",", "pi", "=", "[", "8", "]", ")", "]", ",", "\n", "[", "4", "]", ",", "\n", "[", "]", ",", "\n", "[", "4", ",", "4", "]", ",", "\n", "[", "12", ",", "dict", "(", "vf", "=", "[", "8", ",", "4", "]", ",", "pi", "=", "[", "8", "]", ")", "]", ",", "\n", "[", "12", ",", "dict", "(", "vf", "=", "[", "8", "]", ",", "pi", "=", "[", "8", ",", "4", "]", ")", "]", ",", "\n", "[", "12", ",", "dict", "(", "pi", "=", "[", "8", "]", ")", "]", ",", "\n", "]", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", "]", ")", "\n", "def", "test_flexible_mlp", "(", "model_class", ",", "net_arch", ")", ":", "\n", "    ", "_", "=", "model_class", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "net_arch", ")", ",", "n_steps", "=", "64", ")", ".", "learn", "(", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_custom_policy.test_custom_offpolicy": [[25, 29], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_class().learn", "dict", "model_class", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"net_arch\"", ",", "[", "[", "]", ",", "[", "4", "]", ",", "[", "4", ",", "4", "]", ",", "dict", "(", "qf", "=", "[", "8", "]", ",", "pi", "=", "[", "8", ",", "4", "]", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "TD3", "]", ")", "\n", "def", "test_custom_offpolicy", "(", "model_class", ",", "net_arch", ")", ":", "\n", "    ", "_", "=", "model_class", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "net_arch", ")", ",", "learning_starts", "=", "100", ")", ".", "learn", "(", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_custom_policy.test_custom_optimizer": [[31, 42], ["pytest.mark.parametrize", "pytest.mark.parametrize", "dict", "model_class().learn", "dict", "dict", "dict", "model_class"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", ",", "SAC", ",", "TD3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"optimizer_kwargs\"", ",", "[", "None", ",", "dict", "(", "weight_decay", "=", "0.0", ")", "]", ")", "\n", "def", "test_custom_optimizer", "(", "model_class", ",", "optimizer_kwargs", ")", ":", "\n", "    ", "kwargs", "=", "{", "}", "\n", "if", "model_class", "in", "{", "DQN", ",", "SAC", ",", "TD3", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "learning_starts", "=", "100", ")", "\n", "", "elif", "model_class", "in", "{", "A2C", ",", "PPO", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "n_steps", "=", "64", ")", "\n", "\n", "", "policy_kwargs", "=", "dict", "(", "optimizer_class", "=", "th", ".", "optim", ".", "AdamW", ",", "optimizer_kwargs", "=", "optimizer_kwargs", ",", "net_arch", "=", "[", "32", "]", ")", "\n", "_", "=", "model_class", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "policy_kwargs", "=", "policy_kwargs", ",", "**", "kwargs", ")", ".", "learn", "(", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_custom_policy.test_tf_like_rmsprop_optimizer": [[44, 47], ["dict", "stable_baselines3.A2C().learn", "stable_baselines3.A2C"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "test_tf_like_rmsprop_optimizer", "(", ")", ":", "\n", "    ", "policy_kwargs", "=", "dict", "(", "optimizer_class", "=", "RMSpropTFLike", ",", "net_arch", "=", "[", "32", "]", ")", "\n", "_", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "policy_kwargs", "=", "policy_kwargs", ")", ".", "learn", "(", "500", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_custom_policy.test_dqn_custom_policy": [[49, 52], ["dict", "stable_baselines3.DQN().learn", "stable_baselines3.DQN"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "test_dqn_custom_policy", "(", ")", ":", "\n", "    ", "policy_kwargs", "=", "dict", "(", "optimizer_class", "=", "RMSpropTFLike", ",", "net_arch", "=", "[", "32", "]", ")", "\n", "_", "=", "DQN", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "policy_kwargs", "=", "policy_kwargs", ",", "learning_starts", "=", "100", ")", ".", "learn", "(", "300", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_predict.SubClassedBox.__init__": [[21, 23], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_predict.CustomSubClassedSpaceEnv.__init__": [[26, 30], ["gym.Env.__init__", "test_predict.SubClassedBox", "test_predict.SubClassedBox"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "=", "SubClassedBox", "(", "-", "1", ",", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "action_space", "=", "SubClassedBox", "(", "-", "1", ",", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_predict.CustomSubClassedSpaceEnv.reset": [[31, 33], ["test_predict.CustomSubClassedSpaceEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_predict.CustomSubClassedSpaceEnv.step": [[34, 36], ["test_predict.CustomSubClassedSpaceEnv.observation_space.sample", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", ",", "0.0", ",", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_predict.test_auto_wrap": [[38, 51], ["pytest.mark.parametrize", "gym.make", "gym.make", "model_class", "model_class.learn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "MODEL_LIST", ")", "\n", "def", "test_auto_wrap", "(", "model_class", ")", ":", "\n", "# test auto wrapping of env into a VecEnv", "\n", "\n", "# Use different environment for DQN", "\n", "    ", "if", "model_class", "is", "DQN", ":", "\n", "        ", "env_name", "=", "\"CartPole-v0\"", "\n", "", "else", ":", "\n", "        ", "env_name", "=", "\"Pendulum-v1\"", "\n", "", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "eval_env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ")", "\n", "model", ".", "learn", "(", "100", ",", "eval_env", "=", "eval_env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_predict.test_predict": [[53, 92], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "model_class", "gym.make", "stable_baselines3.common.vec_env.DummyVecEnv", "gym.make.reset", "model_class.predict", "gym.make.action_space.contains", "stable_baselines3.common.vec_env.DummyVecEnv.reset", "model_class.predict", "pytest.skip", "model_class.predict", "gym.make.action_space.contains", "model_class.predict", "torch.cuda.is_available", "stable_baselines3.common.utils.get_device", "gym.make", "gym.make"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "MODEL_LIST", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"Pendulum-v1\"", ",", "\"CartPole-v1\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"device\"", ",", "[", "\"cpu\"", ",", "\"cuda\"", ",", "\"auto\"", "]", ")", "\n", "def", "test_predict", "(", "model_class", ",", "env_id", ",", "device", ")", ":", "\n", "    ", "if", "device", "==", "\"cuda\"", "and", "not", "th", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"CUDA not available\"", ")", "\n", "\n", "", "if", "env_id", "==", "\"CartPole-v1\"", ":", "\n", "        ", "if", "model_class", "in", "[", "SAC", ",", "TD3", "]", ":", "\n", "            ", "return", "\n", "", "", "elif", "model_class", "in", "[", "DQN", "]", ":", "\n", "        ", "return", "\n", "\n", "# Test detection of different shapes by the predict method", "\n", "", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env_id", ",", "device", "=", "device", ")", "\n", "# Check that the policy is on the right device", "\n", "assert", "get_device", "(", "device", ")", ".", "type", "==", "model", ".", "policy", ".", "device", ".", "type", "\n", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "vec_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "make", "(", "env_id", ")", ",", "lambda", ":", "gym", ".", "make", "(", "env_id", ")", "]", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "action", ",", "_", "=", "model", ".", "predict", "(", "obs", ")", "\n", "assert", "action", ".", "shape", "==", "env", ".", "action_space", ".", "shape", "\n", "assert", "env", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "vec_env_obs", "=", "vec_env", ".", "reset", "(", ")", "\n", "action", ",", "_", "=", "model", ".", "predict", "(", "vec_env_obs", ")", "\n", "assert", "action", ".", "shape", "[", "0", "]", "==", "vec_env_obs", ".", "shape", "[", "0", "]", "\n", "\n", "# Special case for DQN to check the epsilon greedy exploration", "\n", "if", "model_class", "==", "DQN", ":", "\n", "        ", "model", ".", "exploration_rate", "=", "1.0", "\n", "action", ",", "_", "=", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "False", ")", "\n", "assert", "action", ".", "shape", "==", "env", ".", "action_space", ".", "shape", "\n", "assert", "env", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "action", ",", "_", "=", "model", ".", "predict", "(", "vec_env_obs", ",", "deterministic", "=", "False", ")", "\n", "assert", "action", ".", "shape", "[", "0", "]", "==", "vec_env_obs", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_predict.test_dqn_epsilon_greedy": [[94, 102], ["stable_baselines3.common.envs.IdentityEnv", "stable_baselines3.DQN", "stable_baselines3.common.envs.IdentityEnv.reset", "stable_baselines3.DQN.predict", "stable_baselines3.common.envs.IdentityEnv.action_space.contains"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict"], ["", "", "def", "test_dqn_epsilon_greedy", "(", ")", ":", "\n", "    ", "env", "=", "IdentityEnv", "(", "2", ")", "\n", "model", "=", "DQN", "(", "\"MlpPolicy\"", ",", "env", ")", "\n", "model", ".", "exploration_rate", "=", "1.0", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "# is vectorized should not crash with discrete obs", "\n", "action", ",", "_", "=", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "False", ")", "\n", "assert", "env", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_predict.test_subclassed_space_env": [[104, 111], ["pytest.mark.parametrize", "test_predict.CustomSubClassedSpaceEnv", "model_class", "model_class.learn", "test_predict.CustomSubClassedSpaceEnv.reset", "test_predict.CustomSubClassedSpaceEnv.step", "model_class.predict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "SAC", ",", "PPO", ",", "TD3", "]", ")", "\n", "def", "test_subclassed_space_env", "(", "model_class", ")", ":", "\n", "    ", "env", "=", "CustomSubClassedSpaceEnv", "(", ")", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "32", "]", ")", ")", "\n", "model", ".", "learn", "(", "300", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "env", ".", "step", "(", "model", ".", "predict", "(", "obs", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.__init__": [[13, 17], ["gym.spaces.Discrete", "gym.spaces.Dict", "gym.spaces.Box"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_envs", "=", "4", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "{", "\"rgb\"", ":", "spaces", ".", "Box", "(", "low", "=", "0.0", ",", "high", "=", "255.0", ",", "shape", "=", "(", "86", ",", "86", ")", ",", "dtype", "=", "np", ".", "float32", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_async": [[18, 20], ["None"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "actions", "=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.step_wait": [[21, 27], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range"], "methods", ["None"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "{", "\"rgb\"", ":", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", "86", ",", "86", ")", ")", "}", ",", "\n", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ")", ",", "\n", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "bool", ")", ",", "\n", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.reset": [[29, 31], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"rgb\"", ":", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", "86", ",", "86", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.DictObsVecEnv.render": [[32, 34], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"human\"", ",", "close", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.test_extract_dict_obs": [[36, 42], ["test_vec_extract_dict_obs.DictObsVecEnv", "stable_baselines3.common.vec_env.VecExtractDictObs", "stable_baselines3.common.vec_env.VecExtractDictObs.reset"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "", "def", "test_extract_dict_obs", "(", ")", ":", "\n", "    ", "\"\"\"Test VecExtractDictObs\"\"\"", "\n", "\n", "env", "=", "DictObsVecEnv", "(", ")", "\n", "env", "=", "VecExtractDictObs", "(", "env", ",", "\"rgb\"", ")", "\n", "assert", "env", ".", "reset", "(", ")", ".", "shape", "==", "(", "4", ",", "86", ",", "86", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_extract_dict_obs.test_vec_with_ppo": [[44, 53], ["test_vec_extract_dict_obs.DictObsVecEnv", "stable_baselines3.common.vec_env.VecExtractDictObs", "stable_baselines3.common.vec_env.VecMonitor", "stable_baselines3.PPO", "stable_baselines3.PPO.learn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "test_vec_with_ppo", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test the `VecExtractDictObs` with PPO\n    \"\"\"", "\n", "env", "=", "DictObsVecEnv", "(", ")", "\n", "env", "=", "VecExtractDictObs", "(", "env", ",", "\"rgb\"", ")", "\n", "monitor_env", "=", "VecMonitor", "(", "env", ")", "\n", "model", "=", "PPO", "(", "\"MlpPolicy\"", ",", "monitor_env", ",", "verbose", "=", "1", ",", "n_steps", "=", "64", ",", "device", "=", "\"cpu\"", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "250", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyRewardEnv.__init__": [[26, 32], ["gym.spaces.Discrete", "gym.spaces.Box", "numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "return_reward_idx", "=", "0", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "1.0", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "1.0", "]", ")", ")", "\n", "self", ".", "returned_rewards", "=", "[", "0", ",", "1", ",", "3", ",", "4", "]", "\n", "self", ".", "return_reward_idx", "=", "return_reward_idx", "\n", "self", ".", "t", "=", "self", ".", "return_reward_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyRewardEnv.step": [[33, 38], ["len", "numpy.array", "len"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "index", "=", "(", "self", ".", "t", "+", "self", ".", "return_reward_idx", ")", "%", "len", "(", "self", ".", "returned_rewards", ")", "\n", "returned_value", "=", "self", ".", "returned_rewards", "[", "index", "]", "\n", "return", "np", ".", "array", "(", "[", "returned_value", "]", ")", ",", "returned_value", ",", "self", ".", "t", "==", "len", "(", "self", ".", "returned_rewards", ")", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyRewardEnv.reset": [[39, 42], ["numpy.array"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "returned_rewards", "[", "self", ".", "return_reward_idx", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyDictEnv.__init__": [[49, 59], ["gym.GoalEnv.__init__", "gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"observation\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "20.0", ",", "high", "=", "20.0", ",", "shape", "=", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"achieved_goal\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "20.0", ",", "high", "=", "20.0", ",", "shape", "=", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"desired_goal\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "20.0", ",", "high", "=", "20.0", ",", "shape", "=", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", "\n", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyDictEnv.reset": [[60, 62], ["test_vec_normalize.DummyDictEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyDictEnv.step": [[63, 68], ["test_vec_normalize.DummyDictEnv.observation_space.sample", "test_vec_normalize.DummyDictEnv.compute_reward", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.compute_reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", "=", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "reward", "=", "self", ".", "compute_reward", "(", "obs", "[", "\"achieved_goal\"", "]", ",", "obs", "[", "\"desired_goal\"", "]", ",", "{", "}", ")", "\n", "done", "=", "np", ".", "random", ".", "rand", "(", ")", ">", "0.8", "\n", "return", "obs", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyDictEnv.compute_reward": [[69, 72], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ":", "np", ".", "ndarray", ",", "desired_goal", ":", "np", ".", "ndarray", ",", "_info", ")", "->", "np", ".", "float32", ":", "\n", "        ", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "achieved_goal", "-", "desired_goal", ",", "axis", "=", "-", "1", ")", "\n", "return", "-", "(", "distance", ">", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyMixedDictEnv.__init__": [[79, 89], ["gym.Env.__init__", "gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"obs1\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "20.0", ",", "high", "=", "20.0", ",", "shape", "=", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"obs2\"", ":", "spaces", ".", "Discrete", "(", "1", ")", ",", "\n", "\"obs3\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "20.0", ",", "high", "=", "20.0", ",", "shape", "=", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", "\n", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyMixedDictEnv.reset": [[90, 92], ["test_vec_normalize.DummyMixedDictEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.DummyMixedDictEnv.step": [[93, 97], ["test_vec_normalize.DummyMixedDictEnv.observation_space.sample", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", "=", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "done", "=", "np", ".", "random", ".", "rand", "(", ")", ">", "0.8", "\n", "return", "obs", ",", "0.0", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose": [[99, 111], ["isinstance", "numpy.allclose", "obs_1.keys", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "", "def", "allclose", "(", "obs_1", ",", "obs_2", ")", ":", "\n", "    ", "\"\"\"\n    Generalized np.allclose() to work with dict spaces.\n    \"\"\"", "\n", "if", "isinstance", "(", "obs_1", ",", "dict", ")", ":", "\n", "        ", "all_close", "=", "True", "\n", "for", "key", "in", "obs_1", ".", "keys", "(", ")", ":", "\n", "            ", "if", "not", "np", ".", "allclose", "(", "obs_1", "[", "key", "]", ",", "obs_2", "[", "key", "]", ")", ":", "\n", "                ", "all_close", "=", "False", "\n", "break", "\n", "", "", "return", "all_close", "\n", "", "return", "np", ".", "allclose", "(", "obs_1", ",", "obs_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.make_env": [[113, 115], ["stable_baselines3.common.monitor.Monitor", "gym.make"], "function", ["None"], ["", "def", "make_env", "(", ")", ":", "\n", "    ", "return", "Monitor", "(", "gym", ".", "make", "(", "ENV_ID", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.make_dict_env": [[117, 119], ["stable_baselines3.common.monitor.Monitor", "test_vec_normalize.DummyDictEnv"], "function", ["None"], ["", "def", "make_dict_env", "(", ")", ":", "\n", "    ", "return", "Monitor", "(", "DummyDictEnv", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_deprecation": [[121, 128], ["stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "warnings.catch_warnings", "numpy.allclose", "len", "gym.make"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "def", "test_deprecation", "(", ")", ":", "\n", "    ", "venv", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "]", ")", "\n", "venv", "=", "VecNormalize", "(", "venv", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "assert", "np", ".", "allclose", "(", "venv", ".", "ret", ",", "venv", ".", "returns", ")", "\n", "# Deprecation warning when using .ret", "\n", "", "assert", "len", "(", "record", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.check_rms_equal": [[130, 140], ["isinstance", "rmsa.keys", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all"], "function", ["None"], ["", "def", "check_rms_equal", "(", "rmsa", ",", "rmsb", ")", ":", "\n", "    ", "if", "isinstance", "(", "rmsa", ",", "dict", ")", ":", "\n", "        ", "for", "key", "in", "rmsa", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "np", ".", "all", "(", "rmsa", "[", "key", "]", ".", "mean", "==", "rmsb", "[", "key", "]", ".", "mean", ")", "\n", "assert", "np", ".", "all", "(", "rmsa", "[", "key", "]", ".", "var", "==", "rmsb", "[", "key", "]", ".", "var", ")", "\n", "assert", "np", ".", "all", "(", "rmsa", "[", "key", "]", ".", "count", "==", "rmsb", "[", "key", "]", ".", "count", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "np", ".", "all", "(", "rmsa", ".", "mean", "==", "rmsb", ".", "mean", ")", "\n", "assert", "np", ".", "all", "(", "rmsa", ".", "var", "==", "rmsb", ".", "var", ")", "\n", "assert", "np", ".", "all", "(", "rmsa", ".", "count", "==", "rmsb", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.check_vec_norm_equal": [[142, 158], ["test_vec_normalize.check_rms_equal", "test_vec_normalize.check_rms_equal", "numpy.all"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.check_rms_equal", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.check_rms_equal"], ["", "", "def", "check_vec_norm_equal", "(", "norma", ",", "normb", ")", ":", "\n", "    ", "assert", "norma", ".", "observation_space", "==", "normb", ".", "observation_space", "\n", "assert", "norma", ".", "action_space", "==", "normb", ".", "action_space", "\n", "assert", "norma", ".", "num_envs", "==", "normb", ".", "num_envs", "\n", "\n", "check_rms_equal", "(", "norma", ".", "obs_rms", ",", "normb", ".", "obs_rms", ")", "\n", "check_rms_equal", "(", "norma", ".", "ret_rms", ",", "normb", ".", "ret_rms", ")", "\n", "assert", "norma", ".", "clip_obs", "==", "normb", ".", "clip_obs", "\n", "assert", "norma", ".", "clip_reward", "==", "normb", ".", "clip_reward", "\n", "assert", "norma", ".", "norm_obs", "==", "normb", ".", "norm_obs", "\n", "assert", "norma", ".", "norm_reward", "==", "normb", ".", "norm_reward", "\n", "\n", "assert", "np", ".", "all", "(", "norma", ".", "returns", "==", "normb", ".", "returns", ")", "\n", "assert", "norma", ".", "gamma", "==", "normb", ".", "gamma", "\n", "assert", "norma", ".", "epsilon", "==", "normb", ".", "epsilon", "\n", "assert", "norma", ".", "training", "==", "normb", ".", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart": [[160, 171], ["stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.VecNormalize.reset", "stable_baselines3.common.vec_env.VecNormalize.get_original_obs", "range", "stable_baselines3.common.vec_env.VecNormalize.step", "stable_baselines3.common.vec_env.VecNormalize.action_space.sample", "test_vec_normalize.make_dict_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.make_dict_env"], ["", "def", "_make_warmstart", "(", "env_fn", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Warm-start VecNormalize by stepping through 100 actions.\"\"\"", "\n", "venv", "=", "DummyVecEnv", "(", "[", "env_fn", "]", ")", "\n", "venv", "=", "VecNormalize", "(", "venv", ",", "**", "kwargs", ")", "\n", "venv", ".", "reset", "(", ")", "\n", "venv", ".", "get_original_obs", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "        ", "actions", "=", "[", "venv", ".", "action_space", ".", "sample", "(", ")", "]", "\n", "venv", ".", "step", "(", "actions", ")", "\n", "", "return", "venv", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_cliffwalking": [[173, 176], ["test_vec_normalize._make_warmstart", "gym.make"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart"], ["", "def", "_make_warmstart_cliffwalking", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Warm-start VecNormalize by stepping through CliffWalking\"\"\"", "\n", "return", "_make_warmstart", "(", "lambda", ":", "gym", ".", "make", "(", "\"CliffWalking-v0\"", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_cartpole": [[178, 181], ["test_vec_normalize._make_warmstart", "gym.make"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart"], ["", "def", "_make_warmstart_cartpole", "(", ")", ":", "\n", "    ", "\"\"\"Warm-start VecNormalize by stepping through CartPole\"\"\"", "\n", "return", "_make_warmstart", "(", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_dict_env": [[183, 186], ["test_vec_normalize._make_warmstart"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart"], ["", "def", "_make_warmstart_dict_env", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Warm-start VecNormalize by stepping through DummyDictEnv\"\"\"", "\n", "return", "_make_warmstart", "(", "make_dict_env", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_runningmeanstd": [[188, 204], ["stable_baselines3.common.running_mean_std.RunningMeanStd", "numpy.concatenate", "stable_baselines3.common.running_mean_std.RunningMeanStd.update", "stable_baselines3.common.running_mean_std.RunningMeanStd.update", "stable_baselines3.common.running_mean_std.RunningMeanStd.update", "numpy.allclose", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "np.concatenate.mean", "np.concatenate.var"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "\"\"\"Test RunningMeanStd object\"\"\"", "\n", "for", "(", "x_1", ",", "x_2", ",", "x_3", ")", "in", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "\n", "]", ":", "\n", "        ", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "x_1", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "x_cat", "=", "np", ".", "concatenate", "(", "[", "x_1", ",", "x_2", ",", "x_3", "]", ",", "axis", "=", "0", ")", "\n", "moments_1", "=", "[", "x_cat", ".", "mean", "(", "axis", "=", "0", ")", ",", "x_cat", ".", "var", "(", "axis", "=", "0", ")", "]", "\n", "rms", ".", "update", "(", "x_1", ")", "\n", "rms", ".", "update", "(", "x_2", ")", "\n", "rms", ".", "update", "(", "x_3", ")", "\n", "moments_2", "=", "[", "rms", ".", "mean", ",", "rms", ".", "var", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "moments_1", ",", "moments_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_combining_stats": [[206, 236], ["numpy.random.seed", "stable_baselines3.common.running_mean_std.RunningMeanStd", "stable_baselines3.common.running_mean_std.RunningMeanStd", "stable_baselines3.common.running_mean_std.RunningMeanStd", "range", "range", "stable_baselines3.common.running_mean_std.RunningMeanStd.combine", "numpy.allclose", "numpy.allclose", "stable_baselines3.common.running_mean_std.RunningMeanStd.copy", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.concatenate", "numpy.allclose", "numpy.allclose", "numpy.random.randn", "stable_baselines3.common.running_mean_std.RunningMeanStd.update", "stable_baselines3.common.running_mean_std.RunningMeanStd.update", "values.append", "stable_baselines3.common.running_mean_std.RunningMeanStd.update", "stable_baselines3.common.running_mean_std.RunningMeanStd.update", "values.append", "id", "id", "id", "id", "np.concatenate.mean", "np.concatenate.var", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.combine", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.running_mean_std.RunningMeanStd.copy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["", "", "def", "test_combining_stats", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "4", ")", "\n", "for", "shape", "in", "[", "(", "1", ",", ")", ",", "(", "3", ",", ")", ",", "(", "3", ",", "4", ")", "]", ":", "\n", "        ", "values", "=", "[", "]", "\n", "rms_1", "=", "RunningMeanStd", "(", "shape", "=", "shape", ")", "\n", "rms_2", "=", "RunningMeanStd", "(", "shape", "=", "shape", ")", "\n", "rms_3", "=", "RunningMeanStd", "(", "shape", "=", "shape", ")", "\n", "for", "_", "in", "range", "(", "15", ")", ":", "\n", "            ", "value", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", "\n", "rms_1", ".", "update", "(", "value", ")", "\n", "rms_3", ".", "update", "(", "value", ")", "\n", "values", ".", "append", "(", "value", ")", "\n", "", "for", "_", "in", "range", "(", "19", ")", ":", "\n", "# Shift the values", "\n", "            ", "value", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", "+", "1.0", "\n", "rms_2", ".", "update", "(", "value", ")", "\n", "rms_3", ".", "update", "(", "value", ")", "\n", "values", ".", "append", "(", "value", ")", "\n", "", "rms_1", ".", "combine", "(", "rms_2", ")", "\n", "assert", "np", ".", "allclose", "(", "rms_3", ".", "mean", ",", "rms_1", ".", "mean", ")", "\n", "assert", "np", ".", "allclose", "(", "rms_3", ".", "var", ",", "rms_1", ".", "var", ")", "\n", "rms_4", "=", "rms_3", ".", "copy", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "rms_4", ".", "mean", ",", "rms_3", ".", "mean", ")", "\n", "assert", "np", ".", "allclose", "(", "rms_4", ".", "var", ",", "rms_3", ".", "var", ")", "\n", "assert", "np", ".", "allclose", "(", "rms_4", ".", "count", ",", "rms_3", ".", "count", ")", "\n", "assert", "id", "(", "rms_4", ".", "mean", ")", "!=", "id", "(", "rms_3", ".", "mean", ")", "\n", "assert", "id", "(", "rms_4", ".", "var", ")", "!=", "id", "(", "rms_3", ".", "var", ")", "\n", "x_cat", "=", "np", ".", "concatenate", "(", "values", ",", "axis", "=", "0", ")", "\n", "assert", "np", ".", "allclose", "(", "x_cat", ".", "mean", "(", "axis", "=", "0", ")", ",", "rms_4", ".", "mean", ")", "\n", "assert", "np", ".", "allclose", "(", "x_cat", ".", "var", "(", "axis", "=", "0", ")", ",", "rms_4", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_obs_rms_vec_normalize": [[238, 254], ["stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.VecNormalize.reset", "numpy.allclose", "numpy.allclose", "stable_baselines3.common.vec_env.VecNormalize.step", "numpy.allclose", "numpy.allclose", "range", "numpy.allclose", "numpy.allclose", "stable_baselines3.common.vec_env.VecNormalize.step", "test_vec_normalize.DummyRewardEnv", "test_vec_normalize.DummyRewardEnv", "stable_baselines3.common.vec_env.VecNormalize.action_space.sample", "range", "stable_baselines3.common.vec_env.VecNormalize.action_space.sample", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "def", "test_obs_rms_vec_normalize", "(", ")", ":", "\n", "    ", "env_fns", "=", "[", "lambda", ":", "DummyRewardEnv", "(", "0", ")", ",", "lambda", ":", "DummyRewardEnv", "(", "1", ")", "]", "\n", "env", "=", "DummyVecEnv", "(", "env_fns", ")", "\n", "env", "=", "VecNormalize", "(", "env", ")", "\n", "env", ".", "reset", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "env", ".", "obs_rms", ".", "mean", ",", "0.5", ",", "atol", "=", "1e-4", ")", "\n", "assert", "np", ".", "allclose", "(", "env", ".", "ret_rms", ".", "mean", ",", "0.0", ",", "atol", "=", "1e-4", ")", "\n", "env", ".", "step", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "len", "(", "env_fns", ")", ")", "]", ")", "\n", "assert", "np", ".", "allclose", "(", "env", ".", "obs_rms", ".", "mean", ",", "1.25", ",", "atol", "=", "1e-4", ")", "\n", "assert", "np", ".", "allclose", "(", "env", ".", "ret_rms", ".", "mean", ",", "2", ",", "atol", "=", "1e-4", ")", "\n", "\n", "# Check convergence to true mean", "\n", "for", "_", "in", "range", "(", "3000", ")", ":", "\n", "        ", "env", ".", "step", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "len", "(", "env_fns", ")", ")", "]", ")", "\n", "", "assert", "np", ".", "allclose", "(", "env", ".", "obs_rms", ".", "mean", ",", "2.0", ",", "atol", "=", "1e-3", ")", "\n", "assert", "np", ".", "allclose", "(", "env", ".", "ret_rms", ".", "mean", ",", "5.688", ",", "atol", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_vec_env": [[256, 279], ["pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.VecNormalize.save", "stable_baselines3.common.vec_env.VecNormalize.load", "test_vec_normalize.check_vec_norm_equal", "stable_baselines3.common.vec_env.VecNormalize.reset", "stable_baselines3.common.vec_env.VecNormalize.step", "isinstance", "stable_baselines3.common.vec_env.VecNormalize.action_space.sample", "obs.keys", "numpy.max", "numpy.max", "numpy.abs", "numpy.max", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.check_vec_norm_equal", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"make_env\"", ",", "[", "make_env", ",", "make_dict_env", "]", ")", "\n", "def", "test_vec_env", "(", "tmp_path", ",", "make_env", ")", ":", "\n", "    ", "\"\"\"Test VecNormalize Object\"\"\"", "\n", "clip_obs", "=", "0.5", "\n", "clip_reward", "=", "5.0", "\n", "\n", "orig_venv", "=", "DummyVecEnv", "(", "[", "make_env", "]", ")", "\n", "norm_venv", "=", "VecNormalize", "(", "orig_venv", ",", "norm_obs", "=", "True", ",", "norm_reward", "=", "True", ",", "clip_obs", "=", "clip_obs", ",", "clip_reward", "=", "clip_reward", ")", "\n", "_", ",", "done", "=", "norm_venv", ".", "reset", "(", ")", ",", "[", "False", "]", "\n", "while", "not", "done", "[", "0", "]", ":", "\n", "        ", "actions", "=", "[", "norm_venv", ".", "action_space", ".", "sample", "(", ")", "]", "\n", "obs", ",", "rew", ",", "done", ",", "_", "=", "norm_venv", ".", "step", "(", "actions", ")", "\n", "if", "isinstance", "(", "obs", ",", "dict", ")", ":", "\n", "            ", "for", "key", "in", "obs", ".", "keys", "(", ")", ":", "\n", "                ", "assert", "np", ".", "max", "(", "np", ".", "abs", "(", "obs", "[", "key", "]", ")", ")", "<=", "clip_obs", "\n", "", "", "else", ":", "\n", "            ", "assert", "np", ".", "max", "(", "np", ".", "abs", "(", "obs", ")", ")", "<=", "clip_obs", "\n", "", "assert", "np", ".", "max", "(", "np", ".", "abs", "(", "rew", ")", ")", "<=", "clip_reward", "\n", "\n", "", "path", "=", "tmp_path", "/", "\"vec_normalize\"", "\n", "norm_venv", ".", "save", "(", "path", ")", "\n", "deserialized", "=", "VecNormalize", ".", "load", "(", "path", ",", "venv", "=", "orig_venv", ")", "\n", "check_vec_norm_equal", "(", "norm_venv", ",", "deserialized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_get_original": [[281, 298], ["test_vec_normalize._make_warmstart_cartpole", "range", "_make_warmstart_cartpole.step", "numpy.all", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "_make_warmstart_cartpole.action_space.sample", "_make_warmstart_cartpole.get_original_obs", "_make_warmstart_cartpole.get_original_reward", "numpy.array_equal", "numpy.array_equal", "_make_warmstart_cartpole.normalize_obs", "_make_warmstart_cartpole.normalize_reward"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_cartpole", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_reward"], ["", "def", "test_get_original", "(", ")", ":", "\n", "    ", "venv", "=", "_make_warmstart_cartpole", "(", ")", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "        ", "actions", "=", "[", "venv", ".", "action_space", ".", "sample", "(", ")", "]", "\n", "obs", ",", "rewards", ",", "_", ",", "_", "=", "venv", ".", "step", "(", "actions", ")", "\n", "obs", "=", "obs", "[", "0", "]", "\n", "orig_obs", "=", "venv", ".", "get_original_obs", "(", ")", "[", "0", "]", "\n", "rewards", "=", "rewards", "[", "0", "]", "\n", "orig_rewards", "=", "venv", ".", "get_original_reward", "(", ")", "[", "0", "]", "\n", "\n", "assert", "np", ".", "all", "(", "orig_rewards", "==", "1", ")", "\n", "assert", "orig_obs", ".", "shape", "==", "obs", ".", "shape", "\n", "assert", "orig_rewards", ".", "dtype", "==", "rewards", ".", "dtype", "\n", "assert", "not", "np", ".", "array_equal", "(", "orig_obs", ",", "obs", ")", "\n", "assert", "not", "np", ".", "array_equal", "(", "orig_rewards", ",", "rewards", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "venv", ".", "normalize_obs", "(", "orig_obs", ")", ",", "obs", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "venv", ".", "normalize_reward", "(", "orig_rewards", ")", ",", "rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_get_original_dict": [[300, 318], ["test_vec_normalize._make_warmstart_dict_env", "range", "_make_warmstart_dict_env.step", "_make_warmstart_dict_env.get_original_obs", "venv.get_original_obs.keys", "test_vec_normalize.allclose", "numpy.testing.assert_allclose", "_make_warmstart_dict_env.action_space.sample", "_make_warmstart_dict_env.get_original_reward", "test_vec_normalize.allclose", "numpy.array_equal", "_make_warmstart_dict_env.normalize_obs", "_make_warmstart_dict_env.normalize_reward"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_dict_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_reward"], ["", "", "def", "test_get_original_dict", "(", ")", ":", "\n", "    ", "venv", "=", "_make_warmstart_dict_env", "(", ")", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "        ", "actions", "=", "[", "venv", ".", "action_space", ".", "sample", "(", ")", "]", "\n", "obs", ",", "rewards", ",", "_", ",", "_", "=", "venv", ".", "step", "(", "actions", ")", "\n", "# obs = obs[0]", "\n", "orig_obs", "=", "venv", ".", "get_original_obs", "(", ")", "\n", "rewards", "=", "rewards", "[", "0", "]", "\n", "orig_rewards", "=", "venv", ".", "get_original_reward", "(", ")", "[", "0", "]", "\n", "\n", "for", "key", "in", "orig_obs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "orig_obs", "[", "key", "]", ".", "shape", "==", "obs", "[", "key", "]", ".", "shape", "\n", "", "assert", "orig_rewards", ".", "dtype", "==", "rewards", ".", "dtype", "\n", "\n", "assert", "not", "allclose", "(", "orig_obs", ",", "obs", ")", "\n", "assert", "not", "np", ".", "array_equal", "(", "orig_rewards", ",", "rewards", ")", "\n", "assert", "allclose", "(", "venv", ".", "normalize_obs", "(", "orig_obs", ")", ",", "obs", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "venv", ".", "normalize_reward", "(", "orig_rewards", ")", ",", "rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_normalize_external": [[320, 328], ["test_vec_normalize._make_warmstart_cartpole", "numpy.array", "_make_warmstart_cartpole.normalize_reward", "numpy.all"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_cartpole", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_reward"], ["", "", "def", "test_normalize_external", "(", ")", ":", "\n", "    ", "venv", "=", "_make_warmstart_cartpole", "(", ")", "\n", "\n", "rewards", "=", "np", ".", "array", "(", "[", "1", ",", "1", "]", ")", "\n", "norm_rewards", "=", "venv", ".", "normalize_reward", "(", "rewards", ")", "\n", "assert", "norm_rewards", ".", "shape", "==", "rewards", ".", "shape", "\n", "# Episode return is almost always >= 1 in CartPole. So reward should shrink.", "\n", "assert", "np", ".", "all", "(", "norm_rewards", "<", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_normalize_dict_selected_keys": [[330, 343], ["test_vec_normalize._make_warmstart_dict_env", "range", "_make_warmstart_dict_env.step", "_make_warmstart_dict_env.get_original_obs", "numpy.testing.assert_array_compare", "test_vec_normalize.allclose", "numpy.testing.assert_array_equal", "_make_warmstart_dict_env.action_space.sample", "_make_warmstart_dict_env.normalize_obs"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_dict_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs"], ["", "def", "test_normalize_dict_selected_keys", "(", ")", ":", "\n", "    ", "venv", "=", "_make_warmstart_dict_env", "(", "norm_obs", "=", "True", ",", "norm_obs_keys", "=", "[", "\"observation\"", "]", ")", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "        ", "actions", "=", "[", "venv", ".", "action_space", ".", "sample", "(", ")", "]", "\n", "obs", ",", "rewards", ",", "_", ",", "_", "=", "venv", ".", "step", "(", "actions", ")", "\n", "orig_obs", "=", "venv", ".", "get_original_obs", "(", ")", "\n", "\n", "# \"observation\" is expected to be normalized", "\n", "np", ".", "testing", ".", "assert_array_compare", "(", "operator", ".", "__ne__", ",", "obs", "[", "\"observation\"", "]", ",", "orig_obs", "[", "\"observation\"", "]", ")", "\n", "assert", "allclose", "(", "venv", ".", "normalize_obs", "(", "orig_obs", ")", ",", "obs", ")", "\n", "\n", "# other keys are expected to be presented \"as is\"", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "obs", "[", "\"achieved_goal\"", "]", ",", "orig_obs", "[", "\"achieved_goal\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_offpolicy_normalization": [[345, 387], ["pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "model_class.set_env", "model_class.learn", "model_class.set_env", "model_class.learn", "isinstance", "pytest.skip", "stable_baselines3.SAC", "model_class", "model_class.get_vec_normalize_env", "model_class.get_vec_normalize_env", "model_class.get_vec_normalize_env", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_vec_normalize_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_vec_normalize_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_vec_normalize_env"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "TD3", ",", "HerReplayBuffer", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"online_sampling\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_offpolicy_normalization", "(", "model_class", ",", "online_sampling", ")", ":", "\n", "\n", "    ", "if", "online_sampling", "and", "model_class", "!=", "HerReplayBuffer", ":", "\n", "        ", "pytest", ".", "skip", "(", ")", "\n", "\n", "", "make_env_", "=", "make_dict_env", "if", "model_class", "==", "HerReplayBuffer", "else", "make_env", "\n", "env", "=", "DummyVecEnv", "(", "[", "make_env_", "]", ")", "\n", "env", "=", "VecNormalize", "(", "env", ",", "norm_obs", "=", "True", ",", "norm_reward", "=", "True", ",", "clip_obs", "=", "10.0", ",", "clip_reward", "=", "10.0", ")", "\n", "\n", "eval_env", "=", "DummyVecEnv", "(", "[", "make_env_", "]", ")", "\n", "eval_env", "=", "VecNormalize", "(", "eval_env", ",", "training", "=", "False", ",", "norm_obs", "=", "True", ",", "norm_reward", "=", "False", ",", "clip_obs", "=", "10.0", ",", "clip_reward", "=", "10.0", ")", "\n", "\n", "if", "model_class", "==", "HerReplayBuffer", ":", "\n", "        ", "model", "=", "SAC", "(", "\n", "\"MultiInputPolicy\"", ",", "\n", "env", ",", "\n", "verbose", "=", "1", ",", "\n", "learning_starts", "=", "100", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ",", "\n", "replay_buffer_kwargs", "=", "dict", "(", "\n", "max_episode_length", "=", "100", ",", "\n", "online_sampling", "=", "online_sampling", ",", "\n", "n_sampled_goal", "=", "2", ",", "\n", ")", ",", "\n", "replay_buffer_class", "=", "HerReplayBuffer", ",", "\n", "seed", "=", "2", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "verbose", "=", "1", ",", "learning_starts", "=", "100", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ")", "\n", "\n", "# Check that VecNormalize object is correctly updated", "\n", "", "assert", "model", ".", "get_vec_normalize_env", "(", ")", "is", "env", "\n", "model", ".", "set_env", "(", "eval_env", ")", "\n", "assert", "model", ".", "get_vec_normalize_env", "(", ")", "is", "eval_env", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "10", ")", "\n", "model", ".", "set_env", "(", "env", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ",", "eval_env", "=", "eval_env", ",", "eval_freq", "=", "75", ")", "\n", "# Check getter", "\n", "assert", "isinstance", "(", "model", ".", "get_vec_normalize_env", "(", ")", ",", "VecNormalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_sync_vec_normalize": [[389, 446], ["pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "isinstance", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.VecFrameStack.seed", "stable_baselines3.common.vec_env.VecFrameStack.action_space.seed", "stable_baselines3.common.vec_env.VecFrameStack.reset", "range", "stable_baselines3.common.vec_env.VecFrameStack.get_original_reward", "numpy.allclose", "stable_baselines3.common.vec_env.VecFrameStack.reset", "numpy.random.rand", "stable_baselines3.common.vec_env.VecFrameStack.get_original_obs", "test_vec_normalize.allclose", "stable_baselines3.common.vec_env.sync_envs_normalization", "test_vec_normalize.allclose", "test_vec_normalize.allclose", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.VecFrameStack.reset", "stable_baselines3.common.vec_env.VecFrameStack.step", "stable_baselines3.common.vec_env.sync_envs_normalization", "numpy.allclose", "numpy.allclose", "stable_baselines3.common.vec_env.unwrap_vec_normalize", "stable_baselines3.common.vec_env.unwrap_vec_normalize", "isinstance", "stable_baselines3.common.vec_env.VecFrameStack", "isinstance", "isinstance", "stable_baselines3.common.vec_env.VecFrameStack", "stable_baselines3.common.vec_env.VecFrameStack.step", "stable_baselines3.common.vec_env.VecFrameStack.unnormalize_reward", "stable_baselines3.common.vec_env.VecFrameStack.unnormalize_obs", "test_vec_normalize.allclose", "stable_baselines3.common.vec_env.VecFrameStack.normalize_obs", "stable_baselines3.common.vec_env.VecFrameStack.normalize_reward", "stable_baselines3.common.vec_env.VecFrameStack.normalize_reward", "numpy.allclose", "stable_baselines3.common.vec_env.unwrap_vec_normalize", "stable_baselines3.common.vec_env.VecFrameStack.normalize_obs", "stable_baselines3.common.vec_env.VecFrameStack.action_space.sample", "stable_baselines3.common.vec_env.VecFrameStack.action_space.sample"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.sync_envs_normalization", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.sync_envs_normalization", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_normalize", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_normalize", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.unnormalize_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.unnormalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.unwrap_vec_normalize", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"make_env\"", ",", "[", "make_env", ",", "make_dict_env", "]", ")", "\n", "def", "test_sync_vec_normalize", "(", "make_env", ")", ":", "\n", "    ", "original_env", "=", "DummyVecEnv", "(", "[", "make_env", "]", ")", "\n", "\n", "assert", "unwrap_vec_normalize", "(", "original_env", ")", "is", "None", "\n", "\n", "env", "=", "VecNormalize", "(", "original_env", ",", "norm_obs", "=", "True", ",", "norm_reward", "=", "True", ",", "clip_obs", "=", "100.0", ",", "clip_reward", "=", "100.0", ")", "\n", "\n", "assert", "isinstance", "(", "unwrap_vec_normalize", "(", "env", ")", ",", "VecNormalize", ")", "\n", "\n", "if", "not", "isinstance", "(", "env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "        ", "env", "=", "VecFrameStack", "(", "env", ",", "1", ")", "\n", "assert", "isinstance", "(", "unwrap_vec_normalize", "(", "env", ")", ",", "VecNormalize", ")", "\n", "\n", "", "eval_env", "=", "DummyVecEnv", "(", "[", "make_env", "]", ")", "\n", "eval_env", "=", "VecNormalize", "(", "eval_env", ",", "training", "=", "False", ",", "norm_obs", "=", "True", ",", "norm_reward", "=", "True", ",", "clip_obs", "=", "100.0", ",", "clip_reward", "=", "100.0", ")", "\n", "\n", "if", "not", "isinstance", "(", "env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "        ", "eval_env", "=", "VecFrameStack", "(", "eval_env", ",", "1", ")", "\n", "\n", "", "env", ".", "seed", "(", "0", ")", "\n", "env", ".", "action_space", ".", "seed", "(", "0", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "# Initialize running mean", "\n", "latest_reward", "=", "None", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "        ", "_", ",", "latest_reward", ",", "_", ",", "_", "=", "env", ".", "step", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "\n", "\n", "# Check that unnormalized reward is same as original reward", "\n", "", "original_latest_reward", "=", "env", ".", "get_original_reward", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "original_latest_reward", ",", "env", ".", "unnormalize_reward", "(", "latest_reward", ")", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "dummy_rewards", "=", "np", ".", "random", ".", "rand", "(", "10", ")", "\n", "original_obs", "=", "env", ".", "get_original_obs", "(", ")", "\n", "# Check that unnormalization works", "\n", "assert", "allclose", "(", "original_obs", ",", "env", ".", "unnormalize_obs", "(", "obs", ")", ")", "\n", "# Normalization must be different (between different environments)", "\n", "assert", "not", "allclose", "(", "obs", ",", "eval_env", ".", "normalize_obs", "(", "original_obs", ")", ")", "\n", "\n", "# Test syncing of parameters", "\n", "sync_envs_normalization", "(", "env", ",", "eval_env", ")", "\n", "# Now they must be synced", "\n", "assert", "allclose", "(", "obs", ",", "eval_env", ".", "normalize_obs", "(", "original_obs", ")", ")", "\n", "assert", "allclose", "(", "env", ".", "normalize_reward", "(", "dummy_rewards", ")", ",", "eval_env", ".", "normalize_reward", "(", "dummy_rewards", ")", ")", "\n", "\n", "# Check synchronization when only reward is normalized", "\n", "env", "=", "VecNormalize", "(", "original_env", ",", "norm_obs", "=", "False", ",", "norm_reward", "=", "True", ",", "clip_reward", "=", "100.0", ")", "\n", "eval_env", "=", "DummyVecEnv", "(", "[", "make_env", "]", ")", "\n", "eval_env", "=", "VecNormalize", "(", "eval_env", ",", "training", "=", "False", ",", "norm_obs", "=", "False", ",", "norm_reward", "=", "False", ")", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "step", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "\n", "assert", "not", "np", ".", "allclose", "(", "env", ".", "ret_rms", ".", "mean", ",", "eval_env", ".", "ret_rms", ".", "mean", ")", "\n", "sync_envs_normalization", "(", "env", ",", "eval_env", ")", "\n", "assert", "np", ".", "allclose", "(", "env", ".", "ret_rms", ".", "mean", ",", "eval_env", ".", "ret_rms", ".", "mean", ")", "\n", "assert", "np", ".", "allclose", "(", "env", ".", "ret_rms", ".", "var", ",", "eval_env", ".", "ret_rms", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_discrete_obs": [[448, 454], ["test_vec_normalize._make_warmstart_cliffwalking", "pytest.raises", "test_vec_normalize._make_warmstart_cliffwalking"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_cliffwalking", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart_cliffwalking"], ["", "def", "test_discrete_obs", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "\".*only supports.*\"", ")", ":", "\n", "        ", "_make_warmstart_cliffwalking", "(", ")", "\n", "\n", "# Smoke test that it runs with norm_obs False", "\n", "", "_make_warmstart_cliffwalking", "(", "norm_obs", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.test_non_dict_obs_keys": [[456, 468], ["test_vec_normalize._make_warmstart", "test_vec_normalize._make_warmstart", "pytest.raises", "test_vec_normalize._make_warmstart", "pytest.raises", "test_vec_normalize._make_warmstart", "test_vec_normalize.DummyMixedDictEnv", "test_vec_normalize.DummyMixedDictEnv", "test_vec_normalize.DummyRewardEnv", "test_vec_normalize.DummyMixedDictEnv"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize._make_warmstart"], ["", "def", "test_non_dict_obs_keys", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "\".*is applicable only.*\"", ")", ":", "\n", "        ", "_make_warmstart", "(", "lambda", ":", "DummyRewardEnv", "(", ")", ",", "norm_obs_keys", "=", "[", "\"key\"", "]", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "\".* explicitely pass the observation keys.*\"", ")", ":", "\n", "        ", "_make_warmstart", "(", "lambda", ":", "DummyMixedDictEnv", "(", ")", ")", "\n", "\n", "# Ignore Discrete observation key", "\n", "", "_make_warmstart", "(", "lambda", ":", "DummyMixedDictEnv", "(", ")", ",", "norm_obs_keys", "=", "[", "\"obs1\"", ",", "\"obs3\"", "]", ")", "\n", "\n", "# Test dict obs with norm_obs set to False", "\n", "_make_warmstart", "(", "lambda", ":", "DummyMixedDictEnv", "(", ")", ",", "norm_obs", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_env_checker.ActionDictTestEnv.step": [[13, 19], ["numpy.array"], "methods", ["None"], ["def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.5", ",", "0.5", "]", ",", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "reward", "=", "1", "\n", "done", "=", "True", "\n", "info", "=", "{", "}", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_env_checker.ActionDictTestEnv.reset": [[20, 22], ["numpy.array"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "1.0", ",", "1.5", ",", "0.5", "]", ",", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_env_checker.ActionDictTestEnv.render": [[23, 25], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"human\"", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_env_checker.test_check_env_dict_action": [[27, 32], ["test_env_checker.ActionDictTestEnv", "pytest.warns", "stable_baselines3.common.env_checker.check_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env"], ["", "", "def", "test_check_env_dict_action", "(", ")", ":", "\n", "    ", "test_env", "=", "ActionDictTestEnv", "(", ")", "\n", "\n", "with", "pytest", ".", "warns", "(", "Warning", ")", ":", "\n", "        ", "check_env", "(", "env", "=", "test_env", ",", "warn", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_check_nan.NanAndInfEnv.__init__": [[14, 18], ["gym.Env.__init__", "gym.spaces.Box", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_check_nan.NanAndInfEnv.step": [[19, 28], ["numpy.all", "float", "numpy.all", "numpy.array", "float", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "step", "(", "action", ")", ":", "\n", "        ", "if", "np", ".", "all", "(", "np", ".", "array", "(", "action", ")", ">", "0", ")", ":", "\n", "            ", "obs", "=", "float", "(", "\"NaN\"", ")", "\n", "", "elif", "np", ".", "all", "(", "np", ".", "array", "(", "action", ")", "<", "0", ")", ":", "\n", "            ", "obs", "=", "float", "(", "\"inf\"", ")", "\n", "", "else", ":", "\n", "            ", "obs", "=", "0", "\n", "", "return", "[", "obs", "]", ",", "0.0", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_check_nan.NanAndInfEnv.reset": [[29, 32], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "reset", "(", ")", ":", "\n", "        ", "return", "[", "0.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_check_nan.NanAndInfEnv.render": [[33, 35], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"human\"", ",", "close", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_check_nan.test_check_nan": [[37, 60], ["stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecCheckNan", "stable_baselines3.common.vec_env.VecCheckNan.step", "stable_baselines3.common.vec_env.VecCheckNan.step", "stable_baselines3.common.vec_env.VecCheckNan.reset", "pytest.raises", "stable_baselines3.common.vec_env.VecCheckNan.step", "pytest.raises", "stable_baselines3.common.vec_env.VecCheckNan.step", "pytest.raises", "stable_baselines3.common.vec_env.VecCheckNan.step", "pytest.raises", "stable_baselines3.common.vec_env.VecCheckNan.step", "numpy.array", "float", "float"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step"], ["", "", "def", "test_check_nan", "(", ")", ":", "\n", "    ", "\"\"\"Test VecCheckNan Object\"\"\"", "\n", "\n", "env", "=", "DummyVecEnv", "(", "[", "NanAndInfEnv", "]", ")", "\n", "env", "=", "VecCheckNan", "(", "env", ",", "raise_exception", "=", "True", ")", "\n", "\n", "env", ".", "step", "(", "[", "[", "0", "]", "]", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "env", ".", "step", "(", "[", "[", "float", "(", "\"NaN\"", ")", "]", "]", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "env", ".", "step", "(", "[", "[", "float", "(", "\"inf\"", ")", "]", "]", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "env", ".", "step", "(", "[", "[", "-", "1", "]", "]", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "env", ".", "step", "(", "[", "[", "1", "]", "]", ")", "\n", "\n", "", "env", ".", "step", "(", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_deterministic.test_deterministic_training_common": [[10, 38], ["pytest.mark.parametrize", "range", "dict", "kwargs.update", "algo", "algo.learn", "algo.get_env", "model.get_env.reset", "range", "sum", "sum", "sum", "sum", "kwargs.update", "algo.predict", "model.get_env.step", "results[].append", "rewards[].append", "stable_baselines3.common.noise.NormalActionNoise", "kwargs.update"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"algo\"", ",", "[", "A2C", ",", "DQN", ",", "PPO", ",", "SAC", ",", "TD3", "]", ")", "\n", "def", "test_deterministic_training_common", "(", "algo", ")", ":", "\n", "    ", "results", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "rewards", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "# Smaller network", "\n", "kwargs", "=", "{", "\"policy_kwargs\"", ":", "dict", "(", "net_arch", "=", "[", "64", "]", ")", "}", "\n", "env_id", "=", "\"Pendulum-v1\"", "\n", "if", "algo", "in", "[", "TD3", ",", "SAC", "]", ":", "\n", "        ", "kwargs", ".", "update", "(", "{", "\"action_noise\"", ":", "NormalActionNoise", "(", "0.0", ",", "0.1", ")", ",", "\"learning_starts\"", ":", "100", ",", "\"train_freq\"", ":", "4", "}", ")", "\n", "", "else", ":", "\n", "        ", "if", "algo", "==", "DQN", ":", "\n", "            ", "env_id", "=", "\"CartPole-v1\"", "\n", "kwargs", ".", "update", "(", "{", "\"learning_starts\"", ":", "100", ",", "\"target_update_interval\"", ":", "100", "}", ")", "\n", "", "elif", "algo", "==", "PPO", ":", "\n", "            ", "kwargs", ".", "update", "(", "{", "\"n_steps\"", ":", "64", ",", "\"n_epochs\"", ":", "4", "}", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "model", "=", "algo", "(", "\"MlpPolicy\"", ",", "env_id", ",", "seed", "=", "SEED", ",", "**", "kwargs", ")", "\n", "model", ".", "learn", "(", "N_STEPS_TRAINING", ")", "\n", "env", "=", "model", ".", "get_env", "(", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "action", ",", "_", "=", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "False", ")", "\n", "obs", ",", "reward", ",", "_", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "results", "[", "i", "]", ".", "append", "(", "action", ")", "\n", "rewards", "[", "i", "]", ".", "append", "(", "reward", ")", "\n", "", "", "assert", "sum", "(", "results", "[", "0", "]", ")", "==", "sum", "(", "results", "[", "1", "]", ")", ",", "results", "\n", "assert", "sum", "(", "rewards", "[", "0", "]", ")", "==", "sum", "(", "rewards", "[", "1", "]", ")", ",", "rewards", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_monitor.test_monitor": [[11, 50], ["gym.make", "gym.make.seed", "os.path.join", "stable_baselines3.common.monitor.Monitor", "stable_baselines3.common.monitor.Monitor.reset", "range", "stable_baselines3.common.monitor.Monitor.close", "stable_baselines3.common.monitor.Monitor.get_episode_times", "os.remove", "str", "stable_baselines3.common.monitor.Monitor.step", "stable_baselines3.common.monitor.Monitor.get_total_steps", "sum", "sum", "sum", "sum", "open", "file_handler.readline", "file_handler.readline.startswith", "json.loads", "pandas.read_csv", "stable_baselines3.common.monitor.Monitor.action_space.sample", "ep_rewards.append", "ep_lengths.append", "stable_baselines3.common.monitor.Monitor.reset", "stable_baselines3.common.monitor.Monitor.get_episode_lengths", "stable_baselines3.common.monitor.Monitor.get_episode_rewards", "set", "set", "uuid.uuid4", "json.loads.keys", "pandas.read_csv.keys"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.get_episode_times", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.get_total_steps", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.read_csv", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.get_episode_lengths", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.Monitor.get_episode_rewards"], ["def", "test_monitor", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    Test the monitor wrapper\n    \"\"\"", "\n", "env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "monitor_file", "=", "os", ".", "path", ".", "join", "(", "str", "(", "tmp_path", ")", ",", "f\"stable_baselines-test-{uuid.uuid4()}.monitor.csv\"", ")", "\n", "monitor_env", "=", "Monitor", "(", "env", ",", "monitor_file", ")", "\n", "monitor_env", ".", "reset", "(", ")", "\n", "total_steps", "=", "1000", "\n", "ep_rewards", "=", "[", "]", "\n", "ep_lengths", "=", "[", "]", "\n", "ep_len", ",", "ep_reward", "=", "0", ",", "0", "\n", "for", "_", "in", "range", "(", "total_steps", ")", ":", "\n", "        ", "_", ",", "reward", ",", "done", ",", "_", "=", "monitor_env", ".", "step", "(", "monitor_env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "ep_len", "+=", "1", "\n", "ep_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "            ", "ep_rewards", ".", "append", "(", "ep_reward", ")", "\n", "ep_lengths", ".", "append", "(", "ep_len", ")", "\n", "monitor_env", ".", "reset", "(", ")", "\n", "ep_len", ",", "ep_reward", "=", "0", ",", "0", "\n", "\n", "", "", "monitor_env", ".", "close", "(", ")", "\n", "assert", "monitor_env", ".", "get_total_steps", "(", ")", "==", "total_steps", "\n", "assert", "sum", "(", "ep_lengths", ")", "==", "sum", "(", "monitor_env", ".", "get_episode_lengths", "(", ")", ")", "\n", "assert", "sum", "(", "monitor_env", ".", "get_episode_rewards", "(", ")", ")", "==", "sum", "(", "ep_rewards", ")", "\n", "_", "=", "monitor_env", ".", "get_episode_times", "(", ")", "\n", "\n", "with", "open", "(", "monitor_file", ")", "as", "file_handler", ":", "\n", "        ", "first_line", "=", "file_handler", ".", "readline", "(", ")", "\n", "assert", "first_line", ".", "startswith", "(", "\"#\"", ")", "\n", "metadata", "=", "json", ".", "loads", "(", "first_line", "[", "1", ":", "]", ")", "\n", "assert", "metadata", "[", "\"env_id\"", "]", "==", "\"CartPole-v1\"", "\n", "assert", "set", "(", "metadata", ".", "keys", "(", ")", ")", "==", "{", "\"env_id\"", ",", "\"t_start\"", "}", ",", "\"Incorrect keys in monitor metadata\"", "\n", "\n", "last_logline", "=", "pandas", ".", "read_csv", "(", "file_handler", ",", "index_col", "=", "None", ")", "\n", "assert", "set", "(", "last_logline", ".", "keys", "(", ")", ")", "==", "{", "\"l\"", ",", "\"t\"", ",", "\"r\"", "}", ",", "\"Incorrect keys in monitor logline\"", "\n", "", "os", ".", "remove", "(", "monitor_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_monitor.test_monitor_load_results": [[52, 100], ["str", "gym.make", "gym.make.seed", "os.path.join", "stable_baselines3.common.monitor.Monitor", "stable_baselines3.common.monitor.get_monitor_files", "stable_baselines3.common.monitor.Monitor.reset", "range", "len", "gym.make", "gym.make.seed", "os.path.join", "stable_baselines3.common.monitor.Monitor", "stable_baselines3.common.monitor.get_monitor_files", "stable_baselines3.common.monitor.Monitor.reset", "range", "len", "os.remove", "os.remove", "len", "stable_baselines3.common.monitor.Monitor.step", "len", "stable_baselines3.common.monitor.Monitor.step", "stable_baselines3.common.monitor.Monitor.action_space.sample", "stable_baselines3.common.monitor.Monitor.reset", "stable_baselines3.common.monitor.load_results", "stable_baselines3.common.monitor.Monitor.action_space.sample", "stable_baselines3.common.monitor.Monitor.reset", "stable_baselines3.common.monitor.load_results", "uuid.uuid4", "os.path.join", "uuid.uuid4", "os.path.join"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.get_monitor_files", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.get_monitor_files", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.load_results", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.load_results"], ["", "def", "test_monitor_load_results", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    test load_results on log files produced by the monitor wrapper\n    \"\"\"", "\n", "tmp_path", "=", "str", "(", "tmp_path", ")", "\n", "env1", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "env1", ".", "seed", "(", "0", ")", "\n", "monitor_file1", "=", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "f\"stable_baselines-test-{uuid.uuid4()}.monitor.csv\"", ")", "\n", "monitor_env1", "=", "Monitor", "(", "env1", ",", "monitor_file1", ")", "\n", "\n", "monitor_files", "=", "get_monitor_files", "(", "tmp_path", ")", "\n", "assert", "len", "(", "monitor_files", ")", "==", "1", "\n", "assert", "monitor_file1", "in", "monitor_files", "\n", "\n", "monitor_env1", ".", "reset", "(", ")", "\n", "episode_count1", "=", "0", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "        ", "_", ",", "_", ",", "done", ",", "_", "=", "monitor_env1", ".", "step", "(", "monitor_env1", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "if", "done", ":", "\n", "            ", "episode_count1", "+=", "1", "\n", "monitor_env1", ".", "reset", "(", ")", "\n", "\n", "", "", "results_size1", "=", "len", "(", "load_results", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ")", ")", ".", "index", ")", "\n", "assert", "results_size1", "==", "episode_count1", "\n", "\n", "env2", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "env2", ".", "seed", "(", "0", ")", "\n", "monitor_file2", "=", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "f\"stable_baselines-test-{uuid.uuid4()}.monitor.csv\"", ")", "\n", "monitor_env2", "=", "Monitor", "(", "env2", ",", "monitor_file2", ")", "\n", "monitor_files", "=", "get_monitor_files", "(", "tmp_path", ")", "\n", "assert", "len", "(", "monitor_files", ")", "==", "2", "\n", "assert", "monitor_file1", "in", "monitor_files", "\n", "assert", "monitor_file2", "in", "monitor_files", "\n", "\n", "monitor_env2", ".", "reset", "(", ")", "\n", "episode_count2", "=", "0", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "        ", "_", ",", "_", ",", "done", ",", "_", "=", "monitor_env2", ".", "step", "(", "monitor_env2", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "if", "done", ":", "\n", "            ", "episode_count2", "+=", "1", "\n", "monitor_env2", ".", "reset", "(", ")", "\n", "\n", "", "", "results_size2", "=", "len", "(", "load_results", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ")", ")", ".", "index", ")", "\n", "\n", "assert", "results_size2", "==", "(", "results_size1", "+", "episode_count2", ")", "\n", "\n", "os", ".", "remove", "(", "monitor_file1", ")", "\n", "os", ".", "remove", "(", "monitor_file2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.DummyMultiDiscreteSpace.__init__": [[11, 15], ["gym.Env.__init__", "gym.spaces.MultiDiscrete", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nvec", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "MultiDiscrete", "(", "nvec", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.DummyMultiDiscreteSpace.reset": [[16, 18], ["test_spaces.DummyMultiDiscreteSpace.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.DummyMultiDiscreteSpace.step": [[19, 21], ["test_spaces.DummyMultiDiscreteSpace.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", ",", "0.0", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.DummyMultiBinary.__init__": [[24, 28], ["gym.Env.__init__", "gym.spaces.MultiBinary", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "MultiBinary", "(", "n", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.DummyMultiBinary.reset": [[29, 31], ["test_spaces.DummyMultiBinary.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.DummyMultiBinary.step": [[32, 34], ["test_spaces.DummyMultiBinary.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", ",", "0.0", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.test_identity_spaces": [[36, 53], ["pytest.mark.parametrize", "pytest.mark.parametrize", "gym.wrappers.TimeLimit", "model_class", "model_class.learn", "stable_baselines3.common.evaluation.evaluate_policy", "gym.spaces.Discrete", "test_spaces.DummyMultiDiscreteSpace", "test_spaces.DummyMultiBinary", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "TD3", ",", "DQN", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env\"", ",", "[", "DummyMultiDiscreteSpace", "(", "[", "4", ",", "3", "]", ")", ",", "DummyMultiBinary", "(", "8", ")", "]", ")", "\n", "def", "test_identity_spaces", "(", "model_class", ",", "env", ")", ":", "\n", "    ", "\"\"\"\n    Additional tests for DQ/SAC/TD3 to check observation space support\n    for MultiDiscrete and MultiBinary.\n    \"\"\"", "\n", "# DQN only support discrete actions", "\n", "if", "model_class", "==", "DQN", ":", "\n", "        ", "env", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "4", ")", "\n", "\n", "", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "env", ",", "max_episode_steps", "=", "100", ")", "\n", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "gamma", "=", "0.5", ",", "seed", "=", "1", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "500", ")", "\n", "\n", "evaluate_policy", "(", "model", ",", "env", ",", "n_eval_episodes", "=", "5", ",", "warn", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.test_action_spaces": [[55, 70], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_class", "pytest.raises", "model_class"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "DDPG", ",", "DQN", ",", "PPO", ",", "SAC", ",", "TD3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env\"", ",", "[", "\"Pendulum-v1\"", ",", "\"CartPole-v1\"", "]", ")", "\n", "def", "test_action_spaces", "(", "model_class", ",", "env", ")", ":", "\n", "    ", "if", "model_class", "in", "[", "SAC", ",", "DDPG", ",", "TD3", "]", ":", "\n", "        ", "supported_action_space", "=", "env", "==", "\"Pendulum-v1\"", "\n", "", "elif", "model_class", "==", "DQN", ":", "\n", "        ", "supported_action_space", "=", "env", "==", "\"CartPole-v1\"", "\n", "", "elif", "model_class", "in", "[", "A2C", ",", "PPO", "]", ":", "\n", "        ", "supported_action_space", "=", "True", "\n", "\n", "", "if", "supported_action_space", ":", "\n", "        ", "model_class", "(", "\"MlpPolicy\"", ",", "env", ")", "\n", "", "else", ":", "\n", "        ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "            ", "model_class", "(", "\"MlpPolicy\"", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_spaces.test_discrete_obs_space": [[72, 82], ["pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.env_util.make_vec_env", "model_class().learn", "dict", "dict", "model_class"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", ",", "DQN", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env\"", ",", "[", "\"Taxi-v3\"", "]", ")", "\n", "def", "test_discrete_obs_space", "(", "model_class", ",", "env", ")", ":", "\n", "    ", "env", "=", "make_vec_env", "(", "env", ",", "n_envs", "=", "2", ",", "seed", "=", "0", ")", "\n", "kwargs", "=", "{", "}", "\n", "if", "model_class", "==", "DQN", ":", "\n", "        ", "kwargs", "=", "dict", "(", "buffer_size", "=", "1000", ",", "learning_starts", "=", "100", ")", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "dict", "(", "n_steps", "=", "256", ")", "\n", "", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "**", "kwargs", ")", ".", "learn", "(", "256", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_tensorboard.test_tensorboard": [[18, 39], ["pytest.mark.parametrize", "pytest.importorskip", "model_name.upper", "algo", "algo.learn", "algo.learn", "os.path.isdir", "algo.learn", "algo.learn", "os.path.isdir", "os.path.isdir", "MODEL_DICT.keys", "os.path.isdir", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_name\"", ",", "MODEL_DICT", ".", "keys", "(", ")", ")", "\n", "def", "test_tensorboard", "(", "tmp_path", ",", "model_name", ")", ":", "\n", "# Skip if no tensorboard installed", "\n", "    ", "pytest", ".", "importorskip", "(", "\"tensorboard\"", ")", "\n", "\n", "logname", "=", "model_name", ".", "upper", "(", ")", "\n", "algo", ",", "env_id", "=", "MODEL_DICT", "[", "model_name", "]", "\n", "model", "=", "algo", "(", "\"MlpPolicy\"", ",", "env_id", ",", "verbose", "=", "1", ",", "tensorboard_log", "=", "tmp_path", ")", "\n", "model", ".", "learn", "(", "N_STEPS", ")", "\n", "model", ".", "learn", "(", "N_STEPS", ",", "reset_num_timesteps", "=", "False", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "tmp_path", "/", "str", "(", "logname", "+", "\"_1\"", ")", ")", "\n", "assert", "not", "os", ".", "path", ".", "isdir", "(", "tmp_path", "/", "str", "(", "logname", "+", "\"_2\"", ")", ")", "\n", "\n", "logname", "=", "\"tb_multiple_runs_\"", "+", "model_name", "\n", "model", ".", "learn", "(", "N_STEPS", ",", "tb_log_name", "=", "logname", ")", "\n", "model", ".", "learn", "(", "N_STEPS", ",", "tb_log_name", "=", "logname", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "tmp_path", "/", "str", "(", "logname", "+", "\"_1\"", ")", ")", "\n", "# Check that the log dir name increments correctly", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "tmp_path", "/", "str", "(", "logname", "+", "\"_2\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_tensorboard.test_escape_log_name": [[41, 49], ["os.makedirs", "os.makedirs", "stable_baselines3.common.utils.get_latest_run_id", "str", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_latest_run_id"], ["", "def", "test_escape_log_name", "(", "tmp_path", ")", ":", "\n", "# Log name that must be escaped", "\n", "    ", "log_name", "=", "\"filename[16, 16]\"", "\n", "# Create folder", "\n", "os", ".", "makedirs", "(", "str", "(", "tmp_path", ")", "+", "f\"/{log_name}_1\"", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "str", "(", "tmp_path", ")", "+", "f\"/{log_name}_2\"", ",", "exist_ok", "=", "True", ")", "\n", "last_run_id", "=", "get_latest_run_id", "(", "tmp_path", ",", "log_name", ")", "\n", "assert", "last_run_id", "==", "2", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.test_bijector": [[27, 39], ["stable_baselines3.common.distributions.TanhBijector", "stable_baselines3.common.distributions.TanhBijector.forward", "torch.isclose().all", "torch.ones", "torch.max", "torch.abs", "torch.isclose", "stable_baselines3.common.distributions.TanhBijector.inverse"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.FlattenBatchNormDropoutExtractor.forward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.TanhBijector.inverse"], ["def", "test_bijector", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test TanhBijector\n    \"\"\"", "\n", "actions", "=", "th", ".", "ones", "(", "5", ")", "*", "2.0", "\n", "bijector", "=", "TanhBijector", "(", ")", "\n", "\n", "squashed_actions", "=", "bijector", ".", "forward", "(", "actions", ")", "\n", "# Check that the boundaries are not violated", "\n", "assert", "th", ".", "max", "(", "th", ".", "abs", "(", "squashed_actions", ")", ")", "<=", "1.0", "\n", "# Check the inverse method", "\n", "assert", "th", ".", "isclose", "(", "TanhBijector", ".", "inverse", "(", "squashed_actions", ")", ",", "actions", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.test_squashed_gaussian": [[41, 55], ["pytest.mark.parametrize", "model_class", "model_class.learn", "torch.rand", "stable_baselines3.common.distributions.SquashedDiagGaussianDistribution", "dist.proba_distribution.proba_distribution_net", "dist.proba_distribution.proba_distribution", "dist.proba_distribution.get_actions", "torch.max", "dict", "torch.abs"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", "]", ")", "\n", "def", "test_squashed_gaussian", "(", "model_class", ")", ":", "\n", "    ", "\"\"\"\n    Test run with squashed Gaussian (notably entropy computation)\n    \"\"\"", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "use_sde", "=", "True", ",", "n_steps", "=", "64", ",", "policy_kwargs", "=", "dict", "(", "squash_output", "=", "True", ")", ")", "\n", "model", ".", "learn", "(", "500", ")", "\n", "\n", "gaussian_mean", "=", "th", ".", "rand", "(", "N_SAMPLES", ",", "N_ACTIONS", ")", "\n", "dist", "=", "SquashedDiagGaussianDistribution", "(", "N_ACTIONS", ")", "\n", "_", ",", "log_std", "=", "dist", ".", "proba_distribution_net", "(", "N_FEATURES", ")", "\n", "dist", "=", "dist", ".", "proba_distribution", "(", "gaussian_mean", ",", "log_std", ")", "\n", "actions", "=", "dist", ".", "get_actions", "(", ")", "\n", "assert", "th", ".", "max", "(", "th", ".", "abs", "(", "actions", ")", ")", "<=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.dummy_model_distribution_obs_and_actions": [[57, 68], ["pytest.fixture", "gym.make", "stable_baselines3.A2C", "numpy.array", "numpy.array", "gym.make.observation_space.sample", "gym.make.action_space.sample", "range", "range"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "dummy_model_distribution_obs_and_actions", "(", ")", "->", "Tuple", "[", "A2C", ",", "np", ".", "array", ",", "np", ".", "array", "]", ":", "\n", "    ", "\"\"\"\n    Fixture creating a Pendulum-v1 gym env, an A2C model and sampling 10 random observations and actions from the env\n    :return: A2C model, random observations, random actions\n    \"\"\"", "\n", "env", "=", "gym", ".", "make", "(", "\"Pendulum-v1\"", ")", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "env", ",", "seed", "=", "23", ")", "\n", "random_obs", "=", "np", ".", "array", "(", "[", "env", ".", "observation_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "10", ")", "]", ")", "\n", "random_actions", "=", "np", ".", "array", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "10", ")", "]", ")", "\n", "return", "model", ",", "random_obs", ",", "random_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.test_get_distribution": [[70, 82], ["torch.no_grad", "model.policy.obs_to_tensor", "torch.tensor().float", "model.policy.evaluate_actions", "model.policy.get_distribution", "model.policy.get_distribution.log_prob", "model.policy.get_distribution.entropy", "torch.allclose", "torch.allclose", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.obs_to_tensor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.evaluate_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.get_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "def", "test_get_distribution", "(", "dummy_model_distribution_obs_and_actions", ")", ":", "\n", "    ", "model", ",", "random_obs", ",", "random_actions", "=", "dummy_model_distribution_obs_and_actions", "\n", "# Check that evaluate actions return the same thing as get_distribution", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "        ", "observations", ",", "_", "=", "model", ".", "policy", ".", "obs_to_tensor", "(", "random_obs", ")", "\n", "actions", "=", "th", ".", "tensor", "(", "random_actions", ",", "device", "=", "observations", ".", "device", ")", ".", "float", "(", ")", "\n", "_", ",", "log_prob_1", ",", "entropy_1", "=", "model", ".", "policy", ".", "evaluate_actions", "(", "observations", ",", "actions", ")", "\n", "distribution", "=", "model", ".", "policy", ".", "get_distribution", "(", "observations", ")", "\n", "log_prob_2", "=", "distribution", ".", "log_prob", "(", "actions", ")", "\n", "entropy_2", "=", "distribution", ".", "entropy", "(", ")", "\n", "assert", "th", ".", "allclose", "(", "log_prob_1", ",", "log_prob_2", ")", "\n", "assert", "th", ".", "allclose", "(", "entropy_1", ",", "entropy_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.test_predict_values": [[84, 93], ["torch.no_grad", "model.policy.obs_to_tensor", "torch.tensor().float", "model.policy.evaluate_actions", "model.policy.predict_values", "torch.allclose", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.obs_to_tensor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.evaluate_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.predict_values", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "", "def", "test_predict_values", "(", "dummy_model_distribution_obs_and_actions", ")", ":", "\n", "    ", "model", ",", "random_obs", ",", "random_actions", "=", "dummy_model_distribution_obs_and_actions", "\n", "# Check that evaluate_actions return the same thing as predict_values", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "        ", "observations", ",", "_", "=", "model", ".", "policy", ".", "obs_to_tensor", "(", "random_obs", ")", "\n", "actions", "=", "th", ".", "tensor", "(", "random_actions", ",", "device", "=", "observations", ".", "device", ")", ".", "float", "(", ")", "\n", "values_1", ",", "_", ",", "_", "=", "model", ".", "policy", ".", "evaluate_actions", "(", "observations", ",", "actions", ")", "\n", "values_2", "=", "model", ".", "policy", ".", "predict_values", "(", "observations", ")", "\n", "assert", "th", ".", "allclose", "(", "values_1", ",", "values_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.test_sde_distribution": [[95, 110], ["stable_baselines3.common.distributions.StateDependentNoiseDistribution", "stable_baselines3.common.utils.set_random_seed", "dist.proba_distribution.proba_distribution_net", "dist.proba_distribution.sample_weights", "dist.proba_distribution.proba_distribution", "dist.proba_distribution.get_actions", "torch.allclose", "torch.allclose", "torch.ones", "torch.ones", "dist.get_actions.mean", "dist.proba_distribution.distribution.mean.mean", "dist.get_actions.std", "dist.proba_distribution.distribution.scale.mean"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.set_random_seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample_weights", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "", "def", "test_sde_distribution", "(", ")", ":", "\n", "    ", "n_actions", "=", "1", "\n", "deterministic_actions", "=", "th", ".", "ones", "(", "N_SAMPLES", ",", "n_actions", ")", "*", "0.1", "\n", "state", "=", "th", ".", "ones", "(", "N_SAMPLES", ",", "N_FEATURES", ")", "*", "0.3", "\n", "dist", "=", "StateDependentNoiseDistribution", "(", "n_actions", ",", "full_std", "=", "True", ",", "squash_output", "=", "False", ")", "\n", "\n", "set_random_seed", "(", "1", ")", "\n", "_", ",", "log_std", "=", "dist", ".", "proba_distribution_net", "(", "N_FEATURES", ")", "\n", "dist", ".", "sample_weights", "(", "log_std", ",", "batch_size", "=", "N_SAMPLES", ")", "\n", "\n", "dist", "=", "dist", ".", "proba_distribution", "(", "deterministic_actions", ",", "log_std", ",", "state", ")", "\n", "actions", "=", "dist", ".", "get_actions", "(", ")", "\n", "\n", "assert", "th", ".", "allclose", "(", "actions", ".", "mean", "(", ")", ",", "dist", ".", "distribution", ".", "mean", ".", "mean", "(", ")", ",", "rtol", "=", "2e-3", ")", "\n", "assert", "th", ".", "allclose", "(", "actions", ".", "std", "(", ")", ",", "dist", ".", "distribution", ".", "scale", ".", "mean", "(", ")", ",", "rtol", "=", "2e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.test_entropy": [[113, 138], ["pytest.mark.parametrize", "stable_baselines3.common.utils.set_random_seed", "torch.rand().repeat", "dist.proba_distribution.proba_distribution_net", "isinstance", "dist.proba_distribution.get_actions", "dist.proba_distribution.entropy", "dist.proba_distribution.log_prob", "torch.allclose", "dist.proba_distribution.proba_distribution", "torch.rand().repeat", "dist.proba_distribution.sample_weights", "dist.proba_distribution.proba_distribution", "dist.entropy.mean", "stable_baselines3.common.distributions.DiagGaussianDistribution", "stable_baselines3.common.distributions.StateDependentNoiseDistribution", "torch.rand", "torch.log", "dist.log_prob.mean", "torch.tensor", "torch.rand"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.set_random_seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample_weights", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"dist\"", ",", "\n", "[", "\n", "DiagGaussianDistribution", "(", "N_ACTIONS", ")", ",", "\n", "StateDependentNoiseDistribution", "(", "N_ACTIONS", ",", "squash_output", "=", "False", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_entropy", "(", "dist", ")", ":", "\n", "# The entropy can be approximated by averaging the negative log likelihood", "\n", "# mean negative log likelihood == differential entropy", "\n", "    ", "set_random_seed", "(", "1", ")", "\n", "deterministic_actions", "=", "th", ".", "rand", "(", "1", ",", "N_ACTIONS", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "_", ",", "log_std", "=", "dist", ".", "proba_distribution_net", "(", "N_FEATURES", ",", "log_std_init", "=", "th", ".", "log", "(", "th", ".", "tensor", "(", "0.2", ")", ")", ")", "\n", "\n", "if", "isinstance", "(", "dist", ",", "DiagGaussianDistribution", ")", ":", "\n", "        ", "dist", "=", "dist", ".", "proba_distribution", "(", "deterministic_actions", ",", "log_std", ")", "\n", "", "else", ":", "\n", "        ", "state", "=", "th", ".", "rand", "(", "1", ",", "N_FEATURES", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "dist", ".", "sample_weights", "(", "log_std", ",", "batch_size", "=", "N_SAMPLES", ")", "\n", "dist", "=", "dist", ".", "proba_distribution", "(", "deterministic_actions", ",", "log_std", ",", "state", ")", "\n", "\n", "", "actions", "=", "dist", ".", "get_actions", "(", ")", "\n", "entropy", "=", "dist", ".", "entropy", "(", ")", "\n", "log_prob", "=", "dist", ".", "log_prob", "(", "actions", ")", "\n", "assert", "th", ".", "allclose", "(", "entropy", ".", "mean", "(", ")", ",", "-", "log_prob", ".", "mean", "(", ")", ",", "rtol", "=", "5e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.test_categorical": [[147, 158], ["pytest.mark.parametrize", "stable_baselines3.common.utils.set_random_seed", "torch.rand", "dist.proba_distribution.proba_distribution", "dist.proba_distribution.get_actions", "dist.proba_distribution.entropy", "dist.proba_distribution.log_prob", "torch.allclose", "dist.entropy.mean", "dist.log_prob.mean"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.set_random_seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.entropy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dist, CAT_ACTIONS\"", ",", "categorical_params", ")", "\n", "def", "test_categorical", "(", "dist", ",", "CAT_ACTIONS", ")", ":", "\n", "# The entropy can be approximated by averaging the negative log likelihood", "\n", "# mean negative log likelihood == entropy", "\n", "    ", "set_random_seed", "(", "1", ")", "\n", "action_logits", "=", "th", ".", "rand", "(", "N_SAMPLES", ",", "CAT_ACTIONS", ")", "\n", "dist", "=", "dist", ".", "proba_distribution", "(", "action_logits", ")", "\n", "actions", "=", "dist", ".", "get_actions", "(", ")", "\n", "entropy", "=", "dist", ".", "entropy", "(", ")", "\n", "log_prob", "=", "dist", ".", "log_prob", "(", "actions", ")", "\n", "assert", "th", ".", "allclose", "(", "entropy", ".", "mean", "(", ")", ",", "-", "log_prob", ".", "mean", "(", ")", ",", "rtol", "=", "5e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_distributions.test_kl_divergence": [[160, 231], ["pytest.mark.parametrize", "stable_baselines3.common.utils.set_random_seed", "torch.allclose", "isinstance", "stable_baselines3.common.distributions.kl_divergence().mean", "dist1.proba_distribution.get_actions", "torch.allclose", "isinstance", "stable_baselines3.common.distributions.kl_divergence().sum", "torch.tensor", "dist_type.proba_distribution", "copy.deepcopy().proba_distribution", "stable_baselines3.common.distributions.BernoulliDistribution().proba_distribution", "stable_baselines3.common.distributions.BernoulliDistribution().proba_distribution", "stable_baselines3.common.distributions.kl_divergence", "torch.tensor", "torch.sum", "torch.allclose", "stable_baselines3.common.distributions.BernoulliDistribution().proba_distribution", "stable_baselines3.common.distributions.CategoricalDistribution().proba_distribution", "stable_baselines3.common.distributions.DiagGaussianDistribution().proba_distribution", "stable_baselines3.common.distributions.MultiCategoricalDistribution().proba_distribution", "stable_baselines3.common.distributions.SquashedDiagGaussianDistribution().proba_distribution", "stable_baselines3.common.distributions.StateDependentNoiseDistribution().proba_distribution", "torch.rand().repeat", "torch.rand().repeat", "isinstance", "isinstance", "torch.rand().repeat", "torch.rand().repeat", "torch.rand().repeat", "torch.rand().repeat", "dist_type.proba_distribution", "copy.deepcopy().proba_distribution", "isinstance", "stable_baselines3.common.distributions.kl_divergence", "torch.tensor", "torch.tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "stable_baselines3.common.distributions.kl_divergence", "copy.deepcopy", "dist_type.proba_distribution", "copy.deepcopy().proba_distribution", "isinstance", "dist1.proba_distribution.log_prob", "dist2.proba_distribution.log_prob", "stable_baselines3.common.distributions.BernoulliDistribution", "stable_baselines3.common.distributions.BernoulliDistribution", "torch.exp", "stable_baselines3.common.distributions.BernoulliDistribution", "stable_baselines3.common.distributions.CategoricalDistribution", "stable_baselines3.common.distributions.DiagGaussianDistribution", "stable_baselines3.common.distributions.MultiCategoricalDistribution", "sum", "stable_baselines3.common.distributions.SquashedDiagGaussianDistribution", "stable_baselines3.common.distributions.StateDependentNoiseDistribution", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "copy.deepcopy", "torch.rand().repeat", "torch.rand().repeat", "dist_type.proba_distribution", "copy.deepcopy().proba_distribution", "isinstance", "dist1.proba_distribution.distribution.log_prob", "dist1.proba_distribution.distribution.log_prob", "dist2.proba_distribution.distribution.log_prob", "copy.deepcopy", "torch.rand().repeat", "torch.rand().repeat", "stable_baselines3.common.distributions.StateDependentNoiseDistribution", "copy.deepcopy", "torch.rand().repeat", "torch.rand().repeat", "torch.rand().repeat", "dist1.proba_distribution.proba_distribution_net", "dist1.proba_distribution.sample_weights", "dist2.proba_distribution.sample_weights", "dist1.proba_distribution.proba_distribution", "dist2.proba_distribution.proba_distribution", "torch.rand", "torch.rand", "copy.deepcopy", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.log", "sum", "sum", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.set_random_seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.Distribution.get_actions", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.kl_divergence", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.kl_divergence", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.kl_divergence", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution_net", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample_weights", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.sample_weights", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.proba_distribution", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.log"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"dist_type\"", ",", "\n", "[", "\n", "BernoulliDistribution", "(", "N_ACTIONS", ")", ".", "proba_distribution", "(", "th", ".", "rand", "(", "N_ACTIONS", ")", ")", ",", "\n", "CategoricalDistribution", "(", "N_ACTIONS", ")", ".", "proba_distribution", "(", "th", ".", "rand", "(", "N_ACTIONS", ")", ")", ",", "\n", "DiagGaussianDistribution", "(", "N_ACTIONS", ")", ".", "proba_distribution", "(", "th", ".", "rand", "(", "N_ACTIONS", ")", ",", "th", ".", "rand", "(", "N_ACTIONS", ")", ")", ",", "\n", "MultiCategoricalDistribution", "(", "[", "N_ACTIONS", ",", "N_ACTIONS", "]", ")", ".", "proba_distribution", "(", "th", ".", "rand", "(", "1", ",", "sum", "(", "[", "N_ACTIONS", ",", "N_ACTIONS", "]", ")", ")", ")", ",", "\n", "SquashedDiagGaussianDistribution", "(", "N_ACTIONS", ")", ".", "proba_distribution", "(", "th", ".", "rand", "(", "N_ACTIONS", ")", ",", "th", ".", "rand", "(", "N_ACTIONS", ")", ")", ",", "\n", "StateDependentNoiseDistribution", "(", "N_ACTIONS", ")", ".", "proba_distribution", "(", "\n", "th", ".", "rand", "(", "N_ACTIONS", ")", ",", "th", ".", "rand", "(", "[", "N_ACTIONS", ",", "N_ACTIONS", "]", ")", ",", "th", ".", "rand", "(", "[", "N_ACTIONS", ",", "N_ACTIONS", "]", ")", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_kl_divergence", "(", "dist_type", ")", ":", "\n", "    ", "set_random_seed", "(", "8", ")", "\n", "# Test 1: same distribution should have KL Div = 0", "\n", "dist1", "=", "dist_type", "\n", "dist2", "=", "dist_type", "\n", "# PyTorch implementation of kl_divergence doesn't sum across dimensions", "\n", "assert", "th", ".", "allclose", "(", "kl_divergence", "(", "dist1", ",", "dist2", ")", ".", "sum", "(", ")", ",", "th", ".", "tensor", "(", "0.0", ")", ")", "\n", "\n", "# Test 2: KL Div = E(Unbiased approx KL Div)", "\n", "if", "isinstance", "(", "dist_type", ",", "CategoricalDistribution", ")", ":", "\n", "        ", "dist1", "=", "dist_type", ".", "proba_distribution", "(", "th", ".", "rand", "(", "N_ACTIONS", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", ")", "\n", "# deepcopy needed to assign new memory to new distribution instance", "\n", "dist2", "=", "deepcopy", "(", "dist_type", ")", ".", "proba_distribution", "(", "th", ".", "rand", "(", "N_ACTIONS", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "dist_type", ",", "DiagGaussianDistribution", ")", "or", "isinstance", "(", "dist_type", ",", "SquashedDiagGaussianDistribution", ")", ":", "\n", "        ", "mean_actions1", "=", "th", ".", "rand", "(", "1", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "log_std1", "=", "th", ".", "rand", "(", "1", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "mean_actions2", "=", "th", ".", "rand", "(", "1", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "log_std2", "=", "th", ".", "rand", "(", "1", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "dist1", "=", "dist_type", ".", "proba_distribution", "(", "mean_actions1", ",", "log_std1", ")", "\n", "dist2", "=", "deepcopy", "(", "dist_type", ")", ".", "proba_distribution", "(", "mean_actions2", ",", "log_std2", ")", "\n", "", "elif", "isinstance", "(", "dist_type", ",", "BernoulliDistribution", ")", ":", "\n", "        ", "dist1", "=", "dist_type", ".", "proba_distribution", "(", "th", ".", "rand", "(", "1", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", ")", "\n", "dist2", "=", "deepcopy", "(", "dist_type", ")", ".", "proba_distribution", "(", "th", ".", "rand", "(", "1", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "dist_type", ",", "MultiCategoricalDistribution", ")", ":", "\n", "        ", "dist1", "=", "dist_type", ".", "proba_distribution", "(", "th", ".", "rand", "(", "1", ",", "sum", "(", "[", "N_ACTIONS", ",", "N_ACTIONS", "]", ")", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", ")", "\n", "dist2", "=", "deepcopy", "(", "dist_type", ")", ".", "proba_distribution", "(", "th", ".", "rand", "(", "1", ",", "sum", "(", "[", "N_ACTIONS", ",", "N_ACTIONS", "]", ")", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "dist_type", ",", "StateDependentNoiseDistribution", ")", ":", "\n", "        ", "dist1", "=", "StateDependentNoiseDistribution", "(", "1", ")", "\n", "dist2", "=", "deepcopy", "(", "dist1", ")", "\n", "state", "=", "th", ".", "rand", "(", "1", ",", "N_FEATURES", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "mean_actions1", "=", "th", ".", "rand", "(", "1", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "mean_actions2", "=", "th", ".", "rand", "(", "1", ")", ".", "repeat", "(", "N_SAMPLES", ",", "1", ")", "\n", "_", ",", "log_std", "=", "dist1", ".", "proba_distribution_net", "(", "N_FEATURES", ",", "log_std_init", "=", "th", ".", "log", "(", "th", ".", "tensor", "(", "0.2", ")", ")", ")", "\n", "dist1", ".", "sample_weights", "(", "log_std", ",", "batch_size", "=", "N_SAMPLES", ")", "\n", "dist2", ".", "sample_weights", "(", "log_std", ",", "batch_size", "=", "N_SAMPLES", ")", "\n", "dist1", "=", "dist1", ".", "proba_distribution", "(", "mean_actions1", ",", "log_std", ",", "state", ")", "\n", "dist2", "=", "dist2", ".", "proba_distribution", "(", "mean_actions2", ",", "log_std", ",", "state", ")", "\n", "\n", "", "full_kl_div", "=", "kl_divergence", "(", "dist1", ",", "dist2", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "actions", "=", "dist1", ".", "get_actions", "(", ")", "\n", "approx_kl_div", "=", "(", "dist1", ".", "log_prob", "(", "actions", ")", "-", "dist2", ".", "log_prob", "(", "actions", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "assert", "th", ".", "allclose", "(", "full_kl_div", ",", "approx_kl_div", ",", "rtol", "=", "5e-2", ")", "\n", "\n", "# Test 3 Sanity test with easy Bernoulli distribution", "\n", "if", "isinstance", "(", "dist_type", ",", "BernoulliDistribution", ")", ":", "\n", "        ", "dist1", "=", "BernoulliDistribution", "(", "1", ")", ".", "proba_distribution", "(", "th", ".", "tensor", "(", "[", "0.3", "]", ")", ")", "\n", "dist2", "=", "BernoulliDistribution", "(", "1", ")", ".", "proba_distribution", "(", "th", ".", "tensor", "(", "[", "0.65", "]", ")", ")", "\n", "\n", "full_kl_div", "=", "kl_divergence", "(", "dist1", ",", "dist2", ")", "\n", "\n", "actions", "=", "th", ".", "tensor", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "ad_hoc_kl", "=", "th", ".", "sum", "(", "\n", "th", ".", "exp", "(", "dist1", ".", "distribution", ".", "log_prob", "(", "actions", ")", ")", "\n", "*", "(", "dist1", ".", "distribution", ".", "log_prob", "(", "actions", ")", "-", "dist2", ".", "distribution", ".", "log_prob", "(", "actions", ")", ")", "\n", ")", "\n", "\n", "assert", "th", ".", "allclose", "(", "full_kl_div", ",", "ad_hoc_kl", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CustomEnv.__init__": [[12, 18], ["gym.Env.__init__", "gym.spaces.Box", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_steps", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "n_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CustomEnv.seed": [[19, 21], ["test_gae.CustomEnv.observation_space.seed"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed"], ["", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "self", ".", "observation_space", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CustomEnv.reset": [[22, 25], ["test_gae.CustomEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_steps", "=", "0", "\n", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CustomEnv.step": [[26, 36], ["test_gae.CustomEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "n_steps", "+=", "1", "\n", "\n", "done", "=", "False", "\n", "reward", "=", "0.0", "\n", "if", "self", ".", "n_steps", ">=", "self", ".", "max_steps", ":", "\n", "            ", "reward", "=", "1.0", "\n", "done", "=", "True", "\n", "\n", "", "return", "self", ".", "observation_space", ".", "sample", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.InfiniteHorizonEnv.__init__": [[39, 45], ["gym.Env.__init__", "gym.spaces.Discrete", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_states", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_states", "=", "n_states", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "n_states", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "current_state", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.InfiniteHorizonEnv.reset": [[46, 49], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_state", "=", "0", "\n", "return", "self", ".", "current_state", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.InfiniteHorizonEnv.step": [[50, 53], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "current_state", "=", "(", "self", ".", "current_state", "+", "1", ")", "%", "self", ".", "n_states", "\n", "return", "self", ".", "current_state", ",", "1.0", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CheckGAECallback.__init__": [[56, 58], ["stable_baselines3.common.callbacks.BaseCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CheckGAECallback._on_rollout_end": [[59, 93], ["buffer.size", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "reversed", "numpy.allclose", "numpy.allclose", "range", "buffer.advantages.flatten", "buffer.returns.flatten"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.size", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "def", "_on_rollout_end", "(", "self", ")", ":", "\n", "        ", "buffer", "=", "self", ".", "model", ".", "rollout_buffer", "\n", "rollout_size", "=", "buffer", ".", "size", "(", ")", "\n", "\n", "max_steps", "=", "self", ".", "training_env", ".", "envs", "[", "0", "]", ".", "max_steps", "\n", "gamma", "=", "self", ".", "model", ".", "gamma", "\n", "gae_lambda", "=", "self", ".", "model", ".", "gae_lambda", "\n", "value", "=", "self", ".", "model", ".", "policy", ".", "constant_value", "\n", "# We know in advance that the agent will get a single", "\n", "# reward at the very last timestep of the episode,", "\n", "# so we can pre-compute the lambda-return and advantage", "\n", "deltas", "=", "np", ".", "zeros", "(", "(", "rollout_size", ",", ")", ")", "\n", "advantages", "=", "np", ".", "zeros", "(", "(", "rollout_size", ",", ")", ")", "\n", "# Reward should be 1.0 on final timestep of episode", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "rollout_size", ",", ")", ")", "\n", "rewards", "[", "max_steps", "-", "1", ":", ":", "max_steps", "]", "=", "1.0", "\n", "# Note that these are episode starts (+1 timestep from done)", "\n", "episode_starts", "=", "np", ".", "zeros", "(", "(", "rollout_size", ",", ")", ")", "\n", "episode_starts", "[", ":", ":", "max_steps", "]", "=", "1.0", "\n", "\n", "# Final step is always terminal (next would episode_start = 1)", "\n", "deltas", "[", "-", "1", "]", "=", "rewards", "[", "-", "1", "]", "-", "value", "\n", "advantages", "[", "-", "1", "]", "=", "deltas", "[", "-", "1", "]", "\n", "for", "n", "in", "reversed", "(", "range", "(", "rollout_size", "-", "1", ")", ")", ":", "\n", "# Values are constants", "\n", "            ", "episode_start_mask", "=", "1.0", "-", "episode_starts", "[", "n", "+", "1", "]", "\n", "deltas", "[", "n", "]", "=", "rewards", "[", "n", "]", "+", "gamma", "*", "value", "*", "episode_start_mask", "-", "value", "\n", "advantages", "[", "n", "]", "=", "deltas", "[", "n", "]", "+", "gamma", "*", "gae_lambda", "*", "advantages", "[", "n", "+", "1", "]", "*", "episode_start_mask", "\n", "\n", "# TD(lambda) estimate, see Github PR #375", "\n", "", "lambda_returns", "=", "advantages", "+", "value", "\n", "\n", "assert", "np", ".", "allclose", "(", "buffer", ".", "advantages", ".", "flatten", "(", ")", ",", "advantages", ")", "\n", "assert", "np", ".", "allclose", "(", "buffer", ".", "returns", ".", "flatten", "(", ")", ",", "lambda_returns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CheckGAECallback._on_step": [[94, 96], ["None"], "methods", ["None"], ["", "def", "_on_step", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CustomPolicy.__init__": [[101, 104], ["stable_baselines3.common.policies.ActorCriticPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "constant_value", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CustomPolicy.forward": [[105, 110], ["super().forward", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.FlattenBatchNormDropoutExtractor.forward"], ["", "def", "forward", "(", "self", ",", "obs", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "actions", ",", "values", ",", "log_prob", "=", "super", "(", ")", ".", "forward", "(", "obs", ",", "deterministic", ")", "\n", "# Overwrite values with ones", "\n", "values", "=", "th", ".", "ones_like", "(", "values", ")", "*", "self", ".", "constant_value", "\n", "return", "actions", ",", "values", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.test_gae_computation": [[112, 132], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "test_gae.CustomEnv", "model_class", "model_class.learn", "model_class.learn", "test_gae.CheckGAECallback", "test_gae.CheckGAECallback"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"gae_lambda\"", ",", "[", "1.0", ",", "0.9", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"gamma\"", ",", "[", "1.0", ",", "0.99", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_episodes\"", ",", "[", "1", ",", "3", "]", ")", "\n", "def", "test_gae_computation", "(", "model_class", ",", "gae_lambda", ",", "gamma", ",", "num_episodes", ")", ":", "\n", "    ", "env", "=", "CustomEnv", "(", "max_steps", "=", "64", ")", "\n", "rollout_size", "=", "64", "*", "num_episodes", "\n", "model", "=", "model_class", "(", "\n", "CustomPolicy", ",", "\n", "env", ",", "\n", "seed", "=", "1", ",", "\n", "gamma", "=", "gamma", ",", "\n", "n_steps", "=", "rollout_size", ",", "\n", "gae_lambda", "=", "gae_lambda", ",", "\n", ")", "\n", "model", ".", "learn", "(", "rollout_size", ",", "callback", "=", "CheckGAECallback", "(", ")", ")", "\n", "\n", "# Change constant value so advantage != returns", "\n", "model", ".", "policy", ".", "constant_value", "=", "1.0", "\n", "model", ".", "learn", "(", "rollout_size", ",", "callback", "=", "CheckGAECallback", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.test_infinite_horizon": [[134, 172], ["pytest.mark.parametrize", "pytest.mark.parametrize", "gym.wrappers.TimeLimit", "model_class", "model_class.learn", "test_gae.InfiniteHorizonEnv", "dict", "dict", "dict", "dict", "model_class.policy.obs_to_tensor", "model_class.policy.predict_values().item", "[].item", "abs", "abs", "dict", "model_class.policy.predict_values", "model_class.critic", "model_class.actor"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.BaseModel.obs_to_tensor", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.predict_values"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "SAC", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"handle_timeout_termination\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_infinite_horizon", "(", "model_class", ",", "handle_timeout_termination", ")", ":", "\n", "    ", "max_steps", "=", "8", "\n", "gamma", "=", "0.98", "\n", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "InfiniteHorizonEnv", "(", "n_states", "=", "4", ")", ",", "max_steps", ")", "\n", "kwargs", "=", "{", "}", "\n", "if", "model_class", "==", "SAC", ":", "\n", "        ", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ",", "n_critics", "=", "1", ")", "\n", "kwargs", "=", "dict", "(", "\n", "replay_buffer_kwargs", "=", "dict", "(", "handle_timeout_termination", "=", "handle_timeout_termination", ")", ",", "\n", "tau", "=", "0.5", ",", "\n", "learning_rate", "=", "0.005", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", "\n", "kwargs", "=", "dict", "(", "learning_rate", "=", "0.002", ")", "\n", "# A2C always handle timeouts", "\n", "if", "not", "handle_timeout_termination", ":", "\n", "            ", "return", "\n", "\n", "", "", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "gamma", "=", "gamma", ",", "seed", "=", "1", ",", "policy_kwargs", "=", "policy_kwargs", ",", "**", "kwargs", ")", "\n", "model", ".", "learn", "(", "1500", ")", "\n", "# Value of the initial state", "\n", "obs_tensor", "=", "model", ".", "policy", ".", "obs_to_tensor", "(", "0", ")", "[", "0", "]", "\n", "if", "model_class", "==", "A2C", ":", "\n", "        ", "value", "=", "model", ".", "policy", ".", "predict_values", "(", "obs_tensor", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "value", "=", "model", ".", "critic", "(", "obs_tensor", ",", "model", ".", "actor", "(", "obs_tensor", ")", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "# True value (geometric series with a reward of one at each step)", "\n", "", "infinite_horizon_value", "=", "1", "/", "(", "1", "-", "gamma", ")", "\n", "\n", "if", "handle_timeout_termination", ":", "\n", "# true value +/- 1", "\n", "        ", "assert", "abs", "(", "infinite_horizon_value", "-", "value", ")", "<", "1.0", "\n", "", "else", ":", "\n", "# wrong estimation", "\n", "        ", "assert", "abs", "(", "infinite_horizon_value", "-", "value", ")", ">", "1.0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.test_env": [[31, 49], ["pytest.mark.parametrize", "gym.make", "warnings.catch_warnings", "stable_baselines3.common.env_checker.check_env", "len", "len"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"CartPole-v0\"", ",", "\"Pendulum-v1\"", "]", ")", "\n", "def", "test_env", "(", "env_id", ")", ":", "\n", "    ", "\"\"\"\n    Check that environmnent integrated in Gym pass the test.\n\n    :param env_id: (str)\n    \"\"\"", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "\n", "# Pendulum-v1 will produce a warning because the action space is", "\n", "# in [-2, 2] and not [-1, 1]", "\n", "", "if", "env_id", "==", "\"Pendulum-v1\"", ":", "\n", "        ", "assert", "len", "(", "record", ")", "==", "1", "\n", "", "else", ":", "\n", "# The other environments must pass without warning", "\n", "        ", "assert", "len", "(", "record", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.test_custom_envs": [[51, 58], ["pytest.mark.parametrize", "env_class", "warnings.catch_warnings", "stable_baselines3.common.env_checker.check_env", "len"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_class\"", ",", "ENV_CLASSES", ")", "\n", "def", "test_custom_envs", "(", "env_class", ")", ":", "\n", "    ", "env", "=", "env_class", "(", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "# No warnings for custom envs", "\n", "", "assert", "len", "(", "record", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.test_bit_flipping": [[60, 77], ["pytest.mark.parametrize", "stable_baselines3.common.envs.BitFlippingEnv", "warnings.catch_warnings", "stable_baselines3.common.env_checker.check_env", "len", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"kwargs\"", ",", "\n", "[", "\n", "dict", "(", "continuous", "=", "True", ")", ",", "\n", "dict", "(", "discrete_obs_space", "=", "True", ")", ",", "\n", "dict", "(", "image_obs_space", "=", "True", ",", "channel_first", "=", "True", ")", ",", "\n", "dict", "(", "image_obs_space", "=", "True", ",", "channel_first", "=", "False", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_bit_flipping", "(", "kwargs", ")", ":", "\n", "# Additional tests for BitFlippingEnv", "\n", "    ", "env", "=", "BitFlippingEnv", "(", "**", "kwargs", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "\n", "# No warnings for custom envs", "\n", "", "assert", "len", "(", "record", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.test_high_dimension_action_space": [[79, 94], ["stable_baselines3.common.envs.FakeImageEnv", "gym.spaces.Box", "stable_baselines3.common.env_checker.check_env", "stable_baselines3.common.envs.FakeImageEnv.observation_space.sample"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "test_high_dimension_action_space", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test for continuous action space\n    with more than one action.\n    \"\"\"", "\n", "env", "=", "FakeImageEnv", "(", ")", "\n", "# Patch the action space", "\n", "env", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "20", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Patch to avoid error", "\n", "def", "patched_step", "(", "_action", ")", ":", "\n", "        ", "return", "env", ".", "observation_space", ".", "sample", "(", ")", ",", "0.0", ",", "False", ",", "{", "}", "\n", "\n", "", "env", ".", "step", "=", "patched_step", "\n", "check_env", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.test_non_default_spaces": [[96, 127], ["pytest.mark.parametrize", "stable_baselines3.common.envs.FakeImageEnv", "pytest.warns", "stable_baselines3.common.env_checker.check_env", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Tuple", "gym.spaces.Dict", "gym.spaces.Dict", "new_obs_space.sample", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Discrete"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"new_obs_space\"", ",", "\n", "[", "\n", "# Small image", "\n", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "32", ",", "32", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "# Range not in [0, 255]", "\n", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "# Wrong dtype", "\n", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Not an image, it should be a 1D vector", "\n", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Tuple space is not supported by SB", "\n", "spaces", ".", "Tuple", "(", "[", "spaces", ".", "Discrete", "(", "5", ")", ",", "spaces", ".", "Discrete", "(", "10", ")", "]", ")", ",", "\n", "# Nested dict space is not supported by SB3", "\n", "spaces", ".", "Dict", "(", "{", "\"position\"", ":", "spaces", ".", "Dict", "(", "{", "\"abs\"", ":", "spaces", ".", "Discrete", "(", "5", ")", ",", "\"rel\"", ":", "spaces", ".", "Discrete", "(", "2", ")", "}", ")", "}", ")", ",", "\n", "# Small image inside a dict", "\n", "spaces", ".", "Dict", "(", "{", "\"img\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "32", ",", "32", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "}", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_non_default_spaces", "(", "new_obs_space", ")", ":", "\n", "    ", "env", "=", "FakeImageEnv", "(", ")", "\n", "env", ".", "observation_space", "=", "new_obs_space", "\n", "# Patch methods to avoid errors", "\n", "env", ".", "reset", "=", "new_obs_space", ".", "sample", "\n", "\n", "def", "patched_step", "(", "_action", ")", ":", "\n", "        ", "return", "new_obs_space", ".", "sample", "(", ")", ",", "0.0", ",", "False", ",", "{", "}", "\n", "\n", "", "env", ".", "step", "=", "patched_step", "\n", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.test_non_default_action_spaces": [[129, 169], ["pytest.mark.parametrize", "stable_baselines3.common.envs.FakeImageEnv", "warnings.catch_warnings", "stable_baselines3.common.env_checker.check_env", "len", "numpy.all", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "numpy.isfinite", "pytest.raises", "pytest.warns", "stable_baselines3.common.env_checker.check_env", "pytest.warns", "stable_baselines3.common.env_checker.check_env", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"new_action_space\"", ",", "\n", "[", "\n", "# Not symmetric", "\n", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Wrong dtype", "\n", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "# Too big range", "\n", "spaces", ".", "Box", "(", "low", "=", "-", "1000", ",", "high", "=", "1000", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Too small range", "\n", "spaces", ".", "Box", "(", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Inverted boundaries", "\n", "spaces", ".", "Box", "(", "low", "=", "1", ",", "high", "=", "-", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Same boundaries", "\n", "spaces", ".", "Box", "(", "low", "=", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Unbounded action space", "\n", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Almost good, except for one dim", "\n", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "0.99", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_non_default_action_spaces", "(", "new_action_space", ")", ":", "\n", "    ", "env", "=", "FakeImageEnv", "(", "discrete", "=", "False", ")", "\n", "# Default, should pass the test", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "\n", "# No warnings for custom envs", "\n", "", "assert", "len", "(", "record", ")", "==", "0", "\n", "# Change the action space", "\n", "env", ".", "action_space", "=", "new_action_space", "\n", "\n", "# Unbounded action space throws an error,", "\n", "# the rest only warning", "\n", "if", "not", "np", ".", "all", "(", "np", ".", "isfinite", "(", "env", ".", "action_space", ".", "low", ")", ")", ":", "\n", "        ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ",", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "            ", "check_env", "(", "env", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "            ", "check_env", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_reset_assert_error": [[171, 185], ["pytest.raises", "stable_baselines3.common.env_checker.check_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env"], ["", "", "", "def", "check_reset_assert_error", "(", "env", ",", "new_reset_return", ")", ":", "\n", "    ", "\"\"\"\n    Helper to check that the error is caught.\n    :param env: (gym.Env)\n    :param new_reset_return: (Any)\n    \"\"\"", "\n", "\n", "def", "wrong_reset", "(", ")", ":", "\n", "        ", "return", "new_reset_return", "\n", "\n", "# Patch the reset method with a wrong one", "\n", "", "env", ".", "reset", "=", "wrong_reset", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.test_common_failures_reset": [[187, 212], ["stable_baselines3.common.envs.IdentityEnvBox", "test_envs.check_reset_assert_error", "test_envs.check_reset_assert_error", "test_envs.check_reset_assert_error", "stable_baselines3.common.envs.SimpleMultiObsEnv", "stable_baselines3.common.envs.SimpleMultiObsEnv.reset", "types.MethodType", "numpy.ones", "pytest.raises", "stable_baselines3.common.env_checker.check_env", "str", "stable_baselines3.common.envs.SimpleMultiObsEnv.observation_space.sample"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_reset_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_reset_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_reset_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "def", "test_common_failures_reset", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test that common failure cases of the `reset_method` are caught\n    \"\"\"", "\n", "env", "=", "IdentityEnvBox", "(", ")", "\n", "# Return an observation that does not match the observation_space", "\n", "check_reset_assert_error", "(", "env", ",", "np", ".", "ones", "(", "(", "3", ",", ")", ")", ")", "\n", "# The observation is not a numpy array", "\n", "check_reset_assert_error", "(", "env", ",", "1", ")", "\n", "\n", "# Return not only the observation", "\n", "check_reset_assert_error", "(", "env", ",", "(", "env", ".", "observation_space", ".", "sample", "(", ")", ",", "False", ")", ")", "\n", "\n", "env", "=", "SimpleMultiObsEnv", "(", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "def", "wrong_reset", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"img\"", ":", "obs", "[", "\"img\"", "]", ",", "\"vec\"", ":", "obs", "[", "\"img\"", "]", "}", "\n", "\n", "", "env", ".", "reset", "=", "types", ".", "MethodType", "(", "wrong_reset", ",", "env", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", "as", "excinfo", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "\n", "# Check that the key is explicitly mentioned", "\n", "", "assert", "\"vec\"", "in", "str", "(", "excinfo", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_step_assert_error": [[214, 228], ["pytest.raises", "stable_baselines3.common.env_checker.check_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env"], ["", "def", "check_step_assert_error", "(", "env", ",", "new_step_return", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\"\n    Helper to check that the error is caught.\n    :param env: (gym.Env)\n    :param new_step_return: (tuple)\n    \"\"\"", "\n", "\n", "def", "wrong_step", "(", "_action", ")", ":", "\n", "        ", "return", "new_step_return", "\n", "\n", "# Patch the step method with a wrong one", "\n", "", "env", ".", "step", "=", "wrong_step", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.test_common_failures_step": [[230, 263], ["stable_baselines3.common.envs.IdentityEnvBox", "test_envs.check_step_assert_error", "test_envs.check_step_assert_error", "test_envs.check_step_assert_error", "test_envs.check_step_assert_error", "test_envs.check_step_assert_error", "test_envs.check_step_assert_error", "stable_baselines3.common.envs.SimpleMultiObsEnv", "stable_baselines3.common.envs.SimpleMultiObsEnv.reset", "types.MethodType", "pytest.raises", "stable_baselines3.common.env_checker.check_env", "str", "numpy.ones", "stable_baselines3.common.envs.SimpleMultiObsEnv.observation_space.sample", "numpy.ones", "stable_baselines3.common.envs.SimpleMultiObsEnv.observation_space.sample", "stable_baselines3.common.envs.SimpleMultiObsEnv.observation_space.sample", "stable_baselines3.common.envs.SimpleMultiObsEnv.observation_space.sample"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_step_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_step_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_step_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_step_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_step_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_envs.check_step_assert_error", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_checker.check_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "def", "test_common_failures_step", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test that common failure cases of the `step` method are caught\n    \"\"\"", "\n", "env", "=", "IdentityEnvBox", "(", ")", "\n", "\n", "# Wrong shape for the observation", "\n", "check_step_assert_error", "(", "env", ",", "(", "np", ".", "ones", "(", "(", "4", ",", ")", ")", ",", "1.0", ",", "False", ",", "{", "}", ")", ")", "\n", "# Obs is not a numpy array", "\n", "check_step_assert_error", "(", "env", ",", "(", "1", ",", "1.0", ",", "False", ",", "{", "}", ")", ")", "\n", "\n", "# Return a wrong reward", "\n", "check_step_assert_error", "(", "env", ",", "(", "env", ".", "observation_space", ".", "sample", "(", ")", ",", "np", ".", "ones", "(", "1", ")", ",", "False", ",", "{", "}", ")", ")", "\n", "\n", "# Info dict is not returned", "\n", "check_step_assert_error", "(", "env", ",", "(", "env", ".", "observation_space", ".", "sample", "(", ")", ",", "0.0", ",", "False", ")", ")", "\n", "\n", "# Done is not a boolean", "\n", "check_step_assert_error", "(", "env", ",", "(", "env", ".", "observation_space", ".", "sample", "(", ")", ",", "0.0", ",", "3.0", ",", "{", "}", ")", ")", "\n", "check_step_assert_error", "(", "env", ",", "(", "env", ".", "observation_space", ".", "sample", "(", ")", ",", "0.0", ",", "1", ",", "{", "}", ")", ")", "\n", "\n", "env", "=", "SimpleMultiObsEnv", "(", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "def", "wrong_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "{", "\"img\"", ":", "obs", "[", "\"vec\"", "]", ",", "\"vec\"", ":", "obs", "[", "\"vec\"", "]", "}", ",", "0.0", ",", "False", ",", "{", "}", "\n", "\n", "", "env", ".", "step", "=", "types", ".", "MethodType", "(", "wrong_step", ",", "env", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", "as", "excinfo", ":", "\n", "        ", "check_env", "(", "env", ")", "\n", "\n", "# Check that the key is explicitly mentioned", "\n", "", "assert", "\"img\"", "in", "str", "(", "excinfo", ".", "value", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.ZeroRewardWrapper.reward": [[175, 177], ["None"], "methods", ["None"], ["    ", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "return", "reward", "*", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.AlwaysDoneWrapper.__init__": [[182, 186], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "last_obs", "=", "None", "\n", "self", ".", "needs_reset", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.AlwaysDoneWrapper.step": [[187, 192], ["test_utils.AlwaysDoneWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "needs_reset", "=", "done", "\n", "self", ".", "last_obs", "=", "obs", "\n", "return", "obs", ",", "reward", ",", "True", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.AlwaysDoneWrapper.reset": [[193, 199], ["test_utils.AlwaysDoneWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "needs_reset", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "self", ".", "last_obs", "=", "obs", "\n", "self", ".", "needs_reset", "=", "False", "\n", "", "return", "self", ".", "last_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_make_vec_env": [[21, 40], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.env_util.make_vec_env", "stable_baselines3.common.env_util.make_vec_env.close", "isinstance", "isinstance", "isinstance", "isinstance", "gym.make"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"CartPole-v1\"", ",", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_envs\"", ",", "[", "1", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_cls\"", ",", "[", "None", ",", "SubprocVecEnv", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"wrapper_class\"", ",", "[", "None", ",", "gym", ".", "wrappers", ".", "TimeLimit", "]", ")", "\n", "def", "test_make_vec_env", "(", "env_id", ",", "n_envs", ",", "vec_env_cls", ",", "wrapper_class", ")", ":", "\n", "    ", "env", "=", "make_vec_env", "(", "env_id", ",", "n_envs", ",", "vec_env_cls", "=", "vec_env_cls", ",", "wrapper_class", "=", "wrapper_class", ",", "monitor_dir", "=", "None", ",", "seed", "=", "0", ")", "\n", "\n", "assert", "env", ".", "num_envs", "==", "n_envs", "\n", "\n", "if", "vec_env_cls", "is", "None", ":", "\n", "        ", "assert", "isinstance", "(", "env", ",", "DummyVecEnv", ")", "\n", "if", "wrapper_class", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "env", ".", "envs", "[", "0", "]", ",", "wrapper_class", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "env", ".", "envs", "[", "0", "]", ",", "Monitor", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "env", ",", "SubprocVecEnv", ")", "\n", "# Kill subprocesses", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_make_atari_env": [[42, 67], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.env_util.make_atari_env", "stable_baselines3.common.env_util.make_atari_env.reset", "stable_baselines3.common.env_util.make_atari_env.step", "isinstance", "dict", "stable_baselines3.common.env_util.make_atari_env.action_space.sample", "isinstance", "numpy.max", "range", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_atari_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"BreakoutNoFrameskip-v4\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_envs\"", ",", "[", "1", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"wrapper_kwargs\"", ",", "[", "None", ",", "dict", "(", "clip_reward", "=", "False", ",", "screen_size", "=", "60", ")", "]", ")", "\n", "def", "test_make_atari_env", "(", "env_id", ",", "n_envs", ",", "wrapper_kwargs", ")", ":", "\n", "    ", "env", "=", "make_atari_env", "(", "env_id", ",", "n_envs", ",", "wrapper_kwargs", "=", "wrapper_kwargs", ",", "monitor_dir", "=", "None", ",", "seed", "=", "0", ")", "\n", "\n", "assert", "env", ".", "num_envs", "==", "n_envs", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "new_obs", ",", "reward", ",", "_", ",", "_", "=", "env", ".", "step", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "n_envs", ")", "]", ")", "\n", "\n", "assert", "obs", ".", "shape", "==", "new_obs", ".", "shape", "\n", "\n", "# Wrapped into DummyVecEnv", "\n", "wrapped_atari_env", "=", "env", ".", "envs", "[", "0", "]", "\n", "if", "wrapper_kwargs", "is", "not", "None", ":", "\n", "        ", "assert", "obs", ".", "shape", "==", "(", "n_envs", ",", "60", ",", "60", ",", "1", ")", "\n", "assert", "wrapped_atari_env", ".", "observation_space", ".", "shape", "==", "(", "60", ",", "60", ",", "1", ")", "\n", "assert", "not", "isinstance", "(", "wrapped_atari_env", ".", "env", ",", "ClipRewardEnv", ")", "\n", "", "else", ":", "\n", "        ", "assert", "obs", ".", "shape", "==", "(", "n_envs", ",", "84", ",", "84", ",", "1", ")", "\n", "assert", "wrapped_atari_env", ".", "observation_space", ".", "shape", "==", "(", "84", ",", "84", ",", "1", ")", "\n", "assert", "isinstance", "(", "wrapped_atari_env", ".", "env", ",", "ClipRewardEnv", ")", "\n", "assert", "np", ".", "max", "(", "np", ".", "abs", "(", "reward", ")", ")", "<", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_vec_env_kwargs": [[69, 72], ["stable_baselines3.common.env_util.make_vec_env", "stable_baselines3.common.env_util.make_vec_env.get_attr"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr"], ["", "", "def", "test_vec_env_kwargs", "(", ")", ":", "\n", "    ", "env", "=", "make_vec_env", "(", "\"MountainCarContinuous-v0\"", ",", "n_envs", "=", "1", ",", "seed", "=", "0", ",", "env_kwargs", "=", "{", "\"goal_velocity\"", ":", "0.11", "}", ")", "\n", "assert", "env", ".", "get_attr", "(", "\"goal_velocity\"", ")", "[", "0", "]", "==", "0.11", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_vec_env_wrapper_kwargs": [[74, 77], ["stable_baselines3.common.env_util.make_vec_env", "stable_baselines3.common.env_util.make_vec_env.get_attr"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr"], ["", "def", "test_vec_env_wrapper_kwargs", "(", ")", ":", "\n", "    ", "env", "=", "make_vec_env", "(", "\"MountainCarContinuous-v0\"", ",", "n_envs", "=", "1", ",", "seed", "=", "0", ",", "wrapper_class", "=", "MaxAndSkipEnv", ",", "wrapper_kwargs", "=", "{", "\"skip\"", ":", "3", "}", ")", "\n", "assert", "env", ".", "get_attr", "(", "\"_skip\"", ")", "[", "0", "]", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_vec_env_monitor_kwargs": [[79, 96], ["stable_baselines3.common.env_util.make_vec_env", "stable_baselines3.common.env_util.make_atari_env", "stable_baselines3.common.env_util.make_vec_env", "stable_baselines3.common.env_util.make_atari_env", "stable_baselines3.common.env_util.make_atari_env.get_attr", "stable_baselines3.common.env_util.make_atari_env.get_attr", "stable_baselines3.common.env_util.make_atari_env.get_attr", "stable_baselines3.common.env_util.make_atari_env.get_attr"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_atari_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_atari_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.get_attr"], ["", "def", "test_vec_env_monitor_kwargs", "(", ")", ":", "\n", "    ", "env", "=", "make_vec_env", "(", "\"MountainCarContinuous-v0\"", ",", "n_envs", "=", "1", ",", "seed", "=", "0", ",", "monitor_kwargs", "=", "{", "\"allow_early_resets\"", ":", "False", "}", ")", "\n", "assert", "env", ".", "get_attr", "(", "\"allow_early_resets\"", ")", "[", "0", "]", "is", "False", "\n", "\n", "env", "=", "make_atari_env", "(", "\"BreakoutNoFrameskip-v4\"", ",", "n_envs", "=", "1", ",", "seed", "=", "0", ",", "monitor_kwargs", "=", "{", "\"allow_early_resets\"", ":", "False", "}", ")", "\n", "assert", "env", ".", "get_attr", "(", "\"allow_early_resets\"", ")", "[", "0", "]", "is", "False", "\n", "\n", "env", "=", "make_vec_env", "(", "\"MountainCarContinuous-v0\"", ",", "n_envs", "=", "1", ",", "seed", "=", "0", ",", "monitor_kwargs", "=", "{", "\"allow_early_resets\"", ":", "True", "}", ")", "\n", "assert", "env", ".", "get_attr", "(", "\"allow_early_resets\"", ")", "[", "0", "]", "is", "True", "\n", "\n", "env", "=", "make_atari_env", "(", "\n", "\"BreakoutNoFrameskip-v4\"", ",", "\n", "n_envs", "=", "1", ",", "\n", "seed", "=", "0", ",", "\n", "monitor_kwargs", "=", "{", "\"allow_early_resets\"", ":", "True", "}", ",", "\n", ")", "\n", "assert", "env", ".", "get_attr", "(", "\"allow_early_resets\"", ")", "[", "0", "]", "is", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_env_auto_monitor_wrap": [[98, 109], ["gym.make", "stable_baselines3.A2C", "stable_baselines3.common.monitor.Monitor", "stable_baselines3.A2C", "stable_baselines3.A2C", "stable_baselines3.A2C.env.env_is_wrapped", "stable_baselines3.A2C.env.env_is_wrapped", "stable_baselines3.A2C.env.env_is_wrapped"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.base_vec_env.VecEnvWrapper.env_is_wrapped"], ["", "def", "test_env_auto_monitor_wrap", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"Pendulum-v1\"", ")", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "env", ")", "\n", "assert", "model", ".", "env", ".", "env_is_wrapped", "(", "Monitor", ")", "[", "0", "]", "is", "True", "\n", "\n", "env", "=", "Monitor", "(", "env", ")", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "env", ")", "\n", "assert", "model", ".", "env", ".", "env_is_wrapped", "(", "Monitor", ")", "[", "0", "]", "is", "True", "\n", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ")", "\n", "assert", "model", ".", "env", ".", "env_is_wrapped", "(", "Monitor", ")", "[", "0", "]", "is", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_custom_vec_env": [[111, 136], ["stable_baselines3.common.env_util.make_vec_env", "isinstance", "os.path.isdir", "stable_baselines3.common.env_util.make_vec_env.close", "shutil.rmtree", "pytest.raises", "stable_baselines3.common.env_util.make_vec_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env"], ["", "def", "test_custom_vec_env", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    Stand alone test for a special case (passing a custom VecEnv class) to avoid doubling the number of tests.\n    \"\"\"", "\n", "monitor_dir", "=", "tmp_path", "/", "\"test_make_vec_env/\"", "\n", "env", "=", "make_vec_env", "(", "\n", "\"CartPole-v1\"", ",", "\n", "n_envs", "=", "1", ",", "\n", "monitor_dir", "=", "monitor_dir", ",", "\n", "seed", "=", "0", ",", "\n", "vec_env_cls", "=", "SubprocVecEnv", ",", "\n", "vec_env_kwargs", "=", "{", "\"start_method\"", ":", "None", "}", ",", "\n", ")", "\n", "\n", "assert", "env", ".", "num_envs", "==", "1", "\n", "assert", "isinstance", "(", "env", ",", "SubprocVecEnv", ")", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "monitor_dir", ")", "\n", "# Kill subprocess", "\n", "env", ".", "close", "(", ")", "\n", "# Cleanup folder", "\n", "shutil", ".", "rmtree", "(", "monitor_dir", ")", "\n", "\n", "# This should fail because DummyVecEnv does not have any keyword argument", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "make_vec_env", "(", "\"CartPole-v1\"", ",", "n_envs", "=", "1", ",", "vec_env_kwargs", "=", "{", "\"dummy\"", ":", "False", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_evaluate_policy": [[138, 172], ["stable_baselines3.A2C", "stable_baselines3.common.evaluation.evaluate_policy", "sum", "stable_baselines3.common.evaluation.evaluate_policy", "gym.make", "stable_baselines3.A2C.get_env", "pytest.raises", "stable_baselines3.common.evaluation.evaluate_policy", "stable_baselines3.A2C.get_env", "len", "pytest.warns", "stable_baselines3.common.evaluation.evaluate_policy", "stable_baselines3.A2C.get_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env"], ["", "", "def", "test_evaluate_policy", "(", ")", ":", "\n", "    ", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "seed", "=", "0", ")", "\n", "n_steps_per_episode", ",", "n_eval_episodes", "=", "200", ",", "2", "\n", "model", ".", "n_callback_calls", "=", "0", "\n", "\n", "def", "dummy_callback", "(", "locals_", ",", "_globals", ")", ":", "\n", "        ", "locals_", "[", "\"model\"", "]", ".", "n_callback_calls", "+=", "1", "\n", "\n", "", "_", ",", "episode_lengths", "=", "evaluate_policy", "(", "\n", "model", ",", "\n", "model", ".", "get_env", "(", ")", ",", "\n", "n_eval_episodes", ",", "\n", "deterministic", "=", "True", ",", "\n", "render", "=", "False", ",", "\n", "callback", "=", "dummy_callback", ",", "\n", "reward_threshold", "=", "None", ",", "\n", "return_episode_rewards", "=", "True", ",", "\n", ")", "\n", "\n", "n_steps", "=", "sum", "(", "episode_lengths", ")", "\n", "assert", "n_steps", "==", "n_steps_per_episode", "*", "n_eval_episodes", "\n", "assert", "n_steps", "==", "model", ".", "n_callback_calls", "\n", "\n", "# Reaching a mean reward of zero is impossible with the Pendulum env", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "evaluate_policy", "(", "model", ",", "model", ".", "get_env", "(", ")", ",", "n_eval_episodes", ",", "reward_threshold", "=", "0.0", ")", "\n", "\n", "", "episode_rewards", ",", "_", "=", "evaluate_policy", "(", "model", ",", "model", ".", "get_env", "(", ")", ",", "n_eval_episodes", ",", "return_episode_rewards", "=", "True", ")", "\n", "assert", "len", "(", "episode_rewards", ")", "==", "n_eval_episodes", "\n", "\n", "# Test that warning is given about no monitor", "\n", "eval_env", "=", "gym", ".", "make", "(", "\"Pendulum-v1\"", ")", "\n", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "_", "=", "evaluate_policy", "(", "model", ",", "eval_env", ",", "n_eval_episodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_evaluate_vector_env": [[201, 222], ["pytest.mark.parametrize", "stable_baselines3.common.env_util.make_vec_env", "stable_baselines3.A2C", "CountCallback", "stable_baselines3.common.evaluation.evaluate_policy"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_envs\"", ",", "[", "1", ",", "2", ",", "5", ",", "7", "]", ")", "\n", "def", "test_evaluate_vector_env", "(", "n_envs", ")", ":", "\n", "# Tests that the number of episodes evaluated is correct", "\n", "    ", "n_eval_episodes", "=", "6", "\n", "\n", "env", "=", "make_vec_env", "(", "\"CartPole-v1\"", ",", "n_envs", ")", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "seed", "=", "0", ")", "\n", "\n", "class", "CountCallback", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "__call__", "(", "self", ",", "locals_", ",", "globals_", ")", ":", "\n", "            ", "if", "locals_", "[", "\"done\"", "]", ":", "\n", "                ", "self", ".", "count", "+=", "1", "\n", "\n", "", "", "", "count_callback", "=", "CountCallback", "(", ")", "\n", "\n", "evaluate_policy", "(", "model", ",", "env", ",", "n_eval_episodes", ",", "callback", "=", "count_callback", ")", "\n", "\n", "assert", "count_callback", ".", "count", "==", "n_eval_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_evaluate_policy_monitors": [[224, 290], ["pytest.mark.parametrize", "numpy.seterr", "stable_baselines3.A2C", "test_utils.test_evaluate_policy_monitors.make_eval_env"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vec_env_class\"", ",", "[", "None", ",", "DummyVecEnv", ",", "SubprocVecEnv", "]", ")", "\n", "def", "test_evaluate_policy_monitors", "(", "vec_env_class", ")", ":", "\n", "# Make numpy warnings throw exception", "\n", "    ", "np", ".", "seterr", "(", "all", "=", "\"raise\"", ")", "\n", "# Test that results are correct with monitor environments.", "\n", "# Also test VecEnvs", "\n", "n_eval_episodes", "=", "3", "\n", "n_envs", "=", "2", "\n", "env_id", "=", "\"CartPole-v0\"", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "env_id", ",", "seed", "=", "0", ")", "\n", "\n", "def", "make_eval_env", "(", "with_monitor", ",", "wrapper_class", "=", "gym", ".", "Wrapper", ")", ":", "\n", "# Make eval environment with or without monitor in root,", "\n", "# and additionally wrapped with another wrapper (after Monitor).", "\n", "        ", "env", "=", "None", "\n", "if", "vec_env_class", "is", "None", ":", "\n", "# No vecenv, traditional env", "\n", "            ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "if", "with_monitor", ":", "\n", "                ", "env", "=", "Monitor", "(", "env", ")", "\n", "", "env", "=", "wrapper_class", "(", "env", ")", "\n", "", "else", ":", "\n", "            ", "if", "with_monitor", ":", "\n", "                ", "env", "=", "vec_env_class", "(", "[", "lambda", ":", "wrapper_class", "(", "Monitor", "(", "gym", ".", "make", "(", "env_id", ")", ")", ")", "]", "*", "n_envs", ")", "\n", "", "else", ":", "\n", "                ", "env", "=", "vec_env_class", "(", "[", "lambda", ":", "wrapper_class", "(", "gym", ".", "make", "(", "env_id", ")", ")", "]", "*", "n_envs", ")", "\n", "", "", "return", "env", "\n", "\n", "# Test that evaluation with VecEnvs works as expected", "\n", "", "eval_env", "=", "make_eval_env", "(", "with_monitor", "=", "True", ")", "\n", "_", "=", "evaluate_policy", "(", "model", ",", "eval_env", ",", "n_eval_episodes", ")", "\n", "eval_env", ".", "close", "(", ")", "\n", "\n", "# Warning without Monitor", "\n", "eval_env", "=", "make_eval_env", "(", "with_monitor", "=", "False", ")", "\n", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "_", "=", "evaluate_policy", "(", "model", ",", "eval_env", ",", "n_eval_episodes", ")", "\n", "", "eval_env", ".", "close", "(", ")", "\n", "\n", "# Test that we gather correct reward with Monitor wrapper", "\n", "# Sanity check that we get zero-reward without Monitor", "\n", "eval_env", "=", "make_eval_env", "(", "with_monitor", "=", "False", ",", "wrapper_class", "=", "ZeroRewardWrapper", ")", "\n", "average_reward", ",", "_", "=", "evaluate_policy", "(", "model", ",", "eval_env", ",", "n_eval_episodes", ",", "warn", "=", "False", ")", "\n", "assert", "average_reward", "==", "0.0", ",", "\"ZeroRewardWrapper wrapper for testing did not work\"", "\n", "eval_env", ".", "close", "(", ")", "\n", "\n", "# Should get non-zero-rewards with Monitor (true reward)", "\n", "eval_env", "=", "make_eval_env", "(", "with_monitor", "=", "True", ",", "wrapper_class", "=", "ZeroRewardWrapper", ")", "\n", "average_reward", ",", "_", "=", "evaluate_policy", "(", "model", ",", "eval_env", ",", "n_eval_episodes", ")", "\n", "assert", "average_reward", ">", "0.0", ",", "\"evaluate_policy did not get reward from Monitor\"", "\n", "eval_env", ".", "close", "(", ")", "\n", "\n", "# Test that we also track correct episode dones, not the wrapped ones.", "\n", "# Sanity check that we get only one step per episode.", "\n", "eval_env", "=", "make_eval_env", "(", "with_monitor", "=", "False", ",", "wrapper_class", "=", "AlwaysDoneWrapper", ")", "\n", "episode_rewards", ",", "episode_lengths", "=", "evaluate_policy", "(", "\n", "model", ",", "eval_env", ",", "n_eval_episodes", ",", "return_episode_rewards", "=", "True", ",", "warn", "=", "False", "\n", ")", "\n", "assert", "all", "(", "map", "(", "lambda", "l", ":", "l", "==", "1", ",", "episode_lengths", ")", ")", ",", "\"AlwaysDoneWrapper did not fix episode lengths to one\"", "\n", "eval_env", ".", "close", "(", ")", "\n", "\n", "# Should get longer episodes with with Monitor (true episodes)", "\n", "eval_env", "=", "make_eval_env", "(", "with_monitor", "=", "True", ",", "wrapper_class", "=", "AlwaysDoneWrapper", ")", "\n", "episode_rewards", ",", "episode_lengths", "=", "evaluate_policy", "(", "model", ",", "eval_env", ",", "n_eval_episodes", ",", "return_episode_rewards", "=", "True", ")", "\n", "assert", "all", "(", "map", "(", "lambda", "l", ":", "l", ">", "1", ",", "episode_lengths", ")", ")", ",", "\"evaluate_policy did not get episode lengths from Monitor\"", "\n", "eval_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_vec_noise": [[292, 323], ["numpy.zeros", "stable_baselines3.common.noise.OrnsteinUhlenbeckActionNoise", "stable_baselines3.common.noise.VectorizedActionNoise", "all", "numpy.ones", "pytest.raises", "stable_baselines3.common.noise.VectorizedActionNoise", "pytest.raises", "stable_baselines3.common.noise.VectorizedActionNoise", "pytest.raises", "stable_baselines3.common.noise.VectorizedActionNoise", "pytest.raises", "stable_baselines3.common.noise.VectorizedActionNoise", "pytest.raises", "stable_baselines3.common.noise.VectorizedActionNoise", "pytest.raises", "pytest.raises", "pytest.raises", "pytest.raises", "len", "stable_baselines3.common.noise.VectorizedActionNoise.", "isinstance", "type", "stable_baselines3.common.noise.VectorizedActionNoise.", "base"], "function", ["None"], ["", "def", "test_vec_noise", "(", ")", ":", "\n", "    ", "num_envs", "=", "4", "\n", "num_actions", "=", "10", "\n", "mu", "=", "np", ".", "zeros", "(", "num_actions", ")", "\n", "sigma", "=", "np", ".", "ones", "(", "num_actions", ")", "*", "0.4", "\n", "base", ":", "ActionNoise", "=", "OrnsteinUhlenbeckActionNoise", "(", "mu", ",", "sigma", ")", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "vec", "=", "VectorizedActionNoise", "(", "base", ",", "-", "1", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "vec", "=", "VectorizedActionNoise", "(", "base", ",", "None", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "vec", "=", "VectorizedActionNoise", "(", "base", ",", "\"whatever\"", ")", "\n", "\n", "", "vec", "=", "VectorizedActionNoise", "(", "base", ",", "num_envs", ")", "\n", "assert", "vec", ".", "n_envs", "==", "num_envs", "\n", "assert", "vec", "(", ")", ".", "shape", "==", "(", "num_envs", ",", "num_actions", ")", "\n", "assert", "not", "(", "vec", "(", ")", "==", "base", "(", ")", ")", ".", "all", "(", ")", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "vec", "=", "VectorizedActionNoise", "(", "None", ",", "num_envs", ")", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "vec", "=", "VectorizedActionNoise", "(", "12", ",", "num_envs", ")", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "vec", ".", "noises", "=", "[", "]", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "vec", ".", "noises", "=", "None", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "vec", ".", "noises", "=", "[", "None", "]", "*", "vec", ".", "n_envs", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "vec", ".", "noises", "=", "[", "base", "]", "*", "(", "num_envs", "-", "1", ")", "\n", "", "assert", "all", "(", "isinstance", "(", "noise", ",", "type", "(", "base", ")", ")", "for", "noise", "in", "vec", ".", "noises", ")", "\n", "assert", "len", "(", "vec", ".", "noises", ")", "==", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_polyak": [[325, 336], ["stable_baselines3.common.utils.polyak_update", "torch.allclose", "torch.allclose", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.no_grad", "zip", "torch.ones", "torch.zeros", "torch.ones", "torch.zeros", "target_param.data.copy_"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.polyak_update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "def", "test_polyak", "(", ")", ":", "\n", "    ", "param1", ",", "param2", "=", "th", ".", "nn", ".", "Parameter", "(", "th", ".", "ones", "(", "(", "5", ",", "5", ")", ")", ")", ",", "th", ".", "nn", ".", "Parameter", "(", "th", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", ")", "\n", "target1", ",", "target2", "=", "th", ".", "nn", ".", "Parameter", "(", "th", ".", "ones", "(", "(", "5", ",", "5", ")", ")", ")", ",", "th", ".", "nn", ".", "Parameter", "(", "th", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", ")", "\n", "tau", "=", "0.1", "\n", "polyak_update", "(", "[", "param1", "]", ",", "[", "param2", "]", ",", "tau", ")", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "param", ",", "target_param", "in", "zip", "(", "[", "target1", "]", ",", "[", "target2", "]", ")", ":", "\n", "            ", "target_param", ".", "data", ".", "copy_", "(", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n", "", "", "assert", "th", ".", "allclose", "(", "param1", ",", "target1", ")", "\n", "assert", "th", ".", "allclose", "(", "param2", ",", "target2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_zip_strict": [[338, 354], ["zip", "stable_baselines3.common.utils.zip_strict", "pytest.raises", "stable_baselines3.common.utils.zip_strict", "len"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.zip_strict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.zip_strict"], ["", "def", "test_zip_strict", "(", ")", ":", "\n", "# Iterables with different lengths", "\n", "    ", "list_a", "=", "[", "0", ",", "1", "]", "\n", "list_b", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "# zip does not raise any error", "\n", "for", "_", ",", "_", "in", "zip", "(", "list_a", ",", "list_b", ")", ":", "\n", "        ", "pass", "\n", "\n", "# zip_strict does raise an error", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "for", "_", ",", "_", "in", "zip_strict", "(", "list_a", ",", "list_b", ")", ":", "\n", "            ", "pass", "\n", "\n", "# same length, should not raise an error", "\n", "", "", "for", "_", ",", "_", "in", "zip_strict", "(", "list_a", ",", "list_b", "[", ":", "len", "(", "list_a", ")", "]", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_is_wrapped": [[356, 367], ["gym.make", "gym.Wrapper", "stable_baselines3.common.monitor.Monitor", "stable_baselines3.common.env_util.is_wrapped", "gym.Wrapper", "stable_baselines3.common.env_util.is_wrapped", "stable_baselines3.common.env_util.is_wrapped", "stable_baselines3.common.env_util.unwrap_wrapper"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.is_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.unwrap_wrapper"], ["", "", "def", "test_is_wrapped", "(", ")", ":", "\n", "    ", "\"\"\"Test that is_wrapped correctly detects wraps\"\"\"", "\n", "env", "=", "gym", ".", "make", "(", "\"Pendulum-v1\"", ")", "\n", "env", "=", "gym", ".", "Wrapper", "(", "env", ")", "\n", "assert", "not", "is_wrapped", "(", "env", ",", "Monitor", ")", "\n", "monitor_env", "=", "Monitor", "(", "env", ")", "\n", "assert", "is_wrapped", "(", "monitor_env", ",", "Monitor", ")", "\n", "env", "=", "gym", ".", "Wrapper", "(", "monitor_env", ")", "\n", "assert", "is_wrapped", "(", "env", ",", "Monitor", ")", "\n", "# Test that unwrap works as expected", "\n", "assert", "unwrap_wrapper", "(", "env", ",", "Monitor", ")", "==", "monitor_env", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_ppo_warnings": [[369, 380], ["pytest.raises", "stable_baselines3.PPO", "pytest.warns", "stable_baselines3.PPO"], "function", ["None"], ["", "def", "test_ppo_warnings", "(", ")", ":", "\n", "    ", "\"\"\"Test that PPO warns and errors correctly on\n    problematic rollour buffer sizes\"\"\"", "\n", "\n", "# Only 1 step: advantage normalization will return NaN", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "PPO", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "n_steps", "=", "1", ")", "\n", "\n", "# Truncated mini-batch", "\n", "", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "PPO", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "n_steps", "=", "6", ",", "batch_size", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_get_system_info": [[382, 390], ["stable_baselines3.common.utils.get_system_info", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_system_info"], ["", "", "def", "test_get_system_info", "(", ")", ":", "\n", "    ", "info", ",", "info_str", "=", "get_system_info", "(", "print_info", "=", "True", ")", "\n", "assert", "info", "[", "\"Stable-Baselines3\"", "]", "==", "str", "(", "sb3", ".", "__version__", ")", "\n", "assert", "\"Python\"", "in", "info_str", "\n", "assert", "\"PyTorch\"", "in", "info_str", "\n", "assert", "\"GPU Enabled\"", "in", "info_str", "\n", "assert", "\"Numpy\"", "in", "info_str", "\n", "assert", "\"Gym\"", "in", "info_str", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_utils.test_is_vectorized_observation": [[392, 466], ["gym.spaces.Box", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "gym.spaces.Discrete", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "gym.spaces.MultiDiscrete", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "gym.spaces.MultiBinary", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "gym.spaces.Dict", "stable_baselines3.common.utils.is_vectorized_observation", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "stable_baselines3.common.utils.is_vectorized_observation", "stable_baselines3.common.utils.is_vectorized_observation", "stable_baselines3.common.utils.is_vectorized_observation", "stable_baselines3.common.utils.is_vectorized_observation", "pytest.raises", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "pytest.raises", "numpy.ones", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "pytest.raises", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "pytest.raises", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "pytest.raises", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation", "pytest.raises", "numpy.ones", "numpy.ones", "stable_baselines3.common.utils.is_vectorized_observation"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.is_vectorized_observation"], ["", "def", "test_is_vectorized_observation", "(", ")", ":", "\n", "# with pytest.raises(\"ValueError\"):", "\n", "#     pass", "\n", "# All vectorized", "\n", "    ", "box_space", "=", "spaces", ".", "Box", "(", "-", "1", ",", "1", ",", "shape", "=", "(", "2", ",", ")", ")", "\n", "box_obs", "=", "np", ".", "ones", "(", "(", "1", ",", ")", "+", "box_space", ".", "shape", ")", "\n", "assert", "is_vectorized_observation", "(", "box_obs", ",", "box_space", ")", "\n", "\n", "discrete_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "discrete_obs", "=", "np", ".", "ones", "(", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "assert", "is_vectorized_observation", "(", "discrete_obs", ",", "discrete_space", ")", "\n", "\n", "multidiscrete_space", "=", "spaces", ".", "MultiDiscrete", "(", "[", "2", ",", "3", "]", ")", "\n", "multidiscrete_obs", "=", "np", ".", "ones", "(", "(", "1", ",", "2", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "assert", "is_vectorized_observation", "(", "multidiscrete_obs", ",", "multidiscrete_space", ")", "\n", "\n", "multibinary_space", "=", "spaces", ".", "MultiBinary", "(", "3", ")", "\n", "multibinary_obs", "=", "np", ".", "ones", "(", "(", "1", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "assert", "is_vectorized_observation", "(", "multibinary_obs", ",", "multibinary_space", ")", "\n", "\n", "dict_space", "=", "spaces", ".", "Dict", "(", "{", "\"box\"", ":", "box_space", ",", "\"discrete\"", ":", "discrete_space", "}", ")", "\n", "dict_obs", "=", "{", "\"box\"", ":", "box_obs", ",", "\"discrete\"", ":", "discrete_obs", "}", "\n", "assert", "is_vectorized_observation", "(", "dict_obs", ",", "dict_space", ")", "\n", "\n", "# All not vectorized", "\n", "box_obs", "=", "np", ".", "ones", "(", "box_space", ".", "shape", ")", "\n", "assert", "not", "is_vectorized_observation", "(", "box_obs", ",", "box_space", ")", "\n", "\n", "discrete_obs", "=", "np", ".", "ones", "(", "(", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "assert", "not", "is_vectorized_observation", "(", "discrete_obs", ",", "discrete_space", ")", "\n", "\n", "multidiscrete_obs", "=", "np", ".", "ones", "(", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "assert", "not", "is_vectorized_observation", "(", "multidiscrete_obs", ",", "multidiscrete_space", ")", "\n", "\n", "multibinary_obs", "=", "np", ".", "ones", "(", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "assert", "not", "is_vectorized_observation", "(", "multibinary_obs", ",", "multibinary_space", ")", "\n", "\n", "dict_obs", "=", "{", "\"box\"", ":", "box_obs", ",", "\"discrete\"", ":", "discrete_obs", "}", "\n", "assert", "not", "is_vectorized_observation", "(", "dict_obs", ",", "dict_space", ")", "\n", "\n", "# A mix of vectorized and non-vectorized things", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "discrete_obs", "=", "np", ".", "ones", "(", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "dict_obs", "=", "{", "\"box\"", ":", "box_obs", ",", "\"discrete\"", ":", "discrete_obs", "}", "\n", "is_vectorized_observation", "(", "dict_obs", ",", "dict_space", ")", "\n", "\n", "# Vectorized with the wrong shape", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "discrete_obs", "=", "np", ".", "ones", "(", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "box_obs", "=", "np", ".", "ones", "(", "(", "1", ",", "2", ")", "+", "box_space", ".", "shape", ")", "\n", "dict_obs", "=", "{", "\"box\"", ":", "box_obs", ",", "\"discrete\"", ":", "discrete_obs", "}", "\n", "is_vectorized_observation", "(", "dict_obs", ",", "dict_space", ")", "\n", "\n", "# Weird shape: error", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "discrete_obs", "=", "np", ".", "ones", "(", "(", "1", ",", ")", "+", "box_space", ".", "shape", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "is_vectorized_observation", "(", "discrete_obs", ",", "discrete_space", ")", "\n", "\n", "# wrong shape", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "multidiscrete_obs", "=", "np", ".", "ones", "(", "(", "2", ",", "1", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "is_vectorized_observation", "(", "multidiscrete_obs", ",", "multidiscrete_space", ")", "\n", "\n", "# wrong shape", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "multibinary_obs", "=", "np", ".", "ones", "(", "(", "2", ",", "1", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "is_vectorized_observation", "(", "multidiscrete_obs", ",", "multibinary_space", ")", "\n", "\n", "# Almost good shape: one dimension too much for Discrete obs", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "box_obs", "=", "np", ".", "ones", "(", "(", "1", ",", ")", "+", "box_space", ".", "shape", ")", "\n", "discrete_obs", "=", "np", ".", "ones", "(", "(", "1", ",", "1", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "dict_obs", "=", "{", "\"box\"", ":", "box_obs", ",", "\"discrete\"", ":", "discrete_obs", "}", "\n", "is_vectorized_observation", "(", "dict_obs", ",", "dict_space", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.__init__": [[18, 62], ["gym.Env.__init__", "gym.spaces.Dict", "gym.spaces.Discrete", "gym.spaces.Box", "gym.spaces.Dict", "gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Box", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "use_discrete_actions", "=", "False", ",", "\n", "channel_last", "=", "False", ",", "\n", "nested_dict_obs", "=", "False", ",", "\n", "vec_only", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "use_discrete_actions", ":", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "N_CHANNELS", "=", "1", "\n", "HEIGHT", "=", "64", "\n", "WIDTH", "=", "64", "\n", "\n", "if", "channel_last", ":", "\n", "            ", "obs_shape", "=", "(", "HEIGHT", ",", "WIDTH", ",", "N_CHANNELS", ")", "\n", "", "else", ":", "\n", "            ", "obs_shape", "=", "(", "N_CHANNELS", ",", "HEIGHT", ",", "WIDTH", ")", "\n", "\n", "", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "# Image obs", "\n", "\"img\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "obs_shape", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "# Vector obs", "\n", "\"vec\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "# Discrete obs", "\n", "\"discrete\"", ":", "spaces", ".", "Discrete", "(", "4", ")", ",", "\n", "}", "\n", ")", "\n", "\n", "# For checking consistency with normal MlpPolicy", "\n", "if", "vec_only", ":", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "# Vector obs", "\n", "\"vec\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", "\n", ")", "\n", "\n", "", "if", "nested_dict_obs", ":", "\n", "# Add dictionary observation inside observation space", "\n", "            ", "self", ".", "observation_space", ".", "spaces", "[", "\"nested-dict\"", "]", "=", "spaces", ".", "Dict", "(", "{", "\"nested-dict-discrete\"", ":", "spaces", ".", "Discrete", "(", "4", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed": [[63, 66], ["test_dict_env.DummyDictEnv.observation_space.seed"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "not", "None", ":", "\n", "            ", "self", ".", "observation_space", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.step": [[67, 71], ["test_dict_env.DummyDictEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "reward", "=", "0.0", "\n", "done", "=", "False", "\n", "return", "self", ".", "observation_space", ".", "sample", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.compute_reward": [[72, 74], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "len", "(", "achieved_goal", ")", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.reset": [[75, 77], ["test_dict_env.DummyDictEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.render": [[78, 80], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"human\"", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.test_policy_hint": [[82, 87], ["pytest.mark.parametrize", "pytest.raises", "stable_baselines3.PPO", "stable_baselines3.common.envs.BitFlippingEnv"], "function", ["None"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"policy\"", ",", "[", "\"MlpPolicy\"", ",", "\"CnnPolicy\"", "]", ")", "\n", "def", "test_policy_hint", "(", "policy", ")", ":", "\n", "# Common mistake: using the wrong policy", "\n", "    ", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "PPO", "(", "policy", ",", "BitFlippingEnv", "(", "n_bits", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.test_goal_env": [[89, 95], ["pytest.mark.parametrize", "stable_baselines3.common.envs.BitFlippingEnv", "model_class().learn", "stable_baselines3.common.evaluation.evaluate_policy", "model_class().learn.get_env", "model_class"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "PPO", ",", "A2C", "]", ")", "\n", "def", "test_goal_env", "(", "model_class", ")", ":", "\n", "    ", "env", "=", "BitFlippingEnv", "(", "n_bits", "=", "4", ")", "\n", "# check that goal env works for PPO/A2C that cannot use HER replay buffer", "\n", "model", "=", "model_class", "(", "\"MultiInputPolicy\"", ",", "env", ",", "n_steps", "=", "64", ")", ".", "learn", "(", "250", ")", "\n", "evaluate_policy", "(", "model", ",", "model", ".", "get_env", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.test_consistency": [[97, 141], ["pytest.mark.parametrize", "test_dict_env.DummyDictEnv", "gym.wrappers.TimeLimit", "gym.wrappers.FlattenObservation", "gym.wrappers.TimeLimit.seed", "gym.wrappers.TimeLimit.reset", "model_class", "model_class.predict", "model_class.learn", "model_class", "model_class.predict", "model_class.learn", "model_class.predict", "model_class.predict", "numpy.allclose", "numpy.allclose", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "PPO", ",", "A2C", ",", "DQN", ",", "DDPG", ",", "SAC", ",", "TD3", "]", ")", "\n", "def", "test_consistency", "(", "model_class", ")", ":", "\n", "    ", "\"\"\"\n    Make sure that dict obs with vector only vs using flatten obs is equivalent.\n    This ensures notable that the network architectures are the same.\n    \"\"\"", "\n", "use_discrete_actions", "=", "model_class", "==", "DQN", "\n", "dict_env", "=", "DummyDictEnv", "(", "use_discrete_actions", "=", "use_discrete_actions", ",", "vec_only", "=", "True", ")", "\n", "dict_env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "dict_env", ",", "100", ")", "\n", "env", "=", "gym", ".", "wrappers", ".", "FlattenObservation", "(", "dict_env", ")", "\n", "dict_env", ".", "seed", "(", "10", ")", "\n", "obs", "=", "dict_env", ".", "reset", "(", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "n_steps", "=", "256", "\n", "\n", "if", "model_class", "in", "{", "A2C", ",", "PPO", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "n_steps", "=", "128", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Avoid memory error when using replay buffer", "\n", "# Reduce the size of the features and make learning faster", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "buffer_size", "=", "250", ",", "\n", "train_freq", "=", "8", ",", "\n", "gradient_steps", "=", "1", ",", "\n", ")", "\n", "if", "model_class", "==", "DQN", ":", "\n", "            ", "kwargs", "[", "\"learning_starts\"", "]", "=", "0", "\n", "\n", "", "", "dict_model", "=", "model_class", "(", "\"MultiInputPolicy\"", ",", "dict_env", ",", "gamma", "=", "0.5", ",", "seed", "=", "1", ",", "**", "kwargs", ")", "\n", "action_before_learning_1", ",", "_", "=", "dict_model", ".", "predict", "(", "obs", ",", "deterministic", "=", "True", ")", "\n", "dict_model", ".", "learn", "(", "total_timesteps", "=", "n_steps", ")", "\n", "\n", "normal_model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "gamma", "=", "0.5", ",", "seed", "=", "1", ",", "**", "kwargs", ")", "\n", "action_before_learning_2", ",", "_", "=", "normal_model", ".", "predict", "(", "obs", "[", "\"vec\"", "]", ",", "deterministic", "=", "True", ")", "\n", "normal_model", ".", "learn", "(", "total_timesteps", "=", "n_steps", ")", "\n", "\n", "action_1", ",", "_", "=", "dict_model", ".", "predict", "(", "obs", ",", "deterministic", "=", "True", ")", "\n", "action_2", ",", "_", "=", "normal_model", ".", "predict", "(", "obs", "[", "\"vec\"", "]", ",", "deterministic", "=", "True", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "action_before_learning_1", ",", "action_before_learning_2", ")", "\n", "assert", "np", ".", "allclose", "(", "action_1", ",", "action_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.test_dict_spaces": [[143, 185], ["pytest.mark.parametrize", "pytest.mark.parametrize", "test_dict_env.DummyDictEnv", "gym.wrappers.TimeLimit", "model_class", "model_class.learn", "stable_baselines3.common.evaluation.evaluate_policy", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "PPO", ",", "A2C", ",", "DQN", ",", "DDPG", ",", "SAC", ",", "TD3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"channel_last\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_dict_spaces", "(", "model_class", ",", "channel_last", ")", ":", "\n", "    ", "\"\"\"\n    Additional tests for PPO/A2C/SAC/DDPG/TD3/DQN to check observation space support\n    with mixed observation.\n    \"\"\"", "\n", "use_discrete_actions", "=", "model_class", "not", "in", "[", "SAC", ",", "TD3", ",", "DDPG", "]", "\n", "env", "=", "DummyDictEnv", "(", "use_discrete_actions", "=", "use_discrete_actions", ",", "channel_last", "=", "channel_last", ")", "\n", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "env", ",", "100", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "n_steps", "=", "256", "\n", "\n", "if", "model_class", "in", "{", "A2C", ",", "PPO", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "n_steps", "=", "128", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "net_arch", "=", "[", "32", "]", ",", "\n", "features_extractor_kwargs", "=", "dict", "(", "cnn_output_dim", "=", "32", ")", ",", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Avoid memory error when using replay buffer", "\n", "# Reduce the size of the features and make learning faster", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "buffer_size", "=", "250", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "net_arch", "=", "[", "32", "]", ",", "\n", "features_extractor_kwargs", "=", "dict", "(", "cnn_output_dim", "=", "32", ")", ",", "\n", ")", ",", "\n", "train_freq", "=", "8", ",", "\n", "gradient_steps", "=", "1", ",", "\n", ")", "\n", "if", "model_class", "==", "DQN", ":", "\n", "            ", "kwargs", "[", "\"learning_starts\"", "]", "=", "0", "\n", "\n", "", "", "model", "=", "model_class", "(", "\"MultiInputPolicy\"", ",", "env", ",", "gamma", "=", "0.5", ",", "seed", "=", "1", ",", "**", "kwargs", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "n_steps", ")", "\n", "\n", "evaluate_policy", "(", "model", ",", "env", ",", "n_eval_episodes", "=", "5", ",", "warn", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.test_multiprocessing": [[187, 222], ["pytest.mark.parametrize", "stable_baselines3.common.env_util.make_vec_env", "model_class", "model_class.learn", "test_dict_env.DummyDictEnv", "gym.wrappers.TimeLimit", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "PPO", ",", "A2C", ",", "SAC", ",", "DQN", "]", ")", "\n", "def", "test_multiprocessing", "(", "model_class", ")", ":", "\n", "    ", "use_discrete_actions", "=", "model_class", "not", "in", "[", "SAC", ",", "TD3", ",", "DDPG", "]", "\n", "\n", "def", "make_env", "(", ")", ":", "\n", "        ", "env", "=", "DummyDictEnv", "(", "use_discrete_actions", "=", "use_discrete_actions", ",", "channel_last", "=", "False", ")", "\n", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "env", ",", "50", ")", "\n", "return", "env", "\n", "\n", "", "env", "=", "make_vec_env", "(", "make_env", ",", "n_envs", "=", "2", ",", "vec_env_cls", "=", "SubprocVecEnv", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "n_steps", "=", "128", "\n", "\n", "if", "model_class", "in", "{", "A2C", ",", "PPO", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "n_steps", "=", "128", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "net_arch", "=", "[", "32", "]", ",", "\n", "features_extractor_kwargs", "=", "dict", "(", "cnn_output_dim", "=", "32", ")", ",", "\n", ")", ",", "\n", ")", "\n", "", "elif", "model_class", "in", "{", "SAC", ",", "TD3", ",", "DQN", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "buffer_size", "=", "1000", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "net_arch", "=", "[", "32", "]", ",", "\n", "features_extractor_kwargs", "=", "dict", "(", "cnn_output_dim", "=", "16", ")", ",", "\n", ")", ",", "\n", "train_freq", "=", "5", ",", "\n", ")", "\n", "\n", "", "model", "=", "model_class", "(", "\"MultiInputPolicy\"", ",", "env", ",", "gamma", "=", "0.5", ",", "seed", "=", "1", ",", "**", "kwargs", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "n_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.test_dict_vec_framestack": [[224, 270], ["pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecFrameStack", "model_class", "model_class.learn", "stable_baselines3.common.evaluation.evaluate_policy", "dict", "dict", "stable_baselines3.common.envs.SimpleMultiObsEnv", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "PPO", ",", "A2C", ",", "DQN", ",", "DDPG", ",", "SAC", ",", "TD3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"channel_last\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_dict_vec_framestack", "(", "model_class", ",", "channel_last", ")", ":", "\n", "    ", "\"\"\"\n    Additional tests for PPO/A2C/SAC/DDPG/TD3/DQN to check observation space support\n    for Dictionary spaces and VecEnvWrapper using MultiInputPolicy.\n    \"\"\"", "\n", "use_discrete_actions", "=", "model_class", "not", "in", "[", "SAC", ",", "TD3", ",", "DDPG", "]", "\n", "channels_order", "=", "{", "\"vec\"", ":", "None", ",", "\"img\"", ":", "\"last\"", "if", "channel_last", "else", "\"first\"", "}", "\n", "env", "=", "DummyVecEnv", "(", "\n", "[", "lambda", ":", "SimpleMultiObsEnv", "(", "random_start", "=", "True", ",", "discrete_actions", "=", "use_discrete_actions", ",", "channel_last", "=", "channel_last", ")", "]", "\n", ")", "\n", "\n", "env", "=", "VecFrameStack", "(", "env", ",", "n_stack", "=", "3", ",", "channels_order", "=", "channels_order", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "n_steps", "=", "256", "\n", "\n", "if", "model_class", "in", "{", "A2C", ",", "PPO", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "n_steps", "=", "128", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "net_arch", "=", "[", "32", "]", ",", "\n", "features_extractor_kwargs", "=", "dict", "(", "cnn_output_dim", "=", "32", ")", ",", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Avoid memory error when using replay buffer", "\n", "# Reduce the size of the features and make learning faster", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "buffer_size", "=", "250", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "net_arch", "=", "[", "32", "]", ",", "\n", "features_extractor_kwargs", "=", "dict", "(", "cnn_output_dim", "=", "32", ")", ",", "\n", ")", ",", "\n", "train_freq", "=", "8", ",", "\n", "gradient_steps", "=", "1", ",", "\n", ")", "\n", "if", "model_class", "==", "DQN", ":", "\n", "            ", "kwargs", "[", "\"learning_starts\"", "]", "=", "0", "\n", "\n", "", "", "model", "=", "model_class", "(", "\"MultiInputPolicy\"", ",", "env", ",", "gamma", "=", "0.5", ",", "seed", "=", "1", ",", "**", "kwargs", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "n_steps", ")", "\n", "\n", "evaluate_policy", "(", "model", ",", "env", ",", "n_eval_episodes", "=", "5", ",", "warn", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.test_vec_normalize": [[272, 310], ["pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "model_class", "model_class.learn", "stable_baselines3.common.evaluation.evaluate_policy", "dict", "dict", "gym.wrappers.TimeLimit", "dict", "dict", "test_dict_env.DummyDictEnv"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "PPO", ",", "A2C", ",", "DQN", ",", "DDPG", ",", "SAC", ",", "TD3", "]", ")", "\n", "def", "test_vec_normalize", "(", "model_class", ")", ":", "\n", "    ", "\"\"\"\n    Additional tests for PPO/A2C/SAC/DDPG/TD3/DQN to check observation space support\n    for GoalEnv and VecNormalize using MultiInputPolicy.\n    \"\"\"", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "wrappers", ".", "TimeLimit", "(", "DummyDictEnv", "(", "use_discrete_actions", "=", "model_class", "==", "DQN", ")", ",", "100", ")", "]", ")", "\n", "env", "=", "VecNormalize", "(", "env", ",", "norm_obs_keys", "=", "[", "\"vec\"", "]", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "n_steps", "=", "256", "\n", "\n", "if", "model_class", "in", "{", "A2C", ",", "PPO", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "n_steps", "=", "128", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "net_arch", "=", "[", "32", "]", ",", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Avoid memory error when using replay buffer", "\n", "# Reduce the size of the features and make learning faster", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "buffer_size", "=", "250", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "net_arch", "=", "[", "32", "]", ",", "\n", ")", ",", "\n", "train_freq", "=", "8", ",", "\n", "gradient_steps", "=", "1", ",", "\n", ")", "\n", "if", "model_class", "==", "DQN", ":", "\n", "            ", "kwargs", "[", "\"learning_starts\"", "]", "=", "0", "\n", "\n", "", "", "model", "=", "model_class", "(", "\"MultiInputPolicy\"", ",", "env", ",", "gamma", "=", "0.5", ",", "seed", "=", "1", ",", "**", "kwargs", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "n_steps", ")", "\n", "\n", "evaluate_policy", "(", "model", ",", "env", ",", "n_eval_episodes", "=", "5", ",", "warn", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.test_dict_nested": [[312, 326], ["test_dict_env.DummyDictEnv", "pytest.raises", "stable_baselines3.PPO", "pytest.raises", "stable_baselines3.common.vec_env.DummyVecEnv", "test_dict_env.DummyDictEnv"], "function", ["None"], ["", "def", "test_dict_nested", "(", ")", ":", "\n", "    ", "\"\"\"\n    Make sure we throw an appropiate error with nested Dict observation spaces\n    \"\"\"", "\n", "# Test without manual wrapping to vec-env", "\n", "env", "=", "DummyDictEnv", "(", "nested_dict_obs", "=", "True", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "NotImplementedError", ")", ":", "\n", "        ", "_", "=", "PPO", "(", "\"MultiInputPolicy\"", ",", "env", ",", "seed", "=", "1", ")", "\n", "\n", "# Test with manual vec-env wrapping", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "NotImplementedError", ")", ":", "\n", "        ", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "DummyDictEnv", "(", "nested_dict_obs", "=", "True", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_deterministic_pg": [[12, 29], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_class", "model_class.learn", "stable_baselines3.common.noise.OrnsteinUhlenbeckActionNoise", "dict", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "TD3", ",", "DDPG", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"action_noise\"", ",", "[", "normal_action_noise", ",", "OrnsteinUhlenbeckActionNoise", "(", "np", ".", "zeros", "(", "1", ")", ",", "0.1", "*", "np", ".", "ones", "(", "1", ")", ")", "]", ")", "\n", "def", "test_deterministic_pg", "(", "model_class", ",", "action_noise", ")", ":", "\n", "    ", "\"\"\"\n    Test for DDPG and variants (TD3).\n    \"\"\"", "\n", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"Pendulum-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", ",", "64", "]", ")", ",", "\n", "learning_starts", "=", "100", ",", "\n", "verbose", "=", "1", ",", "\n", "create_eval_env", "=", "True", ",", "\n", "buffer_size", "=", "250", ",", "\n", "action_noise", "=", "action_noise", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "300", ",", "eval_freq", "=", "250", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_a2c": [[31, 35], ["pytest.mark.parametrize", "stable_baselines3.A2C", "stable_baselines3.A2C.learn", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"CartPole-v1\"", ",", "\"Pendulum-v1\"", "]", ")", "\n", "def", "test_a2c", "(", "env_id", ")", ":", "\n", "    ", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "env_id", ",", "seed", "=", "0", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", "]", ")", ",", "verbose", "=", "1", ",", "create_eval_env", "=", "True", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "1000", ",", "eval_freq", "=", "500", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_advantage_normalization": [[37, 42], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_class", "model_class.learn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"normalize_advantage\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_advantage_normalization", "(", "model_class", ",", "normalize_advantage", ")", ":", "\n", "    ", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "n_steps", "=", "64", ",", "normalize_advantage", "=", "normalize_advantage", ")", "\n", "model", ".", "learn", "(", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_ppo": [[44, 71], ["pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.PPO", "stable_baselines3.PPO.learn", "pytest.raises", "stable_baselines3.PPO", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"CartPole-v1\"", ",", "\"Pendulum-v1\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"clip_range_vf\"", ",", "[", "None", ",", "0.2", ",", "-", "0.2", "]", ")", "\n", "def", "test_ppo", "(", "env_id", ",", "clip_range_vf", ")", ":", "\n", "    ", "if", "clip_range_vf", "is", "not", "None", "and", "clip_range_vf", "<", "0", ":", "\n", "# Should throw an error", "\n", "        ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "            ", "model", "=", "PPO", "(", "\n", "\"MlpPolicy\"", ",", "\n", "env_id", ",", "\n", "seed", "=", "0", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", "]", ")", ",", "\n", "verbose", "=", "1", ",", "\n", "create_eval_env", "=", "True", ",", "\n", "clip_range_vf", "=", "clip_range_vf", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "model", "=", "PPO", "(", "\n", "\"MlpPolicy\"", ",", "\n", "env_id", ",", "\n", "n_steps", "=", "512", ",", "\n", "seed", "=", "0", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", "]", ")", ",", "\n", "verbose", "=", "1", ",", "\n", "create_eval_env", "=", "True", ",", "\n", "clip_range_vf", "=", "clip_range_vf", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "1000", ",", "eval_freq", "=", "500", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_sac": [[73, 87], ["pytest.mark.parametrize", "stable_baselines3.SAC", "stable_baselines3.SAC.learn", "dict", "stable_baselines3.common.noise.NormalActionNoise", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"ent_coef\"", ",", "[", "\"auto\"", ",", "0.01", ",", "\"auto_0.01\"", "]", ")", "\n", "def", "test_sac", "(", "ent_coef", ")", ":", "\n", "    ", "model", "=", "SAC", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"Pendulum-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", ",", "64", "]", ")", ",", "\n", "learning_starts", "=", "100", ",", "\n", "verbose", "=", "1", ",", "\n", "create_eval_env", "=", "True", ",", "\n", "buffer_size", "=", "250", ",", "\n", "ent_coef", "=", "ent_coef", ",", "\n", "action_noise", "=", "NormalActionNoise", "(", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "1", ")", ")", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "300", ",", "eval_freq", "=", "250", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_n_critics": [[89, 101], ["pytest.mark.parametrize", "stable_baselines3.SAC", "stable_baselines3.SAC.learn", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_critics\"", ",", "[", "1", ",", "3", "]", ")", "\n", "def", "test_n_critics", "(", "n_critics", ")", ":", "\n", "# Test SAC with different number of critics, for TD3, n_critics=1 corresponds to DDPG", "\n", "    ", "model", "=", "SAC", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"Pendulum-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", ",", "64", "]", ",", "n_critics", "=", "n_critics", ")", ",", "\n", "learning_starts", "=", "100", ",", "\n", "buffer_size", "=", "10000", ",", "\n", "verbose", "=", "1", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_dqn": [[103, 115], ["stable_baselines3.DQN", "stable_baselines3.DQN.learn", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "test_dqn", "(", ")", ":", "\n", "    ", "model", "=", "DQN", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"CartPole-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", ",", "64", "]", ")", ",", "\n", "learning_starts", "=", "100", ",", "\n", "buffer_size", "=", "500", ",", "\n", "learning_rate", "=", "3e-4", ",", "\n", "verbose", "=", "1", ",", "\n", "create_eval_env", "=", "True", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "500", ",", "eval_freq", "=", "250", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_train_freq": [[117, 136], ["pytest.mark.parametrize", "stable_baselines3.SAC", "SAC.load.learn", "SAC.load.save", "SAC.load.get_env", "stable_baselines3.SAC.load", "SAC.load.learn", "stable_baselines3.SAC.load", "SAC.load.learn", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"train_freq\"", ",", "[", "4", ",", "(", "4", ",", "\"step\"", ")", ",", "(", "1", ",", "\"episode\"", ")", "]", ")", "\n", "def", "test_train_freq", "(", "tmp_path", ",", "train_freq", ")", ":", "\n", "\n", "    ", "model", "=", "SAC", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"Pendulum-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", ",", "64", "]", ",", "n_critics", "=", "1", ")", ",", "\n", "learning_starts", "=", "100", ",", "\n", "buffer_size", "=", "10000", ",", "\n", "verbose", "=", "1", ",", "\n", "train_freq", "=", "train_freq", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ")", "\n", "model", ".", "save", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "env", "=", "model", ".", "get_env", "(", ")", "\n", "model", "=", "SAC", ".", "load", "(", "tmp_path", "/", "\"test_save.zip\"", ",", "env", "=", "env", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ")", "\n", "model", "=", "SAC", ".", "load", "(", "tmp_path", "/", "\"test_save.zip\"", ",", "train_freq", "=", "train_freq", ",", "env", "=", "env", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_train_freq_fail": [[138, 151], ["pytest.mark.parametrize", "pytest.raises", "stable_baselines3.SAC", "stable_baselines3.SAC.learn", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"train_freq\"", ",", "[", "\"4\"", ",", "(", "\"1\"", ",", "\"episode\"", ")", ",", "\"non_sense\"", ",", "(", "1", ",", "\"close\"", ")", "]", ")", "\n", "def", "test_train_freq_fail", "(", "train_freq", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "model", "=", "SAC", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"Pendulum-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", ",", "64", "]", ",", "n_critics", "=", "1", ")", ",", "\n", "learning_starts", "=", "100", ",", "\n", "buffer_size", "=", "10000", ",", "\n", "verbose", "=", "1", ",", "\n", "train_freq", "=", "train_freq", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "250", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_offpolicy_multi_env": [[153, 203], ["pytest.mark.parametrize", "stable_baselines3.common.env_util.make_vec_env", "model_class", "model_class.learn", "model_class", "model_class.learn", "dict", "dict", "dict", "gym.make", "gym.wrappers.TimeLimit", "stable_baselines3.common.noise.NormalActionNoise", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "TD3", ",", "DDPG", ",", "DQN", "]", ")", "\n", "def", "test_offpolicy_multi_env", "(", "model_class", ")", ":", "\n", "    ", "kwargs", "=", "{", "}", "\n", "if", "model_class", "in", "[", "SAC", ",", "TD3", ",", "DDPG", "]", ":", "\n", "        ", "env_id", "=", "\"Pendulum-v1\"", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ",", "n_critics", "=", "1", ")", "\n", "# Check auto-conversion to VectorizedActionNoise", "\n", "kwargs", "=", "dict", "(", "action_noise", "=", "NormalActionNoise", "(", "np", ".", "zeros", "(", "1", ")", ",", "0.1", "*", "np", ".", "ones", "(", "1", ")", ")", ")", "\n", "if", "model_class", "==", "SAC", ":", "\n", "            ", "kwargs", "[", "\"use_sde\"", "]", "=", "True", "\n", "kwargs", "[", "\"sde_sample_freq\"", "]", "=", "4", "\n", "", "", "else", ":", "\n", "        ", "env_id", "=", "\"CartPole-v1\"", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", "\n", "\n", "", "def", "make_env", "(", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "# to check that the code handling timeouts runs", "\n", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "env", ",", "50", ")", "\n", "return", "env", "\n", "\n", "", "env", "=", "make_vec_env", "(", "make_env", ",", "n_envs", "=", "2", ")", "\n", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "\n", "env", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "learning_starts", "=", "100", ",", "\n", "buffer_size", "=", "10000", ",", "\n", "verbose", "=", "0", ",", "\n", "train_freq", "=", "5", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "150", ")", "\n", "\n", "# Check that gradient_steps=-1 works as expected:", "\n", "# perform as many gradient_steps as transitions collected", "\n", "train_freq", "=", "3", "\n", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "\n", "env", ",", "\n", "policy_kwargs", "=", "policy_kwargs", ",", "\n", "learning_starts", "=", "0", ",", "\n", "buffer_size", "=", "10000", ",", "\n", "verbose", "=", "0", ",", "\n", "train_freq", "=", "train_freq", ",", "\n", "gradient_steps", "=", "-", "1", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "train_freq", ")", "\n", "assert", "model", ".", "logger", ".", "name_to_value", "[", "\"train/n_updates\"", "]", "==", "train_freq", "*", "env", ".", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_run.test_warn_dqn_multi_env": [[205, 212], ["pytest.warns", "stable_baselines3.DQN", "stable_baselines3.common.env_util.make_vec_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env"], ["", "def", "test_warn_dqn_multi_env", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "warns", "(", "UserWarning", ",", "match", "=", "\"The number of environments used is greater\"", ")", ":", "\n", "        ", "DQN", "(", "\n", "\"MlpPolicy\"", ",", "\n", "make_vec_env", "(", "\"CartPole-v1\"", ",", "n_envs", "=", "2", ")", ",", "\n", "buffer_size", "=", "100", ",", "\n", "target_update_interval", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.FlattenBatchNormDropoutExtractor.__init__": [[30, 38], ["stable_baselines3.common.torch_layers.BaseFeaturesExtractor.__init__", "torch.Flatten", "torch.Flatten", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "stable_baselines3.common.preprocessing.get_flattened_obs_dim"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.get_flattened_obs_dim"], ["def", "__init__", "(", "self", ",", "observation_space", ":", "gym", ".", "Space", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "observation_space", ",", "\n", "get_flattened_obs_dim", "(", "observation_space", ")", ",", "\n", ")", "\n", "self", ".", "flatten", "=", "nn", ".", "Flatten", "(", ")", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "_features_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.FlattenBatchNormDropoutExtractor.forward": [[39, 44], ["test_train_eval_mode.FlattenBatchNormDropoutExtractor.flatten", "test_train_eval_mode.FlattenBatchNormDropoutExtractor.batch_norm", "test_train_eval_mode.FlattenBatchNormDropoutExtractor.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "observations", ":", "th", ".", "Tensor", ")", "->", "th", ".", "Tensor", ":", "\n", "        ", "result", "=", "self", ".", "flatten", "(", "observations", ")", "\n", "result", "=", "self", ".", "batch_norm", "(", "result", ")", "\n", "result", "=", "self", ".", "dropout", "(", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats": [[46, 54], ["batch_norm.bias.clone", "batch_norm.running_mean.clone"], "function", ["None"], ["", "", "def", "clone_batch_norm_stats", "(", "batch_norm", ":", "nn", ".", "BatchNorm1d", ")", "->", "(", "th", ".", "Tensor", ",", "th", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Clone the bias and running mean from the given batch norm layer.\n\n    :param batch_norm:\n    :return: the bias and running mean\n    \"\"\"", "\n", "return", "batch_norm", ".", "bias", ".", "clone", "(", ")", ",", "batch_norm", ".", "running_mean", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_dqn_batch_norm_stats": [[56, 70], ["test_train_eval_mode.clone_batch_norm_stats", "test_train_eval_mode.clone_batch_norm_stats"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats"], ["", "def", "clone_dqn_batch_norm_stats", "(", "model", ":", "DQN", ")", "->", "(", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Clone the bias and running mean from the Q-network and target network.\n\n    :param model:\n    :return: the bias and running mean from the Q-network and target network\n    \"\"\"", "\n", "q_net_batch_norm", "=", "model", ".", "policy", ".", "q_net", ".", "features_extractor", ".", "batch_norm", "\n", "q_net_bias", ",", "q_net_running_mean", "=", "clone_batch_norm_stats", "(", "q_net_batch_norm", ")", "\n", "\n", "q_net_target_batch_norm", "=", "model", ".", "policy", ".", "q_net_target", ".", "features_extractor", ".", "batch_norm", "\n", "q_net_target_bias", ",", "q_net_target_running_mean", "=", "clone_batch_norm_stats", "(", "q_net_target_batch_norm", ")", "\n", "\n", "return", "q_net_bias", ",", "q_net_running_mean", ",", "q_net_target_bias", ",", "q_net_target_running_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_td3_batch_norm_stats": [[72, 102], ["test_train_eval_mode.clone_batch_norm_stats", "test_train_eval_mode.clone_batch_norm_stats", "test_train_eval_mode.clone_batch_norm_stats", "test_train_eval_mode.clone_batch_norm_stats"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats"], ["", "def", "clone_td3_batch_norm_stats", "(", "\n", "model", ":", "TD3", ",", "\n", ")", "->", "(", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Clone the bias and running mean from the actor and critic networks and actor-target and critic-target networks.\n\n    :param model:\n    :return: the bias and running mean from the actor and critic networks and actor-target and critic-target networks\n    \"\"\"", "\n", "actor_batch_norm", "=", "model", ".", "actor", ".", "features_extractor", ".", "batch_norm", "\n", "actor_bias", ",", "actor_running_mean", "=", "clone_batch_norm_stats", "(", "actor_batch_norm", ")", "\n", "\n", "critic_batch_norm", "=", "model", ".", "critic", ".", "features_extractor", ".", "batch_norm", "\n", "critic_bias", ",", "critic_running_mean", "=", "clone_batch_norm_stats", "(", "critic_batch_norm", ")", "\n", "\n", "actor_target_batch_norm", "=", "model", ".", "actor_target", ".", "features_extractor", ".", "batch_norm", "\n", "actor_target_bias", ",", "actor_target_running_mean", "=", "clone_batch_norm_stats", "(", "actor_target_batch_norm", ")", "\n", "\n", "critic_target_batch_norm", "=", "model", ".", "critic_target", ".", "features_extractor", ".", "batch_norm", "\n", "critic_target_bias", ",", "critic_target_running_mean", "=", "clone_batch_norm_stats", "(", "critic_target_batch_norm", ")", "\n", "\n", "return", "(", "\n", "actor_bias", ",", "\n", "actor_running_mean", ",", "\n", "critic_bias", ",", "\n", "critic_running_mean", ",", "\n", "actor_target_bias", ",", "\n", "actor_target_running_mean", ",", "\n", "critic_target_bias", ",", "\n", "critic_target_running_mean", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_sac_batch_norm_stats": [[105, 124], ["test_train_eval_mode.clone_batch_norm_stats", "test_train_eval_mode.clone_batch_norm_stats", "test_train_eval_mode.clone_batch_norm_stats"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats"], ["", "def", "clone_sac_batch_norm_stats", "(", "\n", "model", ":", "SAC", ",", "\n", ")", "->", "(", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ",", "th", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Clone the bias and running mean from the actor and critic networks and critic-target networks.\n\n    :param model:\n    :return: the bias and running mean from the actor and critic networks and critic-target networks\n    \"\"\"", "\n", "actor_batch_norm", "=", "model", ".", "actor", ".", "features_extractor", ".", "batch_norm", "\n", "actor_bias", ",", "actor_running_mean", "=", "clone_batch_norm_stats", "(", "actor_batch_norm", ")", "\n", "\n", "critic_batch_norm", "=", "model", ".", "critic", ".", "features_extractor", ".", "batch_norm", "\n", "critic_bias", ",", "critic_running_mean", "=", "clone_batch_norm_stats", "(", "critic_batch_norm", ")", "\n", "\n", "critic_target_batch_norm", "=", "model", ".", "critic_target", ".", "features_extractor", ".", "batch_norm", "\n", "critic_target_bias", ",", "critic_target_running_mean", "=", "clone_batch_norm_stats", "(", "critic_target_batch_norm", ")", "\n", "\n", "return", "(", "actor_bias", ",", "actor_running_mean", ",", "critic_bias", ",", "critic_running_mean", ",", "critic_target_bias", ",", "critic_target_running_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_on_policy_batch_norm": [[126, 128], ["test_train_eval_mode.clone_batch_norm_stats"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_batch_norm_stats"], ["", "def", "clone_on_policy_batch_norm", "(", "model", ":", "Union", "[", "A2C", ",", "PPO", "]", ")", "->", "(", "th", ".", "Tensor", ",", "th", ".", "Tensor", ")", ":", "\n", "    ", "return", "clone_batch_norm_stats", "(", "model", ".", "policy", ".", "features_extractor", ".", "batch_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.test_dqn_train_with_batch_norm": [[139, 170], ["stable_baselines3.DQN", "test_train_eval_mode.clone_dqn_batch_norm_stats", "stable_baselines3.DQN.learn", "test_train_eval_mode.clone_dqn_batch_norm_stats", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "dict", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_dqn_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_dqn_batch_norm_stats"], ["def", "test_dqn_train_with_batch_norm", "(", ")", ":", "\n", "    ", "model", "=", "DQN", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"CartPole-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", ",", "16", "]", ",", "features_extractor_class", "=", "FlattenBatchNormDropoutExtractor", ")", ",", "\n", "learning_starts", "=", "0", ",", "\n", "seed", "=", "1", ",", "\n", "tau", "=", "0", ",", "# do not clone the target", "\n", ")", "\n", "\n", "(", "\n", "q_net_bias_before", ",", "\n", "q_net_running_mean_before", ",", "\n", "q_net_target_bias_before", ",", "\n", "q_net_target_running_mean_before", ",", "\n", ")", "=", "clone_dqn_batch_norm_stats", "(", "model", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "200", ")", "\n", "\n", "(", "\n", "q_net_bias_after", ",", "\n", "q_net_running_mean_after", ",", "\n", "q_net_target_bias_after", ",", "\n", "q_net_target_running_mean_after", ",", "\n", ")", "=", "clone_dqn_batch_norm_stats", "(", "model", ")", "\n", "\n", "assert", "~", "th", ".", "isclose", "(", "q_net_bias_before", ",", "q_net_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "~", "th", ".", "isclose", "(", "q_net_running_mean_before", ",", "q_net_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n", "assert", "th", ".", "isclose", "(", "q_net_target_bias_before", ",", "q_net_target_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "th", ".", "isclose", "(", "q_net_target_running_mean_before", ",", "q_net_target_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.test_td3_train_with_batch_norm": [[172, 217], ["stable_baselines3.TD3", "test_train_eval_mode.clone_td3_batch_norm_stats", "stable_baselines3.TD3.learn", "test_train_eval_mode.clone_td3_batch_norm_stats", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "dict", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_td3_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_td3_batch_norm_stats"], ["", "def", "test_td3_train_with_batch_norm", "(", ")", ":", "\n", "    ", "model", "=", "TD3", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"Pendulum-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", ",", "16", "]", ",", "features_extractor_class", "=", "FlattenBatchNormDropoutExtractor", ")", ",", "\n", "learning_starts", "=", "0", ",", "\n", "tau", "=", "0", ",", "# do not copy the target", "\n", "seed", "=", "1", ",", "\n", ")", "\n", "\n", "(", "\n", "actor_bias_before", ",", "\n", "actor_running_mean_before", ",", "\n", "critic_bias_before", ",", "\n", "critic_running_mean_before", ",", "\n", "actor_target_bias_before", ",", "\n", "actor_target_running_mean_before", ",", "\n", "critic_target_bias_before", ",", "\n", "critic_target_running_mean_before", ",", "\n", ")", "=", "clone_td3_batch_norm_stats", "(", "model", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "200", ")", "\n", "\n", "(", "\n", "actor_bias_after", ",", "\n", "actor_running_mean_after", ",", "\n", "critic_bias_after", ",", "\n", "critic_running_mean_after", ",", "\n", "actor_target_bias_after", ",", "\n", "actor_target_running_mean_after", ",", "\n", "critic_target_bias_after", ",", "\n", "critic_target_running_mean_after", ",", "\n", ")", "=", "clone_td3_batch_norm_stats", "(", "model", ")", "\n", "\n", "assert", "~", "th", ".", "isclose", "(", "actor_bias_before", ",", "actor_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "~", "th", ".", "isclose", "(", "actor_running_mean_before", ",", "actor_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n", "assert", "~", "th", ".", "isclose", "(", "critic_bias_before", ",", "critic_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "~", "th", ".", "isclose", "(", "critic_running_mean_before", ",", "critic_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n", "assert", "th", ".", "isclose", "(", "actor_target_bias_before", ",", "actor_target_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "th", ".", "isclose", "(", "actor_target_running_mean_before", ",", "actor_target_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n", "assert", "th", ".", "isclose", "(", "critic_target_bias_before", ",", "critic_target_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "th", ".", "isclose", "(", "critic_target_running_mean_before", ",", "critic_target_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.test_sac_train_with_batch_norm": [[219, 257], ["stable_baselines3.SAC", "test_train_eval_mode.clone_sac_batch_norm_stats", "stable_baselines3.SAC.learn", "test_train_eval_mode.clone_sac_batch_norm_stats", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all", "dict", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_sac_batch_norm_stats", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_sac_batch_norm_stats"], ["", "def", "test_sac_train_with_batch_norm", "(", ")", ":", "\n", "    ", "model", "=", "SAC", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"Pendulum-v1\"", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", ",", "16", "]", ",", "features_extractor_class", "=", "FlattenBatchNormDropoutExtractor", ")", ",", "\n", "learning_starts", "=", "0", ",", "\n", "tau", "=", "0", ",", "# do not copy the target", "\n", "seed", "=", "1", ",", "\n", ")", "\n", "\n", "(", "\n", "actor_bias_before", ",", "\n", "actor_running_mean_before", ",", "\n", "critic_bias_before", ",", "\n", "critic_running_mean_before", ",", "\n", "critic_target_bias_before", ",", "\n", "critic_target_running_mean_before", ",", "\n", ")", "=", "clone_sac_batch_norm_stats", "(", "model", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "200", ")", "\n", "\n", "(", "\n", "actor_bias_after", ",", "\n", "actor_running_mean_after", ",", "\n", "critic_bias_after", ",", "\n", "critic_running_mean_after", ",", "\n", "critic_target_bias_after", ",", "\n", "critic_target_running_mean_after", ",", "\n", ")", "=", "clone_sac_batch_norm_stats", "(", "model", ")", "\n", "\n", "assert", "~", "th", ".", "isclose", "(", "actor_bias_before", ",", "actor_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "~", "th", ".", "isclose", "(", "actor_running_mean_before", ",", "actor_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n", "assert", "~", "th", ".", "isclose", "(", "critic_bias_before", ",", "critic_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "~", "th", ".", "isclose", "(", "critic_running_mean_before", ",", "critic_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n", "assert", "th", ".", "isclose", "(", "critic_target_bias_before", ",", "critic_target_bias_after", ")", ".", "all", "(", ")", "\n", "assert", "th", ".", "isclose", "(", "critic_target_running_mean_before", ",", "critic_target_running_mean_after", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.test_a2c_ppo_train_with_batch_norm": [[259, 277], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_class", "test_train_eval_mode.clone_on_policy_batch_norm", "model_class.learn", "test_train_eval_mode.clone_on_policy_batch_norm", "torch.isclose().all", "torch.isclose().all", "dict", "torch.isclose", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_on_policy_batch_norm", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_on_policy_batch_norm"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"Pendulum-v1\"", ",", "\"CartPole-v1\"", "]", ")", "\n", "def", "test_a2c_ppo_train_with_batch_norm", "(", "model_class", ",", "env_id", ")", ":", "\n", "    ", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "\n", "env_id", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", ",", "16", "]", ",", "features_extractor_class", "=", "FlattenBatchNormDropoutExtractor", ")", ",", "\n", "seed", "=", "1", ",", "\n", ")", "\n", "\n", "bias_before", ",", "running_mean_before", "=", "clone_on_policy_batch_norm", "(", "model", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "200", ")", "\n", "\n", "bias_after", ",", "running_mean_after", "=", "clone_on_policy_batch_norm", "(", "model", ")", "\n", "\n", "assert", "~", "th", ".", "isclose", "(", "bias_before", ",", "bias_after", ")", ".", "all", "(", ")", "\n", "assert", "~", "th", ".", "isclose", "(", "running_mean_before", ",", "running_mean_after", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.test_offpolicy_collect_rollout_batch_norm": [[279, 308], ["pytest.mark.parametrize", "model_class", "clone_helper", "model_class.learn", "clone_helper", "zip", "torch.isclose().all", "dict", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "DQN", ",", "TD3", ",", "SAC", "]", ")", "\n", "def", "test_offpolicy_collect_rollout_batch_norm", "(", "model_class", ")", ":", "\n", "    ", "if", "model_class", "in", "[", "DQN", "]", ":", "\n", "        ", "env_id", "=", "\"CartPole-v1\"", "\n", "", "else", ":", "\n", "        ", "env_id", "=", "\"Pendulum-v1\"", "\n", "\n", "", "clone_helper", "=", "CLONE_HELPERS", "[", "model_class", "]", "\n", "\n", "learning_starts", "=", "10", "\n", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "\n", "env_id", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", ",", "16", "]", ",", "features_extractor_class", "=", "FlattenBatchNormDropoutExtractor", ")", ",", "\n", "learning_starts", "=", "learning_starts", ",", "\n", "seed", "=", "1", ",", "\n", "gradient_steps", "=", "0", ",", "\n", "train_freq", "=", "1", ",", "\n", ")", "\n", "\n", "batch_norm_stats_before", "=", "clone_helper", "(", "model", ")", "\n", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "100", ")", "\n", "\n", "batch_norm_stats_after", "=", "clone_helper", "(", "model", ")", "\n", "\n", "# No change in batch norm params", "\n", "for", "param_before", ",", "param_after", "in", "zip", "(", "batch_norm_stats_before", ",", "batch_norm_stats_after", ")", ":", "\n", "        ", "assert", "th", ".", "isclose", "(", "param_before", ",", "param_after", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.test_a2c_ppo_collect_rollouts_with_batch_norm": [[310, 332], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_class", "test_train_eval_mode.clone_on_policy_batch_norm", "model_class._setup_learn", "range", "test_train_eval_mode.clone_on_policy_batch_norm", "torch.isclose().all", "torch.isclose().all", "model_class.collect_rollouts", "dict", "model_class.get_env", "model_class.get_env", "torch.isclose", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_on_policy_batch_norm", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm._setup_learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.clone_on_policy_batch_norm", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.collect_rollouts", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"Pendulum-v1\"", ",", "\"CartPole-v1\"", "]", ")", "\n", "def", "test_a2c_ppo_collect_rollouts_with_batch_norm", "(", "model_class", ",", "env_id", ")", ":", "\n", "    ", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "\n", "env_id", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", ",", "16", "]", ",", "features_extractor_class", "=", "FlattenBatchNormDropoutExtractor", ")", ",", "\n", "seed", "=", "1", ",", "\n", "n_steps", "=", "64", ",", "\n", ")", "\n", "\n", "bias_before", ",", "running_mean_before", "=", "clone_on_policy_batch_norm", "(", "model", ")", "\n", "\n", "total_timesteps", ",", "callback", "=", "model", ".", "_setup_learn", "(", "total_timesteps", "=", "2", "*", "64", ",", "eval_env", "=", "model", ".", "get_env", "(", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "model", ".", "collect_rollouts", "(", "model", ".", "get_env", "(", ")", ",", "callback", ",", "model", ".", "rollout_buffer", ",", "n_rollout_steps", "=", "model", ".", "n_steps", ")", "\n", "\n", "", "bias_after", ",", "running_mean_after", "=", "clone_on_policy_batch_norm", "(", "model", ")", "\n", "\n", "assert", "th", ".", "isclose", "(", "bias_before", ",", "bias_after", ")", ".", "all", "(", ")", "\n", "assert", "th", ".", "isclose", "(", "running_mean_before", ",", "running_mean_after", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_train_eval_mode.test_predict_with_dropout_batch_norm": [[334, 371], ["pytest.mark.parametrize", "pytest.mark.parametrize", "dict", "dict", "model_class", "clone_helper", "model_class.get_env", "model.get_env.reset", "model_class.predict", "range", "clone_helper", "zip", "model_class.predict", "numpy.testing.assert_allclose", "torch.isclose().all", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "MODEL_LIST", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"env_id\"", ",", "[", "\"Pendulum-v1\"", ",", "\"CartPole-v1\"", "]", ")", "\n", "def", "test_predict_with_dropout_batch_norm", "(", "model_class", ",", "env_id", ")", ":", "\n", "    ", "if", "env_id", "==", "\"CartPole-v1\"", ":", "\n", "        ", "if", "model_class", "in", "[", "SAC", ",", "TD3", "]", ":", "\n", "            ", "return", "\n", "", "", "elif", "model_class", "in", "[", "DQN", "]", ":", "\n", "        ", "return", "\n", "\n", "", "model_kwargs", "=", "dict", "(", "seed", "=", "1", ")", "\n", "clone_helper", "=", "CLONE_HELPERS", "[", "model_class", "]", "\n", "\n", "if", "model_class", "in", "[", "DQN", ",", "TD3", ",", "SAC", "]", ":", "\n", "        ", "model_kwargs", "[", "\"learning_starts\"", "]", "=", "0", "\n", "", "else", ":", "\n", "        ", "model_kwargs", "[", "\"n_steps\"", "]", "=", "64", "\n", "\n", "", "policy_kwargs", "=", "dict", "(", "\n", "features_extractor_class", "=", "FlattenBatchNormDropoutExtractor", ",", "\n", "net_arch", "=", "[", "16", ",", "16", "]", ",", "\n", ")", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env_id", ",", "policy_kwargs", "=", "policy_kwargs", ",", "verbose", "=", "1", ",", "**", "model_kwargs", ")", "\n", "\n", "batch_norm_stats_before", "=", "clone_helper", "(", "model", ")", "\n", "\n", "env", "=", "model", ".", "get_env", "(", ")", "\n", "observation", "=", "env", ".", "reset", "(", ")", "\n", "first_prediction", ",", "_", "=", "model", ".", "predict", "(", "observation", ",", "deterministic", "=", "True", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "        ", "prediction", ",", "_", "=", "model", ".", "predict", "(", "observation", ",", "deterministic", "=", "True", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "first_prediction", ",", "prediction", ")", "\n", "\n", "", "batch_norm_stats_after", "=", "clone_helper", "(", "model", ")", "\n", "\n", "# No change in batch norm params", "\n", "for", "param_before", ",", "param_after", "in", "zip", "(", "batch_norm_stats_before", ",", "batch_norm_stats_after", ")", ":", "\n", "        ", "assert", "th", ".", "isclose", "(", "param_before", ",", "param_after", ")", ".", "all", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_monitor.test_vec_monitor": [[17, 48], ["stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.DummyVecEnv.seed", "os.path.join", "stable_baselines3.common.vec_env.VecMonitor", "stable_baselines3.common.vec_env.VecMonitor.reset", "range", "stable_baselines3.common.vec_env.VecMonitor.close", "os.remove", "str", "stable_baselines3.common.vec_env.VecMonitor.step", "open", "file_handler.readline", "file_handler.readline.startswith", "json.loads", "pandas.read_csv", "set", "set", "gym.make", "uuid.uuid4", "stable_baselines3.common.vec_env.VecMonitor.action_space.sample", "json.loads.keys", "pandas.read_csv.keys"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.read_csv", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["def", "test_vec_monitor", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    Test the `VecMonitor` wrapper\n    \"\"\"", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "]", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "monitor_file", "=", "os", ".", "path", ".", "join", "(", "str", "(", "tmp_path", ")", ",", "f\"stable_baselines-test-{uuid.uuid4()}.monitor.csv\"", ")", "\n", "monitor_env", "=", "VecMonitor", "(", "env", ",", "monitor_file", ")", "\n", "monitor_env", ".", "reset", "(", ")", "\n", "total_steps", "=", "1000", "\n", "ep_len", ",", "ep_reward", "=", "0", ",", "0", "\n", "for", "_", "in", "range", "(", "total_steps", ")", ":", "\n", "        ", "_", ",", "rewards", ",", "dones", ",", "infos", "=", "monitor_env", ".", "step", "(", "[", "monitor_env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "\n", "ep_len", "+=", "1", "\n", "ep_reward", "+=", "rewards", "[", "0", "]", "\n", "if", "dones", "[", "0", "]", ":", "\n", "            ", "assert", "ep_reward", "==", "infos", "[", "0", "]", "[", "\"episode\"", "]", "[", "\"r\"", "]", "\n", "assert", "ep_len", "==", "infos", "[", "0", "]", "[", "\"episode\"", "]", "[", "\"l\"", "]", "\n", "ep_len", ",", "ep_reward", "=", "0", ",", "0", "\n", "\n", "", "", "monitor_env", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "monitor_file", ")", "as", "file_handler", ":", "\n", "        ", "first_line", "=", "file_handler", ".", "readline", "(", ")", "\n", "assert", "first_line", ".", "startswith", "(", "\"#\"", ")", "\n", "metadata", "=", "json", ".", "loads", "(", "first_line", "[", "1", ":", "]", ")", "\n", "assert", "set", "(", "metadata", ".", "keys", "(", ")", ")", "==", "{", "\"t_start\"", ",", "\"env_id\"", "}", ",", "\"Incorrect keys in monitor metadata\"", "\n", "\n", "last_logline", "=", "pandas", ".", "read_csv", "(", "file_handler", ",", "index_col", "=", "None", ")", "\n", "assert", "set", "(", "last_logline", ".", "keys", "(", ")", ")", "==", "{", "\"l\"", ",", "\"t\"", ",", "\"r\"", "}", ",", "\"Incorrect keys in monitor logline\"", "\n", "", "os", ".", "remove", "(", "monitor_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_monitor.test_vec_monitor_info_keywords": [[50, 79], ["os.path.join", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecMonitor", "stable_baselines3.common.vec_env.VecMonitor.reset", "range", "stable_baselines3.common.vec_env.VecMonitor.close", "os.remove", "str", "stable_baselines3.common.vec_env.VecMonitor.step", "open", "csv.reader", "enumerate", "uuid.uuid4", "stable_baselines3.common.envs.bit_flipping_env.BitFlippingEnv", "stable_baselines3.common.vec_env.VecMonitor.action_space.sample", "len"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "test_vec_monitor_info_keywords", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    Test loggig `info_keywords` in the `VecMonitor` wrapper\n    \"\"\"", "\n", "monitor_file", "=", "os", ".", "path", ".", "join", "(", "str", "(", "tmp_path", ")", ",", "f\"stable_baselines-test-{uuid.uuid4()}.monitor.csv\"", ")", "\n", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "BitFlippingEnv", "(", ")", "]", ")", "\n", "\n", "monitor_env", "=", "VecMonitor", "(", "env", ",", "info_keywords", "=", "(", "\"is_success\"", ",", ")", ",", "filename", "=", "monitor_file", ")", "\n", "\n", "monitor_env", ".", "reset", "(", ")", "\n", "total_steps", "=", "1000", "\n", "for", "_", "in", "range", "(", "total_steps", ")", ":", "\n", "        ", "_", ",", "_", ",", "dones", ",", "infos", "=", "monitor_env", ".", "step", "(", "[", "monitor_env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "\n", "if", "dones", "[", "0", "]", ":", "\n", "            ", "assert", "\"is_success\"", "in", "infos", "[", "0", "]", "[", "\"episode\"", "]", "\n", "\n", "", "", "monitor_env", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "monitor_file", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "reader", ")", ":", "\n", "            ", "if", "i", "==", "0", "or", "i", "==", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "line", ")", "==", "4", ",", "\"Incorrect keys in monitor logline\"", "\n", "assert", "line", "[", "3", "]", "in", "[", "\"False\"", ",", "\"True\"", "]", ",", "\"Incorrect value in monitor logline\"", "\n", "\n", "", "", "", "os", ".", "remove", "(", "monitor_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_monitor.test_vec_monitor_load_results": [[81, 129], ["str", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.DummyVecEnv.seed", "os.path.join", "stable_baselines3.common.vec_env.VecMonitor", "stable_baselines3.common.monitor.get_monitor_files", "stable_baselines3.common.vec_env.VecMonitor.reset", "range", "len", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.DummyVecEnv.seed", "os.path.join", "stable_baselines3.common.vec_env.VecMonitor", "stable_baselines3.common.monitor.get_monitor_files", "stable_baselines3.common.vec_env.VecMonitor.reset", "range", "len", "os.remove", "os.remove", "str", "len", "stable_baselines3.common.vec_env.VecMonitor.step", "str", "len", "stable_baselines3.common.vec_env.VecMonitor.step", "stable_baselines3.common.vec_env.VecMonitor.reset", "stable_baselines3.common.monitor.load_results", "stable_baselines3.common.vec_env.VecMonitor.reset", "stable_baselines3.common.monitor.load_results", "gym.make", "uuid.uuid4", "stable_baselines3.common.vec_env.VecMonitor.action_space.sample", "os.path.join", "gym.make", "uuid.uuid4", "stable_baselines3.common.vec_env.VecMonitor.action_space.sample", "os.path.join"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.get_monitor_files", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.get_monitor_files", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.load_results", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.monitor.load_results", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "test_vec_monitor_load_results", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    test load_results on log files produced by the monitor wrapper\n    \"\"\"", "\n", "tmp_path", "=", "str", "(", "tmp_path", ")", "\n", "env1", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "]", ")", "\n", "env1", ".", "seed", "(", "0", ")", "\n", "monitor_file1", "=", "os", ".", "path", ".", "join", "(", "str", "(", "tmp_path", ")", ",", "f\"stable_baselines-test-{uuid.uuid4()}.monitor.csv\"", ")", "\n", "monitor_env1", "=", "VecMonitor", "(", "env1", ",", "monitor_file1", ")", "\n", "\n", "monitor_files", "=", "get_monitor_files", "(", "tmp_path", ")", "\n", "assert", "len", "(", "monitor_files", ")", "==", "1", "\n", "assert", "monitor_file1", "in", "monitor_files", "\n", "\n", "monitor_env1", ".", "reset", "(", ")", "\n", "episode_count1", "=", "0", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "        ", "_", ",", "_", ",", "dones", ",", "_", "=", "monitor_env1", ".", "step", "(", "[", "monitor_env1", ".", "action_space", ".", "sample", "(", ")", "]", ")", "\n", "if", "dones", "[", "0", "]", ":", "\n", "            ", "episode_count1", "+=", "1", "\n", "monitor_env1", ".", "reset", "(", ")", "\n", "\n", "", "", "results_size1", "=", "len", "(", "load_results", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ")", ")", ".", "index", ")", "\n", "assert", "results_size1", "==", "episode_count1", "\n", "\n", "env2", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "]", ")", "\n", "env2", ".", "seed", "(", "0", ")", "\n", "monitor_file2", "=", "os", ".", "path", ".", "join", "(", "str", "(", "tmp_path", ")", ",", "f\"stable_baselines-test-{uuid.uuid4()}.monitor.csv\"", ")", "\n", "monitor_env2", "=", "VecMonitor", "(", "env2", ",", "monitor_file2", ")", "\n", "monitor_files", "=", "get_monitor_files", "(", "tmp_path", ")", "\n", "assert", "len", "(", "monitor_files", ")", "==", "2", "\n", "assert", "monitor_file1", "in", "monitor_files", "\n", "assert", "monitor_file2", "in", "monitor_files", "\n", "\n", "monitor_env2", ".", "reset", "(", ")", "\n", "episode_count2", "=", "0", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "        ", "_", ",", "_", ",", "dones", ",", "_", "=", "monitor_env2", ".", "step", "(", "[", "monitor_env2", ".", "action_space", ".", "sample", "(", ")", "]", ")", "\n", "if", "dones", "[", "0", "]", ":", "\n", "            ", "episode_count2", "+=", "1", "\n", "monitor_env2", ".", "reset", "(", ")", "\n", "\n", "", "", "results_size2", "=", "len", "(", "load_results", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ")", ")", ".", "index", ")", "\n", "\n", "assert", "results_size2", "==", "(", "results_size1", "+", "episode_count2", ")", "\n", "\n", "os", ".", "remove", "(", "monitor_file1", ")", "\n", "os", ".", "remove", "(", "monitor_file2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_monitor.test_vec_monitor_ppo": [[131, 144], ["stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.DummyVecEnv.seed", "stable_baselines3.common.vec_env.VecMonitor", "stable_baselines3.PPO", "stable_baselines3.PPO.learn", "stable_baselines3.common.evaluation.evaluate_policy", "len", "gym.make"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_dict_env.DummyDictEnv.seed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.evaluation.evaluate_policy"], ["", "def", "test_vec_monitor_ppo", "(", "recwarn", ")", ":", "\n", "    ", "\"\"\"\n    Test the `VecMonitor` with PPO\n    \"\"\"", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "]", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "monitor_env", "=", "VecMonitor", "(", "env", ")", "\n", "model", "=", "PPO", "(", "\"MlpPolicy\"", ",", "monitor_env", ",", "verbose", "=", "1", ",", "n_steps", "=", "64", ",", "device", "=", "\"cpu\"", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "250", ")", "\n", "\n", "# No warnings because using `VecMonitor`", "\n", "evaluate_policy", "(", "model", ",", "monitor_env", ")", "\n", "assert", "len", "(", "recwarn", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_monitor.test_vec_monitor_warn": [[146, 154], ["stable_baselines3.common.vec_env.DummyVecEnv", "pytest.warns", "stable_baselines3.common.vec_env.VecMonitor", "pytest.warns", "stable_baselines3.common.vec_env.VecMonitor", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.monitor.Monitor", "gym.make"], "function", ["None"], ["", "def", "test_vec_monitor_warn", "(", ")", ":", "\n", "    ", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "Monitor", "(", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", ")", "]", ")", "\n", "# We should warn the user when the env is already wrapped with a Monitor wrapper", "\n", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "VecMonitor", "(", "env", ")", "\n", "\n", "", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "VecMonitor", "(", "VecNormalize", "(", "env", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.test_cnn": [[16, 58], ["pytest.mark.parametrize", "stable_baselines3.common.envs.FakeImageEnv", "model_class().learn", "stable_baselines3.common.vec_env.is_vecenv_wrapped", "stable_baselines3.common.envs.FakeImageEnv.reset", "range", "model_class.load.predict", "model_class.load.save", "model_class.load", "numpy.allclose", "os.remove", "dict", "dict", "model_class.load.get_env", "model_class.load.predict", "str", "model_class", "model_class.load.predict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.is_vecenv_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", ",", "SAC", ",", "TD3", ",", "DQN", "]", ")", "\n", "def", "test_cnn", "(", "tmp_path", ",", "model_class", ")", ":", "\n", "    ", "SAVE_NAME", "=", "\"cnn_model.zip\"", "\n", "# Fake grayscale with frameskip", "\n", "# Atari after preprocessing: 84x84x1, here we are using lower resolution", "\n", "# to check that the network handle it automatically", "\n", "env", "=", "FakeImageEnv", "(", "screen_height", "=", "40", ",", "screen_width", "=", "40", ",", "n_channels", "=", "1", ",", "discrete", "=", "model_class", "not", "in", "{", "SAC", ",", "TD3", "}", ")", "\n", "if", "model_class", "in", "{", "A2C", ",", "PPO", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "n_steps", "=", "64", ")", "\n", "", "else", ":", "\n", "# Avoid memory error when using replay buffer", "\n", "# Reduce the size of the features", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "buffer_size", "=", "250", ",", "\n", "policy_kwargs", "=", "dict", "(", "features_extractor_kwargs", "=", "dict", "(", "features_dim", "=", "32", ")", ")", ",", "\n", "seed", "=", "1", ",", "\n", ")", "\n", "", "model", "=", "model_class", "(", "\"CnnPolicy\"", ",", "env", ",", "**", "kwargs", ")", ".", "learn", "(", "250", ")", "\n", "\n", "# FakeImageEnv is channel last by default and should be wrapped", "\n", "assert", "is_vecenv_wrapped", "(", "model", ".", "get_env", "(", ")", ",", "VecTransposeImage", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "# Test stochastic predict with channel last input", "\n", "if", "model_class", "==", "DQN", ":", "\n", "        ", "model", ".", "exploration_rate", "=", "0.9", "\n", "\n", "", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "False", ")", "\n", "\n", "", "action", ",", "_", "=", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "True", ")", "\n", "\n", "model", ".", "save", "(", "tmp_path", "/", "SAVE_NAME", ")", "\n", "del", "model", "\n", "\n", "model", "=", "model_class", ".", "load", "(", "tmp_path", "/", "SAVE_NAME", ")", "\n", "\n", "# Check that the prediction is the same", "\n", "assert", "np", ".", "allclose", "(", "action", ",", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "True", ")", "[", "0", "]", ")", "\n", "\n", "os", ".", "remove", "(", "str", "(", "tmp_path", "/", "SAVE_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.test_vec_transpose_skip": [[60, 85], ["pytest.mark.parametrize", "stable_baselines3.common.envs.FakeImageEnv", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecFrameStack", "stable_baselines3.common.vec_env.VecTransposeImage", "numpy.allclose", "dict", "model_class().learn", "stable_baselines3.common.vec_env.VecTransposeImage.reset", "model_class().learn.predict", "stable_baselines3.common.vec_env.VecTransposeImage.reset", "numpy.allclose", "stable_baselines3.common.vec_env.VecTransposeImage.reset", "dict", "model_class", "stable_baselines3.common.vec_env.VecTransposeImage().reset", "dict", "stable_baselines3.common.vec_env.VecTransposeImage"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", "]", ")", "\n", "def", "test_vec_transpose_skip", "(", "tmp_path", ",", "model_class", ")", ":", "\n", "# Fake grayscale with frameskip", "\n", "    ", "env", "=", "FakeImageEnv", "(", "\n", "screen_height", "=", "41", ",", "screen_width", "=", "40", ",", "n_channels", "=", "10", ",", "discrete", "=", "model_class", "not", "in", "{", "SAC", ",", "TD3", "}", ",", "channel_first", "=", "True", "\n", ")", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "# Stack 5 frames so the observation is now (50, 40, 40) but the env is still channel first", "\n", "env", "=", "VecFrameStack", "(", "env", ",", "5", ",", "channels_order", "=", "\"first\"", ")", "\n", "obs_shape_before", "=", "env", ".", "reset", "(", ")", ".", "shape", "\n", "# The observation space should be different as the heuristic thinks it is channel last", "\n", "assert", "not", "np", ".", "allclose", "(", "obs_shape_before", ",", "VecTransposeImage", "(", "env", ")", ".", "reset", "(", ")", ".", "shape", ")", "\n", "env", "=", "VecTransposeImage", "(", "env", ",", "skip", "=", "True", ")", "\n", "# The observation space should be the same as we skip the VecTransposeImage", "\n", "assert", "np", ".", "allclose", "(", "obs_shape_before", ",", "env", ".", "reset", "(", ")", ".", "shape", ")", "\n", "\n", "kwargs", "=", "dict", "(", "\n", "n_steps", "=", "64", ",", "\n", "policy_kwargs", "=", "dict", "(", "features_extractor_kwargs", "=", "dict", "(", "features_dim", "=", "32", ")", ")", ",", "\n", "seed", "=", "1", ",", "\n", ")", "\n", "model", "=", "model_class", "(", "\"CnnPolicy\"", ",", "env", ",", "**", "kwargs", ")", ".", "learn", "(", "250", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "action", ",", "_", "=", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.patch_dqn_names_": [[87, 92], ["isinstance"], "function", ["None"], ["", "def", "patch_dqn_names_", "(", "model", ")", ":", "\n", "# Small hack to make the test work with DQN", "\n", "    ", "if", "isinstance", "(", "model", ",", "DQN", ")", ":", "\n", "        ", "model", ".", "critic", "=", "model", ".", "q_net", "\n", "model", ".", "critic_target", "=", "model", ".", "q_net_target", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_match": [[94, 97], ["stable_baselines3.common.utils.zip_strict", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.zip_strict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "", "def", "params_should_match", "(", "params", ",", "other_params", ")", ":", "\n", "    ", "for", "param", ",", "other_param", "in", "zip_strict", "(", "params", ",", "other_params", ")", ":", "\n", "        ", "assert", "th", ".", "allclose", "(", "param", ",", "other_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_differ": [[99, 102], ["stable_baselines3.common.utils.zip_strict", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.zip_strict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "", "def", "params_should_differ", "(", "params", ",", "other_params", ")", ":", "\n", "    ", "for", "param", ",", "other_param", "in", "zip_strict", "(", "params", ",", "other_params", ")", ":", "\n", "        ", "assert", "not", "th", ".", "allclose", "(", "param", ",", "other_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.check_td3_feature_extractor_match": [[104, 108], ["zip", "model.actor_target.named_parameters", "model.critic_target.parameters", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "", "def", "check_td3_feature_extractor_match", "(", "model", ")", ":", "\n", "    ", "for", "(", "key", ",", "actor_param", ")", ",", "critic_param", "in", "zip", "(", "model", ".", "actor_target", ".", "named_parameters", "(", ")", ",", "model", ".", "critic_target", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "\"features_extractor\"", "in", "key", ":", "\n", "            ", "assert", "th", ".", "allclose", "(", "actor_param", ",", "critic_param", ")", ",", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.check_td3_feature_extractor_differ": [[110, 114], ["zip", "model.actor_target.named_parameters", "model.critic_target.parameters", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "", "", "def", "check_td3_feature_extractor_differ", "(", "model", ")", ":", "\n", "    ", "for", "(", "key", ",", "actor_param", ")", ",", "critic_param", "in", "zip", "(", "model", ".", "actor_target", ".", "named_parameters", "(", ")", ",", "model", ".", "critic_target", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "\"features_extractor\"", "in", "key", ":", "\n", "            ", "assert", "not", "th", ".", "allclose", "(", "actor_param", ",", "critic_param", ")", ",", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.test_features_extractor_target_net": [[116, 225], ["pytest.mark.parametrize", "pytest.mark.parametrize", "stable_baselines3.common.envs.FakeImageEnv", "dict", "model_class", "test_cnn.patch_dqn_names_", "test_cnn.params_should_match", "model_class().learn.learn", "test_cnn.params_should_differ", "model_class().learn", "test_cnn.patch_dqn_names_", "copy.deepcopy", "copy.deepcopy", "model_class().learn.train", "test_cnn.params_should_match", "test_cnn.params_should_differ", "copy.deepcopy", "model_class().learn.train", "test_cnn.params_should_differ", "test_cnn.params_should_match", "pytest.skip", "model_class().learn.critic.parameters", "model_class().learn.critic_target.parameters", "test_cnn.params_should_match", "model_class().learn.critic.parameters", "model_class().learn.critic_target.parameters", "test_cnn.params_should_differ", "td3_features_extractor_check", "list", "list", "copy.deepcopy", "model_class().learn.critic_target.parameters", "test_cnn.params_should_match", "td3_features_extractor_check", "model_class().learn.critic.parameters", "list", "copy.deepcopy", "model_class().learn._on_step", "model_class().learn.critic_target.parameters", "model_class().learn.critic.parameters", "test_cnn.params_should_differ", "test_cnn.params_should_match", "td3_features_extractor_check", "dict", "id", "id", "model_class().learn.actor.parameters", "model_class().learn.actor_target.parameters", "model_class().learn.actor.parameters", "model_class().learn.actor_target.parameters", "model_class", "model_class().learn.critic.parameters", "model_class().learn.critic_target.parameters", "list", "model_class().learn.actor_target.parameters", "model_class().learn.critic.parameters", "list", "model_class().learn.actor_target.parameters", "model_class().learn.actor.parameters", "id", "id", "id", "id", "id", "id", "model_class().learn.actor_target.parameters", "model_class().learn.actor.parameters", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.patch_dqn_names_", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_match", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_differ", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.patch_dqn_names_", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.train", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_match", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_differ", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.train", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_differ", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_match", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_match", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_differ", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_match", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_gae.CheckGAECallback._on_step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_differ", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.params_should_match"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "TD3", ",", "DQN", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"share_features_extractor\"", ",", "[", "True", ",", "False", "]", ")", "\n", "def", "test_features_extractor_target_net", "(", "model_class", ",", "share_features_extractor", ")", ":", "\n", "    ", "if", "model_class", "==", "DQN", "and", "share_features_extractor", ":", "\n", "        ", "pytest", ".", "skip", "(", ")", "\n", "\n", "", "env", "=", "FakeImageEnv", "(", "screen_height", "=", "40", ",", "screen_width", "=", "40", ",", "n_channels", "=", "1", ",", "discrete", "=", "model_class", "not", "in", "{", "SAC", ",", "TD3", "}", ")", "\n", "# Avoid memory error when using replay buffer", "\n", "# Reduce the size of the features", "\n", "kwargs", "=", "dict", "(", "buffer_size", "=", "250", ",", "learning_starts", "=", "100", ",", "policy_kwargs", "=", "dict", "(", "features_extractor_kwargs", "=", "dict", "(", "features_dim", "=", "32", ")", ")", ")", "\n", "if", "model_class", "!=", "DQN", ":", "\n", "        ", "kwargs", "[", "\"policy_kwargs\"", "]", "[", "\"share_features_extractor\"", "]", "=", "share_features_extractor", "\n", "\n", "# No delay for TD3 (changes when the actor and polyak update take place)", "\n", "", "if", "model_class", "==", "TD3", ":", "\n", "        ", "kwargs", "[", "\"policy_delay\"", "]", "=", "1", "\n", "\n", "", "model", "=", "model_class", "(", "\"CnnPolicy\"", ",", "env", ",", "seed", "=", "0", ",", "**", "kwargs", ")", "\n", "\n", "patch_dqn_names_", "(", "model", ")", "\n", "\n", "if", "share_features_extractor", ":", "\n", "# Check that the objects are the same and not just copied", "\n", "        ", "assert", "id", "(", "model", ".", "policy", ".", "actor", ".", "features_extractor", ")", "==", "id", "(", "model", ".", "policy", ".", "critic", ".", "features_extractor", ")", "\n", "if", "model_class", "==", "TD3", ":", "\n", "            ", "assert", "id", "(", "model", ".", "policy", ".", "actor_target", ".", "features_extractor", ")", "==", "id", "(", "model", ".", "policy", ".", "critic_target", ".", "features_extractor", ")", "\n", "# Actor and critic feature extractor should be the same", "\n", "", "td3_features_extractor_check", "=", "check_td3_feature_extractor_match", "\n", "", "else", ":", "\n", "# Actor and critic feature extractor should differ same", "\n", "        ", "td3_features_extractor_check", "=", "check_td3_feature_extractor_differ", "\n", "# Check that the object differ", "\n", "if", "model_class", "!=", "DQN", ":", "\n", "            ", "assert", "id", "(", "model", ".", "policy", ".", "actor", ".", "features_extractor", ")", "!=", "id", "(", "model", ".", "policy", ".", "critic", ".", "features_extractor", ")", "\n", "\n", "", "if", "model_class", "==", "TD3", ":", "\n", "            ", "assert", "id", "(", "model", ".", "policy", ".", "actor_target", ".", "features_extractor", ")", "!=", "id", "(", "model", ".", "policy", ".", "critic_target", ".", "features_extractor", ")", "\n", "\n", "# Critic and target should be equal at the begginning of training", "\n", "", "", "params_should_match", "(", "model", ".", "critic", ".", "parameters", "(", ")", ",", "model", ".", "critic_target", ".", "parameters", "(", ")", ")", "\n", "\n", "# TD3 has also a target actor net", "\n", "if", "model_class", "==", "TD3", ":", "\n", "        ", "params_should_match", "(", "model", ".", "actor", ".", "parameters", "(", ")", ",", "model", ".", "actor_target", ".", "parameters", "(", ")", ")", "\n", "\n", "", "model", ".", "learn", "(", "200", ")", "\n", "\n", "# Critic and target should differ", "\n", "params_should_differ", "(", "model", ".", "critic", ".", "parameters", "(", ")", ",", "model", ".", "critic_target", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "model_class", "==", "TD3", ":", "\n", "        ", "params_should_differ", "(", "model", ".", "actor", ".", "parameters", "(", ")", ",", "model", ".", "actor_target", ".", "parameters", "(", ")", ")", "\n", "td3_features_extractor_check", "(", "model", ")", "\n", "\n", "# Re-initialize and collect some random data (without doing gradient steps,", "\n", "# since 10 < learning_starts = 100)", "\n", "", "model", "=", "model_class", "(", "\"CnnPolicy\"", ",", "env", ",", "seed", "=", "0", ",", "**", "kwargs", ")", ".", "learn", "(", "10", ")", "\n", "\n", "patch_dqn_names_", "(", "model", ")", "\n", "\n", "original_param", "=", "deepcopy", "(", "list", "(", "model", ".", "critic", ".", "parameters", "(", ")", ")", ")", "\n", "original_target_param", "=", "deepcopy", "(", "list", "(", "model", ".", "critic_target", ".", "parameters", "(", ")", ")", ")", "\n", "if", "model_class", "==", "TD3", ":", "\n", "        ", "original_actor_target_param", "=", "deepcopy", "(", "list", "(", "model", ".", "actor_target", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# Deactivate copy to target", "\n", "", "model", ".", "tau", "=", "0.0", "\n", "model", ".", "train", "(", "gradient_steps", "=", "1", ")", "\n", "\n", "# Target should be the same", "\n", "params_should_match", "(", "original_target_param", ",", "model", ".", "critic_target", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "model_class", "==", "TD3", ":", "\n", "        ", "params_should_match", "(", "original_actor_target_param", ",", "model", ".", "actor_target", ".", "parameters", "(", ")", ")", "\n", "td3_features_extractor_check", "(", "model", ")", "\n", "\n", "# not the same for critic net (updated by gradient descent)", "\n", "", "params_should_differ", "(", "original_param", ",", "model", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "\n", "# Update the reference as it should not change in the next step", "\n", "original_param", "=", "deepcopy", "(", "list", "(", "model", ".", "critic", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "if", "model_class", "==", "TD3", ":", "\n", "        ", "original_actor_param", "=", "deepcopy", "(", "list", "(", "model", ".", "actor", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# Deactivate learning rate", "\n", "", "model", ".", "lr_schedule", "=", "lambda", "_", ":", "0.0", "\n", "# Re-activate polyak update", "\n", "model", ".", "tau", "=", "0.01", "\n", "# Special case for DQN: target net is updated in the `collect_rollouts()`", "\n", "# not the `train()` method", "\n", "if", "model_class", "==", "DQN", ":", "\n", "        ", "model", ".", "target_update_interval", "=", "1", "\n", "model", ".", "_on_step", "(", ")", "\n", "\n", "", "model", ".", "train", "(", "gradient_steps", "=", "1", ")", "\n", "\n", "# Target should have changed now (due to polyak update)", "\n", "params_should_differ", "(", "original_target_param", ",", "model", ".", "critic_target", ".", "parameters", "(", ")", ")", "\n", "\n", "# Critic should be the same", "\n", "params_should_match", "(", "original_param", ",", "model", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "model_class", "==", "TD3", ":", "\n", "        ", "params_should_differ", "(", "original_actor_target_param", ",", "model", ".", "actor_target", ".", "parameters", "(", ")", ")", "\n", "\n", "params_should_match", "(", "original_actor_param", ",", "model", ".", "actor", ".", "parameters", "(", ")", ")", "\n", "\n", "td3_features_extractor_check", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.test_channel_first_env": [[227, 254], ["stable_baselines3.common.envs.FakeImageEnv", "stable_baselines3.A2C().learn", "stable_baselines3.common.envs.FakeImageEnv.reset", "A2C.load.predict", "A2C.load.save", "stable_baselines3.A2C.load", "numpy.allclose", "os.remove", "stable_baselines3.common.vec_env.is_vecenv_wrapped", "str", "stable_baselines3.A2C", "A2C.load.get_env", "A2C.load.predict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.__init__.is_vecenv_wrapped", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict"], ["", "", "def", "test_channel_first_env", "(", "tmp_path", ")", ":", "\n", "# test_cnn uses environment with HxWxC setup that is transposed, but we", "\n", "# also want to work with CxHxW envs directly without transposing wrapper.", "\n", "    ", "SAVE_NAME", "=", "\"cnn_model.zip\"", "\n", "\n", "# Create environment with transposed images (CxHxW).", "\n", "# If underlying CNN processes the data in wrong format,", "\n", "# it will raise an error of negative dimension sizes while creating convolutions", "\n", "env", "=", "FakeImageEnv", "(", "screen_height", "=", "40", ",", "screen_width", "=", "40", ",", "n_channels", "=", "1", ",", "discrete", "=", "True", ",", "channel_first", "=", "True", ")", "\n", "\n", "model", "=", "A2C", "(", "\"CnnPolicy\"", ",", "env", ",", "n_steps", "=", "100", ")", ".", "learn", "(", "250", ")", "\n", "\n", "assert", "not", "is_vecenv_wrapped", "(", "model", ".", "get_env", "(", ")", ",", "VecTransposeImage", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "action", ",", "_", "=", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "True", ")", "\n", "\n", "model", ".", "save", "(", "tmp_path", "/", "SAVE_NAME", ")", "\n", "del", "model", "\n", "\n", "model", "=", "A2C", ".", "load", "(", "tmp_path", "/", "SAVE_NAME", ")", "\n", "\n", "# Check that the prediction is the same", "\n", "assert", "np", ".", "allclose", "(", "action", ",", "model", ".", "predict", "(", "obs", ",", "deterministic", "=", "True", ")", "[", "0", "]", ")", "\n", "\n", "os", ".", "remove", "(", "str", "(", "tmp_path", "/", "SAVE_NAME", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_cnn.test_image_space_checks": [[256, 300], ["gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Box", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space", "gym.spaces.Box", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space", "gym.spaces.Box", "stable_baselines3.common.preprocessing.is_image_space", "gym.spaces.Box", "stable_baselines3.common.preprocessing.is_image_space_channels_first", "gym.spaces.Box", "gym.spaces.Box", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space", "stable_baselines3.common.preprocessing.is_image_space_channels_first", "pytest.warns", "stable_baselines3.common.preprocessing.is_image_space_channels_first"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.preprocessing.is_image_space_channels_first"], ["", "def", "test_image_space_checks", "(", ")", ":", "\n", "    ", "not_image_space", "=", "spaces", ".", "Box", "(", "0", ",", "1", ",", "shape", "=", "(", "10", ",", ")", ")", "\n", "assert", "not", "is_image_space", "(", "not_image_space", ")", "\n", "\n", "# Not uint8", "\n", "not_image_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "shape", "=", "(", "10", ",", "10", ",", "3", ")", ")", "\n", "assert", "not", "is_image_space", "(", "not_image_space", ")", "\n", "\n", "# Not correct shape", "\n", "not_image_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "shape", "=", "(", "10", ",", "10", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "assert", "not", "is_image_space", "(", "not_image_space", ")", "\n", "\n", "# Not correct low/high", "\n", "not_image_space", "=", "spaces", ".", "Box", "(", "0", ",", "10", ",", "shape", "=", "(", "10", ",", "10", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "assert", "not", "is_image_space", "(", "not_image_space", ")", "\n", "\n", "# Not correct space", "\n", "not_image_space", "=", "spaces", ".", "Discrete", "(", "n", "=", "10", ")", "\n", "assert", "not", "is_image_space", "(", "not_image_space", ")", "\n", "\n", "an_image_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "shape", "=", "(", "10", ",", "10", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "assert", "is_image_space", "(", "an_image_space", ",", "check_channels", "=", "False", ")", "\n", "assert", "is_image_space", "(", "an_image_space", ",", "check_channels", "=", "True", ")", "\n", "\n", "channel_first_image_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "shape", "=", "(", "3", ",", "10", ",", "10", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "assert", "is_image_space", "(", "channel_first_image_space", ",", "check_channels", "=", "False", ")", "\n", "assert", "is_image_space", "(", "channel_first_image_space", ",", "check_channels", "=", "True", ")", "\n", "\n", "an_image_space_with_odd_channels", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "shape", "=", "(", "10", ",", "10", ",", "5", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "assert", "is_image_space", "(", "an_image_space_with_odd_channels", ")", "\n", "# Should not pass if we check if channels are valid for an image", "\n", "assert", "not", "is_image_space", "(", "an_image_space_with_odd_channels", ",", "check_channels", "=", "True", ")", "\n", "\n", "# Test if channel-check works", "\n", "channel_first_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "shape", "=", "(", "3", ",", "10", ",", "10", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "assert", "is_image_space_channels_first", "(", "channel_first_space", ")", "\n", "\n", "channel_last_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "shape", "=", "(", "10", ",", "10", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "assert", "not", "is_image_space_channels_first", "(", "channel_last_space", ")", "\n", "\n", "channel_mid_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "shape", "=", "(", "10", ",", "3", ",", "10", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# Should raise a warning", "\n", "with", "pytest", ".", "warns", "(", "Warning", ")", ":", "\n", "        ", "assert", "not", "is_image_space_channels_first", "(", "channel_mid_space", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_buffers.DummyEnv.__init__": [[18, 25], ["gym.spaces.Box", "gym.spaces.Box"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "1", ",", "5", ",", "(", "1", ",", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "1", ",", "5", ",", "(", "1", ",", ")", ")", "\n", "self", ".", "_observations", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "_rewards", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_ep_length", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_buffers.DummyEnv.reset": [[26, 30], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_t", "=", "0", "\n", "obs", "=", "self", ".", "_observations", "[", "0", "]", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_buffers.DummyEnv.step": [[31, 38], ["len"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "_t", "+=", "1", "\n", "index", "=", "self", ".", "_t", "%", "len", "(", "self", ".", "_observations", ")", "\n", "obs", "=", "self", ".", "_observations", "[", "index", "]", "\n", "done", "=", "self", ".", "_t", ">=", "self", ".", "_ep_length", "\n", "reward", "=", "self", ".", "_rewards", "[", "index", "]", "\n", "return", "obs", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_buffers.DummyDictEnv.__init__": [[45, 53], ["gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Dict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "1", ",", "5", ",", "(", "1", ",", ")", ")", "\n", "space", "=", "spaces", ".", "Box", "(", "1", ",", "5", ",", "(", "1", ",", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "{", "\"observation\"", ":", "space", ",", "\"achieved_goal\"", ":", "space", ",", "\"desired_goal\"", ":", "space", "}", ")", "\n", "self", ".", "_observations", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "_rewards", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_ep_length", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_buffers.DummyDictEnv.reset": [[54, 58], ["test_buffers.DummyDictEnv.observation_space.spaces.keys"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_t", "=", "0", "\n", "obs", "=", "{", "key", ":", "self", ".", "_observations", "[", "0", "]", "for", "key", "in", "self", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", "}", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_buffers.DummyDictEnv.step": [[59, 66], ["len", "test_buffers.DummyDictEnv.observation_space.spaces.keys"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "_t", "+=", "1", "\n", "index", "=", "self", ".", "_t", "%", "len", "(", "self", ".", "_observations", ")", "\n", "obs", "=", "{", "key", ":", "self", ".", "_observations", "[", "index", "]", "for", "key", "in", "self", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", "}", "\n", "done", "=", "self", ".", "_t", ">=", "self", ".", "_ep_length", "\n", "reward", "=", "self", ".", "_rewards", "[", "index", "]", "\n", "return", "obs", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_buffers.test_replay_buffer_normalization": [[68, 97], ["pytest.mark.parametrize", "stable_baselines3.common.env_util.make_vec_env", "stable_baselines3.common.vec_env.VecNormalize", "replay_buffer_cls", "stable_baselines3.common.vec_env.VecNormalize.reset", "stable_baselines3.common.vec_env.VecNormalize.get_original_obs", "range", "replay_buffer_cls.sample", "numpy.allclose", "stable_baselines3.common.vec_env.VecNormalize.action_space.sample", "stable_baselines3.common.vec_env.VecNormalize.step", "stable_baselines3.common.vec_env.VecNormalize.get_original_obs", "stable_baselines3.common.vec_env.VecNormalize.get_original_reward", "replay_buffer_cls.add", "isinstance", "buffer.sample.rewards.mean", "numpy.zeros", "observations.keys", "isinstance", "torch.allclose", "torch.allclose", "observations[].mean", "torch.zeros", "observations.mean", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_reward", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.DictRolloutBuffer.add", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"replay_buffer_cls\"", ",", "[", "ReplayBuffer", ",", "DictReplayBuffer", "]", ")", "\n", "def", "test_replay_buffer_normalization", "(", "replay_buffer_cls", ")", ":", "\n", "    ", "env", "=", "{", "ReplayBuffer", ":", "DummyEnv", ",", "DictReplayBuffer", ":", "DummyDictEnv", "}", "[", "replay_buffer_cls", "]", "\n", "env", "=", "make_vec_env", "(", "env", ")", "\n", "env", "=", "VecNormalize", "(", "env", ")", "\n", "\n", "buffer", "=", "replay_buffer_cls", "(", "100", ",", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", "\n", "\n", "# Interract and store transitions", "\n", "env", ".", "reset", "(", ")", "\n", "obs", "=", "env", ".", "get_original_obs", "(", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "        ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "_", ",", "_", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "next_obs", "=", "env", ".", "get_original_obs", "(", ")", "\n", "reward", "=", "env", ".", "get_original_reward", "(", ")", "\n", "buffer", ".", "add", "(", "obs", ",", "next_obs", ",", "action", ",", "reward", ",", "done", ",", "info", ")", "\n", "obs", "=", "next_obs", "\n", "\n", "", "sample", "=", "buffer", ".", "sample", "(", "50", ",", "env", ")", "\n", "# Test observation normalization", "\n", "for", "observations", "in", "[", "sample", ".", "observations", ",", "sample", ".", "next_observations", "]", ":", "\n", "        ", "if", "isinstance", "(", "sample", ",", "DictReplayBufferSamples", ")", ":", "\n", "            ", "for", "key", "in", "observations", ".", "keys", "(", ")", ":", "\n", "                ", "assert", "th", ".", "allclose", "(", "observations", "[", "key", "]", ".", "mean", "(", "0", ")", ",", "th", ".", "zeros", "(", "1", ")", ",", "atol", "=", "1", ")", "\n", "", "", "elif", "isinstance", "(", "sample", ",", "ReplayBufferSamples", ")", ":", "\n", "            ", "assert", "th", ".", "allclose", "(", "observations", ".", "mean", "(", "0", ")", ",", "th", ".", "zeros", "(", "1", ")", ",", "atol", "=", "1", ")", "\n", "# Test reward normalization", "\n", "", "", "assert", "np", ".", "allclose", "(", "sample", ".", "rewards", ".", "mean", "(", "0", ")", ",", "np", ".", "zeros", "(", "1", ")", ",", "atol", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.select_env": [[23, 31], ["stable_baselines3.common.envs.IdentityEnv", "stable_baselines3.common.envs.IdentityEnvBox", "stable_baselines3.TD3"], "function", ["None"], ["def", "select_env", "(", "model_class", ":", "BaseAlgorithm", ")", "->", "gym", ".", "Env", ":", "\n", "    ", "\"\"\"\n    Selects an environment with the correct action space as DQN only supports discrete action space\n    \"\"\"", "\n", "if", "model_class", "==", "DQN", ":", "\n", "        ", "return", "IdentityEnv", "(", "10", ")", "\n", "", "else", ":", "\n", "        ", "return", "IdentityEnvBox", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_save_load": [[33, 163], ["pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "model_class", "model_class.load.learn", "stable_baselines3.common.vec_env.DummyVecEnv.reset", "numpy.concatenate", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy.items", "model_class.load.set_parameters", "model_class.load.get_parameters", "model_class.load.predict", "model_class.load.save", "os.remove", "model_class.load.get_parameters", "pytest.raises", "model_class.load.set_parameters", "pytest.raises", "model_class.load.set_parameters", "pytest.raises", "model_class.load.set_parameters", "pytest.raises", "model_class.load.set_parameters", "model_class.load", "model_class.load.get_parameters", "model_class.load.predict", "numpy.allclose", "model_class.load.learn", "dict", "list", "collections.OrderedDict", "list", "str", "test_save_load.select_env", "stable_baselines3.common.vec_env.DummyVecEnv.step", "range", "list", "original_params[].items", "original_params[].keys", "torch.allclose", "stable_baselines3.common.utils.get_device", "stable_baselines3.common.utils.get_device", "torch.allclose", "copy.deepcopy.items", "torch.allclose", "[].to", "[].to", "stable_baselines3.common.vec_env.DummyVecEnv.action_space.sample", "torch.rand_like", "stable_baselines3.common.utils.get_device", "list", "params.items"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_parameters", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.utils.get_device"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "MODEL_LIST", ")", "\n", "def", "test_save_load", "(", "tmp_path", ",", "model_class", ")", ":", "\n", "    ", "\"\"\"\n    Test if 'save' and 'load' saves and loads model correctly\n    and if 'get_parameters' and 'set_parameters' and work correctly.\n\n    ''warning does not test function of optimizer parameter load\n\n    :param model_class: (BaseAlgorithm) A RL model\n    \"\"\"", "\n", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "select_env", "(", "model_class", ")", "]", ")", "\n", "\n", "# create model", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", "]", ")", ",", "verbose", "=", "1", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "500", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "observations", "=", "np", ".", "concatenate", "(", "[", "env", ".", "step", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "[", "0", "]", "for", "_", "in", "range", "(", "10", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Get parameters of different objects", "\n", "# deepcopy to avoid referencing to tensors we are about to modify", "\n", "original_params", "=", "deepcopy", "(", "model", ".", "get_parameters", "(", ")", ")", "\n", "\n", "# Test different error cases of set_parameters.", "\n", "# Test that invalid object names throw errors", "\n", "invalid_object_params", "=", "deepcopy", "(", "original_params", ")", "\n", "invalid_object_params", "[", "\"I_should_not_be_a_valid_object\"", "]", "=", "\"and_I_am_an_invalid_tensor\"", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "model", ".", "set_parameters", "(", "invalid_object_params", ",", "exact_match", "=", "True", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "model", ".", "set_parameters", "(", "invalid_object_params", ",", "exact_match", "=", "False", ")", "\n", "\n", "# Test that exact_match catches when something was missed.", "\n", "", "missing_object_params", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "list", "(", "original_params", ".", "items", "(", ")", ")", "[", ":", "-", "1", "]", "}", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "model", ".", "set_parameters", "(", "missing_object_params", ",", "exact_match", "=", "True", ")", "\n", "\n", "# Test that exact_match catches when something inside state-dict", "\n", "# is missing but we have exact_match.", "\n", "", "missing_state_dict_tensor_params", "=", "{", "}", "\n", "for", "object_name", "in", "original_params", ":", "\n", "        ", "object_params", "=", "{", "}", "\n", "missing_state_dict_tensor_params", "[", "object_name", "]", "=", "object_params", "\n", "# Skip last item in state-dict", "\n", "for", "k", ",", "v", "in", "list", "(", "original_params", "[", "object_name", "]", ".", "items", "(", ")", ")", "[", ":", "-", "1", "]", ":", "\n", "            ", "object_params", "[", "k", "]", "=", "v", "\n", "", "", "with", "pytest", ".", "raises", "(", "RuntimeError", ")", ":", "\n", "# PyTorch load_state_dict throws RuntimeError if strict but", "\n", "# invalid state-dict.", "\n", "        ", "model", ".", "set_parameters", "(", "missing_state_dict_tensor_params", ",", "exact_match", "=", "True", ")", "\n", "\n", "# Test that parameters do indeed change.", "\n", "", "random_params", "=", "{", "}", "\n", "for", "object_name", ",", "params", "in", "original_params", ".", "items", "(", ")", ":", "\n", "# Do not randomize optimizer parameters (custom layout)", "\n", "        ", "if", "\"optim\"", "in", "object_name", ":", "\n", "            ", "random_params", "[", "object_name", "]", "=", "params", "\n", "", "else", ":", "\n", "# Again, skip the last item in state-dict", "\n", "            ", "random_params", "[", "object_name", "]", "=", "OrderedDict", "(", "\n", "(", "param_name", ",", "th", ".", "rand_like", "(", "param", ")", ")", "for", "param_name", ",", "param", "in", "list", "(", "params", ".", "items", "(", ")", ")", "[", ":", "-", "1", "]", "\n", ")", "\n", "\n", "# Update model parameters with the new random values", "\n", "", "", "model", ".", "set_parameters", "(", "random_params", ",", "exact_match", "=", "False", ")", "\n", "\n", "new_params", "=", "model", ".", "get_parameters", "(", ")", "\n", "# Check that all params except the final item in each state-dict are different.", "\n", "for", "object_name", "in", "original_params", ":", "\n", "# Skip optimizers (no valid comparison with just th.allclose)", "\n", "        ", "if", "\"optim\"", "in", "object_name", ":", "\n", "            ", "continue", "\n", "# state-dicts use ordered dictionaries, so key order", "\n", "# is guaranteed.", "\n", "", "last_key", "=", "list", "(", "original_params", "[", "object_name", "]", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "\n", "for", "k", "in", "original_params", "[", "object_name", "]", ":", "\n", "            ", "if", "k", "==", "last_key", ":", "\n", "# Should be same as before", "\n", "                ", "assert", "th", ".", "allclose", "(", "\n", "original_params", "[", "object_name", "]", "[", "k", "]", ",", "new_params", "[", "object_name", "]", "[", "k", "]", "\n", ")", ",", "\"Parameter changed despite not included in the loaded parameters.\"", "\n", "", "else", ":", "\n", "# Should be different", "\n", "                ", "assert", "not", "th", ".", "allclose", "(", "\n", "original_params", "[", "object_name", "]", "[", "k", "]", ",", "new_params", "[", "object_name", "]", "[", "k", "]", "\n", ")", ",", "\"Parameters did not change as expected.\"", "\n", "\n", "", "", "", "params", "=", "new_params", "\n", "\n", "# get selected actions", "\n", "selected_actions", ",", "_", "=", "model", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "\n", "# Check", "\n", "model", ".", "save", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "del", "model", "\n", "\n", "# Check if the model loads as expected for every possible choice of device:", "\n", "for", "device", "in", "[", "\"auto\"", ",", "\"cpu\"", ",", "\"cuda\"", "]", ":", "\n", "        ", "model", "=", "model_class", ".", "load", "(", "str", "(", "tmp_path", "/", "\"test_save.zip\"", ")", ",", "env", "=", "env", ",", "device", "=", "device", ")", "\n", "\n", "# check if the model was loaded to the correct device", "\n", "assert", "model", ".", "device", ".", "type", "==", "get_device", "(", "device", ")", ".", "type", "\n", "assert", "model", ".", "policy", ".", "device", ".", "type", "==", "get_device", "(", "device", ")", ".", "type", "\n", "\n", "# check if params are still the same after load", "\n", "new_params", "=", "model", ".", "get_parameters", "(", ")", "\n", "\n", "# Check that all params are the same as before save load procedure now", "\n", "for", "object_name", "in", "new_params", ":", "\n", "# Skip optimizers (no valid comparison with just th.allclose)", "\n", "            ", "if", "\"optim\"", "in", "object_name", ":", "\n", "                ", "continue", "\n", "", "for", "key", "in", "params", "[", "object_name", "]", ":", "\n", "                ", "assert", "new_params", "[", "object_name", "]", "[", "key", "]", ".", "device", ".", "type", "==", "get_device", "(", "device", ")", ".", "type", "\n", "assert", "th", ".", "allclose", "(", "\n", "params", "[", "object_name", "]", "[", "key", "]", ".", "to", "(", "\"cpu\"", ")", ",", "new_params", "[", "object_name", "]", "[", "key", "]", ".", "to", "(", "\"cpu\"", ")", "\n", ")", ",", "\"Model parameters not the same after save and load.\"", "\n", "\n", "# check if model still selects the same actions", "\n", "", "", "new_selected_actions", ",", "_", "=", "model", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "assert", "np", ".", "allclose", "(", "selected_actions", ",", "new_selected_actions", ",", "1e-4", ")", "\n", "\n", "# check if learn still works", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "500", ")", "\n", "\n", "del", "model", "\n", "\n", "# clear file from os", "\n", "", "os", ".", "remove", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_set_env": [[165, 228], ["pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.DummyVecEnv", "test_save_load.select_env", "model_class", "model_class.load.learn", "model_class.load.set_env", "model_class.load.learn", "model_class.load.set_env", "model_class.load.learn", "model_class.load.set_env", "model_class.load.learn", "model_class.load.get_env", "model_class.load.save", "model_class.load", "model_class.load.learn", "model_class.load", "model_class.load.learn", "os.remove", "dict", "model_class.load.get_env", "dict", "dict", "test_save_load.select_env", "test_save_load.select_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "MODEL_LIST", ")", "\n", "def", "test_set_env", "(", "tmp_path", ",", "model_class", ")", ":", "\n", "    ", "\"\"\"\n    Test if set_env function does work correct\n\n    :param model_class: (BaseAlgorithm) A RL model\n    \"\"\"", "\n", "\n", "# use discrete for DQN", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "select_env", "(", "model_class", ")", "]", ")", "\n", "env2", "=", "DummyVecEnv", "(", "[", "lambda", ":", "select_env", "(", "model_class", ")", "]", ")", "\n", "env3", "=", "select_env", "(", "model_class", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "if", "model_class", "in", "{", "DQN", ",", "DDPG", ",", "SAC", ",", "TD3", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "learning_starts", "=", "50", ",", "train_freq", "=", "4", ")", "\n", "", "elif", "model_class", "in", "{", "A2C", ",", "PPO", "}", ":", "\n", "        ", "kwargs", "=", "dict", "(", "n_steps", "=", "64", ")", "\n", "\n", "# create model", "\n", "", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", "]", ")", ",", "**", "kwargs", ")", "\n", "# learn", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "64", ")", "\n", "\n", "# change env", "\n", "model", ".", "set_env", "(", "env2", ",", "force_reset", "=", "True", ")", "\n", "# Check that last obs was discarded", "\n", "assert", "model", ".", "_last_obs", "is", "None", "\n", "# learn again", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "64", ",", "reset_num_timesteps", "=", "True", ")", "\n", "assert", "model", ".", "num_timesteps", "==", "64", "\n", "\n", "# change env test wrapping", "\n", "model", ".", "set_env", "(", "env3", ")", "\n", "# learn again", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "64", ")", "\n", "\n", "# Keep the same env, disable reset", "\n", "model", ".", "set_env", "(", "model", ".", "get_env", "(", ")", ",", "force_reset", "=", "False", ")", "\n", "assert", "model", ".", "_last_obs", "is", "not", "None", "\n", "# learn again", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "64", ",", "reset_num_timesteps", "=", "False", ")", "\n", "assert", "model", ".", "num_timesteps", "==", "2", "*", "64", "\n", "\n", "current_env", "=", "model", ".", "get_env", "(", ")", "\n", "model", ".", "save", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "del", "model", "\n", "# Check that we can keep the number of timesteps after loading", "\n", "# Here the env kept its state so we don't have to reset", "\n", "model", "=", "model_class", ".", "load", "(", "tmp_path", "/", "\"test_save.zip\"", ",", "env", "=", "current_env", ",", "force_reset", "=", "False", ")", "\n", "assert", "model", ".", "_last_obs", "is", "not", "None", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "64", ",", "reset_num_timesteps", "=", "False", ")", "\n", "assert", "model", ".", "num_timesteps", "==", "3", "*", "64", "\n", "\n", "del", "model", "\n", "# We are changing the env, the env must reset but we should keep the number of timesteps", "\n", "model", "=", "model_class", ".", "load", "(", "tmp_path", "/", "\"test_save.zip\"", ",", "env", "=", "env3", ",", "force_reset", "=", "True", ")", "\n", "assert", "model", ".", "_last_obs", "is", "None", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "64", ",", "reset_num_timesteps", "=", "False", ")", "\n", "assert", "model", ".", "num_timesteps", "==", "3", "*", "64", "\n", "\n", "# Clear saved file", "\n", "os", ".", "remove", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_exclude_include_saved_params": [[230, 269], ["pytest.mark.parametrize", "stable_baselines3.common.vec_env.DummyVecEnv", "model_class", "model_class.load.save", "model_class.load", "model_class.load.save", "dict", "model_class.load", "os.remove", "str", "str", "hasattr", "dict", "test_save_load.select_env"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "MODEL_LIST", ")", "\n", "def", "test_exclude_include_saved_params", "(", "tmp_path", ",", "model_class", ")", ":", "\n", "    ", "\"\"\"\n    Test if exclude and include parameters of save() work\n\n    :param model_class: (BaseAlgorithm) A RL model\n    \"\"\"", "\n", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "select_env", "(", "model_class", ")", "]", ")", "\n", "\n", "# create model, set verbose as 2, which is not standard", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", "]", ")", ",", "verbose", "=", "2", ")", "\n", "\n", "# Check if exclude works", "\n", "model", ".", "save", "(", "tmp_path", "/", "\"test_save\"", ",", "exclude", "=", "[", "\"verbose\"", "]", ")", "\n", "del", "model", "\n", "model", "=", "model_class", ".", "load", "(", "str", "(", "tmp_path", "/", "\"test_save.zip\"", ")", ")", "\n", "# check if verbose was not saved", "\n", "assert", "model", ".", "verbose", "!=", "2", "\n", "\n", "# set verbose as something different then standard settings", "\n", "model", ".", "verbose", "=", "2", "\n", "# Check if include works", "\n", "model", ".", "save", "(", "tmp_path", "/", "\"test_save\"", ",", "exclude", "=", "[", "\"verbose\"", "]", ",", "include", "=", "[", "\"verbose\"", "]", ")", "\n", "del", "model", "\n", "# Load with custom objects", "\n", "custom_objects", "=", "dict", "(", "learning_rate", "=", "2e-5", ",", "dummy", "=", "1.0", ")", "\n", "model", "=", "model_class", ".", "load", "(", "\n", "str", "(", "tmp_path", "/", "\"test_save.zip\"", ")", ",", "\n", "custom_objects", "=", "custom_objects", ",", "\n", "print_system_info", "=", "True", ",", "\n", ")", "\n", "assert", "model", ".", "verbose", "==", "2", "\n", "# Check that the custom object was taken into account", "\n", "assert", "model", ".", "learning_rate", "==", "custom_objects", "[", "\"learning_rate\"", "]", "\n", "# Check that only parameters that are here already are replaced", "\n", "assert", "not", "hasattr", "(", "model", ",", "\"dummy\"", ")", "\n", "\n", "# clear file from os", "\n", "os", ".", "remove", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_save_load_pytorch_var": [[271, 306], ["stable_baselines3.SAC", "SAC.load.learn", "str", "SAC.load.save", "SAC.load.get_env", "stable_baselines3.SAC.load", "torch.allclose", "SAC.load.learn", "stable_baselines3.SAC", "SAC.load.learn", "str", "SAC.load.save", "SAC.load.get_env", "stable_baselines3.SAC.load", "torch.allclose", "SAC.load.learn", "torch.allclose", "torch.allclose", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.get_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose"], ["", "def", "test_save_load_pytorch_var", "(", "tmp_path", ")", ":", "\n", "    ", "model", "=", "SAC", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "seed", "=", "3", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ",", "n_critics", "=", "1", ")", ")", "\n", "model", ".", "learn", "(", "200", ")", "\n", "save_path", "=", "str", "(", "tmp_path", "/", "\"sac_pendulum\"", ")", "\n", "model", ".", "save", "(", "save_path", ")", "\n", "env", "=", "model", ".", "get_env", "(", ")", "\n", "log_ent_coef_before", "=", "model", ".", "log_ent_coef", "\n", "\n", "del", "model", "\n", "\n", "model", "=", "SAC", ".", "load", "(", "save_path", ",", "env", "=", "env", ")", "\n", "assert", "th", ".", "allclose", "(", "log_ent_coef_before", ",", "model", ".", "log_ent_coef", ")", "\n", "model", ".", "learn", "(", "200", ")", "\n", "log_ent_coef_after", "=", "model", ".", "log_ent_coef", "\n", "# Check that the entropy coefficient is still optimized", "\n", "assert", "not", "th", ".", "allclose", "(", "log_ent_coef_before", ",", "log_ent_coef_after", ")", "\n", "\n", "# With a fixed entropy coef", "\n", "model", "=", "SAC", "(", "\"MlpPolicy\"", ",", "\"Pendulum-v1\"", ",", "seed", "=", "3", ",", "ent_coef", "=", "0.01", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ",", "n_critics", "=", "1", ")", ")", "\n", "model", ".", "learn", "(", "200", ")", "\n", "save_path", "=", "str", "(", "tmp_path", "/", "\"sac_pendulum\"", ")", "\n", "model", ".", "save", "(", "save_path", ")", "\n", "env", "=", "model", ".", "get_env", "(", ")", "\n", "assert", "model", ".", "log_ent_coef", "is", "None", "\n", "ent_coef_before", "=", "model", ".", "ent_coef_tensor", "\n", "\n", "del", "model", "\n", "\n", "model", "=", "SAC", ".", "load", "(", "save_path", ",", "env", "=", "env", ")", "\n", "assert", "th", ".", "allclose", "(", "ent_coef_before", ",", "model", ".", "ent_coef_tensor", ")", "\n", "model", ".", "learn", "(", "200", ")", "\n", "ent_coef_after", "=", "model", ".", "ent_coef_tensor", "\n", "assert", "model", ".", "log_ent_coef", "is", "None", "\n", "# Check that the entropy coefficient is still the same", "\n", "assert", "th", ".", "allclose", "(", "ent_coef_before", ",", "ent_coef_after", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_save_load_env_cnn": [[308, 327], ["pytest.mark.parametrize", "stable_baselines3.common.envs.FakeImageEnv", "dict", "model_class().learn", "model_class.load().learn.save", "model_class.load().learn", "os.remove", "dict.update", "dict", "dict", "model_class", "model_class.load", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.stacked_observations.StackedDictObservations.update", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "TD3", "]", ")", "\n", "def", "test_save_load_env_cnn", "(", "tmp_path", ",", "model_class", ")", ":", "\n", "    ", "\"\"\"\n    Test loading with an env that requires a ``CnnPolicy``.\n    This is to test wrapping and observation space check.\n    We test one on-policy and one off-policy\n    algorithm as the rest share the loading part.\n    \"\"\"", "\n", "env", "=", "FakeImageEnv", "(", "screen_height", "=", "40", ",", "screen_width", "=", "40", ",", "n_channels", "=", "2", ",", "discrete", "=", "False", ")", "\n", "kwargs", "=", "dict", "(", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "32", "]", ")", ")", "\n", "if", "model_class", "==", "TD3", ":", "\n", "        ", "kwargs", ".", "update", "(", "dict", "(", "buffer_size", "=", "100", ",", "learning_starts", "=", "50", ",", "train_freq", "=", "4", ")", ")", "\n", "\n", "", "model", "=", "model_class", "(", "\"CnnPolicy\"", ",", "env", ",", "**", "kwargs", ")", ".", "learn", "(", "100", ")", "\n", "model", ".", "save", "(", "tmp_path", "/", "\"test_save\"", ")", "\n", "# Test loading with env and continuing training", "\n", "model", "=", "model_class", ".", "load", "(", "str", "(", "tmp_path", "/", "\"test_save.zip\"", ")", ",", "env", "=", "env", ",", "**", "kwargs", ")", ".", "learn", "(", "100", ")", "\n", "# clear file from os", "\n", "os", ".", "remove", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_save_load_replay_buffer": [[329, 357], ["pytest.mark.parametrize", "pathlib.Path", "pathlib.Path.parent.mkdir", "model_class", "model_class.learn", "copy.deepcopy", "model_class.save_replay_buffer", "model_class.load_replay_buffer", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "model_class.replay_buffer.extend", "test_save_load.select_env", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.save_replay_buffer", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.off_policy_algorithm.OffPolicyAlgorithm.load_replay_buffer", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.buffers.BaseBuffer.extend", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "TD3", ",", "DQN", "]", ")", "\n", "def", "test_save_load_replay_buffer", "(", "tmp_path", ",", "model_class", ")", ":", "\n", "    ", "path", "=", "pathlib", ".", "Path", "(", "tmp_path", "/", "\"logs/replay_buffer.pkl\"", ")", "\n", "path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "# to not raise a warning", "\n", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "select_env", "(", "model_class", ")", ",", "buffer_size", "=", "1000", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ",", "learning_starts", "=", "200", "\n", ")", "\n", "model", ".", "learn", "(", "300", ")", "\n", "old_replay_buffer", "=", "deepcopy", "(", "model", ".", "replay_buffer", ")", "\n", "model", ".", "save_replay_buffer", "(", "path", ")", "\n", "model", ".", "replay_buffer", "=", "None", "\n", "model", ".", "load_replay_buffer", "(", "path", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "observations", ",", "model", ".", "replay_buffer", ".", "observations", ")", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "actions", ",", "model", ".", "replay_buffer", ".", "actions", ")", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "rewards", ",", "model", ".", "replay_buffer", ".", "rewards", ")", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "dones", ",", "model", ".", "replay_buffer", ".", "dones", ")", "\n", "assert", "np", ".", "allclose", "(", "old_replay_buffer", ".", "timeouts", ",", "model", ".", "replay_buffer", ".", "timeouts", ")", "\n", "infos", "=", "[", "[", "{", "\"TimeLimit.truncated\"", ":", "truncated", "}", "]", "for", "truncated", "in", "old_replay_buffer", ".", "timeouts", "]", "\n", "\n", "# test extending replay buffer", "\n", "model", ".", "replay_buffer", ".", "extend", "(", "\n", "old_replay_buffer", ".", "observations", ",", "\n", "old_replay_buffer", ".", "observations", ",", "\n", "old_replay_buffer", ".", "actions", ",", "\n", "old_replay_buffer", ".", "rewards", ",", "\n", "old_replay_buffer", ".", "dones", ",", "\n", "infos", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_warn_buffer": [[360, 397], ["pytest.mark.parametrize", "pytest.mark.parametrize", "warnings.filterwarnings", "warnings.filterwarnings", "model_class", "model_class.learn", "model_class.learn", "model_class.learn", "test_save_load.select_env", "len", "recwarn.pop", "dict", "len", "str", "len"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "DQN", ",", "SAC", ",", "TD3", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"optimize_memory_usage\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_warn_buffer", "(", "recwarn", ",", "model_class", ",", "optimize_memory_usage", ")", ":", "\n", "    ", "\"\"\"\n    When using memory efficient replay buffer,\n    a warning must be emitted when calling `.learn()`\n    multiple times.\n    See https://github.com/DLR-RM/stable-baselines3/issues/46\n    \"\"\"", "\n", "# remove gym warnings", "\n", "warnings", ".", "filterwarnings", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "warnings", ".", "filterwarnings", "(", "action", "=", "\"ignore\"", ",", "category", "=", "UserWarning", ",", "module", "=", "\"gym\"", ")", "\n", "\n", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "\n", "select_env", "(", "model_class", ")", ",", "\n", "buffer_size", "=", "100", ",", "\n", "optimize_memory_usage", "=", "optimize_memory_usage", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "64", "]", ")", ",", "\n", "learning_starts", "=", "10", ",", "\n", ")", "\n", "\n", "model", ".", "learn", "(", "150", ")", "\n", "\n", "model", ".", "learn", "(", "150", ",", "reset_num_timesteps", "=", "False", ")", "\n", "\n", "# Check that there is no warning", "\n", "assert", "len", "(", "recwarn", ")", "==", "0", "\n", "\n", "model", ".", "learn", "(", "150", ")", "\n", "\n", "if", "optimize_memory_usage", ":", "\n", "        ", "assert", "len", "(", "recwarn", ")", "==", "1", "\n", "warning", "=", "recwarn", ".", "pop", "(", "UserWarning", ")", "\n", "assert", "\"The last trajectory in the replay buffer will be truncated\"", "in", "str", "(", "warning", ".", "message", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "recwarn", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_save_load_policy": [[399, 499], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "dict", "stable_baselines3.common.vec_env.DummyVecEnv", "model_class", "model_class.learn", "stable_baselines3.common.envs.FakeImageEnv.reset", "numpy.concatenate", "copy.deepcopy", "policy_class.load.load_state_dict", "policy_class.load.state_dict", "policy_class.load.predict", "policy_class.load.save", "policy_class.load", "policy_class.load.state_dict", "policy_class.load.predict", "numpy.allclose", "os.remove", "pytest.skip", "test_save_load.select_env", "stable_baselines3.common.envs.FakeImageEnv", "policy_class.load.state_dict", "torch.rand_like", "actor_class.load.predict", "actor_class.load.save", "actor_class.load", "torch.allclose", "actor_class.load.predict", "numpy.allclose", "numpy.allclose", "os.remove", "dict", "dict", "copy.deepcopy.items", "torch.allclose", "stable_baselines3.common.envs.FakeImageEnv.step", "range", "dict", "stable_baselines3.common.envs.FakeImageEnv.action_space.sample", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "MODEL_LIST", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"policy_str\"", ",", "[", "\"MlpPolicy\"", ",", "\"CnnPolicy\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"use_sde\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_save_load_policy", "(", "tmp_path", ",", "model_class", ",", "policy_str", ",", "use_sde", ")", ":", "\n", "    ", "\"\"\"\n    Test saving and loading policy only.\n\n    :param model_class: (BaseAlgorithm) A RL model\n    :param policy_str: (str) Name of the policy.\n    \"\"\"", "\n", "kwargs", "=", "dict", "(", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", "]", ")", ")", "\n", "\n", "# gSDE is only applicable for A2C, PPO and SAC", "\n", "if", "use_sde", "and", "model_class", "not", "in", "[", "A2C", ",", "PPO", ",", "SAC", "]", ":", "\n", "        ", "pytest", ".", "skip", "(", ")", "\n", "\n", "", "if", "policy_str", "==", "\"MlpPolicy\"", ":", "\n", "        ", "env", "=", "select_env", "(", "model_class", ")", "\n", "", "else", ":", "\n", "        ", "if", "model_class", "in", "[", "SAC", ",", "TD3", ",", "DQN", ",", "DDPG", "]", ":", "\n", "# Avoid memory error when using replay buffer", "\n", "# Reduce the size of the features", "\n", "            ", "kwargs", "=", "dict", "(", "\n", "buffer_size", "=", "250", ",", "learning_starts", "=", "100", ",", "policy_kwargs", "=", "dict", "(", "features_extractor_kwargs", "=", "dict", "(", "features_dim", "=", "32", ")", ")", "\n", ")", "\n", "", "env", "=", "FakeImageEnv", "(", "screen_height", "=", "40", ",", "screen_width", "=", "40", ",", "n_channels", "=", "2", ",", "discrete", "=", "model_class", "==", "DQN", ")", "\n", "\n", "", "if", "use_sde", ":", "\n", "        ", "kwargs", "[", "\"use_sde\"", "]", "=", "True", "\n", "\n", "", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "\n", "# create model", "\n", "model", "=", "model_class", "(", "policy_str", ",", "env", ",", "verbose", "=", "1", ",", "**", "kwargs", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "300", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "observations", "=", "np", ".", "concatenate", "(", "[", "env", ".", "step", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "[", "0", "]", "for", "_", "in", "range", "(", "10", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "policy", "=", "model", ".", "policy", "\n", "policy_class", "=", "policy", ".", "__class__", "\n", "actor", ",", "actor_class", "=", "None", ",", "None", "\n", "if", "model_class", "in", "[", "SAC", ",", "TD3", "]", ":", "\n", "        ", "actor", "=", "policy", ".", "actor", "\n", "actor_class", "=", "actor", ".", "__class__", "\n", "\n", "# Get dictionary of current parameters", "\n", "", "params", "=", "deepcopy", "(", "policy", ".", "state_dict", "(", ")", ")", "\n", "\n", "# Modify all parameters to be random values", "\n", "random_params", "=", "{", "param_name", ":", "th", ".", "rand_like", "(", "param", ")", "for", "param_name", ",", "param", "in", "params", ".", "items", "(", ")", "}", "\n", "\n", "# Update model parameters with the new random values", "\n", "policy", ".", "load_state_dict", "(", "random_params", ")", "\n", "\n", "new_params", "=", "policy", ".", "state_dict", "(", ")", "\n", "# Check that all params are different now", "\n", "for", "k", "in", "params", ":", "\n", "        ", "assert", "not", "th", ".", "allclose", "(", "params", "[", "k", "]", ",", "new_params", "[", "k", "]", ")", ",", "\"Parameters did not change as expected.\"", "\n", "\n", "", "params", "=", "new_params", "\n", "\n", "# get selected actions", "\n", "selected_actions", ",", "_", "=", "policy", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "# Should also work with the actor only", "\n", "if", "actor", "is", "not", "None", ":", "\n", "        ", "selected_actions_actor", ",", "_", "=", "actor", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "\n", "# Save and load policy", "\n", "", "policy", ".", "save", "(", "tmp_path", "/", "\"policy.pkl\"", ")", "\n", "# Save and load actor", "\n", "if", "actor", "is", "not", "None", ":", "\n", "        ", "actor", ".", "save", "(", "tmp_path", "/", "\"actor.pkl\"", ")", "\n", "\n", "", "del", "policy", ",", "actor", "\n", "\n", "policy", "=", "policy_class", ".", "load", "(", "tmp_path", "/", "\"policy.pkl\"", ")", "\n", "if", "actor_class", "is", "not", "None", ":", "\n", "        ", "actor", "=", "actor_class", ".", "load", "(", "tmp_path", "/", "\"actor.pkl\"", ")", "\n", "\n", "# check if params are still the same after load", "\n", "", "new_params", "=", "policy", ".", "state_dict", "(", ")", "\n", "\n", "# Check that all params are the same as before save load procedure now", "\n", "for", "key", "in", "params", ":", "\n", "        ", "assert", "th", ".", "allclose", "(", "params", "[", "key", "]", ",", "new_params", "[", "key", "]", ")", ",", "\"Policy parameters not the same after save and load.\"", "\n", "\n", "# check if model still selects the same actions", "\n", "", "new_selected_actions", ",", "_", "=", "policy", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "assert", "np", ".", "allclose", "(", "selected_actions", ",", "new_selected_actions", ",", "1e-4", ")", "\n", "\n", "if", "actor_class", "is", "not", "None", ":", "\n", "        ", "new_selected_actions_actor", ",", "_", "=", "actor", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "assert", "np", ".", "allclose", "(", "selected_actions_actor", ",", "new_selected_actions_actor", ",", "1e-4", ")", "\n", "assert", "np", ".", "allclose", "(", "selected_actions_actor", ",", "new_selected_actions", ",", "1e-4", ")", "\n", "\n", "# clear file from os", "\n", "", "os", ".", "remove", "(", "tmp_path", "/", "\"policy.pkl\"", ")", "\n", "if", "actor_class", "is", "not", "None", ":", "\n", "        ", "os", ".", "remove", "(", "tmp_path", "/", "\"actor.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_save_load_q_net": [[501, 575], ["pytest.mark.parametrize", "pytest.mark.parametrize", "dict", "stable_baselines3.common.vec_env.DummyVecEnv", "model_class", "model_class.learn", "stable_baselines3.common.envs.FakeImageEnv.reset", "numpy.concatenate", "copy.deepcopy", "q_net_class.load.load_state_dict", "q_net_class.load.state_dict", "q_net_class.load.predict", "q_net_class.load.save", "q_net_class.load", "q_net_class.load.state_dict", "q_net_class.load.predict", "numpy.allclose", "os.remove", "test_save_load.select_env", "stable_baselines3.common.envs.FakeImageEnv", "q_net_class.load.state_dict", "torch.rand_like", "torch.allclose", "dict", "dict", "copy.deepcopy.items", "torch.allclose", "stable_baselines3.common.envs.FakeImageEnv.step", "range", "dict", "stable_baselines3.common.envs.FakeImageEnv.action_space.sample", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.predict", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "DQN", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"policy_str\"", ",", "[", "\"MlpPolicy\"", ",", "\"CnnPolicy\"", "]", ")", "\n", "def", "test_save_load_q_net", "(", "tmp_path", ",", "model_class", ",", "policy_str", ")", ":", "\n", "    ", "\"\"\"\n    Test saving and loading q-network/quantile net only.\n\n    :param model_class: (BaseAlgorithm) A RL model\n    :param policy_str: (str) Name of the policy.\n    \"\"\"", "\n", "kwargs", "=", "dict", "(", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "16", "]", ")", ")", "\n", "if", "policy_str", "==", "\"MlpPolicy\"", ":", "\n", "        ", "env", "=", "select_env", "(", "model_class", ")", "\n", "", "else", ":", "\n", "        ", "if", "model_class", "in", "[", "DQN", "]", ":", "\n", "# Avoid memory error when using replay buffer", "\n", "# Reduce the size of the features", "\n", "            ", "kwargs", "=", "dict", "(", "\n", "buffer_size", "=", "250", ",", "\n", "learning_starts", "=", "100", ",", "\n", "policy_kwargs", "=", "dict", "(", "features_extractor_kwargs", "=", "dict", "(", "features_dim", "=", "32", ")", ")", ",", "\n", ")", "\n", "", "env", "=", "FakeImageEnv", "(", "screen_height", "=", "40", ",", "screen_width", "=", "40", ",", "n_channels", "=", "2", ",", "discrete", "=", "model_class", "==", "DQN", ")", "\n", "\n", "", "env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "env", "]", ")", "\n", "\n", "# create model", "\n", "model", "=", "model_class", "(", "policy_str", ",", "env", ",", "verbose", "=", "1", ",", "**", "kwargs", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "300", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "observations", "=", "np", ".", "concatenate", "(", "[", "env", ".", "step", "(", "[", "env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "[", "0", "]", "for", "_", "in", "range", "(", "10", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "q_net", "=", "model", ".", "q_net", "\n", "q_net_class", "=", "q_net", ".", "__class__", "\n", "\n", "# Get dictionary of current parameters", "\n", "params", "=", "deepcopy", "(", "q_net", ".", "state_dict", "(", ")", ")", "\n", "\n", "# Modify all parameters to be random values", "\n", "random_params", "=", "{", "param_name", ":", "th", ".", "rand_like", "(", "param", ")", "for", "param_name", ",", "param", "in", "params", ".", "items", "(", ")", "}", "\n", "\n", "# Update model parameters with the new random values", "\n", "q_net", ".", "load_state_dict", "(", "random_params", ")", "\n", "\n", "new_params", "=", "q_net", ".", "state_dict", "(", ")", "\n", "# Check that all params are different now", "\n", "for", "k", "in", "params", ":", "\n", "        ", "assert", "not", "th", ".", "allclose", "(", "params", "[", "k", "]", ",", "new_params", "[", "k", "]", ")", ",", "\"Parameters did not change as expected.\"", "\n", "\n", "", "params", "=", "new_params", "\n", "\n", "# get selected actions", "\n", "selected_actions", ",", "_", "=", "q_net", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "\n", "# Save and load q_net", "\n", "q_net", ".", "save", "(", "tmp_path", "/", "\"q_net.pkl\"", ")", "\n", "\n", "del", "q_net", "\n", "\n", "q_net", "=", "q_net_class", ".", "load", "(", "tmp_path", "/", "\"q_net.pkl\"", ")", "\n", "\n", "# check if params are still the same after load", "\n", "new_params", "=", "q_net", ".", "state_dict", "(", ")", "\n", "\n", "# Check that all params are the same as before save load procedure now", "\n", "for", "key", "in", "params", ":", "\n", "        ", "assert", "th", ".", "allclose", "(", "params", "[", "key", "]", ",", "new_params", "[", "key", "]", ")", ",", "\"Policy parameters not the same after save and load.\"", "\n", "\n", "# check if model still selects the same actions", "\n", "", "new_selected_actions", ",", "_", "=", "q_net", ".", "predict", "(", "observations", ",", "deterministic", "=", "True", ")", "\n", "assert", "np", ".", "allclose", "(", "selected_actions", ",", "new_selected_actions", ",", "1e-4", ")", "\n", "\n", "# clear file from os", "\n", "os", ".", "remove", "(", "tmp_path", "/", "\"q_net.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_open_file_str_pathlib": [[577, 624], ["pytest.mark.parametrize", "pathlib.Path().open", "pathlib.Path().open.write", "pathlib.Path().open.close", "stable_baselines3.common.save_util.open_path", "stable_baselines3.common.save_util.save_to_pkl", "warnings.catch_warnings", "stable_baselines3.common.save_util.open_path", "stable_baselines3.common.save_util.save_to_pkl", "warnings.catch_warnings", "stable_baselines3.common.save_util.open_path", "stable_baselines3.common.save_util.save_to_pkl", "warnings.catch_warnings", "stable_baselines3.common.save_util.open_path", "stable_baselines3.common.save_util.save_to_pkl", "warnings.catch_warnings", "len", "warnings.catch_warnings", "len", "warnings.catch_warnings", "stable_baselines3.common.save_util.open_path().close", "stable_baselines3.common.save_util.open_path().close", "stable_baselines3.common.save_util.open_path().close", "len", "pathtype", "stable_baselines3.common.save_util.load_from_pkl", "pathtype", "stable_baselines3.common.save_util.load_from_pkl", "pathtype", "stable_baselines3.common.save_util.load_from_pkl", "pathtype", "stable_baselines3.common.save_util.load_from_pkl", "stable_baselines3.common.save_util.load_from_pkl", "pathlib.Path", "pathtype", "pathtype", "pathtype", "stable_baselines3.common.save_util.open_path", "stable_baselines3.common.save_util.open_path", "stable_baselines3.common.save_util.open_path", "stable_baselines3.common.save_util.open_path", "stable_baselines3.common.save_util.open_path", "pathtype", "pathtype", "pathtype", "pathtype", "pathtype"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.save_to_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.save_to_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.save_to_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.save_to_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.load_from_pkl", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"pathtype\"", ",", "[", "str", ",", "pathlib", ".", "Path", "]", ")", "\n", "def", "test_open_file_str_pathlib", "(", "tmp_path", ",", "pathtype", ")", ":", "\n", "# check that suffix isn't added because we used open_path first", "\n", "    ", "with", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t1\"", ")", ",", "\"w\"", ")", "as", "fp1", ":", "\n", "        ", "save_to_pkl", "(", "fp1", ",", "\"foo\"", ")", "\n", "", "assert", "fp1", ".", "closed", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "assert", "load_from_pkl", "(", "pathtype", "(", "f\"{tmp_path}/t1\"", ")", ")", "==", "\"foo\"", "\n", "", "assert", "not", "record", "\n", "\n", "# test custom suffix", "\n", "with", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t1.custom_ext\"", ")", ",", "\"w\"", ")", "as", "fp1", ":", "\n", "        ", "save_to_pkl", "(", "fp1", ",", "\"foo\"", ")", "\n", "", "assert", "fp1", ".", "closed", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "assert", "load_from_pkl", "(", "pathtype", "(", "f\"{tmp_path}/t1.custom_ext\"", ")", ")", "==", "\"foo\"", "\n", "", "assert", "not", "record", "\n", "\n", "# test without suffix", "\n", "with", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t1\"", ")", ",", "\"w\"", ",", "suffix", "=", "\"pkl\"", ")", "as", "fp1", ":", "\n", "        ", "save_to_pkl", "(", "fp1", ",", "\"foo\"", ")", "\n", "", "assert", "fp1", ".", "closed", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "assert", "load_from_pkl", "(", "pathtype", "(", "f\"{tmp_path}/t1.pkl\"", ")", ")", "==", "\"foo\"", "\n", "", "assert", "not", "record", "\n", "\n", "# test that a warning is raised when the path doesn't exist", "\n", "with", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t2.pkl\"", ")", ",", "\"w\"", ")", "as", "fp1", ":", "\n", "        ", "save_to_pkl", "(", "fp1", ",", "\"foo\"", ")", "\n", "", "assert", "fp1", ".", "closed", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "assert", "load_from_pkl", "(", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t2\"", ")", ",", "\"r\"", ",", "suffix", "=", "\"pkl\"", ")", ")", "==", "\"foo\"", "\n", "", "assert", "len", "(", "record", ")", "==", "0", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "assert", "load_from_pkl", "(", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t2\"", ")", ",", "\"r\"", ",", "suffix", "=", "\"pkl\"", ",", "verbose", "=", "2", ")", ")", "==", "\"foo\"", "\n", "", "assert", "len", "(", "record", ")", "==", "1", "\n", "\n", "fp", "=", "pathlib", ".", "Path", "(", "f\"{tmp_path}/t2\"", ")", ".", "open", "(", "\"w\"", ")", "\n", "fp", ".", "write", "(", "\"rubbish\"", ")", "\n", "fp", ".", "close", "(", ")", "\n", "# test that a warning is only raised when verbose = 0", "\n", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "record", ":", "\n", "        ", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t2\"", ")", ",", "\"w\"", ",", "suffix", "=", "\"pkl\"", ",", "verbose", "=", "0", ")", ".", "close", "(", ")", "\n", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t2\"", ")", ",", "\"w\"", ",", "suffix", "=", "\"pkl\"", ",", "verbose", "=", "1", ")", ".", "close", "(", ")", "\n", "open_path", "(", "pathtype", "(", "f\"{tmp_path}/t2\"", ")", ",", "\"w\"", ",", "suffix", "=", "\"pkl\"", ",", "verbose", "=", "2", ")", ".", "close", "(", ")", "\n", "", "assert", "len", "(", "record", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_open_file": [[626, 659], ["p1.open", "stable_baselines3.common.save_util.open_path", "io.BytesIO", "io.BytesIO.writable", "stable_baselines3.common.save_util.open_path", "pytest.raises", "stable_baselines3.common.save_util.open_path", "pytest.raises", "stable_baselines3.common.save_util.open_path", "pytest.raises", "stable_baselines3.common.save_util.open_path", "pytest.raises", "p1.open.close", "stable_baselines3.common.save_util.open_path", "io.BytesIO.readable", "pytest.raises", "io.BytesIO.close", "stable_baselines3.common.save_util.open_path"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.save_util.open_path"], ["", "def", "test_open_file", "(", "tmp_path", ")", ":", "\n", "\n", "# path must much the type", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "open_path", "(", "123", ",", "None", ",", "None", ",", "None", ")", "\n", "\n", "", "p1", "=", "tmp_path", "/", "\"test1\"", "\n", "fp", "=", "p1", ".", "open", "(", "\"wb\"", ")", "\n", "\n", "# provided path must match the mode", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "open_path", "(", "fp", ",", "\"r\"", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "open_path", "(", "fp", ",", "\"randomstuff\"", ")", "\n", "\n", "# test identity", "\n", "", "_", "=", "open_path", "(", "fp", ",", "\"w\"", ")", "\n", "assert", "_", "is", "not", "None", "\n", "assert", "fp", "is", "_", "\n", "\n", "# Can't use a closed path", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "fp", ".", "close", "(", ")", "\n", "open_path", "(", "fp", ",", "\"w\"", ")", "\n", "\n", "", "buff", "=", "io", ".", "BytesIO", "(", ")", "\n", "assert", "buff", ".", "writable", "(", ")", "\n", "assert", "buff", ".", "readable", "(", ")", "is", "(", "\"w\"", "==", "\"w\"", ")", "\n", "_", "=", "open_path", "(", "buff", ",", "\"w\"", ")", "\n", "assert", "_", "is", "buff", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "buff", ".", "close", "(", ")", "\n", "open_path", "(", "buff", ",", "\"w\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_save_load.test_save_load_large_model": [[661, 680], ["test_save_load.select_env", "dict", "stable_baselines3.TD3", "TD3.load.save", "stable_baselines3.TD3.load", "os.remove", "str", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.save", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.load"], ["", "", "@", "pytest", ".", "mark", ".", "expensive", "\n", "def", "test_save_load_large_model", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    Test saving and loading a model with a large policy that is greater than 2GB. We\n    test only one algorithm since all algorithms share the same code for loading and\n    saving the model.\n    \"\"\"", "\n", "env", "=", "select_env", "(", "TD3", ")", "\n", "kwargs", "=", "dict", "(", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "8192", ",", "8192", ",", "8192", "]", ")", ",", "device", "=", "\"cpu\"", ")", "\n", "model", "=", "TD3", "(", "\"MlpPolicy\"", ",", "env", ",", "**", "kwargs", ")", "\n", "\n", "# test saving", "\n", "model", ".", "save", "(", "tmp_path", "/", "\"test_save\"", ")", "\n", "\n", "# test loading", "\n", "model", "=", "TD3", ".", "load", "(", "str", "(", "tmp_path", "/", "\"test_save.zip\"", ")", ",", "env", "=", "env", ",", "**", "kwargs", ")", "\n", "\n", "# clear file from os", "\n", "os", ".", "remove", "(", "tmp_path", "/", "\"test_save.zip\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.test_callbacks": [[23, 101], ["pytest.mark.parametrize", "test_callbacks.select_env", "model_class", "stable_baselines3.common.callbacks.CheckpointCallback", "gym.make", "stable_baselines3.common.callbacks.StopTrainingOnRewardThreshold", "stable_baselines3.common.callbacks.StopTrainingOnNoModelImprovement", "stable_baselines3.common.callbacks.EvalCallback", "stable_baselines3.common.callbacks.CheckpointCallback", "stable_baselines3.common.callbacks.EveryNTimesteps", "stable_baselines3.common.callbacks.StopTrainingOnMaxEpisodes", "stable_baselines3.common.callbacks.CallbackList", "model_class.learn", "model_class.env.observation_space.contains", "model_class.learn", "model_class.learn", "model_class.learn", "os.path.exists", "stable_baselines3.common.env_util.make_vec_env", "model_class", "stable_baselines3.common.callbacks.StopTrainingOnMaxEpisodes", "stable_baselines3.common.callbacks.CallbackList", "model_class.learn", "shutil.rmtree", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.env_util.make_vec_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "A2C", ",", "PPO", ",", "SAC", ",", "TD3", ",", "DQN", ",", "DDPG", "]", ")", "\n", "def", "test_callbacks", "(", "tmp_path", ",", "model_class", ")", ":", "\n", "    ", "log_folder", "=", "tmp_path", "/", "\"logs/callbacks/\"", "\n", "\n", "# DQN only support discrete actions", "\n", "env_name", "=", "select_env", "(", "model_class", ")", "\n", "# Create RL model", "\n", "# Small network for fast test", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "env_name", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "32", "]", ")", ")", "\n", "\n", "checkpoint_callback", "=", "CheckpointCallback", "(", "save_freq", "=", "1000", ",", "save_path", "=", "log_folder", ")", "\n", "\n", "eval_env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "# Stop training if the performance is good enough", "\n", "callback_on_best", "=", "StopTrainingOnRewardThreshold", "(", "reward_threshold", "=", "-", "1200", ",", "verbose", "=", "1", ")", "\n", "\n", "# Stop training if there is no model improvement after 2 evaluations", "\n", "callback_no_model_improvement", "=", "StopTrainingOnNoModelImprovement", "(", "max_no_improvement_evals", "=", "2", ",", "min_evals", "=", "1", ",", "verbose", "=", "1", ")", "\n", "\n", "eval_callback", "=", "EvalCallback", "(", "\n", "eval_env", ",", "\n", "callback_on_new_best", "=", "callback_on_best", ",", "\n", "callback_after_eval", "=", "callback_no_model_improvement", ",", "\n", "best_model_save_path", "=", "log_folder", ",", "\n", "log_path", "=", "log_folder", ",", "\n", "eval_freq", "=", "100", ",", "\n", "warn", "=", "False", ",", "\n", ")", "\n", "# Equivalent to the `checkpoint_callback`", "\n", "# but here in an event-driven manner", "\n", "checkpoint_on_event", "=", "CheckpointCallback", "(", "save_freq", "=", "1", ",", "save_path", "=", "log_folder", ",", "name_prefix", "=", "\"event\"", ")", "\n", "\n", "event_callback", "=", "EveryNTimesteps", "(", "n_steps", "=", "500", ",", "callback", "=", "checkpoint_on_event", ")", "\n", "\n", "# Stop training if max number of episodes is reached", "\n", "callback_max_episodes", "=", "StopTrainingOnMaxEpisodes", "(", "max_episodes", "=", "100", ",", "verbose", "=", "1", ")", "\n", "\n", "callback", "=", "CallbackList", "(", "[", "checkpoint_callback", ",", "eval_callback", ",", "event_callback", ",", "callback_max_episodes", "]", ")", "\n", "model", ".", "learn", "(", "500", ",", "callback", "=", "callback", ")", "\n", "\n", "# Check access to local variables", "\n", "assert", "model", ".", "env", ".", "observation_space", ".", "contains", "(", "callback", ".", "locals", "[", "\"new_obs\"", "]", "[", "0", "]", ")", "\n", "# Check that the child callback was called", "\n", "assert", "checkpoint_callback", ".", "locals", "[", "\"new_obs\"", "]", "is", "callback", ".", "locals", "[", "\"new_obs\"", "]", "\n", "assert", "event_callback", ".", "locals", "[", "\"new_obs\"", "]", "is", "callback", ".", "locals", "[", "\"new_obs\"", "]", "\n", "assert", "checkpoint_on_event", ".", "locals", "[", "\"new_obs\"", "]", "is", "callback", ".", "locals", "[", "\"new_obs\"", "]", "\n", "# Check that internal callback counters match models' counters", "\n", "assert", "event_callback", ".", "num_timesteps", "==", "model", ".", "num_timesteps", "\n", "assert", "event_callback", ".", "n_calls", "==", "model", ".", "num_timesteps", "\n", "\n", "model", ".", "learn", "(", "500", ",", "callback", "=", "None", ")", "\n", "# Transform callback into a callback list automatically", "\n", "model", ".", "learn", "(", "500", ",", "callback", "=", "[", "checkpoint_callback", ",", "eval_callback", "]", ")", "\n", "# Automatic wrapping, old way of doing callbacks", "\n", "model", ".", "learn", "(", "500", ",", "callback", "=", "lambda", "_locals", ",", "_globals", ":", "True", ")", "\n", "\n", "# Testing models that support multiple envs", "\n", "if", "model_class", "in", "[", "A2C", ",", "PPO", "]", ":", "\n", "        ", "max_episodes", "=", "1", "\n", "n_envs", "=", "2", "\n", "# Pendulum-v1 has a timelimit of 200 timesteps", "\n", "max_episode_length", "=", "200", "\n", "envs", "=", "make_vec_env", "(", "env_name", ",", "n_envs", "=", "n_envs", ",", "seed", "=", "0", ")", "\n", "\n", "model", "=", "model_class", "(", "\"MlpPolicy\"", ",", "envs", ",", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "32", "]", ")", ")", "\n", "\n", "callback_max_episodes", "=", "StopTrainingOnMaxEpisodes", "(", "max_episodes", "=", "max_episodes", ",", "verbose", "=", "1", ")", "\n", "callback", "=", "CallbackList", "(", "[", "callback_max_episodes", "]", ")", "\n", "model", ".", "learn", "(", "1000", ",", "callback", "=", "callback", ")", "\n", "\n", "# Check that the actual number of episodes and timesteps per env matches the expected one", "\n", "episodes_per_env", "=", "callback_max_episodes", ".", "n_episodes", "//", "n_envs", "\n", "assert", "episodes_per_env", "==", "max_episodes", "\n", "timesteps_per_env", "=", "model", ".", "num_timesteps", "//", "n_envs", "\n", "assert", "timesteps_per_env", "==", "max_episode_length", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "log_folder", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "log_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env": [[103, 108], ["stable_baselines3.DQN"], "function", ["None"], ["", "", "def", "select_env", "(", "model_class", ")", "->", "str", ":", "\n", "    ", "if", "model_class", "is", "DQN", ":", "\n", "        ", "return", "\"CartPole-v0\"", "\n", "", "else", ":", "\n", "        ", "return", "\"Pendulum-v1\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.test_eval_callback_vec_env": [[110, 124], ["stable_baselines3.common.envs.IdentityEnv", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.A2C", "stable_baselines3.common.callbacks.EvalCallback", "stable_baselines3.A2C.learn", "stable_baselines3.common.envs.IdentityEnv"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "def", "test_eval_callback_vec_env", "(", ")", ":", "\n", "# tests that eval callback does not crash when given a vector", "\n", "    ", "n_eval_envs", "=", "3", "\n", "train_env", "=", "IdentityEnv", "(", ")", "\n", "eval_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "IdentityEnv", "(", ")", "]", "*", "n_eval_envs", ")", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "train_env", ",", "seed", "=", "0", ")", "\n", "\n", "eval_callback", "=", "EvalCallback", "(", "\n", "eval_env", ",", "\n", "eval_freq", "=", "100", ",", "\n", "warn", "=", "False", ",", "\n", ")", "\n", "model", ".", "learn", "(", "300", ",", "callback", "=", "eval_callback", ")", "\n", "assert", "eval_callback", ".", "last_mean_reward", "==", "100.0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.test_eval_success_logging": [[126, 149], ["stable_baselines3.common.envs.BitFlippingEnv", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.callbacks.EvalCallback", "stable_baselines3.DQN", "stable_baselines3.DQN.learn", "len", "numpy.mean", "dict", "stable_baselines3.common.envs.BitFlippingEnv"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "test_eval_success_logging", "(", "tmp_path", ")", ":", "\n", "    ", "n_bits", "=", "2", "\n", "n_envs", "=", "2", "\n", "env", "=", "BitFlippingEnv", "(", "n_bits", "=", "n_bits", ")", "\n", "eval_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "BitFlippingEnv", "(", "n_bits", "=", "n_bits", ")", "]", "*", "n_envs", ")", "\n", "eval_callback", "=", "EvalCallback", "(", "\n", "eval_env", ",", "\n", "eval_freq", "=", "250", ",", "\n", "log_path", "=", "tmp_path", ",", "\n", "warn", "=", "False", ",", "\n", ")", "\n", "model", "=", "DQN", "(", "\n", "\"MultiInputPolicy\"", ",", "\n", "env", ",", "\n", "replay_buffer_class", "=", "HerReplayBuffer", ",", "\n", "learning_starts", "=", "100", ",", "\n", "seed", "=", "0", ",", "\n", "replay_buffer_kwargs", "=", "dict", "(", "max_episode_length", "=", "n_bits", ")", ",", "\n", ")", "\n", "model", ".", "learn", "(", "500", ",", "callback", "=", "eval_callback", ")", "\n", "assert", "len", "(", "eval_callback", ".", "_is_success_buffer", ")", ">", "0", "\n", "# More than 50% success rate", "\n", "assert", "np", ".", "mean", "(", "eval_callback", ".", "_is_success_buffer", ")", ">", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.test_eval_callback_logs_are_written_with_the_correct_timestep": [[151, 175], ["pytest.importorskip", "test_callbacks.select_env", "stable_baselines3.DQN", "gym.make", "stable_baselines3.common.callbacks.EvalCallback", "stable_baselines3.DQN.learn", "EventAccumulator", "EventAccumulator.Reload", "EventAccumulator.scalars.Items", "str", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.select_env", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "test_eval_callback_logs_are_written_with_the_correct_timestep", "(", "tmp_path", ")", ":", "\n", "# Skip if no tensorboard installed", "\n", "    ", "pytest", ".", "importorskip", "(", "\"tensorboard\"", ")", "\n", "from", "tensorboard", ".", "backend", ".", "event_processing", ".", "event_accumulator", "import", "EventAccumulator", "\n", "\n", "env_name", "=", "select_env", "(", "DQN", ")", "\n", "model", "=", "DQN", "(", "\n", "\"MlpPolicy\"", ",", "\n", "env_name", ",", "\n", "policy_kwargs", "=", "dict", "(", "net_arch", "=", "[", "32", "]", ")", ",", "\n", "tensorboard_log", "=", "tmp_path", ",", "\n", "verbose", "=", "1", ",", "\n", "seed", "=", "1", ",", "\n", ")", "\n", "\n", "eval_env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "eval_freq", "=", "101", "\n", "eval_callback", "=", "EvalCallback", "(", "eval_env", ",", "eval_freq", "=", "eval_freq", ",", "warn", "=", "False", ")", "\n", "model", ".", "learn", "(", "500", ",", "callback", "=", "eval_callback", ")", "\n", "\n", "acc", "=", "EventAccumulator", "(", "str", "(", "tmp_path", "/", "\"DQN_1\"", ")", ")", "\n", "acc", ".", "Reload", "(", ")", "\n", "for", "event", "in", "acc", ".", "scalars", ".", "Items", "(", "\"eval/mean_reward\"", ")", ":", "\n", "        ", "assert", "event", ".", "step", "%", "eval_freq", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_callbacks.test_eval_friendly_error": [[177, 206], ["stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize", "stable_baselines3.common.vec_env.VecNormalize.reset", "stable_baselines3.common.vec_env.VecNormalize.get_original_obs", "stable_baselines3.A2C", "stable_baselines3.common.callbacks.EvalCallback", "stable_baselines3.A2C.learn", "numpy.allclose", "gym.make", "stable_baselines3.common.callbacks.EvalCallback", "stable_baselines3.common.vec_env.DummyVecEnv", "stable_baselines3.common.vec_env.VecNormalize.normalize_obs", "stable_baselines3.common.vec_env.VecNormalize.normalize_obs", "pytest.warns", "pytest.raises", "stable_baselines3.A2C.learn", "gym.make", "gym.make"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.get_original_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_normalize.VecNormalize.normalize_obs", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "def", "test_eval_friendly_error", "(", ")", ":", "\n", "# tests that eval callback does not crash when given a vector", "\n", "    ", "train_env", "=", "VecNormalize", "(", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "]", ")", ")", "\n", "eval_env", "=", "DummyVecEnv", "(", "[", "lambda", ":", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "]", ")", "\n", "eval_env", "=", "VecNormalize", "(", "eval_env", ",", "training", "=", "False", ",", "norm_reward", "=", "False", ")", "\n", "_", "=", "train_env", ".", "reset", "(", ")", "\n", "original_obs", "=", "train_env", ".", "get_original_obs", "(", ")", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "train_env", ",", "n_steps", "=", "50", ",", "seed", "=", "0", ")", "\n", "\n", "eval_callback", "=", "EvalCallback", "(", "\n", "eval_env", ",", "\n", "eval_freq", "=", "100", ",", "\n", "warn", "=", "False", ",", "\n", ")", "\n", "model", ".", "learn", "(", "100", ",", "callback", "=", "eval_callback", ")", "\n", "\n", "# Check synchronization", "\n", "assert", "np", ".", "allclose", "(", "train_env", ".", "normalize_obs", "(", "original_obs", ")", ",", "eval_env", ".", "normalize_obs", "(", "original_obs", ")", ")", "\n", "\n", "wrong_eval_env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "eval_callback", "=", "EvalCallback", "(", "\n", "wrong_eval_env", ",", "\n", "eval_freq", "=", "100", ",", "\n", "warn", "=", "False", ",", "\n", ")", "\n", "\n", "with", "pytest", ".", "warns", "(", "Warning", ")", ":", "\n", "        ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "            ", "model", ".", "learn", "(", "100", ",", "callback", "=", "eval_callback", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.LogContent.__init__": [[51, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_format", ":", "str", ",", "lines", ":", "Sequence", ")", ":", "\n", "        ", "self", ".", "format", "=", "_format", "\n", "self", ".", "lines", "=", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.LogContent.empty": [[55, 58], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "empty", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lines", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.LogContent.__repr__": [[59, 61], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"LogContent(_format={self.format}, lines={self.lines})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.__init__": [[334, 339], ["gym.Env.__init__", "gym.spaces.Box", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ",", "delay", ":", "float", "=", "0.01", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "delay", "=", "delay", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "-", "20.0", ",", "high", "=", "20.0", ",", "shape", "=", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.reset": [[340, 342], ["test_logger.TimeDelayEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.TimeDelayEnv.step": [[343, 347], ["time.sleep", "test_logger.TimeDelayEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_envs._UnorderedDictSpace.sample"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "self", ".", "delay", ")", "\n", "obs", "=", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "return", "obs", ",", "0.0", ",", "True", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__": [[354, 356], ["stable_baselines3.common.logger.Logger.__init__"], "methods", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"\"", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump": [[357, 359], ["None"], "methods", ["None"], ["", "def", "dump", "(", "self", ",", "step", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.read_log": [[63, 98], ["test_logger.LogContent", "stable_baselines3.common.logger.read_csv", "test_logger.LogContent", "test_logger.LogContent", "stable_baselines3.common.logger.read_json", "capsys.readouterr", "test_logger.LogContent", "stable_baselines3.common.logger.read_json.iterrows", "test_logger.LogContent", "capsys.readouterr.out.splitlines", "test_logger.LogContent", "stable_baselines3.common.logger.read_json.iterrows", "EventAccumulator", "EventAccumulator.Reload", "test_logger.LogContent", "str", "reservoir.Keys", "tb_values_logged.append", "str", "reservoir.Items"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.read_csv", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.read_json"], ["", "", "@", "pytest", ".", "fixture", "\n", "def", "read_log", "(", "tmp_path", ",", "capsys", ")", ":", "\n", "    ", "def", "read_fn", "(", "_format", ")", ":", "\n", "        ", "if", "_format", "==", "\"csv\"", ":", "\n", "            ", "try", ":", "\n", "                ", "df", "=", "read_csv", "(", "tmp_path", "/", "\"progress.csv\"", ")", "\n", "", "except", "EmptyDataError", ":", "\n", "                ", "return", "LogContent", "(", "_format", ",", "[", "]", ")", "\n", "", "return", "LogContent", "(", "_format", ",", "[", "r", "for", "_", ",", "r", "in", "df", ".", "iterrows", "(", ")", "if", "not", "r", ".", "empty", "]", ")", "\n", "", "elif", "_format", "==", "\"json\"", ":", "\n", "            ", "try", ":", "\n", "                ", "df", "=", "read_json", "(", "tmp_path", "/", "\"progress.json\"", ")", "\n", "", "except", "EmptyDataError", ":", "\n", "                ", "return", "LogContent", "(", "_format", ",", "[", "]", ")", "\n", "", "return", "LogContent", "(", "_format", ",", "[", "r", "for", "_", ",", "r", "in", "df", ".", "iterrows", "(", ")", "if", "not", "r", ".", "empty", "]", ")", "\n", "", "elif", "_format", "==", "\"stdout\"", ":", "\n", "            ", "captured", "=", "capsys", ".", "readouterr", "(", ")", "\n", "return", "LogContent", "(", "_format", ",", "captured", ".", "out", ".", "splitlines", "(", ")", ")", "\n", "", "elif", "_format", "==", "\"log\"", ":", "\n", "            ", "return", "LogContent", "(", "_format", ",", "(", "tmp_path", "/", "\"log.txt\"", ")", ".", "read_text", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "", "elif", "_format", "==", "\"tensorboard\"", ":", "\n", "            ", "from", "tensorboard", ".", "backend", ".", "event_processing", ".", "event_accumulator", "import", "EventAccumulator", "\n", "\n", "acc", "=", "EventAccumulator", "(", "str", "(", "tmp_path", ")", ")", "\n", "acc", ".", "Reload", "(", ")", "\n", "\n", "tb_values_logged", "=", "[", "]", "\n", "for", "reservoir", "in", "[", "acc", ".", "scalars", ",", "acc", ".", "tensors", ",", "acc", ".", "images", ",", "acc", ".", "histograms", ",", "acc", ".", "compressed_histograms", "]", ":", "\n", "                ", "for", "k", "in", "reservoir", ".", "Keys", "(", ")", ":", "\n", "                    ", "tb_values_logged", ".", "append", "(", "f\"{k}: {str(reservoir.Items(k))}\"", ")", "\n", "\n", "", "", "content", "=", "LogContent", "(", "_format", ",", "tb_values_logged", ")", "\n", "return", "content", "\n", "\n", "", "", "return", "read_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_set_logger": [[100, 143], ["stable_baselines3.common.logger.configure", "stable_baselines3.A2C().learn", "stable_baselines3.A2C().learn", "isinstance", "str", "stable_baselines3.A2C().learn", "stable_baselines3.A2C().learn", "isinstance", "stable_baselines3.A2C().learn", "isinstance", "isinstance", "stable_baselines3.A2C.learn", "stable_baselines3.A2C.set_logger", "isinstance", "isinstance", "isinstance", "stable_baselines3.A2C.learn", "stable_baselines3.A2C", "stable_baselines3.A2C.set_logger", "stable_baselines3.A2C.learn", "isinstance", "isinstance", "isinstance", "str", "str", "len", "len", "len", "stable_baselines3.A2C", "stable_baselines3.A2C", "stable_baselines3.A2C", "stable_baselines3.A2C", "stable_baselines3.A2C", "str", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.configure", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_logger", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_logger", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "def", "test_set_logger", "(", "tmp_path", ")", ":", "\n", "# set up logger", "\n", "    ", "new_logger", "=", "configure", "(", "str", "(", "tmp_path", ")", ",", "[", "\"stdout\"", ",", "\"csv\"", ",", "\"tensorboard\"", "]", ")", "\n", "# Default outputs with verbose=0", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "verbose", "=", "0", ")", ".", "learn", "(", "4", ")", "\n", "assert", "model", ".", "logger", ".", "output_formats", "==", "[", "]", "\n", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "verbose", "=", "0", ",", "tensorboard_log", "=", "str", "(", "tmp_path", ")", ")", ".", "learn", "(", "4", ")", "\n", "assert", "str", "(", "tmp_path", ")", "in", "model", ".", "logger", ".", "dir", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "0", "]", ",", "TensorBoardOutputFormat", ")", "\n", "\n", "# Check that env variable work", "\n", "new_tmp_path", "=", "str", "(", "tmp_path", "/", "\"new_tmp\"", ")", "\n", "os", ".", "environ", "[", "\"SB3_LOGDIR\"", "]", "=", "new_tmp_path", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "verbose", "=", "0", ")", ".", "learn", "(", "4", ")", "\n", "assert", "model", ".", "logger", ".", "dir", "==", "new_tmp_path", "\n", "\n", "# Default outputs with verbose=1", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "verbose", "=", "1", ")", ".", "learn", "(", "4", ")", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "0", "]", ",", "HumanOutputFormat", ")", "\n", "# with tensorboard", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "verbose", "=", "1", ",", "tensorboard_log", "=", "str", "(", "tmp_path", ")", ")", ".", "learn", "(", "4", ")", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "0", "]", ",", "HumanOutputFormat", ")", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "1", "]", ",", "TensorBoardOutputFormat", ")", "\n", "assert", "len", "(", "model", ".", "logger", ".", "output_formats", ")", "==", "2", "\n", "model", ".", "learn", "(", "32", ")", "\n", "# set new logger", "\n", "model", ".", "set_logger", "(", "new_logger", ")", "\n", "# Check that the new logger is correctly setup", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "0", "]", ",", "HumanOutputFormat", ")", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "1", "]", ",", "CSVOutputFormat", ")", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "2", "]", ",", "TensorBoardOutputFormat", ")", "\n", "assert", "len", "(", "model", ".", "logger", ".", "output_formats", ")", "==", "3", "\n", "model", ".", "learn", "(", "32", ")", "\n", "\n", "model", "=", "A2C", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "verbose", "=", "1", ")", "\n", "model", ".", "set_logger", "(", "new_logger", ")", "\n", "model", ".", "learn", "(", "32", ")", "\n", "# Check that the new logger is not overwritten", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "0", "]", ",", "HumanOutputFormat", ")", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "1", "]", ",", "CSVOutputFormat", ")", "\n", "assert", "isinstance", "(", "model", ".", "logger", ".", "output_formats", "[", "2", "]", ",", "TensorBoardOutputFormat", ")", "\n", "assert", "len", "(", "model", ".", "logger", ".", "output_formats", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_main": [[145, 177], ["stable_baselines3.common.logger.configure", "stable_baselines3.common.logger.configure.info", "stable_baselines3.common.logger.configure.debug", "stable_baselines3.common.logger.configure.set_level", "stable_baselines3.common.logger.configure.debug", "stable_baselines3.common.logger.configure", "stable_baselines3.common.logger.configure.record", "stable_baselines3.common.logger.configure.record", "stable_baselines3.common.logger.configure.dump", "stable_baselines3.common.logger.configure.record", "stable_baselines3.common.logger.configure.record", "stable_baselines3.common.logger.configure.dump", "stable_baselines3.common.logger.configure.info", "stable_baselines3.common.logger.configure.record", "stable_baselines3.common.logger.configure.dump", "stable_baselines3.common.logger.configure.info", "stable_baselines3.common.logger.configure.record_mean", "stable_baselines3.common.logger.configure.record_mean", "stable_baselines3.common.logger.configure.record", "stable_baselines3.common.logger.configure.dump", "stable_baselines3.common.logger.configure.record", "stable_baselines3.common.logger.configure.dump", "stable_baselines3.common.logger.configure.warn", "stable_baselines3.common.logger.configure.error", "str", "str"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.configure", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.info", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.debug", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.set_level", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.debug", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.configure", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.info", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.info", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record_mean", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record_mean", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.record", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.InMemoryLogger.dump", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.warn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.Logger.error"], ["", "def", "test_main", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    tests for the logger module\n    \"\"\"", "\n", "logger", "=", "configure", "(", "None", ",", "[", "\"stdout\"", "]", ")", "\n", "logger", ".", "info", "(", "\"hi\"", ")", "\n", "logger", ".", "debug", "(", "\"shouldn't appear\"", ")", "\n", "assert", "logger", ".", "level", "==", "INFO", "\n", "logger", ".", "set_level", "(", "DEBUG", ")", "\n", "assert", "logger", ".", "level", "==", "DEBUG", "\n", "logger", ".", "debug", "(", "\"should appear\"", ")", "\n", "logger", "=", "configure", "(", "folder", "=", "str", "(", "tmp_path", ")", ")", "\n", "assert", "logger", ".", "dir", "==", "str", "(", "tmp_path", ")", "\n", "logger", ".", "record", "(", "\"a\"", ",", "3", ")", "\n", "logger", ".", "record", "(", "\"b\"", ",", "2.5", ")", "\n", "logger", ".", "dump", "(", ")", "\n", "logger", ".", "record", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "logger", ".", "record", "(", "\"a\"", ",", "5.5", ")", "\n", "logger", ".", "dump", "(", ")", "\n", "logger", ".", "info", "(", "\"^^^ should see a = 5.5\"", ")", "\n", "logger", ".", "record", "(", "\"f\"", ",", "\"this text \\n \\r should appear in one line\"", ")", "\n", "logger", ".", "dump", "(", ")", "\n", "logger", ".", "info", "(", "'^^^ should see f = \"this text \\n \\r should appear in one line\"'", ")", "\n", "logger", ".", "record_mean", "(", "\"b\"", ",", "-", "22.5", ")", "\n", "logger", ".", "record_mean", "(", "\"b\"", ",", "-", "44.4", ")", "\n", "logger", ".", "record", "(", "\"a\"", ",", "5.5", ")", "\n", "logger", ".", "dump", "(", ")", "\n", "\n", "logger", ".", "record", "(", "\"a\"", ",", "\"longasslongasslongasslongasslongasslongassvalue\"", ")", "\n", "logger", ".", "dump", "(", ")", "\n", "logger", ".", "warn", "(", "\"hey\"", ")", "\n", "logger", ".", "error", "(", "\"oh\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_make_output": [[179, 194], ["pytest.mark.parametrize", "stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.write", "stable_baselines3.common.logger.make_output_format.close", "pytest.importorskip", "test_logger.read_log"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.read_log"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"_format\"", ",", "[", "\"stdout\"", ",", "\"log\"", ",", "\"json\"", ",", "\"csv\"", ",", "\"tensorboard\"", "]", ")", "\n", "def", "test_make_output", "(", "tmp_path", ",", "read_log", ",", "_format", ")", ":", "\n", "    ", "\"\"\"\n    test make output\n\n    :param _format: (str) output format\n    \"\"\"", "\n", "if", "_format", "==", "\"tensorboard\"", ":", "\n", "# Skip if no tensorboard installed", "\n", "        ", "pytest", ".", "importorskip", "(", "\"tensorboard\"", ")", "\n", "\n", "", "writer", "=", "make_output_format", "(", "_format", ",", "tmp_path", ")", "\n", "writer", ".", "write", "(", "KEY_VALUES", ",", "KEY_EXCLUDED", ")", "\n", "assert", "not", "read_log", "(", "_format", ")", ".", "empty", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_make_output_fail": [[196, 202], ["pytest.raises", "stable_baselines3.common.logger.make_output_format"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format"], ["", "def", "test_make_output_fail", "(", "tmp_path", ")", ":", "\n", "    ", "\"\"\"\n    test value error on logger\n    \"\"\"", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "make_output_format", "(", "\"dummy_format\"", ",", "tmp_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_exclude_keys": [[204, 215], ["pytest.mark.parametrize", "pytest.mark.filterwarnings", "stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.write", "stable_baselines3.common.logger.make_output_format.close", "pytest.importorskip", "dict", "test_logger.read_log", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.read_log"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"_format\"", ",", "[", "\"stdout\"", ",", "\"log\"", ",", "\"json\"", ",", "\"csv\"", ",", "\"tensorboard\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "filterwarnings", "(", "\"ignore:Tried to write empty key-value dict\"", ")", "\n", "def", "test_exclude_keys", "(", "tmp_path", ",", "read_log", ",", "_format", ")", ":", "\n", "    ", "if", "_format", "==", "\"tensorboard\"", ":", "\n", "# Skip if no tensorboard installed", "\n", "        ", "pytest", ".", "importorskip", "(", "\"tensorboard\"", ")", "\n", "\n", "", "writer", "=", "make_output_format", "(", "_format", ",", "tmp_path", ")", "\n", "writer", ".", "write", "(", "dict", "(", "some_tag", "=", "42", ")", ",", "key_excluded", "=", "dict", "(", "some_tag", "=", "(", "_format", ")", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "assert", "read_log", "(", "_format", ")", ".", "empty", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_report_video_to_tensorboard": [[217, 229], ["pytest.importorskip", "stable_baselines3.common.logger.Video", "stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.write", "test_logger.is_moviepy_installed", "stable_baselines3.common.logger.make_output_format.close", "torch.rand", "test_logger.read_log", "capsys.readouterr"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.is_moviepy_installed", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.read_log"], ["", "def", "test_report_video_to_tensorboard", "(", "tmp_path", ",", "read_log", ",", "capsys", ")", ":", "\n", "    ", "pytest", ".", "importorskip", "(", "\"tensorboard\"", ")", "\n", "\n", "video", "=", "Video", "(", "frames", "=", "th", ".", "rand", "(", "1", ",", "20", ",", "3", ",", "16", ",", "16", ")", ",", "fps", "=", "20", ")", "\n", "writer", "=", "make_output_format", "(", "\"tensorboard\"", ",", "tmp_path", ")", "\n", "writer", ".", "write", "(", "{", "\"video\"", ":", "video", "}", ",", "key_excluded", "=", "{", "\"video\"", ":", "(", ")", "}", ")", "\n", "\n", "if", "is_moviepy_installed", "(", ")", ":", "\n", "        ", "assert", "not", "read_log", "(", "\"tensorboard\"", ")", ".", "empty", "\n", "", "else", ":", "\n", "        ", "assert", "\"moviepy\"", "in", "capsys", ".", "readouterr", "(", ")", ".", "out", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.is_moviepy_installed": [[231, 237], ["None"], "function", ["None"], ["", "def", "is_moviepy_installed", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "moviepy", "# noqa: F401", "\n", "", "except", "ModuleNotFoundError", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_report_video_to_unsupported_format_raises_error": [[239, 248], ["pytest.mark.parametrize", "stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.close", "pytest.raises", "stable_baselines3.common.logger.Video", "stable_baselines3.common.logger.make_output_format.write", "str", "torch.rand"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"unsupported_format\"", ",", "[", "\"stdout\"", ",", "\"log\"", ",", "\"json\"", ",", "\"csv\"", "]", ")", "\n", "def", "test_report_video_to_unsupported_format_raises_error", "(", "tmp_path", ",", "unsupported_format", ")", ":", "\n", "    ", "writer", "=", "make_output_format", "(", "unsupported_format", ",", "tmp_path", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "FormatUnsupportedError", ")", "as", "exec_info", ":", "\n", "        ", "video", "=", "Video", "(", "frames", "=", "th", ".", "rand", "(", "1", ",", "20", ",", "3", ",", "16", ",", "16", ")", ",", "fps", "=", "20", ")", "\n", "writer", ".", "write", "(", "{", "\"video\"", ":", "video", "}", ",", "key_excluded", "=", "{", "\"video\"", ":", "(", ")", "}", ")", "\n", "", "assert", "unsupported_format", "in", "str", "(", "exec_info", ".", "value", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_report_image_to_tensorboard": [[250, 259], ["pytest.importorskip", "stable_baselines3.common.logger.Image", "stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.write", "stable_baselines3.common.logger.make_output_format.close", "torch.rand", "test_logger.read_log"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.read_log"], ["", "def", "test_report_image_to_tensorboard", "(", "tmp_path", ",", "read_log", ")", ":", "\n", "    ", "pytest", ".", "importorskip", "(", "\"tensorboard\"", ")", "\n", "\n", "image", "=", "Image", "(", "image", "=", "th", ".", "rand", "(", "16", ",", "16", ",", "3", ")", ",", "dataformats", "=", "\"HWC\"", ")", "\n", "writer", "=", "make_output_format", "(", "\"tensorboard\"", ",", "tmp_path", ")", "\n", "writer", ".", "write", "(", "{", "\"image\"", ":", "image", "}", ",", "key_excluded", "=", "{", "\"image\"", ":", "(", ")", "}", ")", "\n", "\n", "assert", "not", "read_log", "(", "\"tensorboard\"", ")", ".", "empty", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_report_image_to_unsupported_format_raises_error": [[261, 270], ["pytest.mark.parametrize", "stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.close", "pytest.raises", "stable_baselines3.common.logger.Image", "stable_baselines3.common.logger.make_output_format.write", "str", "torch.rand"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"unsupported_format\"", ",", "[", "\"stdout\"", ",", "\"log\"", ",", "\"json\"", ",", "\"csv\"", "]", ")", "\n", "def", "test_report_image_to_unsupported_format_raises_error", "(", "tmp_path", ",", "unsupported_format", ")", ":", "\n", "    ", "writer", "=", "make_output_format", "(", "unsupported_format", ",", "tmp_path", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "FormatUnsupportedError", ")", "as", "exec_info", ":", "\n", "        ", "image", "=", "Image", "(", "image", "=", "th", ".", "rand", "(", "16", ",", "16", ",", "3", ")", ",", "dataformats", "=", "\"HWC\"", ")", "\n", "writer", ".", "write", "(", "{", "\"image\"", ":", "image", "}", ",", "key_excluded", "=", "{", "\"image\"", ":", "(", ")", "}", ")", "\n", "", "assert", "unsupported_format", "in", "str", "(", "exec_info", ".", "value", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_report_figure_to_tensorboard": [[272, 283], ["pytest.importorskip", "matplotlib.pyplot.figure", "plt.figure.add_subplot().plot", "stable_baselines3.common.logger.Figure", "stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.write", "stable_baselines3.common.logger.make_output_format.close", "numpy.random.random", "plt.figure.add_subplot", "test_logger.read_log"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.read_log"], ["", "def", "test_report_figure_to_tensorboard", "(", "tmp_path", ",", "read_log", ")", ":", "\n", "    ", "pytest", ".", "importorskip", "(", "\"tensorboard\"", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "add_subplot", "(", ")", ".", "plot", "(", "np", ".", "random", ".", "random", "(", "3", ")", ")", "\n", "figure", "=", "Figure", "(", "figure", "=", "fig", ",", "close", "=", "True", ")", "\n", "writer", "=", "make_output_format", "(", "\"tensorboard\"", ",", "tmp_path", ")", "\n", "writer", ".", "write", "(", "{", "\"figure\"", ":", "figure", "}", ",", "key_excluded", "=", "{", "\"figure\"", ":", "(", ")", "}", ")", "\n", "\n", "assert", "not", "read_log", "(", "\"tensorboard\"", ")", ".", "empty", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_report_figure_to_unsupported_format_raises_error": [[285, 296], ["pytest.mark.parametrize", "stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.close", "pytest.raises", "matplotlib.pyplot.figure", "plt.figure.add_subplot().plot", "stable_baselines3.common.logger.Figure", "stable_baselines3.common.logger.make_output_format.write", "str", "numpy.random.random", "plt.figure.add_subplot"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.vec_env.vec_monitor.VecMonitor.close", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"unsupported_format\"", ",", "[", "\"stdout\"", ",", "\"log\"", ",", "\"json\"", ",", "\"csv\"", "]", ")", "\n", "def", "test_report_figure_to_unsupported_format_raises_error", "(", "tmp_path", ",", "unsupported_format", ")", ":", "\n", "    ", "writer", "=", "make_output_format", "(", "unsupported_format", ",", "tmp_path", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "FormatUnsupportedError", ")", "as", "exec_info", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "add_subplot", "(", ")", ".", "plot", "(", "np", ".", "random", ".", "random", "(", "3", ")", ")", "\n", "figure", "=", "Figure", "(", "figure", "=", "fig", ",", "close", "=", "True", ")", "\n", "writer", ".", "write", "(", "{", "\"figure\"", ":", "figure", "}", ",", "key_excluded", "=", "{", "\"figure\"", ":", "(", ")", "}", ")", "\n", "", "assert", "unsupported_format", "in", "str", "(", "exec_info", ".", "value", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_key_length": [[298, 327], ["stable_baselines3.common.logger.make_output_format", "stable_baselines3.common.logger.make_output_format.write", "stable_baselines3.common.logger.make_output_format.write", "pytest.raises", "stable_baselines3.common.logger.make_output_format.write"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.make_output_format", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.logger.TensorBoardOutputFormat.write"], ["", "def", "test_key_length", "(", "tmp_path", ")", ":", "\n", "    ", "writer", "=", "make_output_format", "(", "\"stdout\"", ",", "tmp_path", ")", "\n", "assert", "writer", ".", "max_length", "==", "36", "\n", "long_prefix", "=", "\"a\"", "*", "writer", ".", "max_length", "\n", "\n", "ok_dict", "=", "{", "\n", "# keys truncated but not aliased -- OK", "\n", "\"a\"", "+", "long_prefix", ":", "42", ",", "\n", "\"b\"", "+", "long_prefix", ":", "42", ",", "\n", "# values truncated and aliased -- also OK", "\n", "\"foobar\"", ":", "long_prefix", "+", "\"a\"", ",", "\n", "\"fizzbuzz\"", ":", "long_prefix", "+", "\"b\"", ",", "\n", "}", "\n", "ok_excluded", "=", "{", "k", ":", "None", "for", "k", "in", "ok_dict", "}", "\n", "writer", ".", "write", "(", "ok_dict", ",", "ok_excluded", ")", "\n", "\n", "long_key_dict", "=", "{", "\n", "long_prefix", "+", "\"a\"", ":", "42", ",", "\n", "\"foobar\"", ":", "\"sdf\"", ",", "\n", "long_prefix", "+", "\"b\"", ":", "42", ",", "\n", "}", "\n", "long_key_excluded", "=", "{", "k", ":", "None", "for", "k", "in", "long_key_dict", "}", "\n", "# keys truncated and aliased -- not OK", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "\"Key.*truncated\"", ")", ":", "\n", "        ", "writer", ".", "write", "(", "long_key_dict", ",", "long_key_excluded", ")", "\n", "\n", "# Just long enough to not be truncated now", "\n", "", "writer", ".", "max_length", "+=", "1", "\n", "writer", ".", "write", "(", "long_key_dict", ",", "long_key_excluded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_logger.test_fps_logger": [[361, 384], ["pytest.mark.parametrize", "test_logger.InMemoryLogger", "test_logger.TimeDelayEnv", "algo", "algo.set_logger", "algo.learn", "algo.learn", "algo.learn"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.set_logger", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"algo\"", ",", "[", "A2C", ",", "DQN", "]", ")", "\n", "def", "test_fps_logger", "(", "tmp_path", ",", "algo", ")", ":", "\n", "    ", "logger", "=", "InMemoryLogger", "(", ")", "\n", "max_fps", "=", "1000", "\n", "env", "=", "TimeDelayEnv", "(", "1", "/", "max_fps", ")", "\n", "model", "=", "algo", "(", "\"MlpPolicy\"", ",", "env", ",", "verbose", "=", "1", ")", "\n", "model", ".", "set_logger", "(", "logger", ")", "\n", "\n", "# fps should be at most max_fps", "\n", "model", ".", "learn", "(", "100", ",", "log_interval", "=", "1", ")", "\n", "assert", "max_fps", "/", "10", "<=", "logger", ".", "name_to_value", "[", "\"time/fps\"", "]", "<=", "max_fps", "\n", "\n", "# second time, FPS should be the same", "\n", "model", ".", "learn", "(", "100", ",", "log_interval", "=", "1", ")", "\n", "assert", "max_fps", "/", "10", "<=", "logger", ".", "name_to_value", "[", "\"time/fps\"", "]", "<=", "max_fps", "\n", "\n", "# Artificially increase num_timesteps to check", "\n", "# that fps computation is reset at each call to learn()", "\n", "model", ".", "num_timesteps", "=", "20_000", "\n", "\n", "# third time, FPS should be the same", "\n", "model", ".", "learn", "(", "100", ",", "log_interval", "=", "1", ",", "reset_num_timesteps", "=", "False", ")", "\n", "assert", "max_fps", "/", "10", "<=", "logger", ".", "name_to_value", "[", "\"time/fps\"", "]", "<=", "max_fps", "\n", "", ""]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_sde.test_state_dependent_exploration_grad": [[8, 55], ["torch.ones", "torch.manual_seed", "torch.distributions.Normal", "torch.distributions.Normal.rsample", "torch.rand", "torch.ones", "torch.mm", "torch.mm", "torch.distributions.Normal", "torch.distributions.Normal.log_prob().sum().mean", "action_dist.log_prob().sum().mean.backward", "torch.zeros_like", "range", "th.ones.grad.allclose", "torch.zeros_like", "torch.sqrt", "torch.sqrt", "range", "torch.distributions.Normal.log_prob().sum", "torch.distributions.Normal.log_prob", "action.detach"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_vec_normalize.allclose", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.log_prob"], ["def", "test_state_dependent_exploration_grad", "(", ")", ":", "\n", "    ", "\"\"\"\n    Check that the gradient correspond to the expected one\n    \"\"\"", "\n", "n_states", "=", "2", "\n", "state_dim", "=", "3", "\n", "action_dim", "=", "10", "\n", "sigma_hat", "=", "th", ".", "ones", "(", "state_dim", ",", "action_dim", ",", "requires_grad", "=", "True", ")", "\n", "# Reduce the number of parameters", "\n", "# sigma_ = th.ones(state_dim, action_dim) * sigma_", "\n", "# weights_dist = Normal(th.zeros_like(log_sigma), th.exp(log_sigma))", "\n", "th", ".", "manual_seed", "(", "2", ")", "\n", "weights_dist", "=", "Normal", "(", "th", ".", "zeros_like", "(", "sigma_hat", ")", ",", "sigma_hat", ")", "\n", "weights", "=", "weights_dist", ".", "rsample", "(", ")", "\n", "\n", "state", "=", "th", ".", "rand", "(", "n_states", ",", "state_dim", ")", "\n", "mu", "=", "th", ".", "ones", "(", "action_dim", ")", "\n", "noise", "=", "th", ".", "mm", "(", "state", ",", "weights", ")", "\n", "\n", "action", "=", "mu", "+", "noise", "\n", "\n", "variance", "=", "th", ".", "mm", "(", "state", "**", "2", ",", "sigma_hat", "**", "2", ")", "\n", "action_dist", "=", "Normal", "(", "mu", ",", "th", ".", "sqrt", "(", "variance", ")", ")", "\n", "\n", "# Sum over the action dimension because we assume they are independent", "\n", "loss", "=", "action_dist", ".", "log_prob", "(", "action", ".", "detach", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# From Rueckstiess paper: check that the computed gradient", "\n", "# correspond to the analytical form", "\n", "grad", "=", "th", ".", "zeros_like", "(", "sigma_hat", ")", "\n", "for", "j", "in", "range", "(", "action_dim", ")", ":", "\n", "# sigma_hat is the std of the gaussian distribution of the noise matrix weights", "\n", "# sigma_j = sum_j(state_i **2 * sigma_hat_ij ** 2)", "\n", "# sigma_j is the standard deviation of the policy gaussian distribution", "\n", "        ", "sigma_j", "=", "th", ".", "sqrt", "(", "variance", "[", ":", ",", "j", "]", ")", "\n", "for", "i", "in", "range", "(", "state_dim", ")", ":", "\n", "# Derivative of the log probability of the jth component of the action", "\n", "# w.r.t. the standard deviation sigma_j", "\n", "            ", "d_log_policy_j", "=", "(", "noise", "[", ":", ",", "j", "]", "**", "2", "-", "sigma_j", "**", "2", ")", "/", "sigma_j", "**", "3", "\n", "# Derivative of sigma_j w.r.t. sigma_hat_ij", "\n", "d_log_sigma_j", "=", "(", "state", "[", ":", ",", "i", "]", "**", "2", "*", "sigma_hat", "[", "i", ",", "j", "]", ")", "/", "sigma_j", "\n", "# Chain rule, average over the minibatch", "\n", "grad", "[", "i", ",", "j", "]", "=", "(", "d_log_policy_j", "*", "d_log_sigma_j", ")", ".", "mean", "(", ")", "\n", "\n", "# sigma.grad should be equal to grad", "\n", "", "", "assert", "sigma_hat", ".", "grad", ".", "allclose", "(", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_sde.test_sde_check": [[57, 60], ["pytest.raises", "stable_baselines3.PPO"], "function", ["None"], ["", "def", "test_sde_check", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "PPO", "(", "\"MlpPolicy\"", ",", "\"CartPole-v1\"", ",", "use_sde", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.tests.test_sde.test_state_dependent_noise": [[62, 80], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_class", "model_class.learn", "model_class.policy.reset_noise", "model_class.policy.actor.get_std", "dict"], "function", ["home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.base_class.BaseAlgorithm.learn", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.policies.ActorCriticPolicy.reset_noise", "home.repos.pwc.inspect_result.DLR-RM_stable-baselines3.common.distributions.StateDependentNoiseDistribution.get_std"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_class\"", ",", "[", "SAC", ",", "A2C", ",", "PPO", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"use_expln\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_state_dependent_noise", "(", "model_class", ",", "use_expln", ")", ":", "\n", "    ", "kwargs", "=", "{", "\"learning_starts\"", ":", "0", "}", "if", "model_class", "==", "SAC", "else", "{", "\"n_steps\"", ":", "64", "}", "\n", "model", "=", "model_class", "(", "\n", "\"MlpPolicy\"", ",", "\n", "\"Pendulum-v1\"", ",", "\n", "use_sde", "=", "True", ",", "\n", "seed", "=", "None", ",", "\n", "create_eval_env", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "policy_kwargs", "=", "dict", "(", "log_std_init", "=", "-", "2", ",", "use_expln", "=", "use_expln", ",", "net_arch", "=", "[", "64", "]", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "255", ",", "eval_freq", "=", "250", ")", "\n", "model", ".", "policy", ".", "reset_noise", "(", ")", "\n", "if", "model_class", "==", "SAC", ":", "\n", "        ", "model", ".", "policy", ".", "actor", ".", "get_std", "(", ")", "\n", "", "", ""]]}