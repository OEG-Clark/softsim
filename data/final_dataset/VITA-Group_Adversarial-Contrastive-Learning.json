{"home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.psudoSoftLabel_CIFAR10.__init__": [[35, 59], ["super().__init__", "torchvision.Compose", "torchvision.Compose", "enumerate", "print", "PIL.Image.fromarray().convert", "torchvision.Compose.", "img.cuda.cuda.cuda", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torchvision.ToTensor", "torchvision.ToTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "print", "pred.cpu().detach().numpy().tolist", "len", "PIL.Image.fromarray", "model.eval", "len", "pred.cpu().detach().numpy", "pred.cpu().detach", "pred.cpu"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "**", "kwds", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwds", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "label", "=", "[", "]", "\n", "# generate psudo label", "\n", "imgs", "=", "[", "]", "\n", "for", "cnt", ",", "img", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "transform_test", "(", "img", ")", "\n", "img", "=", "img", ".", "cuda", "(", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "\n", "if", "cnt", "%", "100", "==", "99", ":", "\n", "                ", "imgs", "=", "torch", ".", "stack", "(", "imgs", ")", "\n", "print", "(", "\"generating psudo label {}/{}\"", ".", "format", "(", "cnt", ",", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "pred", "=", "model", ".", "eval", "(", ")", "(", "imgs", ")", "\n", "self", ".", "label", "+=", "pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "imgs", "=", "[", "]", "\n", "\n", "", "", "print", "(", "\"len self.label is {}\"", ".", "format", "(", "len", "(", "self", ".", "label", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.psudoSoftLabel_CIFAR10.__getitem__": [[60, 69], ["PIL.Image.fromarray().convert", "train_trades_cifar10_semisupervised.psudoSoftLabel_CIFAR10.transform", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data", "[", "idx", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "psudoLabel", "=", "torch", ".", "FloatTensor", "(", "self", ".", "label", "[", "idx", "]", ")", "\n", "real_label", "=", "self", ".", "targets", "[", "idx", "]", "\n", "\n", "return", "img", ",", "psudoLabel", ",", "real_label", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.distillCrossEntropy.__init__": [[72, 76], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "T", ")", ":", "\n", "        ", "super", "(", "distillCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "T", "=", "T", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.distillCrossEntropy.forward": [[77, 88], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: prediction logits\n        :param target: target logits\n        :return: loss\n        \"\"\"", "\n", "log_likelihood", "=", "-", "F", ".", "log_softmax", "(", "inputs", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "sample_num", ",", "class_num", "=", "target", ".", "shape", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "log_likelihood", ",", "torch", ".", "softmax", "(", "target", "/", "self", ".", "T", ",", "dim", "=", "1", ")", ")", ")", "/", "sample_num", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.trade_loss_soft": [[90, 141], ["optimizer.zero_grad", "model.train", "torch.KLDivLoss", "train_trades_cifar10_semisupervised.distillCrossEntropy", "model.eval", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.pgd_attack", "model", "model", "model", "model", "nn.KLDivLoss.", "torch.log_softmax", "torch.softmax", "y_soft[].max", "torch.cross_entropy", "distillCrossEntropy.", "distillCrossEntropy."], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.pgd_attack"], ["", "", "def", "trade_loss_soft", "(", "model", ",", "\n", "x_natural", ",", "\n", "y", ",", "\n", "y_soft", ",", "\n", "optimizer", ",", "\n", "step_size", "=", "0.003", ",", "\n", "epsilon", "=", "0.031", ",", "\n", "perturb_steps", "=", "10", ",", "\n", "beta", "=", "1.0", ",", "\n", "distance", "=", "'l_inf'", ",", "\n", "trainmode", "=", "'adv'", ",", "\n", "flag_adv", "=", "None", ",", "\n", "T", "=", "0", ",", "\n", "alpha", "=", "0", ",", "\n", "rate_distill", "=", "1", ")", ":", "\n", "    ", "if", "trainmode", "==", "\"adv\"", ":", "\n", "# define KL-loss", "\n", "        ", "criterion_kl", "=", "nn", ".", "KLDivLoss", "(", "size_average", "=", "False", ")", "\n", "criterion_distill", "=", "distillCrossEntropy", "(", "T", "=", "T", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "# generate adversarial example", "\n", "y_atk", "=", "torch", ".", "cat", "(", "[", "y", ",", "y_soft", "[", "y", ".", "shape", "[", "0", "]", ":", "]", ".", "max", "(", "1", ")", "[", "1", "]", "]", ")", "\n", "x_adv", "=", "pgd_attack", "(", "model", ",", "x_natural", ",", "y_atk", ",", "None", ",", "alpha", "=", "step_size", ",", "eps", "=", "epsilon", ",", "iters", "=", "perturb_steps", ")", "\n", "\n", "# zero gradient", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "# calculate robust loss", "\n", "model", ".", "train", "(", ")", "\n", "assert", "trainmode", "==", "\"adv\"", "\n", "\n", "if", "flag_adv", "is", "None", ":", "\n", "        ", "logits", "=", "model", "(", "x_natural", ")", "\n", "", "else", ":", "\n", "        ", "logits", "=", "model", "(", "x_natural", ",", "flag_adv", ")", "\n", "\n", "", "if", "flag_adv", "is", "None", ":", "\n", "        ", "logits_adv", "=", "model", "(", "x_adv", ")", "\n", "", "else", ":", "\n", "        ", "logits_adv", "=", "model", "(", "x_adv", ",", "flag_adv", ")", "\n", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "logits_adv", "[", ":", "y", ".", "shape", "[", "0", "]", "]", ",", "y", ",", "reduction", "=", "'sum'", ")", "*", "(", "1.", "-", "alpha", ")", "/", "batch_size", "+", "criterion_distill", "(", "logits_adv", "[", ":", "y", ".", "shape", "[", "0", "]", "]", ",", "y_soft", "[", ":", "y", ".", "shape", "[", "0", "]", "]", ")", "*", "y_soft", "[", ":", "y", ".", "shape", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "*", "(", "T", "*", "T", "*", "rate_distill", "*", "alpha", ")", "/", "batch_size", "+", "criterion_distill", "(", "logits_adv", "[", "y", ".", "shape", "[", "0", "]", ":", "]", ",", "y_soft", "[", "y", ".", "shape", "[", "0", "]", ":", "]", ")", "*", "y_soft", "[", "y", ".", "shape", "[", "0", "]", ":", "]", ".", "shape", "[", "0", "]", "*", "(", "T", "*", "T", "*", "rate_distill", ")", "/", "batch_size", "\n", "\n", "\n", "loss_robust", "=", "(", "1.0", "/", "batch_size", ")", "*", "criterion_kl", "(", "F", ".", "log_softmax", "(", "logits_adv", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ")", "\n", "loss", "+=", "beta", "*", "loss_robust", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.train_epoch": [[143, 192], ["model.train", "scheduler.step", "log.info", "utils.AverageMeter", "utils.AverageMeter", "time.time", "enumerate", "enumerate", "next", "utils.AverageMeter.update", "optimizer.zero_grad", "train_trades_cifar10_semisupervised.trade_loss_soft", "trade_loss_soft.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.to", "softTarget.to", "target.to", "time.time", "time.time", "log.info", "len", "trade_loss_soft.item", "optimizer.state_dict", "len"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.trade_loss_soft", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["", "def", "train_epoch", "(", "epoch", ",", "model", ",", "labeled_loader", ",", "psudoSoftLabel_CIFAR10", ",", "device", ",", "optimizer", ",", "scheduler", ",", "log", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "log", ".", "info", "(", "\"current lr is {}\"", ".", "format", "(", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "dataTimeAve", "=", "AverageMeter", "(", ")", "\n", "totalTimeAve", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "psudolabeled_enum", "=", "enumerate", "(", "psudoSoftLabel_CIFAR10", ")", "\n", "# print(\"len labeled_loader is {}\".format(len(next(iter(labeled_loader)))))", "\n", "for", "batch_idx", ",", "(", "data", ",", "softTarget", ",", "target", ")", "in", "enumerate", "(", "labeled_loader", ")", ":", "\n", "        ", "batch_idx_unlabeled", ",", "(", "inputs_unlabeled", ",", "psudoSoftTarget", ",", "_", ")", "=", "next", "(", "psudolabeled_enum", ")", "\n", "data", ",", "softTarget", "=", "torch", ".", "cat", "(", "[", "data", ",", "inputs_unlabeled", "]", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "[", "softTarget", ",", "psudoSoftTarget", "]", ",", "dim", "=", "0", ")", "\n", "data", ",", "softTarget", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "softTarget", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "# print(\"acc is {}\".format((softTarget[:target.shape[0]].max(1)[1] == target).float().mean()))", "\n", "\n", "dataTime", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "dataTimeAve", ".", "update", "(", "dataTime", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate robust loss", "\n", "loss", "=", "trade_loss_soft", "(", "model", "=", "model", ",", "\n", "x_natural", "=", "data", ",", "\n", "y", "=", "target", ",", "\n", "y_soft", "=", "softTarget", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "perturb_steps", "=", "args", ".", "num_steps_train", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "trainmode", "=", "'adv'", ",", "\n", "T", "=", "args", ".", "T", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "\n", "rate_distill", "=", "args", ".", "rate_distill", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "totalTime", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "totalTimeAve", ".", "update", "(", "totalTime", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# print progress", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "log", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}\\tData time: {:.3f}\\tTotal time: {:.3f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "labeled_loader", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "labeled_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "dataTimeAve", ".", "avg", ",", "totalTimeAve", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.cvt_state_dict": [[194, 243], ["copy.deepcopy", "copy.deepcopy.items", "numpy.unique", "numpy.unique", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "state_dict.items", "list", "state_dict.items", "name_to_del.append", "name_to_del.append", "name_to_del.append", "copy.deepcopy.keys", "name_to_del.append", "name_to_del.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "name.replace", "name.replace", "name.replace", "name.replace"], "function", ["None"], ["", "", "", "def", "cvt_state_dict", "(", "state_dict", ",", "args", ",", "num_classes", "=", "10", ")", ":", "\n", "# deal with adv bn", "\n", "    ", "state_dict_new", "=", "copy", ".", "deepcopy", "(", "state_dict", ")", "\n", "\n", "if", "args", ".", "bnNameCnt", ">=", "0", ":", "\n", "        ", "for", "name", ",", "item", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'bn'", "in", "name", ":", "\n", "                ", "assert", "'bn_list'", "in", "name", "\n", "state_dict_new", "[", "name", ".", "replace", "(", "'.bn_list.{}'", ".", "format", "(", "args", ".", "bnNameCnt", ")", ",", "''", ")", "]", "=", "item", "\n", "", "", "", "elif", "args", ".", "use_advbn", ":", "\n", "        ", "bn_adv_show", "=", "False", "\n", "for", "name", ",", "item", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'bn'", "in", "name", "and", "'adv'", "in", "name", ":", "\n", "                ", "bn_adv_show", "=", "True", "\n", "state_dict_new", "[", "name", ".", "replace", "(", "'_adv'", ",", "''", ")", "]", "=", "item", "\n", "", "", "if", "not", "bn_adv_show", ":", "\n", "            ", "print", "(", "\"There no bn adv\"", ")", "\n", "assert", "False", "\n", "\n", "", "", "name_to_del", "=", "[", "]", "\n", "for", "name", ",", "item", "in", "state_dict_new", ".", "items", "(", ")", ":", "\n", "# print(name)", "\n", "        ", "if", "'bn'", "in", "name", "and", "'adv'", "in", "name", ":", "\n", "            ", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "if", "'bn_list'", "in", "name", ":", "\n", "            ", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "if", "'fc'", "in", "name", ":", "\n", "            ", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "", "for", "name", "in", "np", ".", "unique", "(", "name_to_del", ")", ":", "\n", "        ", "del", "state_dict_new", "[", "name", "]", "\n", "\n", "# deal with down sample layer", "\n", "", "keys", "=", "list", "(", "state_dict_new", ".", "keys", "(", ")", ")", "[", ":", "]", "\n", "name_to_del", "=", "[", "]", "\n", "for", "name", "in", "keys", ":", "\n", "        ", "if", "'downsample.conv'", "in", "name", ":", "\n", "            ", "state_dict_new", "[", "name", ".", "replace", "(", "'downsample.conv'", ",", "'downsample.0'", ")", "]", "=", "state_dict_new", "[", "name", "]", "\n", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "if", "'downsample.bn'", "in", "name", ":", "\n", "            ", "state_dict_new", "[", "name", ".", "replace", "(", "'downsample.bn'", ",", "'downsample.1'", ")", "]", "=", "state_dict_new", "[", "name", "]", "\n", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "", "for", "name", "in", "np", ".", "unique", "(", "name_to_del", ")", ":", "\n", "        ", "del", "state_dict_new", "[", "name", "]", "\n", "\n", "# zero init fc", "\n", "", "state_dict_new", "[", "'fc.weight'", "]", "=", "torch", ".", "zeros", "(", "num_classes", ",", "512", ")", ".", "to", "(", "state_dict", "[", "'conv1.weight'", "]", ".", "device", ")", "\n", "state_dict_new", "[", "'fc.bias'", "]", "=", "torch", ".", "zeros", "(", "num_classes", ")", ".", "to", "(", "state_dict", "[", "'conv1.weight'", "]", ".", "device", ")", "\n", "\n", "return", "state_dict_new", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades_cifar10_semisupervised.eval_test": [[245, 264], ["model.eval", "len", "log.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.eval", "output.max", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "loader", ",", "log", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "whole", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", ".", "eval", "(", ")", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "whole", "+=", "len", "(", "target", ")", "\n", "", "", "test_loss", "/=", "len", "(", "loader", ".", "dataset", ")", "\n", "log", ".", "info", "(", "'Test: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "whole", ",", "\n", "100.", "*", "correct", "/", "whole", ")", ")", "\n", "test_accuracy", "=", "correct", "/", "whole", "\n", "return", "test_loss", ",", "test_accuracy", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.trades.squared_l2_norm": [[10, 13], ["x.view", "x.unsqueeze"], "function", ["None"], ["def", "squared_l2_norm", "(", "x", ")", ":", "\n", "    ", "flattened", "=", "x", ".", "view", "(", "x", ".", "unsqueeze", "(", "0", ")", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "return", "(", "flattened", "**", "2", ")", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.trades.l2_norm": [[15, 17], ["squared_l2_norm().sqrt", "trades.squared_l2_norm"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.trades.squared_l2_norm"], ["", "def", "l2_norm", "(", "x", ")", ":", "\n", "    ", "return", "squared_l2_norm", "(", "x", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.trades.reset_model": [[19, 41], ["model.named_parameters", "model.named_parameters", "model.named_parameters"], "function", ["None"], ["", "def", "reset_model", "(", "model", ",", "fixmode", ")", ":", "\n", "    ", "if", "fixmode", "==", "'f1'", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "", "elif", "fixmode", "==", "'f2'", ":", "\n", "# fix previous three layers", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "(", "\"layer4\"", "in", "name", "or", "\"fc\"", "in", "name", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "", "", "", "elif", "fixmode", "==", "'f3'", ":", "\n", "# fix every layer except fc", "\n", "# fix previous four layers", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "(", "\"fc\"", "in", "name", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "", "", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.trades.trades_loss": [[43, 111], ["optimizer.zero_grad", "model.train", "torch.cross_entropy", "len", "torch.KLDivLoss", "model.eval", "torch.autograd.Variable", "utils.fix_bn", "model", "model", "x_natural.detach", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "model", "model", "nn.KLDivLoss.", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.log_softmax", "torch.softmax", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "model.eval", "nn.KLDivLoss.", "model.eval", "nn.KLDivLoss.", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.log_softmax", "torch.softmax", "torch.log_softmax", "torch.softmax", "grad.detach", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "model", "model", "model", "model"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.fix_bn"], ["", "", "def", "trades_loss", "(", "model", ",", "\n", "x_natural", ",", "\n", "y", ",", "\n", "optimizer", ",", "\n", "step_size", "=", "0.003", ",", "\n", "epsilon", "=", "0.031", ",", "\n", "perturb_steps", "=", "10", ",", "\n", "beta", "=", "1.0", ",", "\n", "distance", "=", "'l_inf'", ",", "\n", "trainmode", "=", "'adv'", ",", "\n", "fixbn", "=", "False", ",", "\n", "fixmode", "=", "''", ",", "\n", "flag_adv", "=", "None", ")", ":", "\n", "    ", "if", "trainmode", "==", "\"adv\"", ":", "\n", "        ", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "# define KL-loss", "\n", "criterion_kl", "=", "nn", ".", "KLDivLoss", "(", "size_average", "=", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# generate adversarial example", "\n", "x_adv", "=", "x_natural", ".", "detach", "(", ")", "+", "0.001", "*", "torch", ".", "randn", "(", "x_natural", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "if", "distance", "==", "'l_inf'", ":", "\n", "            ", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "                ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                    ", "if", "flag_adv", "is", "None", ":", "\n", "                        ", "model", ".", "eval", "(", ")", "\n", "loss_kl", "=", "criterion_kl", "(", "F", ".", "log_softmax", "(", "model", "(", "x_adv", ")", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "model", "(", "x_natural", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                        ", "model", ".", "eval", "(", ")", "\n", "loss_kl", "=", "criterion_kl", "(", "F", ".", "log_softmax", "(", "model", "(", "x_adv", ",", "flag_adv", ")", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "model", "(", "x_natural", ",", "flag_adv", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_kl", ",", "[", "x_adv", "]", ")", "[", "0", "]", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "x_natural", "-", "epsilon", ")", ",", "x_natural", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "", "elif", "distance", "==", "'l_2'", ":", "\n", "            ", "assert", "False", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "x_adv", "=", "Variable", "(", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# zero gradient", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "# calculate robust loss", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "fixbn", ":", "\n", "        ", "fix_bn", "(", "model", ",", "fixmode", ")", "\n", "\n", "", "if", "flag_adv", "is", "None", ":", "\n", "        ", "logits", "=", "model", "(", "x_natural", ")", "\n", "", "else", ":", "\n", "        ", "logits", "=", "model", "(", "x_natural", ",", "flag_adv", ")", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "\n", "if", "trainmode", "==", "\"adv\"", ":", "\n", "        ", "if", "flag_adv", "is", "None", ":", "\n", "            ", "logits_adv", "=", "model", "(", "x_adv", ")", "\n", "", "else", ":", "\n", "            ", "logits_adv", "=", "model", "(", "x_adv", ",", "flag_adv", ")", "\n", "\n", "", "loss_robust", "=", "(", "1.0", "/", "batch_size", ")", "*", "criterion_kl", "(", "F", ".", "log_softmax", "(", "logits_adv", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ")", "\n", "loss", "+=", "beta", "*", "loss_robust", "\n", "", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.test2adversarial.eval_test": [[38, 60], ["model.eval", "len", "log.info", "torch.no_grad", "torch.nn.functional.cross_entropy", "F.cross_entropy.sum().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.eval", "output.max", "F.cross_entropy.sum", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["def", "eval_test", "(", "model", ",", "device", ",", "loader", ",", "log", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "whole", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "output", "=", "model", ".", "eval", "(", ")", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "# print(\"loss attacked is {}\".format(loss))", "\n", "test_loss", "+=", "loss", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "whole", "+=", "len", "(", "target", ")", "\n", "", "", "test_loss", "/=", "len", "(", "loader", ".", "dataset", ")", "\n", "log", ".", "info", "(", "'Test: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "whole", ",", "\n", "100.", "*", "correct", "/", "whole", ")", ")", "\n", "test_accuracy", "=", "correct", "/", "whole", "\n", "return", "test_loss", ",", "test_accuracy", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.test2adversarial.main": [[62, 90], ["torchvision.transforms.Compose", "data.cifar10_c.CIFAR10C", "torch.utils.data.DataLoader", "models.resnet.resnet18().to", "torch.load", "resnet18().to.load_state_dict", "log.info", "test2adversarial.eval_test", "log.info", "torchvision.transforms.ToTensor", "models.resnet.resnet18"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnet18"], ["", "def", "main", "(", ")", ":", "\n", "    ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "test_datasets", "=", "CIFAR10C", "(", "root", "=", "args", ".", "data", ",", "transform", "=", "transform_test", ",", "attack_type", "=", "args", ".", "attack_type", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_datasets", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# init model, ResNet18() can be also used here for training", "\n", "model", "=", "resnet18", "(", "num_classes", "=", "10", ")", ".", "to", "(", "device", ")", "\n", "\n", "assert", "args", ".", "checkpoint", "!=", "''", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "checkpoint", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "log", ".", "info", "(", "'read checkpoint {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "_", ",", "tacc", "=", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "log", ")", "\n", "log", ".", "info", "(", "\"For attack type {}, tacc is {}\"", ".", "format", "(", "args", ".", "attack_type", ",", "tacc", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.train": [[131, 168], ["model.train", "utils.AverageMeter", "utils.AverageMeter", "time.time", "enumerate", "utils.AverageMeter.update", "optimizer.zero_grad", "trades.trades_loss", "trades.trades_loss.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "data.to", "target.to", "time.time", "time.time", "log.info", "len", "trades.trades_loss.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.trades.trades_loss", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ",", "log", ")", ":", "\n", "  ", "model", ".", "train", "(", ")", "\n", "\n", "dataTimeAve", "=", "AverageMeter", "(", ")", "\n", "totalTimeAve", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "    ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "dataTime", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "dataTimeAve", ".", "update", "(", "dataTime", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate robust loss", "\n", "loss", "=", "trades_loss", "(", "model", "=", "model", ",", "\n", "x_natural", "=", "data", ",", "\n", "y", "=", "target", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "perturb_steps", "=", "args", ".", "num_steps_train", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "trainmode", "=", "args", ".", "trainmode", ",", "\n", "fixbn", "=", "args", ".", "fixbn", ",", "\n", "fixmode", "=", "args", ".", "fixmode", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "totalTime", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "totalTimeAve", ".", "update", "(", "totalTime", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# print progress", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "      ", "log", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}\\tData time: {:.3f}\\tTotal time: {:.3f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "dataTimeAve", ".", "avg", ",", "totalTimeAve", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_train": [[170, 189], ["model.eval", "len", "log.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.eval", "output.max", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["", "", "", "def", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "log", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "whole", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "      ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", ".", "eval", "(", ")", "(", "data", ")", "\n", "train_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "whole", "+=", "len", "(", "target", ")", "\n", "", "", "train_loss", "/=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "log", ".", "info", "(", "'Training: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "whole", ",", "\n", "100.", "*", "correct", "/", "whole", ")", ")", "\n", "training_accuracy", "=", "correct", "/", "whole", "\n", "return", "train_loss", ",", "training_accuracy", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_test": [[191, 210], ["model.eval", "len", "log.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.eval", "output.max", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "loader", ",", "log", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "whole", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "data", ",", "target", "in", "loader", ":", "\n", "      ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", ".", "eval", "(", ")", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "whole", "+=", "len", "(", "target", ")", "\n", "", "", "test_loss", "/=", "len", "(", "loader", ".", "dataset", ")", "\n", "log", ".", "info", "(", "'Test: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "whole", ",", "\n", "100.", "*", "correct", "/", "whole", ")", ")", "\n", "test_accuracy", "=", "correct", "/", "whole", "\n", "return", "test_loss", ",", "test_accuracy", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.fix_model": [[212, 234], ["model.named_parameters", "print", "model.named_parameters", "print", "print", "print"], "function", ["None"], ["", "def", "fix_model", "(", "model", ",", "fixmode", ")", ":", "\n", "  ", "if", "fixmode", "==", "'f1'", ":", "\n", "# fix none", "\n", "    ", "pass", "\n", "", "elif", "fixmode", "==", "'f2'", ":", "\n", "# fix previous three layers", "\n", "    ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "      ", "print", "(", "name", ")", "\n", "if", "not", "(", "\"layer4\"", "in", "name", "or", "\"fc\"", "in", "name", ")", ":", "\n", "        ", "print", "(", "\"fix {}\"", ".", "format", "(", "name", ")", ")", "\n", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "elif", "fixmode", "==", "'f3'", ":", "\n", "# fix every layer except fc", "\n", "# fix previous four layers", "\n", "    ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "      ", "print", "(", "name", ")", "\n", "if", "not", "(", "\"fc\"", "in", "name", ")", ":", "\n", "        ", "print", "(", "\"fix {}\"", ".", "format", "(", "name", ")", ")", "\n", "param", ".", "requires_grad", "=", "False", "\n", "", "", "pass", "\n", "", "else", ":", "\n", "    ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.main": [[236, 371], ["models.resnet.resnet18().to", "torch.SGD", "list", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "train_trades.fix_model", "range", "torch.load", "torch.load", "torch.load", "resnet18().to.load_state_dict", "train_trades.eval_test", "utils.eval_adv_test", "log.info", "torch.load", "torch.load", "torch.load", "resnet18().to.load_state_dict", "train_trades.eval_test", "utils.eval_adv_test", "log.info", "resnet18().to.parameters", "map", "torch.load", "torch.load", "torch.load", "resnet18().to.load_state_dict", "log.info", "train_trades.eval_test", "train_trades.eval_test", "utils.eval_adv_test", "log.info", "torch.optim.lr_scheduler.MultiStepLR.step", "log.info", "train_trades.train", "print", "train_trades.eval_train", "train_trades.eval_test", "ta.append", "print", "ata.append", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "max", "max", "os.path.join", "os.path.join", "models.resnet.resnet18", "args.decreasing_lr.split", "train_trades.cvt_state_dict", "train_trades.eval_test", "utils.eval_adv_test", "log.info", "torch.load", "torch.load", "torch.load", "optim.SGD.load_state_dict", "range", "log.info", "log.info", "utils.eval_adv_test", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "resnet18().to.load_state_dict", "resnet18().to.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.step", "resnet18().to.state_dict", "optim.SGD.state_dict", "resnet18().to.state_dict", "optim.SGD.state_dict", "os.path.join", "os.path.join", "resnet18().to.state_dict", "optim.SGD.state_dict", "resnet18().to.state_dict", "optim.SGD.state_dict", "optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.fix_model", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.eval_adv_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.eval_adv_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.eval_adv_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnet18", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.cvt_state_dict", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.eval_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.eval_adv_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.eval_adv_test", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step"], ["", "", "def", "main", "(", ")", ":", "\n", "# init model, ResNet18() can be also used here for training", "\n", "  ", "model", "=", "resnet18", "(", "num_classes", "=", "num_classes", ")", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "decreasing_lr", "=", "list", "(", "map", "(", "int", ",", "args", ".", "decreasing_lr", ".", "split", "(", "','", ")", ")", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "decreasing_lr", ",", "gamma", "=", "0.1", ")", "\n", "\n", "start_epoch", "=", "args", ".", "start_epoch", "\n", "\n", "if", "args", ".", "checkpoint", "!=", "''", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "      ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "elif", "'P_state'", "in", "checkpoint", ":", "\n", "      ", "state_dict", "=", "checkpoint", "[", "'P_state'", "]", "\n", "", "else", ":", "\n", "      ", "state_dict", "=", "checkpoint", "\n", "\n", "", "if", "args", ".", "cvt_state_dict", ":", "\n", "      ", "state_dict", "=", "cvt_state_dict", "(", "state_dict", ",", "args", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "log", ".", "info", "(", "'read checkpoint {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "eval_test", "(", "model", ",", "device", ",", "vali_loader", ",", "log", ")", "\n", "\n", "if", "args", ".", "trainmode", "==", "'test'", ":", "\n", "      ", "_", ",", "tacc", "=", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "log", ")", "\n", "atacc", "=", "eval_adv_test", "(", "model", ",", "device", ",", "test_loader", ",", "epsilon", "=", "args", ".", "epsilon", ",", "alpha", "=", "args", ".", "step_size", ",", "criterion", "=", "F", ".", "cross_entropy", ",", "log", "=", "log", ",", "attack_iter", "=", "args", ".", "num_steps_test", ")", "\n", "log", ".", "info", "(", "\"tacc is {}, atacc is {}\"", ".", "format", "(", "tacc", ",", "atacc", ")", ")", "\n", "return", "\n", "", "", "elif", "args", ".", "resume", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'model.pt'", ")", ")", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "      ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "      ", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "    ", "if", "'epoch'", "in", "checkpoint", "and", "'optim'", "in", "checkpoint", ":", "\n", "      ", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "for", "i", "in", "range", "(", "start_epoch", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "", "log", ".", "info", "(", "\"resume the checkpoint {} from epoch {}\"", ".", "format", "(", "args", ".", "checkpoint", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "log", ".", "info", "(", "\"cannot resume since lack of files\"", ")", "\n", "assert", "False", "\n", "\n", "", "", "if", "args", ".", "eval_only", ":", "\n", "    ", "assert", "args", ".", "checkpoint", "!=", "''", "\n", "_", ",", "test_tacc", "=", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "log", ")", "\n", "test_atacc", "=", "eval_adv_test", "(", "model", ",", "device", ",", "test_loader", ",", "epsilon", "=", "args", ".", "epsilon", ",", "alpha", "=", "args", ".", "step_size", ",", "criterion", "=", "F", ".", "cross_entropy", ",", "log", "=", "log", ",", "attack_iter", "=", "args", ".", "num_steps_test", ")", "\n", "log", ".", "info", "(", "\"On the {}, test tacc is {}, test atacc is {}\"", ".", "format", "(", "args", ".", "checkpoint", ",", "test_tacc", ",", "test_atacc", ")", ")", "\n", "return", "\n", "\n", "", "ta", "=", "[", "]", "\n", "ata", "=", "[", "]", "\n", "best_prec1", "=", "0", "\n", "best_ata", "=", "0", "\n", "\n", "fix_model", "(", "model", ",", "args", ".", "fixmode", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", "+", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjust learning rate for SGD", "\n", "    ", "scheduler", ".", "step", "(", ")", "\n", "log", ".", "info", "(", "\"current lr is {}\"", ".", "format", "(", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "# adversarial training", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ",", "log", ")", "\n", "\n", "# evaluation on natural examples", "\n", "print", "(", "'================================================================'", ")", "\n", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "log", ")", "\n", "_", ",", "vali_tacc", "=", "eval_test", "(", "model", ",", "device", ",", "vali_loader", ",", "log", ")", "\n", "ta", ".", "append", "(", "vali_tacc", ")", "\n", "print", "(", "'================================================================'", ")", "\n", "\n", "# adv testing", "\n", "if", "args", ".", "trainmode", "!=", "'normal'", "or", "args", ".", "test_adv", ":", "\n", "      ", "vali_atacc", "=", "eval_adv_test", "(", "model", ",", "device", ",", "vali_loader", ",", "epsilon", "=", "args", ".", "epsilon", ",", "alpha", "=", "args", ".", "step_size", ",", "criterion", "=", "F", ".", "cross_entropy", ",", "log", "=", "log", ",", "attack_iter", "=", "args", ".", "num_steps_test", ")", "\n", "", "else", ":", "\n", "      ", "vali_atacc", "=", "0.001", "\n", "", "ata", ".", "append", "(", "vali_atacc", ")", "\n", "\n", "# save checkpoint", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'model.pt'", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'model_{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n", "is_best", "=", "vali_tacc", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "vali_tacc", ",", "best_prec1", ")", "\n", "\n", "ata_is_best", "=", "vali_atacc", ">", "best_ata", "\n", "best_ata", "=", "max", "(", "vali_atacc", ",", "best_ata", ")", "\n", "\n", "if", "is_best", ":", "\n", "      ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'best_model.pt'", ")", ")", "\n", "\n", "", "if", "ata_is_best", ":", "\n", "      ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'ata_best_model.pt'", ")", ")", "\n", "\n", "# read best_model and ata_best_model for testing", "\n", "", "", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'ata_best_model.pt'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "_", ",", "test_tacc", "=", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "log", ")", "\n", "test_atacc", "=", "eval_adv_test", "(", "model", ",", "device", ",", "test_loader", ",", "epsilon", "=", "args", ".", "epsilon", ",", "alpha", "=", "args", ".", "step_size", ",", "criterion", "=", "F", ".", "cross_entropy", ",", "log", "=", "log", ",", "attack_iter", "=", "args", ".", "num_steps_test", ")", "\n", "log", ".", "info", "(", "\"On the ata_best_model, test tacc is {}, test atacc is {}\"", ".", "format", "(", "test_tacc", ",", "test_atacc", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'best_model.pt'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "_", ",", "test_tacc", "=", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "log", ")", "\n", "test_atacc", "=", "eval_adv_test", "(", "model", ",", "device", ",", "test_loader", ",", "epsilon", "=", "args", ".", "epsilon", ",", "alpha", "=", "args", ".", "step_size", ",", "criterion", "=", "F", ".", "cross_entropy", ",", "log", "=", "log", ",", "attack_iter", "=", "args", ".", "num_steps_test", ")", "\n", "log", ".", "info", "(", "\"On the best_model, test tacc is {}, test atacc is {}\"", ".", "format", "(", "test_tacc", ",", "test_atacc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_trades.cvt_state_dict": [[373, 422], ["copy.deepcopy", "copy.deepcopy.items", "numpy.unique", "numpy.unique", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "state_dict.items", "list", "state_dict.items", "name_to_del.append", "name_to_del.append", "name_to_del.append", "copy.deepcopy.keys", "name_to_del.append", "name_to_del.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "name.replace", "name.replace", "name.replace", "name.replace"], "function", ["None"], ["", "def", "cvt_state_dict", "(", "state_dict", ",", "args", ",", "num_classes", ")", ":", "\n", "# deal with adv bn", "\n", "  ", "state_dict_new", "=", "copy", ".", "deepcopy", "(", "state_dict", ")", "\n", "\n", "if", "args", ".", "bnNameCnt", ">=", "0", ":", "\n", "    ", "for", "name", ",", "item", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "      ", "if", "'bn'", "in", "name", ":", "\n", "        ", "assert", "'bn_list'", "in", "name", "\n", "state_dict_new", "[", "name", ".", "replace", "(", "'.bn_list.{}'", ".", "format", "(", "args", ".", "bnNameCnt", ")", ",", "''", ")", "]", "=", "item", "\n", "", "", "", "elif", "args", ".", "use_advbn", ":", "\n", "    ", "bn_adv_show", "=", "False", "\n", "for", "name", ",", "item", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "      ", "if", "'bn'", "in", "name", "and", "'adv'", "in", "name", ":", "\n", "        ", "bn_adv_show", "=", "True", "\n", "state_dict_new", "[", "name", ".", "replace", "(", "'_adv'", ",", "''", ")", "]", "=", "item", "\n", "", "", "if", "not", "bn_adv_show", ":", "\n", "      ", "print", "(", "\"There no bn adv\"", ")", "\n", "assert", "False", "\n", "\n", "", "", "name_to_del", "=", "[", "]", "\n", "for", "name", ",", "item", "in", "state_dict_new", ".", "items", "(", ")", ":", "\n", "# print(name)", "\n", "    ", "if", "'bn'", "in", "name", "and", "'adv'", "in", "name", ":", "\n", "      ", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "if", "'bn_list'", "in", "name", ":", "\n", "      ", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "if", "'fc'", "in", "name", ":", "\n", "      ", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "", "for", "name", "in", "np", ".", "unique", "(", "name_to_del", ")", ":", "\n", "    ", "del", "state_dict_new", "[", "name", "]", "\n", "\n", "# deal with down sample layer", "\n", "", "keys", "=", "list", "(", "state_dict_new", ".", "keys", "(", ")", ")", "[", ":", "]", "\n", "name_to_del", "=", "[", "]", "\n", "for", "name", "in", "keys", ":", "\n", "      ", "if", "'downsample.conv'", "in", "name", ":", "\n", "          ", "state_dict_new", "[", "name", ".", "replace", "(", "'downsample.conv'", ",", "'downsample.0'", ")", "]", "=", "state_dict_new", "[", "name", "]", "\n", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "if", "'downsample.bn'", "in", "name", ":", "\n", "          ", "state_dict_new", "[", "name", ".", "replace", "(", "'downsample.bn'", ",", "'downsample.1'", ")", "]", "=", "state_dict_new", "[", "name", "]", "\n", "name_to_del", ".", "append", "(", "name", ")", "\n", "", "", "for", "name", "in", "np", ".", "unique", "(", "name_to_del", ")", ":", "\n", "      ", "del", "state_dict_new", "[", "name", "]", "\n", "\n", "# zero init fc", "\n", "", "state_dict_new", "[", "'fc.weight'", "]", "=", "torch", ".", "zeros", "(", "num_classes", ",", "512", ")", ".", "to", "(", "state_dict", "[", "'conv1.weight'", "]", ".", "device", ")", "\n", "state_dict_new", "[", "'fc.bias'", "]", "=", "torch", ".", "zeros", "(", "num_classes", ")", ".", "to", "(", "state_dict", "[", "'conv1.weight'", "]", ".", "device", ")", "\n", "\n", "return", "state_dict_new", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.cosine_annealing": [[34, 43], ["numpy.cos"], "function", ["None"], ["def", "cosine_annealing", "(", "step", ",", "total_steps", ",", "lr_max", ",", "lr_min", ",", "warmup_steps", "=", "0", ")", ":", "\n", "    ", "assert", "warmup_steps", ">=", "0", "\n", "\n", "if", "step", "<", "warmup_steps", ":", "\n", "        ", "lr", "=", "lr_max", "*", "step", "/", "warmup_steps", "\n", "", "else", ":", "\n", "        ", "lr", "=", "lr_min", "+", "(", "lr_max", "-", "lr_min", ")", "*", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "(", "step", "-", "warmup_steps", ")", "/", "(", "total_steps", "-", "warmup_steps", ")", "*", "np", ".", "pi", ")", ")", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.main": [[45, 196], ["parser.parse_args", "os.path.join", "utils.logger", "utils.logger.info", "utils.setup_seed", "models.resnet_multi_bn.resnet18", "models.resnet_multi_bn.proj_head", "models.resnet_multi_bn.resnet18.cuda", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.Compose", "torchvision.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "os.path.exists", "os.system", "str", "data.cifar10.CustomCIFAR10", "torchvision.CIFAR10", "torchvision.CIFAR10", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.load", "torch.load", "torch.load", "utils.logger.info", "train_simCLR.train", "train_simCLR.save_checkpoint", "torchvision.ColorJitter", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "data.cifar10.CustomCIFAR100", "torchvision.CIFAR100", "torchvision.CIFAR100", "print", "models.resnet_multi_bn.resnet18.parameters", "optimizer.lars.LARS", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "print", "models.resnet_multi_bn.resnet18.load_state_dict", "models.resnet_multi_bn.resnet18.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.optim.SGD.load_state_dict", "range", "utils.logger.info", "utils.logger.info", "train_simCLR.validate", "utils.logger.info", "utils.logger.info", "train_simCLR.save_checkpoint", "models.resnet_multi_bn.resnet18.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "os.path.join", "models.resnet_multi_bn.resnet18.load_state_dict", "models.resnet_multi_bn.resnet18.load_state_dict", "torch.optim.lr_scheduler.LambdaLR.step", "models.resnet_multi_bn.resnet18.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "models.resnet_multi_bn.resnet18.parameters", "len", "models.resnet_multi_bn.resnet18.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "train_simCLR.cosine_annealing", "len", "torch.optim.SGD.state_dict", "len", "len"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.setup_seed", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnet18", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.save_checkpoint", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.validate", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.save_checkpoint", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.cosine_annealing"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "dataset", "in", "[", "'cifar100'", ",", "'cifar10'", "]", "\n", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "'checkpoints'", ",", "args", ".", "experiment", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_dir", ")", "is", "not", "True", ":", "\n", "        ", "os", ".", "system", "(", "\"mkdir -p {}\"", ".", "format", "(", "save_dir", ")", ")", "\n", "\n", "", "log", "=", "logger", "(", "path", "=", "save_dir", ")", "\n", "log", ".", "info", "(", "str", "(", "args", ")", ")", "\n", "setup_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# different attack corresponding to different bn settings", "\n", "if", "not", "args", ".", "ACL_DS", ":", "\n", "        ", "bn_names", "=", "[", "'normal'", ",", "]", "\n", "", "else", ":", "\n", "        ", "bn_names", "=", "[", "'normal'", ",", "'pgd'", "]", "\n", "\n", "# define model", "\n", "", "model", "=", "resnet18", "(", "pretrained", "=", "False", ",", "bn_names", "=", "bn_names", ")", "\n", "\n", "ch", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "proj_head", "(", "ch", ",", "bn_names", "=", "bn_names", ",", "twoLayerProj", "=", "args", ".", "twoLayerProj", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "strength", "=", "1.0", "\n", "rnd_color_jitter", "=", "transforms", ".", "RandomApply", "(", "[", "transforms", ".", "ColorJitter", "(", "0.4", "*", "strength", ",", "0.4", "*", "strength", ",", "0.4", "*", "strength", ",", "0.1", "*", "strength", ")", "]", ",", "p", "=", "0.8", "*", "strength", ")", "\n", "rnd_gray", "=", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", "*", "strength", ")", "\n", "tfs_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "32", ",", "scale", "=", "(", "1.0", "-", "0.9", "*", "strength", ",", "1.0", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "rnd_color_jitter", ",", "\n", "rnd_gray", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "tfs_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "# dataset process", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_datasets", "=", "CustomCIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "transform", "=", "tfs_train", ",", "download", "=", "True", ")", "\n", "val_train_datasets", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "transform", "=", "tfs_test", ",", "download", "=", "True", ")", "\n", "test_datasets", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "transform", "=", "tfs_test", ",", "download", "=", "True", ")", "\n", "num_classes", "=", "10", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_datasets", "=", "CustomCIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "transform", "=", "tfs_train", ",", "download", "=", "True", ")", "\n", "val_train_datasets", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "transform", "=", "tfs_test", ",", "download", "=", "True", ")", "\n", "test_datasets", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "transform", "=", "tfs_test", ",", "download", "=", "True", ")", "\n", "num_classes", "=", "100", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"unknow dataset\"", ")", "\n", "assert", "False", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_datasets", ",", "\n", "num_workers", "=", "4", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "val_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_train_datasets", ",", "\n", "num_workers", "=", "4", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_datasets", ",", "\n", "num_workers", "=", "4", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n", "if", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'lars'", ":", "\n", "        ", "optimizer", "=", "LARS", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-6", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-6", ",", "momentum", "=", "0.9", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"no defined optimizer\"", ")", "\n", "assert", "False", "\n", "\n", "", "if", "args", ".", "scheduler", "==", "'constant'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "args", ".", "epochs", "*", "len", "(", "train_loader", ")", "*", "10", ",", "]", ",", "gamma", "=", "1", ")", "\n", "", "elif", "args", ".", "scheduler", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "\n", "lr_lambda", "=", "lambda", "step", ":", "cosine_annealing", "(", "step", ",", "\n", "args", ".", "epochs", "*", "len", "(", "train_loader", ")", ",", "\n", "1", ",", "# since lr_lambda computes multiplicative factor", "\n", "1e-6", "/", "args", ".", "lr", ",", "\n", "warmup_steps", "=", "10", "*", "len", "(", "train_loader", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"unknown schduler: {}\"", ".", "format", "(", "args", ".", "scheduler", ")", ")", "\n", "assert", "False", "\n", "\n", "", "start_epoch", "=", "1", "\n", "if", "args", ".", "checkpoint", "!=", "''", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "checkpoint", "==", "''", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'model.pt'", ")", ")", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "", "if", "'epoch'", "in", "checkpoint", "and", "'optim'", "in", "checkpoint", ":", "\n", "            ", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "for", "i", "in", "range", "(", "(", "start_epoch", "-", "1", ")", "*", "len", "(", "train_loader", ")", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "", "log", ".", "info", "(", "\"resume the checkpoint {} from epoch {}\"", ".", "format", "(", "args", ".", "checkpoint", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"cannot resume since lack of files\"", ")", "\n", "assert", "False", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "\n", "        ", "log", ".", "info", "(", "\"current lr is {}\"", ".", "format", "(", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "scheduler", ",", "epoch", ",", "log", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'model.pt'", ")", ")", "\n", "\n", "if", "epoch", "%", "100", "==", "0", "and", "epoch", ">", "0", ":", "\n", "# evaluate acc", "\n", "            ", "acc", ",", "tacc", "=", "validate", "(", "val_train_loader", ",", "test_loader", ",", "model", ",", "log", ",", "num_classes", "=", "num_classes", ")", "\n", "log", ".", "info", "(", "'train_accuracy {acc:.3f}'", "\n", ".", "format", "(", "acc", "=", "acc", ")", ")", "\n", "log", ".", "info", "(", "'test_accuracy {tacc:.3f}'", "\n", ".", "format", "(", "tacc", "=", "tacc", ")", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'tacc'", ":", "tacc", ",", "\n", "}", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'model_{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train": [[198, 245], ["utils.AverageMeter", "utils.AverageMeter.reset", "utils.AverageMeter", "utils.AverageMeter", "time.time", "enumerate", "utils.AverageMeter.update", "scheduler.step", "inputs.view().cuda.size", "inputs.view().cuda.view().cuda", "optimizer.zero_grad", "utils.nt_xent.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "time.time", "utils.nt_xent", "train_simCLR.PGD_contrastive", "float", "time.time", "log.info", "inputs.view().cuda.view", "model.train", "model.train", "model.train", "utils.nt_xent.detach().cpu", "utils.nt_xent", "utils.nt_xent", "len", "utils.nt_xent.detach"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.nt_xent", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.PGD_contrastive", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.train", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.nt_xent", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.nt_xent"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "scheduler", ",", "epoch", ",", "log", ",", "num_classes", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "losses", ".", "reset", "(", ")", "\n", "data_time_meter", "=", "AverageMeter", "(", ")", "\n", "train_time_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "data_time_meter", ".", "update", "(", "data_time", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "d", "=", "inputs", ".", "size", "(", ")", "\n", "# print(\"inputs origin shape is {}\".format(d))", "\n", "inputs", "=", "inputs", ".", "view", "(", "d", "[", "0", "]", "*", "2", ",", "d", "[", "2", "]", ",", "d", "[", "3", "]", ",", "d", "[", "4", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "not", "args", ".", "ACL_DS", ":", "\n", "            ", "features", "=", "model", ".", "train", "(", ")", "(", "inputs", ",", "'normal'", ")", "\n", "loss", "=", "nt_xent", "(", "features", ")", "\n", "", "else", ":", "\n", "            ", "inputs_adv", "=", "PGD_contrastive", "(", "model", ",", "inputs", ",", "iters", "=", "args", ".", "pgd_iter", ",", "singleImg", "=", "False", ")", "\n", "features_adv", "=", "model", ".", "train", "(", ")", "(", "inputs_adv", ",", "'pgd'", ")", "\n", "features", "=", "model", ".", "train", "(", ")", "(", "inputs", ",", "'normal'", ")", "\n", "loss", "=", "(", "nt_xent", "(", "features", ")", "+", "nt_xent", "(", "features_adv", ")", ")", "/", "2", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ",", "inputs", ".", "shape", "[", "0", "]", ")", "\n", "\n", "train_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "train_time_meter", ".", "update", "(", "train_time", ")", "\n", "\n", "# torch.cuda.empty_cache()", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "log", ".", "info", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'data_time: {data_time.val:.2f}\\t'", "\n", "'iter_train_time: {train_time.avg:.2f}\\t'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "loss", "=", "losses", ",", "\n", "data_time", "=", "data_time_meter", ",", "train_time", "=", "train_time_meter", ")", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.validate": [[247, 342], ["nn.CrossEntropyLoss", "criterion.cuda.cuda", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter.reset", "time.time", "model.parameters", "nn.Linear", "model.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "range", "model.cuda", "model.parameters", "model.parameters", "log.info", "enumerate", "log.info", "utils.AverageMeter", "utils.AverageMeter.reset", "utils.AverageMeter", "enumerate", "acc.append", "torch.optim.lr_scheduler.LambdaLR.step", "criterion.cuda.", "torch.optim.SGD.zero_grad", "criterion.backward", "torch.optim.SGD.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "inputs.cuda.cuda", "targets.cuda.cuda", "outputs.float.float", "criterion.float", "utils.AverageMeter.update", "utils.AverageMeter.update", "train_simCLR.cosine_annealing", "sample[].cuda", "sample[].cuda", "model.eval", "float", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "criterion.cuda.", "utils.accuracy", "criterion.item", "inputs.cuda.size", "prec1.item", "inputs.cuda.size", "log.info", "criterion.detach().cpu", "model.eval", "len", "len", "torch.optim.SGD.state_dict", "criterion.detach"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.cosine_annealing", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.accuracy", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["", "def", "validate", "(", "train_loader", ",", "val_loader", ",", "model", ",", "log", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "train_time_meter", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "losses", ".", "reset", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# train a fc on the representation", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "previous_fc", "=", "model", ".", "fc", "\n", "ch", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "ch", ",", "num_classes", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "epochs_max", "=", "100", "\n", "lr", "=", "0.1", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "0", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "\n", "lr_lambda", "=", "lambda", "step", ":", "cosine_annealing", "(", "step", ",", "\n", "epochs_max", "*", "len", "(", "train_loader", ")", ",", "\n", "1", ",", "# since lr_lambda computes multiplicative factor", "\n", "1e-6", "/", "lr", ",", "\n", "warmup_steps", "=", "0", ")", "\n", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs_max", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"current lr is {}\"", ".", "format", "(", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "for", "i", ",", "(", "sample", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "x", ",", "y", "=", "sample", "[", "0", "]", ".", "cuda", "(", ")", ",", "sample", "[", "1", "]", ".", "cuda", "(", ")", "\n", "p", "=", "model", ".", "eval", "(", ")", "(", "x", ",", "'normal'", ")", "\n", "loss", "=", "criterion", "(", "p", ",", "y", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "losses", ".", "update", "(", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "train_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "train_time_meter", ".", "update", "(", "train_time", ")", "\n", "\n", "", "log", ".", "info", "(", "'Test epoch: ({0})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'train_time: {train_time.avg:.2f}\\t'", ".", "format", "(", "\n", "epoch", ",", "loss", "=", "losses", ",", "train_time", "=", "train_time_meter", ")", ")", "\n", "\n", "", "acc", "=", "[", "]", "\n", "for", "loader", "in", "[", "train_loader", ",", "val_loader", "]", ":", "\n", "        ", "losses", "=", "AverageMeter", "(", ")", "\n", "losses", ".", "reset", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "model", ".", "eval", "(", ")", "(", "inputs", ",", "'normal'", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "outputs", "=", "outputs", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "log", ".", "info", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Accuracy {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "loader", ")", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "\n", "", "", "acc", ".", "append", "(", "top1", ".", "avg", ")", "\n", "\n", "# recover every thing", "\n", "", "model", ".", "fc", "=", "previous_fc", "\n", "model", ".", "cuda", "(", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.save_checkpoint": [[344, 349], ["torch.save", "torch.save", "torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "filename", "=", "'weight.pt'", ")", ":", "\n", "    ", "\"\"\"\n    Save the training model\n    \"\"\"", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.train_simCLR.PGD_contrastive": [[351, 386], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "range", "torch.clamp", "torch.clamp", "torch.clamp", "model.zero_grad", "utils.nt_xent", "utils.nt_xent.backward", "torch.clamp", "torch.clamp", "torch.clamp", "feature_gene", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.rand_like", "torch.rand_like", "torch.rand_like", "range", "torch.nn.Parameter.grad.sign", "model.eval", "model.eval", "range"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.nt_xent"], ["", "def", "PGD_contrastive", "(", "model", ",", "inputs", ",", "eps", "=", "8.", "/", "255.", ",", "alpha", "=", "2.", "/", "255.", ",", "iters", "=", "10", ",", "singleImg", "=", "False", ",", "feature_gene", "=", "None", ",", "sameBN", "=", "False", ")", ":", "\n", "# init", "\n", "    ", "delta", "=", "torch", ".", "rand_like", "(", "inputs", ")", "*", "eps", "*", "2", "-", "eps", "\n", "delta", "=", "torch", ".", "nn", ".", "Parameter", "(", "delta", ")", "\n", "\n", "if", "singleImg", ":", "\n", "# project half of the delta to be zero", "\n", "        ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "delta", ".", "data", ".", "shape", "[", "0", "]", ",", "2", ")", "]", "\n", "delta", ".", "data", "[", "idx", "]", "=", "torch", ".", "clamp", "(", "delta", ".", "data", "[", "idx", "]", ",", "min", "=", "0", ",", "max", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "iters", ")", ":", "\n", "        ", "if", "feature_gene", "is", "None", ":", "\n", "            ", "if", "sameBN", ":", "\n", "                ", "features", "=", "model", ".", "eval", "(", ")", "(", "inputs", "+", "delta", ",", "'normal'", ")", "\n", "", "else", ":", "\n", "                ", "features", "=", "model", ".", "eval", "(", ")", "(", "inputs", "+", "delta", ",", "'pgd'", ")", "\n", "", "", "else", ":", "\n", "            ", "features", "=", "feature_gene", "(", "model", ",", "inputs", "+", "delta", ",", "'eval'", ")", "\n", "\n", "", "model", ".", "zero_grad", "(", ")", "\n", "loss", "=", "nt_xent", "(", "features", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# print(\"loss is {}\".format(loss))", "\n", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "delta", ".", "grad", ".", "sign", "(", ")", "\n", "delta", ".", "grad", "=", "None", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", ".", "data", ",", "min", "=", "-", "eps", ",", "max", "=", "eps", ")", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "inputs", "+", "delta", ".", "data", ",", "min", "=", "0", ",", "max", "=", "1", ")", "-", "inputs", "\n", "\n", "if", "singleImg", ":", "\n", "# project half of the delta to be zero", "\n", "            ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "delta", ".", "data", ".", "shape", "[", "0", "]", ",", "2", ")", "]", "\n", "delta", ".", "data", "[", "idx", "]", "=", "torch", ".", "clamp", "(", "delta", ".", "data", "[", "idx", "]", ",", "min", "=", "0", ",", "max", "=", "0", ")", "\n", "\n", "", "", "return", "(", "inputs", "+", "delta", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.NormalizeByChannelMeanStd.__init__": [[21, 29], ["torch.Module.__init__", "utils.NormalizeByChannelMeanStd.register_buffer", "utils.NormalizeByChannelMeanStd.register_buffer", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "super", "(", "NormalizeByChannelMeanStd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "mean", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "mean", "=", "torch", ".", "tensor", "(", "mean", ")", "\n", "", "if", "not", "isinstance", "(", "std", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "std", "=", "torch", ".", "tensor", "(", "std", ")", "\n", "", "self", ".", "register_buffer", "(", "\"mean\"", ",", "mean", ")", "\n", "self", ".", "register_buffer", "(", "\"std\"", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.NormalizeByChannelMeanStd.forward": [[30, 32], ["utils.normalize_fn"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.utils.normalize_fn"], ["", "def", "forward", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "normalize_fn", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.NormalizeByChannelMeanStd.extra_repr": [[33, 35], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'mean={}, std={}'", ".", "format", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.__init__": [[187, 189], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.reset": [[190, 195], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update": [[196, 201], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.__init__": [[204, 206], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info": [[207, 211], ["print", "open", "f.write", "os.path.join"], "methods", ["None"], ["", "def", "info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "msg", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "\"log.txt\"", ")", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.augStrengthScheduler.__init__": [[283, 298], ["list", "list", "map", "map", "aug_dif_scheduler_strength_range.split", "aug_dif_scheduler_epoch_range.split", "len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "aug_dif_scheduler_strength_range", ",", "aug_dif_scheduler_epoch_range", ",", "transGeneFun", ")", ":", "\n", "        ", "if", "','", "in", "aug_dif_scheduler_strength_range", ":", "\n", "            ", "self", ".", "aug_dif_scheduler_strength_range", "=", "list", "(", "map", "(", "float", ",", "aug_dif_scheduler_strength_range", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "aug_dif_scheduler_strength_range", "=", "[", "]", "\n", "\n", "", "if", "','", "in", "aug_dif_scheduler_epoch_range", ":", "\n", "            ", "self", ".", "aug_dif_scheduler_epoch_range", "=", "list", "(", "map", "(", "int", ",", "aug_dif_scheduler_epoch_range", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "aug_dif_scheduler_epoch_range", "=", "[", "]", "\n", "", "self", ".", "transGeneFun", "=", "transGeneFun", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "(", "len", "(", "self", ".", "aug_dif_scheduler_strength_range", ")", "==", "2", "and", "len", "(", "self", ".", "aug_dif_scheduler_epoch_range", ")", "==", "2", ")", "or", "(", "len", "(", "self", ".", "aug_dif_scheduler_strength_range", ")", "==", "0", "and", "len", "(", "self", ".", "aug_dif_scheduler_epoch_range", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.augStrengthScheduler.step": [[299, 309], ["utils.augStrengthScheduler.transGeneFun", "utils.augStrengthScheduler.transGeneFun", "len", "len", "min", "max"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "\n", "if", "len", "(", "self", ".", "aug_dif_scheduler_strength_range", ")", "==", "0", "and", "len", "(", "self", ".", "aug_dif_scheduler_epoch_range", ")", "==", "0", ":", "\n", "            ", "return", "self", ".", "transGeneFun", "(", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "startStrength", ",", "endStrength", "=", "self", ".", "aug_dif_scheduler_strength_range", "\n", "startEpoch", ",", "endEpoch", "=", "self", ".", "aug_dif_scheduler_epoch_range", "\n", "strength", "=", "min", "(", "max", "(", "0", ",", "self", ".", "epoch", "-", "startEpoch", ")", ",", "endEpoch", "-", "startEpoch", ")", "/", "(", "endEpoch", "-", "startEpoch", ")", "*", "(", "endStrength", "-", "startStrength", ")", "+", "startStrength", "\n", "return", "self", ".", "transGeneFun", "(", "strength", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.normalize_fn": [[12, 18], ["tensor.sub().div", "tensor.sub"], "function", ["None"], ["def", "normalize_fn", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "    ", "\"\"\"Differentiable version of torchvision.functional.normalize\"\"\"", "\n", "# here we assume the color channel is in at dim=1", "\n", "mean", "=", "mean", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "return", "tensor", ".", "sub", "(", "mean", ")", ".", "div", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.pgd_attack": [[37, 72], ["torch.CrossEntropyLoss", "torch.nn.Parameter", "torch.nn.Parameter", "range", "model.zero_grad", "torch.zeros_like", "torch.zeros_like", "model.zero_grad", "nn.CrossEntropyLoss.", "torch.clamp", "torch.clamp", "model", "model", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp", "torch.clamp", "model.eval", "model.eval", "delta_grad.sign", "torch.rand_like", "torch.rand_like"], "function", ["None"], ["", "", "def", "pgd_attack", "(", "model", ",", "images", ",", "labels", ",", "device", ",", "eps", "=", "8.", "/", "255.", ",", "alpha", "=", "2.", "/", "255.", ",", "iters", "=", "20", ",", "advFlag", "=", "None", ",", "forceEval", "=", "True", ",", "randomInit", "=", "True", ")", ":", "\n", "# images = images.to(device)", "\n", "# labels = labels.to(device)", "\n", "    ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# init", "\n", "if", "randomInit", ":", "\n", "        ", "delta", "=", "torch", ".", "rand_like", "(", "images", ")", "*", "eps", "*", "2", "-", "eps", "\n", "", "else", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros_like", "(", "images", ")", "\n", "", "delta", "=", "torch", ".", "nn", ".", "Parameter", "(", "delta", ",", "requires_grad", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "iters", ")", ":", "\n", "        ", "if", "advFlag", "is", "None", ":", "\n", "            ", "if", "forceEval", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "", "outputs", "=", "model", "(", "images", "+", "delta", ")", "\n", "", "else", ":", "\n", "            ", "if", "forceEval", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "", "outputs", "=", "model", "(", "images", "+", "delta", ",", "advFlag", ")", "\n", "\n", "", "model", ".", "zero_grad", "(", ")", "\n", "cost", "=", "loss", "(", "outputs", ",", "labels", ")", "\n", "# cost.backward()", "\n", "delta_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "cost", ",", "[", "delta", "]", ")", "[", "0", "]", "\n", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "delta_grad", ".", "sign", "(", ")", "\n", "delta", ".", "grad", "=", "None", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", ".", "data", ",", "min", "=", "-", "eps", ",", "max", "=", "eps", ")", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "images", "+", "delta", ".", "data", ",", "min", "=", "0", ",", "max", "=", "1", ")", "-", "images", "\n", "\n", "", "model", ".", "zero_grad", "(", ")", "\n", "\n", "return", "(", "images", "+", "delta", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.eval_adv_test": [[74, 112], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "torch.manual_seed", "torch.manual_seed", "model.eval", "time.time", "enumerate", "log.info", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "input.to", "target.to", "utils.pgd_attack", "model.eval", "input.size", "criterion.item", "input.size", "log.info", "time.time", "len", "len"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.accuracy", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.pgd_attack", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["", "def", "eval_adv_test", "(", "model", ",", "device", ",", "test_loader", ",", "epsilon", ",", "alpha", ",", "criterion", ",", "log", ",", "attack_iter", "=", "40", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# fix random seed for testing", "\n", "torch", ".", "manual_seed", "(", "1", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "input", ",", "target", "=", "input", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "input_adv", "=", "pgd_attack", "(", "model", ",", "input", ",", "target", ",", "device", ",", "eps", "=", "epsilon", ",", "iters", "=", "attack_iter", ",", "alpha", "=", "alpha", ")", ".", "data", "\n", "\n", "# compute output", "\n", "output", "=", "model", ".", "eval", "(", ")", "(", "input_adv", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "%", "10", "==", "0", ")", "or", "(", "i", "==", "len", "(", "test_loader", ")", "-", "1", ")", ":", "\n", "            ", "log", ".", "info", "(", "\n", "'Test: [{}/{}]\\t'", "\n", "'Time: {batch_time.val:.4f}({batch_time.avg:.4f})\\t'", "\n", "'Loss: {loss.val:.3f}({loss.avg:.3f})\\t'", "\n", "'Prec@1: {top1.val:.3f}({top1.avg:.3f})\\t'", ".", "format", "(", "\n", "i", ",", "len", "(", "test_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", "\n", ")", "\n", ")", "\n", "\n", "", "", "log", ".", "info", "(", "' * Adv Prec@1 {top1.avg:.3f}'", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.eval_adv_test_dist": [[114, 160], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "torch.manual_seed", "torch.manual_seed", "model.eval", "time.time", "enumerate", "log.info", "model", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "input.cuda", "torch.cat.cuda", "utils.pgd_attack", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "input.size", "criterion.item", "input.size", "log.info", "range", "range", "time.time", "len", "len"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.accuracy", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.pgd_attack", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.logger.info"], ["", "def", "eval_adv_test_dist", "(", "model", ",", "device", ",", "test_loader", ",", "epsilon", ",", "alpha", ",", "criterion", ",", "log", ",", "world_size", ",", "attack_iter", "=", "40", ",", "randomInit", "=", "True", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# fix random seed for testing", "\n", "torch", ".", "manual_seed", "(", "1", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "input", ",", "target", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "input_adv", "=", "pgd_attack", "(", "model", ",", "input", ",", "target", ",", "device", ",", "eps", "=", "epsilon", ",", "iters", "=", "attack_iter", ",", "alpha", "=", "alpha", ",", "randomInit", "=", "randomInit", ")", ".", "data", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_adv", ")", "\n", "output_list", "=", "[", "torch", ".", "zeros_like", "(", "output", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "output_list", ",", "output", ")", "\n", "output", "=", "torch", ".", "cat", "(", "output_list", ")", "\n", "\n", "target_list", "=", "[", "torch", ".", "zeros_like", "(", "target", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "target_list", ",", "target", ")", "\n", "target", "=", "torch", ".", "cat", "(", "target_list", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "%", "10", "==", "0", ")", "or", "(", "i", "==", "len", "(", "test_loader", ")", "-", "1", ")", ":", "\n", "            ", "log", ".", "info", "(", "\n", "'Test: [{}/{}]\\t'", "\n", "'Time: {batch_time.val:.4f}({batch_time.avg:.4f})\\t'", "\n", "'Loss: {loss.val:.3f}({loss.avg:.3f})\\t'", "\n", "'Prec@1: {top1.val:.3f}({top1.avg:.3f})\\t'", ".", "format", "(", "\n", "i", ",", "len", "(", "test_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", "\n", ")", "\n", ")", "\n", "\n", "", "", "log", ".", "info", "(", "' * Adv Prec@1 {top1.avg:.3f}'", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.setup_seed": [[161, 167], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.accuracy": [[169, 183], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.fix_bn": [[213, 230], ["model.named_modules", "model.named_modules", "m.eval", "m.eval"], "function", ["None"], ["", "", "", "def", "fix_bn", "(", "model", ",", "fixmode", ")", ":", "\n", "    ", "if", "fixmode", "==", "'f1'", ":", "\n", "# fix none", "\n", "        ", "pass", "\n", "", "elif", "fixmode", "==", "'f2'", ":", "\n", "# fix previous three layers", "\n", "        ", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "not", "(", "\"layer4\"", "in", "name", "or", "\"fc\"", "in", "name", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "", "", "", "elif", "fixmode", "==", "'f3'", ":", "\n", "# fix every layer except fc", "\n", "# fix previous four layers", "\n", "        ", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "not", "(", "\"fc\"", "in", "name", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "", "", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.pair_cosine_similarity": [[233, 236], ["x.norm", "x.t", "x.norm.t"], "function", ["None"], ["", "", "def", "pair_cosine_similarity", "(", "x", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "n", "=", "x", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "(", "x", "@", "x", ".", "t", "(", ")", ")", "/", "(", "n", "*", "n", ".", "t", "(", ")", ")", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.nt_xent": [[238, 250], ["utils.pair_cosine_similarity", "torch.exp", "torch.exp", "torch.arange", "torch.arange", "torch.exp.diag", "torch.log().mean", "torch.log().mean", "torch.exp.size", "torch.exp.sum", "torch.exp", "torch.exp", "torch.tensor", "torch.tensor", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.pair_cosine_similarity"], ["", "def", "nt_xent", "(", "x", ",", "t", "=", "0.5", ")", ":", "\n", "# print(\"device of x is {}\".format(x.device))", "\n", "    ", "x", "=", "pair_cosine_similarity", "(", "x", ")", "\n", "x", "=", "torch", ".", "exp", "(", "x", "/", "t", ")", "\n", "idx", "=", "torch", ".", "arange", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "# Put positive pairs on the diagonal", "\n", "idx", "[", ":", ":", "2", "]", "+=", "1", "\n", "idx", "[", "1", ":", ":", "2", "]", "-=", "1", "\n", "x", "=", "x", "[", "idx", "]", "\n", "# subtract the similarity of 1 from the numerator", "\n", "x", "=", "x", ".", "diag", "(", ")", "/", "(", "x", ".", "sum", "(", "0", ")", "-", "torch", ".", "exp", "(", "torch", ".", "tensor", "(", "1", "/", "t", ")", ")", ")", "\n", "return", "-", "torch", ".", "log", "(", "x", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.None.utils.cvtPrevious2bnToCurrent2bn": [[252, 279], ["collections.OrderedDict", "state_dict.items", "print", "name.replace", "name.replace", "name.replace", "name.replace", "name.replace", "name.replace"], "function", ["None"], ["", "def", "cvtPrevious2bnToCurrent2bn", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param state_dict: old state dict with bn and bn adv\n    :return:\n    \"\"\"", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "(", "'bn1'", "in", "name", ")", "and", "(", "'adv'", "not", "in", "name", ")", ":", "\n", "            ", "newName", "=", "name", ".", "replace", "(", "'bn1.'", ",", "'bn1.bn_list.0.'", ")", "\n", "", "elif", "(", "'bn1'", "in", "name", ")", "and", "(", "'adv'", "in", "name", ")", ":", "\n", "            ", "newName", "=", "name", ".", "replace", "(", "'bn1_adv.'", ",", "'bn1.bn_list.1.'", ")", "\n", "", "elif", "(", "'bn2'", "in", "name", ")", "and", "(", "'adv'", "not", "in", "name", ")", ":", "\n", "            ", "newName", "=", "name", ".", "replace", "(", "'bn2.'", ",", "'bn2.bn_list.0.'", ")", "\n", "", "elif", "(", "'bn2'", "in", "name", ")", "and", "(", "'adv'", "in", "name", ")", ":", "\n", "            ", "newName", "=", "name", ".", "replace", "(", "'bn2_adv.'", ",", "'bn2.bn_list.1.'", ")", "\n", "", "elif", "(", "'bn.'", "in", "name", ")", ":", "\n", "            ", "newName", "=", "name", ".", "replace", "(", "'bn.'", ",", "'bn.bn_list.0.'", ")", "\n", "", "elif", "(", "'bn_adv.'", "in", "name", ")", ":", "\n", "            ", "newName", "=", "name", ".", "replace", "(", "'bn_adv.'", ",", "'bn.bn_list.1.'", ")", "\n", "", "elif", "'bn3'", "in", "name", ":", "\n", "            ", "assert", "False", "\n", "", "else", ":", "\n", "            ", "newName", "=", "name", "\n", "\n", "", "print", "(", "\"convert name: {} to {}\"", ".", "format", "(", "name", ",", "newName", ")", ")", "\n", "new_state_dict", "[", "newName", "]", "=", "value", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.BasicBlock.__init__": [[41, 58], ["torch.Module.__init__", "resnet_multi_bn.conv3x3", "resnet_multi_bn.batch_norm_multiple", "torch.ReLU", "torch.ReLU", "resnet_multi_bn.conv3x3", "resnet_multi_bn.batch_norm_multiple", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv3x3", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "bn_names", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "batch_norm_multiple", "(", "norm_layer", ",", "planes", ",", "bn_names", "=", "bn_names", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "batch_norm_multiple", "(", "norm_layer", ",", "planes", ",", "bn_names", "=", "bn_names", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.BasicBlock.forward": [[59, 83], ["resnet_multi_bn.BasicBlock.conv1", "resnet_multi_bn.BasicBlock.bn1", "resnet_multi_bn.BasicBlock.relu", "resnet_multi_bn.BasicBlock.conv2", "resnet_multi_bn.BasicBlock.bn2", "resnet_multi_bn.BasicBlock.relu", "resnet_multi_bn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "x", "[", "0", "]", "\n", "bn_name", "=", "x", "[", "1", "]", "\n", "\n", "# debug", "\n", "# print(\"bn_name: {}\".format(bn_name))", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "[", "out", ",", "bn_name", "]", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "[", "out", ",", "bn_name", "]", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "[", "0", "]", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "[", "out", ",", "bn_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.Bottleneck.__init__": [[89, 105], ["torch.Module.__init__", "resnet_multi_bn.conv1x1", "resnet_multi_bn.batch_norm_multiple", "resnet_multi_bn.conv3x3", "resnet_multi_bn.batch_norm_multiple", "resnet_multi_bn.conv1x1", "resnet_multi_bn.batch_norm_multiple", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv1x1", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv3x3", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "bn_names", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "batch_norm_multiple", "(", "norm_layer", ",", "width", ",", "bn_names", "=", "bn_names", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "batch_norm_multiple", "(", "norm_layer", ",", "width", ",", "bn_names", "=", "bn_names", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "batch_norm_multiple", "(", "norm_layer", ",", "planes", "*", "self", ".", "expansion", ",", "bn_names", "=", "bn_names", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.Bottleneck.forward": [[106, 132], ["resnet_multi_bn.Bottleneck.conv1", "resnet_multi_bn.Bottleneck.bn1", "resnet_multi_bn.Bottleneck.relu", "resnet_multi_bn.Bottleneck.conv2", "resnet_multi_bn.Bottleneck.bn2", "resnet_multi_bn.Bottleneck.relu", "resnet_multi_bn.Bottleneck.conv3", "resnet_multi_bn.Bottleneck.bn3", "resnet_multi_bn.Bottleneck.relu", "resnet_multi_bn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "x", "[", "0", "]", "\n", "bn_name", "=", "x", "[", "1", "]", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "[", "out", ",", "bn_name", "]", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "[", "out", ",", "bn_name", "]", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "[", "out", ",", "bn_name", "]", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "[", "0", "]", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "[", "out", ",", "bn_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.Downsample_multiple.__init__": [[135, 139], ["torch.Module.__init__", "resnet_multi_bn.conv1x1", "resnet_multi_bn.batch_norm_multiple"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "expansion", ",", "stride", ",", "norm_layer", ",", "bn_names", "=", "None", ")", ":", "\n", "        ", "super", "(", "Downsample_multiple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "conv1x1", "(", "inplanes", ",", "planes", "*", "expansion", ",", "stride", ")", "\n", "self", ".", "bn", "=", "batch_norm_multiple", "(", "norm_layer", ",", "planes", "*", "expansion", ",", "bn_names", "=", "bn_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.Downsample_multiple.forward": [[140, 151], ["resnet_multi_bn.Downsample_multiple.conv", "resnet_multi_bn.Downsample_multiple.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", "0", "]", "\n", "bn_name", "=", "x", "[", "1", "]", "\n", "# debug", "\n", "# print(\"adv attack: {}\".format(flag_adv))", "\n", "# print(\"out is {}\".format(out))", "\n", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "out", "=", "self", ".", "bn", "(", "[", "out", ",", "bn_name", "]", ")", "\n", "\n", "return", "[", "out", ",", "bn_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.batch_norm_multiple.__init__": [[154, 167], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "norm", "norm", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm", ",", "inplanes", ",", "bn_names", "=", "None", ")", ":", "\n", "        ", "super", "(", "batch_norm_multiple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# if no bn name input, by default use single bn", "\n", "self", ".", "bn_names", "=", "bn_names", "\n", "if", "self", ".", "bn_names", "is", "None", ":", "\n", "            ", "self", ".", "bn_list", "=", "norm", "(", "inplanes", ")", "\n", "return", "\n", "\n", "", "len_bn_names", "=", "len", "(", "bn_names", ")", "\n", "self", ".", "bn_list", "=", "nn", ".", "ModuleList", "(", "[", "norm", "(", "inplanes", ")", "for", "_", "in", "range", "(", "len_bn_names", ")", "]", ")", "\n", "self", ".", "bn_names_dict", "=", "{", "bn_name", ":", "i", "for", "i", ",", "bn_name", "in", "enumerate", "(", "bn_names", ")", "}", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.batch_norm_multiple.forward": [[168, 179], ["resnet_multi_bn.batch_norm_multiple.bn_list"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", "0", "]", "\n", "name_bn", "=", "x", "[", "1", "]", "\n", "\n", "if", "name_bn", "is", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn_list", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "bn_index", "=", "self", ".", "bn_names_dict", "[", "name_bn", "]", "\n", "out", "=", "self", ".", "bn_list", "[", "bn_index", "]", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.proj_head.__init__": [[182, 197], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "resnet_multi_bn.batch_norm_multiple", "torch.Linear", "torch.Linear", "resnet_multi_bn.batch_norm_multiple", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "resnet_multi_bn.batch_norm_multiple"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "bn_names", "=", "None", ",", "twoLayerProj", "=", "False", ")", ":", "\n", "        ", "super", "(", "proj_head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "ch", "\n", "self", ".", "twoLayerProj", "=", "twoLayerProj", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "ch", ",", "ch", ")", "\n", "self", ".", "bn1", "=", "batch_norm_multiple", "(", "nn", ".", "BatchNorm1d", ",", "ch", ",", "bn_names", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "ch", ",", "ch", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "batch_norm_multiple", "(", "nn", ".", "BatchNorm1d", ",", "ch", ",", "bn_names", ")", "\n", "\n", "if", "not", "twoLayerProj", ":", "\n", "            ", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "ch", ",", "ch", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "batch_norm_multiple", "(", "nn", ".", "BatchNorm1d", ",", "ch", ",", "bn_names", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.proj_head.forward": [[198, 217], ["resnet_multi_bn.proj_head.fc1", "resnet_multi_bn.proj_head.bn1", "resnet_multi_bn.proj_head.relu", "resnet_multi_bn.proj_head.fc2", "resnet_multi_bn.proj_head.bn2", "resnet_multi_bn.proj_head.relu", "resnet_multi_bn.proj_head.fc3", "resnet_multi_bn.proj_head.bn3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "bn_name", ")", ":", "\n", "# debug", "\n", "# print(\"adv attack: {}\".format(flag_adv))", "\n", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "[", "x", ",", "bn_name", "]", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "[", "x", ",", "bn_name", "]", ")", "\n", "\n", "if", "not", "self", ".", "twoLayerProj", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "[", "x", ",", "bn_name", "]", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.ResNet.__init__": [[220, 278], ["torch.Module.__init__", "utils.NormalizeByChannelMeanStd", "torch.Conv2d", "torch.Conv2d", "resnet_multi_bn.batch_norm_multiple", "torch.ReLU", "torch.ReLU", "torch.Identity", "torch.Identity", "resnet_multi_bn.ResNet._make_layer", "resnet_multi_bn.ResNet._make_layer", "resnet_multi_bn.ResNet._make_layer", "resnet_multi_bn.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_multi_bn.ResNet.modules", "len", "ValueError", "isinstance", "resnet_multi_bn.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "bn_names", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param bn_names: list, the name of bn that would be employed\n        \"\"\"", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "normalize", "=", "NormalizeByChannelMeanStd", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "self", ".", "bn_names", "=", "bn_names", "\n", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "batch_norm_multiple", "(", "norm_layer", ",", "self", ".", "inplanes", ",", "bn_names", "=", "self", ".", "bn_names", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "bn_names", "=", "self", ".", "bn_names", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "bn_names", "=", "self", ".", "bn_names", ",", "\n", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "bn_names", "=", "self", ".", "bn_names", ",", "\n", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "bn_names", "=", "self", ".", "bn_names", ",", "\n", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.ResNet._make_layer": [[279, 299], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "resnet_multi_bn.Downsample_multiple", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ",", "bn_names", "=", "None", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "Downsample_multiple", "(", "self", ".", "inplanes", ",", "planes", ",", "block", ".", "expansion", ",", "stride", ",", "norm_layer", ",", "bn_names", "=", "bn_names", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ",", "bn_names", "=", "bn_names", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "bn_names", "=", "bn_names", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.ResNet._forward_impl": [[300, 329], ["resnet_multi_bn.ResNet.normalize", "resnet_multi_bn.ResNet.conv1", "resnet_multi_bn.ResNet.bn1", "resnet_multi_bn.ResNet.relu", "resnet_multi_bn.ResNet.maxpool", "resnet_multi_bn.ResNet.layer1", "resnet_multi_bn.ResNet.layer2", "resnet_multi_bn.ResNet.layer3", "resnet_multi_bn.ResNet.layer4", "resnet_multi_bn.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "isinstance", "resnet_multi_bn.ResNet.fc", "resnet_multi_bn.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ",", "bn_name", "=", "None", ")", ":", "\n", "\n", "# debug", "\n", "# print(\"bn name: {}\".format(bn_name))", "\n", "\n", "# normalize", "\n", "        ", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "\n", "# See note [TorchScript super()]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "[", "x", ",", "bn_name", "]", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "[", "x", ",", "bn_name", "]", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", "[", "0", "]", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "fc", ",", "proj_head", ")", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ",", "bn_name", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.ResNet.forward": [[330, 332], ["resnet_multi_bn.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ",", "bn_name", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ",", "bn_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.conv1x1": [[32, 35], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn._resnet": [[334, 341], ["resnet_multi_bn.ResNet", "torchvision.models.utils.load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.resnet18": [[343, 353], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.resnet34": [[355, 365], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.resnet50": [[367, 377], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.resnet101": [[379, 389], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.resnet152": [[391, 401], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.resnext50_32x4d": [[403, 415], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.resnext101_32x8d": [[417, 429], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.wide_resnet50_2": [[431, 447], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet_multi_bn.wide_resnet101_2": [[449, 465], ["resnet_multi_bn._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.BasicBlock.__init__": [[40, 57], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv3x3", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.BasicBlock.forward": [[58, 75], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.Bottleneck.__init__": [[81, 97], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv1x1", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv3x3", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.Bottleneck.forward": [[98, 119], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet.__init__": [[123, 176], ["torch.Module.__init__", "utils.NormalizeByChannelMeanStd", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Identity", "torch.Identity", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "normalize", "=", "NormalizeByChannelMeanStd", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._make_layer": [[177, 200], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._forward_impl": [[201, 222], ["resnet.ResNet.normalize", "resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "\n", "# normalize", "\n", "        ", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "\n", "# See note [TorchScript super()]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet.forward": [[223, 225], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.conv1x1": [[31, 34], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet": [[227, 234], ["resnet.ResNet", "torchvision.models.utils.load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnet18": [[236, 246], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnet34": [[248, 258], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnet50": [[260, 270], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnet101": [[272, 282], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnet152": [[284, 294], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnext50_32x4d": [[296, 308], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.resnext101_32x8d": [[310, 322], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.wide_resnet50_2": [[324, 340], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet.wide_resnet101_2": [[342, 358], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.utils.NormalizeByChannelMeanStd.__init__": [[14, 22], ["torch.Module.__init__", "utils.NormalizeByChannelMeanStd.register_buffer", "utils.NormalizeByChannelMeanStd.register_buffer", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["# here we assume the color channel is in at dim=1", "\n", "mean", "=", "mean", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "return", "tensor", ".", "sub", "(", "mean", ")", ".", "div", "(", "std", ")", "\n", "\n", "\n", "", "class", "NormalizeByChannelMeanStd", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "super", "(", "NormalizeByChannelMeanStd", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.utils.NormalizeByChannelMeanStd.forward": [[23, 25], ["utils.normalize_fn"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.utils.normalize_fn"], ["if", "not", "isinstance", "(", "mean", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "mean", "=", "torch", ".", "tensor", "(", "mean", ")", "\n", "", "if", "not", "isinstance", "(", "std", ",", "torch", ".", "Tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.utils.NormalizeByChannelMeanStd.extra_repr": [[26, 28], ["None"], "methods", ["None"], ["            ", "std", "=", "torch", ".", "tensor", "(", "std", ")", "\n", "", "self", ".", "register_buffer", "(", "\"mean\"", ",", "mean", ")", "\n", "self", ".", "register_buffer", "(", "\"std\"", ",", "std", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.models.utils.normalize_fn": [[5, 11], ["tensor.sub().div", "tensor.sub"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "import", "random", "\n", "import", "copy", "\n", "from", "pdb", "import", "set_trace", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.data.cifar10_c.CIFAR10C.__init__": [[10, 17], ["os.path.join", "os.path.join", "numpy.load", "numpy.load().astype", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "severity", "=", "5", ",", "attack_type", "=", "''", ")", ":", "\n", "        ", "dataPath", "=", "join", "(", "root", ",", "'{}.npy'", ".", "format", "(", "attack_type", ")", ")", "\n", "labelPath", "=", "join", "(", "root", ",", "'labels.npy'", ")", "\n", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "dataPath", ")", "#[(severity - 1) * 10000: severity * 10000]", "\n", "self", ".", "label", "=", "np", ".", "load", "(", "labelPath", ")", ".", "astype", "(", "np", ".", "long", ")", "#[(severity - 1) * 10000: severity * 10000]", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.data.cifar10_c.CIFAR10C.__getitem__": [[21, 32], ["PIL.Image.fromarray().convert", "cifar10_c.CIFAR10C.transform", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "data", "[", "idx", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.data.cifar10_c.CIFAR10C.__len__": [[33, 35], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.data.cifar10.CustomCIFAR10.__init__": [[6, 13], ["torchvision.datasets.CIFAR10.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "withLabel", "=", "False", ",", "labelSubSet", "=", "None", ",", "labelTrans", "=", "None", ",", "**", "kwds", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwds", ")", "\n", "self", ".", "withLabel", "=", "withLabel", "\n", "self", ".", "labelTrans", "=", "labelTrans", "\n", "\n", "if", "labelSubSet", "is", "not", "None", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "labelSubSet", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.data.cifar10.CustomCIFAR10.__getitem__": [[14, 27], ["PIL.Image.fromarray().convert", "cifar10.CustomCIFAR10.transform", "cifar10.CustomCIFAR10.transform", "torch.stack", "cifar10.CustomCIFAR10.labelTrans", "PIL.Image.fromarray", "torch.stack"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# if not self.train:", "\n", "#     return super().__getitem__(idx)", "\n", "\n", "        ", "img", "=", "self", ".", "data", "[", "idx", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "imgs", "=", "[", "self", ".", "transform", "(", "img", ")", ",", "self", ".", "transform", "(", "img", ")", "]", "\n", "if", "not", "self", ".", "withLabel", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "imgs", ")", "\n", "", "else", ":", "\n", "            ", "imgLabelTrans", "=", "self", ".", "labelTrans", "(", "img", ")", "\n", "label", "=", "self", ".", "targets", "[", "idx", "]", "\n", "return", "torch", ".", "stack", "(", "imgs", ")", ",", "imgLabelTrans", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.data.cifar10.CustomCIFAR100.__init__": [[30, 34], ["torchvision.datasets.CIFAR100.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "withLabel", "=", "False", ",", "labelTrans", "=", "None", ",", "**", "kwds", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwds", ")", "\n", "self", ".", "withLabel", "=", "withLabel", "\n", "self", ".", "labelTrans", "=", "labelTrans", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.data.cifar10.CustomCIFAR100.__getitem__": [[35, 48], ["PIL.Image.fromarray().convert", "cifar10.CustomCIFAR100.transform", "cifar10.CustomCIFAR100.transform", "torch.stack", "cifar10.CustomCIFAR100.labelTrans", "PIL.Image.fromarray", "torch.stack"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# if not self.train:", "\n", "#     return super().__getitem__(idx)", "\n", "\n", "        ", "img", "=", "self", ".", "data", "[", "idx", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "imgs", "=", "[", "self", ".", "transform", "(", "img", ")", ",", "self", ".", "transform", "(", "img", ")", "]", "\n", "if", "not", "self", ".", "withLabel", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "imgs", ")", "\n", "", "else", ":", "\n", "            ", "imgLabelTrans", "=", "self", ".", "labelTrans", "(", "img", ")", "\n", "label", "=", "self", ".", "targets", "[", "idx", "]", "\n", "return", "torch", ".", "stack", "(", "imgs", ")", ",", "imgLabelTrans", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__": [[29, 46], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", ".9", ",", "\n", "weight_decay", "=", ".0005", ",", "eta", "=", "0.001", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", "\n", ".", "format", "(", "weight_decay", ")", ")", "\n", "", "if", "eta", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid LARS coefficient value: {}\"", ".", "format", "(", "eta", ")", ")", "\n", "\n", "", "self", ".", "epoch", "=", "0", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "eta", "=", "eta", ")", "\n", "super", "(", "LARS", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_Adversarial-Contrastive-Learning.optimizer.lars.LARS.step": [[47, 108], ["closure", "enumerate", "torch.norm", "torch.norm", "torch.zeros_like.mul_().add_", "p.data.add_", "torch.zeros_like", "torch.zeros_like.mul_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "gradMulti", "=", "1", ",", "epoch", "=", "None", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n            epoch: current epoch to calculate polynomial LR decay schedule.\n                   if None, uses self.epoch and increments it.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "epoch", "\n", "self", ".", "epoch", "+=", "1", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "eta", "=", "group", "[", "'eta'", "]", "\n", "lr", "=", "group", "[", "'lr'", "]", "\n", "# max_epoch = group['max_epoch']", "\n", "\n", "for", "cnt", ",", "p", "in", "enumerate", "(", "group", "[", "'params'", "]", ")", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "d_p", "=", "p", ".", "grad", ".", "data", "*", "gradMulti", "\n", "\n", "# if cnt == 0:", "\n", "#     print(\"d_p is {}\".format(d_p * gradMulti))", "\n", "\n", "weight_norm", "=", "torch", ".", "norm", "(", "p", ".", "data", ")", "\n", "grad_norm", "=", "torch", ".", "norm", "(", "d_p", ")", "\n", "\n", "# Global LR computed on polynomial decay schedule", "\n", "# decay = (1 - float(epoch) / max_epoch) ** 2", "\n", "global_lr", "=", "lr", "\n", "\n", "# Compute local learning rate for this layer", "\n", "local_lr", "=", "eta", "*", "weight_norm", "/", "(", "grad_norm", "+", "weight_decay", "*", "weight_norm", ")", "\n", "\n", "# if len(local_lr[(weight_norm < 1e-15) | (grad_norm < 1e-15)]) > 0:", "\n", "#     print(\"len zeros is {}\".format(len(local_lr[(weight_norm < 1e-15) | (grad_norm < 1e-15)])))", "\n", "local_lr", "[", "(", "weight_norm", "<", "1e-15", ")", "|", "(", "grad_norm", "<", "1e-15", ")", "]", "=", "1.0", "\n", "\n", "# Update the momentum term", "\n", "actual_lr", "=", "local_lr", "*", "global_lr", "\n", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "actual_lr", ",", "d_p", "+", "weight_decay", "*", "p", ".", "data", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "buf", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]]}