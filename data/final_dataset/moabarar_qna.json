{"home.repos.pwc.inspect_result.moabarar_qna.None.main.main": [[28, 51], ["tensorflow.config.experimental.set_visible_devices", "absl.logging.info", "absl.logging.info", "clu.platform.work_unit().set_task_status", "clu.platform.work_unit().create_artifact", "len", "absl.app.UsageError", "jax.process_index", "jax.process_count", "jax.local_devices", "absl.logging.info", "eval.evaluate", "absl.logging.info", "train.train_and_evaluate", "clu.platform.work_unit", "clu.platform.work_unit", "jax.process_index", "jax.process_count"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.eval.evaluate", "home.repos.pwc.inspect_result.moabarar_qna.None.train.train_and_evaluate"], ["def", "main", "(", "argv", ")", ":", "\n", "  ", "if", "len", "(", "argv", ")", ">", "1", ":", "\n", "    ", "raise", "app", ".", "UsageError", "(", "'Too many command-line arguments.'", ")", "\n", "\n", "# Hide any GPUs form TensorFlow. Otherwise TF might reserve memory and make", "\n", "# it unavailable to JAX.", "\n", "", "tf", ".", "config", ".", "experimental", ".", "set_visible_devices", "(", "[", "]", ",", "'GPU'", ")", "\n", "\n", "logging", ".", "info", "(", "'JAX process: %d / %d'", ",", "jax", ".", "process_index", "(", ")", ",", "jax", ".", "process_count", "(", ")", ")", "\n", "logging", ".", "info", "(", "'JAX local devices: %r'", ",", "jax", ".", "local_devices", "(", ")", ")", "\n", "\n", "# Add a note so that we can tell which task is which JAX host.", "\n", "# (Depending on the platform task 0 is not guaranteed to be host 0)", "\n", "platform", ".", "work_unit", "(", ")", ".", "set_task_status", "(", "f'process_index: {jax.process_index()}, '", "\n", "f'process_count: {jax.process_count()}'", ")", "\n", "platform", ".", "work_unit", "(", ")", ".", "create_artifact", "(", "platform", ".", "ArtifactType", ".", "DIRECTORY", ",", "\n", "FLAGS", ".", "workdir", ",", "'workdir'", ")", "\n", "if", "FLAGS", ".", "eval_only", ":", "\n", "    ", "logging", ".", "info", "(", "'========= Start Evaluation ========='", ")", "\n", "eval", ".", "evaluate", "(", "FLAGS", ".", "config", ",", "FLAGS", ".", "workdir", ")", "\n", "", "else", ":", "\n", "    ", "logging", ".", "info", "(", "'========= Start Training ========='", ")", "\n", "train", ".", "train_and_evaluate", "(", "FLAGS", ".", "config", ",", "FLAGS", ".", "workdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.eval.cross_entropy_loss": [[36, 44], ["optax.softmax_cross_entropy", "jax.mean", "len", "flax.training.common_utils.onehot"], "function", ["None"], ["def", "cross_entropy_loss", "(", "logits", ",", "labels", ",", "num_classes", "=", "10", ")", ":", "\n", "  ", "if", "len", "(", "labels", ".", "shape", ")", "==", "1", ":", "\n", "# Convert one-hot labels to single values if appliable.", "\n", "    ", "one_hot_labels", "=", "common_utils", ".", "onehot", "(", "labels", ",", "num_classes", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "    ", "one_hot_labels", "=", "labels", "\n", "", "xentropy", "=", "optax", ".", "softmax_cross_entropy", "(", "logits", "=", "logits", ",", "labels", "=", "one_hot_labels", ")", "\n", "return", "jnp", ".", "mean", "(", "xentropy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.eval.compute_metrics": [[46, 58], ["eval.cross_entropy_loss", "jax.lax.pmean", "len", "jax.mean", "jax.mean", "jax.argmax", "jax.argmax", "jax.argmax"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.cross_entropy_loss"], ["", "def", "compute_metrics", "(", "logits", ",", "labels", ",", "num_classes", "=", "10", ")", ":", "\n", "  ", "loss", "=", "cross_entropy_loss", "(", "logits", ",", "labels", ",", "num_classes", ")", "\n", "if", "len", "(", "labels", ".", "shape", ")", "==", "1", ":", "\n", "    ", "accuracy", "=", "jnp", ".", "mean", "(", "jnp", ".", "argmax", "(", "logits", ",", "-", "1", ")", "==", "labels", ")", "\n", "", "else", ":", "\n", "    ", "accuracy", "=", "jnp", ".", "mean", "(", "jnp", ".", "argmax", "(", "logits", ",", "-", "1", ")", "==", "jnp", ".", "argmax", "(", "labels", ",", "-", "1", ")", ")", "\n", "", "metrics", "=", "{", "\n", "'loss'", ":", "loss", ",", "\n", "'accuracy'", ":", "accuracy", ",", "\n", "}", "\n", "metrics", "=", "lax", ".", "pmean", "(", "metrics", ",", "axis_name", "=", "'batch'", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.eval.prepare_tf_data": [[60, 76], ["jax.local_device_count", "jax.local_device_count", "jax.tree_map", "jax.tree_map", "x._numpy._numpy", "len", "x._numpy.reshape"], "function", ["None"], ["", "def", "prepare_tf_data", "(", "xs", ")", ":", "\n", "  ", "\"\"\"Convert a input batch from tf Tensors to numpy arrays.\"\"\"", "\n", "local_device_count", "=", "jax", ".", "local_device_count", "(", ")", "\n", "\n", "def", "_prepare", "(", "x", ")", ":", "\n", "# Use _numpy() for zero-copy conversion between TF and NumPy.", "\n", "    ", "x", "=", "x", ".", "_numpy", "(", ")", "# pylint: disable=protected-access", "\n", "\n", "# reshape (host_batch_size, height, width, 3) to", "\n", "# (local_devices, device_batch_size, height, width, 3)", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "4", ":", "\n", "      ", "return", "x", ".", "reshape", "(", "(", "local_device_count", ",", "-", "1", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "      ", "return", "x", "\n", "\n", "", "", "return", "jax", ".", "tree_map", "(", "_prepare", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.eval.create_input_iter": [[78, 93], ["data.input_pipeline.create_split", "map", "flax.jax_utils.prefetch_to_device"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.create_split"], ["", "def", "create_input_iter", "(", "dataset_builder", ",", "config", ",", "rng", ",", "batch_size", ",", "train", ",", "image_size", ",", "dtype", ",", "cache", ")", ":", "\n", "  ", "ds", "=", "input_pipeline", ".", "create_split", "(", "\n", "dataset_builder", ",", "\n", "config", ",", "\n", "rng", ",", "\n", "batch_size", ",", "\n", "train", "=", "train", ",", "\n", "image_size", "=", "image_size", ",", "\n", "dtype", "=", "dtype", ",", "\n", "cache", "=", "cache", ",", "\n", "drop_remainder", "=", "False", ",", "\n", "num_epochs", "=", "1", ")", "\n", "it", "=", "map", "(", "prepare_tf_data", ",", "ds", ")", "\n", "it", "=", "jax_utils", ".", "prefetch_to_device", "(", "it", ",", "10", ")", "\n", "return", "it", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.eval.get_model_params": [[95, 109], ["flax.training.checkpoints.restore_checkpoint", "flax.core.frozen_dict.freeze", "checkpoints.restore_checkpoint.keys", "ValueError", "checkpoints.restore_checkpoint.keys", "checkpoints.restore_checkpoint.keys"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.restore_checkpoint"], ["", "def", "get_model_params", "(", "workdir", ")", ":", "\n", "  ", "restored", "=", "checkpoints", ".", "restore_checkpoint", "(", "workdir", ",", "target", "=", "None", ")", "\n", "if", "'params'", "not", "in", "restored", ".", "keys", "(", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Checkpoint corrupted - model params not available'", ")", "\n", "\n", "", "params", "=", "frozen_dict", ".", "freeze", "(", "restored", "[", "'params'", "]", ")", "\n", "batch_stats", "=", "None", "\n", "if", "'batch_stats'", "in", "restored", ".", "keys", "(", ")", ":", "\n", "    ", "batch_stats", "=", "restored", "[", "'batch_stats'", "]", "\n", "\n", "", "step", "=", "-", "1", "\n", "if", "'step'", "in", "restored", ".", "keys", "(", ")", ":", "\n", "    ", "step", "=", "restored", "[", "'step'", "]", "\n", "", "return", "params", ",", "batch_stats", ",", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.eval._get_data_iter": [[116, 144], ["data.input_pipeline.get_dataset_builder", "eval.create_input_iter", "ValueError", "jax.local_device_count", "jax.local_device_count", "jax.device_count", "jax.device_count", "jax.local_devices", "jax.local_devices"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_dataset_builder", "home.repos.pwc.inspect_result.moabarar_qna.None.train.create_input_iter"], ["def", "_get_data_iter", "(", "config", ":", "ml_collections", ".", "ConfigDict", ",", "rng", ":", "Any", ")", ":", "\n", "  ", "image_size", "=", "config", ".", "input_size", "\n", "\n", "if", "config", ".", "batch_size", "%", "jax", ".", "device_count", "(", ")", ">", "0", ":", "\n", "    ", "raise", "ValueError", "(", "'Batch size must be divisible by the number of devices'", ")", "\n", "", "local_batch_size", "=", "config", ".", "batch_size", "//", "jax", ".", "local_device_count", "(", ")", "\n", "\n", "if", "config", ".", "half_precision", ":", "\n", "    ", "platform", "=", "jax", ".", "local_devices", "(", ")", "[", "0", "]", ".", "platform", "\n", "if", "platform", "==", "'tpu'", ":", "\n", "\n", "      ", "input_dtype", "=", "tf", ".", "bfloat16", "\n", "", "else", ":", "\n", "      ", "input_dtype", "=", "tf", ".", "float16", "\n", "", "", "else", ":", "\n", "    ", "input_dtype", "=", "tf", ".", "float32", "\n", "\n", "# Build input pipeline.", "\n", "", "dataset_builder", "=", "input_pipeline", ".", "get_dataset_builder", "(", "config", ")", "\n", "\n", "# TODO(marar): data_rng_val is not necessary!", "\n", "eval_iter", "=", "create_input_iter", "(", "\n", "dataset_builder", ",", "config", ",", "rng", ",", "batch_size", "=", "local_batch_size", ",", "train", "=", "False", ",", "image_size", "=", "image_size", ",", "\n", "dtype", "=", "input_dtype", ",", "\n", "cache", "=", "config", ".", "cache", ")", "\n", "\n", "num_classes", "=", "dataset_builder", ".", "info", ".", "features", "[", "'label'", "]", ".", "num_classes", "\n", "return", "eval_iter", ",", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.eval.eval_step": [[146, 158], ["model_fn", "len", "jax.sum", "jax.sum", "jax.argmax", "jax.argmax", "jax.argmax"], "function", ["None"], ["", "def", "eval_step", "(", "batch", ",", "params", ",", "batch_stats", ",", "model_fn", ",", "num_classes", ")", ":", "\n", "  ", "variables", "=", "{", "'params'", ":", "params", "}", "\n", "if", "batch_stats", ":", "\n", "    ", "variables", "[", "'batch_stats'", "]", "=", "batch_stats", "\n", "", "logits", "=", "model_fn", "(", "variables", ",", "batch", "[", "'image'", "]", ",", "train", "=", "False", ",", "mutable", "=", "False", ")", "\n", "labels", "=", "batch", "[", "'label'", "]", "\n", "# loss = cross_entropy_loss(logits, labels, num_classes)", "\n", "if", "len", "(", "labels", ".", "shape", ")", "==", "1", ":", "\n", "    ", "correct", "=", "jnp", ".", "sum", "(", "jnp", ".", "argmax", "(", "logits", ",", "-", "1", ")", "==", "labels", ")", "\n", "", "else", ":", "\n", "    ", "correct", "=", "jnp", ".", "sum", "(", "jnp", ".", "argmax", "(", "logits", ",", "-", "1", ")", "==", "jnp", ".", "argmax", "(", "labels", ",", "-", "1", ")", ")", "\n", "", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.eval.evaluate": [[160, 202], ["jax.random.PRNGKey", "jax.random.split", "jax.random.split", "absl.logging.info", "eval._get_data_iter", "absl.logging.info", "models.create_model", "absl.logging.info", "eval.get_model_params", "absl.logging.info", "data.input_pipeline.get_num_classes_from_config", "flax.jax_utils.replicate", "jax.pmap", "jax.pmap", "absl.logging.info", "absl.logging.info", "flax.jax_utils.replicate", "functools.partial", "jax.pmap.", "jax.sum", "absl.logging.info"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.eval._get_data_iter", "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.create_model", "home.repos.pwc.inspect_result.moabarar_qna.None.eval.get_model_params", "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_num_classes_from_config"], ["", "def", "evaluate", "(", "config", ":", "ml_collections", ".", "ConfigDict", ",", "workdir", ":", "str", ")", ":", "\n", "  ", "\"\"\"Perfirm model evaluation.\n\n  Args:\n    config: Hyperparameter configuration for training and evaluation.\n    workdir: Directory where the tensorboard summaries are written to.\n\n  Returns:\n    Final TrainState.\n  \"\"\"", "\n", "rng", "=", "random", ".", "PRNGKey", "(", "config", ".", "seed", ")", "\n", "rng", ",", "data_rng", "=", "jax", ".", "random", ".", "split", "(", "rng", ")", "\n", "logging", ".", "info", "(", "'=== Creating data iterator'", ")", "\n", "eval_iter", ",", "num_classes", "=", "_get_data_iter", "(", "config", ",", "data_rng", ")", "\n", "logging", ".", "info", "(", "'=== Creating model'", ")", "\n", "model", "=", "models", ".", "create_model", "(", "config", "=", "config", ",", "num_classes", "=", "num_classes", ")", "\n", "logging", ".", "info", "(", "'=== Get model params'", ")", "\n", "model_params", ",", "model_batch_stats", ",", "step", "=", "get_model_params", "(", "workdir", ")", "\n", "logging", ".", "info", "(", "'=== Create evaluation function'", ")", "\n", "# Create evaluation step fn:", "\n", "num_classes", "=", "input_pipeline", ".", "get_num_classes_from_config", "(", "config", ")", "\n", "static_params", "=", "{", "'model_fn'", ":", "model", ".", "apply", ",", "\n", "'num_classes'", ":", "num_classes", ",", "\n", "}", "\n", "model_params", "=", "jax_utils", ".", "replicate", "(", "model_params", ")", "\n", "if", "model_batch_stats", ":", "\n", "    ", "model_batch_stats", "=", "jax_utils", ".", "replicate", "(", "model_batch_stats", ")", "\n", "# else:", "\n", "#    static_params['batch_stats'] = None", "\n", "", "p_eval_step", "=", "jax", ".", "pmap", "(", "functools", ".", "partial", "(", "eval_step", ",", "**", "static_params", ")", ",", "axis_name", "=", "'batch'", ")", "\n", "first_call", "=", "True", "\n", "logging", ".", "info", "(", "'=== Start evaluation:'", ")", "\n", "total_correct", "=", "0", "\n", "total_count", "=", "0", "\n", "for", "batch", "in", "eval_iter", ":", "\n", "    ", "if", "first_call", ":", "# The first call to the model once will compile the computation graph", "\n", "      ", "logging", ".", "info", "(", "'Initial compilation - this may take a while'", ")", "\n", "first_call", "=", "False", "\n", "", "correct", "=", "p_eval_step", "(", "batch", ",", "model_params", ",", "model_batch_stats", ")", "\n", "total_correct", "+=", "jnp", ".", "sum", "(", "correct", ")", "\n", "total_count", "+=", "batch", "[", "'image'", "]", ".", "shape", "[", "0", "]", "*", "batch", "[", "'image'", "]", ".", "shape", "[", "1", "]", "\n", "", "logging", ".", "info", "(", "'========== Model Accuracy : %.2f'", ",", "(", "total_correct", "/", "total_count", ")", "*", "100", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.initialized": [[36, 53], ["jax.random.split", "jax.random.split", "jax.random.split", "train.initialized.init"], "function", ["None"], ["", "def", "initialized", "(", "key", ",", "image_size", ",", "model", ")", ":", "\n", "  ", "input_shape", "=", "(", "1", ",", "image_size", ",", "image_size", ",", "3", ")", "\n", "\n", "@", "jax", ".", "jit", "\n", "def", "init", "(", "*", "args", ")", ":", "\n", "    ", "return", "model", ".", "init", "(", "*", "args", ",", "train", "=", "True", ")", "\n", "\n", "", "rng_params", ",", "key", "=", "random", ".", "split", "(", "key", ")", "\n", "rng_dropout", ",", "key", "=", "random", ".", "split", "(", "key", ")", "\n", "rng_perturb_queries", ",", "key", "=", "random", ".", "split", "(", "key", ")", "\n", "\n", "variables", "=", "init", "(", "{", "'params'", ":", "rng_params", ",", "\n", "'dropout'", ":", "rng_dropout", ",", "\n", "'perturb_queries'", ":", "rng_perturb_queries", "}", ",", "\n", "jnp", ".", "ones", "(", "input_shape", ",", "model", ".", "dtype", ")", ",", "\n", ")", "\n", "return", "variables", "[", "'params'", "]", ",", "variables", ".", "get", "(", "'batch_stats'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.cross_entropy_loss": [[55, 63], ["optax.softmax_cross_entropy", "jax.mean", "len", "flax.training.common_utils.onehot"], "function", ["None"], ["", "def", "cross_entropy_loss", "(", "logits", ",", "labels", ",", "num_classes", "=", "10", ")", ":", "\n", "  ", "if", "len", "(", "labels", ".", "shape", ")", "==", "1", ":", "\n", "# Convert one-hot labels to single values if appliable.", "\n", "    ", "one_hot_labels", "=", "common_utils", ".", "onehot", "(", "labels", ",", "num_classes", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "    ", "one_hot_labels", "=", "labels", "\n", "", "xentropy", "=", "optax", ".", "softmax_cross_entropy", "(", "logits", "=", "logits", ",", "labels", "=", "one_hot_labels", ")", "\n", "return", "jnp", ".", "mean", "(", "xentropy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.compute_metrics": [[65, 77], ["train.cross_entropy_loss", "jax.lax.pmean", "len", "jax.mean", "jax.mean", "jax.argmax", "jax.argmax", "jax.argmax"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.cross_entropy_loss"], ["", "def", "compute_metrics", "(", "logits", ",", "labels", ",", "num_classes", "=", "10", ")", ":", "\n", "  ", "loss", "=", "cross_entropy_loss", "(", "logits", ",", "labels", ",", "num_classes", ")", "\n", "if", "len", "(", "labels", ".", "shape", ")", "==", "1", ":", "\n", "    ", "accuracy", "=", "jnp", ".", "mean", "(", "jnp", ".", "argmax", "(", "logits", ",", "-", "1", ")", "==", "labels", ")", "\n", "", "else", ":", "\n", "    ", "accuracy", "=", "jnp", ".", "mean", "(", "jnp", ".", "argmax", "(", "logits", ",", "-", "1", ")", "==", "jnp", ".", "argmax", "(", "labels", ",", "-", "1", ")", ")", "\n", "", "metrics", "=", "{", "\n", "'loss'", ":", "loss", ",", "\n", "'accuracy'", ":", "accuracy", ",", "\n", "}", "\n", "metrics", "=", "lax", ".", "pmean", "(", "metrics", ",", "axis_name", "=", "'batch'", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.create_learning_rate_fn": [[79, 103], ["optax.linear_schedule", "optax.join_schedules", "max", "optax.cosine_decay_schedule", "optax.constant_schedule", "ValueError"], "function", ["None"], ["", "def", "create_learning_rate_fn", "(", "\n", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", "base_learning_rate", ":", "float", ",", "\n", "steps_per_epoch", ":", "int", ")", ":", "\n", "  ", "\"\"\"Create learning rate schedule.\"\"\"", "\n", "warmup_fn", "=", "optax", ".", "linear_schedule", "(", "\n", "init_value", "=", "0.", ",", "end_value", "=", "base_learning_rate", ",", "\n", "transition_steps", "=", "config", ".", "warmup_epochs", "*", "steps_per_epoch", ")", "\n", "# Get Learning rate schedule", "\n", "lr_rate_schedule", "=", "config", ".", "learning_rate_schedule", "\n", "if", "lr_rate_schedule", "==", "'cosine'", ":", "\n", "    ", "cosine_epochs", "=", "max", "(", "config", ".", "num_epochs", "-", "config", ".", "warmup_epochs", ",", "1", ")", "\n", "lr_decay_fn", "=", "optax", ".", "cosine_decay_schedule", "(", "\n", "init_value", "=", "base_learning_rate", ",", "\n", "decay_steps", "=", "cosine_epochs", "*", "steps_per_epoch", ")", "\n", "", "elif", "lr_rate_schedule", "==", "'const'", ":", "\n", "    ", "lr_decay_fn", "=", "optax", ".", "constant_schedule", "(", "base_learning_rate", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "f'Unsuported learning rate schedule {lr_rate_schedule}'", ")", "\n", "\n", "", "schedule_fn", "=", "optax", ".", "join_schedules", "(", "\n", "schedules", "=", "[", "warmup_fn", ",", "lr_decay_fn", "]", ",", "\n", "boundaries", "=", "[", "config", ".", "warmup_epochs", "*", "steps_per_epoch", "]", ")", "\n", "return", "schedule_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.train_step": [[105, 165], ["jax.random.split", "jax.random.split", "learning_rate_fn", "train.compute_metrics", "state.apply_gradients", "state.apply_fn", "train.cross_entropy_loss", "dynamic_scale.value_and_grad", "jax.value_and_grad.", "jax.value_and_grad", "jax.value_and_grad", "jax.value_and_grad.", "jax.lax.pmean", "data.input_pipeline.get_num_classes_from_config", "new_state.replace.replace", "jax.tree_leaves", "jax.tree_leaves", "sum", "new_model_state.get", "data.input_pipeline.get_num_classes_from_config", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.sum", "functools.partial", "functools.partial"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.compute_metrics", "home.repos.pwc.inspect_result.moabarar_qna.None.train.cross_entropy_loss", "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_num_classes_from_config", "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_num_classes_from_config"], ["", "def", "train_step", "(", "state", ",", "batch", ",", "learning_rate_fn", ",", "config", ",", "rng", ")", ":", "\n", "  ", "\"\"\"Perform a single training step.\"\"\"", "\n", "\n", "dropout_rng", ",", "perturb_queries_rng", "=", "jax", ".", "random", ".", "split", "(", "rng", ",", "2", ")", "\n", "\n", "def", "loss_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"loss function used for training.\"\"\"", "\n", "variables", "=", "(", "\n", "{", "'params'", ":", "params", ",", "'batch_stats'", ":", "state", ".", "batch_stats", "}", "if", "state", ".", "batch_stats", "is", "not", "None", "else", "{", "'params'", ":", "params", "}", ")", "\n", "logits", ",", "new_model_state", "=", "state", ".", "apply_fn", "(", "variables", ",", "\n", "batch", "[", "'image'", "]", ",", "\n", "mutable", "=", "[", "'batch_stats'", "]", ",", "\n", "train", "=", "True", ",", "\n", "rngs", "=", "{", "'dropout'", ":", "dropout_rng", ",", "\n", "'perturb_queries'", ":", "perturb_queries_rng", "}", ")", "\n", "loss", "=", "cross_entropy_loss", "(", "logits", ",", "batch", "[", "'label'", "]", ",", "num_classes", "=", "input_pipeline", ".", "get_num_classes_from_config", "(", "config", ")", ")", "\n", "if", "config", ".", "weight_decay", ">", "0.0", "and", "config", ".", "optim", "in", "[", "'adam'", ",", "'sgd'", "]", ":", "\n", "      ", "weight_penalty_params", "=", "jax", ".", "tree_leaves", "(", "params", ")", "\n", "weight_decay", "=", "config", ".", "weight_decay", "\n", "weight_l2", "=", "sum", "(", "[", "jnp", ".", "sum", "(", "x", "**", "2", ")", "\n", "for", "x", "in", "weight_penalty_params", "\n", "if", "x", ".", "ndim", ">", "1", "]", ")", "\n", "weight_penalty", "=", "weight_decay", "*", "0.5", "*", "weight_l2", "\n", "loss", "=", "loss", "+", "weight_penalty", "\n", "", "return", "loss", ",", "(", "new_model_state", ",", "logits", ")", "\n", "\n", "", "step", "=", "state", ".", "step", "\n", "dynamic_scale", "=", "state", ".", "dynamic_scale", "\n", "lr", "=", "learning_rate_fn", "(", "step", ")", "\n", "\n", "if", "dynamic_scale", ":", "\n", "    ", "grad_fn", "=", "dynamic_scale", ".", "value_and_grad", "(", "\n", "loss_fn", ",", "has_aux", "=", "True", ",", "axis_name", "=", "'batch'", ")", "\n", "dynamic_scale", ",", "is_fin", ",", "aux", ",", "grads", "=", "grad_fn", "(", "state", ".", "params", ")", "\n", "# dynamic loss takes care of averaging gradients across replicas", "\n", "", "else", ":", "\n", "    ", "grad_fn", "=", "jax", ".", "value_and_grad", "(", "loss_fn", ",", "has_aux", "=", "True", ")", "\n", "aux", ",", "grads", "=", "grad_fn", "(", "state", ".", "params", ")", "\n", "# Re-use same axis_name as in the call to `pmap(...train_step...)` below.", "\n", "grads", "=", "lax", ".", "pmean", "(", "grads", ",", "axis_name", "=", "'batch'", ")", "\n", "", "new_model_state", ",", "logits", "=", "aux", "[", "1", "]", "\n", "metrics", "=", "compute_metrics", "(", "logits", ",", "batch", "[", "'label'", "]", ",", "input_pipeline", ".", "get_num_classes_from_config", "(", "config", ")", ")", "\n", "metrics", "[", "'learning_rate'", "]", "=", "lr", "\n", "\n", "new_state", "=", "state", ".", "apply_gradients", "(", "grads", "=", "grads", ",", "batch_stats", "=", "new_model_state", ".", "get", "(", "'batch_stats'", ",", "None", ")", ")", "\n", "if", "dynamic_scale", ":", "\n", "# if is_fin == False the gradients contain Inf/NaNs and optimizer state and", "\n", "# params should be restored (= skip this step).", "\n", "    ", "new_state", "=", "new_state", ".", "replace", "(", "\n", "opt_state", "=", "jax", ".", "tree_multimap", "(", "\n", "functools", ".", "partial", "(", "jnp", ".", "where", ",", "is_fin", ")", ",", "\n", "new_state", ".", "opt_state", ",", "\n", "state", ".", "opt_state", ")", ",", "\n", "params", "=", "jax", ".", "tree_multimap", "(", "\n", "functools", ".", "partial", "(", "jnp", ".", "where", ",", "is_fin", ")", ",", "\n", "new_state", ".", "params", ",", "\n", "state", ".", "params", ")", ")", "\n", "metrics", "[", "'scale'", "]", "=", "dynamic_scale", ".", "scale", "\n", "\n", "", "return", "new_state", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.eval_step": [[167, 174], ["state.apply_fn", "train.compute_metrics", "data.input_pipeline.get_num_classes_from_config"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.compute_metrics", "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_num_classes_from_config"], ["", "def", "eval_step", "(", "state", ",", "batch", ",", "config", ")", ":", "\n", "  ", "variables", "=", "(", "\n", "{", "'params'", ":", "state", ".", "params", ",", "'batch_stats'", ":", "state", ".", "batch_stats", "}", "if", "state", ".", "batch_stats", "is", "not", "None", "else", "\n", "{", "'params'", ":", "state", ".", "params", "}", ")", "\n", "logits", "=", "state", ".", "apply_fn", "(", "\n", "variables", ",", "batch", "[", "'image'", "]", ",", "train", "=", "False", ",", "mutable", "=", "False", ")", "\n", "return", "compute_metrics", "(", "logits", ",", "batch", "[", "'label'", "]", ",", "input_pipeline", ".", "get_num_classes_from_config", "(", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.prepare_tf_data": [[176, 192], ["jax.local_device_count", "jax.local_device_count", "jax.tree_map", "jax.tree_map", "x._numpy._numpy", "len", "x._numpy.reshape"], "function", ["None"], ["", "def", "prepare_tf_data", "(", "xs", ")", ":", "\n", "  ", "\"\"\"Convert a input batch from tf Tensors to numpy arrays.\"\"\"", "\n", "local_device_count", "=", "jax", ".", "local_device_count", "(", ")", "\n", "\n", "def", "_prepare", "(", "x", ")", ":", "\n", "# Use _numpy() for zero-copy conversion between TF and NumPy.", "\n", "    ", "x", "=", "x", ".", "_numpy", "(", ")", "# pylint: disable=protected-access", "\n", "\n", "# reshape (host_batch_size, height, width, 3) to", "\n", "# (local_devices, device_batch_size, height, width, 3)", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "4", ":", "\n", "      ", "return", "x", ".", "reshape", "(", "(", "local_device_count", ",", "-", "1", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "      ", "return", "x", "\n", "\n", "", "", "return", "jax", ".", "tree_map", "(", "_prepare", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.create_input_iter": [[194, 207], ["data.input_pipeline.create_split", "map", "flax.jax_utils.prefetch_to_device"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.create_split"], ["", "def", "create_input_iter", "(", "dataset_builder", ",", "config", ",", "rng", ",", "batch_size", ",", "train", ",", "image_size", ",", "dtype", ",", "cache", ")", ":", "\n", "  ", "ds", "=", "input_pipeline", ".", "create_split", "(", "\n", "dataset_builder", ",", "\n", "config", ",", "\n", "rng", ",", "\n", "batch_size", ",", "\n", "train", "=", "train", ",", "\n", "image_size", "=", "image_size", ",", "\n", "dtype", "=", "dtype", ",", "\n", "cache", "=", "cache", ")", "\n", "it", "=", "map", "(", "prepare_tf_data", ",", "ds", ")", "\n", "it", "=", "jax_utils", ".", "prefetch_to_device", "(", "it", ",", "10", ")", "\n", "return", "it", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.restore_checkpoint": [[214, 216], ["flax.training.checkpoints.restore_checkpoint"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.restore_checkpoint"], ["", "def", "restore_checkpoint", "(", "state", ",", "workdir", ")", ":", "\n", "  ", "return", "checkpoints", ".", "restore_checkpoint", "(", "workdir", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.save_checkpoint": [[218, 224], ["jax.process_index", "jax.process_index", "jax.device_get", "jax.device_get", "int", "flax.training.checkpoints.save_checkpoint", "jax.tree_map", "jax.tree_map"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.save_checkpoint"], ["", "def", "save_checkpoint", "(", "state", ",", "workdir", ")", ":", "\n", "  ", "if", "jax", ".", "process_index", "(", ")", "==", "0", ":", "\n", "# get train state from the first replica", "\n", "    ", "state", "=", "jax", ".", "device_get", "(", "jax", ".", "tree_map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "state", ")", ")", "\n", "step", "=", "int", "(", "state", ".", "step", ")", "\n", "checkpoints", ".", "save_checkpoint", "(", "workdir", ",", "state", ",", "step", ",", "keep", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.sync_batch_stats": [[231, 239], ["state.replace", "cross_replica_mean"], "function", ["None"], ["def", "sync_batch_stats", "(", "state", ")", ":", "\n", "  ", "\"\"\"Sync the batch statistics across replicas.\"\"\"", "\n", "# Each device has its own version of the running average batch statistics and", "\n", "# we sync them before evaluation.", "\n", "if", "state", ".", "batch_stats", "is", "not", "None", ":", "\n", "    ", "return", "state", ".", "replace", "(", "batch_stats", "=", "cross_replica_mean", "(", "state", ".", "batch_stats", ")", ")", "\n", "", "else", ":", "\n", "    ", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.create_train_state": [[241, 288], ["train.initialized", "params.unfreeze", "TrainState.create", "flax.optim.DynamicScale", "optax.sgd", "jax.local_devices", "jax.local_devices", "flax.traverse_util.flatten_dict", "flax.traverse_util.unflatten_dict", "optax.adam", "optax.chain", "fn", "optax.masked", "optax.masked", "traverse_util.flatten_dict.items", "optax.clip_by_global_norm", "optax.identity", "optax.adamw", "optax.adamw", "train.create_train_state._flattened_traversal"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.initialized"], ["", "", "def", "create_train_state", "(", "rng", ",", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", "model", ",", "image_size", ",", "learning_rate_fn", ")", ":", "\n", "  ", "\"\"\"Create initial training state.\"\"\"", "\n", "dynamic_scale", "=", "None", "\n", "platform", "=", "jax", ".", "local_devices", "(", ")", "[", "0", "]", ".", "platform", "\n", "if", "config", ".", "half_precision", "and", "platform", "==", "'gpu'", ":", "\n", "    ", "dynamic_scale", "=", "optim", ".", "DynamicScale", "(", ")", "\n", "", "else", ":", "\n", "    ", "dynamic_scale", "=", "None", "\n", "\n", "", "params", ",", "batch_stats", "=", "initialized", "(", "rng", ",", "image_size", ",", "model", ")", "\n", "params_dict", "=", "params", ".", "unfreeze", "(", ")", "\n", "del", "params", "\n", "params", "=", "params_dict", "\n", "\n", "# TODO(marar): wrap in util function:", "\n", "def", "_flattened_traversal", "(", "fn", ")", ":", "\n", "    ", "def", "mask", "(", "data", ")", ":", "\n", "      ", "flat", "=", "traverse_util", ".", "flatten_dict", "(", "data", ")", "\n", "return", "traverse_util", ".", "unflatten_dict", "(", "{", "k", ":", "fn", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "flat", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "return", "mask", "\n", "\n", "", "if", "config", ".", "optim", "==", "'sgd'", ":", "\n", "    ", "tx", "=", "optax", ".", "sgd", "(", "\n", "learning_rate", "=", "learning_rate_fn", ",", "\n", "momentum", "=", "config", ".", "momentum", ",", "\n", "nesterov", "=", "True", ",", "\n", ")", "\n", "", "elif", "config", ".", "optim", "==", "'adam'", ":", "\n", "    ", "tx", "=", "optax", ".", "adam", "(", "learning_rate", "=", "learning_rate_fn", ")", "\n", "", "elif", "config", ".", "optim", "==", "'adamw'", ":", "\n", "    ", "tx", "=", "optax", ".", "chain", "(", "\n", "optax", ".", "clip_by_global_norm", "(", "1.0", ")", "if", "config", ".", "grad_clip_max_norm", "else", "optax", ".", "identity", "(", ")", ",", "\n", "optax", ".", "masked", "(", "optax", ".", "adamw", "(", "learning_rate", "=", "learning_rate_fn", ",", "weight_decay", "=", "config", ".", "weight_decay", ")", ",", "\n", "mask", "=", "_flattened_traversal", "(", "lambda", "path", ",", "_", ":", "path", "[", "-", "1", "]", "not", "in", "config", ".", "optim_wd_ignore", ")", ")", ",", "\n", "optax", ".", "masked", "(", "optax", ".", "adamw", "(", "learning_rate", "=", "learning_rate_fn", ",", "weight_decay", "=", "0.0", ")", ",", "\n", "mask", "=", "_flattened_traversal", "(", "lambda", "path", ",", "_", ":", "path", "[", "-", "1", "]", "in", "config", ".", "optim_wd_ignore", ")", ")", ",", "\n", ")", "\n", "\n", "", "state", "=", "TrainState", ".", "create", "(", "\n", "apply_fn", "=", "model", ".", "apply", ",", "\n", "params", "=", "params", ",", "\n", "tx", "=", "tx", ",", "\n", "batch_stats", "=", "batch_stats", ",", "\n", "dynamic_scale", "=", "dynamic_scale", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.None.train.train_and_evaluate": [[290, 439], ["clu.metric_writers.create_default_writer", "jax.random.PRNGKey", "data.input_pipeline.get_dataset_builder", "jax.random.split", "jax.random.split", "jax.random.fold_in", "jax.random.fold_in", "jax.random.split", "jax.random.split", "train.create_input_iter", "train.create_input_iter", "models.create_model", "train.create_learning_rate_fn", "train.create_train_state", "config.get", "train.restore_checkpoint", "int", "flax.jax_utils.replicate", "jax.pmap", "jax.pmap", "jax.pmap", "jax.pmap", "jax.random.split", "jax.random.split", "jax.random.fold_in", "jax.random.fold_in", "time.time", "absl.logging.info", "zip", "jax.random.normal().block_until_ready", "jax.random.normal().block_until_ready", "numpy.random.randint", "ValueError", "jax.local_device_count", "jax.local_device_count", "jax.process_index", "jax.process_index", "int", "data.input_pipeline.get_num_eval_examples", "utils.init_from_pretrained", "functools.partial", "functools.partial", "jax.process_index", "jax.process_index", "jax.process_index", "jax.process_index", "range", "jax.random.fold_in", "jax.random.fold_in", "jax.random.split", "jax.random.split", "jax.pmap.", "config.unlock", "config.lock", "jax.device_count", "jax.device_count", "jax.local_devices", "jax.local_devices", "clu.periodic_actions.Profile", "jax.local_device_count", "jax.local_device_count", "h", "absl.logging.info", "common_utils.get_metrics.append", "train.sync_batch_stats", "range", "flax.training.common_utils.get_metrics", "jax.tree_map", "jax.tree_map", "absl.logging.info", "metric_writers.create_default_writer.write_scalars", "metric_writers.create_default_writer.flush", "train.sync_batch_stats", "train.save_checkpoint", "jax.random.normal", "jax.random.normal", "jax.process_index", "jax.process_index", "flax.training.common_utils.get_metrics", "metric_writers.create_default_writer.write_scalars", "time.time", "next", "jax.pmap.", "common_utils.get_metrics.append", "jax.random.PRNGKey", "jax.random.PRNGKey", "x.mean", "jax.tree_map().items", "jax.tree_map().items", "time.time", "jax.tree_map.items", "jax.tree_map", "jax.tree_map", "x.mean"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_dataset_builder", "home.repos.pwc.inspect_result.moabarar_qna.None.train.create_input_iter", "home.repos.pwc.inspect_result.moabarar_qna.None.train.create_input_iter", "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.create_model", "home.repos.pwc.inspect_result.moabarar_qna.None.train.create_learning_rate_fn", "home.repos.pwc.inspect_result.moabarar_qna.None.train.create_train_state", "home.repos.pwc.inspect_result.moabarar_qna.None.train.restore_checkpoint", "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_num_eval_examples", "home.repos.pwc.inspect_result.moabarar_qna.None.utils.init_from_pretrained", "home.repos.pwc.inspect_result.moabarar_qna.None.train.sync_batch_stats", "home.repos.pwc.inspect_result.moabarar_qna.None.train.sync_batch_stats", "home.repos.pwc.inspect_result.moabarar_qna.None.train.save_checkpoint"], ["", "def", "train_and_evaluate", "(", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", "workdir", ":", "str", ")", "->", "TrainState", ":", "\n", "  ", "\"\"\"Execute model training and evaluation loop.\n\n  Args:\n    config: Hyperparameter configuration for training and evaluation.\n    workdir: Directory where the tensorboard summaries are written to.\n\n  Returns:\n    Final TrainState.\n  \"\"\"", "\n", "if", "config", ".", "seed", "<", "0", ":", "\n", "    ", "islocked", "=", "config", ".", "is_locked", "\n", "if", "islocked", ":", "\n", "      ", "config", ".", "unlock", "(", ")", "\n", "", "config", ".", "seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "1000000", ")", "\n", "if", "islocked", ":", "\n", "      ", "config", ".", "lock", "(", ")", "\n", "", "", "writer", "=", "metric_writers", ".", "create_default_writer", "(", "\n", "logdir", "=", "workdir", ",", "just_logging", "=", "jax", ".", "process_index", "(", ")", "!=", "0", ")", "\n", "\n", "rng", "=", "random", ".", "PRNGKey", "(", "config", ".", "seed", ")", "\n", "\n", "image_size", "=", "config", ".", "input_size", "\n", "\n", "if", "config", ".", "batch_size", "%", "jax", ".", "device_count", "(", ")", ">", "0", ":", "\n", "    ", "raise", "ValueError", "(", "'Batch size must be divisible by the number of devices'", ")", "\n", "", "local_batch_size", "=", "config", ".", "batch_size", "//", "jax", ".", "local_device_count", "(", ")", "\n", "\n", "platform", "=", "jax", ".", "local_devices", "(", ")", "[", "0", "]", ".", "platform", "\n", "\n", "if", "config", ".", "half_precision", ":", "\n", "    ", "if", "platform", "==", "'tpu'", ":", "\n", "      ", "input_dtype", "=", "tf", ".", "bfloat16", "\n", "", "else", ":", "\n", "      ", "input_dtype", "=", "tf", ".", "float16", "\n", "", "", "else", ":", "\n", "    ", "input_dtype", "=", "tf", ".", "float32", "\n", "\n", "# Build input pipeline.", "\n", "", "dataset_builder", "=", "input_pipeline", ".", "get_dataset_builder", "(", "config", ")", "\n", "rng", ",", "data_rng", "=", "jax", ".", "random", ".", "split", "(", "rng", ")", "\n", "data_rng", "=", "jax", ".", "random", ".", "fold_in", "(", "data_rng", ",", "jax", ".", "process_index", "(", ")", ")", "\n", "data_rng_train", ",", "data_rng_val", "=", "jax", ".", "random", ".", "split", "(", "data_rng", ")", "\n", "train_iter", "=", "create_input_iter", "(", "\n", "dataset_builder", ",", "config", ",", "data_rng_train", ",", "batch_size", "=", "local_batch_size", ",", "train", "=", "True", ",", "image_size", "=", "image_size", ",", "\n", "dtype", "=", "input_dtype", ",", "\n", "cache", "=", "config", ".", "cache", ")", "\n", "# TODO(marar): data_rng_val is not necessary!", "\n", "eval_iter", "=", "create_input_iter", "(", "\n", "dataset_builder", ",", "config", ",", "data_rng_val", ",", "batch_size", "=", "local_batch_size", ",", "train", "=", "False", ",", "image_size", "=", "image_size", ",", "\n", "dtype", "=", "input_dtype", ",", "\n", "cache", "=", "config", ".", "cache", ")", "\n", "\n", "steps_per_epoch", "=", "(", "\n", "dataset_builder", ".", "info", ".", "splits", "[", "'train'", "]", ".", "num_examples", "//", "config", ".", "batch_size", "\n", ")", "\n", "\n", "if", "config", ".", "num_train_steps", "==", "-", "1", ":", "\n", "    ", "num_steps", "=", "int", "(", "steps_per_epoch", "*", "config", ".", "num_epochs", ")", "\n", "", "else", ":", "\n", "    ", "num_steps", "=", "config", ".", "num_train_steps", "\n", "\n", "", "if", "config", ".", "steps_per_eval", "==", "-", "1", ":", "\n", "    ", "num_validation_examples", "=", "input_pipeline", ".", "get_num_eval_examples", "(", "dataset_builder", ",", "config", ")", "\n", "steps_per_eval", "=", "num_validation_examples", "//", "config", ".", "batch_size", "\n", "", "else", ":", "\n", "    ", "steps_per_eval", "=", "config", ".", "steps_per_eval", "\n", "\n", "", "steps_per_checkpoint", "=", "steps_per_epoch", "*", "config", ".", "checkpoint_every_epochs", "\n", "\n", "base_learning_rate", "=", "config", ".", "learning_rate", "*", "config", ".", "batch_size", "/", "256.", "\n", "num_classes", "=", "dataset_builder", ".", "info", ".", "features", "[", "'label'", "]", ".", "num_classes", "\n", "model", "=", "models", ".", "create_model", "(", "config", "=", "config", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "learning_rate_fn", "=", "create_learning_rate_fn", "(", "\n", "config", ",", "base_learning_rate", ",", "steps_per_epoch", ")", "\n", "\n", "state", "=", "create_train_state", "(", "rng", ",", "config", ",", "model", ",", "image_size", ",", "learning_rate_fn", ")", "\n", "if", "config", ".", "get", "(", "'fine_tune'", ",", "False", ")", ":", "\n", "    ", "state", "=", "utils", ".", "init_from_pretrained", "(", "state", ",", "config", ")", "\n", "", "state", "=", "restore_checkpoint", "(", "state", ",", "workdir", ")", "\n", "# step_offset > 0 if restarting from checkpoint", "\n", "step_offset", "=", "int", "(", "state", ".", "step", ")", "\n", "\n", "state", "=", "jax_utils", ".", "replicate", "(", "state", ")", "\n", "\n", "p_train_step", "=", "jax", ".", "pmap", "(", "\n", "functools", ".", "partial", "(", "train_step", ",", "learning_rate_fn", "=", "learning_rate_fn", ",", "config", "=", "config", ")", ",", "axis_name", "=", "'batch'", ")", "\n", "p_eval_step", "=", "jax", ".", "pmap", "(", "functools", ".", "partial", "(", "eval_step", ",", "config", "=", "config", ")", ",", "axis_name", "=", "'batch'", ")", "\n", "\n", "rng", ",", "drop_out_rng", "=", "jax", ".", "random", ".", "split", "(", "rng", ",", "2", ")", "\n", "drop_out_rng", "=", "jax", ".", "random", ".", "fold_in", "(", "drop_out_rng", ",", "jax", ".", "process_index", "(", ")", ")", "\n", "\n", "train_metrics", "=", "[", "]", "\n", "hooks", "=", "[", "]", "\n", "if", "jax", ".", "process_index", "(", ")", "==", "0", ":", "\n", "    ", "hooks", "+=", "[", "periodic_actions", ".", "Profile", "(", "num_profile_steps", "=", "5", ",", "logdir", "=", "workdir", ")", "]", "\n", "", "train_metrics_last_t", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "'Initial compilation, this might take some minutes...'", ")", "\n", "for", "step", ",", "batch", "in", "zip", "(", "range", "(", "step_offset", ",", "num_steps", ")", ",", "train_iter", ")", ":", "\n", "    ", "drop_out_rng_step", "=", "jax", ".", "random", ".", "fold_in", "(", "drop_out_rng", ",", "step", ")", "\n", "drop_out_rng_step_all", "=", "jax", ".", "random", ".", "split", "(", "drop_out_rng_step", ",", "\n", "jax", ".", "local_device_count", "(", ")", ")", "\n", "state", ",", "metrics", "=", "p_train_step", "(", "state", ",", "batch", ",", "rng", "=", "drop_out_rng_step_all", ")", "\n", "for", "h", "in", "hooks", ":", "\n", "      ", "h", "(", "step", ")", "\n", "", "if", "step", "==", "step_offset", ":", "\n", "      ", "logging", ".", "info", "(", "'Initial compilation completed.'", ")", "\n", "\n", "", "if", "config", ".", "log_every_steps", ":", "\n", "      ", "train_metrics", ".", "append", "(", "metrics", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "config", ".", "log_every_steps", "==", "0", ":", "\n", "        ", "train_metrics", "=", "common_utils", ".", "get_metrics", "(", "train_metrics", ")", "\n", "summary", "=", "{", "\n", "f'train_{k}'", ":", "v", "\n", "for", "k", ",", "v", "in", "jax", ".", "tree_map", "(", "lambda", "x", ":", "x", ".", "mean", "(", ")", ",", "train_metrics", ")", ".", "items", "(", ")", "\n", "}", "\n", "summary", "[", "'steps_per_second'", "]", "=", "config", ".", "log_every_steps", "/", "(", "\n", "time", ".", "time", "(", ")", "-", "train_metrics_last_t", ")", "\n", "writer", ".", "write_scalars", "(", "step", "+", "1", ",", "summary", ")", "\n", "train_metrics", "=", "[", "]", "\n", "train_metrics_last_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "if", "(", "step", "+", "1", ")", "%", "steps_per_epoch", "==", "0", ":", "\n", "      ", "epoch", "=", "step", "//", "steps_per_epoch", "\n", "eval_metrics", "=", "[", "]", "\n", "\n", "# sync batch statistics across replicas", "\n", "state", "=", "sync_batch_stats", "(", "state", ")", "\n", "for", "_", "in", "range", "(", "steps_per_eval", ")", ":", "\n", "        ", "eval_batch", "=", "next", "(", "eval_iter", ")", "\n", "metrics", "=", "p_eval_step", "(", "state", ",", "eval_batch", ")", "\n", "eval_metrics", ".", "append", "(", "metrics", ")", "\n", "", "eval_metrics", "=", "common_utils", ".", "get_metrics", "(", "eval_metrics", ")", "\n", "summary", "=", "jax", ".", "tree_map", "(", "lambda", "x", ":", "x", ".", "mean", "(", ")", ",", "eval_metrics", ")", "\n", "logging", ".", "info", "(", "'eval epoch: %d, loss: %.4f, accuracy: %.2f'", ",", "\n", "epoch", ",", "summary", "[", "'loss'", "]", ",", "summary", "[", "'accuracy'", "]", "*", "100", ")", "\n", "writer", ".", "write_scalars", "(", "\n", "step", "+", "1", ",", "{", "f'eval_{key}'", ":", "val", "for", "key", ",", "val", "in", "summary", ".", "items", "(", ")", "}", ")", "\n", "writer", ".", "flush", "(", ")", "\n", "", "if", "(", "step", "+", "1", ")", "%", "steps_per_checkpoint", "==", "0", "or", "step", "+", "1", "==", "num_steps", ":", "\n", "      ", "state", "=", "sync_batch_stats", "(", "state", ")", "\n", "save_checkpoint", "(", "state", ",", "workdir", ")", "\n", "\n", "# Wait until computations are done before exiting", "\n", "", "", "jax", ".", "random", ".", "normal", "(", "jax", ".", "random", ".", "PRNGKey", "(", "0", ")", ",", "(", ")", ")", ".", "block_until_ready", "(", ")", "\n", "\n", "return", "state", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.None.utils.init_from_pretrained": [[7, 41], ["flax.training.checkpoints.restore_checkpoint", "jax.tree_util.tree_flatten", "jax.tree_util.tree_flatten", "zip", "jax.tree_util.tree_unflatten", "state.replace", "config.get", "res.append", "jax.asarray", "int", "int", "jax.reshape", "jax.image.resize", "jax.image.resize", "jax.reshape", "int", "int", "jax.reshape", "jax.image.resize", "jax.image.resize", "jax.reshape", "jax.sqrt", "jax.sqrt", "jax.sqrt", "jax.sqrt"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.None.train.restore_checkpoint"], ["def", "init_from_pretrained", "(", "state", ",", "config", ")", ":", "\n", "  ", "assert", "config", ".", "get", "(", "'pretrained_path'", ",", "None", ")", "!=", "None", "\n", "pretrained_state", "=", "checkpoints", ".", "restore_checkpoint", "(", "config", ".", "pretrained_path", ",", "None", ")", "\n", "pretrained_params", "=", "pretrained_state", "[", "'params'", "]", "\n", "pretrained_params_leaves", ",", "_", "=", "tree_util", ".", "tree_flatten", "(", "pretrained_params", ")", "\n", "\n", "current_params", "=", "state", ".", "params", "\n", "current_params_leaves", ",", "current_params_structure", "=", "tree_util", ".", "tree_flatten", "(", "current_params", ")", "\n", "res", "=", "[", "]", "\n", "for", "x_current", ",", "x_pretrained", "in", "zip", "(", "current_params_leaves", ",", "pretrained_params_leaves", ")", ":", "\n", "    ", "if", "x_current", ".", "shape", "!=", "x_pretrained", ".", "shape", ":", "\n", "      ", "assert", "x_current", ".", "shape", "[", "-", "1", "]", "==", "x_pretrained", ".", "shape", "[", "-", "1", "]", "\n", "if", "x_current", ".", "shape", "[", "0", "]", "==", "1", "and", "x_current", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "# (1, 1, self.kernel ** 2, self.k * self.heads)", "\n", "        ", "new_k2", "=", "x_current", ".", "shape", "[", "2", "]", "\n", "old_k2", "=", "x_pretrained", ".", "shape", "[", "2", "]", "\n", "d", "=", "x_current", ".", "shape", "[", "3", "]", "\n", "new_k", "=", "int", "(", "jnp", ".", "sqrt", "(", "new_k2", ")", ")", "\n", "old_k", "=", "int", "(", "jnp", ".", "sqrt", "(", "old_k2", ")", ")", "\n", "x_pretrained", "=", "jnp", ".", "reshape", "(", "x_pretrained", ",", "(", "old_k", ",", "old_k", ",", "d", ")", ")", "\n", "new_param", "=", "jax", ".", "image", ".", "resize", "(", "x_pretrained", ",", "(", "new_k", ",", "new_k", ",", "d", ")", ",", "'bicubic'", ")", "\n", "new_param", "=", "jnp", ".", "reshape", "(", "new_param", ",", "(", "1", ",", "1", ",", "new_k2", ",", "d", ")", ")", "\n", "", "else", ":", "\n", "        ", "a", "=", "int", "(", "jnp", ".", "sqrt", "(", "x_current", ".", "shape", "[", "0", "]", ")", ")", "\n", "b", "=", "int", "(", "jnp", ".", "sqrt", "(", "x_pretrained", ".", "shape", "[", "0", "]", ")", ")", "\n", "h", "=", "x_current", ".", "shape", "[", "-", "1", "]", "\n", "x_pretrained", "=", "jnp", ".", "reshape", "(", "x_pretrained", ",", "(", "b", ",", "b", ",", "h", ")", ")", "\n", "new_param", "=", "jax", ".", "image", ".", "resize", "(", "x_pretrained", ",", "(", "a", ",", "a", ",", "h", ")", ",", "'bicubic'", ")", "\n", "new_param", "=", "jnp", ".", "reshape", "(", "new_param", ",", "(", "a", "*", "a", ",", "h", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "new_param", "=", "x_pretrained", "\n", "", "res", ".", "append", "(", "jnp", ".", "asarray", "(", "new_param", ",", "x_current", ".", "dtype", ")", ")", "\n", "", "new_params", "=", "tree_util", ".", "tree_unflatten", "(", "current_params_structure", ",", "res", ")", "\n", "return", "state", ".", "replace", "(", "params", "=", "new_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.layers.positional_encoding.RelativePositionalEmbedding.__call__": [[26, 55], ["positional_encoding.RelativePositionalEmbedding.param", "jax.asarray", "jax.asarray", "jax.arange", "jax.arange", "jax.arange", "jax.arange", "jax.stack", "jax.stack", "jax.stack.reshape", "relative_coords.transpose.transpose.transpose", "rpe_bias.transpose.transpose.reshape", "rpe_bias.transpose.transpose.transpose", "isinstance", "jax.meshgrid", "jax.meshgrid", "jax.random.truncated_normal", "jax.random.truncated_normal", "relative_position_index.reshape"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ")", ":", "\n", "    ", "window_size", "=", "(", "self", ".", "window_size", ",", "self", ".", "window_size", ")", "if", "isinstance", "(", "self", ".", "window_size", ",", "int", ")", "else", "self", ".", "window_size", "\n", "_normal_init_fn", "=", "lambda", "key", ",", "shape", ":", "random", ".", "truncated_normal", "(", "key", ",", "-", "2.", ",", "2.0", ",", "shape", ",", "jnp", ".", "float32", ")", "*", "0.02", "\n", "pos_embedding_init", "=", "self", ".", "rpe_init", "if", "self", ".", "rpe_init", "is", "not", "None", "else", "_normal_init_fn", "\n", "relative_position_bias_table", "=", "self", ".", "param", "(", "'rpe_bias'", ",", "pos_embedding_init", ",", "\n", "[", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "\n", "self", ".", "heads", "]", ")", "\n", "relative_position_bias_table", "=", "jnp", ".", "asarray", "(", "relative_position_bias_table", ",", "self", ".", "dtype", ")", "\n", "# get pair-wise relative position index for each token inside the", "\n", "coords_h", "=", "jnp", ".", "arange", "(", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "jnp", ".", "arange", "(", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "jnp", ".", "stack", "(", "jnp", ".", "meshgrid", "(", "coords_h", ",", "coords_w", ",", "indexing", "=", "'ij'", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "coords", ".", "reshape", "(", "[", "coords", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "R", "=", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "\n", "R", "=", "R", "+", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "R", "=", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", "*", "R", "\n", "C", "=", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "\n", "C", "=", "C", "+", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "R", "+", "C", "# Wh*Ww, Wh*Ww", "\n", "rpe_bias", "=", "relative_position_bias_table", "[", "relative_position_index", ".", "reshape", "(", "-", "1", ")", "]", "\n", "rpe_bias", "=", "rpe_bias", ".", "reshape", "(", "[", "window_size", "[", "0", "]", "*", "window_size", "[", "1", "]", ",", "\n", "window_size", "[", "0", "]", "*", "window_size", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "rpe_bias", "=", "rpe_bias", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "if", "self", ".", "scale_rpe", "is", "not", "None", ":", "\n", "      ", "rpe_bias", "=", "rpe_bias", "/", "self", ".", "scale_rpe", "\n", "", "return", "rpe_bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.layers.self_attention.MultiHeadSelfAttention.__call__": [[36, 76], ["flax.linen.module.merge_param", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.split", "jax.numpy.split", "flax.linen.attention.dot_product_attention_weights", "jax.numpy.einsum", "jax.numpy.einsum", "jax.numpy.reshape", "jax.numpy.reshape", "flax.linen.Dense", "flax.linen.Dense", "positional_encoding.RelativePositionalEmbedding", "jax.numpy.asarray", "jax.numpy.asarray"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "inputs", ",", "mask", ":", "Optional", "[", "bool", "]", "=", "None", ",", "train", ":", "Optional", "[", "bool", "]", "=", "None", ")", ":", "\n", "    ", "train", "=", "nn", ".", "module", ".", "merge_param", "(", "'train'", ",", "self", ".", "train", ",", "train", ")", "\n", "qkv", "=", "nn", ".", "Dense", "(", "3", "*", "self", ".", "features", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "name", "=", "'to_qkv'", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ")", "(", "inputs", ")", "\n", "qkv", "=", "jnp", ".", "reshape", "(", "qkv", ",", "[", "*", "qkv", ".", "shape", "[", "0", ":", "-", "1", "]", ",", "self", ".", "heads", ",", "3", "*", "self", ".", "features", "//", "self", ".", "heads", "]", ")", "\n", "q", ",", "k", ",", "v", "=", "jnp", ".", "split", "(", "qkv", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bias", "=", "None", "\n", "if", "self", ".", "use_relative_pe", ":", "\n", "      ", "assert", "self", ".", "window_size", "is", "not", "None", ",", "'Need to provide window size for relative positional embedding'", "\n", "bias", "=", "RelativePositionalEmbedding", "(", "heads", "=", "self", ".", "heads", ",", "\n", "window_size", "=", "self", ".", "window_size", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "rpe_init", "=", "self", ".", "rpe_init", ")", "(", ")", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "      ", "mask", "=", "jnp", ".", "asarray", "(", "mask", ",", "self", ".", "dtype", ")", "*", "MINUS_INF", "\n", "bias", "=", "mask", "if", "bias", "is", "None", "else", "bias", "+", "mask", "\n", "\n", "", "attn_weights", "=", "nn", ".", "attention", ".", "dot_product_attention_weights", "(", "q", ",", "\n", "k", ",", "\n", "dropout_rate", "=", "self", ".", "attention_dropout", ",", "\n", "deterministic", "=", "not", "train", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "bias", "=", "bias", ")", "\n", "\n", "# return weighted sum over values for each query position", "\n", "out_per_head", "=", "jnp", ".", "einsum", "(", "'...hqk,...khd->...qhd'", ",", "attn_weights", ",", "v", ")", "\n", "out_concat", "=", "jnp", ".", "reshape", "(", "out_per_head", ",", "[", "*", "out_per_head", ".", "shape", "[", ":", "-", "2", "]", ",", "self", ".", "features", "]", ")", "\n", "out", "=", "nn", ".", "Dense", "(", "self", ".", "output_features", "if", "self", ".", "output_features", "else", "self", ".", "features", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "name", "=", "'to_out'", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ")", "(", "out_concat", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._get_query": [[66, 84], ["qna.FusedKQnA.param", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "qna._normalize_and_reshape_query", "jax.numpy.sqrt", "jax.numpy.sqrt", "jax.numpy.sqrt", "jax.truncated_normal", "jax.truncated_normal", "jax.truncated_normal"], "methods", ["home.repos.pwc.inspect_result.moabarar_qna.layers.qna._normalize_and_reshape_query"], ["def", "_get_query", "(", "self", ")", ":", "\n", "    ", "\"\"\"Defines the queries parameters and reshape then into [..., N_Queries, Heads, Head_dim].\n    Queries are also scaled by SQRT(Head_dim) for stability (proposed in https://arxiv.org/abs/1706.03762).\n\n    Returns: Queries after preprocessing with shape [..., N_Queries, Heads, Head_dim].\n\n    \"\"\"", "\n", "\n", "def", "querey_init_normalized_", "(", "key", ",", "shape", ",", "dtype", "=", "jnp", ".", "float32", ")", ":", "\n", "      ", "stddev", "=", "jnp", ".", "sqrt", "(", "1.0", "/", "(", "self", ".", "features", "//", "self", ".", "heads", ")", ")", "\n", "return", "random", ".", "truncated_normal", "(", "key", ",", "-", "2", ",", "2", ",", "shape", ",", "dtype", ")", "*", "stddev", "\n", "\n", "", "q_init", "=", "querey_init_normalized_", "if", "self", ".", "query_init", "is", "None", "else", "self", ".", "query_init", "\n", "q", "=", "self", ".", "param", "(", "'query'", ",", "q_init", ",", "(", "self", ".", "n_queries", ",", "self", ".", "features", ")", ")", "\n", "q", "=", "jnp", ".", "asarray", "(", "q", ",", "self", ".", "dtype", ")", "\n", "q", "=", "_normalize_and_reshape_query", "(", "q", ",", "self", ".", "dtype", ",", "self", ".", "heads", ",", "self", ".", "normalize_q", ",", "depth_scale", "=", "True", ",", "\n", "normalize_stop_grads", "=", "self", ".", "qna_normalize_stop_grads", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._compute_QK_scores": [[85, 107], ["qna.FusedKQnA.param", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "Wk.reshape.reshape.reshape", "jax.numpy.einsum", "jax.numpy.einsum", "jax.numpy.einsum", "jax.numpy.einsum", "jax.numpy.einsum", "jax.numpy.einsum", "qna.FusedKQnA.param", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.einsum", "jax.numpy.einsum", "jax.numpy.einsum"], "methods", ["None"], ["", "def", "_compute_QK_scores", "(", "self", ",", "q", ",", "x", ")", ":", "\n", "    ", "\"\"\"Computes the QK dot product in fused manner.\n    Since the queries are shared across windows, we compute (Q*W_k^T)X^T for better memory utilization.\n\n    :param q: The leared queries of shape [..., N_Queries, Heads, Head_dim]\n    :param x: The input features [B, H, W, C]\n    :return: The query-key dot product for each query head [B, H, W, N_Queries, Heads]\n    \"\"\"", "\n", "# q = [Nq, h, d]", "\n", "Wk", "=", "self", ".", "param", "(", "'Wk'", ",", "self", ".", "kernel_init", ",", "[", "x", ".", "shape", "[", "-", "1", "]", ",", "self", ".", "features", "]", ")", "\n", "Wk", "=", "jnp", ".", "asarray", "(", "Wk", ",", "self", ".", "dtype", ")", "\n", "# WK = [D_in, h, D]", "\n", "Wk", "=", "Wk", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "features", "//", "self", ".", "heads", "]", ")", "\n", "qWk", "=", "jnp", ".", "einsum", "(", "'Bqhd,Dhd->BDqh'", ",", "q", ",", "Wk", ",", "precision", "=", "None", ")", "\n", "qWkx", "=", "jnp", ".", "einsum", "(", "'BHWD,BDqh->BHWqh'", ",", "x", ",", "qWk", ",", "precision", "=", "None", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "      ", "Wk_b", "=", "self", ".", "param", "(", "'Wk_b'", ",", "self", ".", "bias_init", ",", "[", "self", ".", "heads", ",", "self", ".", "features", "//", "self", ".", "heads", "]", ")", "\n", "Wk_b", "=", "jnp", ".", "asarray", "(", "Wk_b", ",", "self", ".", "dtype", ")", "\n", "qWk_b", "=", "jnp", ".", "einsum", "(", "'hd,Bqhd->Bqh'", ",", "Wk_b", ",", "q", ",", "precision", "=", "None", ")", "[", ":", ",", "None", ",", "None", ",", "...", "]", "\n", "qWkx", "=", "qWkx", "+", "qWk_b", "\n", "\n", "", "return", "qWkx", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._get_query_attention_scale": [[108, 148], ["qna.FusedKQnA.param", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "attn_scale.reshape.reshape.reshape", "qna.FusedKQnA.param", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "attn_scale.reshape.reshape.reshape", "jax.normal", "jax.normal", "jax.normal", "jax.numpy.concatenate", "jax.numpy.concatenate", "jax.numpy.concatenate", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "attn_scale.reshape.reshape.reshape", "jax.normal", "jax.normal", "jax.normal", "qna.FusedKQnA.param", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "attn_scale.reshape.reshape.reshape", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "attn_scale.reshape.reshape.reshape", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.ones", "jax.numpy.ones", "ValueError"], "methods", ["None"], ["", "def", "_get_query_attention_scale", "(", "self", ")", ":", "\n", "    ", "\"\"\"The query attention scale defines how to aggregate different queries attention into one attention.\n\n    :return: The weights that will be used to apply the scaling\n    \"\"\"", "\n", "if", "self", ".", "attn_scale", "==", "'normal'", ":", "\n", "      ", "_normal_init_fn", "=", "lambda", "key", ",", "shape", ":", "random", ".", "normal", "(", "key", ",", "shape", ",", "jnp", ".", "float32", ")", "*", "0.02", "\n", "attn_scale", "=", "self", ".", "param", "(", "'attn_scale_weights'", ",", "_normal_init_fn", ",", "\n", "(", "1", ",", "1", ",", "self", ".", "kernel_size", "**", "2", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "\n", "attn_scale", "=", "jnp", ".", "asarray", "(", "attn_scale", ",", "self", ".", "dtype", ")", "\n", "attn_scale", "=", "attn_scale", ".", "reshape", "(", "\n", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "# Backward compatibility", "\n", "", "elif", "self", ".", "attn_scale", "==", "'normal_elementwise'", ":", "\n", "      ", "_normal_init_fn", "=", "lambda", "key", ",", "shape", ":", "random", ".", "normal", "(", "key", ",", "shape", ",", "jnp", ".", "float32", ")", "*", "0.02", "\n", "attn_scale", "=", "self", ".", "param", "(", "'attn_scale_weights'", ",", "_normal_init_fn", ",", "\n", "(", "1", ",", "1", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "\n", "attn_scale", "=", "jnp", ".", "asarray", "(", "attn_scale", ",", "self", ".", "dtype", ")", "\n", "attn_scale", "=", "attn_scale", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "# Backward compatibility", "\n", "", "elif", "self", ".", "attn_scale", "==", "'posneg'", ":", "\n", "      ", "attn_scale", "=", "jnp", ".", "concatenate", "(", "[", "jnp", ".", "ones", "(", "(", "1", ",", "1", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", "//", "2", ")", ")", ",", "\n", "jnp", ".", "ones", "(", "(", "1", ",", "1", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", "//", "2", ")", ")", "*", "-", "1", "]", ",", "axis", "=", "3", ")", "\n", "attn_scale", "=", "jnp", ".", "asarray", "(", "attn_scale", ",", "self", ".", "dtype", ")", "\n", "attn_scale", "=", "attn_scale", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "# Backward compatibility", "\n", "", "elif", "self", ".", "attn_scale", "==", "'ones'", ":", "\n", "      ", "_pos_init_fn", "=", "lambda", "key", ",", "shape", ":", "jnp", ".", "ones", "(", "shape", ",", "jnp", ".", "float32", ")", "\n", "attn_scale", "=", "self", ".", "param", "(", "'attn_scale_pos'", ",", "_pos_init_fn", ",", "(", "1", ",", "1", ",", "self", ".", "kernel_size", "**", "2", ",", "self", ".", "n_queries", ",", "self", ".", "heads", ")", ")", "\n", "attn_scale", "=", "jnp", ".", "asarray", "(", "attn_scale", ",", "self", ".", "dtype", ")", "\n", "attn_scale", "=", "attn_scale", ".", "reshape", "(", "\n", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "# Backward compatibility", "\n", "", "elif", "self", ".", "attn_scale", "==", "'avg'", ":", "\n", "      ", "attn_scale", "=", "jnp", ".", "ones", "(", "(", "1", ",", "self", ".", "n_queries", ",", "self", ".", "heads", ")", ",", "jnp", ".", "float32", ")", "/", "self", ".", "n_queries", "\n", "attn_scale", "=", "jnp", ".", "asarray", "(", "attn_scale", ",", "self", ".", "dtype", ")", "\n", "attn_scale", "=", "attn_scale", ".", "reshape", "(", "\n", "(", "1", ",", "1", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "# Backward compatibility", "\n", "", "elif", "self", ".", "attn_scale", "==", "'none'", ":", "\n", "      ", "attn_scale", "=", "None", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Scale {self.attn_scale} not supported!'", ")", "\n", "\n", "", "return", "attn_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._get_relative_bias": [[149, 184], ["qna.FusedKQnA.param", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.reshape.reshape", "jax.numpy.reshape.reshape", "jax.truncated_normal", "jax.truncated_normal", "jax.truncated_normal", "jax.numpy.sqrt", "jax.numpy.sqrt", "jax.numpy.sqrt", "flax.linen.DenseGeneral", "qna.FusedKQnA.param", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.asarray", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.einsum", "jax.numpy.einsum", "jax.numpy.einsum", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.reshape"], "methods", ["None"], ["", "def", "_get_relative_bias", "(", "self", ",", "q", ")", ":", "\n", "    ", "\"\"\"Return the relative positional embedding that will be added to the QK scores before applying the softmax\"\"\"", "\n", "if", "self", ".", "pos_embedding_type", "==", "'relative_pos'", ":", "\n", "      ", "_normal_init_fn", "=", "lambda", "key", ",", "shape", ":", "random", ".", "truncated_normal", "(", "key", ",", "-", "2.", ",", "2.0", ",", "shape", ",", "jnp", ".", "float32", ")", "*", "0.02", "\n", "pos_embedding_init", "=", "_normal_init_fn", "if", "self", ".", "pos_embedding_init", "is", "None", "else", "self", ".", "pos_embedding_init", "\n", "relative_pos_embedding", "=", "self", ".", "param", "(", "'rpe_bias'", ",", "pos_embedding_init", ",", "\n", "(", "self", ".", "kernel_size", "**", "2", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "\n", "if", "self", ".", "scale_rpe_bias", ":", "\n", "        ", "relative_pos_embedding", "=", "relative_pos_embedding", "/", "jnp", ".", "sqrt", "(", "self", ".", "features", "//", "self", ".", "heads", ")", "\n", "", "relative_pos_embedding", "=", "jnp", ".", "asarray", "(", "relative_pos_embedding", ",", "self", ".", "dtype", ")", "\n", "relative_pos_embedding", "=", "relative_pos_embedding", ".", "reshape", "(", "\n", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "# Backward compatibility", "\n", "", "elif", "self", ".", "pos_embedding_type", "==", "'contextual_pos'", ":", "\n", "# Defined in: https://arxiv.org/abs/2107.14222", "\n", "# q is already scaled by SQRT(Head_dim)...", "\n", "      ", "relative_pos_embedding", "=", "nn", ".", "DenseGeneral", "(", "features", "=", "[", "self", ".", "kernel_size", "**", "2", ",", "self", ".", "heads", "]", ",", "axis", "=", "[", "-", "2", ",", "-", "1", "]", ",", "\n", "name", "=", "'rpe_bias'", ",", "dtype", "=", "self", ".", "dtype", ")", "(", "q", ")", "\n", "relative_pos_embedding", "=", "relative_pos_embedding", ".", "reshape", "(", "\n", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "# Backward compatibility", "\n", "", "elif", "self", ".", "pos_embedding_type", "==", "'absolute_pos'", ":", "\n", "      ", "pos_embedding", "=", "self", ".", "param", "(", "'absolute_pos_embedding'", ",", "self", ".", "pos_embedding_init", ",", "\n", "(", "self", ".", "kernel_size", "**", "2", ",", "self", ".", "n_queries", ",", "self", ".", "features", ")", ")", "\n", "pos_embedding", "=", "jnp", ".", "asarray", "(", "pos_embedding", ",", "self", ".", "dtype", ")", "\n", "pos_embedding", "=", "jnp", ".", "reshape", "(", "pos_embedding", ",", "\n", "[", "self", ".", "kernel_size", "**", "2", ",", "self", ".", "n_queries", ",", "self", ".", "heads", ",", "self", ".", "features", "//", "self", ".", "heads", "]", ")", "\n", "relative_pos_embedding", "=", "jnp", ".", "einsum", "(", "'Bqhd,...kqhd->...kqh'", ",", "q", ",", "pos_embedding", ")", "\n", "relative_pos_embedding", "=", "jnp", ".", "reshape", "(", "relative_pos_embedding", ",", "\n", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ",", "1", ",", "\n", "self", ".", "n_queries", "*", "self", ".", "heads", ")", ")", "# Backward compatibility", "\n", "", "elif", "self", ".", "pos_embedding_type", "==", "'none'", ":", "\n", "      ", "relative_pos_embedding", "=", "None", "\n", "", "else", ":", "\n", "      ", "assert", "False", ",", "f'The following positional {self.pos_embedding_type} is no supported'", "\n", "\n", "", "return", "relative_pos_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._compute_attention": [[185, 222], ["jax.numpy.exp", "jax.numpy.exp", "jax.numpy.exp", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.exp", "jax.numpy.exp", "jax.numpy.exp", "jax.numpy.repeat", "jax.numpy.repeat", "jax.numpy.repeat", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.exp.reshape", "jax.lax.conv_general_dilated().reshape", "jax.lax.conv_general_dilated().reshape", "jax.lax.conv_general_dilated().reshape", "jax.lax.conv_general_dilated().reshape", "jax.lax.conv_general_dilated().reshape", "jax.lax.conv_general_dilated().reshape", "jax.lax.conv_general_dilated().reshape", "jax.lax.conv_general_dilated().reshape", "jax.lax.conv_general_dilated().reshape", "jax.numpy.sum().reshape", "jax.numpy.sum().reshape", "jax.numpy.sum().reshape", "jax.numpy.reshape", "jax.numpy.reshape", "jax.numpy.reshape", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.lax.conv_general_dilated", "jax.numpy.sum", "jax.numpy.sum", "jax.numpy.sum"], "methods", ["None"], ["", "def", "_compute_attention", "(", "self", ",", "cost", ",", "v", ",", "rpe", "=", "None", ",", "attn_scale", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the attention in memory efficent manner (see paper: https://arxiv.org/abs/2112.11435)\"\"\"", "\n", "B", ",", "H", ",", "W", ",", "_", "=", "v", ".", "shape", "\n", "cost_exp", "=", "jnp", ".", "exp", "(", "cost", ")", "\n", "v_cost_exp", "=", "cost_exp", "[", "...", ",", "jnp", ".", "newaxis", "]", "*", "jnp", ".", "reshape", "(", "v", ",", "[", "B", ",", "H", ",", "W", ",", "1", ",", "self", ".", "heads", ",", "\n", "self", ".", "features", "//", "self", ".", "heads", "]", ")", "# [B, H, W, self.n_queries, h, d]", "\n", "v_cost_exp", "=", "jnp", ".", "reshape", "(", "v_cost_exp", ",", "[", "B", ",", "H", ",", "W", ",", "self", ".", "n_queries", "*", "self", ".", "heads", "*", "self", ".", "features", "//", "self", ".", "heads", "]", ")", "\n", "rpe_exp", "=", "jnp", ".", "exp", "(", "rpe", ")", "\n", "if", "attn_scale", "is", "not", "None", ":", "\n", "      ", "summation_kernel", "=", "rpe_exp", "*", "attn_scale", "# [self.kernel_size, self.kernel_size, 1, self.n_queries*h]", "\n", "", "else", ":", "\n", "      ", "summation_kernel", "=", "rpe_exp", "\n", "", "summation_kernel", "=", "jnp", ".", "repeat", "(", "summation_kernel", ",", "repeats", "=", "self", ".", "features", "//", "self", ".", "heads", ",", "axis", "=", "-", "1", ")", "\n", "I", "=", "v_cost_exp", "\n", "sum_v_cost_exp", "=", "jax", ".", "lax", ".", "conv_general_dilated", "(", "I", ",", "\n", "summation_kernel", ",", "\n", "window_strides", "=", "[", "self", ".", "stride", ",", "self", ".", "stride", "]", ",", "\n", "padding", "=", "[", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", ",", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", "]", ",", "\n", "feature_group_count", "=", "self", ".", "n_queries", "*", "self", ".", "features", ",", "\n", "dimension_numbers", "=", "(", "'NHWC'", ",", "'HWIO'", ",", "'NHWC'", ")", ",", "\n", "precision", "=", "self", ".", "precision", ",", "\n", ")", "\n", "h_out", ",", "w_out", "=", "sum_v_cost_exp", ".", "shape", "[", "1", "]", ",", "sum_v_cost_exp", ".", "shape", "[", "2", "]", "\n", "sum_v_cost_exp", "=", "jnp", ".", "reshape", "(", "sum_v_cost_exp", ",", "\n", "[", "B", ",", "h_out", ",", "w_out", ",", "self", ".", "n_queries", ",", "self", ".", "heads", ",", "self", ".", "features", "//", "self", ".", "heads", "]", ")", "\n", "I", "=", "cost_exp", ".", "reshape", "(", "[", "B", ",", "H", ",", "W", ",", "-", "1", "]", ")", "\n", "summation_kernel", "=", "rpe_exp", "\n", "sum_cost_exp", "=", "jax", ".", "lax", ".", "conv_general_dilated", "(", "I", ",", "\n", "summation_kernel", ",", "\n", "window_strides", "=", "[", "self", ".", "stride", ",", "self", ".", "stride", "]", ",", "\n", "padding", "=", "[", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", ",", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", "]", ",", "\n", "feature_group_count", "=", "self", ".", "n_queries", "*", "self", ".", "heads", ",", "\n", "dimension_numbers", "=", "(", "'NHWC'", ",", "'HWIO'", ",", "'NHWC'", ")", ",", "\n", ")", ".", "reshape", "(", "[", "B", ",", "h_out", ",", "w_out", ",", "self", ".", "n_queries", ",", "self", ".", "heads", ",", "1", "]", ")", "\n", "out", "=", "sum_v_cost_exp", "/", "sum_cost_exp", "\n", "out", "=", "jnp", ".", "sum", "(", "out", ",", "axis", "=", "-", "3", ")", ".", "reshape", "(", "[", "B", ",", "h_out", ",", "w_out", ",", "self", ".", "features", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA.__call__": [[223, 249], ["qna.FusedKQnA._get_query", "jax.numpy.broadcast_to", "jax.numpy.broadcast_to", "jax.numpy.broadcast_to", "qna.FusedKQnA._compute_QK_scores", "qna.FusedKQnA._get_query_attention_scale", "qna.FusedKQnA._get_relative_bias", "qna.FusedKQnA._compute_attention", "flax.linen.Dense", "flax.linen.Dense"], "methods", ["home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._get_query", "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._compute_QK_scores", "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._get_query_attention_scale", "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._get_relative_bias", "home.repos.pwc.inspect_result.moabarar_qna.layers.qna.FusedKQnA._compute_attention"], ["", "@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "q", "=", "self", ".", "_get_query", "(", ")", "\n", "q", "=", "jnp", ".", "broadcast_to", "(", "q", ",", "[", "x", ".", "shape", "[", "0", "]", ",", "*", "q", ".", "shape", "]", ")", "# q = [B, Nq, h, d]", "\n", "\n", "# Compute the QK Scores that will be used to define the attention weights.", "\n", "QK_score", "=", "self", ".", "_compute_QK_scores", "(", "q", ",", "x", ")", "\n", "# Compute V", "\n", "V", "=", "nn", ".", "Dense", "(", "self", ".", "features", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "name", "=", "'to_v'", ")", "(", "x", ")", "\n", "\n", "attention_scale", "=", "self", ".", "_get_query_attention_scale", "(", ")", "\n", "relative_bias", "=", "self", ".", "_get_relative_bias", "(", "q", ")", "\n", "\n", "out_per_head_concat", "=", "self", ".", "_compute_attention", "(", "QK_score", ",", "V", ",", "rpe", "=", "relative_bias", ",", "attn_scale", "=", "attention_scale", ")", "\n", "out", "=", "nn", ".", "Dense", "(", "self", ".", "features", "if", "self", ".", "out_features", "is", "None", "else", "self", ".", "out_features", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "name", "=", "'to_out'", ")", "(", "out_per_head_concat", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.layers.qna._normalize_and_reshape_query": [[19, 43], ["jax.numpy.asarray", "jax.numpy.reshape", "jax.numpy.linalg.norm", "jax.numpy.linalg.norm", "jax.numpy.clip", "jax.lax.stop_gradient", "jax.lax.stop_gradient", "jax.lax.stop_gradient", "jax.numpy.sqrt().astype", "jax.numpy.sqrt"], "function", ["None"], ["def", "_normalize_and_reshape_query", "(", "q", ",", "dtype", ",", "heads", ",", "unit_norm", ",", "depth_scale", ",", "max_norm", "=", "None", ",", "normalize_stop_grads", "=", "False", ")", ":", "\n", "  ", "\"\"\"Normalizes the query and prepares it for attention computation.\"\"\"", "\n", "assert", "q", ".", "ndim", ">", "0", "\n", "assert", "max_norm", "is", "None", "or", "(", "max_norm", "is", "not", "None", "and", "not", "unit_norm", ")", "\n", "q", "=", "jnp", ".", "asarray", "(", "q", ",", "dtype", "=", "dtype", ")", "\n", "newshape", "=", "[", "heads", ",", "q", ".", "shape", "[", "-", "1", "]", "//", "heads", "]", "\n", "if", "q", ".", "ndim", ">", "1", ":", "\n", "    ", "newshape", "=", "[", "*", "q", ".", "shape", "[", ":", "-", "1", "]", ",", "*", "newshape", "]", "\n", "", "q", "=", "jnp", ".", "reshape", "(", "q", ",", "newshape", ")", "\n", "if", "unit_norm", ":", "\n", "    ", "q_norm", "=", "jnp", ".", "linalg", ".", "norm", "(", "q", ",", "ord", "=", "2", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "if", "normalize_stop_grads", ":", "\n", "      ", "q_norm", "=", "jax", ".", "lax", ".", "stop_gradient", "(", "q_norm", ")", "\n", "", "q", "=", "q", "/", "(", "q_norm", "+", "1e-6", ")", "\n", "", "if", "max_norm", "is", "not", "None", ":", "\n", "    ", "assert", "not", "unit_norm", ",", "'Limiting queries norm cannot be enforced while unit_norm is set.'", "\n", "q_norm", "=", "jnp", ".", "linalg", ".", "norm", "(", "q", ",", "ord", "=", "2", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "q_norm_scale", "=", "max_norm", "/", "(", "q_norm", "+", "1e-6", ")", "\n", "q_norm_scale", "=", "jnp", ".", "clip", "(", "q_norm_scale", ",", "a_max", "=", "1.0", ")", "\n", "q", "=", "q", "*", "q_norm_scale", "\n", "", "if", "depth_scale", ":", "\n", "    ", "depth", "=", "q", ".", "shape", "[", "-", "1", "]", "\n", "q", "=", "q", "/", "jnp", ".", "sqrt", "(", "depth", ")", ".", "astype", "(", "dtype", ")", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.layers.utils.DropPath.__call__": [[35, 51], ["utils.DropPath.make_rng", "jax.random.bernoulli", "jax.random.bernoulli", "jax.random.bernoulli", "jax.random.bernoulli", "jax.tile", "jax.tile", "scaled_inputs.astype.astype.astype", "jax.lax.select", "jax.lax.select", "jax.lax.select", "jax.lax.select", "jax.zeros_like", "jax.zeros_like", "list"], "methods", ["None"], ["new_param", "=", "jnp", ".", "reshape", "(", "new_param", ",", "(", "a", "*", "a", ",", "h", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "new_param", "=", "x_pretrained", "\n", "", "res", ".", "append", "(", "jnp", ".", "asarray", "(", "new_param", ",", "x_current", ".", "dtype", ")", ")", "\n", "", "new_params", "=", "tree_util", ".", "tree_unflatten", "(", "current_params_structure", ",", "res", ")", "\n", "return", "state", ".", "replace", "(", "params", "=", "new_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.layers.utils.LayerScale.__call__": [[59, 65], ["utils.LayerScale.param", "jax.asarray", "jax.asarray", "jax.ones", "jax.ones"], "methods", ["None"], []], "home.repos.pwc.inspect_result.moabarar_qna.layers.utils.MlpBlock.__call__": [[84, 102], ["utils.MlpBlock.activation_fn", "utils.MlpBlock.dense_fn", "flax.Dropout", "utils.MlpBlock.dense_fn", "flax.Dropout"], "methods", ["None"], []], "home.repos.pwc.inspect_result.moabarar_qna.models.__init__.create_model": [[8, 26], ["config.get", "absl.logging.info", "config.model_name.startswith", "qna_vit.create_model.", "models.qna_vit.create_model", "ValueError", "jax.local_devices"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.create_model"], []], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.StemBlock.__call__": [[49, 76], ["flax.module.merge_param", "qna_vit.StemBlock.activation_fn", "flax.max_pool", "flax.Conv", "flax.BatchNorm", "ValueError", "flax.Conv"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ",", "train", ":", "Optional", "[", "bool", "]", "=", "None", ")", ":", "\n", "    ", "train", "=", "nn", ".", "module", ".", "merge_param", "(", "'train'", ",", "self", ".", "train", ",", "train", ")", "\n", "patch_size", "=", "self", ".", "patch_size", "\n", "if", "self", ".", "stem_type", "==", "'resnet'", ":", "\n", "      ", "x", "=", "nn", ".", "Conv", "(", "features", "=", "self", ".", "features", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "name", "=", "'conv_7x7'", ",", "\n", "use_bias", "=", "False", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ")", "(", "x", ")", "\n", "x", "=", "nn", ".", "BatchNorm", "(", "dtype", "=", "self", ".", "dtype", ",", "use_running_average", "=", "not", "train", ",", "momentum", "=", "0.9", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "activation_fn", "(", "x", ")", "\n", "x", "=", "nn", ".", "max_pool", "(", "x", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ")", "\n", "", "elif", "self", ".", "stem_type", "==", "'patch'", ":", "\n", "      ", "x", "=", "nn", ".", "Conv", "(", "features", "=", "self", ".", "features", ",", "kernel_size", "=", "(", "patch_size", ",", "patch_size", ")", ",", "\n", "strides", "=", "(", "patch_size", ",", "patch_size", ")", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "name", "=", "'conv_1x1'", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Available stem type are [\\'patch\\', \\'resnet\\']. Got: {self.stem_type}.'", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.BaseBlock.__call__": [[91, 128], ["functools.partial", "qna_vit.BaseBlock.spatial_mixing_fn_maker", "layers.MlpBlock", "layers.DropPath", "qna_vit.BaseBlock.spatial_mixing_skip_fn", "functools.partial.", "layers.LayerScale", "layers.DropPath", "functools.partial.", "layers.LayerScale"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "norm_fn", "=", "functools", ".", "partial", "(", "nn", ".", "LayerNorm", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "skip", "=", "x", "\n", "if", "self", ".", "spatial_mixing_skip_fn", "is", "not", "None", ":", "\n", "# To support skip connection with strided QnA we apply 1x1 conv with stride 2 on the skip path.", "\n", "      ", "skip", "=", "self", ".", "spatial_mixing_skip_fn", "(", ")", "(", "skip", ")", "\n", "\n", "# Spatial Mixing:", "\n", "", "x", "=", "self", ".", "spatial_mixing_fn_maker", "(", ")", "(", "norm_fn", "(", ")", "(", "x", ")", ")", "\n", "if", "self", ".", "layer_scale", "is", "not", "None", ":", "\n", "      ", "x", "=", "layers", ".", "LayerScale", "(", "scale_init", "=", "self", ".", "layer_scale", ",", "\n", "features", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "spatial_mixing_skip_fn", "is", "None", ":", "\n", "      ", "x", "=", "layers", ".", "DropPath", "(", "rate", "=", "self", ".", "drop_path", ",", "deterministic", "=", "not", "self", ".", "train", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "skip", "=", "x", "+", "skip", "\n", "\n", "# Channel Mixing:", "\n", "x", "=", "layers", ".", "MlpBlock", "(", "mlp_dim", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "4", ",", "\n", "out_dim", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "\n", "proj_drop", "=", "0.0", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "train", "=", "self", ".", "train", ",", ")", "(", "norm_fn", "(", ")", "(", "x", ")", ")", "\n", "if", "self", ".", "layer_scale", "is", "not", "None", ":", "\n", "      ", "x", "=", "layers", ".", "LayerScale", "(", "scale_init", "=", "self", ".", "layer_scale", ",", "\n", "features", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "DropPath", "(", "rate", "=", "self", ".", "drop_path", ",", "deterministic", "=", "not", "self", ".", "train", ")", "(", "x", ")", "\n", "x", "=", "x", "+", "skip", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.AvgPool1x1Conv.__call__": [[140, 152], ["flax.avg_pool", "flax.Conv", "range"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "nn", ".", "avg_pool", "(", "x", ",", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ",", "strides", "=", "(", "self", ".", "stride", ",", "self", ".", "stride", ")", ",", "padding", "=", "'SAME'", ")", "\n", "x", "=", "nn", ".", "Conv", "(", "features", "=", "self", ".", "features", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", "for", "_", "in", "range", "(", "2", ")", "]", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.QnAStage._get_qna_module": [[167, 188], ["dict", "functools.partial", "ValueError", "int", "int"], "methods", ["None"], ["def", "_get_qna_module", "(", "self", ",", "downsample", "=", "False", ")", ":", "\n", "    ", "params", "=", "dict", "(", "features", "=", "self", ".", "features", "*", "(", "1", "+", "int", "(", "downsample", ")", ")", ",", "\n", "heads", "=", "self", ".", "config", ".", "qna_heads", "[", "self", ".", "stage", "]", "*", "(", "1", "+", "int", "(", "downsample", ")", ")", ",", "\n", "kernel_size", "=", "self", ".", "config", ".", "qna_receptive_field", "[", "self", ".", "stage", "]", ",", "\n", "stride", "=", "2", "if", "downsample", "else", "1", ",", "\n", "padding", "=", "(", "self", ".", "config", ".", "qna_receptive_field", "[", "self", ".", "stage", "]", "-", "1", ")", "//", "2", ",", "\n", "pos_embedding_type", "=", "self", ".", "config", ".", "qna_pos_embedding_type", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "pos_embedding_init", "=", "self", ".", "bias_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "attn_scale", "=", "self", ".", "config", ".", "qna_attention_scale", ",", "\n", "n_queries", "=", "self", ".", "config", ".", "qna_num_queries", ",", "\n", "use_bias", "=", "False", "\n", ")", "\n", "if", "self", ".", "config", ".", "qna_implementation", "==", "'fused_efficient'", ":", "\n", "      ", "params", "[", "'normalize_q'", "]", "=", "self", ".", "config", ".", "qna_normalize_q", "[", "self", ".", "stage", "]", "\n", "params", "[", "'qna_normalize_stop_grads'", "]", "=", "self", ".", "config", ".", "qna_normalize_stop_grads", "\n", "return", "functools", ".", "partial", "(", "layers", ".", "FusedKQnA", ",", "**", "params", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Not supported QnA implementation type {self.config.qna_implementation}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.QnAStage.__call__": [[189, 234], ["range", "isinstance", "qna_vit.QnAStage._get_qna_module", "qna_vit.QnAStage._get_qna_module", "qna_vit.BaseBlock", "qna_vit.QnAStage.config.get", "functools.partial", "functools.partial", "qna_vit.BaseBlock", "range", "range"], "methods", ["home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.QnAStage._get_qna_module", "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.QnAStage._get_qna_module"], ["", "", "@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "n_qna", "=", "self", ".", "config", ".", "qna_layers", "[", "self", ".", "stage", "]", "\n", "drop_path", "=", "[", "self", ".", "drop_path", "for", "_", "in", "range", "(", "n_qna", ")", "]", "if", "isinstance", "(", "self", ".", "drop_path", ",", "float", ")", "else", "self", ".", "drop_path", "\n", "\n", "for", "layer", "in", "range", "(", "n_qna", ")", ":", "\n", "      ", "qna_layer_fn", "=", "self", ".", "_get_qna_module", "(", "downsample", "=", "False", ")", "\n", "x", "=", "BaseBlock", "(", "spatial_mixing_fn_maker", "=", "qna_layer_fn", ",", "\n", "drop_path", "=", "drop_path", "[", "layer", "]", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "train", "=", "self", ".", "train", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "layer_scale", "=", "self", ".", "config", ".", "layer_scale", ",", "\n", "name", "=", "f'QnA_Block_{layer + 1}'", ")", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "      ", "qna_layer_fn", "=", "self", ".", "_get_qna_module", "(", "downsample", "=", "True", ")", "\n", "if", "self", ".", "config", ".", "get", "(", "'qna_down_skip'", ",", "'conv1x1'", ")", "==", "'conv1x1'", ":", "\n", "        ", "qna_skip_fn", "=", "functools", ".", "partial", "(", "nn", ".", "Conv", ",", "features", "=", "2", "*", "self", ".", "features", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", "for", "_", "in", "range", "(", "2", ")", "]", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "use_bias", "=", "False", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "assert", "self", ".", "config", ".", "qna_down_skip", "==", "'avgpool'", ",", "f'Downsample skip connection {self.config.qna_down_skip} not supported'", "\n", "qna_skip_fn", "=", "functools", ".", "partial", "(", "AvgPool1x1Conv", ",", "features", "=", "2", "*", "self", ".", "features", ",", "\n", "kernel_size", "=", "self", ".", "config", ".", "qna_receptive_field", "[", "self", ".", "stage", "]", ",", "\n", "stride", "=", "2", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "use_bias", "=", "False", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "", "x", "=", "BaseBlock", "(", "spatial_mixing_fn_maker", "=", "qna_layer_fn", ",", "\n", "spatial_mixing_skip_fn", "=", "qna_skip_fn", ",", "\n", "drop_path", "=", "drop_path", "[", "layer", "+", "1", "]", "if", "self", ".", "config", ".", "drop_path_downsample", "else", "0.0", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "train", "=", "self", ".", "train", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "layer_scale", "=", "self", ".", "config", ".", "layer_scale", ",", "\n", "name", "=", "f'QnA_Block_{n_qna + 1}_stride_2'", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.LSAStage._split_to_windows": [[248, 258], ["jax.reshape", "jax.transpose", "jax.reshape"], "methods", ["None"], ["def", "_split_to_windows", "(", "self", ",", "x", ",", "input_shape", "=", "None", ")", ":", "\n", "    ", "assert", "x", ".", "ndim", "==", "4", ",", "f'Input dimension should be 4, got ndim = {x.ndim} and shape {x.shape}'", "\n", "# TODO(marar) handle with padding if neceesary ?", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "if", "input_shape", "is", "None", "else", "input_shape", "\n", "window_size", "=", "self", ".", "config", ".", "lsa_window", "[", "self", ".", "stage", "]", "\n", "assert", "H", "%", "window_size", "==", "0", "and", "W", "%", "window_size", "==", "0", ",", "'Input shape must be divisible by window size'", "\n", "x", "=", "jnp", ".", "reshape", "(", "x", ",", "[", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", "]", ")", "\n", "x", "=", "jnp", ".", "transpose", "(", "x", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", "]", ")", "\n", "x", "=", "jnp", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "window_size", "**", "2", ",", "C", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.LSAStage._merge_windows": [[259, 268], ["jax.reshape", "jax.transpose", "jax.reshape"], "methods", ["None"], ["", "def", "_merge_windows", "(", "self", ",", "x", ",", "input_shape", ")", ":", "\n", "    ", "assert", "x", ".", "ndim", "==", "3", ",", "f'Merging non-sequential input is not supported, '", "f'ndim should be 3 got {x.ndim} with shape {x.shape}'", "\n", "window_size", "=", "self", ".", "config", ".", "lsa_window", "[", "self", ".", "stage", "]", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "input_shape", "\n", "x", "=", "jnp", ".", "reshape", "(", "x", ",", "[", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "C", "]", ")", "\n", "x", "=", "jnp", ".", "transpose", "(", "x", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", "]", ")", "\n", "x", "=", "jnp", ".", "reshape", "(", "x", ",", "[", "B", ",", "H", ",", "W", ",", "C", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.LSAStage.__call__": [[269, 307], ["qna_vit.LSAStage._split_to_windows", "range", "qna_vit.LSAStage._merge_windows", "isinstance", "functools.partial", "qna_vit.BaseBlock", "range"], "methods", ["home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.LSAStage._split_to_windows", "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.LSAStage._merge_windows"], ["", "@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "n_lsa", "=", "self", ".", "config", ".", "lsa_layers", "[", "self", ".", "stage", "]", "\n", "if", "n_lsa", "==", "0", ":", "# Some stages may have no LSA layers (e.g., early stages)", "\n", "      ", "return", "x", "\n", "\n", "# Window partition batched images [B, H, W, C]", "\n", "# Save original shape before partition so we can later return input to original shape.", "\n", "", "original_shape", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "_split_to_windows", "(", "x", ")", "\n", "\n", "drop_path", "=", "[", "self", ".", "drop_path", "for", "_", "in", "range", "(", "n_lsa", ")", "]", "if", "isinstance", "(", "self", ".", "drop_path", ",", "float", ")", "else", "self", ".", "drop_path", "\n", "\n", "for", "layer", "in", "range", "(", "n_lsa", ")", ":", "\n", "      ", "lsa_fn", "=", "functools", ".", "partial", "(", "layers", ".", "MultiHeadSelfAttention", ",", "\n", "features", "=", "self", ".", "features", ",", "\n", "heads", "=", "self", ".", "config", ".", "lsa_heads", "[", "self", ".", "stage", "]", ",", "\n", "train", "=", "self", ".", "train", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "attention_dropout", "=", "self", ".", "config", ".", "lsa_attention_dropout", ",", "\n", "use_relative_pe", "=", "self", ".", "config", ".", "lsa_pos_embedding_type", "==", "RPE_STR_REPRESENTATION", ",", "\n", "window_size", "=", "self", ".", "config", ".", "lsa_window", "[", "self", ".", "stage", "]", "\n", ")", "\n", "x", "=", "BaseBlock", "(", "spatial_mixing_fn_maker", "=", "lsa_fn", ",", "\n", "drop_path", "=", "drop_path", "[", "layer", "]", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "train", "=", "self", ".", "train", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", "\n", "layer_scale", "=", "self", ".", "config", ".", "layer_scale", ",", "\n", "name", "=", "f'MSA_Block_{layer + 1}'", ")", "(", "x", ")", "\n", "\n", "# Reshape sequence into original shape:", "\n", "", "x", "=", "self", ".", "_merge_windows", "(", "x", ",", "original_shape", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.ClassificationHead.__call__": [[320, 370], ["jax.reshape", "jax.mean", "flax.Dense", "flax.LayerNorm", "jax.reshape", "tuple", "flax.LayerNorm", "layers.FusedKQnA", "jax.mean", "jax.reshape", "ValueError", "range", "flax.LayerNorm", "jax.reshape", "layers.FusedKQnA"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "if", "self", ".", "head_type", "==", "'gap'", ":", "\n", "      ", "x", "=", "nn", ".", "LayerNorm", "(", "dtype", "=", "self", ".", "dtype", ")", "(", "x", ")", "\n", "x", "=", "jnp", ".", "reshape", "(", "x", ",", "[", "B", ",", "H", "*", "W", ",", "C", "]", ")", "\n", "x", "=", "jnp", ".", "mean", "(", "x", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "x", ".", "ndim", "-", "1", ")", ")", ")", "\n", "", "elif", "self", ".", "head_type", "==", "'qnav1'", ":", "\n", "      ", "assert", "self", ".", "num_heads", ",", "f'Need to define number of heads when using QnA classification head. Got: {self.num_heads}'", "\n", "assert", "H", "==", "W", "# TODO(marar) Currently working with squared image - need to fix QnA to support non-squared kernels", "\n", "x", "=", "nn", ".", "LayerNorm", "(", "dtype", "=", "self", ".", "dtype", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "FusedKQnA", "(", "features", "=", "C", ",", "\n", "stride", "=", "1", ",", "\n", "heads", "=", "self", ".", "num_heads", ",", "\n", "kernel_size", "=", "H", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "normalize_q", "=", "True", ",", "\n", "n_queries", "=", "2", ",", "\n", "padding", "=", "0", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "use_bias", "=", "False", ")", "(", "x", ")", "\n", "x", "=", "jnp", ".", "reshape", "(", "x", ",", "[", "B", ",", "C", "]", ")", "\n", "x", "=", "x", "\n", "", "elif", "self", ".", "head_type", "==", "'qnav2'", ":", "\n", "      ", "assert", "self", ".", "num_heads", ",", "f'Need to define number of heads when using QnA classification head. Got: {self.num_heads}'", "\n", "assert", "H", "==", "W", "# TODO(marar) Currently working with squared image - need to fix QnA to support non-squared kernels", "\n", "x", "=", "nn", ".", "LayerNorm", "(", "dtype", "=", "self", ".", "dtype", ")", "(", "x", ")", "\n", "skip", "=", "jnp", ".", "mean", "(", "jnp", ".", "reshape", "(", "x", ",", "[", "B", ",", "H", "*", "W", ",", "C", "]", ")", ",", "axis", "=", "1", ")", "\n", "x", "=", "layers", ".", "FusedKQnA", "(", "features", "=", "C", ",", "\n", "stride", "=", "1", ",", "\n", "heads", "=", "self", ".", "num_heads", ",", "\n", "kernel_size", "=", "H", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "normalize_q", "=", "True", ",", "\n", "n_queries", "=", "2", ",", "\n", "padding", "=", "0", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "use_bias", "=", "False", ")", "(", "x", ")", "\n", "x", "=", "jnp", ".", "reshape", "(", "x", ",", "[", "B", ",", "C", "]", ")", "\n", "x", "=", "x", "+", "skip", "\n", "", "else", ":", "\n", "# TODO(moaba) add available heads to the documentation", "\n", "      ", "raise", "ValueError", "(", "f'Classifier head {self.head_type} no supported.'", ")", "\n", "\n", "", "x", "=", "nn", ".", "Dense", "(", "features", "=", "self", ".", "num_classes", ",", "\n", "name", "=", "'head_logits'", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.QnAViT.__call__": [[381, 434], ["flax.module.merge_param", "dict", "numpy.linspace", "range", "qna_vit.StemBlock", "int", "qna_vit.LSAStage", "qna_vit.QnAStage", "int", "qna_vit.ClassificationHead", "sum", "sum", "int"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ",", "train", ":", "Optional", "[", "bool", "]", "=", "None", ")", ":", "\n", "    ", "train", "=", "nn", ".", "module", ".", "merge_param", "(", "'train'", ",", "self", ".", "train", ",", "train", ")", "\n", "# Common parameters that are used by QnA-Blocks and", "\n", "common_params", "=", "dict", "(", "dtype", "=", "self", ".", "dtype", ",", "\n", "train", "=", "train", ",", "\n", "kernel_init", "=", "self", ".", "kernel_init", ",", "\n", "bias_init", "=", "self", ".", "bias_init", ",", ")", "\n", "\n", "# Extract Patches:", "\n", "dim", "=", "self", ".", "config", ".", "base_dim", "\n", "x", "=", "StemBlock", "(", "features", "=", "dim", ",", "\n", "stem_type", "=", "self", ".", "config", ".", "stem_type", ",", "\n", "**", "common_params", ")", "(", "x", ")", "\n", "\n", "# Network architecture is composed of n_stages (usually n_stages = 4),", "\n", "# each stage is a composition of:", "\n", "#     xN multi-head Local Self-attention blocks (LSA), followed by,", "\n", "#     xM Query-and-Attend blocks.", "\n", "# Down-sampling is performed at the last QnA-block of each stage, except for the last stage.", "\n", "drop_path_downsample", "=", "int", "(", "self", ".", "config", ".", "drop_path_downsample", ")", "*", "(", "self", ".", "config", ".", "n_stages", "-", "1", ")", "\n", "drop_path", "=", "np", ".", "linspace", "(", "0.0", ",", "self", ".", "config", ".", "drop_path", ",", "\n", "num", "=", "(", "sum", "(", "self", ".", "config", ".", "lsa_layers", ")", "+", "sum", "(", "self", ".", "config", ".", "qna_layers", ")", "+", "drop_path_downsample", ")", ")", "\n", "drop_path_offset", "=", "0", "\n", "for", "stage", "in", "range", "(", "self", ".", "config", ".", "n_stages", ")", ":", "\n", "# Multi-head self-attention layers", "\n", "      ", "lsa_n_layers", "=", "self", ".", "config", ".", "lsa_layers", "[", "stage", "]", "\n", "x", "=", "LSAStage", "(", "stage", "=", "stage", ",", "\n", "features", "=", "dim", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", "drop_path", "=", "drop_path", "[", "drop_path_offset", ":", "drop_path_offset", "+", "lsa_n_layers", "]", ",", "\n", "**", "common_params", ")", "(", "x", ")", "\n", "drop_path_offset", "+=", "lsa_n_layers", "\n", "# QnA-Layers self-attention layers", "\n", "qna_n_layers", "=", "self", ".", "config", ".", "qna_layers", "[", "stage", "]", "\n", "x", "=", "QnAStage", "(", "stage", "=", "stage", ",", "\n", "features", "=", "dim", ",", "\n", "downsample", "=", "(", "stage", "!=", "self", ".", "config", ".", "n_stages", "-", "1", ")", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", "drop_path", "=", "drop_path", "[", "\n", "drop_path_offset", ":", "drop_path_offset", "+", "qna_n_layers", "+", "int", "(", "self", ".", "config", ".", "drop_path_downsample", ")", "]", ",", "\n", "**", "common_params", ")", "(", "x", ")", "\n", "drop_path_offset", "+=", "qna_n_layers", "+", "int", "(", "self", ".", "config", ".", "drop_path_downsample", ")", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# Get final prediction:", "\n", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "      ", "x", "=", "ClassificationHead", "(", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "head_type", "=", "self", ".", "config", ".", "classification_head_type", ",", "\n", "num_heads", "=", "self", ".", "config", ".", "qna_heads", "[", "-", "1", "]", ",", "\n", "**", "common_params", ")", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.register": [[17, 20], ["None"], "function", ["None"], ["def", "register", "(", "f", ")", ":", "\n", "  ", "MODELS", "[", "f", ".", "__name__", "]", "=", "f", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.default_config": [[436, 469], ["ml_collections.ConfigDict"], "function", ["None"], ["", "", "def", "default_config", "(", ")", ":", "\n", "  ", "\"\"\"Configurable attributes.\"\"\"", "\n", "cfg", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "cfg", ".", "n_stages", "=", "4", "\n", "cfg", ".", "base_dim", "=", "64", "\n", "\n", "cfg", ".", "qna_heads", "=", "[", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "cfg", ".", "qna_receptive_field", "=", "[", "3", ",", "3", ",", "3", ",", "3", "]", "\n", "cfg", ".", "qna_layers", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "cfg", ".", "qna_pos_embedding_type", "=", "RPE_STR_REPRESENTATION", "\n", "cfg", ".", "qna_attention_scale", "=", "'normal'", "\n", "cfg", ".", "qna_implementation", "=", "'fused_efficient'", "\n", "cfg", ".", "qna_num_queries", "=", "2", "\n", "cfg", ".", "qna_normalize_q", "=", "[", "False", ",", "False", ",", "False", ",", "False", "]", "\n", "cfg", ".", "qna_attention_dropout", "=", "0.0", "# TODO(marar): Add to params - currently ignored", "\n", "\n", "cfg", ".", "mlp_ratio", "=", "4", "# TODO(marar): Add to params - currently ignored", "\n", "cfg", ".", "mlp_dropout", "=", "0.0", "# TODO(marar): Add to params - currently ignored", "\n", "\n", "cfg", ".", "lsa_layers", "=", "[", "0", ",", "0", ",", "4", ",", "2", "]", "\n", "cfg", ".", "lsa_window", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", "\n", "cfg", ".", "lsa_heads", "=", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "cfg", ".", "lsa_attention_dropout", "=", "0.0", "\n", "cfg", ".", "lsa_pos_embedding_type", "=", "RPE_STR_REPRESENTATION", "\n", "\n", "cfg", ".", "activation_fn", "=", "'gelu'", "# TODO(marar): Add to params - currently ignored", "\n", "cfg", ".", "classification_head_type", "=", "'gap'", "\n", "cfg", ".", "stem_type", "=", "'patch'", "# Or 'resnet'", "\n", "cfg", ".", "drop_path", "=", "0.0", "\n", "cfg", ".", "layer_scale", "=", "None", "\n", "cfg", ".", "qna_normalize_stop_grads", "=", "False", "\n", "cfg", ".", "drop_path_downsample", "=", "False", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.qna_vit_tiny": [[470, 493], ["qna_vit.default_config", "config.get", "functools.partial", "default_config.update"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.default_config"], ["", "@", "register", "\n", "def", "qna_vit_tiny", "(", "config", ")", ":", "\n", "  ", "cfg", "=", "default_config", "(", ")", "\n", "\n", "if", "config", ".", "get", "(", "\"qna\"", ")", ":", "\n", "    ", "cfg", ".", "update", "(", "config", ".", "qna", ")", "\n", "\n", "", "cfg", ".", "base_dim", "=", "64", "\n", "\n", "cfg", ".", "qna_heads", "=", "[", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "cfg", ".", "qna_layers", "=", "[", "2", ",", "3", ",", "2", ",", "0", "]", "\n", "cfg", ".", "qna_receptive_field", "=", "[", "3", ",", "3", ",", "3", ",", "3", "]", "\n", "\n", "cfg", ".", "lsa_layers", "=", "[", "0", ",", "0", ",", "4", ",", "2", "]", "\n", "cfg", ".", "lsa_window", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", "\n", "cfg", ".", "lsa_heads", "=", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "\n", "cfg", ".", "drop_path", "=", "0.05", "\n", "cfg", ".", "layer_scale", "=", "None", "\n", "cfg", ".", "qna_normalize_q", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "cfg", ".", "qna_normalize_stop_grads", "=", "False", "\n", "cfg", ".", "drop_path_downsample", "=", "True", "\n", "return", "functools", ".", "partial", "(", "QnAViT", ",", "config", "=", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.qna_vit_tiny_7x7": [[495, 518], ["qna_vit.default_config", "config.get", "functools.partial", "default_config.update"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.default_config"], ["", "@", "register", "\n", "def", "qna_vit_tiny_7x7", "(", "config", ")", ":", "\n", "  ", "cfg", "=", "default_config", "(", ")", "\n", "\n", "if", "config", ".", "get", "(", "\"qna\"", ")", ":", "\n", "    ", "cfg", ".", "update", "(", "config", ".", "qna", ")", "\n", "\n", "", "cfg", ".", "base_dim", "=", "64", "\n", "\n", "cfg", ".", "qna_heads", "=", "[", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "cfg", ".", "qna_layers", "=", "[", "2", ",", "3", ",", "2", ",", "0", "]", "\n", "cfg", ".", "qna_receptive_field", "=", "[", "7", ",", "7", ",", "7", ",", "7", "]", "\n", "\n", "cfg", ".", "lsa_layers", "=", "[", "0", ",", "0", ",", "4", ",", "2", "]", "\n", "cfg", ".", "lsa_window", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", "\n", "cfg", ".", "lsa_heads", "=", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "\n", "cfg", ".", "drop_path", "=", "0.05", "\n", "cfg", ".", "layer_scale", "=", "None", "\n", "cfg", ".", "qna_normalize_q", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "cfg", ".", "qna_normalize_stop_grads", "=", "False", "\n", "cfg", ".", "drop_path_downsample", "=", "True", "\n", "return", "functools", ".", "partial", "(", "QnAViT", ",", "config", "=", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.qna_vit_small": [[520, 543], ["qna_vit.default_config", "config.get", "functools.partial", "default_config.update"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.default_config"], ["", "@", "register", "\n", "def", "qna_vit_small", "(", "config", ")", ":", "\n", "  ", "cfg", "=", "default_config", "(", ")", "\n", "\n", "if", "config", ".", "get", "(", "\"qna\"", ")", ":", "\n", "    ", "cfg", ".", "update", "(", "config", ".", "qna", ")", "\n", "\n", "", "cfg", ".", "base_dim", "=", "64", "\n", "\n", "cfg", ".", "qna_heads", "=", "[", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "cfg", ".", "qna_layers", "=", "[", "2", ",", "3", ",", "6", ",", "0", "]", "\n", "cfg", ".", "qna_receptive_field", "=", "[", "3", ",", "3", ",", "3", ",", "3", "]", "\n", "\n", "cfg", ".", "lsa_layers", "=", "[", "0", ",", "0", ",", "12", ",", "2", "]", "\n", "cfg", ".", "lsa_window", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", "\n", "cfg", ".", "lsa_heads", "=", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "\n", "cfg", ".", "drop_path", "=", "0.2", "\n", "cfg", ".", "layer_scale", "=", "None", "\n", "cfg", ".", "qna_normalize_q", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "cfg", ".", "qna_normalize_stop_grads", "=", "False", "\n", "cfg", ".", "drop_path_downsample", "=", "True", "\n", "return", "functools", ".", "partial", "(", "QnAViT", ",", "config", "=", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.qna_vit_base": [[545, 568], ["qna_vit.default_config", "config.get", "functools.partial", "default_config.update"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.default_config"], ["", "@", "register", "\n", "def", "qna_vit_base", "(", "config", ")", ":", "\n", "  ", "cfg", "=", "default_config", "(", ")", "\n", "\n", "if", "config", ".", "get", "(", "\"qna\"", ")", ":", "\n", "    ", "cfg", ".", "update", "(", "config", ".", "qna", ")", "\n", "\n", "", "cfg", ".", "base_dim", "=", "96", "\n", "\n", "cfg", ".", "qna_heads", "=", "[", "6", ",", "12", ",", "24", ",", "48", "]", "\n", "cfg", ".", "qna_layers", "=", "[", "2", ",", "3", ",", "6", ",", "0", "]", "\n", "cfg", ".", "qna_receptive_field", "=", "[", "3", ",", "3", ",", "3", ",", "3", "]", "\n", "\n", "cfg", ".", "lsa_layers", "=", "[", "0", ",", "0", ",", "12", ",", "2", "]", "\n", "cfg", ".", "lsa_window", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", "\n", "cfg", ".", "lsa_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", "\n", "\n", "cfg", ".", "drop_path", "=", "0.5", "\n", "cfg", ".", "layer_scale", "=", "None", "\n", "cfg", ".", "qna_normalize_q", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "cfg", ".", "qna_normalize_stop_grads", "=", "False", "\n", "cfg", ".", "drop_path_downsample", "=", "True", "\n", "return", "functools", ".", "partial", "(", "QnAViT", ",", "config", "=", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.models.qna_vit.create_model": [[570, 575], ["ValueError"], "function", ["None"], ["", "def", "create_model", "(", "name", ",", "config", ")", ":", "\n", "  ", "\"\"\"Creates model partial function.\"\"\"", "\n", "if", "name", "not", "in", "MODELS", ":", "\n", "    ", "raise", "ValueError", "(", "f\"Model {name} does not exist.\"", ")", "\n", "", "return", "MODELS", "[", "name", "]", "(", "config", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline._get_base_preprocess_fn": [[19, 33], ["dataset_name.startswith", "dataset_name.startswith", "dataset_name.startswith", "dataset_name.startswith"], "function", ["None"], ["def", "_get_base_preprocess_fn", "(", "dataset_name", ",", "train", ")", ":", "\n", "  ", "if", "train", ":", "\n", "    ", "if", "dataset_name", ".", "startswith", "(", "'cifar'", ")", ":", "\n", "      ", "preprocess_fn", "=", "cifar_utils", ".", "preprocess_for_train", "\n", "", "else", ":", "\n", "      ", "assert", "dataset_name", ".", "startswith", "(", "'imagenet'", ")", "\n", "preprocess_fn", "=", "imagenet_utils", ".", "preprocess_for_train", "\n", "", "", "else", ":", "\n", "    ", "if", "dataset_name", ".", "startswith", "(", "'cifar'", ")", ":", "\n", "      ", "preprocess_fn", "=", "cifar_utils", ".", "preprocess_for_eval", "\n", "", "else", ":", "\n", "      ", "assert", "dataset_name", ".", "startswith", "(", "'imagenet'", ")", "\n", "preprocess_fn", "=", "imagenet_utils", ".", "preprocess_for_eval", "\n", "", "", "return", "preprocess_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline._get_normalization_fn": [[35, 44], ["dataset_name.startswith", "ValueError"], "function", ["None"], ["", "def", "_get_normalization_fn", "(", "dataset_name", ")", ":", "\n", "  ", "if", "dataset_name", "==", "'cifar10'", ":", "\n", "    ", "return", "cifar_utils", ".", "normalize_image_cifar10", "\n", "", "elif", "dataset_name", "==", "'cifar100'", ":", "\n", "    ", "return", "cifar_utils", ".", "normalize_image_cifar100", "\n", "", "elif", "dataset_name", ".", "startswith", "(", "'imagenet'", ")", ":", "\n", "    ", "return", "imagenet_utils", ".", "normalize_image", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "f'Dataset {dataset_name} is not supported'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.preprocess_with_per_batch_rng": [[46, 79], ["list().pop", "ds.enumerate().map", "tensorflow.cast", "tensorflow.random.experimental.stateless_fold_in", "preprocess_fn", "list", "tensorflow.cast", "isinstance", "ds.enumerate", "jax.random.split", "jax.random.split"], "function", ["None"], ["", "", "def", "preprocess_with_per_batch_rng", "(", "ds", ":", "tf", ".", "data", ".", "Dataset", ",", "\n", "preprocess_fn", ":", "Callable", "[", "[", "Features", "]", ",", "Features", "]", ",", "\n", "*", ",", "rng", ":", "jnp", ".", "ndarray", ")", "->", "tf", ".", "data", ".", "Dataset", ":", "\n", "  ", "\"\"\"Maps batched `ds` using the preprocess_fn and a deterministic RNG per batch.\n\n  This preprocess_fn usually contains data preprcess needs a batch of data, like\n  Mixup.\n\n  Args:\n    ds: Dataset containing Python dictionary with the features. The 'rng'\n      feature should not exist.\n    preprocess_fn: Preprocessing function that takes a Python dictionary of\n      tensors and returns a Python dictionary of tensors. The function should be\n      convertible into a TF graph.\n    rng: Base RNG to use. Per example RNGs will be derived from this by folding\n      in the example index.\n\n  Returns:\n    The dataset mapped by the `preprocess_fn`.\n  \"\"\"", "\n", "rng", "=", "list", "(", "jax", ".", "random", ".", "split", "(", "rng", ",", "1", ")", ")", ".", "pop", "(", ")", "\n", "\n", "def", "_fn", "(", "example_index", ":", "int", ",", "features", ":", "Features", ")", "->", "Features", ":", "\n", "    ", "example_index", "=", "tf", ".", "cast", "(", "example_index", ",", "tf", ".", "int32", ")", "\n", "features", "[", "\"rng\"", "]", "=", "tf", ".", "random", ".", "experimental", ".", "stateless_fold_in", "(", "\n", "tf", ".", "cast", "(", "rng", ",", "tf", ".", "int64", ")", ",", "example_index", ")", "\n", "processed", "=", "preprocess_fn", "(", "features", ")", "\n", "if", "isinstance", "(", "processed", ",", "dict", ")", "and", "\"rng\"", "in", "processed", ":", "\n", "      ", "del", "processed", "[", "\"rng\"", "]", "\n", "", "return", "processed", "\n", "\n", "", "return", "ds", ".", "enumerate", "(", ")", ".", "map", "(", "\n", "_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.create_split_old": [[81, 144], ["dataset_builder.as_dataset", "tensorflow.data.Options", "ds.repeat.with_options", "ds.repeat.map", "ds.repeat.batch", "ds.repeat.prefetch", "clu.deterministic_data.get_read_instruction_for_host", "dataset.startswith", "clu.deterministic_data.get_read_instruction_for_host", "dataset.startswith", "preprocess_fn", "ds.repeat.cache", "ds.repeat.repeat", "ds.repeat.shuffle", "ds.repeat.repeat", "dataset.startswith", "dataset.startswith", "dataset.startswith", "tensorflow_datasets.decode.SkipDecoding"], "function", ["None"], ["", "def", "create_split_old", "(", "dataset_builder", ":", "tfds", ".", "core", ".", "DatasetBuilder", ",", "\n", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", "data_rng", ":", "Any", ",", "\n", "batch_size", ":", "int", ",", "train", ":", "bool", ",", "image_size", ":", "int", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "cache", "=", "False", ",", "prefetch", "=", "10", ")", ":", "\n", "  ", "\"\"\"Creates a split from the ImageNet dataset using TensorFlow Datasets.\n\n  Args:\n    dataset_builder: TFDS dataset builder for ImageNet/Cifar10/Cifar100.\n    batch_size: the batch size returned by the data pipeline.\n    train: Whether to load the train or evaluation split.\n    image_size: The target size of the images.\n    dtype: data type of the image.\n    cache: Whether to cache the dataset.\n    prefetch: The number of prefetched batches\n  Returns:\n    A `tf.data.Dataset`.\n  \"\"\"", "\n", "dataset", "=", "dataset_builder", ".", "name", "\n", "if", "train", ":", "\n", "    ", "split", "=", "deterministic_data", ".", "get_read_instruction_for_host", "(", "\"train\"", ",", "dataset_info", "=", "dataset_builder", ".", "info", ")", "\n", "if", "dataset", ".", "startswith", "(", "'cifar'", ")", ":", "\n", "      ", "preprocess_fn", "=", "cifar_utils", ".", "preprocess_for_train", "\n", "", "else", ":", "\n", "      ", "assert", "dataset", ".", "startswith", "(", "'imagenet'", ")", "\n", "preprocess_fn", "=", "imagenet_utils", ".", "preprocess_for_train", "\n", "", "", "else", ":", "\n", "    ", "validation_key", "=", "(", "'validation'", "if", "dataset", ".", "startswith", "(", "'imagenet'", ")", "else", "'testing'", ")", "\n", "split", "=", "deterministic_data", ".", "get_read_instruction_for_host", "(", "validation_key", ",", "dataset_info", "=", "dataset_builder", ".", "info", ")", "\n", "if", "dataset", ".", "startswith", "(", "'cifar'", ")", ":", "\n", "      ", "preprocess_fn", "=", "cifar_utils", ".", "preprocess_for_eval", "\n", "", "else", ":", "\n", "      ", "assert", "dataset", ".", "startswith", "(", "'imagenet'", ")", "\n", "preprocess_fn", "=", "imagenet_utils", ".", "preprocess_for_eval", "\n", "\n", "", "", "def", "decode_example", "(", "example", ")", ":", "\n", "    ", "image", "=", "preprocess_fn", "(", "example", "[", "'image'", "]", ",", "image_size", "=", "image_size", ",", "rng", "=", "data_rng", ")", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "example", "[", "'label'", "]", "}", "\n", "\n", "", "ds", "=", "dataset_builder", ".", "as_dataset", "(", "split", "=", "split", ",", "decoders", "=", "{", "\n", "'image'", ":", "tfds", ".", "decode", ".", "SkipDecoding", "(", ")", ",", "\n", "}", ")", "\n", "options", "=", "tf", ".", "data", ".", "Options", "(", ")", "\n", "options", ".", "experimental_threading", ".", "private_threadpool_size", "=", "48", "\n", "ds", "=", "ds", ".", "with_options", "(", "options", ")", "\n", "\n", "if", "cache", ":", "\n", "    ", "ds", "=", "ds", ".", "cache", "(", ")", "\n", "\n", "", "if", "train", ":", "\n", "    ", "ds", "=", "ds", ".", "repeat", "(", ")", "\n", "ds", "=", "ds", ".", "shuffle", "(", "16", "*", "batch_size", ",", "seed", "=", "0", ")", "\n", "\n", "", "ds", "=", "ds", ".", "map", "(", "decode_example", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "ds", "=", "ds", ".", "batch", "(", "batch_size", ",", "drop_remainder", "=", "True", ")", "\n", "\n", "if", "not", "train", ":", "\n", "    ", "ds", "=", "ds", ".", "repeat", "(", ")", "\n", "\n", "", "ds", "=", "ds", ".", "prefetch", "(", "prefetch", ")", "\n", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline._get_preprocess_fn": [[146, 181], ["input_pipeline._get_base_preprocess_fn", "input_pipeline._get_normalization_fn", "tensorflow.unstack", "_get_base_preprocess_fn.", "tensorflow.cast", "_get_normalization_fn.", "augment.augment_utils.create_augmenter", "augment.augment_utils.create_augmenter", "augment.augment_utils.create_random_erasing", "tensorflow.random.experimental.stateless_split", "augment_utils.create_augmenter.", "augment_utils.create_augmenter.", "augment_utils.create_random_erasing.", "randaugment_params.to_dict", "colorjitter_params.to_dict", "randerasing_params.to_dict"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline._get_base_preprocess_fn", "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline._get_normalization_fn", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils.create_augmenter", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils.create_augmenter", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils.create_random_erasing"], ["", "def", "_get_preprocess_fn", "(", "train", ":", "bool", ",", "dataset_name", ":", "str", ",", "randaugment_params", "=", "None", ",", "colorjitter_params", "=", "None", ",", "\n", "randerasing_params", "=", "None", ")", ":", "\n", "# Define basic preprocessing function", "\n", "  ", "preprocess_fn", "=", "_get_base_preprocess_fn", "(", "dataset_name", ",", "train", ")", "\n", "normalization_fn", "=", "_get_normalization_fn", "(", "dataset_name", ")", "\n", "\n", "# Setup augmentations for train only!", "\n", "rand_augmentor", "=", "None", "\n", "colorjitter_augmentor", "=", "None", "\n", "randerasing_augmentor", "=", "None", "\n", "if", "train", ":", "\n", "    ", "if", "randaugment_params", "is", "not", "None", ":", "\n", "      ", "rand_augmentor", "=", "augment_utils", ".", "create_augmenter", "(", "**", "randaugment_params", ".", "to_dict", "(", ")", ")", "\n", "", "if", "colorjitter_params", "is", "not", "None", ":", "\n", "      ", "colorjitter_augmentor", "=", "augment_utils", ".", "create_augmenter", "(", "**", "colorjitter_params", ".", "to_dict", "(", ")", ")", "\n", "", "if", "randerasing_params", "is", "not", "None", ":", "\n", "      ", "randerasing_augmentor", "=", "augment_utils", ".", "create_random_erasing", "(", "**", "randerasing_params", ".", "to_dict", "(", ")", ")", "\n", "\n", "", "", "def", "preprocess_combined", "(", "image", ",", "rng", ",", "dtype", ",", "image_size", ")", ":", "\n", "    ", "rng_basic", ",", "rng_ra", ",", "rng_jt", ",", "rng_re", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "4", ")", ")", "\n", "# Return image as uint8 since RandAugment and Colorjitter work on uint8 images", "\n", "image", "=", "preprocess_fn", "(", "image", ",", "image_size", "=", "image_size", ",", "rng", "=", "rng_basic", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "if", "rand_augmentor", "is", "not", "None", ":", "\n", "      ", "image", "=", "rand_augmentor", "(", "rng_ra", ",", "image", ")", "\n", "", "if", "colorjitter_augmentor", "is", "not", "None", ":", "\n", "      ", "image", "=", "colorjitter_augmentor", "(", "rng_jt", ",", "image", ")", "\n", "# Cast image to output dtype", "\n", "", "image", "=", "tf", ".", "cast", "(", "image", ",", "dtype", ")", "\n", "image", "=", "normalization_fn", "(", "image", ")", "\n", "if", "randerasing_augmentor", "is", "not", "None", ":", "\n", "      ", "image", "=", "randerasing_augmentor", "(", "rng_re", ",", "image", ")", "\n", "", "return", "image", "\n", "\n", "", "return", "preprocess_combined", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline._get_postprocess_fn": [[183, 190], ["config.get", "augment.augment_utils.create_mix_augment", "config.mix.to_dict"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils.create_mix_augment"], ["", "def", "_get_postprocess_fn", "(", "config", ",", "num_classes", ")", ":", "\n", "  ", "batch_preprocess_fn", "=", "None", "\n", "if", "config", ".", "get", "(", "'mix'", ",", "None", ")", "is", "not", "None", ":", "\n", "    ", "batch_preprocess_fn", "=", "augment_utils", ".", "create_mix_augment", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "**", "config", ".", "mix", ".", "to_dict", "(", ")", ")", "\n", "", "return", "batch_preprocess_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.create_split": [[192, 256], ["input_pipeline._get_preprocess_fn", "jax.random.split", "jax.random.split", "clu.deterministic_data.create_dataset", "clu.deterministic_data.get_read_instruction_for_host", "clu.deterministic_data.get_read_instruction_for_host", "input_pipeline._get_postprocess_fn", "example.get", "_get_preprocess_fn.", "jax.local_device_count", "jax.local_device_count", "ds.batch.batch", "input_pipeline.preprocess_with_per_batch_rng", "reversed", "ds.batch.prefetch", "dataset.startswith", "config.get", "config.get", "config.get", "ds.batch.batch", "tensorflow_datasets.decode.SkipDecoding", "jax.local_device_count", "jax.local_device_count"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline._get_preprocess_fn", "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline._get_postprocess_fn", "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.preprocess_with_per_batch_rng"], ["", "def", "create_split", "(", "dataset_builder", ":", "tfds", ".", "core", ".", "DatasetBuilder", ",", "\n", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", "data_rng", ":", "Any", ",", "\n", "batch_size", ":", "int", ",", "train", ":", "bool", ",", "image_size", ":", "int", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "cache", "=", "False", ",", "prefetch", "=", "10", ")", ":", "\n", "  ", "\"\"\"Creates a split from the dataset using TensorFlow Datasets.\n\n  Args:\n    dataset_builder: TFDS dataset builder for ImageNet/Cifar10/Cifar100.\n    batch_size: the batch size returned by the data pipeline.\n    train: Whether to load the train or evaluation split.\n    image_size: The target size of the images.\n    dtype: data type of the image.\n    cache: Whether to cache the dataset.\n    prefetch: The number of prefetched batches\n  Returns:\n    A `tf.data.Dataset`.\n  \"\"\"", "\n", "dataset", "=", "dataset_builder", ".", "name", "\n", "if", "train", ":", "\n", "    ", "split", "=", "deterministic_data", ".", "get_read_instruction_for_host", "(", "\"train\"", ",", "dataset_info", "=", "dataset_builder", ".", "info", ")", "\n", "", "else", ":", "\n", "    ", "validation_key", "=", "(", "'validation'", "if", "dataset", ".", "startswith", "(", "'imagenet'", ")", "else", "'test'", ")", "\n", "split", "=", "deterministic_data", ".", "get_read_instruction_for_host", "(", "validation_key", ",", "dataset_info", "=", "dataset_builder", ".", "info", ")", "\n", "", "preprocess_fn", "=", "_get_preprocess_fn", "(", "train", ",", "dataset", ",", "randaugment_params", "=", "config", ".", "get", "(", "'randaugment'", ",", "None", ")", ",", "\n", "colorjitter_params", "=", "config", ".", "get", "(", "'colorjitter'", ",", "None", ")", ",", "\n", "randerasing_params", "=", "config", ".", "get", "(", "'randerasing'", ")", ")", "\n", "\n", "postprocess_fn", "=", "(", "\n", "_get_postprocess_fn", "(", "config", ",", "num_classes", "=", "dataset_builder", ".", "info", ".", "features", "[", "'label'", "]", ".", "num_classes", ")", "\n", "if", "train", "else", "None", ")", "\n", "\n", "def", "decode_example", "(", "example", ")", ":", "\n", "    ", "rng", "=", "example", ".", "get", "(", "'rng'", ",", "None", ")", "\n", "image", "=", "preprocess_fn", "(", "example", "[", "'image'", "]", ",", "rng", "=", "rng", ",", "dtype", "=", "dtype", ",", "image_size", "=", "image_size", ")", "\n", "del", "example", "[", "'rng'", "]", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "example", "[", "'label'", "]", "}", "\n", "\n", "", "data_rng1", ",", "data_rng2", "=", "jax", ".", "random", ".", "split", "(", "data_rng", ",", "2", ")", "\n", "\n", "batch_dims", "=", "[", "jax", ".", "local_device_count", "(", ")", ",", "batch_size", "]", "\n", "ds", "=", "deterministic_data", ".", "create_dataset", "(", "\n", "dataset_builder", ",", "\n", "split", "=", "split", ",", "\n", "rng", "=", "data_rng1", ",", "\n", "preprocess_fn", "=", "decode_example", ",", "\n", "cache", "=", "cache", ",", "\n", "decoders", "=", "{", "\"image\"", ":", "tfds", ".", "decode", ".", "SkipDecoding", "(", ")", "}", ",", "\n", "shuffle_buffer_size", "=", "jax", ".", "local_device_count", "(", ")", "*", "batch_size", ",", "\n", "batch_dims", "=", "batch_dims", "if", "postprocess_fn", "is", "None", "else", "None", ",", "\n", "num_epochs", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "prefetch_size", "=", "prefetch", ",", "\n", "drop_remainder", "=", "True", ",", "\n", ")", "\n", "if", "postprocess_fn", "is", "not", "None", ":", "\n", "    ", "ds", "=", "ds", ".", "batch", "(", "batch_dims", "[", "-", "1", "]", ",", "drop_remainder", "=", "True", ")", "\n", "ds", "=", "preprocess_with_per_batch_rng", "(", "\n", "ds", ",", "postprocess_fn", ",", "rng", "=", "data_rng2", ")", "\n", "for", "batch_size", "in", "reversed", "(", "batch_dims", "[", ":", "-", "1", "]", ")", ":", "\n", "      ", "ds", "=", "ds", ".", "batch", "(", "batch_size", ",", "drop_remainder", "=", "True", ")", "\n", "", "ds", "=", "ds", ".", "prefetch", "(", "prefetch", ")", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_dataset_builder": [[258, 268], ["config.dataset.startswith", "tensorflow_datasets.builder", "tfds.builder.download_and_prepare", "tensorflow_datasets.builder", "tfds.builder.download_and_prepare", "config.get", "config.get"], "function", ["None"], ["", "def", "get_dataset_builder", "(", "config", ")", ":", "\n", "  ", "data_dir", "=", "(", "\n", "None", "if", "(", "config", ".", "get", "(", "'data_dir'", ",", "None", ")", "==", "'none'", "or", "config", ".", "get", "(", "'data_dir'", ",", "None", ")", "is", "None", ")", "else", "config", ".", "data_dir", ")", "\n", "if", "config", ".", "dataset", ".", "startswith", "(", "'imagenet'", ")", ":", "\n", "    ", "dataset_builder", "=", "tfds", ".", "builder", "(", "config", ".", "dataset", ",", "data_dir", "=", "data_dir", ",", "version", "=", "config", ".", "dataset_version", ")", "\n", "dataset_builder", ".", "download_and_prepare", "(", ")", "\n", "", "else", ":", "\n", "    ", "dataset_builder", "=", "tfds", ".", "builder", "(", "config", ".", "dataset", ",", "data_dir", "=", "data_dir", ")", "\n", "dataset_builder", ".", "download_and_prepare", "(", ")", "\n", "", "return", "dataset_builder", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_num_eval_examples": [[270, 279], ["config.dataset.startswith", "config.dataset.startswith", "ValueError"], "function", ["None"], ["", "def", "get_num_eval_examples", "(", "dataset_builder", ",", "config", ")", ":", "\n", "  ", "if", "config", ".", "dataset", ".", "startswith", "(", "'imagenet'", ")", ":", "\n", "    ", "return", "dataset_builder", ".", "info", ".", "splits", "[", "\n", "'validation'", "]", ".", "num_examples", "\n", "", "elif", "config", ".", "dataset", ".", "startswith", "(", "'cifar'", ")", ":", "\n", "    ", "return", "dataset_builder", ".", "info", ".", "splits", "[", "\n", "'testing'", "]", ".", "num_examples", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "f'Dataset {config.dataset} not supported'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.input_pipeline.get_num_classes_from_config": [[281, 288], ["None"], "function", ["None"], ["", "", "def", "get_num_classes_from_config", "(", "config", ")", ":", "\n", "  ", "if", "config", ".", "dataset", "==", "'cifar10'", ":", "\n", "    ", "return", "10", "\n", "", "elif", "config", ".", "dataset", "==", "'cifar100'", ":", "\n", "    ", "return", "100", "\n", "", "elif", "config", ".", "dataset", "==", "'imagenet2012'", ":", "\n", "    ", "return", "1000", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils.distorted_bounding_box_crop": [[10, 59], ["tensorflow.io.extract_jpeg_shape", "tensorflow.image.stateless_sample_distorted_bounding_box", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.stack", "tensorflow.io.decode_and_crop_jpeg"], "function", ["None"], ["def", "distorted_bounding_box_crop", "(", "image_bytes", ",", "\n", "bbox", ",", "\n", "min_object_covered", "=", "0.1", ",", "\n", "aspect_ratio_range", "=", "(", "0.75", ",", "1.33", ")", ",", "\n", "area_range", "=", "(", "0.05", ",", "1.0", ")", ",", "\n", "max_attempts", "=", "100", ",", "\n", "rng", "=", "0", ")", ":", "\n", "  ", "\"\"\"Generates cropped_image using one of the bboxes randomly distorted.\n\n  See `tf.image.sample_distorted_bounding_box` for more documentation.\n\n  Args:\n    image_bytes: `Tensor` of binary image data.\n    bbox: `Tensor` of bounding boxes arranged `[1, num_boxes, coords]`\n        where each coordinate is [0, 1) and the coordinates are arranged\n        as `[ymin, xmin, ymax, xmax]`. If num_boxes is 0 then use the whole\n        image.\n    min_object_covered: An optional `float`. Defaults to `0.1`. The cropped\n        area of the image must contain at least this fraction of any bounding\n        box supplied.\n    aspect_ratio_range: An optional list of `float`s. The cropped area of the\n        image must have an aspect ratio = width / height within this range.\n    area_range: An optional list of `float`s. The cropped area of the image\n        must contain a fraction of the supplied image within in this range.\n    max_attempts: An optional `int`. Number of attempts at generating a cropped\n        region of the image of the specified constraints. After `max_attempts`\n        failures, return the entire image.\n  Returns:\n    cropped image `Tensor`\n  \"\"\"", "\n", "shape", "=", "tf", ".", "io", ".", "extract_jpeg_shape", "(", "image_bytes", ")", "\n", "sample_distorted_bounding_box", "=", "tf", ".", "image", ".", "stateless_sample_distorted_bounding_box", "(", "\n", "shape", ",", "\n", "bounding_boxes", "=", "bbox", ",", "\n", "seed", "=", "rng", ",", "\n", "min_object_covered", "=", "min_object_covered", ",", "\n", "aspect_ratio_range", "=", "aspect_ratio_range", ",", "\n", "area_range", "=", "area_range", ",", "\n", "max_attempts", "=", "max_attempts", ",", "\n", "use_image_if_no_bounding_boxes", "=", "True", ",", ")", "\n", "bbox_begin", ",", "bbox_size", ",", "_", "=", "sample_distorted_bounding_box", "\n", "\n", "# Crop the image to the specified bounding box.", "\n", "offset_y", ",", "offset_x", ",", "_", "=", "tf", ".", "unstack", "(", "bbox_begin", ")", "\n", "target_height", ",", "target_width", ",", "_", "=", "tf", ".", "unstack", "(", "bbox_size", ")", "\n", "crop_window", "=", "tf", ".", "stack", "(", "[", "offset_y", ",", "offset_x", ",", "target_height", ",", "target_width", "]", ")", "\n", "image", "=", "tf", ".", "io", ".", "decode_and_crop_jpeg", "(", "image_bytes", ",", "crop_window", ",", "channels", "=", "3", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._resize": [[61, 64], ["tensorflow.image.resize"], "function", ["None"], ["", "def", "_resize", "(", "image", ",", "image_size", ")", ":", "\n", "  ", "return", "tf", ".", "image", ".", "resize", "(", "[", "image", "]", ",", "[", "image_size", ",", "image_size", "]", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._at_least_x_are_equal": [[66, 71], ["tensorflow.equal", "tensorflow.cast", "tensorflow.greater_equal", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "_at_least_x_are_equal", "(", "a", ",", "b", ",", "x", ")", ":", "\n", "  ", "\"\"\"At least `x` of `a` and `b` `Tensors` are equal.\"\"\"", "\n", "match", "=", "tf", ".", "equal", "(", "a", ",", "b", ")", "\n", "match", "=", "tf", ".", "cast", "(", "match", ",", "tf", ".", "int32", ")", "\n", "return", "tf", ".", "greater_equal", "(", "tf", ".", "reduce_sum", "(", "match", ")", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._decode_and_random_crop": [[73, 93], ["tensorflow.constant", "imagenet_utils.distorted_bounding_box_crop", "tensorflow.io.extract_jpeg_shape", "imagenet_utils._at_least_x_are_equal", "tensorflow.cond", "tensorflow.shape", "imagenet_utils._decode_and_center_crop", "imagenet_utils._resize"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.distorted_bounding_box_crop", "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._at_least_x_are_equal", "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._decode_and_center_crop", "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._resize"], ["", "def", "_decode_and_random_crop", "(", "image_bytes", ",", "image_size", ",", "rng", ")", ":", "\n", "  ", "\"\"\"Make a random crop of image_size.\"\"\"", "\n", "bbox", "=", "tf", ".", "constant", "(", "[", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "image", "=", "distorted_bounding_box_crop", "(", "\n", "image_bytes", ",", "\n", "bbox", ",", "\n", "min_object_covered", "=", "0.1", ",", "\n", "aspect_ratio_range", "=", "(", "3.", "/", "4", ",", "4.", "/", "3.", ")", ",", "\n", "area_range", "=", "(", "0.08", ",", "1.0", ")", ",", "\n", "max_attempts", "=", "10", ",", "\n", "rng", "=", "rng", ")", "\n", "original_shape", "=", "tf", ".", "io", ".", "extract_jpeg_shape", "(", "image_bytes", ")", "\n", "bad", "=", "_at_least_x_are_equal", "(", "original_shape", ",", "tf", ".", "shape", "(", "image", ")", ",", "3", ")", "\n", "\n", "image", "=", "tf", ".", "cond", "(", "\n", "bad", ",", "\n", "lambda", ":", "_decode_and_center_crop", "(", "image_bytes", ",", "image_size", ")", ",", "\n", "lambda", ":", "_resize", "(", "image", ",", "image_size", ")", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._decode_and_center_crop": [[95, 114], ["tensorflow.io.extract_jpeg_shape", "tensorflow.cast", "tensorflow.stack", "tensorflow.io.decode_and_crop_jpeg", "imagenet_utils._resize", "tensorflow.cast", "tensorflow.minimum"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._resize"], ["", "def", "_decode_and_center_crop", "(", "image_bytes", ",", "image_size", ")", ":", "\n", "  ", "\"\"\"Crops to center of image with padding then scales image_size.\"\"\"", "\n", "shape", "=", "tf", ".", "io", ".", "extract_jpeg_shape", "(", "image_bytes", ")", "\n", "image_height", "=", "shape", "[", "0", "]", "\n", "image_width", "=", "shape", "[", "1", "]", "\n", "\n", "padded_center_crop_size", "=", "tf", ".", "cast", "(", "\n", "(", "(", "image_size", "/", "(", "image_size", "+", "CROP_PADDING", ")", ")", "*", "\n", "tf", ".", "cast", "(", "tf", ".", "minimum", "(", "image_height", ",", "image_width", ")", ",", "tf", ".", "float32", ")", ")", ",", "\n", "tf", ".", "int32", ")", "\n", "\n", "offset_height", "=", "(", "(", "image_height", "-", "padded_center_crop_size", ")", "+", "1", ")", "//", "2", "\n", "offset_width", "=", "(", "(", "image_width", "-", "padded_center_crop_size", ")", "+", "1", ")", "//", "2", "\n", "crop_window", "=", "tf", ".", "stack", "(", "[", "offset_height", ",", "offset_width", ",", "\n", "padded_center_crop_size", ",", "padded_center_crop_size", "]", ")", "\n", "image", "=", "tf", ".", "io", ".", "decode_and_crop_jpeg", "(", "image_bytes", ",", "crop_window", ",", "channels", "=", "3", ")", "\n", "image", "=", "_resize", "(", "image", ",", "image_size", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils.normalize_image": [[116, 120], ["tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "def", "normalize_image", "(", "image", ")", ":", "\n", "  ", "image", "-=", "tf", ".", "constant", "(", "MEAN_RGB", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "image", "/=", "tf", ".", "constant", "(", "STDDEV_RGB", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils.preprocess_for_train": [[122, 141], ["tensorflow.unstack", "imagenet_utils._decode_and_random_crop", "tensorflow.reshape", "tensorflow.image.stateless_random_flip_left_right", "tensorflow.clip_by_value", "tensorflow.cast", "tensorflow.random.experimental.stateless_split"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._decode_and_random_crop"], ["", "def", "preprocess_for_train", "(", "image_bytes", ",", "dtype", ",", "image_size", "=", "IMAGE_SIZE", ",", "rng", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Preprocesses the given image for training.\n\n  Args:\n    image_bytes: `Tensor` representing an image binary of arbitrary size.\n    dtype: data type of the image.\n    image_size: image size.\n\n  Returns:\n    A preprocessed image `Tensor`.\n  \"\"\"", "\n", "_", ",", "rng_crop", ",", "rng_flip", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "3", ")", ")", "\n", "image", "=", "_decode_and_random_crop", "(", "image_bytes", ",", "image_size", ",", "rng_crop", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "image_size", ",", "image_size", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "image", ".", "stateless_random_flip_left_right", "(", "image", ",", "rng_flip", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.0", ",", "255.0", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "dtype", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils.preprocess_for_eval": [[143, 159], ["imagenet_utils._decode_and_center_crop", "tensorflow.reshape", "tensorflow.clip_by_value", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.imagenet_utils._decode_and_center_crop"], ["", "def", "preprocess_for_eval", "(", "image_bytes", ",", "dtype", ",", "image_size", "=", "IMAGE_SIZE", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Preprocesses the given image for evaluation.\n\n  Args:\n    image_bytes: `Tensor` representing an image binary of arbitrary size.\n    dtype: data type of the image.\n    image_size: image size.\n\n  Returns:\n    A preprocessed image `Tensor`.\n  \"\"\"", "\n", "image", "=", "_decode_and_center_crop", "(", "image_bytes", ",", "image_size", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "image_size", ",", "image_size", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.0", ",", "255.0", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "dtype", ")", "\n", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.data.cifar_utils.normalize_image": [[14, 18], ["tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["def", "normalize_image", "(", "image", ",", "mean_rgb", ",", "std_rgb", ")", ":", "\n", "  ", "image", "-=", "tf", ".", "constant", "(", "mean_rgb", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "image", "/=", "tf", ".", "constant", "(", "std_rgb", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.cifar_utils.normalize_image_cifar10": [[20, 22], ["cifar_utils.normalize_image"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.cifar_utils.normalize_image"], ["", "def", "normalize_image_cifar10", "(", "image", ")", ":", "\n", "  ", "return", "normalize_image", "(", "image", ",", "CIFAR10_MEAN", ",", "CIFAR10_STD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.cifar_utils.normalize_image_cifar100": [[24, 26], ["cifar_utils.normalize_image"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.data.cifar_utils.normalize_image"], ["", "def", "normalize_image_cifar100", "(", "image", ")", ":", "\n", "  ", "return", "normalize_image", "(", "image", ",", "CIFAR100_MEAN", ",", "CIFAR100_STD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.cifar_utils.decode_and_random_resized_crop": [[29, 46], ["tensorflow.io.extract_jpeg_shape", "tensorflow.image.stateless_sample_distorted_bounding_box", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.image.decode_and_crop_jpeg", "tensorflow.image.resize", "tensorflow.zeros"], "function", ["None"], ["", "def", "decode_and_random_resized_crop", "(", "image", ":", "tf", ".", "Tensor", ",", "rng", ",", "\n", "resize_size", ":", "int", ")", "->", "tf", ".", "Tensor", ":", "\n", "  ", "\"\"\"Decodes the images and extracts a random crop.\"\"\"", "\n", "shape", "=", "tf", ".", "io", ".", "extract_jpeg_shape", "(", "image", ")", "\n", "begin", ",", "size", ",", "_", "=", "tf", ".", "image", ".", "stateless_sample_distorted_bounding_box", "(", "\n", "shape", ",", "\n", "tf", ".", "zeros", "(", "[", "0", ",", "0", ",", "4", "]", ",", "tf", ".", "float32", ")", ",", "\n", "seed", "=", "rng", ",", "\n", "area_range", "=", "(", "0.05", ",", "1.0", ")", ",", "\n", "min_object_covered", "=", "0", ",", "# Don't enforce a minimum area.", "\n", "use_image_if_no_bounding_boxes", "=", "True", ")", "\n", "top", ",", "left", ",", "_", "=", "tf", ".", "unstack", "(", "begin", ")", "\n", "h", ",", "w", ",", "_", "=", "tf", ".", "unstack", "(", "size", ")", "\n", "image", "=", "tf", ".", "image", ".", "decode_and_crop_jpeg", "(", "image", ",", "[", "top", ",", "left", ",", "h", ",", "w", "]", ",", "channels", "=", "3", ")", "\n", "# image = tf.cast(image, tf.float32) / 255.0", "\n", "image", "=", "tf", ".", "image", ".", "resize", "(", "image", ",", "(", "resize_size", ",", "resize_size", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.cifar_utils.preprocess_for_train": [[48, 58], ["tensorflow.unstack", "tensorflow.io.decode_jpeg", "tensorflow.image.resize_with_crop_or_pad", "tensorflow.image.stateless_random_crop", "tensorflow.image.stateless_random_flip_left_right", "tensorflow.cast", "tensorflow.random.experimental.stateless_split"], "function", ["None"], ["", "def", "preprocess_for_train", "(", "image", ",", "rng", ",", "dtype", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Augmentation function for cifar dataset.\"\"\"", "\n", "_", ",", "rng_crop", ",", "rng_flip", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "3", ")", ")", "\n", "image", "=", "tf", ".", "io", ".", "decode_jpeg", "(", "image", ")", "\n", "image", "=", "tf", ".", "image", ".", "resize_with_crop_or_pad", "(", "image", ",", "32", "+", "4", ",", "32", "+", "4", ")", "\n", "image", "=", "tf", ".", "image", ".", "stateless_random_crop", "(", "image", ",", "[", "32", ",", "32", ",", "3", "]", ",", "seed", "=", "rng_crop", ")", "\n", "image", "=", "tf", ".", "image", ".", "stateless_random_flip_left_right", "(", "image", ",", "seed", "=", "rng_flip", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "dtype", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.data.cifar_utils.preprocess_for_eval": [[60, 65], ["tensorflow.io.decode_jpeg", "tensorflow.cast"], "function", ["None"], ["", "def", "preprocess_for_eval", "(", "image", ",", "rng", ",", "dtype", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Processes a single example for evaluation for cifar.\"\"\"", "\n", "image", "=", "tf", ".", "io", ".", "decode_jpeg", "(", "image", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "dtype", ")", "\n", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.configs.imagenet_qna_finetune.get_config": [[6, 86], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "  ", "\"\"\"Configs.\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "\n", "# General configs", "\n", "config", ".", "model_name", "=", "\"qna_vit_base\"", "\n", "config", ".", "batch_size", "=", "1024", "\n", "config", ".", "seed", "=", "0", "\n", "config", ".", "trial", "=", "0", "\n", "config", ".", "half_precision", "=", "True", "\n", "config", ".", "fine_tune", "=", "True", "\n", "config", ".", "pretrained_path", "=", "''", "\n", "\n", "# Add training hyperparams:", "\n", "config", ".", "num_epochs", "=", "30", "\n", "config", ".", "num_train_steps", "=", "-", "1", "\n", "config", ".", "steps_per_eval", "=", "-", "1", "\n", "config", ".", "steps_per_eval", "=", "-", "1", "\n", "config", ".", "eval_per_epochs", "=", "5", "\n", "config", ".", "checkpoint_every_epochs", "=", "5", "\n", "config", ".", "log_every_steps", "=", "500", "\n", "\n", "# Setup the image size by changing this CONST", "\n", "IMG_SIZE", "=", "384", "\n", "\n", "# Add Data related configs.", "\n", "config", ".", "input_size", "=", "IMG_SIZE", "\n", "config", ".", "cache", "=", "True", "\n", "config", ".", "dataset", "=", "\"imagenet2012\"", "\n", "config", ".", "dataset_version", "=", "\"5.0.0\"", "\n", "config", ".", "data_dir", "=", "'none'", "\n", "config", ".", "shuffle_buffer_size", "=", "10000", "\n", "\n", "# Add training related configs:", "\n", "config", ".", "learning_rate", "=", "1e-5", "\n", "config", ".", "optim", "=", "\"adamw\"", "\n", "config", ".", "optim_wd_ignore", "=", "[", "\n", "'attn_scale_weights'", ",", "\n", "'attn_scale_weights_pos'", ",", "\n", "'attn_scale_weights_neg'", ",", "\n", "'rpe_bias'", ",", "\n", "'rpe_bias_qc'", ",", "\n", "'rpe_bias_qr'", "\n", "'pos_embedding'", ",", "\n", "'query'", ",", "\n", "'cls_token'", ",", "\n", "'pos_scale'", ",", "\n", "'neg_scale'", "\n", "]", "\n", "config", ".", "grad_clip_max_norm", "=", "False", "\n", "config", ".", "learning_rate_schedule", "=", "\"const\"", "\n", "config", ".", "warmup_epochs", "=", "0", "\n", "config", ".", "weight_decay", "=", "1e-8", "\n", "\n", "# Augmentations:", "\n", "config", ".", "randaugment", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "randaugment", ".", "type", "=", "\"randaugment\"", "# Set to `default` to disable", "\n", "# All parameters start with `config.augment.randaugment_`.", "\n", "config", ".", "randaugment", ".", "randaugment_num_layers", "=", "2", "\n", "config", ".", "randaugment", ".", "randaugment_cutout", "=", "False", "\n", "config", ".", "randaugment", ".", "randaugment_magnitude", "=", "9", "\n", "config", ".", "randaugment", ".", "randaugment_magstd", "=", "0.5", "\n", "config", ".", "randaugment", ".", "randaugment_prob_to_apply", "=", "0.5", "\n", "config", ".", "randaugment", ".", "size", "=", "IMG_SIZE", "\n", "# Add random erasing.", "\n", "config", ".", "randerasing", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "randerasing", ".", "erase_prob", "=", "0.25", "# Set to 0 to disable", "\n", "# Add mix style augmentation.", "\n", "config", ".", "mix", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "mix", ".", "mixup_alpha", "=", "0.8", "\n", "config", ".", "mix", ".", "prob_to_apply", "=", "1.0", "# Set to 0 to disable", "\n", "config", ".", "mix", ".", "smoothing", "=", "0.1", "\n", "\n", "# Add color jitter.", "\n", "# It uses default impl='simclrv2'", "\n", "config", ".", "colorjitter", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "colorjitter", ".", "type", "=", "\"colorjitter\"", "# Set to `default` to disable", "\n", "config", ".", "colorjitter", ".", "colorjitter_strength", "=", "0.3", "\n", "config", ".", "colorjitter", ".", "size", "=", "IMG_SIZE", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.configs.imagenet_qna.get_config": [[6, 76], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "  ", "\"\"\"Configs.\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "\n", "# General configs", "\n", "config", ".", "model_name", "=", "\"qna_v1\"", "\n", "config", ".", "batch_size", "=", "1024", "\n", "config", ".", "seed", "=", "0", "\n", "config", ".", "trial", "=", "0", "\n", "config", ".", "half_precision", "=", "True", "\n", "\n", "# Add training hyperparams:", "\n", "config", ".", "num_epochs", "=", "300", "\n", "config", ".", "num_train_steps", "=", "-", "1", "\n", "config", ".", "steps_per_eval", "=", "-", "1", "\n", "config", ".", "steps_per_eval", "=", "-", "1", "\n", "config", ".", "eval_per_epochs", "=", "5", "\n", "config", ".", "checkpoint_every_epochs", "=", "5", "\n", "config", ".", "log_every_steps", "=", "500", "\n", "\n", "# Setup the image size by changing this CONST", "\n", "IMG_SIZE", "=", "224", "\n", "\n", "# Add Data related configs.", "\n", "config", ".", "input_size", "=", "IMG_SIZE", "\n", "config", ".", "cache", "=", "True", "\n", "config", ".", "dataset", "=", "\"imagenet2012\"", "\n", "config", ".", "dataset_version", "=", "\"5.0.0\"", "\n", "config", ".", "data_dir", "=", "'none'", "\n", "config", ".", "shuffle_buffer_size", "=", "10000", "\n", "\n", "# Add training related configs:", "\n", "config", ".", "learning_rate", "=", "5e-4", "\n", "config", ".", "optim", "=", "\"adamw\"", "\n", "config", ".", "optim_wd_ignore", "=", "[", "\n", "'attn_scale_weights'", ",", "\n", "'rpe_bias'", ",", "\n", "'absolute_pos_embedding'", ",", "\n", "]", "\n", "config", ".", "grad_clip_max_norm", "=", "False", "\n", "config", ".", "learning_rate_schedule", "=", "\"cosine\"", "\n", "config", ".", "warmup_epochs", "=", "5", "\n", "config", ".", "weight_decay", "=", "5e-2", "\n", "\n", "# Augmentations:", "\n", "config", ".", "randaugment", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "randaugment", ".", "type", "=", "\"randaugment\"", "# Set to `default` to disable", "\n", "# All parameters start with `config.augment.randaugment_`.", "\n", "config", ".", "randaugment", ".", "randaugment_num_layers", "=", "2", "\n", "config", ".", "randaugment", ".", "randaugment_cutout", "=", "False", "\n", "config", ".", "randaugment", ".", "randaugment_magnitude", "=", "9", "\n", "config", ".", "randaugment", ".", "randaugment_magstd", "=", "0.5", "\n", "config", ".", "randaugment", ".", "randaugment_prob_to_apply", "=", "0.5", "\n", "config", ".", "randaugment", ".", "size", "=", "IMG_SIZE", "\n", "# Add random erasing.", "\n", "config", ".", "randerasing", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "randerasing", ".", "erase_prob", "=", "0.25", "# Set to 0 to disable", "\n", "# Add mix style augmentation.", "\n", "config", ".", "mix", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "mix", ".", "mixup_alpha", "=", "0.8", "\n", "config", ".", "mix", ".", "prob_to_apply", "=", "1.0", "# Set to 0 to disable", "\n", "config", ".", "mix", ".", "smoothing", "=", "0.1", "\n", "\n", "# Add color jitter.", "\n", "# It uses default impl='simclrv2'", "\n", "config", ".", "colorjitter", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "colorjitter", ".", "type", "=", "\"colorjitter\"", "# Set to `default` to disable", "\n", "config", ".", "colorjitter", ".", "colorjitter_strength", "=", "0.3", "\n", "config", ".", "colorjitter", ".", "size", "=", "IMG_SIZE", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment.RandAugment.__init__": [[130, 175], ["float", "int", "float", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num_layers", "=", "2", ",", "\n", "prob_to_apply", "=", "None", ",", "\n", "magnitude", "=", "None", ",", "\n", "num_levels", "=", "10", ",", "\n", "cutout", "=", "True", ",", "\n", "magstd", "=", "None", ",", "\n", "size", "=", "224", ")", ":", "\n", "    ", "\"\"\"Initialized rand augment.\n\n    Args:\n      num_layers: number of augmentation layers, i.e. how many times to do\n        augmentation.\n      prob_to_apply: probability to apply on each layer. If None then always\n        apply.\n      magnitude: default magnitude in range [0, 1], if None then magnitude will\n        be chosen randomly.\n      num_levels: number of levels for quantization of the magnitude.\n      cutout: whether to use cutout afterthen.\n      magstd: Use normal distribution to sample magnitude. magnitude must be not\n        None when magstd is given.\n      size: size of image.\n    \"\"\"", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "prob_to_apply", "=", "(", "\n", "float", "(", "prob_to_apply", ")", "if", "prob_to_apply", "is", "not", "None", "else", "None", ")", "\n", "self", ".", "num_levels", "=", "int", "(", "num_levels", ")", "if", "num_levels", "else", "None", "\n", "self", ".", "level", "=", "float", "(", "magnitude", ")", "if", "magnitude", "is", "not", "None", "else", "None", "\n", "self", ".", "cutout", "=", "cutout", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "magstd", "=", "magstd", "\n", "\n", "global", "TRANSLATE_CONST", "\n", "if", "size", "==", "224", ":", "\n", "      ", "TRANSLATE_CONST", "=", "100", "\n", "", "elif", "size", "==", "128", ":", "\n", "      ", "TRANSLATE_CONST", "=", "40", "\n", "", "elif", "size", "==", "96", ":", "\n", "      ", "TRANSLATE_CONST", "=", "30", "\n", "", "elif", "size", "==", "32", ":", "\n", "      ", "TRANSLATE_CONST", "=", "10", "\n", "", "else", ":", "\n", "      ", "TRANSLATE_CONST", "=", "int", "(", "0.3", "*", "size", ")", "\n", "\n", "", "assert", "TRANSLATE_CONST", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment.RandAugment._get_level": [[176, 205], ["tensorflow.convert_to_tensor", "tensorflow.random.stateless_normal", "tensorflow.math.minimum", "tensorflow.random.uniform", "tensorflow.random.stateless_uniform", "tensorflow.constant", "tensorflow.math.maximum", "tensorflow.cast", "tensorflow.cast", "tensorflow.constant"], "methods", ["None"], ["", "def", "_get_level", "(", "self", ",", "rng", ")", ":", "\n", "    ", "\"\"\"Samples magnitude.\"\"\"", "\n", "if", "self", ".", "level", "is", "not", "None", "and", "not", "self", ".", "magstd", ":", "\n", "      ", "return", "tf", ".", "convert_to_tensor", "(", "self", ".", "level", ")", "\n", "\n", "", "if", "self", ".", "magstd", ":", "\n", "# Sample level from normal distribution.", "\n", "      ", "assert", "self", ".", "level", ",", "'When magstd is provided, level has to be given.'", "\n", "assert", "self", ".", "num_levels", ",", "(", "'When magstd is provided, num_levels has to be '", "\n", "'given.'", ")", "\n", "assert", "self", ".", "num_levels", ">=", "self", ".", "level", "\n", "level", "=", "tf", ".", "random", ".", "stateless_normal", "(", "\n", "shape", "=", "[", "]", ",", "\n", "seed", "=", "rng", ",", "\n", "mean", "=", "self", ".", "level", ",", "\n", "stddev", "=", "self", ".", "magstd", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "# Clip level", "\n", "level", "=", "tf", ".", "math", ".", "minimum", "(", "\n", "tf", ".", "constant", "(", "self", ".", "num_levels", ",", "level", ".", "dtype", ")", ",", "\n", "tf", ".", "math", ".", "maximum", "(", "tf", ".", "constant", "(", "0", ",", "level", ".", "dtype", ")", ",", "level", ")", ")", "\n", "return", "tf", ".", "cast", "(", "level", ",", "tf", ".", "float32", ")", "/", "self", ".", "num_levels", "\n", "\n", "", "if", "self", ".", "num_levels", "is", "None", ":", "\n", "      ", "return", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "      ", "level", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "\n", "shape", "=", "[", "]", ",", "seed", "=", "rng", ",", "maxval", "=", "self", ".", "num_levels", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "tf", ".", "cast", "(", "level", ",", "tf", ".", "float32", ")", "/", "self", ".", "num_levels", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment.RandAugment._apply_one_layer": [[206, 234], ["tensorflow.unstack", "rand_augment.RandAugment._get_level", "tensorflow.random.stateless_uniform", "tensorflow.switch_case", "tensorflow.random.experimental.stateless_split", "branch_fns.append", "tensorflow.cond", "augment_fn", "len", "list", "tensorflow.random.stateless_uniform", "level_to_args_fn"], "methods", ["home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment.RandAugment._get_level"], ["", "", "def", "_apply_one_layer", "(", "self", ",", "rng", ",", "image", ")", ":", "\n", "    ", "\"\"\"Applies one level of augmentation to the image.\"\"\"", "\n", "rng_b", ",", "rng_c", ",", "rng_l", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "3", ")", ")", "\n", "level", "=", "self", ".", "_get_level", "(", "rng_l", ")", "\n", "branch_fns", "=", "[", "]", "\n", "\n", "for", "augment_op_name", "in", "IMAGENET_AUG_OPS", ":", "\n", "      ", "augment_fn", "=", "augment_ops", ".", "NAME_TO_FUNC", "[", "augment_op_name", "]", "\n", "level_to_args_fn", "=", "LEVEL_TO_ARG", "[", "augment_op_name", "]", "\n", "\n", "def", "_branch_fn", "(", "image", "=", "image", ",", "\n", "augment_fn", "=", "augment_fn", ",", "\n", "level_to_args_fn", "=", "level_to_args_fn", ")", ":", "\n", "        ", "args", "=", "[", "image", "]", "+", "list", "(", "level_to_args_fn", "(", "level", ")", ")", "\n", "return", "augment_fn", "(", "*", "args", ")", "\n", "\n", "", "branch_fns", ".", "append", "(", "_branch_fn", ")", "\n", "\n", "", "branch_index", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "\n", "shape", "=", "[", "]", ",", "seed", "=", "rng_b", ",", "maxval", "=", "len", "(", "branch_fns", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "aug_image", "=", "tf", ".", "switch_case", "(", "branch_index", ",", "branch_fns", ",", "default", "=", "lambda", ":", "image", ")", "\n", "if", "self", ".", "prob_to_apply", "is", "not", "None", ":", "\n", "      ", "return", "tf", ".", "cond", "(", "\n", "tf", ".", "random", ".", "stateless_uniform", "(", "shape", "=", "[", "]", ",", "seed", "=", "rng_c", ",", "dtype", "=", "tf", ".", "float32", ")", "<", "\n", "self", ".", "prob_to_apply", ",", "lambda", ":", "aug_image", ",", "lambda", ":", "image", ")", "\n", "", "else", ":", "\n", "      ", "return", "aug_image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment.RandAugment.__call__": [[235, 250], ["tensorflow.unstack", "range", "tensorflow.random.experimental.stateless_split", "rand_augment.RandAugment._apply_one_layer", "augment.augment_ops.cutout"], "methods", ["home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment.RandAugment._apply_one_layer", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.cutout"], ["", "", "def", "__call__", "(", "self", ",", "rng", ",", "image", ")", ":", "\n", "    ", "\"\"\"Calls tf version of randaugment.\"\"\"", "\n", "rngs", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "self", ".", "num_layers", "+", "1", ")", ")", "\n", "rng_cut", ",", "rngs", "=", "rngs", "[", "0", "]", ",", "rngs", "[", "1", ":", "]", "\n", "\n", "aug_image", "=", "image", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "aug_image", "=", "self", ".", "_apply_one_layer", "(", "rngs", "[", "i", "]", ",", "aug_image", ")", "\n", "\n", "", "if", "self", ".", "cutout", ":", "\n", "# followd by cutout", "\n", "      ", "aug_image", "=", "augment_ops", ".", "cutout", "(", "rng_cut", ",", "aug_image", ")", "\n", "\n", "", "return", "aug_image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._randomly_negate_tensor": [[52, 57], ["tensorflow.cast", "tensorflow.cond", "tensorflow.floor", "tensorflow.random.uniform"], "function", ["None"], ["def", "_randomly_negate_tensor", "(", "tensor", ")", ":", "\n", "  ", "\"\"\"With 50% prob turn the tensor negative.\"\"\"", "\n", "should_flip", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "tf", ".", "random", ".", "uniform", "(", "[", "]", ")", "+", "0.5", ")", ",", "tf", ".", "bool", ")", "\n", "final_tensor", "=", "tf", ".", "cond", "(", "should_flip", ",", "lambda", ":", "tensor", ",", "lambda", ":", "-", "tensor", ")", "\n", "return", "final_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._rotate_level_to_arg": [[59, 63], ["rand_augment._randomly_negate_tensor"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._randomly_negate_tensor"], ["", "def", "_rotate_level_to_arg", "(", "level", ")", ":", "\n", "  ", "level", "=", "(", "level", "/", "MAX_LEVEL", ")", "*", "30.", "\n", "level", "=", "_randomly_negate_tensor", "(", "level", ")", "\n", "return", "(", "level", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._enhance_level_to_arg": [[65, 67], ["None"], "function", ["None"], ["", "def", "_enhance_level_to_arg", "(", "level", ")", ":", "\n", "  ", "return", "(", "(", "level", "/", "MAX_LEVEL", ")", "*", "1.8", "+", "0.1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._shear_level_to_arg": [[69, 74], ["rand_augment._randomly_negate_tensor"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._randomly_negate_tensor"], ["", "def", "_shear_level_to_arg", "(", "level", ")", ":", "\n", "  ", "level", "=", "(", "level", "/", "MAX_LEVEL", ")", "*", "0.3", "\n", "# Flip level to negative with 50% chance", "\n", "level", "=", "_randomly_negate_tensor", "(", "level", ")", "\n", "return", "(", "level", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._translate_level_to_arg": [[76, 81], ["rand_augment._randomly_negate_tensor"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._randomly_negate_tensor"], ["", "def", "_translate_level_to_arg", "(", "level", ")", ":", "\n", "  ", "level", "=", "(", "level", "/", "MAX_LEVEL", ")", "*", "TRANSLATE_CONST", "\n", "# Flip level to negative with 50% chance", "\n", "level", "=", "_randomly_negate_tensor", "(", "level", ")", "\n", "return", "(", "level", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._posterize_level_to_arg": [[83, 85], ["tensorflow.cast"], "function", ["None"], ["", "def", "_posterize_level_to_arg", "(", "level", ")", ":", "\n", "  ", "return", "(", "tf", ".", "cast", "(", "(", "level", "/", "MAX_LEVEL", ")", "*", "4", ",", "tf", ".", "int32", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._solarize_level_to_arg": [[87, 89], ["tensorflow.cast"], "function", ["None"], ["", "def", "_solarize_level_to_arg", "(", "level", ")", ":", "\n", "  ", "return", "(", "tf", ".", "cast", "(", "(", "level", "/", "MAX_LEVEL", ")", "*", "256", ",", "tf", ".", "int32", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._solarize_add_level_to_arg": [[91, 93], ["tensorflow.cast"], "function", ["None"], ["", "def", "_solarize_add_level_to_arg", "(", "level", ")", ":", "\n", "  ", "return", "(", "tf", ".", "cast", "(", "(", "level", "/", "MAX_LEVEL", ")", "*", "110", ",", "tf", ".", "int32", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._ignore_level_to_arg": [[95, 98], ["None"], "function", ["None"], ["", "def", "_ignore_level_to_arg", "(", "level", ")", ":", "\n", "  ", "del", "level", "\n", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.rand_augment._divide_level_by_max_level_arg": [[100, 102], ["None"], "function", ["None"], ["", "def", "_divide_level_by_max_level_arg", "(", "level", ")", ":", "\n", "  ", "return", "(", "level", "/", "MAX_LEVEL", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils._get_augmenter_type_and_args": [[28, 40], ["kwargs[].lower", "kwargs.items", "absl.logging.info", "k.startswith", "len"], "function", ["None"], ["def", "_get_augmenter_type_and_args", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Extracts augmenter type and args from **kwargs dict.\"\"\"", "\n", "augment_type", "=", "kwargs", "[", "'type'", "]", ".", "lower", "(", ")", "\n", "augment_args", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "    ", "if", "k", ".", "startswith", "(", "augment_type", "+", "'_'", ")", ":", "\n", "      ", "augment_args", "[", "k", "[", "len", "(", "augment_type", ")", "+", "1", ":", "]", "]", "=", "v", "\n", "", "if", "k", "==", "'size'", ":", "\n", "      ", "augment_args", "[", "k", "]", "=", "v", "\n", "", "", "logging", ".", "info", "(", "'Using augmentation %s with parameters %s'", ",", "augment_type", ",", "\n", "augment_args", ")", "\n", "return", "augment_type", ",", "augment_args", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils.create_random_erasing": [[42, 45], ["functools.partial"], "function", ["None"], ["", "def", "create_random_erasing", "(", "erase_prob", ")", ":", "\n", "  ", "\"\"\"Creates random erasing function.\"\"\"", "\n", "return", "functools", ".", "partial", "(", "augment_ops", ".", "random_erasing", ",", "erase_prob", "=", "erase_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils.create_augmenter": [[47, 72], ["augment_utils._get_augmenter_type_and_args", "augment.rand_augment.RandAugment", "ValueError", "augment.augment_ops.color_map_fn"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils._get_augmenter_type_and_args", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.color_map_fn"], ["", "def", "create_augmenter", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Creates augmenter for supervised task based on hyperparameters dict.\n\n  Args:\n    **kwargs: dictionary augment_type and augmenter arguments.\n\n  Returns:\n    augmenter_state: class representing augmenter state or None for stateless\n      augmnenter\n    sup_augmenter: callable which performs augmentation of the data\n  \"\"\"", "\n", "augment_type", ",", "augment_args", "=", "_get_augmenter_type_and_args", "(", "**", "kwargs", ")", "\n", "if", "augment_type", "==", "'randaugment'", ":", "\n", "    ", "augmenter", "=", "RandAugment", "(", "**", "augment_args", ")", "\n", "return", "augmenter", "\n", "", "elif", "augment_type", "==", "'colorjitter'", ":", "\n", "\n", "    ", "def", "base_augmenter", "(", "rng", ",", "x", ")", ":", "\n", "# TODO(zizhaoz): Take care of rng.", "\n", "      ", "del", "rng", "\n", "return", "augment_ops", ".", "color_map_fn", "(", "x", ",", "**", "augment_args", ")", "\n", "\n", "", "return", "base_augmenter", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Invalid augmentation type {0}'", ".", "format", "(", "augment_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_utils.create_mix_augment": [[74, 123], ["tensorflow.cast", "features.pop", "tensorflow.unstack", "tensorflow.random.stateless_uniform", "tensorflow.switch_case", "len", "tensorflow.one_hot", "tensorflow.random.experimental.stateless_split", "branch_fns.append", "branch_fns.append", "augment.augment_ops.batch_mixup", "augment.augment_ops.batch_cutmix", "len", "tensorflow.cond", "tensorflow.random.stateless_uniform"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.batch_mixup", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.batch_cutmix"], ["", "", "def", "create_mix_augment", "(", "num_classes", ",", "\n", "smoothing", "=", "0.", ",", "\n", "mixup_alpha", "=", "0.8", ",", "\n", "cutmix_alpha", "=", "1.0", ",", "\n", "prob_to_apply", "=", "1.0", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "\"\"\"Creates mix style augmentations.\"\"\"", "\n", "\n", "def", "augment_fn", "(", "features", ")", ":", "\n", "    ", "images", ",", "labels", "=", "features", "[", "'image'", "]", ",", "features", "[", "'label'", "]", "\n", "assert", "len", "(", "images", ".", "shape", ")", "==", "4", ",", "'Input must be batched'", "\n", "oh_labels", "=", "tf", ".", "cast", "(", "tf", ".", "one_hot", "(", "labels", ",", "num_classes", ")", ",", "dtype", ")", "\n", "rng", "=", "features", ".", "pop", "(", "'rng'", ")", "\n", "cutmix_rng", ",", "mixup_rng", ",", "branch_rng", ",", "apply_rng", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "4", ")", ")", "\n", "\n", "branch_fns", "=", "[", "]", "\n", "# Add mixup function", "\n", "if", "mixup_alpha", ":", "\n", "      ", "def", "_mixup", "(", ")", ":", "\n", "        ", "return", "augment_ops", ".", "batch_mixup", "(", "mixup_rng", ",", "images", ",", "oh_labels", ",", "\n", "mixup_alpha", ",", "smoothing", ")", "\n", "\n", "", "branch_fns", ".", "append", "(", "_mixup", ")", "\n", "\n", "# Add cutmix function", "\n", "", "if", "cutmix_alpha", ":", "\n", "      ", "def", "_cutmix", "(", ")", ":", "\n", "        ", "return", "augment_ops", ".", "batch_cutmix", "(", "cutmix_rng", ",", "images", ",", "oh_labels", ",", "\n", "cutmix_alpha", ",", "smoothing", ")", "\n", "\n", "", "branch_fns", ".", "append", "(", "_cutmix", ")", "\n", "", "branch_index", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "\n", "shape", "=", "[", "]", ",", "seed", "=", "branch_rng", ",", "maxval", "=", "len", "(", "branch_fns", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "aug_image", ",", "aug_labels", "=", "tf", ".", "switch_case", "(", "branch_index", ",", "branch_fns", ")", "\n", "augmented_outputs", "=", "{", "'image'", ":", "aug_image", ",", "'label'", ":", "aug_labels", "}", "\n", "origin_outputs", "=", "{", "'image'", ":", "images", ",", "'label'", ":", "oh_labels", "}", "\n", "\n", "if", "prob_to_apply", "==", "0", ":", "\n", "      ", "return", "origin_outputs", "\n", "", "elif", "prob_to_apply", "<", "1.0", ":", "\n", "      ", "return", "tf", ".", "cond", "(", "\n", "tf", ".", "random", ".", "stateless_uniform", "(", "\n", "shape", "=", "[", "]", ",", "seed", "=", "apply_rng", ",", "dtype", "=", "dtype", ")", "<", "prob_to_apply", ",", "\n", "lambda", ":", "augmented_outputs", ",", "lambda", ":", "origin_outputs", ")", "\n", "", "else", ":", "\n", "      ", "return", "augmented_outputs", "\n", "\n", "", "", "return", "augment_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_apply": [[27, 34], ["tensorflow.cond", "tensorflow.less", "tensorflow.random_uniform", "tensorflow.cast", "color_util.to_grayscale"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.to_grayscale"], ["def", "random_apply", "(", "func", ",", "p", ",", "x", ")", ":", "\n", "  ", "\"\"\"Randomly apply function func to x with probability p.\"\"\"", "\n", "return", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "tf", ".", "random_uniform", "(", "[", "]", ",", "minval", "=", "0", ",", "maxval", "=", "1", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "cast", "(", "p", ",", "tf", ".", "float32", ")", ")", ",", "\n", "lambda", ":", "func", "(", "x", ")", ",", "\n", "lambda", ":", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_brightness": [[36, 47], ["tensorflow.random_uniform", "tensorflow.maximum", "tensorflow.image.random_brightness", "ValueError"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_brightness"], ["", "def", "random_brightness", "(", "image", ",", "max_delta", ",", "impl", "=", "'simclrv2'", ")", ":", "\n", "  ", "\"\"\"A multiplicative vs additive change of brightness.\"\"\"", "\n", "if", "impl", "==", "'simclrv2'", ":", "\n", "    ", "factor", "=", "tf", ".", "random_uniform", "(", "\n", "[", "]", ",", "tf", ".", "maximum", "(", "1.0", "-", "max_delta", ",", "0", ")", ",", "1.0", "+", "max_delta", ")", "\n", "image", "=", "image", "*", "factor", "\n", "", "elif", "impl", "==", "'simclrv1'", ":", "\n", "    ", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "max_delta", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Unknown impl {} for random brightness.'", ".", "format", "(", "impl", ")", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.to_grayscale": [[49, 54], ["tensorflow.image.rgb_to_grayscale", "tensorflow.tile"], "function", ["None"], ["", "def", "to_grayscale", "(", "image", ",", "keep_channels", "=", "True", ")", ":", "\n", "  ", "image", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "image", ")", "\n", "if", "keep_channels", ":", "\n", "    ", "image", "=", "tf", ".", "tile", "(", "image", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.color_jitter": [[56, 79], ["color_util.color_jitter_rand", "color_util.color_jitter_nonrand"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.color_jitter_rand", "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.color_jitter_nonrand"], ["", "def", "color_jitter", "(", "image", ",", "strength", ",", "random_order", "=", "True", ",", "impl", "=", "'simclrv2'", ")", ":", "\n", "  ", "\"\"\"Distorts the color of the image.\n\n  Args:\n    image: The input image tensor.\n    strength: the floating number for the strength of the color augmentation.\n    random_order: A bool, specifying whether to randomize the jittering order.\n    impl: 'simclrv1' or 'simclrv2'.  Whether to use simclrv1 or simclrv2's\n        version of random brightness.\n\n  Returns:\n    The distorted image tensor.\n  \"\"\"", "\n", "brightness", "=", "0.8", "*", "strength", "\n", "contrast", "=", "0.8", "*", "strength", "\n", "saturation", "=", "0.8", "*", "strength", "\n", "hue", "=", "0.2", "*", "strength", "\n", "if", "random_order", ":", "\n", "    ", "return", "color_jitter_rand", "(", "\n", "image", ",", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ",", "impl", "=", "impl", ")", "\n", "", "else", ":", "\n", "    ", "return", "color_jitter_nonrand", "(", "\n", "image", ",", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.color_jitter_nonrand": [[81, 120], ["tensorflow.name_scope", "range", "color_util.color_jitter_nonrand.apply_transform"], "function", ["None"], ["", "", "def", "color_jitter_nonrand", "(", "image", ",", "\n", "brightness", "=", "0", ",", "\n", "contrast", "=", "0", ",", "\n", "saturation", "=", "0", ",", "\n", "hue", "=", "0", ",", "\n", "impl", "=", "'simclrv2'", ")", ":", "\n", "  ", "\"\"\"Distorts the color of the image (jittering order is fixed).\n\n  Args:\n    image: The input image tensor.\n    brightness: A float, specifying the brightness for color jitter.\n    contrast: A float, specifying the contrast for color jitter.\n    saturation: A float, specifying the saturation for color jitter.\n    hue: A float, specifying the hue for color jitter.\n    impl: 'simclrv1' or 'simclrv2'.  Whether to use simclrv1 or simclrv2's\n        version of random brightness.\n\n  Returns:\n    The distorted image tensor.\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'distort_color'", ")", ":", "\n", "    ", "def", "apply_transform", "(", "i", ",", "x", ",", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "      ", "\"\"\"Apply the i-th transformation.\"\"\"", "\n", "if", "brightness", "!=", "0", "and", "i", "==", "0", ":", "\n", "        ", "x", "=", "random_brightness", "(", "x", ",", "max_delta", "=", "brightness", ",", "impl", "=", "impl", ")", "\n", "", "elif", "contrast", "!=", "0", "and", "i", "==", "1", ":", "\n", "        ", "x", "=", "tf", ".", "image", ".", "random_contrast", "(", "\n", "x", ",", "lower", "=", "1", "-", "contrast", ",", "upper", "=", "1", "+", "contrast", ")", "\n", "", "elif", "saturation", "!=", "0", "and", "i", "==", "2", ":", "\n", "        ", "x", "=", "tf", ".", "image", ".", "random_saturation", "(", "\n", "x", ",", "lower", "=", "1", "-", "saturation", ",", "upper", "=", "1", "+", "saturation", ")", "\n", "", "elif", "hue", "!=", "0", ":", "\n", "        ", "x", "=", "tf", ".", "image", ".", "random_hue", "(", "x", ",", "max_delta", "=", "hue", ")", "\n", "", "return", "x", "\n", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "      ", "image", "=", "apply_transform", "(", "i", ",", "image", ",", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.", ",", "1.", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.color_jitter_rand": [[122, 177], ["tensorflow.name_scope", "tensorflow.random_shuffle", "range", "tensorflow.cond", "tensorflow.range", "color_util.color_jitter_nonrand.apply_transform"], "function", ["None"], ["", "", "def", "color_jitter_rand", "(", "image", ",", "\n", "brightness", "=", "0", ",", "\n", "contrast", "=", "0", ",", "\n", "saturation", "=", "0", ",", "\n", "hue", "=", "0", ",", "\n", "impl", "=", "'simclrv2'", ")", ":", "\n", "  ", "\"\"\"Distorts the color of the image (jittering order is random).\n\n  Args:\n    image: The input image tensor.\n    brightness: A float, specifying the brightness for color jitter.\n    contrast: A float, specifying the contrast for color jitter.\n    saturation: A float, specifying the saturation for color jitter.\n    hue: A float, specifying the hue for color jitter.\n    impl: 'simclrv1' or 'simclrv2'.  Whether to use simclrv1 or simclrv2's\n        version of random brightness.\n\n  Returns:\n    The distorted image tensor.\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'distort_color'", ")", ":", "\n", "    ", "def", "apply_transform", "(", "i", ",", "x", ")", ":", "\n", "      ", "\"\"\"Apply the i-th transformation.\"\"\"", "\n", "def", "brightness_foo", "(", ")", ":", "\n", "        ", "if", "brightness", "==", "0", ":", "\n", "          ", "return", "x", "\n", "", "else", ":", "\n", "          ", "return", "random_brightness", "(", "x", ",", "max_delta", "=", "brightness", ",", "impl", "=", "impl", ")", "\n", "\n", "", "", "def", "contrast_foo", "(", ")", ":", "\n", "        ", "if", "contrast", "==", "0", ":", "\n", "          ", "return", "x", "\n", "", "else", ":", "\n", "          ", "return", "tf", ".", "image", ".", "random_contrast", "(", "x", ",", "lower", "=", "1", "-", "contrast", ",", "upper", "=", "1", "+", "contrast", ")", "\n", "", "", "def", "saturation_foo", "(", ")", ":", "\n", "        ", "if", "saturation", "==", "0", ":", "\n", "          ", "return", "x", "\n", "", "else", ":", "\n", "          ", "return", "tf", ".", "image", ".", "random_saturation", "(", "\n", "x", ",", "lower", "=", "1", "-", "saturation", ",", "upper", "=", "1", "+", "saturation", ")", "\n", "", "", "def", "hue_foo", "(", ")", ":", "\n", "        ", "if", "hue", "==", "0", ":", "\n", "          ", "return", "x", "\n", "", "else", ":", "\n", "          ", "return", "tf", ".", "image", ".", "random_hue", "(", "x", ",", "max_delta", "=", "hue", ")", "\n", "", "", "x", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "i", ",", "2", ")", ",", "\n", "lambda", ":", "tf", ".", "cond", "(", "tf", ".", "less", "(", "i", ",", "1", ")", ",", "brightness_foo", ",", "contrast_foo", ")", ",", "\n", "lambda", ":", "tf", ".", "cond", "(", "tf", ".", "less", "(", "i", ",", "3", ")", ",", "saturation_foo", ",", "hue_foo", ")", ")", "\n", "return", "x", "\n", "\n", "", "perm", "=", "tf", ".", "random_shuffle", "(", "tf", ".", "range", "(", "4", ")", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "      ", "image", "=", "apply_transform", "(", "perm", "[", "i", "]", ",", "image", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.", ",", "1.", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util._compute_crop_shape": [[179, 218], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cond", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.rint", "tensorflow.rint", "tensorflow.rint", "tensorflow.rint"], "function", ["None"], ["", "", "def", "_compute_crop_shape", "(", "\n", "image_height", ",", "image_width", ",", "aspect_ratio", ",", "crop_proportion", ")", ":", "\n", "  ", "\"\"\"Compute aspect ratio-preserving shape for central crop.\n\n  The resulting shape retains `crop_proportion` along one side and a proportion\n  less than or equal to `crop_proportion` along the other side.\n\n  Args:\n    image_height: Height of image to be cropped.\n    image_width: Width of image to be cropped.\n    aspect_ratio: Desired aspect ratio (width / height) of output.\n    crop_proportion: Proportion of image to retain along the less-cropped side.\n\n  Returns:\n    crop_height: Height of image after cropping.\n    crop_width: Width of image after cropping.\n  \"\"\"", "\n", "image_width_float", "=", "tf", ".", "cast", "(", "image_width", ",", "tf", ".", "float32", ")", "\n", "image_height_float", "=", "tf", ".", "cast", "(", "image_height", ",", "tf", ".", "float32", ")", "\n", "\n", "def", "_requested_aspect_ratio_wider_than_image", "(", ")", ":", "\n", "    ", "crop_height", "=", "tf", ".", "cast", "(", "tf", ".", "rint", "(", "\n", "crop_proportion", "/", "aspect_ratio", "*", "image_width_float", ")", ",", "tf", ".", "int32", ")", "\n", "crop_width", "=", "tf", ".", "cast", "(", "tf", ".", "rint", "(", "\n", "crop_proportion", "*", "image_width_float", ")", ",", "tf", ".", "int32", ")", "\n", "return", "crop_height", ",", "crop_width", "\n", "\n", "", "def", "_image_wider_than_requested_aspect_ratio", "(", ")", ":", "\n", "    ", "crop_height", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "rint", "(", "crop_proportion", "*", "image_height_float", ")", ",", "tf", ".", "int32", ")", "\n", "crop_width", "=", "tf", ".", "cast", "(", "tf", ".", "rint", "(", "\n", "crop_proportion", "*", "aspect_ratio", "*", "\n", "image_height_float", ")", ",", "tf", ".", "int32", ")", "\n", "return", "crop_height", ",", "crop_width", "\n", "\n", "", "return", "tf", ".", "cond", "(", "\n", "aspect_ratio", ">", "image_width_float", "/", "image_height_float", ",", "\n", "_requested_aspect_ratio_wider_than_image", ",", "\n", "_image_wider_than_requested_aspect_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.center_crop": [[220, 245], ["tensorflow.shape", "color_util._compute_crop_shape", "tensorflow.image.crop_to_bounding_box", "tensorflow.image.resize_bicubic"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util._compute_crop_shape"], ["", "def", "center_crop", "(", "image", ",", "height", ",", "width", ",", "crop_proportion", ")", ":", "\n", "  ", "\"\"\"Crops to center of image and rescales to desired size.\n\n  Args:\n    image: Image Tensor to crop.\n    height: Height of image to be cropped.\n    width: Width of image to be cropped.\n    crop_proportion: Proportion of image to retain along the less-cropped side.\n\n  Returns:\n    A `height` x `width` x channels Tensor holding a central crop of `image`.\n  \"\"\"", "\n", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "image_height", "=", "shape", "[", "0", "]", "\n", "image_width", "=", "shape", "[", "1", "]", "\n", "crop_height", ",", "crop_width", "=", "_compute_crop_shape", "(", "\n", "image_height", ",", "image_width", ",", "height", "/", "width", ",", "crop_proportion", ")", "\n", "offset_height", "=", "(", "(", "image_height", "-", "crop_height", ")", "+", "1", ")", "//", "2", "\n", "offset_width", "=", "(", "(", "image_width", "-", "crop_width", ")", "+", "1", ")", "//", "2", "\n", "image", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "\n", "image", ",", "offset_height", ",", "offset_width", ",", "crop_height", ",", "crop_width", ")", "\n", "\n", "image", "=", "tf", ".", "image", ".", "resize_bicubic", "(", "[", "image", "]", ",", "[", "height", ",", "width", "]", ")", "[", "0", "]", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.distorted_bounding_box_crop": [[247, 297], ["tensorflow.name_scope", "tensorflow.shape", "tensorflow.image.sample_distorted_bounding_box", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.image.crop_to_bounding_box"], "function", ["None"], ["", "def", "distorted_bounding_box_crop", "(", "image", ",", "\n", "bbox", ",", "\n", "min_object_covered", "=", "0.1", ",", "\n", "aspect_ratio_range", "=", "(", "0.75", ",", "1.33", ")", ",", "\n", "area_range", "=", "(", "0.05", ",", "1.0", ")", ",", "\n", "max_attempts", "=", "100", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Generates cropped_image using one of the bboxes randomly distorted.\n\n  See `tf.image.sample_distorted_bounding_box` for more documentation.\n\n  Args:\n    image: `Tensor` of image data.\n    bbox: `Tensor` of bounding boxes arranged `[1, num_boxes, coords]`\n        where each coordinate is [0, 1) and the coordinates are arranged\n        as `[ymin, xmin, ymax, xmax]`. If num_boxes is 0 then use the whole\n        image.\n    min_object_covered: An optional `float`. Defaults to `0.1`. The cropped\n        area of the image must contain at least this fraction of any bounding\n        box supplied.\n    aspect_ratio_range: An optional list of `float`s. The cropped area of the\n        image must have an aspect ratio = width / height within this range.\n    area_range: An optional list of `float`s. The cropped area of the image\n        must contain a fraction of the supplied image within in this range.\n    max_attempts: An optional `int`. Number of attempts at generating a cropped\n        region of the image of the specified constraints. After `max_attempts`\n        failures, return the entire image.\n    scope: Optional `str` for name scope.\n  Returns:\n    (cropped image `Tensor`, distorted bbox `Tensor`).\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "scope", ",", "'distorted_bounding_box_crop'", ",", "[", "image", ",", "bbox", "]", ")", ":", "\n", "    ", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "sample_distorted_bounding_box", "=", "tf", ".", "image", ".", "sample_distorted_bounding_box", "(", "\n", "shape", ",", "\n", "bounding_boxes", "=", "bbox", ",", "\n", "min_object_covered", "=", "min_object_covered", ",", "\n", "aspect_ratio_range", "=", "aspect_ratio_range", ",", "\n", "area_range", "=", "area_range", ",", "\n", "max_attempts", "=", "max_attempts", ",", "\n", "use_image_if_no_bounding_boxes", "=", "True", ")", "\n", "bbox_begin", ",", "bbox_size", ",", "_", "=", "sample_distorted_bounding_box", "\n", "\n", "# Crop the image to the specified bounding box.", "\n", "offset_y", ",", "offset_x", ",", "_", "=", "tf", ".", "unstack", "(", "bbox_begin", ")", "\n", "target_height", ",", "target_width", ",", "_", "=", "tf", ".", "unstack", "(", "bbox_size", ")", "\n", "image", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "\n", "image", ",", "offset_y", ",", "offset_x", ",", "target_height", ",", "target_width", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.crop_and_resize": [[299, 321], ["tensorflow.constant", "color_util.distorted_bounding_box_crop", "tensorflow.image.resize_bicubic"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.distorted_bounding_box_crop"], ["", "", "def", "crop_and_resize", "(", "image", ",", "height", ",", "width", ")", ":", "\n", "  ", "\"\"\"Make a random crop and resize it to height `height` and width `width`.\n\n  Args:\n    image: Tensor representing the image.\n    height: Desired image height.\n    width: Desired image width.\n\n  Returns:\n    A `height` x `width` x channels Tensor holding a random crop of `image`.\n  \"\"\"", "\n", "bbox", "=", "tf", ".", "constant", "(", "[", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "aspect_ratio", "=", "width", "/", "height", "\n", "image", "=", "distorted_bounding_box_crop", "(", "\n", "image", ",", "\n", "bbox", ",", "\n", "min_object_covered", "=", "0.1", ",", "\n", "aspect_ratio_range", "=", "(", "3.", "/", "4", "*", "aspect_ratio", ",", "4.", "/", "3.", "*", "aspect_ratio", ")", ",", "\n", "area_range", "=", "(", "0.08", ",", "1.0", ")", ",", "\n", "max_attempts", "=", "100", ",", "\n", "scope", "=", "None", ")", "\n", "return", "tf", ".", "image", ".", "resize_bicubic", "(", "[", "image", "]", ",", "[", "height", ",", "width", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.gaussian_blur": [[323, 362], ["tensorflow.to_int32", "tensorflow.to_float", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.nn.depthwise_conv2d", "tensorflow.nn.depthwise_conv2d", "tensorflow.range", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.squeeze", "tensorflow.pow", "tensorflow.pow", "tensorflow.to_float"], "function", ["None"], ["", "def", "gaussian_blur", "(", "image", ",", "kernel_size", ",", "sigma", ",", "padding", "=", "'SAME'", ")", ":", "\n", "  ", "\"\"\"Blurs the given image with separable convolution.\n\n\n  Args:\n    image: Tensor of shape [height, width, channels] and dtype float to blur.\n    kernel_size: Integer Tensor for the size of the blur kernel. This is should\n      be an odd number. If it is an even number, the actual kernel size will be\n      size + 1.\n    sigma: Sigma value for gaussian operator.\n    padding: Padding to use for the convolution. Typically 'SAME' or 'VALID'.\n\n  Returns:\n    A Tensor representing the blurred image.\n  \"\"\"", "\n", "radius", "=", "tf", ".", "to_int32", "(", "kernel_size", "/", "2", ")", "\n", "kernel_size", "=", "radius", "*", "2", "+", "1", "\n", "x", "=", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "-", "radius", ",", "radius", "+", "1", ")", ")", "\n", "blur_filter", "=", "tf", ".", "exp", "(", "\n", "-", "tf", ".", "pow", "(", "x", ",", "2.0", ")", "/", "(", "2.0", "*", "tf", ".", "pow", "(", "tf", ".", "to_float", "(", "sigma", ")", ",", "2.0", ")", ")", ")", "\n", "blur_filter", "/=", "tf", ".", "reduce_sum", "(", "blur_filter", ")", "\n", "# One vertical and one horizontal filter.", "\n", "blur_v", "=", "tf", ".", "reshape", "(", "blur_filter", ",", "[", "kernel_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "blur_h", "=", "tf", ".", "reshape", "(", "blur_filter", ",", "[", "1", ",", "kernel_size", ",", "1", ",", "1", "]", ")", "\n", "num_channels", "=", "tf", ".", "shape", "(", "image", ")", "[", "-", "1", "]", "\n", "blur_h", "=", "tf", ".", "tile", "(", "blur_h", ",", "[", "1", ",", "1", ",", "num_channels", ",", "1", "]", ")", "\n", "blur_v", "=", "tf", ".", "tile", "(", "blur_v", ",", "[", "1", ",", "1", ",", "num_channels", ",", "1", "]", ")", "\n", "expand_batch_dim", "=", "image", ".", "shape", ".", "ndims", "==", "3", "\n", "if", "expand_batch_dim", ":", "\n", "# Tensorflow requires batched input to convolutions, which we can fake with", "\n", "# an extra dimension.", "\n", "    ", "image", "=", "tf", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", "\n", "", "blurred", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "\n", "image", ",", "blur_h", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "padding", ")", "\n", "blurred", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "\n", "blurred", ",", "blur_v", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "padding", ")", "\n", "if", "expand_batch_dim", ":", "\n", "    ", "blurred", "=", "tf", ".", "squeeze", "(", "blurred", ",", "axis", "=", "0", ")", "\n", "", "return", "blurred", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_crop_with_resize": [[364, 380], ["color_util.random_apply", "color_util.crop_and_resize"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_apply", "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.crop_and_resize"], ["", "def", "random_crop_with_resize", "(", "image", ",", "height", ",", "width", ",", "p", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Randomly crop and resize an image.\n\n  Args:\n    image: `Tensor` representing an image of arbitrary size.\n    height: Height of output image.\n    width: Width of output image.\n    p: Probability of applying this transformation.\n\n  Returns:\n    A preprocessed image `Tensor`.\n  \"\"\"", "\n", "def", "_transform", "(", "image", ")", ":", "# pylint: disable=missing-docstring", "\n", "    ", "image", "=", "crop_and_resize", "(", "image", ",", "height", ",", "width", ")", "\n", "return", "image", "\n", "", "return", "random_apply", "(", "_transform", ",", "p", "=", "p", ",", "x", "=", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_color_jitter": [[382, 390], ["color_util.random_apply", "functools.partial", "color_util.random_apply", "color_util.random_apply"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_apply", "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_apply", "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_apply"], ["", "def", "random_color_jitter", "(", "image", ",", "color_jitter_strength", ",", "p", "=", "1.0", ",", "impl", "=", "'simclrv2'", ")", ":", "\n", "\n", "  ", "def", "_transform", "(", "image", ")", ":", "\n", "    ", "color_jitter_t", "=", "functools", ".", "partial", "(", "\n", "color_jitter", ",", "strength", "=", "color_jitter_strength", ",", "impl", "=", "impl", ")", "\n", "image", "=", "random_apply", "(", "color_jitter_t", ",", "p", "=", "0.8", ",", "x", "=", "image", ")", "\n", "return", "random_apply", "(", "to_grayscale", ",", "p", "=", "0.2", ",", "x", "=", "image", ")", "\n", "", "return", "random_apply", "(", "_transform", ",", "p", "=", "p", ",", "x", "=", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_blur": [[392, 410], ["color_util.random_apply", "tensorflow.random.uniform", "color_util.gaussian_blur"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_apply", "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.gaussian_blur"], ["", "def", "random_blur", "(", "image", ",", "height", ",", "width", ",", "p", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Randomly blur an image.\n\n  Args:\n    image: `Tensor` representing an image of arbitrary size.\n    height: Height of output image.\n    width: Width of output image.\n    p: probability of applying this transformation.\n\n  Returns:\n    A preprocessed image `Tensor`.\n  \"\"\"", "\n", "del", "width", "\n", "def", "_transform", "(", "image", ")", ":", "\n", "    ", "sigma", "=", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "0.1", ",", "2.0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "gaussian_blur", "(", "\n", "image", ",", "kernel_size", "=", "height", "//", "10", ",", "sigma", "=", "sigma", ",", "padding", "=", "'SAME'", ")", "\n", "", "return", "random_apply", "(", "_transform", ",", "p", "=", "p", ",", "x", "=", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.batch_random_blur": [[412, 440], ["tensorflow.cast", "color_util.random_blur", "color_util.batch_random_blur.generate_selector"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_blur"], ["", "def", "batch_random_blur", "(", "images_list", ",", "height", ",", "width", ",", "blur_probability", "=", "0.5", ")", ":", "\n", "  ", "\"\"\"Apply efficient batch data transformations.\n\n  Args:\n    images_list: a list of image tensors.\n    height: the height of image.\n    width: the width of image.\n    blur_probability: the probaility to apply the blur operator.\n\n  Returns:\n    Preprocessed feature list.\n  \"\"\"", "\n", "def", "generate_selector", "(", "p", ",", "bsz", ")", ":", "\n", "    ", "shape", "=", "[", "bsz", ",", "1", ",", "1", ",", "1", "]", "\n", "selector", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "less", "(", "tf", ".", "random_uniform", "(", "shape", ",", "0", ",", "1", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "p", ")", ",", "\n", "tf", ".", "float32", ")", "\n", "return", "selector", "\n", "\n", "", "new_images_list", "=", "[", "]", "\n", "for", "images", "in", "images_list", ":", "\n", "    ", "images_new", "=", "random_blur", "(", "images", ",", "height", ",", "width", ",", "p", "=", "1.", ")", "\n", "selector", "=", "generate_selector", "(", "blur_probability", ",", "tf", ".", "shape", "(", "images", ")", "[", "0", "]", ")", "\n", "images", "=", "images_new", "*", "selector", "+", "images", "*", "(", "1", "-", "selector", ")", "\n", "images", "=", "tf", ".", "clip_by_value", "(", "images", ",", "0.", ",", "1.", ")", "\n", "new_images_list", ".", "append", "(", "images", ")", "\n", "\n", "", "return", "new_images_list", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.preprocess_for_train": [[442, 475], ["tensorflow.reshape", "tensorflow.clip_by_value", "color_util.random_crop_with_resize", "tensorflow.image.random_flip_left_right", "color_util.random_color_jitter"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_crop_with_resize", "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.random_color_jitter"], ["", "def", "preprocess_for_train", "(", "image", ",", "\n", "height", ",", "\n", "width", ",", "\n", "color_jitter_strength", ",", "\n", "color_distort", "=", "True", ",", "\n", "crop", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "impl", "=", "'simclrv2'", ")", ":", "\n", "  ", "\"\"\"Preprocesses the given image for training.\n\n  Args:\n    image: `Tensor` representing an image of arbitrary size.\n    height: Height of output image.\n    width: Width of output image.\n    color_jitter_strength: color jitter strength.\n    color_distort: Whether to apply the color distortion.\n    crop: Whether to crop the image.\n    flip: Whether or not to flip left and right of an image.\n    impl: 'simclrv1' or 'simclrv2'.  Whether to use simclrv1 or simclrv2's\n        version of random brightness.\n\n  Returns:\n    A preprocessed image `Tensor`.\n  \"\"\"", "\n", "if", "crop", ":", "\n", "    ", "image", "=", "random_crop_with_resize", "(", "image", ",", "height", ",", "width", ")", "\n", "", "if", "flip", ":", "\n", "    ", "image", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "image", ")", "\n", "", "if", "color_distort", ":", "\n", "    ", "image", "=", "random_color_jitter", "(", "image", ",", "color_jitter_strength", ",", "impl", "=", "impl", ")", "\n", "", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "height", ",", "width", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.", ",", "1.", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.preprocess_for_eval": [[477, 494], ["tensorflow.reshape", "tensorflow.clip_by_value", "color_util.center_crop"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.center_crop"], ["", "def", "preprocess_for_eval", "(", "image", ",", "height", ",", "width", ",", "crop", "=", "True", ")", ":", "\n", "  ", "\"\"\"Preprocesses the given image for evaluation.\n\n  Args:\n    image: `Tensor` representing an image of arbitrary size.\n    height: Height of output image.\n    width: Width of output image.\n    crop: Whether or not to (center) crop the testing images.\n\n  Returns:\n    A preprocessed image `Tensor`.\n  \"\"\"", "\n", "if", "crop", ":", "\n", "    ", "image", "=", "center_crop", "(", "image", ",", "height", ",", "width", ",", "crop_proportion", "=", "CROP_PROPORTION", ")", "\n", "", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "height", ",", "width", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.", ",", "1.", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.color_map_fn": [[35, 53], ["absl.logging.info", "tensorflow.image.convert_image_dtype", "augment.color_util.preprocess_for_train", "tensorflow.cast", "str"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.color_util.preprocess_for_train"], ["def", "color_map_fn", "(", "image", ",", "size", ",", "strength", "=", "0.5", ",", "crop", "=", "False", ")", ":", "\n", "  ", "\"\"\"Color jitters.\"\"\"", "\n", "logging", ".", "info", "(", "'Overwite strength=%.2f, size=%d'", ",", "strength", ",", "size", ")", "\n", "dtype", "=", "image", ".", "dtype", "\n", "assert", "'uint8'", "in", "str", "(", "dtype", ")", "\n", "# Converts to [0,1] range.", "\n", "image", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# Do not do crop as we expect the input image has been preprocessed by", "\n", "# dataset specific default processeors.", "\n", "x", "=", "color_util", ".", "preprocess_for_train", "(", "\n", "image", ",", "\n", "height", "=", "size", ",", "\n", "width", "=", "size", ",", "\n", "color_jitter_strength", "=", "strength", ",", "\n", "crop", "=", "crop", ",", "\n", "color_distort", "=", "True", ")", "# fn output range is [0,1]", "\n", "x", "*=", "255.0", "\n", "return", "tf", ".", "cast", "(", "x", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops._sample_batch_mask": [[55, 101], ["tensorflow.unstack", "tensorflow.sequence_mask", "tensorflow.sequence_mask", "tensorflow.random.stateless_uniform", "tensorflow.random.stateless_uniform", "tensorflow.map_fn", "tensorflow.map_fn", "tensorflow.math.logical_and", "tensorflow.random.experimental.stateless_split", "tensorflow.shape", "tensorflow.roll", "tensorflow.roll", "tensorflow.ones_like", "tensorflow.ones_like"], "function", ["None"], ["", "def", "_sample_batch_mask", "(", "rng", ",", "height", ",", "width", ",", "mask_height", ",", "mask_width", ")", ":", "\n", "  ", "\"\"\"Samples a batch of masks.\n\n  Args:\n    rng: RNG to use.\n    height: An integer as image height.\n    width: An integer as image width.\n    mask_height: A tf.int64 tensor of shape [batch_size, mask_height].\n    mask_width: A tf.int64 tensor of shape [batch_size, mask_width].\n\n  Returns:\n    A tf.bool tensor of shape [batch_size, height, width].\n  \"\"\"", "\n", "rng_x", ",", "rng_y", "=", "tf", ".", "unstack", "(", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "2", ")", ")", "\n", "batch_size", "=", "tf", ".", "shape", "(", "mask_height", ")", "[", "0", "]", "\n", "x", "=", "tf", ".", "sequence_mask", "(", "mask_width", ",", "maxlen", "=", "width", ")", "\n", "y", "=", "tf", ".", "sequence_mask", "(", "mask_height", ",", "maxlen", "=", "height", ")", "\n", "x_shift", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "[", "batch_size", "]", ",", "\n", "rng_x", ",", "\n", "0", ",", "\n", "width", ",", "\n", "dtype", "=", "tf", ".", "int64", ")", "\n", "y_shift", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "[", "batch_size", "]", ",", "\n", "rng_y", ",", "\n", "0", ",", "\n", "height", ",", "\n", "dtype", "=", "tf", ".", "int64", ")", "\n", "# Avoid shifting too much.", "\n", "x_shift", "=", "x_shift", "%", "(", "tf", ".", "ones_like", "(", "x_shift", ")", "*", "width", "-", "mask_width", ")", "\n", "y_shift", "=", "y_shift", "%", "(", "tf", ".", "ones_like", "(", "y_shift", ")", "*", "height", "-", "mask_height", ")", "\n", "# [batch_size, 1]", "\n", "x_shift", "=", "x_shift", "[", ":", ",", "tf", ".", "newaxis", "]", "\n", "y_shift", "=", "y_shift", "[", ":", ",", "tf", ".", "newaxis", "]", "\n", "# [batch_size, width]", "\n", "x", "=", "tf", ".", "map_fn", "(", "\n", "lambda", "t", ":", "tf", ".", "roll", "(", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "axis", "=", "[", "0", "]", ")", ",", "(", "x", ",", "x_shift", ")", ",", "\n", "dtype", "=", "x", ".", "dtype", ",", "\n", "back_prop", "=", "False", ")", "\n", "# [batch_size, height]", "\n", "y", "=", "tf", ".", "map_fn", "(", "\n", "lambda", "t", ":", "tf", ".", "roll", "(", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "axis", "=", "[", "0", "]", ")", ",", "(", "y", ",", "y_shift", ")", ",", "\n", "dtype", "=", "y", ".", "dtype", ",", "\n", "back_prop", "=", "False", ")", "\n", "# [batch_size, height, width]", "\n", "mask", "=", "tf", ".", "math", ".", "logical_and", "(", "y", "[", ":", ",", ":", ",", "tf", ".", "newaxis", "]", ",", "x", "[", ":", ",", "tf", ".", "newaxis", ",", ":", "]", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.batch_cutmix": [[103, 151], ["tensorflow.unstack", "tensorflow.shape", "tensorflow.random.stateless_uniform", "tensorflow.math.sqrt", "tensorflow.cast", "tensorflow.cast", "augment_ops._sample_batch_mask", "tensorflow.where", "tensorflow.random.experimental.stateless_split", "libml.losses.apply_label_smoothing", "tensorflow.pow", "tensorflow.tile", "tensorflow.cast", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops._sample_batch_mask"], ["", "def", "batch_cutmix", "(", "rng", ",", "images", ",", "label_probs", ",", "beta", "=", "1.0", ",", "smoothing", "=", "0.", ")", ":", "\n", "  ", "\"\"\"Processes input image and label if cutmix is applied.\n\n    CutMix: Regularization Strategy to Train Strong Classifiers with\n    Localizable Features, https://arxiv.org/abs/1905.04899\n\n    Given images and labels, CutMix generates new images and labels by randomly\n    linear interpolating of both images and labels.\n\n  Args:\n    rng: RNG to use.\n    images: A tensor of shape [batch_size, height, width, 3].\n    label_probs: A tensor of shape [batch_size, num_classes].\n    beta: beta distribution params.\n    smoothing: Apply label smoothing befure cutmix label smoothing.\n\n  Returns:\n    images: A tensor of interpolated images.\n    label_probs: A tensor of interpolated label_probs.\n  \"\"\"", "\n", "\n", "rng_beta", ",", "rng_mask", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "2", ")", ")", "\n", "if", "smoothing", ">", "0", ":", "\n", "    ", "label_probs", "=", "apply_label_smoothing", "(", "label_probs", ",", "smoothing", ")", "\n", "", "image_shape", "=", "tf", ".", "shape", "(", "images", ",", "out_type", "=", "tf", ".", "dtypes", ".", "int64", ")", "\n", "batch_size", ",", "height", ",", "width", "=", "image_shape", "[", "0", "]", ",", "image_shape", "[", "1", "]", ",", "image_shape", "[", "2", "]", "\n", "\n", "# Beta distribution of tfp.distributions.Beta(beta, beta).sample([batch_size])", "\n", "uni", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "\n", "shape", "=", "[", "\n", "batch_size", ",", "\n", "]", ",", "seed", "=", "rng_beta", ",", "minval", "=", "0", ",", "maxval", "=", "1", ",", "dtype", "=", "label_probs", ".", "dtype", ")", "\n", "mix_weight", "=", "tf", ".", "pow", "(", "uni", ",", "1", "/", "beta", ")", "/", "2", "\n", "\n", "label_mix_weight", "=", "mix_weight", "[", ":", ",", "tf", ".", "newaxis", "]", "\n", "# Get ratio of height and width to sample.", "\n", "ratio", "=", "tf", ".", "math", ".", "sqrt", "(", "mix_weight", ")", "\n", "mask_h", "=", "tf", ".", "cast", "(", "ratio", "*", "tf", ".", "cast", "(", "height", ",", "ratio", ".", "dtype", ")", ",", "tf", ".", "int64", ")", "\n", "mask_w", "=", "tf", ".", "cast", "(", "ratio", "*", "tf", ".", "cast", "(", "width", ",", "ratio", ".", "dtype", ")", ",", "tf", ".", "int64", ")", "\n", "mask", "=", "_sample_batch_mask", "(", "rng_mask", ",", "height", ",", "width", ",", "mask_h", ",", "mask_w", ")", "\n", "# Mix with reversal of the same batch.", "\n", "images", "=", "tf", ".", "where", "(", "\n", "tf", ".", "tile", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "tf", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "1", ",", "3", "]", ")", ",", "images", ",", "images", "[", ":", ":", "-", "1", "]", ")", "\n", "label_probs", "=", "(", "\n", "label_probs", "*", "label_mix_weight", "+", "label_probs", "[", ":", ":", "-", "1", "]", "*", "\n", "(", "1.0", "-", "label_mix_weight", ")", ")", "\n", "return", "images", ",", "label_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.batch_mixup": [[153, 185], ["tensorflow.unstack", "tensorflow.random.stateless_uniform", "tensorflow.maximum", "tensorflow.random.shuffle", "tensorflow.gather", "tensorflow.gather", "tensorflow.cast", "tensorflow.random.experimental.stateless_split", "libml.losses.apply_label_smoothing", "tensorflow.pow", "tensorflow.range", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "def", "batch_mixup", "(", "rng", ",", "x", ",", "l", ",", "beta", "=", "0.75", ",", "smoothing", "=", "0.", ")", ":", "\n", "  ", "\"\"\"\"Batch mode MixUp.\n\n  Args:\n    rng: RNG to use.\n    x: A tensor of shape [batch_size, height, width, 3].\n    l: A tensor of shape [batch_size, num_classes].\n    beta: beta distribution params.\n    smoothing: Apply label smoothing befure cutmix label smoothing.\n\n  Returns:\n    images: A tensor of interpolated images.\n    l: A tensor of interpolated label_probs.\n  \"\"\"", "\n", "rng_beta", ",", "rng_shuffle", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "2", ")", ")", "\n", "if", "smoothing", ">", "0", ":", "\n", "    ", "l", "=", "apply_label_smoothing", "(", "l", ",", "smoothing", ")", "\n", "# mix = tfp.distributions.Beta(beta, beta).sample([tf.shape(x)[0], 1, 1, 1])", "\n", "", "uni", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "\n", "shape", "=", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ",", "seed", "=", "rng_beta", ",", "minval", "=", "0", ",", "maxval", "=", "1", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "mix", "=", "tf", ".", "pow", "(", "uni", ",", "1", "/", "beta", ")", "/", "2", "\n", "\n", "mix", "=", "tf", ".", "maximum", "(", "mix", ",", "1", "-", "mix", ")", "\n", "# TODO(zizhaoz): stateless_shuffle does not exist", "\n", "index", "=", "tf", ".", "random", ".", "shuffle", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ")", ")", "\n", "xs", "=", "tf", ".", "gather", "(", "x", ",", "index", ")", "\n", "ls", "=", "tf", ".", "gather", "(", "l", ",", "index", ")", "\n", "xmix", "=", "x", "*", "mix", "+", "xs", "*", "(", "1", "-", "mix", ")", "\n", "mix", "=", "tf", ".", "cast", "(", "mix", "[", ":", ",", ":", ",", "0", ",", "0", "]", ",", "l", ".", "dtype", ")", "\n", "lmix", "=", "l", "*", "mix", "+", "ls", "*", "(", "1", "-", "mix", ")", "\n", "return", "xmix", ",", "lmix", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops._rand_bbox_mask": [[187, 216], ["tensorflow.unstack", "tensorflow.cast", "tensorflow.cast", "tensorflow.range", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.range", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.einsum", "tensorflow.random.experimental.stateless_split", "tensorflow.random.stateless_uniform", "tensorflow.greater", "tensorflow.less", "tensorflow.random.stateless_uniform", "tensorflow.greater", "tensorflow.less", "tensorflow.sqrt", "tensorflow.sqrt"], "function", ["None"], ["", "def", "_rand_bbox_mask", "(", "rng", ",", "h", ",", "w", ",", "target_area", ",", "aspect_ratio", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Generate a random bbox mask according to target_area & aspect_ratio.\"\"\"", "\n", "rng", ",", "rng_h", ",", "rng_w", "=", "tf", ".", "unstack", "(", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "3", ")", ")", "\n", "\n", "h", "=", "tf", ".", "cast", "(", "h", ",", "tf", ".", "float32", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "tf", ".", "float32", ")", "\n", "h_size_half", "=", "h", "*", "tf", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", "/", "2", "\n", "w_size_half", "=", "w", "*", "tf", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", "/", "2", "\n", "\n", "# Note: we simply ignore the out-of-image part of the sampled bbox", "\n", "h_mid", "=", "(", "\n", "tf", ".", "random", ".", "stateless_uniform", "(", "[", "]", ",", "rng_h", ",", "0.0", ",", "1.0", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "h", ")", "\n", "h_seq", "=", "tf", ".", "range", "(", "0.", ",", "h", ",", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "h_mask", "=", "tf", ".", "logical_and", "(", "\n", "tf", ".", "greater", "(", "h_seq", ",", "h_mid", "-", "h_size_half", ")", ",", "tf", ".", "less", "(", "h_seq", ",", "\n", "h_mid", "+", "h_size_half", ")", ")", "\n", "h_mask", "=", "tf", ".", "cast", "(", "h_mask", ",", "tf", ".", "float32", ")", "\n", "\n", "w_mid", "=", "(", "\n", "tf", ".", "random", ".", "stateless_uniform", "(", "[", "]", ",", "rng_w", ",", "0.0", ",", "1.0", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "w", ")", "\n", "w_seq", "=", "tf", ".", "range", "(", "0.", ",", "w", ",", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "w_mask", "=", "tf", ".", "logical_and", "(", "\n", "tf", ".", "greater", "(", "w_seq", ",", "w_mid", "-", "w_size_half", ")", ",", "tf", ".", "less", "(", "w_seq", ",", "\n", "w_mid", "+", "w_size_half", ")", ")", "\n", "w_mask", "=", "tf", ".", "cast", "(", "w_mask", ",", "tf", ".", "float32", ")", "\n", "\n", "mask", "=", "tf", ".", "einsum", "(", "'H,W->HW'", ",", "h_mask", ",", "w_mask", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.random_erasing": [[218, 255], ["tensorflow.unstack", "tensorflow.random.stateless_uniform", "tensorflow.random.stateless_uniform", "tensorflow.exp", "augment_ops._rand_bbox_mask", "tensorflow.random.stateless_normal", "tensorflow.cond", "tensorflow.random.experimental.stateless_split", "math.log", "math.log", "tensorflow.cast", "tensorflow.random.stateless_uniform"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops._rand_bbox_mask"], ["", "def", "random_erasing", "(", "rng", ",", "\n", "image", ",", "\n", "erase_prob", ",", "\n", "min_area", "=", "0.02", ",", "\n", "max_area", "=", "1", "/", "3", ",", "\n", "min_aspect", "=", "0.3", ",", "\n", "max_aspect", "=", "None", ")", ":", "\n", "  ", "\"\"\"Simplified random erasing without redrawing.\"\"\"", "\n", "# Input image is supposed to be standardized already.", "\n", "rng", ",", "rng_area", ",", "rgn_ratio", ",", "rng_bbox", ",", "rng_noise", ",", "rng_prob", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "6", ")", ")", "\n", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", "\n", "target_area", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "[", "]", ",", "\n", "rng_area", ",", "\n", "min_area", ",", "\n", "max_area", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "max_aspect", "=", "max_aspect", "or", "1.0", "/", "min_aspect", "\n", "log_aspect_ratio", "=", "tf", ".", "random", ".", "stateless_uniform", "(", "[", "]", ",", "\n", "rgn_ratio", ",", "\n", "math", ".", "log", "(", "min_aspect", ")", ",", "\n", "math", ".", "log", "(", "max_aspect", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "aspect_ratio", "=", "tf", ".", "exp", "(", "log_aspect_ratio", ")", "\n", "\n", "mask", "=", "_rand_bbox_mask", "(", "rng_bbox", ",", "h", ",", "w", ",", "target_area", ",", "aspect_ratio", "=", "aspect_ratio", ")", "\n", "# This is equal to per pixel random erasing.", "\n", "noise", "=", "tf", ".", "random", ".", "stateless_normal", "(", "\n", "shape", "=", "image", ".", "shape", ",", "seed", "=", "rng_noise", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "image", ".", "dtype", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "erased_image", "=", "(", "1.", "-", "mask", ")", "*", "image", "+", "mask", "*", "noise", "\n", "\n", "image", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "random", ".", "stateless_uniform", "(", "[", "]", ",", "rng_prob", ",", "0.", ",", "1.", ")", ">", "erase_prob", ",", "\n", "lambda", ":", "image", ",", "lambda", ":", "erased_image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.cutout": [[257, 294], ["tensorflow.shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.unstack", "tensorflow.cast", "tensorflow.where", "tensorflow.identity", "tensorflow.random.experimental.stateless_split", "tensorflow.round", "tensorflow.round", "tensorflow.zeros", "tensorflow.pad", "tensorflow.expand_dims", "augment_ops.cutout._create_cutout_mask"], "function", ["None"], ["", "def", "cutout", "(", "rng", ",", "image", ",", "scale", "=", "0.5", ")", ":", "\n", "  ", "\"\"\"Cutout.\"\"\"", "\n", "img_shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "img_height", ",", "img_width", "=", "img_shape", "[", "-", "3", "]", ",", "img_shape", "[", "-", "2", "]", "\n", "img_height", "=", "tf", ".", "cast", "(", "img_height", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "img_width", "=", "tf", ".", "cast", "(", "img_width", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "cutout_size", "=", "(", "img_height", "*", "scale", ",", "img_width", "*", "scale", ")", "\n", "\n", "rng_h", ",", "rng_w", "=", "tf", ".", "unstack", "(", "tf", ".", "random", ".", "experimental", ".", "stateless_split", "(", "rng", ",", "2", ")", ")", "\n", "\n", "def", "_create_cutout_mask", "(", ")", ":", "\n", "    ", "height_loc", "=", "tf", ".", "round", "(", "\n", "tf", ".", "random", ".", "stateless_uniform", "(", "\n", "shape", "=", "[", "]", ",", "seed", "=", "rng_h", ",", "minval", "=", "0", ",", "maxval", "=", "img_height", ")", ")", "\n", "width_loc", "=", "tf", ".", "round", "(", "\n", "tf", ".", "random", ".", "stateless_uniform", "(", "\n", "shape", "=", "[", "]", ",", "seed", "=", "rng_w", ",", "minval", "=", "0", ",", "maxval", "=", "img_width", ")", ")", "\n", "\n", "upper_coord", "=", "(", "tf", ".", "maximum", "(", "0.0", ",", "height_loc", "-", "cutout_size", "[", "0", "]", "//", "2", ")", ",", "\n", "tf", ".", "maximum", "(", "0.0", ",", "width_loc", "-", "cutout_size", "[", "1", "]", "//", "2", ")", ")", "\n", "lower_coord", "=", "(", "tf", ".", "minimum", "(", "img_height", ",", "height_loc", "+", "cutout_size", "[", "0", "]", "//", "2", ")", ",", "\n", "tf", ".", "minimum", "(", "img_width", ",", "width_loc", "+", "cutout_size", "[", "1", "]", "//", "2", ")", ")", "\n", "mask_height", "=", "lower_coord", "[", "0", "]", "-", "upper_coord", "[", "0", "]", "\n", "mask_width", "=", "lower_coord", "[", "1", "]", "-", "upper_coord", "[", "1", "]", "\n", "\n", "padding_dims", "=", "(", "(", "upper_coord", "[", "0", "]", ",", "img_height", "-", "lower_coord", "[", "0", "]", ")", ",", "\n", "(", "upper_coord", "[", "1", "]", ",", "img_width", "-", "lower_coord", "[", "1", "]", ")", ")", "\n", "mask", "=", "tf", ".", "zeros", "(", "(", "mask_height", ",", "mask_width", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "pad", "(", "\n", "mask", ",", "tf", ".", "cast", "(", "padding_dims", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "constant_values", "=", "1.0", ")", "\n", "return", "tf", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", "\n", "\n", "", "assert", "image", ".", "dtype", "==", "tf", ".", "uint8", "\n", "mask", "=", "tf", ".", "cast", "(", "_create_cutout_mask", "(", ")", ",", "tf", ".", "bool", ")", "\n", "output_image", "=", "tf", ".", "where", "(", "mask", ",", "image", ",", "\n", "tf", ".", "ones_like", "(", "image", ",", "tf", ".", "uint8", ")", "*", "REPLACE_VALUE", ")", "\n", "return", "tf", ".", "identity", "(", "output_image", ",", "'cutout'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend": [[296, 317], ["tensorflow.cast", "tensorflow.cast", "tensorflow.saturate_cast", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image"], "function", ["None"], ["", "def", "blend", "(", "image1", ",", "image2", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Blend image1 and image2 using 'factor'.\n\n  A value of factor 0.0 means only image1 is used.\n  A value of 1.0 means only image2 is used.  A value between 0.0 and\n  1.0 means we linearly interpolate the pixel values between the two\n  images.  A value greater than 1.0 \"extrapolates\" the difference\n  between the two pixel values, and we clip the results to values\n  between 0 and 255.\n\n  Args:\n    image1: An image Tensor.\n    image2: An image Tensor.\n    factor: A floating point value above 0.0.\n\n  Returns:\n    A blended image Tensor.\n  \"\"\"", "\n", "image1", "=", "tf", ".", "cast", "(", "image1", ",", "tf", ".", "float32", ")", "\n", "image2", "=", "tf", ".", "cast", "(", "image2", ",", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "saturate_cast", "(", "image1", "+", "factor", "*", "(", "image2", "-", "image1", ")", ",", "tf", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.wrap": [[319, 325], ["tensorflow.shape", "tensorflow.ones", "tensorflow.concat", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image"], "function", ["None"], ["", "def", "wrap", "(", "image", ")", ":", "\n", "  ", "\"\"\"Returns 'image' with an extra channel set to all 1s.\"\"\"", "\n", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "extended_channel", "=", "tf", ".", "ones", "(", "[", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "1", "]", ",", "image", ".", "dtype", ")", "\n", "extended", "=", "tf", ".", "concat", "(", "[", "image", ",", "extended_channel", "]", ",", "2", ")", "\n", "return", "extended", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.unwrap": [[327, 364], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.where", "tensorflow.reshape", "tensorflow.slice", "tensorflow.equal", "tensorflow.ones_like", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image", "tensorflow_addons.image"], "function", ["None"], ["", "def", "unwrap", "(", "image", ")", ":", "\n", "  ", "\"\"\"Unwraps an image produced by wrap.\n\n  Where there is a 0 in the last channel for every spatial position,\n  the rest of the three channels in that spatial dimension are grayed\n  (set to 128).  Operations like translate and shear on a wrapped\n  Tensor will leave 0s in empty locations.  Some transformations look\n  at the intensity of values to do preprocessing, and we want these\n  empty pixels to assume the 'average' value, rather than pure black.\n\n\n  Args:\n    image: A 3D Image Tensor with 4 channels.\n\n  Returns:\n    image: A 3D image Tensor with 3 channels.\n  \"\"\"", "\n", "image_shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "# Flatten the spatial dimensions.", "\n", "flattened_image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "-", "1", ",", "image_shape", "[", "2", "]", "]", ")", "\n", "\n", "# Find all pixels where the last channel is zero.", "\n", "alpha_channel", "=", "tf", ".", "expand_dims", "(", "flattened_image", "[", ":", ",", "image_shape", "[", "2", "]", "-", "1", "]", ",", "1", ")", "\n", "\n", "replace", "=", "tf", ".", "constant", "(", "[", "REPLACE_VALUE", ",", "REPLACE_VALUE", ",", "REPLACE_VALUE", ",", "1", "]", ",", "\n", "image", ".", "dtype", ")", "\n", "\n", "# Where they are zero, fill them in with 'replace'.", "\n", "flattened_image", "=", "tf", ".", "where", "(", "\n", "tf", ".", "equal", "(", "alpha_channel", ",", "0", ")", ",", "\n", "tf", ".", "ones_like", "(", "flattened_image", ",", "dtype", "=", "image", ".", "dtype", ")", "*", "replace", ",", "\n", "flattened_image", ")", "\n", "\n", "image", "=", "tf", ".", "reshape", "(", "flattened_image", ",", "image_shape", ")", "\n", "image", "=", "tf", ".", "slice", "(", "image", ",", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "image_shape", "[", "0", "]", ",", "image_shape", "[", "1", "]", ",", "image_shape", "[", "2", "]", "-", "1", "]", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.solarize": [[366, 372], ["tensorflow.saturate_cast", "tensorflow.where"], "function", ["None"], ["", "def", "solarize", "(", "image", ",", "threshold", "=", "128", ")", ":", "\n", "# For each pixel in the image, select the pixel", "\n", "# if the value is less than the threshold.", "\n", "# Otherwise, subtract 255 from the pixel.", "\n", "  ", "threshold", "=", "tf", ".", "saturate_cast", "(", "threshold", ",", "image", ".", "dtype", ")", "\n", "return", "tf", ".", "where", "(", "image", "<", "threshold", ",", "image", ",", "255", "-", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.solarize_add": [[374, 383], ["tensorflow.saturate_cast", "tensorflow.saturate_cast", "tensorflow.where", "tensorflow.cast", "tensorflow.cast"], "function", ["None"], ["", "def", "solarize_add", "(", "image", ",", "addition", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "# For each pixel in the image less than threshold", "\n", "# we add 'addition' amount to it and then clip the", "\n", "# pixel value to be between 0 and 255. The value", "\n", "# of 'addition' is between -128 and 128", "\n", "  ", "threshold", "=", "tf", ".", "saturate_cast", "(", "threshold", ",", "image", ".", "dtype", ")", "\n", "added_im", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "int32", ")", "+", "tf", ".", "cast", "(", "addition", ",", "tf", ".", "int32", ")", "\n", "added_im", "=", "tf", ".", "saturate_cast", "(", "added_im", ",", "tf", ".", "uint8", ")", "\n", "return", "tf", ".", "where", "(", "image", "<", "threshold", ",", "added_im", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.invert": [[385, 388], ["tensorflow.convert_to_tensor", "tensorflow_addons.image"], "function", ["None"], ["", "def", "invert", "(", "image", ")", ":", "\n", "  ", "\"\"\"Inverts the image pixels.\"\"\"", "\n", "return", "255", "-", "tf", ".", "convert_to_tensor", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.invert_blend": [[390, 393], ["augment_ops.blend", "augment_ops.invert"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.invert"], ["", "def", "invert_blend", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Implements blend of invert with original image.\"\"\"", "\n", "return", "blend", "(", "invert", "(", "image", ")", ",", "image", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.color": [[395, 399], ["tensorflow.image.grayscale_to_rgb", "augment_ops.blend", "tensorflow.image.rgb_to_grayscale"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend"], ["", "def", "color", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Color.\"\"\"", "\n", "degenerate", "=", "tf", ".", "image", ".", "grayscale_to_rgb", "(", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "image", ")", ")", "\n", "return", "blend", "(", "degenerate", ",", "image", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.contrast": [[401, 411], ["tensorflow.image.rgb_to_grayscale", "tensorflow.reduce_mean", "tensorflow.saturate_cast", "tensorflow.image.grayscale_to_rgb", "augment_ops.blend", "tensorflow.cast", "tensorflow.ones_like"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend"], ["", "def", "contrast", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Contrast.\"\"\"", "\n", "grayscale_im", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "image", ")", "\n", "mean", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "grayscale_im", ",", "tf", ".", "float32", ")", ")", "\n", "mean", "=", "tf", ".", "saturate_cast", "(", "mean", "+", "0.5", ",", "tf", ".", "uint8", ")", "\n", "\n", "degenerate", "=", "tf", ".", "ones_like", "(", "grayscale_im", ",", "dtype", "=", "tf", ".", "uint8", ")", "*", "mean", "\n", "degenerate", "=", "tf", ".", "image", ".", "grayscale_to_rgb", "(", "degenerate", ")", "\n", "\n", "return", "blend", "(", "degenerate", ",", "image", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.brightness": [[413, 417], ["tensorflow.zeros_like", "augment_ops.blend"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend"], ["", "def", "brightness", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Brightness.\"\"\"", "\n", "degenerate", "=", "tf", ".", "zeros_like", "(", "image", ")", "\n", "return", "blend", "(", "degenerate", ",", "image", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.posterize": [[419, 423], ["tensorflow.cast", "tensorflow.bitwise.left_shift", "tensorflow.bitwise.right_shift"], "function", ["None"], ["", "def", "posterize", "(", "image", ",", "bits", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Posterize.\"\"\"", "\n", "shift", "=", "tf", ".", "cast", "(", "8", "-", "bits", ",", "image", ".", "dtype", ")", "\n", "return", "tf", ".", "bitwise", ".", "left_shift", "(", "tf", ".", "bitwise", ".", "right_shift", "(", "image", ",", "shift", ")", ",", "shift", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.rotate": [[425, 436], ["tensorflow_addons.image.rotate", "augment_ops.unwrap", "augment_ops.wrap"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.rotate", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.unwrap", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.wrap"], ["", "def", "rotate", "(", "image", ",", "degrees", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Rotation.\"\"\"", "\n", "# Convert from degrees to radians", "\n", "degrees_to_radians", "=", "math", ".", "pi", "/", "180.0", "\n", "radians", "=", "degrees", "*", "degrees_to_radians", "\n", "\n", "# In practice, we should randomize the rotation degrees by flipping", "\n", "# it negatively half the time, but that's done on 'degrees' outside", "\n", "# of the function.", "\n", "image", "=", "image_transform", ".", "rotate", "(", "wrap", "(", "image", ")", ",", "radians", ")", "\n", "return", "unwrap", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.translate_x": [[438, 442], ["tensorflow_addons.image.translate", "augment_ops.unwrap", "augment_ops.wrap"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.unwrap", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.wrap"], ["", "def", "translate_x", "(", "image", ",", "pixels", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Translate in X dimension.\"\"\"", "\n", "image", "=", "image_transform", ".", "translate", "(", "wrap", "(", "image", ")", ",", "[", "-", "pixels", ",", "0", "]", ")", "\n", "return", "unwrap", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.translate_y": [[444, 448], ["tensorflow_addons.image.translate", "augment_ops.unwrap", "augment_ops.wrap"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.unwrap", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.wrap"], ["", "def", "translate_y", "(", "image", ",", "pixels", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Translate in Y dimension.\"\"\"", "\n", "image", "=", "image_transform", ".", "translate", "(", "wrap", "(", "image", ")", ",", "[", "0", ",", "-", "pixels", "]", ")", "\n", "return", "unwrap", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.shear_x": [[450, 459], ["tensorflow_addons.image.transform", "augment_ops.unwrap", "augment_ops.wrap"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.unwrap", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.wrap"], ["", "def", "shear_x", "(", "image", ",", "level", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Shearing in X dimension.\"\"\"", "\n", "# Shear parallel to x axis is a projective transform", "\n", "# with a matrix form of:", "\n", "# [1  level", "\n", "#  0  1]", "\n", "image", "=", "image_transform", ".", "transform", "(", "\n", "wrap", "(", "image", ")", ",", "[", "1.", ",", "level", ",", "0.", ",", "0.", ",", "1.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "return", "unwrap", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.shear_y": [[461, 470], ["tensorflow_addons.image.transform", "augment_ops.unwrap", "augment_ops.wrap"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.unwrap", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.wrap"], ["", "def", "shear_y", "(", "image", ",", "level", ")", ":", "\n", "  ", "\"\"\"Equivalent of PIL Shearing in Y dimension.\"\"\"", "\n", "# Shear parallel to y axis is a projective transform", "\n", "# with a matrix form of:", "\n", "# [1  0", "\n", "#  level  1]", "\n", "image", "=", "image_transform", ".", "transform", "(", "\n", "wrap", "(", "image", ")", ",", "[", "1.", ",", "0.", ",", "0.", ",", "level", ",", "1.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "return", "unwrap", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.autocontrast": [[472, 500], ["augment_ops.autocontrast.scale_channel", "tensorflow_addons.image"], "function", ["None"], ["", "def", "autocontrast", "(", "image", ")", ":", "\n", "  ", "\"\"\"Implements Autocontrast function from PIL using TF ops.\"\"\"", "\n", "\n", "def", "scale_channel", "(", "channel", ")", ":", "\n", "    ", "\"\"\"Scale the 2D image using the autocontrast rule.\"\"\"", "\n", "# A possibly cheaper version can be done using cumsum/unique_with_counts", "\n", "# over the histogram values, rather than iterating over the entire image.", "\n", "# to compute mins and maxes.", "\n", "lo", "=", "tf", ".", "cast", "(", "tf", ".", "reduce_min", "(", "channel", ")", ",", "tf", ".", "float32", ")", "\n", "hi", "=", "tf", ".", "cast", "(", "tf", ".", "reduce_max", "(", "channel", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "# Scale the image, making the lowest value 0 and the highest value 255.", "\n", "def", "scale_values", "(", "im", ")", ":", "\n", "      ", "scale", "=", "255.0", "/", "(", "hi", "-", "lo", ")", "\n", "offset", "=", "-", "lo", "*", "scale", "\n", "im", "=", "tf", ".", "cast", "(", "im", ",", "tf", ".", "float32", ")", "*", "scale", "+", "offset", "\n", "return", "tf", ".", "saturate_cast", "(", "im", ",", "tf", ".", "uint8", ")", "\n", "\n", "", "result", "=", "tf", ".", "cond", "(", "hi", ">", "lo", ",", "lambda", ":", "scale_values", "(", "channel", ")", ",", "lambda", ":", "channel", ")", "\n", "return", "result", "\n", "\n", "# Assumes RGB for now.  Scales each channel independently", "\n", "# and then stacks the result.", "\n", "", "s1", "=", "scale_channel", "(", "image", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "s2", "=", "scale_channel", "(", "image", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "s3", "=", "scale_channel", "(", "image", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "image", "=", "tf", ".", "stack", "(", "[", "s1", ",", "s2", ",", "s3", "]", ",", "2", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.autocontrast_blend": [[502, 505], ["augment_ops.blend", "augment_ops.autocontrast"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.autocontrast"], ["", "def", "autocontrast_blend", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Implements blend of autocontrast with original image.\"\"\"", "\n", "return", "blend", "(", "autocontrast", "(", "image", ")", ",", "image", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.sharpness": [[507, 533], ["tensorflow.cast", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.nn.depthwise_conv2d", "tensorflow.squeeze", "tensorflow.ones_like", "tensorflow.pad", "tensorflow.pad", "tensorflow.where", "augment_ops.blend", "tensorflow.constant", "tensorflow.saturate_cast", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend"], ["", "def", "sharpness", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Implements Sharpness function from PIL using TF ops.\"\"\"", "\n", "orig_im", "=", "image", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "# Make image 4D for conv operation", "\n", "image", "=", "tf", ".", "expand_dims", "(", "image", ",", "0", ")", "\n", "# SMOOTH PIL Kernel", "\n", "kernel", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "5", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "3", ",", "3", ",", "1", ",", "1", "]", ")", "/", "13.", "\n", "# Tile across channel dimension", "\n", "kernel", "=", "tf", ".", "tile", "(", "kernel", ",", "[", "1", ",", "1", ",", "3", ",", "1", "]", ")", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "degenerate", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "\n", "image", ",", "kernel", ",", "strides", ",", "padding", "=", "'VALID'", ",", "dilations", "=", "[", "1", ",", "1", "]", ")", "\n", "degenerate", "=", "tf", ".", "squeeze", "(", "tf", ".", "saturate_cast", "(", "degenerate", ",", "tf", ".", "uint8", ")", ",", "[", "0", "]", ")", "\n", "\n", "# For the borders of the resulting image, fill in the values of the", "\n", "# original image.", "\n", "mask", "=", "tf", ".", "ones_like", "(", "degenerate", ")", "\n", "padded_mask", "=", "tf", ".", "pad", "(", "mask", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "padded_degenerate", "=", "tf", ".", "pad", "(", "degenerate", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "result", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "padded_mask", ",", "1", ")", ",", "padded_degenerate", ",", "orig_im", ")", "\n", "\n", "# Blend the final result", "\n", "return", "blend", "(", "result", ",", "orig_im", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.equalize": [[535, 574], ["augment_ops.autocontrast.scale_channel", "tensorflow_addons.image"], "function", ["None"], ["", "def", "equalize", "(", "image", ")", ":", "\n", "  ", "\"\"\"Implements Equalize function from PIL using TF ops.\"\"\"", "\n", "\n", "def", "scale_channel", "(", "im", ",", "c", ")", ":", "\n", "    ", "\"\"\"Scale the data in the channel to implement equalize.\"\"\"", "\n", "im", "=", "tf", ".", "cast", "(", "im", "[", ":", ",", ":", ",", "c", "]", ",", "tf", ".", "int32", ")", "\n", "# Compute the histogram of the image channel.", "\n", "histo", "=", "tf", ".", "histogram_fixed_width", "(", "im", ",", "[", "0", ",", "255", "]", ",", "nbins", "=", "256", ")", "\n", "\n", "# For the purposes of computing the step, filter out the nonzeros.", "\n", "nonzero", "=", "tf", ".", "where", "(", "tf", ".", "not_equal", "(", "histo", ",", "0", ")", ")", "\n", "nonzero_histo", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "histo", ",", "nonzero", ")", ",", "[", "-", "1", "]", ")", "\n", "step", "=", "(", "tf", ".", "reduce_sum", "(", "nonzero_histo", ")", "-", "nonzero_histo", "[", "-", "1", "]", ")", "//", "255", "\n", "\n", "def", "build_lut", "(", "histo", ",", "step", ")", ":", "\n", "# Compute the cumulative sum, shifting by step // 2", "\n", "# and then normalization by step.", "\n", "      ", "lut", "=", "(", "tf", ".", "cumsum", "(", "histo", ")", "+", "(", "step", "//", "2", ")", ")", "//", "step", "\n", "# Shift lut, prepending with 0.", "\n", "lut", "=", "tf", ".", "concat", "(", "[", "[", "0", "]", ",", "lut", "[", ":", "-", "1", "]", "]", ",", "0", ")", "\n", "# Clip the counts to be in range.  This is done", "\n", "# in the C code for image.point.", "\n", "return", "tf", ".", "clip_by_value", "(", "lut", ",", "0", ",", "255", ")", "\n", "\n", "# If step is zero, return the original image.  Otherwise, build", "\n", "# lut from the full histogram and step and then index from it.", "\n", "", "result", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "equal", "(", "step", ",", "0", ")", ",", "lambda", ":", "im", ",", "\n", "lambda", ":", "tf", ".", "gather", "(", "build_lut", "(", "histo", ",", "step", ")", ",", "im", ")", ")", "\n", "\n", "return", "tf", ".", "cast", "(", "result", ",", "tf", ".", "uint8", ")", "\n", "\n", "# Assumes RGB for now.  Scales each channel independently", "\n", "# and then stacks the result.", "\n", "", "s1", "=", "scale_channel", "(", "image", ",", "0", ")", "\n", "s2", "=", "scale_channel", "(", "image", ",", "1", ")", "\n", "s3", "=", "scale_channel", "(", "image", ",", "2", ")", "\n", "image", "=", "tf", ".", "stack", "(", "[", "s1", ",", "s2", ",", "s3", "]", ",", "2", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.equalize_blend": [[576, 579], ["augment_ops.blend", "augment_ops.equalize"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.equalize"], ["", "def", "equalize_blend", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Implements blend of equalize with original image.\"\"\"", "\n", "return", "blend", "(", "equalize", "(", "image", ")", ",", "image", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops._convolve_image_with_kernel": [[581, 591], ["tensorflow.tile", "tensorflow.expand_dims", "tensorflow.nn.depthwise_conv2d", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.cast", "tensorflow_addons.image", "tensorflow_addons.image"], "function", ["None"], ["", "def", "_convolve_image_with_kernel", "(", "image", ",", "kernel", ")", ":", "\n", "  ", "num_channels", "=", "tf", ".", "shape", "(", "image", ")", "[", "-", "1", "]", "\n", "kernel", "=", "tf", ".", "tile", "(", "kernel", ",", "[", "1", ",", "1", ",", "num_channels", ",", "1", "]", ")", "\n", "image", "=", "tf", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", "\n", "convolved_im", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "\n", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", ",", "kernel", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "# adding 0.5 for future rounding, same as in PIL:", "\n", "# https://github.com/python-pillow/Pillow/blob/555e305a60d7fcefd1ad4aa6c8fd879e2f474192/src/libImaging/Filter.c#L101  # pylint: disable=line-too-long", "\n", "convolved_im", "=", "convolved_im", "+", "0.5", "\n", "return", "tf", ".", "squeeze", "(", "convolved_im", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blur": [[593, 618], ["augment_ops._convolve_image_with_kernel", "augment_ops.blend", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops._convolve_image_with_kernel", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend"], ["", "def", "blur", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Blur with the same kernel as ImageFilter.BLUR.\"\"\"", "\n", "# See https://github.com/python-pillow/Pillow/blob/master/src/PIL/ImageFilter.py  # pylint: disable=line-too-long", "\n", "# class BLUR(BuiltinFilter):", "\n", "#     name = \"Blur\"", "\n", "#     # fmt: off", "\n", "#     filterargs = (5, 5), 16, 0, (", "\n", "#         1, 1, 1, 1, 1,", "\n", "#         1, 0, 0, 0, 1,", "\n", "#         1, 0, 0, 0, 1,", "\n", "#         1, 0, 0, 0, 1,", "\n", "#         1, 1, 1, 1, 1,", "\n", "#     )", "\n", "#     # fmt: on", "\n", "#", "\n", "# filterargs are following:", "\n", "# (kernel_size_x, kernel_size_y), divisor, offset, kernel", "\n", "#", "\n", "blur_kernel", "=", "tf", ".", "constant", "(", "\n", "[", "[", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "[", "1.", ",", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "[", "1.", ",", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "\n", "[", "1.", ",", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "[", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "5", ",", "5", ",", "1", ",", "1", "]", ")", "/", "16.0", "\n", "blurred_im", "=", "_convolve_image_with_kernel", "(", "image", ",", "blur_kernel", ")", "\n", "return", "blend", "(", "image", ",", "blurred_im", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.smooth": [[620, 641], ["augment_ops._convolve_image_with_kernel", "augment_ops.blend", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops._convolve_image_with_kernel", "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.blend"], ["", "def", "smooth", "(", "image", ",", "factor", ")", ":", "\n", "  ", "\"\"\"Smooth with the same kernel as ImageFilter.SMOOTH.\"\"\"", "\n", "# See https://github.com/python-pillow/Pillow/blob/master/src/PIL/ImageFilter.py  # pylint: disable=line-too-long", "\n", "# class SMOOTH(BuiltinFilter):", "\n", "#     name = \"Smooth\"", "\n", "#     # fmt: off", "\n", "#     filterargs = (3, 3), 13, 0, (", "\n", "#         1, 1, 1,", "\n", "#         1, 5, 1,", "\n", "#         1, 1, 1,", "\n", "#     )", "\n", "#     # fmt: on", "\n", "#", "\n", "# filterargs are following:", "\n", "# (kernel_size_x, kernel_size_y), divisor, offset, kernel", "\n", "#", "\n", "smooth_kernel", "=", "tf", ".", "constant", "(", "[", "[", "1.", ",", "1.", ",", "1.", "]", ",", "[", "1.", ",", "5.", ",", "1.", "]", ",", "[", "1.", ",", "1.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "3", ",", "3", ",", "1", ",", "1", "]", ")", "/", "13.0", "\n", "smoothed_im", "=", "_convolve_image_with_kernel", "(", "image", ",", "smooth_kernel", ")", "\n", "return", "blend", "(", "image", ",", "smoothed_im", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moabarar_qna.augment.augment_ops.rescale": [[643, 660], ["tensorflow.cast", "tensorflow.cast", "tensorflow.image.crop_to_bounding_box", "tensorflow.image.resize", "tensorflow.saturate_cast"], "function", ["None"], ["", "def", "rescale", "(", "image", ",", "level", ")", ":", "\n", "  ", "\"\"\"Rescales image and enlarged cornet.\"\"\"", "\n", "# TODO(kurakin): should we do center crop instead?", "\n", "# TODO(kurakin): add support of other resize methods", "\n", "# See tf.image.ResizeMethod for full list", "\n", "size", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "level", "*", "0.25", "\n", "scale_height", "=", "tf", ".", "cast", "(", "scale", "*", "size", "[", "0", "]", ",", "tf", ".", "int32", ")", "\n", "scale_width", "=", "tf", ".", "cast", "(", "scale", "*", "size", "[", "1", "]", ",", "tf", ".", "int32", ")", "\n", "cropped_image", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "\n", "image", ",", "\n", "offset_height", "=", "scale_height", ",", "\n", "offset_width", "=", "scale_width", ",", "\n", "target_height", "=", "size", "[", "0", "]", "-", "scale_height", ",", "\n", "target_width", "=", "size", "[", "1", "]", "-", "scale_width", ")", "\n", "rescaled", "=", "tf", ".", "image", ".", "resize", "(", "cropped_image", ",", "size", ",", "tf", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", ")", "\n", "return", "tf", ".", "saturate_cast", "(", "rescaled", ",", "tf", ".", "uint8", ")", "\n", "\n"]]}