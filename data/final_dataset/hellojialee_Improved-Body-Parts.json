{"home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed_SWA.AverageMeter.__init__": [[377, 382], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed_SWA.AverageMeter.update": [[383, 388], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed_SWA.train": [[213, 308], ["print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.train", "model.apply", "train_distributed_SWA.adjust_learning_rate_cyclic", "print", "train_distributed_SWA.AverageMeter", "train_distributed_SWA.AverageMeter", "time.time", "enumerate", "train_sampler.set_epoch", "optimizer.zero_grad", "model", "optimizer.step", "os.makedirs", "open", "open.write", "open.flush", "open.close", "model.item", "print", "amp.scale_loss", "scaled_loss.backward", "train_distributed_SWA.AverageMeter.update", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_distributed_SWA.AverageMeter.update", "time.time", "os.path.join", "float", "target_tensor.cuda", "train_distributed_SWA.reduce_tensor", "to_python_float", "images.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_parallel.train", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.adjust_learning_rate_cyclic", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.Reduce.backward", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.reduce_tensor"], ["", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\n ############################# Train phase, Epoch: {} #############################'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "# DistributedSampler \u4e2d\u8bb0\u5f55\u76ee\u524d\u7684 epoch \u6570\uff0c \u56e0\u4e3a\u91c7\u6837\u5668\u662f\u6839\u636e epoch \u6765\u51b3\u5b9a\u5982\u4f55\u6253\u4e71\u5206\u914d\u6570\u636e\u8fdb\u5404\u4e2a\u8fdb\u7a0b", "\n", "\n", "# Freeze the Batch normalization layers", "\n", "# You should use apply instead of searching its children, named_children() doesn\u2019t iteratively search submodules.", "\n", "model", ".", "apply", "(", "set_bn_eval", ")", "# freeze layer recursively.", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "# scheduler.step()  use 'adjust learning rate' instead", "\n", "", "adjust_learning_rate_cyclic", "(", "optimizer", ",", "epoch", ",", "start_epoch", ",", "args", ".", "swa_freq", ")", "# start_epoch", "\n", "print", "(", "'\\nLearning rate at this epoch is: %0.9f\\n'", "%", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "# scheduler.get_lr()[0]", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "target_tuple", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# # ##############  Use schedule step or fun of 'adjust learning rate' #####################", "\n", "# adjust_learning_rate(optimizer, epoch, batch_idx, len(train_loader), use_warmup=True)", "\n", "# print('\\nLearning rate at this epoch is: %0.9f\\n' % optimizer.param_groups[0]['lr'])  # scheduler.get_lr()[0]", "\n", "# # ##########################################################", "\n", "        ", "if", "use_cuda", ":", "# FIXME: \u9700\u8981\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u8f93\u5165\u5230\u7f51\u7edc\u4e2d\u7684\u624d\u884c\uff1f", "\n", "#  \u8fd9\u5141\u8bb8\u5f02\u6b65 GPU \u590d\u5236\u6570\u636e\u4e5f\u5c31\u662f\u8bf4\u8ba1\u7b97\u548c\u6570\u636e\u4f20\u8f93\u53ef\u4ee5\u540c\u65f6\u8fdb.", "\n", "            ", "target_tuple", "=", "[", "target_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "target_tensor", "in", "target_tuple", "]", "\n", "\n", "# target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]", "\n", "", "images", ",", "mask_misses", ",", "heatmaps", "=", "target_tuple", "# , offsets, mask_offsets", "\n", "# images = Variable(images)", "\n", "# loc_targets = Variable(loc_targets)", "\n", "# conf_targets = Variable(conf_targets)", "\n", "optimizer", ".", "zero_grad", "(", ")", "# zero the gradient buff", "\n", "loss", "=", "model", "(", "target_tuple", ")", "# images, target_tuple[1:]", "\n", "\n", "if", "loss", ".", "item", "(", ")", ">", "2e5", ":", "# try to rescue the gradient explosion", "\n", "            ", "print", "(", "\"\\nOh My God ! \\nLoss is abnormal, drop this batch !\"", ")", "\n", "continue", "\n", "\n", "", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "\n", "# torch.nn.utils.clip_grad_norm_(amp.master_params(optimizer), args.max_grad_norm)  # fixme: \u53ef\u80fd\u662f\u8fd9\u4e2a\u7684\u95ee\u9898\u5417\uff1f", "\n", "", "optimizer", ".", "step", "(", ")", "# TODO\uff1a\u53ef\u4ee5\u4f7f\u7528\u7d2f\u52a0\u7684loss\u53d8\u76f8\u589e\u5927batch size\uff0c\u4f46\u5bf9\u4e8ebn\u5c42\u9700\u8981\u51cf\u5c11\u9ed8\u8ba4\u7684momentum", "\n", "\n", "# train_loss += loss.item()  # \u7d2f\u52a0\u7684loss !", "\n", "# \u4f7f\u7528loss += loss.detach()\u6765\u83b7\u53d6\u4e0d\u9700\u8981\u68af\u5ea6\u56de\u4f20\u7684\u90e8\u5206\u3002", "\n", "# \u6216\u8005\u4f7f\u7528loss.item()\u76f4\u63a5\u83b7\u5f97\u6240\u5bf9\u5e94\u7684python\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4ec5\u4ec5\u9650\u4e8eonly one element tensors can be converted to Python scalars", "\n", "if", "batch_idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "# Every print_freq iterations, check the loss, accuracy, and speed.", "\n", "# For best performance, it doesn't make sense to print these metrics every", "\n", "# iteration, since they incur an allreduce and some host<->device syncs.", "\n", "# print \u4f1a\u89e6\u53d1allreduce\uff0c\u800c\u8fd9\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u8d39\u65f6", "\n", "            ", "if", "args", ".", "distributed", ":", "\n", "# We manually reduce and average the metrics across processes. In-place reduce tensor.", "\n", "                ", "reduced_loss", "=", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "reduced_loss", "=", "loss", ".", "data", "\n", "\n", "# to_python_float incurs a host<->device sync", "\n", "", "losses", ".", "update", "(", "to_python_float", "(", "reduced_loss", ")", ",", "images", ".", "size", "(", "0", ")", ")", "# update needs average and number", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "# \u56e0\u4e3a\u6240\u6709GPU\u64cd\u4f5c\u662f\u5f02\u6b65\u7684\uff0c\u5e94\u7b49\u5f85\u5f53\u524d\u8bbe\u5907\u4e0a\u6240\u6709\u6d41\u4e2d\u7684\u6240\u6709\u6838\u5fc3\u5b8c\u6210\uff0c\u6d4b\u8bd5\u7684\u65f6\u95f4\u624d\u6b63\u786e", "\n", "batch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end", ")", "/", "args", ".", "print_freq", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "# Print them in the Process 0", "\n", "                ", "print", "(", "'==================> Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Speed {3:.3f} ({4:.3f})\\t'", "\n", "'Loss {loss.val:.10f} ({loss.avg:.4f}) <================ \\t'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "\n", "args", ".", "world_size", "*", "opt", ".", "batch_size", "/", "batch_time", ".", "val", ",", "\n", "args", ".", "world_size", "*", "opt", ".", "batch_size", "/", "batch_time", ".", "avg", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "", "global", "best_loss", "\n", "# DistributedSampler\u63a7\u5236\u8fdb\u5165\u5206\u5e03\u5f0f\u73af\u5883\u7684\u6570\u636e\u96c6\u4ee5\u786e\u4fdd\u6a21\u578b\u4e0d\u662f\u5bf9\u540c\u4e00\u4e2a\u5b50\u6570\u636e\u96c6\u8bad\u7ec3\uff0c\u4ee5\u8fbe\u5230\u8bad\u7ec3\u76ee\u6807\u3002", "\n", "# train_loss /= (len(train_loader))  # Each GPU process can only see 1/(world_size) training samples per epoch", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "# Write the log file each epoch.", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", "+", "checkpoint_path", ",", "'log'", ")", ",", "'a+'", ")", "\n", "logger", ".", "write", "(", "'\\nEpoch {}\\ttrain_loss: {}'", ".", "format", "(", "epoch", ",", "losses", ".", "avg", ")", ")", "# validation\u65f6\u4e0d\u8981\\n\u6362\u884c", "\n", "logger", ".", "flush", "(", ")", "\n", "logger", ".", "close", "(", ")", "\n", "\n", "if", "losses", ".", "avg", "<", "float", "(", "'inf'", ")", ":", "# < best_loss", "\n", "# Update the best_loss if the average loss drops", "\n", "            ", "best_loss", "=", "losses", ".", "avg", "\n", "\n", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed_SWA.test": [[310, 363], ["print", "model.eval", "train_distributed_SWA.AverageMeter", "train_distributed_SWA.AverageMeter", "time.time", "enumerate", "train_distributed_SWA.AverageMeter.update", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_distributed_SWA.AverageMeter.update", "time.time", "os.makedirs", "open", "open.write", "open.flush", "open.close", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "train_distributed_SWA.reduce_tensor", "to_python_float", "images.size", "print", "os.path.join", "target_tensor.cuda", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.reduce_tensor"], ["", "", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\n ############################# Test phase, Epoch: {} #############################'", ".", "format", "(", "epoch", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "# DistributedSampler \u4e2d\u8bb0\u5f55\u76ee\u524d\u7684 epoch \u6570\uff0c \u56e0\u4e3a\u91c7\u6837\u5668\u662f\u6839\u636e epoch \u6765\u51b3\u5b9a\u5982\u4f55\u6253\u4e71\u5206\u914d\u6570\u636e\u8fdb\u5404\u4e2a\u8fdb\u7a0b", "\n", "# if args.distributed:", "\n", "#     val_sampler.set_epoch(epoch)  # \u9a8c\u8bc1\u96c6\u592a\u5c0f\uff0c\u4e0d\u591f4\u4e2a\u5212\u5206", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "target_tuple", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# images.requires_grad_()", "\n", "# loc_targets.requires_grad_()", "\n", "# conf_targets.requires_grad_()", "\n", "        ", "if", "use_cuda", ":", "\n", "#  \u8fd9\u5141\u8bb8\u5f02\u6b65 GPU \u590d\u5236\u6570\u636e\u4e5f\u5c31\u662f\u8bf4\u8ba1\u7b97\u548c\u6570\u636e\u4f20\u8f93\u53ef\u4ee5\u540c\u65f6\u8fdb.", "\n", "            ", "target_tuple", "=", "[", "target_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "target_tensor", "in", "target_tuple", "]", "\n", "\n", "# target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]", "\n", "", "images", ",", "mask_misses", ",", "heatmaps", "=", "target_tuple", "# , offsets, mask_offsets", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "loss", "=", "model", "(", "target_tuple", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "# We manually reduce and average the metrics across processes. In-place reduce tensor.", "\n", "            ", "reduced_loss", "=", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "reduced_loss", "=", "loss", ".", "data", "\n", "\n", "# to_python_float incurs a host<->device sync", "\n", "", "losses", ".", "update", "(", "to_python_float", "(", "reduced_loss", ")", ",", "images", ".", "size", "(", "0", ")", ")", "# update needs average and number", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "# \u56e0\u4e3a\u6240\u6709GPU\u64cd\u4f5c\u662f\u5f02\u6b65\u7684\uff0c\u5e94\u7b49\u5f85\u5f53\u524d\u8bbe\u5907\u4e0a\u6240\u6709\u6d41\u4e2d\u7684\u6240\u6709\u6838\u5fc3\u5b8c\u6210\uff0c\u6d4b\u8bd5\u7684\u65f6\u95f4\u624d\u6b63\u786e", "\n", "batch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "# Print them in the Process 0", "\n", "            ", "print", "(", "'==================>Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Speed {2:.3f} ({3:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "batch_idx", ",", "len", "(", "val_loader", ")", ",", "\n", "args", ".", "world_size", "*", "opt", ".", "batch_size", "/", "batch_time", ".", "val", ",", "\n", "args", ".", "world_size", "*", "opt", ".", "batch_size", "/", "batch_time", ".", "avg", ",", "\n", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "if", "args", ".", "local_rank", "==", "0", ":", "# Print them in the Process 0", "\n", "# Write the log file each epoch.", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", "+", "checkpoint_path", ",", "'log'", ")", ",", "'a+'", ")", "\n", "logger", ".", "write", "(", "'\\tval_loss: {}'", ".", "format", "(", "losses", ".", "avg", ")", ")", "# validation\u65f6\u4e0d\u8981\\n\u6362\u884c", "\n", "logger", ".", "flush", "(", ")", "\n", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed_SWA.adjust_learning_rate_cyclic": [[365, 372], ["round"], "function", ["None"], ["", "", "def", "adjust_learning_rate_cyclic", "(", "optimizer", ",", "current_epoch", ",", "start_epoch", ",", "swa_freqent", "=", "5", ",", "lr_max", "=", "1e-5", ",", "lr_min", "=", "1e-6", ")", ":", "\n", "    ", "epoch", "=", "current_epoch", "-", "start_epoch", "\n", "\n", "lr", "=", "lr_max", "-", "(", "lr_max", "-", "lr_min", ")", "/", "(", "swa_freqent", "-", "1", ")", "*", "(", "epoch", "-", "epoch", "//", "swa_freqent", "*", "swa_freqent", ")", "\n", "lr", "=", "round", "(", "lr", ",", "8", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed_SWA.reduce_tensor": [[390, 401], ["tensor.clone", "torch.all_reduce"], "function", ["None"], ["", "", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "# Reduces the tensor data across all machines", "\n", "# If we print the tensor, we can get:", "\n", "# tensor(334.4330, device='cuda:1') *********************, here is cuda:  cuda:1", "\n", "# tensor(359.1895, device='cuda:3') *********************, here is cuda:  cuda:3", "\n", "# tensor(263.3543, device='cuda:2') *********************, here is cuda:  cuda:2", "\n", "# tensor(340.1970, device='cuda:0') *********************, here is cuda:  cuda:0", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "# The function operates in-place.", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "rt", "/=", "args", ".", "world_size", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.AverageMeter.__init__": [[66, 71], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.AverageMeter.update": [[72, 77], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.predict": [[83, 167], ["numpy.zeros", "numpy.zeros", "itertools.product", "cv2.resize", "utils.util.padRightDownCorner", "numpy.float32", "input_img[].copy", "numpy.concatenate", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "posenet", "[].cpu().numpy", "output[].transpose", "output[].transpose", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "min", "print", "cv2.getRotationMatrix2D", "cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.warpAffine", "cv2.warpAffine", "torch.from_numpy", "torch.from_numpy", "[].cpu", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.padRightDownCorner"], ["def", "predict", "(", "image", ",", "params", ",", "model", ",", "model_params", ",", "heat_layers", ",", "paf_layers", ",", "input_image_path", ")", ":", "\n", "# print (image.shape)", "\n", "    ", "heatmap_avg", "=", "np", ".", "zeros", "(", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "heat_layers", ")", ")", "\n", "paf_avg", "=", "np", ".", "zeros", "(", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "paf_layers", ")", ")", "\n", "multiplier", "=", "[", "x", "*", "model_params", "[", "'boxsize'", "]", "/", "image", ".", "shape", "[", "0", "]", "for", "x", "in", "params", "[", "'scale_search'", "]", "]", "# \u628a368boxsize\u53bb\u6389,\u6548\u679c\u7a0d\u5fae\u4e0b\u964d\u4e86", "\n", "# multiplier = [1]  # fixme , add this line", "\n", "rotate_angle", "=", "params", "[", "'rotation_search'", "]", "\n", "for", "item", "in", "product", "(", "multiplier", ",", "rotate_angle", ")", ":", "\n", "        ", "scale", ",", "angle", "=", "item", "\n", "# if scale * image.shape[0] > 2300 or scale * image.shape[1] > 3400:", "\n", "#   scale = min(2300 / image.shape[0], 3400 / image.shape[1])", "\n", "if", "scale", "*", "image", ".", "shape", "[", "0", "]", ">", "2600", "or", "scale", "*", "image", ".", "shape", "[", "1", "]", ">", "3800", ":", "# ### \u6211\u4eec\u66f4\u6539\u4e86\u8fd9\u91cc", "\n", "            ", "scale", "=", "min", "(", "2600", "/", "image", ".", "shape", "[", "0", "]", ",", "3800", "/", "image", ".", "shape", "[", "1", "]", ")", "\n", "print", "(", "\"Input image: '{}' is too big, shrink it!\"", ".", "format", "(", "input_image_path", ")", ")", "\n", "\n", "", "imageToTest", "=", "cv2", ".", "resize", "(", "image", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "imageToTest_padded", ",", "pad", "=", "util", ".", "padRightDownCorner", "(", "imageToTest", ",", "model_params", "[", "'max_downsample'", "]", ",", "\n", "model_params", "[", "'padValue'", "]", ")", "\n", "\n", "# ################################# Important!  ###########################################", "\n", "# #############################  We use OpenCV to read image (BGR) all the time #######################", "\n", "# Input Tensor: a batch of images within [0,1], required shape in this project : (1, height, width, channels)", "\n", "input_img", "=", "np", ".", "float32", "(", "imageToTest_padded", "/", "255", ")", "\n", "\n", "# ############################## Rotate the input image #####################3", "\n", "if", "angle", "!=", "0", ":", "\n", "            ", "rotate_matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "input_img", ".", "shape", "[", "0", "]", "/", "2", ",", "input_img", ".", "shape", "[", "1", "]", "/", "2", ")", ",", "angle", ",", "1", ")", "\n", "rotate_matrix_reverse", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "input_img", ".", "shape", "[", "0", "]", "/", "2", ",", "input_img", ".", "shape", "[", "1", "]", "/", "2", ")", ",", "-", "angle", ",", "1", ")", "\n", "input_img", "=", "cv2", ".", "warpAffine", "(", "input_img", ",", "rotate_matrix", ",", "(", "0", ",", "0", ")", ")", "\n", "\n", "# input_img -= np.array(config.img_mean[::-1])  # Notice: OpenCV uses BGR format, reverse the last axises", "\n", "# input_img /= np.array(config.img_std[::-1])", "\n", "# ################################## add flip image ################################", "\n", "", "swap_image", "=", "input_img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "# plt.imshow(swap_image[:, :, [2, 1, 0]])  # Opencv image format: BGR", "\n", "# plt.show()", "\n", "input_img", "=", "np", ".", "concatenate", "(", "(", "input_img", "[", "None", ",", "...", "]", ",", "swap_image", "[", "None", ",", "...", "]", ")", ",", "\n", "axis", "=", "0", ")", "# (2, height, width, channels)", "\n", "input_img", "=", "torch", ".", "from_numpy", "(", "input_img", ")", ".", "cuda", "(", ")", "\n", "# ###################################################################################", "\n", "# output tensor dtype: float 16", "\n", "output_tuple", "=", "posenet", "(", "input_img", ")", "\n", "\n", "output", "=", "output_tuple", "[", "-", "1", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# different scales can be shown", "\n", "\n", "output_blob", "=", "output", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "output_blob0", "=", "output_blob", "[", ":", ",", ":", ",", ":", "config", ".", "paf_layers", "]", "\n", "output_blob1", "=", "output_blob", "[", ":", ",", ":", ",", "config", ".", "paf_layers", ":", "config", ".", "num_layers", "]", "\n", "\n", "output_blob_flip", "=", "output", "[", "1", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "output_blob0_flip", "=", "output_blob_flip", "[", ":", ",", ":", ",", ":", "config", ".", "paf_layers", "]", "# paf layers", "\n", "output_blob1_flip", "=", "output_blob_flip", "[", ":", ",", ":", ",", "config", ".", "paf_layers", ":", "config", ".", "num_layers", "]", "# keypoint layers", "\n", "\n", "# ###################################################################################", "\n", "# ################################## flip ensemble ################################", "\n", "# ###################################################################################", "\n", "output_blob0_avg", "=", "(", "output_blob0", "+", "output_blob0_flip", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "[", ":", ",", ":", ",", "flip_paf_ord", "]", ")", "/", "2", "\n", "output_blob1_avg", "=", "(", "output_blob1", "+", "output_blob1_flip", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "[", ":", ",", ":", ",", "flip_heat_ord", "]", ")", "/", "2", "\n", "\n", "# extract outputs, resize, and remove padding", "\n", "heatmap", "=", "cv2", ".", "resize", "(", "output_blob1_avg", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "model_params", "[", "'stride'", "]", ",", "fy", "=", "model_params", "[", "'stride'", "]", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "if", "angle", "!=", "0", ":", "\n", "            ", "heatmap", "=", "cv2", ".", "warpAffine", "(", "heatmap", ",", "rotate_matrix_reverse", ",", "(", "0", ",", "0", ")", ")", "\n", "\n", "", "heatmap", "=", "heatmap", "[", "pad", "[", "0", "]", ":", "imageToTest_padded", ".", "shape", "[", "0", "]", "-", "pad", "[", "2", "]", ",", "pad", "[", "1", "]", ":", "imageToTest_padded", ".", "shape", "[", "1", "]", "-", "pad", "[", "3", "]", ",", ":", "]", "\n", "heatmap", "=", "cv2", ".", "resize", "(", "heatmap", ",", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "# output_blob0 is PAFs", "\n", "paf", "=", "cv2", ".", "resize", "(", "output_blob0_avg", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "model_params", "[", "'stride'", "]", ",", "fy", "=", "model_params", "[", "'stride'", "]", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "if", "angle", "!=", "0", ":", "\n", "            ", "paf", "=", "cv2", ".", "warpAffine", "(", "paf", ",", "rotate_matrix_reverse", ",", "(", "0", ",", "0", ")", ")", "\n", "\n", "", "paf", "=", "paf", "[", "pad", "[", "0", "]", ":", "imageToTest_padded", ".", "shape", "[", "0", "]", "-", "pad", "[", "2", "]", ",", "pad", "[", "1", "]", ":", "imageToTest_padded", ".", "shape", "[", "1", "]", "-", "pad", "[", "3", "]", ",", ":", "]", "\n", "paf", "=", "cv2", ".", "resize", "(", "paf", ",", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "heatmap_avg", "=", "heatmap_avg", "+", "heatmap", "/", "(", "len", "(", "multiplier", ")", "*", "len", "(", "rotate_angle", ")", ")", "\n", "paf_avg", "=", "paf_avg", "+", "paf", "/", "(", "len", "(", "multiplier", ")", "*", "len", "(", "rotate_angle", ")", ")", "\n", "\n", "# heatmap_avg = np.maximum(heatmap_avg, heatmap)", "\n", "# paf_avg = np.maximum(paf_avg, paf)  # \u5982\u679c\u6362\u6210\u53d6\u6700\u5927\uff0c\u6548\u679c\u4f1a\u53d8\u5dee\uff0c\u6709\u5f88\u591a\u8bef\u68c0", "\n", "\n", "", "return", "heatmap_avg", ",", "paf_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.find_peaks": [[169, 204], ["heatmap_avg.astype.astype", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "utils.util.keypoint_heatmap_nms", "filter_map.cpu().numpy().squeeze().transpose.cpu().numpy().squeeze().transpose", "range", "heatmap_avg[].copy().transpose", "list", "range", "all_peaks.append", "len", "torch.from_numpy", "torch.from_numpy", "filter_map.cpu().numpy().squeeze().transpose.cpu().numpy().squeeze", "zip", "utils.util.refine_centroid", "heatmap_avg[].copy", "len", "range", "filter_map.cpu().numpy().squeeze().transpose.cpu().numpy", "numpy.nonzero", "numpy.nonzero", "len", "filter_map.cpu().numpy().squeeze().transpose.cpu"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.keypoint_heatmap_nms", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.refine_centroid"], ["", "def", "find_peaks", "(", "heatmap_avg", ",", "params", ")", ":", "\n", "    ", "all_peaks", "=", "[", "]", "\n", "peak_counter", "=", "0", "\n", "\n", "heatmap_avg", "=", "heatmap_avg", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "filter_map", "=", "heatmap_avg", "[", ":", ",", ":", ",", ":", "18", "]", ".", "copy", "(", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "[", "None", ",", "...", "]", "\n", "filter_map", "=", "torch", ".", "from_numpy", "(", "filter_map", ")", ".", "cuda", "(", ")", "\n", "\n", "# # #######################   Add Gaussian smooth will be bad #######################", "\n", "# smoothing = util.GaussianSmoothing(18, 5, 3)", "\n", "# filter_map = F.pad(filter_map, (2, 2, 2, 2), mode='reflect')", "\n", "# filter_map = smoothing(filter_map)", "\n", "# # ######################################################################", "\n", "\n", "filter_map", "=", "util", ".", "keypoint_heatmap_nms", "(", "filter_map", ",", "kernel", "=", "3", ",", "thre", "=", "params", "[", "'thre1'", "]", ")", "\n", "filter_map", "=", "filter_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "for", "part", "in", "range", "(", "18", ")", ":", "\n", "        ", "map_ori", "=", "heatmap_avg", "[", ":", ",", ":", ",", "part", "]", "\n", "# heatmap_avg = gaussian_filter(heatmap_avg, sigma=3)  # TODO: fintune the sigma", "\n", "# \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5bf9\u4e00\u4e2a\u50cf\u7d20\u7684\u5468\u56f4\u7684\u50cf\u7d20\u7ed9\u4e88\u66f4\u591a\u7684\u91cd\u89c6\u3002\u56e0\u6b64\uff0c\u53ef\u901a\u8fc7\u5206\u914d\u6743\u91cd\u6765\u91cd\u65b0\u8ba1\u7b97\u8fd9\u4e9b\u5468\u56f4\u70b9\u7684\u503c\u3002", "\n", "# \u8fd9\u53ef\u901a\u8fc7\u9ad8\u65af\u51fd\u6570\uff08\u949f\u5f62\u51fd\u6570\uff0c\u5373\u5587\u53ed\u5f62\u6570\uff09\u7684\u6743\u91cd\u65b9\u6848\u6765\u89e3\u51b3\u3002", "\n", "peaks_binary", "=", "filter_map", "[", ":", ",", ":", ",", "part", "]", "\n", "peaks", "=", "list", "(", "zip", "(", "np", ".", "nonzero", "(", "peaks_binary", ")", "[", "1", "]", ",", "np", ".", "nonzero", "(", "peaks_binary", ")", "[", "0", "]", ")", ")", "# note reverse", "\n", "refined_peaks_with_score", "=", "[", "util", ".", "refine_centroid", "(", "map_ori", ",", "anchor", ",", "params", "[", "'offset_radius'", "]", ")", "for", "anchor", "in", "peaks", "]", "\n", "# peaks_with_score = [x + (map_ori[x[1], x[0]],) for x in refined_peaks]", "\n", "\n", "id", "=", "range", "(", "peak_counter", ",", "peak_counter", "+", "len", "(", "refined_peaks_with_score", ")", ")", "\n", "peaks_with_score_and_id", "=", "[", "refined_peaks_with_score", "[", "i", "]", "+", "(", "id", "[", "i", "]", ",", ")", "for", "i", "in", "range", "(", "len", "(", "id", ")", ")", "]", "\n", "\n", "all_peaks", ".", "append", "(", "peaks_with_score_and_id", ")", "\n", "peak_counter", "+=", "len", "(", "peaks", ")", "\n", "\n", "", "return", "all_peaks", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.find_connections": [[206, 277], ["range", "len", "len", "len", "range", "sorted", "numpy.zeros", "range", "connection_all.append", "special_k.append", "connection_all.append", "range", "len", "numpy.subtract", "math.sqrt", "min", "list", "numpy.array", "numpy.vstack", "int", "zip", "min", "len", "sorted.append", "len", "min", "round", "numpy.linspace", "numpy.linspace", "sum", "len", "len", "range", "numpy.nonzero", "len", "int", "int", "round", "round"], "function", ["None"], ["", "def", "find_connections", "(", "all_peaks", ",", "paf_avg", ",", "image_width", ",", "params", ")", ":", "\n", "    ", "connection_all", "=", "[", "]", "\n", "special_k", "=", "[", "]", "\n", "\n", "# \u6709\u591a\u5c11\u4e2alimb,\u5c31\u6709\u591a\u5c11\u4e2aconnection,\u76f8\u5bf9\u5e94\u5730\u5c31\u6709\u591a\u5c11\u4e2apaf\u6307\u5411", "\n", "for", "k", "in", "range", "(", "len", "(", "limbSeq", ")", ")", ":", "# \u6700\u5916\u5c42\u7684\u5faa\u73af\u662f\u67d0\u4e00\u4e2alimbSeq\uff0c\u56e0\u4e3amapIdx\u4e2a\u6570\u4e0e\u4e4b\u662f\u4e00\u81f4\u5bf9\u5e94\u7684", "\n", "        ", "score_mid", "=", "paf_avg", "[", ":", ",", ":", ",", "k", "]", "# \u67d0\u4e00\u4e2achannel\u4e0alimb\u7684\u54cd\u5e94\u70ed\u56fe, \u5b83\u7684\u957f\u5bbd\u4e0e\u539f\u59cb\u8f93\u5165\u56fe\u7247\u5927\u5c0f\u4e00\u81f4\uff0c\u524d\u9762\u7ecf\u8fc7resize\u4e86", "\n", "# score_mid = gaussian_filter(score_mid, sigma=3)", "\n", "candA", "=", "all_peaks", "[", "limbSeq", "[", "k", "]", "[", "0", "]", "]", "# all_peaks\u662flist,\u6bcf\u4e00\u884c\u4e5f\u662f\u4e00\u4e2alist,\u4fdd\u5b58\u4e86\u68c0\u6d4b\u5230\u7684\u7279\u5b9a\u7684parts(joints)", "\n", "# \u6ce8\u610f\u5177\u4f53\u5904\u7406\u65f6\u6807\u53f7\u4ece0\u8fd8\u662f1\u5f00\u59cb\u3002\u4ece\u6536\u96c6\u7684peaks\u4e2d\u53d6\u51fa\u67d0\u7c7b\u5173\u952e\u70b9\uff08part)\u96c6\u5408", "\n", "candB", "=", "all_peaks", "[", "limbSeq", "[", "k", "]", "[", "1", "]", "]", "\n", "nA", "=", "len", "(", "candA", ")", "\n", "nB", "=", "len", "(", "candB", ")", "\n", "indexA", ",", "indexB", "=", "limbSeq", "[", "k", "]", "\n", "if", "(", "nA", "!=", "0", "and", "nB", "!=", "0", ")", ":", "\n", "            ", "connection_candidate", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nA", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "nB", ")", ":", "\n", "                    ", "vec", "=", "np", ".", "subtract", "(", "candB", "[", "j", "]", "[", ":", "2", "]", ",", "candA", "[", "i", "]", "[", ":", "2", "]", ")", "\n", "norm", "=", "math", ".", "sqrt", "(", "vec", "[", "0", "]", "*", "vec", "[", "0", "]", "+", "vec", "[", "1", "]", "*", "vec", "[", "1", "]", ")", "\n", "mid_num", "=", "min", "(", "int", "(", "round", "(", "norm", "+", "1", ")", ")", ",", "params", "[", "'mid_num'", "]", ")", "\n", "# failure case when 2 body parts overlaps", "\n", "if", "norm", "==", "0", ":", "# \u4e3a\u4e86\u8df3\u8fc7\u51fa\u73b0\u4e0d\u540c\u8282\u70b9\u76f8\u4e92\u8986\u76d6\u51fa\u73b0\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u6709\u8bf4norm\u52a0\u4e00\u4e2a\u63a5\u8fd10\u7684\u9879\u907f\u514d\u5206\u6bcd\u4e3a0,\u8be6\u89c1\uff1a", "\n", "# https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation/issues/54", "\n", "                        ", "continue", "\n", "\n", "", "startend", "=", "list", "(", "zip", "(", "np", ".", "linspace", "(", "candA", "[", "i", "]", "[", "0", "]", ",", "candB", "[", "j", "]", "[", "0", "]", ",", "num", "=", "mid_num", ")", ",", "\n", "np", ".", "linspace", "(", "candA", "[", "i", "]", "[", "1", "]", ",", "candB", "[", "j", "]", "[", "1", "]", ",", "num", "=", "mid_num", ")", ")", ")", "\n", "\n", "limb_response", "=", "np", ".", "array", "(", "[", "score_mid", "[", "int", "(", "round", "(", "startend", "[", "I", "]", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "startend", "[", "I", "]", "[", "0", "]", ")", ")", "]", "for", "I", "in", "range", "(", "len", "(", "startend", ")", ")", "]", ")", "\n", "# limb_response \u662f\u4ee3\u8868\u67d0\u4e00\u4e2alimb\u901a\u9053\u4e0b\u7684heat map\u54cd\u5e94", "\n", "\n", "score_midpts", "=", "limb_response", "\n", "\n", "score_with_dist_prior", "=", "sum", "(", "score_midpts", ")", "/", "len", "(", "score_midpts", ")", "+", "min", "(", "0.5", "*", "image_width", "/", "norm", "-", "1", ",", "0", ")", "\n", "# \u8fd9\u4e00\u9879\u662f\u4e3a\u4e86\u60e9\u7f5a\u8fc7\u957f\u7684connection, \u53ea\u6709\u5f53\u957f\u5ea6\u5927\u4e8e\u56fe\u50cf\u9ad8\u5ea6\u7684\u4e00\u534a\u65f6\u624d\u4f1a\u60e9\u7f5a todo", "\n", "# The term of sum(score_midpts)/len(score_midpts), see the link below.", "\n", "# https://github.com/michalfaber/keras_Realtime_Multi-Person_Pose_Estimation/issues/48", "\n", "\n", "criterion1", "=", "len", "(", "np", ".", "nonzero", "(", "score_midpts", ">", "params", "[", "'thre2'", "]", ")", "[", "0", "]", ")", ">=", "params", "[", "'connect_ration'", "]", "*", "len", "(", "\n", "score_midpts", ")", "# todo\u3000\u6539\u6210\u4e860.8", "\n", "# fixme: tune \u624b\u52a8\u8c03\u6574, 0.7 or 0.8", "\n", "# \u6211\u8ba4\u4e3a\u8fd9\u4e2a\u5224\u522b\u6807\u51c6\u662f\u4fdd\u8bc1paf\u671d\u5411\u7684\u4e00\u81f4\u6027  threshold = param['thre2'] =0.12", "\n", "# CMU\u539f\u59cb\u9879\u76ee\u4e2dparm['thre2'] = 0.05", "\n", "criterion2", "=", "score_with_dist_prior", ">", "0", "\n", "if", "criterion1", "and", "criterion2", ":", "\n", "                        ", "connection_candidate", ".", "append", "(", "[", "i", ",", "j", ",", "score_with_dist_prior", ",", "norm", ",", "\n", "0.5", "*", "score_with_dist_prior", "+", "0.25", "*", "candA", "[", "i", "]", "[", "2", "]", "+", "0.25", "*", "candB", "[", "j", "]", "[", "\n", "2", "]", "]", ")", "\n", "# connection_candidate\u6392\u5e8f\u7684\u4f9d\u636e\u662fdist prior\u6982\u7387\u548c\u4e24\u4e2a\u7aef\u70b9heat map\u9884\u6d4b\u7684\u6982\u7387\u503c", "\n", "# How to undersatand the criterion?", "\n", "\n", "", "", "", "connection_candidate", "=", "sorted", "(", "connection_candidate", ",", "key", "=", "lambda", "x", ":", "x", "[", "4", "]", ",", "reverse", "=", "True", ")", "# todo: sort by what", "\n", "# sorted \u51fd\u6570\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6309\u7167key\u53c2\u6570\u6307\u5b9a\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\uff0crevers=True\u662f\u6309\u7167\u9006\u5e8f\u6392\u5e8f, order: big->small", "\n", "\n", "connection", "=", "np", ".", "zeros", "(", "(", "0", ",", "6", ")", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "connection_candidate", ")", ")", ":", "# \u6839\u636econfidence\u7684\u987a\u5e8f\u9009\u62e9connections", "\n", "                ", "i", ",", "j", ",", "s", ",", "limb_len", "=", "connection_candidate", "[", "c", "]", "[", "0", ":", "4", "]", "\n", "if", "(", "i", "not", "in", "connection", "[", ":", ",", "3", "]", "and", "j", "not", "in", "connection", "[", ":", ",", "4", "]", ")", ":", "\n", "# \u8fdb\u884c\u5224\u65ad\u786e\u4fdd\u4e0d\u4f1a\u51fa\u73b0\u4e24\u4e2a\u7aef\u70b9\u96c6\u5408A,B\u4e2d\uff0c\u51fa\u73b0\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u70b9\u4e0e\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e24\u4e2a\u70b9\u540c\u65f6\u76f8\u8fde", "\n", "                    ", "connection", "=", "np", ".", "vstack", "(", "[", "connection", ",", "[", "candA", "[", "i", "]", "[", "3", "]", ",", "candB", "[", "j", "]", "[", "3", "]", ",", "s", ",", "i", ",", "j", ",", "limb_len", "]", "]", ")", "# \u540e\u9762\u4f1a\u88ab\u4f7f\u7528", "\n", "# candA[i][3], candB[j][3]\u662fpart\u7684id\u7f16\u53f7", "\n", "if", "(", "len", "(", "connection", ")", ">=", "min", "(", "nA", ",", "nB", ")", ")", ":", "# \u4f1a\u51fa\u73b0\u5173\u8282\u70b9\u4e0d\u591f\u8fde\u7684\u60c5\u51b5", "\n", "                        ", "break", "\n", "", "", "", "connection_all", ".", "append", "(", "connection", ")", "\n", "", "else", ":", "\n", "            ", "special_k", ".", "append", "(", "k", ")", "\n", "connection_all", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "", "return", "connection_all", ",", "special_k", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.find_people": [[279, 499], ["numpy.array", "range", "range", "numpy.delete", "numpy.ones", "len", "len", "numpy.array", "range", "deleteIdx.append", "len", "range", "len", "max", "[].astype", "partAs[].astype", "[].astype", "partBs[].astype", "print", "[].astype", "[].astype", "partBs[].astype", "len", "numpy.min", "numpy.min", "min", "max", "numpy.delete", "int", "int", "numpy.concatenate", "max", "max", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "len", "numpy.ones", "sum", "[].astype", "partBs[].astype", "numpy.nonzero", "partBs[].astype", "[].astype", "partBs[].astype", "[].astype", "partBs[].astype", "[].astype", "[].astype"], "function", ["None"], ["", "def", "find_people", "(", "connection_all", ",", "special_k", ",", "all_peaks", ",", "params", ")", ":", "\n", "# last number in each row is the total parts number of that person", "\n", "# the second last number in each row is the score of the overall configuration", "\n", "    ", "subset", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "0", ",", "20", ",", "2", ")", ")", "\n", "candidate", "=", "np", ".", "array", "(", "[", "item", "for", "sublist", "in", "all_peaks", "for", "item", "in", "sublist", "]", ")", "\n", "# candidate.shape = (94, 4). \u5217\u8868\u89e3\u6790\u5f0f\uff0c\u4e24\u5c42\u5faa\u73af\uff0c\u5148\u4eceall peaks\u53d6\uff0c\u518d\u4ecesublist\u4e2d\u53d6\u3002 all peaks\u662f\u4e24\u5c42list", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "limbSeq", ")", ")", ":", "\n", "# ---------------------------------------------------------", "\n", "# \u5916\u5c42\u5faa\u73aflimb  \u5bf9\u5e94\u8bba\u6587\u4e2d\uff0c\u6bcf\u4e00\u4e2alimb\u5c31\u662f\u4e00\u4e2a\u5b50\u96c6\uff0c\u5206limb\u5904\u7406,\u8d2a\u5fc3\u7b56\u7565?", "\n", "# special_K ,\u8868\u793a\u6ca1\u6709\u627e\u5230\u5173\u8282\u70b9\u5bf9\u5339\u914d\u7684\u80a2\u4f53", "\n", "        ", "if", "k", "not", "in", "special_k", ":", "# \u5373\u3000\u6709\u4e0e\u4e4b\u76f8\u8fde\u7684\uff0c\u8fd9\u4e2apaf(limb)\u662f\u5b58\u5728\u7684", "\n", "            ", "partAs", "=", "connection_all", "[", "k", "]", "[", ":", ",", "0", "]", "# limb\u7aef\u70b9part\u7684\u5e8f\u53f7\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u5728candidate\u4e2d\u7684  id\u53f7", "\n", "partBs", "=", "connection_all", "[", "k", "]", "[", ":", ",", "1", "]", "\n", "# connection_all \u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u7c7b\u578b\u7684limb,\u683c\u5f0f: N * [idA, idB, score, i, j]", "\n", "indexA", ",", "indexB", "=", "np", ".", "array", "(", "limbSeq", "[", "k", "]", ")", "# \u6b64\u65f6\u5904\u7406limb k,limbSeq\u7684\u7aef\u70b9parts\uff0c\u662fparts\u7684\u7c7b\u522b\u53f7.", "\n", "#  \u6839\u636elimbSeq\u5217\u8868\u7684\u987a\u5e8f\u4f9d\u6b21\u8003\u5bdf\u67d0\u79cd\u7c7b\u578b\u7684limb\uff0c\u4ece\u4e00\u4e2a\u5173\u8282\u70b9\u5230\u4e0b\u4e00\u4e2a\u5173\u8282\u70b9", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "connection_all", "[", "k", "]", ")", ")", ":", "# \u8be5\u5c42\u5faa\u73af\u662f\u5206\u914dconnection\u3000(partAs[i],partBs[i])\u5230\u67d0\u4e2a\u4eba\u3000subset[]", "\n", "# connection_all[k]\u4fdd\u5b58\u7684\u662f\u7b2ck\u4e2a\u7c7b\u578b\u7684\u6240\u6709limb\u8fde\u63a5\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u4e5f\u53ef\u80fd\u4e00\u4e2a\u6ca1\u6709", "\n", "# ------------------------------------------------", "\n", "# \u6bcf\u4e00\u884c\u7684list\u4fdd\u5b58\u7684\u662f\u4e00\u7c7blimb(connection),\u904d\u5386\u6240\u6709\u6b64\u7c7blimb,\u4e00\u822c\u7684\u6709\u591a\u5c11\u4e2a\u7279\u5b9a\u7684limb\u5c31\u6709\u591a\u5c11\u4e2a\u4eba", "\n", "\n", "                ", "found", "=", "0", "\n", "subset_idx", "=", "[", "-", "1", ",", "-", "1", "]", "# \u6bcf\u6b21\u5faa\u73af\u53ea\u89e3\u51b3\u4e24\u4e2apart\uff0c\u6240\u4ee5\u6807\u8bb0\u53ea\u9700\u8981\u4e24\u4e2aflag", "\n", "for", "j", "in", "range", "(", "len", "(", "subset", ")", ")", ":", "\n", "# ----------------------------------------------", "\n", "# \u8fd9\u4e00\u5c42\u5faa\u73af\u662f\u904d\u5386\u6240\u6709\u7684\u4eba", "\n", "\n", "# 1:size(subset,1), \u82e5subset.shape=(5,20), \u5219len(subset)=5\uff0c\u8868\u793a\u67095\u4e2a\u4eba", "\n", "# subset\u6bcf\u4e00\u884c\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u4eba\u768418\u4e2a\u5173\u952e\u70b9\u548cnumber\u4ee5\u53cascore\u7684\u7ed3\u679c", "\n", "                    ", "if", "subset", "[", "j", "]", "[", "indexA", "]", "[", "0", "]", ".", "astype", "(", "int", ")", "==", "(", "partAs", "[", "i", "]", ")", ".", "astype", "(", "int", ")", "or", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "\n", "int", ")", "==", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ":", "\n", "# \u770b\u770b\u8fd9\u6b21\u8003\u5bdf\u7684limb\u4e24\u4e2a\u7aef\u70b9\u4e4b\u4e00\u662f\u5426\u6709\u4e00\u4e2a\u5df2\u7ecf\u5728\u4e0a\u4e00\u8f6e\u4e2d\u51fa\u73b0\u8fc7\u4e86,\u5373\u662f\u5426\u5df2\u7ecf\u5206\u914d\u7ed9\u67d0\u4eba\u4e86", "\n", "# \u6bcf\u4e00\u4e2a\u6700\u5916\u5c42\u5faa\u73af\u90fd\u53ea\u8003\u8651\u4e00\u4e2alimb\uff0c\u56e0\u6b64\u5904\u7406\u7684\u65f6\u5019\u5c31\u53ea\u4f1a\u6709\u4e24\u79cdpart,\u5373\u8868\u793a\u4e3apartAs,partBs", "\n", "                        ", "if", "found", ">=", "2", ":", "\n", "                            ", "print", "(", "'************ error occurs! 3 joints sharing have been found  *******************'", ")", "\n", "continue", "\n", "", "subset_idx", "[", "found", "]", "=", "j", "# \u6807\u8bb0\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u7aef\u70b9\u5e94\u8be5\u662f\u7b2cj\u4e2a\u4eba\u7684", "\n", "found", "+=", "1", "\n", "\n", "", "", "if", "found", "==", "1", ":", "\n", "                    ", "j", "=", "subset_idx", "[", "0", "]", "\n", "\n", "if", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", "==", "-", "1", "and", "params", "[", "'len_rate'", "]", "*", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", ">", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "# \u5982\u679c\u65b0\u52a0\u5165\u7684limb\u6bd4\u4e4b\u524d\u5df2\u7ecf\u7ec4\u88c5\u7684limb\u957f\u5f88\u591a\uff0c\u4e5f\u820d\u5f03", "\n", "# \u5982\u679c\u8fd9\u4e2a\u4eba\u7684\u5f53\u524d\u70b9\u8fd8\u6ca1\u6709\u88ab\u627e\u5230\u65f6\uff0c\u628a\u8fd9\u4e2a\u70b9\u5206\u914d\u7ed9\u8fd9\u4e2a\u4eba", "\n", "# \u8fd9\u4e00\u4e2a\u5224\u65ad\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u7b2c18\u548c19\u4e2alimb\u5206\u522b\u662f 2->16, 5->17,\u8fd9\u51e0\u4e2a\u70b9\u5df2\u7ecf\u5728\u4e4b\u524d\u7684limb\u4e2d\u68c0\u6d4b\u5230\u4e86\uff0c", "\n", "# \u6240\u4ee5\u5982\u679c\u4e24\u6b21\u7ed3\u679c\u4e00\u81f4\uff0c\u4e0d\u66f4\u6539\u6b64\u65f6\u7684part\u5206\u914d\uff0c\u5426\u5219\u53c8\u5206\u914d\u4e86\u4e00\u6b21\uff0c\u7f16\u53f7\u662f\u8986\u76d6\u4e86\uff0c\u4f46\u662f\u7ee7\u7eed\u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\uff0cpart\u6570\u76ee", "\n", "# \u4f1a\u52a0\uff11\uff0c\u7ed3\u679c\u9020\u6210\u4e00\u4e2a\u4eba\u7684part\u4e4b\u548c>18\u3002\u4e0d\u8fc7\u5982\u679c\u4e24\u4fa7\u9884\u6d4blimb\u7aef\u70b9\u7ed3\u679c\u4e0d\u540c\uff0c\u8fd8\u662f\u4f1a\u51fa\u73b0number of part>18\uff0c\u9020\u6210\u591a\u68c0", "\n", "# FIXME: \u6ca1\u6709\u5229\u7528\u597d\u5197\u4f59\u7684connection\u4fe1\u606f\uff0c\u6700\u540e\u4e24\u4e2alimb\u7684\u7aef\u70b9\u4e0e\u4e4b\u524d\u5faa\u73af\u8fc7\u7a0b\u4e2d\u91cd\u590d\u4e86\uff0c\u4f46\u6ca1\u6709\u5229\u7528\u805a\u5408\uff0c", "\n", "#  \u53ea\u662f\u76f4\u63a5\u8986\u76d6\uff0c\u5176\u5b9e\u76f4\u63a5\u8986\u76d6\u662f\u4e3a\u4e86\u5f25\u8865\u6f0f\u68c0", "\n", "\n", "                        ", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", "=", "partBs", "[", "i", "]", "# partBs[i]\u662flimb\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u7684id\u53f7\u7801", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "# \u4fdd\u5b58\u8fd9\u4e2a\u70b9\u88ab\u7559\u4e0b\u6765\u7684\u7f6e\u4fe1\u5ea6", "\n", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "0", "]", "+=", "1", "\n", "# last number in each row is the total parts number of that person", "\n", "\n", "# # subset[j][-2][1]\u7528\u6765\u8bb0\u5f55\u4e0d\u5305\u62ec\u5f53\u524d\u65b0\u52a0\u5165\u7684\u7c7b\u578b\u8282\u70b9\u65f6\u7684\u603b\u4f53\u521d\u59cb\u7f6e\u4fe1\u5ea6\uff0c\u5f15\u5165\u5b83\u662f\u4e3a\u4e86\u907f\u514d\u4e0b\u6b21\u8fed\u4ee3\u51fa\u73b0\u540c\u7c7b\u578b\u5173\u952e\u70b9\uff0c\u8986\u76d6\u65f6\u91cd\u590d\u76f8\u52a0\u4e86\u7f6e\u4fe1\u5ea6", "\n", "# subset[j][-2][1] = subset[j][-2][0]  # \u56e0\u4e3a\u662f\u4e0d\u5305\u62ec\u6b64\u7c7b\u8282\u70b9\u7684\u521d\u59cb\u503c\uff0c\u6240\u4ee5\u53ea\u4f1a\u8d4b\u503c\u4e00\u6b21 !!", "\n", "\n", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "+=", "candidate", "[", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "=", "max", "(", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ",", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "\n", "# the second last number in each row is the score of the overall configuration", "\n", "\n", "", "elif", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", "!=", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ":", "\n", "                        ", "if", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", ">=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", ":", "\n", "# \u5982\u679c\u8003\u5bdf\u7684\u8fd9\u4e2alimb\u8fde\u63a5\u6ca1\u6709\u5df2\u7ecf\u5b58\u5728\u7684\u53ef\u4fe1\uff0c\u5219\u8df3\u8fc7", "\n", "                            ", "pass", "\n", "\n", "", "else", ":", "\n", "# \u5426\u5219\u7528\u5f53\u524d\u7684limb\u7aef\u70b9\u8986\u76d6\u5df2\u7ecf\u5b58\u5728\u7684\u70b9\uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u524d\uff0c\u51cf\u53bb\u5df2\u5b58\u5728\u5173\u8282\u70b9\u7684\u7f6e\u4fe1\u5ea6\u548c\u8fde\u63a5\u5b83\u7684limb\u7f6e\u4fe1\u5ea6", "\n", "                            ", "if", "params", "[", "'len_rate'", "]", "*", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "<=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "                                ", "continue", "\n", "# \u51cf\u53bb\u4e4b\u524d\u7684\u8282\u70b9\u7f6e\u4fe1\u5ea6\u548climb\u7f6e\u4fe1\u5ea6", "\n", "", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "-=", "candidate", "[", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "\n", "\n", "# \u6dfb\u52a0\u5f53\u524d\u8282\u70b9", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", "=", "partBs", "[", "i", "]", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "# \u4fdd\u5b58\u8fd9\u4e2a\u70b9\u88ab\u7559\u4e0b\u6765\u7684\u7f6e\u4fe1\u5ea6", "\n", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "+=", "candidate", "[", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "\n", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "=", "max", "(", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ",", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "\n", "# overlap the reassigned keypoint with higher score", "\n", "#  \u5982\u679c\u662f\u6dfb\u52a0\u5197\u4f59\u8fde\u63a5\u7684\u91cd\u590d\u7684\u70b9\uff0c\u7528\u65b0\u7684\u66f4\u52a0\u9ad8\u7684\u5197\u4f59\u8fde\u63a5\u6982\u7387\u53d6\u4ee3\u539f\u6765\u8fde\u63a5\u7684\u76f8\u540c\u7684\u5173\u8282\u70b9\u7684\u6982\u7387", "\n", "# -- \u5bf9\u4e0a\u9762\u95ee\u9898\u7684\u56de\u7b54\uff1a \u4f7f\u7528\u524d500\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53d1\u73b0\u52a0\u4e0a\u8fd9\u4e2a\u80fd\u63d0\u9ad80.1%\uff0c\u6ca1\u6709\u4ec0\u4e48\u533a\u522b", "\n", "", "", "elif", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", "==", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", "and", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "<=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", ":", "\n", "# \u5426\u5219\u7528\u5f53\u524d\u7684limb\u7aef\u70b9\u8986\u76d6\u5df2\u7ecf\u5b58\u5728\u7684\u70b9\uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u524d\uff0c\u51cf\u53bb\u5df2\u5b58\u5728\u5173\u8282\u70b9\u7684\u7f6e\u4fe1\u5ea6\u548c\u8fde\u63a5\u5b83\u7684limb\u7f6e\u4fe1\u5ea6", "\n", "\n", "# \u51cf\u53bb\u4e4b\u524d\u7684\u8282\u70b9\u7f6e\u4fe1\u5ea6\u548climb\u7f6e\u4fe1\u5ea6", "\n", "                        ", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "-=", "candidate", "[", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "\n", "\n", "# \u6dfb\u52a0\u5f53\u524d\u8282\u70b9", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", "=", "partBs", "[", "i", "]", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "# \u4fdd\u5b58\u8fd9\u4e2a\u70b9\u88ab\u7559\u4e0b\u6765\u7684\u7f6e\u4fe1\u5ea6", "\n", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "+=", "candidate", "[", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "\n", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "=", "max", "(", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ",", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "\n", "", "", "elif", "found", "==", "2", ":", "# if found 2 and disjoint, merge them (disjoint\uff1a\u4e0d\u76f8\u4ea4)", "\n", "# -----------------------------------------------------", "\n", "# \u5982\u679c\u80a2\u4f53\u7ec4\u6210\u7684\u5173\u8282\u70b9A,B\u5206\u522b\u8fde\u5230\u4e86\u4e24\u4e2a\u4eba\u4f53\uff0c\u5219\u8868\u660e\u8fd9\u4e24\u4e2a\u4eba\u4f53\u5e94\u8be5\u7ec4\u6210\u4e00\u4e2a\u4eba\u4f53\uff0c", "\n", "# \u5219\u5408\u5e76\u4e24\u4e2a\u4eba\u4f53\uff08\u5f53\u80a2\u4f53\u662f\u6309\u987a\u5e8f\u62fc\u63a5\u60c5\u51b5\u4e0b\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u72b6\u51b5\uff09", "\n", "# --------------------------------------------------", "\n", "\n", "# \u8bf4\u660e\u7ec4\u88c5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u65ad\u6389\u7684\u60c5\u51b5\uff08\u6709limb\u6216\u8005\u8bf4connection\u7f3a\u5931\uff09\uff0c\u5728\u4e4b\u524d\u91cd\u590d\u5f00\u8f9f\u4e86\u4e00\u4e2asub person,\u5176\u5b9e\u4ed6\u4eec\u662f\u540c\u4e00\u4e2a\u4eba\u4e0a\u7684", "\n", "# If humans H1 and H2 share a part index with the same coordinates, they are sharing the same part!", "\n", "#  H1 and H2 are, therefore, the same humans. So we merge both sets into H1 and remove H2.", "\n", "# https://arvrjourney.com/human-pose-estimation-using-openpose-with-tensorflow-part-2-e78ab9104fc8", "\n", "# \u8be5\u4ee3\u7801\u4e0e\u94fe\u63a5\u4e2d\u7684\u505a\u6cd5\u6709\u5dee\u5f02\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u94fe\u63a5\u4e2d\u7684\u66f4\u52a0\u5408\u7406\u800c\u4e14\u66f4\u5bb9\u6613\u7406\u89e3", "\n", "                    ", "j1", ",", "j2", "=", "subset_idx", "\n", "\n", "membership1", "=", "(", "(", "subset", "[", "j1", "]", "[", "...", ",", "0", "]", ">=", "0", ")", ".", "astype", "(", "int", ")", ")", "[", ":", "-", "2", "]", "# \u7528[:,0]\u4e5f\u53ef", "\n", "membership2", "=", "(", "(", "subset", "[", "j2", "]", "[", "...", ",", "0", "]", ">=", "0", ")", ".", "astype", "(", "int", ")", ")", "[", ":", "-", "2", "]", "\n", "membership", "=", "membership1", "+", "membership2", "\n", "# [:-2]\u4e0d\u5305\u62ec\u6700\u540e\u4e2a\u6570\u9879\u4e0escores\u9879", "\n", "# \u8fd9\u4e9b\u70b9\u5e94\u8be5\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba,\u5c06\u8fd9\u4e2a\u4eba\u6240\u6709\u7c7b\u578b\u5173\u952e\u70b9\uff08\u7aef\u70b9part)\u4e2a\u6570\u9010\u4e2a\u76f8\u52a0", "\n", "if", "len", "(", "np", ".", "nonzero", "(", "membership", "==", "2", ")", "[", "0", "]", ")", "==", "0", ":", "# if found 2 and disjoint, merge them", "\n", "\n", "                        ", "min_limb1", "=", "np", ".", "min", "(", "subset", "[", "j1", ",", ":", "-", "2", ",", "1", "]", "[", "membership1", "==", "1", "]", ")", "\n", "min_limb2", "=", "np", ".", "min", "(", "subset", "[", "j2", ",", ":", "-", "2", ",", "1", "]", "[", "membership2", "==", "1", "]", ")", "\n", "min_tolerance", "=", "min", "(", "min_limb1", ",", "min_limb2", ")", "# \u8ba1\u7b97\u5141\u8bb8\u8fdb\u884c\u62fc\u63a5\u7684\u6700\u4f4e\u7f6e\u4fe1\u5ea6", "\n", "\n", "if", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "<", "params", "[", "'connection_tole'", "]", "*", "min_tolerance", "or", "params", "[", "'len_rate'", "]", "*", "subset", "[", "j1", "]", "[", "-", "1", "]", "[", "1", "]", "<=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "# \u5982\u679cmerge\u8fd9\u4e24\u4e2a\u8eab\u4f53\u90e8\u5206\u7684\u7f6e\u4fe1\u5ea6\u4e0d\u591f\u5927\uff0c\u6216\u8005\u5f53\u524d\u8fd9\u4e2alimb\u660e\u663e\u5927\u4e8e\u5df2\u5b58\u5728\u7684limb\u7684\u957f\u5ea6\uff0c\u5219\u4e0d\u8fdb\u884c\u8fde\u63a5", "\n", "# todo: finetune the tolerance of connection", "\n", "                            ", "continue", "#", "\n", "\n", "", "subset", "[", "j1", "]", "[", ":", "-", "2", "]", "[", "...", "]", "+=", "(", "subset", "[", "j2", "]", "[", ":", "-", "2", "]", "[", "...", "]", "+", "1", ")", "\n", "# \u5bf9\u4e8e\u6ca1\u6709\u8282\u70b9\u6807\u8bb0\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u4e24\u884csubset\u76f8\u5e94\u4f4d\u7f6e\u5904\u90fd\u662f-1,\u6240\u4ee5\u5408\u5e76\u4e4b\u540e\u6ca1\u6709\u8282\u70b9\u7684\u90e8\u5206\u4f9d\u65e7\u662f-\uff11", "\n", "# \u628a\u4e0d\u76f8\u4ea4\u7684\u4e24\u4e2asubset[j1],[j2]\u4e2d\u7684id\u53f7\u8fdb\u884c\u76f8\u52a0\uff0c\u4ece\u800c\u5b8c\u6210\u5408\u5e76\uff0c\u8fd9\u91cc+1\u662f\u56e0\u4e3a\u9ed8\u8ba4\u6ca1\u6709\u627e\u5230\u5173\u952e\u70b9\u521d\u59cb\u503c\u662f-1", "\n", "\n", "subset", "[", "j1", "]", "[", "-", "2", ":", "]", "[", ":", ",", "0", "]", "+=", "subset", "[", "j2", "]", "[", "-", "2", ":", "]", "[", ":", ",", "0", "]", "# \u4e24\u884csubset\u7684\u70b9\u7684\u4e2a\u6570\u548c\u603b\u7f6e\u4fe1\u5ea6\u76f8\u52a0", "\n", "\n", "subset", "[", "j1", "]", "[", "-", "2", "]", "[", "0", "]", "+=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "subset", "[", "j1", "]", "[", "-", "1", "]", "[", "1", "]", "=", "max", "(", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ",", "subset", "[", "j1", "]", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "# \u6ce8\u610f\uff1a\u3000\u56e0\u4e3a\u662fdisjoint\u7684\u4e24\u884csubset\u70b9\u7684merge\uff0c\u56e0\u6b64\u5148\u524d\u5b58\u5728\u7684\u8282\u70b9\u7684\u7f6e\u4fe1\u5ea6\u4e4b\u524d\u5df2\u7ecf\u88ab\u52a0\u8fc7\u4e86 !! \u8fd9\u91cc\u53ea\u9700\u8981\u518d\u52a0\u5f53\u524d\u8003\u5bdf\u7684limb\u7684\u7f6e\u4fe1\u5ea6", "\n", "subset", "=", "np", ".", "delete", "(", "subset", ",", "j2", ",", "0", ")", "\n", "\n", "", "else", ":", "\n", "# \u51fa\u73b0\u4e86\u4e24\u4e2a\u4eba\u540c\u65f6\u7ade\u4e89\u4e00\u4e2alimb\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u4eba\u4e0d\u662f\u540c\u4e00\u4e2a\u4eba\uff0c\u901a\u8fc7\u6bd4\u8f83\u4e24\u4e2a\u4eba\u5305\u542b\u6b64limb\u7684\u7f6e\u4fe1\u5ea6\u6765\u51b3\u5b9a\uff0c", "\n", "# \u5f53\u524dlimb\u7684\u8282\u70b9\u5e94\u8be5\u5206\u914d\u7ed9\u8c01\uff0c\u540c\u65f6\u628a\u4e4b\u524d\u7684\u90a3\u4e2a\u4e0e\u5f53\u524d\u8282\u70b9\u76f8\u8fde\u7684\u8282\u70b9(\u5373partsA[i])\u4ece\u53e6\u4e00\u4e2a\u4eba(subset)\u7684\u8282\u70b9\u96c6\u5408\u4e2d\u5220\u9664", "\n", "                        ", "if", "connection_all", "[", "k", "]", "[", "i", "]", "[", "0", "]", "in", "subset", "[", "j1", ",", ":", "-", "2", ",", "0", "]", ":", "\n", "                            ", "c1", "=", "np", ".", "where", "(", "subset", "[", "j1", ",", ":", "-", "2", ",", "0", "]", "==", "connection_all", "[", "k", "]", "[", "i", "]", "[", "0", "]", ")", "\n", "c2", "=", "np", ".", "where", "(", "subset", "[", "j2", ",", ":", "-", "2", ",", "0", "]", "==", "connection_all", "[", "k", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "c1", "=", "np", ".", "where", "(", "subset", "[", "j1", ",", ":", "-", "2", ",", "0", "]", "==", "connection_all", "[", "k", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "c2", "=", "np", ".", "where", "(", "subset", "[", "j2", ",", ":", "-", "2", ",", "0", "]", "==", "connection_all", "[", "k", "]", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# c1, c2\u5206\u522b\u662f\u5f53\u524dlimb\u8fde\u63a5\u5230j1\u4eba\u7684\u7b2cc1\u4e2a\u5173\u8282\u70b9\uff0cj2\u4eba\u7684\u7b2cc2\u4e2a\u5173\u8282\u70b9", "\n", "", "c1", "=", "int", "(", "c1", "[", "0", "]", ")", "\n", "c2", "=", "int", "(", "c2", "[", "0", "]", ")", "\n", "assert", "c1", "!=", "c2", ",", "\"an candidate keypoint is used twice, shared by two people\"", "\n", "\n", "# \u5982\u679c\u5f53\u524d\u8003\u5bdf\u7684limb\u7f6e\u4fe1\u5ea6\u6bd4\u5df2\u7ecf\u5b58\u5728\u7684\u4e24\u4e2a\u4eba\u8fde\u63a5\u7684\u7f6e\u4fe1\u5ea6\u5c0f\uff0c\u5219\u8df3\u8fc7\uff0c\u5426\u5219\u5220\u9664\u5df2\u5b58\u5728\u7684\u4e0d\u53ef\u4fe1\u7684\u8fde\u63a5\u8282\u70b9\u3002", "\n", "if", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "<", "subset", "[", "j1", "]", "[", "c1", "]", "[", "1", "]", "and", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "<", "subset", "[", "j2", "]", "[", "c2", "]", "[", "1", "]", ":", "\n", "                            ", "continue", "# the trick here is useful", "\n", "\n", "", "small_j", "=", "j1", "\n", "big_j", "=", "j2", "\n", "remove_c", "=", "c1", "\n", "\n", "if", "subset", "[", "j1", "]", "[", "c1", "]", "[", "1", "]", ">", "subset", "[", "j2", "]", "[", "c2", "]", "[", "1", "]", ":", "\n", "                            ", "small_j", "=", "j2", "\n", "big_j", "=", "j1", "\n", "remove_c", "=", "c2", "\n", "\n", "# \u5220\u9664\u548c\u5f53\u524dlimb\u6709\u8fde\u63a5,\u5e76\u4e14\u7f6e\u4fe1\u5ea6\u4f4e\u7684\u90a3\u4e2a\u4eba\u7684\u8282\u70b9   # FIXME:  \u83b7\u53d6\u4e0d\u5220\u9664\uff1f\u4e3a\u4e86\u68c0\u6d4b\u66f4\u591a\uff1f", "\n", "", "if", "params", "[", "'remove_recon'", "]", ">", "0", ":", "\n", "                            ", "subset", "[", "small_j", "]", "[", "-", "2", "]", "[", "0", "]", "-=", "candidate", "[", "subset", "[", "small_j", "]", "[", "remove_c", "]", "[", "0", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "subset", "[", "small_j", "]", "[", "remove_c", "]", "[", "1", "]", "\n", "subset", "[", "small_j", "]", "[", "remove_c", "]", "[", "0", "]", "=", "-", "1", "\n", "subset", "[", "small_j", "]", "[", "remove_c", "]", "[", "1", "]", "=", "-", "1", "\n", "subset", "[", "small_j", "]", "[", "-", "1", "]", "[", "0", "]", "-=", "1", "\n", "\n", "# if find no partA in the subset, create a new subset", "\n", "# \u5982\u679c\u80a2\u4f53\u7ec4\u6210\u7684\u5173\u8282\u70b9A,B\u6ca1\u6709\u88ab\u8fde\u63a5\u5230\u67d0\u4e2a\u4eba\u4f53\u5219\u7ec4\u6210\u65b0\u7684\u4eba\u4f53", "\n", "# ------------------------------------------------------------------", "\n", "#    1.Sort each possible connection by its score.", "\n", "#    2.The connection with the highest score is indeed a final connection.", "\n", "#    3.Move to next possible connection. If no parts of this connection have", "\n", "#    been assigned to a final connection before, this is a final connection.", "\n", "#    \u7b2c\u4e09\u70b9\u662f\u8bf4\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u53ef\u80fd\u7684\u8fde\u63a5\u6ca1\u6709\u4e0e\u4e4b\u524d\u7684\u8fde\u63a5\u6709\u5171\u4eab\u7aef\u70b9\u7684\u8bdd\uff0c\u4f1a\u88ab\u89c6\u4e3a\u6700\u7ec8\u7684\u8fde\u63a5\uff0c\u52a0\u5165row", "\n", "#    4.Repeat the step 3 until we are done.", "\n", "# \u8bf4\u660e\u89c1\uff1a\u3000https://arvrjourney.com/human-pose-estimation-using-openpose-with-tensorflow-part-2-e78ab9104fc8", "\n", "\n", "", "", "", "elif", "not", "found", "and", "k", "<", "len", "(", "limbSeq", ")", ":", "\n", "# Fixme: \u68c0\u67e5\u662f\u5426\u6b63\u786e", "\n", "#  \u539f\u59cb\u7684\u65f6\u5019\u662f18,\u56e0\u4e3a\u6211\u52a0\u4e86limb\uff0c\u6240\u4ee5\u662f24,\u56e0\u4e3a\u771f\u6b63\u7684limb\u662f0~16\uff0c\u6700\u540e\u4e24\u4e2a17,18\u662f\u989d\u5916\u7684\u4e0d\u662flimb", "\n", "# FIXME: \u4f46\u662f\u540e\u9762\u753blimb\u7684\u65f6\u5019\u6ca1\u6709\u628a\u9f3b\u5b50\u548c\u773c\u775b\u8033\u6735\u7684\u8fde\u7ebf\u753b\u4e0a\uff0c\u8981\u6539\u8fdb", "\n", "                    ", "row", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "20", ",", "2", ")", ")", "\n", "row", "[", "indexA", "]", "[", "0", "]", "=", "partAs", "[", "i", "]", "\n", "row", "[", "indexA", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "row", "[", "indexB", "]", "[", "0", "]", "=", "partBs", "[", "i", "]", "\n", "row", "[", "indexB", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "row", "[", "-", "1", "]", "[", "0", "]", "=", "2", "\n", "row", "[", "-", "1", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", "# \u8fd9\u4e00\u4f4d\u7528\u6765\u8bb0\u5f55\u4e0a\u8f6e\u8fde\u63a5limb\u65f6\u7684\u957f\u5ea6\uff0c\u7528\u6765\u4f5c\u4e3a\u4e0b\u4e00\u8f6e\u8fde\u63a5\u7684\u5148\u9a8c\u77e5\u8bc6", "\n", "row", "[", "-", "2", "]", "[", "0", "]", "=", "sum", "(", "candidate", "[", "connection_all", "[", "k", "]", "[", "i", ",", ":", "2", "]", ".", "astype", "(", "int", ")", ",", "2", "]", ")", "+", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "# \u4e24\u4e2a\u7aef\u70b9\u7684\u7f6e\u4fe1\u5ea6+limb\u8fde\u63a5\u7684\u7f6e\u4fe1\u5ea6", "\n", "# print('create a new subset:  ', row, '\\t')", "\n", "row", "=", "row", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "# \u4e3a\u4e86\u8fdb\u884cconcatenate\uff0c\u9700\u8981\u63d2\u5165\u4e00\u4e2a\u8f74", "\n", "subset", "=", "np", ".", "concatenate", "(", "(", "subset", ",", "row", ")", ",", "axis", "=", "0", ")", "\n", "# todo: solve the unmathced keypoint? \u5c06\u6ca1\u6709\u88ab\u5206\u914d\u5230\u4e00\u4e9b\u4eba\u8eab\u4e0a\u7684\u70b9\u5206\u914d\u7ed9\u8ddd\u79bb\u5b83\u4eec\u8fd1\uff0c\u5e76\u4e14\u7f3a\u5c11\u6b64\u7c7b\u8282\u70b9\u7684\u4eba\u8eab\u4e0a\uff1f\u6216\u8bb8\u8fd9\u6837\u505a\u574f\u5904\u66f4\u591a", "\n", "# delete some rows of subset which has few parts occur", "\n", "", "", "", "", "deleteIdx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "subset", ")", ")", ":", "\n", "        ", "if", "subset", "[", "i", "]", "[", "-", "1", "]", "[", "0", "]", "<", "2", "or", "subset", "[", "i", "]", "[", "-", "2", "]", "[", "0", "]", "/", "subset", "[", "i", "]", "[", "-", "1", "]", "[", "\n", "0", "]", "<", "0.45", ":", "# subset[i][-1][0] < 4 or  FIXME: \u4e00\u4e9b\u9884\u77e5\u9700\u8981\u8c03\u6574\uff0c\u5e76\u4e14coco\u66f4\u4fa7\u91cd\u68c0\u6d4b\u5230\u800c\u4e0d\u662f\u865a\u8b66", "\n", "            ", "deleteIdx", ".", "append", "(", "i", ")", "\n", "", "", "subset", "=", "np", ".", "delete", "(", "subset", ",", "deleteIdx", ",", "axis", "=", "0", ")", "\n", "\n", "return", "subset", ",", "candidate", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.process": [[501, 544], ["cv2.imread", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "evaluate.predict", "time.time", "evaluate.find_peaks", "evaluate.find_connections", "evaluate.find_people", "batch_time.update", "print", "dt_gt_mapping.items", "keypoints.append", "time.time", "person_keypoint_coordinates.append", "index.astype"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.predict", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.find_peaks", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.find_connections", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.find_people", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update"], ["", "def", "process", "(", "input_image_path", ",", "params", ",", "model", ",", "model_params", ",", "heat_layers", ",", "paf_layers", ")", ":", "\n", "    ", "oriImg", "=", "cv2", ".", "imread", "(", "input_image_path", ")", "# B,G,R order !!", "\n", "# print(input_image)", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "heatmap", ",", "paf", "=", "predict", "(", "oriImg", ",", "params", ",", "model", ",", "model_params", ",", "heat_layers", ",", "paf_layers", ",", "input_image_path", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "# ############# Evaluating the keypoint assignment algorithm ######", "\n", "\n", "all_peaks", "=", "find_peaks", "(", "heatmap", ",", "params", ")", "\n", "connection_all", ",", "special_k", "=", "find_connections", "(", "all_peaks", ",", "paf", ",", "oriImg", ".", "shape", "[", "0", "]", ",", "params", ")", "\n", "subset", ",", "candidate", "=", "find_people", "(", "connection_all", ",", "special_k", ",", "all_peaks", ",", "params", ")", "\n", "\n", "batch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end", ")", ")", "\n", "if", "show_eval_speed", ":", "\n", "        ", "print", "(", "'==================>Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Speed {2:.3f} ({3:.3f})\\t'", ".", "format", "(", "\n", "1", ",", "1", ",", "\n", "1", "/", "batch_time", ".", "val", ",", "\n", "1", "/", "batch_time", ".", "avg", ",", "\n", "batch_time", "=", "batch_time", ")", ")", "\n", "\n", "", "keypoints", "=", "[", "]", "\n", "for", "s", "in", "subset", "[", "...", ",", "0", "]", ":", "\n", "        ", "keypoint_indexes", "=", "s", "[", ":", "18", "]", "\n", "person_keypoint_coordinates", "=", "[", "]", "\n", "for", "index", "in", "keypoint_indexes", ":", "\n", "            ", "if", "index", "==", "-", "1", ":", "\n", "# \"No candidate for keypoint\" # \u6807\u5fd7\u4e3a-1\u7684part\u662f\u6ca1\u6709\u68c0\u6d4b\u5230\u7684", "\n", "                ", "X", ",", "Y", "=", "0", ",", "0", "\n", "", "else", ":", "\n", "                ", "X", ",", "Y", "=", "candidate", "[", "index", ".", "astype", "(", "int", ")", "]", "[", ":", "2", "]", "\n", "", "person_keypoint_coordinates", ".", "append", "(", "(", "X", ",", "Y", ")", ")", "\n", "", "person_keypoint_coordinates_coco", "=", "[", "None", "]", "*", "17", "\n", "\n", "for", "dt_index", ",", "gt_index", "in", "dt_gt_mapping", ".", "items", "(", ")", ":", "\n", "            ", "if", "gt_index", "is", "None", ":", "\n", "                ", "continue", "\n", "", "person_keypoint_coordinates_coco", "[", "gt_index", "]", "=", "person_keypoint_coordinates", "[", "dt_index", "]", "\n", "\n", "", "keypoints", ".", "append", "(", "(", "person_keypoint_coordinates_coco", ",", "1", "-", "1.0", "/", "s", "[", "18", "]", ")", ")", "\n", "# s[18] is the score, s[19] is the number of keypoint", "\n", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.get_image_name": [[546, 548], ["None"], "function", ["None"], ["", "def", "get_image_name", "(", "coco", ",", "image_id", ")", ":", "\n", "    ", "return", "coco", ".", "imgs", "[", "image_id", "]", "[", "'file_name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.predict_many": [[550, 561], ["tqdm.tqdm", "set().difference", "evaluate.get_image_name", "os.path.join", "evaluate.process", "set", "dict", "dict", "set", "coco.getImgIds"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.get_image_name", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.process"], ["", "def", "predict_many", "(", "coco", ",", "images_directory", ",", "validation_ids", ",", "params", ",", "model", ",", "model_params", ",", "heat_layers", ",", "paf_layers", ")", ":", "\n", "    ", "assert", "(", "not", "set", "(", "validation_ids", ")", ".", "difference", "(", "set", "(", "coco", ".", "getImgIds", "(", ")", ")", ")", ")", "\n", "\n", "keypoints", "=", "{", "}", "\n", "\n", "for", "image_id", "in", "tqdm", ".", "tqdm", "(", "validation_ids", ")", ":", "\n", "        ", "image_name", "=", "get_image_name", "(", "coco", ",", "image_id", ")", "\n", "image_name", "=", "os", ".", "path", ".", "join", "(", "images_directory", ",", "image_name", ")", "\n", "keypoints", "[", "image_id", "]", "=", "process", "(", "image_name", ",", "dict", "(", "params", ")", ",", "model", ",", "dict", "(", "model_params", ")", ",", "heat_layers", "+", "2", ",", "paf_layers", ")", "\n", "# fixme: heat_layers + 1 if you use background keypoint  !!!", "\n", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.format_results": [[563, 583], ["keypoints.items", "json.dump", "open", "format_keypoints.append", "format_keypoint_list.append"], "function", ["None"], ["", "def", "format_results", "(", "keypoints", ",", "resFile", ")", ":", "\n", "    ", "format_keypoints", "=", "[", "]", "\n", "# Question: do we need to sort the detections by scores before evaluation ?", "\n", "# -- I think we do not have. COCO will select the top 20 automatically", "\n", "for", "image_id", ",", "people", "in", "keypoints", ".", "items", "(", ")", ":", "\n", "        ", "for", "keypoint_list", ",", "score", "in", "people", ":", "\n", "            ", "format_keypoint_list", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "keypoint_list", ":", "\n", "                ", "for", "v", "in", "[", "x", ",", "y", ",", "1", "if", "x", ">", "0", "or", "y", ">", "0", "else", "0", "]", ":", "# int(x), int(y)", "\n", "# \u5750\u6807\u53d6\u4e86\u6574\u6570,\u4e3a\u4e86\u51cf\u5c11\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u5982\u679cx,y\u6709\u4e00\u4e2a\u6709\u503c\uff0c\u90a3\u4e48\u6807\u8bb0\u8fd9\u4e2a\u70b9\u4e3a\u53ef\u89c1\u3002\u3000\u5982\u679cx or y =0,\u4ee4v=0,coco\u53ea\u8bc4\u6d4bv>0\u7684\u70b9", "\n", "                    ", "format_keypoint_list", ".", "append", "(", "v", ")", "\n", "\n", "", "", "format_keypoints", ".", "append", "(", "{", "\n", "\"image_id\"", ":", "image_id", ",", "\n", "\"category_id\"", ":", "1", ",", "\n", "\"keypoints\"", ":", "format_keypoint_list", ",", "\n", "\"score\"", ":", "score", ",", "\n", "}", ")", "\n", "\n", "", "", "json", ".", "dump", "(", "format_keypoints", ",", "open", "(", "resFile", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.validation": [[585, 623], ["print", "pycocotools.coco.COCO", "print", "os.makedirs", "evaluate.predict_many", "evaluate.format_results", "pycocotools.coco.COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "os.path.dirname", "os.path.join", "pycocotools.coco.COCO.getImgIds"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.predict_many", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.evaluate.format_results"], ["", "def", "validation", "(", "model", ",", "dump_name", ",", "validation_ids", "=", "None", ",", "dataset", "=", "'val2017'", ")", ":", "\n", "    ", "annType", "=", "'keypoints'", "\n", "prefix", "=", "'person_keypoints'", "\n", "\n", "dataDir", "=", "'data/dataset/coco/link2coco2017'", "\n", "\n", "# # # #############################################################################", "\n", "# For evaluation on validation set", "\n", "annFile", "=", "'%s/annotations/%s_%s.json'", "%", "(", "dataDir", ",", "prefix", ",", "dataset", ")", "\n", "print", "(", "annFile", ")", "\n", "cocoGt", "=", "COCO", "(", "annFile", ")", "\n", "\n", "if", "validation_ids", "==", "None", ":", "# todo: we can set the validataion image ids here  !!!!!!", "\n", "        ", "validation_ids", "=", "cocoGt", ".", "getImgIds", "(", ")", "[", ":", "500", "]", "# [:1000] we can change the range of COCO validation images here", "\n", "# # #############################################################################", "\n", "\n", "# #############################################################################", "\n", "# For evaluation on test-dev set", "\n", "# annFile = 'data/dataset/coco/link2coco2017/annotations_trainval_info/image_info_test-dev2017.json' # image_info_test2017.json", "\n", "# cocoGt = COCO(annFile)", "\n", "# validation_ids = cocoGt.getImgIds()", "\n", "# #############################################################################", "\n", "\n", "", "resFile", "=", "'%s/results/%s_%s_%s100_results.json'", "\n", "resFile", "=", "resFile", "%", "(", "dataDir", ",", "prefix", ",", "dataset", ",", "dump_name", ")", "\n", "print", "(", "'the path of detected keypoint file is: '", ",", "resFile", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "resFile", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "keypoints", "=", "predict_many", "(", "cocoGt", ",", "os", ".", "path", ".", "join", "(", "dataDir", ",", "dataset", ")", ",", "validation_ids", ",", "params", ",", "model", ",", "model_params", ",", "\n", "config", ".", "heat_layers", ",", "config", ".", "paf_layers", ")", "\n", "format_results", "(", "keypoints", ",", "resFile", ")", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "resFile", ")", "\n", "cocoEval", "=", "COCOeval", "(", "cocoGt", ",", "cocoDt", ",", "annType", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "validation_ids", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "return", "cocoEval", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.test_inference_speed.AverageMeter.__init__": [[55, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.test_inference_speed.AverageMeter.update": [[61, 66], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train.train": [[110, 163], ["print", "posenet.train", "scheduler.step", "print", "enumerate", "len", "optimizer.zero_grad", "posenet", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "print", "print", "os.makedirs", "torch.save", "torch.save", "torch.save", "criterion.item", "print", "len", "posenet.module.state_dict", "optimizer.state_dict", "target_tensor.cuda", "criterion.item", "str"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_parallel.train", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.Reduce.backward"], ["", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\n ############################# Train phase, Epoch: {} #############################'", ".", "format", "(", "epoch", ")", ")", "\n", "posenet", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "scheduler", ".", "step", "(", ")", "\n", "print", "(", "'\\nLearning rate at this epoch is: '", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "'\\n'", ")", "\n", "\n", "for", "batch_idx", ",", "target_tuple", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# images.requires_grad_()", "\n", "# loc_targets.requires_grad_()", "\n", "# conf_targets.requires_grad_()", "\n", "        ", "if", "use_cuda", ":", "\n", "            ", "target_tuple", "=", "[", "target_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "target_tensor", "in", "target_tuple", "]", "\n", "\n", "# target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]", "\n", "", "images", ",", "mask_misses", ",", "heatmaps", "=", "target_tuple", "# , offsets, mask_offsets", "\n", "# images = Variable(images)", "\n", "# loc_targets = Variable(loc_targets)", "\n", "# conf_targets = Variable(conf_targets)", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# zero the gradient buff", "\n", "\n", "output_tuple", "=", "posenet", "(", "images", ")", "\n", "# print(loc_preds.requires_grad)", "\n", "# print(conf_preds.requires_grad)", "\n", "loss", "=", "criterion", "(", "output_tuple", ",", "target_tuple", "[", "1", ":", "]", ")", "\n", "if", "loss", ".", "item", "(", ")", ">", "1e6", ":", "\n", "            ", "print", "(", "\"Loss is abnormal, drop this batch !\"", ")", "\n", "continue", "\n", "# print(loss.requires_grad)", "\n", "", "loss", ".", "backward", "(", ")", "# retain_graph=True", "\n", "optimizer", ".", "step", "(", ")", "# TODO\uff1a\u53ef\u4ee5\u4f7f\u7528\u7d2f\u52a0\u7684loss\u53d8\u76f8\u589e\u5927batch size\uff0c\u4f46\u5bf9\u4e8ebn\u5c42\u9700\u8981\u51cf\u5c11\u9ed8\u8ba4\u7684momentum", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "# \u7d2f\u52a0\u7684loss\u3000\u3000\u3000", "\n", "# \u4f7f\u7528loss += loss.detach()\u6765\u83b7\u53d6\u4e0d\u9700\u8981\u68af\u5ea6\u56de\u4f20\u7684\u90e8\u5206\u3002", "\n", "# \u6216\u8005\u4f7f\u7528loss.item()\u76f4\u63a5\u83b7\u5f97\u6240\u5bf9\u5e94\u7684python\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4ec5\u4ec5\u9650\u4e8eonly one element tensors can be converted to Python scalars", "\n", "print", "(", "'########################### Epoch:'", ",", "epoch", ",", "', --  batch:'", ",", "batch_idx", ",", "'/'", ",", "len", "(", "train_loader", ")", ",", "',   '", ",", "\n", "'Train loss: %.3f, accumulated average loss: %.3f ##############################'", "%", "(", "loss", ".", "item", "(", ")", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ")", ")", "\n", "\n", "", "global", "best_loss", "\n", "train_loss", "/=", "len", "(", "train_loader", ")", "\n", "if", "train_loss", "<", "best_loss", ":", "\n", "        ", "print", "(", "'saving...'", ")", "\n", "state", "=", "{", "\n", "# not posenet.state_dict(). then, we don't ge the \"module\" string to begin with", "\n", "'weights'", ":", "posenet", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_weight'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'train_loss'", ":", "train_loss", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "os", ".", "makedirs", "(", "'checkpoints'", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "state", ",", "'./checkpoints/PoseNet_'", "+", "str", "(", "epoch", ")", "+", "'_epoch.pth'", ")", "\n", "best_loss", "=", "train_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train.test": [[165, 200], ["print", "posenet.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "posenet", "criterion", "criterion.item", "print", "[].cpu().numpy", "output[].transpose", "cv2.resize", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show", "target_tensor.cuda", "v.cpu().numpy", "criterion.item", "[].cpu", "v.cpu"], "function", ["None"], ["", "", "def", "test", "(", "epoch", ",", "show_image", "=", "False", ")", ":", "\n", "    ", "print", "(", "'\\nTest phase, Epoch: {}'", ".", "format", "(", "epoch", ")", ")", "\n", "posenet", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# will save gpu memory and speed up", "\n", "        ", "test_loss", "=", "0", "\n", "for", "batch_idx", ",", "target_tuple", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# images.requires_grad_()", "\n", "# loc_targets.requires_grad_()", "\n", "# conf_targets.requires_grad_()", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "target_tuple", "=", "[", "target_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "target_tensor", "in", "target_tuple", "]", "\n", "\n", "# target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]", "\n", "", "images", ",", "mask_misses", ",", "heatmaps", ",", "offsets", ",", "mask_offsets", "=", "target_tuple", "\n", "# images = Variable(images)", "\n", "# loc_targets = Variable(loc_targets)", "\n", "# conf_targets = Variable(conf_targets)", "\n", "\n", "output_tuple", "=", "posenet", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output_tuple", ",", "target_tuple", "[", "1", ":", "]", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "# \u7d2f\u52a0\u7684loss", "\n", "print", "(", "'  Test loss : %.3f, accumulated average loss: %.3f'", "%", "(", "loss", ".", "item", "(", ")", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ")", ")", "\n", "\n", "# ############### For Debug   ##########", "\n", "if", "show_image", ":", "\n", "                ", "image", ",", "mask_miss", ",", "labels", ",", "offsets", ",", "mask_offset", "=", "[", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "v", "in", "target_tuple", "]", "\n", "output", "=", "output_tuple", "[", "-", "1", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# show the generated ground truth", "\n", "img", "=", "image", "[", "0", "]", "\n", "output", "=", "output", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "output", ".", "shape", "[", ":", "2", "]", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "plt", ".", "imshow", "(", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ")", "# Opencv image format: BGR", "\n", "plt", ".", "imshow", "(", "output", "[", ":", ",", ":", ",", "28", "]", ",", "alpha", "=", "0.5", ")", "# mask_all", "\n", "# plt.imshow(mask_offset[:, :, 2], alpha=0.5)  # mask_all", "\n", "plt", ".", "show", "(", ")", "\n", "#  #######################################", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.demo_image.show_color_vector": [[64, 102], ["numpy.zeros_like", "cv2.cartToPolar", "cv2.normalize", "cv2.cvtColor", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["def", "show_color_vector", "(", "oriImg", ",", "paf_avg", ",", "heatmap_avg", ")", ":", "\n", "    ", "hsv", "=", "np", ".", "zeros_like", "(", "oriImg", ")", "\n", "hsv", "[", "...", ",", "1", "]", "=", "255", "\n", "\n", "mag", ",", "ang", "=", "cv2", ".", "cartToPolar", "(", "paf_avg", "[", ":", ",", ":", ",", "16", "]", ",", "1.5", "*", "paf_avg", "[", ":", ",", ":", ",", "16", "]", ")", "# \u8bbe\u7f6e\u4e0d\u540c\u7684\u7cfb\u6570\uff0c\u53ef\u4ee5\u4f7f\u5f97\u663e\u793a\u989c\u8272\u4e0d\u540c", "\n", "\n", "# \u5c06\u5f27\u5ea6\u8f6c\u6362\u4e3a\u89d2\u5ea6\uff0c\u540c\u65f6OpenCV\u4e2d\u7684H\u8303\u56f4\u662f180(0 - 179)\uff0c\u6240\u4ee5\u518d\u9664\u4ee52", "\n", "# \u5b8c\u6210\u540e\u5c06\u7ed3\u679c\u8d4b\u7ed9HSV\u7684H\u901a\u9053\uff0c\u4e0d\u540c\u7684\u89d2\u5ea6(\u65b9\u5411)\u4ee5\u4e0d\u540c\u989c\u8272\u8868\u793a", "\n", "# \u5bf9\u4e8e\u4e0d\u540c\u65b9\u5411\uff0c\u4ea7\u751f\u4e0d\u540c\u8272\u8c03", "\n", "# hsv[...,0]\u7b49\u4ef7\u4e8ehsv[:,:,0]", "\n", "hsv", "[", "...", ",", "0", "]", "=", "ang", "*", "180", "/", "np", ".", "pi", "/", "2", "\n", "\n", "# \u5c06\u77e2\u91cf\u5927\u5c0f\u6807\u51c6\u5316\u52300-255\u8303\u56f4\u3002\u56e0\u4e3aOpenCV\u4e2dV\u5206\u91cf\u5bf9\u5e94\u7684\u53d6\u503c\u8303\u56f4\u662f256", "\n", "# \u5bf9\u4e8e\u540c\u4e00H\u3001S\u800c\u8a00\uff0c\u5411\u91cf\u7684\u5927\u5c0f\u8d8a\u5927\uff0c\u5bf9\u5e94\u989c\u8272\u8d8a\u4eae", "\n", "hsv", "[", "...", ",", "2", "]", "=", "cv2", ".", "normalize", "(", "mag", ",", "None", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ")", "\n", "# \u6700\u540e\uff0c\u5c06\u751f\u6210\u597d\u7684HSV\u56fe\u50cf\u8f6c\u6362\u4e3aBGR\u989c\u8272\u7a7a\u95f4", "\n", "limb_flow", "=", "cv2", ".", "cvtColor", "(", "hsv", ",", "cv2", ".", "COLOR_HSV2RGB", ")", "\n", "\n", "plt", ".", "imshow", "(", "oriImg", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ")", "\n", "plt", ".", "imshow", "(", "limb_flow", ",", "alpha", "=", ".5", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "imshow", "(", "oriImg", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ")", "\n", "plt", ".", "imshow", "(", "paf_avg", "[", ":", ",", ":", ",", "11", "]", ",", "alpha", "=", ".6", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "imshow", "(", "heatmap_avg", "[", ":", ",", ":", ",", "-", "1", "]", ")", "\n", "plt", ".", "imshow", "(", "oriImg", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ",", "alpha", "=", "0.25", ")", "# show a keypoint", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "imshow", "(", "heatmap_avg", "[", ":", ",", ":", ",", "-", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "oriImg", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ",", "alpha", "=", "0.5", ")", "# show the person mask", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "imshow", "(", "oriImg", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ")", "# show a keypoint", "\n", "plt", ".", "imshow", "(", "heatmap_avg", "[", ":", ",", ":", ",", "4", "]", ",", "alpha", "=", ".5", ")", "\n", "plt", ".", "show", "(", ")", "\n", "t", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.demo_image.process": [[104, 597], ["cv2.imread", "numpy.zeros", "numpy.zeros", "range", "demo_image.show_color_vector", "heatmap_avg.astype.astype", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "utils.util.keypoint_heatmap_nms", "filter_map.cpu().numpy().squeeze().transpose.cpu().numpy().squeeze().transpose", "range", "range", "numpy.array", "range", "range", "numpy.delete", "cv2.imread", "range", "len", "cv2.resize", "utils.util.padRightDownCorner", "numpy.float32", "input_img[].copy", "numpy.concatenate", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "posenet", "[].cpu().numpy", "output[].transpose", "output[].transpose", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "heatmap_avg[].copy().transpose", "list", "range", "all_peaks.append", "len", "len", "len", "len", "numpy.ones", "len", "len", "dt_gt_mapping.items", "keypoints.append", "len", "print", "range", "min", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "filter_map.cpu().numpy().squeeze().transpose.cpu().numpy().squeeze", "zip", "utils.util.refine_centroid", "range", "sorted", "numpy.zeros", "range", "connection_all.append", "special_k.append", "connection_all.append", "numpy.array", "range", "deleteIdx.append", "person_keypoint_coordinates.append", "len", "cv2.addWeighted.copy", "numpy.mean", "numpy.mean", "math.degrees", "cv2.ellipse2Poly", "cv2.circle", "cv2.circle", "cv2.fillConvexPoly", "cv2.addWeighted", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "[].cpu", "len", "len", "numpy.isnan", "numpy.isnan", "heatmap_avg[].copy", "len", "range", "range", "len", "len", "range", "math.atan2", "int", "filter_map.cpu().numpy().squeeze().transpose.cpu().numpy", "numpy.nonzero", "numpy.nonzero", "len", "numpy.subtract", "math.sqrt", "min", "list", "numpy.array", "numpy.vstack", "len", "int", "int", "int", "int", "int", "int", "int", "int", "zip", "min", "len", "sorted.append", "len", "min", "max", "numpy.array", "index.astype", "index.astype", "filter_map.cpu().numpy().squeeze().transpose.cpu", "round", "numpy.linspace", "numpy.linspace", "sum", "len", "len", "[].astype", "partAs[].astype", "[].astype", "partBs[].astype", "[].astype", "[].astype", "partBs[].astype", "len", "numpy.min", "numpy.min", "min", "max", "numpy.delete", "int", "int", "numpy.concatenate", "index.astype", "range", "numpy.nonzero", "max", "max", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "len", "numpy.ones", "sum", "len", "[].astype", "partBs[].astype", "numpy.nonzero", "int", "int", "partBs[].astype", "round", "round", "[].astype", "partBs[].astype", "[].astype", "partBs[].astype", "[].astype", "[].astype"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.demo_image.show_color_vector", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.keypoint_heatmap_nms", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.padRightDownCorner", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.refine_centroid"], ["", "def", "process", "(", "input_image", ",", "params", ",", "model_params", ",", "heat_layers", ",", "paf_layers", ")", ":", "\n", "    ", "oriImg", "=", "cv2", ".", "imread", "(", "input_image", ")", "# B,G,R order.    \u8bad\u7ec3\u6570\u636e\u7684\u8bfb\u5165\u4e5f\u662f\u7528opencv\uff0c\u56e0\u6b64\u4e5f\u662fB, G, R\u987a\u5e8f", "\n", "# oriImg = cv2.resize(oriImg, (768, 768))", "\n", "# oriImg = cv2.flip(oriImg, 1) \u56e0\u4e3a\u8bad\u7ec3\u65f6\u4f5c\u4e86flip\uff0c\u6240\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u63d0\u5347\u5e76\u6ca1\u6709\u4f5c\u7528", "\n", "multiplier", "=", "[", "x", "*", "model_params", "[", "'boxsize'", "]", "/", "oriImg", ".", "shape", "[", "0", "]", "for", "x", "in", "params", "[", "'scale_search'", "]", "]", "# \u6309\u7167\u56fe\u7247\u9ad8\u5ea6\u8fdb\u884c\u7f29\u653e", "\n", "# multipier = [0.21749408983451538, 0.43498817966903075, 0.6524822695035462, 0.8699763593380615],", "\n", "# \u9996\u5148\u628a\u8f93\u5165\u56fe\u50cf\u9ad8\u5ea6\u53d8\u6210368,\u7136\u540e\u518d\u505a\u7f29\u653e", "\n", "\n", "heatmap_avg", "=", "np", ".", "zeros", "(", "\n", "(", "oriImg", ".", "shape", "[", "0", "]", ",", "oriImg", ".", "shape", "[", "1", "]", ",", "heat_layers", ")", ")", "# fixme if you change the number of keypoints", "\n", "paf_avg", "=", "np", ".", "zeros", "(", "(", "oriImg", ".", "shape", "[", "0", "]", ",", "oriImg", ".", "shape", "[", "1", "]", ",", "paf_layers", ")", ")", "\n", "\n", "for", "m", "in", "range", "(", "len", "(", "multiplier", ")", ")", ":", "\n", "        ", "scale", "=", "multiplier", "[", "m", "]", "\n", "\n", "if", "scale", "*", "oriImg", ".", "shape", "[", "0", "]", ">", "2300", "or", "scale", "*", "oriImg", ".", "shape", "[", "1", "]", ">", "3200", ":", "\n", "            ", "scale", "=", "min", "(", "2300", "/", "oriImg", ".", "shape", "[", "0", "]", ",", "3200", "/", "oriImg", ".", "shape", "[", "1", "]", ")", "\n", "print", "(", "\"Input image is too big, shrink it !\"", ")", "\n", "\n", "", "imageToTest", "=", "cv2", ".", "resize", "(", "oriImg", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "# cv2.INTER_CUBIC", "\n", "imageToTest_padded", ",", "pad", "=", "util", ".", "padRightDownCorner", "(", "imageToTest", ",", "model_params", "[", "'max_downsample'", "]", ",", "\n", "model_params", "[", "'padValue'", "]", ")", "\n", "\n", "# ################################# Important!  ###########################################", "\n", "# #############################  We use OpenCV to read image (BGR) all the time #######################", "\n", "# Input Tensor: a batch of images within [0,1], required shape in this project : (1, height, width, channels)", "\n", "input_img", "=", "np", ".", "float32", "(", "imageToTest_padded", "/", "255", ")", "\n", "# input_img -= np.array(config.img_mean[::-1])  # Notice: OpenCV uses BGR format, reverse the last axises", "\n", "# input_img /= np.array(config.img_std[::-1])", "\n", "# ################################## add flip image ################################", "\n", "swap_image", "=", "input_img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "# plt.imshow(swap_image[:, :, [2, 1, 0]])  # Opencv image format: BGR", "\n", "# plt.show()", "\n", "input_img", "=", "np", ".", "concatenate", "(", "(", "input_img", "[", "None", ",", "...", "]", ",", "swap_image", "[", "None", ",", "...", "]", ")", ",", "\n", "axis", "=", "0", ")", "# (2, height, width, channels)", "\n", "input_img", "=", "torch", ".", "from_numpy", "(", "input_img", ")", ".", "cuda", "(", ")", "\n", "# ###################################################################################", "\n", "\n", "# output tensor dtype: float 16", "\n", "output_tuple", "=", "posenet", "(", "input_img", ")", "\n", "\n", "# ############ different scales can be shown #############", "\n", "output", "=", "output_tuple", "[", "-", "1", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "output_blob", "=", "output", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "output_blob0", "=", "output_blob", "[", ":", ",", ":", ",", ":", "config", ".", "paf_layers", "]", "\n", "output_blob1", "=", "output_blob", "[", ":", ",", ":", ",", "config", ".", "paf_layers", ":", "config", ".", "num_layers", "]", "\n", "\n", "output_blob_flip", "=", "output", "[", "1", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "output_blob0_flip", "=", "output_blob_flip", "[", ":", ",", ":", ",", ":", "config", ".", "paf_layers", "]", "# paf layers", "\n", "output_blob1_flip", "=", "output_blob_flip", "[", ":", ",", ":", ",", "config", ".", "paf_layers", ":", "config", ".", "num_layers", "]", "# keypoint layers", "\n", "\n", "# ################################## flip ensemble ################################", "\n", "output_blob0_avg", "=", "(", "output_blob0", "+", "output_blob0_flip", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "[", ":", ",", ":", ",", "flip_paf_ord", "]", ")", "/", "2", "\n", "output_blob1_avg", "=", "(", "output_blob1", "+", "output_blob1_flip", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "[", ":", ",", ":", ",", "flip_heat_ord", "]", ")", "/", "2", "\n", "\n", "# extract outputs, resize, and remove padding", "\n", "heatmap", "=", "cv2", ".", "resize", "(", "output_blob1_avg", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "model_params", "[", "'stride'", "]", ",", "fy", "=", "model_params", "[", "'stride'", "]", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "heatmap", "=", "heatmap", "[", ":", "imageToTest_padded", ".", "shape", "[", "0", "]", "-", "pad", "[", "2", "]", ",", ":", "imageToTest_padded", ".", "shape", "[", "1", "]", "-", "pad", "[", "3", "]", ",", ":", "]", "\n", "heatmap", "=", "cv2", ".", "resize", "(", "heatmap", ",", "(", "oriImg", ".", "shape", "[", "1", "]", ",", "oriImg", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "# output_blob0 is PAFs", "\n", "paf", "=", "cv2", ".", "resize", "(", "output_blob0_avg", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "model_params", "[", "'stride'", "]", ",", "fy", "=", "model_params", "[", "'stride'", "]", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "paf", "=", "paf", "[", ":", "imageToTest_padded", ".", "shape", "[", "0", "]", "-", "pad", "[", "2", "]", ",", ":", "imageToTest_padded", ".", "shape", "[", "1", "]", "-", "pad", "[", "3", "]", ",", ":", "]", "\n", "paf", "=", "cv2", ".", "resize", "(", "paf", ",", "(", "oriImg", ".", "shape", "[", "1", "]", ",", "oriImg", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "# ##############################     \u4e3a\u4e86\u8ba9\u5e73\u5747heatmap\u4e0d\u90a3\u4e48\u6a21\u7cca\uff1f     ################################3", "\n", "# heatmap[heatmap < params['thre1']] = 0", "\n", "# paf[paf < params['thre2']] = 0", "\n", "# ####################################################################################### #", "\n", "\n", "heatmap_avg", "=", "heatmap_avg", "+", "heatmap", "/", "len", "(", "multiplier", ")", "\n", "paf_avg", "=", "paf_avg", "+", "paf", "/", "len", "(", "multiplier", ")", "\n", "\n", "heatmap_avg", "[", "np", ".", "isnan", "(", "heatmap_avg", ")", "]", "=", "0", "\n", "paf_avg", "[", "np", ".", "isnan", "(", "paf_avg", ")", "]", "=", "0", "\n", "\n", "# heatmap_avg = np.maximum(heatmap_avg, heatmap)", "\n", "# paf_avg = np.maximum(paf_avg, paf)  # \u5982\u679c\u6362\u6210\u53d6\u6700\u5927\uff0c\u6548\u679c\u4f1a\u53d8\u5dee\uff0c\u6709\u5f88\u591a\u8bef\u68c0", "\n", "\n", "", "all_peaks", "=", "[", "]", "\n", "peak_counter", "=", "0", "\n", "# --------------------------------------------------------------------------------------- #", "\n", "# ------------------------  show the limb and foreground channel  -----------------------#", "\n", "# --------------------------------------------------------------------------------------- #", "\n", "\n", "show_color_vector", "(", "oriImg", ",", "paf_avg", ",", "heatmap_avg", ")", "\n", "\n", "# --------------------------------------------------------------------------------------- #", "\n", "# ####################################################################################### #", "\n", "# ------------------------- find keypoints  ---------------------------------------------#", "\n", "# ####################################################################################### #", "\n", "# --------------------------------------------------------------------------------------- #", "\n", "\n", "# smoothing = util.GaussianSmoothing(18, 5, 1)", "\n", "# heatmap_avg_cuda = torch.from_numpy(heatmap_avg.transpose((2, 0, 1))).cuda()[None, ...]", "\n", "\n", "heatmap_avg", "=", "heatmap_avg", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "filter_map", "=", "heatmap_avg", "[", ":", ",", ":", ",", ":", "18", "]", ".", "copy", "(", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "[", "None", ",", "...", "]", "\n", "filter_map", "=", "torch", ".", "from_numpy", "(", "filter_map", ")", ".", "cuda", "(", ")", "\n", "\n", "# # #######################   Add Gaussian smooth  #######################", "\n", "# smoothing = util.GaussianSmoothing(18, 7, 1)", "\n", "# filter_map = F.pad(filter_map, (3, 3, 3, 3), mode='reflect')", "\n", "# filter_map = smoothing(filter_map)", "\n", "# # ######################################################################", "\n", "\n", "filter_map", "=", "util", ".", "keypoint_heatmap_nms", "(", "filter_map", ",", "kernel", "=", "3", ",", "thre", "=", "params", "[", "'thre1'", "]", ")", "\n", "filter_map", "=", "filter_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "for", "part", "in", "range", "(", "18", ")", ":", "# \u6ca1\u6709\u5bf9\u80cc\u666f\uff08\u5e8f\u53f719\uff09\u53d6\u975e\u6781\u5927\u503c\u6291\u5236NMS", "\n", "        ", "map_ori", "=", "heatmap_avg", "[", ":", ",", ":", ",", "part", "]", "\n", "# map = gaussian_filter(map_ori, sigma=3)  # \u6ca1\u6709\u9ad8\u65af\u6ee4\u6ce2\u8c8c\u4f3c\u6548\u679c\u66f4\u597d\uff1f", "\n", "# map = map_ori", "\n", "# map up \u662f\u503c", "\n", "peaks_binary", "=", "filter_map", "[", ":", ",", ":", ",", "part", "]", "\n", "\n", "peaks", "=", "list", "(", "zip", "(", "np", ".", "nonzero", "(", "peaks_binary", ")", "[", "1", "]", ",", "np", ".", "nonzero", "(", "peaks_binary", ")", "[", "0", "]", ")", ")", "\n", "# note reverse. xy\u5750\u6807\u7cfb\u548c\u56fe\u50cf\u5750\u6807\u7cfb", "\n", "# np.nonzero: Return the indices of the elements that are non-zero", "\n", "# \u6dfb\u52a0\u52a0\u6743\u5750\u6807\u8ba1\u7b97\uff0c\u6839\u636e\u4e0d\u540c\u7c7b\u578b\u5173\u952e\u70b9\u5f25\u6563\u7a0b\u5ea6\u4e0d\u540c\u9009\u62e9\u52a0\u6743\u7684\u8303\u56f4", "\n", "refined_peaks_with_score", "=", "[", "util", ".", "refine_centroid", "(", "map_ori", ",", "anchor", ",", "params", "[", "'offset_radius'", "]", ")", "for", "anchor", "in", "peaks", "]", "\n", "\n", "# peaks_with_score = [x + (map_ori[x[1], x[0]],) for x in peaks]  # \u5217\u8868\u89e3\u6790\u5f0f\uff0c\u751f\u4ea7\u7684\u662flist  # refined_peaks", "\n", "# [(205, 484, 0.9319216758012772),", "\n", "#  # (595, 484, 0.777797631919384),", "\n", "id", "=", "range", "(", "peak_counter", ",", "peak_counter", "+", "len", "(", "refined_peaks_with_score", ")", ")", "\n", "peaks_with_score_and_id", "=", "[", "refined_peaks_with_score", "[", "i", "]", "+", "(", "id", "[", "i", "]", ",", ")", "for", "i", "in", "range", "(", "len", "(", "id", ")", ")", "]", "\n", "# \u4e3a\u6bcf\u4e00\u4e2a\u76f8\u5e94peak (parts)\u90fd\u4f9d\u6b21\u7f16\u4e86\u4e00\u4e2a\u53f7", "\n", "\n", "all_peaks", ".", "append", "(", "peaks_with_score_and_id", ")", "\n", "# all_peaks.append \u5982\u679c\u6b64\u79cd\u5173\u8282\u7c7b\u578b\u6ca1\u6709\u5143\u7d20\uff0cappend\u4e00\u4e2a\u7a7a\u7684list []\uff0c\u4f8b\u5982all_peaks[19]:", "\n", "# [(205, 484, 0.9319216758012772, 25),", "\n", "# (595, 484, 0.777797631919384, 26),", "\n", "# (343, 490, 0.8145177364349365, 27), ....", "\n", "peak_counter", "+=", "len", "(", "peaks", ")", "# refined_peaks", "\n", "\n", "# --------------------------------------------------------------------------------------- #", "\n", "# ####################################################################################### #", "\n", "# ----------------------------- find connections -----------------------------------------#", "\n", "# ####################################################################################### #", "\n", "# --------------------------------------------------------------------------------------- #", "\n", "\n", "", "connection_all", "=", "[", "]", "\n", "special_k", "=", "[", "]", "\n", "\n", "# \u6709\u591a\u5c11\u4e2alimb,\u5c31\u6709\u591a\u5c11\u4e2aconnection,\u76f8\u5bf9\u5e94\u5730\u5c31\u6709\u591a\u5c11\u4e2apaf channel", "\n", "for", "k", "in", "range", "(", "len", "(", "limbSeq", ")", ")", ":", "# \u6700\u5916\u5c42\u7684\u5faa\u73af\u662f\u67d0\u4e00\u4e2alimbSeq", "\n", "        ", "score_mid", "=", "paf_avg", "[", ":", ",", ":", ",", "k", "]", "# \u67d0\u4e00\u4e2achannel\u4e0alimb\u7684\u54cd\u5e94\u70ed\u56fe, \u5b83\u7684\u957f\u5bbd\u4e0e\u539f\u59cb\u8f93\u5165\u56fe\u7247\u5927\u5c0f\u4e00\u81f4\uff0c\u524d\u9762\u7ecf\u8fc7resize\u4e86", "\n", "# score_mid = gaussian_filter(orginal_score_mid, sigma=3)  fixme: use gaussisan blure?", "\n", "candA", "=", "all_peaks", "[", "limbSeq", "[", "k", "]", "[", "0", "]", "]", "# all_peaks\u662flist,\u6bcf\u4e00\u884c\u4e5f\u662f\u4e00\u4e2alist,\u4fdd\u5b58\u4e86\u68c0\u6d4b\u5230\u7684\u7279\u5b9a\u7684parts(joints)", "\n", "# \u6ce8\u610f\u5177\u4f53\u5904\u7406\u65f6\u6807\u53f7\u4ece0\u8fd8\u662f1\u5f00\u59cb\u3002\u4ece\u6536\u96c6\u7684peaks\u4e2d\u53d6\u51fa\u67d0\u7c7b\u5173\u952e\u70b9\uff08part)\u96c6\u5408", "\n", "candB", "=", "all_peaks", "[", "limbSeq", "[", "k", "]", "[", "1", "]", "]", "\n", "nA", "=", "len", "(", "candA", ")", "\n", "nB", "=", "len", "(", "candB", ")", "\n", "indexA", ",", "indexB", "=", "limbSeq", "[", "k", "]", "\n", "if", "(", "nA", "!=", "0", "and", "nB", "!=", "0", ")", ":", "\n", "            ", "connection_candidate", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nA", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "nB", ")", ":", "\n", "                    ", "vec", "=", "np", ".", "subtract", "(", "candB", "[", "j", "]", "[", ":", "2", "]", ",", "candA", "[", "i", "]", "[", ":", "2", "]", ")", "\n", "norm", "=", "math", ".", "sqrt", "(", "vec", "[", "0", "]", "*", "vec", "[", "0", "]", "+", "vec", "[", "1", "]", "*", "vec", "[", "1", "]", ")", "\n", "mid_num", "=", "min", "(", "int", "(", "round", "(", "norm", "+", "1", ")", ")", ",", "params", "[", "'mid_num'", "]", ")", "\n", "# failure case when 2 body parts overlaps", "\n", "if", "norm", "==", "0", ":", "# \u4e3a\u4e86\u8df3\u8fc7\u51fa\u73b0\u4e0d\u540c\u8282\u70b9\u76f8\u4e92\u8986\u76d6\u51fa\u73b0\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u6709\u8bf4norm\u52a0\u4e00\u4e2a\u63a5\u8fd10\u7684\u9879\u907f\u514d\u5206\u6bcd\u4e3a0,\u8be6\u89c1\uff1a", "\n", "# https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation/issues/54", "\n", "                        ", "continue", "\n", "\n", "", "startend", "=", "list", "(", "zip", "(", "np", ".", "linspace", "(", "candA", "[", "i", "]", "[", "0", "]", ",", "candB", "[", "j", "]", "[", "0", "]", ",", "num", "=", "mid_num", ")", ",", "\n", "np", ".", "linspace", "(", "candA", "[", "i", "]", "[", "1", "]", ",", "candB", "[", "j", "]", "[", "1", "]", ",", "num", "=", "mid_num", ")", ")", ")", "\n", "\n", "limb_response", "=", "np", ".", "array", "(", "[", "score_mid", "[", "int", "(", "round", "(", "startend", "[", "I", "]", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "startend", "[", "I", "]", "[", "0", "]", ")", ")", "]", "for", "I", "in", "range", "(", "len", "(", "startend", ")", ")", "]", ")", "\n", "\n", "score_midpts", "=", "limb_response", "\n", "\n", "score_with_dist_prior", "=", "sum", "(", "score_midpts", ")", "/", "len", "(", "score_midpts", ")", "+", "min", "(", "\n", "0.5", "*", "oriImg", ".", "shape", "[", "0", "]", "/", "norm", "-", "1", ",", "0", ")", "\n", "# \u8fd9\u4e00\u9879\u662f\u4e3a\u4e86\u60e9\u7f5a\u8fc7\u957f\u7684connection, \u53ea\u6709\u5f53\u957f\u5ea6\u5927\u4e8e\u56fe\u50cf\u9ad8\u5ea6\u7684\u4e00\u534a\u65f6\u624d\u4f1a\u60e9\u7f5a todo", "\n", "# The term of sum(score_midpts)/len(score_midpts), see the link below.", "\n", "# https://github.com/michalfaber/keras_Realtime_Multi-Person_Pose_Estimation/issues/48", "\n", "\n", "criterion1", "=", "len", "(", "np", ".", "nonzero", "(", "score_midpts", ">", "params", "[", "'thre2'", "]", ")", "[", "0", "]", ")", ">", "params", "[", "'connect_ration'", "]", "*", "len", "(", "\n", "score_midpts", ")", "# fixme: tune \u624b\u52a8\u8c03\u6574, \u672c\u6765\u662f > 0.8*len", "\n", "# \u6211\u8ba4\u4e3a\u8fd9\u4e2a\u5224\u522b\u6807\u51c6\u662f\u4fdd\u8bc1paf\u671d\u5411\u7684\u4e00\u81f4\u6027  param['thre2']", "\n", "# parm['thre2'] = 0.05", "\n", "criterion2", "=", "score_with_dist_prior", ">", "0", "\n", "\n", "if", "criterion1", "and", "criterion2", ":", "\n", "                        ", "connection_candidate", ".", "append", "(", "[", "i", ",", "j", ",", "score_with_dist_prior", ",", "norm", ",", "\n", "0.5", "*", "score_with_dist_prior", "+", "0.25", "*", "candA", "[", "i", "]", "[", "2", "]", "+", "0.25", "*", "candB", "[", "j", "]", "[", "\n", "2", "]", "]", ")", "\n", "# todo:\u76f4\u63a5\u628a\u4e24\u79cd\u7c7b\u578b\u6982\u7387\u76f8\u52a0\u4e0d\u5408\u7406", "\n", "# connection_candidate\u6392\u5e8f\u7684\u4f9d\u636e\u662fdist prior\u6982\u7387\u548c\u4e24\u4e2a\u7aef\u70b9heat map\u9884\u6d4b\u7684\u6982\u7387\u503c", "\n", "# How to undersatand the criterion?", "\n", "\n", "", "", "", "connection_candidate", "=", "sorted", "(", "connection_candidate", ",", "key", "=", "lambda", "x", ":", "x", "[", "4", "]", ",", "reverse", "=", "True", ")", "\n", "# sorted \u51fd\u6570\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6309\u7167key\u53c2\u6570\u6307\u5b9a\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\uff0crevers=True\u662f\u6309\u7167\u9006\u5e8f\u6392\u5e8f\uff0csort\u4e4b\u540e\u53ef\u4ee5\u628a\u6700\u53ef\u80fd\u662flimb\u7684\u7559\u4e0b\uff0c\u800c\u628a\u548c\u6700\u53ef\u80fd\u662flimb\u7684\u7aef\u70b9\u7ade\u4e89\u7684\u7aef\u70b9\u5220\u9664", "\n", "\n", "connection", "=", "np", ".", "zeros", "(", "(", "0", ",", "6", ")", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "connection_candidate", ")", ")", ":", "# \u6839\u636econfidence\u7684\u987a\u5e8f\u9009\u62e9connections", "\n", "                ", "i", ",", "j", ",", "s", ",", "limb_len", "=", "connection_candidate", "[", "c", "]", "[", "0", ":", "4", "]", "\n", "if", "(", "i", "not", "in", "connection", "[", ":", ",", "3", "]", "and", "j", "not", "in", "connection", "[", ":", ",", "4", "]", ")", ":", "\n", "# \u8fdb\u884c\u5224\u65ad\u786e\u4fdd\u4e0d\u4f1a\u51fa\u73b0\u4e24\u4e2a\u7aef\u70b9\u96c6\u5408A,B\u4e2d\uff0c\u51fa\u73b0\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u70b9\u4e0e\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e24\u4e2a\u70b9\u540c\u65f6\u76f8\u8fde", "\n", "                    ", "connection", "=", "np", ".", "vstack", "(", "[", "connection", ",", "[", "candA", "[", "i", "]", "[", "3", "]", ",", "candB", "[", "j", "]", "[", "3", "]", ",", "s", ",", "i", ",", "j", ",", "limb_len", "]", "]", ")", "# \u540e\u9762\u4f1a\u88ab\u4f7f\u7528", "\n", "# candA[i][3], candB[j][3]\u662fpart\u7684id\u7f16\u53f7", "\n", "if", "(", "len", "(", "connection", ")", ">=", "min", "(", "nA", ",", "nB", ")", ")", ":", "# \u4f1a\u51fa\u73b0\u5173\u8282\u70b9\u4e0d\u591f\u8fde\u7684\u60c5\u51b5", "\n", "                        ", "break", "\n", "", "", "", "connection_all", ".", "append", "(", "connection", ")", "\n", "", "else", ":", "\n", "            ", "special_k", ".", "append", "(", "k", ")", "\n", "connection_all", ".", "append", "(", "[", "]", ")", "\n", "# \u4e00\u4e2a\u7a7a\u7684[]\u4e5f\u80fd\u52a0\u5165\u5230list\u4e2d\uff0c\u8fd9\u4e00\u53e5\u662f\u5fc5\u987b\u7684\uff01\u56e0\u4e3aconnection_all\u7684\u6570\u636e\u7ed3\u6784\u662f\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u7c7blimb connection", "\n", "\n", "# --------------------------------------------------------------------------------------- #", "\n", "# ####################################################################################### #", "\n", "# --------------------------------- find people ------------------------------------------#", "\n", "# ####################################################################################### #", "\n", "# --------------------------------------------------------------------------------------- #", "\n", "\n", "# last number in each row is the total parts number of that person", "\n", "# the second last number in each row is the score of the overall configuration", "\n", "", "", "subset", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "0", ",", "20", ",", "2", ")", ")", "\n", "candidate", "=", "np", ".", "array", "(", "[", "item", "for", "sublist", "in", "all_peaks", "for", "item", "in", "sublist", "]", ")", "\n", "# candidate[:, 2] *= 0.5  # FIXME: change it? part confidence * 0.5", "\n", "# candidate.shape = (94, 4). \u5217\u8868\u89e3\u6790\u5f0f\uff0c\u4e24\u5c42\u5faa\u73af\uff0c\u5148\u4eceall peaks\u53d6\uff0c\u518d\u4ecesublist\u4e2d\u53d6\u3002 all peaks\u662f\u4e24\u5c42list", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "limbSeq", ")", ")", ":", "\n", "# ---------------------------------------------------------", "\n", "# \u5916\u5c42\u5faa\u73aflimb  \u5bf9\u5e94\u8bba\u6587\u4e2d\uff0c\u6bcf\u4e00\u4e2alimb\u5c31\u662f\u4e00\u4e2a\u5b50\u96c6\uff0c\u5206limb\u5904\u7406,\u8d2a\u5fc3\u7b56\u7565?", "\n", "# special_K ,\u8868\u793a\u6ca1\u6709\u627e\u5230\u5173\u8282\u70b9\u5bf9\u5339\u914d\u7684\u80a2\u4f53", "\n", "        ", "if", "k", "not", "in", "special_k", ":", "# \u5373\u3000\u6709\u4e0e\u4e4b\u76f8\u8fde\u7684\uff0c\u8fd9\u4e2apaf(limb)\u662f\u5b58\u5728\u7684", "\n", "            ", "partAs", "=", "connection_all", "[", "k", "]", "[", ":", ",", "0", "]", "# limb\u7aef\u70b9part\u7684\u5e8f\u53f7\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u5728candidate\u4e2d\u7684  id\u53f7", "\n", "partBs", "=", "connection_all", "[", "k", "]", "[", ":", ",", "1", "]", "# limb\u7aef\u70b9part\u7684\u5e8f\u53f7\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u5728candidate\u4e2d\u7684  id\u53f7", "\n", "# connection_all \u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u7c7b\u578b\u7684limb,\u6bcf\u4e00\u884c\u683c\u5f0f: N * [idA, idB, score, i, j]", "\n", "indexA", ",", "indexB", "=", "np", ".", "array", "(", "limbSeq", "[", "k", "]", ")", "# \u6b64\u65f6\u5904\u7406limb k,limbSeq\u7684\u4e24\u4e2a\u7aef\u70b9parts\uff0c\u662fparts\u7684\u7c7b\u522b\u53f7.", "\n", "#  \u6839\u636elimbSeq\u5217\u8868\u7684\u987a\u5e8f\u4f9d\u6b21\u8003\u5bdf\u67d0\u79cd\u7c7b\u578b\u7684limb\uff0c\u4ece\u4e00\u4e2a\u5173\u8282\u70b9\u5230\u4e0b\u4e00\u4e2a\u5173\u8282\u70b9", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "connection_all", "[", "k", "]", ")", ")", ":", "# \u8be5\u5c42\u5faa\u73af\u662f\u5206\u914dk\u7c7b\u578b\u7684limb connection\u3000(partAs[i],partBs[i])\u5230\u67d0\u4e2a\u4eba\u3000subset[]", "\n", "# ------------------------------------------------", "\n", "# \u6bcf\u4e00\u884c\u7684list\u4fdd\u5b58\u7684\u662f\u4e00\u7c7blimb(connection),\u904d\u5386\u6240\u6709\u6b64\u7c7blimb,\u4e00\u822c\u7684\u6709\u591a\u5c11\u4e2a\u7279\u5b9a\u7684limb\u5c31\u6709\u591a\u5c11\u4e2a\u4eba", "\n", "\n", "                ", "found", "=", "0", "\n", "subset_idx", "=", "[", "-", "1", ",", "-", "1", "]", "# \u6bcf\u6b21\u5faa\u73af\u53ea\u89e3\u51b3\u4e24\u4e2apart\uff0c\u6240\u4ee5\u6807\u8bb0\u53ea\u9700\u8981\u4e24\u4e2aflag", "\n", "for", "j", "in", "range", "(", "len", "(", "subset", ")", ")", ":", "\n", "# ----------------------------------------------", "\n", "# \u8fd9\u4e00\u5c42\u5faa\u73af\u662f\u904d\u5386\u6240\u6709\u7684\u4eba", "\n", "\n", "# 1:size(subset,1), \u82e5subset.shape=(5,20), \u5219len(subset)=5\uff0c\u8868\u793a\u67095\u4e2a\u4eba", "\n", "# subset\u6bcf\u4e00\u884c\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u4eba\u768418\u4e2a\u5173\u952e\u70b9\u548cnumber\u4ee5\u53cascore\u7684\u7ed3\u679c", "\n", "                    ", "if", "subset", "[", "j", "]", "[", "indexA", "]", "[", "0", "]", ".", "astype", "(", "int", ")", "==", "(", "partAs", "[", "i", "]", ")", ".", "astype", "(", "int", ")", "or", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "\n", "int", ")", "==", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ":", "\n", "# \u770b\u770b\u8fd9\u6b21\u8003\u5bdf\u7684limb\u4e24\u4e2a\u7aef\u70b9\u4e4b\u4e00\u662f\u5426\u6709\u4e00\u4e2a\u5df2\u7ecf\u5728\u4e0a\u4e00\u8f6e\u4e2d\u51fa\u73b0\u8fc7\u4e86,\u5373\u662f\u5426\u5df2\u7ecf\u5206\u914d\u7ed9\u67d0\u4eba\u4e86", "\n", "# \u6bcf\u4e00\u4e2a\u6700\u5916\u5c42\u5faa\u73af\u90fd\u53ea\u8003\u8651\u4e00\u4e2alimb\uff0c\u56e0\u6b64\u5904\u7406\u7684\u65f6\u5019\u5c31\u53ea\u4f1a\u6709\u4e24\u79cdpart,\u5373\u8868\u793a\u4e3apartAs,partBs", "\n", "                        ", "subset_idx", "[", "found", "]", "=", "j", "# \u6807\u8bb0\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u7aef\u70b9\u5e94\u8be5\u662f\u7b2cj\u4e2a\u4eba\u7684", "\n", "found", "+=", "1", "\n", "\n", "", "", "if", "found", "==", "1", ":", "\n", "                    ", "j", "=", "subset_idx", "[", "0", "]", "\n", "\n", "if", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", "==", "-", "1", "and", "params", "[", "'len_rate'", "]", "*", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", ">", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "# \u5982\u679c\u65b0\u52a0\u5165\u7684limb\u6bd4\u4e4b\u524d\u5df2\u7ecf\u7ec4\u88c5\u7684limb\u957f\u5f88\u591a\uff0c\u4e5f\u820d\u5f03", "\n", "# \u5982\u679c\u8fd9\u4e2a\u4eba\u7684\u5f53\u524d\u70b9\u8fd8\u6ca1\u6709\u88ab\u627e\u5230\u65f6\uff0c\u628a\u8fd9\u4e2a\u70b9\u5206\u914d\u7ed9\u8fd9\u4e2a\u4eba", "\n", "# \u8fd9\u4e00\u4e2a\u5224\u65ad\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u7b2c18\u548c19\u4e2alimb\u5206\u522b\u662f 2->16, 5->17,\u8fd9\u51e0\u4e2a\u70b9\u5df2\u7ecf\u5728\u4e4b\u524d\u7684limb\u4e2d\u68c0\u6d4b\u5230\u4e86\uff0c", "\n", "# \u6240\u4ee5\u5982\u679c\u4e24\u6b21\u7ed3\u679c\u4e00\u81f4\uff0c\u4e0d\u66f4\u6539\u6b64\u65f6\u7684part\u5206\u914d\uff0c\u5426\u5219\u53c8\u5206\u914d\u4e86\u4e00\u6b21\uff0c\u7f16\u53f7\u662f\u8986\u76d6\u4e86\uff0c\u4f46\u662f\u7ee7\u7eed\u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\uff0cpart\u6570\u76ee", "\n", "# \u4f1a\u52a0\uff11\uff0c\u7ed3\u679c\u9020\u6210\u4e00\u4e2a\u4eba\u7684part\u4e4b\u548c>18\u3002\u4e0d\u8fc7\u5982\u679c\u4e24\u4fa7\u9884\u6d4blimb\u7aef\u70b9\u7ed3\u679c\u4e0d\u540c\uff0c\u8fd8\u662f\u4f1a\u51fa\u73b0number of part>18\uff0c\u9020\u6210\u591a\u68c0", "\n", "# FIXME: \u6ca1\u6709\u5229\u7528\u597d\u5197\u4f59\u7684connection\u4fe1\u606f\uff0c\u6700\u540e\u4e24\u4e2alimb\u7684\u7aef\u70b9\u4e0e\u4e4b\u524d\u5faa\u73af\u8fc7\u7a0b\u4e2d\u91cd\u590d\u4e86\uff0c\u4f46\u6ca1\u6709\u5229\u7528\u805a\u5408\uff0c", "\n", "#  \u53ea\u662f\u76f4\u63a5\u8986\u76d6\uff0c\u5176\u5b9e\u76f4\u63a5\u8986\u76d6\u662f\u4e3a\u4e86\u5f25\u8865\u6f0f\u68c0", "\n", "\n", "                        ", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", "=", "partBs", "[", "i", "]", "# partBs[i]\u662flimb\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u7684id\u53f7\u7801", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "# \u4fdd\u5b58\u8fd9\u4e2a\u70b9\u88ab\u7559\u4e0b\u6765\u7684\u7f6e\u4fe1\u5ea6", "\n", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "0", "]", "+=", "1", "# last number in each row is the total parts number of that person", "\n", "\n", "# # subset[j][-2][1]\u7528\u6765\u8bb0\u5f55\u4e0d\u5305\u62ec\u5f53\u524d\u65b0\u52a0\u5165\u7684\u7c7b\u578b\u8282\u70b9\u65f6\u7684\u603b\u4f53\u521d\u59cb\u7f6e\u4fe1\u5ea6\uff0c\u5f15\u5165\u5b83\u662f\u4e3a\u4e86\u907f\u514d\u4e0b\u6b21\u8fed\u4ee3\u51fa\u73b0\u540c\u7c7b\u578b\u5173\u952e\u70b9\uff0c\u8986\u76d6\u65f6\u91cd\u590d\u76f8\u52a0\u4e86\u7f6e\u4fe1\u5ea6", "\n", "# subset[j][-2][1] = subset[j][-2][0]  # \u56e0\u4e3a\u662f\u4e0d\u5305\u62ec\u6b64\u7c7b\u8282\u70b9\u7684\u521d\u59cb\u503c\uff0c\u6240\u4ee5\u53ea\u4f1a\u8d4b\u503c\u4e00\u6b21 !!", "\n", "\n", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "+=", "candidate", "[", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "# candidate\u7684\u683c\u5f0f\u4e3a\uff1a  (343, 490, 0.8145177364349365, 27), ....", "\n", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "=", "max", "(", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ",", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "\n", "# the second last number in each row is the score of the overall configuration", "\n", "\n", "", "elif", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", "!=", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ":", "\n", "                        ", "if", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", ">=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", ":", "\n", "# \u5982\u679c\u8003\u5bdf\u7684\u8fd9\u4e2alimb\u8fde\u63a5\u6ca1\u6709\u5df2\u7ecf\u5b58\u5728\u7684\u53ef\u4fe1\uff0c\u5219\u8df3\u8fc7", "\n", "                            ", "pass", "\n", "\n", "", "else", ":", "\n", "# \u5426\u5219\u7528\u5f53\u524d\u7684limb\u7aef\u70b9\u8986\u76d6\u5df2\u7ecf\u5b58\u5728\u7684\u70b9\uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u524d\uff0c\u51cf\u53bb\u5df2\u5b58\u5728\u5173\u8282\u70b9\u7684\u7f6e\u4fe1\u5ea6\u548c\u8fde\u63a5\u5b83\u7684limb\u7f6e\u4fe1\u5ea6", "\n", "                            ", "if", "params", "[", "'len_rate'", "]", "*", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "<=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "                                ", "continue", "\n", "# \u51cf\u53bb\u4e4b\u524d\u7684\u8282\u70b9\u7f6e\u4fe1\u5ea6\u548climb\u7f6e\u4fe1\u5ea6", "\n", "", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "-=", "candidate", "[", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "\n", "\n", "# \u6dfb\u52a0\u5f53\u524d\u8282\u70b9", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", "=", "partBs", "[", "i", "]", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "# \u4fdd\u5b58\u8fd9\u4e2a\u70b9\u88ab\u7559\u4e0b\u6765\u7684\u7f6e\u4fe1\u5ea6", "\n", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "+=", "candidate", "[", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "\n", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "=", "max", "(", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ",", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "\n", "#  overlap the reassigned keypoint", "\n", "#  \u5982\u679c\u662f\u6dfb\u52a0\u5197\u4f59\u8fde\u63a5\u7684\u91cd\u590d\u7684\u70b9\uff0c\u7528\u65b0\u7684\u66f4\u52a0\u9ad8\u7684\u5197\u4f59\u8fde\u63a5\u6982\u7387\u53d6\u4ee3\u539f\u6765\u8fde\u63a5\u7684\u76f8\u540c\u7684\u5173\u8282\u70b9\u7684\u6982\u7387", "\n", "# \u8fd9\u4e00\u4e2a\u6539\u52a8\u6ca1\u5565\u5f71\u54cd", "\n", "", "", "elif", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", "==", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", "and", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "<=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", ":", "\n", "# \u5426\u5219\u7528\u5f53\u524d\u7684limb\u7aef\u70b9\u8986\u76d6\u5df2\u7ecf\u5b58\u5728\u7684\u70b9\uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u524d\uff0c\u51cf\u53bb\u5df2\u5b58\u5728\u5173\u8282\u70b9\u7684\u7f6e\u4fe1\u5ea6\u548c\u8fde\u63a5\u5b83\u7684limb\u7f6e\u4fe1\u5ea6", "\n", "                        ", "if", "params", "[", "'len_rate'", "]", "*", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "<=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "                            ", "continue", "\n", "# \u51cf\u53bb\u4e4b\u524d\u7684\u8282\u70b9\u7f6e\u4fe1\u5ea6\u548climb\u7f6e\u4fe1\u5ea6", "\n", "", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "-=", "candidate", "[", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "\n", "\n", "# \u6dfb\u52a0\u5f53\u524d\u8282\u70b9", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "0", "]", "=", "partBs", "[", "i", "]", "\n", "subset", "[", "j", "]", "[", "indexB", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "# \u4fdd\u5b58\u8fd9\u4e2a\u70b9\u88ab\u7559\u4e0b\u6765\u7684\u7f6e\u4fe1\u5ea6", "\n", "subset", "[", "j", "]", "[", "-", "2", "]", "[", "0", "]", "+=", "candidate", "[", "partBs", "[", "i", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "\n", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", "=", "max", "(", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ",", "subset", "[", "j", "]", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "\n", "", "", "elif", "found", "==", "2", ":", "# if found 2 and disjoint, merge them (disjoint\uff1a\u4e0d\u76f8\u4ea4)", "\n", "# -----------------------------------------------------", "\n", "# \u5982\u679c\u80a2\u4f53\u7ec4\u6210\u7684\u5173\u8282\u70b9A,B\u5206\u522b\u8fde\u5230\u4e86\u4e24\u4e2a\u4eba\u4f53\uff0c\u5219\u8868\u660e\u8fd9\u4e24\u4e2a\u4eba\u4f53\u5e94\u8be5\u7ec4\u6210\u4e00\u4e2a\u4eba\u4f53\uff0c", "\n", "# \u5219\u5408\u5e76\u4e24\u4e2a\u4eba\u4f53\uff08\u5f53\u80a2\u4f53\u662f\u6309\u987a\u5e8f\u62fc\u63a5\u60c5\u51b5\u4e0b\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u72b6\u51b5\uff09", "\n", "# --------------------------------------------------", "\n", "\n", "# \u8bf4\u660e\u7ec4\u88c5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u65ad\u6389\u7684\u60c5\u51b5\uff08\u6709limb\u6216\u8005\u8bf4connection\u7f3a\u5931\uff09\uff0c\u5728\u4e4b\u524d\u91cd\u590d\u5f00\u8f9f\u4e86\u4e00\u4e2asub person,\u5176\u5b9e\u4ed6\u4eec\u662f\u540c\u4e00\u4e2a\u4eba\u4e0a\u7684", "\n", "# If humans H1 and H2 share a part index with the same coordinates, they are sharing the same part!", "\n", "#  H1 and H2 are, therefore, the same humans. So we merge both sets into H1 and remove H2.", "\n", "# https://arvrjourney.com/human-pose-estimation-using-openpose-with-tensorflow-part-2-e78ab9104fc8", "\n", "# \u8be5\u4ee3\u7801\u4e0e\u94fe\u63a5\u4e2d\u7684\u505a\u6cd5\u6709\u5dee\u5f02\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u94fe\u63a5\u4e2d\u7684\u66f4\u52a0\u5408\u7406\u800c\u4e14\u66f4\u5bb9\u6613\u7406\u89e3", "\n", "                    ", "j1", ",", "j2", "=", "subset_idx", "\n", "\n", "membership1", "=", "(", "(", "subset", "[", "j1", "]", "[", "...", ",", "0", "]", ">=", "0", ")", ".", "astype", "(", "int", ")", ")", "[", ":", "-", "2", "]", "# \u7528[:,0]\u4e5f\u53ef", "\n", "membership2", "=", "(", "(", "subset", "[", "j2", "]", "[", "...", ",", "0", "]", ">=", "0", ")", ".", "astype", "(", "int", ")", ")", "[", ":", "-", "2", "]", "\n", "membership", "=", "membership1", "+", "membership2", "\n", "# [:-2]\u4e0d\u5305\u62ec\u6700\u540e\u4e2a\u6570\u9879\u4e0escores\u9879", "\n", "# \u8fd9\u4e9b\u70b9\u5e94\u8be5\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba,\u5c06\u8fd9\u4e2a\u4eba\u6240\u6709\u7c7b\u578b\u5173\u952e\u70b9\uff08\u7aef\u70b9part)\u4e2a\u6570\u9010\u4e2a\u76f8\u52a0", "\n", "if", "len", "(", "np", ".", "nonzero", "(", "membership", "==", "2", ")", "[", "0", "]", ")", "==", "0", ":", "# if found 2 and disjoint, merge them", "\n", "\n", "                        ", "min_limb1", "=", "np", ".", "min", "(", "subset", "[", "j1", ",", ":", "-", "2", ",", "1", "]", "[", "membership1", "==", "1", "]", ")", "\n", "min_limb2", "=", "np", ".", "min", "(", "subset", "[", "j2", ",", ":", "-", "2", ",", "1", "]", "[", "membership2", "==", "1", "]", ")", "\n", "min_tolerance", "=", "min", "(", "min_limb1", ",", "min_limb2", ")", "# \u8ba1\u7b97\u5141\u8bb8\u8fdb\u884c\u62fc\u63a5\u7684\u7f6e\u4fe1\u5ea6", "\n", "\n", "if", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "<", "params", "[", "'connection_tole'", "]", "*", "min_tolerance", "or", "params", "[", "'len_rate'", "]", "*", "subset", "[", "j1", "]", "[", "-", "1", "]", "[", "1", "]", "<=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "# \u5982\u679cmerge\u8fd9\u4e24\u4e2a\u8eab\u4f53\u90e8\u5206\u7684\u7f6e\u4fe1\u5ea6\u4e0d\u591f\u5927\uff0c\u6216\u8005\u5f53\u524d\u8fd9\u4e2alimb\u660e\u663e\u5927\u4e8e\u5df2\u5b58\u5728\u7684limb\u7684\u957f\u5ea6\uff0c\u5219\u4e0d\u8fdb\u884c\u8fde\u63a5", "\n", "# todo: finetune the tolerance of connection", "\n", "                            ", "continue", "#", "\n", "\n", "", "subset", "[", "j1", "]", "[", ":", "-", "2", "]", "[", "...", "]", "+=", "(", "subset", "[", "j2", "]", "[", ":", "-", "2", "]", "[", "...", "]", "+", "1", ")", "\n", "# \u5bf9\u4e8e\u6ca1\u6709\u8282\u70b9\u6807\u8bb0\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u4e24\u884csubset\u76f8\u5e94\u4f4d\u7f6e\u5904\u90fd\u662f-1,\u6240\u4ee5\u5408\u5e76\u4e4b\u540e\u6ca1\u6709\u8282\u70b9\u7684\u90e8\u5206\u4f9d\u65e7\u662f-\uff11", "\n", "# \u628a\u4e0d\u76f8\u4ea4\u7684\u4e24\u4e2asubset[j1],[j2]\u4e2d\u7684id\u53f7\u8fdb\u884c\u76f8\u52a0\uff0c\u4ece\u800c\u5b8c\u6210\u5408\u5e76\uff0c\u8fd9\u91cc+1\u662f\u56e0\u4e3a\u9ed8\u8ba4\u6ca1\u6709\u627e\u5230\u5173\u952e\u70b9\u521d\u59cb\u503c\u662f-1", "\n", "\n", "subset", "[", "j1", "]", "[", "-", "2", ":", "]", "[", ":", ",", "0", "]", "+=", "subset", "[", "j2", "]", "[", "-", "2", ":", "]", "[", ":", ",", "0", "]", "# \u4e24\u884csubset\u7684\u70b9\u7684\u4e2a\u6570\u548c\u603b\u7f6e\u4fe1\u5ea6\u76f8\u52a0", "\n", "\n", "subset", "[", "j1", "]", "[", "-", "2", "]", "[", "0", "]", "+=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "subset", "[", "j1", "]", "[", "-", "1", "]", "[", "1", "]", "=", "max", "(", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", ",", "subset", "[", "j1", "]", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "# \u6ce8\u610f\uff1a\u3000\u56e0\u4e3a\u662fdisjoint\u7684\u4e24\u884csubset\u70b9\u7684merge\uff0c\u56e0\u6b64\u5148\u524d\u5b58\u5728\u7684\u8282\u70b9\u7684\u7f6e\u4fe1\u5ea6\u4e4b\u524d\u5df2\u7ecf\u88ab\u52a0\u8fc7\u4e86 !! \u8fd9\u91cc\u53ea\u9700\u8981\u518d\u52a0\u5f53\u524d\u8003\u5bdf\u7684limb\u7684\u7f6e\u4fe1\u5ea6", "\n", "subset", "=", "np", ".", "delete", "(", "subset", ",", "j2", ",", "0", ")", "\n", "\n", "", "else", ":", "\n", "# \u51fa\u73b0\u4e86\u4e24\u4e2a\u4eba\u540c\u65f6\u7ade\u4e89\u4e00\u4e2alimb\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u4eba\u4e0d\u662f\u540c\u4e00\u4e2a\u4eba\uff0c\u901a\u8fc7\u6bd4\u8f83\u4e24\u4e2a\u4eba\u5305\u542b\u6b64limb\u7684\u7f6e\u4fe1\u5ea6\u6765\u51b3\u5b9a\uff0c", "\n", "# \u5f53\u524dlimb\u7684\u8282\u70b9\u5e94\u8be5\u5206\u914d\u7ed9\u8c01\uff0c\u540c\u65f6\u628a\u4e4b\u524d\u7684\u90a3\u4e2a\u4e0e\u5f53\u524d\u8282\u70b9\u76f8\u8fde\u7684\u8282\u70b9(\u5373partsA[i])\u4ece\u53e6\u4e00\u4e2a\u4eba(subset)\u7684\u8282\u70b9\u96c6\u5408\u4e2d\u5220\u9664", "\n", "                        ", "if", "connection_all", "[", "k", "]", "[", "i", "]", "[", "0", "]", "in", "subset", "[", "j1", ",", ":", "-", "2", ",", "0", "]", ":", "\n", "                            ", "c1", "=", "np", ".", "where", "(", "subset", "[", "j1", ",", ":", "-", "2", ",", "0", "]", "==", "connection_all", "[", "k", "]", "[", "i", "]", "[", "0", "]", ")", "\n", "c2", "=", "np", ".", "where", "(", "subset", "[", "j2", ",", ":", "-", "2", ",", "0", "]", "==", "connection_all", "[", "k", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "c1", "=", "np", ".", "where", "(", "subset", "[", "j1", ",", ":", "-", "2", ",", "0", "]", "==", "connection_all", "[", "k", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "c2", "=", "np", ".", "where", "(", "subset", "[", "j2", ",", ":", "-", "2", ",", "0", "]", "==", "connection_all", "[", "k", "]", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# c1, c2\u5206\u522b\u662f\u5f53\u524dlimb\u8fde\u63a5\u5230j1\u4eba\u7684\u7b2cc1\u4e2a\u5173\u8282\u70b9\uff0cj2\u4eba\u7684\u7b2cc2\u4e2a\u5173\u8282\u70b9", "\n", "", "c1", "=", "int", "(", "c1", "[", "0", "]", ")", "\n", "c2", "=", "int", "(", "c2", "[", "0", "]", ")", "\n", "assert", "c1", "!=", "c2", ",", "\"an candidate keypoint is used twice, shared by two people\"", "\n", "\n", "# \u5982\u679c\u5f53\u524d\u8003\u5bdf\u7684limb\u7f6e\u4fe1\u5ea6\u6bd4\u5df2\u7ecf\u5b58\u5728\u7684\u4e24\u4e2a\u4eba\u8fde\u63a5\u7684\u7f6e\u4fe1\u5ea6\u5c0f\uff0c\u5219\u8df3\u8fc7\uff0c\u5426\u5219\u5220\u9664\u5df2\u5b58\u5728\u7684\u4e0d\u53ef\u4fe1\u7684\u8fde\u63a5\u8282\u70b9\u3002", "\n", "if", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "<", "subset", "[", "j1", "]", "[", "c1", "]", "[", "1", "]", "and", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "<", "subset", "[", "j2", "]", "[", "c2", "]", "[", "1", "]", ":", "\n", "                            ", "continue", "# the trick here is useful", "\n", "\n", "", "small_j", "=", "j1", "\n", "big_j", "=", "j2", "\n", "remove_c", "=", "c1", "\n", "\n", "if", "subset", "[", "j1", "]", "[", "c1", "]", "[", "1", "]", ">", "subset", "[", "j2", "]", "[", "c2", "]", "[", "1", "]", ":", "\n", "                            ", "small_j", "=", "j2", "\n", "big_j", "=", "j1", "\n", "remove_c", "=", "c2", "\n", "# \u5220\u9664\u548c\u5f53\u524dlimb\u6709\u8fde\u63a5,\u5e76\u4e14\u7f6e\u4fe1\u5ea6\u4f4e\u7684\u90a3\u4e2a\u4eba\u7684\u8282\u70b9", "\n", "", "if", "params", "[", "'remove_recon'", "]", ">", "0", ":", "\n", "                            ", "subset", "[", "small_j", "]", "[", "-", "2", "]", "[", "0", "]", "-=", "candidate", "[", "subset", "[", "small_j", "]", "[", "remove_c", "]", "[", "0", "]", ".", "astype", "(", "int", ")", ",", "2", "]", "+", "subset", "[", "small_j", "]", "[", "remove_c", "]", "[", "1", "]", "\n", "subset", "[", "small_j", "]", "[", "remove_c", "]", "[", "0", "]", "=", "-", "1", "\n", "subset", "[", "small_j", "]", "[", "remove_c", "]", "[", "1", "]", "=", "-", "1", "\n", "subset", "[", "small_j", "]", "[", "-", "1", "]", "[", "0", "]", "-=", "1", "\n", "\n", "# if find no partA in the subset, create a new subset", "\n", "# \u5982\u679c\u80a2\u4f53\u7ec4\u6210\u7684\u5173\u8282\u70b9A,B\u6ca1\u6709\u88ab\u8fde\u63a5\u5230\u67d0\u4e2a\u4eba\u4f53\u5219\u7ec4\u6210\u65b0\u7684\u4eba\u4f53", "\n", "# ------------------------------------------------------------------", "\n", "#    1.Sort each possible connection by its score.", "\n", "#    2.The connection with the highest score is indeed a final connection.", "\n", "#    3.Move to next possible connection. If no parts of this connection have", "\n", "#    been assigned to a final connection before, this is a final connection.", "\n", "#    \u7b2c\u4e09\u70b9\u662f\u8bf4\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u53ef\u80fd\u7684\u8fde\u63a5\u6ca1\u6709\u4e0e\u4e4b\u524d\u7684\u8fde\u63a5\u6709\u5171\u4eab\u7aef\u70b9\u7684\u8bdd\uff0c\u4f1a\u88ab\u89c6\u4e3a\u6700\u7ec8\u7684\u8fde\u63a5\uff0c\u52a0\u5165row", "\n", "#    4.Repeat the step 3 until we are done.", "\n", "# \u8bf4\u660e\u89c1\uff1a\u3000https://arvrjourney.com/human-pose-estimation-using-openpose-with-tensorflow-part-2-e78ab9104fc8", "\n", "\n", "", "", "", "elif", "not", "found", "and", "k", "<", "len", "(", "limbSeq", ")", ":", "\n", "# Fixme: \u68c0\u67e5\u4e00\u4e0b\u662f\u5426\u6b63\u786e", "\n", "#  \u539f\u59cb\u7684\u65f6\u5019\u662f k<18,\u56e0\u4e3a\u6211\u52a0\u4e86limb\uff0c\u6240\u4ee5\u662f24,\u56e0\u4e3a\u771f\u6b63\u7684limb\u662f0~16\uff0c\u6700\u540e\u4e24\u4e2a17,18\u662f\u989d\u5916\u7684\u4e0d\u662flimb", "\n", "#  \u4f46\u662f\u540e\u9762\u753blimb\u7684\u65f6\u5019\u6ca1\u6709\u628a\u9f3b\u5b50\u548c\u773c\u775b\u8033\u6735\u7684\u8fde\u7ebf\u753b\u4e0a\uff0c\u8981\u6539\u8fdb", "\n", "                    ", "row", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "20", ",", "2", ")", ")", "\n", "row", "[", "indexA", "]", "[", "0", "]", "=", "partAs", "[", "i", "]", "\n", "row", "[", "indexA", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "row", "[", "indexB", "]", "[", "0", "]", "=", "partBs", "[", "i", "]", "\n", "row", "[", "indexB", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "row", "[", "-", "1", "]", "[", "0", "]", "=", "2", "\n", "row", "[", "-", "1", "]", "[", "1", "]", "=", "connection_all", "[", "k", "]", "[", "i", "]", "[", "-", "1", "]", "# \u8fd9\u4e00\u4f4d\u7528\u6765\u8bb0\u5f55\u4e0a\u8f6e\u8fde\u63a5limb\u65f6\u7684\u957f\u5ea6\uff0c\u7528\u6765\u4f5c\u4e3a\u4e0b\u4e00\u8f6e\u8fde\u63a5\u7684\u5148\u9a8c\u77e5\u8bc6", "\n", "row", "[", "-", "2", "]", "[", "0", "]", "=", "sum", "(", "candidate", "[", "connection_all", "[", "k", "]", "[", "i", ",", ":", "2", "]", ".", "astype", "(", "int", ")", ",", "2", "]", ")", "+", "connection_all", "[", "k", "]", "[", "i", "]", "[", "2", "]", "\n", "# \u4e24\u4e2a\u7aef\u70b9\u7684\u7f6e\u4fe1\u5ea6+limb\u8fde\u63a5\u7684\u7f6e\u4fe1\u5ea6", "\n", "# print('create a new subset:  ', row, '\\t')", "\n", "row", "=", "row", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "# \u4e3a\u4e86\u8fdb\u884cconcatenate\uff0c\u9700\u8981\u63d2\u5165\u4e00\u4e2a\u8f74", "\n", "subset", "=", "np", ".", "concatenate", "(", "(", "subset", ",", "row", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# delete some rows of subset which has few parts occur", "\n", "", "", "", "", "deleteIdx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "subset", ")", ")", ":", "\n", "        ", "if", "subset", "[", "i", "]", "[", "-", "1", "]", "[", "0", "]", "<", "4", "or", "subset", "[", "i", "]", "[", "-", "2", "]", "[", "0", "]", "/", "subset", "[", "i", "]", "[", "-", "1", "]", "[", "\n", "0", "]", "<", "0.45", ":", "# (params['thre1'] + params['thre2']) / 2:  # todo: tune, it matters much!", "\n", "            ", "deleteIdx", ".", "append", "(", "i", ")", "\n", "", "", "subset", "=", "np", ".", "delete", "(", "subset", ",", "deleteIdx", ",", "axis", "=", "0", ")", "\n", "\n", "canvas", "=", "cv2", ".", "imread", "(", "input_image", ")", "# B,G,R order", "\n", "# canvas = oriImg", "\n", "keypoints", "=", "[", "]", "\n", "\n", "for", "s", "in", "subset", "[", "...", ",", "0", "]", ":", "\n", "        ", "keypoint_indexes", "=", "s", "[", ":", "18", "]", "# \u5b9a\u4e49\u7684keypoint\u4e00\u5171\u670918\u4e2a", "\n", "person_keypoint_coordinates", "=", "[", "]", "\n", "for", "index", "in", "keypoint_indexes", ":", "\n", "            ", "if", "index", "==", "-", "1", ":", "\n", "# \"No candidate for keypoint\" # \u6807\u5fd7\u4e3a-1\u7684part\u662f\u6ca1\u6709\u68c0\u6d4b\u5230\u7684", "\n", "                ", "X", ",", "Y", "=", "0", ",", "0", "\n", "", "else", ":", "\n", "                ", "X", ",", "Y", "=", "candidate", "[", "index", ".", "astype", "(", "int", ")", "]", "[", ":", "2", "]", "\n", "", "person_keypoint_coordinates", ".", "append", "(", "(", "X", ",", "Y", ")", ")", "\n", "", "person_keypoint_coordinates_coco", "=", "[", "None", "]", "*", "17", "\n", "\n", "for", "dt_index", ",", "gt_index", "in", "dt_gt_mapping", ".", "items", "(", ")", ":", "\n", "            ", "if", "gt_index", "is", "None", ":", "\n", "                ", "continue", "\n", "", "person_keypoint_coordinates_coco", "[", "gt_index", "]", "=", "person_keypoint_coordinates", "[", "dt_index", "]", "\n", "\n", "", "keypoints", ".", "append", "(", "(", "person_keypoint_coordinates_coco", ",", "1", "-", "1.0", "/", "s", "[", "-", "2", "]", ")", ")", "# s[19] is the score", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "keypoints", ")", ")", ":", "\n", "        ", "print", "(", "'the {}th keypoint detection result is : '", ".", "format", "(", "i", ")", ",", "keypoints", "[", "i", "]", ")", "\n", "\n", "# \u753b\u6240\u6709\u7684\u5cf0\u503c", "\n", "# for i in range(18):", "\n", "#     #     rgba = np.array(cmap(1 - i/18. - 1./36))", "\n", "#     #     rgba[0:3] *= 255", "\n", "#     for j in range(len(all_peaks[i])):  # all_peaks\u4fdd\u5b58\u4e86\u5750\u6807\uff0cscore\u4ee5\u53caid", "\n", "#         # \u6ce8\u610fx,y\u5750\u6807\u8c01\u5728\u524d\u8c01\u5728\u540e\uff0c\u5728\u8fd9\u4e2aproject\u4e2d\u6709\u70b9\u6df7\u4e71", "\n", "#         cv2.circle(canvas, all_peaks[i][j][0:2], 3, colors[i], thickness=-1)", "\n", "\n", "# \u753b\u6240\u6709\u7684\u9aa8\u67b6", "\n", "", "color_board", "=", "[", "0", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", "\n", "color_idx", "=", "0", "\n", "for", "i", "in", "draw_list", ":", "# \u753b\u51fa18\u4e2alimb\u3000Fixme\uff1a\u6211\u8bbe\u8ba1\u4e8625\u4e2alimb,\u753b\u7684limb\u987a\u5e8f\u9700\u8981\u8c03\u6574\uff0c\u76f8\u5e94color\u6570\u4e5f\u8981\u589e\u52a0", "\n", "        ", "for", "n", "in", "range", "(", "len", "(", "subset", ")", ")", ":", "\n", "            ", "index", "=", "subset", "[", "n", "]", "[", "np", ".", "array", "(", "limbSeq", "[", "i", "]", ")", "]", "[", "...", ",", "0", "]", "\n", "if", "-", "1", "in", "index", ":", "# \u6709-1\u8bf4\u660e\u6ca1\u6709\u5bf9\u5e94\u7684\u5173\u8282\u70b9\u4e0e\u4e4b\u76f8\u8fde,\u5373\u6709\u4e00\u4e2a\u7c7b\u578b\u7684part\u6ca1\u6709\u7f3a\u5931\uff0c\u65e0\u6cd5\u8fde\u63a5\u6210limb", "\n", "                ", "continue", "\n", "# \u5728\u4e0a\u4e00\u4e2acell\u4e2d\u6709\u3000canvas = cv2.imread(test_image) # B,G,R order", "\n", "", "cur_canvas", "=", "canvas", ".", "copy", "(", ")", "\n", "Y", "=", "candidate", "[", "index", ".", "astype", "(", "int", ")", ",", "0", "]", "\n", "X", "=", "candidate", "[", "index", ".", "astype", "(", "int", ")", ",", "1", "]", "\n", "mX", "=", "np", ".", "mean", "(", "X", ")", "\n", "mY", "=", "np", ".", "mean", "(", "Y", ")", "\n", "length", "=", "(", "(", "X", "[", "0", "]", "-", "X", "[", "1", "]", ")", "**", "2", "+", "(", "Y", "[", "0", "]", "-", "Y", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "angle", "=", "math", ".", "degrees", "(", "math", ".", "atan2", "(", "X", "[", "0", "]", "-", "X", "[", "1", "]", ",", "Y", "[", "0", "]", "-", "Y", "[", "1", "]", ")", ")", "\n", "polygon", "=", "cv2", ".", "ellipse2Poly", "(", "(", "int", "(", "mY", ")", ",", "int", "(", "mX", ")", ")", ",", "(", "int", "(", "length", "/", "2", ")", ",", "3", ")", ",", "int", "(", "angle", ")", ",", "0", ",", "\n", "360", ",", "1", ")", "\n", "\n", "cv2", ".", "circle", "(", "cur_canvas", ",", "(", "int", "(", "Y", "[", "0", "]", ")", ",", "int", "(", "X", "[", "0", "]", ")", ")", ",", "4", ",", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "thickness", "=", "2", ")", "\n", "cv2", ".", "circle", "(", "cur_canvas", ",", "(", "int", "(", "Y", "[", "1", "]", ")", ",", "int", "(", "X", "[", "1", "]", ")", ")", ",", "4", ",", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "thickness", "=", "2", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "cur_canvas", ",", "polygon", ",", "colors", "[", "color_board", "[", "color_idx", "]", "]", ")", "\n", "canvas", "=", "cv2", ".", "addWeighted", "(", "canvas", ",", "0.4", ",", "cur_canvas", ",", "0.6", ",", "0", ")", "\n", "", "color_idx", "+=", "1", "\n", "", "return", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.__init__": [[415, 420], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update": [[421, 426], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.train": [[226, 325], ["print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.train", "print", "train_distributed.AverageMeter", "train_distributed.AverageMeter", "time.time", "enumerate", "train_sampler.set_epoch", "train_distributed.adjust_learning_rate", "optimizer.zero_grad", "model", "optimizer.step", "os.makedirs", "open", "open.write", "open.flush", "open.close", "len", "model.item", "print", "amp.scale_loss", "scaled_loss.backward", "train_distributed.AverageMeter.update", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_distributed.AverageMeter.update", "time.time", "os.path.join", "float", "print", "torch.save", "torch.save", "torch.save", "torch.save", "target_tensor.cuda", "train_distributed.reduce_tensor", "to_python_float", "images.size", "print", "model.module.state_dict", "optimizer.state_dict", "time.time", "len", "str"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_parallel.train", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.adjust_learning_rate", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.Reduce.backward", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.reduce_tensor"], ["", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\n ############################# Train phase, Epoch: {} #############################'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "# DistributedSampler \u4e2d\u8bb0\u5f55\u76ee\u524d\u7684 epoch \u6570\uff0c \u56e0\u4e3a\u91c7\u6837\u5668\u662f\u6839\u636e epoch \u6765\u51b3\u5b9a\u5982\u4f55\u6253\u4e71\u5206\u914d\u6570\u636e\u8fdb\u5404\u4e2a\u8fdb\u7a0b", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "# scheduler.step()  use 'adjust learning rate' instead", "\n", "\n", "# adjust_learning_rate_cyclic(optimizer, epoch, start_epoch)  # start_epoch", "\n", "", "print", "(", "'\\nLearning rate at this epoch is: %0.9f\\n'", "%", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "# scheduler.get_lr()[0]", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "target_tuple", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# # ##############  Use schedule step or fun of 'adjust learning rate' #####################", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "use_warmup", "=", "args", ".", "warmup", ")", "\n", "# print('\\nLearning rate at this epoch is: %0.9f\\n' % optimizer.param_groups[0]['lr'])  # scheduler.get_lr()[0]", "\n", "# # ##########################################################", "\n", "if", "use_cuda", ":", "\n", "#  \u8fd9\u5141\u8bb8\u5f02\u6b65 GPU \u590d\u5236\u6570\u636e\u4e5f\u5c31\u662f\u8bf4\u8ba1\u7b97\u548c\u6570\u636e\u4f20\u8f93\u53ef\u4ee5\u540c\u65f6\u8fdb.", "\n", "            ", "target_tuple", "=", "[", "target_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "target_tensor", "in", "target_tuple", "]", "\n", "\n", "# target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]", "\n", "", "images", ",", "mask_misses", ",", "heatmaps", "=", "target_tuple", "# , offsets, mask_offsets", "\n", "# images = Variable(images)", "\n", "# loc_targets = Variable(loc_targets)", "\n", "# conf_targets = Variable(conf_targets)", "\n", "optimizer", ".", "zero_grad", "(", ")", "# zero the gradient buff", "\n", "loss", "=", "model", "(", "target_tuple", ")", "\n", "\n", "if", "loss", ".", "item", "(", ")", ">", "2e5", ":", "# try to rescue the gradient explosion", "\n", "            ", "print", "(", "\"\\nOh My God ! \\nLoss is abnormal, drop this batch !\"", ")", "\n", "continue", "\n", "\n", "", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "\n", "# torch.nn.utils.clip_grad_norm_(amp.master_params(optimizer), args.max_grad_norm)  # fixme: \u53ef\u80fd\u662f\u8fd9\u4e2a\u7684\u95ee\u9898\u5417\uff1f", "\n", "", "optimizer", ".", "step", "(", ")", "# TODO\uff1a\u53ef\u4ee5\u4f7f\u7528\u7d2f\u52a0\u7684loss\u53d8\u76f8\u589e\u5927batch size\uff0c\u4f46\u5bf9\u4e8ebn\u5c42\u9700\u8981\u51cf\u5c11\u9ed8\u8ba4\u7684momentum", "\n", "\n", "# train_loss += loss.item()  # \u7d2f\u52a0\u7684loss !", "\n", "# \u4f7f\u7528loss += loss.detach()\u6765\u83b7\u53d6\u4e0d\u9700\u8981\u68af\u5ea6\u56de\u4f20\u7684\u90e8\u5206\u3002", "\n", "# \u6216\u8005\u4f7f\u7528loss.item()\u76f4\u63a5\u83b7\u5f97\u6240\u5bf9\u5e94\u7684python\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4ec5\u4ec5\u9650\u4e8eonly one element tensors can be converted to Python scalars", "\n", "if", "batch_idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "# Every print_freq iterations, check the loss, accuracy, and speed.", "\n", "# For best performance, it doesn't make sense to print these metrics every", "\n", "# iteration, since they incur an allreduce and some host<->device syncs.", "\n", "# print \u4f1a\u89e6\u53d1allreduce\uff0c\u800c\u8fd9\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u8d39\u65f6", "\n", "            ", "if", "args", ".", "distributed", ":", "\n", "# We manually reduce and average the metrics across processes. In-place reduce tensor.", "\n", "                ", "reduced_loss", "=", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "reduced_loss", "=", "loss", ".", "data", "\n", "\n", "# to_python_float incurs a host<->device sync", "\n", "", "losses", ".", "update", "(", "to_python_float", "(", "reduced_loss", ")", ",", "images", ".", "size", "(", "0", ")", ")", "# update needs average and number", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "# \u56e0\u4e3a\u6240\u6709GPU\u64cd\u4f5c\u662f\u5f02\u6b65\u7684\uff0c\u5e94\u7b49\u5f85\u5f53\u524d\u8bbe\u5907\u4e0a\u6240\u6709\u6d41\u4e2d\u7684\u6240\u6709\u6838\u5fc3\u5b8c\u6210\uff0c\u6d4b\u8bd5\u7684\u65f6\u95f4\u624d\u6b63\u786e", "\n", "batch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end", ")", "/", "args", ".", "print_freq", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "# Print them in the Process 0", "\n", "                ", "print", "(", "'==================> Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Speed {3:.3f} ({4:.3f})\\t'", "\n", "'Loss {loss.val:.10f} ({loss.avg:.4f}) <================ \\t'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "\n", "args", ".", "world_size", "*", "opt", ".", "batch_size", "/", "batch_time", ".", "val", ",", "\n", "args", ".", "world_size", "*", "opt", ".", "batch_size", "/", "batch_time", ".", "avg", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "", "global", "best_loss", "\n", "# DistributedSampler\u63a7\u5236\u8fdb\u5165\u5206\u5e03\u5f0f\u73af\u5883\u7684\u6570\u636e\u96c6\u4ee5\u786e\u4fdd\u6a21\u578b\u4e0d\u662f\u5bf9\u540c\u4e00\u4e2a\u5b50\u6570\u636e\u96c6\u8bad\u7ec3\uff0c\u4ee5\u8fbe\u5230\u8bad\u7ec3\u76ee\u6807\u3002", "\n", "# train_loss /= (len(train_loader))  # Each GPU process can only see 1/(world_size) training samples per epoch", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "# Write the log file each epoch.", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", "+", "checkpoint_path", ",", "'log'", ")", ",", "'a+'", ")", "\n", "logger", ".", "write", "(", "'\\nEpoch {}\\ttrain_loss: {}'", ".", "format", "(", "epoch", ",", "losses", ".", "avg", ")", ")", "# validation\u65f6\u4e0d\u8981\\n\u6362\u884c", "\n", "logger", ".", "flush", "(", ")", "\n", "logger", ".", "close", "(", ")", "\n", "\n", "if", "losses", ".", "avg", "<", "float", "(", "'inf'", ")", ":", "# < best_loss", "\n", "# Update the best_loss if the average loss drops", "\n", "            ", "best_loss", "=", "losses", ".", "avg", "\n", "print", "(", "'\\nSaving model checkpoint...\\n'", ")", "\n", "state", "=", "{", "\n", "# not posenet.state_dict(). then, we don't ge the \"module\" string to begin with", "\n", "'weights'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_weight'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "# 'amp': amp.state_dict(),", "\n", "'train_loss'", ":", "losses", ".", "avg", ",", "\n", "'epoch'", ":", "epoch", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "'./'", "+", "checkpoint_path", "+", "'/PoseNet_'", "+", "str", "(", "epoch", ")", "+", "'_epoch.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.test": [[327, 380], ["print", "model.eval", "train_distributed.AverageMeter", "train_distributed.AverageMeter", "time.time", "enumerate", "train_distributed.AverageMeter.update", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_distributed.AverageMeter.update", "time.time", "os.makedirs", "open", "open.write", "open.flush", "open.close", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "train_distributed.reduce_tensor", "to_python_float", "images.size", "print", "os.path.join", "target_tensor.cuda", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.AverageMeter.update", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.reduce_tensor"], ["", "", "", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\n ############################# Test phase, Epoch: {} #############################'", ".", "format", "(", "epoch", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "# DistributedSampler \u4e2d\u8bb0\u5f55\u76ee\u524d\u7684 epoch \u6570\uff0c \u56e0\u4e3a\u91c7\u6837\u5668\u662f\u6839\u636e epoch \u6765\u51b3\u5b9a\u5982\u4f55\u6253\u4e71\u5206\u914d\u6570\u636e\u8fdb\u5404\u4e2a\u8fdb\u7a0b", "\n", "# if args.distributed:", "\n", "#     val_sampler.set_epoch(epoch)  # \u9a8c\u8bc1\u96c6\u592a\u5c0f\uff0c\u4e0d\u591f4\u4e2a\u5212\u5206", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "target_tuple", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# images.requires_grad_()", "\n", "# loc_targets.requires_grad_()", "\n", "# conf_targets.requires_grad_()", "\n", "        ", "if", "use_cuda", ":", "\n", "#  \u8fd9\u5141\u8bb8\u5f02\u6b65 GPU \u590d\u5236\u6570\u636e\u4e5f\u5c31\u662f\u8bf4\u8ba1\u7b97\u548c\u6570\u636e\u4f20\u8f93\u53ef\u4ee5\u540c\u65f6\u8fdb.", "\n", "            ", "target_tuple", "=", "[", "target_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "target_tensor", "in", "target_tuple", "]", "\n", "\n", "# target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]", "\n", "", "images", ",", "mask_misses", ",", "heatmaps", "=", "target_tuple", "# , offsets, mask_offsets", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "loss", "=", "model", "(", "target_tuple", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "# We manually reduce and average the metrics across processes. In-place reduce tensor.", "\n", "            ", "reduced_loss", "=", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "reduced_loss", "=", "loss", ".", "data", "\n", "\n", "# to_python_float incurs a host<->device sync", "\n", "", "losses", ".", "update", "(", "to_python_float", "(", "reduced_loss", ")", ",", "images", ".", "size", "(", "0", ")", ")", "# update needs average and number", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "# \u56e0\u4e3a\u6240\u6709GPU\u64cd\u4f5c\u662f\u5f02\u6b65\u7684\uff0c\u5e94\u7b49\u5f85\u5f53\u524d\u8bbe\u5907\u4e0a\u6240\u6709\u6d41\u4e2d\u7684\u6240\u6709\u6838\u5fc3\u5b8c\u6210\uff0c\u6d4b\u8bd5\u7684\u65f6\u95f4\u624d\u6b63\u786e", "\n", "batch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "# Print them in the Process 0", "\n", "            ", "print", "(", "'==================>Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Speed {2:.3f} ({3:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "batch_idx", ",", "len", "(", "val_loader", ")", ",", "\n", "args", ".", "world_size", "*", "opt", ".", "batch_size", "/", "batch_time", ".", "val", ",", "\n", "args", ".", "world_size", "*", "opt", ".", "batch_size", "/", "batch_time", ".", "avg", ",", "\n", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "if", "args", ".", "local_rank", "==", "0", ":", "# Print them in the Process 0", "\n", "# Write the log file each epoch.", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", "+", "checkpoint_path", ",", "'log'", ")", ",", "'a+'", ")", "\n", "logger", ".", "write", "(", "'\\tval_loss: {}'", ".", "format", "(", "losses", ".", "avg", ")", ")", "# validation\u65f6\u4e0d\u8981\\n\u6362\u884c", "\n", "logger", ".", "flush", "(", ")", "\n", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.adjust_learning_rate": [[382, 401], ["float"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "step", ",", "len_epoch", ",", "use_warmup", "=", "False", ")", ":", "\n", "    ", "factor", "=", "epoch", "//", "15", "\n", "\n", "if", "epoch", ">=", "78", ":", "\n", "        ", "factor", "=", "(", "epoch", "-", "78", ")", "//", "5", "\n", "\n", "", "lr", "=", "opt", ".", "learning_rate", "*", "args", ".", "world_size", "*", "(", "0.2", "**", "factor", ")", "\n", "\n", "\"\"\"Warmup\"\"\"", "\n", "if", "use_warmup", ":", "\n", "        ", "if", "epoch", "<", "3", ":", "\n", "# print('=============>  Using warm-up learning rate....')", "\n", "            ", "lr", "=", "lr", "*", "float", "(", "1", "+", "step", "+", "epoch", "*", "len_epoch", ")", "/", "(", "3.", "*", "len_epoch", ")", "# len_epoch=len(train_loader)", "\n", "\n", "# if(args.local_rank == 0):", "\n", "#     print(\"epoch = {}, step = {}, lr = {}\".format(epoch, step, lr))", "\n", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.adjust_learning_rate_cyclic": [[403, 410], ["round"], "function", ["None"], ["", "", "def", "adjust_learning_rate_cyclic", "(", "optimizer", ",", "current_epoch", ",", "start_epoch", ",", "swa_freqent", "=", "5", ",", "lr_max", "=", "4e-5", ",", "lr_min", "=", "2e-5", ")", ":", "\n", "    ", "epoch", "=", "current_epoch", "-", "start_epoch", "\n", "\n", "lr", "=", "lr_max", "-", "(", "lr_max", "-", "lr_min", ")", "/", "(", "swa_freqent", "-", "1", ")", "*", "(", "epoch", "-", "epoch", "//", "swa_freqent", "*", "swa_freqent", ")", "\n", "lr", "=", "round", "(", "lr", ",", "8", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_distributed.reduce_tensor": [[428, 439], ["tensor.clone", "torch.all_reduce"], "function", ["None"], ["", "", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "# Reduces the tensor data across all machines", "\n", "# If we print the tensor, we can get:", "\n", "# tensor(334.4330, device='cuda:1') *********************, here is cuda:  cuda:1", "\n", "# tensor(359.1895, device='cuda:3') *********************, here is cuda:  cuda:3", "\n", "# tensor(263.3543, device='cuda:2') *********************, here is cuda:  cuda:2", "\n", "# tensor(340.1970, device='cuda:0') *********************, here is cuda:  cuda:0", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "# The function operates in-place.", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "rt", "/=", "args", ".", "world_size", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_parallel.train": [[122, 182], ["print", "posenet.train", "scheduler.step", "print", "enumerate", "len", "os.makedirs", "open", "open.write", "open.flush", "open.close", "optimizer.zero_grad", "posenet", "loss.backward", "optimizer.step", "loss.item", "print", "os.path.join", "print", "torch.save", "torch.save", "torch.save", "torch.sum", "torch.sum", "torch.sum", "loss.item", "print", "loss.zero_", "len", "posenet.module.state_dict", "optimizer.state_dict", "target_tensor.cuda", "loss.item", "str"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_parallel.train", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.Reduce.backward"], ["", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\n ############################# Train phase, Epoch: {} #############################'", ".", "format", "(", "epoch", ")", ")", "\n", "posenet", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "scheduler", ".", "step", "(", ")", "\n", "print", "(", "'\\nLearning rate at this epoch is: %0.9f\\n'", "%", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "# scheduler.get_lr()[0]", "\n", "\n", "for", "batch_idx", ",", "target_tuple", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# images.requires_grad_()", "\n", "# loc_targets.requires_grad_()", "\n", "# conf_targets.requires_grad_()", "\n", "        ", "if", "use_cuda", ":", "\n", "            ", "target_tuple", "=", "[", "target_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "target_tensor", "in", "target_tuple", "]", "\n", "\n", "# target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]", "\n", "", "images", ",", "mask_misses", ",", "heatmaps", "=", "target_tuple", "# , offsets, mask_offsets", "\n", "# images = Variable(images)", "\n", "# loc_targets = Variable(loc_targets)", "\n", "# conf_targets = Variable(conf_targets)", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# zero the gradient buff", "\n", "\n", "loss_ngpu", "=", "posenet", "(", "target_tuple", ")", "# reduce losses of all GPUs on cuda 0", "\n", "loss", "=", "torch", ".", "sum", "(", "loss_ngpu", ")", "/", "opt", ".", "batch_size", "\n", "# print(loc_preds.requires_grad)", "\n", "# print(conf_preds.requires_grad)", "\n", "if", "loss", ".", "item", "(", ")", ">", "1e6", ":", "\n", "            ", "print", "(", "\"\\nLoss is abnormal, drop this batch !\"", ")", "\n", "loss", ".", "zero_", "(", ")", "\n", "continue", "\n", "# print(loss.requires_grad)", "\n", "", "loss", ".", "backward", "(", ")", "# retain_graph=True", "\n", "# torch.nn.utils.clip_grad_norm(posenet.parameters(), args.max_grad_norm)", "\n", "optimizer", ".", "step", "(", ")", "# TODO\uff1a\u53ef\u4ee5\u4f7f\u7528\u7d2f\u52a0\u7684loss\u53d8\u76f8\u589e\u5927batch size\uff0c\u4f46\u5bf9\u4e8ebn\u5c42\u9700\u8981\u51cf\u5c11\u9ed8\u8ba4\u7684momentum", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "# \u7d2f\u52a0\u7684loss !", "\n", "# \u4f7f\u7528loss += loss.detach()\u6765\u83b7\u53d6\u4e0d\u9700\u8981\u68af\u5ea6\u56de\u4f20\u7684\u90e8\u5206\u3002", "\n", "# \u6216\u8005\u4f7f\u7528loss.item()\u76f4\u63a5\u83b7\u5f97\u6240\u5bf9\u5e94\u7684python\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4ec5\u4ec5\u9650\u4e8eonly one element tensors can be converted to Python scalars", "\n", "print", "(", "'########################### Epoch:'", ",", "epoch", ",", "', --  batch:'", ",", "batch_idx", ",", "'/'", ",", "len", "(", "train_loader", ")", ",", "',   '", ",", "\n", "'Train loss: %.3f, accumulated average loss: %.3f ##############################'", "%", "(", "loss", ".", "item", "(", ")", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ")", ")", "\n", "\n", "", "global", "best_loss", "\n", "train_loss", "/=", "len", "(", "train_loader", ")", "\n", "\n", "os", ".", "makedirs", "(", "checkpoint_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", "+", "checkpoint_path", ",", "'log'", ")", ",", "'a+'", ")", "\n", "logger", ".", "write", "(", "'\\nEpoch {}\\ttrain_loss: {}'", ".", "format", "(", "epoch", ",", "train_loss", ")", ")", "# validation\u65f6\u4e0d\u8981\\n\u6362\u884c", "\n", "logger", ".", "flush", "(", ")", "\n", "logger", ".", "close", "(", ")", "\n", "if", "train_loss", "<", "best_loss", ":", "\n", "        ", "best_loss", "=", "train_loss", "\n", "print", "(", "'=====> Saving checkpoint...'", ")", "\n", "state", "=", "{", "\n", "# not posenet.state_dict(). then, we don't ge the \"module\" string to begin with", "\n", "'weights'", ":", "posenet", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_weight'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'train_loss'", ":", "train_loss", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "'./'", "+", "checkpoint_path", "+", "'/PoseNet_'", "+", "str", "(", "epoch", ")", "+", "'_epoch.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.None.train_parallel.test": [[184, 226], ["print", "posenet.eval", "os.makedirs", "open", "open.write", "open.flush", "open.close", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "os.path.join", "posenet", "loss.item", "print", "torch.sum", "torch.sum", "torch.sum", "[].cpu().numpy", "output[].transpose", "labels[].transpose", "cv2.resize", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show", "len", "target_tensor.cuda", "v.cpu().numpy", "loss.item", "[].cpu", "v.cpu"], "function", ["None"], ["", "", "def", "test", "(", "epoch", ",", "show_image", "=", "False", ")", ":", "\n", "    ", "print", "(", "'\\nTest phase, Epoch: {}'", ".", "format", "(", "epoch", ")", ")", "\n", "posenet", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# will save gpu memory and speed up", "\n", "        ", "test_loss", "=", "0", "\n", "for", "batch_idx", ",", "target_tuple", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# images.requires_grad_()", "\n", "# loc_targets.requires_grad_()", "\n", "# conf_targets.requires_grad_()", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "target_tuple", "=", "[", "target_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "target_tensor", "in", "target_tuple", "]", "\n", "\n", "# target tensor shape: [8,512,512,3], [8, 1, 128,128], [8,43,128,128], [8,36,128,128], [8,36,128,128]", "\n", "", "images", ",", "mask_misses", ",", "heatmaps", "=", "target_tuple", "# , offsets, mask_offsets", "\n", "# images = Variable(images)", "\n", "# loc_targets = Variable(loc_targets)", "\n", "# conf_targets = Variable(conf_targets)", "\n", "\n", "output_tuple", ",", "loss_ngpu", "=", "posenet", "(", "target_tuple", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss_ngpu", ")", "/", "opt", ".", "batch_size", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "# \u7d2f\u52a0\u7684loss", "\n", "print", "(", "'  Test loss : %.3f, accumulated average loss: %.3f'", "%", "(", "loss", ".", "item", "(", ")", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ")", ")", "\n", "if", "show_image", ":", "\n", "                ", "image", ",", "mask_miss", ",", "labels", "=", "[", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "v", "in", "target_tuple", "]", "# , offsets, mask_offset", "\n", "output", "=", "output_tuple", "[", "-", "1", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# different scales can be shown", "\n", "# show the generated ground truth", "\n", "img", "=", "image", "[", "0", "]", "\n", "output", "=", "output", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "labels", "=", "labels", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "output", ".", "shape", "[", ":", "2", "]", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "plt", ".", "imshow", "(", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ")", "# Opencv image format: BGR", "\n", "plt", ".", "imshow", "(", "output", "[", ":", ",", ":", ",", "32", "]", ",", "alpha", "=", "0.5", ")", "# mask_all", "\n", "# plt.imshow(mask_offset[:, :, 2], alpha=0.5)  # mask_all", "\n", "plt", ".", "show", "(", ")", "\n", "t", "=", "2", "\n", "\n", "", "", "", "os", ".", "makedirs", "(", "checkpoint_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", "+", "checkpoint_path", ",", "'log'", ")", ",", "'a+'", ")", "\n", "logger", ".", "write", "(", "'\\tval_loss: {}'", ".", "format", "(", "test_loss", "/", "len", "(", "val_loader", ")", ")", ")", "# validation\u65f6\u4e0d\u8981\\n\u6362\u884c", "\n", "logger", ".", "flush", "(", ")", "\n", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.config_reader.config_reader": [[6, 38], ["configobj.ConfigObj", "int", "int", "int", "int", "int", "int", "float", "float", "list", "list", "float", "float", "float", "float", "int", "int", "float", "int", "float", "float", "int", "map", "map"], "function", ["None"], ["def", "config_reader", "(", ")", ":", "\n", "    ", "config", "=", "ConfigObj", "(", "'/home/jia/Desktop/Improved-Body-Parts/utils/config'", ")", "\n", "\n", "param", "=", "config", "[", "'param'", "]", "# \u7ee7\u627f\u4e86dict\u7684\u4e00\u79cd\u5b57\u5178\u7c7b\u578b", "\n", "model_id", "=", "param", "[", "'modelID'", "]", "\n", "model", "=", "config", "[", "'models'", "]", "[", "model_id", "]", "# \u56e0\u4e3aconfig\u6587\u4ef6\u4e2d\uff0cmodel\u90e8\u5206\u53c8\u6709\u4e00\u4e2a[[1]]\u5206\u652f\uff0c\u6240\u4ee5\u53c8\u52a0\u4e0a\u4e86model_id=1\u7684\u7d22\u5f15", "\n", "model", "[", "'boxsize'", "]", "=", "int", "(", "model", "[", "'boxsize'", "]", ")", "\n", "model", "[", "'stride'", "]", "=", "int", "(", "model", "[", "'stride'", "]", ")", "\n", "model", "[", "'max_downsample'", "]", "=", "int", "(", "model", "[", "'max_downsample'", "]", ")", "\n", "model", "[", "'padValue'", "]", "=", "int", "(", "model", "[", "'padValue'", "]", ")", "\n", "#param['starting_range'] = float(param['starting_range'])", "\n", "#param['ending_range'] = float(param['ending_range'])", "\n", "param", "[", "'remove_recon'", "]", "=", "int", "(", "param", "[", "'remove_recon'", "]", ")", "\n", "param", "[", "'use_gpu'", "]", "=", "int", "(", "param", "[", "'use_gpu'", "]", ")", "\n", "param", "[", "'starting_range'", "]", "=", "float", "(", "param", "[", "'starting_range'", "]", ")", "\n", "param", "[", "'ending_range'", "]", "=", "float", "(", "param", "[", "'ending_range'", "]", ")", "\n", "param", "[", "'scale_search'", "]", "=", "list", "(", "map", "(", "float", ",", "param", "[", "'scale_search'", "]", ")", ")", "# [float(param['scale_search'])]  #     #", "\n", "param", "[", "'rotation_search'", "]", "=", "list", "(", "map", "(", "float", ",", "param", "[", "'rotation_search'", "]", ")", ")", "# [float(param['scale_search'])]  #     #", "\n", "param", "[", "'thre1'", "]", "=", "float", "(", "param", "[", "'thre1'", "]", ")", "\n", "param", "[", "'thre2'", "]", "=", "float", "(", "param", "[", "'thre2'", "]", ")", "\n", "\n", "param", "[", "'connect_ration'", "]", "=", "float", "(", "param", "[", "'connect_ration'", "]", ")", "\n", "param", "[", "'connection_tole'", "]", "=", "float", "(", "param", "[", "'connection_tole'", "]", ")", "\n", "param", "[", "'mid_num'", "]", "=", "int", "(", "param", "[", "'mid_num'", "]", ")", "\n", "param", "[", "'min_num'", "]", "=", "int", "(", "param", "[", "'min_num'", "]", ")", "\n", "param", "[", "'len_rate'", "]", "=", "float", "(", "param", "[", "'len_rate'", "]", ")", "\n", "param", "[", "'offset_radius'", "]", "=", "int", "(", "param", "[", "'offset_radius'", "]", ")", "\n", "param", "[", "'crop_ratio'", "]", "=", "float", "(", "param", "[", "'crop_ratio'", "]", ")", "\n", "param", "[", "'bbox_ratio'", "]", "=", "float", "(", "param", "[", "'bbox_ratio'", "]", ")", "\n", "param", "[", "'GPUdeviceNumber'", "]", "=", "int", "(", "param", "[", "'GPUdeviceNumber'", "]", ")", "\n", "\n", "return", "param", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.GaussianSmoothing.__init__": [[124, 164], ["torch.nn.Module.__init__", "isinstance", "isinstance", "torch.meshgrid", "zip", "kernel.repeat.repeat.view", "kernel.repeat.repeat.repeat", "util.GaussianSmoothing.register_buffer", "torch.sum", "torch.arange", "torch.exp", "kernel.repeat.repeat.size", "RuntimeError", "math.sqrt", "kernel.repeat.repeat.dim"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ",", "sigma", ",", "dim", "=", "2", ")", ":", "\n", "        ", "super", "(", "GaussianSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "dim", "\n", "", "if", "isinstance", "(", "sigma", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "sigma", "=", "[", "sigma", "]", "*", "dim", "\n", "\n", "# The gaussian kernel is the product of the", "\n", "# gaussian function of each dimension.", "\n", "", "kernel", "=", "1", "\n", "meshgrids", "=", "torch", ".", "meshgrid", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "size", "in", "kernel_size", "\n", "]", "\n", ")", "\n", "for", "size", ",", "std", ",", "mgrid", "in", "zip", "(", "kernel_size", ",", "sigma", ",", "meshgrids", ")", ":", "\n", "            ", "mean", "=", "(", "size", "-", "1", ")", "/", "2", "\n", "kernel", "*=", "1", "/", "(", "std", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "*", "torch", ".", "exp", "(", "-", "(", "(", "mgrid", "-", "mean", ")", "/", "std", ")", "**", "2", "/", "2", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "", "kernel", "=", "kernel", "/", "torch", ".", "sum", "(", "kernel", ")", "\n", "\n", "# Reshape to depthwise convolutional weight", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "size", "(", ")", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "channels", ",", "*", "[", "1", "]", "*", "(", "kernel", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "self", ".", "groups", "=", "channels", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "dim", "==", "3", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Only 1, 2 and 3 dimensions are supported. Received {}.'", ".", "format", "(", "dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.GaussianSmoothing.forward": [[166, 175], ["util.GaussianSmoothing.conv", "util.GaussianSmoothing.weight.cuda"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Apply gaussian filter to input.\n        Arguments:\n            input (torch.Tensor): Input to apply gaussian filter on.\n        Returns:\n            filtered (torch.Tensor): Filtered output.\n        \"\"\"", "\n", "return", "self", ".", "conv", "(", "input", ",", "weight", "=", "self", ".", "weight", ".", "cuda", "(", ")", ",", "groups", "=", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.getJetColor": [[12, 34], ["numpy.zeros"], "function", ["None"], ["def", "getJetColor", "(", "v", ",", "vmin", ",", "vmax", ")", ":", "\n", "    ", "c", "=", "np", ".", "zeros", "(", "(", "3", ")", ")", "\n", "if", "(", "v", "<", "vmin", ")", ":", "\n", "        ", "v", "=", "vmin", "\n", "", "if", "(", "v", ">", "vmax", ")", ":", "\n", "        ", "v", "=", "vmax", "\n", "", "dv", "=", "vmax", "-", "vmin", "\n", "if", "(", "v", "<", "(", "vmin", "+", "0.125", "*", "dv", ")", ")", ":", "\n", "        ", "c", "[", "0", "]", "=", "256", "*", "(", "0.5", "+", "(", "v", "*", "4", ")", ")", "# B: 0.5 ~ 1", "\n", "", "elif", "(", "v", "<", "(", "vmin", "+", "0.375", "*", "dv", ")", ")", ":", "\n", "        ", "c", "[", "0", "]", "=", "255", "\n", "c", "[", "1", "]", "=", "256", "*", "(", "v", "-", "0.125", ")", "*", "4", "# G: 0 ~ 1", "\n", "", "elif", "(", "v", "<", "(", "vmin", "+", "0.625", "*", "dv", ")", ")", ":", "\n", "        ", "c", "[", "0", "]", "=", "256", "*", "(", "-", "4", "*", "v", "+", "2.5", ")", "# B: 1 ~ 0", "\n", "c", "[", "1", "]", "=", "255", "\n", "c", "[", "2", "]", "=", "256", "*", "(", "4", "*", "(", "v", "-", "0.375", ")", ")", "# R: 0 ~ 1", "\n", "", "elif", "(", "v", "<", "(", "vmin", "+", "0.875", "*", "dv", ")", ")", ":", "\n", "        ", "c", "[", "1", "]", "=", "256", "*", "(", "-", "4", "*", "v", "+", "3.5", ")", "# G: 1 ~ 0", "\n", "c", "[", "2", "]", "=", "255", "\n", "", "else", ":", "\n", "        ", "c", "[", "2", "]", "=", "256", "*", "(", "-", "4", "*", "v", "+", "4.5", ")", "# R: 1 ~ 0.5", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.colorize": [[36, 42], ["numpy.zeros", "range", "range", "util.getJetColor"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.getJetColor"], ["", "def", "colorize", "(", "gray_img", ")", ":", "\n", "    ", "out", "=", "np", ".", "zeros", "(", "gray_img", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "for", "y", "in", "range", "(", "out", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "out", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "out", "[", "y", ",", "x", ",", ":", "]", "=", "getJetColor", "(", "gray_img", "[", "y", ",", "x", "]", ",", "0", ",", "1", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.padRightDownCorner": [[44, 66], ["numpy.tile", "numpy.concatenate", "numpy.tile", "numpy.concatenate", "numpy.tile", "numpy.concatenate", "numpy.tile", "numpy.concatenate"], "function", ["None"], ["", "def", "padRightDownCorner", "(", "img", ",", "stride", ",", "padValue", ")", ":", "\n", "    ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "\n", "pad", "=", "4", "*", "[", "None", "]", "\n", "pad", "[", "0", "]", "=", "0", "# up", "\n", "pad", "[", "1", "]", "=", "0", "# left", "\n", "pad", "[", "2", "]", "=", "0", "if", "(", "h", "%", "stride", "==", "0", ")", "else", "stride", "-", "(", "h", "%", "stride", ")", "# down", "\n", "pad", "[", "3", "]", "=", "0", "if", "(", "w", "%", "stride", "==", "0", ")", "else", "stride", "-", "(", "w", "%", "stride", ")", "# right", "\n", "\n", "img_padded", "=", "img", "\n", "pad_up", "=", "np", ".", "tile", "(", "img_padded", "[", "0", ":", "1", ",", ":", ",", ":", "]", "*", "0", "+", "padValue", ",", "(", "pad", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "img_padded", "=", "np", ".", "concatenate", "(", "(", "pad_up", ",", "img_padded", ")", ",", "axis", "=", "0", ")", "\n", "# \u6ce8\u610f! concatenate \u4e24\u4e2a\u6570\u7ec4\u7684\u987a\u5e8f\u5f88\u91cd\u8981", "\n", "pad_left", "=", "np", ".", "tile", "(", "img_padded", "[", ":", ",", "0", ":", "1", ",", ":", "]", "*", "0", "+", "padValue", ",", "(", "1", ",", "pad", "[", "1", "]", ",", "1", ")", ")", "\n", "img_padded", "=", "np", ".", "concatenate", "(", "(", "pad_left", ",", "img_padded", ")", ",", "axis", "=", "1", ")", "\n", "pad_down", "=", "np", ".", "tile", "(", "img_padded", "[", "-", "2", ":", "-", "1", ",", ":", ",", ":", "]", "*", "0", "+", "padValue", ",", "(", "pad", "[", "2", "]", ",", "1", ",", "1", ")", ")", "\n", "img_padded", "=", "np", ".", "concatenate", "(", "(", "img_padded", ",", "pad_down", ")", ",", "axis", "=", "0", ")", "\n", "pad_right", "=", "np", ".", "tile", "(", "img_padded", "[", ":", ",", "-", "2", ":", "-", "1", ",", ":", "]", "*", "0", "+", "padValue", ",", "(", "1", ",", "pad", "[", "3", "]", ",", "1", ")", ")", "\n", "img_padded", "=", "np", ".", "concatenate", "(", "(", "img_padded", ",", "pad_right", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "img_padded", ",", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.center_pad": [[68, 101], ["int", "int", "numpy.tile", "numpy.concatenate", "numpy.tile", "numpy.concatenate", "numpy.tile", "numpy.concatenate", "numpy.tile", "numpy.concatenate"], "function", ["None"], ["", "def", "center_pad", "(", "image", ",", "stride", ",", "padValue", ")", ":", "\n", "    ", "w", ",", "h", "=", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", "\n", "delta_h", "=", "0", "if", "(", "h", "%", "stride", "==", "0", ")", "else", "stride", "-", "(", "h", "%", "stride", ")", "\n", "delta_w", "=", "0", "if", "(", "w", "%", "stride", "==", "0", ")", "else", "stride", "-", "(", "w", "%", "stride", ")", "# right", "\n", "target_h", "=", "h", "+", "delta_h", "\n", "target_w", "=", "w", "+", "delta_w", "\n", "left", "=", "int", "(", "(", "target_w", "-", "w", ")", "/", "2.0", ")", "\n", "top", "=", "int", "(", "(", "target_h", "-", "h", ")", "/", "2.0", ")", "\n", "ltrb", "=", "(", "\n", "left", ",", "\n", "top", ",", "\n", "delta_w", "-", "left", ",", "\n", "delta_h", "-", "top", ",", "\n", ")", "# \u7ed9\u51fa\u5de6\uff0c\u4e0a\uff0c\u53f3\uff0c\u4e0b\u5206\u522b\u7684pad\u957f\u5ea6\uff0c\u540e\u9762torchvision.transforms.functional.pad\u5c06\u4f1a\u8bc6\u522b\u51fa\u7ed9\u4e864\u4e2apad\u53c2\u6570\uff0c\u4ece\u800c\u5f00\u59cbpad", "\n", "# ltrb: left, top, right, below", "\n", "\n", "pad", "=", "4", "*", "[", "None", "]", "\n", "pad", "[", "0", "]", "=", "ltrb", "[", "1", "]", "# up", "\n", "pad", "[", "1", "]", "=", "ltrb", "[", "0", "]", "# left", "\n", "pad", "[", "2", "]", "=", "ltrb", "[", "3", "]", "# down", "\n", "pad", "[", "3", "]", "=", "ltrb", "[", "2", "]", "# right", "\n", "\n", "img_padded", "=", "image", "\n", "pad_up", "=", "np", ".", "tile", "(", "img_padded", "[", "0", ":", "1", ",", ":", ",", ":", "]", "*", "0", "+", "padValue", ",", "(", "pad", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "img_padded", "=", "np", ".", "concatenate", "(", "(", "pad_up", ",", "img_padded", ")", ",", "axis", "=", "0", ")", "\n", "# \u6ce8\u610f! concatenate \u4e24\u4e2a\u6570\u7ec4\u7684\u987a\u5e8f\u5f88\u91cd\u8981", "\n", "pad_left", "=", "np", ".", "tile", "(", "img_padded", "[", ":", ",", "0", ":", "1", ",", ":", "]", "*", "0", "+", "padValue", ",", "(", "1", ",", "pad", "[", "1", "]", ",", "1", ")", ")", "\n", "img_padded", "=", "np", ".", "concatenate", "(", "(", "pad_left", ",", "img_padded", ")", ",", "axis", "=", "1", ")", "\n", "pad_down", "=", "np", ".", "tile", "(", "img_padded", "[", "-", "2", ":", "-", "1", ",", ":", ",", ":", "]", "*", "0", "+", "padValue", ",", "(", "pad", "[", "2", "]", ",", "1", ",", "1", ")", ")", "\n", "img_padded", "=", "np", ".", "concatenate", "(", "(", "img_padded", ",", "pad_down", ")", ",", "axis", "=", "0", ")", "\n", "pad_right", "=", "np", ".", "tile", "(", "img_padded", "[", ":", ",", "-", "2", ":", "-", "1", ",", ":", "]", "*", "0", "+", "padValue", ",", "(", "1", ",", "pad", "[", "3", "]", ",", "1", ")", ")", "\n", "img_padded", "=", "np", ".", "concatenate", "(", "(", "img_padded", ",", "pad_right", ")", ",", "axis", "=", "1", ")", "\n", "return", "img_padded", ",", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.keypoint_heatmap_nms": [[177, 184], ["torch.nn.functional.pad", "torch.nn.functional.max_pool2d"], "function", ["None"], ["", "", "def", "keypoint_heatmap_nms", "(", "heat", ",", "kernel", "=", "3", ",", "thre", "=", "0.1", ")", ":", "\n", "# keypoint NMS on heatmap (score map)", "\n", "    ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "pad_heat", "=", "F", ".", "pad", "(", "heat", ",", "(", "pad", ",", "pad", ",", "pad", ",", "pad", ")", ",", "mode", "=", "'reflect'", ")", "\n", "hmax", "=", "F", ".", "max_pool2d", "(", "pad_heat", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "keep", "=", "(", "hmax", "==", "heat", ")", ".", "float", "(", ")", "*", "(", "heat", ">=", "thre", ")", ".", "float", "(", ")", "\n", "return", "heat", "*", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.refine_centroid": [[186, 212], ["score_box.sum", "score_box.sum", "score_box.mean"], "function", ["None"], ["", "def", "refine_centroid", "(", "scorefmp", ",", "anchor", ",", "radius", ")", ":", "# TODO: \u6dfb\u52a0keypoint type\u7684sigma\u5bf9score\u505a\u5f52\u4e00\u5316\uff0c\u6298\u5408\u62101.x\u500d\uff0c\u9632\u6b62score\u8870\u51cf", "\n", "    ", "\"\"\"\n    Refine the centroid coordinate. It dose not affect the results after testing.\n    :param scorefmp: 2-D numpy array, original regressed score map\n    :param anchor: python tuple, (x,y) coordinates\n    :param radius: int, range of considered scores\n    :return: refined anchor, refined score\n    \"\"\"", "\n", "\n", "x_c", ",", "y_c", "=", "anchor", "\n", "x_min", "=", "x_c", "-", "radius", "\n", "x_max", "=", "x_c", "+", "radius", "+", "1", "\n", "y_min", "=", "y_c", "-", "radius", "\n", "y_max", "=", "y_c", "+", "radius", "+", "1", "\n", "\n", "if", "y_max", ">", "scorefmp", ".", "shape", "[", "0", "]", "or", "y_min", "<", "0", "or", "x_max", ">", "scorefmp", ".", "shape", "[", "1", "]", "or", "x_min", "<", "0", ":", "\n", "        ", "return", "anchor", "+", "(", "scorefmp", "[", "y_c", ",", "x_c", "]", ",", ")", "\n", "\n", "", "score_box", "=", "scorefmp", "[", "y_min", ":", "y_max", ",", "x_min", ":", "x_max", "]", "\n", "x_grid", ",", "y_grid", "=", "np", ".", "mgrid", "[", "-", "radius", ":", "radius", "+", "1", ",", "-", "radius", ":", "radius", "+", "1", "]", "\n", "offset_x", "=", "(", "score_box", "*", "x_grid", ")", ".", "sum", "(", ")", "/", "score_box", ".", "sum", "(", ")", "\n", "offset_y", "=", "(", "score_box", "*", "y_grid", ")", ".", "sum", "(", ")", "/", "score_box", ".", "sum", "(", ")", "\n", "x_refine", "=", "x_c", "+", "offset_x", "# int(np.rint(x_c + offset_x))", "\n", "y_refine", "=", "y_c", "+", "offset_y", "#int(np.rint(y_c + offset_y))", "\n", "refined_anchor", "=", "(", "x_refine", ",", "y_refine", ")", "\n", "return", "refined_anchor", "+", "(", "score_box", ".", "mean", "(", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.set_bn_eval_fp32": [[214, 218], ["classname.find", "m.eval"], "function", ["None"], ["", "def", "set_bn_eval_fp32", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "      ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.utils.util.set_bn_eval": [[220, 224], ["classname.find", "m.eval().half", "m.eval"], "function", ["None"], ["", "", "def", "set_bn_eval", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "      ", "m", ".", "eval", "(", ")", ".", "half", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.AllReduce.forward": [[36, 47], ["sorted", "torch.reduce_add_coalesced", "torch.reduce_add_coalesced", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "tuple", "inputs[].get_device", "range", "range", "len", "len", "i[].get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "num_inputs", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "num_inputs", "=", "num_inputs", "\n", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "num_inputs", ")", "]", "\n", "inputs", "=", "[", "inputs", "[", "i", ":", "i", "+", "num_inputs", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "num_inputs", ")", "]", "\n", "# sort before reduce sum", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ".", "get_device", "(", ")", ")", "\n", "results", "=", "comm", ".", "reduce_add_coalesced", "(", "inputs", ",", "ctx", ".", "target_gpus", "[", "0", "]", ")", "\n", "outputs", "=", "comm", ".", "broadcast_coalesced", "(", "results", ",", "ctx", ".", "target_gpus", ")", "\n", "return", "tuple", "(", "[", "t", "for", "tensors", "in", "outputs", "for", "t", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.AllReduce.backward": [[48, 56], ["torch.reduce_add_coalesced", "torch.reduce_add_coalesced", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "tuple", "range", "len", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "i", ".", "data", "for", "i", "in", "inputs", "]", "\n", "inputs", "=", "[", "inputs", "[", "i", ":", "i", "+", "ctx", ".", "num_inputs", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "ctx", ".", "num_inputs", ")", "]", "\n", "results", "=", "comm", ".", "reduce_add_coalesced", "(", "inputs", ",", "ctx", ".", "target_gpus", "[", "0", "]", ")", "\n", "outputs", "=", "comm", ".", "broadcast_coalesced", "(", "results", ",", "ctx", ".", "target_gpus", ")", "\n", "return", "(", "None", ",", ")", "+", "tuple", "(", "[", "Variable", "(", "t", ")", "for", "tensors", "in", "outputs", "for", "t", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.Reduce.forward": [[59, 64], ["sorted", "torch.reduce_add", "torch.reduce_add", "inputs[].get_device", "range", "len", "i.get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", "]", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", ".", "get_device", "(", ")", ")", "\n", "return", "comm", ".", "reduce_add", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.Reduce.backward": [[65, 68], ["torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradOutput", ")", ":", "\n", "        ", "return", "Broadcast", ".", "apply", "(", "ctx", ".", "target_gpus", ",", "gradOutput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.DistributedDataParallelModel.gather": [[95, 97], ["None"], "methods", ["None"], ["def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.DataParallelModel.gather": [[124, 126], ["None"], "methods", ["None"], ["def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.DataParallelModel.replicate": [[127, 131], ["super().replicate", "paralle.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.DataParallelModel.replicate", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.execute_replication_callbacks"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelModel", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.DataParallelCriterion.forward": [[149, 162], ["paralle.DataParallelCriterion.scatter", "paralle.DataParallelCriterion.replicate", "paralle._criterion_parallel_apply", "paralle.DataParallelCriterion.gather", "paralle.DataParallelCriterion.module", "len", "paralle.DataParallelCriterion.module", "len"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.DataParallelModel.replicate", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle._criterion_parallel_apply", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.DataParallelModel.gather"], ["def", "forward", "(", "self", ",", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", ":", "\n", "# input should be already scattered", "\n", "# scattering the targets instead", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", "\n", "", "targets", ",", "kwargs", "=", "self", ".", "scatter", "(", "targets", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "_criterion_parallel_apply", "(", "replicas", ",", "inputs", ",", "targets", ",", "kwargs", ")", "\n", "# return Reduce.apply(*outputs) / len(outputs)", "\n", "# return self.gather(outputs, self.output_device).mean()", "\n", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.allreduce": [[28, 33], ["AllReduce.apply"], "function", ["None"], ["def", "allreduce", "(", "*", "inputs", ")", ":", "\n", "    ", "\"\"\"Cross GPU all reduce autograd operation for calculate mean and\n    variance in SyncBN.\n    \"\"\"", "\n", "return", "AllReduce", ".", "apply", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle._criterion_parallel_apply": [[164, 221], ["threading.Lock", "range", "len", "len", "len", "len", "torch.is_grad_enabled", "torch.is_grad_enabled", "len", "paralle._criterion_parallel_apply._worker"], "function", ["None"], ["", "", "def", "_criterion_parallel_apply", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", "=", "None", ",", "devices", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "modules", ")", "==", "len", "(", "inputs", ")", "\n", "assert", "len", "(", "targets", ")", "==", "len", "(", "inputs", ")", "\n", "if", "kwargs_tup", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "kwargs_tup", ")", "\n", "", "else", ":", "\n", "        ", "kwargs_tup", "=", "(", "{", "}", ",", ")", "*", "len", "(", "modules", ")", "\n", "", "if", "devices", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "devices", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "[", "None", "]", "*", "len", "(", "modules", ")", "\n", "\n", "", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "results", "=", "{", "}", "\n", "if", "torch_ver", "!=", "\"0.3\"", ":", "\n", "        ", "grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "\n", "", "def", "_worker", "(", "i", ",", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", "=", "None", ")", ":", "\n", "        ", "if", "torch_ver", "!=", "\"0.3\"", ":", "\n", "            ", "torch", ".", "set_grad_enabled", "(", "grad_enabled", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "get_a_var", "(", "input", ")", ".", "get_device", "(", ")", "\n", "", "try", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "device", ")", ":", "\n", "# this also avoids accidental slicing of `input` if it is a Tensor", "\n", "                ", "if", "not", "isinstance", "(", "input", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "input", "=", "(", "input", ",", ")", "\n", "", "if", "not", "isinstance", "(", "target", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "target", "=", "(", "target", ",", ")", "\n", "", "output", "=", "module", "(", "*", "(", "input", "+", "target", ")", ",", "**", "kwargs", ")", "\n", "", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "output", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "e", "\n", "\n", "", "", "", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "        ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "_worker", ",", "\n", "args", "=", "(", "i", ",", "module", ",", "input", ",", "target", ",", "\n", "kwargs", ",", "device", ")", ",", ")", "\n", "for", "i", ",", "(", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", ")", "in", "\n", "enumerate", "(", "zip", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", ",", "devices", ")", ")", "]", "\n", "\n", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "_worker", "(", "0", ",", "modules", "[", "0", "]", ",", "inputs", "[", "0", "]", ",", "kwargs_tup", "[", "0", "]", ",", "devices", "[", "0", "]", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "output", "=", "results", "[", "i", "]", "\n", "if", "isinstance", "(", "output", ",", "Exception", ")", ":", "\n", "            ", "raise", "output", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.execute_replication_callbacks": [[231, 250], ["len", "enumerate", "list", "paralle.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["None"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created\n    by original replication.\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n    We guarantee that the callback on the master copy (the first copy) will be called ahead\n    of calling the callback of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.patch_replication_callback": [[252, 276], ["isinstance", "functools.wraps", "old_replicate", "paralle.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.execute_replication_callbacks"], ["", "", "", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config.TransformationParams.__init__": [[29, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "#  TODO: tune # https://github.com/anatolix/keras_Realtime_Multi-Person_Pose_Estimation/issues/16", "\n", "#   We will firstly scale picture so that the height of the main person always will be 0.6 of picture.", "\n", "        ", "self", ".", "target_dist", "=", "0.6", "\n", "self", ".", "scale_prob", "=", "0.8", "# 0.8  # scale probability, 0: never scale, 1: always scale", "\n", "self", ".", "scale_min", "=", "0.7", "# 0.75  # \u4e4b\u524d\u8bad\u7ec3\u8bbe\u7f6e\u7684\u662f0.8\uff0c\u4f46\u53d1\u73b0\u5bf9\u5c0f\u76ee\u6807\u5f88\u4e0d\u660e\u663e", "\n", "self", ".", "scale_max", "=", "1.3", "# 1.25", "\n", "self", ".", "max_rotate_degree", "=", "40.", "# 40 todo: \u770b\u770bhourglass\u4e2d512\u8bbe\u7f6e\u7684\u504f\u79fb", "\n", "self", ".", "center_perterb_max", "=", "50.", "# shift augmentation", "\n", "self", ".", "flip_prob", "=", "0.5", "# flip the image to force the network distinguish the mirror symmetrical keypoints", "\n", "self", ".", "tint_prob", "=", "0.2", "# ting\u7740\u8272\u64cd\u4f5c\u6bd4\u8f83\u8017\u65f6\uff0c\u5982\u679c\u6309\u71670.5\u7684\u6982\u7387\u8fdb\u884c\uff0c\u53ef\u80fd\u4f1a\u4f7f\u5f97\u6bcf\u79d2\u6570\u636e\u6269\u5145\u56fe\u7247\u51cf\u5c1110\u5f20", "\n", "self", ".", "sigma", "=", "9", "# 7 \u5f53\u662f512\u8f93\u5165\u65f6\u662f9", "\n", "self", ".", "keypoint_gaussian_thre", "=", "0.015", "# \u4f4e\u4e8e\u6b64\u503c\u7684keypoint gt\u9ad8\u65af\u54cd\u5e94\u7684\u533a\u57df\u88ab\u7f6e\u96f6", "\n", "self", ".", "limb_gaussian_thre", "=", "0.015", "# 0.03  # 0.1  # \u4f4e\u4e8e\u6b64\u503c\u7684body part gt\u9ad8\u65af\u54cd\u5e94\u7684\u533a\u57df\u88ab\u7f6e\u96f6", "\n", "self", ".", "paf_sigma", "=", "7", "# 5 todo: sigma of PAF \u5bf9\u4e8ePAF\u7684\u5206\u5e03\uff0c\u8bbe\u5176\u6807\u51c6\u5dee\u4e3a\u591a\u5c11\u6700\u5408\u9002\u5462", "\n", "# the value of sigma is important, there should be an equal contribution between foreground", "\n", "# and background heatmap pixels. Otherwise, there is a prior towards the background that forces the", "\n", "# network to converge to zero.", "\n", "self", ".", "paf_thre", "=", "1", "*", "stride", "# equals to 1.0 * stride in this program, used to include the end-points of limbs ", "\n", "#  \u4e3a\u4e86\u751f\u6210\u5728PAF\u65f6\uff0c\u8ba1\u7b97limb\u7aef\u70b9\u8fb9\u754c\u65f6\u4f7f\u7528\uff0c\u5728\u6700\u540e\u4e00\u4e2afeature map\u4e0a", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config.CanonicalConfig.__init__": [[55, 127], ["len", "dict", "len", "config.CanonicalConfig.ltr_parts", "list", "len", "config.TransformationParams", "numpy.array", "numpy.array", "zip", "zip", "range", "list", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.CanonicalConfig.ltr_parts"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "width", "=", "512", "\n", "self", ".", "height", "=", "512", "\n", "self", ".", "stride", "=", "4", "# \u7528\u4e8e\u8ba1\u7b97\u7f51\u7edc\u8f93\u51fa\u7684feature map\u7684\u5c3a\u5bf8", "\n", "# self.img_mean = [0.485, 0.456, 0.406]  # RGB format mean and standard variance", "\n", "# self.img_std = [0.229, 0.224, 0.225]", "\n", "self", ".", "parts", "=", "[", "\"nose\"", ",", "\"neck\"", ",", "\"Rsho\"", ",", "\"Relb\"", ",", "\"Rwri\"", ",", "\"Lsho\"", ",", "\"Lelb\"", ",", "\"Lwri\"", ",", "\"Rhip\"", ",", "\"Rkne\"", ",", "\"Rank\"", ",", "\n", "\"Lhip\"", ",", "\"Lkne\"", ",", "\"Lank\"", ",", "\"Reye\"", ",", "\"Leye\"", ",", "\"Rear\"", ",", "\"Lear\"", "]", "# , \"navel\"", "\n", "\n", "self", ".", "num_parts", "=", "len", "(", "self", ".", "parts", ")", "\n", "self", ".", "parts_dict", "=", "dict", "(", "zip", "(", "self", ".", "parts", ",", "range", "(", "self", ".", "num_parts", ")", ")", ")", "\n", "# help the network to detect body parts", "\n", "self", ".", "parts", "+=", "[", "\"background\"", "]", "# person mask\u4f5c\u4e3a\u80cc\u666f\u4e4b\u4e00, global config index: 42", "\n", "# force the network to learn to distinguish the keypoints from background", "\n", "self", ".", "parts", "+=", "[", "'reverseKeypoint'", "]", "# \u5bf9\u6240\u6709keypoints\u53d6\u53cd\u4f5c\u4e3a\u80cc\u666f\u4e8c, global config index: 43", "\n", "self", ".", "num_parts_with_background", "=", "len", "(", "self", ".", "parts", ")", "\n", "self", ".", "leftParts", ",", "self", ".", "rightParts", "=", "CanonicalConfig", ".", "ltr_parts", "(", "self", ".", "parts_dict", ")", "\n", "\n", "# this numbers probably copied from matlab they are 1.. based not 0.. based", "\n", "self", ".", "limb_from", "=", "[", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'nose'", ",", "'nose'", ",", "'Reye'", ",", "'Leye'", ",", "'neck'", ",", "'Rsho'", ",", "\n", "'Relb'", ",", "'neck'", ",", "'Lsho'", ",", "'Lelb'", ",", "\n", "'neck'", ",", "'Rhip'", ",", "'Rkne'", ",", "'neck'", ",", "'Lhip'", ",", "'Lkne'", ",", "\n", "'nose'", ",", "'nose'", ",", "'Rsho'", ",", "'Rhip'", ",", "'Lsho'", ",", "'Lhip'", ",", "'Rear'", ",", "'Lear'", ",", "'Rhip'", "]", "\n", "\n", "self", ".", "limb_to", "=", "[", "'nose'", ",", "'Reye'", ",", "'Leye'", ",", "'Rear'", ",", "'Lear'", ",", "'Reye'", ",", "'Leye'", ",", "'Rear'", ",", "'Lear'", ",", "'Rsho'", ",", "'Relb'", ",", "'Rwri'", ",", "\n", "'Lsho'", ",", "'Lelb'", ",", "'Lwri'", ",", "\n", "'Rhip'", ",", "'Rkne'", ",", "'Rank'", ",", "'Lhip'", ",", "'Lkne'", ",", "'Lank'", ",", "\n", "'Rsho'", ",", "'Lsho'", ",", "'Rhip'", ",", "'Lkne'", ",", "'Lhip'", ",", "'Rkne'", ",", "'Rsho'", ",", "'Lsho'", ",", "'Lhip'", "]", "\n", "\n", "self", ".", "limb_from", "=", "[", "self", ".", "parts_dict", "[", "n", "]", "for", "n", "in", "self", ".", "limb_from", "]", "\n", "self", ".", "limb_to", "=", "[", "self", ".", "parts_dict", "[", "n", "]", "for", "n", "in", "self", ".", "limb_to", "]", "\n", "\n", "assert", "self", ".", "limb_from", "==", "[", "x", "for", "x", "in", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "14", ",", "15", ",", "1", ",", "2", ",", "3", ",", "1", ",", "5", ",", "6", ",", "1", ",", "8", ",", "9", ",", "1", ",", "11", ",", "12", ",", "\n", "0", ",", "0", ",", "2", ",", "8", ",", "5", ",", "11", ",", "16", ",", "17", ",", "8", "]", "]", "\n", "assert", "self", ".", "limb_to", "==", "[", "x", "for", "x", "in", "\n", "[", "0", ",", "14", ",", "15", ",", "16", ",", "17", ",", "14", ",", "15", ",", "16", ",", "17", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "\n", "2", ",", "5", ",", "8", ",", "12", ",", "11", ",", "9", ",", "2", ",", "5", ",", "11", "]", "]", "\n", "\n", "self", ".", "limbs_conn", "=", "list", "(", "zip", "(", "self", ".", "limb_from", ",", "self", ".", "limb_to", ")", ")", "\n", "\n", "self", ".", "paf_layers", "=", "len", "(", "self", ".", "limbs_conn", ")", "\n", "self", ".", "heat_layers", "=", "self", ".", "num_parts", "\n", "# layers of keypoint and body part heatmaps PLUS ++ 2 background", "\n", "self", ".", "num_layers", "=", "self", ".", "paf_layers", "+", "self", ".", "heat_layers", "+", "2", "\n", "\n", "self", ".", "paf_start", "=", "0", "\n", "self", ".", "heat_start", "=", "self", ".", "paf_layers", "# Notice: \u6b64\u5904channel\u5b89\u6392\u4e0a\uff0cpaf_map\u5728\u524d\uff0cheat_map\u5728\u540e", "\n", "self", ".", "bkg_start", "=", "self", ".", "paf_layers", "+", "self", ".", "heat_layers", "# \u7528\u4e8efeature map\u7684\u8ba1\u6570,2\u4e2abackground\u7684\u8d77\u59cb\u70b9", "\n", "\n", "self", ".", "offset_layers", "=", "2", "# * self.num_parts # \u9009\u62e9\u4f7f\u7528\u6240\u6709\u7684\u5173\u8282\u70b9\u5171\u7528 x-offset \u548c y-offset", "\n", "self", ".", "offset_start", "=", "self", ".", "num_layers", "\n", "\n", "self", ".", "mask_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ")", "# 46, 46", "\n", "self", ".", "parts_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ",", "self", ".", "num_layers", ")", "# 46, 46, 59", "\n", "self", ".", "offset_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ",", "self", ".", "offset_layers", ")", "\n", "\n", "self", ".", "transform_params", "=", "TransformationParams", "(", "self", ".", "stride", ")", "\n", "\n", "# Some configurations only used in inference process", "\n", "# map between original coco keypoint ids and  our keypoint ids", "\n", "# \u56e0\u4e3aCMU\u7684\u5b9a\u4e49\u548cCOCO\u5b98\u65b9\u5bf9joint\u7f16\u53f7\u7684\u5b9a\u4e49\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7mapping\u628a\u7f16\u53f7\u6539\u8fc7\u6765\u3000\u3000", "\n", "self", ".", "dt_gt_mapping", "=", "{", "0", ":", "0", ",", "1", ":", "None", ",", "2", ":", "6", ",", "3", ":", "8", ",", "4", ":", "10", ",", "5", ":", "5", ",", "6", ":", "7", ",", "7", ":", "9", ",", "8", ":", "12", ",", "9", ":", "14", ",", "10", ":", "16", ",", "11", ":", "11", ",", "12", ":", "13", ",", "\n", "13", ":", "15", ",", "14", ":", "2", ",", "15", ":", "1", ",", "16", ":", "4", ",", "17", ":", "3", "}", "# , 18: None \u6ca1\u6709\u4f7f\u7528\u809a\u8110", "\n", "\n", "# For the flip augmentation in the inference process only", "\n", "self", ".", "flip_heat_ord", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "5", ",", "6", ",", "7", ",", "2", ",", "3", ",", "4", ",", "11", ",", "12", ",", "13", ",", "8", ",", "9", ",", "10", ",", "15", ",", "14", ",", "17", ",", "16", ",", "18", ",", "19", "]", ")", "\n", "self", ".", "flip_paf_ord", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", ",", "6", ",", "5", ",", "8", ",", "7", ",", "12", ",", "13", ",", "14", ",", "9", ",", "10", ",", "11", ",", "18", ",", "19", ",", "20", ",", "15", ",", "16", ",", "17", ",", "22", ",", "21", ",", "25", ",", "26", ",", "23", ",", "24", ",", "28", ",", "27", ",", "\n", "29", "]", ")", "\n", "\n", "self", ".", "draw_list", "=", "[", "0", "]", "+", "list", "(", "range", "(", "5", ",", "21", ")", ")", "+", "[", "29", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config.CanonicalConfig.ltr_parts": [[128, 135], ["None"], "methods", ["None"], ["", "@", "staticmethod", "# staticmethod\u4fee\u9970\u7684\u65b9\u6cd5\u5b9a\u4e49\u4e0e\u666e\u901a\u51fd\u6570\u662f\u4e00\u6837\u7684, staticmethod\u652f\u6301\u7c7b\u5bf9\u8c61\u6216\u8005\u5b9e\u4f8b\u5bf9\u65b9\u6cd5\u7684\u8c03\u7528,\u5373\u53ef\u4f7f\u7528A.f()\u6216\u8005a.f()", "\n", "def", "ltr_parts", "(", "parts_dict", ")", ":", "\n", "# When we flip image left parts became right parts and vice versa.", "\n", "# This is the list of parts to exchange each other.", "\n", "        ", "leftParts", "=", "[", "parts_dict", "[", "p", "]", "for", "p", "in", "[", "\"Lsho\"", ",", "\"Lelb\"", ",", "\"Lwri\"", ",", "\"Lhip\"", ",", "\"Lkne\"", ",", "\"Lank\"", ",", "\"Leye\"", ",", "\"Lear\"", "]", "]", "\n", "rightParts", "=", "[", "parts_dict", "[", "p", "]", "for", "p", "in", "[", "\"Rsho\"", ",", "\"Relb\"", ",", "\"Rwri\"", ",", "\"Rhip\"", ",", "\"Rkne\"", ",", "\"Rank\"", ",", "\"Reye\"", ",", "\"Rear\"", "]", "]", "\n", "return", "leftParts", ",", "rightParts", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config.COCOSourceConfig.__init__": [[140, 154], ["len", "dict", "zip", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hdf5_source", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a COCOSource Config object\uff0c\n        :param hdf5_source: the path only of hdf5 training materials generated by coco_mask_hdf5.py\n        \"\"\"", "\n", "self", ".", "hdf5_source", "=", "hdf5_source", "\n", "self", ".", "parts", "=", "[", "'nose'", ",", "'Leye'", ",", "'Reye'", ",", "'Lear'", ",", "'Rear'", ",", "'Lsho'", ",", "'Rsho'", ",", "'Lelb'", ",", "\n", "'Relb'", ",", "'Lwri'", ",", "'Rwri'", ",", "'Lhip'", ",", "'Rhip'", ",", "'Lkne'", ",", "'Rkne'", ",", "'Lank'", ",", "\n", "'Rank'", "]", "# coco\u6570\u636e\u96c6\u4e2d\u5173\u952e\u70b9\u7c7b\u578b\u5b9a\u4e49\u7684\u987a\u5e8f", "\n", "\n", "self", ".", "num_parts", "=", "len", "(", "self", ".", "parts", ")", "\n", "\n", "# for COCO neck is calculated like mean of 2 shoulders.", "\n", "self", ".", "parts_dict", "=", "dict", "(", "zip", "(", "self", ".", "parts", ",", "range", "(", "self", ".", "num_parts", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config.COCOSourceConfig.convert": [[155, 225], ["numpy.array", "numpy.zeros", "len", "numpy.minimum", "numpy.minimum"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "meta", ",", "global_config", ")", ":", "\n", "        ", "\"\"\"Convert COCO configuration (joint annotation) into ours configuration of this project\"\"\"", "\n", "# ----------------------------------------------", "\n", "# ---\u5c06coco config\u4e2d\u5bf9\u6570\u636e\u7684\u5b9a\u4e49\u6539\u6210CMU\u9879\u76ee\u4e2d\u7684\u683c\u5f0f---", "\n", "# ----------------------------------------------", "\n", "\n", "joints", "=", "np", ".", "array", "(", "meta", "[", "'joints'", "]", ")", "\n", "\n", "assert", "joints", ".", "shape", "[", "1", "]", "==", "len", "(", "self", ".", "parts", ")", "\n", "\n", "result", "=", "np", ".", "zeros", "(", "(", "joints", ".", "shape", "[", "0", "]", ",", "global_config", ".", "num_parts", ",", "3", ")", ")", "\n", "# result\u662f\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4\uff0cshape[0]\u548c\u4eba\u6570\u6709\u5173\uff0c\u6bcf\u4e00\u884c\u5373shape[1]\u548c\u5173\u8282\u70b9\u6570\u76ee\u6709\u5173\uff0c\u6700\u540e\u4e00\u7ef4\u5ea6\u957f\u5ea6\u4e3a3,\u5206\u522b\u662fx,y,v,\u5373\u5750\u6807\u503c\u548c\u53ef\u89c1\u6807\u5fd7\u4f4d", "\n", "result", "[", ":", ",", ":", ",", "2", "]", "=", "3.", "\n", "# OURS - # 3 never marked up in this dataset, 2 - not marked up in this person, 1 - marked and visible,", "\n", "# 0 - marked but invisible. \u5173\u4e8evisible\u503c\u7684\u91cd\u65b0\u5b9a\u4e49\u5728coco_mask_hdf5.py\u4e2d\u5b8c\u6210\u4e86", "\n", "\n", "for", "p", "in", "self", ".", "parts", ":", "\n", "            ", "coco_id", "=", "self", ".", "parts_dict", "[", "p", "]", "\n", "\n", "if", "p", "in", "global_config", ".", "parts_dict", ":", "\n", "                ", "global_id", "=", "global_config", ".", "parts_dict", "[", "p", "]", "# global_id\u662f\u5728\u8be5\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u5173\u8282\u70b9\u7f16\u53f7\uff0c\u56e0\u4e3a\u989d\u5916\u52a0\u5165\u4e86neck(navel?)\uff0c\u4e0e\u539f\u59cbcoco\u6570\u636e\u96c6\u4e2d\u5b9a\u4e49\u4e0d\u540c", "\n", "assert", "global_id", "!=", "1", ",", "\"neck shouldn't be known yet\"", "\n", "# assert global_id != 2, \"navel shouldn't be known yet\"", "\n", "result", "[", ":", ",", "global_id", ",", ":", "]", "=", "joints", "[", ":", ",", "coco_id", ",", ":", "]", "\n", "\n", "", "", "if", "'neck'", "in", "global_config", ".", "parts_dict", ":", "# neck point works as a root note", "\n", "            ", "neckG", "=", "global_config", ".", "parts_dict", "[", "'neck'", "]", "\n", "# parts_dict['neck']\u3000\uff1d\u3000\uff11, parts_dict\u662f\u524d\u9762\u5b9a\u4e49\u8fc7\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u8282\u70b9\u540d\u79f0\uff1a\u5e8f\u53f7", "\n", "RshoC", "=", "self", ".", "parts_dict", "[", "'Rsho'", "]", "\n", "LshoC", "=", "self", ".", "parts_dict", "[", "'Lsho'", "]", "\n", "\n", "# no neck in coco database, we calculate it as average of shoulders", "\n", "#  here, we use 0 - hidden, 1 visible, 2 absent to represent the visibility of keypoints", "\n", "#  - it is not the same as coco values they processed by generate_hdf5", "\n", "\n", "# -------------------------------\u539f\u59cbcoco\u5173\u4e8evisible\u6807\u7b7e\u7684\u5b9a\u4e49\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d--------------\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d#", "\n", "# \u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\u4e2a\u6807\u5fd7\u4f4dv\uff0cv\u4e3a0\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6ca1\u6709\u6807\u6ce8\uff08\u8fd9\u79cd\u60c5\u51b5\u4e0bx = y = v = 0\uff09\uff0c", "\n", "# v\u4e3a1\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u4e86\u4f46\u662f\u4e0d\u53ef\u89c1\uff08\u88ab\u906e\u6321\u4e86\uff09\uff0cv\u4e3a2\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u4e86\u540c\u65f6\u4e5f\u53ef\u89c1\u3002", "\n", "# ------------------------------------ ----------------------------\u3000\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d#", "\n", "\n", "both_shoulders_known", "=", "(", "joints", "[", ":", ",", "LshoC", ",", "2", "]", "<", "2", ")", "&", "(", "joints", "[", ":", ",", "RshoC", ",", "2", "]", "<", "2", ")", "# \u6309\u4f4d\u8fd0\u7b97", "\n", "# \u7528True\u548cFalse\u4f5c\u4e3a\u7d22\u5f15", "\n", "result", "[", "~", "both_shoulders_known", ",", "neckG", ",", "2", "]", "=", "2.", "# otherwise they will be 3. aka 'never marked in this dataset'", "\n", "# ~both_shoulders_known bool\u7c7b\u578b\u6309\u4f4d\u53d6\u53cd", "\n", "result", "[", "both_shoulders_known", ",", "neckG", ",", "0", ":", "2", "]", "=", "(", "joints", "[", "both_shoulders_known", ",", "RshoC", ",", "0", ":", "2", "]", "+", "\n", "joints", "[", "both_shoulders_known", ",", "LshoC", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "result", "[", "both_shoulders_known", ",", "neckG", ",", "2", "]", "=", "np", ".", "minimum", "(", "joints", "[", "both_shoulders_known", ",", "RshoC", ",", "2", "]", ",", "\n", "joints", "[", "both_shoulders_known", ",", "LshoC", ",", "2", "]", ")", "\n", "# \u6700\u540e\u4e00\u4f4d\u662f visible\u3000\u6807\u5fd7\u4f4d\uff0c\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e2d\u6709\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4e0d\u53ef\u89c1\uff0c\u5219\u4e2d\u95f4\u8282\u70b9neck\u8bbe\u4e3a\u4e0d\u53ef\u89c1", "\n", "\n", "", "if", "'navel'", "in", "global_config", ".", "parts_dict", ":", "# add navel keypoint or not?", "\n", "            ", "navelG", "=", "global_config", ".", "parts_dict", "[", "'navel'", "]", "\n", "# parts_dict['navel']\u3000\uff1d 2, parts_dict\u662f\u524d\u9762\u5b9a\u4e49\u8fc7\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u8282\u70b9\u540d\u79f0\uff1a\u5e8f\u53f7", "\n", "RhipC", "=", "self", ".", "parts_dict", "[", "'Rhip'", "]", "\n", "LhipC", "=", "self", ".", "parts_dict", "[", "'Lhip'", "]", "\n", "\n", "# no navel in coco database, we calculate it as average of hipulders", "\n", "both_hipulders_known", "=", "(", "joints", "[", ":", ",", "LhipC", ",", "2", "]", "<", "2", ")", "&", "(", "joints", "[", ":", ",", "RhipC", ",", "2", "]", "<", "2", ")", "# \u6309\u4f4d\u8fd0\u7b97", "\n", "# \u7528True\u548cFalse\u4f5c\u4e3a\u7d22\u5f15", "\n", "result", "[", "\n", "~", "both_hipulders_known", ",", "navelG", ",", "2", "]", "=", "2.", "# otherwise they will be 3. aka 'never marked in this dataset'", "\n", "# ~both_hipulders_known bool\u7c7b\u578b\u6309\u4f4d\u53d6\u53cd", "\n", "result", "[", "both_hipulders_known", ",", "navelG", ",", "0", ":", "2", "]", "=", "(", "joints", "[", "both_hipulders_known", ",", "RhipC", ",", "0", ":", "2", "]", "+", "\n", "joints", "[", "both_hipulders_known", ",", "LhipC", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "result", "[", "both_hipulders_known", ",", "navelG", ",", "2", "]", "=", "np", ".", "minimum", "(", "joints", "[", "both_hipulders_known", ",", "RhipC", ",", "2", "]", ",", "\n", "joints", "[", "both_hipulders_known", ",", "LhipC", ",", "2", "]", ")", "\n", "\n", "", "meta", "[", "'joints'", "]", "=", "result", "\n", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config.COCOSourceConfig.repeat_mask": [[226, 230], ["numpy.repeat"], "methods", ["None"], ["", "def", "repeat_mask", "(", "self", ",", "mask", ",", "global_config", ",", "joints", "=", "None", ")", ":", "\n", "# \u590d\u5236mask\u5230\u4e2a\u6570\u5230global_config\u901a\u9053\u6570\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u8fdb\u884c\u901a\u9053\u7684\u590d\u5236\uff0c\u5229\u7528broadcast\uff0c\u8282\u7701\u5185\u5b58", "\n", "        ", "mask", "=", "np", ".", "repeat", "(", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "global_config", ".", "num_layers", ",", "axis", "=", "2", ")", "# mask\u590d\u5236\u6210\u4e8657\u4e2a\u901a\u9053", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config.COCOSourceConfig.source": [[231, 234], ["None"], "methods", ["None"], ["", "def", "source", "(", "self", ")", ":", "\n", "# return the path", "\n", "        ", "return", "self", ".", "hdf5_source", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config.GetConfig": [[243, 261], ["enumerate", "pprint", "print", "dict", "zip", "len", "range", "len"], "function", ["None"], ["def", "GetConfig", "(", "config_name", ")", ":", "\n", "    ", "config", "=", "Configs", "[", "config_name", "]", "(", ")", "# () will instantiate an object of Configs[config_name] class", "\n", "\n", "dct", "=", "config", ".", "parts", "[", ":", "]", "\n", "dct", "=", "[", "None", "]", "*", "(", "config", ".", "num_layers", "-", "len", "(", "dct", ")", ")", "+", "dct", "\n", "\n", "for", "(", "i", ",", "(", "fr", ",", "to", ")", ")", "in", "enumerate", "(", "config", ".", "limbs_conn", ")", ":", "\n", "        ", "name", "=", "\"%s->%s\"", "%", "(", "config", ".", "parts", "[", "fr", "]", ",", "config", ".", "parts", "[", "to", "]", ")", "\n", "print", "(", "i", ",", "name", ")", "\n", "x", "=", "i", "\n", "\n", "assert", "dct", "[", "x", "]", "is", "None", "\n", "dct", "[", "x", "]", "=", "name", "\n", "\n", "", "from", "pprint", "import", "pprint", "\n", "pprint", "(", "dict", "(", "zip", "(", "range", "(", "len", "(", "dct", ")", ")", ",", "dct", ")", ")", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_dense.TransformationParams.__init__": [[26, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "#  TODO: tune # https://github.com/anatolix/keras_Realtime_Multi-Person_Pose_Estimation/issues/16", "\n", "#   We will firstly scale picture so that the height of the main person always will be 0.6 of picture.", "\n", "        ", "self", ".", "target_dist", "=", "0.6", "\n", "self", ".", "scale_prob", "=", "0.8", "# scale probability, 0: never scale, 1: always scale", "\n", "self", ".", "scale_min", "=", "0.75", "# \u4e4b\u524d\u8bad\u7ec3\u8bbe\u7f6e\u7684\u662f0.8\uff0c\u4f46\u53d1\u73b0\u5bf9\u5c0f\u76ee\u6807\u5f88\u4e0d\u660e\u663e", "\n", "self", ".", "scale_max", "=", "1.25", "\n", "self", ".", "max_rotate_degree", "=", "40.", "# todo: \u770b\u770bhourglass\u4e2d512\u8bbe\u7f6e\u7684\u504f\u79fb", "\n", "self", ".", "center_perterb_max", "=", "40.", "# shift augmentation", "\n", "self", ".", "flip_prob", "=", "0.5", "# flip the image to force the network distinguish the mirror symmetrical keypoints", "\n", "self", ".", "tint_prob", "=", "0.1", "# false tint\u7740\u8272\u64cd\u4f5c\u6bd4\u8f83\u8017\u65f6\uff0c\u5982\u679c\u6309\u71670.5\u7684\u6982\u7387\u8fdb\u884c\uff0c\u53ef\u80fd\u4f1a\u4f7f\u5f97\u6bcf\u79d2\u6570\u636e\u6269\u5145\u56fe\u7247\u51cf\u5c1110\u5f20,tint\u5bf9\u7f51\u7edc\u8bad\u7ec3\u53ef\u80fd\u6709\u8d1f\u9762\u5f71\u54cd", "\n", "self", ".", "sigma", "=", "9", "# 7 \u5f53\u662f512\u8f93\u5165\u65f6\u662f9", "\n", "self", ".", "keypoint_gaussian_thre", "=", "0.005", "# 0.003 \u4f4e\u4e8e\u6b64\u503c\u7684gt\u9ad8\u65af\u54cd\u5e94\u7684\u533a\u57df\u88ab\u7f6e\u96f6", "\n", "self", ".", "limb_gaussian_thre", "=", "0.1", "# \u4f4e\u4e8e\u6b64\u503c\u7684body part gt\u9ad8\u65af\u54cd\u5e94\u7684\u533a\u57df\u88ab\u7f6e\u96f6", "\n", "self", ".", "paf_sigma", "=", "7", "# 5 todo: sigma of PAF \u5bf9\u4e8ePAF\u7684\u5206\u5e03\uff0c\u8bbe\u5176\u6807\u51c6\u5dee\u4e3a\u591a\u5c11\u6700\u5408\u9002\u5462", "\n", "# the value of sigma is important, there should be an equal contribution between foreground", "\n", "# and background heatmap pixels. Otherwise, there is a prior towards the background that forces the", "\n", "# network to converge to zero.", "\n", "self", ".", "paf_thre", "=", "1", "*", "stride", "# equals to 1.0 * stride in this program, used to include the end-points of limbs ", "\n", "#  \u4e3a\u4e86\u751f\u6210\u5728PAF\u65f6\uff0c\u8ba1\u7b97limb\u7aef\u70b9\u8fb9\u754c\u65f6\u4f7f\u7528\uff0c\u5728\u6700\u540e\u4e00\u4e2afeature map\u4e0a", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_dense.CanonicalConfig.__init__": [[51, 127], ["len", "dict", "len", "config_dense.CanonicalConfig.ltr_parts", "list", "len", "config_dense.TransformationParams", "numpy.array", "numpy.array", "zip", "zip", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.CanonicalConfig.ltr_parts"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "width", "=", "384", "\n", "self", ".", "height", "=", "384", "\n", "self", ".", "stride", "=", "4", "# \u7528\u4e8e\u8ba1\u7b97\u7f51\u7edc\u8f93\u51fa\u7684feature map\u7684\u5c3a\u5bf8", "\n", "# self.img_mean = [0.485, 0.456, 0.406]  # RGB format mean and standard variance", "\n", "# self.img_std = [0.229, 0.224, 0.225]", "\n", "self", ".", "parts", "=", "[", "\"nose\"", ",", "\"neck\"", ",", "\"Rsho\"", ",", "\"Relb\"", ",", "\"Rwri\"", ",", "\"Lsho\"", ",", "\"Lelb\"", ",", "\"Lwri\"", ",", "\"Rhip\"", ",", "\"Rkne\"", ",", "\"Rank\"", ",", "\n", "\"Lhip\"", ",", "\"Lkne\"", ",", "\"Lank\"", ",", "\"Reye\"", ",", "\"Rear\"", ",", "\"Leye\"", ",", "\"Lear\"", "]", "# , \"navel\"", "\n", "\n", "self", ".", "num_parts", "=", "len", "(", "self", ".", "parts", ")", "\n", "self", ".", "parts_dict", "=", "dict", "(", "zip", "(", "self", ".", "parts", ",", "range", "(", "self", ".", "num_parts", ")", ")", ")", "\n", "# help the network to detect body parts", "\n", "self", ".", "parts", "+=", "[", "\"background\"", "]", "# person mask\u4f5c\u4e3a\u80cc\u666f\u4e4b\u4e00, global config index: 42", "\n", "# force the network to learn to distinguish the keypoints from background", "\n", "self", ".", "parts", "+=", "[", "\"reverseKeypoint\"", "]", "# \u5bf9\u6240\u6709keypoints\u53d6\u53cd\u4f5c\u4e3a\u80cc\u666f\u4e8c, global config index: 43", "\n", "self", ".", "num_parts_with_background", "=", "len", "(", "self", ".", "parts", ")", "\n", "self", ".", "leftParts", ",", "self", ".", "rightParts", "=", "CanonicalConfig", ".", "ltr_parts", "(", "self", ".", "parts_dict", ")", "\n", "\n", "# this numbers probably copied from matlab they are 1.. based not 0.. based", "\n", "self", ".", "limb_from", "=", "[", "\"neck\"", ",", "\"neck\"", ",", "\"neck\"", ",", "\"neck\"", ",", "\"neck\"", ",", "\"nose\"", ",", "\"Reye\"", ",", "\"nose\"", ",", "\"Leye\"", ",", "\"nose\"", ",", "\"nose\"", ",", "\n", "\"Reye\"", ",", "\"neck\"", ",", "\"nose\"", ",", "\"Rear\"", ",", "\n", "\"neck\"", ",", "\"nose\"", ",", "\"Lear\"", ",", "\"Rsho\"", ",", "\"neck\"", ",", "\"Lsho\"", ",", "\"neck\"", ",", "\"Relb\"", ",", "\"Relb\"", ",", "\"Rsho\"", ",", "\"Lelb\"", ",", "\n", "\"Lsho\"", ",", "\"neck\"", ",", "\"Rsho\"", ",", "\"Lsho\"", ",", "\"neck\"", ",", "\"Lsho\"", ",", "\"Rsho\"", ",", "\"Rhip\"", ",", "\"Rwri\"", ",", "\"Lwri\"", ",", "\"Rhip\"", ",", "\n", "\"Lhip\"", ",", "\"Rsho\"", ",", "\"Lhip\"", ",", "\"Rhip\"", ",", "\n", "\"Lsho\"", ",", "\"Rkne\"", ",", "\"Rkne\"", ",", "\"Rhip\"", ",", "\"Lkne\"", ",", "\"Lkne\"", ",", "\"Lhip\"", ",", "\"Rkne\"", "]", "\n", "\n", "self", ".", "limb_to", "=", "[", "\"nose\"", ",", "\"Reye\"", ",", "\"Rear\"", ",", "\"Leye\"", ",", "\"Lear\"", ",", "\"Reye\"", ",", "\"Rear\"", ",", "\"Leye\"", ",", "\"Lear\"", ",", "\"Rear\"", ",", "\"Lear\"", ",", "\"Leye\"", ",", "\n", "\"Rsho\"", ",", "\"Rsho\"", ",", "\"Rsho\"", ",", "\n", "\"Lsho\"", ",", "\"Lsho\"", ",", "\"Lsho\"", ",", "\"Relb\"", ",", "\"Relb\"", ",", "\"Lelb\"", ",", "\"Lelb\"", ",", "\"Lelb\"", ",", "\"Rwri\"", ",", "\"Rwri\"", ",", "\"Lwri\"", ",", "\"Lwri\"", ",", "\n", "\"Rhip\"", ",", "\"Rhip\"", ",", "\"Rhip\"", ",", "\n", "\"Lhip\"", ",", "\"Lhip\"", ",", "\"Lhip\"", ",", "\"Lhip\"", ",", "\"Rhip\"", ",", "\"Lhip\"", ",", "\"Rkne\"", ",", "\"Rkne\"", ",", "\"Rkne\"", ",", "\"Lkne\"", ",", "\"Lkne\"", ",", "\"Lkne\"", ",", "\n", "\"Lkne\"", ",", "\"Rank\"", ",", "\"Rank\"", ",", "\n", "\"Rank\"", ",", "\"Lank\"", ",", "\"Lank\"", ",", "\"Lank\"", "]", "\n", "\n", "self", ".", "limb_from", "=", "[", "self", ".", "parts_dict", "[", "n", "]", "for", "n", "in", "self", ".", "limb_from", "]", "\n", "self", ".", "limb_to", "=", "[", "self", ".", "parts_dict", "[", "n", "]", "for", "n", "in", "self", ".", "limb_to", "]", "\n", "\n", "assert", "self", ".", "limb_from", "==", "[", "x", "for", "x", "in", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "14", ",", "0", ",", "16", ",", "0", ",", "0", ",", "14", ",", "1", ",", "0", ",", "15", ",", "1", ",", "0", ",", "17", ",", "2", ",", "1", ",", "5", ",", "1", ",", "3", ",", "3", ",", "2", ",", "6", ",", "5", ",", "\n", "1", ",", "2", ",", "5", ",", "1", ",", "5", ",", "2", ",", "8", ",", "4", ",", "7", ",", "8", ",", "11", ",", "2", ",", "11", ",", "8", ",", "5", ",", "9", ",", "9", ",", "8", ",", "12", ",", "12", ",", "11", ",", "9", "]", "]", "\n", "assert", "self", ".", "limb_to", "==", "[", "x", "for", "x", "in", "\n", "[", "0", ",", "14", ",", "15", ",", "16", ",", "17", ",", "14", ",", "15", ",", "16", ",", "17", ",", "15", ",", "17", ",", "16", ",", "2", ",", "2", ",", "2", ",", "5", ",", "5", ",", "5", ",", "3", ",", "3", ",", "6", ",", "6", ",", "6", ",", "4", ",", "4", ",", "\n", "7", ",", "7", ",", "8", ",", "8", ",", "8", ",", "11", ",", "11", ",", "11", ",", "11", ",", "8", ",", "11", ",", "9", ",", "9", ",", "9", ",", "12", ",", "12", ",", "12", ",", "12", ",", "10", ",", "10", ",", "10", ",", "13", ",", "13", ",", "13", "]", "]", "\n", "\n", "self", ".", "limbs_conn", "=", "list", "(", "zip", "(", "self", ".", "limb_from", ",", "self", ".", "limb_to", ")", ")", "\n", "\n", "self", ".", "paf_layers", "=", "len", "(", "self", ".", "limbs_conn", ")", "\n", "self", ".", "heat_layers", "=", "self", ".", "num_parts", "\n", "# layers of keypoint and body part heatmaps PLUS ++ 2 background", "\n", "self", ".", "num_layers", "=", "self", ".", "paf_layers", "+", "self", ".", "heat_layers", "+", "2", "\n", "\n", "self", ".", "paf_start", "=", "0", "\n", "self", ".", "heat_start", "=", "self", ".", "paf_layers", "# Notice: \u6b64\u5904channel\u5b89\u6392\u4e0a\uff0cpaf_map\u5728\u524d\uff0cheat_map\u5728\u540e", "\n", "self", ".", "bkg_start", "=", "self", ".", "paf_layers", "+", "self", ".", "heat_layers", "# \u7528\u4e8efeature map\u7684\u8ba1\u6570,2\u4e2abackground\u7684\u8d77\u59cb\u70b9", "\n", "\n", "self", ".", "offset_layers", "=", "2", "*", "self", ".", "num_parts", "\n", "self", ".", "offset_start", "=", "self", ".", "num_layers", "\n", "\n", "self", ".", "mask_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ")", "# 46, 46", "\n", "self", ".", "parts_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ",", "self", ".", "num_layers", ")", "# 46, 46, 59", "\n", "self", ".", "offset_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ",", "self", ".", "offset_layers", ")", "\n", "\n", "self", ".", "transform_params", "=", "TransformationParams", "(", "self", ".", "stride", ")", "\n", "\n", "# ####################### Some configurations only used in inference process  ###########################", "\n", "# map between original coco keypoint ids and  our keypoint ids", "\n", "# \u56e0\u4e3aCMU\u7684\u5b9a\u4e49\u548cCOCO\u5b98\u65b9\u5bf9joint\u7f16\u53f7\u7684\u5b9a\u4e49\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7mapping\u628a\u7f16\u53f7\u6539\u8fc7\u6765\u3000\u3000", "\n", "self", ".", "dt_gt_mapping", "=", "{", "0", ":", "0", ",", "1", ":", "None", ",", "2", ":", "6", ",", "3", ":", "8", ",", "4", ":", "10", ",", "5", ":", "5", ",", "6", ":", "7", ",", "7", ":", "9", ",", "8", ":", "12", ",", "9", ":", "14", ",", "10", ":", "16", ",", "11", ":", "11", ",", "12", ":", "13", ",", "\n", "13", ":", "15", ",", "14", ":", "2", ",", "15", ":", "1", ",", "16", ":", "4", ",", "17", ":", "3", "}", "# , 18: None \u6ca1\u6709\u4f7f\u7528\u809a\u8110", "\n", "\n", "# For the flip augmentation in the inference process only", "\n", "self", ".", "flip_heat_ord", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "5", ",", "6", ",", "7", ",", "2", ",", "3", ",", "4", ",", "11", ",", "12", ",", "13", ",", "8", ",", "9", ",", "10", ",", "16", ",", "17", ",", "14", ",", "15", ",", "18", ",", "19", "]", ")", "\n", "self", ".", "flip_paf_ord", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "3", ",", "4", ",", "1", ",", "2", ",", "7", ",", "8", ",", "5", ",", "6", ",", "10", ",", "9", ",", "11", ",", "15", ",", "16", ",", "17", ",", "12", ",", "13", ",", "14", ",", "20", ",", "21", ",", "18", ",", "19", ",", "22", ",", "25", ",", "26", ",", "23", ",", "24", ",", "30", ",", "31", ",", "\n", "32", ",", "27", ",", "28", ",", "29", ",", "33", ",", "35", ",", "34", ",", "39", ",", "40", ",", "41", ",", "36", ",", "37", ",", "38", ",", "42", ",", "46", ",", "47", ",", "48", ",", "43", ",", "44", ",", "45", "]", ")", "\n", "self", ".", "draw_list", "=", "[", "0", ",", "5", ",", "7", ",", "6", ",", "8", ",", "12", ",", "18", ",", "23", ",", "15", ",", "20", ",", "25", ",", "27", ",", "36", ",", "43", ",", "30", ",", "39", ",", "46", ",", "33", "]", "# to draw skeleton", "\n", "# #########################################################################################################", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_dense.CanonicalConfig.ltr_parts": [[129, 137], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "# staticmethod\u4fee\u9970\u7684\u65b9\u6cd5\u5b9a\u4e49\u4e0e\u666e\u901a\u51fd\u6570\u662f\u4e00\u6837\u7684, staticmethod\u652f\u6301\u7c7b\u5bf9\u8c61\u6216\u8005\u5b9e\u4f8b\u5bf9\u65b9\u6cd5\u7684\u8c03\u7528,\u5373\u53ef\u4f7f\u7528A.f()\u6216\u8005a.f()", "\n", "def", "ltr_parts", "(", "parts_dict", ")", ":", "\n", "# When we flip image left parts became right parts and vice versa.", "\n", "# This is the list of parts to exchange each other.", "\n", "        ", "leftParts", "=", "[", "parts_dict", "[", "p", "]", "for", "p", "in", "[", "\"Lsho\"", ",", "\"Lelb\"", ",", "\"Lwri\"", ",", "\"Lhip\"", ",", "\"Lkne\"", ",", "\"Lank\"", ",", "\"Leye\"", ",", "\"Lear\"", "]", "]", "\n", "rightParts", "=", "[", "parts_dict", "[", "p", "]", "for", "p", "in", "[", "\"Rsho\"", ",", "\"Relb\"", ",", "\"Rwri\"", ",", "\"Rhip\"", ",", "\"Rkne\"", ",", "\"Rank\"", ",", "\"Reye\"", ",", "\"Rear\"", "]", "]", "\n", "return", "leftParts", ",", "rightParts", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_dense.COCOSourceConfig.__init__": [[141, 155], ["len", "dict", "zip", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hdf5_source", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a COCOSource Config object\uff0c\n        :param hdf5_source: the path only of hdf5 training materials generated by coco_mask_hdf5.py\n        \"\"\"", "\n", "self", ".", "hdf5_source", "=", "hdf5_source", "\n", "self", ".", "parts", "=", "[", "'nose'", ",", "'Leye'", ",", "'Reye'", ",", "'Lear'", ",", "'Rear'", ",", "'Lsho'", ",", "'Rsho'", ",", "'Lelb'", ",", "\n", "'Relb'", ",", "'Lwri'", ",", "'Rwri'", ",", "'Lhip'", ",", "'Rhip'", ",", "'Lkne'", ",", "'Rkne'", ",", "'Lank'", ",", "\n", "'Rank'", "]", "# coco\u6570\u636e\u96c6\u4e2d\u5173\u952e\u70b9\u7c7b\u578b\u5b9a\u4e49\u7684\u987a\u5e8f", "\n", "\n", "self", ".", "num_parts", "=", "len", "(", "self", ".", "parts", ")", "\n", "\n", "# for COCO neck is calculated like mean of 2 shoulders.", "\n", "self", ".", "parts_dict", "=", "dict", "(", "zip", "(", "self", ".", "parts", ",", "range", "(", "self", ".", "num_parts", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_dense.COCOSourceConfig.convert": [[156, 226], ["numpy.array", "numpy.zeros", "len", "numpy.minimum", "numpy.minimum"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "meta", ",", "global_config", ")", ":", "\n", "        ", "\"\"\"Convert COCO configuration (joint annotation) into ours configuration of this project\"\"\"", "\n", "# ----------------------------------------------", "\n", "# ---\u5c06coco config\u4e2d\u5bf9\u6570\u636e\u7684\u5b9a\u4e49\u6539\u6210CMU\u9879\u76ee\u4e2d\u7684\u683c\u5f0f---", "\n", "# ----------------------------------------------", "\n", "\n", "joints", "=", "np", ".", "array", "(", "meta", "[", "'joints'", "]", ")", "\n", "\n", "assert", "joints", ".", "shape", "[", "1", "]", "==", "len", "(", "self", ".", "parts", ")", "\n", "\n", "result", "=", "np", ".", "zeros", "(", "(", "joints", ".", "shape", "[", "0", "]", ",", "global_config", ".", "num_parts", ",", "3", ")", ")", "\n", "# result\u662f\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4\uff0cshape[0]\u548c\u4eba\u6570\u6709\u5173\uff0c\u6bcf\u4e00\u884c\u5373shape[1]\u548c\u5173\u8282\u70b9\u6570\u76ee\u6709\u5173\uff0c\u6700\u540e\u4e00\u7ef4\u5ea6\u957f\u5ea6\u4e3a3,\u5206\u522b\u662fx,y,v,\u5373\u5750\u6807\u503c\u548c\u53ef\u89c1\u6807\u5fd7\u4f4d", "\n", "result", "[", ":", ",", ":", ",", "2", "]", "=", "3.", "\n", "# OURS - # 3 never marked up in this dataset, 2 - not marked up in this person, 1 - marked and visible,", "\n", "# 0 - marked but invisible. \u5173\u4e8evisible\u503c\u7684\u91cd\u65b0\u5b9a\u4e49\u5728coco_mask_hdf5.py\u4e2d\u5b8c\u6210\u4e86", "\n", "\n", "for", "p", "in", "self", ".", "parts", ":", "\n", "            ", "coco_id", "=", "self", ".", "parts_dict", "[", "p", "]", "\n", "\n", "if", "p", "in", "global_config", ".", "parts_dict", ":", "\n", "                ", "global_id", "=", "global_config", ".", "parts_dict", "[", "p", "]", "# global_id\u662f\u5728\u8be5\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u5173\u8282\u70b9\u7f16\u53f7\uff0c\u56e0\u4e3a\u989d\u5916\u52a0\u5165\u4e86neck(navel?)\uff0c\u4e0e\u539f\u59cbcoco\u6570\u636e\u96c6\u4e2d\u5b9a\u4e49\u4e0d\u540c", "\n", "assert", "global_id", "!=", "1", ",", "\"neck shouldn't be known yet\"", "\n", "# assert global_id != 2, \"navel shouldn't be known yet\"", "\n", "result", "[", ":", ",", "global_id", ",", ":", "]", "=", "joints", "[", ":", ",", "coco_id", ",", ":", "]", "\n", "\n", "", "", "if", "'neck'", "in", "global_config", ".", "parts_dict", ":", "# neck point works as a root note", "\n", "            ", "neckG", "=", "global_config", ".", "parts_dict", "[", "'neck'", "]", "\n", "# parts_dict['neck']\u3000\uff1d\u3000\uff11, parts_dict\u662f\u524d\u9762\u5b9a\u4e49\u8fc7\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u8282\u70b9\u540d\u79f0\uff1a\u5e8f\u53f7", "\n", "RshoC", "=", "self", ".", "parts_dict", "[", "'Rsho'", "]", "\n", "LshoC", "=", "self", ".", "parts_dict", "[", "'Lsho'", "]", "\n", "\n", "# no neck in coco database, we calculate it as average of shoulders", "\n", "#  here, we use 0 - hidden, 1 visible, 2 absent to represent the visibility of keypoints", "\n", "#  - it is not the same as coco values they processed by generate_hdf5", "\n", "\n", "# -------------------------------\u539f\u59cbcoco\u5173\u4e8evisible\u6807\u7b7e\u7684\u5b9a\u4e49\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d--------------\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d#", "\n", "# \u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\u4e2a\u6807\u5fd7\u4f4dv\uff0cv\u4e3a0\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6ca1\u6709\u6807\u6ce8\uff08\u8fd9\u79cd\u60c5\u51b5\u4e0bx = y = v = 0\uff09\uff0c", "\n", "# v\u4e3a1\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u4e86\u4f46\u662f\u4e0d\u53ef\u89c1\uff08\u88ab\u906e\u6321\u4e86\uff09\uff0cv\u4e3a2\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u4e86\u540c\u65f6\u4e5f\u53ef\u89c1\u3002", "\n", "# ------------------------------------ ----------------------------\u3000\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d#", "\n", "\n", "both_shoulders_known", "=", "(", "joints", "[", ":", ",", "LshoC", ",", "2", "]", "<", "2", ")", "&", "(", "joints", "[", ":", ",", "RshoC", ",", "2", "]", "<", "2", ")", "# \u6309\u4f4d\u8fd0\u7b97", "\n", "# \u7528True\u548cFalse\u4f5c\u4e3a\u7d22\u5f15", "\n", "result", "[", "~", "both_shoulders_known", ",", "neckG", ",", "2", "]", "=", "2.", "# otherwise they will be 3. aka 'never marked in this dataset'", "\n", "# ~both_shoulders_known bool\u7c7b\u578b\u6309\u4f4d\u53d6\u53cd", "\n", "result", "[", "both_shoulders_known", ",", "neckG", ",", "0", ":", "2", "]", "=", "(", "joints", "[", "both_shoulders_known", ",", "RshoC", ",", "0", ":", "2", "]", "+", "\n", "joints", "[", "both_shoulders_known", ",", "LshoC", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "result", "[", "both_shoulders_known", ",", "neckG", ",", "2", "]", "=", "np", ".", "minimum", "(", "joints", "[", "both_shoulders_known", ",", "RshoC", ",", "2", "]", ",", "\n", "joints", "[", "both_shoulders_known", ",", "LshoC", ",", "2", "]", ")", "\n", "# \u6700\u540e\u4e00\u4f4d\u662f visible\u3000\u6807\u5fd7\u4f4d\uff0c\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e2d\u6709\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4e0d\u53ef\u89c1\uff0c\u5219\u4e2d\u95f4\u8282\u70b9neck\u8bbe\u4e3a\u4e0d\u53ef\u89c1", "\n", "\n", "", "if", "'navel'", "in", "global_config", ".", "parts_dict", ":", "# add navel keypoint or not?", "\n", "            ", "navelG", "=", "global_config", ".", "parts_dict", "[", "'navel'", "]", "\n", "# parts_dict['navel']\u3000\uff1d 2, parts_dict\u662f\u524d\u9762\u5b9a\u4e49\u8fc7\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u8282\u70b9\u540d\u79f0\uff1a\u5e8f\u53f7", "\n", "RhipC", "=", "self", ".", "parts_dict", "[", "'Rhip'", "]", "\n", "LhipC", "=", "self", ".", "parts_dict", "[", "'Lhip'", "]", "\n", "\n", "# no navel in coco database, we calculate it as average of hipulders", "\n", "both_hipulders_known", "=", "(", "joints", "[", ":", ",", "LhipC", ",", "2", "]", "<", "2", ")", "&", "(", "joints", "[", ":", ",", "RhipC", ",", "2", "]", "<", "2", ")", "# \u6309\u4f4d\u8fd0\u7b97", "\n", "# \u7528True\u548cFalse\u4f5c\u4e3a\u7d22\u5f15", "\n", "result", "[", "\n", "~", "both_hipulders_known", ",", "navelG", ",", "2", "]", "=", "2.", "# otherwise they will be 3. aka 'never marked in this dataset'", "\n", "# ~both_hipulders_known bool\u7c7b\u578b\u6309\u4f4d\u53d6\u53cd", "\n", "result", "[", "both_hipulders_known", ",", "navelG", ",", "0", ":", "2", "]", "=", "(", "joints", "[", "both_hipulders_known", ",", "RhipC", ",", "0", ":", "2", "]", "+", "\n", "joints", "[", "both_hipulders_known", ",", "LhipC", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "result", "[", "both_hipulders_known", ",", "navelG", ",", "2", "]", "=", "np", ".", "minimum", "(", "joints", "[", "both_hipulders_known", ",", "RhipC", ",", "2", "]", ",", "\n", "joints", "[", "both_hipulders_known", ",", "LhipC", ",", "2", "]", ")", "\n", "\n", "", "meta", "[", "'joints'", "]", "=", "result", "\n", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_dense.COCOSourceConfig.repeat_mask": [[227, 231], ["numpy.repeat"], "methods", ["None"], ["", "def", "repeat_mask", "(", "self", ",", "mask", ",", "global_config", ",", "joints", "=", "None", ")", ":", "\n", "# \u590d\u5236mask\u5230\u4e2a\u6570\u5230global_config\u901a\u9053\u6570\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u8fdb\u884c\u901a\u9053\u7684\u590d\u5236\uff0c\u5229\u7528broadcast\uff0c\u8282\u7701\u5185\u5b58", "\n", "        ", "mask", "=", "np", ".", "repeat", "(", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "global_config", ".", "num_layers", ",", "axis", "=", "2", ")", "# mask\u590d\u5236\u6210\u4e8657\u4e2a\u901a\u9053", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_dense.COCOSourceConfig.source": [[232, 235], ["None"], "methods", ["None"], ["", "def", "source", "(", "self", ")", ":", "\n", "# return the path", "\n", "        ", "return", "self", ".", "hdf5_source", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_dense.GetConfig": [[244, 262], ["enumerate", "pprint", "print", "dict", "zip", "len", "range", "len"], "function", ["None"], ["def", "GetConfig", "(", "config_name", ")", ":", "\n", "    ", "config", "=", "Configs", "[", "config_name", "]", "(", ")", "# () will instantiate an object of Configs[config_name] class", "\n", "\n", "dct", "=", "config", ".", "parts", "[", ":", "]", "\n", "dct", "=", "[", "None", "]", "*", "(", "config", ".", "num_layers", "-", "len", "(", "dct", ")", ")", "+", "dct", "\n", "\n", "for", "(", "i", ",", "(", "fr", ",", "to", ")", ")", "in", "enumerate", "(", "config", ".", "limbs_conn", ")", ":", "\n", "        ", "name", "=", "\"%s->%s\"", "%", "(", "config", ".", "parts", "[", "fr", "]", ",", "config", ".", "parts", "[", "to", "]", ")", "\n", "print", "(", "i", ",", "name", ")", "\n", "x", "=", "i", "\n", "\n", "assert", "dct", "[", "x", "]", "is", "None", "\n", "dct", "[", "x", "]", "=", "name", "\n", "\n", "", "from", "pprint", "import", "pprint", "\n", "pprint", "(", "dict", "(", "zip", "(", "range", "(", "len", "(", "dct", ")", ")", ",", "dct", ")", ")", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config2.TransformationParams.__init__": [[25, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "#  TODO: tune # https://github.com/anatolix/keras_Realtime_Multi-Person_Pose_Estimation/issues/16", "\n", "#   We will firstly scale picture so that the height of the main person always will be 0.6 of picture.", "\n", "        ", "self", ".", "target_dist", "=", "0.6", "\n", "self", ".", "scale_prob", "=", "0.8", "# scale probability, 0: never scale, 1: always scale", "\n", "self", ".", "scale_min", "=", "0.75", "# \u4e4b\u524d\u8bad\u7ec3\u8bbe\u7f6e\u7684\u662f0.8\uff0c\u4f46\u53d1\u73b0\u5bf9\u5c0f\u76ee\u6807\u5f88\u4e0d\u660e\u663e", "\n", "self", ".", "scale_max", "=", "1.25", "\n", "self", ".", "max_rotate_degree", "=", "40.", "# todo: \u770b\u770bhourglass\u4e2d512\u8bbe\u7f6e\u7684\u504f\u79fb", "\n", "self", ".", "center_perterb_max", "=", "40.", "# shift augmentation", "\n", "self", ".", "flip_prob", "=", "0.5", "# flip the image to force the network distinguish the mirror symmetrical keypoints", "\n", "self", ".", "tint_prob", "=", "0.4", "# ting\u7740\u8272\u64cd\u4f5c\u6bd4\u8f83\u8017\u65f6\uff0c\u5982\u679c\u6309\u71670.5\u7684\u6982\u7387\u8fdb\u884c\uff0c\u53ef\u80fd\u4f1a\u4f7f\u5f97\u6bcf\u79d2\u6570\u636e\u6269\u5145\u56fe\u7247\u51cf\u5c1110\u5f20", "\n", "self", ".", "sigma", "=", "9", "# 7 \u5f53\u662f512\u8f93\u5165\u65f6\u662f9", "\n", "self", ".", "keypoint_gaussian_thre", "=", "0.01", "# \u4f4e\u4e8e\u6b64\u503c\u7684keypoint gt\u9ad8\u65af\u54cd\u5e94\u7684\u533a\u57df\u88ab\u7f6e\u96f6", "\n", "self", ".", "limb_gaussian_thre", "=", "0.01", "# \u4f4e\u4e8e\u6b64\u503c\u7684body part gt\u9ad8\u65af\u54cd\u5e94\u7684\u533a\u57df\u88ab\u7f6e\u96f6", "\n", "self", ".", "paf_sigma", "=", "7", "# 5 todo: sigma of PAF \u5bf9\u4e8ePAF\u7684\u5206\u5e03\uff0c\u8bbe\u5176\u6807\u51c6\u5dee\u4e3a\u591a\u5c11\u6700\u5408\u9002\u5462", "\n", "# the value of sigma is important, there should be an equal contribution between foreground", "\n", "# and background heatmap pixels. Otherwise, there is a prior towards the background that forces the", "\n", "# network to converge to zero.", "\n", "self", ".", "paf_thre", "=", "1", "*", "stride", "# equals to 1.0 * stride in this program, used to include the end-points of limbs ", "\n", "#  \u4e3a\u4e86\u751f\u6210\u5728PAF\u65f6\uff0c\u8ba1\u7b97limb\u7aef\u70b9\u8fb9\u754c\u65f6\u4f7f\u7528\uff0c\u5728\u6700\u540e\u4e00\u4e2afeature map\u4e0a", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config2.CanonicalConfig.__init__": [[50, 117], ["len", "dict", "len", "config2.CanonicalConfig.ltr_parts", "list", "len", "config2.TransformationParams", "numpy.array", "numpy.array", "zip", "zip", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.CanonicalConfig.ltr_parts"], ["def", "__init__", "(", "self", ",", "dense_conn", "=", "False", ")", ":", "\n", "        ", "self", ".", "width", "=", "384", "\n", "self", ".", "height", "=", "384", "\n", "self", ".", "stride", "=", "4", "# \u7528\u4e8e\u8ba1\u7b97\u7f51\u7edc\u8f93\u51fa\u7684feature map\u7684\u5c3a\u5bf8", "\n", "# self.img_mean = [0.485, 0.456, 0.406]  # RGB format mean and standard variance", "\n", "# self.img_std = [0.229, 0.224, 0.225]", "\n", "self", ".", "parts", "=", "[", "\"nose\"", ",", "\"neck\"", ",", "\"Rsho\"", ",", "\"Relb\"", ",", "\"Rwri\"", ",", "\"Lsho\"", ",", "\"Lelb\"", ",", "\"Lwri\"", ",", "\"Rhip\"", ",", "\"Rkne\"", ",", "\"Rank\"", ",", "\n", "\"Lhip\"", ",", "\"Lkne\"", ",", "\"Lank\"", ",", "\"Reye\"", ",", "\"Leye\"", ",", "\"Rear\"", ",", "\"Lear\"", "]", "# , \"navel\"", "\n", "\n", "self", ".", "num_parts", "=", "len", "(", "self", ".", "parts", ")", "\n", "self", ".", "parts_dict", "=", "dict", "(", "zip", "(", "self", ".", "parts", ",", "range", "(", "self", ".", "num_parts", ")", ")", ")", "\n", "# help the network to detect body parts", "\n", "self", ".", "parts", "+=", "[", "\"background\"", "]", "# person mask\u4f5c\u4e3a\u80cc\u666f\u4e4b\u4e00, global config index: 42", "\n", "# force the network to learn to distinguish the keypoints from background", "\n", "self", ".", "parts", "+=", "[", "'reverseKeypoint'", "]", "# \u5bf9\u6240\u6709keypoints\u53d6\u53cd\u4f5c\u4e3a\u80cc\u666f\u4e8c, global config index: 43", "\n", "self", ".", "num_parts_with_background", "=", "len", "(", "self", ".", "parts", ")", "\n", "self", ".", "leftParts", ",", "self", ".", "rightParts", "=", "CanonicalConfig", ".", "ltr_parts", "(", "self", ".", "parts_dict", ")", "\n", "\n", "# this numbers probably copied from matlab they are 1.. based not 0.. based", "\n", "self", ".", "limb_from", "=", "[", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'nose'", ",", "'nose'", ",", "'Reye'", ",", "'Leye'", ",", "'neck'", ",", "'Rsho'", ",", "\n", "'Relb'", ",", "'neck'", ",", "'Lsho'", ",", "'Lelb'", ",", "\n", "'neck'", ",", "'Rhip'", ",", "'Rkne'", ",", "'neck'", ",", "'Lhip'", ",", "'Lkne'", ",", "'Rhip'", ",", "'Rsho'", ",", "'Lsho'", "]", "\n", "\n", "self", ".", "limb_to", "=", "[", "'nose'", ",", "'Reye'", ",", "'Leye'", ",", "'Rear'", ",", "'Lear'", ",", "'Reye'", ",", "'Leye'", ",", "'Rear'", ",", "'Lear'", ",", "'Rsho'", ",", "'Relb'", ",", "'Rwri'", ",", "\n", "'Lsho'", ",", "'Lelb'", ",", "'Lwri'", ",", "\n", "'Rhip'", ",", "'Rkne'", ",", "'Rank'", ",", "'Lhip'", ",", "'Lkne'", ",", "'Lank'", ",", "'Lhip'", ",", "'Rear'", ",", "'Lear'", "]", "\n", "\n", "self", ".", "limb_from", "=", "[", "self", ".", "parts_dict", "[", "n", "]", "for", "n", "in", "self", ".", "limb_from", "]", "\n", "self", ".", "limb_to", "=", "[", "self", ".", "parts_dict", "[", "n", "]", "for", "n", "in", "self", ".", "limb_to", "]", "\n", "\n", "assert", "self", ".", "limb_from", "==", "[", "x", "for", "x", "in", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "14", ",", "15", ",", "1", ",", "2", ",", "3", ",", "1", ",", "5", ",", "6", ",", "1", ",", "8", ",", "9", ",", "1", ",", "11", ",", "12", ",", "8", ",", "2", ",", "5", "]", "]", "\n", "assert", "self", ".", "limb_to", "==", "[", "x", "for", "x", "in", "\n", "[", "0", ",", "14", ",", "15", ",", "16", ",", "17", ",", "14", ",", "15", ",", "16", ",", "17", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "11", ",", "16", ",", "17", "]", "]", "\n", "\n", "self", ".", "limbs_conn", "=", "list", "(", "zip", "(", "self", ".", "limb_from", ",", "self", ".", "limb_to", ")", ")", "\n", "\n", "self", ".", "paf_layers", "=", "len", "(", "self", ".", "limbs_conn", ")", "\n", "self", ".", "heat_layers", "=", "self", ".", "num_parts", "\n", "# layers of keypoint and body part heatmaps PLUS ++ 2 background", "\n", "self", ".", "num_layers", "=", "self", ".", "paf_layers", "+", "self", ".", "heat_layers", "+", "2", "\n", "\n", "self", ".", "paf_start", "=", "0", "\n", "self", ".", "heat_start", "=", "self", ".", "paf_layers", "# Notice: \u6b64\u5904channel\u5b89\u6392\u4e0a\uff0cpaf_map\u5728\u524d\uff0cheat_map\u5728\u540e", "\n", "self", ".", "bkg_start", "=", "self", ".", "paf_layers", "+", "self", ".", "heat_layers", "# \u7528\u4e8efeature map\u7684\u8ba1\u6570,2\u4e2abackground\u7684\u8d77\u59cb\u70b9", "\n", "\n", "self", ".", "offset_layers", "=", "2", "*", "self", ".", "num_parts", "\n", "self", ".", "offset_start", "=", "self", ".", "num_layers", "\n", "\n", "self", ".", "mask_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ")", "# 46, 46", "\n", "self", ".", "parts_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ",", "self", ".", "num_layers", ")", "# 46, 46, 59", "\n", "self", ".", "offset_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ",", "self", ".", "offset_layers", ")", "\n", "\n", "self", ".", "transform_params", "=", "TransformationParams", "(", "self", ".", "stride", ")", "\n", "\n", "# Some configurations only used in inference process", "\n", "# map between original coco keypoint ids and  our keypoint ids", "\n", "# \u56e0\u4e3aCMU\u7684\u5b9a\u4e49\u548cCOCO\u5b98\u65b9\u5bf9joint\u7f16\u53f7\u7684\u5b9a\u4e49\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7mapping\u628a\u7f16\u53f7\u6539\u8fc7\u6765\u3000\u3000", "\n", "self", ".", "dt_gt_mapping", "=", "{", "0", ":", "0", ",", "1", ":", "None", ",", "2", ":", "6", ",", "3", ":", "8", ",", "4", ":", "10", ",", "5", ":", "5", ",", "6", ":", "7", ",", "7", ":", "9", ",", "8", ":", "12", ",", "9", ":", "14", ",", "10", ":", "16", ",", "11", ":", "11", ",", "12", ":", "13", ",", "\n", "13", ":", "15", ",", "14", ":", "2", ",", "15", ":", "1", ",", "16", ":", "4", ",", "17", ":", "3", "}", "# , 18: None \u6ca1\u6709\u4f7f\u7528\u809a\u8110", "\n", "\n", "# For the flip augmentation in the inference process only", "\n", "self", ".", "flip_heat_ord", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "5", ",", "6", ",", "7", ",", "2", ",", "3", ",", "4", ",", "11", ",", "12", ",", "13", ",", "8", ",", "9", ",", "10", ",", "15", ",", "14", ",", "17", ",", "16", ",", "18", ",", "19", "]", ")", "\n", "self", ".", "flip_paf_ord", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", ",", "6", ",", "5", ",", "8", ",", "7", ",", "12", ",", "13", ",", "14", ",", "9", ",", "10", ",", "11", ",", "18", ",", "19", ",", "20", ",", "15", ",", "16", ",", "17", ",", "21", ",", "23", ",", "22", "]", ")", "\n", "\n", "self", ".", "draw_list", "=", "[", "0", "]", "+", "list", "(", "range", "(", "5", ",", "22", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config2.CanonicalConfig.ltr_parts": [[118, 125], ["None"], "methods", ["None"], ["", "@", "staticmethod", "# staticmethod\u4fee\u9970\u7684\u65b9\u6cd5\u5b9a\u4e49\u4e0e\u666e\u901a\u51fd\u6570\u662f\u4e00\u6837\u7684, staticmethod\u652f\u6301\u7c7b\u5bf9\u8c61\u6216\u8005\u5b9e\u4f8b\u5bf9\u65b9\u6cd5\u7684\u8c03\u7528,\u5373\u53ef\u4f7f\u7528A.f()\u6216\u8005a.f()", "\n", "def", "ltr_parts", "(", "parts_dict", ")", ":", "\n", "# When we flip image left parts became right parts and vice versa.", "\n", "# This is the list of parts to exchange each other.", "\n", "        ", "leftParts", "=", "[", "parts_dict", "[", "p", "]", "for", "p", "in", "[", "\"Lsho\"", ",", "\"Lelb\"", ",", "\"Lwri\"", ",", "\"Lhip\"", ",", "\"Lkne\"", ",", "\"Lank\"", ",", "\"Leye\"", ",", "\"Lear\"", "]", "]", "\n", "rightParts", "=", "[", "parts_dict", "[", "p", "]", "for", "p", "in", "[", "\"Rsho\"", ",", "\"Relb\"", ",", "\"Rwri\"", ",", "\"Rhip\"", ",", "\"Rkne\"", ",", "\"Rank\"", ",", "\"Reye\"", ",", "\"Rear\"", "]", "]", "\n", "return", "leftParts", ",", "rightParts", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config2.COCOSourceConfig.__init__": [[129, 143], ["len", "dict", "zip", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hdf5_source", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a COCOSource Config object\uff0c\n        :param hdf5_source: the path only of hdf5 training materials generated by coco_mask_hdf5.py\n        \"\"\"", "\n", "self", ".", "hdf5_source", "=", "hdf5_source", "\n", "self", ".", "parts", "=", "[", "'nose'", ",", "'Leye'", ",", "'Reye'", ",", "'Lear'", ",", "'Rear'", ",", "'Lsho'", ",", "'Rsho'", ",", "'Lelb'", ",", "\n", "'Relb'", ",", "'Lwri'", ",", "'Rwri'", ",", "'Lhip'", ",", "'Rhip'", ",", "'Lkne'", ",", "'Rkne'", ",", "'Lank'", ",", "\n", "'Rank'", "]", "# coco\u6570\u636e\u96c6\u4e2d\u5173\u952e\u70b9\u7c7b\u578b\u5b9a\u4e49\u7684\u987a\u5e8f", "\n", "\n", "self", ".", "num_parts", "=", "len", "(", "self", ".", "parts", ")", "\n", "\n", "# for COCO neck is calculated like mean of 2 shoulders.", "\n", "self", ".", "parts_dict", "=", "dict", "(", "zip", "(", "self", ".", "parts", ",", "range", "(", "self", ".", "num_parts", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config2.COCOSourceConfig.convert": [[144, 214], ["numpy.array", "numpy.zeros", "len", "numpy.minimum", "numpy.minimum"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "meta", ",", "global_config", ")", ":", "\n", "        ", "\"\"\"Convert COCO configuration (joint annotation) into ours configuration of this project\"\"\"", "\n", "# ----------------------------------------------", "\n", "# ---\u5c06coco config\u4e2d\u5bf9\u6570\u636e\u7684\u5b9a\u4e49\u6539\u6210CMU\u9879\u76ee\u4e2d\u7684\u683c\u5f0f---", "\n", "# ----------------------------------------------", "\n", "\n", "joints", "=", "np", ".", "array", "(", "meta", "[", "'joints'", "]", ")", "\n", "\n", "assert", "joints", ".", "shape", "[", "1", "]", "==", "len", "(", "self", ".", "parts", ")", "\n", "\n", "result", "=", "np", ".", "zeros", "(", "(", "joints", ".", "shape", "[", "0", "]", ",", "global_config", ".", "num_parts", ",", "3", ")", ")", "\n", "# result\u662f\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4\uff0cshape[0]\u548c\u4eba\u6570\u6709\u5173\uff0c\u6bcf\u4e00\u884c\u5373shape[1]\u548c\u5173\u8282\u70b9\u6570\u76ee\u6709\u5173\uff0c\u6700\u540e\u4e00\u7ef4\u5ea6\u957f\u5ea6\u4e3a3,\u5206\u522b\u662fx,y,v,\u5373\u5750\u6807\u503c\u548c\u53ef\u89c1\u6807\u5fd7\u4f4d", "\n", "result", "[", ":", ",", ":", ",", "2", "]", "=", "3.", "\n", "# OURS - # 3 never marked up in this dataset, 2 - not marked up in this person, 1 - marked and visible,", "\n", "# 0 - marked but invisible. \u5173\u4e8evisible\u503c\u7684\u91cd\u65b0\u5b9a\u4e49\u5728coco_mask_hdf5.py\u4e2d\u5b8c\u6210\u4e86", "\n", "\n", "for", "p", "in", "self", ".", "parts", ":", "\n", "            ", "coco_id", "=", "self", ".", "parts_dict", "[", "p", "]", "\n", "\n", "if", "p", "in", "global_config", ".", "parts_dict", ":", "\n", "                ", "global_id", "=", "global_config", ".", "parts_dict", "[", "p", "]", "# global_id\u662f\u5728\u8be5\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u5173\u8282\u70b9\u7f16\u53f7\uff0c\u56e0\u4e3a\u989d\u5916\u52a0\u5165\u4e86neck(navel?)\uff0c\u4e0e\u539f\u59cbcoco\u6570\u636e\u96c6\u4e2d\u5b9a\u4e49\u4e0d\u540c", "\n", "assert", "global_id", "!=", "1", ",", "\"neck shouldn't be known yet\"", "\n", "# assert global_id != 2, \"navel shouldn't be known yet\"", "\n", "result", "[", ":", ",", "global_id", ",", ":", "]", "=", "joints", "[", ":", ",", "coco_id", ",", ":", "]", "\n", "\n", "", "", "if", "'neck'", "in", "global_config", ".", "parts_dict", ":", "# neck point works as a root note", "\n", "            ", "neckG", "=", "global_config", ".", "parts_dict", "[", "'neck'", "]", "\n", "# parts_dict['neck']\u3000\uff1d\u3000\uff11, parts_dict\u662f\u524d\u9762\u5b9a\u4e49\u8fc7\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u8282\u70b9\u540d\u79f0\uff1a\u5e8f\u53f7", "\n", "RshoC", "=", "self", ".", "parts_dict", "[", "'Rsho'", "]", "\n", "LshoC", "=", "self", ".", "parts_dict", "[", "'Lsho'", "]", "\n", "\n", "# no neck in coco database, we calculate it as average of shoulders", "\n", "#  here, we use 0 - hidden, 1 visible, 2 absent to represent the visibility of keypoints", "\n", "#  - it is not the same as coco values they processed by generate_hdf5", "\n", "\n", "# -------------------------------\u539f\u59cbcoco\u5173\u4e8evisible\u6807\u7b7e\u7684\u5b9a\u4e49\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d--------------\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d#", "\n", "# \u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\u4e2a\u6807\u5fd7\u4f4dv\uff0cv\u4e3a0\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6ca1\u6709\u6807\u6ce8\uff08\u8fd9\u79cd\u60c5\u51b5\u4e0bx = y = v = 0\uff09\uff0c", "\n", "# v\u4e3a1\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u4e86\u4f46\u662f\u4e0d\u53ef\u89c1\uff08\u88ab\u906e\u6321\u4e86\uff09\uff0cv\u4e3a2\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u4e86\u540c\u65f6\u4e5f\u53ef\u89c1\u3002", "\n", "# ------------------------------------ ----------------------------\u3000\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d#", "\n", "\n", "both_shoulders_known", "=", "(", "joints", "[", ":", ",", "LshoC", ",", "2", "]", "<", "2", ")", "&", "(", "joints", "[", ":", ",", "RshoC", ",", "2", "]", "<", "2", ")", "# \u6309\u4f4d\u8fd0\u7b97", "\n", "# \u7528True\u548cFalse\u4f5c\u4e3a\u7d22\u5f15", "\n", "result", "[", "~", "both_shoulders_known", ",", "neckG", ",", "2", "]", "=", "2.", "# otherwise they will be 3. aka 'never marked in this dataset'", "\n", "# ~both_shoulders_known bool\u7c7b\u578b\u6309\u4f4d\u53d6\u53cd", "\n", "result", "[", "both_shoulders_known", ",", "neckG", ",", "0", ":", "2", "]", "=", "(", "joints", "[", "both_shoulders_known", ",", "RshoC", ",", "0", ":", "2", "]", "+", "\n", "joints", "[", "both_shoulders_known", ",", "LshoC", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "result", "[", "both_shoulders_known", ",", "neckG", ",", "2", "]", "=", "np", ".", "minimum", "(", "joints", "[", "both_shoulders_known", ",", "RshoC", ",", "2", "]", ",", "\n", "joints", "[", "both_shoulders_known", ",", "LshoC", ",", "2", "]", ")", "\n", "# \u6700\u540e\u4e00\u4f4d\u662f visible\u3000\u6807\u5fd7\u4f4d\uff0c\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e2d\u6709\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4e0d\u53ef\u89c1\uff0c\u5219\u4e2d\u95f4\u8282\u70b9neck\u8bbe\u4e3a\u4e0d\u53ef\u89c1", "\n", "\n", "", "if", "'navel'", "in", "global_config", ".", "parts_dict", ":", "# add navel keypoint or not?", "\n", "            ", "navelG", "=", "global_config", ".", "parts_dict", "[", "'navel'", "]", "\n", "# parts_dict['navel']\u3000\uff1d 2, parts_dict\u662f\u524d\u9762\u5b9a\u4e49\u8fc7\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u8282\u70b9\u540d\u79f0\uff1a\u5e8f\u53f7", "\n", "RhipC", "=", "self", ".", "parts_dict", "[", "'Rhip'", "]", "\n", "LhipC", "=", "self", ".", "parts_dict", "[", "'Lhip'", "]", "\n", "\n", "# no navel in coco database, we calculate it as average of hipulders", "\n", "both_hipulders_known", "=", "(", "joints", "[", ":", ",", "LhipC", ",", "2", "]", "<", "2", ")", "&", "(", "joints", "[", ":", ",", "RhipC", ",", "2", "]", "<", "2", ")", "# \u6309\u4f4d\u8fd0\u7b97", "\n", "# \u7528True\u548cFalse\u4f5c\u4e3a\u7d22\u5f15", "\n", "result", "[", "\n", "~", "both_hipulders_known", ",", "navelG", ",", "2", "]", "=", "2.", "# otherwise they will be 3. aka 'never marked in this dataset'", "\n", "# ~both_hipulders_known bool\u7c7b\u578b\u6309\u4f4d\u53d6\u53cd", "\n", "result", "[", "both_hipulders_known", ",", "navelG", ",", "0", ":", "2", "]", "=", "(", "joints", "[", "both_hipulders_known", ",", "RhipC", ",", "0", ":", "2", "]", "+", "\n", "joints", "[", "both_hipulders_known", ",", "LhipC", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "result", "[", "both_hipulders_known", ",", "navelG", ",", "2", "]", "=", "np", ".", "minimum", "(", "joints", "[", "both_hipulders_known", ",", "RhipC", ",", "2", "]", ",", "\n", "joints", "[", "both_hipulders_known", ",", "LhipC", ",", "2", "]", ")", "\n", "\n", "", "meta", "[", "'joints'", "]", "=", "result", "\n", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config2.COCOSourceConfig.repeat_mask": [[215, 219], ["numpy.repeat"], "methods", ["None"], ["", "def", "repeat_mask", "(", "self", ",", "mask", ",", "global_config", ",", "joints", "=", "None", ")", ":", "\n", "# \u590d\u5236mask\u5230\u4e2a\u6570\u5230global_config\u901a\u9053\u6570\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u8fdb\u884c\u901a\u9053\u7684\u590d\u5236\uff0c\u5229\u7528broadcast\uff0c\u8282\u7701\u5185\u5b58", "\n", "        ", "mask", "=", "np", ".", "repeat", "(", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "global_config", ".", "num_layers", ",", "axis", "=", "2", ")", "# mask\u590d\u5236\u6210\u4e8657\u4e2a\u901a\u9053", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config2.COCOSourceConfig.source": [[220, 223], ["None"], "methods", ["None"], ["", "def", "source", "(", "self", ")", ":", "\n", "# return the path", "\n", "        ", "return", "self", ".", "hdf5_source", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config2.GetConfig": [[232, 250], ["enumerate", "pprint", "print", "dict", "zip", "len", "range", "len"], "function", ["None"], ["def", "GetConfig", "(", "config_name", ")", ":", "\n", "    ", "config", "=", "Configs", "[", "config_name", "]", "(", ")", "# () will instantiate an object of Configs[config_name] class", "\n", "\n", "dct", "=", "config", ".", "parts", "[", ":", "]", "\n", "dct", "=", "[", "None", "]", "*", "(", "config", ".", "num_layers", "-", "len", "(", "dct", ")", ")", "+", "dct", "\n", "\n", "for", "(", "i", ",", "(", "fr", ",", "to", ")", ")", "in", "enumerate", "(", "config", ".", "limbs_conn", ")", ":", "\n", "        ", "name", "=", "\"%s->%s\"", "%", "(", "config", ".", "parts", "[", "fr", "]", ",", "config", ".", "parts", "[", "to", "]", ")", "\n", "print", "(", "i", ",", "name", ")", "\n", "x", "=", "i", "\n", "\n", "assert", "dct", "[", "x", "]", "is", "None", "\n", "dct", "[", "x", "]", "=", "name", "\n", "\n", "", "from", "pprint", "import", "pprint", "\n", "pprint", "(", "dict", "(", "zip", "(", "range", "(", "len", "(", "dct", ")", ")", ",", "dct", ")", ")", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.TransformationParams.__init__": [[27, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "#  TODO: tune # https://github.com/anatolix/keras_Realtime_Multi-Person_Pose_Estimation/issues/16", "\n", "#   We will firstly scale picture so that the height of the main person always will be 0.6 of picture.", "\n", "        ", "self", ".", "target_dist", "=", "0.6", "\n", "self", ".", "scale_prob", "=", "0.8", "# 0.8  # scale probability, 0: never scale, 1: always scale", "\n", "self", ".", "scale_min", "=", "0.6", "# 0.75  # \u4e4b\u524d\u8bad\u7ec3\u8bbe\u7f6e\u7684\u662f0.8\uff0c\u4f46\u53d1\u73b0\u5bf9\u5c0f\u76ee\u6807\u5f88\u4e0d\u660e\u663e", "\n", "self", ".", "scale_max", "=", "1.5", "# 1.25", "\n", "self", ".", "max_rotate_degree", "=", "50.", "# 40 todo: \u770b\u770bhourglass\u4e2d512\u8bbe\u7f6e\u7684\u504f\u79fb", "\n", "self", ".", "center_perterb_max", "=", "50.", "# shift augmentation", "\n", "self", ".", "flip_prob", "=", "0.5", "# flip the image to force the network distinguish the mirror symmetrical keypoints", "\n", "self", ".", "tint_prob", "=", "0.35", "# ting\u7740\u8272\u64cd\u4f5c\u6bd4\u8f83\u8017\u65f6\uff0c\u5982\u679c\u6309\u71670.5\u7684\u6982\u7387\u8fdb\u884c\uff0c\u53ef\u80fd\u4f1a\u4f7f\u5f97\u6bcf\u79d2\u6570\u636e\u6269\u5145\u56fe\u7247\u51cf\u5c1110\u5f20", "\n", "self", ".", "sigma", "=", "9", "# 7 \u5f53\u662f512\u8f93\u5165\u65f6\u662f9", "\n", "self", ".", "keypoint_gaussian_thre", "=", "0.01", "# \u4f4e\u4e8e\u6b64\u503c\u7684keypoint gt\u9ad8\u65af\u54cd\u5e94\u7684\u533a\u57df\u88ab\u7f6e\u96f6", "\n", "self", ".", "limb_gaussian_thre", "=", "0.04", "# 0.03  # 0.1  # \u4f4e\u4e8e\u6b64\u503c\u7684body part gt\u9ad8\u65af\u54cd\u5e94\u7684\u533a\u57df\u88ab\u7f6e\u96f6", "\n", "self", ".", "paf_sigma", "=", "7", "# 5 todo: sigma of PAF \u5bf9\u4e8ePAF\u7684\u5206\u5e03\uff0c\u8bbe\u5176\u6807\u51c6\u5dee\u4e3a\u591a\u5c11\u6700\u5408\u9002\u5462", "\n", "# the value of sigma is important, there should be an equal contribution between foreground", "\n", "# and background heatmap pixels. Otherwise, there is a prior towards the background that forces the", "\n", "# network to converge to zero.", "\n", "self", ".", "paf_thre", "=", "1", "*", "stride", "# equals to 1.0 * stride in this program, used to include the end-points of limbs ", "\n", "#  \u4e3a\u4e86\u751f\u6210\u5728PAF\u65f6\uff0c\u8ba1\u7b97limb\u7aef\u70b9\u8fb9\u754c\u65f6\u4f7f\u7528\uff0c\u5728\u6700\u540e\u4e00\u4e2afeature map\u4e0a", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.CanonicalConfig.__init__": [[53, 125], ["len", "dict", "len", "config_final.CanonicalConfig.ltr_parts", "list", "len", "config_final.TransformationParams", "numpy.array", "numpy.array", "zip", "zip", "range", "list", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.CanonicalConfig.ltr_parts"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "width", "=", "384", "\n", "self", ".", "height", "=", "384", "\n", "self", ".", "stride", "=", "4", "# \u7528\u4e8e\u8ba1\u7b97\u7f51\u7edc\u8f93\u51fa\u7684feature map\u7684\u5c3a\u5bf8", "\n", "# self.img_mean = [0.485, 0.456, 0.406]  # RGB format mean and standard variance", "\n", "# self.img_std = [0.229, 0.224, 0.225]", "\n", "self", ".", "parts", "=", "[", "\"nose\"", ",", "\"neck\"", ",", "\"Rsho\"", ",", "\"Relb\"", ",", "\"Rwri\"", ",", "\"Lsho\"", ",", "\"Lelb\"", ",", "\"Lwri\"", ",", "\"Rhip\"", ",", "\"Rkne\"", ",", "\"Rank\"", ",", "\n", "\"Lhip\"", ",", "\"Lkne\"", ",", "\"Lank\"", ",", "\"Reye\"", ",", "\"Leye\"", ",", "\"Rear\"", ",", "\"Lear\"", "]", "# , \"navel\"", "\n", "\n", "self", ".", "num_parts", "=", "len", "(", "self", ".", "parts", ")", "\n", "self", ".", "parts_dict", "=", "dict", "(", "zip", "(", "self", ".", "parts", ",", "range", "(", "self", ".", "num_parts", ")", ")", ")", "\n", "# help the network to detect body parts", "\n", "self", ".", "parts", "+=", "[", "\"background\"", "]", "# person mask\u4f5c\u4e3a\u80cc\u666f\u4e4b\u4e00, global config index: 42", "\n", "# force the network to learn to distinguish the keypoints from background", "\n", "self", ".", "parts", "+=", "[", "'reverseKeypoint'", "]", "# \u5bf9\u6240\u6709keypoints\u53d6\u53cd\u4f5c\u4e3a\u80cc\u666f\u4e8c, global config index: 43", "\n", "self", ".", "num_parts_with_background", "=", "len", "(", "self", ".", "parts", ")", "\n", "self", ".", "leftParts", ",", "self", ".", "rightParts", "=", "CanonicalConfig", ".", "ltr_parts", "(", "self", ".", "parts_dict", ")", "\n", "\n", "# this numbers probably copied from matlab they are 1.. based not 0.. based", "\n", "self", ".", "limb_from", "=", "[", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'neck'", ",", "'nose'", ",", "'nose'", ",", "'Reye'", ",", "'Leye'", ",", "'neck'", ",", "'Rsho'", ",", "\n", "'Relb'", ",", "'neck'", ",", "'Lsho'", ",", "'Lelb'", ",", "\n", "'neck'", ",", "'Rhip'", ",", "'Rkne'", ",", "'neck'", ",", "'Lhip'", ",", "'Lkne'", ",", "\n", "'nose'", ",", "'nose'", ",", "'Rsho'", ",", "'Rhip'", ",", "'Lsho'", ",", "'Lhip'", ",", "'Rear'", ",", "'Lear'", ",", "'Rhip'", "]", "\n", "\n", "self", ".", "limb_to", "=", "[", "'nose'", ",", "'Reye'", ",", "'Leye'", ",", "'Rear'", ",", "'Lear'", ",", "'Reye'", ",", "'Leye'", ",", "'Rear'", ",", "'Lear'", ",", "'Rsho'", ",", "'Relb'", ",", "'Rwri'", ",", "\n", "'Lsho'", ",", "'Lelb'", ",", "'Lwri'", ",", "\n", "'Rhip'", ",", "'Rkne'", ",", "'Rank'", ",", "'Lhip'", ",", "'Lkne'", ",", "'Lank'", ",", "\n", "'Rsho'", ",", "'Lsho'", ",", "'Rhip'", ",", "'Lkne'", ",", "'Lhip'", ",", "'Rkne'", ",", "'Rsho'", ",", "'Lsho'", ",", "'Lhip'", "]", "\n", "\n", "self", ".", "limb_from", "=", "[", "self", ".", "parts_dict", "[", "n", "]", "for", "n", "in", "self", ".", "limb_from", "]", "\n", "self", ".", "limb_to", "=", "[", "self", ".", "parts_dict", "[", "n", "]", "for", "n", "in", "self", ".", "limb_to", "]", "\n", "\n", "assert", "self", ".", "limb_from", "==", "[", "x", "for", "x", "in", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "14", ",", "15", ",", "1", ",", "2", ",", "3", ",", "1", ",", "5", ",", "6", ",", "1", ",", "8", ",", "9", ",", "1", ",", "11", ",", "12", ",", "\n", "0", ",", "0", ",", "2", ",", "8", ",", "5", ",", "11", ",", "16", ",", "17", ",", "8", "]", "]", "\n", "assert", "self", ".", "limb_to", "==", "[", "x", "for", "x", "in", "\n", "[", "0", ",", "14", ",", "15", ",", "16", ",", "17", ",", "14", ",", "15", ",", "16", ",", "17", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "\n", "2", ",", "5", ",", "8", ",", "12", ",", "11", ",", "9", ",", "2", ",", "5", ",", "11", "]", "]", "\n", "\n", "self", ".", "limbs_conn", "=", "list", "(", "zip", "(", "self", ".", "limb_from", ",", "self", ".", "limb_to", ")", ")", "\n", "\n", "self", ".", "paf_layers", "=", "len", "(", "self", ".", "limbs_conn", ")", "\n", "self", ".", "heat_layers", "=", "self", ".", "num_parts", "\n", "# layers of keypoint and body part heatmaps PLUS ++ 2 background", "\n", "self", ".", "num_layers", "=", "self", ".", "paf_layers", "+", "self", ".", "heat_layers", "+", "2", "\n", "\n", "self", ".", "paf_start", "=", "0", "\n", "self", ".", "heat_start", "=", "self", ".", "paf_layers", "# Notice: \u6b64\u5904channel\u5b89\u6392\u4e0a\uff0cpaf_map\u5728\u524d\uff0cheat_map\u5728\u540e", "\n", "self", ".", "bkg_start", "=", "self", ".", "paf_layers", "+", "self", ".", "heat_layers", "# \u7528\u4e8efeature map\u7684\u8ba1\u6570,2\u4e2abackground\u7684\u8d77\u59cb\u70b9", "\n", "\n", "self", ".", "offset_layers", "=", "2", "*", "self", ".", "num_parts", "\n", "self", ".", "offset_start", "=", "self", ".", "num_layers", "\n", "\n", "self", ".", "mask_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ")", "# 46, 46", "\n", "self", ".", "parts_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ",", "self", ".", "num_layers", ")", "# 46, 46, 59", "\n", "self", ".", "offset_shape", "=", "(", "self", ".", "height", "//", "self", ".", "stride", ",", "self", ".", "width", "//", "self", ".", "stride", ",", "self", ".", "offset_layers", ")", "\n", "\n", "self", ".", "transform_params", "=", "TransformationParams", "(", "self", ".", "stride", ")", "\n", "\n", "# Some configurations only used in inference process", "\n", "# map between original coco keypoint ids and  our keypoint ids", "\n", "# \u56e0\u4e3aCMU\u7684\u5b9a\u4e49\u548cCOCO\u5b98\u65b9\u5bf9joint\u7f16\u53f7\u7684\u5b9a\u4e49\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7mapping\u628a\u7f16\u53f7\u6539\u8fc7\u6765\u3000\u3000", "\n", "self", ".", "dt_gt_mapping", "=", "{", "0", ":", "0", ",", "1", ":", "None", ",", "2", ":", "6", ",", "3", ":", "8", ",", "4", ":", "10", ",", "5", ":", "5", ",", "6", ":", "7", ",", "7", ":", "9", ",", "8", ":", "12", ",", "9", ":", "14", ",", "10", ":", "16", ",", "11", ":", "11", ",", "12", ":", "13", ",", "\n", "13", ":", "15", ",", "14", ":", "2", ",", "15", ":", "1", ",", "16", ":", "4", ",", "17", ":", "3", "}", "# , 18: None \u6ca1\u6709\u4f7f\u7528\u809a\u8110", "\n", "\n", "# For the flip augmentation in the inference process only", "\n", "self", ".", "flip_heat_ord", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "5", ",", "6", ",", "7", ",", "2", ",", "3", ",", "4", ",", "11", ",", "12", ",", "13", ",", "8", ",", "9", ",", "10", ",", "15", ",", "14", ",", "17", ",", "16", ",", "18", ",", "19", "]", ")", "\n", "self", ".", "flip_paf_ord", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", ",", "6", ",", "5", ",", "8", ",", "7", ",", "12", ",", "13", ",", "14", ",", "9", ",", "10", ",", "11", ",", "18", ",", "19", ",", "20", ",", "15", ",", "16", ",", "17", ",", "22", ",", "21", ",", "25", ",", "26", ",", "23", ",", "24", ",", "28", ",", "27", ",", "\n", "29", "]", ")", "\n", "\n", "self", ".", "draw_list", "=", "[", "0", "]", "+", "list", "(", "range", "(", "5", ",", "21", ")", ")", "+", "[", "29", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.CanonicalConfig.ltr_parts": [[126, 133], ["None"], "methods", ["None"], ["", "@", "staticmethod", "# staticmethod\u4fee\u9970\u7684\u65b9\u6cd5\u5b9a\u4e49\u4e0e\u666e\u901a\u51fd\u6570\u662f\u4e00\u6837\u7684, staticmethod\u652f\u6301\u7c7b\u5bf9\u8c61\u6216\u8005\u5b9e\u4f8b\u5bf9\u65b9\u6cd5\u7684\u8c03\u7528,\u5373\u53ef\u4f7f\u7528A.f()\u6216\u8005a.f()", "\n", "def", "ltr_parts", "(", "parts_dict", ")", ":", "\n", "# When we flip image left parts became right parts and vice versa.", "\n", "# This is the list of parts to exchange each other.", "\n", "        ", "leftParts", "=", "[", "parts_dict", "[", "p", "]", "for", "p", "in", "[", "\"Lsho\"", ",", "\"Lelb\"", ",", "\"Lwri\"", ",", "\"Lhip\"", ",", "\"Lkne\"", ",", "\"Lank\"", ",", "\"Leye\"", ",", "\"Lear\"", "]", "]", "\n", "rightParts", "=", "[", "parts_dict", "[", "p", "]", "for", "p", "in", "[", "\"Rsho\"", ",", "\"Relb\"", ",", "\"Rwri\"", ",", "\"Rhip\"", ",", "\"Rkne\"", ",", "\"Rank\"", ",", "\"Reye\"", ",", "\"Rear\"", "]", "]", "\n", "return", "leftParts", ",", "rightParts", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.COCOSourceConfig.__init__": [[138, 152], ["len", "dict", "zip", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hdf5_source", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a COCOSource Config object\uff0c\n        :param hdf5_source: the path only of hdf5 training materials generated by coco_mask_hdf5.py\n        \"\"\"", "\n", "self", ".", "hdf5_source", "=", "hdf5_source", "\n", "self", ".", "parts", "=", "[", "'nose'", ",", "'Leye'", ",", "'Reye'", ",", "'Lear'", ",", "'Rear'", ",", "'Lsho'", ",", "'Rsho'", ",", "'Lelb'", ",", "\n", "'Relb'", ",", "'Lwri'", ",", "'Rwri'", ",", "'Lhip'", ",", "'Rhip'", ",", "'Lkne'", ",", "'Rkne'", ",", "'Lank'", ",", "\n", "'Rank'", "]", "# coco\u6570\u636e\u96c6\u4e2d\u5173\u952e\u70b9\u7c7b\u578b\u5b9a\u4e49\u7684\u987a\u5e8f", "\n", "\n", "self", ".", "num_parts", "=", "len", "(", "self", ".", "parts", ")", "\n", "\n", "# for COCO neck is calculated like mean of 2 shoulders.", "\n", "self", ".", "parts_dict", "=", "dict", "(", "zip", "(", "self", ".", "parts", ",", "range", "(", "self", ".", "num_parts", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.COCOSourceConfig.convert": [[153, 223], ["numpy.array", "numpy.zeros", "len", "numpy.minimum", "numpy.minimum"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "meta", ",", "global_config", ")", ":", "\n", "        ", "\"\"\"Convert COCO configuration (joint annotation) into ours configuration of this project\"\"\"", "\n", "# ----------------------------------------------", "\n", "# ---\u5c06coco config\u4e2d\u5bf9\u6570\u636e\u7684\u5b9a\u4e49\u6539\u6210CMU\u9879\u76ee\u4e2d\u7684\u683c\u5f0f---", "\n", "# ----------------------------------------------", "\n", "\n", "joints", "=", "np", ".", "array", "(", "meta", "[", "'joints'", "]", ")", "\n", "\n", "assert", "joints", ".", "shape", "[", "1", "]", "==", "len", "(", "self", ".", "parts", ")", "\n", "\n", "result", "=", "np", ".", "zeros", "(", "(", "joints", ".", "shape", "[", "0", "]", ",", "global_config", ".", "num_parts", ",", "3", ")", ")", "\n", "# result\u662f\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4\uff0cshape[0]\u548c\u4eba\u6570\u6709\u5173\uff0c\u6bcf\u4e00\u884c\u5373shape[1]\u548c\u5173\u8282\u70b9\u6570\u76ee\u6709\u5173\uff0c\u6700\u540e\u4e00\u7ef4\u5ea6\u957f\u5ea6\u4e3a3,\u5206\u522b\u662fx,y,v,\u5373\u5750\u6807\u503c\u548c\u53ef\u89c1\u6807\u5fd7\u4f4d", "\n", "result", "[", ":", ",", ":", ",", "2", "]", "=", "3.", "\n", "# OURS - # 3 never marked up in this dataset, 2 - not marked up in this person, 1 - marked and visible,", "\n", "# 0 - marked but invisible. \u5173\u4e8evisible\u503c\u7684\u91cd\u65b0\u5b9a\u4e49\u5728coco_mask_hdf5.py\u4e2d\u5b8c\u6210\u4e86", "\n", "\n", "for", "p", "in", "self", ".", "parts", ":", "\n", "            ", "coco_id", "=", "self", ".", "parts_dict", "[", "p", "]", "\n", "\n", "if", "p", "in", "global_config", ".", "parts_dict", ":", "\n", "                ", "global_id", "=", "global_config", ".", "parts_dict", "[", "p", "]", "# global_id\u662f\u5728\u8be5\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u5173\u8282\u70b9\u7f16\u53f7\uff0c\u56e0\u4e3a\u989d\u5916\u52a0\u5165\u4e86neck(navel?)\uff0c\u4e0e\u539f\u59cbcoco\u6570\u636e\u96c6\u4e2d\u5b9a\u4e49\u4e0d\u540c", "\n", "assert", "global_id", "!=", "1", ",", "\"neck shouldn't be known yet\"", "\n", "# assert global_id != 2, \"navel shouldn't be known yet\"", "\n", "result", "[", ":", ",", "global_id", ",", ":", "]", "=", "joints", "[", ":", ",", "coco_id", ",", ":", "]", "\n", "\n", "", "", "if", "'neck'", "in", "global_config", ".", "parts_dict", ":", "# neck point works as a root note", "\n", "            ", "neckG", "=", "global_config", ".", "parts_dict", "[", "'neck'", "]", "\n", "# parts_dict['neck']\u3000\uff1d\u3000\uff11, parts_dict\u662f\u524d\u9762\u5b9a\u4e49\u8fc7\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u8282\u70b9\u540d\u79f0\uff1a\u5e8f\u53f7", "\n", "RshoC", "=", "self", ".", "parts_dict", "[", "'Rsho'", "]", "\n", "LshoC", "=", "self", ".", "parts_dict", "[", "'Lsho'", "]", "\n", "\n", "# no neck in coco database, we calculate it as average of shoulders", "\n", "#  here, we use 0 - hidden, 1 visible, 2 absent to represent the visibility of keypoints", "\n", "#  - it is not the same as coco values they processed by generate_hdf5", "\n", "\n", "# -------------------------------\u539f\u59cbcoco\u5173\u4e8evisible\u6807\u7b7e\u7684\u5b9a\u4e49\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d--------------\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d#", "\n", "# \u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\u4e2a\u6807\u5fd7\u4f4dv\uff0cv\u4e3a0\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6ca1\u6709\u6807\u6ce8\uff08\u8fd9\u79cd\u60c5\u51b5\u4e0bx = y = v = 0\uff09\uff0c", "\n", "# v\u4e3a1\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u4e86\u4f46\u662f\u4e0d\u53ef\u89c1\uff08\u88ab\u906e\u6321\u4e86\uff09\uff0cv\u4e3a2\u65f6\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u4e86\u540c\u65f6\u4e5f\u53ef\u89c1\u3002", "\n", "# ------------------------------------ ----------------------------\u3000\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d#", "\n", "\n", "both_shoulders_known", "=", "(", "joints", "[", ":", ",", "LshoC", ",", "2", "]", "<", "2", ")", "&", "(", "joints", "[", ":", ",", "RshoC", ",", "2", "]", "<", "2", ")", "# \u6309\u4f4d\u8fd0\u7b97", "\n", "# \u7528True\u548cFalse\u4f5c\u4e3a\u7d22\u5f15", "\n", "result", "[", "~", "both_shoulders_known", ",", "neckG", ",", "2", "]", "=", "2.", "# otherwise they will be 3. aka 'never marked in this dataset'", "\n", "# ~both_shoulders_known bool\u7c7b\u578b\u6309\u4f4d\u53d6\u53cd", "\n", "result", "[", "both_shoulders_known", ",", "neckG", ",", "0", ":", "2", "]", "=", "(", "joints", "[", "both_shoulders_known", ",", "RshoC", ",", "0", ":", "2", "]", "+", "\n", "joints", "[", "both_shoulders_known", ",", "LshoC", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "result", "[", "both_shoulders_known", ",", "neckG", ",", "2", "]", "=", "np", ".", "minimum", "(", "joints", "[", "both_shoulders_known", ",", "RshoC", ",", "2", "]", ",", "\n", "joints", "[", "both_shoulders_known", ",", "LshoC", ",", "2", "]", ")", "\n", "# \u6700\u540e\u4e00\u4f4d\u662f visible\u3000\u6807\u5fd7\u4f4d\uff0c\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e2d\u6709\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4e0d\u53ef\u89c1\uff0c\u5219\u4e2d\u95f4\u8282\u70b9neck\u8bbe\u4e3a\u4e0d\u53ef\u89c1", "\n", "\n", "", "if", "'navel'", "in", "global_config", ".", "parts_dict", ":", "# add navel keypoint or not?", "\n", "            ", "navelG", "=", "global_config", ".", "parts_dict", "[", "'navel'", "]", "\n", "# parts_dict['navel']\u3000\uff1d 2, parts_dict\u662f\u524d\u9762\u5b9a\u4e49\u8fc7\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u8282\u70b9\u540d\u79f0\uff1a\u5e8f\u53f7", "\n", "RhipC", "=", "self", ".", "parts_dict", "[", "'Rhip'", "]", "\n", "LhipC", "=", "self", ".", "parts_dict", "[", "'Lhip'", "]", "\n", "\n", "# no navel in coco database, we calculate it as average of hipulders", "\n", "both_hipulders_known", "=", "(", "joints", "[", ":", ",", "LhipC", ",", "2", "]", "<", "2", ")", "&", "(", "joints", "[", ":", ",", "RhipC", ",", "2", "]", "<", "2", ")", "# \u6309\u4f4d\u8fd0\u7b97", "\n", "# \u7528True\u548cFalse\u4f5c\u4e3a\u7d22\u5f15", "\n", "result", "[", "\n", "~", "both_hipulders_known", ",", "navelG", ",", "2", "]", "=", "2.", "# otherwise they will be 3. aka 'never marked in this dataset'", "\n", "# ~both_hipulders_known bool\u7c7b\u578b\u6309\u4f4d\u53d6\u53cd", "\n", "result", "[", "both_hipulders_known", ",", "navelG", ",", "0", ":", "2", "]", "=", "(", "joints", "[", "both_hipulders_known", ",", "RhipC", ",", "0", ":", "2", "]", "+", "\n", "joints", "[", "both_hipulders_known", ",", "LhipC", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "result", "[", "both_hipulders_known", ",", "navelG", ",", "2", "]", "=", "np", ".", "minimum", "(", "joints", "[", "both_hipulders_known", ",", "RhipC", ",", "2", "]", ",", "\n", "joints", "[", "both_hipulders_known", ",", "LhipC", ",", "2", "]", ")", "\n", "\n", "", "meta", "[", "'joints'", "]", "=", "result", "\n", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.COCOSourceConfig.repeat_mask": [[224, 228], ["numpy.repeat"], "methods", ["None"], ["", "def", "repeat_mask", "(", "self", ",", "mask", ",", "global_config", ",", "joints", "=", "None", ")", ":", "\n", "# \u590d\u5236mask\u5230\u4e2a\u6570\u5230global_config\u901a\u9053\u6570\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u8fdb\u884c\u901a\u9053\u7684\u590d\u5236\uff0c\u5229\u7528broadcast\uff0c\u8282\u7701\u5185\u5b58", "\n", "        ", "mask", "=", "np", ".", "repeat", "(", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "global_config", ".", "num_layers", ",", "axis", "=", "2", ")", "# mask\u590d\u5236\u6210\u4e8657\u4e2a\u901a\u9053", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.COCOSourceConfig.source": [[229, 232], ["None"], "methods", ["None"], ["", "def", "source", "(", "self", ")", ":", "\n", "# return the path", "\n", "        ", "return", "self", ".", "hdf5_source", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.GetConfig": [[241, 259], ["enumerate", "pprint", "print", "dict", "zip", "len", "range", "len"], "function", ["None"], ["def", "GetConfig", "(", "config_name", ")", ":", "\n", "    ", "config", "=", "Configs", "[", "config_name", "]", "(", ")", "# () will instantiate an object of Configs[config_name] class", "\n", "\n", "dct", "=", "config", ".", "parts", "[", ":", "]", "\n", "dct", "=", "[", "None", "]", "*", "(", "config", ".", "num_layers", "-", "len", "(", "dct", ")", ")", "+", "dct", "\n", "\n", "for", "(", "i", ",", "(", "fr", ",", "to", ")", ")", "in", "enumerate", "(", "config", ".", "limbs_conn", ")", ":", "\n", "        ", "name", "=", "\"%s->%s\"", "%", "(", "config", ".", "parts", "[", "fr", "]", ",", "config", ".", "parts", "[", "to", "]", ")", "\n", "print", "(", "i", ",", "name", ")", "\n", "x", "=", "i", "\n", "\n", "assert", "dct", "[", "x", "]", "is", "None", "\n", "dct", "[", "x", "]", "=", "name", "\n", "\n", "", "from", "pprint", "import", "pprint", "\n", "pprint", "(", "dict", "(", "zip", "(", "range", "(", "len", "(", "dct", ")", ")", ",", "dct", ")", ")", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.Merge.__init__": [[16, 19], ["torch.nn.Module.__init__", "models.layers_transposed.Conv"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ")", ":", "\n", "        ", "super", "(", "Merge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv", "(", "x_dim", ",", "y_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "# fixme: bn=False", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.Merge.forward": [[20, 22], ["posenet2.Merge.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.Features.__init__": [[28, 35], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Sequential", "models.layers_transposed.Conv", "models.layers_transposed.Conv", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "inp_dim", ",", "increase", "=", "128", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Regress 5 different scales of heatmaps per stack", "\n", "self", ".", "before_regress", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "Conv", "(", "inp_dim", "+", "i", "*", "increase", ",", "inp_dim", "+", "i", "*", "increase", ",", "3", ",", "bn", "=", "bn", ",", "dropout", "=", "False", ")", ",", "\n", "Conv", "(", "inp_dim", "+", "i", "*", "increase", ",", "inp_dim", "+", "i", "*", "increase", ",", "3", ",", "bn", "=", "bn", ",", "dropout", "=", "False", ")", ",", "\n", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.Features.forward": [[36, 39], ["len", "len", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms", ")", ":", "\n", "        ", "assert", "len", "(", "fms", ")", "==", "5", ",", "\"hourglass output {} tensors,but 5 scale heatmaps are supervised\"", ".", "format", "(", "len", "(", "fms", ")", ")", "\n", "return", "[", "self", ".", "before_regress", "[", "i", "]", "(", "fms", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.PoseNet.__init__": [[42, 79], ["torch.nn.Module.__init__", "models.layers_transposed.Backbone", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "posenet2.PoseNet._initialize_weights", "models.layers_transposed.Hourglass", "posenet2.Features", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "range", "range", "range", "range", "range", "models.layers_transposed.Conv", "models.layers_transposed.SELayer", "posenet2.Merge", "posenet2.Merge", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nstack", ",", "inp_dim", ",", "oup_dim", ",", "bn", "=", "False", ",", "increase", "=", "128", ",", "init_weights", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Pack or initialize the trainable parameters of the network\n        :param nstack: number of stack\n        :param inp_dim: input tensor channels fed into the hourglass block\n        :param oup_dim: channels of regressed feature maps\n        :param bn: use batch normalization\n        :param increase: increased channels once down-sampling\n        :param kwargs:\n        \"\"\"", "\n", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.pre = nn.Sequential(", "\n", "#     Conv(3, 64, 7, 2, bn=bn),", "\n", "#     Conv(64, 128, bn=bn),", "\n", "#     nn.MaxPool2d(2, 2),", "\n", "#     Conv(128, 128, bn=bn),", "\n", "#     Conv(128, inp_dim, bn=bn)", "\n", "# )", "\n", "self", ".", "pre", "=", "Backbone", "(", "nFeat", "=", "inp_dim", ")", "\n", "self", ".", "hourglass", "=", "nn", ".", "ModuleList", "(", "[", "Hourglass", "(", "4", ",", "inp_dim", ",", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "[", "Features", "(", "inp_dim", ",", "increase", "=", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "# predict 5 different scales of heatmpas per stack, keep in mind to pack the list using ModuleList.", "\n", "# Notice: nn.ModuleList can only identify Module subclass! Thus, we must pack the inner layers in ModuleList.", "\n", "self", ".", "outs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Conv", "(", "inp_dim", "+", "j", "*", "increase", ",", "oup_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "channel_attention", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "SELayer", "(", "inp_dim", "+", "j", "*", "increase", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "merge_features", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "inp_dim", "+", "j", "*", "increase", ",", "inp_dim", "+", "j", "*", "increase", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "merge_preds", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "oup_dim", ",", "inp_dim", "+", "j", "*", "increase", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "nstack", "=", "nstack", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.PoseNet.forward": [[80, 120], ["imgs.permute", "posenet2.PoseNet.pre", "range", "range", "pred.append", "range", "range", "preds_instack.append", "torch.zeros_like", "range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "# Input Tensor: a batch of images within [0,1], shape=(N, H, W, C). Pre-processing was done in data generator", "\n", "        ", "x", "=", "imgs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# Permute the dimensions of images to (N, C, H, W)", "\n", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "pred", "=", "[", "]", "\n", "# loop over stack", "\n", "for", "i", "in", "range", "(", "self", ".", "nstack", ")", ":", "\n", "            ", "preds_instack", "=", "[", "]", "\n", "# return 5 scales of feature maps", "\n", "hourglass_feature", "=", "self", ".", "hourglass", "[", "i", "]", "(", "x", ")", "\n", "\n", "if", "i", "==", "0", ":", "# cache for smaller feature maps produced by hourglass block", "\n", "                ", "features_cache", "=", "[", "torch", ".", "zeros_like", "(", "hourglass_feature", "[", "scale", "]", ")", "for", "scale", "in", "range", "(", "5", ")", "]", "\n", "for", "s", "in", "range", "(", "5", ")", ":", "# channel attention before heatmap regression", "\n", "                    ", "hourglass_feature", "[", "s", "]", "=", "self", ".", "channel_attention", "[", "i", "]", "[", "s", "]", "(", "hourglass_feature", "[", "s", "]", ")", "\n", "", "", "else", ":", "# residual connection across stacks", "\n", "                ", "for", "k", "in", "range", "(", "5", ")", ":", "\n", "#  python\u91cc\u9762\u7684+=, \uff0c*=\u4e5f\u662fin-place operation,\u9700\u8981\u6ce8\u610f", "\n", "                    ", "hourglass_feature_attention", "=", "self", ".", "channel_attention", "[", "i", "]", "[", "k", "]", "(", "hourglass_feature", "[", "k", "]", ")", "\n", "\n", "hourglass_feature", "[", "k", "]", "=", "hourglass_feature_attention", "+", "features_cache", "[", "k", "]", "\n", "# feature maps before heatmap regression", "\n", "", "", "features_instack", "=", "self", ".", "features", "[", "i", "]", "(", "hourglass_feature", ")", "\n", "\n", "for", "j", "in", "range", "(", "5", ")", ":", "# handle 5 scales of heatmaps", "\n", "                ", "preds_instack", ".", "append", "(", "self", ".", "outs", "[", "i", "]", "[", "j", "]", "(", "features_instack", "[", "j", "]", ")", ")", "\n", "if", "i", "!=", "self", ".", "nstack", "-", "1", ":", "\n", "                    ", "if", "j", "==", "0", ":", "\n", "                        ", "x", "=", "x", "+", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "# input tensor for next stack", "\n", "features_cache", "[", "j", "]", "=", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "\n", "", "else", ":", "\n", "# reset the res caches", "\n", "                        ", "features_cache", "[", "j", "]", "=", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "", "", "", "pred", ".", "append", "(", "preds_instack", ")", "\n", "# returned list shape: [nstack * [batch*128*128, batch*64*64, batch*32*32, batch*16*16, batch*8*8]]z", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.PoseNet._initialize_weights": [[121, 142], ["posenet2.PoseNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# \u5377\u79ef\u7684\u521d\u59cb\u5316\u65b9\u6cd5", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# TODO: \u4f7f\u7528\u6b63\u6001\u5206\u5e03\u8fdb\u884c\u521d\u59cb\u5316\uff080, 0.01) \u7f51\u7edc\u6743\u91cd\u770b\u770b", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# He kaiming \u521d\u59cb\u5316, \u65b9\u5dee\u4e3a2/n. math.sqrt(2. / n) \u6216\u8005\u76f4\u63a5\u4f7f\u7528\u73b0\u6210\u7684nn.init\u4e2d\u7684\u51fd\u6570\u3002\u5728\u8fd9\u91cc\u4f1a\u68af\u5ea6\u7206\u70b8", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "# # math.sqrt(2. / n)", "\n", "# torch.nn.init.uniform_(tensorx)", "\n", "# bias\u90fd\u521d\u59cb\u5316\u4e3a0", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "# \u5f53\u6709BN\u5c42\u65f6\uff0c\u5377\u79ef\u5c42Con\u4e0d\u52a0bias\uff01", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# batchnorm\u4f7f\u7528\u51681\u521d\u59cb\u5316 bias\u51680", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.01", ")", "# todo: 0.001?", "\n", "# m.weight.data.normal_(0, 0.01)", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.Network.__init__": [[148, 154], ["super().__init__", "posenet2.PoseNet", "models.loss_model.MultiTaskLoss", "models.loss_model_parallel.MultiTaskLossParallel"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ",", "dist", "=", "False", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ")", "\n", "# If we use train_parallel, we implement the parallel loss . And if we use train_distributed,", "\n", "# we should use single process loss because each process on these 4 GPUs  is independent", "\n", "self", ".", "criterion", "=", "MultiTaskLoss", "(", "opt", ",", "config", ")", "if", "dist", "else", "MultiTaskLossParallel", "(", "opt", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.Network.forward": [[155, 166], ["posenet2.Network.posenet", "posenet2.Network.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ",", "target_tuple", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", ",", "loss", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.NetworkEval.__init__": [[172, 175], ["super().__init__", "posenet2.PoseNet"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetworkEval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ",", "init_weights", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet2.NetworkEval.forward": [[176, 186], ["posenet2.NetworkEval.posenet", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "raise", "ValueError", "(", "'\\nOnly eval mode is available!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.Merge.__init__": [[19, 22], ["torch.nn.Module.__init__", "models.layers_transposed.Conv"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Merge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv", "(", "x_dim", ",", "y_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.Merge.forward": [[23, 25], ["posenet3.Merge.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.Features.__init__": [[31, 38], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Sequential", "models.layers_transposed.Conv", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "inp_dim", ",", "increase", "=", "128", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Regress 5 different scales of heatmaps per stack", "\n", "self", ".", "before_regress", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "\n", "Conv", "(", "inp_dim", "+", "i", "*", "increase", ",", "inp_dim", "+", "i", "*", "increase", ",", "3", ",", "bn", "=", "bn", ",", "dropout", "=", "False", ")", ",", "\n", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.Features.forward": [[39, 42], ["len", "len", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms", ")", ":", "\n", "        ", "assert", "len", "(", "fms", ")", "==", "5", ",", "\"hourglass output {} tensors,but 5 scale heatmaps are supervised\"", ".", "format", "(", "len", "(", "fms", ")", ")", "\n", "return", "[", "self", ".", "before_regress", "[", "i", "]", "(", "fms", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.PoseNet.__init__": [[45, 86], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.layers_transposed.Conv", "models.layers_transposed.Conv", "torch.nn.MaxPool2d", "models.layers_transposed.Conv", "models.layers_transposed.Conv", "posenet3.PoseNet._initialize_weights", "models.layers_transposed.Hourglass", "posenet3.Features", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "range", "range", "range", "range", "range", "models.layers_transposed.Conv", "models.layers_transposed.SELayer", "posenet3.Merge", "posenet3.Merge", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nstack", ",", "inp_dim", ",", "oup_dim", ",", "bn", "=", "False", ",", "increase", "=", "128", ",", "init_weights", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Pack or initialize the trainable parameters of the network\n        :param nstack: number of stack\n        :param inp_dim: input tensor channels fed into the hourglass block\n        :param oup_dim: channels of regressed feature maps\n        :param bn: use batch normalization\n        :param increase: increased channels once down-sampling\n        :param kwargs:\n        \"\"\"", "\n", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre", "=", "nn", ".", "Sequential", "(", "\n", "Conv", "(", "3", ",", "64", ",", "7", ",", "2", ",", "bn", "=", "bn", ")", ",", "\n", "Conv", "(", "64", ",", "128", ",", "bn", "=", "bn", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "Conv", "(", "128", ",", "128", ",", "bn", "=", "bn", ")", ",", "\n", "Conv", "(", "128", ",", "inp_dim", ",", "bn", "=", "bn", ")", "\n", ")", "\n", "# self.pre = Backbone(nFeat=inp_dim)  # It doesn't affect the results regardless of which self.pre is used", "\n", "self", ".", "hourglass", "=", "nn", ".", "ModuleList", "(", "[", "Hourglass", "(", "4", ",", "inp_dim", ",", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "[", "Features", "(", "inp_dim", ",", "increase", "=", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "# predict 5 different scales of heatmpas per stack, keep in mind to pack the list using ModuleList.", "\n", "# Notice: nn.ModuleList can only identify Module subclass! Thus, we must pack the inner layers in ModuleList.", "\n", "# TODO: change the outs layers, Conv(inp_dim, oup_dim, 1, relu=False, bn=False)", "\n", "self", ".", "outs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Conv", "(", "inp_dim", "+", "j", "*", "increase", ",", "oup_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "channel_attention", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "SELayer", "(", "inp_dim", "+", "j", "*", "increase", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", ")", "]", ")", "\n", "\n", "# TODO: change the merge layers, Merge(inp_dim, inp_dim + j * increase)", "\n", "self", ".", "merge_features", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "inp_dim", "+", "j", "*", "increase", ",", "inp_dim", "+", "j", "*", "increase", ",", "bn", "=", "bn", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "merge_preds", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "oup_dim", ",", "inp_dim", "+", "j", "*", "increase", ",", "bn", "=", "bn", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "nstack", "=", "nstack", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.PoseNet.forward": [[87, 127], ["imgs.permute", "posenet3.PoseNet.pre", "range", "range", "pred.append", "range", "range", "preds_instack.append", "torch.zeros_like", "range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "# Input Tensor: a batch of images within [0,1], shape=(N, H, W, C). Pre-processing was done in data generator", "\n", "        ", "x", "=", "imgs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# Permute the dimensions of images to (N, C, H, W)", "\n", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "pred", "=", "[", "]", "\n", "# loop over stack", "\n", "for", "i", "in", "range", "(", "self", ".", "nstack", ")", ":", "\n", "            ", "preds_instack", "=", "[", "]", "\n", "# return 5 scales of feature maps", "\n", "hourglass_feature", "=", "self", ".", "hourglass", "[", "i", "]", "(", "x", ")", "\n", "\n", "if", "i", "==", "0", ":", "# cache for smaller feature maps produced by hourglass block", "\n", "                ", "features_cache", "=", "[", "torch", ".", "zeros_like", "(", "hourglass_feature", "[", "scale", "]", ")", "for", "scale", "in", "range", "(", "5", ")", "]", "\n", "for", "s", "in", "range", "(", "5", ")", ":", "# channel attention before heatmap regression", "\n", "                    ", "hourglass_feature", "[", "s", "]", "=", "self", ".", "channel_attention", "[", "i", "]", "[", "s", "]", "(", "hourglass_feature", "[", "s", "]", ")", "\n", "", "", "else", ":", "# residual connection across stacks", "\n", "                ", "for", "k", "in", "range", "(", "5", ")", ":", "\n", "#  python\u91cc\u9762\u7684+=, \uff0c*=\u4e5f\u662fin-place operation,\u9700\u8981\u6ce8\u610f", "\n", "                    ", "hourglass_feature_attention", "=", "self", ".", "channel_attention", "[", "i", "]", "[", "k", "]", "(", "hourglass_feature", "[", "k", "]", ")", "\n", "\n", "hourglass_feature", "[", "k", "]", "=", "hourglass_feature_attention", "+", "features_cache", "[", "k", "]", "\n", "# feature maps before heatmap regression", "\n", "", "", "features_instack", "=", "self", ".", "features", "[", "i", "]", "(", "hourglass_feature", ")", "\n", "\n", "for", "j", "in", "range", "(", "5", ")", ":", "# handle 5 scales of heatmaps", "\n", "                ", "preds_instack", ".", "append", "(", "self", ".", "outs", "[", "i", "]", "[", "j", "]", "(", "features_instack", "[", "j", "]", ")", ")", "\n", "if", "i", "!=", "self", ".", "nstack", "-", "1", ":", "\n", "                    ", "if", "j", "==", "0", ":", "\n", "                        ", "x", "=", "x", "+", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "# input tensor for next stack", "\n", "features_cache", "[", "j", "]", "=", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "\n", "", "else", ":", "\n", "# reset the res caches", "\n", "                        ", "features_cache", "[", "j", "]", "=", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "", "", "", "pred", ".", "append", "(", "preds_instack", ")", "\n", "# returned list shape: [nstack * [batch*128*128, batch*64*64, batch*32*32, batch*16*16, batch*8*8]]z", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.PoseNet._initialize_weights": [[128, 149], ["posenet3.PoseNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# \u5377\u79ef\u7684\u521d\u59cb\u5316\u65b9\u6cd5", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# TODO: \u4f7f\u7528\u6b63\u6001\u5206\u5e03\u8fdb\u884c\u521d\u59cb\u5316\uff080, 0.01) \u7f51\u7edc\u6743\u91cd\u770b\u770b", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# He kaiming \u521d\u59cb\u5316, \u65b9\u5dee\u4e3a2/n. math.sqrt(2. / n) \u6216\u8005\u76f4\u63a5\u4f7f\u7528\u73b0\u6210\u7684nn.init\u4e2d\u7684\u51fd\u6570\u3002\u5728\u8fd9\u91cc\u4f1a\u68af\u5ea6\u7206\u70b8", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "# # math.sqrt(2. / n)", "\n", "# torch.nn.init.kaiming_normal_(m.weight)", "\n", "# bias\u90fd\u521d\u59cb\u5316\u4e3a0", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "# \u5f53\u6709BN\u5c42\u65f6\uff0c\u5377\u79ef\u5c42Con\u4e0d\u52a0bias\uff01", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# batchnorm\u4f7f\u7528\u51681\u521d\u59cb\u5316 bias\u51680", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.01", ")", "# todo: 0.001?", "\n", "# m.weight.data.normal_(0, 0.01)", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.Network.__init__": [[155, 162], ["super().__init__", "posenet3.PoseNet", "models.loss_model.MultiTaskLoss", "models.loss_model_parallel.MultiTaskLossParallel"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ",", "dist", "=", "False", ",", "swa", "=", "False", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ",", "increase", "=", "opt", ".", "increase", ")", "\n", "# If we use train_parallel, we implement the parallel loss . And if we use train_distributed,", "\n", "# we should use single process loss because each process on these 4 GPUs  is independent", "\n", "self", ".", "criterion", "=", "MultiTaskLoss", "(", "opt", ",", "config", ")", "if", "dist", "else", "MultiTaskLossParallel", "(", "opt", ",", "config", ")", "\n", "self", ".", "swa", "=", "swa", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.Network.forward": [[163, 182], ["posenet3.Network.posenet", "posenet3.Network.criterion", "posenet3.Network.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_all", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "inp_imgs", "=", "input_all", "[", "0", "]", "\n", "target_tuple", "=", "input_all", "[", "1", ":", "]", "\n", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "# testing mode", "\n", "            ", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "return", "output_tuple", ",", "loss", "\n", "\n", "", "else", ":", "# training mode", "\n", "            ", "if", "not", "self", ".", "swa", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "return", "loss", "\n", "", "else", ":", "\n", "                ", "return", "output_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.NetworkEval.__init__": [[188, 192], ["super().__init__", "posenet3.PoseNet"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetworkEval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ",", "init_weights", "=", "False", ",", "\n", "increase", "=", "opt", ".", "increase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet3.NetworkEval.forward": [[193, 203], ["posenet3.NetworkEval.posenet", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "raise", "ValueError", "(", "'\\nOnly eval mode is available!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.Merge.__init__": [[16, 19], ["torch.nn.Module.__init__", "models.layers_transposed.Conv"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Merge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv", "(", "x_dim", ",", "y_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.Merge.forward": [[20, 22], ["posenet.Merge.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.Features.__init__": [[28, 37], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Sequential", "models.layers_transposed.Conv", "models.layers_transposed.Conv", "models.layers_transposed.SELayer", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "inp_dim", ",", "increase", "=", "128", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Regress 5 different scales of heatmaps per stack", "\n", "self", ".", "before_regress", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "Conv", "(", "inp_dim", "+", "i", "*", "increase", ",", "inp_dim", ",", "3", ",", "bn", "=", "bn", ",", "dropout", "=", "False", ")", ",", "\n", "Conv", "(", "inp_dim", ",", "inp_dim", ",", "3", ",", "bn", "=", "bn", ",", "dropout", "=", "False", ")", ",", "\n", "# ##################### Channel Attention layer  #####################", "\n", "SELayer", "(", "inp_dim", ")", ",", "\n", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.Features.forward": [[38, 41], ["len", "len", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms", ")", ":", "\n", "        ", "assert", "len", "(", "fms", ")", "==", "5", ",", "\"hourglass output {} tensors,but 5 scale heatmaps are supervised\"", ".", "format", "(", "len", "(", "fms", ")", ")", "\n", "return", "[", "self", ".", "before_regress", "[", "i", "]", "(", "fms", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.PoseNet.__init__": [[44, 81], ["torch.nn.Module.__init__", "models.layers_transposed.Backbone", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "posenet.PoseNet._initialize_weights", "models.layers_transposed.Hourglass", "posenet.Features", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "range", "range", "range", "range", "models.layers_transposed.Conv", "posenet.Merge", "posenet.Merge", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nstack", ",", "inp_dim", ",", "oup_dim", ",", "bn", "=", "False", ",", "increase", "=", "128", ",", "init_weights", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Pack or initialize the trainable parameters of the network\n        :param nstack: number of stack\n        :param inp_dim: input tensor channels fed into the hourglass block\n        :param oup_dim: channels of regressed feature maps\n        :param bn: use batch normalization\n        :param increase: increased channels once down-sampling\n        :param kwargs:\n        \"\"\"", "\n", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.pre = nn.Sequential(", "\n", "#     Conv(3, 64, 7, 2, bn=bn),", "\n", "#     Conv(64, 128, bn=bn),", "\n", "#     nn.MaxPool2d(2, 2),", "\n", "#     Conv(128, 128, bn=bn),", "\n", "#     Conv(128, inp_dim, bn=bn)", "\n", "# )", "\n", "self", ".", "pre", "=", "Backbone", "(", "nFeat", "=", "inp_dim", ")", "# It doesn't affect the results regardless of which self.pre is used", "\n", "self", ".", "hourglass", "=", "nn", ".", "ModuleList", "(", "[", "Hourglass", "(", "4", ",", "inp_dim", ",", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "[", "Features", "(", "inp_dim", ",", "increase", "=", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "# predict 5 different scales of heatmpas per stack, keep in mind to pack the list using ModuleList.", "\n", "# Notice: nn.ModuleList can only identify Module subclass! Thus, we must pack the inner layers in ModuleList.", "\n", "# TODO: change the outs layers, Conv(inp_dim + j * increase, oup_dim, 1, relu=False, bn=False)", "\n", "self", ".", "outs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Conv", "(", "inp_dim", ",", "oup_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", ")", "]", ")", "\n", "\n", "# TODO: change the merge layers, Merge(inp_dim + j * increase, inp_dim + j * increase)", "\n", "self", ".", "merge_features", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "inp_dim", ",", "inp_dim", "+", "j", "*", "increase", ",", "bn", "=", "bn", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "merge_preds", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "oup_dim", ",", "inp_dim", "+", "j", "*", "increase", ",", "bn", "=", "bn", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "nstack", "=", "nstack", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.PoseNet.forward": [[82, 118], ["imgs.permute", "posenet.PoseNet.pre", "range", "range", "pred.append", "preds_instack.append", "torch.zeros_like", "range", "range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "# Input Tensor: a batch of images within [0,1], shape=(N, H, W, C). Pre-processing was done in data generator", "\n", "        ", "x", "=", "imgs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# Permute the dimensions of images to (N, C, H, W)", "\n", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "pred", "=", "[", "]", "\n", "# loop over stack", "\n", "for", "i", "in", "range", "(", "self", ".", "nstack", ")", ":", "\n", "            ", "preds_instack", "=", "[", "]", "\n", "# return 5 scales of feature maps", "\n", "hourglass_feature", "=", "self", ".", "hourglass", "[", "i", "]", "(", "x", ")", "\n", "\n", "if", "i", "==", "0", ":", "# cache for smaller feature maps produced by hourglass block", "\n", "                ", "features_cache", "=", "[", "torch", ".", "zeros_like", "(", "hourglass_feature", "[", "scale", "]", ")", "for", "scale", "in", "range", "(", "5", ")", "]", "\n", "\n", "", "else", ":", "# residual connection across stacks", "\n", "#  python\u91cc\u9762\u7684+=, \uff0c*=\u4e5f\u662fin-place operation,\u9700\u8981\u6ce8\u610f", "\n", "                ", "hourglass_feature", "=", "[", "hourglass_feature", "[", "scale", "]", "+", "features_cache", "[", "scale", "]", "for", "scale", "in", "range", "(", "5", ")", "]", "\n", "# feature maps before heatmap regression", "\n", "", "features_instack", "=", "self", ".", "features", "[", "i", "]", "(", "hourglass_feature", ")", "\n", "\n", "for", "j", "in", "range", "(", "5", ")", ":", "# handle 5 scales of heatmaps", "\n", "                ", "preds_instack", ".", "append", "(", "self", ".", "outs", "[", "i", "]", "[", "j", "]", "(", "features_instack", "[", "j", "]", ")", ")", "\n", "if", "i", "!=", "self", ".", "nstack", "-", "1", ":", "\n", "                    ", "if", "j", "==", "0", ":", "\n", "                        ", "x", "=", "x", "+", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "# input tensor for next stack", "\n", "features_cache", "[", "j", "]", "=", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "\n", "", "else", ":", "\n", "# reset the res caches", "\n", "                        ", "features_cache", "[", "j", "]", "=", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "", "", "", "pred", ".", "append", "(", "preds_instack", ")", "\n", "# returned list shape: [nstack * [batch*128*128, batch*64*64, batch*32*32, batch*16*16, batch*8*8]]z", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.PoseNet._initialize_weights": [[119, 140], ["posenet.PoseNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# \u5377\u79ef\u7684\u521d\u59cb\u5316\u65b9\u6cd5", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# TODO: \u4f7f\u7528\u6b63\u6001\u5206\u5e03\u8fdb\u884c\u521d\u59cb\u5316\uff080, 0.01) \u7f51\u7edc\u6743\u91cd\u770b\u770b", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# He kaiming \u521d\u59cb\u5316, \u65b9\u5dee\u4e3a2/n. math.sqrt(2. / n) \u6216\u8005\u76f4\u63a5\u4f7f\u7528\u73b0\u6210\u7684nn.init\u4e2d\u7684\u51fd\u6570\u3002\u5728\u8fd9\u91cc\u4f1a\u68af\u5ea6\u7206\u70b8", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "# # math.sqrt(2. / n)", "\n", "# torch.nn.init.kaiming_normal_(m.weight)", "\n", "# bias\u90fd\u521d\u59cb\u5316\u4e3a0", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "# \u5f53\u6709BN\u5c42\u65f6\uff0c\u5377\u79ef\u5c42Con\u4e0d\u52a0bias\uff01", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# batchnorm\u4f7f\u7528\u51681\u521d\u59cb\u5316 bias\u51680", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.01", ")", "# todo: 0.001?", "\n", "# m.weight.data.normal_(0, 0.01)", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.Network.__init__": [[146, 153], ["super().__init__", "posenet.PoseNet", "models.loss_model.MultiTaskLoss", "models.loss_model_parallel.MultiTaskLossParallel"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ",", "dist", "=", "False", ",", "swa", "=", "False", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ",", "increase", "=", "opt", ".", "increase", ")", "\n", "# If we use train_parallel, we implement the parallel loss . And if we use train_distributed,", "\n", "# we should use single process loss because each process on these 4 GPUs  is independent", "\n", "self", ".", "criterion", "=", "MultiTaskLoss", "(", "opt", ",", "config", ")", "if", "dist", "else", "MultiTaskLossParallel", "(", "opt", ",", "config", ")", "\n", "self", ".", "swa", "=", "swa", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.Network.forward": [[154, 173], ["posenet.Network.posenet", "posenet.Network.criterion", "posenet.Network.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_all", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "inp_imgs", "=", "input_all", "[", "0", "]", "\n", "target_tuple", "=", "input_all", "[", "1", ":", "]", "\n", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "# testing mode", "\n", "            ", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "return", "output_tuple", ",", "loss", "\n", "\n", "", "else", ":", "# training mode", "\n", "            ", "if", "not", "self", ".", "swa", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "return", "loss", "\n", "", "else", ":", "\n", "                ", "return", "output_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.NetworkEval.__init__": [[179, 183], ["super().__init__", "posenet.PoseNet"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetworkEval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ",", "init_weights", "=", "False", ",", "\n", "increase", "=", "opt", ".", "increase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet.NetworkEval.forward": [[184, 194], ["posenet.NetworkEval.posenet", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "raise", "ValueError", "(", "'\\nOnly eval mode is available!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.Merge.__init__": [[15, 18], ["torch.nn.Module.__init__", "models.layers.Conv"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ")", ":", "\n", "        ", "super", "(", "Merge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv", "(", "x_dim", ",", "y_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.Merge.forward": [[19, 21], ["posenet_independent.Merge.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.Features.__init__": [[27, 33], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Sequential", "models.layers.Conv", "models.layers.Conv", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "inp_dim", ",", "increase", "=", "128", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# regress 4 heat maps per stack", "\n", "self", ".", "before_regress", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "Conv", "(", "inp_dim", "+", "i", "*", "increase", ",", "inp_dim", "+", "i", "*", "increase", ",", "3", ",", "bn", "=", "bn", ")", ",", "\n", "Conv", "(", "inp_dim", "+", "i", "*", "increase", ",", "inp_dim", "+", "i", "*", "increase", ",", "3", ",", "bn", "=", "bn", ")", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.Features.forward": [[34, 37], ["len", "len", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms", ")", ":", "\n", "        ", "assert", "len", "(", "fms", ")", "==", "5", ",", "\"hourglass output {} tensors,but 5 scale heatmaps are supervised\"", ".", "format", "(", "len", "(", "fms", ")", ")", "\n", "return", "[", "self", ".", "before_regress", "[", "i", "]", "(", "fms", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.PoseNet.__init__": [[40, 73], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.layers.Conv", "models.layers.Conv", "torch.nn.MaxPool2d", "models.layers.Conv", "models.layers.Conv", "posenet_independent.PoseNet._initialize_weights", "models.layers.Hourglass", "posenet_independent.Features", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "range", "range", "range", "range", "models.layers.Conv", "posenet_independent.Merge", "posenet_independent.Merge", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nstack", ",", "inp_dim", ",", "oup_dim", ",", "bn", "=", "False", ",", "increase", "=", "128", ",", "init_weights", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Pack or initialize the trainable parameters of the network\n        :param nstack: number of stack\n        :param inp_dim: input tensor channels fed into the hourglass block\n        :param oup_dim: channels of regressed feature maps\n        :param bn:\n        :param increase: increased channels once down-sampling\n        :param kwargs:\n        \"\"\"", "\n", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre", "=", "nn", ".", "Sequential", "(", "\n", "Conv", "(", "3", ",", "64", ",", "7", ",", "2", ",", "bn", "=", "bn", ")", ",", "\n", "Conv", "(", "64", ",", "128", ",", "bn", "=", "bn", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "Conv", "(", "128", ",", "128", ",", "bn", "=", "bn", ")", ",", "\n", "Conv", "(", "128", ",", "inp_dim", ",", "bn", "=", "bn", ")", "\n", ")", "\n", "self", ".", "hourglass", "=", "nn", ".", "ModuleList", "(", "[", "Hourglass", "(", "4", ",", "inp_dim", ",", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "[", "Features", "(", "inp_dim", ",", "increase", "=", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "# predict 5 different scales of heatmpas per stack, keep in mind to pack the list using ModuleList.", "\n", "# Notice: nn.ModuleList can only identify Module subclass! Thus, we must pack the inner layers in ModuleList.", "\n", "self", ".", "outs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Conv", "(", "inp_dim", "+", "j", "*", "increase", ",", "oup_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "merge_features", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "inp_dim", "+", "j", "*", "increase", ",", "inp_dim", "+", "j", "*", "increase", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "merge_preds", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "oup_dim", ",", "inp_dim", "+", "j", "*", "increase", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "nstack", "=", "nstack", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.PoseNet.forward": [[74, 98], ["imgs.permute", "posenet_independent.PoseNet.pre", "range", "range", "pred.append", "preds_instack.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "# Input Tensor: a batch of images within [0,1], shape=(N, H, W, C). Pre-processing was done in data generator", "\n", "        ", "x", "=", "imgs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# Permute the dimensions of images to (N, C, H, W)", "\n", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "pred", "=", "[", "]", "\n", "# loop over stack", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nstack", ")", ":", "\n", "            ", "preds_instack", "=", "[", "]", "\n", "# return 5 scales of feature maps", "\n", "hourglass_feature", "=", "self", ".", "hourglass", "[", "i", "]", "(", "x", ")", "\n", "\n", "features_instack", "=", "self", ".", "features", "[", "i", "]", "(", "hourglass_feature", ")", "\n", "\n", "for", "j", "in", "range", "(", "5", ")", ":", "# handle 5 scales of heatmaps", "\n", "                ", "preds_instack", ".", "append", "(", "self", ".", "outs", "[", "i", "]", "[", "j", "]", "(", "features_instack", "[", "j", "]", ")", ")", "\n", "if", "i", "!=", "self", ".", "nstack", "-", "1", ":", "\n", "                    ", "if", "j", "==", "0", ":", "\n", "                        ", "x", "=", "x", "+", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "\n", "", "", "", "pred", ".", "append", "(", "preds_instack", ")", "\n", "# returned list shape: [nstack * [128*128, 64*64, 32*32, 16*16, 8*8]]", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.PoseNet._initialize_weights": [[99, 118], ["posenet_independent.PoseNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# \u5377\u79ef\u7684\u521d\u59cb\u5316\u65b9\u6cd5", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# TODO: \u4f7f\u7528\u6b63\u6001\u5206\u5e03\u8fdb\u884c\u521d\u59cb\u5316\uff080, 0.01) \u7f51\u7edc\u6743\u91cd\u770b\u770b", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# He kaiming \u521d\u59cb\u5316, \u65b9\u5dee\u4e3a2/n. math.sqrt(2. / n) \u6216\u8005\u76f4\u63a5\u4f7f\u7528\u73b0\u6210\u7684nn.init\u4e2d\u7684\u51fd\u6570\u3002\u5728\u8fd9\u91cc\u4f1a\u68af\u5ea6\u7206\u70b8", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "# # math.sqrt(2. / n)", "\n", "# torch.nn.init.uniform_(tensorx)", "\n", "# bias\u90fd\u521d\u59cb\u5316\u4e3a0", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "# \u5f53\u6709BN\u5c42\u65f6\uff0c\u5377\u79ef\u5c42Con\u4e0d\u52a0bias\uff01", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# batchnorm\u4f7f\u7528\u51681\u521d\u59cb\u5316 bias\u51680", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.01", ")", "# m.weight.data.normal_(0, 0.01) m.bias.data.zero_()", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.Network.__init__": [[124, 130], ["super().__init__", "posenet_independent.PoseNet", "models.loss_model.MultiTaskLoss", "models.loss_model_parallel.MultiTaskLossParallel"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ",", "dist", "=", "False", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ")", "\n", "# If we use train_parallel, we implement the parallel loss . And if we use train_distributed,", "\n", "# we should use single process loss because each process on these 4 GPUs  is independent", "\n", "self", ".", "criterion", "=", "MultiTaskLoss", "(", "opt", ",", "config", ")", "if", "dist", "else", "MultiTaskLossParallel", "(", "opt", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.Network.forward": [[131, 142], ["posenet_independent.Network.posenet", "posenet_independent.Network.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ",", "target_tuple", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", ",", "loss", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.NetworkEval.__init__": [[148, 151], ["super().__init__", "posenet_independent.PoseNet"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetworkEval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_independent.NetworkEval.forward": [[152, 162], ["posenet_independent.NetworkEval.posenet", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "raise", "ValueError", "(", "'\\nOnly eval mode is available!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Residual.__init__": [[18, 38], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "ins", ",", "outs", ")", ":", "\n", "        ", "super", "(", "Residual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convBlock", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ins", ",", "outs", "//", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outs", "//", "2", ",", "outs", "//", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outs", "//", "2", ",", "outs", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", ")", ",", "\n", ")", "\n", "if", "ins", "!=", "outs", ":", "\n", "            ", "self", ".", "skipConv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ins", ",", "outs", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", ")", "\n", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "self", ".", "ins", "=", "ins", "\n", "self", ".", "outs", "=", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Residual.forward": [[39, 47], ["layers_transposed_final.Residual.convBlock", "layers_transposed_final.Residual.relu", "layers_transposed_final.Residual.skipConv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "x", "=", "self", ".", "convBlock", "(", "x", ")", "\n", "if", "self", ".", "ins", "!=", "self", ".", "outs", ":", "\n", "            ", "residual", "=", "self", ".", "skipConv", "(", "residual", ")", "\n", "", "x", "+=", "residual", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Conv.__init__": [[51, 65], ["torch.nn.Module.__init__", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bn", "=", "False", ",", "relu", "=", "True", ",", "dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inp_dim", "=", "inp_dim", "\n", "self", ".", "relu", "=", "None", "\n", "self", ".", "bn", "=", "None", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "# \u6362\u6210 Leak Relu\u51cf\u7f13\u795e\u7ecf\u5143\u6b7b\u4ea1\u73b0\u8c61", "\n", "", "if", "bn", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", "\n", "# Different form TF, momentum default in Pytorch is 0.1, which means the decay rate of old running value", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Conv.forward": [[66, 80], ["layers_transposed_final.Conv.conv", "torch.dropout", "torch.dropout", "layers_transposed_final.Conv.bn", "layers_transposed_final.Conv.relu", "layers_transposed_final.Conv.size", "layers_transposed_final.Conv.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# examine the input channel equals the conve kernel channel", "\n", "        ", "assert", "x", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "inp_dim", ",", "\"input channel {} dese not fit kernel channel {}\"", ".", "format", "(", "x", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "self", ".", "inp_dim", ")", "\n", "if", "self", ".", "dropout", ":", "# comment these two lines if we do not want to use Dropout layers", "\n", "# p: probability of an element to be zeroed", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.2", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "# \u76f4\u63a5\u6ce8\u91ca\u6389\u8fd9\u4e00\u884c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528Dropout", "\n", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Backbone.__init__": [[83, 95], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "layers_transposed_final.Backbone.resBlock", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "layers_transposed_final.Backbone.resBlock", "layers_transposed_final.Backbone.resBlock"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeat", "=", "256", ",", "inplanes", "=", "3", ",", "resBlock", "=", "Residual", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "self", ".", "resBlock", "=", "resBlock", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "self", ".", "res1", "=", "self", ".", "resBlock", "(", "64", ",", "128", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "res2", "=", "self", ".", "resBlock", "(", "128", ",", "128", ")", "\n", "self", ".", "res3", "=", "self", ".", "resBlock", "(", "128", ",", "self", ".", "nFeat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Backbone.forward": [[96, 108], ["layers_transposed_final.Backbone.conv1", "layers_transposed_final.Backbone.bn1", "layers_transposed_final.Backbone.relu", "layers_transposed_final.Backbone.res1", "layers_transposed_final.Backbone.pool", "layers_transposed_final.Backbone.res2", "layers_transposed_final.Backbone.res3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# head", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "res1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "self", ".", "res2", "(", "x", ")", "\n", "x", "=", "self", ".", "res3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Hourglass.__init__": [[112, 123], ["torch.nn.Module.__init__", "layers_transposed_final.Hourglass._make_hour_glass", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Upsample", "torch.nn.Upsample"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_hour_glass"], ["def", "__init__", "(", "self", ",", "depth", ",", "nFeat", ",", "increase", "=", "128", ",", "bn", "=", "False", ",", "resBlock", "=", "Conv", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "# oder number", "\n", "self", ".", "nFeat", "=", "nFeat", "# input and output channels", "\n", "self", ".", "increase", "=", "increase", "# increased channels while the depth grows", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "resBlock", "=", "resBlock", "\n", "# will execute when instantiate the Hourglass object, prepare network's parameters", "\n", "self", ".", "hg", "=", "self", ".", "_make_hour_glass", "(", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "# no learning parameters, can be used any times repeatedly", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# no learning parameters  # FIXME: \u6539\u6210\u53cd\u5377\u79ef\uff1f", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Hourglass._make_single_residual": [[124, 128], ["layers_transposed_final.Hourglass.resBlock"], "methods", ["None"], ["", "def", "_make_single_residual", "(", "self", ",", "depth_id", ")", ":", "\n", "# the innermost conve layer, return as a layer item", "\n", "        ", "return", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "\n", "bn", "=", "self", ".", "bn", ")", "# ###########  Index: 6", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Hourglass._make_lower_residual": [[129, 148], ["layers_transposed_final.Hourglass.resBlock", "layers_transposed_final.Hourglass.resBlock", "layers_transposed_final.Hourglass.resBlock", "layers_transposed_final.Hourglass.resBlock", "layers_transposed_final.Hourglass.resBlock", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["None"], ["", "def", "_make_lower_residual", "(", "self", ",", "depth_id", ")", ":", "\n", "# return as a list", "\n", "        ", "pack_layers", "=", "[", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "\n", "bn", "=", "self", ".", "bn", ",", "relu", "=", "False", ")", ",", "# ######### Index: 0", "\n", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "\n", "# ######### Index: 1", "\n", "bn", "=", "self", ".", "bn", ")", ",", "\n", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "\n", "# ######### Index: 2", "\n", "bn", "=", "self", ".", "bn", ")", ",", "\n", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "\n", "# ######### Index: 3", "\n", "bn", "=", "self", ".", "bn", ")", ",", "\n", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "\n", "# ######### Index: 4", "\n", "bn", "=", "self", ".", "bn", ",", "relu", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "# ######### Index: 5", "\n", "]", "\n", "return", "pack_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Hourglass._make_hour_glass": [[149, 163], ["range", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers_transposed_final.Hourglass._make_lower_residual", "hg.append", "layers_transposed_final.Hourglass.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers_transposed_final.Hourglass._make_single_residual"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_lower_residual", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_single_residual"], ["", "def", "_make_hour_glass", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        pack conve layers modules of hourglass block\n        :return: conve layers packed in n hourglass blocks\n        \"\"\"", "\n", "hg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "#  skip path; up_residual_block; down_residual_block_path,", "\n", "# 0 ~ n-2 (except the outermost n-1 order) need 3 residual blocks", "\n", "            ", "res", "=", "self", ".", "_make_lower_residual", "(", "i", ")", "# type:list", "\n", "if", "i", "==", "(", "self", ".", "depth", "-", "1", ")", ":", "# the deepest path (i.e. the longest path) need 4 residual blocks", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_single_residual", "(", "i", ")", ")", "# list append an element", "\n", "", "hg", ".", "append", "(", "nn", ".", "ModuleList", "(", "res", ")", ")", "# pack conve layers of  every oder of hourglass block", "\n", "", "return", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Hourglass._hour_glass_forward": [[164, 190], ["layers_transposed_final.Hourglass.downsample", "up_fms.append", "layers_transposed_final.Hourglass.upsample", "layers_transposed_final.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._hour_glass_forward"], ["", "def", "_hour_glass_forward", "(", "self", ",", "depth_id", ",", "x", ",", "up_fms", ")", ":", "\n", "        ", "\"\"\"\n        built an hourglass block whose order is depth_id\n        :param depth_id: oder number of hourglass block\n        :param x: input tensor\n        :return: output tensor through an hourglass block\n        \"\"\"", "\n", "up1", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "0", "]", "(", "x", ")", "\n", "low1", "=", "self", ".", "downsample", "(", "x", ")", "\n", "low1", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "1", "]", "(", "low1", ")", "\n", "if", "depth_id", "==", "(", "self", ".", "depth", "-", "1", ")", ":", "# except for the highest-order hourglass block", "\n", "            ", "low2", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "6", "]", "(", "low1", ")", "\n", "", "else", ":", "\n", "# call the lower-order hourglass block recursively", "\n", "            ", "low2", "=", "self", ".", "_hour_glass_forward", "(", "depth_id", "+", "1", ",", "low1", ",", "up_fms", ")", "\n", "", "low3", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "2", "]", "(", "low2", ")", "\n", "up_fms", ".", "append", "(", "low2", ")", "\n", "# ######################## # if we don't consider 8*8 scale", "\n", "# if depth_id < self.depth - 1:", "\n", "#     self.up_fms.append(low2)", "\n", "up2", "=", "self", ".", "upsample", "(", "low3", ")", "\n", "deconv1", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "3", "]", "(", "up2", ")", "\n", "deconv2", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "4", "]", "(", "deconv1", ")", "\n", "up1", "+=", "deconv2", "\n", "out", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "5", "]", "(", "up1", ")", "# relu after residual add", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.Hourglass.forward": [[191, 199], ["layers_transposed_final.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._hour_glass_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param: x a input tensor warpped wrapped as a list\n        :return: 5 different scales of feature maps, 128*128, 64*64, 32*32, 16*16, 8*8\n        \"\"\"", "\n", "up_fms", "=", "[", "]", "# collect feature maps produced by low2 at every scale", "\n", "feature_map", "=", "self", ".", "_hour_glass_forward", "(", "0", ",", "x", ",", "up_fms", ")", "\n", "return", "[", "feature_map", "]", "+", "up_fms", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.SELayer.__init__": [[202, 217], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "\"\"\"\n        Squeeze and Excitation\n        :param inp_dim: the channel of input tensor\n        :param reduction: channel compression ratio\n        :return output the tensor with the same shape of input\n        \"\"\"", "\n", "assert", "inp_dim", ">", "reduction", ",", "\"Make sure your input channel bigger than reduction which equals to {}\"", ".", "format", "(", "reduction", ")", "\n", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inp_dim", ",", "inp_dim", "//", "reduction", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "# Relu", "\n", "nn", ".", "Linear", "(", "inp_dim", "//", "reduction", ",", "inp_dim", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed_final.SELayer.forward": [[218, 223], ["x.size", "layers_transposed_final.SELayer.avg_pool().view", "layers_transposed_final.SELayer.fc().view", "layers_transposed_final.SELayer.avg_pool", "layers_transposed_final.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.Merge.__init__": [[13, 16], ["torch.nn.Module.__init__", "models.ae_layer.Conv"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ")", ":", "\n", "        ", "super", "(", "Merge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv", "(", "x_dim", ",", "y_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.Merge.forward": [[17, 19], ["ae_pose.Merge.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.PoseNet.__init__": [[22, 45], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.ae_layer.Conv", "models.ae_layer.Conv", "torch.nn.MaxPool2d", "models.ae_layer.Conv", "models.ae_layer.Conv", "ae_pose.PoseNet._initialize_weights", "torch.nn.Sequential", "models.ae_layer.Conv", "ae_pose.Merge", "ae_pose.Merge", "models.ae_layer.Hourglass", "models.ae_layer.Conv", "models.ae_layer.Conv", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nstack", ",", "inp_dim", ",", "oup_dim", ",", "bn", "=", "False", ",", "increase", "=", "128", ",", "init_weights", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre", "=", "nn", ".", "Sequential", "(", "\n", "Conv", "(", "3", ",", "64", ",", "7", ",", "2", ",", "bn", "=", "bn", ")", ",", "\n", "Conv", "(", "64", ",", "128", ",", "bn", "=", "bn", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "Conv", "(", "128", ",", "128", ",", "bn", "=", "bn", ")", ",", "\n", "Conv", "(", "128", ",", "inp_dim", ",", "bn", "=", "bn", ")", "\n", ")", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "Hourglass", "(", "4", ",", "inp_dim", ",", "bn", ",", "increase", ")", ",", "\n", "Conv", "(", "inp_dim", ",", "inp_dim", ",", "3", ",", "bn", "=", "False", ")", ",", "\n", "Conv", "(", "inp_dim", ",", "inp_dim", ",", "3", ",", "bn", "=", "False", ")", "\n", ")", "for", "i", "in", "range", "(", "nstack", ")", "]", ")", "# \u6784\u9020\u4e86nstack\u4e2a\u8fd9\u6837\u7684Hourglass+2*Conve\u6a21\u5757", "\n", "\n", "self", ".", "outs", "=", "nn", ".", "ModuleList", "(", "[", "Conv", "(", "inp_dim", ",", "oup_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "for", "i", "in", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "merge_features", "=", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "inp_dim", ",", "inp_dim", ")", "for", "i", "in", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "merge_preds", "=", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "oup_dim", ",", "inp_dim", ")", "for", "i", "in", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "nstack", "=", "nstack", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.PoseNet.forward": [[46, 58], ["imgs.permute", "ae_pose.PoseNet.pre", "range", "preds_instack.append", "preds.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "x", "=", "imgs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nstack", ")", ":", "\n", "            ", "preds_instack", "=", "[", "]", "\n", "feature", "=", "self", ".", "features", "[", "i", "]", "(", "x", ")", "\n", "preds_instack", ".", "append", "(", "self", ".", "outs", "[", "i", "]", "(", "feature", ")", ")", "\n", "if", "i", "!=", "self", ".", "nstack", "-", "1", ":", "\n", "                ", "x", "=", "x", "+", "self", ".", "merge_preds", "[", "i", "]", "(", "preds_instack", "[", "-", "1", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "(", "feature", ")", "\n", "", "preds", ".", "append", "(", "preds_instack", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.PoseNet._initialize_weights": [[59, 78], ["ae_pose.PoseNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# \u5377\u79ef\u7684\u521d\u59cb\u5316\u65b9\u6cd5", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# TODO: \u4f7f\u7528\u6b63\u6001\u5206\u5e03\u8fdb\u884c\u521d\u59cb\u5316\uff080, 0.01) \u7f51\u7edc\u6743\u91cd\u770b\u770b", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# He kaiming \u521d\u59cb\u5316, \u65b9\u5dee\u4e3a2/n. math.sqrt(2. / n) \u6216\u8005\u76f4\u63a5\u4f7f\u7528\u73b0\u6210\u7684nn.init\u4e2d\u7684\u51fd\u6570\u3002\u5728\u8fd9\u91cc\u4f1a\u68af\u5ea6\u7206\u70b8", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "# # math.sqrt(2. / n)", "\n", "# torch.nn.init.uniform_(tensorx)", "\n", "# bias\u90fd\u521d\u59cb\u5316\u4e3a0", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "# \u5f53\u6709BN\u5c42\u65f6\uff0c\u5377\u79ef\u5c42Con\u4e0d\u52a0bias\uff01", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# batchnorm\u4f7f\u7528\u51681\u521d\u59cb\u5316 bias\u51680", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.01", ")", "# m.weight.data.normal_(0, 0.01) m.bias.data.zero_()", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.Network.__init__": [[84, 90], ["super().__init__", "ae_pose.PoseNet", "models.loss_model.MultiTaskLoss", "models.loss_model_parallel.MultiTaskLossParallel"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ",", "dist", "=", "False", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ")", "\n", "# If we use train_parallel, we implement the parallel loss . And if we use train_distributed,", "\n", "# we should use single process loss because each process on these 4 GPUs  is independent", "\n", "self", ".", "criterion", "=", "MultiTaskLoss", "(", "opt", ",", "config", ")", "if", "dist", "else", "MultiTaskLossParallel", "(", "opt", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.Network.forward": [[91, 102], ["ae_pose.Network.posenet", "ae_pose.Network.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ",", "target_tuple", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", ",", "loss", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.NetworkEval.__init__": [[108, 111], ["super().__init__", "ae_pose.PoseNet"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetworkEval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_pose.NetworkEval.forward": [[112, 122], ["ae_pose.NetworkEval.posenet", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "raise", "ValueError", "(", "'\\nOnly eval mode is available!!'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_layer.Full.__init__": [[27, 36], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "out_dim", ",", "bn", "=", "False", ",", "relu", "=", "False", ")", ":", "\n", "        ", "super", "(", "Full", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "inp_dim", ",", "out_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "None", "\n", "self", ".", "bn", "=", "None", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "if", "bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_layer.Full.forward": [[37, 44], ["ae_layer.Full.fc", "ae_layer.Full.view", "ae_layer.Full.relu", "ae_layer.Full.bn", "ae_layer.Full.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_layer.Conv.__init__": [[47, 57], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bn", "=", "False", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inp_dim", "=", "inp_dim", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "None", "\n", "self", ".", "bn", "=", "None", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "if", "bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_layer.Conv.forward": [[58, 66], ["ae_layer.Conv.conv", "ae_layer.Conv.relu", "ae_layer.Conv.bn", "ae_layer.Conv.size", "ae_layer.Conv.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "inp_dim", ",", "\"{} {}\"", ".", "format", "(", "x", ".", "size", "(", ")", "[", "1", "]", ",", "self", ".", "inp_dim", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_layer.Hourglass.__init__": [[69, 83], ["torch.nn.Module.__init__", "ae_layer.Conv", "Pool", "ae_layer.Conv", "ae_layer.Conv", "torch.nn.UpsamplingNearest2d", "ae_layer.Hourglass", "ae_layer.Conv"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "f", ",", "bn", "=", "None", ",", "increase", "=", "128", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nf", "=", "f", "+", "increase", "\n", "self", ".", "up1", "=", "Conv", "(", "f", ",", "f", ",", "3", ",", "bn", "=", "bn", ")", "\n", "# Lower branch", "\n", "self", ".", "pool1", "=", "Pool", "(", "2", ",", "2", ")", "\n", "self", ".", "low1", "=", "Conv", "(", "f", ",", "nf", ",", "3", ",", "bn", "=", "bn", ")", "\n", "# Recursive hourglass", "\n", "if", "n", ">", "1", ":", "\n", "            ", "self", ".", "low2", "=", "Hourglass", "(", "n", "-", "1", ",", "nf", ",", "bn", "=", "bn", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "low2", "=", "Conv", "(", "nf", ",", "nf", ",", "3", ",", "bn", "=", "bn", ")", "\n", "", "self", ".", "low3", "=", "Conv", "(", "nf", ",", "f", ",", "3", ")", "\n", "self", ".", "up2", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_layer.Hourglass.forward": [[84, 92], ["ae_layer.Hourglass.up1", "ae_layer.Hourglass.pool1", "ae_layer.Hourglass.low1", "ae_layer.Hourglass.low2", "ae_layer.Hourglass.low3", "ae_layer.Hourglass.up2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "up1", "=", "self", ".", "up1", "(", "x", ")", "\n", "pool1", "=", "self", ".", "pool1", "(", "x", ")", "\n", "low1", "=", "self", ".", "low1", "(", "pool1", ")", "\n", "low2", "=", "self", ".", "low2", "(", "low1", ")", "\n", "low3", "=", "self", ".", "low3", "(", "low2", ")", "\n", "up2", "=", "self", ".", "up2", "(", "low3", ")", "\n", "return", "up1", "+", "up2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_layer.batchnorm": [[15, 17], ["torch.nn.BatchNorm2d", "x.size"], "function", ["None"], ["def", "batchnorm", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "BatchNorm2d", "(", "x", ".", "size", "(", ")", "[", "1", "]", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.ae_layer.weights_init": [[19, 24], ["classname.find", "m.weight.data.normal_"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "(", "1.", "/", "n", ")", "**", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Residual.__init__": [[14, 31], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "ins", ",", "outs", ")", ":", "\n", "        ", "super", "(", "Residual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convBlock", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "ins", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ins", ",", "outs", "//", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outs", "//", "2", ",", "outs", "//", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outs", "//", "2", ",", "outs", ",", "1", ")", "\n", ")", "\n", "if", "ins", "!=", "outs", ":", "\n", "            ", "self", ".", "skipConv", "=", "nn", ".", "Conv2d", "(", "ins", ",", "outs", ",", "1", ")", "\n", "", "self", ".", "ins", "=", "ins", "\n", "self", ".", "outs", "=", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Residual.forward": [[32, 39], ["layers.Residual.convBlock", "layers.Residual.skipConv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "x", "=", "self", ".", "convBlock", "(", "x", ")", "\n", "if", "self", ".", "ins", "!=", "self", ".", "outs", ":", "\n", "            ", "residual", "=", "self", ".", "skipConv", "(", "residual", ")", "\n", "", "x", "+=", "residual", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Conv.__init__": [[43, 56], ["torch.nn.Module.__init__", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bn", "=", "False", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inp_dim", "=", "inp_dim", "\n", "self", ".", "relu", "=", "None", "\n", "self", ".", "bn", "=", "None", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "# \u6362\u6210 Leak Relu\u51cf\u7f13\u795e\u7ecf\u5143\u6b7b\u4ea1\u73b0\u8c61", "\n", "", "if", "bn", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", "\n", "# Different form TF, momentum default in Pytorch is 0.1, which means the decay rate of old running value", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Conv.forward": [[57, 67], ["layers.Conv.conv", "layers.Conv.bn", "layers.Conv.relu", "layers.Conv.size", "layers.Conv.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# examine the input channel equals the conve kernel channel", "\n", "        ", "assert", "x", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "inp_dim", ",", "\"input channel {} dese not fit kernel channel {}\"", ".", "format", "(", "x", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "self", ".", "inp_dim", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Backbone.__init__": [[70, 82], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "layers.Backbone.resBlock", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "layers.Backbone.resBlock", "layers.Backbone.resBlock"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeat", "=", "256", ",", "inplanes", "=", "3", ",", "resBlock", "=", "Residual", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "self", ".", "resBlock", "=", "resBlock", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "self", ".", "res1", "=", "self", ".", "resBlock", "(", "64", ",", "128", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "res2", "=", "self", ".", "resBlock", "(", "128", ",", "128", ")", "\n", "self", ".", "res3", "=", "self", ".", "resBlock", "(", "128", ",", "self", ".", "nFeat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Backbone.forward": [[83, 95], ["layers.Backbone.conv1", "layers.Backbone.bn1", "layers.Backbone.relu", "layers.Backbone.res1", "layers.Backbone.pool", "layers.Backbone.res2", "layers.Backbone.res3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# head", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "res1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "self", ".", "res2", "(", "x", ")", "\n", "x", "=", "self", ".", "res3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Hourglass.__init__": [[99, 110], ["torch.nn.Module.__init__", "layers.Hourglass._make_hour_glass", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Upsample", "torch.nn.Upsample"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_hour_glass"], ["def", "__init__", "(", "self", ",", "depth", ",", "nFeat", ",", "increase", "=", "128", ",", "bn", "=", "False", ",", "resBlock", "=", "Conv", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "# oder number", "\n", "self", ".", "nFeat", "=", "nFeat", "# input and output channels", "\n", "self", ".", "increase", "=", "increase", "# increased channels while the depth grows", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "resBlock", "=", "resBlock", "\n", "# will execute when instantiate the Hourglass object, prepare network's parameters", "\n", "self", ".", "hg", "=", "self", ".", "_make_hour_glass", "(", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "# no learning parameters, can be used any times repeatedly", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# no learning parameters  # FIXME: \u6539\u6210\u53cd\u5377\u79ef\uff1f", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Hourglass._make_single_residual": [[111, 115], ["layers.Hourglass.resBlock"], "methods", ["None"], ["", "def", "_make_single_residual", "(", "self", ",", "depth_id", ")", ":", "\n", "# the innermost conve layer, return as an element", "\n", "        ", "return", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "\n", "bn", "=", "self", ".", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Hourglass._make_lower_residual": [[116, 123], ["layers.Hourglass.resBlock", "layers.Hourglass.resBlock", "layers.Hourglass.resBlock"], "methods", ["None"], ["", "def", "_make_lower_residual", "(", "self", ",", "depth_id", ")", ":", "\n", "# return as a list", "\n", "        ", "return", "[", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "bn", "=", "self", ".", "bn", ")", ",", "\n", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "\n", "bn", "=", "self", ".", "bn", ")", ",", "\n", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "\n", "bn", "=", "self", ".", "bn", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Hourglass._make_hour_glass": [[124, 138], ["range", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers.Hourglass._make_lower_residual", "hg.append", "layers.Hourglass.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers.Hourglass._make_single_residual"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_lower_residual", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_single_residual"], ["", "def", "_make_hour_glass", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        pack conve layers modules of hourglass block\n        :return: conve layers packed in n hourglass blocks\n        \"\"\"", "\n", "hg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "#  skip path; up_residual_block; down_residual_block_path,", "\n", "# 0 ~ n-2 (except the outermost n-1 order) need 3 residual blocks", "\n", "            ", "res", "=", "self", ".", "_make_lower_residual", "(", "i", ")", "# type:list", "\n", "if", "i", "==", "(", "self", ".", "depth", "-", "1", ")", ":", "# the deepest path (i.e. the longest path) need 4 residual blocks", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_single_residual", "(", "i", ")", ")", "# list append an element", "\n", "", "hg", ".", "append", "(", "nn", ".", "ModuleList", "(", "res", ")", ")", "# pack conve layers of  every oder of hourglass block", "\n", "", "return", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Hourglass._hour_glass_forward": [[139, 161], ["layers.Hourglass.downsample", "up_fms.append", "layers.Hourglass.upsample", "layers.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._hour_glass_forward"], ["", "def", "_hour_glass_forward", "(", "self", ",", "depth_id", ",", "x", ",", "up_fms", ")", ":", "\n", "        ", "\"\"\"\n        built an hourglass block whose order is depth_id\n        :param depth_id: oder number of hourglass block\n        :param x: input tensor\n        :return: output tensor through an hourglass block\n        \"\"\"", "\n", "up1", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "0", "]", "(", "x", ")", "\n", "low1", "=", "self", ".", "downsample", "(", "x", ")", "\n", "low1", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "1", "]", "(", "low1", ")", "\n", "if", "depth_id", "==", "(", "self", ".", "depth", "-", "1", ")", ":", "# except for the highest-order hourglass block", "\n", "            ", "low2", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "3", "]", "(", "low1", ")", "\n", "", "else", ":", "\n", "# call the lower-order hourglass block recursively", "\n", "            ", "low2", "=", "self", ".", "_hour_glass_forward", "(", "depth_id", "+", "1", ",", "low1", ",", "up_fms", ")", "\n", "", "low3", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "2", "]", "(", "low2", ")", "\n", "up_fms", ".", "append", "(", "low2", ")", "\n", "# ######################## # if we don't consider 8*8 scale", "\n", "# if depth_id < self.depth - 1:", "\n", "#     self.up_fms.append(low2)", "\n", "up2", "=", "self", ".", "upsample", "(", "low3", ")", "\n", "return", "up1", "+", "up2", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.Hourglass.forward": [[162, 170], ["layers.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._hour_glass_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param: x a input tensor warpped wrapped as a list\n        :return: 5 different scales of feature maps, 128*128, 64*64, 32*32, 16*16, 8*8\n        \"\"\"", "\n", "up_fms", "=", "[", "]", "# collect feature maps produced by low2 at every scale", "\n", "feature_map", "=", "self", ".", "_hour_glass_forward", "(", "0", ",", "x", ",", "up_fms", ")", "\n", "return", "[", "feature_map", "]", "+", "up_fms", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.SELayer.__init__": [[173, 188], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "\"\"\"\n        Squeeze and Excitation\n        :param inp_dim: the channel of input tensor\n        :param reduction: channel compression ratio\n        :return output the tensor with the same shape of input\n        \"\"\"", "\n", "assert", "inp_dim", ">", "reduction", ",", "\"Make sure your input channel bigger than reduction which equals to {}\"", ".", "format", "(", "reduction", ")", "\n", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inp_dim", ",", "inp_dim", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "inp_dim", "//", "reduction", ",", "inp_dim", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers.SELayer.forward": [[189, 194], ["x.size", "layers.SELayer.avg_pool().view", "layers.SELayer.fc().view", "layers.SELayer.avg_pool", "layers.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.focal_loss.focal_loss": [[8, 19], ["torch.tensor", "torch.tensor", "torch.where", "torch.pow", "print", "out.backward", "print", "torch.ge", "torch.mul"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.parallel_encoding.paralle.Reduce.backward"], ["def", "focal_loss", "(", "s", ",", "sxing", ")", ":", "\n", "    ", "s", "=", "torch", ".", "tensor", "(", "s", ",", "requires_grad", "=", "True", ")", "\n", "sxing", "=", "torch", ".", "tensor", "(", "sxing", ")", "\n", "# gamma=1.0 seems more reliable, but gamma=2 brings about more AP increase", "\n", "gamma", "=", "2.0", "\n", "st", "=", "torch", ".", "where", "(", "torch", ".", "ge", "(", "sxing", ",", "0.01", ")", ",", "s", ",", "1", "-", "s", ")", "\n", "factor", "=", "torch", ".", "pow", "(", "1.", "-", "st", ",", "gamma", ")", "\n", "print", "(", "'the factor is \\n'", ",", "factor", ")", "\n", "out", "=", "torch", ".", "mul", "(", "(", "s", "-", "sxing", ")", ",", "(", "s", "-", "sxing", ")", ")", "*", "factor", "\n", "out", ".", "backward", "(", ")", "\n", "print", "(", "s", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model.MultiTaskLoss.__init__": [[9, 22], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "heatmap_weight", "=", "1", ",", "offset_weight", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MultiTaskLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nstack", "=", "opt", ".", "nstack", "\n", "self", ".", "batch_size", "=", "opt", ".", "batch_size", "\n", "self", ".", "offset_start", "=", "config", ".", "offset_start", "\n", "self", ".", "heat_start", "=", "config", ".", "heat_start", "\n", "self", ".", "bkg_start", "=", "config", ".", "bkg_start", "\n", "self", ".", "multi_task_weight", "=", "opt", ".", "multi_task_weight", "\n", "self", ".", "keypoint_task_weight", "=", "opt", ".", "keypoint_task_weight", "\n", "self", ".", "scale_weight", "=", "opt", ".", "scale_weight", "\n", "self", ".", "nstack_weight", "=", "opt", ".", "nstack_weight", "\n", "self", ".", "heatmap_weight", "=", "heatmap_weight", "\n", "self", ".", "offset_weight", "=", "offset_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model.MultiTaskLoss.forward": [[23, 41], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "loss_model.MultiTaskLoss._loss_per_scale", "range", "sum", "sum", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel._loss_per_scale"], ["", "def", "forward", "(", "self", ",", "pred_tuple", ",", "target_tuple", ")", ":", "\n", "        ", "\"\"\"\n        Compute the multi-task total loss\n        :param pred_tuple: [nstack * [(bacth,C,128,128), (bacth,C,64,64), (bacth,C,32,32),  (bacth,C,16,16)], (bacth,C,8,8)]\n        :param target_tuple: target tensors, i.e.,\n         mask_misses,   heatmaps,       offsets,       mask_offsets,\n        [batch,1,128,128], [batch,43,128,128], [batch,36,128,128], [batch,36,128,128]\n        :return: scalar tensor\n        \"\"\"", "\n", "# we use 4 stacks, 5 scales?", "\n", "# assert self.batch_size == target_tuple[0].shape[0], 'batch size {} not match'.format(pred_tuple[0].shape[0])", "\n", "pred_scale_tensors", "=", "[", "torch", ".", "cat", "(", "[", "pred_tuple", "[", "j", "]", "[", "i", "]", "[", "None", ",", "...", "]", "for", "j", "in", "range", "(", "self", ".", "nstack", ")", "]", ",", "dim", "=", "0", ")", "for", "i", "in", "\n", "range", "(", "5", ")", "]", "# concatenate the same scale output of different stacks", "\n", "# different scale losses have different order of magnitudes owning to different pixel numbers (feature map size)", "\n", "loss_scales", "=", "[", "self", ".", "_loss_per_scale", "(", "pred_scale_tensors", "[", "i", "]", ",", "target_tuple", ")", "*", "self", ".", "scale_weight", "[", "i", "]", "for", "i", "in", "\n", "range", "(", "5", ")", "]", "\n", "loss_per_batch", "=", "sum", "(", "loss_scales", ")", "/", "sum", "(", "self", ".", "scale_weight", ")", "/", "self", ".", "batch_size", "\n", "return", "loss_per_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model.MultiTaskLoss._loss_per_scale": [[42, 82], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.interpolate", "torch.interpolate", "loss_model.MultiTaskLoss.focal_l2_loss"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel.focal_l2_loss"], ["", "def", "_loss_per_scale", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Compute the loss on a particular scale.\n        :param pred: tensor (nstack, bacth, C, H, W)\n        :param target: mask_misses, heatmaps, offsets, mask_offsets of shape (N, C, H, W)\n        :return:\n        \"\"\"", "\n", "pred_heatmap", "=", "pred", "# pred[:, :, :self.offset_start]", "\n", "# pred_offset = pred[:, :, self.offset_start:]", "\n", "\n", "gt_heatmaps", "=", "F", ".", "adaptive_avg_pool2d", "(", "target", "[", "1", "]", ",", "output_size", "=", "pred", ".", "shape", "[", "-", "2", ":", "]", ")", "# type: torch.Tensor", "\n", "# gt_heatmaps = F.interpolate(target[1], size=pred.shape[-2:], mode='bilinear')  # type: torch.Tensor", "\n", "# gt_offsets = F.adaptive_avg_pool2d(target[2], output_size=pred.shape[-2:])", "\n", "gt_mask_misses", "=", "F", ".", "interpolate", "(", "target", "[", "0", "]", ",", "size", "=", "pred", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "# type: torch.Tensor", "\n", "gt_mask_misses", "[", "gt_mask_misses", "<", "0.5", "]", "=", "0", "\n", "# gt_mask_misses = F.adaptive_avg_pool2d(target[0], output_size=pred.shape[-2:])", "\n", "\n", "# gt_mask_offsets = F.interpolate(target[3], size=pred.shape[-2:], mode='bilinear')", "\n", "# # gt_mask_offsets = F.adaptive_max_pool2d(target[3], output_size=pred.shape[-2:])", "\n", "# ############# For debug ##############################", "\n", "# heatmap = gt_heatmaps[0,...].cpu().numpy().squeeze()", "\n", "#", "\n", "# import matplotlib.pylab as plt", "\n", "# import numpy as np", "\n", "# # plt.imshow(heatmap[11,:,:]) # mask_all", "\n", "# gt_mask_misses = gt_mask_misses[0, ...].cpu().numpy().squeeze()", "\n", "# plt.imshow(np.repeat(gt_mask_misses[:,:, None], 3, axis=2))  # mask_all", "\n", "# plt.show()", "\n", "# #####################################################", "\n", "\n", "heatmap_loss", "=", "self", ".", "focal_l2_loss", "(", "pred_heatmap", ",", "gt_heatmaps", "[", "None", ",", "...", "]", ",", "gt_mask_misses", "[", "None", ",", "...", "]", ",", "self", ".", "heat_start", ",", "\n", "self", ".", "bkg_start", ",", "nstack_weight", "=", "self", ".", "nstack_weight", ",", "\n", "multi_task_weight", "=", "self", ".", "multi_task_weight", ",", "\n", "keypoint_task_weight", "=", "self", ".", "keypoint_task_weight", ")", "\n", "# offset_loss = self.l1_loss(pred_offset, gt_offsets[None, ...], gt_mask_offsets[None, ...],", "\n", "#                            nstack_weight=self.nstack_weight)", "\n", "#", "\n", "# multi_task_loss = heatmap_loss * self.multi_task_weight[0] + offset_loss * self.multi_task_weight[1]", "\n", "# return multi_task_loss / sum(self.multi_task_weight)", "\n", "return", "heatmap_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model.MultiTaskLoss.l1_loss": [[83, 101], ["out.sum", "print", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "len", "len", "out.sum.detach().cpu().numpy", "sum", "sum", "range", "out.sum.detach().cpu", "len", "out.sum.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "l1_loss", "(", "pred", ",", "target", ",", "mask_offset", ",", "nstack_weight", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", ":", "# TODO: smooth L1 loss, but CenterNet says no", "\n", "        ", "\"\"\"\n        Compute the smooth L1 loss of offset feature maps\n        :param pred: predicted tensor (nstack, batch, channel, height, width), predicted feature maps\n        :param target: target tensor (nstack, batch, channel, height, width)\n        :param mask_offset: tensor (nstack, batch, channel, height, width)\n        :param nstack_weight:\n        :return:\n        \"\"\"", "\n", "out", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "*", "mask_offset", "# type: torch.Tensor", "\n", "# sum over the feature map, should divide by batch afterwards", "\n", "loss_nstack", "=", "out", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", "\n", "assert", "len", "(", "loss_nstack", ")", "==", "len", "(", "nstack_weight", ")", ",", "nstack_weight", "\n", "print", "(", "' offset L1 loss per stack >>>>>>>>  '", ",", "loss_nstack", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "weight_loss", "=", "[", "loss_nstack", "[", "i", "]", "*", "nstack_weight", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "nstack_weight", ")", ")", "]", "\n", "loss", "=", "sum", "(", "weight_loss", ")", "/", "sum", "(", "nstack_weight", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model.MultiTaskLoss.l2_loss": [[102, 132], ["mask_miss.expand_as().clone", "out.sum().sum().sum().sum", "print", "len", "len", "out.sum().sum().sum().sum.detach().cpu().numpy", "sum", "sum", "mask_miss.expand_as", "out.sum().sum().sum", "range", "out.sum().sum().sum().sum.detach().cpu", "len", "out.sum().sum", "out.sum().sum().sum().sum.detach", "out.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "l2_loss", "(", "s", ",", "sxing", ",", "mask_miss", ",", "heat_start", ",", "bkg_start", ",", "multi_task_weight", "=", "0.1", ",", "keypoint_task_weight", "=", "1", ",", "nstack_weight", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", ":", "\n", "        ", "\"\"\"\n        Compute the L2 loss between predicted and groundtruth score maps.\n        :param s:  predicted tensor (nstack, batch, channel, height, width), predicted score maps\n        :param sxing: target tensor (1, batch, channel, height, width)\n        :param mask_miss: tensor (1, batch, 1, height, width)\n        :return: a scalar tensor\n        \"\"\"", "\n", "# multiplied by mask_miss via broadcast operation", "\n", "# eps = 1e-6  # 1e-12", "\n", "# s = torch.clamp(s, eps, 1.2 - eps)", "\n", "\n", "# Notice! expand does not allocate more memory but just make the tensor look as if you expanded it.", "\n", "# You should call .clone() on the resulting tensor if you plan on modifying it", "\n", "# https://discuss.pytorch.org/t/very-strange-behavior-change-one-element-of-a-tensor-will-influence-all-elements/41190", "\n", "mask", "=", "mask_miss", ".", "expand_as", "(", "sxing", ")", ".", "clone", "(", ")", "# type: torch.Tensor", "\n", "del", "mask_miss", "\n", "mask", "[", ":", ",", ":", ",", "-", "2", ",", ":", ",", ":", "]", "*=", "multi_task_weight", "# *= \u6539\u6210\u4e86 = , \u8ba9person mask \u5b66\u4f1a\u5206\u8fa8\u4eba\u7fa4", "\n", "mask", "[", ":", ",", ":", ",", "heat_start", ":", "bkg_start", ",", ":", ",", ":", "]", "*=", "keypoint_task_weight", "# \u6ce8\u610f\u662f\u5728mask miss\u57fa\u7840\u4e0a\u4e58\u4ee5 \u00d7", "\n", "\n", "out", "=", "(", "s", "-", "sxing", ")", "**", "2", "*", "mask", "# type: torch.Tensor # \u9664\u4ee52\u662f\u4e3a\u4e86\u62b5\u6d88\u5e73\u65b9\u7684\u5fae\u5206", "\n", "# sum over the feature map, should divide by batch afterwards", "\n", "# #  loss_nstack = out.sum(dim=(1, 2, 3, 4))", "\n", "loss_nstack", "=", "out", ".", "sum", "(", "dim", "=", "4", ")", ".", "sum", "(", "dim", "=", "3", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "# out.[:, :, heat_start:bkg_start, :, :] \u67e5\u770b\u5404\u4e2a\u90e8\u5206\u635f\u5931", "\n", "assert", "len", "(", "loss_nstack", ")", "==", "len", "(", "nstack_weight", ")", ",", "nstack_weight", "\n", "print", "(", "' heatmap L2 loss per stack.........  '", ",", "loss_nstack", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "weight_loss", "=", "[", "loss_nstack", "[", "i", "]", "*", "nstack_weight", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "nstack_weight", ")", ")", "]", "\n", "loss", "=", "sum", "(", "weight_loss", ")", "/", "sum", "(", "nstack_weight", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model.MultiTaskLoss.focal_l2_loss": [[133, 162], ["mask_miss.expand_as().clone", "torch.where", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "out.sum", "print", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "len", "len", "out.sum.detach().cpu().numpy", "sum", "sum", "mask_miss.expand_as", "range", "out.sum.detach().cpu", "len", "out.sum.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "focal_l2_loss", "(", "s", ",", "sxing", ",", "mask_miss", ",", "heat_start", ",", "bkg_start", ",", "gamma", "=", "1", ",", "multi_task_weight", "=", "0.1", ",", "\n", "keypoint_task_weight", "=", "1", ",", "nstack_weight", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "alpha", "=", "0.", ",", "beta", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        Compute the focal L2 loss between predicted and groundtruth score maps.\n        :param s:  predicted tensor (nstack, batch, channel, height, width), predicted score maps\n        :param sxing: target tensor (nstack, batch, channel, height, width)\n        :param mask_miss: tensor (nstack, batch, 1, height, width)\n        :param gamma: focusing parameter\n        :return: a scalar tensor\n        \"\"\"", "\n", "# eps = 1e-8  # 1e-12", "\n", "# s = torch.clamp(s, eps, 1. - eps)  # improve the stability of the focal loss", "\n", "mask", "=", "mask_miss", ".", "expand_as", "(", "sxing", ")", ".", "clone", "(", ")", "# type: torch.Tensor", "\n", "del", "mask_miss", "\n", "mask", "[", ":", ",", ":", ",", "-", "2", ",", ":", ",", ":", "]", "*=", "multi_task_weight", "# except for person mask channel", "\n", "mask", "[", ":", ",", ":", ",", "heat_start", ":", "bkg_start", ",", ":", ",", ":", "]", "*=", "keypoint_task_weight", "\n", "\n", "st", "=", "torch", ".", "where", "(", "torch", ".", "ge", "(", "sxing", ",", "0.01", ")", ",", "s", "-", "alpha", ",", "1", "-", "s", "-", "beta", ")", "\n", "factor", "=", "torch", ".", "abs", "(", "1.", "-", "st", ")", "# (1. - st) ** gamma  for gamma=2", "\n", "# multiplied by mask_miss via broadcast operation", "\n", "out", "=", "(", "s", "-", "sxing", ")", "**", "2", "*", "factor", "*", "mask", "# type: torch.Tensor", "\n", "# sum over the feature map, should divide by batch afterwards", "\n", "loss_nstack", "=", "out", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", "# out.[:, :, heat_start:bkg_start, :, :] \u67e5\u770b\u5404\u4e2a\u90e8\u5206\u635f\u5931", "\n", "assert", "len", "(", "loss_nstack", ")", "==", "len", "(", "nstack_weight", ")", ",", "nstack_weight", "\n", "print", "(", "' heatmap focal L2 loss per stack..........  '", ",", "loss_nstack", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "weight_loss", "=", "[", "loss_nstack", "[", "i", "]", "*", "nstack_weight", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "nstack_weight", ")", ")", "]", "\n", "loss", "=", "sum", "(", "weight_loss", ")", "/", "sum", "(", "nstack_weight", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.Merge.__init__": [[16, 19], ["torch.nn.Module.__init__", "models.layers_transposed_final.Conv"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Merge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv", "(", "x_dim", ",", "y_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.Merge.forward": [[20, 22], ["posenet_final.Merge.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.Features.__init__": [[28, 44], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Sequential", "models.layers_transposed_final.Conv", "models.layers_transposed_final.Conv", "models.layers_transposed_final.Conv", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "inp_dim", ",", "increase", "=", "128", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Regress 5 different scales of heatmaps per stack", "\n", "\n", "# self.before_regress = nn.ModuleList(", "\n", "#             [nn.Sequential(Conv(inp_dim + i * increase, inp_dim + i * increase, 3, bn=bn, dropout=False),", "\n", "#                            Conv(inp_dim + i * increase, inp_dim + i * increase, 3, bn=bn, dropout=False),", "\n", "#", "\n", "#                            ) for i in range(5)])", "\n", "self", ".", "before_regress", "=", "nn", ".", "ModuleList", "(", "\n", "# compress the channel before heatmap regression", "\n", "[", "nn", ".", "Sequential", "(", "\n", "Conv", "(", "inp_dim", "+", "i", "*", "increase", ",", "inp_dim", ",", "1", ",", "bn", "=", "bn", ",", "dropout", "=", "False", ")", ",", "# todo: remove this?", "\n", "Conv", "(", "inp_dim", ",", "inp_dim", ",", "3", ",", "bn", "=", "bn", ",", "dropout", "=", "False", ")", ",", "\n", "Conv", "(", "inp_dim", ",", "inp_dim", ",", "3", ",", "bn", "=", "bn", ",", "dropout", "=", "False", ")", ",", "\n", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.Features.forward": [[45, 48], ["len", "len", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms", ")", ":", "\n", "        ", "assert", "len", "(", "fms", ")", "==", "5", ",", "\"hourglass output {} tensors,but 5 scale heatmaps are supervised\"", ".", "format", "(", "len", "(", "fms", ")", ")", "\n", "return", "[", "self", ".", "before_regress", "[", "i", "]", "(", "fms", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet.__init__": [[51, 92], ["torch.nn.Module.__init__", "models.layers_transposed_final.Backbone", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "posenet_final.PoseNet._initialize_weights", "models.layers_transposed_final.Hourglass", "posenet_final.Features", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "range", "range", "range", "range", "range", "models.layers_transposed_final.Conv", "models.layers_transposed_final.SELayer", "posenet_final.Merge", "posenet_final.Merge", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nstack", ",", "inp_dim", ",", "oup_dim", ",", "bn", "=", "False", ",", "increase", "=", "128", ",", "init_weights", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Pack or initialize the trainable parameters of the network\n        :param nstack: number of stack\n        :param inp_dim: input tensor channels fed into the hourglass block\n        :param oup_dim: channels of regressed feature maps\n        :param bn: use batch normalization\n        :param increase: increased channels once down-sampling\n        :param kwargs:\n        \"\"\"", "\n", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.pre = nn.Sequential(", "\n", "#     Conv(3, 64, 7, 2, bn=bn),", "\n", "#     Conv(64, 128, bn=bn),", "\n", "#     nn.MaxPool2d(2, 2),", "\n", "#     Conv(128, 128, bn=bn),", "\n", "#     Conv(128, inp_dim, bn=bn)", "\n", "# )", "\n", "self", ".", "pre", "=", "Backbone", "(", "nFeat", "=", "inp_dim", ")", "# It doesn't affect the results regardless of which self.pre is used", "\n", "self", ".", "hourglass", "=", "nn", ".", "ModuleList", "(", "[", "Hourglass", "(", "4", ",", "inp_dim", ",", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "[", "Features", "(", "inp_dim", ",", "increase", "=", "increase", ",", "bn", "=", "bn", ")", "for", "_", "in", "range", "(", "nstack", ")", "]", ")", "\n", "# predict 5 different scales of heatmpas per stack, keep in mind to pack the list using ModuleList.", "\n", "# Notice: nn.ModuleList can only identify Module subclass! Thus, we must pack the inner layers in ModuleList.", "\n", "# TODO: change the outs layers, Conv(inp_dim + j * increase, oup_dim, 1, relu=False, bn=False)", "\n", "self", ".", "outs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Conv", "(", "inp_dim", ",", "oup_dim", ",", "1", ",", "relu", "=", "False", ",", "bn", "=", "False", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", ")", "]", ")", "\n", "self", ".", "channel_attention", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "SELayer", "(", "inp_dim", "+", "j", "*", "increase", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", ")", "]", ")", "\n", "\n", "# TODO: change the merge layers, Merge(inp_dim + j * increase, inp_dim + j * increase)", "\n", "self", ".", "merge_features", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "inp_dim", ",", "inp_dim", "+", "j", "*", "increase", ",", "bn", "=", "bn", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "merge_preds", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "Merge", "(", "oup_dim", ",", "inp_dim", "+", "j", "*", "increase", ",", "bn", "=", "bn", ")", "for", "j", "in", "range", "(", "5", ")", "]", ")", "for", "i", "in", "\n", "range", "(", "nstack", "-", "1", ")", "]", ")", "\n", "self", ".", "nstack", "=", "nstack", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet.forward": [[93, 133], ["imgs.permute", "posenet_final.PoseNet.pre", "range", "range", "pred.append", "range", "range", "preds_instack.append", "torch.zeros_like", "range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "# Input Tensor: a batch of images within [0,1], shape=(N, H, W, C). Pre-processing was done in data generator", "\n", "        ", "x", "=", "imgs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# Permute the dimensions of images to (N, C, H, W)", "\n", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "pred", "=", "[", "]", "\n", "# loop over stack", "\n", "for", "i", "in", "range", "(", "self", ".", "nstack", ")", ":", "\n", "            ", "preds_instack", "=", "[", "]", "\n", "# return 5 scales of feature maps", "\n", "hourglass_feature", "=", "self", ".", "hourglass", "[", "i", "]", "(", "x", ")", "\n", "\n", "if", "i", "==", "0", ":", "# cache for smaller feature maps produced by hourglass block", "\n", "                ", "features_cache", "=", "[", "torch", ".", "zeros_like", "(", "hourglass_feature", "[", "scale", "]", ")", "for", "scale", "in", "range", "(", "5", ")", "]", "\n", "for", "s", "in", "range", "(", "5", ")", ":", "# channel attention before heatmap regression", "\n", "                    ", "hourglass_feature", "[", "s", "]", "=", "self", ".", "channel_attention", "[", "i", "]", "[", "s", "]", "(", "hourglass_feature", "[", "s", "]", ")", "\n", "", "", "else", ":", "# residual connection across stacks", "\n", "                ", "for", "k", "in", "range", "(", "5", ")", ":", "\n", "#  python\u91cc\u9762\u7684+=, \uff0c*=\u4e5f\u662fin-place operation,\u9700\u8981\u6ce8\u610f", "\n", "                    ", "hourglass_feature_attention", "=", "self", ".", "channel_attention", "[", "i", "]", "[", "k", "]", "(", "hourglass_feature", "[", "k", "]", ")", "\n", "\n", "hourglass_feature", "[", "k", "]", "=", "hourglass_feature_attention", "+", "features_cache", "[", "k", "]", "\n", "# feature maps before heatmap regression", "\n", "", "", "features_instack", "=", "self", ".", "features", "[", "i", "]", "(", "hourglass_feature", ")", "\n", "\n", "for", "j", "in", "range", "(", "5", ")", ":", "# handle 5 scales of heatmaps", "\n", "                ", "preds_instack", ".", "append", "(", "self", ".", "outs", "[", "i", "]", "[", "j", "]", "(", "features_instack", "[", "j", "]", ")", ")", "\n", "if", "i", "!=", "self", ".", "nstack", "-", "1", ":", "\n", "                    ", "if", "j", "==", "0", ":", "\n", "                        ", "x", "=", "x", "+", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "# input tensor for next stack", "\n", "features_cache", "[", "j", "]", "=", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "\n", "", "else", ":", "\n", "# reset the res caches", "\n", "                        ", "features_cache", "[", "j", "]", "=", "self", ".", "merge_preds", "[", "i", "]", "[", "j", "]", "(", "preds_instack", "[", "j", "]", ")", "+", "self", ".", "merge_features", "[", "i", "]", "[", "j", "]", "(", "\n", "features_instack", "[", "j", "]", ")", "\n", "", "", "", "pred", ".", "append", "(", "preds_instack", ")", "\n", "# returned list shape: [nstack * [batch*128*128, batch*64*64, batch*32*32, batch*16*16, batch*8*8]]z", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.PoseNet._initialize_weights": [[134, 155], ["posenet_final.PoseNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# \u5377\u79ef\u7684\u521d\u59cb\u5316\u65b9\u6cd5", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# TODO: \u4f7f\u7528\u6b63\u6001\u5206\u5e03\u8fdb\u884c\u521d\u59cb\u5316\uff080, 0.01) \u7f51\u7edc\u6743\u91cd\u770b\u770b", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# He kaiming \u521d\u59cb\u5316, \u65b9\u5dee\u4e3a2/n. math.sqrt(2. / n) \u6216\u8005\u76f4\u63a5\u4f7f\u7528\u73b0\u6210\u7684nn.init\u4e2d\u7684\u51fd\u6570\u3002\u5728\u8fd9\u91cc\u4f1a\u68af\u5ea6\u7206\u70b8", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "# # math.sqrt(2. / n)", "\n", "# torch.nn.init.uniform_(tensorx)", "\n", "# bias\u90fd\u521d\u59cb\u5316\u4e3a0", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "# \u5f53\u6709BN\u5c42\u65f6\uff0c\u5377\u79ef\u5c42Con\u4e0d\u52a0bias\uff01", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# batchnorm\u4f7f\u7528\u51681\u521d\u59cb\u5316 bias\u51680", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.01", ")", "# todo: 0.001?", "\n", "# m.weight.data.normal_(0, 0.01)", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.Network.__init__": [[161, 168], ["super().__init__", "posenet_final.PoseNet", "models.loss_model.MultiTaskLoss", "models.loss_model_parallel.MultiTaskLossParallel"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ",", "dist", "=", "False", ",", "swa", "=", "False", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ",", "increase", "=", "opt", ".", "increase", ")", "\n", "# If we use train_parallel, we implement the parallel loss . And if we use train_distributed,", "\n", "# we should use single process loss because each process on these 4 GPUs  is independent", "\n", "self", ".", "criterion", "=", "MultiTaskLoss", "(", "opt", ",", "config", ")", "if", "dist", "else", "MultiTaskLossParallel", "(", "opt", ",", "config", ")", "\n", "self", ".", "swa", "=", "swa", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.Network.forward": [[169, 188], ["posenet_final.Network.posenet", "posenet_final.Network.criterion", "posenet_final.Network.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_all", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "inp_imgs", "=", "input_all", "[", "0", "]", "\n", "target_tuple", "=", "input_all", "[", "1", ":", "]", "\n", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "# testing mode", "\n", "            ", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "return", "output_tuple", ",", "loss", "\n", "\n", "", "else", ":", "# training mode", "\n", "            ", "if", "not", "self", ".", "swa", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "output_tuple", ",", "target_tuple", ")", "\n", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "return", "loss", "\n", "", "else", ":", "\n", "                ", "return", "output_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.NetworkEval.__init__": [[194, 198], ["super().__init__", "posenet_final.PoseNet"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetworkEval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posenet", "=", "PoseNet", "(", "opt", ".", "nstack", ",", "opt", ".", "hourglass_inp_dim", ",", "config", ".", "num_layers", ",", "bn", "=", "bn", ",", "init_weights", "=", "False", ",", "\n", "increase", "=", "opt", ".", "increase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.posenet_final.NetworkEval.forward": [[199, 209], ["posenet_final.NetworkEval.posenet", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp_imgs", ")", ":", "\n", "# Batch will be divided and Parallel Model will call this forward on every GPU", "\n", "        ", "output_tuple", "=", "self", ".", "posenet", "(", "inp_imgs", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "return", "output_tuple", "\n", "", "else", ":", "\n", "# output will be concatenated  along batch channel automatically after the parallel model return", "\n", "            ", "raise", "ValueError", "(", "'\\nOnly eval mode is available!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Residual.__init__": [[15, 36], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "ins", ",", "outs", ",", "bn", "=", "True", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "Residual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu_flag", "=", "relu", "\n", "self", ".", "convBlock", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ins", ",", "outs", "//", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outs", "//", "2", ",", "outs", "//", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outs", "//", "2", ",", "outs", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", ")", ",", "\n", ")", "\n", "if", "ins", "!=", "outs", ":", "\n", "            ", "self", ".", "skipConv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ins", ",", "outs", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outs", ")", "\n", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "self", ".", "ins", "=", "ins", "\n", "self", ".", "outs", "=", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Residual.forward": [[37, 49], ["layers_transposed.Residual.convBlock", "layers_transposed.Residual.skipConv", "layers_transposed.Residual.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "x", "=", "self", ".", "convBlock", "(", "x", ")", "\n", "if", "self", ".", "ins", "!=", "self", ".", "outs", ":", "\n", "            ", "residual", "=", "self", ".", "skipConv", "(", "residual", ")", "\n", "", "x", "+=", "residual", "# Bn layer is in the middle, so we can do in-plcae += here", "\n", "\n", "if", "self", ".", "relu_flag", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.BasicResidual.__init__": [[56, 72], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "inp_dim", ",", "out_dim", ",", "stride", "=", "1", ",", "bn", "=", "True", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "relu_flag", "=", "relu", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "stride", ",", "stride", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "\n", "self", ".", "skip", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "stride", ",", "stride", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", ")", "if", "stride", "!=", "1", "or", "inp_dim", "!=", "out_dim", "else", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.BasicResidual.forward": [[73, 88], ["layers_transposed.BasicResidual.conv1", "layers_transposed.BasicResidual.bn1", "layers_transposed.BasicResidual.relu1", "layers_transposed.BasicResidual.conv2", "layers_transposed.BasicResidual.bn2", "layers_transposed.BasicResidual.skip", "layers_transposed.BasicResidual.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "bn1", "=", "self", ".", "bn1", "(", "conv1", ")", "\n", "relu1", "=", "self", ".", "relu1", "(", "bn1", ")", "\n", "\n", "conv2", "=", "self", ".", "conv2", "(", "relu1", ")", "\n", "bn2", "=", "self", ".", "bn2", "(", "conv2", ")", "\n", "\n", "skip", "=", "self", ".", "skip", "(", "x", ")", "\n", "\n", "if", "self", ".", "relu_flag", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "bn2", "+", "skip", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "bn2", "+", "skip", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Conv.__init__": [[92, 106], ["torch.nn.Module.__init__", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bn", "=", "True", ",", "relu", "=", "True", ",", "dropout", "=", "False", ",", "dialated", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inp_dim", "=", "inp_dim", "\n", "self", ".", "relu", "=", "None", "\n", "self", ".", "bn", "=", "None", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "# \u6362\u6210 Leak Relu\u51cf\u7f13\u795e\u7ecf\u5143\u6b7b\u4ea1\u73b0\u8c61", "\n", "", "if", "bn", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ",", "dilation", "=", "1", ")", "\n", "# Different form TF, momentum default in Pytorch is 0.1, which means the decay rate of old running value", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "True", ",", "dilation", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Conv.forward": [[107, 121], ["layers_transposed.Conv.conv", "torch.dropout", "torch.dropout", "layers_transposed.Conv.bn", "layers_transposed.Conv.relu", "layers_transposed.Conv.size", "layers_transposed.Conv.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# examine the input channel equals the conve kernel channel", "\n", "        ", "assert", "x", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "inp_dim", ",", "\"input channel {} dese not fit kernel channel {}\"", ".", "format", "(", "x", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "self", ".", "inp_dim", ")", "\n", "if", "self", ".", "dropout", ":", "# comment these two lines if we do not want to use Dropout layers", "\n", "# p: probability of an element to be zeroed", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.2", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "# \u76f4\u63a5\u6ce8\u91ca\u6389\u8fd9\u4e00\u884c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528Dropout", "\n", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.DilatedConv.__init__": [[127, 141], ["torch.nn.Module.__init__", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "inp_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bn", "=", "True", ",", "relu", "=", "True", ",", "dropout", "=", "False", ",", "dialation", "=", "3", ")", ":", "\n", "        ", "super", "(", "DilatedConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inp_dim", "=", "inp_dim", "\n", "self", ".", "relu", "=", "None", "\n", "self", ".", "bn", "=", "None", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "# \u6362\u6210 Leak Relu\u51cf\u7f13\u795e\u7ecf\u5143\u6b7b\u4ea1\u73b0\u8c61", "\n", "", "if", "bn", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "dialation", ",", "bias", "=", "False", ",", "dilation", "=", "dialation", ")", "\n", "# Different form TF, momentum default in Pytorch is 0.1, which means the decay rate of old running value", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "dialation", ",", "bias", "=", "True", ",", "dilation", "=", "dialation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.DilatedConv.forward": [[142, 156], ["layers_transposed.DilatedConv.conv", "torch.dropout", "torch.dropout", "layers_transposed.DilatedConv.bn", "layers_transposed.DilatedConv.relu", "layers_transposed.DilatedConv.size", "layers_transposed.DilatedConv.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# examine the input channel equals the conve kernel channel", "\n", "        ", "assert", "x", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "inp_dim", ",", "\"input channel {} dese not fit kernel channel {}\"", ".", "format", "(", "x", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "self", ".", "inp_dim", ")", "\n", "if", "self", ".", "dropout", ":", "# comment these two lines if we do not want to use Dropout layers", "\n", "# p: probability of an element to be zeroed", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.2", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "# \u76f4\u63a5\u6ce8\u91ca\u6389\u8fd9\u4e00\u884c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528Dropout", "\n", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Backbone.__init__": [[162, 180], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "layers_transposed.Backbone.resBlock", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "layers_transposed.Backbone.resBlock", "torch.nn.Sequential", "torch.nn.Sequential", "dilatedBlock", "dilatedBlock", "dilatedBlock", "dilatedBlock", "dilatedBlock", "dilatedBlock"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["def", "__init__", "(", "self", ",", "nFeat", "=", "256", ",", "inplanes", "=", "3", ",", "resBlock", "=", "Residual", ",", "dilatedBlock", "=", "DilatedConv", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "self", ".", "resBlock", "=", "resBlock", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "self", ".", "res1", "=", "self", ".", "resBlock", "(", "64", ",", "128", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "res2", "=", "self", ".", "resBlock", "(", "128", ",", "128", ")", "\n", "self", ".", "dilation", "=", "nn", ".", "Sequential", "(", "\n", "dilatedBlock", "(", "128", ",", "128", ",", "dialation", "=", "3", ")", ",", "\n", "dilatedBlock", "(", "128", ",", "128", ",", "dialation", "=", "3", ")", ",", "\n", "dilatedBlock", "(", "128", ",", "128", ",", "dialation", "=", "4", ")", ",", "\n", "dilatedBlock", "(", "128", ",", "128", ",", "dialation", "=", "4", ")", ",", "\n", "dilatedBlock", "(", "128", ",", "128", ",", "dialation", "=", "5", ")", ",", "\n", "dilatedBlock", "(", "128", ",", "128", ",", "dialation", "=", "5", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Backbone.forward": [[182, 195], ["layers_transposed.Backbone.conv1", "layers_transposed.Backbone.bn1", "layers_transposed.Backbone.relu", "layers_transposed.Backbone.res1", "layers_transposed.Backbone.pool", "layers_transposed.Backbone.res2", "layers_transposed.Backbone.dilation", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# head", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "res1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "self", ".", "res2", "(", "x", ")", "\n", "x1", "=", "self", ".", "dilation", "(", "x", ")", "\n", "concat_merge", "=", "torch", ".", "cat", "(", "[", "x", ",", "x1", "]", ",", "dim", "=", "1", ")", "# (N, C1+C2, H, W)", "\n", "\n", "return", "concat_merge", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass.__init__": [[199, 211], ["torch.nn.Module.__init__", "layers_transposed.Hourglass._make_hour_glass", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Upsample", "torch.nn.Upsample"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_hour_glass"], ["def", "__init__", "(", "self", ",", "depth", ",", "nFeat", ",", "increase", "=", "128", ",", "bn", "=", "False", ",", "resBlock", "=", "Residual", ",", "convBlock", "=", "Conv", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "# oder number", "\n", "self", ".", "nFeat", "=", "nFeat", "# input and output channels", "\n", "self", ".", "increase", "=", "increase", "# increased channels while the depth grows", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "resBlock", "=", "resBlock", "\n", "self", ".", "convBlock", "=", "convBlock", "\n", "# will execute when instantiate the Hourglass object, prepare network's parameters", "\n", "self", ".", "hg", "=", "self", ".", "_make_hour_glass", "(", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "# no learning parameters, can be used any times repeatedly", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# no learning parameters  # FIXME: \u6539\u6210\u53cd\u5377\u79ef\uff1f", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_single_residual": [[212, 216], ["layers_transposed.Hourglass.resBlock"], "methods", ["None"], ["", "def", "_make_single_residual", "(", "self", ",", "depth_id", ")", ":", "\n", "# the innermost conve layer, return as a layer item", "\n", "        ", "return", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "\n", "bn", "=", "self", ".", "bn", ")", "# ###########  Index: 4", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_lower_residual": [[217, 232], ["layers_transposed.Hourglass.resBlock", "layers_transposed.Hourglass.resBlock", "layers_transposed.Hourglass.resBlock", "layers_transposed.Hourglass.convBlock"], "methods", ["None"], ["", "def", "_make_lower_residual", "(", "self", ",", "depth_id", ")", ":", "\n", "# return as a list", "\n", "        ", "pack_layers", "=", "[", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "\n", "bn", "=", "self", ".", "bn", ")", ",", "# ######### Index: 0", "\n", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "\n", "# ######### Index: 1", "\n", "bn", "=", "self", ".", "bn", ")", ",", "\n", "self", ".", "resBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "(", "depth_id", "+", "1", ")", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "\n", "# ######### Index: 2", "\n", "bn", "=", "self", ".", "bn", ")", ",", "\n", "self", ".", "convBlock", "(", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "self", ".", "nFeat", "+", "self", ".", "increase", "*", "depth_id", ",", "\n", "# ######### Index: 3", "\n", "bn", "=", "self", ".", "bn", ")", ",", "# \u6dfb\u52a0\u4e00\u4e2aConv\u7cbe\u7ec6\u5316\u4e0a\u91c7\u6837\u7684\u7279\u5f81\u56fe?", "\n", "]", "\n", "return", "pack_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_hour_glass": [[233, 247], ["range", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers_transposed.Hourglass._make_lower_residual", "hg.append", "layers_transposed.Hourglass.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers_transposed.Hourglass._make_single_residual"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_lower_residual", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._make_single_residual"], ["", "def", "_make_hour_glass", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        pack conve layers modules of hourglass block\n        :return: conve layers packed in n hourglass blocks\n        \"\"\"", "\n", "hg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "#  skip path; up_residual_block; down_residual_block_path,", "\n", "# 0 ~ n-2 (except the outermost n-1 order) need 3 residual blocks", "\n", "            ", "res", "=", "self", ".", "_make_lower_residual", "(", "i", ")", "# type:list", "\n", "if", "i", "==", "(", "self", ".", "depth", "-", "1", ")", ":", "# the deepest path (i.e. the longest path) need 4 residual blocks", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_single_residual", "(", "i", ")", ")", "# list append an element", "\n", "", "hg", ".", "append", "(", "nn", ".", "ModuleList", "(", "res", ")", ")", "# pack conve layers of  every oder of hourglass block", "\n", "", "return", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._hour_glass_forward": [[248, 274], ["layers_transposed.Hourglass.downsample", "up_fms.append", "layers_transposed.Hourglass.upsample", "layers_transposed.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._hour_glass_forward"], ["", "def", "_hour_glass_forward", "(", "self", ",", "depth_id", ",", "x", ",", "up_fms", ")", ":", "\n", "        ", "\"\"\"\n        built an hourglass block whose order is depth_id\n        :param depth_id: oder number of hourglass block\n        :param x: input tensor\n        :return: output tensor through an hourglass block\n        \"\"\"", "\n", "up1", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "0", "]", "(", "x", ")", "\n", "low1", "=", "self", ".", "downsample", "(", "x", ")", "\n", "low1", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "1", "]", "(", "low1", ")", "\n", "if", "depth_id", "==", "(", "self", ".", "depth", "-", "1", ")", ":", "# except for the highest-order hourglass block", "\n", "            ", "low2", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "4", "]", "(", "low1", ")", "\n", "", "else", ":", "\n", "# call the lower-order hourglass block recursively", "\n", "            ", "low2", "=", "self", ".", "_hour_glass_forward", "(", "depth_id", "+", "1", ",", "low1", ",", "up_fms", ")", "\n", "", "low3", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "2", "]", "(", "low2", ")", "\n", "up_fms", ".", "append", "(", "low2", ")", "\n", "# ######################## # if we don't consider 8*8 scale", "\n", "# if depth_id < self.depth - 1:", "\n", "#     self.up_fms.append(low2)", "\n", "up2", "=", "self", ".", "upsample", "(", "low3", ")", "\n", "deconv1", "=", "self", ".", "hg", "[", "depth_id", "]", "[", "3", "]", "(", "up2", ")", "\n", "# deconv2 = self.hg[depth_id][4](deconv1)", "\n", "# up1 += deconv2", "\n", "# out = self.hg[depth_id][5](up1)  # relu after residual add", "\n", "return", "up1", "+", "deconv1", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass.forward": [[275, 283], ["layers_transposed.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.Hourglass._hour_glass_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param: x a input tensor warpped wrapped as a list\n        :return: 5 different scales of feature maps, 128*128, 64*64, 32*32, 16*16, 8*8\n        \"\"\"", "\n", "up_fms", "=", "[", "]", "# collect feature maps produced by low2 at every scale", "\n", "feature_map", "=", "self", ".", "_hour_glass_forward", "(", "0", ",", "x", ",", "up_fms", ")", "\n", "return", "[", "feature_map", "]", "+", "up_fms", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.SELayer.__init__": [[286, 301], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "\"\"\"\n        Squeeze and Excitation\n        :param inp_dim: the channel of input tensor\n        :param reduction: channel compression ratio\n        :return output the tensor with the same shape of input\n        \"\"\"", "\n", "assert", "inp_dim", ">", "reduction", ",", "f\"Make sure your input channel bigger than reduction which equals to {reduction}\"", "\n", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inp_dim", ",", "inp_dim", "//", "reduction", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "# Relu", "\n", "nn", ".", "Linear", "(", "inp_dim", "//", "reduction", ",", "inp_dim", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.layers_transposed.SELayer.forward": [[302, 307], ["x.size", "layers_transposed.SELayer.avg_pool().view", "layers_transposed.SELayer.fc().view", "layers_transposed.SELayer.avg_pool", "layers_transposed.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel.__init__": [[8, 18], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "config", ",", "heatmap_weight", "=", "1", ",", "offset_weight", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MultiTaskLossParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nstack", "=", "opt", ".", "nstack", "\n", "self", ".", "batch_size", "=", "opt", ".", "batch_size", "\n", "self", ".", "offset_start", "=", "config", ".", "offset_start", "\n", "self", ".", "multi_task_weight", "=", "opt", ".", "multi_task_weight", "\n", "self", ".", "scale_weight", "=", "opt", ".", "scale_weight", "\n", "self", ".", "nstack_weight", "=", "opt", ".", "nstack_weight", "\n", "self", ".", "heatmap_weight", "=", "heatmap_weight", "\n", "self", ".", "offset_weight", "=", "offset_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel.forward": [[19, 38], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "sum", "range", "loss_model_parallel.MultiTaskLossParallel._loss_per_scale", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel._loss_per_scale"], ["", "def", "forward", "(", "self", ",", "pred_tuple", ",", "target_tuple", ")", ":", "\n", "        ", "\"\"\"\n        Compute the multi-task total loss\n        :param pred_tuple: [nstack * [(bacth,C,128,128), (bacth,C,64,64), (bacth,C,32,32),\n        (bacth,C,16,16)], (bacth,C,8,8)]\n        :param target_tuple: target tensors, i.e.,\n         mask_misses,   heatmaps,       offsets,       mask_offsets,\n        [batch,1,128,128], [batch,44,128,128], [batch,36,128,128], [batch,36,128,128]\n        :return: scalar tensor\n        \"\"\"", "\n", "# we use 4 stacks, 5 scales", "\n", "# TODO: \u662f\u75285\u4e2a\u4e0d\u540cscale\u597d\u8fd8\u662f4\u4e2ascale\u76d1\u7763\u597d\uff1f", "\n", "pred_scale_tensors", "=", "[", "torch", ".", "cat", "(", "[", "pred_tuple", "[", "j", "]", "[", "i", "]", "[", "None", ",", "...", "]", "for", "j", "in", "range", "(", "self", ".", "nstack", ")", "]", ",", "dim", "=", "0", ")", "for", "i", "in", "\n", "range", "(", "5", ")", "]", "# concatenate the same scale output of different stacks", "\n", "# different scale losses have different order of magnitudes owning to different pixel numbers (feature map size)", "\n", "loss_scales", "=", "[", "self", ".", "_loss_per_scale", "(", "pred_scale_tensors", "[", "i", "]", ",", "target_tuple", ")", "*", "self", ".", "scale_weight", "[", "i", "]", "for", "i", "in", "\n", "range", "(", "5", ")", "]", "# different scale losses of all nstack", "\n", "loss_per_batch", "=", "sum", "(", "loss_scales", ")", "/", "sum", "(", "self", ".", "scale_weight", ")", "\n", "return", "loss_per_batch", "# should divide the batch size in the main train", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel._loss_per_scale": [[39, 76], ["torch.interpolate", "torch.interpolate", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "loss_model_parallel.MultiTaskLossParallel.l2_loss"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel.l2_loss"], ["", "def", "_loss_per_scale", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Compute the loss on a particular scale.\n        :param pred: tensor (nstack, bacth, C, H, W)\n        :param target: mask_misses, heatmaps, offsets, mask_offsets of shape (N, C, H, W)\n        :return:\n        \"\"\"", "\n", "# TODO\uff1a \u6ca1\u6709\u5e73\u8861keypoint \u548c body part\u4e24\u90e8\u5206\u635f\u5931\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u628aheatmap\u8fdb\u4e00\u6b65\u62c6\u5206", "\n", "pred_heatmap", "=", "pred", "[", ":", ",", ":", ",", ":", "self", ".", "offset_start", "]", "\n", "# pred_offset = pred[:, :, self.offset_start:]", "\n", "\n", "gt_mask_misses", "=", "F", ".", "interpolate", "(", "target", "[", "0", "]", ",", "size", "=", "pred", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "gt_heatmaps", "=", "F", ".", "adaptive_avg_pool2d", "(", "target", "[", "1", "]", ",", "output_size", "=", "pred", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# gt_offsets = F.adaptive_avg_pool2d(target[2], output_size=pred.shape[-2:])", "\n", "# gt_mask_offsets = F.interpolate(target[3], size=pred.shape[-2:], mode='bilinear')", "\n", "\n", "#", "\n", "#   F.adaptive_max_pool2d(target[3], output_size=pred.shape[-2:])", "\n", "\n", "# ############# For debug ##############################", "\n", "# heatmap = gt_heatmaps[0,...].cpu().numpy().squeeze()", "\n", "# offset = gt_mask_offsets[0,...].cpu().numpy().squeeze()", "\n", "#", "\n", "# import matplotlib.pylab as plt", "\n", "# # plt.imshow(heatmap[11,:,:]) # mask_all", "\n", "# plt.imshow(heatmap[43, :,:])  # mask_all", "\n", "# plt.show()", "\n", "# #####################################################", "\n", "heatmap_loss", "=", "self", ".", "l2_loss", "(", "pred_heatmap", ",", "gt_heatmaps", "[", "None", ",", "...", "]", ",", "gt_mask_misses", "[", "None", ",", "...", "]", "\n", ",", "nstack_weight", "=", "self", ".", "nstack_weight", ")", "\n", "# offset_loss = self.l1_loss(pred_offset, gt_offsets[None, ...], gt_mask_offsets[None, ...],", "\n", "#                            nstack_weight=self.nstack_weight)", "\n", "#", "\n", "# multi_task_loss = heatmap_loss * self.multi_task_weight[0] + offset_loss * self.multi_task_weight[1]", "\n", "# return multi_task_loss / sum(self.multi_task_weight)", "\n", "return", "heatmap_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel.focal_l2_loss": [[77, 100], ["torch.where", "torch.where", "torch.where", "torch.where", "out.sum", "print", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "len", "len", "out.sum.detach().cpu().numpy", "sum", "sum", "range", "out.sum.detach().cpu", "len", "out.sum.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "focal_l2_loss", "(", "s", ",", "sxing", ",", "mask_miss", ",", "gamma", "=", "2", ",", "nstack_weight", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", ":", "\n", "        ", "\"\"\"\n        Compute the focal L2 loss between predicted and groundtruth score maps.\n        :param s:  predicted tensor (nstack, batch, channel, height, width), predicted score maps\n        :param sxing: target tensor (nstack, batch, channel, height, width)\n        :param mask_miss: tensor (1, batch, 1, height, width)\n        :param gamma: focusing parameter\n        :return: a scalar tensor\n        \"\"\"", "\n", "# eps = 1e-8  # 1e-12", "\n", "# s = torch.clamp(s, eps, 1. - eps)  # improve the stability of the focal loss", "\n", "st", "=", "torch", ".", "where", "(", "torch", ".", "ge", "(", "sxing", ",", "0.01", ")", ",", "s", ",", "1", "-", "s", ")", "\n", "factor", "=", "(", "1.", "-", "st", ")", "**", "gamma", "\n", "# multiplied by mask_miss via broadcast operation", "\n", "out", "=", "(", "s", "-", "sxing", ")", "**", "2", "*", "factor", "*", "mask_miss", "# type: torch.Tensor", "\n", "# sum over the feature map, should divide by batch_size afterwards", "\n", "loss_nstack", "=", "out", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", "# losses from nstack 1, 2, 3, 4...", "\n", "assert", "len", "(", "loss_nstack", ")", "==", "len", "(", "nstack_weight", ")", ",", "nstack_weight", "\n", "print", "(", "' heatmap focal L2 loss per stack..........  '", ",", "loss_nstack", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "weight_loss", "=", "[", "loss_nstack", "[", "i", "]", "*", "nstack_weight", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "nstack_weight", ")", ")", "]", "\n", "loss", "=", "sum", "(", "weight_loss", ")", "/", "sum", "(", "nstack_weight", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel.l1_loss": [[101, 119], ["out.sum", "print", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "len", "len", "out.sum.detach().cpu().numpy", "sum", "sum", "range", "out.sum.detach().cpu", "len", "out.sum.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "l1_loss", "(", "pred", ",", "target", ",", "mask_offset", ",", "nstack_weight", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", ":", "\n", "        ", "\"\"\"\n        Compute the  L1 loss of offset feature maps\n        :param pred: predicted tensor (nstack, batch, channel, height, width), predicted feature maps\n        :param target: target tensor (nstack, batch, channel, height, width)\n        :param mask_offset: tensor (nstack, batch, channel, height, width)\n        :param nstack_weight:\n        :return:\n        \"\"\"", "\n", "out", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "*", "mask_offset", "# type: torch.Tensor", "\n", "# sum over the feature map, should divide by batch afterwards", "\n", "loss_nstack", "=", "out", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", "\n", "assert", "len", "(", "loss_nstack", ")", "==", "len", "(", "nstack_weight", ")", ",", "nstack_weight", "\n", "print", "(", "' offset L1 loss per stack >>>>>>>>  '", ",", "loss_nstack", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "weight_loss", "=", "[", "loss_nstack", "[", "i", "]", "*", "nstack_weight", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "nstack_weight", ")", ")", "]", "\n", "loss", "=", "sum", "(", "weight_loss", ")", "/", "sum", "(", "nstack_weight", ")", "# normalized loss by weights", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.models.loss_model_parallel.MultiTaskLossParallel.l2_loss": [[120, 140], ["out.sum", "print", "len", "len", "out.sum.detach().cpu().numpy", "sum", "sum", "range", "out.sum.detach().cpu", "len", "out.sum.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "l2_loss", "(", "s", ",", "sxing", ",", "mask_miss", ",", "nstack_weight", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", ":", "\n", "        ", "\"\"\"\n        Compute the L2 loss between predicted and groundtruth score maps.\n        :param s:  predicted tensor (nstack, batch, channel, height, width), predicted score maps\n        :param sxing: target tensor (nstack, batch, channel, height, width)\n        :param mask_miss: tensor (nstack, batch, 1, height, width)\n        :return: a scalar tensor\n        \"\"\"", "\n", "# multiplied by mask_miss via broadcast operation", "\n", "# eps = 1e-8  # 1e-12  #", "\n", "# s = torch.clamp(s, eps, 1 - eps)", "\n", "out", "=", "(", "s", "-", "sxing", ")", "**", "2", "*", "mask_miss", "# type: torch.Tensor", "\n", "# sum over the feature map, should divide by batch afterwards", "\n", "loss_nstack", "=", "out", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", "\n", "assert", "len", "(", "loss_nstack", ")", "==", "len", "(", "nstack_weight", ")", ",", "nstack_weight", "\n", "print", "(", "' heatmap L2 loss per stack.........  '", ",", "loss_nstack", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "weight_loss", "=", "[", "loss_nstack", "[", "i", "]", "*", "nstack_weight", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "nstack_weight", ")", ")", "]", "\n", "loss", "=", "sum", "(", "weight_loss", ")", "/", "sum", "(", "nstack_weight", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.visulizatoin.draw_net.make_dot": [[6, 57], ["dict", "graphviz.Digraph", "set", "draw_net.make_dot.add_nodes"], "function", ["None"], ["def", "make_dot", "(", "var", ",", "params", "=", "None", ")", ":", "\n", "    ", "\"\"\" Produces Graphviz representation of PyTorch autograd graph\n    Blue nodes are the Variables that require grad, orange are Tensors\n    saved for backward in torch.autograd.Function\n    Args:\n        var: output Variable\n        params: dict of (name, Variable) to add names to node that\n            require grad (T O D O: make optional)\n    \"\"\"", "\n", "# visulize the netwok or drwa the network or show the network", "\n", "if", "params", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "params", ".", "values", "(", ")", "[", "0", "]", ",", "Variable", ")", "\n", "param_map", "=", "{", "id", "(", "v", ")", ":", "k", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", "}", "\n", "\n", "", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "\n", "shape", "=", "'box'", ",", "\n", "align", "=", "'left'", ",", "\n", "fontsize", "=", "'12'", ",", "\n", "ranksep", "=", "'0.1'", ",", "\n", "height", "=", "'0.2'", ")", "\n", "dot", "=", "Digraph", "(", "node_attr", "=", "node_attr", ",", "graph_attr", "=", "dict", "(", "size", "=", "\"12,12\"", ")", ")", "\n", "seen", "=", "set", "(", ")", "\n", "\n", "def", "size_to_str", "(", "size", ")", ":", "\n", "        ", "return", "'('", "+", "(", "', '", ")", ".", "join", "(", "[", "'%d'", "%", "v", "for", "v", "in", "size", "]", ")", "+", "')'", "\n", "\n", "", "def", "add_nodes", "(", "var", ")", ":", "\n", "        ", "if", "var", "not", "in", "seen", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "var", ")", ":", "\n", "                ", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "size_to_str", "(", "\n", "var", ".", "size", "(", ")", ")", ",", "fillcolor", "=", "'orange'", ")", "\n", "", "elif", "hasattr", "(", "var", ",", "'variable'", ")", ":", "\n", "                ", "u", "=", "var", ".", "variable", "\n", "name", "=", "param_map", "[", "id", "(", "u", ")", "]", "if", "params", "is", "not", "None", "else", "''", "\n", "node_name", "=", "'%s\\n %s'", "%", "(", "name", ",", "size_to_str", "(", "u", ".", "size", "(", ")", ")", ")", "\n", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "node_name", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "", "else", ":", "\n", "                ", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "str", "(", "type", "(", "var", ")", ".", "__name__", ")", ")", "\n", "", "seen", ".", "add", "(", "var", ")", "\n", "if", "hasattr", "(", "var", ",", "'next_functions'", ")", ":", "\n", "                ", "for", "u", "in", "var", ".", "next_functions", ":", "\n", "                    ", "if", "u", "[", "0", "]", "is", "not", "None", ":", "\n", "                        ", "dot", ".", "edge", "(", "str", "(", "id", "(", "u", "[", "0", "]", ")", ")", ",", "str", "(", "id", "(", "var", ")", ")", ")", "\n", "add_nodes", "(", "u", "[", "0", "]", ")", "\n", "", "", "", "if", "hasattr", "(", "var", ",", "'saved_tensors'", ")", ":", "\n", "                ", "for", "t", "in", "var", ".", "saved_tensors", ":", "\n", "                    ", "dot", ".", "edge", "(", "str", "(", "id", "(", "t", ")", ")", ",", "str", "(", "id", "(", "var", ")", ")", ")", "\n", "add_nodes", "(", "t", ")", "\n", "\n", "", "", "", "", "add_nodes", "(", "var", ".", "grad_fn", ")", "\n", "return", "dot", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.mydataset.MyDataset.__init__": [[16, 30], ["py_cocodata_server.py_data_iterator.RawDataIterator"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "global_config", ",", "config", ",", "shuffle", "=", "False", ",", "augment", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a DataIterator\n        :param global_config: the configuration used in our project\n        :param config:  the original COCO configuration\n        :param shuffle:\n        :param augment:\n        \"\"\"", "\n", "self", ".", "global_config", "=", "global_config", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "raw_data_iterator", "=", "RawDataIterator", "(", "self", ".", "global_config", ",", "self", ".", "config", ",", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "augment", "=", "self", ".", "augment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.mydataset.MyDataset.__getitem__": [[31, 35], ["mydataset.MyDataset.raw_data_iterator.gen"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.gen"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# return entries: image, mask_miss, unmasked labels, offsets, mask_offset", "\n", "# Notice\uff1a numpy.random seed will fork the same value in multi-process, while python random will fork differently", "\n", "        ", "return", "self", ".", "raw_data_iterator", ".", "gen", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.mydataset.MyDataset.__len__": [[36, 38], ["mydataset.MyDataset.raw_data_iterator.num_keys"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.num_keys"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "raw_data_iterator", ".", "num_keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.make_mask": [[38, 117], ["os.path.join", "os.path.join", "cv2.imread", "numpy.zeros", "numpy.zeros", "np.logical_not.astype", "np.bitwise_or.astype", "numpy.concatenate", "os.path.exists", "os.path.exists", "IOError", "numpy.bitwise_or", "numpy.logical_not", "coco.annToMask", "numpy.bitwise_and", "coco.annToMask", "numpy.bitwise_or", "numpy.logical_not", "numpy.bitwise_or", "Exception", "numpy.bitwise_or"], "function", ["None"], ["def", "make_mask", "(", "img_dir", ",", "img_id", ",", "img_anns", ",", "coco", ")", ":", "\n", "    ", "\"\"\"Mask all unannotated people (including the crowd which has no keypoint annotation)\"\"\"", "\n", "# \u5bf9\u4e8e\u67d0\u4e00\u5f20\u56fe\u50cf\u548c\u56fe\u50cf\u4e2d\u6240\u6709\u4eba\u6216\u8005\u4eba\u7fa4\u7684\u6807\u6ce8\u505a\u5904\u7406", "\n", "# mask miss \u548c\u3000mask all\u7684\u89e3\u91ca\uff1a", "\n", "# mask_all\u8bb0\u5f55\u4e86\u4e00\u5f20\u56fe\u50cf\u4e0a\u6240\u6709\u4eba\u7684mask(\u5305\u62ec\u5355\u4e2a\u4eba\u548c\u4e00\u7fa4\u4eba)\uff0c\u3000\u800cmask miss\u662f\u4e3a\u4e86\u63a9\u76d6\u6389\u90a3\u4e9b\u662f\u4eba\uff0c\u6709segmentation\u4f46\u662f\u6ca1\u6709\u6807\u6ce8keypoint", "\n", "# \u9700\u8981\u6ce8\u610f\uff0cmak miss\u662f\u628a\u6ca1\u6709keypoint\u7684\u533a\u57df\u53d8\u62100\uff0c\u800cmask all\u662f\u628a\u6240\u6709\u4eba\u533a\u57df\u53d8\u6210\uff11\u3002\u6700\u540emask_miss\u53c8\u4ece0,1 bool\u578b\u53d8\u52300~255\u7684uint8", "\n", "# apply mask miss if p[\"num_keypoints\"] <= 0 i.e. person is segmented but have no keypoints(joints)", "\n", "# \"people who has little annotation(<5), who has little scale(<32*32) and who is so close to 'main_person'\" are", "\n", "# not masked, they just can't be selected as main person of image, but they are still passed to the netwrok.", "\n", "# ----------------------------------------------------------------------------------- #", "\n", "#  (\u6211\u8ba4\u4e3a\u8fd9\u6837\u505a\u53ef\u4ee5\u4f7f\u5f97\u7f51\u7edc\u5bf9\u4e8e\u5c0f\u4e8e32\u5927\u5c0f\u7684\u6216\u8005\u8282\u70b9\u5c11\u4e8e5\u7684\u4e0d\u654f\u611f\uff0c\u4f7f\u5f97\u8bad\u7ec3\u65f6\u6291\u5236\u7f51\u7edc\u53ef\u4ee5\u5c4f\u853d\u5b83\u4eec\uff09", "\n", "# ----------------------------------------------------------------------------------- #", "\n", "# see:\u3000https://github.com/michalfaber/keras_Realtime_Multi-Person_Pose_Estimation/issues/43", "\n", "# About just \"mask\". It contains pixel segment borders. For my perception it never used in the algorithm,", "\n", "# may be it was created for some visualisation purposes.", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "\"%012d.jpg\"", "%", "img_id", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"image path dose not exist: %s\"", "%", "img_path", ")", "\n", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "# mask:\u3000https://github.com/michalfaber/keras_Realtime_Multi-Person_Pose_Estimation/issues/8#issuecomment-342977756", "\n", "mask_all", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask_miss", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "flag", "=", "0", "\n", "for", "p", "in", "img_anns", ":", "\n", "        ", "seg", "=", "p", "[", "\"segmentation\"", "]", "# seg is just a boarder of an object, see annotation file", "\n", "\n", "if", "p", "[", "\"iscrowd\"", "]", "==", "1", ":", "# the handel of crowd", "\n", "# segmentation\u683c\u5f0f\u53d6\u51b3\u4e8e\u8fd9\u4e2a\u5b9e\u4f8b\u662f\u4e00\u4e2a\u5355\u4e2a\u7684\u5bf9\u8c61\uff08\u5373iscrowd=0\uff0c\u5c06\u4f7f\u7528polygons\u683c\u5f0f\uff09\u8fd8\u662f\u4e00\u7ec4\u5bf9\u8c61\uff08\u5373iscrowd=1\uff0c\u5c06\u4f7f\u7528RLE\u683c\u5f0f\uff09", "\n", "            ", "mask_crowd", "=", "coco", ".", "annToMask", "(", "p", ")", "\n", "\n", "temp", "=", "np", ".", "bitwise_and", "(", "mask_all", ",", "mask_crowd", ")", "# \u6211\u611f\u89c9temp\u662f\u4e4b\u524dmask_all\u4e0e\u5f53\u524dcrowded instances\u7684mask\u7684\u4ea4\u96c6IOU", "\n", "mask_crowd", "=", "mask_crowd", "-", "temp", "\n", "\n", "flag", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "mask", "=", "coco", ".", "annToMask", "(", "p", ")", "\n", "\n", "", "mask_all", "=", "np", ".", "bitwise_or", "(", "mask", ",", "mask_all", ")", "# mask_all\u8bb0\u5f55\u4e86\u4e00\u5f20\u56fe\u50cf\u4e0a\u6240\u6709\u4eba\u7684mask", "\n", "# mask_all never used for anything except visualization !!!!", "\n", "if", "p", "[", "\"num_keypoints\"", "]", "<=", "0", ":", "\n", "            ", "mask_miss", "=", "np", ".", "bitwise_or", "(", "mask", ",", "mask_miss", ")", "\n", "\n", "", "", "if", "flag", "<", "1", ":", "\n", "        ", "mask_miss", "=", "np", ".", "logical_not", "(", "mask_miss", ")", "\n", "", "elif", "flag", "==", "1", ":", "\n", "# mask the few keypoint and crowded persons at the same time ! mask areas are 0 !", "\n", "        ", "mask_miss", "=", "np", ".", "logical_not", "(", "np", ".", "bitwise_or", "(", "mask_miss", ",", "mask_crowd", ")", ")", "\n", "# mask all the persons including crowd, mask area are 1 !", "\n", "mask_all", "=", "np", ".", "bitwise_or", "(", "mask_all", ",", "mask_crowd", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"crowd segments > 1\"", ")", "# \u5bf9\u4e00\u4e2a\u533a\u57df\uff0c\u53ea\u80fd\u5b58\u5728\u4e00\u4e2asegment,\u4e0d\u5b58\u5728\u4e00\u4e2a\u533a\u57df\u540c\u65f6\u5c5e\u4e8e\u67d0\u4e24\u4e2ainstances\u7684\u90e8\u5206", "\n", "\n", "", "mask_miss", "=", "mask_miss", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mask_miss", "*=", "255", "# \u4fdd\u5b58\u7684\u3000mask_miss\u3000\u7684\u6570\u503c\u975e0\u5373255", "\n", "\n", "mask_all", "=", "mask_all", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mask_all", "*=", "255", "# \u4fdd\u5b58\u7684\u3000mask_miss\u3000\u7684\u6570\u503c\u975e0\u5373255", "\n", "# Mask miss is multiplied by the loss,", "\n", "# so masked areas are 0. (\u88abmask\u7684\u533a\u57df\u662f0) I.e. second mask is real mask miss. First mask (mask_all) is just for visuals.", "\n", "mask_concat", "=", "np", ".", "concatenate", "(", "(", "mask_miss", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "mask_all", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "2", ")", "\n", "\n", "# # # # ------------ \u6ce8\u91ca\u90e8\u5206\u4ee3\u7801\u7528\u6765\u663e\u793amask crowded instance  --------------", "\n", "# # # print('***************', mask_miss.min(), mask_miss.max())", "\n", "# plt.imshow(img[:,:,[2,1,0]])", "\n", "# plt.show()", "\n", "# plt.imshow(np.repeat(mask_concat[:, :, 1][:,:,np.newaxis], 3, axis=2))  # mask_all", "\n", "# plt.show()", "\n", "# plt.imshow(np.repeat(mask_concat[:, :, 0][:,:,np.newaxis], 3, axis=2))  # mask_miss", "\n", "# plt.show()", "\n", "# print('show')", "\n", "# # # -------------------------------------------------------------------", "\n", "\n", "return", "img", ",", "mask_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.process_image": [[119, 257], ["len", "print", "range", "dict", "enumerate", "dict", "numpy.zeros", "range", "all_persons.append", "main_persons.append", "prev_center.append", "dict.copy", "enumerate", "numpy.expand_dims", "numpy.expand_dims", "numpy.append", "[].tolist", "instance[].append", "instance[].append", "instance[].append", "scipy.spatial.distance.cdist", "max", "[].tolist"], "function", ["None"], ["", "def", "process_image", "(", "image_rec", ",", "img_id", ",", "image_index", ",", "img_anns", ",", "dataset_type", ")", ":", "\n", "# \u9488\u5bf9\u5904\u7406\u7684\u5bf9\u8c61\u662f\u3000\u67d0\u4e00\u5f20id\u5bf9\u5e94\u7684image\u3000\u53ca\u8fd9\u5f20\u56fe\u4e0a\u6240\u6709\u4eba\u7684\u6807\u6ce8", "\n", "\n", "    ", "numPeople", "=", "len", "(", "img_anns", ")", "\n", "h", ",", "w", "=", "image_rec", "[", "'height'", "]", ",", "image_rec", "[", "'width'", "]", "\n", "print", "(", "\"Image ID: \"", ",", "img_id", ",", "'  ,'", ",", "'number of people: '", ",", "numPeople", ")", "\n", "\n", "all_persons", "=", "[", "]", "\n", "\n", "for", "p", "in", "range", "(", "numPeople", ")", ":", "\n", "\n", "        ", "pers", "=", "dict", "(", ")", "# \u7528\u5b57\u5178\u7c7b\u578b\u4fdd\u5b58\u6570\u636e", "\n", "\n", "person_center", "=", "[", "img_anns", "[", "p", "]", "[", "\"bbox\"", "]", "[", "0", "]", "+", "img_anns", "[", "p", "]", "[", "\"bbox\"", "]", "[", "2", "]", "/", "2", ",", "# \u6807\u6ce8\u683c\u5f0f\u4e3a(x, y, w, h)", "\n", "img_anns", "[", "p", "]", "[", "\"bbox\"", "]", "[", "1", "]", "+", "img_anns", "[", "p", "]", "[", "\"bbox\"", "]", "[", "3", "]", "/", "2", "]", "\n", "\n", "pers", "[", "\"objpos\"", "]", "=", "person_center", "# objpos \u4ee3\u8868\u7684\u662f\u4eba\u4f53\u7684\u4e2d\u5fc3\u4f4d\u7f6e", "\n", "pers", "[", "\"bbox\"", "]", "=", "img_anns", "[", "p", "]", "[", "\"bbox\"", "]", "\n", "pers", "[", "\"segment_area\"", "]", "=", "img_anns", "[", "p", "]", "[", "\"area\"", "]", "\n", "pers", "[", "\"num_keypoints\"", "]", "=", "img_anns", "[", "p", "]", "[", "\"num_keypoints\"", "]", "\n", "\n", "anno", "=", "img_anns", "[", "p", "]", "[", "\"keypoints\"", "]", "\n", "\n", "pers", "[", "\"joint\"", "]", "=", "np", ".", "zeros", "(", "(", "17", ",", "3", ")", ")", "\n", "for", "part", "in", "range", "(", "17", ")", ":", "\n", "            ", "pers", "[", "\"joint\"", "]", "[", "part", ",", "0", "]", "=", "anno", "[", "part", "*", "3", "]", "# x\u5750\u6807\uff0c \u56e0\u4e3a\u6bcf\u4e00\u4e2apart\u7684\u4fe1\u606f\u6709(x, y, v) 3\u4e2a\u503c", "\n", "pers", "[", "\"joint\"", "]", "[", "part", ",", "1", "]", "=", "anno", "[", "part", "*", "3", "+", "1", "]", "# y\u5750\u6807\uff0c\u6ce8\u610fx\uff0cy\u5750\u6807\u7684\u5148\u540e\u987a\u5e8f", "\n", "\n", "# visible/invisible", "\n", "# COCO - Each keypoint has a 0-indexed location x,y and a visibility flag v defined as v=0: not labeled", "\n", "# (in which case x=y=0), v=1: labeled but not visible, and v=2: labeled and visible.", "\n", "\n", "# OURS - # 3 never marked up in this dataset, 2 - not marked up in this person, 1 - marked and visible,", "\n", "# 0 - marked but invisible", "\n", "if", "anno", "[", "part", "*", "3", "+", "2", "]", "==", "2", ":", "# +2\u3000\u5bf9\u5e94visibility\u7684\u503c", "\n", "                ", "pers", "[", "\"joint\"", "]", "[", "part", ",", "2", "]", "=", "1", "\n", "", "elif", "anno", "[", "part", "*", "3", "+", "2", "]", "==", "1", ":", "\n", "                ", "pers", "[", "\"joint\"", "]", "[", "part", ",", "2", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "pers", "[", "\"joint\"", "]", "[", "part", ",", "2", "]", "=", "2", "\n", "\n", "", "", "pers", "[", "\"scale_provided\"", "]", "=", "img_anns", "[", "p", "]", "[", "\"bbox\"", "]", "[", "3", "]", "/", "image_size", "# \u6bcf\u4e00\u4e2aperson\u5360\u6bd4", "\n", "# img_anns[p][\"bbox\"][3] \u5bf9\u5e94\u7684\u662f\u4eba\u4f53\u6846\u7684\u9ad8\u5ea6h\u3000!\u3000", "\n", "\n", "all_persons", ".", "append", "(", "pers", ")", "\n", "\n", "", "main_persons", "=", "[", "]", "\n", "prev_center", "=", "[", "]", "\n", "\n", "\"\"\" \n    The idea of main person: each picture is feeded for each main person every epoch centered around this main \n    person( btw it is not working in michalfaber code, thats why quality of model is bit lower). \n    Secondary persons will not get such privilege, if they close to one of main persons they will be visible on crop,\n     and heatmap/paf will be calculated, if they too far then ... bad luck, they never be machine learning star :)\n    # https://github.com/anatolix/keras_Realtime_Multi-Person_Pose_Estimation/issues/14\n    \"\"\"", "\n", "# https://github.com/anatolix/keras_Realtime_Multi-Person_Pose_Estimation/issues/14", "\n", "\n", "for", "pers", "in", "all_persons", ":", "# \u6700\u5916\u5c42\u5faa\u73af\u662f\u6240\u6709\u7684\u5355\u4e2a\u7684\u4eba\uff0c\u4eceall person\u4e2d\u9009\u53d6main\u3000person", "\n", "\n", "# skip this person if parts number is too low or if", "\n", "# segmentation area is too small", "\n", "        ", "if", "pers", "[", "\"num_keypoints\"", "]", "<", "5", "or", "pers", "[", "\"segment_area\"", "]", "<", "32", "*", "32", ":", "\n", "#  we do not select the person, which is too small or has too few keypoints, as the main person", "\n", "# \u7528\u4e8e\u5c45\u4e2d\u56fe\u7247\u7684main person\u662f\u7528\u6765\u8bad\u7ec3\u7f51\u7edc\u7684\u4e3b\u529b\uff0c\u6240\u4ee5\u5173\u952e\u70b9\u548c\u4eba\u7684\u5927\u5c0f\u8981\u5408\u7406\uff0c\u5173\u952e\u70b9\u5c11\u7684\u53ef\u80fd\u79bb\u5176\u4ed6main person\u8fd1", "\n", "            ", "continue", "\n", "\n", "", "person_center", "=", "pers", "[", "\"objpos\"", "]", "\n", "\n", "# skip this person if the distance to exiting person is too small", "\n", "flag", "=", "0", "\n", "for", "pc", "in", "prev_center", ":", "# prev_center \u4fdd\u5b58\u4e86person\u3000center \u4ee5\u53ca\u4eba\u4f53\u6846\u957f\u548c\u5bbd\u4e2d\u7684\u6700\u5927\u503c", "\n", "            ", "a", "=", "np", ".", "expand_dims", "(", "pc", "[", ":", "2", "]", ",", "axis", "=", "0", ")", "# prev_center\u662f\u4e00\u4e2a\u5750\u6807: (x, y)", "\n", "b", "=", "np", ".", "expand_dims", "(", "person_center", ",", "axis", "=", "0", ")", "\n", "dist", "=", "cdist", "(", "a", ",", "b", ")", "[", "0", "]", "# by default, computing the euclidean distance", "\n", "# pc[2] \u4ee3\u8868\u4eba\u4f53\u6846\u957f\u548c\u5bbd\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u8fb9,\u539f\u59cb\u7a0b\u5e8f\u4e2d\u628a\u8ddd\u79bbmain person\u7279\u522b\u8fd1\uff0c<0.3\u7684person\u4e0d\u518d\u4f5c\u4e3a\u4e0b\u4e00\u4e2amain person", "\n", "# \u56e0\u4e3a\u8fd9\u6837\u6ca1\u6709\u5fc5\u8981\uff0c\u79bb\u5f97\u5f88\u8fd1\uff0c\u56fe\u7247\u88c1\u51fa\u6765\u7684\u90e8\u5206\u57fa\u672c\u4e00\u6837", "\n", "if", "dist", "<", "pc", "[", "2", "]", "*", "0.3", ":", "\n", "                ", "flag", "=", "1", "\n", "continue", "\n", "\n", "", "", "if", "flag", "==", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "main_persons", ".", "append", "(", "pers", ")", "# \u82e5\u548c\u4e4b\u524d\u5df2\u7ecf\u5b58\u5728\u7684\u4eba\u8ddd\u79bb\u4e0d\u662f\u975e\u5e38\u8fd1\uff0c\u5e76\u4e14\u6807\u6ce8\u70b9\u4e0d\u5c11\uff0c\u5219\u6dfb\u52a0\u5f53\u524d\u8fd9\u4e2a\u4eba\uff0c\u8ba4\u4e3a\u662f\u4e00\u4e2amain person\uff0c", "\n", "# \u53ef\u80fd\u662f\u4e3a\u4e86\u907f\u514d\u751f\u6210\u5dee\u5f02\u8f83\u5c0f\u7684\u8bad\u7ec3\u56fe\u7247\uff0c\u56e0\u4e3a\u5982\u679c\u8ddd\u79bb\u5f88\u8fd1\u7684\u8bdd\uff0c\u4f9d\u7136\u4f1a\u5305\u62ec\u76f8\u90bb\u7684\u4eba\u7684", "\n", "# main_persions\u662f\u4e00\u4e2alist, pers\u662f\u4e00\u4e2adic\u5b57\u5178\uff0c\u6392\u5e8f\u5728\u7b2c\u4e00\u7684main person\u5c06\u4eab\u6709\u4f18\u5148\u6743", "\n", "prev_center", ".", "append", "(", "np", ".", "append", "(", "person_center", ",", "max", "(", "img_anns", "[", "p", "]", "[", "\"bbox\"", "]", "[", "2", "]", ",", "img_anns", "[", "p", "]", "[", "\"bbox\"", "]", "[", "3", "]", ")", ")", ")", "\n", "# \u4fdd\u5b58\u4e86person\u3000center \u4ee5\u53ca\u4eba\u4f53\u6846\u957f\u548c\u5bbd\u4e2d\u7684\u6700\u5927\u503c", "\n", "\n", "", "template", "=", "dict", "(", ")", "\n", "template", "[", "\"dataset\"", "]", "=", "dataset_type", "# coco or coco_val", "\n", "\n", "if", "image_index", "<", "val_size", "and", "'val'", "in", "dataset_type", ":", "# notice: 'val' in 'COCOval'   >>>\u3000True", "\n", "        ", "isValidation", "=", "1", "\n", "", "else", ":", "\n", "        ", "isValidation", "=", "0", "\n", "\n", "", "template", "[", "\"isValidation\"", "]", "=", "isValidation", "\n", "template", "[", "\"img_width\"", "]", "=", "w", "\n", "template", "[", "\"img_height\"", "]", "=", "h", "# \u8fd9\u4e2a\u662f\u6574\u4e2a\u56fe\u50cf\u7684w, h", "\n", "template", "[", "\"image_id\"", "]", "=", "img_id", "# \u5c06\u5305\u542b\u8fd9\u4e9b\u4eba\u59ff\u6001\u6570\u636e\u7684image\u7684id\u4e5f\u4fdd\u5b58\u8d77\u6765", "\n", "template", "[", "\"annolist_index\"", "]", "=", "image_index", "\n", "template", "[", "\"img_path\"", "]", "=", "'%012d.jpg'", "%", "img_id", "\n", "\n", "# \u5916\u90e8\u5927\u5faa\u73af\u662f\u6bcf\u4e00\u5f20\u56fe\u7247\uff0c\u5185\u90e8\uff08\u4e5f\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\uff09\u5faa\u73af\u662f\u4e00\u4e2a\u56fe\u7247\u4e2d\u7684\u6240\u6709main_persons, \u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u4e2amain_person\u90fd\u4f1a\u8f6e\u6d41\u53d8\u6210\u6392\u5e8f\u7b2c\u4e00\u7684\u4eba\uff0c", "\n", "# \u5c06\u4eab\u6709\u56fe\u7247\u5c45\u4e2d\u7684\u7279\u6743", "\n", "for", "p", ",", "person", "in", "enumerate", "(", "main_persons", ")", ":", "# p\u662flist\u7684\u7d22\u5f15\u5e8f\u53f7\uff0cperson\u662fdic\u7c7b\u578b\u7684\u4fe1\u606f\u5185\u5bb9", "\n", "\n", "        ", "instance", "=", "template", ".", "copy", "(", ")", "# template is a dictionary type", "\n", "\n", "instance", "[", "\"objpos\"", "]", "=", "[", "main_persons", "[", "p", "]", "[", "\"objpos\"", "]", "]", "\n", "instance", "[", "\"joints\"", "]", "=", "[", "main_persons", "[", "p", "]", "[", "\"joint\"", "]", ".", "tolist", "(", ")", "]", "# Return the array as a (possibly nested) list", "\n", "instance", "[", "\"scale_provided\"", "]", "=", "[", "main_persons", "[", "p", "]", "[", "\"scale_provided\"", "]", "]", "\n", "#  while training they scale main person to be approximately image size(368 pix in our case). But after", "\n", "#  it they do random scaling 0.6-1.1. So this is very logical network never learned libs(and PAFs) could be", "\n", "#  larger than half of image.", "\n", "lenOthers", "=", "0", "\n", "\n", "for", "ot", ",", "operson", "in", "enumerate", "(", "all_persons", ")", ":", "# other person", "\n", "\n", "            ", "if", "person", "is", "operson", ":", "\n", "                ", "assert", "not", "\"people_index\"", "in", "instance", ",", "\"several main persons? couldn't be\"", "\n", "instance", "[", "\"people_index\"", "]", "=", "ot", "\n", "continue", "\n", "\n", "", "if", "operson", "[", "\"num_keypoints\"", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "instance", "[", "\"joints\"", "]", ".", "append", "(", "all_persons", "[", "ot", "]", "[", "\"joint\"", "]", ".", "tolist", "(", ")", ")", "\n", "instance", "[", "\"scale_provided\"", "]", ".", "append", "(", "all_persons", "[", "ot", "]", "[", "\"scale_provided\"", "]", ")", "\n", "instance", "[", "\"objpos\"", "]", ".", "append", "(", "all_persons", "[", "ot", "]", "[", "\"objpos\"", "]", ")", "\n", "\n", "lenOthers", "+=", "1", "\n", "\n", "", "assert", "\"people_index\"", "in", "instance", ",", "\"No main person index\"", "\n", "instance", "[", "\"numOtherPeople\"", "]", "=", "lenOthers", "\n", "yield", "instance", "# \u5e26\u6709yield\u5173\u952e\u5b57\uff0c\u662fgenerator", "\n", "#  \u9664\u4e86crowd\u548c\u5173\u952e\u70b9\u5f88\u5c11\u7684\u4eba\u4ee5\u5916\uff0c\u65e2\u6253\u5305\u4e86main person\uff0c\u4e5f\u4fdd\u5b58\u4e86\u5176\u4ed6\u975emain person\uff0c\u5bf9\u4e8e\u4e00\u4e2ainstance\uff0c\u6bcf\u6b21\u53ea\u6709\u4e00\u4e2a\u4f18\u5148\u6743main person", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.writeImage": [[260, 302], ["grp.create_dataset", "json.dumps", "print", "len", "len", "len", "len", "len", "len", "numpy.concatenate", "img_grp.create_dataset", "img_grp.create_dataset", "mask_grp.create_dataset", "json.dumps"], "function", ["None"], ["", "", "def", "writeImage", "(", "grp", ",", "img_grp", ",", "data", ",", "img", ",", "mask_miss", ",", "count", ",", "image_id", ",", "mask_grp", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Write hdf5 files\n    :param grp: annotation hdf5 group\n    :param img_grp: image hdf5 group\n    :param data: annotation handled\n    :param img: image returned by mask_mask()\n    :param mask_miss: mask returned by mask_mask()\n    :param count:\n    :param image_id: image index\n    :param mask_grp: mask hdf5 group\n    :return: nothing\n    \"\"\"", "\n", "serializable_meta", "=", "data", "\n", "serializable_meta", "[", "'count'", "]", "=", "count", "\n", "\n", "nop", "=", "data", "[", "'numOtherPeople'", "]", "\n", "\n", "assert", "len", "(", "serializable_meta", "[", "'joints'", "]", ")", "==", "1", "+", "nop", ",", "[", "len", "(", "serializable_meta", "[", "'joints'", "]", ")", ",", "1", "+", "nop", "]", "\n", "assert", "len", "(", "serializable_meta", "[", "'scale_provided'", "]", ")", "==", "1", "+", "nop", ",", "[", "len", "(", "serializable_meta", "[", "'scale_provided'", "]", ")", ",", "1", "+", "nop", "]", "\n", "assert", "len", "(", "serializable_meta", "[", "'objpos'", "]", ")", "==", "1", "+", "nop", ",", "[", "len", "(", "serializable_meta", "[", "'objpos'", "]", ")", ",", "1", "+", "nop", "]", "\n", "\n", "img_key", "=", "\"%012d\"", "%", "image_id", "\n", "if", "not", "img_key", "in", "img_grp", ":", "\n", "\n", "        ", "if", "mask_grp", "is", "None", ":", "# \u4e3a\u4e86\u517c\u5bb9MPII\u6ca1\u6709mask\u7684\u60c5\u5f62", "\n", "            ", "img_and_mask", "=", "np", ".", "concatenate", "(", "(", "img", ",", "mask_miss", "[", "...", ",", "None", "]", ")", ",", "axis", "=", "2", ")", "\n", "# create_dataset \u8fd4\u56de\u521b\u5efa\u7684hdf5\u5bf9\u8c61(\u6b64\u5904\u4e3aimg_ds)\uff0c\u5e76\u4e14\u6b64\u5bf9\u8c61\u88ab\u6dfb\u52a0\u5230img_key(\u82e5dataset name\u4e0d\u4e3aNone)\u4e2d", "\n", "img_ds", "=", "img_grp", ".", "create_dataset", "(", "img_key", ",", "data", "=", "img_and_mask", ",", "chunks", "=", "None", ")", "\n", "", "else", ":", "\n", "# _, img_bin = cv2.imencode(\".jpg\", img)  # encode compress, we do not need it actually, delete cv2.imencode", "\n", "# _, img_mask = cv2.imencode(\".png\", mask_miss) # data= img_bin, data = img_mask", "\n", "            ", "img_ds1", "=", "img_grp", ".", "create_dataset", "(", "img_key", ",", "data", "=", "img", ",", "chunks", "=", "None", ")", "\n", "img_ds2", "=", "mask_grp", ".", "create_dataset", "(", "img_key", ",", "data", "=", "mask_miss", ",", "chunks", "=", "None", ")", "\n", "\n", "", "", "key", "=", "'%07d'", "%", "count", "\n", "required", "=", "{", "'image'", ":", "img_key", ",", "'joints'", ":", "serializable_meta", "[", "'joints'", "]", ",", "'objpos'", ":", "serializable_meta", "[", "'objpos'", "]", ",", "\n", "'scale_provided'", ":", "serializable_meta", "[", "'scale_provided'", "]", "}", "\n", "ds", "=", "grp", ".", "create_dataset", "(", "key", ",", "data", "=", "json", ".", "dumps", "(", "required", ")", ",", "chunks", "=", "None", ")", "\n", "ds", ".", "attrs", "[", "'meta'", "]", "=", "json", ".", "dumps", "(", "serializable_meta", ")", "\n", "\n", "print", "(", "'Writing sample %d'", "%", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.process": [[304, 352], ["h5py.File", "h5py.File.create_group", "h5py.File.create_group", "h5py.File.create_group", "h5py.File", "h5py.File.create_group", "h5py.File.create_group", "h5py.File.create_group", "enumerate", "h5py.File.close", "h5py.File.close", "pycocotools.coco.COCO", "list", "enumerate", "pycocotools.coco.COCO.imgs.keys", "pycocotools.coco.COCO.getAnnIds", "pycocotools.coco.COCO.loadAnns", "coco_masks_hdf5.process_image", "coco_masks_hdf5.make_mask", "coco_masks_hdf5.writeImage", "coco_masks_hdf5.writeImage"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.process_image", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.make_mask", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.writeImage", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.data.coco_masks_hdf5.writeImage"], ["", "def", "process", "(", ")", ":", "\n", "    ", "tr_h5", "=", "h5py", ".", "File", "(", "tr_hdf5_path", ",", "'w'", ")", "\n", "tr_grp", "=", "tr_h5", ".", "create_group", "(", "\"dataset\"", ")", "\n", "tr_write_count", "=", "0", "\n", "tr_grp_img", "=", "tr_h5", ".", "create_group", "(", "\"images\"", ")", "\n", "tr_grp_mask", "=", "tr_h5", ".", "create_group", "(", "\"masks\"", ")", "# in fact, is mask_concat rather than mask_miss  NOTICE !!!", "\n", "\n", "val_h5", "=", "h5py", ".", "File", "(", "val_hdf5_path", ",", "'w'", ")", "\n", "val_grp", "=", "val_h5", ".", "create_group", "(", "\"dataset\"", ")", "\n", "val_write_count", "=", "0", "\n", "val_grp_img", "=", "val_h5", ".", "create_group", "(", "\"images\"", ")", "\n", "val_grp_mask", "=", "val_h5", ".", "create_group", "(", "\"masks\"", ")", "\n", "\n", "for", "_", ",", "ds", "in", "enumerate", "(", "datasets", ")", ":", "\n", "# datasets = [(val_anno_path, val_img_dir, \"COCO_val\"),(tr_anno_path, tr_img_dir, \"COCO\")]", "\n", "        ", "anno_path", "=", "ds", "[", "0", "]", "\n", "img_dir", "=", "ds", "[", "1", "]", "\n", "dataset_type", "=", "ds", "[", "2", "]", "\n", "\n", "coco", "=", "COCO", "(", "anno_path", ")", "\n", "ids", "=", "list", "(", "coco", ".", "imgs", ".", "keys", "(", ")", ")", "\n", "\n", "for", "image_index", ",", "img_id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "img_anns", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "image_rec", "=", "coco", ".", "imgs", "[", "img_id", "]", "\n", "\n", "img", "=", "None", "\n", "mask_miss", "=", "None", "\n", "cached_img_id", "=", "None", "\n", "\n", "for", "data", "in", "process_image", "(", "image_rec", ",", "img_id", ",", "image_index", ",", "img_anns", ",", "dataset_type", ")", ":", "\n", "# \u7531process_image\u4e2d\u7684val_size\u63a7\u5236\u9a8c\u8bc1\u96c6\u7684\u5927\u5c0f", "\n", "\n", "                ", "if", "cached_img_id", "!=", "data", "[", "'image_id'", "]", ":", "\n", "                    ", "assert", "img_id", "==", "data", "[", "'image_id'", "]", "\n", "cached_img_id", "=", "data", "[", "'image_id'", "]", "\n", "img", ",", "mask_miss", "=", "make_mask", "(", "img_dir", ",", "cached_img_id", ",", "img_anns", ",", "coco", ")", "\n", "\n", "", "if", "data", "[", "'isValidation'", "]", ":", "# \u6839\u636e isValidation \u6807\u5fd7\u7b26\u786e\u5b9a\u662f\u5426\u4f5c\u4e3aval", "\n", "                    ", "writeImage", "(", "val_grp", ",", "val_grp_img", ",", "data", ",", "img", ",", "mask_miss", ",", "val_write_count", ",", "cached_img_id", ",", "val_grp_mask", ")", "\n", "val_write_count", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "writeImage", "(", "tr_grp", ",", "tr_grp_img", ",", "data", ",", "img", ",", "mask_miss", ",", "tr_write_count", ",", "cached_img_id", ",", "tr_grp_mask", ")", "\n", "tr_write_count", "+=", "1", "\n", "", "", "", "", "tr_h5", ".", "close", "(", ")", "\n", "val_h5", ".", "close", "(", ")", "\n", "return", "tr_write_count", ",", "val_write_count", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.__init__": [[21, 49], ["math.ceil", "math.sqrt", "numpy.arange", "numpy.arange", "math.log"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "sigma", "=", "config", ".", "transform_params", ".", "sigma", "\n", "self", ".", "paf_sigma", "=", "config", ".", "transform_params", ".", "paf_sigma", "\n", "self", ".", "double_sigma2", "=", "2", "*", "self", ".", "sigma", "*", "self", ".", "sigma", "\n", "# set responses lower than gaussian_thre to 0", "\n", "self", ".", "keypoint_gaussian_thre", "=", "config", ".", "transform_params", ".", "keypoint_gaussian_thre", "\n", "self", ".", "limb_gaussian_thre", "=", "config", ".", "transform_params", ".", "limb_gaussian_thre", "\n", "self", ".", "gaussian_size", "=", "ceil", "(", "(", "sqrt", "(", "-", "self", ".", "double_sigma2", "*", "log", "(", "self", ".", "keypoint_gaussian_thre", ")", ")", ")", "/", "config", ".", "stride", ")", "*", "2", "\n", "self", ".", "offset_size", "=", "self", ".", "gaussian_size", "//", "2", "+", "1", "# + 1  # offset vector range", "\n", "self", ".", "thre", "=", "config", ".", "transform_params", ".", "paf_thre", "\n", "\n", "# cached common parameters which same for all iterations and all pictures", "\n", "stride", "=", "self", ".", "config", ".", "stride", "\n", "width", "=", "self", ".", "config", ".", "width", "//", "stride", "\n", "height", "=", "self", ".", "config", ".", "height", "//", "stride", "\n", "\n", "# x, y coordinates of centers of bigger grid, stride / 2 -0.5\u662f\u4e3a\u4e86\u5728\u8ba1\u7b97\u54cd\u5e94\u56fe\u65f6\uff0c\u4f7f\u7528grid\u7684\u4e2d\u5fc3", "\n", "self", ".", "grid_x", "=", "np", ".", "arange", "(", "width", ")", "*", "stride", "+", "stride", "/", "2", "-", "0.5", "# x -> width", "\n", "self", ".", "grid_y", "=", "np", ".", "arange", "(", "height", ")", "*", "stride", "+", "stride", "/", "2", "-", "0.5", "# y -> height", "\n", "\n", "# x ,y indexes (type: int) of heatmap feature maps", "\n", "self", ".", "Y", ",", "self", ".", "X", "=", "np", ".", "mgrid", "[", "0", ":", "self", ".", "config", ".", "height", ":", "stride", ",", "0", ":", "self", ".", "config", ".", "width", ":", "stride", "]", "\n", "# \u5bf9<numpy.lib.index_tricks.MGridClass object> slice\u64cd\u4f5c\uff0c\u6bd4\u5982L[:10:2]\u524d10\u4e2a\u6570\uff0c\u6bcf\u9694\u4e24\u4e2a\u53d6\u4e00\u4e2a", "\n", "# # basically we should use center of grid, but in this place classic implementation uses left-top point.", "\n", "self", ".", "X", "=", "self", ".", "X", "+", "stride", "/", "2", "-", "0.5", "\n", "self", ".", "Y", "=", "self", ".", "Y", "+", "stride", "/", "2", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.create_heatmaps": [[50, 98], ["numpy.zeros", "py_data_heatmapper.Heatmapper.put_joints", "py_data_heatmapper.Heatmapper.put_limbs", "numpy.ones", "cv2.erode", "slice", "numpy.amax", "numpy.clip", "numpy.clip.transpose"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_joints", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_limbs"], ["", "def", "create_heatmaps", "(", "self", ",", "joints", ",", "mask_all", ")", ":", "# \u56fe\u50cf\u6839\u636e\u6bcf\u4e2amain person\u90fd\u88ab\u5904\u7406\u6210\u4e86\u56fa\u5b9a\u7684\u5927\u5c0f\u5c3a\u5bf8\uff0c\u56e0\u6b64heatmap\u4e5f\u662f\u56fa\u5b9a\u5927\u5c0f\u4e86", "\n", "        ", "\"\"\"\n        Create keypoint and body part heatmaps\n        :param joints: input keypoint coordinates, np.float32 dtype is a very little faster\n        :param mask_miss: mask areas without keypoint annotation\n        :param mask_all: all person (including crowd) area mask (denoted as 1)\n        :return: Masked groundtruth heatmaps!\n        \"\"\"", "\n", "# print(joints.shape)  # \u4f8b\u5982(3, 18, 3)\uff0c\u628a\u6bcf\u4e2amain person\u4f5c\u4e3a\u56fe\u7247\u7684\u4e2d\u5fc3\uff0c\u4f46\u662f\u4f9d\u7136\u53ef\u80fd\u4f1a\u5305\u62ec\u5176\u4ed6\u4e0d\u540c\u7684\u4eba\u5728\u8fd9\u4e2a\u88c1\u526a\u540e\u7684\u56fe\u50cf\u4e2d", "\n", "heatmaps", "=", "np", ".", "zeros", "(", "self", ".", "config", ".", "parts_shape", ",", "dtype", "=", "np", ".", "float32", ")", "# config.parts_shape: 46, 46, 57", "\n", "# \u6b64\u5904\u7684heat map\u4e00\u5171\u670957\u4e2achannel\uff0c\u5305\u542b\u4e86heat map\u4ee5\u53capaf\u4ee5\u53ca\u80cc\u666fchannel\u3002", "\n", "# \u5e76\u4e14\u5bf9heat map\u521d\u59cb\u5316\u4e3a0\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f7f\u5f97\u6ca1\u6709\u6807\u6ce8\u7684\u533a\u57df\u662f\u6ca1\u6709\u503c\u7684\uff01", "\n", "self", ".", "put_joints", "(", "heatmaps", ",", "joints", ")", "\n", "# sl = slice(self.config.heat_start, self.config.heat_start + self.config.heat_layers)", "\n", "# python\u5207\u7247\u51fd\u6570\u3000class slice(start, stop[, step])", "\n", "# Generate foreground of keypoint heat map \u5220\u9664\u4e86\u4e00\u4e9b\u4ee3\u7801\uff0c\u539f\u59cb\u8bf7\u53c2\u8003\u4e4b\u524d\u5bf9body part\u9879\u76ee", "\n", "# heatmaps[:, :, self.config.bkg_start] = 1. - np.amax(heatmaps[:, :, sl], axis=2)", "\n", "\n", "# # \u67d0\u4e2a\u4f4d\u7f6e\u7684\u80cc\u666fheatmap\u503c\u5b9a\u4e49\u4e3a\u8fd9\u4e2a\u5750\u6807\u4f4d\u7f6e\u5904\u3000\u6700\u5927\u7684\u67d0\u4e2a\u7c7b\u578b\u8282\u70b9\u9ad8\u65af\u54cd\u5e94\u7684\u8865 1. - np.amax(heatmaps[:, :, sl], axis=2)", "\n", "# \u5982\u679c\u52a0\u5165\u7684\u662f\u524d\u666f\u800c\u4e0d\u662f\u80cc\u666f\uff0c\u5219\u54cd\u5e94\u662f\u3000np.amax(heatmaps[:, :, sl], axis=2)", "\n", "\n", "self", ".", "put_limbs", "(", "heatmaps", ",", "joints", ")", "\n", "\n", "# add foreground (mask_all) channel, i.e., the person segmentation mask", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "mask_all", "=", "cv2", ".", "erode", "(", "mask_all", ",", "kernel", ")", "# crop the boundary of mask_all", "\n", "heatmaps", "[", ":", ",", ":", ",", "self", ".", "config", ".", "bkg_start", "]", "=", "mask_all", "\n", "\n", "# add reverse keypoint gaussian heat map on the second background channel", "\n", "sl", "=", "slice", "(", "self", ".", "config", ".", "heat_start", ",", "self", ".", "config", ".", "heat_start", "+", "self", ".", "config", ".", "heat_layers", ")", "# consider all real joints", "\n", "heatmaps", "[", ":", ",", ":", ",", "self", ".", "config", ".", "bkg_start", "+", "1", "]", "=", "np", ".", "amax", "(", "heatmaps", "[", ":", ",", ":", ",", "sl", "]", ",", "axis", "=", "2", ")", "# 1 -  #\u539f\u6765\u662f\u53d6\u53cd\u7684", "\n", "\n", "# \u91cd\u8981\uff01\u4e0d\u8981\u5fd8\u4e86\u5c06\u751f\u6210\u7684groundtruth heatmap\u4e58\u4ee5mask\uff0c\u4ee5\u6b64\u63a9\u76d6\u6389\u6ca1\u6709\u6807\u6ce8\u7684crowd\u4ee5\u53ca\u53ea\u6709\u5f88\u5c11keypoint\u7684\u4eba", "\n", "# \u5e76\u4e14\uff0c\u80cc\u666f\u7684mask_all\u6ca1\u6709\u4e58\u4ee5mask_miss\uff0c\u8bad\u7ec3\u65f6\u53ea\u662f\u5bf9\u6ca1\u6709\u5173\u952e\u70b9\u6807\u6ce8\u7684heatmap\u533a\u57dfmask\u6389\u4e0d\u505a\u76d1\u7763\uff0c\u800c\u4e0d\u9700\u8981\u5bf9\u8f93\u5165\u56fe\u7247mask!", "\n", "# heatmaps *= mask_miss[:, :, np.newaxis]  # fixme: \u653e\u5728loss\u8ba1\u7b97\u4e2d\uff0c\u5bf9mask_all\u4e0d\u9700\u8981\u4e58mask_miss\uff0c\u4e0d\u7f3a\u6807\u6ce8", "\n", "\n", "# see: https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation/issues/124", "\n", "# Mask never touch pictures.  Mask\u4e0d\u4f1a\u53e0\u52a0\u5230image\u6570\u636e\u4e0a", "\n", "# Mask has exactly same dimensions as ground truth and network output. ie 46 x 46 x num_layers.", "\n", "# ------------------------------------------------------------- #", "\n", "# Mask applied to:", "\n", "# * ground truth heatmap and pafs (multiplied by mask)", "\n", "# * network output (multiplied by mask)", "\n", "# ------------------------------------------------------------- #", "\n", "# If in same point of answer mask is zero this means \"ignore answers in this point while training network\"", "\n", "# because loss will be zero in this point.", "\n", "heatmaps", "=", "np", ".", "clip", "(", "heatmaps", ",", "0.", ",", "1.", ")", "# \u9632\u6b62\u6570\u636e\u5f02\u5e38", "\n", "return", "heatmaps", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "# pytorch need N*C*H*W format", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_gaussian_maps": [[99, 150], ["range", "int", "int", "int", "int", "slice", "slice", "numpy.exp", "numpy.exp", "numpy.outer", "numpy.maximum", "round", "round", "numpy.array().astype", "numpy.array().astype", "round", "round", "numpy.array", "numpy.array", "py_data_heatmapper.Heatmapper.grid_x[].astype", "py_data_heatmapper.Heatmapper.grid_y[].astype"], "methods", ["None"], ["", "def", "put_gaussian_maps", "(", "self", ",", "heatmaps", ",", "layer", ",", "joints", ")", ":", "\n", "# update: \u53ea\u8ba1\u7b97\u4e00\u5b9a\u533a\u57df\u5185\u800c\u4e0d\u662f\u5168\u56fe\u50cf\u7684\u503c\u6765\u52a0\u901fGT\u7684\u751f\u6210\uff0c\u53c2\u8003associate embedding", "\n", "#  change the gaussian map to laplace map to get a shapper peak of keypoint ?? the result is not good", "\n", "# actually exp(a+b) = exp(a)*exp(b), lets use it calculating 2d exponent, it could just be calculated by", "\n", "\n", "        ", "for", "i", "in", "range", "(", "joints", ".", "shape", "[", "0", "]", ")", ":", "# \u5916\u5c42\u5faa\u73af\u662f\u5bf9\u6bcf\u4e00\u4e2ajoint\u90fd\u5728\u5bf9\u5e94\u7c7b\u578bchannel\u7684feature map\u4e0a\u4ea7\u751f\u4e00\u4e2a\u9ad8\u65af\u5206\u5e03", "\n", "\n", "# --------------------------------------------------------------------------------------------------#", "\n", "# \u8fd9\u91cc\u662f\u4e2a\u6280\u5de7\uff0cgrid_x\u5176\u5b9e\u53d6\u503c\u8303\u56f4\u662f0~368\uff0c\u8d77\u70b9\u662f3.5\uff0c\u7ec8\u70b9\u503c\u662f363.5\uff0c\u95f4\u9694\u4e3a8\uff0c\u8fd9\u6837\u5c31\u662f\u5728\u539f\u59cb368\u4e2a\u4f4d\u7f6e\u4e0a\u8ba1\u7b97\u9ad8\u65af\u503c\uff0c", "\n", "# \u91c7\u6837\u4e8646\u4e2a\u70b9\uff0c\u4ece\u800c\u6700\u5927\u7a0b\u5ea6\u4fdd\u7559\u4e86\u539f\u59cb\u5206\u8fa8\u7387\u5c3a\u5bf8\u4e0a\u7684\u54cd\u5e94\u503c\uff0c\u907f\u514d\u91cf\u5316\u8bef\u5dee\uff01\u800c\u4e0d\u662f\u751f\u6210\u539f\u59cb\u5206\u8fa8\u7387\u5927\u5c0f\u7684ground truth\u7136\u540e\u7f29\u5c0f8\u500d\u3000\u3000", "\n", "\n", "# \u5982\u679c\u4f7f\u7528\u9ad8\u65af\u5206\u5e03\uff0c\u9650\u5236guassin response\u751f\u6210\u7684\u533a\u57df\uff0c\u4ee5\u6b64\u52a0\u5feb\u8fd0\u7b97", "\n", "            ", "x_min", "=", "int", "(", "round", "(", "joints", "[", "i", ",", "0", "]", "/", "self", ".", "config", ".", "stride", ")", "-", "self", ".", "gaussian_size", "//", "2", ")", "\n", "x_max", "=", "int", "(", "round", "(", "joints", "[", "i", ",", "0", "]", "/", "self", ".", "config", ".", "stride", ")", "+", "self", ".", "gaussian_size", "//", "2", "+", "1", ")", "\n", "y_min", "=", "int", "(", "round", "(", "joints", "[", "i", ",", "1", "]", "/", "self", ".", "config", ".", "stride", ")", "-", "self", ".", "gaussian_size", "//", "2", ")", "\n", "y_max", "=", "int", "(", "round", "(", "joints", "[", "i", ",", "1", "]", "/", "self", ".", "config", ".", "stride", ")", "+", "self", ".", "gaussian_size", "//", "2", "+", "1", ")", "\n", "\n", "if", "y_max", "<", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "x_max", "<", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "x_min", "<", "0", ":", "\n", "                ", "x_min", "=", "0", "\n", "\n", "", "if", "y_min", "<", "0", ":", "\n", "                ", "y_min", "=", "0", "\n", "\n", "# this slice is not only speed up but crops the keypoints off the transformed picture really", "\n", "# slice can also crop the extended index of a numpy array and return empty array []", "\n", "", "slice_x", "=", "slice", "(", "x_min", ",", "x_max", ")", "\n", "slice_y", "=", "slice", "(", "y_min", ",", "y_max", ")", "\n", "\n", "exp_x", "=", "np", ".", "exp", "(", "-", "(", "self", ".", "grid_x", "[", "slice_x", "]", ".", "astype", "(", "np", ".", "float32", ")", "-", "joints", "[", "i", ",", "0", "]", ")", "**", "2", "/", "\n", "np", ".", "array", "(", "[", "self", ".", "double_sigma2", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "exp_y", "=", "np", ".", "exp", "(", "-", "(", "self", ".", "grid_y", "[", "slice_y", "]", ".", "astype", "(", "np", ".", "float32", ")", "-", "joints", "[", "i", ",", "1", "]", ")", "**", "2", "/", "\n", "np", ".", "array", "(", "[", "self", ".", "double_sigma2", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "exp", "=", "np", ".", "outer", "(", "exp_y", ",", "exp_x", ")", "# np.outer\u7684\u8ba1\u7b97\uff0c\u4e24\u4e2a\u957f\u5ea6\u4e3aM,N\u7684\u5411\u91cf\u7684\u5916\u79ef\u7ed3\u679c\u662fM*N\u7684\u77e9\u9635", "\n", "# --------------------------------------------------------------------------------------------------#", "\n", "\n", "# # heatmap\u3000\u5982\u679c\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u5206\u5e03\uff1adis = exp-(math.sqrt((xx - x) * (xx - x) + (yy - y) * (yy - y)) / 2.0 / sigma)", "\n", "# dist = np.sqrt((self.X - joints[i, 0])**2 + (self.Y - joints[i, 1])**2) / 2.0 / self.sigma", "\n", "# np.where(dist > 4.6052, 1e8, dist) # \u8ddd\u79bb\u4e2d\u5fc3\u592a\u8fdc\u7684\u4e0d\u8d4b\u503c", "\n", "# exp = np.exp(-dist)", "\n", "\n", "# note this is correct way of combination - min(sum(...),1.0) as was in C++ code is incorrect", "\n", "# https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation/issues/118", "\n", "heatmaps", "[", "slice_y", ",", "slice_x", ",", "self", ".", "config", ".", "heat_start", "+", "layer", "]", "=", "np", ".", "maximum", "(", "heatmaps", "[", "slice_y", ",", "slice_x", ",", "self", ".", "config", ".", "heat_start", "+", "layer", "]", ",", "exp", ")", "\n", "# \u8fd9\u4e00\u53e5\u4ee3\u7801\u662f\u89e3\u51b3\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u6709\u4e0d\u540c\u4eba\u7684\u5173\u8282\u70b9\u7684\u9ad8\u65af\u54cd\u5e94\u56fe\u7684\u751f\u6210\u201c\u8986\u76d6\u201d\u7684\u95ee\u9898\uff0c\u4e0d\u53d6\u8fd9\u4e24\u4e2a\u70b9\u7684\u9ad8\u65af\u5206\u5e03\u7684\u5e73\u5747\uff0c\u800c\u662f\u53d6\u6700\u5927\u503c", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_joints": [[157, 162], ["range", "py_data_heatmapper.Heatmapper.put_gaussian_maps"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_gaussian_maps"], ["", "", "def", "put_joints", "(", "self", ",", "heatmaps", ",", "joints", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "config", ".", "num_parts", ")", ":", "# len(config.num_parts) = 18, \u4e0d\u5305\u62ec\u80cc\u666fkeypoint", "\n", "            ", "visible", "=", "joints", "[", ":", ",", "i", ",", "2", "]", "<", "2", "# only annotated (visible) keypoints are considered !", "\n", "self", ".", "put_gaussian_maps", "(", "heatmaps", ",", "i", ",", "joints", "[", "visible", ",", "i", ",", "0", ":", "2", "]", ")", "# \u9010\u4e2achannel\u5730\u8fdb\u884cground truth\u7684\u751f\u6210", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_limb_gaussian_maps": [[163, 228], ["numpy.zeros", "range", "int", "int", "int", "int", "slice", "slice", "py_data_heatmapper.distances", "print", "round", "round", "round", "round", "math.isnan", "math.isnan"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.distances"], ["", "", "def", "put_limb_gaussian_maps", "(", "self", ",", "heatmaps", ",", "layer", ",", "joint_from", ",", "joint_to", ")", ":", "\n", "        ", "\"\"\"\n        \u751f\u6210\u4e00\u4e2achannel\u4e0a\u7684PAF groundtruth\n        \"\"\"", "\n", "\n", "count", "=", "np", ".", "zeros", "(", "heatmaps", ".", "shape", "[", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# count\u7528\u6765\u8bb0\u5f55\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u70b9\u4e0a\u6709\u591a\u5c11\u975e\u96f6\u7684paf\uff0c\u4ee5\u4fbf\u540e\u9762\u505a\u5e73\u5747", "\n", "for", "i", "in", "range", "(", "joint_from", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "(", "x1", ",", "y1", ")", "=", "joint_from", "[", "i", "]", "\n", "(", "x2", ",", "y2", ")", "=", "joint_to", "[", "i", "]", "\n", "\n", "dx", "=", "x2", "-", "x1", "\n", "dy", "=", "y2", "-", "y1", "\n", "dnorm", "=", "dx", "*", "dx", "+", "dy", "*", "dy", "\n", "\n", "if", "dnorm", "==", "0", ":", "# we get nan here sometimes, it's kills NN", "\n", "# we get nan here sometimes, it's kills NN", "\n", "# handle it better. probably we should add zero paf, centered paf,", "\n", "# or skip this completely. add a special paf?", "\n", "# \u6211\u8ba4\u4e3a\u53ef\u4ee5\u4e0d\u7528\u53bb\u5904\u7406\uff0c\u5728\u540e\u5904\u7406\u65f6\uff0c\u628a\u6ca1\u6709\u5f62\u6210limb\u7684\u70b9\u5206\u914d\u7ed9\u8ddd\u79bb\u6700\u8fd1\u7684\u90a3\u4e2a\u4eba\u5373\u53ef", "\n", "                ", "print", "(", "\"Parts are too close to each other. Length is zero. Skipping\"", ")", "\n", "continue", "\n", "\n", "", "dx", "=", "dx", "/", "dnorm", "\n", "dy", "=", "dy", "/", "dnorm", "\n", "\n", "assert", "not", "isnan", "(", "dx", ")", "and", "not", "isnan", "(", "dy", ")", ",", "\"dnorm is zero, wtf\"", "\n", "\n", "min_sx", ",", "max_sx", "=", "(", "x1", ",", "x2", ")", "if", "x1", "<", "x2", "else", "(", "x2", ",", "x1", ")", "\n", "min_sy", ",", "max_sy", "=", "(", "y1", ",", "y2", ")", "if", "y1", "<", "y2", "else", "(", "y2", ",", "y1", ")", "\n", "\n", "# include the two end-points of the limbs", "\n", "min_sx", "=", "int", "(", "round", "(", "(", "min_sx", "-", "self", ".", "thre", ")", "/", "self", ".", "config", ".", "stride", ")", ")", "\n", "min_sy", "=", "int", "(", "round", "(", "(", "min_sy", "-", "self", ".", "thre", ")", "/", "self", ".", "config", ".", "stride", ")", ")", "\n", "max_sx", "=", "int", "(", "round", "(", "(", "max_sx", "+", "self", ".", "thre", ")", "/", "self", ".", "config", ".", "stride", ")", ")", "\n", "max_sy", "=", "int", "(", "round", "(", "(", "max_sy", "+", "self", ".", "thre", ")", "/", "self", ".", "config", ".", "stride", ")", ")", "\n", "\n", "# check whether PAF is off screen. do not really need to do it with max>grid size", "\n", "if", "max_sy", "<", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "max_sx", "<", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "min_sx", "<", "0", ":", "\n", "                ", "min_sx", "=", "0", "\n", "\n", "", "if", "min_sy", "<", "0", ":", "\n", "                ", "min_sy", "=", "0", "\n", "\n", "# this slice mask is not only speed up but crops paf really. This copied from original code", "\n", "# max_sx + 1, array slice dose not include the last element.", "\n", "# could be wrong if the keypint locates at the edge of the image but this seems never to happen.", "\n", "", "slice_x", "=", "slice", "(", "min_sx", ",", "max_sx", "+", "1", ")", "\n", "slice_y", "=", "slice", "(", "min_sy", ",", "max_sy", "+", "1", ")", "\n", "# tt = self.X[slice_y,slice_x]", "\n", "dist", "=", "distances", "(", "self", ".", "X", "[", "slice_y", ",", "slice_x", "]", ",", "self", ".", "Y", "[", "slice_y", ",", "slice_x", "]", ",", "self", ".", "paf_sigma", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "\n", "self", ".", "limb_gaussian_thre", ")", "\n", "# \u8fd9\u91cc\u6c42\u7684\u8ddd\u79bb\u662f\u5728\u539f\u59cb\u5c3a\u5bf8368*368\u7684\u5c3a\u5bf8\uff0c\u800c\u4e0d\u662f\u7f29\u5c0f8\u500d\u540e\u572846*46\u4e0a\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u653e\u523046*46\u5207\u7247slice\u7684\u4f4d\u7f6e\u4e0a\u53bb", "\n", "# print(dist.shape)", "\n", "heatmaps", "[", "slice_y", ",", "slice_x", ",", "layer", "]", "[", "dist", ">", "0", "]", "+=", "dist", "[", "dist", ">", "0", "]", "# = dist * dx\u3000\u82e5\u4e0d\u505a\u5e73\u5747\uff0c\u5219\u4e0d\u8fdb\u884c\u7d2f\u52a0", "\n", "\n", "count", "[", "slice_y", ",", "slice_x", "]", "[", "dist", ">", "0", "]", "+=", "1", "\n", "\n", "#  averaging by pafs mentioned in the paper but never worked in C++ augmentation code \u6211\u91c7\u7528\u4e86\u5e73\u5747", "\n", "", "heatmaps", "[", ":", ",", ":", ",", "layer", "]", "[", "count", ">", "0", "]", "/=", "count", "[", "count", ">", "0", "]", "# \u8fd9\u4e9b\u90fd\u662f\u77e2\u91cf\u5316\uff08\u77e9\u9635\uff09\u64cd\u4f5c", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_limbs": [[229, 241], ["enumerate", "py_data_heatmapper.Heatmapper.put_limb_gaussian_maps"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_limb_gaussian_maps"], ["", "def", "put_limbs", "(", "self", ",", "heatmaps", ",", "joints", ")", ":", "\n", "        ", "\"\"\"\n         # \u5faa\u73af\u8c03\u7528\u9010\u4e2achannel\u751f\u6210ground truth\u7684\u51fd\u6570\uff0c\u6700\u5916\u5c42\u5faa\u73af\u662f\u5bf9\u5e94\u67d0\u4e2alimb\u7684\u67d0\u4e00\u4e2achannel\n        \"\"\"", "\n", "for", "(", "i", ",", "(", "fr", ",", "to", ")", ")", "in", "enumerate", "(", "self", ".", "config", ".", "limbs_conn", ")", ":", "\n", "            ", "visible_from", "=", "joints", "[", ":", ",", "fr", ",", "2", "]", "<", "2", "# \u5224\u65ad\u8be5\u70b9\u662f\u5426\u88ab\u6807\u6ce8\u4e86", "\n", "visible_to", "=", "joints", "[", ":", ",", "to", ",", "2", "]", "<", "2", "\n", "visible", "=", "visible_from", "&", "visible_to", "# &: \u6309\u4f4d\u53d6and, \u53ea\u6709\u4e24\u4e2a\u8282\u70b9\u90fd\u6807\u6ce8\u4e86\u624d\u80fd\u751f\u6210paf, v=0,1\u65f6\u8868\u793a\u8be5\u70b9\u88ab\u6807\u6ce8\u4e86", "\n", "# In this project:  0 - marked but invisible, 1 - marked and visible, which is different from coco\u3000dataset", "\n", "\n", "layer", "=", "self", ".", "config", ".", "paf_start", "+", "i", "\n", "self", ".", "put_limb_gaussian_maps", "(", "heatmaps", ",", "layer", ",", "joints", "[", "visible", ",", "fr", ",", "0", ":", "2", "]", ",", "joints", "[", "visible", ",", "to", ",", "0", ":", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_offset_vector_maps": [[242, 286], ["range", "int", "int", "int", "int", "slice", "slice", "numpy.repeat", "numpy.repeat", "offset_x.reshape", "offset_y.reshape", "round", "round", "py_data_heatmapper.Heatmapper.grid_x[].astype", "py_data_heatmapper.Heatmapper.grid_y[].astype", "round", "round"], "methods", ["None"], ["", "", "def", "put_offset_vector_maps", "(", "self", ",", "offset_vectors", ",", "mask_offset", ",", "layer", ",", "joints", ")", ":", "\n", "        ", "\"\"\"\n        \u751f\u6210offset heatmap\n        :param offset_vectors:\n        :param mask_offset:\n        :param layer: \u5c06\u5f53\u524doffset\u653e\u7f6e\u5728 2*layer, 2*layer+1 channel\u4e0a\n        :param joints:\n        :return:\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "joints", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x_min", "=", "int", "(", "round", "(", "joints", "[", "i", ",", "0", "]", "/", "self", ".", "config", ".", "stride", ")", "-", "self", ".", "offset_size", "//", "2", ")", "\n", "x_max", "=", "int", "(", "round", "(", "joints", "[", "i", ",", "0", "]", "/", "self", ".", "config", ".", "stride", ")", "+", "self", ".", "offset_size", "//", "2", "+", "1", ")", "\n", "y_min", "=", "int", "(", "round", "(", "joints", "[", "i", ",", "1", "]", "/", "self", ".", "config", ".", "stride", ")", "-", "self", ".", "offset_size", "//", "2", ")", "\n", "y_max", "=", "int", "(", "round", "(", "joints", "[", "i", ",", "1", "]", "/", "self", ".", "config", ".", "stride", ")", "+", "self", ".", "offset_size", "//", "2", "+", "1", ")", "\n", "\n", "if", "y_max", "<", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "x_max", "<", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "x_min", "<", "0", ":", "\n", "                ", "x_min", "=", "0", "\n", "\n", "", "if", "y_min", "<", "0", ":", "\n", "                ", "y_min", "=", "0", "\n", "\n", "# this slice is not only speed up but crops the keypoints off the transformed picture really", "\n", "# slice can also crop the extended index of a numpy array and return empty array []", "\n", "", "slice_x", "=", "slice", "(", "x_min", ",", "x_max", ")", "\n", "slice_y", "=", "slice", "(", "y_min", ",", "y_max", ")", "\n", "\n", "# Try: \u5c06offset\u7528log\u51fd\u6570\u7f16\u7801\u4e0d\u5408\u9002\uff0c\u56e0\u4e3a\u2206x, \u2206y\u6709\u6b63\u6709\u8d1f\u3002\u53ef\u4ee5\u5148\u5c06\u504f\u5dee\u7f16\u7801\u5230-0.5\uff5e0.5\uff0c\u518d\u4f7f\u7528L1 loss", "\n", "# type: np.ndarray # joints[i, 0] -> x", "\n", "offset_x", "=", "(", "self", ".", "grid_x", "[", "slice_x", "]", ".", "astype", "(", "np", ".", "float32", ")", "-", "joints", "[", "i", ",", "0", "]", ")", "/", "(", "self", ".", "offset_size", "*", "self", ".", "config", ".", "stride", ")", "\n", "# type: np.ndarray # joints[i, 1] -> y", "\n", "offset_y", "=", "(", "self", ".", "grid_y", "[", "slice_y", "]", ".", "astype", "(", "np", ".", "float32", ")", "-", "joints", "[", "i", ",", "1", "]", ")", "/", "(", "self", ".", "offset_size", "*", "self", ".", "config", ".", "stride", ")", "\n", "offset_x_mesh", "=", "np", ".", "repeat", "(", "offset_x", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "offset_y", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "offset_y_mesh", "=", "np", ".", "repeat", "(", "offset_y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "offset_x", ".", "shape", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "\n", "offset_vectors", "[", "slice_y", ",", "slice_x", ",", "layer", "*", "2", "]", "+=", "offset_x_mesh", "# add up the offsets in the same location", "\n", "offset_vectors", "[", "slice_y", ",", "slice_x", ",", "layer", "*", "2", "+", "1", "]", "+=", "offset_y_mesh", "\n", "mask_offset", "[", "slice_y", ",", "slice_x", ",", "layer", "*", "2", "]", "+=", "1", "\n", "mask_offset", "[", "slice_y", ",", "slice_x", ",", "layer", "*", "2", "+", "1", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_offset": [[287, 300], ["numpy.zeros", "numpy.zeros", "range", "py_data_heatmapper.Heatmapper.put_offset_vector_maps", "numpy.zeros.transpose", "numpy.zeros.transpose"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.put_offset_vector_maps"], ["", "", "def", "put_offset", "(", "self", ",", "joints", ")", ":", "\n", "        ", "offset_vectors", "=", "np", ".", "zeros", "(", "self", ".", "config", ".", "offset_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask_offset", "=", "np", ".", "zeros", "(", "self", ".", "config", ".", "offset_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "assert", "offset_vectors", ".", "shape", "[", "-", "1", "]", "==", "2", "*", "self", ".", "config", ".", "num_parts", ",", "'offset map depth dose not match keypoint number'", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "config", ".", "num_parts", ")", ":", "# len(config.num_parts) = 18, \u4e0d\u5305\u62ec\u80cc\u666fkeypoint", "\n", "            ", "visible", "=", "joints", "[", ":", ",", "i", ",", "2", "]", "<", "2", "# only annotated (visible) keypoints are considered !", "\n", "self", ".", "put_offset_vector_maps", "(", "offset_vectors", ",", "mask_offset", ",", "0", ",", "joints", "[", "visible", ",", "i", ",", "0", ":", "2", "]", ")", "# \u6240\u6709\u5173\u952e\u70b9\u5171\u4eaboffset channel", "\n", "\n", "", "offset_vectors", "[", "mask_offset", ">", "0", "]", "/=", "mask_offset", "[", "mask_offset", ">", "0", "]", "# average the offsets in the same location", "\n", "mask_offset", "[", "mask_offset", ">", "0", "]", "=", "1", "# reset the offset mask area", "\n", "\n", "return", "offset_vectors", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ",", "mask_offset", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "# pytorch need N*C*H*W format", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.gaussian": [[302, 307], ["numpy.exp"], "function", ["None"], ["", "", "def", "gaussian", "(", "sigma", ",", "x", ",", "u", ")", ":", "\n", "\n", "    ", "double_sigma2", "=", "2", "*", "sigma", "**", "2", "\n", "y", "=", "np", ".", "exp", "(", "-", "(", "x", "-", "u", ")", "**", "2", "/", "double_sigma2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.distances": [[309, 341], ["math.sqrt", "numpy.abs", "py_data_heatmapper.gaussian"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.gaussian"], ["", "def", "distances", "(", "X", ",", "Y", ",", "sigma", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "thresh", "=", "0.01", ",", "return_dist", "=", "False", ")", ":", "# TODO: change the paf area to ellipse", "\n", "    ", "\"\"\"\n    \u8fd9\u91cc\u7684distance\u51fd\u6570\u5b9e\u9645\u4e0a\u8fd4\u56de\u7684\u662fgauss\u5206\u5e03\u7684PAF\n    # \u70b9\u5230\u4e24\u4e2a\u7aef\u70b9\u6240\u786e\u5b9a\u7684\u76f4\u7ebf\u7684\u8ddd\u79bb\u3000classic formula is:\n    # # d = [(x2-x1)*(y1-y)-(x1-x)*(y2-y1)] / sqrt((x2-x1)**2 + (y2-y1)**2)\n    \"\"\"", "\n", "# parallel_encoding calculation distance from any number of points of arbitrary shape(X, Y),", "\n", "# to line defined by segment (x1,y1) -> (x2, y2)", "\n", "xD", "=", "(", "x2", "-", "x1", ")", "\n", "yD", "=", "(", "y2", "-", "y1", ")", "\n", "detaX", "=", "x1", "-", "X", "\n", "detaY", "=", "y1", "-", "Y", "\n", "norm2", "=", "sqrt", "(", "xD", "**", "2", "+", "yD", "**", "2", ")", "# \u6ce8\u610fnorm2\u662f\u4e00\u4e2a\u6570\u800c\u4e0d\u662fnumpy\u6570\u7ec4,\u56e0\u4e3axD, yD\u90fd\u662f\u4e00\u4e2a\u6570\u3002\u5355\u4e2a\u6570\u5b57\u8fd0\u7b97math\u6bd4numpy\u5feb", "\n", "dist", "=", "xD", "*", "detaY", "-", "detaX", "*", "yD", "# \u5e38\u6570\u4e0enumpy\u6570\u7ec4(X,Y\u662f\u5750\u6807\u6570\u7ec4,\u591a\u4e2a\u5750\u6807\uff09\u7684\u8fd0\u7b97\uff0cbroadcast", "\n", "dist", "/=", "(", "norm2", "+", "1e-6", ")", "\n", "dist", "=", "np", ".", "abs", "(", "dist", ")", "\n", "if", "return_dist", ":", "\n", "        ", "return", "dist", "\n", "# ratiox = np.abs(detaX / (xD + 1e-8))", "\n", "# ratioy = np.abs(detaY / (yD + 1e-8))", "\n", "# ratio = np.where(ratiox < ratioy, ratiox, ratioy)", "\n", "# ratio = np.where(ratio > 1, 1, ratio)  # \u4e0d\u7528\u3000np.ones_like(ratio)\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u5e76\u4e14\u4f1a\u5feb\u4e00\u70b9\u70b9", "\n", "# ratio = np.where(ratio > 0.5, 1 - ratio, ratio)", "\n", "# oncurve_dist = b * np.sqrt(1 - np.square(ratio * 2))  # oncurve_dist\u8ba1\u7b97\u7684\u662f\u692d\u5706\u8fb9\u754c\u4e0a\u7684\u70b9\u5230\u957f\u8f74\u7684\u5782\u76f4\u8ddd\u79bb", "\n", "\n", "", "guass_dist", "=", "gaussian", "(", "sigma", ",", "dist", ",", "0", ")", "\n", "# TODO: \u4e0b\u4e00\u4e2a\u6362\u6210# =0.01", "\n", "guass_dist", "[", "guass_dist", "<=", "thresh", "]", "=", "0.01", "# thresh  # 0.67\u7684L2\u7528\u7684\u662f0  # 0.68 flocal \u7528\u7684=thresh \u540c\u524d\u9762\u7684\u5173\u952e\u70b9\u54cd\u5e94\uff0c\u592a\u8fdc\u7684\u4e0d\u8981", "\n", "# b = thre", "\n", "# guass_dist[dist >= b] = 0", "\n", "\n", "return", "guass_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.test": [[343, 347], ["py_data_heatmapper.Heatmapper", "py_data_heatmapper.distances", "print"], "function", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.distances"], ["", "def", "test", "(", ")", ":", "\n", "    ", "hm", "=", "Heatmapper", "(", ")", "\n", "d", "=", "distances", "(", "hm", ".", "X", ",", "hm", ".", "Y", ",", "100", ",", "100", ",", "50", ",", "150", ")", "\n", "print", "(", "d", "<", "8.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.AugmentSelection.__init__": [[10, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flip", "=", "False", ",", "tint", "=", "False", ",", "degree", "=", "0.", ",", "crop", "=", "(", "0", ",", "0", ")", ",", "scale", "=", "1.", ")", ":", "\n", "        ", "self", ".", "flip", "=", "flip", "\n", "self", ".", "tint", "=", "tint", "\n", "self", ".", "degree", "=", "degree", "# rotate", "\n", "self", ".", "crop", "=", "crop", "# shift actually", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.AugmentSelection.random": [[17, 31], ["int", "int", "py_data_transformer.AugmentSelection", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "# staticmethod\u652f\u6301\u7c7b\u5bf9\u8c61\u6216\u8005\u5b9e\u4f8b\u5bf9\u65b9\u6cd5\u7684\u8c03\u7528", "\n", "def", "random", "(", "transform_params", ")", ":", "\n", "        ", "flip", "=", "random", ".", "uniform", "(", "0.", ",", "1.", ")", "<", "transform_params", ".", "flip_prob", "\n", "tint", "=", "random", ".", "uniform", "(", "0.", ",", "1.", ")", "<", "transform_params", ".", "tint_prob", "\n", "degree", "=", "random", ".", "uniform", "(", "-", "1.", ",", "1.", ")", "*", "transform_params", ".", "max_rotate_degree", "\n", "\n", "scale", "=", "(", "transform_params", ".", "scale_max", "-", "transform_params", ".", "scale_min", ")", "*", "random", ".", "uniform", "(", "0.", ",", "1.", ")", "+", "transform_params", ".", "scale_min", "if", "random", ".", "uniform", "(", "0.", ",", "1.", ")", "<", "transform_params", ".", "scale_prob", "else", "1.", "\n", "\n", "x_offset", "=", "int", "(", "random", ".", "uniform", "(", "-", "1.", ",", "1.", ")", "*", "transform_params", ".", "center_perterb_max", ")", "\n", "y_offset", "=", "int", "(", "random", ".", "uniform", "(", "-", "1.", ",", "1.", ")", "*", "transform_params", ".", "center_perterb_max", ")", "\n", "\n", "return", "AugmentSelection", "(", "flip", ",", "tint", ",", "degree", ",", "(", "x_offset", ",", "y_offset", ")", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.AugmentSelection.unrandom": [[32, 42], ["py_data_transformer.AugmentSelection"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "unrandom", "(", ")", ":", "\n", "        ", "flip", "=", "False", "\n", "tint", "=", "False", "\n", "degree", "=", "0.", "\n", "scale", "=", "1.", "\n", "x_offset", "=", "0", "\n", "y_offset", "=", "0", "\n", "\n", "return", "AugmentSelection", "(", "flip", ",", "tint", ",", "degree", ",", "(", "x_offset", ",", "y_offset", ")", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.AugmentSelection.affine": [[43, 90], ["math.cos", "math.sin", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array.dot().dot().dot().dot", "numpy.array.dot().dot().dot", "numpy.array.dot().dot", "numpy.array.dot"], "methods", ["None"], ["", "def", "affine", "(", "self", ",", "center", ",", "scale_self", ",", "config", ")", ":", "\n", "# the main idea: we will do all image transformations with one affine matrix.", "\n", "# this saves lot of cpu and make code significantly shorter", "\n", "# same affine matrix could be used to transform joint coordinates afterwards", "\n", "        ", "scale_self", "*=", "(", "config", ".", "height", "/", "(", "config", ".", "height", "-", "1", ")", ")", "\n", "\n", "A", "=", "cos", "(", "self", ".", "degree", "/", "180.", "*", "pi", ")", "\n", "B", "=", "sin", "(", "self", ".", "degree", "/", "180.", "*", "pi", ")", "\n", "\n", "scale_size", "=", "config", ".", "transform_params", ".", "target_dist", "/", "scale_self", "*", "self", ".", "scale", "\n", "# target_dist\u662f\u8c03\u6574\u4eba\u5360\u6574\u4e2a\u56fe\u50cf\u7684\u6bd4\u4f8b\u5417\uff1f", "\n", "# It used in picture augmentation during training. Rough meaning is \"height of main person on image should", "\n", "# be approximately 0.6 of the original image size\". It used in this file in my code:", "\n", "# https://github.com/anatolix/keras_Realtime_Multi-Person_Pose_Estimation/blob/master/py_rmpe_server/py_rmpe_transformer.py", "\n", "# This mean we will scale picture so height of person always will be 0.6 of picture.", "\n", "# After it we apply random scaling (self.scale) from 0.6 to 1.1", "\n", "(", "width", ",", "height", ")", "=", "center", "\n", "center_x", "=", "width", "\n", "center_y", "=", "height", "\n", "\n", "# \u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u5c06\u56fe\u50cf\u53d8\u6362\u5230\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3", "\n", "center2zero", "=", "np", ".", "array", "(", "[", "[", "1.", ",", "0.", ",", "-", "center_x", "]", ",", "\n", "[", "0.", ",", "1.", ",", "-", "center_y", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "\n", "rotate", "=", "np", ".", "array", "(", "[", "[", "A", ",", "B", ",", "0", "]", ",", "\n", "[", "-", "B", ",", "A", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1.", "]", "]", ")", "\n", "\n", "scale", "=", "np", ".", "array", "(", "[", "[", "scale_size", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "scale_size", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1.", "]", "]", ")", "\n", "\n", "flip", "=", "np", ".", "array", "(", "[", "[", "-", "1", "if", "self", ".", "flip", "else", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "\n", "# \u6700\u540e\u518d\u4ece\u539f\u70b9\u4e2d\u5fc3\u53d8\u6362\u5230\u6307\u5b9a\u56fe\u50cf\u5927\u5c0f\u5c3a\u5bf8\u7684\u4e2d\u5fc3\u4e0a\u53bb\u5e76\u4e14\u8fdb\u884c\u968f\u673a\u5e73\u79fb", "\n", "center2center", "=", "np", ".", "array", "(", "[", "[", "1.", ",", "0.", ",", "config", ".", "width", "/", "2", "-", "0.5", "+", "self", ".", "crop", "[", "0", "]", "]", ",", "\n", "[", "0.", ",", "1.", ",", "config", ".", "height", "/", "2", "-", "0.5", "+", "self", ".", "crop", "[", "1", "]", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "\n", "# order of combination is reversed", "\n", "# \u8fd9\u53d6\u51b3\u4e8e\u5750\u6807\u662f\u884c\u5411\u91cf\u8fd8\u662f\u5217\u5411\u91cf\uff0c\u5bf9\u5e94\u53d8\u6362\u77e9\u9635\u662f\u5de6\u4e58\u8fd8\u662f\u53f3\u4e58\uff0c\u6b64\u5904\u5750\u6807\u7528\u7684\u662f\u5217\u5411\u91cf\u5f62\u5f0f", "\n", "combined", "=", "center2center", ".", "dot", "(", "flip", ")", ".", "dot", "(", "scale", ")", ".", "dot", "(", "rotate", ")", ".", "dot", "(", "center2zero", ")", "\n", "\n", "return", "combined", "[", "0", ":", "2", "]", ",", "scale_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.Transformer.__init__": [[93, 96], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.Transformer.distort_color": [[97, 111], ["cv2.cvtColor().astype", "numpy.maximum", "numpy.maximum", "numpy.maximum", "hsv_img.astype.astype.astype", "cv2.cvtColor", "numpy.minimum", "numpy.minimum", "numpy.minimum", "cv2.cvtColor", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "@", "staticmethod", "# staticmethod\u652f\u6301\u7c7b\u5bf9\u8c61\u6216\u8005\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u65b9\u6cd5\u7684\u8c03\u7528", "\n", "def", "distort_color", "(", "img", ")", ":", "\n", "# uint8 input\uff0copencv outputs Hue\u3001Saturation\u3001Value ranges are: [0,180)\uff0c[0,256)\uff0c[0,256)", "\n", "        ", "hsv_img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2HSV", ")", ".", "astype", "(", "np", ".", "int16", ")", "\n", "hsv_img", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "hsv_img", "[", ":", ",", ":", ",", "0", "]", "-", "10", "+", "np", ".", "random", ".", "randint", "(", "20", "+", "1", ")", ",", "179", ")", ",", "\n", "0", ")", "# hue", "\n", "hsv_img", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "hsv_img", "[", ":", ",", ":", ",", "1", "]", "-", "20", "+", "np", ".", "random", ".", "randint", "(", "80", "+", "1", ")", ",", "255", ")", ",", "\n", "0", ")", "# saturation", "\n", "hsv_img", "[", ":", ",", ":", ",", "2", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "hsv_img", "[", ":", ",", ":", ",", "2", "]", "-", "20", "+", "np", ".", "random", ".", "randint", "(", "60", "+", "1", ")", ",", "255", ")", ",", "\n", "0", ")", "# value", "\n", "hsv_img", "=", "hsv_img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "distorted_img", "=", "cv2", ".", "cvtColor", "(", "hsv_img", ",", "cv2", ".", "COLOR_HSV2BGR", ")", "\n", "return", "distorted_img", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.Transformer.transform": [[112, 185], ["py_data_transformer.AugmentSelection.random", "cv2.warpAffine", "cv2.warpAffine", "cv2.resize", "cv2.warpAffine", "cv2.resize", "meta[].copy", "numpy.matmul().transpose", "py_data_transformer.AugmentSelection.random", "py_data_transformer.Transformer.distort_color", "numpy.matmul", "py_data_transformer.Transformer.astype", "cv2.resize.astype", "cv2.resize.astype", "meta[].copy.transpose"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.AugmentSelection.random", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.AugmentSelection.random", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.Transformer.distort_color"], ["", "def", "transform", "(", "self", ",", "img", ",", "mask_miss", ",", "mask_all", ",", "meta", ",", "aug", "=", "None", ")", ":", "\n", "        ", "\"\"\" If aug is None, then do random augmentation. Input original data and output transformed data \"\"\"", "\n", "\n", "if", "aug", "is", "None", ":", "\n", "            ", "aug", "=", "AugmentSelection", ".", "random", "(", "self", ".", "config", ".", "transform_params", ")", "\n", "\n", "", "if", "aug", ".", "tint", ":", "\n", "            ", "img", "=", "self", ".", "distort_color", "(", "img", ")", "\n", "# # ------------------------------------------------------------------------------------ #", "\n", "\n", "# warp picture and mask", "\n", "", "assert", "meta", "[", "'scale_provided'", "]", "[", "0", "]", "!=", "0", ",", "\"************ scale_proviede is zero, dividing zero! ***********\"", "\n", "\n", "M", ",", "scale_size", "=", "aug", ".", "affine", "(", "meta", "[", "'objpos'", "]", "[", "0", "]", ",", "meta", "[", "'scale_provided'", "]", "[", "0", "]", ",", "self", ".", "config", ")", "\n", "# \u6839\u636e\u6392\u540d\u7b2c\u4e00\u7684main person\u8fdb\u884c\u56fe\u50cf\u7f29\u653e", "\n", "# need to understand this,", "\n", "# scale_provided[0] is height of main person divided by 512, calculated in generate_hdf5.py", "\n", "# print(img.shape)", "\n", "\n", "# \u53d8\u6362\u4e4b\u540e\u8fd8\u4f1a\u7f29\u653e\u5230config.height\u5927\u5c0f, (self.config.height, self.config.width)\u3000\u6307\u5b9a\u7684\u662f\u8fd4\u56de\u56fe\u50cf\u7684\u5c3a\u5bf8", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "self", ".", "config", ".", "height", ",", "self", ".", "config", ".", "width", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "borderValue", "=", "(", "124", ",", "127", ",", "127", ")", ")", "\n", "# for debug, see the transformed data", "\n", "# plt.imshow(img[:,:,[2,1,0]])  # opencv imread ---> BGR order", "\n", "# plt.show()", "\n", "\n", "# mask\u4e5f\u8981\u505a\u4e00\u81f4\u7684\u53d8\u6362  FIXME: resize\u63d2\u503c\u7b97\u6cd5\u6539\u6210\u4e09\u6b21\u7acb\u65b9", "\n", "mask_miss", "=", "cv2", ".", "warpAffine", "(", "mask_miss", ",", "M", ",", "(", "self", ".", "config", ".", "height", ",", "self", ".", "config", ".", "width", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "borderValue", "=", "255", ")", "# cv2.INTER_CUBIC\u9002\u5408\u653e\u5927", "\n", "\n", "mask_miss", "=", "cv2", ".", "resize", "(", "mask_miss", ",", "self", ".", "config", ".", "mask_shape", ",", "# mask shape\u3000\u662f\u7edf\u4e00\u7684 46*46", "\n", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "mask_all", "=", "cv2", ".", "warpAffine", "(", "mask_all", ",", "M", ",", "(", "self", ".", "config", ".", "height", ",", "self", ".", "config", ".", "width", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "borderValue", "=", "0", ")", "\n", "#", "\n", "mask_all", "=", "cv2", ".", "resize", "(", "mask_all", ",", "self", ".", "config", ".", "mask_shape", ",", "# mask shape\u3000\u662f\u7edf\u4e00\u7684 46*46", "\n", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "# # debug usage: show the image and corresponding mask area", "\n", "# # mask areas are in dark when display", "\n", "# plt.imshow(img[:, :, [2, 1, 0]])", "\n", "# plt.imshow(np.repeat(mask_image_size[:, :, np.newaxis], 3, axis=2), alpha=0.5)  # mask_all", "\n", "# plt.show()", "\n", "\n", "# warp key points", "\n", "# Issue: joint could be cropped by augmentation, in this case we should mark it as invisible.", "\n", "# update: may be we don't need it actually, original code removed part sliced more than half totally,", "\n", "# may be we should keep it", "\n", "original_points", "=", "meta", "[", "'joints'", "]", ".", "copy", "(", ")", "\n", "original_points", "[", ":", ",", ":", ",", "2", "]", "=", "1", "# we reuse 3rd column in completely different way here, it is hack", "\n", "# -----------------------------------------------------------------------------\u3000#", "\n", "# \u9700\u8981\u6dfb\u52a0\u8d85\u8fc7\u8fb9\u754c\u65f6\u6b64\u65f6\u8bbe\u4e3a2\u5417\uff1f \u4e0a\u9762\u7684update\u5df2\u7ecf\u56de\u7b54\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728heatmaper.py\u751f\u6210\u65f6\u4f7f\u7528\u4e86slice", "\n", "# -----------------------------------------------------------------------------\u3000#", "\n", "\n", "# we use 0 - hidden, 1 visible, 2 absent - it is not coco values they processed by generate_hdf5", "\n", "converted_points", "=", "np", ".", "matmul", "(", "M", ",", "original_points", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "# \u5173\u952e\u70b9\u7684\u5750\u6807\u53d8\u6362", "\n", "# \u4ece\u77e9\u9635\u76f8\u4e58\u7684\u65b9\u5f0f\u6765\u770b\uff0c\u5750\u6807\u8868\u793a\u7528\u7684\u662f\u5217\u5411\u91cf\uff0c\u6240\u4ee5\u662f\u5de6\u4e58\u53d8\u6362\u77e9\u9635", "\n", "meta", "[", "'joints'", "]", "[", ":", ",", ":", ",", "0", ":", "2", "]", "=", "converted_points", "\n", "\n", "# we just made image flip, i.e. right leg just became left leg, and vice versa", "\n", "if", "aug", ".", "flip", ":", "\n", "            ", "tmpLeft", "=", "meta", "[", "'joints'", "]", "[", ":", ",", "self", ".", "config", ".", "leftParts", ",", ":", "]", "# \u901a\u8fc7\u4e2d\u95f4\u7684\u7f13\u5b58\u53d8\u91cf\u8fdb\u884c\u4ea4\u6362", "\n", "tmpRight", "=", "meta", "[", "'joints'", "]", "[", ":", ",", "self", ".", "config", ".", "rightParts", ",", ":", "]", "\n", "meta", "[", "'joints'", "]", "[", ":", ",", "self", ".", "config", ".", "leftParts", ",", ":", "]", "=", "tmpRight", "\n", "meta", "[", "'joints'", "]", "[", ":", ",", "self", ".", "config", ".", "rightParts", ",", ":", "]", "=", "tmpLeft", "\n", "# print('*********************', img.shape, meta['joints'].shape)", "\n", "# meta['joints'].shape = (num_of_person, 18, 3)\uff0c\u5176\u4e2d18\u662f18\u4e2a\u5173\u952e\u70b9\uff0c3\u4ee3\u8868\uff08x,y,v)", "\n", "\n", "# normalize image to 0~1 here to save gpu/cpu time", "\n", "# mask - \u9664\u4ee5255\u4e4b\u540e\uff0c\u88abmask\u5730\u65b9\u662f0.0,\u6ca1\u6709mask\u5730\u65b9\u662f1.0", "\n", "# return transformed data as flot32 format", "\n", "", "return", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ",", "mask_miss", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ",", "mask_all", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.__init__": [[16, 34], ["py_data_iterator.RawDataIterator.config.source", "py_cocodata_server.py_data_heatmapper.Heatmapper", "py_cocodata_server.py_data_transformer.Transformer", "h5py.File", "list", "file[].keys"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.COCOSourceConfig.source"], ["def", "__init__", "(", "self", ",", "global_config", ",", "config", ",", "shuffle", "=", "True", ",", "augment", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param global_config: configuration used in our project\n        :param config: original configuration used in COCO database\n        :param shuffle:  # fixme: \u53ef\u4ee5\u5728pytorch\u7684dataloader\u7c7b\u4e2d\u9009\u62e9\u5185\u7f6e\u7684shuffle\n        :param augment: data augmentation\n        \"\"\"", "\n", "self", ".", "global_config", "=", "global_config", "\n", "self", ".", "config", "=", "config", "# self.configs can be a list to hold several separate configs or only one config", "\n", "self", ".", "h5file_path", "=", "self", ".", "config", ".", "source", "(", ")", "# string list containing the hdf5 file source path", "\n", "self", ".", "datum", "=", "None", "\n", "self", ".", "heatmapper", "=", "Heatmapper", "(", "global_config", ")", "# Heatmapper is a python class", "\n", "self", ".", "transformer", "=", "Transformer", "(", "global_config", ")", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "# datum[0]: <HDF5 group \"dataset\">, is the annotation file used in our project", "\n", "with", "h5py", ".", "File", "(", "self", ".", "h5file_path", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "keys", "=", "list", "(", "file", "[", "'dataset'", "]", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.gen": [[35, 73], ["py_data_iterator.RawDataIterator.read_data", "py_data_iterator.RawDataIterator.transformer.transform", "py_data_iterator.RawDataIterator.heatmapper.create_heatmaps", "random.shuffle", "h5py.File", "meta[].astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "py_cocodata_server.py_data_transformer.AugmentSelection.unrandom"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.read_data", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.Transformer.transform", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_heatmapper.Heatmapper.create_heatmaps", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_transformer.AugmentSelection.unrandom"], ["", "", "def", "gen", "(", "self", ",", "index", ")", ":", "\n", "# \u8fd9\u4e2agen()\u51fd\u6570\u662f\u771f\u6b63\u751f\u6210\u8bad\u7ec3\u6240\u9700\u7684ground truth\u6570\u636e\uff0c\u5e76\u4e14\u5728ds_generators.py\u4e2d\u88ab\u8c03\u7528\uff0c", "\n", "# \u5728\u90a3\u91cc\u6570\u636e\u88ab\u590d\u5236\u6210\u591a\u4efd\u6ee1\u8db3\u591a\u4e2astage\u7684\u8f93\u5165\u8981\u6c42", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "keys", ")", "# shuffle the self.keys", "\n", "\n", "", "if", "self", ".", "datum", "is", "None", ":", "\n", "            ", "file", "=", "h5py", ".", "File", "(", "self", ".", "h5file_path", ",", "'r'", ")", "\n", "self", ".", "datum", "=", "file", "[", "'datum'", "]", "if", "'datum'", "in", "file", "else", "(", "file", "[", "'dataset'", "]", ",", "file", "[", "'images'", "]", ",", "file", "[", "'masks'", "]", "if", "'masks'", "in", "file", "else", "None", ")", "\n", "\n", "# the same image may be accessed several times according to main persons", "\n", "", "image", ",", "mask_miss", ",", "mask_all", ",", "meta", ",", "debug", "=", "self", ".", "read_data", "(", "self", ".", "keys", "[", "index", "]", ")", "\n", "\n", "# transform picture", "\n", "assert", "mask_miss", ".", "dtype", "==", "np", ".", "uint8", ",", "\"Should be 'np.uint8' type, however %s is given\"", "%", "mask_miss", ".", "dtype", "\n", "# joint annotation (meta['joints']) has already been converted to our format in self.read_data()", "\n", "# transform() will return np.float32 data which is within [0, 1]", "\n", "image", ",", "mask_miss", ",", "mask_all", ",", "meta", "=", "self", ".", "transformer", ".", "transform", "(", "image", ",", "mask_miss", ",", "mask_all", ",", "meta", ",", "\n", "aug", "=", "None", "if", "self", ".", "augment", "else", "AugmentSelection", ".", "unrandom", "(", ")", ")", "\n", "# \u56e0\u4e3a\u5728transformer.py\u4e2d\u5bf9mask\u505a\u4e86\u7acb\u65b9\u63d2\u503c\u7684resize, \u4e14\u3000/225., \u6240\u4ee5\u7c7b\u578b\u53d8\u6210\u4e86float", "\n", "assert", "mask_miss", ".", "dtype", "==", "np", ".", "float32", ",", "mask_miss", ".", "dtype", "\n", "assert", "mask_all", ".", "dtype", "==", "np", ".", "float32", ",", "mask_all", ".", "dtype", "\n", "\n", "# we need layered mask_miss on next stage  \u4e0d\u8fdb\u884c\u901a\u9053\u7684\u590d\u5236\uff0c\u5229\u7528pytorch\u4e2d\u7684broadcast\uff0c\u8282\u7701\u5185\u5b58", "\n", "\n", "# create heatmaps without mask", "\n", "labels", "=", "self", ".", "heatmapper", ".", "create_heatmaps", "(", "meta", "[", "'joints'", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "mask_all", ")", "\n", "\n", "# offsets, mask_offset = self.heatmapper.put_offset(meta['joints'].astype(np.float32))  todo", "\n", "\n", "# # # debug for showing the generate keypoingt or body part heatmaps", "\n", "# show_labels = cv2.resize(labels, image.shape[:2], interpolation=cv2.INTER_CUBIC)", "\n", "# plt.imshow(image[:, :, [2, 1, 0]])", "\n", "# plt.imshow(show_labels[:, :, 10], alpha=0.5)  # mask_all", "\n", "# plt.show()", "\n", "return", "torch", ".", "from_numpy", "(", "image", ")", ",", "torch", ".", "from_numpy", "(", "mask_miss", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "torch", ".", "from_numpy", "(", "labels", ")", "#, torch.from_numpy(offsets), torch.from_numpy(mask_offset)", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.read_data": [[74, 81], ["isinstance", "py_data_iterator.RawDataIterator.read_data_new", "py_data_iterator.RawDataIterator.read_data_old"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.read_data_new", "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.read_data_old"], ["", "def", "read_data", "(", "self", ",", "key", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "self", ".", "datum", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "dataset", ",", "images", ",", "masks", "=", "self", ".", "datum", "\n", "return", "self", ".", "read_data_new", "(", "dataset", ",", "images", ",", "masks", ",", "key", ",", "self", ".", "config", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "read_data_old", "(", "self", ".", "datum", ",", "key", ",", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.read_data_old": [[82, 108], ["json.loads", "config.convert", "data.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.COCOSourceConfig.convert"], ["", "", "def", "read_data_old", "(", "self", ",", "datum", ",", "key", ",", "config", ")", ":", "\n", "\n", "        ", "entry", "=", "datum", "[", "key", "]", "\n", "# HDF5\u7684\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7attrs\u6210\u5458\u8bbf\u95ee", "\n", "assert", "'meta'", "in", "entry", ".", "attrs", ",", "\"No 'meta' attribute in .h5 file. Did you generate .h5 with new code?\"", "\n", "\n", "debug", "=", "json", ".", "loads", "(", "entry", ".", "attrs", "[", "'meta'", "]", ")", "\n", "meta", "=", "{", "}", "\n", "meta", "[", "\"objpos\"", "]", "=", "debug", "[", "\"objpos\"", "]", "\n", "meta", "[", "\"scale_provided\"", "]", "=", "debug", "[", "\"scale_provided\"", "]", "\n", "meta", "[", "\"joints\"", "]", "=", "debug", "[", "\"joints\"", "]", "\n", "\n", "meta", "=", "config", ".", "convert", "(", "meta", ",", "self", ".", "global_config", ")", "\n", "data", "=", "entry", "[", "(", ")", "]", "\n", "\n", "if", "data", ".", "shape", "[", "0", "]", "<=", "6", ":", "\n", "# TODO: this is extra work, should write in store in correct format (not transposed)", "\n", "# can't do now because I want storage compatibility (\u517c\u5bb9\u6027) yet", "\n", "# fixme: we need image in classical not transposed format in this program for warp affine", "\n", "            ", "data", "=", "data", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "\n", "", "img", "=", "data", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "mask_miss", "=", "data", "[", ":", ",", ":", ",", "4", "]", "\n", "mask_all", "=", "data", "[", ":", ",", ":", ",", "5", "]", "\n", "\n", "return", "img", ",", "mask_miss", ",", "mask_all", ",", "meta", ",", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.read_data_new": [[109, 145], ["json.loads", "json.loads", "config.convert", "cv2.imdecode", "numpy.full", "numpy.full", "len"], "methods", ["home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.config.config_final.COCOSourceConfig.convert"], ["", "def", "read_data_new", "(", "self", ",", "dataset", ",", "images", ",", "masks", ",", "key", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :return: an image and corresponding data\n        \"\"\"", "\n", "entry", "=", "dataset", "[", "key", "]", "# type: h5py.Dataset  # hint trick for pycharm", "\n", "assert", "'meta'", "in", "entry", ".", "attrs", ",", "\"No 'meta' attribute in .h5 file. Did you generate .h5 with new code?\"", "\n", "\n", "meta", "=", "json", ".", "loads", "(", "entry", "[", "(", ")", "]", ")", "# entry.value() changes to entry[()] in the new version of  hdf5", "\n", "debug", "=", "json", ".", "loads", "(", "entry", ".", "attrs", "[", "'meta'", "]", ")", "\n", "meta", "=", "config", ".", "convert", "(", "meta", ",", "self", ".", "global_config", ")", "# \u6539\u53d8\u6570\u636e\u5b9a\u4e49\uff0c\u4ee5\u6ee1\u8db3CMU\u5de5\u4f5c\u4e2d\u7684\u8981\u6c42", "\n", "img", "=", "images", "[", "meta", "[", "'image'", "]", "]", "[", "(", ")", "]", "\n", "mask_miss", "=", "None", "\n", "\n", "# if we use imencode in coco_mask_hdf5.py", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", "and", "img", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "img", "=", "cv2", ".", "imdecode", "(", "img", ",", "flags", "=", "-", "1", ")", "\n", "\n", "# if no mask is available, see the image storage operation in coco_mask_hdf5.py, concat image and mask together", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "            ", "mask_miss", "=", "img", "[", ":", ",", ":", ",", "3", "]", "\n", "img", "=", "img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "", "if", "mask_miss", "is", "None", ":", "\n", "            ", "if", "masks", "is", "not", "None", ":", "\n", "                ", "mask_concat", "=", "masks", "[", "meta", "[", "'image'", "]", "]", "[", "(", ")", "]", "# meta['image'] serves as index", "\n", "\n", "# if we use imencode in coco_mask_hdf5.py, otherwise skip it", "\n", "# if len(mask_miss.shape) == 2 and mask_miss.shape[1] == 1:", "\n", "#     mask_miss = cv2.imdecode(mask_miss, flags=-1)", "\n", "\n", "mask_miss", ",", "mask_all", "=", "mask_concat", "[", ":", ",", ":", ",", "0", "]", ",", "mask_concat", "[", ":", ",", ":", ",", "1", "]", "\n", "", "", "if", "mask_miss", "is", "None", ":", "# \u5bf9\u4e8e\u6ca1\u6709mask\u7684image\uff0c\u4e3a\u4e86\u540e\u9762\u8ba1\u7b97\u7684\u5f62\u5f0f\u4e0a\u80fd\u591f\u7edf\u4e00\uff0c\u5236\u9020\u4e00\u4e2a\u5168\u662f255\u7684mask\uff0c\u8fd9\u662f\u4e3a\u4e86\u517c\u5bb9MPII\u6570\u636e\u96c6", "\n", "            ", "mask_miss", "=", "np", ".", "full", "(", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", ",", "fill_value", "=", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "# mask area are 0", "\n", "mask_all", "=", "np", ".", "full", "(", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", ",", "fill_value", "=", "0", ",", "dtype", "=", "np", ".", "uint8", ")", "# mask area are 1", "\n", "\n", "", "return", "img", ",", "mask_miss", ",", "mask_all", ",", "meta", ",", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.hellojialee_Improved-Body-Parts.py_cocodata_server.py_data_iterator.RawDataIterator.num_keys": [[146, 149], ["len"], "methods", ["None"], ["", "def", "num_keys", "(", "self", ")", ":", "\n", "\n", "        ", "return", "len", "(", "self", ".", "keys", ")", "\n", "\n"]]}