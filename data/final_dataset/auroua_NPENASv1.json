{"home.repos.pwc.inspect_result.auroua_NPENASv1.None.train_multiple_gpus_close_domain.ansyc_multiple_process_train": [[26, 43], ["torch.multiprocessing.Queue", "nas_lib.configs.meta_neuralnet_params", "torch.multiprocessing.Process", "torch.multiprocessing.Process.start", "torch.multiprocessing.Process.join", "nas_lib.data.data.build_datasets", "torch.multiprocessing.Process", "p.start", "p.join", "range", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_lib.configs.meta_neuralnet_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.build_datasets"], ["def", "ansyc_multiple_process_train", "(", "args", ",", "save_dir", ")", ":", "\n", "    ", "q", "=", "Queue", "(", "10", ")", "\n", "metann_params", "=", "meta_neuralnet_params", "(", "args", ".", "search_space", ")", "\n", "data_lists", "=", "[", "build_datasets", "(", "metann_params", "[", "'search_space'", "]", ",", "\n", "args", ".", "dataset", ",", "args", ".", "nasbench_nlp_type", ",", "\n", "args", ".", "filter_none", ")", "for", "_", "in", "range", "(", "args", ".", "gpus", ")", "]", "\n", "\n", "p_producer", "=", "Process", "(", "target", "=", "data_producers", ",", "args", "=", "(", "args", ",", "q", ")", ")", "\n", "p_consumers", "=", "[", "Process", "(", "target", "=", "data_consumers", ",", "args", "=", "(", "args", ",", "q", ",", "save_dir", ",", "i", ",", "data_lists", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "args", ".", "gpus", ")", "]", "\n", "\n", "p_producer", ".", "start", "(", ")", "\n", "for", "p", "in", "p_consumers", ":", "\n", "        ", "p", ".", "start", "(", ")", "\n", "\n", "", "p_producer", ".", "join", "(", ")", "\n", "for", "p", "in", "p_consumers", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.None.train_multiple_gpus_close_domain.data_producers": [[45, 53], ["range", "range", "queue.put", "queue.put"], "function", ["None"], ["", "", "def", "data_producers", "(", "args", ",", "queue", ")", ":", "\n", "    ", "trials", "=", "args", ".", "trials", "\n", "for", "i", "in", "range", "(", "trials", ")", ":", "\n", "        ", "queue", ".", "put", "(", "{", "\n", "'iterate'", ":", "i", "\n", "}", ")", "\n", "", "for", "_", "in", "range", "(", "args", ".", "gpus", ")", ":", "\n", "        ", "queue", ".", "put", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.None.train_multiple_gpus_close_domain.data_consumers": [[55, 67], ["nas_lib.utils.comm.set_random_seed", "nas_lib.utils.comm.setup_logger", "int", "q.get", "train_multiple_gpus_close_domain.run_experiments_bananas_paradigm", "nas_lib.utils.comm.setup_logger.info", "str().split", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.set_random_seed", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_NPENASv1.None.train_multiple_gpus_close_domain.run_experiments_bananas_paradigm"], ["", "", "def", "data_consumers", "(", "args", ",", "q", ",", "save_dir", ",", "i", ",", "search_space", ")", ":", "\n", "    ", "set_random_seed", "(", "int", "(", "str", "(", "time", ".", "time", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "[", ":", ":", "-", "1", "]", "[", ":", "9", "]", ")", ")", "\n", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "i", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "save_dir", ",", "i", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "while", "True", ":", "\n", "        ", "msg", "=", "q", ".", "get", "(", ")", "\n", "if", "msg", "==", "'done'", ":", "\n", "            ", "logger", ".", "info", "(", "'thread %d end'", "%", "i", ")", "\n", "break", "\n", "", "iterations", "=", "msg", "[", "'iterate'", "]", "\n", "run_experiments_bananas_paradigm", "(", "args", ",", "save_dir", ",", "i", ",", "iterations", ",", "logger", ",", "search_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.None.train_multiple_gpus_close_domain.run_experiments_bananas_paradigm": [[69, 166], ["nas_lib.configs.meta_neuralnet_params", "nas_lib.configs.algo_params_close_domain", "len", "range", "os.path.join", "os.path.join", "logger.info", "logger.info", "logger.info", "range", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "time.time", "len", "range", "logger.info", "open", "nas_lib.algos.algo_compare.run_nas_algos_case1", "numpy.round", "walltimes.append", "results.append", "result_dist.append", "pickle.dump", "pickle.dump", "len", "open", "pickle.dump", "nas_lib.algos.algo_compare.run_nas_algos_case2", "len", "numpy.round", "walltimes.append", "results.append", "full_data_results.append", "numpy.round", "walltimes.append", "results.append", "results_line.append", "results_line.append", "results_line.append", "str", "nas_lib.algos.algo_compare.run_nas_algos_nasbench_201", "time.time", "int", "psutil.virtual_memory", "nas_lib.algos.algo_compare.run_nas_algos_nasbench_nlp", "time.time", "time.time", "nas_lib.algos.algo_compare.run_nas_algos_nasbench_asr", "nas_lib.algos.algo_compare.run_nas_scalar_prior", "nas_lib.algos.algo_compare.run_evolutionary_compare", "nas_lib.algos.algo_compare.run_box_compare_case1", "nas_lib.algos.algo_compare.run_box_compare_case2", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_lib.configs.meta_neuralnet_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_lib.configs.algo_params_close_domain", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_scalar_prior", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_evolutionary_compare", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_box_compare_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_box_compare_case2"], ["", "", "def", "run_experiments_bananas_paradigm", "(", "args", ",", "save_dir", ",", "i", ",", "iterations", ",", "logger", ",", "search_space", ")", ":", "\n", "    ", "out_file", "=", "args", ".", "output_filename", "+", "'_gpus_%d_'", "%", "i", "+", "'iter_%d'", "%", "iterations", "\n", "metann_params", "=", "meta_neuralnet_params", "(", "args", ".", "search_space", ")", "\n", "algorithm_params", "=", "algo_params", "(", "args", ".", "algo_params", ",", "args", ".", "search_budget", ",", "\n", "comparison_type", "=", "args", ".", "comparison_type", ",", "\n", "nasbench_201_dataset", "=", "args", ".", "dataset", ",", "\n", "relu_celu_comparison_algo_type", "=", "args", ".", "relu_celu_comparison_algo_type", ")", "\n", "num_algos", "=", "len", "(", "algorithm_params", ")", "\n", "results", "=", "[", "]", "\n", "full_data_results", "=", "[", "]", "\n", "result_dist", "=", "[", "]", "\n", "walltimes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_algos", ")", ":", "\n", "        ", "logger", ".", "info", "(", "' * Running algorithm: {}'", ".", "format", "(", "algorithm_params", "[", "j", "]", ")", ")", "\n", "logger", ".", "info", "(", "' * Loss type: {}'", ".", "format", "(", "args", ".", "loss_type", ")", ")", "\n", "logger", ".", "info", "(", "' * Trials: {}, Free Memory available {}'", ".", "format", "(", "iterations", ",", "\n", "psutil", ".", "virtual_memory", "(", ")", ".", "free", "/", "(", "1024", "*", "1024", ")", ")", ")", "\n", "starttime", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "algo_params", "==", "'nasbench101_case1'", ":", "\n", "            ", "algo_result", "=", "run_nas_algos_case1", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "logger", "=", "logger", ",", "with_details", "=", "args", ".", "with_details", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'nasbench101_case2'", ":", "\n", "            ", "algo_result", "=", "run_nas_algos_case2", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "logger", "=", "logger", ",", "with_details", "=", "args", ".", "with_details", ",", "record_kt", "=", "args", ".", "record_kt", ",", "\n", "record_mutation", "=", "args", ".", "record_mutation", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'nasbench_201'", ":", "\n", "            ", "algo_result", "=", "run_nas_algos_nasbench_201", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "dataname", "=", "args", ".", "dataset", ",", "logger", "=", "logger", ",", "record_kt", "=", "args", ".", "record_kt", ",", "\n", "record_mutation", "=", "args", ".", "record_mutation", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'nasbench_nlp'", ":", "\n", "            ", "algo_result", "=", "run_nas_algos_nasbench_nlp", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "logger", "=", "logger", ",", "record_kt", "=", "args", ".", "record_kt", ",", "\n", "record_mutation", "=", "args", ".", "record_mutation", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'nasbench_asr'", ":", "\n", "            ", "algo_result", "=", "run_nas_algos_nasbench_asr", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "logger", "=", "logger", ",", "record_kt", "=", "args", ".", "record_kt", ",", "\n", "record_mutation", "=", "args", ".", "record_mutation", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'scalar_prior'", ":", "\n", "            ", "algo_result", "=", "run_nas_scalar_prior", "(", "algorithm_params", "[", "j", "]", ",", "search_space", ",", "gpu", "=", "i", ",", "logger", "=", "logger", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'evaluation_compare'", ":", "\n", "            ", "algo_result", "=", "run_evolutionary_compare", "(", "algorithm_params", "[", "j", "]", ",", "search_space", ",", "logger", "=", "logger", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'box_compare_case1'", ":", "\n", "            ", "algo_result", "=", "run_box_compare_case1", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "logger", "=", "logger", ",", "with_details", "=", "args", ".", "with_details", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'box_compare_case2'", ":", "\n", "            ", "algo_result", "=", "run_box_compare_case2", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "logger", "=", "logger", ",", "with_details", "=", "args", ".", "with_details", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"This algorithm does not support!\"", ")", "\n", "", "if", "args", ".", "with_details", "==", "'T'", ":", "\n", "            ", "algo_result_1", ",", "algo_result_dist", "=", "algo_result", "\n", "algo_result", "=", "np", ".", "round", "(", "algo_result_1", ",", "5", ")", "\n", "walltimes", ".", "append", "(", "time", ".", "time", "(", ")", "-", "starttime", ")", "\n", "results", ".", "append", "(", "algo_result", ")", "\n", "result_dist", ".", "append", "(", "algo_result_dist", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "algo_result", ")", "==", "2", ":", "\n", "                ", "algo_result", ",", "full_data", "=", "algo_result", "\n", "algo_result", "=", "np", ".", "round", "(", "algo_result", ",", "5", ")", "\n", "# add walltime and results", "\n", "walltimes", ".", "append", "(", "time", ".", "time", "(", ")", "-", "starttime", ")", "\n", "results", ".", "append", "(", "algo_result", ")", "\n", "full_data_results", ".", "append", "(", "full_data", ")", "\n", "", "else", ":", "\n", "                ", "algo_result", "=", "np", ".", "round", "(", "algo_result", ",", "5", ")", "\n", "# add walltime and results", "\n", "walltimes", ".", "append", "(", "time", ".", "time", "(", ")", "-", "starttime", ")", "\n", "results", ".", "append", "(", "algo_result", ")", "\n", "\n", "", "", "", "filename", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_{}.pkl'", ".", "format", "(", "out_file", ",", "i", ")", ")", "\n", "filename_full_data", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'full_data_{}_{}.pkl'", ".", "format", "(", "out_file", ",", "i", ")", ")", "\n", "logger", ".", "info", "(", "' * Trial summary: (params, results, walltimes)'", ")", "\n", "logger", ".", "info", "(", "algorithm_params", ")", "\n", "logger", ".", "info", "(", "metann_params", ")", "\n", "for", "k", "in", "range", "(", "results", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "length", "=", "len", "(", "results", ")", "\n", "results_line", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "length", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "results_line", ".", "append", "(", "int", "(", "results", "[", "j", "]", "[", "k", ",", "0", "]", ")", ")", "\n", "results_line", ".", "append", "(", "results", "[", "j", "]", "[", "k", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "results_line", ".", "append", "(", "results", "[", "j", "]", "[", "k", ",", "1", "]", ")", "\n", "", "", "results_str", "=", "'  '", ".", "join", "(", "[", "str", "(", "k", ")", "for", "k", "in", "results_line", "]", ")", "\n", "logger", ".", "info", "(", "results_str", ")", "\n", "", "logger", ".", "info", "(", "walltimes", ")", "\n", "logger", ".", "info", "(", "' * Saving to file {}'", ".", "format", "(", "filename", ")", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "if", "args", ".", "with_details", "==", "'T'", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "algorithm_params", ",", "metann_params", ",", "results", ",", "result_dist", ",", "walltimes", "]", ",", "f", ")", "\n", "", "else", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "algorithm_params", ",", "metann_params", ",", "results", ",", "walltimes", "]", ",", "f", ")", "\n", "", "", "if", "len", "(", "full_data_results", ")", ">", "0", "and", "args", ".", "record_full_data", "==", "\"T\"", ":", "\n", "        ", "with", "open", "(", "filename_full_data", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "algorithm_params", ",", "metann_params", ",", "full_data_results", ",", "walltimes", "]", ",", "f", ")", "\n", "", "", "logger", ".", "info", "(", "'#######################################################  Trails %d End  '", "\n", "'#######################################################'", "%", "iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.None.train_multiple_gpus_close_domain.main": [[168, 176], ["torch.set_start_method", "train_multiple_gpus_close_domain.ansyc_multiple_process_train", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.None.train_multiple_gpus_close_domain.ansyc_multiple_process_train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "save_dir", "=", "args", ".", "save_dir", "\n", "if", "not", "save_dir", ":", "\n", "        ", "save_dir", "=", "args", ".", "algo_params", "+", "'/'", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "multiprocessing", ".", "set_start_method", "(", "'spawn'", ")", "\n", "ansyc_multiple_process_train", "(", "args", ",", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.search_space_dist_gen.edit_distance": [[13, 23], ["numpy.sum", "numpy.sum", "nas_lib.data.data_nasbench_201.OPS.index", "nas_lib.data.data_nasbench_201.OPS.index", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "edit_distance", "(", "adj_matrix_1", ",", "adj_matrix_2", ",", "ops_1", ",", "ops_2", ",", "OPS", ")", ":", "\n", "    ", "\"\"\"\n    compute the distance between two architectures\n    by comparing their adjacency matrices and op lists\n    \"\"\"", "\n", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "adj_matrix_1", ")", "!=", "np", ".", "array", "(", "adj_matrix_2", ")", ")", "\n", "ops_1", "=", "[", "OPS", ".", "index", "(", "op", ")", "for", "op", "in", "ops_1", "]", "\n", "ops_2", "=", "[", "OPS", ".", "index", "(", "op", ")", "for", "op", "in", "ops_2", "]", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "ops_1", ")", "!=", "np", ".", "array", "(", "ops_2", ")", ")", "\n", "return", "graph_dist", "+", "ops_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.search_space_analysis.get_all_data": [[31, 40], ["open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load"], "function", ["None"], ["def", "get_all_data", "(", "save_path", ")", ":", "\n", "    ", "with", "open", "(", "save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "total_keys", "=", "pickle", ".", "load", "(", "f", ")", "\n", "dist_matrix", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_matrix", "=", "pickle", ".", "load", "(", "f", ")", "\n", "test_matrix", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "test_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "total_keys", ",", "dist_matrix", ",", "val_matrix", ",", "test_matrix", ",", "val_list", ",", "test_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.search_space_analysis.get_focus_coefficient": [[42, 91], ["numpy.triu", "numpy.tril", "collections.Counter", "sorted", "matplotlib.subplots", "fig.set_dpi", "ax1.set_xlabel", "ax1.set_ylabel", "ax1.set_title", "ax1.plot", "ax2.set_xlabel", "ax2.set_ylabel", "ax2.plot", "ax2.plot", "ax2.legend", "step_wise_list.insert", "ax3.set_xlabel", "ax3.set_ylabel", "ax3.plot", "matplotlib.show", "final_avg_dist.reshape().tolist", "list", "sum", "val_dist_list.append", "test_dist_list.append", "val_dist_mean_list.append", "test_dist_mean_list.append", "min", "max", "kt_list.append", "numpy.ones_like", "collections.Counter.items", "avg_dict.keys", "numpy.mean", "numpy.mean", "final_avg_dist.reshape", "range", "enumerate", "nas_lib.utils.corr.get_kendalltau_coorlection"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection"], ["", "def", "get_focus_coefficient", "(", "dist_matrix", ",", "val_matrix", ",", "test_matrix", ",", "validate_list", ",", "testing_list", ")", ":", "\n", "    ", "avg_dist", "=", "np", ".", "triu", "(", "dist_matrix", ",", "1", ")", "\n", "all_ones", "=", "np", ".", "tril", "(", "np", ".", "ones_like", "(", "dist_matrix", ")", "*", "-", "1", ")", "\n", "final_avg_dist", "=", "avg_dist", "+", "all_ones", "\n", "final_list", "=", "final_avg_dist", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "avg_counter", "=", "Counter", "(", "final_list", ")", "\n", "avg_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "avg_counter", ".", "items", "(", ")", "if", "k", ">", "0", "}", "\n", "key_list", "=", "sorted", "(", "list", "(", "avg_dict", ".", "keys", "(", ")", ")", ")", "\n", "val_list", "=", "[", "avg_dict", "[", "k", "]", "for", "k", "in", "key_list", "]", "\n", "total_element", "=", "sum", "(", "val_list", ")", "*", "1.0", "\n", "val_list_normalize", "=", "[", "v", "/", "total_element", "for", "v", "in", "val_list", "]", "\n", "\n", "val_dist_list", "=", "[", "]", "\n", "test_dist_list", "=", "[", "]", "\n", "val_dist_mean_list", "=", "[", "]", "\n", "test_dist_mean_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "key_list", ":", "\n", "        ", "mask", "=", "avg_dist", "==", "k", "\n", "val_dist", "=", "val_matrix", "[", "mask", "]", "\n", "test_dist", "=", "test_matrix", "[", "mask", "]", "\n", "val_dist_list", ".", "append", "(", "val_dist", ")", "\n", "test_dist_list", ".", "append", "(", "test_dist", ")", "\n", "val_dist_mean_list", ".", "append", "(", "np", ".", "mean", "(", "val_dist", ")", ")", "\n", "test_dist_mean_list", ".", "append", "(", "np", ".", "mean", "(", "test_dist", ")", ")", "\n", "", "fig", ",", "(", "ax1", ",", "ax2", ",", "ax3", ")", "=", "plt", ".", "subplots", "(", "3", ",", "1", ",", "figsize", "=", "(", "16.256", "*", "cm", ",", "25", "*", "cm", ")", ")", "\n", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax1", ".", "set_xlabel", "(", "AX1_XLABEL", ")", "\n", "ax1", ".", "set_ylabel", "(", "AX1_YLABEL", ")", "\n", "ax1", ".", "set_title", "(", "SEARCH_SPACE", ")", "\n", "ax1", ".", "plot", "(", "key_list", ",", "val_list_normalize", ",", "'o-'", ")", "\n", "ax2", ".", "set_xlabel", "(", "AX2_XLABEL", ")", "\n", "ax2", ".", "set_ylabel", "(", "AX2_YLABEL", ")", "\n", "ax2", ".", "plot", "(", "key_list", ",", "val_dist_mean_list", ",", "'.-'", ",", "label", "=", "'val'", ")", "\n", "ax2", ".", "plot", "(", "key_list", ",", "test_dist_mean_list", ",", "'*-'", ",", "color", "=", "'r'", ",", "label", "=", "'test'", ")", "\n", "ax2", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "\n", "min_val", ",", "max_val", "=", "min", "(", "validate_list", ")", ",", "max", "(", "validate_list", ")", "\n", "step_size", "=", "(", "max_val", "-", "min_val", ")", "/", "10", "\n", "step_wise_list", "=", "[", "min_val", "+", "step_size", "*", "i", "for", "i", "in", "range", "(", "1", ",", "10", ")", "]", "[", ":", ":", "-", "1", "]", "\n", "step_wise_list", ".", "insert", "(", "0", ",", "max_val", ")", "\n", "kt_list", "=", "[", "]", "\n", "for", "thr", "in", "step_wise_list", ":", "\n", "        ", "thr_idx", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "validate_list", ")", "if", "v", "<", "thr", "]", "\n", "kt_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "[", "validate_list", "[", "i", "]", "for", "i", "in", "thr_idx", "]", ",", "[", "testing_list", "[", "j", "]", "for", "j", "in", "thr_idx", "]", ")", "[", "0", "]", ")", "\n", "", "ax3", ".", "set_xlabel", "(", "AX3_XLABEL", ")", "\n", "ax3", ".", "set_ylabel", "(", "AX3_YLABEL", ")", "\n", "ax3", ".", "plot", "(", "step_wise_list", ",", "kt_list", ",", "'o-'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.predictor_analysis.get_kt_list": [[36, 56], ["collections.defaultdict", "collections.defaultdict", "open", "enumerate", "pickle.load", "total_results[].append", "total_top_results[].append"], "function", ["None"], ["def", "get_kt_list", "(", "all_files", ")", ":", "\n", "    ", "total_results", "=", "defaultdict", "(", "list", ")", "\n", "total_top_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "f", "in", "all_files", ":", "\n", "        ", "with", "open", "(", "f", ",", "'rb'", ")", "as", "fb", ":", "\n", "            ", "full_data", "=", "pickle", ".", "load", "(", "fb", ")", "[", "2", "]", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "full_data", ")", ":", "\n", "                ", "type", "=", "data", "[", "'type'", "]", "\n", "if", "type", "==", "'rea'", "or", "type", "==", "'oracle'", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "type", ",", "final_data", ",", "kt_list", ",", "kt_top_list", ",", "mutate_list", "=", "data", "[", "'type'", "]", ",", "data", "[", "'final_data'", "]", ",", "data", "[", "'kt_list'", "]", ",", "data", "[", "'kt_top_list'", "]", ",", "data", "[", "'mutate_list'", "]", "\n", "# type_new = type.replace('_', '-').upper()", "\n", "type_new", "=", "''", "\n", "# total_results[f'{type_new}{predictor_values[idx]}'].append(kt_list)", "\n", "total_results", "[", "f'{type_new}{idx}'", "]", ".", "append", "(", "kt_list", ")", "\n", "total_top_results", "[", "f'{type_new}{idx}'", "]", ".", "append", "(", "kt_top_list", ")", "\n", "# total_results[type].append(kt_list)", "\n", "", "", "", "", "return", "total_results", ",", "total_top_results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.predictor_analysis.mutate_rea_information": [[58, 135], ["collections.defaultdict", "networkx.Graph", "collections.defaultdict", "networkx.spring_layout", "networkx.draw_networkx_nodes", "networkx.draw_networkx_nodes", "networkx.draw_networkx_edges", "matplotlib.cm.ScalarMappable", "matplotlib.cm.ScalarMappable", "matplotlib.colorbar", "matplotlib.colorbar", "matplotlib.show", "open", "list", "len", "enumerate", "enumerate", "min", "max", "min", "max", "min", "max", "min", "max", "pickle.load", "enumerate", "collections.defaultdict.keys", "enumerate", "matplotlib.Normalize", "matplotlib.Normalize", "hashlib.sha256().hexdigest", "c_dict[].append", "hashlib.sha256().hexdigest", "nas_lib.data.data_nasbench_nlp.adj_distance", "dist_list.append", "len", "len", "predictor_analysis.draw_graph", "parent_node_list.append", "nas_lib.data.data_nasbench_nlp.adj_distance", "parent_node_color.append", "dist_list.append", "hashlib.sha256", "hashlib.sha256", "str().encode", "str().encode", "str", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.predictor_analysis.draw_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance"], ["", "def", "mutate_rea_information", "(", "all_files", ")", ":", "\n", "    ", "total_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "f", "in", "all_files", ":", "\n", "        ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "YlGn", "\n", "cmap2", "=", "plt", ".", "cm", ".", "autumn", "\n", "with", "open", "(", "f", ",", "'rb'", ")", "as", "fb", ":", "\n", "            ", "full_data", "=", "pickle", ".", "load", "(", "fb", ")", "[", "2", "]", "\n", "", "p_dict", "=", "{", "}", "\n", "c_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "data", "in", "full_data", ":", "\n", "            ", "type", "=", "data", "[", "'type'", "]", "\n", "if", "type", "==", "'rea'", ":", "\n", "                ", "p_list", ",", "c_list", "=", "data", "[", "'p_list'", "]", ",", "data", "[", "'c_list'", "]", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "p_list", ")", ":", "\n", "                    ", "p_info", "=", "sha256", "(", "str", "(", "p", "[", "6", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "p_dict", "[", "p_info", "]", "=", "p", "\n", "c_dict", "[", "p_info", "]", ".", "append", "(", "c_list", "[", "idx", "]", ")", "\n", "", "", "key_list", "=", "list", "(", "c_dict", ".", "keys", "(", ")", ")", "\n", "p_key_list", "=", "[", "]", "\n", "c_key_list", "=", "[", "]", "\n", "p_performance_list", "=", "[", "]", "\n", "c_performance_list", "=", "[", "]", "\n", "edge_list", "=", "[", "]", "\n", "edge_color_list", "=", "[", "]", "\n", "dist_list", "=", "[", "]", "\n", "p_key_dict", "=", "{", "}", "\n", "c_key_dict", "=", "{", "}", "\n", "counter", "=", "len", "(", "key_list", ")", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "key_list", ")", ":", "\n", "                ", "p_key_dict", "[", "k", "]", "=", "idx", "\n", "for", "idx", ",", "c", "in", "enumerate", "(", "c_dict", "[", "k", "]", ")", ":", "\n", "                    ", "c_k", "=", "sha256", "(", "str", "(", "c", "[", "6", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "c_key_dict", "[", "c_k", "]", "=", "counter", "+", "idx", "\n", "dist", "=", "adj_dist_nlp", "(", "(", "[", "]", ",", "p_dict", "[", "k", "]", "[", "1", "]", ",", "p_dict", "[", "k", "]", "[", "2", "]", ")", ",", "(", "[", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", ")", "\n", "dist_list", ".", "append", "(", "dist", ")", "\n", "", "counter", "=", "counter", "+", "len", "(", "c_dict", "[", "k", "]", ")", "\n", "", "for", "idx", ",", "k", "in", "enumerate", "(", "key_list", ")", ":", "\n", "                ", "parent", "=", "p_dict", "[", "k", "]", "\n", "children_list", "=", "c_dict", "[", "k", "]", "\n", "if", "len", "(", "children_list", ")", ">=", "1", ":", "\n", "                    ", "draw_graph", "(", "parent", ",", "children_list", ",", "p_key_list", ",", "c_key_list", ",", "\n", "p_key_dict", ",", "c_key_dict", ",", "edge_list", ",", "edge_color_list", ",", "p_performance_list", ",", "\n", "c_performance_list", ",", "G", ")", "\n", "", "", "", "parent_node_list", "=", "[", "]", "\n", "parent_node_color", "=", "[", "]", "\n", "for", "k1", "in", "key_list", ":", "\n", "            ", "for", "k2", "in", "key_list", ":", "\n", "                ", "if", "k1", "!=", "k2", ":", "\n", "                    ", "pair", "=", "(", "p_key_dict", "[", "k1", "]", ",", "p_key_dict", "[", "k2", "]", ")", "\n", "if", "pair", "not", "in", "parent_node_list", ":", "\n", "                        ", "parent_node_list", ".", "append", "(", "pair", ")", "\n", "dist", "=", "adj_dist_nlp", "(", "(", "[", "]", ",", "p_dict", "[", "k1", "]", "[", "1", "]", ",", "p_dict", "[", "k1", "]", "[", "2", "]", ")", ",", "(", "[", "]", ",", "p_dict", "[", "k2", "]", "[", "1", "]", ",", "p_dict", "[", "k2", "]", "[", "2", "]", ")", ")", "\n", "parent_node_color", ".", "append", "(", "dist", ")", "\n", "dist_list", ".", "append", "(", "dist", ")", "\n", "", "", "", "", "min_dist", ",", "max_dist", "=", "min", "(", "dist_list", ")", ",", "max", "(", "dist_list", ")", "\n", "p_min", ",", "p_max", "=", "min", "(", "p_performance_list", ")", ",", "max", "(", "p_performance_list", ")", "\n", "c_min", ",", "c_max", "=", "min", "(", "c_performance_list", ")", ",", "max", "(", "c_performance_list", ")", "\n", "node_min", ",", "node_max", "=", "min", "(", "p_min", ",", "c_min", ")", ",", "max", "(", "p_max", ",", "c_max", ")", "\n", "pos", "=", "nx", ".", "spring_layout", "(", "G", ")", "# positions for all nodes", "\n", "nx", ".", "draw_networkx_nodes", "(", "G", ",", "pos", ",", "nodelist", "=", "p_key_list", ",", "node_color", "=", "p_performance_list", ",", "cmap", "=", "cmap2", ",", "\n", "vmin", "=", "node_min", ",", "vmax", "=", "node_max", ",", "alpha", "=", "0.8", ",", "node_size", "=", "50", ")", "\n", "nx", ".", "draw_networkx_nodes", "(", "G", ",", "pos", ",", "nodelist", "=", "c_key_list", ",", "node_color", "=", "c_performance_list", ",", "cmap", "=", "cmap2", ",", "alpha", "=", "0.8", ",", "\n", "vmin", "=", "node_min", ",", "vmax", "=", "node_max", ",", "node_size", "=", "10", ")", "\n", "nx", ".", "draw_networkx_edges", "(", "G", ",", "pos", ",", "edgelist", "=", "edge_list", ",", "edge_color", "=", "edge_color_list", ",", "edge_vmin", "=", "min_dist", ",", "\n", "edge_vmax", "=", "max_dist", ",", "edge_cmap", "=", "cmap", ")", "\n", "# nx.draw_networkx_edges(G, pos, edgelist=parent_node_list, edge_color=parent_node_color, edge_vmin=min_dist,", "\n", "#                        edge_vmax=max_dist, edge_cmap=cmap)", "\n", "# nx.draw(G, with_labels=False, font_weight='bold', node_size=3)", "\n", "sm", "=", "plt", ".", "cm", ".", "ScalarMappable", "(", "cmap", "=", "cmap", ",", "norm", "=", "plt", ".", "Normalize", "(", "vmin", "=", "min_dist", ",", "vmax", "=", "max_dist", ")", ")", "\n", "sm2", "=", "plt", ".", "cm", ".", "ScalarMappable", "(", "cmap", "=", "cmap2", ",", "norm", "=", "plt", ".", "Normalize", "(", "vmin", "=", "node_min", ",", "vmax", "=", "node_max", ")", ")", "\n", "sm", ".", "_A", "=", "[", "]", "\n", "sm2", ".", "_A", "=", "[", "]", "\n", "plt", ".", "colorbar", "(", "sm", ")", "\n", "plt", ".", "colorbar", "(", "sm2", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "return", "total_results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.predictor_analysis.mutate_information": [[137, 155], ["collections.defaultdict", "networkx.Graph", "collections.defaultdict", "open", "pickle.load", "print"], "function", ["None"], ["", "def", "mutate_information", "(", "all_files", ")", ":", "\n", "    ", "total_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "f", "in", "all_files", ":", "\n", "        ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "YlGn", "\n", "with", "open", "(", "f", ",", "'rb'", ")", "as", "fb", ":", "\n", "            ", "full_data", "=", "pickle", ".", "load", "(", "fb", ")", "[", "2", "]", "\n", "", "p_dict", "=", "{", "}", "\n", "c_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "data", "in", "full_data", ":", "\n", "            ", "type", "=", "data", "[", "'type'", "]", "\n", "if", "type", "==", "'rea'", "or", "type", "==", "'oracle'", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "type", ",", "final_data", ",", "kt_list", ",", "mutate_list", "=", "data", "[", "'type'", "]", ",", "data", "[", "'final_data'", "]", ",", "data", "[", "'kt_list'", "]", ",", "data", "[", "'mutate_list'", "]", "\n", "print", "(", "mutate_list", ")", "\n", "", "", "", "return", "total_results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.predictor_analysis.draw_graph": [[157, 174], ["hashlib.sha256().hexdigest", "graph.add_node", "p_key_list.append", "p_performance_list.append", "hashlib.sha256().hexdigest", "c_key_list.append", "graph.add_node", "graph.add_edge", "edge_list.append", "nas_lib.data.data_nasbench_nlp.adj_distance", "edge_color_list.append", "c_performance_list.append", "hashlib.sha256", "str().encode", "hashlib.sha256", "str().encode", "str", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance"], ["", "def", "draw_graph", "(", "parent", ",", "child_list", ",", "p_key_list", ",", "c_key_list", ",", "p_key_dict", ",", "c_key_dict", ",", "\n", "edge_list", ",", "edge_color_list", ",", "p_performance_list", ",", "\n", "c_performance_list", ",", "graph", ")", ":", "\n", "# add parent node", "\n", "    ", "p_key", "=", "sha256", "(", "str", "(", "parent", "[", "6", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "graph", ".", "add_node", "(", "p_key_dict", "[", "p_key", "]", ")", "\n", "p_key_list", ".", "append", "(", "p_key_dict", "[", "p_key", "]", ")", "\n", "p_performance_list", ".", "append", "(", "parent", "[", "4", "]", ")", "\n", "for", "c", "in", "child_list", ":", "\n", "        ", "c_k", "=", "sha256", "(", "str", "(", "c", "[", "6", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "c_key_list", ".", "append", "(", "c_key_dict", "[", "c_k", "]", ")", "\n", "graph", ".", "add_node", "(", "c_key_dict", "[", "c_k", "]", ")", "\n", "graph", ".", "add_edge", "(", "p_key_dict", "[", "p_key", "]", ",", "c_key_dict", "[", "c_k", "]", ")", "\n", "edge_list", ".", "append", "(", "(", "p_key_dict", "[", "p_key", "]", ",", "c_key_dict", "[", "c_k", "]", ")", ")", "\n", "dist", "=", "adj_dist_nlp", "(", "(", "[", "]", ",", "parent", "[", "1", "]", ",", "parent", "[", "2", "]", ")", ",", "(", "[", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", ")", "\n", "edge_color_list", ".", "append", "(", "dist", ")", "\n", "c_performance_list", ".", "append", "(", "c", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.predictor_analysis.visual_kt_list": [[176, 236], ["kt_results.items", "matplotlib.subplots", "kt_results_dict.items", "ax.grid", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "predictor_analysis.get_rate", "numpy.nan_to_num", "numpy.mean", "numpy.std", "kt_results_dict.pop", "kt_results_dict.pop", "kt_results_dict.pop", "kt_results_dict.pop", "numpy.array", "numpy.array", "matplotlib.plot", "nas_lib.visualize.visualize_close_domain_reverse.draw_plot_nasbench_nlp", "ValueError", "str", "str", "numpy.array", "nas_lib.visualize.visualize_close_domain_reverse.draw_plot_nasbench_asr", "int", "int", "nas_lib.visualize.visualize_close_domain_reverse.draw_plot_nasbench_201"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.predictor_analysis.get_rate", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.draw_plot_nasbench_201"], ["", "", "def", "visual_kt_list", "(", "kt_results", ",", "results_folder", ",", "search_space", ",", "comparison_type", "=", "\"relu_celu\"", ",", "train_dataset", "=", "\"cifar100\"", ")", ":", "\n", "    ", "if", "comparison_type", "==", "\"relu_celu\"", ":", "\n", "        ", "model_lists_nasbench", "=", "[", "'RELU'", ",", "'CELU'", ",", "'NPENAS-GT'", "]", "\n", "model_masks_nasbench", "=", "[", "True", ",", "True", ",", "False", "]", "\n", "", "elif", "comparison_type", "==", "\"scale_factor\"", ":", "\n", "        ", "model_lists_nasbench", "=", "[", "'SCALING FACTOR=#'", ",", "'SCALING FACTOR=*'", ",", "'NPENAS-GT'", "]", "\n", "model_masks_nasbench", "=", "[", "True", ",", "True", ",", "False", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"comparison type {comparison_type} does not support at present!\"", ")", "\n", "", "if", "comparison_type", "==", "\"scale_factor\"", ":", "\n", "        ", "rate", "=", "get_rate", "(", "results_folder", ")", "\n", "key1", "=", "\"SCALING FACTOR=\"", "+", "str", "(", "int", "(", "rate", "[", "0", "]", ")", ")", "\n", "key2", "=", "\"SCALING FACTOR=\"", "+", "str", "(", "int", "(", "rate", "[", "1", "]", ")", ")", "\n", "", "kt_results_dict", "=", "{", "}", "\n", "kt_results_std_dict", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "kt_results", ".", "items", "(", ")", ":", "\n", "        ", "np_v", "=", "np", ".", "nan_to_num", "(", "np", ".", "array", "(", "v", ")", ")", "\n", "kt_results_dict", "[", "k", "]", "=", "np", ".", "mean", "(", "np_v", ",", "axis", "=", "0", ")", "\n", "kt_results_std_dict", "[", "k", "]", "=", "np", ".", "std", "(", "np_v", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "comparison_type", "==", "\"scale_factor\"", ":", "\n", "        ", "kt_results_dict", "[", "key1", "]", "=", "kt_results_dict", "[", "\"0\"", "]", "\n", "kt_results_dict", "[", "key2", "]", "=", "kt_results_dict", "[", "\"1\"", "]", "\n", "kt_results_dict", ".", "pop", "(", "\"0\"", ")", "\n", "kt_results_dict", ".", "pop", "(", "\"1\"", ")", "\n", "\n", "", "if", "comparison_type", "==", "\"relu_celu\"", ":", "\n", "        ", "kt_results_dict", "[", "\"RELU\"", "]", "=", "kt_results_dict", "[", "\"0\"", "]", "\n", "kt_results_dict", "[", "\"CELU\"", "]", "=", "kt_results_dict", "[", "\"1\"", "]", "\n", "kt_results_dict", ".", "pop", "(", "\"0\"", ")", "\n", "kt_results_dict", ".", "pop", "(", "\"1\"", ")", "\n", "\n", "", "if", "args", ".", "search_space", "==", "\"nasbench_101\"", ":", "\n", "        ", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", "]", ")", "\n", "", "else", ":", "\n", "        ", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", "]", ")", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "for", "k", ",", "v", "in", "kt_results_dict", ".", "items", "(", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "idx", ",", "v", ",", "label", "=", "k", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "\n", "", "ax", ".", "grid", "(", "False", ")", "\n", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Kendall Tau Correlation'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "# plt.legend(loc='upper right')", "\n", "plt", ".", "show", "(", ")", "\n", "if", "search_space", "==", "'nasbench_nlp'", ":", "\n", "        ", "draw_plot_nasbench_nlp", "(", "results_folder", ",", "draw_type", "=", "'ERRORBAR'", ",", "model_lists", "=", "model_lists_nasbench", ",", "\n", "model_masks", "=", "model_masks_nasbench", ",", "order", "=", "False", ",", "comparison_type", "=", "comparison_type", ")", "\n", "", "elif", "search_space", "==", "'nasbench_asr'", ":", "\n", "        ", "draw_plot_nasbench_asr", "(", "results_folder", ",", "draw_type", "=", "'ERRORBAR'", ",", "model_lists", "=", "model_lists_nasbench", ",", "\n", "model_masks", "=", "model_masks_nasbench", ",", "order", "=", "False", ",", "comparison_type", "=", "comparison_type", ")", "\n", "", "elif", "search_space", "==", "'nasbench_201'", ":", "\n", "# cifar10-valid, cifar100, ImageNet16-120", "\n", "        ", "draw_plot_nasbench_201", "(", "results_folder", ",", "draw_type", "=", "'ERRORBAR'", ",", "model_lists", "=", "model_lists_nasbench", ",", "\n", "model_masks", "=", "model_masks_nasbench", ",", "train_data", "=", "train_dataset", ",", "order", "=", "False", ",", "\n", "comparison_type", "=", "comparison_type", ")", "\n", "", "elif", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_ss_analysis.predictor_analysis.get_rate": [[238, 250], ["os.listdir", "os.path.join", "open", "pickle.load"], "function", ["None"], ["", "", "def", "get_rate", "(", "folder", ")", ":", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "folder", ")", "\n", "file_name", "=", "\"\"", "\n", "for", "f", "in", "files", ":", "\n", "        ", "if", "\"full\"", "not", "in", "f", "and", "\"log\"", "not", "in", "f", ":", "\n", "            ", "file_name", "=", "f", "\n", "break", "\n", "", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "fs", ":", "\n", "        ", "algorithm_params", ",", "metann_params", ",", "results", ",", "walltimes", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "rate", "=", "[", "algorithm_params", "[", "0", "]", "[", "\"rate\"", "]", ",", "algorithm_params", "[", "1", "]", "[", "\"rate\"", "]", "]", "\n", "return", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_lib.configs.meta_neuralnet_params": [[4, 24], ["print", "sys.exit"], "function", ["None"], ["def", "meta_neuralnet_params", "(", "param_str", ")", ":", "\n", "    ", "if", "param_str", "==", "'nasbench_case1'", ":", "\n", "        ", "params", "=", "{", "'search_space'", ":", "'nasbench_case1'", ",", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "20", ",", "\n", "'epochs'", ":", "150", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".01", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", "}", "\n", "", "elif", "param_str", "==", "'nasbench_case2'", ":", "\n", "        ", "params", "=", "{", "'search_space'", ":", "'nasbench_case2'", ",", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "20", ",", "\n", "'epochs'", ":", "150", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".01", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", "}", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'search_space'", ":", "'nasbench_201'", ",", "'loss'", ":", "'mape'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "200", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".001", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", "}", "\n", "", "elif", "param_str", "==", "'nasbench_nlp'", ":", "\n", "        ", "params", "=", "{", "'search_space'", ":", "'nasbench_nlp'", ",", "'loss'", ":", "'mape'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "200", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".001", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", "}", "\n", "", "elif", "param_str", "==", "'nasbench_asr'", ":", "\n", "        ", "params", "=", "{", "'search_space'", ":", "'nasbench_asr'", ",", "'loss'", ":", "'mape'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "200", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".001", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", "}", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid meta neural net params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_lib.configs.algo_params_close_domain": [[26, 340], ["print", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "ValueError", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "ValueError", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "print", "sys.exit"], "function", ["None"], ["", "def", "algo_params_close_domain", "(", "param_str", ",", "search_budget", "=", "100", ",", "comparison_type", "=", "\"algorithms\"", ",", "\n", "nasbench_201_dataset", "=", "\"cifar100\"", ",", "\n", "relu_celu_comparison_algo_type", "=", "\"NPENAS_BO\"", ")", ":", "\n", "    ", "\"\"\"\n      Return params list based on param_str.\n      These are the parameters used to produce the figures in the paper\n      For AlphaX and Reinforcement Learning, we used the corresponding github repos:\n      https://github.com/linnanwang/AlphaX-NASBench101\n      https://github.com/automl/nas_benchmarks\n    \"\"\"", "\n", "params", "=", "[", "]", "\n", "if", "comparison_type", "==", "\"relu_celu\"", ":", "\n", "        ", "if", "param_str", "==", "'nasbench101_case2'", "and", "relu_celu_comparison_algo_type", "==", "\"NPENAS_NP\"", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'rate'", ":", "10.", ",", "'activation_fn'", ":", "'relu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'rate'", ":", "10.", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench101_case2'", "and", "relu_celu_comparison_algo_type", "==", "\"NPENAS_BO\"", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'activation_fn'", ":", "'relu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'activation_fn'", ":", "'relu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_nlp'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'mutation_rate'", ":", "0.3", ",", "'activation_fn'", ":", "'relu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'mutation_rate'", ":", "0.3", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "0.3", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_asr'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'mutation_rate'", ":", "1.0", ",", "'activation_fn'", ":", "'relu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'mutation_rate'", ":", "1.0", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "1.0", "}", ")", "\n", "", "", "elif", "comparison_type", "==", "\"scalar_compare\"", ":", "\n", "        ", "if", "param_str", "==", "'nasbench101_case2'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "\n", "'epochs'", ":", "300", ",", "'rate'", ":", "10.", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "\n", "'epochs'", ":", "300", ",", "'rate'", ":", "100.", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "            ", "if", "nasbench_201_dataset", "==", "\"cifar10-valid\"", ":", "\n", "                ", "nasbench_201_rate1", "=", "7.", "\n", "", "elif", "nasbench_201_dataset", "==", "\"cifar100\"", ":", "\n", "                ", "nasbench_201_rate1", "=", "30.", "\n", "", "elif", "nasbench_201_dataset", "==", "\"ImageNet16-120\"", ":", "\n", "                ", "nasbench_201_rate1", "=", "55.", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f\"nasbench 201 dataset type {nasbench_201_dataset} does not support at present!\"", ")", "\n", "\n", "", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'rate'", ":", "nasbench_201_rate1", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "\n", "'epochs'", ":", "300", ",", "'rate'", ":", "100.", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_nlp'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "\n", "'epochs'", ":", "300", ",", "'mutation_rate'", ":", "0.3", ",", "'rate'", ":", "5.", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'mutation_rate'", ":", "0.3", ",", "'rate'", ":", "100.", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "0.3", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_asr'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "\n", "'epochs'", ":", "300", ",", "'mutation_rate'", ":", "1.0", ",", "'rate'", ":", "25.", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_new'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'mutation_rate'", ":", "1.0", ",", "'rate'", ":", "100.", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "1.0", "}", ")", "\n", "", "", "elif", "comparison_type", "==", "\"algorithm\"", ":", "\n", "        ", "if", "param_str", "==", "'nasbench101_case1'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'random'", ",", "'total_queries'", ":", "search_budget", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolution'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "30", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'tournament_size'", ":", "10", ",", "'mutation_rate'", ":", "1.0", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'encode_paths'", ":", "False", ",", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "\n", "'candidate_nums'", ":", "100", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'adj'", ",", "'verbose'", ":", "1", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'nasbot'", ",", "'verbose'", ":", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench101_case2'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'random'", ",", "'total_queries'", ":", "search_budget", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolution'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "30", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'tournament_size'", ":", "10", ",", "'mutation_rate'", ":", "1.0", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'encode_paths'", ":", "True", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", "}", ")", "\n", "# params.append({'algo_name': 'gin_uncertainty_predictor', 'total_queries': search_budget,", "\n", "#                'agent': 'gin_gaussian', 'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005,", "\n", "#                'candidate_nums': 100, 'epochs': 1000, 'activation_fn': 'relu'})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'rate'", ":", "10.", "}", ")", "\n", "# params.append({'algo_name': 'gin_predictor', 'total_queries': search_budget, 'agent': 'gin_predictor',", "\n", "#                'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005, 'candidate_nums': 100, 'epochs': 300,", "\n", "#                'rate': 100., 'activation_fn': 'relu'})", "\n", "# params.append({'algo_name': 'gin_predictor', 'total_queries': search_budget, 'agent': 'gin_predictor',", "\n", "#                'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005, 'candidate_nums': 100, 'epochs': 300,", "\n", "#                'rate': 100., 'activation_fn': 'celu'})", "\n", "# params.append({'algo_name': 'gin_predictor_new', 'total_queries': search_budget, 'agent': 'gin_predictor',", "\n", "#                'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005, 'candidate_nums': 100, 'epochs': 300})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'adj'", ",", "'verbose'", ":", "1", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'nasbot'", ",", "'verbose'", ":", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'random'", ",", "'total_queries'", ":", "search_budget", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolution'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "30", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'tournament_size'", ":", "10", ",", "'mutation_rate'", ":", "1.0", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'deterministic'", ":", "True", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "True", ",", "'eva_new'", ":", "False", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", "}", ")", "\n", "# params.append({'algo_name': 'gin_uncertainty_predictor', 'total_queries': search_budget,", "\n", "#                'agent': 'gin_gaussian', 'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005,", "\n", "#                'candidate_nums': 100, 'epochs': 1000, 'activation_fn': 'relu'})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "# params.append({'algo_name': 'gin_predictor', 'total_queries': search_budget, 'agent': 'gin_predictor',", "\n", "#                'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005, 'candidate_nums': 100, 'epochs': 300,", "\n", "#                'rate': 7.})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'rate'", ":", "100.", "}", ")", "\n", "# params.append({'algo_name': 'gin_predictor_new', 'total_queries': search_budget, 'agent': 'gin_predictor',", "\n", "#                'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005, 'candidate_nums': 100, 'epochs': 300})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'adj'", ",", "'verbose'", ":", "0", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'nasbot'", ",", "'verbose'", ":", "0", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_nlp'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'random'", ",", "'total_queries'", ":", "search_budget", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolution'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "30", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'tournament_size'", ":", "10", ",", "'mutation_rate'", ":", "0.3", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'deterministic'", ":", "True", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "True", ",", "'eva_new'", ":", "False", ",", "'mutation_rate'", ":", "0.3", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", ",", "'mutation_rate'", ":", "0.3", "}", ")", "\n", "# params.append({'algo_name': 'gin_uncertainty_predictor', 'total_queries': search_budget,", "\n", "#                'agent': 'gin_gaussian', 'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005,", "\n", "#                'candidate_nums': 100, 'epochs': 1000, 'mutation_rate': 0.3, 'activation_fn': 'relu'})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'mutation_rate'", ":", "0.3", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'mutation_rate'", ":", "0.3", ",", "'rate'", ":", "5.", "}", ")", "\n", "# params.append({'algo_name': 'gin_predictor_new', 'total_queries': search_budget, 'agent': 'gin_predictor',", "\n", "#                'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005, 'candidate_nums': 100, 'epochs': 300,", "\n", "#                'mutation_rate': 0.3, 'rate': 5.})", "\n", "# params.append({'algo_name': 'oracle', 'total_queries': search_budget, 'allow_isomorphisms': False,", "\n", "#                'candidate_nums': 100, 'num_init': 10, 'k': 10, 'mutation_rate': -1})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "0.3", "}", ")", "\n", "# params.append({'algo_name': 'oracle', 'total_queries': search_budget, 'allow_isomorphisms': False,", "\n", "#                'candidate_nums': 100, 'num_init': 10, 'k': 10, 'mutation_rate': 0.5})", "\n", "# params.append({'algo_name': 'oracle', 'total_queries': search_budget, 'allow_isomorphisms': False,", "\n", "#                'candidate_nums': 100, 'num_init': 10, 'k': 10, 'mutation_rate': 0.7})", "\n", "# params.append({'algo_name': 'oracle', 'total_queries': search_budget, 'allow_isomorphisms': False,", "\n", "#                'candidate_nums': 100, 'num_init': 10, 'k': 10, 'mutation_rate': 1.0})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'adj'", ",", "'verbose'", ":", "1", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'nasbot'", ",", "'verbose'", ":", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_asr'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'random'", ",", "'total_queries'", ":", "search_budget", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolution'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "30", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'tournament_size'", ":", "10", ",", "'mutation_rate'", ":", "-", "1", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'deterministic'", ":", "True", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "True", ",", "'eva_new'", ":", "False", ",", "'mutation_rate'", ":", "1.0", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", ",", "'mutation_rate'", ":", "1.0", "}", ")", "\n", "# params.append({'algo_name': 'gin_uncertainty_predictor', 'total_queries': search_budget,", "\n", "#                'agent': 'gin_gaussian', 'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005,", "\n", "#                'candidate_nums': 100, 'epochs': 1000, 'mutation_rate': 1.0, 'activation_fn': 'relu'})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", ",", "'mutation_rate'", ":", "1.0", ",", "'activation_fn'", ":", "'celu'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'mutation_rate'", ":", "1.0", ",", "'rate'", ":", "25.", "}", ")", "\n", "# params.append({'algo_name': 'gin_predictor_new', 'total_queries': search_budget, 'agent': 'gin_predictor',", "\n", "#                'num_init': 10, 'allow_isomorphisms': False, 'lr': 0.005, 'candidate_nums': 100, 'epochs': 300,", "\n", "#                'mutation_rate': 1.0, 'rate': 25.})", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'oracle'", ",", "'total_queries'", ":", "search_budget", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'mutation_rate'", ":", "1.0", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'adj'", ",", "'verbose'", ":", "1", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gp_bayesopt'", ",", "'total_queries'", ":", "search_budget", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'distance'", ":", "'nasbot'", ",", "'verbose'", ":", "1", "}", ")", "\n", "", "elif", "param_str", "==", "'scalar_prior'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_scalar_10'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'scalar'", ":", "10", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_scalar_30'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'scalar'", ":", "30", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_scalar_50'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'scalar'", ":", "50", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_scalar_70'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'scalar'", ":", "70", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_scalar_100'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'scalar'", ":", "100", "}", ")", "\n", "", "elif", "param_str", "==", "'evaluation_compare'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolutionary_case1'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "150", ",", "\n", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'tournament_size'", ":", "2", ",", "'mutation_rate'", ":", "1.0", ",", "'candidate_num'", ":", "100", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolutionary_case2'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "150", ",", "\n", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'tournament_size'", ":", "2", ",", "'mutation_rate'", ":", "1.0", ",", "'candidate_num'", ":", "100", ",", "\n", "'mutation_num'", ":", "10", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolutionary_case2_20'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "150", ",", "\n", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'tournament_size'", ":", "2", ",", "'mutation_rate'", ":", "1.0", ",", "'candidate_num'", ":", "100", ",", "\n", "'mutation_num'", ":", "20", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolutionary_case2_30'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "150", ",", "\n", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "'tournament_size'", ":", "2", ",", "'mutation_rate'", ":", "1.0", ",", "'candidate_num'", ":", "100", ",", "\n", "'mutation_num'", ":", "30", "}", ")", "\n", "", "elif", "param_str", "==", "'box_compare_case1'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'encode_paths'", ":", "False", ",", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "\n", "'candidate_nums'", ":", "100", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", "}", ")", "\n", "", "elif", "param_str", "==", "'box_compare_case2'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'encode_paths'", ":", "True", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", "}", ")", "\n", "", "elif", "param_str", "==", "'experiment'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "print", "(", "'invalid algorithm params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Comparison type {comparison_type} does not support at present!\"", ")", "\n", "", "print", "(", "'* Running experiment: '", "+", "param_str", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_lib.configs.algo_params_close_domain_diff_training_nums": [[342, 389], ["params.append", "print", "params.append", "print", "sys.exit", "params.append", "params.append", "params.append", "params.append", "params.append", "NotImplementedError", "params.append", "params.append", "NotImplementedError"], "function", ["None"], ["", "def", "algo_params_close_domain_diff_training_nums", "(", "param_str", ",", "search_stratege", ",", "search_budget", "=", "100", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "params", ".", "append", "(", "[", "10", ",", "20", ",", "40", ",", "60", ",", "80", ",", "100", ",", "120", ",", "140", "]", ")", "\n", "if", "param_str", "==", "'compare_diff_training_architectures_case1'", ":", "\n", "        ", "if", "search_stratege", "==", "'gin_predictor'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", "}", ")", "\n", "", "elif", "search_stratege", "==", "'gin_uncertainty_predictor'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", "}", ")", "\n", "", "elif", "search_stratege", "==", "'bananas'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", "}", ")", "\n", "", "elif", "search_stratege", "==", "'bananas_f'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'encode_paths'", ":", "False", ",", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "\n", "'candidate_nums'", ":", "100", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "elif", "param_str", "==", "'compare_diff_training_architectures_case2'", ":", "\n", "        ", "if", "search_stratege", "==", "'gin_predictor'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "\n", "'epochs'", ":", "300", "}", ")", "\n", "", "elif", "search_stratege", "==", "'gin_uncertainty_predictor'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "\n", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "1000", "}", ")", "\n", "", "elif", "search_stratege", "==", "'bananas'", ":", "\n", "            ", "params", ".", "append", "(", "\n", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'encode_paths'", ":", "True", "}", ")", "\n", "", "elif", "search_stratege", "==", "'bananas_f'", ":", "\n", "            ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "\n", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "print", "(", "'* Running experiment: '", "+", "param_str", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_lib.configs.algo_params_open_domain": [[391, 404], ["print", "NotImplementedError", "str"], "function", ["None"], ["", "def", "algo_params_open_domain", "(", "param_str", ")", ":", "\n", "    ", "if", "param_str", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "param", "=", "{", "'algo_name'", ":", "'gin_uncertainty_predictor'", ",", "'total_queries'", ":", "150", ",", "'agent'", ":", "'gin_gaussian'", ",", "'num_init'", ":", "10", ",", "\n", "'mutation_rate'", ":", "1.0", ",", "'k'", ":", "10", ",", "'epochs'", ":", "1000", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", "0.005", ",", "'encode_path'", ":", "True", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'candidate_nums'", ":", "100", "}", "\n", "", "elif", "param_str", "==", "'gin_predictor'", ":", "\n", "        ", "param", "=", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "100", ",", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'k'", ":", "10", ",", "'epochs'", ":", "300", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", "0.005", ",", "'encode_path'", ":", "True", ",", "\n", "'candidate_nums'", ":", "100", "}", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This algorithm have not implement!\"", ")", "\n", "", "print", "(", "'* Running experiment: '", "+", "str", "(", "param", ")", ")", "\n", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_training_architectures_num_case1": [[9, 25], ["algo_compare_diff_training_nums.run_diff_gin_uncertainty_predictor_case1", "algo_compare_diff_training_nums.run_diff_gin_predictor_case1", "algo_compare_diff_training_nums.run_diff_bananas_predictor_case1", "algo_compare_diff_training_nums.run_diff_bananas_predictor_case1", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_gin_uncertainty_predictor_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_gin_predictor_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_bananas_predictor_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_bananas_predictor_case1"], ["def", "run_diff_training_architectures_num_case1", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "\n", "search_strategy", "=", "'gin_predictor'", ")", ":", "\n", "    ", "if", "search_strategy", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "return", "run_diff_gin_uncertainty_predictor_case1", "(", "algo_params", "=", "algo_params", ",", "search_space", "=", "search_space", ",", "\n", "gpu", "=", "gpu", ",", "logger", "=", "logger", ")", "\n", "", "elif", "search_strategy", "==", "'gin_predictor'", ":", "\n", "        ", "return", "run_diff_gin_predictor_case1", "(", "algo_params", "=", "algo_params", ",", "search_space", "=", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ")", "\n", "", "elif", "search_strategy", "==", "'bananas'", ":", "\n", "        ", "return", "run_diff_bananas_predictor_case1", "(", "algo_params", "=", "algo_params", ",", "metann_params", "=", "metann_params", ",", "\n", "search_space", "=", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ")", "\n", "", "elif", "search_strategy", "==", "'bananas_f'", ":", "\n", "        ", "return", "run_diff_bananas_predictor_case1", "(", "algo_params", "=", "algo_params", ",", "metann_params", "=", "metann_params", ",", "\n", "search_space", "=", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_gin_predictor_case1": [[27, 35], ["copy.deepcopy", "copy.deepcopy.pop", "predictor.gin_predictor_train_num_constrict_case1", "algo_compare.compute_best_test_losses_case1"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_train_num_constrict_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1"], ["", "", "def", "run_diff_gin_predictor_case1", "(", "algo_params", ",", "search_space", ",", "gpu", ",", "logger", ")", ":", "\n", "    ", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "data", "=", "gin_predictor_train_num_constrict_case1", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case1", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_gin_uncertainty_predictor_case1": [[37, 45], ["copy.deepcopy", "copy.deepcopy.pop", "predictor.gin_uncertainty_predictor_train_num_constrict_case1", "algo_compare.compute_best_test_losses_case1"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_predictor_train_num_constrict_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1"], ["", "def", "run_diff_gin_uncertainty_predictor_case1", "(", "algo_params", ",", "search_space", ",", "gpu", ",", "logger", ")", ":", "\n", "    ", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "data", "=", "gin_uncertainty_predictor_train_num_constrict_case1", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case1", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_bananas_predictor_case1": [[47, 57], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "bananas.bananas_diff_training_nums_case1", "algo_compare.compute_best_test_losses_case1"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_diff_training_nums_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1"], ["", "def", "run_diff_bananas_predictor_case1", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "data", "=", "bananas_diff_training_nums_case1", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case1", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_training_architectures_num_case2": [[59, 75], ["algo_compare_diff_training_nums.run_diff_gin_uncertainty_predictor_case2", "algo_compare_diff_training_nums.run_diff_gin_predictor_case2", "algo_compare_diff_training_nums.run_diff_bananas_predictor_case2", "algo_compare_diff_training_nums.run_diff_bananas_predictor_case2", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_gin_uncertainty_predictor_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_gin_predictor_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_bananas_predictor_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_bananas_predictor_case2"], ["", "def", "run_diff_training_architectures_num_case2", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "\n", "search_strategy", "=", "'gin_predictor'", ")", ":", "\n", "    ", "if", "search_strategy", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "return", "run_diff_gin_uncertainty_predictor_case2", "(", "algo_params", "=", "algo_params", ",", "search_space", "=", "search_space", ",", "\n", "gpu", "=", "gpu", ",", "logger", "=", "logger", ")", "\n", "", "elif", "search_strategy", "==", "'gin_predictor'", ":", "\n", "        ", "return", "run_diff_gin_predictor_case2", "(", "algo_params", "=", "algo_params", ",", "search_space", "=", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ")", "\n", "", "elif", "search_strategy", "==", "'bananas'", ":", "\n", "        ", "return", "run_diff_bananas_predictor_case2", "(", "algo_params", "=", "algo_params", ",", "metann_params", "=", "metann_params", ",", "\n", "search_space", "=", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ")", "\n", "", "elif", "search_strategy", "==", "'bananas_f'", ":", "\n", "        ", "return", "run_diff_bananas_predictor_case2", "(", "algo_params", "=", "algo_params", ",", "metann_params", "=", "metann_params", ",", "\n", "search_space", "=", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_gin_predictor_case2": [[77, 85], ["copy.deepcopy", "copy.deepcopy.pop", "predictor.gin_predictor_train_num_constrict_case2", "algo_compare.compute_best_test_losses_case2"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_train_num_constrict_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2"], ["", "", "def", "run_diff_gin_predictor_case2", "(", "algo_params", ",", "search_space", ",", "gpu", ",", "logger", ")", ":", "\n", "    ", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "data", "=", "gin_predictor_train_num_constrict_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_gin_uncertainty_predictor_case2": [[87, 95], ["copy.deepcopy", "copy.deepcopy.pop", "predictor.gin_uncertainty_train_num_constrict_case2", "algo_compare.compute_best_test_losses_case2"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_train_num_constrict_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2"], ["", "def", "run_diff_gin_uncertainty_predictor_case2", "(", "algo_params", ",", "search_space", ",", "gpu", ",", "logger", ")", ":", "\n", "    ", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "data", "=", "gin_uncertainty_train_num_constrict_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare_diff_training_nums.run_diff_bananas_predictor_case2": [[97, 107], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "bananas.bananas_training_num_diff_case2", "algo_compare.compute_best_test_losses_case2"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_training_num_diff_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2"], ["", "def", "run_diff_bananas_predictor_case2", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "data", "=", "bananas_training_num_diff_case2", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn": [[6, 32], ["numpy.array", "numpy.random.randint", "numpy.argsort", "numpy.mean", "numpy.sqrt", "numpy.random.normal", "numpy.argsort", "numpy.var", "np.array.cpu().numpy", "numpy.argsort", "print", "sys.exit", "np.array.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal"], ["def", "acq_fn", "(", "predictions", ",", "explore_type", "=", "'its'", ",", "reverse", "=", "False", ",", "get_samples", "=", "False", ")", ":", "\n", "    ", "if", "explore_type", "!=", "'its_vae'", "and", "explore_type", "!=", "'its_vae_ensemble'", ":", "\n", "        ", "predictions", "=", "np", ".", "array", "(", "predictions", ")", "\n", "# Thompson sampling (TS) acquisition function", "\n", "", "if", "explore_type", "==", "'ts'", ":", "\n", "        ", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "predictions", ".", "shape", "[", "0", "]", ")", "\n", "ts", "=", "predictions", "[", "rand_ind", ",", ":", "]", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "ts", ")", "\n", "# Independent Thompson sampling (ITS) acquisition function", "\n", "", "elif", "explore_type", "==", "'its'", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "predictions", ",", "axis", "=", "0", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "predictions", ",", "axis", "=", "0", ")", ")", "\n", "samples", "=", "np", ".", "random", ".", "normal", "(", "mean", ",", "std", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "samples", ")", "\n", "if", "get_samples", ":", "\n", "            ", "return", "sorted_indices", ",", "samples", "\n", "", "else", ":", "\n", "            ", "return", "sorted_indices", "\n", "", "", "elif", "explore_type", "==", "'its_vae'", ":", "\n", "        ", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "np_pred", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Invalid exploration type in meta neuralnet search'", ",", "explore_type", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "return", "sorted_indices", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_case1": [[13, 80], ["torch.device", "search_space.generate_random_dataset_gin", "len", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "numpy.array", "search_space.get_candidates_gin", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "acquisition_functions.acq_fn", "utils.utils_data.nasbench2graph", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "utils.utils_data.nasbench2graph", "candiate_edge_list.append", "candiate_node_list.append", "search_space.query_arch_gin", "search_space.generate_random_dataset_gin.append", "logger.info", "logger.info", "len", "sorted", "min", "numpy.mean", "len", "numpy.abs", "mean_train.cpu().numpy", "mean_train.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.generate_random_dataset_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_candidates_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch_gin"], ["def", "gin_uncertainty_case1", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset_gin", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", "\n", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "agent", "=", "NasBenchGinGaussianTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph", "(", "d", "[", "0", "]", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "candidates", "=", "search_space", ".", "get_candidates_gin", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "predictions", ",", "_", ",", "_", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "'its_vae'", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch_gin", "(", "candidates", "[", "i", "]", "[", "0", "]", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic", "=", "True", "\n", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_case1": [[82, 146], ["torch.device", "search_space.generate_random_dataset_gin", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "search_space.get_candidates_gin", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "utils.utils_data.nasbench2graph", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "utils.utils_data.nasbench2graph", "candiate_edge_list.append", "candiate_node_list.append", "search_space.query_arch_gin", "search_space.generate_random_dataset_gin.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "sorted", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.generate_random_dataset_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_candidates_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch_gin"], ["", "def", "gin_predictor_case1", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset_gin", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph", "(", "d", "[", "0", "]", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "candidates", "=", "search_space", ".", "get_candidates_gin", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch_gin", "(", "candidates", "[", "i", "]", "[", "0", "]", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic", "=", "True", "\n", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_case2": [[148, 239], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "numpy.array", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "acquisition_functions.acq_fn", "predictions.cpu().numpy", "kt_top_list.append", "utils.utils_data.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "utils.utils_data.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "predictions.cpu().numpy", "kt_list.append", "search_space.query_arch", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "nas_lib.utils.corr.get_kendalltau_coorlection", "predictions.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "predictions.cpu", "predictions.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "mean_train.cpu().numpy", "mean_train.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_uncertainty_case2", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "activation_fn", "=", "'celu'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinGaussianTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "activation_fn", "=", "activation_fn", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "predictions", ",", "_", ",", "_", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "np_pred", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "'its_vae'", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "np_pred_temp", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "np_pred_temp", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_uncertainty'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_case2": [[241, 337], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "kt_top_list.append", "utils.utils_data.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "utils.utils_data.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "kt_list.append", "search_space.query_arch", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "acc_pred.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_predictor_case2", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "rate", "=", "None", ",", "\n", "activation_fn", "=", "'relu'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "if", "rate", "is", "None", ":", "\n", "        ", "rate", "=", "10.", "\n", "", "else", ":", "\n", "        ", "rate", "=", "rate", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "rate", "=", "rate", ",", "\n", "activation_fn", "=", "activation_fn", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "candidate_np", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor'", ",", "'final_data'", ":", "data", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_predictor_nasbench_201": [[339, 430], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "numpy.array", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "acquisition_functions.acq_fn", "predictions.cpu().numpy", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "predictions.cpu().numpy", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "nas_lib.utils.corr.get_kendalltau_coorlection", "predictions.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "predictions.cpu", "predictions.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "mean_train.cpu().numpy", "mean_train.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_uncertainty_predictor_nasbench_201", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "activation_fn", "=", "'celu'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinGaussianTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "8", ",", "\n", "activation_fn", "=", "activation_fn", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "predictions", ",", "_", ",", "_", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "np_pred", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "'its_vae'", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "np_pred", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_uncertainty'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_nasbench_201": [[432, 533], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "NotImplementedError", "acc_pred.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_predictor_nasbench_201", "(", "search_space", ",", "\n", "dataname", "=", "'cifar100'", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "rate", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "if", "rate", "is", "None", ":", "\n", "        ", "if", "dataname", "==", "'cifar10-valid'", ":", "\n", "            ", "rate", "=", "100.", "\n", "", "elif", "dataname", "==", "'cifar100'", ":", "\n", "            ", "rate", "=", "100.", "\n", "", "elif", "dataname", "==", "'ImageNet16-120'", ":", "\n", "            ", "rate", "=", "100.", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "rate", "=", "rate", "\n", "", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "8", ",", "rate", "=", "rate", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "candidate_np", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor'", ",", "'final_data'", ":", "data", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_scalar_case2": [[535, 600], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "search_space.get_candidates", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "utils.utils_data.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "utils.utils_data.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "sorted", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch"], ["", "def", "gin_predictor_scalar_case2", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "scalar", "=", "10", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "rate", "=", "scalar", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_train_num_constrict_case1": [[602, 671], ["torch.device", "search_space.generate_random_dataset_gin", "search_space.get_candidates_gin", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "len", "copy.deepcopy", "utils.utils_data.nasbench2graph", "candiate_edge_list.append", "candiate_node_list.append", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred().cpu().numpy", "search_space.query_arch_gin", "search_space.generate_random_dataset_gin.append", "logger.info", "logger.info", "utils.utils_data.nasbench2graph", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "agent.pred.cpu", "sorted", "len", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred().cpu", "min", "len", "numpy.mean", "len", "numpy.abs", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.generate_random_dataset_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_candidates_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred"], ["", "def", "gin_predictor_train_num_constrict_case1", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "training_nums", "=", "150", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset_gin", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "train_data", "=", "[", "]", "\n", "train_flag", "=", "False", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "train_flag", "=", "True", "\n", "", "candidates", "=", "search_space", ".", "get_candidates_gin", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "train_flag", ":", "\n", "            ", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "d", "in", "train_data", ":", "\n", "                ", "edge_index", ",", "node_f", "=", "nasbench2graph", "(", "d", "[", "0", "]", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "train_data", "]", ")", "\n", "batch_size", "=", "10", "if", "len", "(", "train_data", ")", "<=", "10", "else", "16", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "train_data", ")", ",", "batch_size", "=", "batch_size", ")", "\n", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch_gin", "(", "candidates", "[", "i", "]", "[", "0", "]", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic", "=", "True", "\n", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training data nums {},  training mean loss is  {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "train_flag", "=", "False", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_predictor_train_num_constrict_case1": [[673, 747], ["torch.device", "search_space.generate_random_dataset_gin", "search_space.get_candidates_gin", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "acquisition_functions.acq_fn", "len", "copy.deepcopy", "utils.utils_data.nasbench2graph", "candiate_edge_list.append", "candiate_node_list.append", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "numpy.array", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "mean_train.cpu().numpy.cpu().numpy", "search_space.query_arch_gin", "search_space.generate_random_dataset_gin.append", "logger.info", "logger.info", "utils.utils_data.nasbench2graph", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "sorted", "len", "len", "mean_train.cpu().numpy.cpu", "min", "len", "numpy.mean", "len", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.generate_random_dataset_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_candidates_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph"], ["", "def", "gin_uncertainty_predictor_train_num_constrict_case1", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "training_nums", "=", "150", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset_gin", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", "\n", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "train_data", "=", "[", "]", "\n", "train_flag", "=", "False", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "train_flag", "=", "True", "\n", "", "candidates", "=", "search_space", ".", "get_candidates_gin", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "\n", "", "if", "train_flag", ":", "\n", "            ", "batch_size", "=", "10", "if", "len", "(", "train_data", ")", "<=", "10", "else", "16", "\n", "agent", "=", "NasBenchGinGaussianTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "train_data", ")", ",", "batch_size", "=", "batch_size", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "train_data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "d", "in", "train_data", ":", "\n", "                ", "edge_index", ",", "node_f", "=", "nasbench2graph", "(", "d", "[", "0", "]", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "mean_train", "=", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "predictions", ",", "_", ",", "_", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "'its_vae'", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch_gin", "(", "candidates", "[", "i", "]", "[", "0", "]", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic", "=", "True", "\n", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training data nums {},  training mean loss is  {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "train_flag", "=", "False", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_train_num_constrict_case2": [[749, 817], ["torch.device", "search_space.generate_random_dataset", "search_space.get_candidates", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "len", "copy.deepcopy", "utils.utils_data.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred().cpu().numpy", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "len", "utils.utils_data.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "agent.pred.cpu", "sorted", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred().cpu", "min", "len", "numpy.mean", "len", "numpy.abs", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred"], ["", "def", "gin_predictor_train_num_constrict_case2", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "training_nums", "=", "150", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "train_data", "=", "[", "]", "\n", "train_flag", "=", "False", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "train_flag", "=", "True", "\n", "", "batch_size", "=", "10", "if", "len", "(", "train_data", ")", "<=", "10", "else", "16", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "train_flag", ":", "\n", "            ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "train_data", "]", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "train_data", "]", ")", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "train_data", ")", ",", "batch_size", "=", "batch_size", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "                ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training data nums {},  training mean loss is  {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "train_flag", "=", "False", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_train_num_constrict_case2": [[819, 887], ["torch.device", "search_space.generate_random_dataset", "search_space.get_candidates", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "acquisition_functions.acq_fn", "len", "copy.deepcopy", "utils.utils_data.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "numpy.array", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "mean_train.cpu().numpy.cpu().numpy", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "utils.utils_data.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "sorted", "len", "len", "mean_train.cpu().numpy.cpu", "min", "len", "numpy.mean", "len", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2"], ["", "def", "gin_uncertainty_train_num_constrict_case2", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "training_nums", "=", "150", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "train_data", "=", "[", "]", "\n", "train_flag", "=", "False", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "train_flag", "=", "True", "\n", "", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "train_flag", ":", "\n", "            ", "batch_size", "=", "10", "if", "len", "(", "train_data", ")", "<=", "10", "else", "16", "\n", "agent", "=", "NasBenchGinGaussianTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "train_data", ")", ",", "batch_size", "=", "batch_size", ")", "\n", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "train_data", "]", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "train_data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "                ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "mean_train", "=", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "predictions", ",", "_", ",", "_", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "'its_vae'", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training data nums {},  training mean loss is  {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "train_flag", "=", "False", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_predictor_nasbench_nlp": [[889, 983], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "numpy.array", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "acquisition_functions.acq_fn", "predictions.cpu().numpy", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "predictions.cpu().numpy", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "nas_lib.utils.corr.get_kendalltau_coorlection", "predictions.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "predictions.cpu", "predictions.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "mean_train.cpu().numpy", "mean_train.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_uncertainty_predictor_nasbench_nlp", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "mutation_rate", "=", "0.1", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "activation_fn", "=", "'celu'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ")", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinGaussianTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "10", ",", "\n", "activation_fn", "=", "activation_fn", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "(", "cand", "[", "1", "]", ",", "cand", "[", "2", "]", ")", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "predictions", ",", "_", ",", "_", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "np_pred", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "'its_vae'", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "np_pred", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_uncertainty'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_nasbench_nlp": [[985, 1081], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "acc_pred.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_predictor_nasbench_nlp", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "mutation_rate", "=", "0.1", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "rate", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "rate", "is", "not", "None", ":", "\n", "        ", "rate", "=", "rate", "\n", "", "else", ":", "\n", "        ", "rate", "=", "5.", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ")", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "10", ",", "rate", "=", "rate", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "(", "cand", "[", "1", "]", ",", "cand", "[", "2", "]", ")", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "candidate_np", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor'", ",", "'final_data'", ":", "data", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_predictor_nasbench_asr": [[1083, 1177], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "numpy.array", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "acquisition_functions.acq_fn", "predictions.cpu().numpy", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "predictions.cpu().numpy", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "nas_lib.utils.corr.get_kendalltau_coorlection", "predictions.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "predictions.cpu", "predictions.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "mean_train.cpu().numpy", "mean_train.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_uncertainty_predictor_nasbench_asr", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "mutation_rate", "=", "1", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "activation_fn", "=", "'celu'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ")", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinGaussianTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "9", ",", "\n", "activation_fn", "=", "activation_fn", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "(", "cand", "[", "1", "]", ",", "cand", "[", "2", "]", ")", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "predictions", ",", "_", ",", "_", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "np_pred", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "'its_vae'", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "np_pred", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_uncertainty'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_nasbench_asr": [[1179, 1275], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "acc_pred.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_predictor_nasbench_asr", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "mutation_rate", "=", "1", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "rate", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "rate", "is", "None", ":", "\n", "        ", "rate", "=", "100.", "\n", "", "else", ":", "\n", "        ", "rate", "=", "rate", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ")", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "9", ",", "rate", "=", "rate", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "(", "cand", "[", "1", "]", ",", "cand", "[", "2", "]", ")", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "candidate_np", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor'", ",", "'final_data'", ":", "data", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'mutate_list'", ":", "mutate_list", "}", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_101_case1": [[8, 85], ["os.path.join", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "search_space.generate_random_dataset", "numpy.array", "pairs.sort", "nas_lib.bo.bo.probo.ProBO", "nas_lib.bo.bo.probo.ProBO.run_bo", "os.path.exists", "os.mkdir", "search_space.query_arch", "open", "pickle.dump", "search_space.query_arch", "results.append", "argparse.Namespace", "argparse.Namespace", "range", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.run_bo", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch"], ["def", "gp_bayesopt_nasbench_101_case1", "(", "search_space", ",", "\n", "logger", "=", "None", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "100", ",", "\n", "loss", "=", "'val_loss'", ",", "\n", "distance", "=", "'adj'", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "cutoff", "=", "0", ",", "\n", "deterministic", "=", "True", ",", "\n", "tmpdir", "=", "'./temp'", ",", "\n", "max_iter", "=", "200", ",", "\n", "mode", "=", "'single_process'", ",", "\n", "verbose", "=", "0", ",", "\n", "nppred", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a GP prior\n    \"\"\"", "\n", "# set up the path for auxiliary pickle files", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tmpdir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "tmpdir", ")", "\n", "", "aux_file_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'aux.pkl'", ")", "\n", "num_iterations", "=", "total_queries", "-", "num_init", "\n", "\n", "# black-box function that bayesopt will optimize", "\n", "def", "fn", "(", "arch", ")", ":", "\n", "        ", "arch_info", "=", "search_space", ".", "query_arch", "(", "arch", "=", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "'ops'", ":", "arch", "[", "'ops'", "]", "}", ",", "\n", "train", "=", "True", ",", "\n", "deterministic", "=", "True", ",", "\n", "encode_paths", "=", "True", ")", "\n", "if", "loss", "==", "'val_loss'", ":", "\n", "            ", "return", "arch_info", "[", "2", "]", "\n", "", "elif", "loss", "==", "'test_loss'", ":", "\n", "            ", "return", "arch_info", "[", "3", "]", "\n", "\n", "# set all the parameters for the various BayesOpt classes", "\n", "", "", "fhp", "=", "Namespace", "(", "fhstr", "=", "'object'", ",", "namestr", "=", "'train'", ")", "\n", "domp", "=", "Namespace", "(", "dom_str", "=", "'list'", ",", "set_domain_list_auto", "=", "True", ",", "\n", "aux_file_path", "=", "aux_file_path", ",", "\n", "distance", "=", "distance", ")", "\n", "modelp", "=", "Namespace", "(", "kernp", "=", "Namespace", "(", "ls", "=", "3.", ",", "alpha", "=", "1.5", ",", "sigma", "=", "1e-5", ")", ",", "\n", "infp", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "nwarmup", "=", "500", ")", ",", "\n", "distance", "=", "distance", ",", "search_space", "=", "'nasbench_101'", ")", "\n", "amp", "=", "Namespace", "(", "am_str", "=", "'mygpdistmat_ucb'", ",", "nppred", "=", "nppred", ",", "modelp", "=", "modelp", ")", "\n", "optp", "=", "Namespace", "(", "opt_str", "=", "'rand'", ",", "max_iter", "=", "max_iter", ")", "\n", "makerp", "=", "Namespace", "(", "domp", "=", "domp", ",", "amp", "=", "amp", ",", "optp", "=", "optp", ")", "\n", "probop", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "fhp", "=", "fhp", ",", "\n", "makerp", "=", "makerp", ",", "tmpdir", "=", "tmpdir", ",", "mode", "=", "mode", ")", "\n", "data", "=", "Namespace", "(", ")", "\n", "\n", "# Set up initial data", "\n", "init_data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "data", ".", "X", "=", "[", "{", "'matrix'", ":", "d", "[", "0", "]", "[", "'matrix'", "]", ",", "'ops'", ":", "d", "[", "0", "]", "[", "'ops'", "]", "}", "for", "d", "in", "init_data", "]", "\n", "data", ".", "y", "=", "np", ".", "array", "(", "[", "[", "d", "[", "2", "]", "]", "for", "d", "in", "init_data", "]", ")", "\n", "\n", "# initialize aux file", "\n", "pairs", "=", "[", "(", "data", ".", "X", "[", "i", "]", ",", "data", ".", "y", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "data", ".", "y", ")", ")", "]", "\n", "pairs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "with", "open", "(", "aux_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "pairs", ",", "f", ")", "\n", "\n", "# run Bayesian Optimization", "\n", "", "bo", "=", "ProBO", "(", "fn", ",", "search_space", ",", "aux_file_path", ",", "data", ",", "probop", ",", "True", ")", "\n", "bo", ".", "run_bo", "(", "verbose", "=", "verbose", ")", "\n", "\n", "# get the validation and test loss for all architectures chosen by BayesOpt", "\n", "results", "=", "[", "]", "\n", "for", "arch", "in", "data", ".", "X", ":", "\n", "        ", "archtuple", "=", "search_space", ".", "query_arch", "(", "arch", "=", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "'ops'", ":", "arch", "[", "'ops'", "]", "}", ",", "\n", "train", "=", "True", ",", "\n", "deterministic", "=", "True", ",", "\n", "encode_paths", "=", "True", ")", "\n", "results", ".", "append", "(", "archtuple", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_101": [[87, 158], ["os.path.join", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "search_space.generate_random_dataset", "numpy.array", "pairs.sort", "nas_lib.bo.bo.probo.ProBO", "nas_lib.bo.bo.probo.ProBO.run_bo", "os.path.exists", "os.mkdir", "search_space.query_arch", "open", "pickle.dump", "search_space.query_arch", "results.append", "argparse.Namespace", "argparse.Namespace", "range", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.run_bo", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch"], ["", "def", "gp_bayesopt_nasbench_101", "(", "search_space", ",", "\n", "logger", "=", "None", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "100", ",", "\n", "loss", "=", "'val_loss'", ",", "\n", "distance", "=", "'adj'", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "cutoff", "=", "0", ",", "\n", "deterministic", "=", "True", ",", "\n", "tmpdir", "=", "'./temp'", ",", "\n", "max_iter", "=", "200", ",", "\n", "mode", "=", "'single_process'", ",", "\n", "verbose", "=", "0", ",", "\n", "nppred", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a GP prior\n    \"\"\"", "\n", "# set up the path for auxiliary pickle files", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tmpdir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "tmpdir", ")", "\n", "", "aux_file_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'aux.pkl'", ")", "\n", "num_iterations", "=", "total_queries", "-", "num_init", "\n", "\n", "# black-box function that bayesopt will optimize", "\n", "def", "fn", "(", "arch", ")", ":", "\n", "        ", "arch_info", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", "\n", "if", "loss", "==", "'val_loss'", ":", "\n", "            ", "return", "arch_info", "[", "4", "]", "\n", "", "elif", "loss", "==", "'test_loss'", ":", "\n", "            ", "return", "arch_info", "[", "5", "]", "\n", "\n", "# set all the parameters for the various BayesOpt classes", "\n", "", "", "fhp", "=", "Namespace", "(", "fhstr", "=", "'object'", ",", "namestr", "=", "'train'", ")", "\n", "domp", "=", "Namespace", "(", "dom_str", "=", "'list'", ",", "set_domain_list_auto", "=", "True", ",", "\n", "aux_file_path", "=", "aux_file_path", ",", "\n", "distance", "=", "distance", ")", "\n", "modelp", "=", "Namespace", "(", "kernp", "=", "Namespace", "(", "ls", "=", "3.", ",", "alpha", "=", "1.5", ",", "sigma", "=", "1e-5", ")", ",", "\n", "infp", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "nwarmup", "=", "500", ")", ",", "\n", "distance", "=", "distance", ",", "search_space", "=", "'nasbench_101'", ")", "\n", "amp", "=", "Namespace", "(", "am_str", "=", "'mygpdistmat_ucb'", ",", "nppred", "=", "nppred", ",", "modelp", "=", "modelp", ")", "\n", "optp", "=", "Namespace", "(", "opt_str", "=", "'rand'", ",", "max_iter", "=", "max_iter", ")", "\n", "makerp", "=", "Namespace", "(", "domp", "=", "domp", ",", "amp", "=", "amp", ",", "optp", "=", "optp", ")", "\n", "probop", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "fhp", "=", "fhp", ",", "\n", "makerp", "=", "makerp", ",", "tmpdir", "=", "tmpdir", ",", "mode", "=", "mode", ")", "\n", "data", "=", "Namespace", "(", ")", "\n", "\n", "# Set up initial data", "\n", "init_data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "data", ".", "X", "=", "[", "{", "'matrix'", ":", "d", "[", "1", "]", ",", "'ops'", ":", "d", "[", "2", "]", "}", "for", "d", "in", "init_data", "]", "\n", "# data.X = [{'matrix': d[0][0], 'ops': d[0][1]} for d in init_data]", "\n", "data", ".", "y", "=", "np", ".", "array", "(", "[", "[", "d", "[", "4", "]", "]", "for", "d", "in", "init_data", "]", ")", "\n", "\n", "# initialize aux file", "\n", "pairs", "=", "[", "(", "data", ".", "X", "[", "i", "]", ",", "data", ".", "y", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "data", ".", "y", ")", ")", "]", "\n", "pairs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "with", "open", "(", "aux_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "pairs", ",", "f", ")", "\n", "\n", "# run Bayesian Optimization", "\n", "", "bo", "=", "ProBO", "(", "fn", ",", "search_space", ",", "aux_file_path", ",", "data", ",", "probop", ",", "True", ")", "\n", "bo", ".", "run_bo", "(", "verbose", "=", "verbose", ")", "\n", "\n", "# get the validation and test loss for all architectures chosen by BayesOpt", "\n", "results", "=", "[", "]", "\n", "for", "arch", "in", "data", ".", "X", ":", "\n", "        ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", "\n", "results", ".", "append", "(", "archtuple", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_201": [[160, 231], ["os.path.join", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "search_space.generate_random_dataset", "numpy.array", "pairs.sort", "nas_lib.bo.bo.probo.ProBO", "nas_lib.bo.bo.probo.ProBO.run_bo", "os.path.exists", "os.mkdir", "open", "pickle.dump", "results.append", "argparse.Namespace", "argparse.Namespace", "range", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.run_bo"], ["", "def", "gp_bayesopt_nasbench_201", "(", "search_space", ",", "\n", "logger", "=", "None", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "100", ",", "\n", "loss", "=", "'val_loss'", ",", "\n", "distance", "=", "'adj'", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "cutoff", "=", "0", ",", "\n", "deterministic", "=", "True", ",", "\n", "tmpdir", "=", "'./temp'", ",", "\n", "max_iter", "=", "200", ",", "\n", "mode", "=", "'single_process'", ",", "\n", "verbose", "=", "0", ",", "\n", "nppred", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a GP prior\n    \"\"\"", "\n", "# set up the path for auxiliary pickle files", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tmpdir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "tmpdir", ")", "\n", "", "aux_file_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'aux.pkl'", ")", "\n", "num_iterations", "=", "total_queries", "-", "num_init", "\n", "\n", "# black-box function that bayesopt will optimize", "\n", "def", "fn", "(", "arch", ")", ":", "\n", "        ", "arch_str", "=", "arch", "[", "'string'", "]", "\n", "arch_info", "=", "search_space", ".", "total_archs", "[", "arch_str", "]", "\n", "if", "loss", "==", "'val_loss'", ":", "\n", "            ", "return", "arch_info", "[", "4", "]", "\n", "", "elif", "loss", "==", "'test_loss'", ":", "\n", "            ", "return", "arch_info", "[", "5", "]", "\n", "\n", "# set all the parameters for the various BayesOpt classes", "\n", "", "", "fhp", "=", "Namespace", "(", "fhstr", "=", "'object'", ",", "namestr", "=", "'train'", ")", "\n", "domp", "=", "Namespace", "(", "dom_str", "=", "'list'", ",", "set_domain_list_auto", "=", "True", ",", "\n", "aux_file_path", "=", "aux_file_path", ",", "\n", "distance", "=", "distance", ")", "\n", "modelp", "=", "Namespace", "(", "kernp", "=", "Namespace", "(", "ls", "=", "3.", ",", "alpha", "=", "1.5", ",", "sigma", "=", "1e-5", ")", ",", "\n", "infp", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "nwarmup", "=", "500", ")", ",", "\n", "distance", "=", "distance", ",", "search_space", "=", "'nasbench_201'", ")", "\n", "amp", "=", "Namespace", "(", "am_str", "=", "'mygpdistmat_ucb'", ",", "nppred", "=", "nppred", ",", "modelp", "=", "modelp", ")", "\n", "optp", "=", "Namespace", "(", "opt_str", "=", "'rand'", ",", "max_iter", "=", "max_iter", ")", "\n", "makerp", "=", "Namespace", "(", "domp", "=", "domp", ",", "amp", "=", "amp", ",", "optp", "=", "optp", ")", "\n", "probop", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "fhp", "=", "fhp", ",", "\n", "makerp", "=", "makerp", ",", "tmpdir", "=", "tmpdir", ",", "mode", "=", "mode", ")", "\n", "data", "=", "Namespace", "(", ")", "\n", "\n", "# Set up initial data", "\n", "init_data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "data", ".", "X", "=", "[", "{", "'string'", ":", "d", "[", "6", "]", "}", "for", "d", "in", "init_data", "]", "\n", "data", ".", "y", "=", "np", ".", "array", "(", "[", "[", "d", "[", "4", "]", "]", "for", "d", "in", "init_data", "]", ")", "\n", "\n", "# initialize aux file", "\n", "pairs", "=", "[", "(", "data", ".", "X", "[", "i", "]", ",", "data", ".", "y", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "data", ".", "y", ")", ")", "]", "\n", "pairs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "with", "open", "(", "aux_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "pairs", ",", "f", ")", "\n", "\n", "# run Bayesian Optimization", "\n", "", "bo", "=", "ProBO", "(", "fn", ",", "search_space", ",", "aux_file_path", ",", "data", ",", "probop", ",", "True", ")", "\n", "bo", ".", "run_bo", "(", "verbose", "=", "verbose", ")", "\n", "\n", "# get the validation and test loss for all architectures chosen by BayesOpt", "\n", "results", "=", "[", "]", "\n", "for", "arch", "in", "data", ".", "X", ":", "\n", "        ", "archtuple", "=", "search_space", ".", "total_archs", "[", "arch", "[", "'string'", "]", "]", "\n", "results", ".", "append", "(", "archtuple", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_nlp": [[233, 306], ["os.path.join", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "search_space.generate_random_dataset", "numpy.array", "pairs.sort", "nas_lib.bo.bo.probo.ProBO", "nas_lib.bo.bo.probo.ProBO.run_bo", "os.path.exists", "os.mkdir", "open", "pickle.dump", "results.append", "argparse.Namespace", "argparse.Namespace", "range", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.run_bo"], ["", "def", "gp_bayesopt_nasbench_nlp", "(", "search_space", ",", "\n", "logger", "=", "None", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "100", ",", "\n", "loss", "=", "'val_loss'", ",", "\n", "distance", "=", "'adj'", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "cutoff", "=", "0", ",", "\n", "deterministic", "=", "True", ",", "\n", "tmpdir", "=", "'./temp'", ",", "\n", "max_iter", "=", "200", ",", "\n", "mode", "=", "'single_process'", ",", "\n", "verbose", "=", "0", ",", "\n", "nppred", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a GP prior\n    \"\"\"", "\n", "# set up the path for auxiliary pickle files", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tmpdir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "tmpdir", ")", "\n", "", "aux_file_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'aux.pkl'", ")", "\n", "num_iterations", "=", "total_queries", "-", "num_init", "\n", "\n", "# black-box function that bayesopt will optimize", "\n", "def", "fn", "(", "arch", ")", ":", "\n", "        ", "arch_str", "=", "search_space", ".", "arch_keys_dict", "[", "arch", "[", "0", "]", "]", "\n", "arch_info", "=", "search_space", ".", "total_archs", "[", "arch_str", "]", "\n", "if", "loss", "==", "'val_loss'", ":", "\n", "            ", "return", "arch_info", "[", "4", "]", "\n", "", "elif", "loss", "==", "'test_loss'", ":", "\n", "            ", "return", "arch_info", "[", "5", "]", "\n", "\n", "# set all the parameters for the various BayesOpt classes", "\n", "", "", "fhp", "=", "Namespace", "(", "fhstr", "=", "'object'", ",", "namestr", "=", "'train'", ")", "\n", "domp", "=", "Namespace", "(", "dom_str", "=", "'list'", ",", "set_domain_list_auto", "=", "True", ",", "\n", "aux_file_path", "=", "aux_file_path", ",", "\n", "distance", "=", "distance", ")", "\n", "modelp", "=", "Namespace", "(", "kernp", "=", "Namespace", "(", "ls", "=", "3.", ",", "alpha", "=", "1.5", ",", "sigma", "=", "1e-5", ")", ",", "\n", "infp", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "nwarmup", "=", "500", ")", ",", "\n", "distance", "=", "distance", ",", "search_space", "=", "'nasbench_nlp'", ")", "\n", "amp", "=", "Namespace", "(", "am_str", "=", "'mygpdistmat_ucb'", ",", "nppred", "=", "nppred", ",", "modelp", "=", "modelp", ")", "\n", "optp", "=", "Namespace", "(", "opt_str", "=", "'rand'", ",", "max_iter", "=", "max_iter", ")", "\n", "makerp", "=", "Namespace", "(", "domp", "=", "domp", ",", "amp", "=", "amp", ",", "optp", "=", "optp", ")", "\n", "probop", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "fhp", "=", "fhp", ",", "\n", "makerp", "=", "makerp", ",", "tmpdir", "=", "tmpdir", ",", "mode", "=", "mode", ")", "\n", "data", "=", "Namespace", "(", ")", "\n", "\n", "# Set up initial data", "\n", "init_data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "data", ".", "X", "=", "[", "[", "d", "[", "6", "]", ",", "d", "[", "1", "]", ",", "d", "[", "2", "]", "]", "for", "d", "in", "init_data", "]", "\n", "data", ".", "y", "=", "np", ".", "array", "(", "[", "[", "d", "[", "4", "]", "]", "for", "d", "in", "init_data", "]", ")", "\n", "\n", "# initialize aux file", "\n", "pairs", "=", "[", "(", "data", ".", "X", "[", "i", "]", ",", "data", ".", "y", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "data", ".", "y", ")", ")", "]", "\n", "pairs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "with", "open", "(", "aux_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "pairs", ",", "f", ")", "\n", "\n", "# run Bayesian Optimization", "\n", "", "bo", "=", "ProBO", "(", "fn", ",", "search_space", ",", "aux_file_path", ",", "data", ",", "probop", ",", "True", ")", "\n", "bo", ".", "run_bo", "(", "verbose", "=", "verbose", ")", "\n", "\n", "# get the validation and test loss for all architectures chosen by BayesOpt", "\n", "results", "=", "[", "]", "\n", "for", "arch", "in", "data", ".", "X", ":", "\n", "        ", "arch_str", "=", "search_space", ".", "arch_keys_dict", "[", "arch", "[", "0", "]", "]", "\n", "archtuple", "=", "search_space", ".", "total_archs", "[", "arch_str", "]", "\n", "results", ".", "append", "(", "archtuple", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_asr": [[308, 383], ["os.path.join", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "search_space.generate_random_dataset", "numpy.array", "pairs.sort", "nas_lib.bo.bo.probo.ProBO", "nas_lib.bo.bo.probo.ProBO.run_bo", "os.path.exists", "os.mkdir", "open", "pickle.dump", "results.append", "argparse.Namespace", "argparse.Namespace", "range", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.run_bo"], ["", "def", "gp_bayesopt_nasbench_asr", "(", "search_space", ",", "\n", "logger", "=", "None", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "100", ",", "\n", "loss", "=", "'val_loss'", ",", "\n", "distance", "=", "'adj'", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "cutoff", "=", "0", ",", "\n", "deterministic", "=", "True", ",", "\n", "tmpdir", "=", "'./temp'", ",", "\n", "max_iter", "=", "200", ",", "\n", "mode", "=", "'single_process'", ",", "\n", "verbose", "=", "0", ",", "\n", "nppred", "=", "1000", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a GP prior\n    \"\"\"", "\n", "# set up the path for auxiliary pickle files", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tmpdir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "tmpdir", ")", "\n", "", "aux_file_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'aux.pkl'", ")", "\n", "num_iterations", "=", "total_queries", "-", "num_init", "\n", "\n", "# black-box function that bayesopt will optimize", "\n", "def", "fn", "(", "arch", ")", ":", "\n", "        ", "arch_str", "=", "arch", "[", "0", "]", "\n", "arch_info", "=", "search_space", ".", "all_datas_dict", "[", "arch_str", "]", "\n", "if", "loss", "==", "'val_loss'", ":", "\n", "            ", "return", "arch_info", "[", "0", "]", "\n", "", "elif", "loss", "==", "'test_loss'", ":", "\n", "            ", "return", "arch_info", "[", "1", "]", "\n", "\n", "# set all the parameters for the various BayesOpt classes", "\n", "", "", "fhp", "=", "Namespace", "(", "fhstr", "=", "'object'", ",", "namestr", "=", "'train'", ")", "\n", "domp", "=", "Namespace", "(", "dom_str", "=", "'list'", ",", "set_domain_list_auto", "=", "True", ",", "\n", "aux_file_path", "=", "aux_file_path", ",", "\n", "distance", "=", "distance", ")", "\n", "modelp", "=", "Namespace", "(", "kernp", "=", "Namespace", "(", "ls", "=", "3.", ",", "alpha", "=", "1.5", ",", "sigma", "=", "1e-5", ")", ",", "\n", "infp", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "nwarmup", "=", "500", ")", ",", "\n", "distance", "=", "distance", ",", "search_space", "=", "'nasbench_asr'", ")", "\n", "amp", "=", "Namespace", "(", "am_str", "=", "'mygpdistmat_ucb'", ",", "nppred", "=", "nppred", ",", "modelp", "=", "modelp", ")", "\n", "optp", "=", "Namespace", "(", "opt_str", "=", "'rand'", ",", "max_iter", "=", "max_iter", ")", "\n", "makerp", "=", "Namespace", "(", "domp", "=", "domp", ",", "amp", "=", "amp", ",", "optp", "=", "optp", ")", "\n", "probop", "=", "Namespace", "(", "niter", "=", "num_iterations", ",", "fhp", "=", "fhp", ",", "\n", "makerp", "=", "makerp", ",", "tmpdir", "=", "tmpdir", ",", "mode", "=", "mode", ")", "\n", "data", "=", "Namespace", "(", ")", "\n", "\n", "# Set up initial data", "\n", "init_data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "deterministic_loss", "=", "deterministic", ",", "\n", "allow_isomorphisms", "=", "False", ")", "\n", "data", ".", "X", "=", "[", "[", "d", "[", "6", "]", ",", "d", "[", "1", "]", ",", "d", "[", "2", "]", "]", "for", "d", "in", "init_data", "]", "\n", "data", ".", "y", "=", "np", ".", "array", "(", "[", "[", "d", "[", "4", "]", "]", "for", "d", "in", "init_data", "]", ")", "\n", "\n", "# initialize aux file", "\n", "pairs", "=", "[", "(", "data", ".", "X", "[", "i", "]", ",", "data", ".", "y", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "data", ".", "y", ")", ")", "]", "\n", "pairs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "with", "open", "(", "aux_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "pairs", ",", "f", ")", "\n", "\n", "# run Bayesian Optimization", "\n", "", "bo", "=", "ProBO", "(", "fn", ",", "search_space", ",", "aux_file_path", ",", "data", ",", "probop", ",", "True", ")", "\n", "bo", ".", "run_bo", "(", "verbose", "=", "verbose", ")", "\n", "\n", "# get the validation and test loss for all architectures chosen by BayesOpt", "\n", "results", "=", "[", "]", "\n", "for", "arch", "in", "data", ".", "X", ":", "\n", "        ", "archtuple", "=", "search_space", ".", "total_archs", "[", "arch", "[", "0", "]", "]", "\n", "results", ".", "append", "(", "archtuple", ")", "\n", "\n", "", "return", "results", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_nasbench_101": [[11, 103], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "kt_top_list.append", "utils.utils_data.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "utils.utils_data.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "numpy.array", "kt_list.append", "search_space.query_arch", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "np.array.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["def", "gin_predictor_new_nasbench_101", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "if", "query", "==", "20", ":", "\n", "            ", "candidate_np", "=", "np", ".", "array", "(", "candidates_gt", ")", "\n", "", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "candidate_np", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor_new'", ",", "'final_data'", ":", "data", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_nasbench_201": [[105, 204], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "numpy.array", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "NotImplementedError", "len", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "np.array.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_predictor_new_nasbench_201", "(", "search_space", ",", "\n", "dataname", "=", "'cifar100'", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "if", "dataname", "==", "'cifar10-valid'", ":", "\n", "        ", "rate", "=", "100.", "\n", "", "elif", "dataname", "==", "'cifar100'", ":", "\n", "        ", "rate", "=", "100.", "\n", "", "elif", "dataname", "==", "'ImageNet16-120'", ":", "\n", "        ", "rate", "=", "100.", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "8", ",", "rate", "=", "rate", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "if", "query", "==", "20", ":", "\n", "            ", "candidate_np", "=", "np", ".", "array", "(", "candidates_gt", ")", "\n", "", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "candidate_np", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor_new'", ",", "'final_data'", ":", "data", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_nasbench_nlp": [[206, 304], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "numpy.array", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "np.array.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_predictor_new_nasbench_nlp", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "mutation_rate", "=", "0.1", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "rate", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "rate", "is", "not", "None", ":", "\n", "        ", "rate", "=", "rate", "\n", "", "else", ":", "\n", "        ", "rate", "=", "5.", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ")", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "10", ",", "rate", "=", "rate", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "(", "cand", "[", "1", "]", ",", "cand", "[", "2", "]", ")", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "if", "query", "==", "20", ":", "\n", "            ", "candidate_np", "=", "np", ".", "array", "(", "candidates_gt", ")", "\n", "", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "candidate_np", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor_new'", ",", "'final_data'", ":", "data", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_nasbench_asr": [[306, 404], ["torch.device", "search_space.generate_random_dataset", "len", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "kt_top_list.append", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "numpy.array", "kt_list.append", "search_space.generate_random_dataset.append", "kt_top_pred_list.append", "kt_top_gt_list.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "np.array.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_predictor_new_nasbench_asr", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "mutation_rate", "=", "1", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ",", "\n", "rate", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "rate", "is", "None", ":", "\n", "        ", "rate", "=", "100.", "\n", "", "else", ":", "\n", "        ", "rate", "=", "rate", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ")", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "9", ",", "rate", "=", "rate", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "(", "cand", "[", "1", "]", ",", "cand", "[", "2", "]", ")", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "if", "query", "==", "20", ":", "\n", "            ", "candidate_np", "=", "np", ".", "array", "(", "candidates_gt", ")", "\n", "", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "kt_top_pred_list", ".", "append", "(", "candidate_np", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor_new'", ",", "'final_data'", ":", "data", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_2_nasbench_201": [[406, 498], ["torch.device", "search_space.generate_random_dataset", "eigen.trainer_predictor.NasBenchGinPredictorTrainer", "len", "numpy.array", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "len", "search_space.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "kt_list.append", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "NotImplementedError", "agent.pred.cpu", "nas_lib.utils.corr.get_kendalltau_coorlection", "sorted", "acc_pred.cpu().numpy.tolist", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "gin_predictor_new_2_nasbench_201", "(", "search_space", ",", "\n", "dataname", "=", "'cifar100'", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "if", "dataname", "==", "'cifar10-valid'", ":", "\n", "        ", "rate", "=", "100.", "\n", "", "elif", "dataname", "==", "'cifar100'", ":", "\n", "        ", "rate", "=", "100.", "\n", "", "elif", "dataname", "==", "'ImageNet16-120'", ":", "\n", "        ", "rate", "=", "100.", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "kt_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "90", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "8", ",", "rate", "=", "rate", ")", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "query", "==", "20", ":", "\n", "            ", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", "\n", ")", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "search_space", ".", "nasbench2graph2", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "kt", "=", "get_kendalltau_coorlection", "(", "candidate_np", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'gin_predictor_new_2'", ",", "'final_data'", ":", "data", ",", "\n", "'kt_list'", ":", "kt_list", ",", "'mutate_list'", ":", "mutate_list", "}", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_case1": [[23, 56], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "random.random_search_case1", "algo_compare.compute_best_test_losses_case1_with_details", "algo_compare.compute_best_test_losses_case1", "evolution.evolution_search_case1", "copy.deepcopy.pop", "bananas.bananas_case1", "copy.deepcopy.pop", "bananas.bananas_case1", "predictor.gin_uncertainty_case1", "predictor.gin_predictor_case1", "oracle.oracle_nasbench_101_case1", "gp_bayesopt.gp_bayesopt_nasbench_101_case1", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.random.random_search_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1_with_details", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_101_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_101_case1"], ["def", "run_nas_algos_case1", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "with_details", "=", "'F'", ",", "\n", "record_kt", "=", "'F'", ",", "record_mutation", "=", "'F'", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "if", "algo_name", "==", "'random'", ":", "\n", "        ", "data", "=", "random_search_case1", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'evolution'", ":", "\n", "        ", "data", "=", "evolution_search_case1", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_case1", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_case1", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "data", "=", "gin_uncertainty_case1", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "data", "=", "gin_predictor_case1", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'oracle'", ":", "\n", "        ", "data", ",", "full_data", "=", "oracle_nasbench_101_case1", "(", "search_space", ",", "logger", "=", "logger", ",", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gp_bayesopt'", ":", "\n", "        ", "data", "=", "gp_bayesopt_nasbench_101_case1", "(", "search_space", ",", "logger", "=", "logger", ",", "tmpdir", "=", "f'./temp_nasbench_101_case1_{gpu}'", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "if", "with_details", "==", "'T'", ":", "\n", "        ", "return", "compute_best_test_losses_case1_with_details", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "compute_best_test_losses_case1", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_case2": [[58, 104], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "random.random_search_case2", "algo_compare.compute_best_test_losses_case2", "evolution.evolution_search_case2", "algo_compare.compute_best_test_losses_case2", "copy.deepcopy.pop", "bananas.bananas_case2", "copy.deepcopy.pop", "bananas.bananas_case2", "predictor.gin_uncertainty_case2", "predictor.gin_predictor_case2", "predictor_new.gin_predictor_new_nasbench_101", "oracle.oracle_nasbench_101_case2", "gp_bayesopt.gp_bayesopt_nasbench_101", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.random.random_search_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_nasbench_101", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_101_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_101"], ["", "", "def", "run_nas_algos_case2", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "with_details", "=", "'F'", ",", "\n", "record_kt", "=", "'F'", ",", "record_mutation", "=", "'F'", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "full_data", "=", "None", "\n", "if", "algo_name", "==", "'random'", ":", "\n", "        ", "data", "=", "random_search_case2", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'evolution'", ":", "\n", "        ", "data", ",", "full_data", "=", "evolution_search_case2", "(", "search_space", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", ",", "full_data", "=", "bananas_case2", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", ",", "full_data", "=", "bananas_case2", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_uncertainty_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_predictor_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_new'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_predictor_new_nasbench_101", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'oracle'", ":", "\n", "        ", "data", ",", "full_data", "=", "oracle_nasbench_101_case2", "(", "search_space", ",", "logger", "=", "logger", ",", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gp_bayesopt'", ":", "\n", "        ", "data", "=", "gp_bayesopt_nasbench_101", "(", "search_space", ",", "logger", "=", "logger", ",", "tmpdir", "=", "f'./temp_nasbench_101_{gpu}'", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "# if with_details == 'T':", "\n", "#     return compute_best_test_losses_case2_with_details(data, k, ps['total_queries'])", "\n", "# else:", "\n", "#     return compute_best_test_losses_case2(data, k, ps['total_queries'])", "\n", "", "if", "full_data", "is", "not", "None", ":", "\n", "        ", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", ",", "full_data", "\n", "", "else", ":", "\n", "        ", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_nasbench_201": [[106, 153], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "random.random_search_nasbench_201", "algo_compare.compute_best_test_losses_case2", "evolution.evolution_search_nasbench201", "algo_compare.compute_best_test_losses_case2", "copy.deepcopy.pop", "bananas.bananas_nasbench_201", "copy.deepcopy.pop", "bananas.bananas_nasbench_201", "predictor.gin_uncertainty_predictor_nasbench_201", "predictor.gin_predictor_nasbench_201", "predictor_new.gin_predictor_new_nasbench_201", "oracle.oracle_nasbench_201", "gp_bayesopt.gp_bayesopt_nasbench_201", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.random.random_search_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_nasbench201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_predictor_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_201"], ["", "", "def", "run_nas_algos_nasbench_201", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "dataname", "=", "'cifar100'", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "\n", "record_kt", "=", "'F'", ",", "record_mutation", "=", "'F'", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "full_data", "=", "None", "\n", "if", "algo_name", "==", "'random'", ":", "\n", "        ", "data", "=", "random_search_nasbench_201", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'evolution'", ":", "\n", "        ", "data", ",", "full_data", "=", "evolution_search_nasbench201", "(", "search_space", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", ",", "full_data", "=", "bananas_nasbench_201", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "mp", "[", "'layer_width'", "]", "=", "20", "\n", "data", ",", "full_data", "=", "bananas_nasbench_201", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_uncertainty_predictor_nasbench_201", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "\n", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_predictor_nasbench_201", "(", "search_space", ",", "dataname", "=", "dataname", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "\n", "record_kt", "=", "record_kt", ",", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_new'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_predictor_new_nasbench_201", "(", "search_space", ",", "dataname", "=", "dataname", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "\n", "record_kt", "=", "record_kt", ",", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "# elif algo_name == 'gin_predictor_new_2':", "\n", "#     data, full_data = gin_predictor_new_2_nasbench_201(search_space, dataname=dataname, gpu=gpu, logger=logger,", "\n", "#                                                      record_kt=record_kt, record_mutation=record_mutation, **ps)", "\n", "", "elif", "algo_name", "==", "'oracle'", ":", "\n", "        ", "data", ",", "full_data", "=", "oracle_nasbench_201", "(", "search_space", ",", "logger", "=", "logger", ",", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gp_bayesopt'", ":", "\n", "        ", "data", "=", "gp_bayesopt_nasbench_201", "(", "search_space", ",", "logger", "=", "logger", ",", "tmpdir", "=", "f'./temp_nasbench_201_{gpu}'", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "if", "full_data", "is", "not", "None", ":", "\n", "        ", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", ",", "full_data", "\n", "", "else", ":", "\n", "        ", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_nasbench_nlp": [[155, 199], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "random.random_search_nasbench_201", "algo_compare.compute_best_test_losses_case2", "evolution.evolution_search_nasbench_nlp", "algo_compare.compute_best_test_losses_case2", "copy.deepcopy.pop", "bananas.bananas_nasbench_nlp", "copy.deepcopy.pop", "bananas.bananas_nasbench_nlp", "predictor.gin_uncertainty_predictor_nasbench_nlp", "predictor.gin_predictor_nasbench_nlp", "predictor_new.gin_predictor_new_nasbench_nlp", "oracle.oracle_nasbench_nlp", "gp_bayesopt.gp_bayesopt_nasbench_nlp", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.random.random_search_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_predictor_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_nlp", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_nlp"], ["", "", "def", "run_nas_algos_nasbench_nlp", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "full_data", "=", "None", "\n", "if", "algo_name", "==", "'random'", ":", "\n", "        ", "data", "=", "random_search_nasbench_201", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'evolution'", ":", "\n", "        ", "data", ",", "full_data", "=", "evolution_search_nasbench_nlp", "(", "search_space", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", ",", "full_data", "=", "bananas_nasbench_nlp", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "mp", "[", "'layer_width'", "]", "=", "20", "\n", "data", ",", "full_data", "=", "bananas_nasbench_nlp", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_uncertainty_predictor_nasbench_nlp", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "\n", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_predictor_nasbench_nlp", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_new'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_predictor_new_nasbench_nlp", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'oracle'", ":", "\n", "        ", "data", ",", "full_data", "=", "oracle_nasbench_nlp", "(", "search_space", ",", "logger", "=", "logger", ",", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gp_bayesopt'", ":", "\n", "        ", "data", "=", "gp_bayesopt_nasbench_nlp", "(", "search_space", ",", "logger", "=", "logger", ",", "tmpdir", "=", "f'./temp_nasbench_nlp_{gpu}'", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "if", "full_data", "is", "not", "None", ":", "\n", "        ", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", ",", "full_data", "\n", "", "else", ":", "\n", "        ", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_algos_nasbench_asr": [[201, 246], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "random.random_search_nasbench_201", "algo_compare.compute_best_test_losses_case2", "evolution.evolution_search_nasbench_asr", "algo_compare.compute_best_test_losses_case2", "copy.deepcopy.pop", "bananas.bananas_nasbench_asr", "copy.deepcopy.pop", "bananas.bananas_nasbench_asr", "predictor.gin_uncertainty_predictor_nasbench_asr", "predictor.gin_predictor_nasbench_asr", "predictor_new.gin_predictor_new_nasbench_asr", "oracle.oracle_nasbench_asr", "gp_bayesopt.gp_bayesopt_nasbench_asr", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.random.random_search_nasbench_201", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_predictor_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor_new.gin_predictor_new_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_asr", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.gp_bayesopt.gp_bayesopt_nasbench_asr"], ["", "", "def", "run_nas_algos_nasbench_asr", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "\n", "record_kt", "=", "'F'", ",", "record_mutation", "=", "'F'", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "full_data", "=", "None", "\n", "if", "algo_name", "==", "'random'", ":", "\n", "        ", "data", "=", "random_search_nasbench_201", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'evolution'", ":", "\n", "        ", "data", ",", "full_data", "=", "evolution_search_nasbench_asr", "(", "search_space", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", ",", "full_data", "=", "bananas_nasbench_asr", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "mp", "[", "'layer_width'", "]", "=", "20", "\n", "data", ",", "full_data", "=", "bananas_nasbench_asr", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_uncertainty_predictor_nasbench_asr", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "\n", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_predictor_nasbench_asr", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_new'", ":", "\n", "        ", "data", ",", "full_data", "=", "gin_predictor_new_nasbench_asr", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'oracle'", ":", "\n", "        ", "data", ",", "full_data", "=", "oracle_nasbench_asr", "(", "search_space", ",", "logger", "=", "logger", ",", "record_mutation", "=", "record_mutation", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gp_bayesopt'", ":", "\n", "        ", "data", "=", "gp_bayesopt_nasbench_asr", "(", "search_space", ",", "logger", "=", "logger", ",", "record_kt", "=", "record_kt", ",", "\n", "record_mutation", "=", "record_mutation", ",", "tmpdir", "=", "f'./temp_nasbench_asr_{gpu}'", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "if", "full_data", "is", "not", "None", ":", "\n", "        ", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", ",", "full_data", "\n", "", "else", ":", "\n", "        ", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_nas_scalar_prior": [[248, 268], ["copy.deepcopy", "copy.deepcopy.pop", "algo_compare.compute_best_test_losses_case2", "predictor.gin_predictor_scalar_case2", "predictor.gin_predictor_scalar_case2", "predictor.gin_predictor_scalar_case2", "predictor.gin_predictor_scalar_case2", "predictor.gin_predictor_scalar_case2", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_scalar_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_scalar_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_scalar_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_scalar_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_scalar_case2"], ["", "", "def", "run_nas_scalar_prior", "(", "algo_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "if", "algo_name", "==", "'gin_predictor_scalar_10'", ":", "\n", "        ", "data", "=", "gin_predictor_scalar_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_scalar_30'", ":", "\n", "        ", "data", "=", "gin_predictor_scalar_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_scalar_50'", ":", "\n", "        ", "data", "=", "gin_predictor_scalar_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_scalar_70'", ":", "\n", "        ", "data", "=", "gin_predictor_scalar_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_scalar_100'", ":", "\n", "        ", "data", "=", "gin_predictor_scalar_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_box_compare_case1": [[270, 291], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "algo_compare.compute_best_test_losses_case1_with_details", "copy.deepcopy.pop", "bananas.bananas_case1", "copy.deepcopy.pop", "bananas.bananas_case1", "predictor.gin_uncertainty_case1", "predictor.gin_predictor_case1", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1_with_details", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_case1"], ["", "def", "run_box_compare_case1", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "with_details", "=", "'T'", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "if", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_case1", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_case1", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "data", "=", "gin_uncertainty_case1", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "data", "=", "gin_predictor_case1", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case1_with_details", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_box_compare_case2": [[293, 314], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "algo_compare.compute_best_test_losses_case2_with_details", "copy.deepcopy.pop", "bananas.bananas_case2", "copy.deepcopy.pop", "bananas.bananas_case2", "predictor.gin_uncertainty_case2", "predictor.gin_predictor_case2", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2_with_details", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_uncertainty_case2", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.predictor.gin_predictor_case2"], ["", "def", "run_box_compare_case2", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "with_details", "=", "'T'", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "if", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_case2", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_case2", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_uncertainty_predictor'", ":", "\n", "        ", "data", "=", "gin_uncertainty_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "data", "=", "gin_predictor_case2", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case2_with_details", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.run_evolutionary_compare": [[316, 334], ["copy.deepcopy", "copy.deepcopy.pop", "algo_compare.compute_best_test_losses_case1", "evolution.evolution_search_compare_case1", "evolution.evolution_search_compare_case2", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_compare_case1", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_compare_case2"], ["", "def", "run_evolutionary_compare", "(", "algo_params", ",", "search_space", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        Evolutionary case 1 represent mutate one child each time.\n        Evolutionary case 2 represent mutate many children each time.\n    \"\"\"", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "if", "algo_name", "==", "'evolutionary_case1'", ":", "\n", "        ", "data", "=", "evolution_search_compare_case1", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "'evolutionary_case2'", "in", "algo_name", ":", "\n", "        ", "data", "=", "evolution_search_compare_case2", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses_case1", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1": [[336, 348], ["range", "results.append", "sorted"], "function", ["None"], ["", "def", "compute_best_test_losses_case1", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "2", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "3", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2": [[350, 362], ["range", "results.append", "sorted"], "function", ["None"], ["", "def", "compute_best_test_losses_case2", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "5", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case1_with_details": [[364, 382], ["range", "numpy.array().reshape", "numpy.array().reshape", "results.append", "sorted", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "compute_best_test_losses_case1_with_details", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "2", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "3", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "", "val_distribution", "=", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", "\n", "val_datas_np", "=", "np", ".", "array", "(", "val_distribution", ")", ".", "reshape", "(", "(", "-", "1", ",", "10", ")", ")", "\n", "test_distribution", "=", "[", "d", "[", "3", "]", "for", "d", "in", "data", "]", "\n", "test_datas_np", "=", "np", ".", "array", "(", "test_distribution", ")", ".", "reshape", "(", "(", "-", "1", ",", "10", ")", ")", "\n", "dist_results", "=", "{", "'val'", ":", "val_datas_np", ",", "\n", "'test'", ":", "test_datas_np", "}", "\n", "return", "results", ",", "dist_results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.algo_compare.compute_best_test_losses_case2_with_details": [[384, 402], ["range", "numpy.array().reshape", "numpy.array().reshape", "results.append", "sorted", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "compute_best_test_losses_case2_with_details", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "5", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "", "val_distribution", "=", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", "\n", "val_datas_np", "=", "np", ".", "array", "(", "val_distribution", ")", ".", "reshape", "(", "(", "-", "1", ",", "10", ")", ")", "\n", "test_distribution", "=", "[", "d", "[", "5", "]", "for", "d", "in", "data", "]", "\n", "test_datas_np", "=", "np", ".", "array", "(", "test_distribution", ")", ".", "reshape", "(", "(", "-", "1", ",", "10", ")", ")", "\n", "dist_results", "=", "{", "'val'", ":", "val_datas_np", ",", "\n", "'test'", ":", "test_datas_np", "}", "\n", "return", "results", ",", "dist_results", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_case1": [[20, 64], ["search_space.generate_random_dataset", "random.sample", "search_space.mutate_arch", "search_space.query_arch", "search_space.generate_random_dataset.append", "val_losses.append", "population.append", "numpy.argsort", "len", "population.remove", "print", "range", "sorted", "len", "sorted", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch"], ["def", "evolution_search_case1", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "val_losses", "=", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", "\n", "query", "=", "num_init", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "mutated", "=", "search_space", ".", "mutate_arch", "(", "data", "[", "best_index", "]", "[", "0", "]", ",", "mutation_rate", ")", "\n", "archtuple", "=", "search_space", ".", "query_arch", "(", "mutated", ",", "deterministic", "=", "deterministic", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "val_losses", ".", "append", "(", "archtuple", "[", "2", "]", ")", "\n", "population", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "\n", "# kill the worst from the population", "\n", "if", "len", "(", "population", ")", ">=", "population_size", ":", "\n", "            ", "worst_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "population", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "population", ".", "remove", "(", "worst_index", ")", "\n", "\n", "", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "print", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "\n", "", "query", "+=", "1", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_case2": [[66, 114], ["search_space.generate_random_dataset", "random.sample", "search_space.mutate_arch", "search_space.generate_random_dataset.append", "parent_list.append", "child_list.append", "val_losses.append", "population.append", "numpy.argsort", "len", "population.remove", "logger.info", "range", "sorted", "len", "sorted", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch"], ["", "def", "evolution_search_case2", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "\n", "parent_list", "=", "[", "]", "\n", "child_list", "=", "[", "]", "\n", "val_losses", "=", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "mutated", "=", "search_space", ".", "mutate_arch", "(", "{", "'matrix'", ":", "data", "[", "best_index", "]", "[", "1", "]", ",", "'ops'", ":", "data", "[", "best_index", "]", "[", "2", "]", "}", ",", "mutation_rate", ")", "\n", "data", ".", "append", "(", "mutated", ")", "\n", "parent_list", ".", "append", "(", "data", "[", "best_index", "]", ")", "\n", "child_list", ".", "append", "(", "mutated", ")", "\n", "val_losses", ".", "append", "(", "mutated", "[", "4", "]", ")", "\n", "population", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "# kill the worst from the population   in nas bench paper kill the oldest arch", "\n", "if", "len", "(", "population", ")", ">", "population_size", ":", "\n", "            ", "worst_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "population", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "population", ".", "remove", "(", "worst_index", ")", "\n", "\n", "", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "1", "\n", "", "return", "data", ",", "{", "'type'", ":", "'rea'", ",", "'final_data'", ":", "data", ",", "'p_list'", ":", "parent_list", ",", "'c_list'", ":", "child_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_nasbench201": [[116, 166], ["search_space.generate_random_dataset", "random.sample", "nas_lib.nas_201_api.genotypes.Structure.str2structure", "search_space.mutate", "parent_list.append", "child_list.append", "search_space.generate_random_dataset.append", "val_losses.append", "population.append", "numpy.argsort", "len", "population.remove", "logger.info", "range", "sorted", "len", "sorted", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate"], ["", "def", "evolution_search_nasbench201", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "\n", "parent_list", "=", "[", "]", "\n", "child_list", "=", "[", "]", "\n", "val_losses", "=", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "arch", "=", "data", "[", "best_index", "]", "[", "6", "]", "\n", "structures", "=", "CellStructure", ".", "str2structure", "(", "arch", ")", "\n", "_", ",", "mutated", "=", "search_space", ".", "mutate", "(", "structures", ")", "\n", "parent_list", ".", "append", "(", "data", "[", "best_index", "]", ")", "\n", "child_list", ".", "append", "(", "mutated", ")", "\n", "data", ".", "append", "(", "mutated", ")", "\n", "val_losses", ".", "append", "(", "mutated", "[", "4", "]", ")", "\n", "population", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "# kill the worst from the population   in nas bench paper kill the oldest arch", "\n", "if", "len", "(", "population", ")", ">", "population_size", ":", "\n", "            ", "worst_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "population", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "population", ".", "remove", "(", "worst_index", ")", "\n", "\n", "", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "1", "\n", "", "return", "data", ",", "{", "'type'", ":", "'rea'", ",", "'final_data'", ":", "data", ",", "'p_list'", ":", "parent_list", ",", "'c_list'", ":", "child_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_nasbench": [[168, 212], ["search_space.generate_random_dataset", "random.sample", "search_space.mutate_arch", "search_space.query_arch", "search_space.generate_random_dataset.append", "val_losses.append", "population.append", "numpy.argsort", "len", "population.remove", "logger.info", "range", "sorted", "len", "sorted", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch"], ["", "def", "evolution_search_nasbench", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "\n", "val_losses", "=", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "mutated", "=", "search_space", ".", "mutate_arch", "(", "{", "'matrix'", ":", "data", "[", "best_index", "]", "[", "0", "]", "[", "'matrix'", "]", ",", "'ops'", ":", "data", "[", "best_index", "]", "[", "0", "]", "[", "'ops'", "]", "}", ",", "mutation_rate", ")", "\n", "mutated", "=", "search_space", ".", "query_arch", "(", "mutated", ",", "\n", "train", "=", "True", ",", "\n", "encode_paths", "=", "True", ")", "\n", "data", ".", "append", "(", "mutated", ")", "\n", "val_losses", ".", "append", "(", "mutated", "[", "2", "]", ")", "\n", "population", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "# kill the worst from the population   in nas bench paper kill the oldest arch", "\n", "if", "len", "(", "population", ")", ">", "population_size", ":", "\n", "            ", "worst_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "population", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "population", ".", "remove", "(", "worst_index", ")", "\n", "\n", "", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "1", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_compare_case1": [[214, 258], ["search_space.generate_random_dataset", "search_space.generate_random_dataset.extend", "val_losses.extend", "list", "numpy.argsort", "len", "random.sample", "search_space.mutate_arch", "search_space.query_arch", "child_list.append", "sorted", "range", "print", "range", "sorted", "sorted", "len", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch"], ["", "def", "evolution_search_compare_case1", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "150", ",", "\n", "candidate_num", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "val_losses", "=", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", "\n", "query", "=", "num_init", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "child_list", "=", "[", "]", "\n", "while", "len", "(", "child_list", ")", "<", "candidate_num", ":", "\n", "            ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "mutated", "=", "search_space", ".", "mutate_arch", "(", "data", "[", "best_index", "]", "[", "0", "]", ",", "mutation_rate", ")", "\n", "archtuple", "=", "search_space", ".", "query_arch", "(", "mutated", ",", "deterministic", "=", "deterministic", ")", "\n", "child_list", ".", "append", "(", "archtuple", ")", "\n", "", "best_children", "=", "sorted", "(", "[", "(", "arch", "[", "2", "]", ",", "arch", ")", "for", "arch", "in", "child_list", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", ":", "k", "]", "\n", "data", ".", "extend", "(", "[", "val", "[", "1", "]", "for", "val", "in", "best_children", "]", ")", "\n", "val_losses", ".", "extend", "(", "[", "val", "[", "0", "]", "for", "val", "in", "best_children", "]", ")", "\n", "population", "=", "list", "(", "range", "(", "len", "(", "data", ")", "-", "1", ")", ")", "\n", "\n", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "print", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_compare_case2": [[260, 303], ["search_space.generate_random_dataset", "search_space.generate_random_dataset.extend", "val_losses.extend", "list", "range", "len", "random.sample", "search_space.get_candidates_fixed_nums_single_arch", "child_list.extend", "sorted", "range", "print", "sorted", "sorted", "len", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_candidates_fixed_nums_single_arch"], ["", "def", "evolution_search_compare_case2", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "candidate_num", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "mutation_num", "=", "10", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "val_losses", "=", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", "\n", "query", "=", "num_init", "\n", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "child_list", "=", "[", "]", "\n", "while", "len", "(", "child_list", ")", "<", "candidate_num", ":", "\n", "            ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "mutated", "=", "search_space", ".", "get_candidates_fixed_nums_single_arch", "(", "data", "=", "data", "[", "best_index", "]", "[", "0", "]", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "num", "=", "mutation_num", ")", "\n", "child_list", ".", "extend", "(", "mutated", ")", "\n", "", "best_children", "=", "sorted", "(", "[", "(", "arch", "[", "2", "]", ",", "arch", ")", "for", "arch", "in", "child_list", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", ":", "k", "]", "\n", "data", ".", "extend", "(", "[", "val", "[", "1", "]", "for", "val", "in", "best_children", "]", ")", "\n", "val_losses", ".", "extend", "(", "[", "val", "[", "0", "]", "for", "val", "in", "best_children", "]", ")", "\n", "population", "=", "list", "(", "range", "(", "len", "(", "data", ")", "-", "1", ")", ")", "\n", "\n", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "print", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_nasbench_nlp": [[305, 354], ["search_space.generate_random_dataset", "random.sample", "search_space.mutate", "search_space.generate_random_dataset.append", "parent_list.append", "child_list.append", "val_losses.append", "population.append", "numpy.argsort", "len", "population.remove", "logger.info", "range", "sorted", "len", "sorted", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate"], ["", "def", "evolution_search_nasbench_nlp", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "parent_list", "=", "[", "]", "\n", "child_list", "=", "[", "]", "\n", "query", "=", "num_init", "\n", "val_losses", "=", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "arch", "=", "data", "[", "best_index", "]", "[", "6", "]", "\n", "mutated", "=", "search_space", ".", "mutate", "(", "arch", ",", "by_distance", "=", "True", ",", "eps", "=", "mutation_rate", ")", "\n", "data", ".", "append", "(", "mutated", ")", "\n", "parent_list", ".", "append", "(", "data", "[", "best_index", "]", ")", "\n", "child_list", ".", "append", "(", "mutated", ")", "\n", "val_losses", ".", "append", "(", "mutated", "[", "4", "]", ")", "\n", "population", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "# kill the worst from the population   in nas bench paper kill the oldest arch", "\n", "if", "len", "(", "population", ")", ">", "population_size", ":", "\n", "            ", "worst_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "population", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "population", ".", "remove", "(", "worst_index", ")", "\n", "\n", "", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "1", "\n", "", "return", "data", ",", "{", "'type'", ":", "'rea'", ",", "'final_data'", ":", "data", ",", "'p_list'", ":", "parent_list", ",", "'c_list'", ":", "child_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.evolution.evolution_search_nasbench_asr": [[356, 404], ["search_space.generate_random_dataset", "random.sample", "search_space.mutate", "search_space.generate_random_dataset.append", "parent_list.append", "child_list.append", "val_losses.append", "population.append", "numpy.argsort", "len", "population.remove", "logger.info", "range", "sorted", "len", "sorted", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate"], ["", "def", "evolution_search_nasbench_asr", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "\n", "parent_list", "=", "[", "]", "\n", "child_list", "=", "[", "]", "\n", "val_losses", "=", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "arch", "=", "data", "[", "best_index", "]", "[", "6", "]", "\n", "mutated", "=", "search_space", ".", "mutate", "(", "arch", ",", "mutate_rate", "=", "mutation_rate", ")", "\n", "data", ".", "append", "(", "mutated", ")", "\n", "parent_list", ".", "append", "(", "data", "[", "best_index", "]", ")", "\n", "child_list", ".", "append", "(", "mutated", ")", "\n", "val_losses", ".", "append", "(", "mutated", "[", "4", "]", ")", "\n", "population", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "# kill the worst from the population   in nas bench paper kill the oldest arch", "\n", "if", "len", "(", "population", ")", ">", "population_size", ":", "\n", "            ", "worst_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "population", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "population", ".", "remove", "(", "worst_index", ")", "\n", "\n", "", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "1", "\n", "", "return", "data", ",", "{", "'type'", ":", "'rea'", ",", "'final_data'", ":", "data", ",", "'p_list'", ":", "parent_list", ",", "'c_list'", ":", "child_list", "}", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.random.random_search_case1": [[3, 18], ["search_space.generate_random_dataset", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset"], ["def", "random_search_case1", "(", "search_space", ",", "\n", "total_queries", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "verbose", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    random search\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "total_queries", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "if", "verbose", ":", "\n", "        ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "total_queries", ",", "top_5_loss", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.random.random_search_case2": [[20, 35], ["search_space.generate_random_dataset", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset"], ["", "def", "random_search_case2", "(", "search_space", ",", "\n", "total_queries", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "verbose", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    random search\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "total_queries", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "if", "verbose", ":", "\n", "        ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "total_queries", ",", "top_5_loss", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.random.random_search_nasbench_201": [[37, 52], ["search_space.generate_random_dataset", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset"], ["", "def", "random_search_nasbench_201", "(", "search_space", ",", "\n", "total_queries", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "verbose", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    random search\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "total_queries", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "if", "verbose", ":", "\n", "        ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "total_queries", ",", "top_5_loss", ")", ")", "\n", "", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_101_case1": [[4, 52], ["search_space.generate_random_dataset", "numpy.array", "numpy.argsort", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.generate_random_dataset.append", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates"], ["def", "oracle_nasbench_101_case1", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "mutation_rate", "=", "-", "1", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "mutate_list", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", ",", "\n", "train", "=", "True", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "2", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "train", "=", "True", ")", "\n", "", "val_loss", "=", "np", ".", "array", "(", "[", "cand", "[", "2", "]", "for", "cand", "in", "candidates", "]", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "val_loss", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'oracle'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "[", "]", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_101_case2": [[54, 100], ["search_space.generate_random_dataset", "numpy.array", "numpy.argsort", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.generate_random_dataset.append", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates"], ["", "def", "oracle_nasbench_101_case2", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "mutation_rate", "=", "-", "1", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "mutate_list", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "", "val_loss", "=", "np", ".", "array", "(", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "val_loss", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'oracle'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "[", "]", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_201": [[102, 147], ["search_space.generate_random_dataset", "numpy.array", "numpy.argsort", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.generate_random_dataset.append", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates"], ["", "def", "oracle_nasbench_201", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "mutation_rate", "=", "-", "1", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "mutate_list", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", "\n", ")", "\n", "", "val_loss", "=", "np", ".", "array", "(", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "val_loss", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'oracle'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "[", "]", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_nlp": [[149, 196], ["search_space.generate_random_dataset", "numpy.array", "numpy.argsort", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.generate_random_dataset.append", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates"], ["", "def", "oracle_nasbench_nlp", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "mutation_rate", "=", "-", "1", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "mutate_list", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "val_loss", "=", "np", ".", "array", "(", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "val_loss", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'oracle'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "[", "]", ",", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.oracle.oracle_nasbench_asr": [[198, 246], ["search_space.generate_random_dataset", "numpy.array", "numpy.argsort", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "search_space.generate_random_dataset.append", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates"], ["", "def", "oracle_nasbench_asr", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "mutation_rate", "=", "-", "1", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "mutate_list", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "\n", "", "val_loss", "=", "np", ".", "array", "(", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "val_loss", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "'oracle'", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "[", "]", ",", "'mutate_list'", ":", "mutate_list", "}", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case1": [[10, 72], ["search_space.generate_random_dataset", "numpy.array", "numpy.array", "search_space.get_candidates", "numpy.array", "range", "acquisition_functions.acq_fn", "models.meta_neural_net.MetaNeuralnet.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "models.meta_neural_net.MetaNeuralnet", "models.meta_neural_net.MetaNeuralnet", "numpy.squeeze", "sorted", "models.meta_neural_net.MetaNeuralnet.predict", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict"], ["def", "bananas_case1", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "1", "]", "for", "d", "in", "data", "]", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "\n", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "1", "]", "for", "c", "in", "candidates", "]", ")", "\n", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "candidates", "[", "i", "]", "[", "0", "]", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "deterministic", "=", "deterministic", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_case2": [[74, 172], ["search_space.generate_random_dataset", "numpy.array", "numpy.array", "numpy.array", "range", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "models.meta_neural_net.MetaNeuralnet.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "acquisition_functions.acq_fn", "kt_list.append", "acquisition_functions.acq_fn", "search_space.query_arch", "search_space.generate_random_dataset.append", "kt_top_list.append", "logger.info", "models.meta_neural_net.MetaNeuralnet", "models.meta_neural_net.MetaNeuralnet", "numpy.squeeze", "nas_lib.utils.corr.get_kendalltau_coorlection", "kt_top_pred_list.append", "kt_top_gt_list.append", "sorted", "models.meta_neural_net.MetaNeuralnet.predict", "samples.tolist", "nas_lib.utils.corr.get_kendalltau_coorlection", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection"], ["", "def", "bananas_case2", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "encode_paths", ":", "\n", "        ", "type", "=", "'bananas'", "\n", "", "else", ":", "\n", "        ", "type", "=", "'bananas_f'", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "3", "]", "for", "d", "in", "data", "]", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ",", "\n", "return_dist", "=", "True", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "\n", "", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "3", "]", "for", "c", "in", "candidates", "]", ")", "\n", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "samples", "=", "None", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "sorted_indices", ",", "samples", "=", "acq_fn", "(", "predictions", ",", "explore_type", ",", "get_samples", "=", "True", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "samples", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "else", ":", "\n", "            ", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "deterministic", "=", "deterministic", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "if", "samples", "is", "not", "None", ":", "\n", "                ", "kt_top_pred_list", ".", "append", "(", "samples", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "", "if", "samples", "is", "not", "None", ":", "\n", "            ", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "type", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_201": [[174, 270], ["search_space.generate_random_dataset", "numpy.array", "range", "numpy.array", "numpy.array", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "numpy.array", "numpy.array", "models.meta_neural_net.MetaNeuralnet.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "acquisition_functions.acq_fn", "kt_list.append", "acquisition_functions.acq_fn", "search_space.generate_random_dataset.append", "kt_top_list.append", "logger.info", "models.meta_neural_net.MetaNeuralnet", "models.meta_neural_net.MetaNeuralnet", "numpy.squeeze", "nas_lib.utils.corr.get_kendalltau_coorlection", "kt_top_pred_list.append", "kt_top_gt_list.append", "sorted", "models.meta_neural_net.MetaNeuralnet.predict", "samples.tolist", "nas_lib.utils.corr.get_kendalltau_coorlection", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection"], ["", "def", "bananas_nasbench_201", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "eva_new", "=", "True", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "encode_paths", ":", "\n", "        ", "type", "=", "'bananas'", "\n", "", "else", ":", "\n", "        ", "type", "=", "'bananas_f'", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "encode_paths", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "3", "]", "for", "d", "in", "data", "]", ")", "\n", "", "else", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "7", "]", "for", "d", "in", "data", "]", ")", "\n", "", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", "\n", ")", "\n", "", "if", "encode_paths", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "3", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "else", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "7", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "samples", "=", "None", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "sorted_indices", ",", "samples", "=", "acq_fn", "(", "predictions", ",", "explore_type", ",", "get_samples", "=", "True", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "samples", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "else", ":", "\n", "            ", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "if", "samples", "is", "not", "None", ":", "\n", "                ", "kt_top_pred_list", ".", "append", "(", "samples", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "", "if", "samples", "is", "not", "None", ":", "\n", "            ", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "type", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_diff_training_nums_case1": [[272, 335], ["search_space.generate_random_dataset", "search_space.get_candidates", "numpy.array", "numpy.array", "numpy.array", "range", "acquisition_functions.acq_fn", "len", "copy.deepcopy", "models.meta_neural_net.MetaNeuralnet.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "models.meta_neural_net.MetaNeuralnet", "models.meta_neural_net.MetaNeuralnet", "numpy.squeeze", "sorted", "models.meta_neural_net.MetaNeuralnet.predict", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict"], ["", "def", "bananas_diff_training_nums_case1", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "training_nums", "=", "150", ")", ":", "\n", "    ", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "train_data", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "1", "]", "for", "c", "in", "candidates", "]", ")", "\n", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "\n", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "1", "]", "for", "d", "in", "train_data", "]", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "train_data", "]", ")", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "candidates", "[", "i", "]", "[", "0", "]", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "deterministic", "=", "deterministic", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training data nums {},  top 5 val losses {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_training_num_diff_case2": [[337, 399], ["search_space.generate_random_dataset", "numpy.array", "numpy.array", "search_space.get_candidates", "numpy.array", "range", "acquisition_functions.acq_fn", "len", "copy.deepcopy", "models.meta_neural_net.MetaNeuralnet.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "models.meta_neural_net.MetaNeuralnet", "models.meta_neural_net.MetaNeuralnet", "numpy.squeeze", "sorted", "models.meta_neural_net.MetaNeuralnet.predict", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict"], ["", "def", "bananas_training_num_diff_case2", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "training_nums", "=", "150", ")", ":", "\n", "    ", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "train_data", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "3", "]", "for", "d", "in", "train_data", "]", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "train_data", "]", ")", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "3", "]", "for", "c", "in", "candidates", "]", ")", "\n", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "deterministic", "=", "deterministic", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {},  training data nums {},  top 5 val losses {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_nlp": [[401, 500], ["search_space.generate_random_dataset", "numpy.array", "range", "numpy.array", "numpy.array", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "numpy.array", "numpy.array", "models.meta_neural_net.MetaNeuralnet.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "acquisition_functions.acq_fn", "kt_list.append", "acquisition_functions.acq_fn", "search_space.generate_random_dataset.append", "kt_top_list.append", "logger.info", "models.meta_neural_net.MetaNeuralnet", "models.meta_neural_net.MetaNeuralnet", "numpy.squeeze", "nas_lib.utils.corr.get_kendalltau_coorlection", "kt_top_pred_list.append", "kt_top_gt_list.append", "sorted", "models.meta_neural_net.MetaNeuralnet.predict", "samples.tolist", "nas_lib.utils.corr.get_kendalltau_coorlection", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection"], ["", "def", "bananas_nasbench_nlp", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "eva_new", "=", "True", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "mutation_rate", "=", "0.3", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "encode_paths", ":", "\n", "        ", "type", "=", "'bananas'", "\n", "", "else", ":", "\n", "        ", "type", "=", "'bananas_f'", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "encode_paths", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "3", "]", "for", "d", "in", "data", "]", ")", "\n", "", "else", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "7", "]", "for", "d", "in", "data", "]", ")", "\n", "", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "if", "encode_paths", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "3", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "else", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "7", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "samples", "=", "None", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "sorted_indices", ",", "samples", "=", "acq_fn", "(", "predictions", ",", "explore_type", ",", "get_samples", "=", "True", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "samples", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "else", ":", "\n", "            ", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "if", "samples", "is", "not", "None", ":", "\n", "                ", "kt_top_pred_list", ".", "append", "(", "samples", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "", "if", "samples", "is", "not", "None", ":", "\n", "            ", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "type", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.bananas.bananas_nasbench_asr": [[502, 601], ["search_space.generate_random_dataset", "numpy.array", "range", "numpy.array", "numpy.array", "search_space.get_candidates", "mutate_list.append", "search_space.get_candidates", "numpy.array", "numpy.array", "models.meta_neural_net.MetaNeuralnet.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "acquisition_functions.acq_fn", "kt_list.append", "acquisition_functions.acq_fn", "search_space.generate_random_dataset.append", "kt_top_list.append", "logger.info", "models.meta_neural_net.MetaNeuralnet", "models.meta_neural_net.MetaNeuralnet", "numpy.squeeze", "nas_lib.utils.corr.get_kendalltau_coorlection", "kt_top_pred_list.append", "kt_top_gt_list.append", "sorted", "models.meta_neural_net.MetaNeuralnet.predict", "samples.tolist", "nas_lib.utils.corr.get_kendalltau_coorlection", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection"], ["", "def", "bananas_nasbench_asr", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "eva_new", "=", "True", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "mutation_rate", "=", "-", "1", ",", "\n", "record_kt", "=", "'F'", ",", "\n", "record_mutation", "=", "'F'", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "kt_list", "=", "[", "]", "\n", "kt_top_list", "=", "[", "]", "\n", "mutate_list", "=", "[", "]", "\n", "if", "encode_paths", ":", "\n", "        ", "type", "=", "'bananas'", "\n", "", "else", ":", "\n", "        ", "type", "=", "'bananas_f'", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "encode_paths", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "3", "]", "for", "d", "in", "data", "]", ")", "\n", "", "else", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "7", "]", "for", "d", "in", "data", "]", ")", "\n", "", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "if", "record_mutation", "==", "'T'", ":", "\n", "            ", "candidates", ",", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", ",", "\n", "return_dist", "=", "True", "\n", ")", "\n", "cand_val_list", "=", "[", "cand", "[", "4", "]", "for", "cand", "in", "candidates", "]", "\n", "mutate_list", ".", "append", "(", "(", "dist_list", ",", "replicate_num", ",", "mutated_nums_list", ",", "mutated_arch_list", ",", "cand_val_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "mutation_rate", "=", "mutation_rate", "\n", ")", "\n", "", "if", "encode_paths", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "3", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "else", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "7", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "MetaNeuralnet", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "samples", "=", "None", "\n", "if", "record_kt", "==", "'T'", ":", "\n", "            ", "sorted_indices", ",", "samples", "=", "acq_fn", "(", "predictions", ",", "explore_type", ",", "get_samples", "=", "True", ")", "\n", "candidates_gt", "=", "[", "can", "[", "4", "]", "for", "can", "in", "candidates", "]", "\n", "kt", "=", "get_kendalltau_coorlection", "(", "samples", ".", "tolist", "(", ")", ",", "candidates_gt", ")", "[", "0", "]", "\n", "kt_list", ".", "append", "(", "kt", ")", "\n", "", "else", ":", "\n", "            ", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "", "kt_top_pred_list", "=", "[", "]", "\n", "kt_top_gt_list", "=", "[", "]", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "if", "samples", "is", "not", "None", ":", "\n", "                ", "kt_top_pred_list", ".", "append", "(", "samples", "[", "i", "]", ")", "\n", "kt_top_gt_list", ".", "append", "(", "archtuple", "[", "4", "]", ")", "\n", "", "", "if", "samples", "is", "not", "None", ":", "\n", "            ", "kt_top_list", ".", "append", "(", "get_kendalltau_coorlection", "(", "kt_top_pred_list", ",", "kt_top_gt_list", ")", "[", "0", "]", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", ",", "{", "'type'", ":", "type", ",", "'final_data'", ":", "data", ",", "'kt_list'", ":", "kt_list", ",", "'kt_top_list'", ":", "kt_top_list", ",", "\n", "'mutate_list'", ":", "mutate_list", "}", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.parse_single_macro_graph": [[6, 16], ["open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load"], "function", ["None"], ["def", "parse_single_macro_graph", "(", "single_model", ")", ":", "\n", "    ", "with", "open", "(", "single_model", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "models", "=", "pickle", ".", "load", "(", "f", ")", "\n", "original_model", "=", "pickle", ".", "load", "(", "f", ")", "\n", "hash_key", "=", "pickle", ".", "load", "(", "f", ")", "\n", "train_loss", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "test_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "best_val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "[", "models", ",", "original_model", ",", "hash_key", ",", "train_loss", ",", "val_acc", ",", "test_acc", ",", "best_val_acc", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.parse_single_darts_macro_graph": [[18, 30], ["open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load"], "function", ["None"], ["", "def", "parse_single_darts_macro_graph", "(", "single_model", ")", ":", "\n", "    ", "with", "open", "(", "single_model", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "models", "=", "pickle", ".", "load", "(", "f", ")", "\n", "hash_key", "=", "pickle", ".", "load", "(", "f", ")", "\n", "train_loss", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "test_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "best_val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "loss_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_acc_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "[", "genotype", ",", "models", ",", "hash_key", ",", "train_loss", ",", "val_acc", ",", "test_acc", ",", "best_val_acc", ",", "loss_list", ",", "val_acc_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.single_model_trans_cpu": [[32, 50], ["open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "os.path.join", "pickle.load.to", "single_model.split"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to"], ["", "def", "single_model_trans_cpu", "(", "single_model", ",", "new_path", ")", ":", "\n", "    ", "with", "open", "(", "single_model", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "models", "=", "pickle", ".", "load", "(", "f", ")", "\n", "original_model", "=", "pickle", ".", "load", "(", "f", ")", "\n", "hash_key", "=", "pickle", ".", "load", "(", "f", ")", "\n", "train_loss", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "test_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "best_val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "new_path", ",", "single_model", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "models", ".", "to", "(", "'cpu'", ")", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "original_model", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "hash_key", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "train_loss", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "val_acc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "test_acc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "best_val_acc", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.parse_macro_graph": [[52, 57], ["os.listdir", "os.path.join", "utils_parse.parse_single_macro_graph"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.parse_single_macro_graph"], ["", "", "def", "parse_macro_graph", "(", "models_path", ")", ":", "\n", "    ", "models", "=", "os", ".", "listdir", "(", "models_path", ")", "\n", "full_models", "=", "[", "os", ".", "path", ".", "join", "(", "models_path", ",", "m", ")", "for", "m", "in", "models", "]", "\n", "for", "fm", "in", "full_models", ":", "\n", "        ", "data", "=", "parse_single_macro_graph", "(", "fm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.parse_darts_macro_graph": [[59, 82], ["os.listdir", "print", "print", "print", "os.path.join", "utils_parse.parse_single_darts_macro_graph", "total_accs.append", "total_avg_accs.append", "total_model_keys.append", "numpy.argsort().tolist", "sum", "len", "numpy.argsort", "numpy.array"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.parse_single_darts_macro_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "", "def", "parse_darts_macro_graph", "(", "models_path", ")", ":", "\n", "    ", "models", "=", "os", ".", "listdir", "(", "models_path", ")", "\n", "full_models", "=", "[", "os", ".", "path", ".", "join", "(", "models_path", ",", "m", ")", "for", "m", "in", "models", "]", "\n", "best_acc", "=", "0", "\n", "hash_key", "=", "None", "\n", "total_accs", "=", "[", "]", "\n", "total_avg_accs", "=", "[", "]", "\n", "total_model_keys", "=", "[", "]", "\n", "for", "fm", "in", "full_models", ":", "\n", "        ", "data", "=", "parse_single_darts_macro_graph", "(", "fm", ")", "\n", "test_acc", "=", "data", "[", "6", "]", "\n", "avg_val_acc", "=", "sum", "(", "data", "[", "8", "]", "[", "-", "5", ":", "]", ")", "/", "len", "(", "data", "[", "8", "]", "[", "-", "5", ":", "]", ")", "\n", "avg_val_acc", "=", "(", "test_acc", "+", "avg_val_acc", ")", "/", "2", "\n", "total_accs", ".", "append", "(", "test_acc", ")", "\n", "total_avg_accs", ".", "append", "(", "avg_val_acc", ")", "\n", "total_model_keys", ".", "append", "(", "data", "[", "2", "]", ")", "\n", "if", "test_acc", ">", "best_acc", ":", "\n", "            ", "best_acc", "=", "test_acc", "\n", "hash_key", "=", "data", "[", "2", "]", "\n", "", "", "idxs", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "total_avg_accs", ")", ")", ".", "tolist", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "print", "(", "[", "total_accs", "[", "k", "]", "for", "k", "in", "idxs", "[", ":", "10", "]", "]", ")", "\n", "print", "(", "[", "total_avg_accs", "[", "k", "]", "for", "k", "in", "idxs", "[", ":", "10", "]", "]", ")", "\n", "print", "(", "[", "total_model_keys", "[", "k", "]", "for", "k", "in", "idxs", "[", ":", "10", "]", "]", ")", "\n", "# print(best_acc, hash_key)", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.parse_multiple_macro_graph": [[85, 90], ["os.listdir", "os.path.join", "utils_parse.single_model_trans_cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.single_model_trans_cpu"], ["", "def", "parse_multiple_macro_graph", "(", "models_path", ",", "new_path", ")", ":", "\n", "    ", "models", "=", "os", ".", "listdir", "(", "models_path", ")", "\n", "full_models", "=", "[", "os", ".", "path", ".", "join", "(", "models_path", ",", "m", ")", "for", "m", "in", "models", "]", "\n", "for", "fm", "in", "full_models", ":", "\n", "        ", "single_model_trans_cpu", "(", "fm", ",", "new_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_parse.load_pretraining_data": [[92, 109], ["os.listdir", "os.path.join", "open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "total_models.append", "val_acc_list.append"], "function", ["None"], ["", "", "def", "load_pretraining_data", "(", "model_path", ")", ":", "\n", "    ", "total_models", "=", "[", "]", "\n", "val_acc_list", "=", "[", "]", "\n", "models", "=", "os", ".", "listdir", "(", "model_path", ")", "\n", "for", "m", "in", "models", ":", "\n", "        ", "m_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "m", ")", "\n", "with", "open", "(", "m_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "original_m", "=", "pickle", ".", "load", "(", "f", ")", "\n", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "best_val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "total_models", ".", "append", "(", "original_m", ")", "\n", "val_acc_list", ".", "append", "(", "100", "-", "best_val_acc", ")", "\n", "", "", "return", "total_models", ",", "val_acc_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.NodeAccDist.__init__": [[53, 65], ["str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "node_dict", "=", "{", "}", "\n", "self", ".", "node_dict", "[", "str", "(", "0", ")", "]", "=", "[", "]", "\n", "self", ".", "node_dict", "[", "str", "(", "1", ")", "]", "=", "[", "]", "\n", "self", ".", "node_dict", "[", "str", "(", "2", ")", "]", "=", "[", "]", "\n", "self", ".", "node_dict", "[", "str", "(", "3", ")", "]", "=", "[", "]", "\n", "\n", "self", ".", "node_count_dict", "=", "{", "}", "\n", "self", ".", "node_count_dict", "[", "str", "(", "0", ")", "]", "=", "0", "\n", "self", ".", "node_count_dict", "[", "str", "(", "1", ")", "]", "=", "0", "\n", "self", ".", "node_count_dict", "[", "str", "(", "2", ")", "]", "=", "0", "\n", "self", ".", "node_count_dict", "[", "str", "(", "3", ")", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.NodeAccDist.add_val": [[66, 68], ["utils_mutate.NodeAccDist.node_dict[].append", "str"], "methods", ["None"], ["", "def", "add_val", "(", "self", ",", "node", ",", "val", ")", ":", "\n", "        ", "self", ".", "node_dict", "[", "str", "(", "node", ")", "]", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.NodeAccDist.gen_distribution": [[69, 71], ["None"], "methods", ["None"], ["", "def", "gen_distribution", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.NodeAccDist.sample_node": [[72, 74], ["None"], "methods", ["None"], ["", "def", "sample_node", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.mutate_count_list": [[4, 10], ["numpy.linspace().tolist", "numpy.linspace", "np.linspace.tolist", "str", "int", "numpy.linspace", "int", "enumerate"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["def", "mutate_count_list", "(", "lower_query", ",", "upper_query", ",", "lower", ",", "upper", ",", "total_count", ")", ":", "\n", "    ", "query_list", "=", "np", ".", "linspace", "(", "lower_query", ",", "upper_query", ",", "total_count", ")", ".", "tolist", "(", ")", "\n", "mutate_count", "=", "np", ".", "linspace", "(", "upper", ",", "lower", ",", "total_count", ")", "\n", "mutate_count_list", "=", "mutate_count", ".", "tolist", "(", ")", "\n", "mutate_int_str", "=", "{", "str", "(", "int", "(", "query_list", "[", "idx", "]", ")", ")", ":", "int", "(", "c", ")", "for", "idx", ",", "c", "in", "enumerate", "(", "mutate_count_list", ")", "}", "\n", "return", "mutate_int_str", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.mutate_rate": [[12, 16], ["numpy.exp().tolist", "numpy.exp", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "mutate_rate", "(", "mutate_count", ")", ":", "\n", "    ", "mutate_rate", "=", "np", ".", "exp", "(", "[", "0.2", "*", "i", "for", "i", "in", "range", "(", "mutate_count", ")", "]", ")", ".", "tolist", "(", ")", "\n", "# mutate_rate_list = list(map(lambda i : min(5, i), mutate_rate))", "\n", "return", "mutate_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.category_dist": [[18, 39], ["enumerate", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "category_dist", "(", "dist", ",", "val_acc", ",", "total_connect_dist", ",", "total_node_dist", ")", ":", "\n", "    ", "connect_encode", "=", "dist", "[", ":", "21", "]", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "connect_encode", ")", ":", "\n", "        ", "total_connect_dist", "[", "idx", ",", "val", "]", "+=", "1", "\n", "total_connect_dist", "[", "idx", ",", "2", "]", "+=", "val_acc", "\n", "\n", "", "node1", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "dist", "[", "21", ":", "25", "]", ")", ")", "\n", "total_node_dist", "[", "0", ",", "node1", "]", "+=", "1", "\n", "total_node_dist", "[", "0", ",", "4", "]", "+=", "val_acc", "\n", "node2", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "dist", "[", "25", ":", "29", "]", ")", ")", "\n", "total_node_dist", "[", "1", ",", "node2", "]", "+=", "1", "\n", "total_node_dist", "[", "1", ",", "4", "]", "+=", "val_acc", "\n", "node3", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "dist", "[", "29", ":", "33", "]", ")", ")", "\n", "total_node_dist", "[", "2", ",", "node3", "]", "+=", "1", "\n", "total_node_dist", "[", "2", ",", "4", "]", "+=", "val_acc", "\n", "node4", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "dist", "[", "33", ":", "37", "]", ")", ")", "\n", "total_node_dist", "[", "3", ",", "node4", "]", "+=", "1", "\n", "total_node_dist", "[", "3", ",", "4", "]", "+=", "val_acc", "\n", "node5", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "dist", "[", "37", ":", "]", ")", ")", "\n", "total_node_dist", "[", "4", ",", "node5", "]", "+=", "1", "\n", "total_node_dist", "[", "4", ",", "4", "]", "+=", "val_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.arch_distribution": [[41, 50], ["numpy.zeros", "numpy.zeros", "print", "print", "utils_mutate.category_dist"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.category_dist"], ["", "def", "arch_distribution", "(", "data", ")", ":", "\n", "    ", "total_connect_dist", "=", "np", ".", "zeros", "(", "(", "21", ",", "3", ")", ")", "\n", "total_node_dist", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", "\n", "for", "d", "in", "data", ":", "\n", "        ", "distance", "=", "d", "[", "7", "]", "\n", "val_acc", "=", "d", "[", "4", "]", "\n", "category_dist", "(", "distance", ",", "val_acc", ",", "total_connect_dist", ",", "total_node_dist", ")", "\n", "", "print", "(", "total_connect_dist", ".", "shape", ")", "\n", "print", "(", "total_node_dist", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.arch_acc_distribution": [[76, 115], ["utils_mutate.NodeAccDist", "utils_mutate.NodeAccDist", "utils_mutate.NodeAccDist", "utils_mutate.NodeAccDist", "utils_mutate.NodeAccDist", "range", "enumerate", "numpy.argmax", "NodeAccDist.node_dict[].append", "numpy.argmax", "NodeAccDist.node_dict[].append", "numpy.argmax", "NodeAccDist.node_dict[].append", "numpy.argmax", "NodeAccDist.node_dict[].append", "numpy.argmax", "NodeAccDist.node_dict[].append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "str", "str", "arch_acc_dict[].append", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "arch_acc_distribution", "(", "data", ")", ":", "\n", "    ", "arch_acc_dict", "=", "{", "}", "\n", "arch_count_dict", "=", "{", "}", "\n", "node1_dict", "=", "NodeAccDist", "(", ")", "\n", "node2_dict", "=", "NodeAccDist", "(", ")", "\n", "node3_dict", "=", "NodeAccDist", "(", ")", "\n", "node4_dict", "=", "NodeAccDist", "(", ")", "\n", "node5_dict", "=", "NodeAccDist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "21", ")", ":", "\n", "        ", "arch_acc_dict", "[", "str", "(", "i", ")", "]", "=", "[", "]", "\n", "arch_count_dict", "[", "str", "(", "i", ")", "]", "=", "0", "\n", "", "for", "d", "in", "data", ":", "\n", "        ", "val_acc", "=", "d", "[", "4", "]", "\n", "distance", "=", "d", "[", "7", "]", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "distance", "[", ":", "21", "]", ")", ":", "\n", "            ", "if", "val", "==", "1", ":", "\n", "                ", "arch_acc_dict", "[", "str", "(", "idx", ")", "]", ".", "append", "(", "val_acc", ")", "\n", "arch_count_dict", "[", "str", "(", "idx", ")", "]", "+=", "1", "\n", "", "", "node1", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "21", ":", "25", "]", ")", ")", "\n", "node1_dict", ".", "node_dict", "[", "str", "(", "node1", ")", "]", ".", "append", "(", "val_acc", ")", "\n", "node1_dict", ".", "node_count_dict", "[", "str", "(", "node1", ")", "]", "+=", "1", "\n", "\n", "node2", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "25", ":", "29", "]", ")", ")", "\n", "node2_dict", ".", "node_dict", "[", "str", "(", "node2", ")", "]", ".", "append", "(", "val_acc", ")", "\n", "node2_dict", ".", "node_count_dict", "[", "str", "(", "node2", ")", "]", "+=", "1", "\n", "\n", "node3", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "29", ":", "33", "]", ")", ")", "\n", "node3_dict", ".", "node_dict", "[", "str", "(", "node3", ")", "]", ".", "append", "(", "val_acc", ")", "\n", "node3_dict", ".", "node_count_dict", "[", "str", "(", "node3", ")", "]", "+=", "1", "\n", "\n", "node4", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "33", ":", "37", "]", ")", ")", "\n", "node4_dict", ".", "node_dict", "[", "str", "(", "node4", ")", "]", ".", "append", "(", "val_acc", ")", "\n", "node4_dict", ".", "node_count_dict", "[", "str", "(", "node4", ")", "]", "+=", "1", "\n", "\n", "node5", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "37", ":", "]", ")", ")", "\n", "node5_dict", ".", "node_dict", "[", "str", "(", "node5", ")", "]", ".", "append", "(", "val_acc", ")", "\n", "node5_dict", ".", "node_count_dict", "[", "str", "(", "node5", ")", "]", "+=", "1", "\n", "", "return", "arch_acc_dict", ",", "arch_count_dict", ",", "node1_dict", ",", "node2_dict", ",", "node3_dict", ",", "node4_dict", ",", "node5_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.analysis_archs": [[117, 120], ["range"], "function", ["None"], ["", "def", "analysis_archs", "(", "distance_matrix", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "distance_matrix", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.init_total_dict": [[130, 167], ["range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["def", "init_total_dict", "(", "total_dict", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "total_dict", "[", "'0_%d_%d'", "%", "(", "i", ",", "j", ")", "]", "=", "[", "]", "\n", "", "", "total_dict", "[", "'0_%d_%s'", "%", "(", "6", ",", "'out'", ")", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "total_dict", "[", "'1_%d_%d_%d'", "%", "(", "i", ",", "k", ",", "j", ")", "]", "=", "[", "]", "\n", "", "", "", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "total_dict", "[", "'1_%d_%d_%s'", "%", "(", "6", ",", "k", ",", "'out'", ")", "]", "=", "[", "]", "\n", "", "for", "i", "in", "range", "(", "3", ",", "6", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "total_dict", "[", "'2_%d_%d_%d'", "%", "(", "i", ",", "k", ",", "j", ")", "]", "=", "[", "]", "\n", "", "", "", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "total_dict", "[", "'2_%d_%d_%s'", "%", "(", "6", ",", "k", ",", "'out'", ")", "]", "=", "[", "]", "\n", "", "for", "i", "in", "range", "(", "4", ",", "6", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "total_dict", "[", "'3_%d_%d_%d'", "%", "(", "i", ",", "k", ",", "j", ")", "]", "=", "[", "]", "\n", "", "", "", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "total_dict", "[", "'3_%d_%d_%s'", "%", "(", "6", ",", "k", ",", "'out'", ")", "]", "=", "[", "]", "\n", "", "for", "i", "in", "range", "(", "5", ",", "6", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "total_dict", "[", "'4_%d_%d_%d'", "%", "(", "i", ",", "k", ",", "j", ")", "]", "=", "[", "]", "\n", "", "", "", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "total_dict", "[", "'4_%d_%d_%s'", "%", "(", "6", ",", "k", ",", "'out'", ")", "]", "=", "[", "]", "\n", "", "for", "k", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "total_dict", "[", "'5_%d_%d_%s'", "%", "(", "6", ",", "k", ",", "'out'", ")", "]", "=", "[", "]", "\n", "# add isolate case", "\n", "", "total_dict", "[", "'1_isolate'", "]", "=", "[", "]", "\n", "total_dict", "[", "'2_isolate'", "]", "=", "[", "]", "\n", "total_dict", "[", "'3_isolate'", "]", "=", "[", "]", "\n", "total_dict", "[", "'4_isolate'", "]", "=", "[", "]", "\n", "total_dict", "[", "'5_isolate'", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.arch_chip_distribution": [[169, 248], ["utils_mutate.init_total_dict", "total_val.append", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "enumerate", "numpy.array", "total_arch_dict[].append", "numpy.array", "total_arch_dict[].append", "numpy.array", "total_arch_dict[].append", "numpy.array", "total_arch_dict[].append", "numpy.array", "total_arch_dict[].append", "total_arch_dict[].append", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.init_total_dict"], ["", "def", "arch_chip_distribution", "(", "data", ")", ":", "\n", "# chips_seg = [18, 45, 36, 27, 18, 3]", "\n", "# OPS = [CONV3X3, CONV1X1, MAXPOOL3X3, ISOLATE]", "\n", "    ", "total_arch_dict", "=", "{", "}", "\n", "init_total_dict", "(", "total_arch_dict", ")", "\n", "total_val", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "        ", "val_acc", "=", "d", "[", "4", "]", "\n", "distance", "=", "d", "[", "7", "]", "\n", "total_val", ".", "append", "(", "val_acc", ")", "\n", "node1", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "21", ":", "25", "]", ")", ")", "\n", "if", "node1", "==", "3", ":", "\n", "            ", "total_arch_dict", "[", "'1_isolate'", "]", ".", "append", "(", "val_acc", ")", "\n", "", "node2", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "25", ":", "29", "]", ")", ")", "\n", "if", "node2", "==", "3", ":", "\n", "            ", "total_arch_dict", "[", "'2_isolate'", "]", ".", "append", "(", "val_acc", ")", "\n", "", "node3", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "29", ":", "33", "]", ")", ")", "\n", "if", "node3", "==", "3", ":", "\n", "            ", "total_arch_dict", "[", "'3_isolate'", "]", ".", "append", "(", "val_acc", ")", "\n", "", "node4", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "33", ":", "37", "]", ")", ")", "\n", "if", "node4", "==", "3", ":", "\n", "            ", "total_arch_dict", "[", "'4_isolate'", "]", ".", "append", "(", "val_acc", ")", "\n", "", "node5", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "distance", "[", "37", ":", "]", ")", ")", "\n", "if", "node5", "==", "3", ":", "\n", "            ", "total_arch_dict", "[", "'5_isolate'", "]", ".", "append", "(", "val_acc", ")", "\n", "", "node_list", "=", "[", "node1", ",", "node2", ",", "node3", ",", "node4", ",", "node5", ",", "'output'", "]", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "distance", "[", ":", "21", "]", ")", ":", "\n", "            ", "if", "val", "==", "1", ":", "\n", "                ", "if", "0", "<=", "idx", "<=", "5", ":", "\n", "                    ", "if", "idx", "==", "5", ":", "\n", "                        ", "position", "=", "'0_%d_%s'", "%", "(", "idx", "+", "1", ",", "'out'", ")", "\n", "", "else", ":", "\n", "                        ", "if", "int", "(", "node_list", "[", "idx", "]", ")", "==", "3", ":", "\n", "                            ", "continue", "\n", "", "position", "=", "'0_%d_%d'", "%", "(", "idx", "+", "1", ",", "int", "(", "node_list", "[", "idx", "]", ")", ")", "\n", "", "", "elif", "6", "<=", "idx", "<=", "10", ":", "\n", "                    ", "if", "node1", "==", "3", ":", "\n", "                        ", "continue", "\n", "", "if", "idx", "==", "10", ":", "\n", "                        ", "position", "=", "'1_%d_%d_%s'", "%", "(", "idx", "-", "4", ",", "int", "(", "node1", ")", ",", "'out'", ")", "\n", "", "else", ":", "\n", "                        ", "if", "int", "(", "node_list", "[", "idx", "-", "5", "]", ")", "==", "3", ":", "\n", "                            ", "continue", "\n", "", "position", "=", "'1_%d_%d_%d'", "%", "(", "idx", "-", "4", ",", "int", "(", "node1", ")", ",", "int", "(", "node_list", "[", "idx", "-", "5", "]", ")", ")", "\n", "", "", "elif", "11", "<=", "idx", "<=", "14", ":", "\n", "                    ", "if", "int", "(", "node2", ")", "==", "3", ":", "\n", "                        ", "continue", "\n", "", "if", "idx", "==", "14", ":", "\n", "                        ", "position", "=", "'2_%d_%d_%s'", "%", "(", "idx", "-", "8", ",", "int", "(", "node2", ")", ",", "'out'", ")", "\n", "", "else", ":", "\n", "                        ", "if", "int", "(", "node_list", "[", "idx", "-", "9", "]", ")", "==", "3", ":", "\n", "                            ", "continue", "\n", "", "position", "=", "'2_%d_%d_%d'", "%", "(", "idx", "-", "8", ",", "int", "(", "node2", ")", ",", "int", "(", "node_list", "[", "idx", "-", "9", "]", ")", ")", "\n", "", "", "elif", "15", "<=", "idx", "<=", "17", ":", "\n", "                    ", "if", "int", "(", "node3", ")", "==", "3", ":", "\n", "                        ", "continue", "\n", "", "if", "idx", "==", "17", ":", "\n", "                        ", "position", "=", "'3_%d_%d_%s'", "%", "(", "idx", "-", "11", ",", "int", "(", "node3", ")", ",", "'out'", ")", "\n", "", "else", ":", "\n", "                        ", "if", "int", "(", "node_list", "[", "idx", "-", "12", "]", ")", "==", "3", ":", "\n", "                            ", "continue", "\n", "", "position", "=", "'3_%d_%d_%d'", "%", "(", "idx", "-", "11", ",", "int", "(", "node3", ")", ",", "int", "(", "node_list", "[", "idx", "-", "12", "]", ")", ")", "\n", "", "", "elif", "18", "<=", "idx", "<=", "19", ":", "\n", "                    ", "if", "int", "(", "node4", ")", "==", "3", ":", "\n", "                        ", "continue", "\n", "", "if", "idx", "==", "19", ":", "\n", "                        ", "position", "=", "'4_%d_%d_%s'", "%", "(", "idx", "-", "13", ",", "int", "(", "node4", ")", ",", "'out'", ")", "\n", "", "else", ":", "\n", "                        ", "if", "int", "(", "node_list", "[", "idx", "-", "14", "]", ")", "==", "3", ":", "\n", "                            ", "continue", "\n", "", "position", "=", "'4_%d_%d_%d'", "%", "(", "idx", "-", "13", ",", "int", "(", "node4", ")", ",", "int", "(", "node_list", "[", "idx", "-", "14", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "node5", "==", "3", ":", "\n", "                        ", "continue", "\n", "\n", "", "assert", "idx", "==", "20", ",", "'the final index should be 20, but present idx value is %d'", "%", "idx", "\n", "position", "=", "'5_%d_%d_%s'", "%", "(", "6", ",", "int", "(", "node5", ")", ",", "'out'", ")", "\n", "", "total_arch_dict", "[", "position", "]", ".", "append", "(", "val_acc", ")", "\n", "", "", "", "return", "total_arch_dict", ",", "total_val", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_mutate.arch_chip_dist_gen": [[250, 268], ["numpy.mean", "numpy.std", "total_arch_dict.items", "len", "numpy.std", "numpy.mean", "max"], "function", ["None"], ["", "def", "arch_chip_dist_gen", "(", "total_arch_dict", ",", "total_val", ")", ":", "\n", "    ", "total_arch_distribution", "=", "{", "}", "\n", "total_val_mean", "=", "np", ".", "mean", "(", "total_val", ")", "\n", "total_val_std", "=", "np", ".", "std", "(", "total_val", ")", "\n", "for", "k", ",", "v", "in", "total_arch_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "v", ")", "==", "0", ":", "\n", "            ", "if", "'isolate'", "in", "k", ":", "\n", "                ", "total_arch_distribution", "[", "k", "]", "=", "(", "total_val_mean", "+", "1.5", "*", "total_val_std", ",", "max", "(", "0", ",", "0.5", "*", "total_val_std", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "total_arch_distribution", "[", "k", "]", "=", "(", "total_val_mean", "+", "1.5", "*", "total_val_std", ",", "1.5", "*", "total_val_std", ",", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "v_std", "=", "np", ".", "std", "(", "v", ")", "\n", "if", "v_std", "==", "0", ":", "\n", "                ", "std", "=", "total_val_std", "\n", "", "else", ":", "\n", "                ", "std", "=", "v_std", "\n", "", "total_arch_distribution", "[", "k", "]", "=", "(", "np", ".", "mean", "(", "v", ")", ",", "std", ",", "1", ")", "\n", "", "", "return", "total_arch_distribution", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_eigen.inference_all_archs": [[10, 79], ["enumerate", "enumerate", "logger.info", "numpy.array().argsort", "range", "total_archs.items", "total_keys.append", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "arch_data_edge_idx_reverse_list.append", "arch_data_node_f_reverse_list.append", "len", "models.pred", "total_pred_results.extend", "abs", "max", "best_val_range.index", "best_val_acc_list.append", "best_test_acc_list.append", "best_val_key_list.append", "len", "models.pred", "total_pred_results.extend", "models.pred.cpu().numpy().tolist", "numpy.array", "best_val_range.append", "best_test_range.append", "key_in_train_list.append", "models.pred.cpu().numpy().tolist", "models.pred.cpu().numpy", "models.pred.cpu().numpy", "models.pred.cpu", "models.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["def", "inference_all_archs", "(", "models", ",", "total_archs", ",", "agent_type", ",", "logger", ",", "upper_bound", ",", "nnp_arch_data_edge_idx_dict", ",", "\n", "nnp_arch_data_node_f_dict", ",", "nnp_arch_data_edge_idx_reverse_dict", ",", "\n", "nnp_arch_data_node_f_reverse_dict", ",", "model_keys", "=", "None", ")", ":", "\n", "    ", "total_keys", "=", "[", "]", "\n", "total_pred_results", "=", "[", "]", "\n", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "arch_data_edge_idx_reverse_list", "=", "[", "]", "\n", "arch_data_node_f_reverse_list", "=", "[", "]", "\n", "\n", "best_val_acc_list", "=", "[", "]", "\n", "best_test_acc_list", "=", "[", "]", "\n", "best_val_key_list", "=", "[", "]", "\n", "for", "idx", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "total_archs", ".", "items", "(", ")", ")", ":", "\n", "        ", "total_keys", ".", "append", "(", "k", ")", "\n", "\n", "arch_data_edge_idx_list", ".", "append", "(", "nnp_arch_data_edge_idx_dict", "[", "k", "]", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "nnp_arch_data_node_f_dict", "[", "k", "]", ")", "\n", "arch_data_edge_idx_reverse_list", ".", "append", "(", "nnp_arch_data_edge_idx_reverse_dict", "[", "k", "]", ")", "\n", "arch_data_node_f_reverse_list", ".", "append", "(", "nnp_arch_data_node_f_reverse_dict", "[", "k", "]", ")", "\n", "\n", "if", "len", "(", "arch_data_edge_idx_list", ")", "==", "1000", ":", "\n", "            ", "pred", "=", "models", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "arch_data_edge_idx_reverse_list", ",", "\n", "arch_data_node_f_reverse_list", ")", "\n", "total_pred_results", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "# logger.info('Neural Predictor %s Total iterations is %d' % (agent_type, idx))", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "arch_data_edge_idx_reverse_list", "=", "[", "]", "\n", "arch_data_node_f_reverse_list", "=", "[", "]", "\n", "", "", "if", "len", "(", "arch_data_edge_idx_list", ")", "!=", "0", ":", "\n", "        ", "pred", "=", "models", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "arch_data_edge_idx_reverse_list", ",", "\n", "arch_data_node_f_reverse_list", ")", "\n", "total_pred_results", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "########### Calculate pred loss ###############", "\n", "", "total_pred_error_dict", "=", "{", "}", "\n", "total_val_acc_dict", "=", "{", "}", "\n", "total_pred_acc_dict", "=", "{", "}", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "total_keys", ")", ":", "\n", "        ", "val_acc", "=", "total_archs", "[", "k", "]", "[", "'val'", "]", "\n", "total_val_acc_dict", "[", "k", "]", "=", "100", "*", "val_acc", "\n", "total_pred_acc_dict", "[", "k", "]", "=", "total_pred_results", "[", "idx", "]", "\n", "total_pred_error_dict", "[", "k", "]", "=", "abs", "(", "val_acc", "*", "100", "-", "total_pred_results", "[", "idx", "]", ")", "\n", "", "logger", ".", "info", "(", "'###############  pred and val error #####################'", "*", "3", ")", "\n", "ordered_idxes", "=", "np", ".", "array", "(", "total_pred_results", ")", ".", "argsort", "(", ")", "\n", "ordered_idxes", "=", "ordered_idxes", "[", ":", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "upper_bound", ")", ":", "\n", "        ", "best_val_range", "=", "[", "]", "\n", "best_test_range", "=", "[", "]", "\n", "key_in_train_list", "=", "[", "]", "\n", "idxes", "=", "ordered_idxes", "[", ":", "i", "]", "\n", "for", "k", "in", "idxes", ":", "\n", "            ", "best_val_range", ".", "append", "(", "total_archs", "[", "total_keys", "[", "k", "]", "]", "[", "'val'", "]", ")", "\n", "best_test_range", ".", "append", "(", "total_archs", "[", "total_keys", "[", "k", "]", "]", "[", "'test'", "]", ")", "\n", "key_in_train_list", ".", "append", "(", "total_keys", "[", "k", "]", ")", "\n", "# best_val_acc_list.append(max(best_val_range))", "\n", "# best_test_acc_list.append(max(best_test_range))", "\n", "", "max_val_acc", "=", "max", "(", "best_val_range", ")", "\n", "max_idx", "=", "best_val_range", ".", "index", "(", "max_val_acc", ")", "\n", "max_test_acc", "=", "best_test_range", "[", "max_idx", "]", "\n", "best_key", "=", "key_in_train_list", "[", "max_idx", "]", "\n", "best_val_acc_list", ".", "append", "(", "max_val_acc", ")", "\n", "best_test_acc_list", ".", "append", "(", "max_test_acc", ")", "\n", "best_val_key_list", ".", "append", "(", "best_key", ")", "\n", "\n", "", "return", "best_val_acc_list", ",", "best_test_acc_list", ",", "best_val_key_list", ",", "total_pred_error_dict", ",", "total_pred_acc_dict", ",", "total_val_acc_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_eigen.inference_all_archs_bananas": [[81, 111], ["enumerate", "total_archs[].copy", "enumerate", "encoding_list.append", "len", "numpy.squeeze().tolist", "total_pred_results.extend", "nas_lib.data.cell.Cell().encode_paths", "nas_lib.data.cell.Cell().encode_cell", "len", "numpy.squeeze().tolist", "total_pred_results.extend", "numpy.squeeze", "nas_lib.data.cell.Cell", "nas_lib.data.cell.Cell", "numpy.squeeze", "models.predict", "models.predict", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict"], ["", "def", "inference_all_archs_bananas", "(", "models", ",", "total_archs", ",", "logger", ",", "agent_type", ",", "total_keys", ")", ":", "\n", "    ", "total_pred_results", "=", "[", "]", "\n", "encoding_list", "=", "[", "]", "\n", "total_keys", "=", "total_keys", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "total_keys", ")", ":", "\n", "        ", "v", "=", "total_archs", "[", "k", "]", ".", "copy", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "v", "[", "'ops'", "]", ")", ":", "\n", "            ", "if", "op", "==", "'isolate'", ":", "\n", "# op_sample_idx = random.randint(0, 2)", "\n", "                ", "v", "[", "'ops'", "]", "[", "op_idx", "]", "=", "'maxpool3x3'", "\n", "", "", "arch", "=", "{", "\n", "'matrix'", ":", "v", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "v", "[", "'ops'", "]", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", "\n", "}", "\n", "if", "'true'", "in", "agent_type", ":", "\n", "            ", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_paths", "(", ")", "\n", "", "else", ":", "\n", "            ", "del", "arch", "[", "'isolate_node_idxs'", "]", "\n", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_cell", "(", ")", "\n", "", "encoding_list", ".", "append", "(", "encoding", ")", "\n", "\n", "if", "len", "(", "encoding_list", ")", "==", "1000", ":", "\n", "            ", "pred", "=", "np", ".", "squeeze", "(", "models", ".", "predict", "(", "np", ".", "array", "(", "encoding_list", ")", ")", ")", ".", "tolist", "(", ")", "\n", "total_pred_results", ".", "extend", "(", "pred", ")", "\n", "encoding_list", "=", "[", "]", "\n", "", "", "if", "len", "(", "encoding_list", ")", "!=", "0", ":", "\n", "        ", "pred", "=", "np", ".", "squeeze", "(", "models", ".", "predict", "(", "np", ".", "array", "(", "encoding_list", ")", ")", ")", ".", "tolist", "(", ")", "\n", "total_pred_results", ".", "extend", "(", "pred", ")", "\n", "", "return", "total_pred_results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_eigen.inference_all_archs_uncertainty": [[113, 139], ["enumerate", "enumerate", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "len", "models.pred", "total_pred_results.extend", "total_val_acc.append", "abs", "len", "models.pred", "total_pred_results.extend", "models.pred.cpu().numpy().tolist", "models.pred.cpu().numpy().tolist", "models.pred.cpu().numpy", "models.pred.cpu().numpy", "models.pred.cpu", "models.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "inference_all_archs_uncertainty", "(", "models", ",", "total_archs", ",", "total_keys", ",", "logger", ",", "uncertainty_arch_data_edge_idx_dict", ",", "\n", "uncertainty_arch_data_node_f_dict", ")", ":", "\n", "    ", "total_pred_results", "=", "[", "]", "\n", "total_val_acc", "=", "[", "]", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "total_keys", "=", "total_keys", "\n", "total_key_pred_error_dict", "=", "{", "}", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "total_keys", ")", ":", "\n", "        ", "arch_data_edge_idx_list", ".", "append", "(", "uncertainty_arch_data_edge_idx_dict", "[", "k", "]", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "uncertainty_arch_data_node_f_dict", "[", "k", "]", ")", "\n", "\n", "if", "len", "(", "arch_data_edge_idx_list", ")", "==", "1000", ":", "\n", "            ", "pred", "=", "models", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "total_pred_results", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "# logger.info('total inference idxes is %d' % idx)", "\n", "", "", "if", "len", "(", "arch_data_edge_idx_list", ")", "!=", "0", ":", "\n", "        ", "pred", "=", "models", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "total_pred_results", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "for", "idx", ",", "k", "in", "enumerate", "(", "total_keys", ")", ":", "\n", "        ", "val_acc", "=", "total_archs", "[", "k", "]", "[", "'val'", "]", "\n", "total_val_acc", ".", "append", "(", "val_acc", ")", "\n", "total_key_pred_error_dict", "[", "k", "]", "=", "abs", "(", "100", "-", "val_acc", "*", "100", "-", "total_pred_results", "[", "idx", "]", ")", "\n", "", "return", "total_pred_results", ",", "total_key_pred_error_dict", ",", "total_val_acc", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_world_size": [[17, 23], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_rank": [[25, 31], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.is_main_process": [[33, 35], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.synchronize": [[37, 50], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.reduce_dict": [[52, 79], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_world_size", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_dist_info": [[81, 93], ["torch.is_initialized", "torch.get_rank", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_rank", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_world_size"], ["", "def", "get_dist_info", "(", ")", ":", "\n", "    ", "if", "torch", ".", "__version__", "<", "'1.0'", ":", "\n", "        ", "initialized", "=", "dist", ".", "_initialized", "\n", "", "else", ":", "\n", "        ", "initialized", "=", "dist", ".", "is_initialized", "(", ")", "\n", "", "if", "initialized", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "world_size", "=", "1", "\n", "", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.set_random_seed": [[95, 100], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "# tf_set_random_seed(seed)", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_config_file": [[103, 105], ["None"], "function", ["None"], ["", "def", "get_config_file", "(", "nas_type", ",", "nas_dataset", ")", ":", "\n", "    ", "return", "'../configs/%s_%s.py'", "%", "(", "nas_type", ",", "nas_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.getarrt_local": [[107, 110], ["obj_list.index"], "function", ["None"], ["", "def", "getarrt_local", "(", "obj_list", ",", "attr", ")", ":", "\n", "    ", "idx", "=", "obj_list", ".", "index", "(", "attr", ")", "\n", "return", "obj_list", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.init_path": [[112, 122], ["os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "init_path", "(", "root_path", ")", ":", "\n", "    ", "folder_models", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'models'", ")", "\n", "val_models", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'val'", ")", "\n", "model_pkl_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'models_pkl_path'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder_models", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_models", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "val_models", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "val_models", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_pkl_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_pkl_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.random_id": [[124, 132], ["range", "random.choice", "random.choice"], "function", ["None"], ["", "", "def", "random_id", "(", "length", ")", ":", "\n", "    ", "number", "=", "'0123456789'", "\n", "alpha", "=", "'abcdefghijklmnopqrstuvwxyz'", "\n", "id", "=", "''", "\n", "for", "i", "in", "range", "(", "0", ",", "length", ",", "2", ")", ":", "\n", "        ", "id", "+=", "random", ".", "choice", "(", "number", ")", "\n", "id", "+=", "random", ".", "choice", "(", "alpha", ")", "\n", "", "return", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.setup_logger": [[134, 150], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["", "def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "log_level", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "log_level", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_size": [[152, 180], ["sys.getsizeof", "id", "set.add", "hasattr", "isinstance", "hasattr", "set", "sum", "sum", "sum", "hasattr", "sum", "comm.get_size", "comm.get_size", "isinstance", "comm.get_size", "inspect.isgetsetdescriptor", "inspect.ismemberdescriptor", "comm.get_size", "obj.values", "obj.keys", "comm.get_size", "getattr", "hasattr"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_size", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_size", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_size", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_size", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.get_size"], ["", "def", "get_size", "(", "obj", ",", "seen", "=", "None", ")", ":", "\n", "    ", "\"\"\"Recursively finds size of objects in bytes\"\"\"", "\n", "size", "=", "sys", ".", "getsizeof", "(", "obj", ")", "\n", "if", "seen", "is", "None", ":", "\n", "        ", "seen", "=", "set", "(", ")", "\n", "", "obj_id", "=", "id", "(", "obj", ")", "\n", "if", "obj_id", "in", "seen", ":", "\n", "        ", "return", "0", "\n", "# Important mark as seen *before* entering recursion to gracefully handle", "\n", "# self-referential objects", "\n", "", "seen", ".", "add", "(", "obj_id", ")", "\n", "if", "hasattr", "(", "obj", ",", "'__dict__'", ")", ":", "\n", "        ", "for", "cls", "in", "obj", ".", "__class__", ".", "__mro__", ":", "\n", "            ", "if", "'__dict__'", "in", "cls", ".", "__dict__", ":", "\n", "                ", "d", "=", "cls", ".", "__dict__", "[", "'__dict__'", "]", "\n", "if", "inspect", ".", "isgetsetdescriptor", "(", "d", ")", "or", "inspect", ".", "ismemberdescriptor", "(", "d", ")", ":", "\n", "                    ", "size", "+=", "get_size", "(", "obj", ".", "__dict__", ",", "seen", ")", "\n", "", "break", "\n", "", "", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "size", "+=", "sum", "(", "(", "get_size", "(", "v", ",", "seen", ")", "for", "v", "in", "obj", ".", "values", "(", ")", ")", ")", "\n", "size", "+=", "sum", "(", "(", "get_size", "(", "k", ",", "seen", ")", "for", "k", "in", "obj", ".", "keys", "(", ")", ")", ")", "\n", "", "elif", "hasattr", "(", "obj", ",", "'__iter__'", ")", "and", "not", "isinstance", "(", "obj", ",", "(", "str", ",", "bytes", ",", "bytearray", ")", ")", ":", "\n", "        ", "size", "+=", "sum", "(", "(", "get_size", "(", "i", ",", "seen", ")", "for", "i", "in", "obj", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "obj", ",", "'__slots__'", ")", ":", "# can have __slots__ with __dict__", "\n", "        ", "size", "+=", "sum", "(", "get_size", "(", "getattr", "(", "obj", ",", "s", ")", ",", "seen", ")", "for", "s", "in", "obj", ".", "__slots__", "if", "hasattr", "(", "obj", ",", "s", ")", ")", "\n", "\n", "", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.dynamic_gen_params": [[182, 191], ["copy.deepcopy", "total_params.append"], "function", ["None"], ["", "def", "dynamic_gen_params", "(", "parames", ")", ":", "\n", "    ", "algo_nums", "=", "parames", "[", "0", "]", "\n", "algo_params", "=", "parames", "[", "1", "]", "\n", "total_params", "=", "[", "]", "\n", "for", "num", "in", "algo_nums", ":", "\n", "        ", "algo_params_temp", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_params_temp", "[", "'training_nums'", "]", "=", "num", "\n", "total_params", ".", "append", "(", "algo_params_temp", ")", "\n", "", "return", "total_params", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_pearsonr_coorlection": [[4, 13], ["isinstance", "scipy.stats.pearsonr", "len", "len", "v1.tolist"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["def", "get_pearsonr_coorlection", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "if", "isinstance", "(", "v1", ",", "list", ")", ":", "\n", "        ", "if", "len", "(", "v1", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "v1", ".", "tolist", "(", ")", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "v", ",", "p", "=", "pearsonr", "(", "v1", ",", "v2", ")", "\n", "return", "v", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_spearmanr_coorlection": [[15, 24], ["isinstance", "scipy.stats.spearmanr", "len", "len", "v1.tolist"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "get_spearmanr_coorlection", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "if", "isinstance", "(", "v1", ",", "list", ")", ":", "\n", "        ", "if", "len", "(", "v1", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "v1", ".", "tolist", "(", ")", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "v", ",", "p", "=", "spearmanr", "(", "v1", ",", "v2", ")", "\n", "return", "v", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.corr.get_kendalltau_coorlection": [[26, 35], ["isinstance", "scipy.stats.kendalltau", "len", "len", "v1.tolist"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "get_kendalltau_coorlection", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "if", "isinstance", "(", "v1", ",", "list", ")", ":", "\n", "        ", "if", "len", "(", "v1", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "v1", ".", "tolist", "(", ")", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "v", ",", "p", "=", "kendalltau", "(", "v1", ",", "v2", ")", "\n", "return", "v", ",", "p", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_db.get_conn": [[6, 12], ["sqlite3.connect", "print"], "function", ["None"], ["def", "get_conn", "(", "model_dir", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "conn", "=", "sqlite3", ".", "connect", "(", "model_dir", ")", "\n", "", "except", "sqlite3", ".", "OperationalError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "", "return", "conn", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_db.init_nasbench_macro_cifar10": [[14, 23], ["sqlite3.connect", "sqlite3.connect.execute", "sqlite3.connect.commit", "os.path.join", "print"], "function", ["None"], ["", "def", "init_nasbench_macro_cifar10", "(", "model_dir", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "conn", "=", "sqlite3", ".", "connect", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'models.db'", ")", ")", "\n", "conn", ".", "execute", "(", "\"create table models (id text not null, hashkey text, modelpath text, train_acc real, val_acc real, \"", "\n", "\"test_acc real)\"", ")", "\n", "conn", ".", "commit", "(", ")", "\n", "", "except", "sqlite3", ".", "OperationalError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "", "return", "conn", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "avg", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.Cutout.__init__": [[53, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.Cutout.__call__": [[56, 72], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.AvgrageMeter.__init__": [[140, 142], ["utils_darts.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.AvgrageMeter.reset": [[143, 147], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.AvgrageMeter.update": [[148, 152], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.compute_best_test_losses": [[15, 32], ["range", "range", "total_data.append", "results.append", "results_keys.append", "sorted"], "function", ["None"], ["def", "compute_best_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "results_keys", "=", "[", "]", "\n", "total_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "total_queries", ")", ":", "\n", "        ", "total_data", ".", "append", "(", "data", "[", "i", "]", ")", "\n", "", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "total_data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "1", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "results_keys", ".", "append", "(", "best_arch", "[", "2", "]", ")", "\n", "", "return", "results", ",", "results_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.compute_darts_test_losses": [[34, 50], ["range", "results.append", "results_keys.append", "sorted"], "function", ["None"], ["", "def", "compute_darts_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "results_keys", "=", "[", "]", "\n", "model_archs", ",", "model_keys", "=", "data", "\n", "losses", "=", "[", "(", "model_archs", "[", "k", "]", "[", "2", "]", ",", "model_archs", "[", "k", "]", "[", "3", "]", ",", "k", ")", "for", "k", "in", "model_keys", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "losses", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "1", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "results_keys", ".", "append", "(", "best_arch", "[", "2", "]", ")", "\n", "", "return", "results", ",", "results_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.init_nasbench_macro_cifar10": [[74, 83], ["sqlite3.connect", "sqlite3.connect.execute", "sqlite3.connect.commit", "os.path.join", "print"], "function", ["None"], ["", "", "def", "init_nasbench_macro_cifar10", "(", "model_dir", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "conn", "=", "sqlite3", ".", "connect", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'models.db'", ")", ")", "\n", "conn", ".", "execute", "(", "\"create table models (id text not null, hashkey text, modelpath text, train_acc real, val_acc real, \"", "\n", "\"test_acc real)\"", ")", "\n", "conn", ".", "commit", "(", ")", "\n", "", "except", "sqlite3", ".", "OperationalError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "", "return", "conn", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.drop_path": [[85, 92], ["torch.FloatTensor().bernoulli_().to", "x.div_", "x.mul_", "torch.FloatTensor().bernoulli_", "torch.FloatTensor", "x.size"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ",", "device", ")", ":", "\n", "    ", "if", "drop_prob", ">", "0.", ":", "\n", "        ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ".", "to", "(", "device", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.convert_to_genotype": [[97, 118], ["Genotype", "logger.info", "darts_arch[].append", "str"], "function", ["None"], ["def", "convert_to_genotype", "(", "arch", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "op_dict", "=", "{", "\n", "0", ":", "'none'", ",", "\n", "1", ":", "'max_pool_3x3'", ",", "\n", "2", ":", "'avg_pool_3x3'", ",", "\n", "3", ":", "'skip_connect'", ",", "\n", "4", ":", "'sep_conv_3x3'", ",", "\n", "5", ":", "'sep_conv_5x5'", ",", "\n", "6", ":", "'dil_conv_3x3'", ",", "\n", "7", ":", "'dil_conv_5x5'", "\n", "}", "\n", "darts_arch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "i", "=", "0", "\n", "for", "cell", "in", "arch", ":", "\n", "        ", "for", "n", "in", "cell", ":", "\n", "            ", "darts_arch", "[", "i", "]", ".", "append", "(", "(", "op_dict", "[", "n", "[", "1", "]", "]", ",", "n", "[", "0", "]", ")", ")", "\n", "", "i", "+=", "1", "\n", "", "geno", "=", "Genotype", "(", "normal", "=", "darts_arch", "[", "0", "]", ",", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "darts_arch", "[", "1", "]", ",", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "if", "verbose", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "geno", ")", ")", "\n", "", "return", "geno", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.count_parameters_in_MB": [[120, 122], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.top_accuracy": [[124, 137], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.topk"], ["", "def", "top_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.create_exp_dir": [[154, 164], ["print", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "            ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.save_checkpoint": [[166, 172], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.load_model": [[174, 181], ["os.path.join", "os.path.exists", "os.path.join", "open", "pickle.load"], "function", ["None"], ["", "", "def", "load_model", "(", "root", ",", "file_name", ")", ":", "\n", "    ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pre_train_models'", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'model_pkl'", ",", "file_name", ")", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "gtyp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "gtyp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.model_converter": [[185, 203], ["os.path.join", "os.path.exists", "os.path.join", "open", "pickle.load", "print", "print", "Genotype", "print", "print", "os.path.join", "type", "type", "open", "pickle.dump"], "function", ["None"], ["", "def", "model_converter", "(", "root", ",", "file_name", ")", ":", "\n", "    ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pre_train_models'", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'model_pkl'", ",", "file_name", ")", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "gtyp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "print", "(", "type", "(", "gtyp", ")", ")", "\n", "print", "(", "gtyp", ")", "\n", "gtyp_new", "=", "Genotype", "(", "normal", "=", "gtyp", ".", "normal", ",", "\n", "normal_concat", "=", "gtyp", ".", "normal_concat", ",", "\n", "reduce", "=", "gtyp", ".", "reduce", ",", "\n", "reduce_concat", "=", "gtyp", ".", "reduce_concat", ")", "\n", "print", "(", "type", "(", "gtyp_new", ")", ")", "\n", "print", "(", "gtyp_new", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'new'", ",", "file_name", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "gtyp_new", ",", "f", ")", "\n", "", "", "return", "gtyp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.CosineLR.__init__": [[97, 103], ["int", "torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "epochs", ",", "train_images", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "train_image_num", "=", "train_images", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "total_steps", "=", "int", "(", "self", ".", "epochs", "*", "self", ".", "train_image_num", "/", "self", ".", "batch_size", ")", "\n", "super", "(", "CosineLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.CosineLR.get_lr": [[104, 109], ["float", "math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "progress_fraction", "=", "float", "(", "self", ".", "_step_count", "+", "1", ")", "/", "self", ".", "total_steps", "\n", "lr_lists", "=", "[", "(", "0.5", "*", "base_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "np", ".", "pi", "*", "progress_fraction", ")", ")", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "return", "lr_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.CosineLR.set_train_images": [[110, 112], ["None"], "methods", ["None"], ["", "def", "set_train_images", "(", "self", ",", "new_count", ")", ":", "\n", "        ", "self", ".", "train_image_num", "=", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.gen_batch_idx": [[9, 19], ["len", "range", "math.ceil", "idx_batch_list.append", "idx_batch_list.append"], "function", ["None"], ["def", "gen_batch_idx", "(", "idx_list", ",", "batch_size", ")", ":", "\n", "    ", "ds_len", "=", "len", "(", "idx_list", ")", "\n", "idx_batch_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "math", ".", "ceil", "(", "ds_len", "/", "batch_size", ")", ")", ":", "\n", "        ", "if", "(", "i", "+", "1", ")", "*", "batch_size", ">", "ds_len", ":", "\n", "            ", "idx_batch_list", ".", "append", "(", "idx_list", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "idx_batch_list", ".", "append", "(", "idx_list", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "", "", "return", "idx_batch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.make_agent_optimizer": [[21, 37], ["model.named_parameters", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["", "def", "make_agent_optimizer", "(", "model", ",", "base_lr", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "base_lr", "\n", "weight_decay", "=", "weight_deacy", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "if", "bias_multiply", ":", "\n", "                ", "lr", "=", "base_lr", "*", "2.0", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "\n", "", "weight_decay", "=", "0.0", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "base_lr", ",", "(", "0.0", ",", "0.9", ")", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.make_agent_optimizer_std": [[39, 57], ["model.named_parameters", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["", "def", "make_agent_optimizer_std", "(", "model", ",", "base_lr", ",", "fileds", "=", "''", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "fileds", "not", "in", "key", ":", "\n", "            ", "continue", "\n", "", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "base_lr", "\n", "weight_decay", "=", "weight_deacy", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "if", "bias_multiply", ":", "\n", "                ", "lr", "=", "base_lr", "*", "2.0", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "\n", "", "weight_decay", "=", "0.0", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "base_lr", ",", "(", "0.0", ",", "0.9", ")", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.make_agent_optimizer_mean": [[59, 77], ["model.named_parameters", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["", "def", "make_agent_optimizer_mean", "(", "model", ",", "base_lr", ",", "fileds", "=", "''", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "fileds", "in", "key", ":", "\n", "            ", "continue", "\n", "", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "base_lr", "\n", "weight_decay", "=", "weight_deacy", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "if", "bias_multiply", ":", "\n", "                ", "lr", "=", "base_lr", "*", "2.0", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "\n", "", "weight_decay", "=", "0.0", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "base_lr", ",", "(", "0.0", ",", "0.9", ")", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.lr_step": [[79, 82], ["None"], "function", ["None"], ["", "def", "lr_step", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_loss_criteria": [[84, 94], ["torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "layers.loss_gausian.Criterion", "ValueError"], "function", ["None"], ["", "", "def", "get_loss_criteria", "(", "loss_type", ")", ":", "\n", "    ", "if", "loss_type", "==", "'mse'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "loss_type", "==", "'mae'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "loss_type", "==", "'gaussian'", ":", "\n", "        ", "criterion", "=", "Criterion", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'This loss type does not support!'", ")", "\n", "", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.compute_best_test_losses": [[114, 131], ["range", "range", "total_data.append", "results.append", "results_keys.append", "sorted"], "function", ["None"], ["", "", "def", "compute_best_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "results_keys", "=", "[", "]", "\n", "total_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "total_queries", ")", ":", "\n", "        ", "total_data", ".", "append", "(", "data", "[", "i", "]", ")", "\n", "", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "total_data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "1", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "results_keys", ".", "append", "(", "best_arch", "[", "2", "]", ")", "\n", "", "return", "results", ",", "results_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.compute_bananas_test_losses": [[133, 149], ["range", "results.append", "results_keys.append", "sorted"], "function", ["None"], ["", "def", "compute_bananas_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "results_keys", "=", "[", "]", "\n", "model_archs", ",", "model_keys", "=", "data", "\n", "losses", "=", "[", "(", "model_archs", "[", "k", "]", "[", "1", "]", ",", "model_archs", "[", "k", "]", "[", "2", "]", ",", "k", ")", "for", "k", "in", "model_keys", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "losses", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "1", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "results_keys", ".", "append", "(", "best_arch", "[", "2", "]", ")", "\n", "", "return", "results", ",", "results_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_rank": [[151, 157], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_rank"], ["", "def", "get_rank", "(", ")", "->", "int", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_world_size": [[159, 165], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.get_world_size"], ["", "def", "get_world_size", "(", ")", "->", "int", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node": [[19, 28], ["range", "len", "numpy.all", "numpy.all", "node_list.append"], "function", ["None"], ["def", "find_isolate_node", "(", "matrix", ")", ":", "\n", "    ", "node_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", ":", "\n", "        ", "if", "np", ".", "all", "(", "matrix", "[", "i", ",", ":", "]", "==", "0", ")", "and", "np", ".", "all", "(", "matrix", "[", ":", ",", "i", "]", "==", "0", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "matrix", "[", "0", ",", "i", "]", "=", "1", "\n", "node_list", ".", "append", "(", "i", ")", "\n", "", "", "return", "node_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.random_cell_gnn": [[30, 62], ["nas_lib.NASBench", "numpy.random.choice", "numpy.triu", "utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "api.NASBench.is_valid", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "def", "random_cell_gnn", "(", ")", ":", "\n", "    ", "\"\"\"\n    From the NASBench repository\n    https://github.com/google-research/nasbench\n    \"\"\"", "\n", "INPUT", "=", "'input'", "\n", "OUTPUT", "=", "'output'", "\n", "CONV3X3", "=", "'conv3x3-bn-relu'", "\n", "CONV1X1", "=", "'conv1x1-bn-relu'", "\n", "MAXPOOL3X3", "=", "'maxpool3x3'", "\n", "OPS", "=", "[", "CONV3X3", ",", "CONV1X1", ",", "MAXPOOL3X3", "]", "\n", "\n", "NUM_VERTICES", "=", "7", "\n", "OP_SPOTS", "=", "NUM_VERTICES", "-", "2", "\n", "MAX_EDGES", "=", "9", "\n", "\n", "nasbench", "=", "api", ".", "NASBench", "(", "'/home/albert/disk_a/datasets_train/nas_bench101/nasbench_only108.tfrecord'", ")", "\n", "while", "True", ":", "\n", "        ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "            ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph": [[65, 83], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "", "", "def", "nasbench2graph", "(", "data", ")", ":", "\n", "    ", "matrix", ",", "ops", ",", "isolate_nodes", "=", "data", "[", "'matrix'", "]", ",", "data", "[", "'ops'", "]", ",", "data", "[", "'isolate_node_idxs'", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "6", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "if", "i", "in", "isolate_nodes", ":", "\n", "            ", "node_feature", "[", "i", ",", "5", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph2": [[85, 100], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "nasbench2graph2", "(", "data", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "6", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph2direction2": [[102, 120], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "nasbench2graph2direction2", "(", "data", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "6", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", "*", "2", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "edge_idx", "[", "0", ",", "counter", "]", "=", "j", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "i", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graph2direction": [[122, 143], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "nasbench2graph2direction", "(", "data", ")", ":", "\n", "    ", "matrix", ",", "ops", ",", "isolate_nodes", "=", "data", "[", "'matrix'", "]", ",", "data", "[", "'ops'", "]", ",", "data", "[", "'isolate_node_idxs'", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "6", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", "*", "2", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "if", "i", "in", "isolate_nodes", ":", "\n", "            ", "node_feature", "[", "i", ",", "5", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "edge_idx", "[", "0", ",", "counter", "]", "=", "j", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "i", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.nasbench2graphnnp": [[145, 170], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "nasbench2graphnnp", "(", "data", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "matrix", ",", "ops", ",", "isolate_nodes", "=", "data", "[", "'matrix'", "]", ",", "data", "[", "'ops'", "]", ",", "data", "[", "'isolate_node_idxs'", "]", "\n", "if", "reverse", ":", "\n", "        ", "matrix", "=", "matrix", ".", "T", "\n", "", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "6", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", "*", "2", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "if", "i", "in", "isolate_nodes", ":", "\n", "            ", "node_feature", "[", "i", ",", "5", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "# forware", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "# backward", "\n", "edge_idx", "[", "0", ",", "counter", "]", "=", "j", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "i", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.acc2binprob": [[172, 187], ["numpy.max", "list", "numpy.histogram", "numpy.array", "numpy.digitize", "math.ceil", "range", "utils_data.stretch", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.stretch"], ["", "def", "acc2binprob", "(", "val_accuracy", ",", "step", "=", "1", ",", "stretch_flag", "=", "False", ")", ":", "\n", "    ", "max_val", "=", "np", ".", "max", "(", "val_accuracy", ")", "\n", "max_val", "=", "math", ".", "ceil", "(", "max_val", ")", "+", "1", "\n", "if", "max_val", "<", "20", ":", "\n", "        ", "max_val", "=", "22", "\n", "", "max_val", "*=", "10", "\n", "bins", "=", "list", "(", "range", "(", "0", ",", "max_val", ",", "step", ")", ")", "\n", "bins", "=", "[", "v", "*", "0.1", "for", "v", "in", "bins", "]", "\n", "prob", ",", "bins", "=", "np", ".", "histogram", "(", "val_accuracy", ",", "bins", "=", "bins", ",", "density", "=", "False", ")", "\n", "prob", "=", "np", ".", "array", "(", "[", "prob", "[", "i", "]", "/", "np", ".", "sum", "(", "prob", ")", "for", "i", "in", "range", "(", "prob", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "if", "stretch_flag", ":", "\n", "        ", "prob", "=", "stretch", "(", "prob", ")", "\n", "", "idx", "=", "np", ".", "digitize", "(", "val_accuracy", ",", "bins", ",", "right", "=", "False", ")", "\n", "val_prob", "=", "prob", "[", "idx", "-", "1", "]", "\n", "return", "val_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.stretch": [[189, 195], ["numpy.max", "numpy.min"], "function", ["None"], ["", "def", "stretch", "(", "probs", ")", ":", "\n", "    ", "max", "=", "np", ".", "max", "(", "probs", ")", "\n", "min", "=", "np", ".", "min", "(", "probs", ")", "\n", "probs", "=", "probs", "-", "min", "\n", "probs", "/=", "(", "max", "-", "min", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.stretch_min": [[197, 201], ["probs.min"], "function", ["None"], ["", "def", "stretch_min", "(", "probs", ",", "lower", "=", "0.1", ")", ":", "\n", "    ", "probs", "[", "probs", "==", "probs", ".", "min", "(", ")", "]", "=", "lower", "\n", "probs", "[", "probs", ">", "1.0", "]", "=", "1.0", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.isolated.contains_isolated_nodes": [[7, 22], ["num_nodes.maybe_num_nodes", "isolated..", "torch.unique().size", "torch.unique", "torch.cat"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes"], ["def", "contains_isolated_nodes", "(", "edge_index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns :obj:`True` if the graph given by :attr:`edge_index` contains\n    isolated nodes.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: bool\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "(", "row", ",", "col", ")", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "\n", "return", "torch", ".", "unique", "(", "torch", ".", "cat", "(", "(", "row", ",", "col", ")", ")", ")", ".", "size", "(", "0", ")", "<", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.isolated.remove_isolated_nodes": [[24, 68], ["num_nodes.maybe_num_nodes", "isolated..", "torch.zeros", "torch.full", "torch.arange", "torch.zeros_like", "torch.full_like", "torch.arange", "torch.cat", "torch.zeros.sum", "loop_edge_index.size", "torch.cat", "torch.cat.view"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "remove_isolated_nodes", "(", "edge_index", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Removes the isolated nodes from the graph given by :attr:`edge_index`\n    with optional edge attributes :attr:`edge_attr`.\n    In addition, returns a mask of shape :obj:`[num_nodes]` to manually filter\n    out isolated node features later on.\n    Self-loops are preserved for non-isolated nodes.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_attr (Tensor, optional): Edge weights or multi-dimensional\n            edge features. (default: :obj:`None`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: (LongTensor, Tensor, BoolTensor)\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "out", "=", "segregate_self_loops", "(", "edge_index", ",", "edge_attr", ")", "\n", "edge_index", ",", "edge_attr", ",", "loop_edge_index", ",", "loop_edge_attr", "=", "out", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "edge_index", ".", "device", ")", "\n", "mask", "[", "edge_index", ".", "view", "(", "-", "1", ")", "]", "=", "1", "\n", "\n", "assoc", "=", "torch", ".", "full", "(", "(", "num_nodes", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "mask", ".", "device", ")", "\n", "assoc", "[", "mask", "]", "=", "torch", ".", "arange", "(", "mask", ".", "sum", "(", ")", ",", "device", "=", "assoc", ".", "device", ")", "\n", "edge_index", "=", "assoc", "[", "edge_index", "]", "\n", "\n", "loop_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "loop_mask", "[", "loop_edge_index", "[", "0", "]", "]", "=", "1", "\n", "loop_mask", "=", "loop_mask", "&", "mask", "\n", "loop_assoc", "=", "torch", ".", "full_like", "(", "assoc", ",", "-", "1", ")", "\n", "loop_assoc", "[", "loop_edge_index", "[", "0", "]", "]", "=", "torch", ".", "arange", "(", "loop_edge_index", ".", "size", "(", "1", ")", ",", "\n", "device", "=", "loop_assoc", ".", "device", ")", "\n", "loop_idx", "=", "loop_assoc", "[", "loop_mask", "]", "\n", "loop_edge_index", "=", "assoc", "[", "loop_edge_index", "[", ":", ",", "loop_idx", "]", "]", "\n", "\n", "edge_index", "=", "torch", ".", "cat", "(", "[", "edge_index", ",", "loop_edge_index", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "edge_attr", "is", "not", "None", ":", "\n", "        ", "loop_edge_attr", "=", "loop_edge_attr", "[", "loop_idx", "]", "\n", "edge_attr", "=", "torch", ".", "cat", "(", "[", "edge_attr", ",", "loop_edge_attr", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "edge_index", ",", "edge_attr", ",", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes": [[1, 3], ["index.max().item", "index.max"], "function", ["None"], ["def", "maybe_num_nodes", "(", "index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "return", "index", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "num_nodes", "is", "None", "else", "num_nodes", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.softmax.softmax": [[6, 29], ["num_nodes.maybe_num_nodes", "out.exp.exp", "torch_scatter.scatter_max", "torch_scatter.scatter_add"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes"], ["def", "softmax", "(", "src", ",", "index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Computes a sparsely evaluated softmax.\n    Given a value tensor :attr:`src`, this function first groups the values\n    along the first dimension based on the indices specified in :attr:`index`,\n    and then proceeds to compute the softmax individually for each group.\n\n    Args:\n        src (Tensor): The source tensor.\n        index (LongTensor): The indices of elements for applying the softmax.\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`index`. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "index", ",", "num_nodes", ")", "\n", "\n", "out", "=", "src", "-", "scatter_max", "(", "src", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "[", "0", "]", "[", "index", "]", "\n", "out", "=", "out", ".", "exp", "(", ")", "\n", "out", "=", "out", "/", "(", "\n", "scatter_add", "(", "out", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "[", "index", "]", "+", "1e-16", ")", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.loop.contains_self_loops": [[6, 18], ["mask.sum().item", "mask.sum"], "function", ["None"], ["def", "contains_self_loops", "(", "edge_index", ")", ":", "\n", "    ", "r\"\"\"Returns :obj:`True` if the graph given by :attr:`edge_index` contains\n    self-loops.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n\n    :rtype: bool\n    \"\"\"", "\n", "row", ",", "col", "=", "edge_index", "\n", "mask", "=", "row", "==", "col", "\n", "return", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.loop.remove_self_loops": [[20, 37], ["None"], "function", ["None"], ["", "def", "remove_self_loops", "(", "edge_index", ",", "edge_attr", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Removes every self-loop in the graph given by :attr:`edge_index`, so\n    that :math:`(i,i) \\not\\in \\mathcal{E}` for every :math:`i \\in \\mathcal{V}`.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_attr (Tensor, optional): Edge weights or multi-dimensional\n            edge features. (default: :obj:`None`)\n\n    :rtype: (:class:`LongTensor`, :class:`Tensor`)\n    \"\"\"", "\n", "row", ",", "col", "=", "edge_index", "\n", "mask", "=", "row", "!=", "col", "\n", "edge_attr", "=", "edge_attr", "if", "edge_attr", "is", "None", "else", "edge_attr", "[", "mask", "]", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "mask", "]", "\n", "\n", "return", "edge_index", ",", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.loop.segregate_self_loops": [[39, 60], ["None"], "function", ["None"], ["", "def", "segregate_self_loops", "(", "edge_index", ",", "edge_attr", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Segregates self-loops from the graph.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_attr (Tensor, optional): Edge weights or multi-dimensional\n            edge features. (default: :obj:`None`)\n\n    :rtype: (:class:`LongTensor`, :class:`Tensor`, :class:`LongTensor`,\n        :class:`Tensor`)\n    \"\"\"", "\n", "\n", "mask", "=", "edge_index", "[", "0", "]", "!=", "edge_index", "[", "1", "]", "\n", "inv_mask", "=", "~", "mask", "\n", "\n", "loop_edge_index", "=", "edge_index", "[", ":", ",", "inv_mask", "]", "\n", "loop_edge_attr", "=", "None", "if", "edge_attr", "is", "None", "else", "edge_attr", "[", "inv_mask", "]", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "mask", "]", "\n", "edge_attr", "=", "None", "if", "edge_attr", "is", "None", "else", "edge_attr", "[", "mask", "]", "\n", "\n", "return", "edge_index", ",", "edge_attr", ",", "loop_edge_index", ",", "loop_edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.loop.add_self_loops": [[62, 94], ["num_nodes.maybe_num_nodes", "torch.arange", "loop_index.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat.new_full", "torch.cat", "loop_index.unsqueeze().repeat.unsqueeze", "torch.cat.numel", "torch.cat.size"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes"], ["", "def", "add_self_loops", "(", "edge_index", ",", "edge_weight", "=", "None", ",", "fill_value", "=", "1", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Adds a self-loop :math:`(i,i) \\in \\mathcal{E}` to every node\n    :math:`i \\in \\mathcal{V}` in the graph given by :attr:`edge_index`.\n    In case the graph is weighted, self-loops will be added with edge weights\n    denoted by :obj:`fill_value`.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_weight (Tensor, optional): One-dimensional edge weights.\n            (default: :obj:`None`)\n        fill_value (int, optional): If :obj:`edge_weight` is not :obj:`None`,\n            will add self-loops with edge weights of :obj:`fill_value` to the\n            graph. (default: :obj:`1`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: (:class:`LongTensor`, :class:`Tensor`)\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "loop_index", "=", "torch", ".", "arange", "(", "0", ",", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "loop_index", "=", "loop_index", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ")", "\n", "\n", "if", "edge_weight", "is", "not", "None", ":", "\n", "        ", "assert", "edge_weight", ".", "numel", "(", ")", "==", "edge_index", ".", "size", "(", "1", ")", "\n", "loop_weight", "=", "edge_weight", ".", "new_full", "(", "(", "num_nodes", ",", ")", ",", "fill_value", ")", "\n", "edge_weight", "=", "torch", ".", "cat", "(", "[", "edge_weight", ",", "loop_weight", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "edge_index", "=", "torch", ".", "cat", "(", "[", "edge_index", ",", "loop_index", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "edge_index", ",", "edge_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.loop.add_remaining_self_loops": [[96, 139], ["num_nodes.maybe_num_nodes", "torch.arange", "loop_index.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.full", "torch.cat", "torch.cat.numel", "torch.cat.size", "remaining_edge_weight.numel", "loop_index.unsqueeze().repeat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes"], ["", "def", "add_remaining_self_loops", "(", "edge_index", ",", "edge_weight", "=", "None", ",", "fill_value", "=", "1", ",", "\n", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Adds remaining self-loop :math:`(i,i) \\in \\mathcal{E}` to every node\n    :math:`i \\in \\mathcal{V}` in the graph given by :attr:`edge_index`.\n    In case the graph is weighted and already contains a few self-loops, only\n    non-existent self-loops will be added with edge weights denoted by\n    :obj:`fill_value`.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_weight (Tensor, optional): One-dimensional edge weights.\n            (default: :obj:`None`)\n        fill_value (int, optional): If :obj:`edge_weight` is not :obj:`None`,\n            will add self-loops with edge weights of :obj:`fill_value` to the\n            graph. (default: :obj:`1`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: (:class:`LongTensor`, :class:`Tensor`)\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "row", ",", "col", "=", "edge_index", "\n", "\n", "mask", "=", "row", "!=", "col", "\n", "\n", "if", "edge_weight", "is", "not", "None", ":", "\n", "        ", "assert", "edge_weight", ".", "numel", "(", ")", "==", "edge_index", ".", "size", "(", "1", ")", "\n", "inv_mask", "=", "~", "mask", "\n", "\n", "loop_weight", "=", "torch", ".", "full", "(", "\n", "(", "num_nodes", ",", ")", ",", "fill_value", ",", "\n", "dtype", "=", "None", "if", "edge_weight", "is", "None", "else", "edge_weight", ".", "dtype", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "remaining_edge_weight", "=", "edge_weight", "[", "inv_mask", "]", "\n", "if", "remaining_edge_weight", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "loop_weight", "[", "row", "[", "inv_mask", "]", "]", "=", "remaining_edge_weight", "\n", "", "edge_weight", "=", "torch", ".", "cat", "(", "[", "edge_weight", "[", "mask", "]", ",", "loop_weight", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "loop_index", "=", "torch", ".", "arange", "(", "0", ",", "num_nodes", ",", "dtype", "=", "row", ".", "dtype", ",", "device", "=", "row", ".", "device", ")", "\n", "loop_index", "=", "loop_index", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ")", "\n", "edge_index", "=", "torch", ".", "cat", "(", "[", "edge_index", "[", ":", ",", "mask", "]", ",", "loop_index", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "edge_index", ",", "edge_weight", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.undirected.is_undirected": [[7, 22], ["num_nodes.maybe_num_nodes", "torch_sparse.coalesce", "undirected.to_undirected", "edge_index.size", "to_undirected.size"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.coalesce", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.undirected.to_undirected"], ["def", "is_undirected", "(", "edge_index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns :obj:`True` if the graph given by :attr:`edge_index` is\n    undirected.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: bool\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "edge_index", ",", "_", "=", "coalesce", "(", "edge_index", ",", "None", ",", "num_nodes", ",", "num_nodes", ")", "\n", "undirected_edge_index", "=", "to_undirected", "(", "edge_index", ",", "num_nodes", "=", "num_nodes", ")", "\n", "return", "edge_index", ".", "size", "(", "1", ")", "==", "undirected_edge_index", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.undirected.to_undirected": [[24, 44], ["num_nodes.maybe_num_nodes", "torch.stack", "torch_sparse.coalesce", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.coalesce"], ["", "def", "to_undirected", "(", "edge_index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Converts the graph given by :attr:`edge_index` to an undirected graph,\n    so that :math:`(j,i) \\in \\mathcal{E}` for every edge :math:`(i,j) \\in\n    \\mathcal{E}`.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: :class:`LongTensor`\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "row", ",", "col", "=", "torch", ".", "cat", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "[", "col", ",", "row", "]", ",", "dim", "=", "0", ")", "\n", "edge_index", "=", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", "\n", "edge_index", ",", "_", "=", "coalesce", "(", "edge_index", ",", "None", ",", "num_nodes", ",", "num_nodes", ")", "\n", "\n", "return", "edge_index", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.to_dense_batch.to_dense_batch": [[5, 50], ["torch_scatter.scatter_add", "torch.cat", "torch_scatter.scatter_add.max().item", "torch.arange", "x.new_full", "out.view.view", "torch.zeros", "torch.ones.view", "torch.ones", "batch[].item", "batch.new_ones", "batch.size", "x.size", "x.unsqueeze", "x.size", "batch.new_zeros", "torch_scatter.scatter_add.cumsum", "torch_scatter.scatter_add.max", "list", "x.size", "list", "x.size"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones"], ["def", "to_dense_batch", "(", "x", ",", "batch", "=", "None", ",", "fill_value", "=", "0", ")", ":", "\n", "    ", "r\"\"\"Given a sparse batch of node features\n    :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}` (with\n    :math:`N_i` indicating the number of nodes in graph :math:`i`), creates a\n    dense node feature tensor\n    :math:`\\mathbf{X} \\in \\mathbb{R}^{B \\times N_{\\max} \\times F}` (with\n    :math:`N_{\\max} = \\max_i^B N_i`).\n    In addition, a second tensor holding\n    :math:`[N_1, \\ldots, N_B] \\in \\mathbb{N}^B` is returned.\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor, optional): Batch vector\n            :math:`\\mathbf{b} \\in {\\{ 0, \\ldots, B-1\\}}^N`, which assigns each\n            node to a specific example. (default: :obj:`None`)\n        fill_value (float, optional): The value for invalid entries in the\n            resulting dense output tensor. (default: :obj:`0`)\n\n    :rtype: (:class:`Tensor`, :class:`BoolTensor`)\n    \"\"\"", "\n", "if", "batch", "is", "None", ":", "\n", "        ", "mask", "=", "torch", ".", "ones", "(", "1", ",", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "x", ".", "unsqueeze", "(", "0", ")", ",", "mask", "\n", "\n", "", "batch_size", "=", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "num_nodes", "=", "scatter_add", "(", "batch", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ")", ",", "batch", ",", "dim", "=", "0", ",", "\n", "dim_size", "=", "batch_size", ")", "\n", "cum_nodes", "=", "torch", ".", "cat", "(", "[", "batch", ".", "new_zeros", "(", "1", ")", ",", "num_nodes", ".", "cumsum", "(", "dim", "=", "0", ")", "]", ")", "\n", "max_num_nodes", "=", "num_nodes", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "idx", "=", "torch", ".", "arange", "(", "batch", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "idx", "=", "(", "idx", "-", "cum_nodes", "[", "batch", "]", ")", "+", "(", "batch", "*", "max_num_nodes", ")", "\n", "\n", "size", "=", "[", "batch_size", "*", "max_num_nodes", "]", "+", "list", "(", "x", ".", "size", "(", ")", ")", "[", "1", ":", "]", "\n", "out", "=", "x", ".", "new_full", "(", "size", ",", "fill_value", ")", "\n", "out", "[", "idx", "]", "=", "x", "\n", "out", "=", "out", ".", "view", "(", "[", "batch_size", ",", "max_num_nodes", "]", "+", "list", "(", "x", ".", "size", "(", ")", ")", "[", "1", ":", "]", ")", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "batch_size", "*", "max_num_nodes", ",", "dtype", "=", "torch", ".", "bool", ",", "\n", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "mask", "=", "mask", ".", "view", "(", "batch_size", ",", "max_num_nodes", ")", "\n", "\n", "return", "out", ",", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.scatter.scatter_": [[5, 42], ["getattr", "getattr.", "isinstance", "torch.is_floating_point", "getattr."], "function", ["None"], ["def", "scatter_", "(", "name", ",", "src", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Aggregates all values from the :attr:`src` tensor at the indices\n    specified in the :attr:`index` tensor along the first dimension.\n    If multiple indices reference the same location, their contributions\n    are aggregated according to :attr:`name` (either :obj:`\"add\"`,\n    :obj:`\"mean\"` or :obj:`\"max\"`).\n\n    Args:\n        name (string): The aggregation to use (:obj:`\"add\"`, :obj:`\"mean\"`,\n            :obj:`\"max\"`).\n        src (Tensor): The source tensor.\n        index (LongTensor): The indices of elements to scatter.\n        dim (int, optional): The axis along which to index. (default: :obj:`0`)\n        dim_size (int, optional): Automatically create output tensor with size\n            :attr:`dim_size` in the first dimension. If set to :attr:`None`, a\n            minimal sized output tensor is returned. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "assert", "name", "in", "[", "'add'", ",", "'mean'", ",", "'max'", "]", "\n", "\n", "if", "name", "==", "'max'", ":", "\n", "        ", "op", "=", "torch", ".", "finfo", "if", "torch", ".", "is_floating_point", "(", "src", ")", "else", "torch", ".", "iinfo", "\n", "fill_value", "=", "op", "(", "src", ".", "dtype", ")", ".", "min", "\n", "", "else", ":", "\n", "        ", "fill_value", "=", "0", "\n", "\n", "", "op", "=", "getattr", "(", "torch_scatter", ",", "'scatter_{}'", ".", "format", "(", "name", ")", ")", "\n", "out", "=", "op", "(", "src", ",", "index", ",", "dim", ",", "None", ",", "dim_size", ",", "fill_value", ")", "\n", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "        ", "out", "=", "out", "[", "0", "]", "\n", "\n", "", "if", "name", "==", "'max'", ":", "\n", "        ", "out", "[", "out", "==", "fill_value", "]", "=", "0", "\n", "\n", "", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.uniform": [[4, 8], ["math.sqrt", "tensor.data.uniform_"], "function", ["None"], ["def", "uniform", "(", "size", ",", "tensor", ")", ":", "\n", "    ", "bound", "=", "1.0", "/", "math", ".", "sqrt", "(", "size", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.kaiming_uniform": [[10, 14], ["math.sqrt", "tensor.data.uniform_"], "function", ["None"], ["", "", "def", "kaiming_uniform", "(", "tensor", ",", "fan", ",", "a", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "bound", "=", "math", ".", "sqrt", "(", "6", "/", "(", "(", "1", "+", "a", "**", "2", ")", "*", "fan", ")", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.glorot": [[16, 20], ["math.sqrt", "tensor.data.uniform_", "tensor.size", "tensor.size"], "function", ["None"], ["", "", "def", "glorot", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "stdv", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "tensor", ".", "size", "(", "-", "2", ")", "+", "tensor", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros": [[22, 25], ["tensor.data.fill_"], "function", ["None"], ["", "", "def", "zeros", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones": [[27, 30], ["tensor.data.fill_"], "function", ["None"], ["", "", "def", "ones", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal": [[32, 35], ["tensor.data.normal_"], "function", ["None"], ["", "", "def", "normal", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "normal_", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.reset": [[37, 48], ["hasattr", "item.reset_parameters", "hasattr", "nn.children", "inits.reset._reset"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["", "", "def", "reset", "(", "nn", ")", ":", "\n", "    ", "def", "_reset", "(", "item", ")", ":", "\n", "        ", "if", "hasattr", "(", "item", ",", "'reset_parameters'", ")", ":", "\n", "            ", "item", ".", "reset_parameters", "(", ")", "\n", "\n", "", "", "if", "nn", "is", "not", "None", ":", "\n", "        ", "if", "hasattr", "(", "nn", ",", "'children'", ")", "and", "len", "(", "list", "(", "nn", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "            ", "for", "item", "in", "nn", ".", "children", "(", ")", ":", "\n", "                ", "_reset", "(", "item", ")", "\n", "", "", "else", ":", "\n", "            ", "_reset", "(", "nn", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos_darts.gin_predictor_open_search.gin_predictor_search_open": [[12, 123], ["nas_lib.utils.utils_darts.init_nasbench_macro_cifar10", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "search_space.generate_random_dataset", "model_keys.extend", "enumerate", "search_space.assemble_cifar10_neural_net", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train.items", "nas_lib.utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "list", "macro_graph_dict[].extend", "len", "search_space.assemble_graph", "numpy.array", "search_space.get_candidates", "enumerate", "search_space.assemble_graph", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "meta_neuralnet.pred.cpu().numpy", "numpy.argsort", "search_space.assemble_cifar10_neural_net", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train.items", "numpy.mean", "numpy.array", "len", "ValueError", "nas_lib.models_darts.darts_graph.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "nas_lib.utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "list", "nas_lib.models_darts.darts_graph.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "model_keys.append", "temp_candidate_train_arch.append", "macro_graph_dict[].extend", "numpy.abs", "logger.info", "logger.info", "hashlib.sha256", "len", "meta_neuralnet.pred.cpu", "ValueError", "sorted", "str().encode", "hashlib.sha256", "meta_neuralnet.pred.cpu().numpy", "min", "str().encode", "len", "str", "meta_neuralnet.pred.cpu", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.init_nasbench_macro_cifar10", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_cifar10_neural_net", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_cifar10_neural_net", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2"], ["def", "gin_predictor_search_open", "(", "search_space", ",", "\n", "algo_info", ",", "\n", "logger", ",", "\n", "gpus", ",", "\n", "save_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "dataset", "=", "'cifar10'", ",", "\n", "seed", "=", "111222333", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "total_queries", "=", "algo_info", "[", "'total_queries'", "]", "\n", "num_init", "=", "algo_info", "[", "'num_init'", "]", "\n", "k_num", "=", "algo_info", "[", "'k'", "]", "\n", "epochs", "=", "algo_info", "[", "'epochs'", "]", "\n", "batch_size", "=", "algo_info", "[", "'batch_size'", "]", "\n", "lr", "=", "algo_info", "[", "'lr'", "]", "\n", "encode_path", "=", "algo_info", "[", "'encode_path'", "]", "\n", "candidate_nums", "=", "algo_info", "[", "'candidate_nums'", "]", "\n", "macro_graph_dict", "=", "{", "}", "\n", "model_keys", "=", "[", "]", "\n", "init_nasbench_macro_cifar10", "(", "save_dir", ")", "\n", "\n", "# set seed", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "data_dict", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_path", ")", "\n", "data_dict_keys", "=", "[", "convert_to_genotype", "(", "d", "[", "0", "]", ",", "verbose", "=", "False", ")", "for", "d", "in", "data_dict", "]", "\n", "data_dict_keys", "=", "[", "sha256", "(", "str", "(", "k", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "k", "in", "data_dict_keys", "]", "\n", "model_keys", ".", "extend", "(", "data_dict_keys", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data_dict", ")", ":", "\n", "        ", "macro_graph_dict", "[", "data_dict_keys", "[", "i", "]", "]", "=", "list", "(", "d", ")", "\n", "", "darts_neural_dict", "=", "search_space", ".", "assemble_cifar10_neural_net", "(", "data_dict", ")", "\n", "data", "=", "async_macro_model_train", "(", "model_data", "=", "darts_neural_dict", ",", "\n", "gpus", "=", "gpus", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "dataset", "=", "dataset", ")", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "macro_graph_dict", ":", "\n", "            ", "raise", "ValueError", "(", "'model trained acc key should in macro_graph_dict'", ")", "\n", "", "macro_graph_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "", "query", "=", "num_init", "+", "len", "(", "data_dict_keys", ")", "\n", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "train_data", "=", "search_space", ".", "assemble_graph", "(", "macro_graph_dict", ",", "model_keys", ")", "\n", "val_losses", "=", "np", ".", "array", "(", "[", "macro_graph_dict", "[", "k", "]", "[", "2", "]", "for", "k", "in", "model_keys", "]", ")", "\n", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "train_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "\n", "", "candidate_graph_dict", "=", "{", "}", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "macro_graph_dict", ",", "\n", "model_keys", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "encode_paths", "=", "encode_path", ",", "\n", ")", "\n", "candidate_dict_keys", "=", "[", "convert_to_genotype", "(", "d", "[", "0", "]", ",", "verbose", "=", "False", ")", "for", "d", "in", "candidates", "]", "\n", "candidate_dict_keys", "=", "[", "sha256", "(", "str", "(", "k", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "k", "in", "candidate_dict_keys", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "candidates", ")", ":", "\n", "            ", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "i", "]", "]", "=", "list", "(", "d", ")", "\n", "", "xcandidates", "=", "search_space", ".", "assemble_graph", "(", "candidate_graph_dict", ",", "candidate_dict_keys", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "xcandidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "meta_neuralnet", "=", "NasBenchGinPredictorTrainer", "(", "lr", "=", "lr", ",", "epochs", "=", "epochs", ",", "train_images", "=", "len", "(", "arch_data_edge_idx_list", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "input_dim", "=", "11", ",", "agent_type", "=", "'gin_gaussian'", ",", "\n", "rate", "=", "15.", ")", "\n", "meta_neuralnet", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_losses", ",", "logger", "=", "logger", ")", "\n", "pred_train", "=", "meta_neuralnet", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "meta_neuralnet", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "\n", "temp_candidate_train_arch", "=", "[", "]", "\n", "for", "j", "in", "sorted_indices", "[", ":", "k_num", "]", ":", "\n", "            ", "model_keys", ".", "append", "(", "candidate_dict_keys", "[", "j", "]", ")", "\n", "macro_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", "=", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", "\n", "temp_candidate_train_arch", ".", "append", "(", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", ")", "\n", "", "darts_candidate_neural_dict", "=", "search_space", ".", "assemble_cifar10_neural_net", "(", "temp_candidate_train_arch", ")", "\n", "darts_candidate_acc", "=", "async_macro_model_train", "(", "model_data", "=", "darts_candidate_neural_dict", ",", "\n", "gpus", "=", "gpus", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "dataset", "=", "dataset", ")", "\n", "for", "k", ",", "v", "in", "darts_candidate_acc", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "macro_graph_dict", ":", "\n", "                ", "raise", "ValueError", "(", "'model trained acc key should in macro_graph_dict'", ")", "\n", "", "macro_graph_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "train_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "pred_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_losses", ")", ")", "\n", "val_losses", "=", "np", ".", "array", "(", "[", "macro_graph_dict", "[", "k", "]", "[", "2", "]", "for", "k", "in", "model_keys", "]", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "val_losses", ")", "[", ":", "min", "(", "5", ",", "len", "(", "val_losses", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "len", "(", "temp_candidate_train_arch", ")", "\n", "", "return", "macro_graph_dict", ",", "model_keys", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos_darts.build_open_algos.build_open_algos": [[6, 8], ["getattr"], "function", ["None"], ["def", "build_open_algos", "(", "agent", ")", ":", "\n", "    ", "return", "getattr", "(", "sys", ".", "modules", "[", "__name__", "]", ",", "agent", "+", "'_search_open'", ")", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.algos_darts.gin_uncertainty_predictor_open_search.gin_uncertainty_predictor_search_open": [[14, 120], ["nas_lib.utils.utils_darts.init_nasbench_macro_cifar10", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "search_space.generate_random_dataset", "model_keys.extend", "enumerate", "search_space.assemble_cifar10_neural_net", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train.items", "nas_lib.utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "list", "macro_graph_dict[].extend", "len", "search_space.assemble_graph", "numpy.array", "search_space.get_candidates", "enumerate", "search_space.assemble_graph", "nas_lib.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "nas_lib.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "nas_lib.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "nas_lib.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "nas_lib.algos.acquisition_functions.acq_fn", "search_space.assemble_cifar10_neural_net", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train.items", "numpy.mean", "numpy.array", "len", "ValueError", "nas_lib.models_darts.darts_graph.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "nas_lib.utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "list", "nas_lib.models_darts.darts_graph.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "model_keys.append", "temp_candidate_train_arch.append", "macro_graph_dict[].extend", "numpy.abs", "logger.info", "logger.info", "hashlib.sha256", "len", "ValueError", "sorted", "str().encode", "hashlib.sha256", "mean_train.cpu().numpy", "min", "str().encode", "len", "str", "mean_train.cpu", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.init_nasbench_macro_cifar10", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_cifar10_neural_net", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.algos.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_cifar10_neural_net", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2"], ["def", "gin_uncertainty_predictor_search_open", "(", "search_space", ",", "\n", "algo_info", ",", "\n", "logger", ",", "\n", "gpus", ",", "\n", "save_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "dataset", "=", "'cifar10'", ",", "\n", "seed", "=", "111222333", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "total_queries", "=", "algo_info", "[", "'total_queries'", "]", "\n", "num_init", "=", "algo_info", "[", "'num_init'", "]", "\n", "k_num", "=", "algo_info", "[", "'k'", "]", "\n", "epochs", "=", "algo_info", "[", "'epochs'", "]", "\n", "batch_size", "=", "algo_info", "[", "'batch_size'", "]", "\n", "lr", "=", "algo_info", "[", "'lr'", "]", "\n", "encode_path", "=", "algo_info", "[", "'encode_path'", "]", "\n", "candidate_nums", "=", "algo_info", "[", "'candidate_nums'", "]", "\n", "macro_graph_dict", "=", "{", "}", "\n", "model_keys", "=", "[", "]", "\n", "init_nasbench_macro_cifar10", "(", "save_dir", ")", "\n", "\n", "# set seed", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "data_dict", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_path", ")", "\n", "data_dict_keys", "=", "[", "convert_to_genotype", "(", "d", "[", "0", "]", ",", "verbose", "=", "False", ")", "for", "d", "in", "data_dict", "]", "\n", "data_dict_keys", "=", "[", "sha256", "(", "str", "(", "k", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "k", "in", "data_dict_keys", "]", "\n", "model_keys", ".", "extend", "(", "data_dict_keys", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data_dict", ")", ":", "\n", "        ", "macro_graph_dict", "[", "data_dict_keys", "[", "i", "]", "]", "=", "list", "(", "d", ")", "\n", "", "darts_neural_dict", "=", "search_space", ".", "assemble_cifar10_neural_net", "(", "data_dict", ")", "\n", "data", "=", "async_macro_model_train", "(", "model_data", "=", "darts_neural_dict", ",", "\n", "gpus", "=", "gpus", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "dataset", "=", "dataset", ")", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "macro_graph_dict", ":", "\n", "            ", "raise", "ValueError", "(", "'model trained acc key should in macro_graph_dict'", ")", "\n", "", "macro_graph_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "", "query", "=", "num_init", "+", "len", "(", "data_dict_keys", ")", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "train_data", "=", "search_space", ".", "assemble_graph", "(", "macro_graph_dict", ",", "model_keys", ")", "\n", "val_losses", "=", "np", ".", "array", "(", "[", "macro_graph_dict", "[", "k", "]", "[", "2", "]", "for", "k", "in", "model_keys", "]", ")", "\n", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "train_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "\n", "", "candidate_graph_dict", "=", "{", "}", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "macro_graph_dict", ",", "\n", "model_keys", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "encode_paths", "=", "encode_path", ",", "\n", ")", "\n", "candidate_dict_keys", "=", "[", "convert_to_genotype", "(", "d", "[", "0", "]", ",", "verbose", "=", "False", ")", "for", "d", "in", "candidates", "]", "\n", "candidate_dict_keys", "=", "[", "sha256", "(", "str", "(", "k", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "k", "in", "candidate_dict_keys", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "candidates", ")", ":", "\n", "            ", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "i", "]", "]", "=", "list", "(", "d", ")", "\n", "", "xcandidates", "=", "search_space", ".", "assemble_graph", "(", "candidate_graph_dict", ",", "candidate_dict_keys", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "xcandidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "meta_neuralnet", "=", "NasBenchGinGaussianTrainer", "(", "lr", "=", "lr", ",", "epochs", "=", "epochs", ",", "train_images", "=", "len", "(", "arch_data_edge_idx_list", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "input_dim", "=", "11", ",", "agent_type", "=", "'gin_gaussian'", ")", "\n", "meta_neuralnet", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_losses", ",", "logger", "=", "logger", ")", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "meta_neuralnet", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "predictions", ",", "_", ",", "_", "=", "meta_neuralnet", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "\n", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "'its_vae'", ")", "\n", "temp_candidate_train_arch", "=", "[", "]", "\n", "for", "j", "in", "sorted_indices", "[", ":", "k_num", "]", ":", "\n", "            ", "model_keys", ".", "append", "(", "candidate_dict_keys", "[", "j", "]", ")", "\n", "macro_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", "=", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", "\n", "temp_candidate_train_arch", ".", "append", "(", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", ")", "\n", "", "darts_candidate_neural_dict", "=", "search_space", ".", "assemble_cifar10_neural_net", "(", "temp_candidate_train_arch", ")", "\n", "darts_candidate_acc", "=", "async_macro_model_train", "(", "model_data", "=", "darts_candidate_neural_dict", ",", "\n", "gpus", "=", "gpus", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "dataset", "=", "dataset", ")", "\n", "for", "k", ",", "v", "in", "darts_candidate_acc", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "macro_graph_dict", ":", "\n", "                ", "raise", "ValueError", "(", "'model trained acc key should in macro_graph_dict'", ")", "\n", "", "macro_graph_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "", "train_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_losses", ")", ")", "\n", "val_losses", "=", "np", ".", "array", "(", "[", "macro_graph_dict", "[", "k", "]", "[", "2", "]", "for", "k", "in", "model_keys", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "val_losses", ")", "[", ":", "min", "(", "5", ",", "len", "(", "val_losses", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "len", "(", "temp_candidate_train_arch", ")", "\n", "", "return", "macro_graph_dict", ",", "model_keys", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.__init__": [[18, 33], ["probo.ProBO.set_probo_params", "probo.ProBO.set_fh", "probo.ProBO.set_tmpdir", "probo.ProBO.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.set_probo_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.set_fh", "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.set_tmpdir", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "fn", ",", "search_space", ",", "aux_file_path", ",", "data", "=", "None", ",", "probop", "=", "None", ",", "printFlag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor\n        Parameters:\n          fn - Function to query (experiment)\n          data - Initial dataset Namespace (with keys: X, y)\n          probop - probo parameters Namespace\n    \"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "set_probo_params", "(", "probop", ")", "\n", "self", ".", "set_fh", "(", "fn", ")", "\n", "self", ".", "set_tmpdir", "(", ")", "\n", "self", ".", "auxpkl", "=", "aux_file_path", "\n", "if", "printFlag", ":", "\n", "      ", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.set_probo_params": [[34, 37], ["None"], "methods", ["None"], ["", "", "def", "set_probo_params", "(", "self", ",", "probop", ")", ":", "\n", "    ", "\"\"\" Set ProBO parameters \"\"\"", "\n", "self", ".", "probop", "=", "probop", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.set_fh": [[38, 41], ["nas_lib.bo.fn.functionhandler.get_fh"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.get_fh"], ["", "def", "set_fh", "(", "self", ",", "fn", ")", ":", "\n", "    ", "\"\"\" Set function handler \"\"\"", "\n", "self", ".", "fh", "=", "get_fh", "(", "fn", ",", "self", ".", "data", ",", "self", ".", "probop", ".", "fhp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.set_tmpdir": [[42, 49], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "set_tmpdir", "(", "self", ")", ":", "\n", "    ", "\"\"\" Set tmp directory and files \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "probop", ".", "tmpdir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "self", ".", "probop", ".", "tmpdir", ")", "\n", "", "self", ".", "configpkl", "=", "os", ".", "path", ".", "join", "(", "self", ".", "probop", ".", "tmpdir", ",", "'config.pkl'", ")", "\n", "self", ".", "datapkl", "=", "os", ".", "path", ".", "join", "(", "self", ".", "probop", ".", "tmpdir", ",", "'data.pkl'", ")", "\n", "self", ".", "nextptpkl", "=", "os", ".", "path", ".", "join", "(", "self", ".", "probop", ".", "tmpdir", ",", "'nextpt.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.run_bo": [[50, 82], ["print", "range", "open", "pickle.dump", "time.time", "pickle.load", "probo.ProBO.fh.call_fn_and_add_data", "probo.ProBO.post_iteration", "open", "pickle.dump", "numpy.random.randint", "subprocess.call", "open", "print", "time.time", "hasattr", "argparse.Namespace", "nas_lib.bo.ds.makept.main", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.call_fn_and_add_data", "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.post_iteration", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.main"], ["", "def", "run_bo", "(", "self", ",", "verbose", "=", "1", ")", ":", "\n", "    ", "\"\"\" Main BO loop. \"\"\"", "\n", "# Serialize makerp ", "\n", "with", "open", "(", "self", ".", "configpkl", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "self", ".", "probop", ".", "makerp", ",", "f", ")", "\n", "", "print", "(", "'*Saved self.probop.makerp as '", "+", "self", ".", "configpkl", "+", "'.\\n-----'", ")", "\n", "# Iterate", "\n", "for", "iteridx", "in", "range", "(", "self", ".", "probop", ".", "niter", ")", ":", "\n", "      ", "starttime", "=", "time", ".", "time", "(", ")", "\n", "# Serialize current data", "\n", "with", "open", "(", "self", ".", "datapkl", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "self", ".", "data", ",", "f", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ".", "probop", ",", "'mode'", ")", "or", "self", ".", "probop", ".", "mode", "==", "'subprocess'", ":", "\n", "        ", "subseed", "=", "np", ".", "random", ".", "randint", "(", "111111", ")", "\n", "subprocess", ".", "call", "(", "[", "'python3'", ",", "'bo/ds/makept.py'", ",", "'--configpkl'", ",", "self", ".", "configpkl", ",", "\n", "'--datapkl'", ",", "self", ".", "datapkl", ",", "'--nextptpkl'", ",", "\n", "self", ".", "nextptpkl", ",", "'--seed'", ",", "str", "(", "subseed", ")", "]", ")", "\n", "", "elif", "self", ".", "probop", ".", "mode", "==", "'single_process'", ":", "\n", "        ", "args", "=", "Namespace", "(", "configpkl", "=", "self", ".", "configpkl", ",", "datapkl", "=", "self", ".", "datapkl", ",", "nextptpkl", "=", "self", ".", "nextptpkl", ",", "\n", "mode", "=", "self", ".", "probop", ".", "mode", ",", "iteridx", "=", "iteridx", ")", "\n", "main", "(", "args", ",", "self", ".", "search_space", ")", "\n", "\n", "# Call fn on nextpt", "\n", "", "nextpt", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "nextptpkl", ",", "'rb'", ")", ")", "\n", "self", ".", "fh", ".", "call_fn_and_add_data", "(", "nextpt", ")", "\n", "\n", "if", "verbose", "and", "(", "iteridx", "%", "10", "==", "0", ")", ":", "\n", "        ", "print", "(", "'Finished GP-BayesOpt query'", ",", "iteridx", ")", "\n", "", "itertime", "=", "time", ".", "time", "(", ")", "-", "starttime", "\n", "\n", "self", ".", "post_iteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.print_iter_info": [[83, 90], ["print", "print", "print", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "print_iter_info", "(", "self", ",", "iteridx", ",", "itertime", ")", ":", "\n", "    ", "\"\"\" Print information at end of an iteration. \"\"\"", "\n", "print", "(", "'*Last query results: xin = '", "+", "str", "(", "self", ".", "data", ".", "X", "[", "-", "1", "]", ")", "+", "\n", "', yout = '", "+", "str", "(", "self", ".", "data", ".", "y", "[", "-", "1", "]", ")", "+", "'.'", ")", "\n", "print", "(", "'*Timing: iteration took '", "+", "str", "(", "itertime", ")", "+", "' seconds.'", ")", "\n", "print", "(", "'*Finished ProBO iter = '", "+", "str", "(", "iteridx", "+", "1", ")", "+", "\n", "'.\\n'", "+", "'==='", "*", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.print_str": [[91, 95], ["print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" print a description string \"\"\"", "\n", "print", "(", "'*ProBO (using makept) with probop='", "+", "str", "(", "self", ".", "probop", ")", "\n", "+", "'.\\n-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.bo.probo.ProBO.post_iteration": [[96, 101], ["pairs.sort", "open", "pickle.dump", "range", "len"], "methods", ["None"], ["", "def", "post_iteration", "(", "self", ")", ":", "\n", "    ", "pairs", "=", "[", "(", "self", ".", "data", ".", "X", "[", "i", "]", ",", "self", ".", "data", ".", "y", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ".", "y", ")", ")", "]", "\n", "pairs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "with", "open", "(", "self", ".", "auxpkl", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "pairs", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.__init__": [[22, 31], ["pp_gp_stan.StanGpPP.set_model_params", "pp_gp_stan.StanGpPP.set_data", "pp_gp_stan.StanGpPP.set_model", "nas_lib.bo.pp.pp_core.DiscPP.__init__", "pp_gp_stan.StanGpPP.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_data", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ",", "modelp", "=", "None", ",", "printFlag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor \"\"\"", "\n", "self", ".", "set_model_params", "(", "modelp", ")", "\n", "self", ".", "set_data", "(", "data", ")", "\n", "self", ".", "ndimx", "=", "self", ".", "modelp", ".", "ndimx", "\n", "self", ".", "set_model", "(", ")", "\n", "super", "(", "StanGpPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "printFlag", ":", "\n", "      ", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.set_model_params": [[32, 48], ["argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace", "argparse.Namespace"], "methods", ["None"], ["", "", "def", "set_model_params", "(", "self", ",", "modelp", ")", ":", "\n", "    ", "if", "modelp", "is", "None", ":", "\n", "      ", "modelp", "=", "Namespace", "(", "ndimx", "=", "1", ",", "model_str", "=", "'optfixedsig'", ",", "\n", "gp_mean_transf_str", "=", "'constant'", ")", "\n", "if", "modelp", ".", "model_str", "==", "'optfixedsig'", ":", "\n", "        ", "modelp", ".", "kernp", "=", "Namespace", "(", "u1", "=", ".1", ",", "u2", "=", "5.", ",", "n1", "=", "10.", ",", "n2", "=", "10.", ",", "sigma", "=", "1e-5", ")", "\n", "modelp", ".", "infp", "=", "Namespace", "(", "niter", "=", "1000", ")", "\n", "", "elif", "modelp", ".", "model_str", "==", "'opt'", "or", "modelp", ".", "model_str", "==", "'optmatern32'", ":", "\n", "        ", "modelp", ".", "kernp", "=", "Namespace", "(", "ig1", "=", "1.", ",", "ig2", "=", "5.", ",", "n1", "=", "10.", ",", "n2", "=", "20.", ",", "n3", "=", ".01", ",", "\n", "n4", "=", ".01", ")", "\n", "modelp", ".", "infp", "=", "Namespace", "(", "niter", "=", "1000", ")", "\n", "", "elif", "modelp", ".", "model_str", "==", "'samp'", "or", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "        ", "modelp", ".", "kernp", "=", "Namespace", "(", "ig1", "=", "1.", ",", "ig2", "=", "5.", ",", "n1", "=", "10.", ",", "n2", "=", "20.", ",", "n3", "=", ".01", ",", "\n", "n4", "=", ".01", ")", "\n", "modelp", ".", "infp", "=", "Namespace", "(", "niter", "=", "1500", ",", "nwarmup", "=", "500", ")", "\n", "", "", "self", ".", "modelp", "=", "modelp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.set_data": [[49, 56], ["copy.deepcopy", "pp_gp_stan.StanGpPP.get_transformed_data"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.get_transformed_data"], ["", "def", "set_data", "(", "self", ",", "data", ")", ":", "\n", "    ", "\"\"\" Set self.data \"\"\"", "\n", "if", "data", "is", "None", ":", "\n", "      ", "pass", "#TODO: handle case where there's no data", "\n", "", "self", ".", "data_init", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "self", ".", "data", "=", "self", ".", "get_transformed_data", "(", "self", ".", "data_init", ",", "\n", "self", ".", "modelp", ".", "gp_mean_transf_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.get_transformed_data": [[57, 72], ["argparse.Namespace", "numpy.linalg.lstsq", "data.y.mean", "numpy.concatenate", "data.y.flatten", "numpy.matmul", "pp_gp_stan.StanGpPP.gp_mean_vec().reshape", "numpy.array", "pp_gp_stan.StanGpPP.gp_mean_vec().reshape", "numpy.concatenate", "numpy.ones", "pp_gp_stan.StanGpPP.gp_mean_vec", "pp_gp_stan.StanGpPP.gp_mean_vec", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones"], ["", "def", "get_transformed_data", "(", "self", ",", "data", ",", "transf_str", "=", "'linear'", ")", ":", "\n", "    ", "\"\"\" Transform data, for non-zero-mean GP \"\"\"", "\n", "newdata", "=", "Namespace", "(", "X", "=", "data", ".", "X", ")", "\n", "if", "transf_str", "==", "'linear'", ":", "\n", "      ", "mmat", ",", "_", ",", "_", ",", "_", "=", "np", ".", "linalg", ".", "lstsq", "(", "np", ".", "concatenate", "(", "[", "data", ".", "X", ",", "\n", "np", ".", "ones", "(", "(", "data", ".", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "1", ")", ",", "data", ".", "y", ".", "flatten", "(", ")", ",", "rcond", "=", "None", ")", "\n", "self", ".", "gp_mean_vec", "=", "lambda", "x", ":", "np", ".", "matmul", "(", "np", ".", "concatenate", "(", "[", "x", ",", "\n", "np", ".", "ones", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "1", ")", ",", "mmat", ")", "\n", "newdata", ".", "y", "=", "data", ".", "y", "-", "self", ".", "gp_mean_vec", "(", "data", ".", "X", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "if", "transf_str", "==", "'constant'", ":", "\n", "      ", "yconstant", "=", "data", ".", "y", ".", "mean", "(", ")", "\n", "#yconstant = 0. ", "\n", "self", ".", "gp_mean_vec", "=", "lambda", "x", ":", "np", ".", "array", "(", "[", "yconstant", "for", "xcomp", "in", "x", "]", ")", "\n", "newdata", ".", "y", "=", "data", ".", "y", "-", "self", ".", "gp_mean_vec", "(", "data", ".", "X", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "return", "newdata", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.set_model": [[73, 76], ["pp_gp_stan.StanGpPP.get_model"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model"], ["", "def", "set_model", "(", "self", ")", ":", "\n", "    ", "\"\"\" Set GP regression model \"\"\"", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.get_model": [[77, 86], ["nas_lib.get_model", "nas_lib.get_model", "nas_lib.get_model", "nas_lib.get_model", "nas_lib.get_model", "nas_lib.get_model", "nas_lib.get_model", "nas_lib.get_model", "nas_lib.get_model"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "    ", "\"\"\" Returns GPRegression model \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", ":", "\n", "      ", "return", "gpstan3", ".", "get_model", "(", "print_status", "=", "False", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'samp'", ":", "\n", "      ", "return", "gpstan2", ".", "get_model", "(", "print_status", "=", "False", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'optmatern32'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "      ", "return", "gpstan2_matern", ".", "get_model", "(", "print_status", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.infer_post_and_update_samples": [[87, 103], ["pp_gp_stan.StanGpPP.get_stan_data_dict", "pp_gp_stan.StanGpPP.get_sample_list_from_stan_out", "nas_lib.bo.util.print_utils.suppress_stdout_stderr", "nas_lib.bo.util.print_utils.suppress_stdout_stderr", "nas_lib.bo.util.print_utils.suppress_stdout_stderr", "print", "pp_gp_stan.StanGpPP.print_inference_result", "pp_gp_stan.StanGpPP.model.optimizing", "pp_gp_stan.StanGpPP.model.sampling"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.get_stan_data_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.get_sample_list_from_stan_out", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.print_inference_result"], ["", "", "def", "infer_post_and_update_samples", "(", "self", ",", "seed", "=", "5000012", ",", "print_result", "=", "False", ")", ":", "\n", "    ", "\"\"\" Update self.sample_list \"\"\"", "\n", "data_dict", "=", "self", ".", "get_stan_data_dict", "(", ")", "\n", "with", "suppress_stdout_stderr", "(", ")", ":", "\n", "      ", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'optmatern32'", ":", "\n", "        ", "stanout", "=", "self", ".", "model", ".", "optimizing", "(", "data_dict", ",", "iter", "=", "self", ".", "modelp", ".", "infp", ".", "niter", ",", "\n", "#seed=seed, as_vector=True, algorithm='Newton')", "\n", "seed", "=", "seed", ",", "as_vector", "=", "True", ",", "algorithm", "=", "'LBFGS'", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "        ", "stanout", "=", "self", ".", "model", ".", "sampling", "(", "data_dict", ",", "iter", "=", "self", ".", "modelp", ".", "infp", ".", "niter", "+", "\n", "self", ".", "modelp", ".", "infp", ".", "nwarmup", ",", "warmup", "=", "self", ".", "modelp", ".", "infp", ".", "nwarmup", ",", "chains", "=", "1", ",", "\n", "seed", "=", "seed", ",", "refresh", "=", "1000", ")", "\n", "", "print", "(", "'-----'", ")", "\n", "", "self", ".", "sample_list", "=", "self", ".", "get_sample_list_from_stan_out", "(", "stanout", ")", "\n", "if", "print_result", ":", "self", ".", "print_inference_result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.get_stan_data_dict": [[104, 124], ["len", "pp_gp_stan.StanGpPP.data.y.flatten", "len", "pp_gp_stan.StanGpPP.data.y.flatten", "len", "pp_gp_stan.StanGpPP.data.y.flatten"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "def", "get_stan_data_dict", "(", "self", ")", ":", "\n", "    ", "\"\"\" Return data dict for stan sampling method \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", ":", "\n", "      ", "return", "{", "'u1'", ":", "self", ".", "modelp", ".", "kernp", ".", "u1", ",", "'u2'", ":", "self", ".", "modelp", ".", "kernp", ".", "u2", ",", "\n", "'n1'", ":", "self", ".", "modelp", ".", "kernp", ".", "n1", ",", "'n2'", ":", "self", ".", "modelp", ".", "kernp", ".", "n2", ",", "\n", "'sigma'", ":", "self", ".", "modelp", ".", "kernp", ".", "sigma", ",", "'D'", ":", "self", ".", "ndimx", ",", "\n", "'N'", ":", "len", "(", "self", ".", "data", ".", "X", ")", ",", "'x'", ":", "self", ".", "data", ".", "X", ",", "'y'", ":", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", "}", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'samp'", ":", "\n", "      ", "return", "{", "'ig1'", ":", "self", ".", "modelp", ".", "kernp", ".", "ig1", ",", "'ig2'", ":", "self", ".", "modelp", ".", "kernp", ".", "ig2", ",", "\n", "'n1'", ":", "self", ".", "modelp", ".", "kernp", ".", "n1", ",", "'n2'", ":", "self", ".", "modelp", ".", "kernp", ".", "n2", ",", "\n", "'n3'", ":", "self", ".", "modelp", ".", "kernp", ".", "n3", ",", "'n4'", ":", "self", ".", "modelp", ".", "kernp", ".", "n4", ",", "\n", "'D'", ":", "self", ".", "ndimx", ",", "'N'", ":", "len", "(", "self", ".", "data", ".", "X", ")", ",", "'x'", ":", "self", ".", "data", ".", "X", ",", "\n", "'y'", ":", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", "}", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'optmatern32'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "      ", "return", "{", "'ig1'", ":", "self", ".", "modelp", ".", "kernp", ".", "ig1", ",", "'ig2'", ":", "self", ".", "modelp", ".", "kernp", ".", "ig2", ",", "\n", "'n1'", ":", "self", ".", "modelp", ".", "kernp", ".", "n1", ",", "'n2'", ":", "self", ".", "modelp", ".", "kernp", ".", "n2", ",", "\n", "'n3'", ":", "self", ".", "modelp", ".", "kernp", ".", "n3", ",", "'n4'", ":", "self", ".", "modelp", ".", "kernp", ".", "n4", ",", "\n", "'D'", ":", "self", ".", "ndimx", ",", "'N'", ":", "len", "(", "self", ".", "data", ".", "X", ")", ",", "'x'", ":", "self", ".", "data", ".", "X", ",", "\n", "'y'", ":", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "'covid'", ":", "2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.get_sample_list_from_stan_out": [[125, 138], ["argparse.Namespace", "argparse.Namespace", "stanout.extract", "argparse.Namespace", "range"], "methods", ["None"], ["", "", "def", "get_sample_list_from_stan_out", "(", "self", ",", "stanout", ")", ":", "\n", "    ", "\"\"\" Convert stan output to sample_list \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", ":", "\n", "      ", "return", "[", "Namespace", "(", "ls", "=", "stanout", "[", "'rho'", "]", ",", "alpha", "=", "stanout", "[", "'alpha'", "]", ",", "\n", "sigma", "=", "self", ".", "modelp", ".", "kernp", ".", "sigma", ")", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'optmatern32'", ":", "\n", "      ", "return", "[", "Namespace", "(", "ls", "=", "stanout", "[", "'rho'", "]", ",", "alpha", "=", "stanout", "[", "'alpha'", "]", ",", "\n", "sigma", "=", "stanout", "[", "'sigma'", "]", ")", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "      ", "sdict", "=", "stanout", ".", "extract", "(", "[", "'rho'", ",", "'alpha'", ",", "'sigma'", "]", ")", "\n", "return", "[", "Namespace", "(", "ls", "=", "sdict", "[", "'rho'", "]", "[", "i", "]", ",", "alpha", "=", "sdict", "[", "'alpha'", "]", "[", "i", "]", ",", "\n", "sigma", "=", "sdict", "[", "'sigma'", "]", "[", "i", "]", ")", "for", "i", "in", "range", "(", "sdict", "[", "'rho'", "]", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.print_inference_result": [[139, 158], ["print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "print", "print", "print", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.array.mean", "numpy.array.std", "numpy.array.mean", "numpy.array.std", "numpy.array.mean", "numpy.array.std"], "methods", ["None"], ["", "", "def", "print_inference_result", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print results of stan inference \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'optmatern32'", ":", "\n", "      ", "print", "(", "'*ls pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "ls", ")", "+", "'.'", ")", "\n", "print", "(", "'*alpha pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "alpha", ")", "+", "'.'", ")", "\n", "print", "(", "'*sigma pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "sigma", ")", "+", "'.'", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "      ", "ls_arr", "=", "np", ".", "array", "(", "[", "ns", ".", "ls", "for", "ns", "in", "self", ".", "sample_list", "]", ")", "\n", "alpha_arr", "=", "np", ".", "array", "(", "[", "ns", ".", "alpha", "for", "ns", "in", "self", ".", "sample_list", "]", ")", "\n", "sigma_arr", "=", "np", ".", "array", "(", "[", "ns", ".", "sigma", "for", "ns", "in", "self", ".", "sample_list", "]", ")", "\n", "print", "(", "'*ls mean = '", "+", "str", "(", "ls_arr", ".", "mean", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*ls std = '", "+", "str", "(", "ls_arr", ".", "std", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*alpha mean = '", "+", "str", "(", "alpha_arr", ".", "mean", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*alpha std = '", "+", "str", "(", "alpha_arr", ".", "std", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*sigma mean = '", "+", "str", "(", "sigma_arr", ".", "mean", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*sigma std = '", "+", "str", "(", "sigma_arr", ".", "std", "(", ")", ")", "+", "'.'", ")", "\n", "", "print", "(", "'-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.sample_pp_post_pred": [[159, 186], ["range", "pp_gp_stan.StanGpPP.get_reverse_transform", "pp_gp_stan.StanGpPP.gp_post", "list", "int", "numpy.random.randint", "numpy.stack", "ppred_list.extend", "ppred_list.extend", "len", "list", "list", "numpy.stack", "nas_lib.bo.pp.gp.gp_utils.sample_mvn", "nas_lib.bo.pp.gp.gp_utils.sample_mvn", "nas_lib.bo.pp.gp.gp_utils.sample_mvn", "numpy.random.normal", "postmu.reshape", "postcov.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.get_reverse_transform", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.gp_post", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal"], ["", "def", "sample_pp_post_pred", "(", "self", ",", "nsamp", ",", "input_list", ",", "full_cov", "=", "False", ",", "nloop", "=", "None", ")", ":", "\n", "    ", "\"\"\" Sample from posterior predictive of PP.\n        Inputs:\n          input_list - list of np arrays size=(-1,)\n        Returns:\n          list (len input_list) of np arrays (size=(nsamp,1)).\"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'optmatern32'", ":", "\n", "      ", "nloop", "=", "1", "\n", "sampids", "=", "[", "0", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "      ", "if", "nloop", "is", "None", ":", "nloop", "=", "nsamp", "\n", "nsamp", "=", "int", "(", "nsamp", "/", "nloop", ")", "\n", "sampids", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "sample_list", ")", ",", "size", "=", "(", "nloop", ",", ")", ")", "\n", "", "ppred_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nloop", ")", ":", "\n", "      ", "samp", "=", "self", ".", "sample_list", "[", "sampids", "[", "i", "]", "]", "\n", "postmu", ",", "postcov", "=", "self", ".", "gp_post", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "y", ",", "\n", "np", ".", "stack", "(", "input_list", ")", ",", "samp", ".", "ls", ",", "samp", ".", "alpha", ",", "samp", ".", "sigma", ",", "full_cov", ")", "\n", "if", "full_cov", ":", "\n", "        ", "ppred_list", ".", "extend", "(", "list", "(", "sample_mvn", "(", "postmu", ",", "postcov", ",", "nsamp", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "ppred_list", ".", "extend", "(", "list", "(", "np", ".", "random", ".", "normal", "(", "postmu", ".", "reshape", "(", "-", "1", ",", ")", ",", "\n", "postcov", ".", "reshape", "(", "-", "1", ",", ")", ",", "size", "=", "(", "nsamp", ",", "len", "(", "input_list", ")", ")", ")", ")", ")", "\n", "", "", "return", "self", ".", "get_reverse_transform", "(", "list", "(", "np", ".", "stack", "(", "ppred_list", ")", ".", "T", ")", ",", "ppred_list", ",", "\n", "input_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.sample_pp_pred": [[187, 203], ["numpy.stack", "pp_gp_stan.StanGpPP.gp_post", "list", "pp_gp_stan.StanGpPP.get_reverse_transform", "nas_lib.bo.pp.gp.gp_utils.sample_mvn", "nas_lib.bo.pp.gp.gp_utils.sample_mvn", "nas_lib.bo.pp.gp.gp_utils.sample_mvn", "list", "numpy.stack", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.gp_post", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.get_reverse_transform", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn"], ["", "def", "sample_pp_pred", "(", "self", ",", "nsamp", ",", "input_list", ",", "lv", "=", "None", ")", ":", "\n", "    ", "\"\"\" Sample from predictive of PP for parameter lv.\n        Returns: list (len input_list) of np arrays (size (nsamp,1)).\"\"\"", "\n", "x_pred", "=", "np", ".", "stack", "(", "input_list", ")", "\n", "if", "lv", "is", "None", ":", "\n", "      ", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'optmatern32'", ":", "\n", "        ", "lv", "=", "self", ".", "sample_list", "[", "0", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "        ", "lv", "=", "self", ".", "sample_list", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "sample_list", ")", ")", "]", "\n", "", "", "postmu", ",", "postcov", "=", "self", ".", "gp_post", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "y", ",", "x_pred", ",", "lv", ".", "ls", ",", "\n", "lv", ".", "alpha", ",", "lv", ".", "sigma", ")", "\n", "pred_list", "=", "list", "(", "sample_mvn", "(", "postmu", ",", "postcov", ",", "1", ")", ")", "###TODO: sample from this mean nsamp times", "\n", "return", "self", ".", "get_reverse_transform", "(", "list", "(", "np", ".", "stack", "(", "pred_list", ")", ".", "T", ")", ",", "pred_list", ",", "\n", "input_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.get_reverse_transform": [[204, 210], ["pp_gp_stan.StanGpPP.gp_mean_vec", "range", "pp_gp_stan.StanGpPP.gp_mean_vec", "input_list[].reshape", "len", "numpy.array"], "methods", ["None"], ["", "def", "get_reverse_transform", "(", "self", ",", "pp1", ",", "pp2", ",", "input_list", ")", ":", "\n", "    ", "\"\"\" Apply reverse of data transform to ppred or pred \"\"\"", "\n", "pp1", "=", "[", "pp1", "[", "i", "]", "+", "self", ".", "gp_mean_vec", "(", "input_list", "[", "i", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "input_list", ")", ")", "]", "\n", "pp2", "=", "[", "psamp", "+", "self", ".", "gp_mean_vec", "(", "np", ".", "array", "(", "input_list", ")", ")", "for", "psamp", "in", "pp2", "]", "\n", "return", "pp1", ",", "pp2", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.gp_post": [[211, 229], ["kernel", "nas_lib.bo.pp.gp.gp_utils.get_cholesky_decomp", "nas_lib.bo.pp.gp.gp_utils.get_cholesky_decomp", "nas_lib.bo.pp.gp.gp_utils.get_cholesky_decomp", "nas_lib.bo.pp.gp.gp_utils.solve_upper_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_upper_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_upper_triangular", "kernel", "kernel.dot", "kernel", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular.T.dot", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular.T.dot", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular.T.dot", "numpy.sqrt", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_upper_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_upper_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_upper_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular"], ["", "def", "gp_post", "(", "self", ",", "x_train", ",", "y_train", ",", "x_pred", ",", "ls", ",", "alpha", ",", "sigma", ",", "full_cov", "=", "True", ")", ":", "\n", "    ", "\"\"\" Compute parameters of GP posterior \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optmatern32'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampmatern32'", ":", "\n", "      ", "kernel", "=", "kern_matern32", "\n", "", "else", ":", "\n", "      ", "kernel", "=", "kern_exp_quad", "\n", "", "k11_nonoise", "=", "kernel", "(", "x_train", ",", "x_train", ",", "ls", ",", "alpha", ")", "\n", "lmat", "=", "get_cholesky_decomp", "(", "k11_nonoise", ",", "sigma", ",", "'try_first'", ")", "\n", "smat", "=", "solve_upper_triangular", "(", "lmat", ".", "T", ",", "solve_lower_triangular", "(", "lmat", ",", "y_train", ")", ")", "\n", "k21", "=", "kernel", "(", "x_pred", ",", "x_train", ",", "ls", ",", "alpha", ")", "\n", "mu2", "=", "k21", ".", "dot", "(", "smat", ")", "\n", "k22", "=", "kernel", "(", "x_pred", ",", "x_pred", ",", "ls", ",", "alpha", ")", "\n", "vmat", "=", "solve_lower_triangular", "(", "lmat", ",", "k21", ".", "T", ")", "\n", "k2", "=", "k22", "-", "vmat", ".", "T", ".", "dot", "(", "vmat", ")", "\n", "if", "full_cov", "is", "False", ":", "\n", "      ", "k2", "=", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "k2", ")", ")", "\n", "", "return", "mu2", ",", "k2", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan.StanGpPP.print_str": [[231, 235], ["print", "print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string \"\"\"", "\n", "print", "(", "'*StanGpPP with modelp='", "+", "str", "(", "self", ".", "modelp", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.__init__": [[16, 26], ["pp_gp_george.GeorgeGpPP.set_data", "pp_gp_george.GeorgeGpPP.set_model_params", "pp_gp_george.GeorgeGpPP.set_kernel", "pp_gp_george.GeorgeGpPP.set_model", "nas_lib.bo.pp.pp_core.DiscPP.__init__", "pp_gp_george.GeorgeGpPP.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_data", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.set_kernel", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ",", "modelp", "=", "None", ",", "printFlag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor \"\"\"", "\n", "self", ".", "set_data", "(", "data", ")", "\n", "self", ".", "set_model_params", "(", "modelp", ")", "\n", "self", ".", "ndimx", "=", "self", ".", "modelp", ".", "ndimx", "\n", "self", ".", "set_kernel", "(", ")", "\n", "self", ".", "set_model", "(", ")", "\n", "super", "(", "GeorgeGpPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "printFlag", ":", "\n", "      ", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.set_data": [[27, 31], ["None"], "methods", ["None"], ["", "", "def", "set_data", "(", "self", ",", "data", ")", ":", "\n", "    ", "if", "data", "is", "None", ":", "\n", "      ", "pass", "#TODO: handle case where there's no data", "\n", "", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.set_model_params": [[32, 37], ["argparse.Namespace"], "methods", ["None"], ["", "def", "set_model_params", "(", "self", ",", "modelp", ")", ":", "\n", "    ", "if", "modelp", "is", "None", ":", "\n", "      ", "modelp", "=", "Namespace", "(", "ndimx", "=", "1", ",", "noiseVar", "=", "1e-3", ",", "kernLs", "=", "1.5", ",", "kernStr", "=", "'mat'", ",", "\n", "fitType", "=", "'mle'", ")", "\n", "", "self", ".", "modelp", "=", "modelp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.set_kernel": [[38, 46], ["pp_gp_george.GeorgeGpPP.data.y.var", "george.kernels.Matern52Kernel", "pp_gp_george.GeorgeGpPP.data.y.var", "george.kernels.ExpSquaredKernel"], "methods", ["None"], ["", "def", "set_kernel", "(", "self", ")", ":", "\n", "    ", "\"\"\" Set kernel for GP \"\"\"", "\n", "if", "self", ".", "modelp", ".", "kernStr", "==", "'mat'", ":", "\n", "      ", "self", ".", "kernel", "=", "self", ".", "data", ".", "y", ".", "var", "(", ")", "*", "george", ".", "kernels", ".", "Matern52Kernel", "(", "self", ".", "modelp", ".", "kernLs", ",", "ndim", "=", "self", ".", "ndimx", ")", "\n", "", "if", "self", ".", "modelp", ".", "kernStr", "==", "'rbf'", ":", "# NOTE: periodically produces errors", "\n", "      ", "self", ".", "kernel", "=", "self", ".", "data", ".", "y", ".", "var", "(", ")", "*", "george", ".", "kernels", ".", "ExpSquaredKernel", "(", "self", ".", "modelp", ".", "kernLs", ",", "ndim", "=", "self", ".", "ndimx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.set_model": [[47, 52], ["pp_gp_george.GeorgeGpPP.get_model", "pp_gp_george.GeorgeGpPP.model.compute", "pp_gp_george.GeorgeGpPP.fit_hyperparams"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.fit_hyperparams"], ["", "", "def", "set_model", "(", "self", ")", ":", "\n", "    ", "\"\"\" Set GP regression model \"\"\"", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", ")", "\n", "self", ".", "model", ".", "compute", "(", "self", ".", "data", ".", "X", ")", "\n", "self", ".", "fit_hyperparams", "(", "printOut", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.get_model": [[53, 56], ["george.GP"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "    ", "\"\"\" Returns GPRegression model \"\"\"", "\n", "return", "george", ".", "GP", "(", "kernel", "=", "self", ".", "kernel", ",", "fit_mean", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.fit_hyperparams": [[57, 76], ["scipy.minimize", "print", "print", "pp_gp_george.GeorgeGpPP.model.get_parameter_vector", "len", "emcee.EnsembleSampler", "print", "pp_gp_george.GeorgeGpPP.sampler.run_mcmc", "print", "pp_gp_george.GeorgeGpPP.sampler.run_mcmc", "pp_gp_george.GeorgeGpPP.model.get_parameter_dict", "pp_gp_george.GeorgeGpPP.model.get_parameter_vector", "numpy.random.randn"], "methods", ["None"], ["", "def", "fit_hyperparams", "(", "self", ",", "printOut", "=", "False", ")", ":", "\n", "    ", "if", "self", ".", "modelp", ".", "fitType", "==", "'mle'", ":", "\n", "      ", "spo", ".", "minimize", "(", "self", ".", "neg_log_like", ",", "self", ".", "model", ".", "get_parameter_vector", "(", ")", ",", "\n", "jac", "=", "True", ")", "\n", "", "elif", "self", ".", "modelp", ".", "fitType", "==", "'bayes'", ":", "\n", "      ", "self", ".", "nburnin", "=", "200", "\n", "nsamp", "=", "200", "\n", "nwalkers", "=", "36", "\n", "gpdim", "=", "len", "(", "self", ".", "model", ")", "\n", "self", ".", "sampler", "=", "emcee", ".", "EnsembleSampler", "(", "nwalkers", ",", "gpdim", ",", "self", ".", "log_post", ")", "\n", "p0", "=", "self", ".", "model", ".", "get_parameter_vector", "(", ")", "+", "1e-4", "*", "np", ".", "random", ".", "randn", "(", "nwalkers", ",", "\n", "gpdim", ")", "\n", "print", "(", "'Running burn-in.'", ")", "\n", "p0", ",", "_", ",", "_", "=", "self", ".", "sampler", ".", "run_mcmc", "(", "p0", ",", "self", ".", "nburnin", ")", "\n", "print", "(", "'Running main chain.'", ")", "\n", "self", ".", "sampler", ".", "run_mcmc", "(", "p0", ",", "nsamp", ")", "\n", "", "if", "printOut", ":", "\n", "      ", "print", "(", "'Final GP hyperparam (in opt or MCMC chain):'", ")", "\n", "print", "(", "self", ".", "model", ".", "get_parameter_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.infer_post_and_update_samples": [[77, 80], ["None"], "methods", ["None"], ["", "", "def", "infer_post_and_update_samples", "(", "self", ")", ":", "\n", "    ", "\"\"\" Update self.sample_list \"\"\"", "\n", "self", ".", "sample_list", "=", "[", "None", "]", "#TODO: need to not-break ts fn in maker_bayesopt.py", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.sample_pp_post_pred": [[81, 103], ["numpy.array", "list", "numpy.array", "pp_gp_george.GeorgeGpPP.model.sample_conditional", "numpy.zeros", "range", "pp_gp_george.GeorgeGpPP.data.y.flatten", "numpy.random.randint", "numpy.random.randint", "print", "pp_gp_george.GeorgeGpPP.model.set_parameter_vector", "pp_gp_george.GeorgeGpPP.model.sample_conditional().flatten", "len", "str", "pp_gp_george.GeorgeGpPP.model.sample_conditional", "pp_gp_george.GeorgeGpPP.data.y.flatten"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "def", "sample_pp_post_pred", "(", "self", ",", "nsamp", ",", "input_list", ")", ":", "\n", "    ", "\"\"\" Sample from posterior predictive of PP.\n        Inputs:\n          input_list - list of np arrays size=(-1,)\n        Returns:\n          list (len input_list) of np arrays (size=(nsamp,1)).\"\"\"", "\n", "inputArray", "=", "np", ".", "array", "(", "input_list", ")", "\n", "if", "self", ".", "modelp", ".", "fitType", "==", "'mle'", ":", "\n", "      ", "inputArray", "=", "np", ".", "array", "(", "input_list", ")", "\n", "ppredArray", "=", "self", ".", "model", ".", "sample_conditional", "(", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "\n", "inputArray", ",", "nsamp", ")", ".", "T", "\n", "", "elif", "self", ".", "modelp", ".", "fitType", "==", "'bayes'", ":", "\n", "      ", "ppredArray", "=", "np", ".", "zeros", "(", "shape", "=", "[", "len", "(", "input_list", ")", ",", "nsamp", "]", ")", "\n", "for", "s", "in", "range", "(", "nsamp", ")", ":", "\n", "        ", "walkidx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "sampler", ".", "chain", ".", "shape", "[", "0", "]", ")", "\n", "sampidx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "nburnin", ",", "self", ".", "sampler", ".", "chain", ".", "shape", "[", "1", "]", ")", "\n", "hparamSamp", "=", "self", ".", "sampler", ".", "chain", "[", "walkidx", ",", "sampidx", "]", "\n", "print", "(", "'hparamSamp = '", "+", "str", "(", "hparamSamp", ")", ")", "# TODO: remove print statement", "\n", "self", ".", "model", ".", "set_parameter_vector", "(", "hparamSamp", ")", "\n", "ppredArray", "[", ":", ",", "s", "]", "=", "self", ".", "model", ".", "sample_conditional", "(", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "\n", "inputArray", ",", "1", ")", ".", "flatten", "(", ")", "\n", "", "", "return", "list", "(", "ppredArray", ")", "# each element is row in ppredArray matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.sample_pp_pred": [[104, 118], ["numpy.array", "pp_gp_george.GeorgeGpPP.model.sample_conditional().reshape", "print", "numpy.random.normal().reshape", "pp_gp_george.GeorgeGpPP.model.sample_conditional", "pp_gp_george.GeorgeGpPP.data.y.flatten", "numpy.random.normal", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal"], ["", "def", "sample_pp_pred", "(", "self", ",", "nsamp", ",", "input_list", ",", "lv", "=", "None", ")", ":", "\n", "    ", "\"\"\" Sample from predictive of PP for parameter lv.\n        Returns: list (len input_list) of np arrays (size (nsamp,1)).\"\"\"", "\n", "if", "self", ".", "modelp", ".", "fitType", "==", "'bayes'", ":", "\n", "      ", "print", "(", "'*WARNING: fitType=bayes not implemented for sample_pp_pred. \\\n        Reverting to fitType=mle'", ")", "\n", "# TODO: Equivalent algo for fitType=='bayes':", "\n", "#   - draw posterior sample path over all xin in input_list", "\n", "#   - draw pred samples around sample path pt, based on noise model", "\n", "", "inputArray", "=", "np", ".", "array", "(", "input_list", ")", "\n", "samplePath", "=", "self", ".", "model", ".", "sample_conditional", "(", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "\n", "inputArray", ")", ".", "reshape", "(", "-", "1", ",", ")", "\n", "return", "[", "np", ".", "random", ".", "normal", "(", "s", ",", "np", ".", "sqrt", "(", "self", ".", "modelp", ".", "noiseVar", ")", ",", "nsamp", ")", ".", "reshape", "(", "-", "1", ",", ")", "\n", "for", "s", "in", "samplePath", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.neg_log_like": [[119, 125], ["pp_gp_george.GeorgeGpPP.model.set_parameter_vector", "pp_gp_george.GeorgeGpPP.model.grad_log_likelihood", "pp_gp_george.GeorgeGpPP.data.y.flatten", "pp_gp_george.GeorgeGpPP.model.log_likelihood", "pp_gp_george.GeorgeGpPP.data.y.flatten"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "def", "neg_log_like", "(", "self", ",", "hparams", ")", ":", "\n", "    ", "\"\"\" Compute and return the negative log likelihood for model\n        hyperparameters hparams, as well as its gradient. \"\"\"", "\n", "self", ".", "model", ".", "set_parameter_vector", "(", "hparams", ")", "\n", "g", "=", "self", ".", "model", ".", "grad_log_likelihood", "(", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "quiet", "=", "True", ")", "\n", "return", "-", "self", ".", "model", ".", "log_likelihood", "(", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "quiet", "=", "True", ")", ",", "-", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.log_post": [[126, 134], ["numpy.any", "pp_gp_george.GeorgeGpPP.model.set_parameter_vector", "pp_gp_george.GeorgeGpPP.model.log_likelihood", "pp_gp_george.GeorgeGpPP.data.y.flatten"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "def", "log_post", "(", "self", ",", "hparams", ")", ":", "\n", "    ", "\"\"\" Compute and return the log posterior density (up to constant of\n        proportionality) for the model hyperparameters hparams. \"\"\"", "\n", "# Uniform prior between -100 and 100, for each hyperparam", "\n", "if", "np", ".", "any", "(", "(", "-", "100", ">", "hparams", "[", "1", ":", "]", ")", "+", "(", "hparams", "[", "1", ":", "]", ">", "100", ")", ")", ":", "\n", "      ", "return", "-", "np", ".", "inf", "\n", "", "self", ".", "model", ".", "set_parameter_vector", "(", "hparams", ")", "\n", "return", "self", ".", "model", ".", "log_likelihood", "(", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "quiet", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_george.GeorgeGpPP.print_str": [[136, 140], ["print", "print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string \"\"\"", "\n", "print", "(", "'*GeorgeGpPP with modelp='", "+", "str", "(", "self", ".", "modelp", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.__init__": [[21, 30], ["pp_gp_stan_distmat.StanGpDistmatPP.set_model_params", "pp_gp_stan_distmat.StanGpDistmatPP.set_data", "pp_gp_stan_distmat.StanGpDistmatPP.set_model", "bo.pp.pp_core.DiscPP.__init__", "pp_gp_stan_distmat.StanGpDistmatPP.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_data", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ",", "modelp", "=", "None", ",", "printFlag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor \"\"\"", "\n", "self", ".", "set_model_params", "(", "modelp", ")", "\n", "self", ".", "set_data", "(", "data", ")", "\n", "self", ".", "ndimx", "=", "self", ".", "modelp", ".", "ndimx", "\n", "self", ".", "set_model", "(", ")", "\n", "super", "(", "StanGpDistmatPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "printFlag", ":", "\n", "      ", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.set_model_params": [[31, 36], ["None"], "methods", ["None"], ["", "", "def", "set_model_params", "(", "self", ",", "modelp", ")", ":", "\n", "    ", "\"\"\" Set self.modelp \"\"\"", "\n", "if", "modelp", "is", "None", ":", "\n", "      ", "pass", "#TODO", "\n", "", "self", ".", "modelp", "=", "modelp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.set_data": [[37, 43], ["copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "set_data", "(", "self", ",", "data", ")", ":", "\n", "    ", "\"\"\" Set self.data \"\"\"", "\n", "if", "data", "is", "None", ":", "\n", "      ", "pass", "#TODO", "\n", "", "self", ".", "data_init", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "self", ".", "data", "=", "copy", ".", "deepcopy", "(", "self", ".", "data_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.set_model": [[44, 47], ["pp_gp_stan_distmat.StanGpDistmatPP.get_model"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model"], ["", "def", "set_model", "(", "self", ")", ":", "\n", "    ", "\"\"\" Set GP regression model \"\"\"", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.get_model": [[48, 57], ["bo.get_model", "bo.get_model", "bo.get_model", "bo.get_model"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "    ", "\"\"\" Returns GPRegression model \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampfixedsig'", ":", "\n", "      ", "return", "gpstan_fixedsig", ".", "get_model", "(", "print_status", "=", "True", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'samp'", ":", "\n", "      ", "return", "gpstan", ".", "get_model", "(", "print_status", "=", "True", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'fixedparam'", ":", "\n", "      ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.infer_post_and_update_samples": [[58, 75], ["pp_gp_stan_distmat.StanGpDistmatPP.get_stan_data_dict", "pp_gp_stan_distmat.StanGpDistmatPP.get_sample_list_from_stan_out", "bo.util.print_utils.suppress_stdout_stderr", "bo.util.print_utils.suppress_stdout_stderr", "print", "pp_gp_stan_distmat.StanGpDistmatPP.print_inference_result", "pp_gp_stan_distmat.StanGpDistmatPP.model.optimizing", "pp_gp_stan_distmat.StanGpDistmatPP.model.sampling"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.get_stan_data_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.get_sample_list_from_stan_out", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.print_inference_result"], ["", "", "def", "infer_post_and_update_samples", "(", "self", ",", "seed", "=", "543210", ",", "print_result", "=", "False", ")", ":", "\n", "    ", "\"\"\" Update self.sample_list \"\"\"", "\n", "data_dict", "=", "self", ".", "get_stan_data_dict", "(", ")", "\n", "with", "suppress_stdout_stderr", "(", ")", ":", "\n", "      ", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'opt'", ":", "\n", "        ", "stanout", "=", "self", ".", "model", ".", "optimizing", "(", "data_dict", ",", "iter", "=", "self", ".", "modelp", ".", "infp", ".", "niter", ",", "\n", "#seed=seed, as_vector=True, algorithm='Newton')", "\n", "seed", "=", "seed", ",", "as_vector", "=", "True", ",", "algorithm", "=", "'LBFGS'", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampfixedsig'", ":", "\n", "        ", "stanout", "=", "self", ".", "model", ".", "sampling", "(", "data_dict", ",", "iter", "=", "self", ".", "modelp", ".", "infp", ".", "niter", "+", "\n", "self", ".", "modelp", ".", "infp", ".", "nwarmup", ",", "warmup", "=", "self", ".", "modelp", ".", "infp", ".", "nwarmup", ",", "chains", "=", "1", ",", "\n", "seed", "=", "seed", ",", "refresh", "=", "1000", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'fixedparam'", ":", "\n", "        ", "stanout", "=", "None", "\n", "", "print", "(", "'-----'", ")", "\n", "", "self", ".", "sample_list", "=", "self", ".", "get_sample_list_from_stan_out", "(", "stanout", ")", "\n", "if", "print_result", ":", "self", ".", "print_inference_result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.get_stan_data_dict": [[76, 91], ["len", "pp_gp_stan_distmat.StanGpDistmatPP.data.y.flatten", "pp_gp_stan_distmat.StanGpDistmatPP.get_distmat", "len", "pp_gp_stan_distmat.StanGpDistmatPP.data.y.flatten", "pp_gp_stan_distmat.StanGpDistmatPP.get_distmat"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.get_distmat", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.get_distmat"], ["", "def", "get_stan_data_dict", "(", "self", ")", ":", "\n", "    ", "\"\"\" Return data dict for stan sampling method \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampfixedsig'", ":", "\n", "      ", "return", "{", "'ig1'", ":", "self", ".", "modelp", ".", "kernp", ".", "ig1", ",", "'ig2'", ":", "self", ".", "modelp", ".", "kernp", ".", "ig2", ",", "\n", "'n1'", ":", "self", ".", "modelp", ".", "kernp", ".", "n1", ",", "'n2'", ":", "self", ".", "modelp", ".", "kernp", ".", "n2", ",", "\n", "'sigma'", ":", "self", ".", "modelp", ".", "kernp", ".", "sigma", ",", "'D'", ":", "self", ".", "ndimx", ",", "\n", "'N'", ":", "len", "(", "self", ".", "data", ".", "X", ")", ",", "'y'", ":", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "\n", "'distmat'", ":", "self", ".", "get_distmat", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "X", ")", "}", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'samp'", ":", "\n", "      ", "return", "{", "'ig1'", ":", "self", ".", "modelp", ".", "kernp", ".", "ig1", ",", "'ig2'", ":", "self", ".", "modelp", ".", "kernp", ".", "ig2", ",", "\n", "'n1'", ":", "self", ".", "modelp", ".", "kernp", ".", "n1", ",", "'n2'", ":", "self", ".", "modelp", ".", "kernp", ".", "n2", ",", "\n", "'n3'", ":", "self", ".", "modelp", ".", "kernp", ".", "n3", ",", "'n4'", ":", "self", ".", "modelp", ".", "kernp", ".", "n4", ",", "\n", "'D'", ":", "self", ".", "ndimx", ",", "'N'", ":", "len", "(", "self", ".", "data", ".", "X", ")", ",", "'y'", ":", "self", ".", "data", ".", "y", ".", "flatten", "(", ")", ",", "\n", "'distmat'", ":", "self", ".", "get_distmat", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "X", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.get_distmat": [[92, 96], ["bo.pp.gp.gp_utils.squared_euc_distmat", "bo.pp.gp.gp_utils.squared_euc_distmat"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.squared_euc_distmat", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.squared_euc_distmat"], ["", "", "def", "get_distmat", "(", "self", ",", "xmat1", ",", "xmat2", ")", ":", "\n", "    ", "\"\"\" Get distance matrix \"\"\"", "\n", "# For now, will compute squared euc distance * .5, on self.data.X", "\n", "return", "squared_euc_distmat", "(", "xmat1", ",", "xmat2", ",", ".5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.get_sample_list_from_stan_out": [[97, 116], ["argparse.Namespace", "argparse.Namespace", "stanout.extract", "argparse.Namespace", "stanout.extract", "range", "argparse.Namespace", "range", "argparse.Namespace"], "methods", ["None"], ["", "def", "get_sample_list_from_stan_out", "(", "self", ",", "stanout", ")", ":", "\n", "    ", "\"\"\" Convert stan output to sample_list \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", ":", "\n", "      ", "return", "[", "Namespace", "(", "ls", "=", "stanout", "[", "'rho'", "]", ",", "alpha", "=", "stanout", "[", "'alpha'", "]", ",", "\n", "sigma", "=", "self", ".", "modelp", ".", "kernp", ".", "sigma", ")", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'opt'", ":", "\n", "      ", "return", "[", "Namespace", "(", "ls", "=", "stanout", "[", "'rho'", "]", ",", "alpha", "=", "stanout", "[", "'alpha'", "]", ",", "\n", "sigma", "=", "stanout", "[", "'sigma'", "]", ")", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'sampfixedsig'", ":", "\n", "      ", "sdict", "=", "stanout", ".", "extract", "(", "[", "'rho'", ",", "'alpha'", "]", ")", "\n", "return", "[", "Namespace", "(", "ls", "=", "sdict", "[", "'rho'", "]", "[", "i", "]", ",", "alpha", "=", "sdict", "[", "'alpha'", "]", "[", "i", "]", ",", "\n", "sigma", "=", "self", ".", "modelp", ".", "kernp", ".", "sigma", ")", "for", "i", "in", "range", "(", "sdict", "[", "'rho'", "]", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", ":", "\n", "      ", "sdict", "=", "stanout", ".", "extract", "(", "[", "'rho'", ",", "'alpha'", ",", "'sigma'", "]", ")", "\n", "return", "[", "Namespace", "(", "ls", "=", "sdict", "[", "'rho'", "]", "[", "i", "]", ",", "alpha", "=", "sdict", "[", "'alpha'", "]", "[", "i", "]", ",", "\n", "sigma", "=", "sdict", "[", "'sigma'", "]", "[", "i", "]", ")", "for", "i", "in", "range", "(", "sdict", "[", "'rho'", "]", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'fixedparam'", ":", "\n", "      ", "return", "[", "Namespace", "(", "ls", "=", "self", ".", "modelp", ".", "kernp", ".", "ls", ",", "alpha", "=", "self", ".", "modelp", ".", "kernp", ".", "alpha", ",", "\n", "sigma", "=", "self", ".", "modelp", ".", "kernp", ".", "sigma", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.print_inference_result": [[117, 136], ["print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "print", "print", "print", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.array.mean", "numpy.array.std", "numpy.array.mean", "numpy.array.std", "numpy.array.mean", "numpy.array.std"], "methods", ["None"], ["", "", "def", "print_inference_result", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print results of stan inference \"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'fixedparam'", ":", "\n", "      ", "print", "(", "'*ls pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "ls", ")", "+", "'.'", ")", "\n", "print", "(", "'*alpha pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "alpha", ")", "+", "'.'", ")", "\n", "print", "(", "'*sigma pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "sigma", ")", "+", "'.'", ")", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampfixedsig'", ":", "\n", "      ", "ls_arr", "=", "np", ".", "array", "(", "[", "ns", ".", "ls", "for", "ns", "in", "self", ".", "sample_list", "]", ")", "\n", "alpha_arr", "=", "np", ".", "array", "(", "[", "ns", ".", "alpha", "for", "ns", "in", "self", ".", "sample_list", "]", ")", "\n", "sigma_arr", "=", "np", ".", "array", "(", "[", "ns", ".", "sigma", "for", "ns", "in", "self", ".", "sample_list", "]", ")", "\n", "print", "(", "'*ls mean = '", "+", "str", "(", "ls_arr", ".", "mean", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*ls std = '", "+", "str", "(", "ls_arr", ".", "std", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*alpha mean = '", "+", "str", "(", "alpha_arr", ".", "mean", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*alpha std = '", "+", "str", "(", "alpha_arr", ".", "std", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*sigma mean = '", "+", "str", "(", "sigma_arr", ".", "mean", "(", ")", ")", "+", "'.'", ")", "\n", "print", "(", "'*sigma std = '", "+", "str", "(", "sigma_arr", ".", "std", "(", ")", ")", "+", "'.'", ")", "\n", "", "print", "(", "'-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.sample_pp_post_pred": [[137, 163], ["range", "pp_gp_stan_distmat.StanGpDistmatPP.gp_post", "list", "int", "numpy.random.randint", "numpy.stack", "ppred_list.extend", "ppred_list.extend", "len", "list", "list", "numpy.stack", "bo.pp.gp.gp_utils.sample_mvn", "bo.pp.gp.gp_utils.sample_mvn", "numpy.random.normal", "postmu.reshape", "postcov.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.gp_post", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal"], ["", "def", "sample_pp_post_pred", "(", "self", ",", "nsamp", ",", "input_list", ",", "full_cov", "=", "False", ",", "nloop", "=", "None", ")", ":", "\n", "    ", "\"\"\" Sample from posterior predictive of PP.\n        Inputs:\n          input_list - list of np arrays size=(-1,)\n        Returns:\n          list (len input_list) of np arrays (size=(nsamp,1)).\"\"\"", "\n", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'fixedparam'", ":", "\n", "      ", "nloop", "=", "1", "\n", "sampids", "=", "[", "0", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampfixedsig'", ":", "\n", "      ", "if", "nloop", "is", "None", ":", "nloop", "=", "nsamp", "\n", "nsamp", "=", "int", "(", "nsamp", "/", "nloop", ")", "\n", "sampids", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "sample_list", ")", ",", "size", "=", "(", "nloop", ",", ")", ")", "\n", "", "ppred_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nloop", ")", ":", "\n", "      ", "samp", "=", "self", ".", "sample_list", "[", "sampids", "[", "i", "]", "]", "\n", "postmu", ",", "postcov", "=", "self", ".", "gp_post", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "y", ",", "\n", "np", ".", "stack", "(", "input_list", ")", ",", "samp", ".", "ls", ",", "samp", ".", "alpha", ",", "samp", ".", "sigma", ",", "full_cov", ")", "\n", "if", "full_cov", ":", "\n", "        ", "ppred_list", ".", "extend", "(", "list", "(", "sample_mvn", "(", "postmu", ",", "postcov", ",", "nsamp", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "ppred_list", ".", "extend", "(", "list", "(", "np", ".", "random", ".", "normal", "(", "postmu", ".", "reshape", "(", "-", "1", ",", ")", ",", "\n", "postcov", ".", "reshape", "(", "-", "1", ",", ")", ",", "size", "=", "(", "nsamp", ",", "len", "(", "input_list", ")", ")", ")", ")", ")", "\n", "", "", "return", "list", "(", "np", ".", "stack", "(", "ppred_list", ")", ".", "T", ")", ",", "ppred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.sample_pp_pred": [[164, 179], ["numpy.stack", "pp_gp_stan_distmat.StanGpDistmatPP.gp_post", "list", "bo.pp.gp.gp_utils.sample_mvn", "bo.pp.gp.gp_utils.sample_mvn", "list", "numpy.stack", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.gp_post", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn"], ["", "def", "sample_pp_pred", "(", "self", ",", "nsamp", ",", "input_list", ",", "lv", "=", "None", ")", ":", "\n", "    ", "\"\"\" Sample from predictive of PP for parameter lv.\n        Returns: list (len input_list) of np arrays (size (nsamp,1)).\"\"\"", "\n", "x_pred", "=", "np", ".", "stack", "(", "input_list", ")", "\n", "if", "lv", "is", "None", ":", "\n", "      ", "if", "self", ".", "modelp", ".", "model_str", "==", "'optfixedsig'", "or", "self", ".", "modelp", ".", "model_str", "==", "'opt'", "or", "self", ".", "modelp", ".", "model_str", "==", "'fixedparam'", ":", "\n", "        ", "lv", "=", "self", ".", "sample_list", "[", "0", "]", "\n", "", "elif", "self", ".", "modelp", ".", "model_str", "==", "'samp'", "or", "self", ".", "modelp", ".", "model_str", "==", "'sampfixedsig'", ":", "\n", "        ", "lv", "=", "self", ".", "sample_list", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "sample_list", ")", ")", "]", "\n", "", "", "postmu", ",", "postcov", "=", "self", ".", "gp_post", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "y", ",", "x_pred", ",", "lv", ".", "ls", ",", "\n", "lv", ".", "alpha", ",", "lv", ".", "sigma", ")", "\n", "pred_list", "=", "list", "(", "sample_mvn", "(", "postmu", ",", "postcov", ",", "1", ")", ")", "###TODO: sample from this mean nsamp times", "\n", "return", "list", "(", "np", ".", "stack", "(", "pred_list", ")", ".", "T", ")", ",", "pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.gp_post": [[180, 194], ["kernel", "bo.pp.gp.gp_utils.get_cholesky_decomp", "bo.pp.gp.gp_utils.get_cholesky_decomp", "bo.pp.gp.gp_utils.solve_upper_triangular", "bo.pp.gp.gp_utils.solve_upper_triangular", "kernel", "kernel.dot", "kernel", "bo.pp.gp.gp_utils.solve_lower_triangular", "bo.pp.gp.gp_utils.solve_lower_triangular", "bo.pp.gp.gp_utils.kern_distmat", "bo.pp.gp.gp_utils.kern_distmat", "bo.pp.gp.gp_utils.solve_lower_triangular", "bo.pp.gp.gp_utils.solve_lower_triangular", "bo.pp.gp.gp_utils.solve_lower_triangular.T.dot", "bo.pp.gp.gp_utils.solve_lower_triangular.T.dot", "numpy.sqrt", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_upper_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_upper_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_distmat", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_distmat", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular"], ["", "def", "gp_post", "(", "self", ",", "x_train", ",", "y_train", ",", "x_pred", ",", "ls", ",", "alpha", ",", "sigma", ",", "full_cov", "=", "True", ")", ":", "\n", "    ", "\"\"\" Compute parameters of GP posterior \"\"\"", "\n", "kernel", "=", "lambda", "a", ",", "b", ",", "c", ",", "d", ":", "kern_distmat", "(", "a", ",", "b", ",", "c", ",", "d", ",", "self", ".", "get_distmat", ")", "\n", "k11_nonoise", "=", "kernel", "(", "x_train", ",", "x_train", ",", "ls", ",", "alpha", ")", "\n", "lmat", "=", "get_cholesky_decomp", "(", "k11_nonoise", ",", "sigma", ",", "'try_first'", ")", "\n", "smat", "=", "solve_upper_triangular", "(", "lmat", ".", "T", ",", "solve_lower_triangular", "(", "lmat", ",", "y_train", ")", ")", "\n", "k21", "=", "kernel", "(", "x_pred", ",", "x_train", ",", "ls", ",", "alpha", ")", "\n", "mu2", "=", "k21", ".", "dot", "(", "smat", ")", "\n", "k22", "=", "kernel", "(", "x_pred", ",", "x_pred", ",", "ls", ",", "alpha", ")", "\n", "vmat", "=", "solve_lower_triangular", "(", "lmat", ",", "k21", ".", "T", ")", "\n", "k2", "=", "k22", "-", "vmat", ".", "T", ".", "dot", "(", "vmat", ")", "\n", "if", "full_cov", "is", "False", ":", "\n", "      ", "k2", "=", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "k2", ")", ")", "\n", "", "return", "mu2", ",", "k2", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_stan_distmat.StanGpDistmatPP.print_str": [[196, 200], ["print", "print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string \"\"\"", "\n", "print", "(", "'*StanGpDistmatPP with modelp='", "+", "str", "(", "self", ".", "modelp", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_core.DiscPP.__init__": [[10, 15], ["hasattr", "NotImplementedError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "\"\"\" Constructor \"\"\"", "\n", "self", ".", "sample_list", "=", "[", "]", "\n", "if", "not", "hasattr", "(", "self", ",", "'data'", ")", ":", "\n", "      ", "raise", "NotImplementedError", "(", "'Implement var data in a child class'", ")", "\n", "#if not hasattr(self,'ndimx'):", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_core.DiscPP.infer_post_and_update_samples": [[20, 24], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "infer_post_and_update_samples", "(", "self", ",", "nsamp", ")", ":", "\n", "    ", "\"\"\" Run an inference algorithm (given self.data), draw samples from the\n        posterior, and store in self.sample_list. \"\"\"", "\n", "raise", "NotImplementedError", "(", "'Implement method in a child class'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_core.DiscPP.sample_pp_post_pred": [[25, 29], ["NotImplementedError"], "methods", ["None"], ["", "def", "sample_pp_post_pred", "(", "self", ",", "nsamp", ",", "input_list", ")", ":", "\n", "    ", "\"\"\" Sample nsamp times from PP posterior predictive, for each x-input in\n    input_list \"\"\"", "\n", "raise", "NotImplementedError", "(", "'Implement method in a child class'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_core.DiscPP.sample_pp_pred": [[30, 35], ["NotImplementedError"], "methods", ["None"], ["", "def", "sample_pp_pred", "(", "self", ",", "nsamp", ",", "input_list", ",", "lv_list", "=", "None", ")", ":", "\n", "    ", "\"\"\" Sample nsamp times from PP predictive for parameter lv, for each\n    x-input in input_list. If lv is None, draw it uniformly at random\n    from self.sample_list. \"\"\"", "\n", "raise", "NotImplementedError", "(", "'Implement method in a child class'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_core.DiscPP.add_new_data": [[36, 39], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_new_data", "(", "self", ",", "newData", ")", ":", "\n", "    ", "\"\"\" Add data (newData) to self.data \"\"\"", "\n", "raise", "NotImplementedError", "(", "'Implement method in a child class'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_core.DiscPP.get_namespace_to_save": [[40, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_namespace_to_save", "(", "self", ")", ":", "\n", "    ", "\"\"\" Return namespace containing object info (to save to file) \"\"\"", "\n", "raise", "NotImplementedError", "(", "'Implement method in a child class'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_core.DiscPP.save_namespace_to_file": [[44, 52], ["pp_core.DiscPP.get_namespace_to_save", "open", "pickle.dump", "open.close", "print"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_core.DiscPP.get_namespace_to_save"], ["", "def", "save_namespace_to_file", "(", "self", ",", "fileStr", ",", "printFlag", ")", ":", "\n", "    ", "\"\"\" Saves results from get_namespace_to_save in fileStr \"\"\"", "\n", "ppNamespaceToSave", "=", "self", ".", "get_namespace_to_save", "(", ")", "\n", "ff", "=", "open", "(", "fileStr", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "ppNamespaceToSave", ",", "ff", ")", "\n", "ff", ".", "close", "(", ")", "\n", "if", "printFlag", ":", "\n", "      ", "print", "(", "'*Saved DiscPP Namespace in pickle file: '", "+", "fileStr", "+", "'\\n-----'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.__init__": [[22, 30], ["pp_gp_my_distmat.MyGpDistmatPP.set_model_params", "pp_gp_my_distmat.MyGpDistmatPP.set_data", "pp_gp_my_distmat.MyGpDistmatPP.set_model", "nas_lib.bo.pp.pp_core.DiscPP.__init__", "pp_gp_my_distmat.MyGpDistmatPP.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_data", "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ",", "modelp", "=", "None", ",", "printFlag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor \"\"\"", "\n", "self", ".", "set_model_params", "(", "modelp", ")", "\n", "self", ".", "set_data", "(", "data", ")", "\n", "self", ".", "set_model", "(", ")", "\n", "super", "(", "MyGpDistmatPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "printFlag", ":", "\n", "      ", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model_params": [[31, 36], ["None"], "methods", ["None"], ["", "", "def", "set_model_params", "(", "self", ",", "modelp", ")", ":", "\n", "    ", "\"\"\" Set self.modelp \"\"\"", "\n", "if", "modelp", "is", "None", ":", "\n", "      ", "pass", "#TODO", "\n", "", "self", ".", "modelp", "=", "modelp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_data": [[37, 43], ["copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "set_data", "(", "self", ",", "data", ")", ":", "\n", "    ", "\"\"\" Set self.data \"\"\"", "\n", "if", "data", "is", "None", ":", "\n", "      ", "pass", "#TODO", "\n", "", "self", ".", "data_init", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "self", ".", "data", "=", "copy", ".", "deepcopy", "(", "self", ".", "data_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.set_model": [[44, 47], ["pp_gp_my_distmat.MyGpDistmatPP.get_model"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model"], ["", "def", "set_model", "(", "self", ")", ":", "\n", "    ", "\"\"\" Set GP regression model \"\"\"", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.get_model": [[48, 51], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "    ", "\"\"\" Returns model object \"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.infer_post_and_update_samples": [[52, 58], ["argparse.Namespace", "pp_gp_my_distmat.MyGpDistmatPP.print_inference_result"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.print_inference_result"], ["", "def", "infer_post_and_update_samples", "(", "self", ",", "print_result", "=", "False", ")", ":", "\n", "    ", "\"\"\" Update self.sample_list \"\"\"", "\n", "self", ".", "sample_list", "=", "[", "Namespace", "(", "ls", "=", "self", ".", "modelp", ".", "kernp", ".", "ls", ",", "\n", "alpha", "=", "self", ".", "modelp", ".", "kernp", ".", "alpha", ",", "\n", "sigma", "=", "self", ".", "modelp", ".", "kernp", ".", "sigma", ")", "]", "\n", "if", "print_result", ":", "self", ".", "print_inference_result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.get_distmat": [[59, 77], ["pp_gp_my_distmat.MyGpDistmatPP.distmat", "ValueError"], "methods", ["None"], ["", "def", "get_distmat", "(", "self", ",", "xmat1", ",", "xmat2", ")", ":", "\n", "    ", "\"\"\" Get distance matrix \"\"\"", "\n", "#return squared_euc_distmat(xmat1, xmat2, .5)", "\n", "search_space", "=", "self", ".", "modelp", ".", "search_space", "\n", "if", "search_space", "==", "'nasbench_101'", ":", "\n", "      ", "from", "nas_lib", ".", "data", ".", "data_nasbench2", "import", "DataNasBenchNew", "as", "NB", "\n", "", "elif", "search_space", "==", "'nasbench_201'", ":", "\n", "      ", "from", "nas_lib", ".", "data", ".", "data_nasbench_201", "import", "NASBench201", "as", "NB", "\n", "", "elif", "search_space", "==", "'nasbench_nlp'", ":", "\n", "      ", "from", "nas_lib", ".", "data", ".", "data_nasbench_nlp", "import", "DataNasBenchNLP", "as", "NB", "\n", "", "elif", "search_space", "==", "'nasbench_asr'", ":", "\n", "      ", "from", "nas_lib", ".", "data", ".", "data_nasbench_ars_wo_none", "import", "DataNasBenchASR_WO_None", "as", "NB", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "''", ")", "\n", "", "self", ".", "distmat", "=", "NB", ".", "generate_distance_matrix", "\n", "#print('distmat')", "\n", "#print(self.distmat(xmat1, xmat2, self.modelp.distance))", "\n", "return", "self", ".", "distmat", "(", "xmat1", ",", "xmat2", ",", "self", ".", "modelp", ".", "distance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.print_inference_result": [[78, 84], ["print", "print", "print", "print", "str", "str", "str"], "methods", ["None"], ["", "def", "print_inference_result", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print results of stan inference \"\"\"", "\n", "print", "(", "'*ls pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "ls", ")", "+", "'.'", ")", "\n", "print", "(", "'*alpha pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "alpha", ")", "+", "'.'", ")", "\n", "print", "(", "'*sigma pt est = '", "+", "str", "(", "self", ".", "sample_list", "[", "0", "]", ".", "sigma", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.sample_pp_post_pred": [[85, 101], ["pp_gp_my_distmat.MyGpDistmatPP.gp_post", "list", "list", "list", "nas_lib.bo.pp.gp.gp_utils.sample_mvn", "numpy.random.normal", "postmu.reshape", "postcov.reshape", "numpy.stack", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.gp_post", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal"], ["", "def", "sample_pp_post_pred", "(", "self", ",", "nsamp", ",", "input_list", ",", "full_cov", "=", "False", ")", ":", "\n", "    ", "\"\"\" Sample from posterior predictive of PP.\n        Inputs:\n          input_list - list of np arrays size=(-1,)\n        Returns:\n          list (len input_list) of np arrays (size=(nsamp,1)).\"\"\"", "\n", "samp", "=", "self", ".", "sample_list", "[", "0", "]", "\n", "postmu", ",", "postcov", "=", "self", ".", "gp_post", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "y", ",", "input_list", ",", "\n", "samp", ".", "ls", ",", "samp", ".", "alpha", ",", "samp", ".", "sigma", ",", "full_cov", ")", "\n", "if", "full_cov", ":", "\n", "      ", "ppred_list", "=", "list", "(", "sample_mvn", "(", "postmu", ",", "postcov", ",", "nsamp", ")", ")", "\n", "", "else", ":", "\n", "      ", "ppred_list", "=", "list", "(", "np", ".", "random", ".", "normal", "(", "postmu", ".", "reshape", "(", "-", "1", ",", ")", ",", "\n", "postcov", ".", "reshape", "(", "-", "1", ",", ")", ",", "\n", "size", "=", "(", "nsamp", ",", "len", "(", "input_list", ")", ")", ")", ")", "\n", "", "return", "list", "(", "np", ".", "stack", "(", "ppred_list", ")", ".", "T", ")", ",", "ppred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.sample_pp_pred": [[102, 111], ["pp_gp_my_distmat.MyGpDistmatPP.gp_post", "list", "nas_lib.bo.pp.gp.gp_utils.sample_mvn", "list", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.gp_post", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn"], ["", "def", "sample_pp_pred", "(", "self", ",", "nsamp", ",", "input_list", ",", "lv", "=", "None", ")", ":", "\n", "    ", "\"\"\" Sample from predictive of PP for parameter lv.\n        Returns: list (len input_list) of np arrays (size (nsamp,1)).\"\"\"", "\n", "if", "lv", "is", "None", ":", "\n", "      ", "lv", "=", "self", ".", "sample_list", "[", "0", "]", "\n", "", "postmu", ",", "postcov", "=", "self", ".", "gp_post", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "y", ",", "input_list", ",", "lv", ".", "ls", ",", "\n", "lv", ".", "alpha", ",", "lv", ".", "sigma", ")", "\n", "pred_list", "=", "list", "(", "sample_mvn", "(", "postmu", ",", "postcov", ",", "1", ")", ")", "###TODO: sample from this mean nsamp times", "\n", "return", "list", "(", "np", ".", "stack", "(", "pred_list", ")", ".", "T", ")", ",", "pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.gp_post": [[112, 128], ["kernel", "nas_lib.bo.pp.gp.gp_utils.get_cholesky_decomp", "nas_lib.bo.pp.gp.gp_utils.solve_upper_triangular", "kernel", "kernel.dot", "kernel", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular", "nas_lib.bo.pp.gp.gp_utils.kern_distmat", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular", "nas_lib.bo.pp.gp.gp_utils.solve_lower_triangular.T.dot", "numpy.sqrt", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_upper_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_distmat", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular"], ["", "def", "gp_post", "(", "self", ",", "x_train_list", ",", "y_train_arr", ",", "x_pred_list", ",", "ls", ",", "alpha", ",", "sigma", ",", "\n", "full_cov", "=", "True", ")", ":", "\n", "    ", "\"\"\" Compute parameters of GP posterior \"\"\"", "\n", "kernel", "=", "lambda", "a", ",", "b", ",", "c", ",", "d", ":", "kern_distmat", "(", "a", ",", "b", ",", "c", ",", "d", ",", "self", ".", "get_distmat", ")", "\n", "k11_nonoise", "=", "kernel", "(", "x_train_list", ",", "x_train_list", ",", "ls", ",", "alpha", ")", "\n", "lmat", "=", "get_cholesky_decomp", "(", "k11_nonoise", ",", "sigma", ",", "'try_first'", ")", "\n", "smat", "=", "solve_upper_triangular", "(", "lmat", ".", "T", ",", "solve_lower_triangular", "(", "lmat", ",", "\n", "y_train_arr", ")", ")", "\n", "k21", "=", "kernel", "(", "x_pred_list", ",", "x_train_list", ",", "ls", ",", "alpha", ")", "\n", "mu2", "=", "k21", ".", "dot", "(", "smat", ")", "\n", "k22", "=", "kernel", "(", "x_pred_list", ",", "x_pred_list", ",", "ls", ",", "alpha", ")", "\n", "vmat", "=", "solve_lower_triangular", "(", "lmat", ",", "k21", ".", "T", ")", "\n", "k2", "=", "k22", "-", "vmat", ".", "T", ".", "dot", "(", "vmat", ")", "\n", "if", "full_cov", "is", "False", ":", "\n", "      ", "k2", "=", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "k2", ")", ")", "\n", "", "return", "mu2", ",", "k2", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pp.pp_gp_my_distmat.MyGpDistmatPP.print_str": [[130, 134], ["print", "print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string \"\"\"", "\n", "print", "(", "'*MyGpDistmatPP with modelp='", "+", "str", "(", "self", ".", "modelp", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_distmat.get_model": [[10, 27], ["time.time", "pystan.StanModel", "pickle.load", "time.time", "open", "pickle.dump", "print", "print", "open", "print", "gp_distmat.get_model_code", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model_code"], ["def", "get_model", "(", "recompile", "=", "False", ",", "print_status", "=", "True", ")", ":", "\n", "  ", "model_file_str", "=", "'bo/pp/stan/hide_model/gp_distmat.pkl'", "\n", "\n", "if", "recompile", ":", "\n", "    ", "starttime", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "pystan", ".", "StanModel", "(", "model_code", "=", "get_model_code", "(", ")", ")", "\n", "buildtime", "=", "time", ".", "time", "(", ")", "-", "starttime", "\n", "with", "open", "(", "model_file_str", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "model", ",", "f", ")", "\n", "", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Time taken to compile = '", "+", "str", "(", "buildtime", ")", "+", "' seconds.\\n-----'", ")", "\n", "print", "(", "'*Model saved in file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "else", ":", "\n", "    ", "model", "=", "pickle", ".", "load", "(", "open", "(", "model_file_str", ",", "'rb'", ")", ")", "\n", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Model loaded from file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_distmat.get_model_code": [[29, 60], ["None"], "function", ["None"], ["", "def", "get_model_code", "(", ")", ":", "\n", "  ", "\"\"\" Parse modelp and return stan model code \"\"\"", "\n", "return", "\"\"\"\n  data {\n    int<lower=1> N;\n    matrix[N, N] distmat;\n    vector[N] y;\n    real<lower=0> ig1;\n    real<lower=0> ig2;\n    real<lower=0> n1;\n    real<lower=0> n2;\n    real<lower=0> n3;\n    real<lower=0> n4;\n  }\n\n  parameters {\n    real<lower=0> rho;\n    real<lower=0> alpha;\n    real<lower=0.0001> sigma;\n  }\n\n  model {\n    matrix[N, N] cov = square(alpha) * exp(-distmat / square(rho))\n                       + diag_matrix(rep_vector(square(sigma), N));\n    matrix[N, N] L_cov = cholesky_decompose(cov);\n    rho ~ inv_gamma(ig1, ig2);\n    alpha ~ normal(n1, n2);\n    sigma ~ normal(n3, n4);\n    y ~ multi_normal_cholesky(rep_vector(0, N), L_cov);\n  }\n  \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier2_matern.get_model": [[10, 27], ["time.time", "pystan.StanModel", "pickle.load", "time.time", "open", "pickle.dump", "print", "print", "open", "print", "gp_hier2_matern.get_model_code", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model_code"], ["def", "get_model", "(", "recompile", "=", "False", ",", "print_status", "=", "True", ")", ":", "\n", "  ", "model_file_str", "=", "'bo/pp/stan/hide_model/gp_hier2_matern.pkl'", "\n", "\n", "if", "recompile", ":", "\n", "    ", "starttime", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "pystan", ".", "StanModel", "(", "model_code", "=", "get_model_code", "(", ")", ")", "\n", "buildtime", "=", "time", ".", "time", "(", ")", "-", "starttime", "\n", "with", "open", "(", "model_file_str", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "model", ",", "f", ")", "\n", "", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Time taken to compile = '", "+", "str", "(", "buildtime", ")", "+", "' seconds.\\n-----'", ")", "\n", "print", "(", "'*Model saved in file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "else", ":", "\n", "    ", "model", "=", "pickle", ".", "load", "(", "open", "(", "model_file_str", ",", "'rb'", ")", ")", "\n", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Model loaded from file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier2_matern.get_model_code": [[29, 137], ["None"], "function", ["None"], ["", "def", "get_model_code", "(", ")", ":", "\n", "  ", "\"\"\" Parse modelp and return stan model code \"\"\"", "\n", "return", "\"\"\"\n  functions {\n    matrix distance_matrix_single(int N, vector[] x) {\n      matrix[N, N] distmat;\n      for(i in 1:(N-1)) {\n        for(j in (i+1):N) {\n          distmat[i, j] = distance(x[i], x[j]);\n        }\n      }\n      return distmat;\n    }\n\n    matrix matern_covariance(int N, matrix dist, real ls, real alpha_sq, int COVFN) {\n      matrix[N,N] S;\n      real dist_ls; \n      real sqrt3;\n      real sqrt5;\n      sqrt3=sqrt(3.0);\n      sqrt5=sqrt(5.0);\n      \n      // exponential == Matern nu=1/2 , (p=0; nu=p+1/2)\n      if (COVFN==1) {\n        for(i in 1:(N-1)) {\n          for(j in (i+1):N) {\n            dist_ls = fabs(dist[i,j])/ls;\n            S[i,j] = alpha_sq * exp(- dist_ls ); \n          }\n        }\n      }\n\n      // Matern nu= 3/2 covariance\n      else if (COVFN==2) {\n        for(i in 1:(N-1)) {\n          for(j in (i+1):N) {\n           dist_ls = fabs(dist[i,j])/ls;\n           S[i,j] = alpha_sq * (1 + sqrt3 * dist_ls) * exp(-sqrt3 * dist_ls);\n          }\n        }\n      }\n      \n      // Matern nu=5/2 covariance\n      else if (COVFN==3) { \n        for(i in 1:(N-1)) {\n          for(j in (i+1):N) {\n            dist_ls = fabs(dist[i,j])/ls;\n            S[i,j] = alpha_sq * (1 + sqrt5 *dist_ls + 5* pow(dist_ls,2)/3) * exp(-sqrt5 *dist_ls);\n          }\n        }\n      }\n\n      // Matern as nu->Inf become Gaussian (aka squared exponential cov)\n      else if (COVFN==4) {\n        for(i in 1:(N-1)) {\n          for(j in (i+1):N) {\n            dist_ls = fabs(dist[i,j])/ls;\n            S[i,j] = alpha_sq * exp( -pow(dist_ls,2)/2 ) ;\n          }\n        }\n      } \n\n      // fill upper triangle\n      for(i in 1:(N-1)) {\n        for(j in (i+1):N) {\n          S[j,i] = S[i,j];\n        }\n      }\n\n      // create diagonal: nugget(nonspatial) + spatial variance +  eps ensures positive definiteness\n      for(i in 1:N) {\n        S[i,i] = alpha_sq;            \n      }\n\n      return S;\n    }\n  }\n\n  data {\n    int<lower=1> D;\n    int<lower=1> N;\n    vector[D] x[N];\n    vector[N] y;\n    real<lower=0> ig1;\n    real<lower=0> ig2;\n    real<lower=0> n1;\n    real<lower=0> n2;\n    real<lower=0> n3;\n    real<lower=0> n4;\n    int covid;\n  }\n\n  parameters {\n    real<lower=0> rho;\n    real<lower=0> alpha;\n    real<lower=0.0001> sigma;\n  }\n\n  model {\n    matrix[N, N] distmat = distance_matrix_single(N, x);\n    matrix[N, N] cov = matern_covariance(N, distmat, rho, square(alpha), covid);\n    matrix[N, N] L_cov = cholesky_decompose(cov);\n    rho ~ inv_gamma(ig1, ig2);\n    alpha ~ normal(n1, n2);\n    sigma ~ normal(n3, n4);\n    y ~ multi_normal_cholesky(rep_vector(0, N), L_cov);\n  }\n  \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_distmat_fixedsig.get_model": [[11, 28], ["time.time", "pystan.StanModel", "pickle.load", "time.time", "open", "pickle.dump", "print", "print", "open", "print", "gp_distmat_fixedsig.get_model_code", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model_code"], ["def", "get_model", "(", "recompile", "=", "False", ",", "print_status", "=", "True", ")", ":", "\n", "  ", "model_file_str", "=", "'bo/pp/stan/hide_model/gp_distmat_fixedsig.pkl'", "\n", "\n", "if", "recompile", ":", "\n", "    ", "starttime", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "pystan", ".", "StanModel", "(", "model_code", "=", "get_model_code", "(", ")", ")", "\n", "buildtime", "=", "time", ".", "time", "(", ")", "-", "starttime", "\n", "with", "open", "(", "model_file_str", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "model", ",", "f", ")", "\n", "", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Time taken to compile = '", "+", "str", "(", "buildtime", ")", "+", "' seconds.\\n-----'", ")", "\n", "print", "(", "'*Model saved in file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "else", ":", "\n", "    ", "model", "=", "pickle", ".", "load", "(", "open", "(", "model_file_str", ",", "'rb'", ")", ")", "\n", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Model loaded from file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_distmat_fixedsig.get_model_code": [[30, 58], ["None"], "function", ["None"], ["", "def", "get_model_code", "(", ")", ":", "\n", "  ", "\"\"\" Parse modelp and return stan model code \"\"\"", "\n", "return", "\"\"\"\n  data {\n    int<lower=1> N;\n    matrix[N, N] distmat;\n    vector[N] y;\n    real<lower=0> ig1;\n    real<lower=0> ig2;\n    real<lower=0> n1;\n    real<lower=0> n2;\n    real<lower=0> sigma;\n  }\n\n  parameters {\n    real<lower=0> rho;\n    real<lower=0> alpha;\n  }\n\n  model {\n    matrix[N, N] cov = square(alpha) * exp(-distmat / square(rho))\n                       + diag_matrix(rep_vector(square(sigma), N));\n    matrix[N, N] L_cov = cholesky_decompose(cov);\n    rho ~ inv_gamma(ig1, ig2);\n    alpha ~ normal(n1, n2);\n    y ~ multi_normal_cholesky(rep_vector(0, N), L_cov);\n  }\n  \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier2.get_model": [[10, 27], ["time.time", "pystan.StanModel", "pickle.load", "time.time", "open", "pickle.dump", "print", "print", "open", "print", "gp_hier2.get_model_code", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model_code"], ["def", "get_model", "(", "recompile", "=", "False", ",", "print_status", "=", "True", ")", ":", "\n", "  ", "model_file_str", "=", "'bo/pp/stan/hide_model/gp_hier2.pkl'", "\n", "\n", "if", "recompile", ":", "\n", "    ", "starttime", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "pystan", ".", "StanModel", "(", "model_code", "=", "get_model_code", "(", ")", ")", "\n", "buildtime", "=", "time", ".", "time", "(", ")", "-", "starttime", "\n", "with", "open", "(", "model_file_str", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "model", ",", "f", ")", "\n", "", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Time taken to compile = '", "+", "str", "(", "buildtime", ")", "+", "' seconds.\\n-----'", ")", "\n", "print", "(", "'*Model saved in file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "else", ":", "\n", "    ", "model", "=", "pickle", ".", "load", "(", "open", "(", "model_file_str", ",", "'rb'", ")", ")", "\n", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Model loaded from file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier2.get_model_code": [[29, 61], ["None"], "function", ["None"], ["", "def", "get_model_code", "(", ")", ":", "\n", "  ", "\"\"\" Parse modelp and return stan model code \"\"\"", "\n", "return", "\"\"\"\n  data {\n    int<lower=1> D;\n    int<lower=1> N;\n    vector[D] x[N];\n    vector[N] y;\n    real<lower=0> ig1;\n    real<lower=0> ig2;\n    real<lower=0> n1;\n    real<lower=0> n2;\n    real<lower=0> n3;\n    real<lower=0> n4;\n  }\n\n  parameters {\n    real<lower=0> rho;\n    real<lower=0> alpha;\n    real<lower=0.0001> sigma;\n  }\n\n  model {\n    matrix[N, N] cov =   cov_exp_quad(x, alpha, rho)\n                       + diag_matrix(rep_vector(square(sigma), N));\n    matrix[N, N] L_cov = cholesky_decompose(cov);\n    rho ~ inv_gamma(ig1, ig2);\n    alpha ~ normal(n1, n2);\n    sigma ~ normal(n3, n4);\n    y ~ multi_normal_cholesky(rep_vector(0, N), L_cov);\n  }\n  \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model": [[11, 28], ["time.time", "pystan.StanModel", "pickle.load", "time.time", "open", "pickle.dump", "print", "print", "open", "print", "gp_hier3.get_model_code", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model_code"], ["def", "get_model", "(", "recompile", "=", "False", ",", "print_status", "=", "True", ")", ":", "\n", "  ", "model_file_str", "=", "'bo/pp/stan/hide_model/gp_hier3.pkl'", "\n", "\n", "if", "recompile", ":", "\n", "    ", "starttime", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "pystan", ".", "StanModel", "(", "model_code", "=", "get_model_code", "(", ")", ")", "\n", "buildtime", "=", "time", ".", "time", "(", ")", "-", "starttime", "\n", "with", "open", "(", "model_file_str", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "model", ",", "f", ")", "\n", "", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Time taken to compile = '", "+", "str", "(", "buildtime", ")", "+", "' seconds.\\n-----'", ")", "\n", "print", "(", "'*Model saved in file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "else", ":", "\n", "    ", "model", "=", "pickle", ".", "load", "(", "open", "(", "model_file_str", ",", "'rb'", ")", ")", "\n", "if", "print_status", ":", "\n", "      ", "print", "(", "'*Model loaded from file '", "+", "model_file_str", "+", "'.\\n-----'", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.stan.gp_hier3.get_model_code": [[30, 59], ["None"], "function", ["None"], ["", "def", "get_model_code", "(", ")", ":", "\n", "  ", "\"\"\" Parse modelp and return stan model code \"\"\"", "\n", "return", "\"\"\"\n  data {\n    int<lower=1> D;\n    int<lower=1> N;\n    vector[D] x[N];\n    vector[N] y;\n    real<lower=0> u1;\n    real<lower=0> u2;\n    real<lower=0> n1;\n    real<lower=0> n2;\n    real<lower=0> sigma;\n  }\n\n  parameters {\n    real<lower=u1, upper=u2> rho;\n    real<lower=0> alpha;\n  }\n\n  model {\n    matrix[N, N] cov =   cov_exp_quad(x, alpha, rho)\n                       + diag_matrix(rep_vector(square(sigma), N));\n    matrix[N, N] L_cov = cholesky_decompose(cov);\n    rho ~ uniform(u1, u2);\n    alpha ~ normal(n1, n2);\n    y ~ multi_normal_cholesky(rep_vector(0, N), L_cov);\n  }\n  \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_gibbscontext": [[11, 25], ["ls_fn().flatten", "ls_fn().flatten", "numpy.add.outer", "numpy.outer", "numpy.multiply", "gp_utils.kern_exp_quad_noscale", "numpy.divide", "numpy.exp", "numpy.multiply", "gp_utils.ls_fn", "gp_utils.ls_fn", "scipy.spatial.distance.cdist"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_exp_quad_noscale", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.ls_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.ls_fn"], ["def", "kern_gibbscontext", "(", "xmatcon1", ",", "xmatcon2", ",", "xmatact1", ",", "xmatact2", ",", "theta", ",", "alpha", ",", "\n", "lscon", ",", "whichlsfn", "=", "1", ")", ":", "\n", "  ", "\"\"\" Gibbs kernel (ls_fn of context only) \"\"\"", "\n", "actdim", "=", "xmatact1", ".", "shape", "[", "1", "]", "\n", "lsarr1", "=", "ls_fn", "(", "xmatcon1", ",", "theta", ",", "whichlsfn", ")", ".", "flatten", "(", ")", "\n", "lsarr2", "=", "ls_fn", "(", "xmatcon2", ",", "theta", ",", "whichlsfn", ")", ".", "flatten", "(", ")", "\n", "sum_sq_ls", "=", "np", ".", "add", ".", "outer", "(", "lsarr1", ",", "lsarr2", ")", "\n", "inexp", "=", "-", "1.", "*", "np", ".", "divide", "(", "cdist", "(", "xmatact1", ",", "xmatact2", ",", "'sqeuclidean'", ")", ",", "sum_sq_ls", ")", "\n", "prod_ls", "=", "np", ".", "outer", "(", "lsarr1", ",", "lsarr2", ")", "\n", "#coef = np.power(np.divide(2*prod_ls, sum_sq_ls), actdim/2.) # Correct", "\n", "coef", "=", "1.", "\n", "kern_gibbscontext_only_ns", "=", "np", ".", "multiply", "(", "coef", ",", "np", ".", "exp", "(", "inexp", ")", ")", "\n", "kern_expquad_ns", "=", "kern_exp_quad_noscale", "(", "xmatcon1", ",", "xmatcon2", ",", "lscon", ")", "\n", "return", "alpha", "**", "2", "*", "np", ".", "multiply", "(", "kern_gibbscontext_only_ns", ",", "kern_expquad_ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_gibbs1d": [[26, 35], ["ls_fn().flatten", "ls_fn().flatten", "numpy.add.outer", "numpy.outer", "numpy.sqrt", "numpy.divide", "scipy.spatial.distance.cdist", "numpy.exp", "gp_utils.ls_fn", "gp_utils.ls_fn"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.ls_fn", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.ls_fn"], ["", "def", "kern_gibbs1d", "(", "xmat1", ",", "xmat2", ",", "theta", ",", "alpha", ")", ":", "\n", "  ", "\"\"\" Gibbs kernel in 1d \"\"\"", "\n", "lsarr1", "=", "ls_fn", "(", "xmat1", ",", "theta", ")", ".", "flatten", "(", ")", "\n", "lsarr2", "=", "ls_fn", "(", "xmat2", ",", "theta", ")", ".", "flatten", "(", ")", "\n", "sum_sq_ls", "=", "np", ".", "add", ".", "outer", "(", "lsarr1", ",", "lsarr2", ")", "\n", "prod_ls", "=", "np", ".", "outer", "(", "lsarr1", ",", "lsarr2", ")", "#TODO product of this for each dim", "\n", "coef", "=", "np", ".", "sqrt", "(", "np", ".", "divide", "(", "2", "*", "prod_ls", ",", "sum_sq_ls", ")", ")", "\n", "inexp", "=", "cdist", "(", "xmat1", ",", "xmat2", ",", "'sqeuclidean'", ")", "/", "sum_sq_ls", "#TODO sum of this for each dim", "\n", "return", "alpha", "**", "2", "*", "coef", "*", "np", ".", "exp", "(", "-", "1", "*", "inexp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.ls_fn": [[36, 55], ["numpy.array().reshape", "numpy.array", "numpy.log", "print", "numpy.exp", "numpy.log", "numpy.exp", "numpy.log", "numpy.matmul", "numpy.exp", "numpy.exp", "numpy.matmul", "numpy.exp", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.power", "numpy.matmul", "numpy.matmul", "numpy.power", "numpy.matmul", "numpy.abs"], "function", ["None"], ["", "def", "ls_fn", "(", "xmat", ",", "theta", ",", "whichlsfn", "=", "1", ")", ":", "\n", "  ", "theta", "=", "np", ".", "array", "(", "theta", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "if", "theta", ".", "shape", "[", "0", "]", "==", "2", ":", "\n", "    ", "if", "whichlsfn", "==", "1", "or", "whichlsfn", "==", "2", ":", "\n", "      ", "return", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "theta", "[", "0", "]", "[", "0", "]", "+", "np", ".", "matmul", "(", "xmat", ",", "theta", "[", "1", "]", ")", ")", ")", "# softplus transform", "\n", "", "elif", "whichlsfn", "==", "3", ":", "\n", "      ", "return", "np", ".", "exp", "(", "theta", "[", "0", "]", "[", "0", "]", "+", "np", ".", "matmul", "(", "xmat", ",", "theta", "[", "1", "]", ")", ")", "# exp transform", "\n", "", "", "elif", "theta", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "    ", "if", "whichlsfn", "==", "1", ":", "\n", "      ", "return", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "theta", "[", "0", "]", "[", "0", "]", "+", "np", ".", "matmul", "(", "xmat", ",", "theta", "[", "1", "]", ")", "+", "\n", "np", ".", "matmul", "(", "np", ".", "power", "(", "xmat", ",", "2", ")", ",", "theta", "[", "2", "]", ")", ")", ")", "# softplus transform", "\n", "", "elif", "whichlsfn", "==", "2", ":", "\n", "      ", "return", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "theta", "[", "0", "]", "[", "0", "]", "+", "np", ".", "matmul", "(", "xmat", ",", "theta", "[", "1", "]", ")", "+", "\n", "np", ".", "matmul", "(", "np", ".", "abs", "(", "xmat", ")", ",", "theta", "[", "2", "]", ")", ")", ")", "# softplus on abs transform", "\n", "", "elif", "whichlsfn", "==", "3", ":", "\n", "      ", "return", "np", ".", "exp", "(", "theta", "[", "0", "]", "[", "0", "]", "+", "np", ".", "matmul", "(", "xmat", ",", "theta", "[", "1", "]", ")", "+", "\n", "np", ".", "matmul", "(", "np", ".", "power", "(", "xmat", ",", "2", ")", ",", "theta", "[", "2", "]", ")", ")", "# exp transform", "\n", "", "", "else", ":", "\n", "    ", "print", "(", "'ERROR: theta parameter is incorrect.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_matern32": [[56, 61], ["gpy.kern.Matern32", "gpy.kern.Matern32.K"], "function", ["None"], ["", "", "def", "kern_matern32", "(", "xmat1", ",", "xmat2", ",", "ls", ",", "alpha", ")", ":", "\n", "  ", "\"\"\" Matern 3/2 kernel, currently using GPy \"\"\"", "\n", "kern", "=", "gpy", ".", "kern", ".", "Matern32", "(", "input_dim", "=", "xmat1", ".", "shape", "[", "1", "]", ",", "variance", "=", "alpha", "**", "2", ",", "\n", "lengthscale", "=", "ls", ")", "\n", "return", "kern", ".", "K", "(", "xmat1", ",", "xmat2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_exp_quad": [[62, 66], ["gp_utils.kern_exp_quad_noscale"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_exp_quad_noscale"], ["", "def", "kern_exp_quad", "(", "xmat1", ",", "xmat2", ",", "ls", ",", "alpha", ")", ":", "\n", "  ", "\"\"\" Exponentiated quadratic kernel function aka squared exponential kernel\n      aka RBF kernel \"\"\"", "\n", "return", "alpha", "**", "2", "*", "kern_exp_quad_noscale", "(", "xmat1", ",", "xmat2", ",", "ls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_exp_quad_noscale": [[67, 72], ["numpy.exp", "scipy.spatial.distance.cdist"], "function", ["None"], ["", "def", "kern_exp_quad_noscale", "(", "xmat1", ",", "xmat2", ",", "ls", ")", ":", "\n", "  ", "\"\"\" Exponentiated quadratic kernel function aka squared exponential kernel\n      aka RBF kernel, without scale parameter. \"\"\"", "\n", "sq_norm", "=", "(", "-", "1", "/", "(", "2", "*", "ls", "**", "2", ")", ")", "*", "cdist", "(", "xmat1", ",", "xmat2", ",", "'sqeuclidean'", ")", "\n", "return", "np", ".", "exp", "(", "sq_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.squared_euc_distmat": [[73, 77], ["scipy.spatial.distance.cdist"], "function", ["None"], ["", "def", "squared_euc_distmat", "(", "xmat1", ",", "xmat2", ",", "coef", "=", "1.", ")", ":", "\n", "  ", "\"\"\" Distance matrix of squared euclidean distance (multiplied by coef)\n      between points in xmat1 and xmat2. \"\"\"", "\n", "return", "coef", "*", "cdist", "(", "xmat1", ",", "xmat2", ",", "'sqeuclidean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.kern_distmat": [[78, 84], ["distfn", "numpy.exp"], "function", ["None"], ["", "def", "kern_distmat", "(", "xmat1", ",", "xmat2", ",", "ls", ",", "alpha", ",", "distfn", ")", ":", "\n", "  ", "\"\"\" Kernel for a given distmat, via passed-in distfn (which is assumed to be\n      fn of xmat1 and xmat2 only) \"\"\"", "\n", "distmat", "=", "distfn", "(", "xmat1", ",", "xmat2", ")", "\n", "sq_norm", "=", "-", "distmat", "/", "ls", "**", "2", "\n", "return", "alpha", "**", "2", "*", "np", ".", "exp", "(", "sq_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp": [[85, 99], ["gp_utils.stable_cholesky", "gp_utils.project_symmetric_to_psd_cone", "gp_utils.get_cholesky_decomp", "numpy.eye", "gp_utils.get_cholesky_decomp", "gp_utils.stable_cholesky", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.stable_cholesky", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.project_symmetric_to_psd_cone", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.get_cholesky_decomp", "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.stable_cholesky"], ["", "def", "get_cholesky_decomp", "(", "k11_nonoise", ",", "sigma", ",", "psd_str", ")", ":", "\n", "  ", "\"\"\" Returns cholesky decomposition \"\"\"", "\n", "if", "psd_str", "==", "'try_first'", ":", "\n", "    ", "k11", "=", "k11_nonoise", "+", "sigma", "**", "2", "*", "np", ".", "eye", "(", "k11_nonoise", ".", "shape", "[", "0", "]", ")", "\n", "try", ":", "\n", "      ", "return", "stable_cholesky", "(", "k11", ",", "False", ")", "\n", "", "except", "np", ".", "linalg", ".", "linalg", ".", "LinAlgError", ":", "\n", "      ", "return", "get_cholesky_decomp", "(", "k11_nonoise", ",", "sigma", ",", "'project_first'", ")", "\n", "", "", "elif", "psd_str", "==", "'project_first'", ":", "\n", "    ", "k11_nonoise", "=", "project_symmetric_to_psd_cone", "(", "k11_nonoise", ")", "\n", "return", "get_cholesky_decomp", "(", "k11_nonoise", ",", "sigma", ",", "'is_psd'", ")", "\n", "", "elif", "psd_str", "==", "'is_psd'", ":", "\n", "    ", "k11", "=", "k11_nonoise", "+", "sigma", "**", "2", "*", "np", ".", "eye", "(", "k11_nonoise", ".", "shape", "[", "0", "]", ")", "\n", "return", "stable_cholesky", "(", "k11", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.stable_cholesky": [[100, 125], ["numpy.linalg.cholesky", "numpy.diag().max", "numpy.diag().max", "numpy.diag", "numpy.linalg.cholesky", "print", "numpy.diag", "print", "numpy.eye"], "function", ["None"], ["", "", "def", "stable_cholesky", "(", "mmat", ",", "make_psd", "=", "True", ")", ":", "\n", "  ", "\"\"\" Returns a 'stable' cholesky decomposition of mmat \"\"\"", "\n", "if", "mmat", ".", "size", "==", "0", ":", "\n", "    ", "return", "mmat", "\n", "", "try", ":", "\n", "    ", "lmat", "=", "np", ".", "linalg", ".", "cholesky", "(", "mmat", ")", "\n", "", "except", "np", ".", "linalg", ".", "linalg", ".", "LinAlgError", "as", "e", ":", "\n", "    ", "if", "not", "make_psd", ":", "\n", "      ", "raise", "e", "\n", "", "diag_noise_power", "=", "-", "11", "\n", "max_mmat", "=", "np", ".", "diag", "(", "mmat", ")", ".", "max", "(", ")", "\n", "diag_noise", "=", "np", ".", "diag", "(", "mmat", ")", ".", "max", "(", ")", "*", "1e-11", "\n", "break_loop", "=", "False", "\n", "while", "not", "break_loop", ":", "\n", "      ", "try", ":", "\n", "        ", "lmat", "=", "np", ".", "linalg", ".", "cholesky", "(", "mmat", "+", "(", "(", "10", "**", "diag_noise_power", ")", "*", "max_mmat", ")", "*", "\n", "np", ".", "eye", "(", "mmat", ".", "shape", "[", "0", "]", ")", ")", "\n", "break_loop", "=", "True", "\n", "", "except", "np", ".", "linalg", ".", "linalg", ".", "LinAlgError", ":", "\n", "        ", "if", "diag_noise_power", ">", "-", "9", ":", "\n", "          ", "print", "(", "'stable_cholesky failed with diag_noise_power=%d.'", "%", "(", "diag_noise_power", ")", ")", "\n", "", "diag_noise_power", "+=", "1", "\n", "", "if", "diag_noise_power", ">=", "5", ":", "\n", "        ", "print", "(", "'***** stable_cholesky failed: added diag noise = %e'", "%", "(", "diag_noise", ")", ")", "\n", "", "", "", "return", "lmat", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.project_symmetric_to_psd_cone": [[126, 140], ["numpy.clip", "numpy.linalg.eig", "numpy.linalg.eigh", "print", "numpy.linalg.eig", "numpy.real", "numpy.real"], "function", ["None"], ["", "def", "project_symmetric_to_psd_cone", "(", "mmat", ",", "is_symmetric", "=", "True", ",", "epsilon", "=", "0", ")", ":", "\n", "  ", "\"\"\" Project symmetric matrix mmat to the PSD cone \"\"\"", "\n", "if", "is_symmetric", ":", "\n", "    ", "try", ":", "\n", "      ", "eigvals", ",", "eigvecs", "=", "np", ".", "linalg", ".", "eigh", "(", "mmat", ")", "\n", "", "except", "np", ".", "linalg", ".", "LinAlgError", ":", "\n", "      ", "print", "(", "'LinAlgError encountered with np.eigh. Defaulting to eig.'", ")", "\n", "eigvals", ",", "eigvecs", "=", "np", ".", "linalg", ".", "eig", "(", "mmat", ")", "\n", "eigvals", "=", "np", ".", "real", "(", "eigvals", ")", "\n", "eigvecs", "=", "np", ".", "real", "(", "eigvecs", ")", "\n", "", "", "else", ":", "\n", "    ", "eigvals", ",", "eigvecs", "=", "np", ".", "linalg", ".", "eig", "(", "mmat", ")", "\n", "", "clipped_eigvals", "=", "np", ".", "clip", "(", "eigvals", ",", "epsilon", ",", "np", ".", "inf", ")", "\n", "return", "(", "eigvecs", "*", "clipped_eigvals", ")", ".", "dot", "(", "eigvecs", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_lower_triangular": [[141, 144], ["gp_utils.solve_triangular_base"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_triangular_base"], ["", "def", "solve_lower_triangular", "(", "amat", ",", "b", ")", ":", "\n", "  ", "\"\"\" Solves amat*x=b when amat is lower triangular \"\"\"", "\n", "return", "solve_triangular_base", "(", "amat", ",", "b", ",", "lower", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_upper_triangular": [[145, 148], ["gp_utils.solve_triangular_base"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_triangular_base"], ["", "def", "solve_upper_triangular", "(", "amat", ",", "b", ")", ":", "\n", "  ", "\"\"\" Solves amat*x=b when amat is upper triangular \"\"\"", "\n", "return", "solve_triangular_base", "(", "amat", ",", "b", ",", "lower", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.solve_triangular_base": [[149, 155], ["numpy.zeros", "scipy.linalg.solve_triangular"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "solve_triangular_base", "(", "amat", ",", "b", ",", "lower", ")", ":", "\n", "  ", "\"\"\" Solves amat*x=b when amat is a triangular matrix. \"\"\"", "\n", "if", "amat", ".", "size", "==", "0", "and", "b", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "    ", "return", "np", ".", "zeros", "(", "(", "b", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "    ", "return", "solve_triangular", "(", "amat", ",", "b", ",", "lower", "=", "lower", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.sample_mvn": [[156, 164], ["mu.reshape.reshape", "len", "gp_utils.stable_cholesky", "numpy.random.normal", "stable_cholesky.dot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.gp.gp_utils.stable_cholesky", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal"], ["", "", "def", "sample_mvn", "(", "mu", ",", "covmat", ",", "nsamp", ")", ":", "\n", "  ", "\"\"\" Sample from multivariate normal distribution with mean mu and covariance\n      matrix covmat \"\"\"", "\n", "mu", "=", "mu", ".", "reshape", "(", "-", "1", ",", ")", "\n", "ndim", "=", "len", "(", "mu", ")", "\n", "lmat", "=", "stable_cholesky", "(", "covmat", ")", "\n", "umat", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "ndim", ",", "nsamp", ")", ")", "\n", "return", "lmat", ".", "dot", "(", "umat", ")", ".", "T", "+", "mu", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.__init__": [[12, 22], ["list.ListDomain.set_domain_params", "list.ListDomain.init_domain_list", "list.ListDomain.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.dom.real.RealDomain.set_domain_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.init_domain_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "search_space", ",", "domp", "=", "None", ",", "printFlag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor\n        Parameters:\n          domp - domain parameters Namespace\n    \"\"\"", "\n", "self", ".", "set_domain_params", "(", "domp", ")", "\n", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "init_domain_list", "(", ")", "\n", "if", "printFlag", ":", "\n", "      ", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.set_domain_params": [[23, 26], ["None"], "methods", ["None"], ["", "", "def", "set_domain_params", "(", "self", ",", "domp", ")", ":", "\n", "    ", "\"\"\" Set self.domp Namespace \"\"\"", "\n", "self", ".", "domp", "=", "domp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.init_domain_list": [[27, 33], ["list.ListDomain.set_domain_list_auto"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.set_domain_list_auto"], ["", "def", "init_domain_list", "(", "self", ")", ":", "\n", "    ", "\"\"\" Initialize self.domain_list. \"\"\"", "\n", "if", "self", ".", "domp", ".", "set_domain_list_auto", ":", "\n", "      ", "self", ".", "set_domain_list_auto", "(", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "domain_list", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.set_domain_list_auto": [[34, 36], ["list.ListDomain.search_space.get_arch_list"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_arch_list"], ["", "", "def", "set_domain_list_auto", "(", "self", ")", ":", "\n", "    ", "self", ".", "domain_list", "=", "self", ".", "search_space", ".", "get_arch_list", "(", "self", ".", "domp", ".", "aux_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.set_domain_list": [[37, 40], ["None"], "methods", ["None"], ["", "def", "set_domain_list", "(", "self", ",", "domain_list", ")", ":", "\n", "    ", "\"\"\" Set self.domain_list, containing elements of domain \"\"\"", "\n", "self", ".", "domain_list", "=", "domain_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.is_in_domain": [[41, 44], ["None"], "methods", ["None"], ["", "def", "is_in_domain", "(", "self", ",", "pt", ")", ":", "\n", "    ", "\"\"\" Check if pt is in domain, and return True or False \"\"\"", "\n", "return", "pt", "in", "self", ".", "domain_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.unif_rand_sample": [[45, 53], ["numpy.random.randint", "numpy.arange", "len", "min", "len"], "methods", ["None"], ["", "def", "unif_rand_sample", "(", "self", ",", "n", "=", "1", ",", "replace", "=", "True", ")", ":", "\n", "    ", "\"\"\" Draws a sample uniformly at random from domain, returns as a list of\n        len n, with (default) or without replacement. \"\"\"", "\n", "if", "replace", ":", "\n", "      ", "randind", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "domain_list", ")", ",", "size", "=", "n", ")", "\n", "", "else", ":", "\n", "      ", "randind", "=", "np", ".", "arange", "(", "min", "(", "n", ",", "len", "(", "self", ".", "domain_list", ")", ")", ")", "\n", "", "return", "[", "self", ".", "domain_list", "[", "i", "]", "for", "i", "in", "randind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.list.ListDomain.print_str": [[54, 58], ["print", "print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string \"\"\"", "\n", "print", "(", "'*ListDomain with domp = '", "+", "str", "(", "self", ".", "domp", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.real.RealDomain.__init__": [[11, 20], ["real.RealDomain.set_domain_params", "real.RealDomain.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.dom.real.RealDomain.set_domain_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "domp", "=", "None", ",", "printFlag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor\n        Parameters:\n          domp - domain parameters Namespace\n    \"\"\"", "\n", "self", ".", "set_domain_params", "(", "domp", ")", "\n", "self", ".", "ndimx", "=", "self", ".", "domp", ".", "ndimx", "\n", "if", "printFlag", ":", "\n", "      ", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.real.RealDomain.set_domain_params": [[21, 28], ["argparse.Namespace"], "methods", ["None"], ["", "", "def", "set_domain_params", "(", "self", ",", "domp", ")", ":", "\n", "    ", "\"\"\" Set self.domp Namespace \"\"\"", "\n", "if", "domp", "is", "None", ":", "\n", "      ", "domp", "=", "Namespace", "(", ")", "\n", "domp", ".", "ndimx", "=", "1", "\n", "domp", ".", "min_max", "=", "[", "(", "0", ",", "1", ")", "]", "*", "domp", ".", "ndimx", "\n", "", "self", ".", "domp", "=", "domp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.real.RealDomain.is_in_domain": [[29, 39], ["numpy.array().reshape", "numpy.array", "range"], "methods", ["None"], ["", "def", "is_in_domain", "(", "self", ",", "pt", ")", ":", "\n", "    ", "\"\"\" Check if pt is in domain, and return True or False \"\"\"", "\n", "pt", "=", "np", ".", "array", "(", "pt", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "pt", ".", "shape", "[", "0", "]", "!=", "self", ".", "ndimx", ":", "\n", "      ", "ret", "=", "False", "\n", "", "else", ":", "\n", "      ", "bool_list", "=", "[", "pt", "[", "i", "]", ">=", "self", ".", "domp", ".", "min_max", "[", "i", "]", "[", "0", "]", "and", "\n", "pt", "[", "i", "]", "<=", "self", ".", "domp", ".", "min_max", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "self", ".", "ndimx", ")", "]", "\n", "ret", "=", "False", "if", "False", "in", "bool_list", "else", "True", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.real.RealDomain.unif_rand_sample": [[40, 44], ["numpy.random.uniform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.uniform"], ["", "def", "unif_rand_sample", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "    ", "\"\"\" Draws a sample uniformly at random from domain \"\"\"", "\n", "li", "=", "[", "np", ".", "random", ".", "uniform", "(", "mm", "[", "0", "]", ",", "mm", "[", "1", "]", ",", "n", ")", "for", "mm", "in", "self", ".", "domp", ".", "min_max", "]", "\n", "return", "np", ".", "array", "(", "li", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.dom.real.RealDomain.print_str": [[45, 49], ["print", "print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string \"\"\"", "\n", "print", "(", "'*RealDomain with domp = '", "+", "str", "(", "self", ".", "domp", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.BasicFH.__init__": [[29, 39], ["functionhandler.BasicFH.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "fn", ",", "data", "=", "None", ",", "fhp", "=", "None", ",", "print_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor.\n        Inputs:\n          pmp - Namespace of probmap params\n          print_flag - True or False\n    \"\"\"", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "fhp", "=", "fhp", "\n", "if", "print_flag", ":", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.BasicFH.call_fn_and_add_data": [[40, 45], ["functionhandler.BasicFH.fn", "print", "functionhandler.BasicFH.add_data_single"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data_single"], ["", "def", "call_fn_and_add_data", "(", "self", ",", "xin", ")", ":", "\n", "    ", "\"\"\" Call self.fn(xin), and update self.data \"\"\"", "\n", "yout", "=", "self", ".", "fn", "(", "xin", ")", "\n", "print", "(", "'new datapoint score'", ",", "yout", ")", "\n", "self", ".", "add_data_single", "(", "xin", ",", "yout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.BasicFH.add_data_single": [[46, 55], ["numpy.array().reshape", "numpy.array().reshape", "argparse.Namespace", "functionhandler.BasicFH.add_data", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data"], ["", "def", "add_data_single", "(", "self", ",", "xin", ",", "yout", ")", ":", "\n", "    ", "\"\"\" Update self.data with a single xin yout pair.\n        Inputs:\n          xin: np.array size=(1, -1)\n          yout: np.array size=(1, 1) \"\"\"", "\n", "xin", "=", "np", ".", "array", "(", "xin", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "yout", "=", "np", ".", "array", "(", "yout", ")", ".", "reshape", "(", "1", ",", "1", ")", "\n", "newdata", "=", "Namespace", "(", "X", "=", "xin", ",", "y", "=", "yout", ")", "\n", "self", ".", "add_data", "(", "newdata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.BasicFH.add_data": [[56, 65], ["numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "newdata", ")", ":", "\n", "    ", "\"\"\" Update self.data with newdata Namespace.\n        Inputs:\n          newdata: Namespace with fields X and y \"\"\"", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "      ", "self", ".", "data", "=", "newdata", "\n", "", "else", ":", "\n", "      ", "self", ".", "data", ".", "X", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ".", "X", ",", "newdata", ".", "X", ")", ",", "0", ")", "\n", "self", ".", "data", ".", "y", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ".", "y", ",", "newdata", ".", "y", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.BasicFH.print_str": [[66, 70], ["print", "str"], "methods", ["None"], ["", "", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string. \"\"\"", "\n", "print", "(", "'*BasicFH with fhp='", "+", "str", "(", "self", ".", "fhp", ")", "\n", "+", "'.\\n-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ExtraInfoFH.__init__": [[76, 85], ["functionhandler.BasicFH.__init__", "functionhandler.ExtraInfoFH.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "fn", ",", "data", "=", "None", ",", "fhp", "=", "None", ",", "print_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor.\n        Inputs:\n          pmp - Namespace of probmap params\n          print_flag - True or False\n    \"\"\"", "\n", "super", "(", "ExtraInfoFH", ",", "self", ")", ".", "__init__", "(", "fn", ",", "data", ",", "fhp", ",", "False", ")", "\n", "self", ".", "extrainfo", "=", "[", "]", "\n", "if", "print_flag", ":", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ExtraInfoFH.call_fn_and_add_data": [[86, 91], ["functionhandler.ExtraInfoFH.fn", "functionhandler.ExtraInfoFH.add_data_single", "functionhandler.ExtraInfoFH.extrainfo.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data_single"], ["", "def", "call_fn_and_add_data", "(", "self", ",", "xin", ")", ":", "\n", "    ", "\"\"\" Call self.fn(xin), and update self.data \"\"\"", "\n", "yout", ",", "exinf", "=", "self", ".", "fn", "(", "xin", ")", "\n", "self", ".", "add_data_single", "(", "xin", ",", "yout", ")", "\n", "self", ".", "extrainfo", ".", "append", "(", "exinf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ExtraInfoFH.print_str": [[92, 96], ["print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string. \"\"\"", "\n", "print", "(", "'*ExtraInfoFH with fhp='", "+", "str", "(", "self", ".", "fhp", ")", "\n", "+", "'.\\n-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.__init__": [[102, 111], ["functionhandler.BasicFH.__init__", "functionhandler.NanNNFH.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "fn", ",", "data", "=", "None", ",", "fhp", "=", "None", ",", "print_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor.\n        Inputs:\n          pmp - Namespace of probmap params\n          print_flag - True or False\n    \"\"\"", "\n", "super", "(", "NanNNFH", ",", "self", ")", ".", "__init__", "(", "fn", ",", "data", ",", "fhp", ",", "False", ")", "\n", "self", ".", "extrainfo", "=", "[", "]", "\n", "if", "print_flag", ":", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.call_fn_and_add_data": [[112, 123], ["functionhandler.NanNNFH.fn", "argparse.Namespace", "functionhandler.NanNNFH.extrainfo.append", "functionhandler.NanNNFH.add_data_single_nan", "functionhandler.NanNNFH.add_data_single", "functionhandler.NanNNFH.possibly_init_xnan"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.add_data_single_nan", "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data_single", "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.possibly_init_xnan"], ["", "def", "call_fn_and_add_data", "(", "self", ",", "xin", ")", ":", "\n", "    ", "\"\"\" Call self.fn(xin), and update self.data \"\"\"", "\n", "timethresh", "=", "60.", "\n", "yout", ",", "walltime", "=", "self", ".", "fn", "(", "xin", ")", "\n", "if", "walltime", ">", "timethresh", ":", "\n", "      ", "self", ".", "add_data_single_nan", "(", "xin", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "add_data_single", "(", "xin", ",", "yout", ")", "\n", "self", ".", "possibly_init_xnan", "(", ")", "\n", "", "exinf", "=", "Namespace", "(", "xin", "=", "xin", ",", "yout", "=", "yout", ",", "walltime", "=", "walltime", ")", "\n", "self", ".", "extrainfo", ".", "append", "(", "exinf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.add_data_single_nan": [[124, 133], ["xin.reshape.reshape.reshape", "argparse.Namespace", "functionhandler.NanNNFH.add_data_nan", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.add_data_nan", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones"], ["", "def", "add_data_single_nan", "(", "self", ",", "xin", ")", ":", "\n", "    ", "\"\"\" Update self.data.X_nan with a single xin.\n        Inputs:\n          xin: np.array size=(1, -1) \"\"\"", "\n", "xin", "=", "xin", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "newdata", "=", "Namespace", "(", "X", "=", "np", ".", "ones", "(", "(", "0", ",", "xin", ".", "shape", "[", "1", "]", ")", ")", ",", "\n", "y", "=", "np", ".", "ones", "(", "(", "0", ",", "1", ")", ")", ",", "\n", "X_nan", "=", "xin", ")", "\n", "self", ".", "add_data_nan", "(", "newdata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.add_data_nan": [[134, 142], ["numpy.concatenate"], "methods", ["None"], ["", "def", "add_data_nan", "(", "self", ",", "newdata", ")", ":", "\n", "    ", "\"\"\" Update self.data with newdata Namespace.\n        Inputs:\n          newdata: Namespace with fields X, y, X_nan \"\"\"", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "      ", "self", ".", "data", "=", "newdata", "\n", "", "else", ":", "\n", "      ", "self", ".", "data", ".", "X_nan", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ".", "X_nan", ",", "newdata", ".", "X_nan", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.possibly_init_xnan": [[143, 147], ["hasattr", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones"], ["", "", "def", "possibly_init_xnan", "(", "self", ")", ":", "\n", "    ", "\"\"\" If self.data doesn't have X_nan, then create it. \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ".", "data", ",", "'X_nan'", ")", ":", "\n", "      ", "self", ".", "data", ".", "X_nan", "=", "np", ".", "ones", "(", "(", "0", ",", "self", ".", "data", ".", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.NanNNFH.print_str": [[148, 152], ["print", "str"], "methods", ["None"], ["", "", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string. \"\"\"", "\n", "print", "(", "'*NanNNFH with fhp='", "+", "str", "(", "self", ".", "fhp", ")", "\n", "+", "'.\\n-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ReplaceNanNNFH.__init__": [[159, 168], ["functionhandler.BasicFH.__init__", "functionhandler.ReplaceNanNNFH.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "fn", ",", "data", "=", "None", ",", "fhp", "=", "None", ",", "print_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor.\n        Inputs:\n          pmp - Namespace of probmap params\n          print_flag - True or False\n    \"\"\"", "\n", "super", "(", "ReplaceNanNNFH", ",", "self", ")", ".", "__init__", "(", "fn", ",", "data", ",", "fhp", ",", "False", ")", "\n", "self", ".", "extrainfo", "=", "[", "]", "\n", "if", "print_flag", ":", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ReplaceNanNNFH.call_fn_and_add_data": [[169, 179], ["functionhandler.ReplaceNanNNFH.fn", "functionhandler.ReplaceNanNNFH.add_data_single", "argparse.Namespace", "functionhandler.ReplaceNanNNFH.extrainfo.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data_single"], ["", "def", "call_fn_and_add_data", "(", "self", ",", "xin", ")", ":", "\n", "    ", "\"\"\" Call self.fn(xin), and update self.data \"\"\"", "\n", "timethresh", "=", "60.", "\n", "replace_nan_val", "=", "5.", "\n", "yout", ",", "walltime", "=", "self", ".", "fn", "(", "xin", ")", "\n", "if", "walltime", ">", "timethresh", ":", "\n", "      ", "yout", "=", "replace_nan_val", "\n", "", "self", ".", "add_data_single", "(", "xin", ",", "yout", ")", "\n", "exinf", "=", "Namespace", "(", "xin", "=", "xin", ",", "yout", "=", "yout", ",", "walltime", "=", "walltime", ")", "\n", "self", ".", "extrainfo", ".", "append", "(", "exinf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ReplaceNanNNFH.print_str": [[180, 184], ["print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string. \"\"\"", "\n", "print", "(", "'*ReplaceNanNNFH with fhp='", "+", "str", "(", "self", ".", "fhp", ")", "\n", "+", "'.\\n-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.__init__": [[190, 200], ["functionhandler.ObjectFH.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "fn", ",", "data", "=", "None", ",", "fhp", "=", "None", ",", "print_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor.\n        Inputs:\n          pmp - Namespace of probmap params\n          print_flag - True or False\n    \"\"\"", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "fhp", "=", "fhp", "\n", "if", "print_flag", ":", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.call_fn_and_add_data": [[201, 205], ["functionhandler.ObjectFH.fn", "functionhandler.ObjectFH.add_data_single"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data_single"], ["", "def", "call_fn_and_add_data", "(", "self", ",", "xin", ")", ":", "\n", "    ", "\"\"\" Call self.fn(xin), and update self.data \"\"\"", "\n", "yout", "=", "self", ".", "fn", "(", "xin", ")", "\n", "self", ".", "add_data_single", "(", "xin", ",", "yout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data_single": [[206, 210], ["argparse.Namespace", "functionhandler.ObjectFH.add_data", "numpy.array().reshape", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data"], ["", "def", "add_data_single", "(", "self", ",", "xin", ",", "yout", ")", ":", "\n", "    ", "\"\"\" Update self.data with a single xin yout pair. \"\"\"", "\n", "newdata", "=", "Namespace", "(", "X", "=", "[", "xin", "]", ",", "y", "=", "np", ".", "array", "(", "yout", ")", ".", "reshape", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "add_data", "(", "newdata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.add_data": [[211, 220], ["functionhandler.ObjectFH.data.X.extend", "numpy.concatenate"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "newdata", ")", ":", "\n", "    ", "\"\"\" Update self.data with newdata Namespace.\n        Inputs:\n          newdata: Namespace with fields X and y \"\"\"", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "      ", "self", ".", "data", "=", "newdata", "\n", "", "else", ":", "\n", "      ", "self", ".", "data", ".", "X", ".", "extend", "(", "newdata", ".", "X", ")", "\n", "self", ".", "data", ".", "y", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ".", "y", ",", "newdata", ".", "y", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.ObjectFH.print_str": [[221, 225], ["print", "str"], "methods", ["None"], ["", "", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string. \"\"\"", "\n", "print", "(", "'*ObjectFH with fhp='", "+", "str", "(", "self", ".", "fhp", ")", "\n", "+", "'.\\n-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.fn.functionhandler.get_fh": [[8, 23], ["argparse.Namespace", "functionhandler.BasicFH", "functionhandler.ExtraInfoFH", "functionhandler.NanNNFH", "functionhandler.ReplaceNanNNFH", "functionhandler.ObjectFH"], "function", ["None"], ["def", "get_fh", "(", "fn", ",", "data", "=", "None", ",", "fhp", "=", "None", ",", "print_flag", "=", "True", ")", ":", "\n", "  ", "\"\"\" Returns a function handler object \"\"\"", "\n", "if", "fhp", "is", "None", ":", "\n", "    ", "fhp", "=", "Namespace", "(", "fhstr", "=", "'basic'", ",", "namestr", "=", "'noname'", ")", "\n", "# Return FH object", "\n", "", "if", "fhp", ".", "fhstr", "==", "'basic'", ":", "\n", "    ", "return", "BasicFH", "(", "fn", ",", "data", ",", "fhp", ",", "print_flag", ")", "\n", "", "elif", "fhp", ".", "fhstr", "==", "'extrainfo'", ":", "\n", "    ", "return", "ExtraInfoFH", "(", "fn", ",", "data", ",", "fhp", ",", "print_flag", ")", "\n", "", "elif", "fhp", ".", "fhstr", "==", "'nannn'", ":", "\n", "    ", "return", "NanNNFH", "(", "fn", ",", "data", ",", "fhp", ",", "print_flag", ")", "\n", "", "elif", "fhp", ".", "fhstr", "==", "'replacenannn'", ":", "\n", "    ", "return", "ReplaceNanNNFH", "(", "fn", ",", "data", ",", "fhp", ",", "print_flag", ")", "\n", "", "elif", "fhp", ".", "fhstr", "==", "'object'", ":", "\n", "    ", "return", "ObjectFH", "(", "fn", ",", "data", ",", "fhp", ",", "print_flag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.util.print_utils.suppress_stdout_stderr.__init__": [[14, 19], ["os.open", "os.dup", "os.dup", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# Open a pair of null files", "\n", "        ", "self", ".", "null_fds", "=", "[", "os", ".", "open", "(", "os", ".", "devnull", ",", "os", ".", "O_RDWR", ")", "for", "x", "in", "range", "(", "2", ")", "]", "\n", "# Save the actual stdout (1) and stderr (2) file descriptors.", "\n", "self", ".", "save_fds", "=", "[", "os", ".", "dup", "(", "1", ")", ",", "os", ".", "dup", "(", "2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.util.print_utils.suppress_stdout_stderr.__enter__": [[20, 24], ["os.dup2", "os.dup2"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "# Assign the null pointers to stdout and stderr.", "\n", "        ", "os", ".", "dup2", "(", "self", ".", "null_fds", "[", "0", "]", ",", "1", ")", "\n", "os", ".", "dup2", "(", "self", ".", "null_fds", "[", "1", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.util.print_utils.suppress_stdout_stderr.__exit__": [[25, 32], ["os.dup2", "os.dup2", "os.close"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "_", ")", ":", "\n", "# Re-assign the real stdout/stderr back to (1) and (2)", "\n", "        ", "os", ".", "dup2", "(", "self", ".", "save_fds", "[", "0", "]", ",", "1", ")", "\n", "os", ".", "dup2", "(", "self", ".", "save_fds", "[", "1", "]", ",", "2", ")", "\n", "# Close the null files", "\n", "for", "fd", "in", "self", ".", "null_fds", "+", "self", ".", "save_fds", ":", "\n", "            ", "os", ".", "close", "(", "fd", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.util.datatransform.DataTransformer.__init__": [[12, 21], ["datatransform.DataTransformer.set_transformers", "datatransform.DataTransformer.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.util.datatransform.DataTransformer.set_transformers", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "datamat", ",", "printflag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor\n        Parameters:\n          datamat - numpy array (n x d) of data to be transformed\n    \"\"\"", "\n", "self", ".", "datamat", "=", "datamat", "\n", "self", ".", "set_transformers", "(", ")", "\n", "if", "printflag", ":", "\n", "      ", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.util.datatransform.DataTransformer.set_transformers": [[22, 26], ["sklearn.preprocessing.StandardScaler", "datatransform.DataTransformer.ss.fit"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit"], ["", "", "def", "set_transformers", "(", "self", ")", ":", "\n", "    ", "\"\"\" Set transformers using self.datamat \"\"\"", "\n", "self", ".", "ss", "=", "StandardScaler", "(", ")", "\n", "self", ".", "ss", ".", "fit", "(", "self", ".", "datamat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.util.datatransform.DataTransformer.transform_data": [[27, 32], ["datatransform.DataTransformer.ss.transform"], "methods", ["None"], ["", "def", "transform_data", "(", "self", ",", "datamat", "=", "None", ")", ":", "\n", "    ", "\"\"\" Return transformed datamat (default self.datamat) \"\"\"", "\n", "if", "datamat", "is", "None", ":", "\n", "      ", "datamat", "=", "self", ".", "datamat", "\n", "", "return", "self", ".", "ss", ".", "transform", "(", "datamat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.util.datatransform.DataTransformer.inv_transform_data": [[33, 36], ["datatransform.DataTransformer.ss.inverse_transform"], "methods", ["None"], ["", "def", "inv_transform_data", "(", "self", ",", "datamat", ")", ":", "\n", "    ", "\"\"\" Return inverse transform of datamat \"\"\"", "\n", "return", "self", ".", "ss", ".", "inverse_transform", "(", "datamat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.util.datatransform.DataTransformer.print_str": [[37, 42], ["print", "print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string \"\"\"", "\n", "print", "(", "'*DataTransformer with self.datamat.shape = '", "+", "\n", "str", "(", "self", ".", "datamat", ".", "shape", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqopt.AcqOptimizer.__init__": [[11, 19], ["acqopt.AcqOptimizer.set_opt_params", "acqopt.AcqOptimizer.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqopt.AcqOptimizer.set_opt_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "optp", "=", "None", ",", "print_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor\n        Inputs:\n          optp - Namespace of opt parameters\n          print_flag - True or False\n    \"\"\"", "\n", "self", ".", "set_opt_params", "(", "optp", ")", "\n", "if", "print_flag", ":", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqopt.AcqOptimizer.set_opt_params": [[20, 27], ["argparse.Namespace"], "methods", ["None"], ["", "def", "set_opt_params", "(", "self", ",", "optp", ")", ":", "\n", "    ", "\"\"\" Set the optimizer params.\n        Inputs:\n          acqp - Namespace of acquisition parameters \"\"\"", "\n", "if", "optp", "is", "None", ":", "\n", "      ", "optp", "=", "Namespace", "(", "opt_str", "=", "'rand'", ",", "max_iter", "=", "1000", ")", "\n", "", "self", ".", "optp", "=", "optp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqopt.AcqOptimizer.optimize": [[28, 32], ["acqopt.AcqOptimizer.optimize_rand"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqopt.AcqOptimizer.optimize_rand"], ["", "def", "optimize", "(", "self", ",", "dom", ",", "am", ")", ":", "\n", "    ", "\"\"\" Optimize acqfn(probmap(x)) over x in domain \"\"\"", "\n", "if", "self", ".", "optp", ".", "opt_str", "==", "'rand'", ":", "\n", "      ", "return", "self", ".", "optimize_rand", "(", "dom", ",", "am", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqopt.AcqOptimizer.optimize_rand": [[33, 38], ["dom.unif_rand_sample", "am.acqmap_list", "numpy.argmin"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.dom.real.RealDomain.unif_rand_sample", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.acqmap_list"], ["", "", "def", "optimize_rand", "(", "self", ",", "dom", ",", "am", ")", ":", "\n", "    ", "\"\"\" Optimize acqmap(x) over domain via random search \"\"\"", "\n", "xin_list", "=", "dom", ".", "unif_rand_sample", "(", "self", ".", "optp", ".", "max_iter", ")", "\n", "amlist", "=", "am", ".", "acqmap_list", "(", "xin_list", ")", "\n", "return", "xin_list", "[", "np", ".", "argmin", "(", "amlist", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqopt.AcqOptimizer.print_str": [[40, 44], ["print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" print a description string \"\"\"", "\n", "print", "(", "'*AcqOptimizer with optp='", "+", "str", "(", "self", ".", "optp", ")", "\n", "+", "'.\\n-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.__init__": [[12, 22], ["acquisition.Acquisitioner.set_acq_params", "acquisition.Acquisitioner.set_acq_method", "acquisition.Acquisitioner.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.set_acq_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.set_acq_method", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "data", ",", "acqp", "=", "None", ",", "print_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor\n        Parameters:\n          acqp - Namespace of acquisition parameters\n          print_flag - True or False\n    \"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "set_acq_params", "(", "acqp", ")", "\n", "self", ".", "set_acq_method", "(", ")", "\n", "if", "print_flag", ":", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.set_acq_params": [[23, 30], ["argparse.Namespace"], "methods", ["None"], ["", "def", "set_acq_params", "(", "self", ",", "acqp", ")", ":", "\n", "    ", "\"\"\" Set the acquisition params.\n        Parameters:\n          acqp - Namespace of acquisition parameters \"\"\"", "\n", "if", "acqp", "is", "None", ":", "\n", "      ", "acqp", "=", "Namespace", "(", "acq_str", "=", "'ei'", ",", "pmout_str", "=", "'sample'", ")", "\n", "", "self", ".", "acqp", "=", "acqp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.set_acq_method": [[31, 39], ["None"], "methods", ["None"], ["", "def", "set_acq_method", "(", "self", ")", ":", "\n", "    ", "\"\"\" Set the acquisition method \"\"\"", "\n", "if", "self", ".", "acqp", ".", "acq_str", "==", "'ei'", ":", "self", ".", "acq_method", "=", "self", ".", "ei", "\n", "if", "self", ".", "acqp", ".", "acq_str", "==", "'pi'", ":", "self", ".", "acq_method", "=", "self", ".", "pi", "\n", "if", "self", ".", "acqp", ".", "acq_str", "==", "'ts'", ":", "self", ".", "acq_method", "=", "self", ".", "ts", "\n", "if", "self", ".", "acqp", ".", "acq_str", "==", "'ucb'", ":", "self", ".", "acq_method", "=", "self", ".", "ucb", "\n", "if", "self", ".", "acqp", ".", "acq_str", "==", "'rand'", ":", "self", ".", "acq_method", "=", "self", ".", "rand", "\n", "if", "self", ".", "acqp", ".", "acq_str", "==", "'null'", ":", "self", ".", "acq_method", "=", "self", ".", "null", "\n", "#if self.acqp.acqStr=='map': return self.map", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.ei": [[41, 45], ["acquisition.Acquisitioner.bbacq_ei"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.bbacq_ei"], ["", "def", "ei", "(", "self", ",", "pmout", ")", ":", "\n", "    ", "\"\"\" Expected improvement (EI) \"\"\"", "\n", "if", "self", ".", "acqp", ".", "pmout_str", "==", "'sample'", ":", "\n", "      ", "return", "self", ".", "bbacq_ei", "(", "pmout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.pi": [[46, 50], ["acquisition.Acquisitioner.bbacq_pi"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.bbacq_pi"], ["", "", "def", "pi", "(", "self", ",", "pmout", ")", ":", "\n", "    ", "\"\"\" Probability of improvement (PI) \"\"\"", "\n", "if", "self", ".", "acqp", ".", "pmout_str", "==", "'sample'", ":", "\n", "      ", "return", "self", ".", "bbacq_pi", "(", "pmout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.ucb": [[51, 55], ["acquisition.Acquisitioner.bbacq_ucb"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.bbacq_ucb"], ["", "", "def", "ucb", "(", "self", ",", "pmout", ")", ":", "\n", "    ", "\"\"\" Upper (lower) confidence bound (UCB) \"\"\"", "\n", "if", "self", ".", "acqp", ".", "pmout_str", "==", "'sample'", ":", "\n", "      ", "return", "self", ".", "bbacq_ucb", "(", "pmout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.ts": [[56, 60], ["acquisition.Acquisitioner.bbacq_ts"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.bbacq_ts"], ["", "", "def", "ts", "(", "self", ",", "pmout", ")", ":", "\n", "    ", "\"\"\" Thompson sampling (TS) \"\"\"", "\n", "if", "self", ".", "acqp", ".", "pmout_str", "==", "'sample'", ":", "\n", "      ", "return", "self", ".", "bbacq_ts", "(", "pmout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.rand": [[61, 64], ["numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "", "def", "rand", "(", "self", ",", "pmout", ")", ":", "\n", "    ", "\"\"\" Uniform random sampling \"\"\"", "\n", "return", "np", ".", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.null": [[65, 68], ["None"], "methods", ["None"], ["", "def", "null", "(", "self", ",", "pmout", ")", ":", "\n", "    ", "\"\"\" Return constant 0. \"\"\"", "\n", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.bbacq_ei": [[70, 87], ["numpy.array().flatten", "numpy.mean", "numpy.std", "numpy.argwhere", "numpy.array", "acquisition.Acquisitioner.data.y.min", "acquisition.Acquisitioner.data.y.min", "scipy.stats.norm.pdf", "len", "float", "scipy.stats.norm.cdf", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "def", "bbacq_ei", "(", "self", ",", "pmout_samp", ",", "normal", "=", "False", ")", ":", "\n", "    ", "\"\"\" Black box acquisition: BB-EI\n        Input: pmout_samp: post-pred samples - np array (shape=(nsamp,1))\n        Returns: EI acq value \"\"\"", "\n", "youts", "=", "np", ".", "array", "(", "pmout_samp", ")", ".", "flatten", "(", ")", "\n", "nsamp", "=", "youts", ".", "shape", "[", "0", "]", "\n", "if", "normal", ":", "\n", "      ", "mu", "=", "np", ".", "mean", "(", "youts", ")", "\n", "sig", "=", "np", ".", "std", "(", "youts", ")", "\n", "gam", "=", "(", "self", ".", "data", ".", "y", ".", "min", "(", ")", "-", "mu", ")", "/", "sig", "\n", "eiVal", "=", "-", "1", "*", "sig", "*", "(", "gam", "*", "norm", ".", "cdf", "(", "gam", ")", "+", "norm", ".", "pdf", "(", "gam", ")", ")", "\n", "", "else", ":", "\n", "      ", "diffs", "=", "self", ".", "data", ".", "y", ".", "min", "(", ")", "-", "youts", "\n", "ind_below_min", "=", "np", ".", "argwhere", "(", "diffs", ">", "0", ")", "\n", "eiVal", "=", "-", "1", "*", "np", ".", "sum", "(", "diffs", "[", "ind_below_min", "]", ")", "/", "float", "(", "nsamp", ")", "if", "len", "(", "ind_below_min", ")", ">", "0", "else", "0", "\n", "", "return", "eiVal", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.bbacq_pi": [[88, 101], ["numpy.array().flatten", "numpy.mean", "numpy.sqrt", "numpy.array", "numpy.var", "scipy.stats.norm.cdf", "float", "acquisition.Acquisitioner.data.y.min", "len", "numpy.argwhere", "acquisition.Acquisitioner.data.y.min"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "def", "bbacq_pi", "(", "self", ",", "pmout_samp", ",", "normal", "=", "False", ")", ":", "\n", "    ", "\"\"\" Black box acquisition: BB-PI\n        Input: pmout_samp: post-pred samples - np array (shape=(nsamp,1))\n        Returns: PI acq value \"\"\"", "\n", "youts", "=", "np", ".", "array", "(", "pmout_samp", ")", ".", "flatten", "(", ")", "\n", "nsamp", "=", "youts", ".", "shape", "[", "0", "]", "\n", "if", "normal", ":", "\n", "      ", "mu", "=", "np", ".", "mean", "(", "youts", ")", "\n", "sig", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "youts", ")", ")", "\n", "piVal", "=", "-", "1", "*", "norm", ".", "cdf", "(", "self", ".", "data", ".", "y", ".", "min", "(", ")", ",", "loc", "=", "mu", ",", "scale", "=", "sig", ")", "\n", "", "else", ":", "\n", "      ", "piVal", "=", "-", "1", "*", "len", "(", "np", ".", "argwhere", "(", "youts", "<", "self", ".", "data", ".", "y", ".", "min", "(", ")", ")", ")", "/", "float", "(", "nsamp", ")", "\n", "", "return", "piVal", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.bbacq_ucb": [[102, 114], ["numpy.array().flatten", "numpy.array", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.var", "numpy.var"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "def", "bbacq_ucb", "(", "self", ",", "pmout_samp", ",", "beta", "=", "0.5", ",", "normal", "=", "True", ")", ":", "\n", "    ", "\"\"\" Black box acquisition: BB-UCB\n        Input: pmout_samp: post-pred samples - np array (shape=(nsamp,1))\n        Returns: UCB acq value \"\"\"", "\n", "youts", "=", "np", ".", "array", "(", "pmout_samp", ")", ".", "flatten", "(", ")", "\n", "nsamp", "=", "youts", ".", "shape", "[", "0", "]", "\n", "if", "normal", ":", "\n", "      ", "ucbVal", "=", "np", ".", "mean", "(", "youts", ")", "-", "beta", "*", "np", ".", "sqrt", "(", "np", ".", "var", "(", "youts", ")", ")", "\n", "", "else", ":", "\n", "# TODO replace below with nonparametric ucb estimate", "\n", "      ", "ucbVal", "=", "np", ".", "mean", "(", "youts", ")", "-", "beta", "*", "np", ".", "sqrt", "(", "np", ".", "var", "(", "youts", ")", ")", "\n", "", "return", "ucbVal", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.bbacq_ts": [[115, 120], ["pmout_samp.mean"], "methods", ["None"], ["", "def", "bbacq_ts", "(", "self", ",", "pmout_samp", ")", ":", "\n", "    ", "\"\"\" Black box acquisition: BB-TS\n        Input: pmout_samp: post-pred samples - np array (shape=(nsamp,1))\n        Returns: TS acq value \"\"\"", "\n", "return", "pmout_samp", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acquisition.Acquisitioner.print_str": [[122, 126], ["print", "print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" print a description string \"\"\"", "\n", "print", "(", "'*Acquisitioner with acqp='", "+", "str", "(", "self", ".", "acqp", ")", "+", "'.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.__init__": [[16, 26], ["acqmap.AcqMapper.set_am_params", "acqmap.AcqMapper.print_str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.set_am_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str"], ["def", "__init__", "(", "self", ",", "data", ",", "amp", ",", "print_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\" Constructor\n        Parameters:\n          amp - Namespace of acqmap params\n          print_flag - True or False\n    \"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "set_am_params", "(", "amp", ")", "\n", "#self.setup_acqmap()", "\n", "if", "print_flag", ":", "self", ".", "print_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.set_am_params": [[27, 32], ["None"], "methods", ["None"], ["", "def", "set_am_params", "(", "self", ",", "amp", ")", ":", "\n", "    ", "\"\"\" Set the acqmap params.\n        Inputs:\n          amp - Namespace of acqmap parameters \"\"\"", "\n", "self", ".", "amp", "=", "amp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.get_acqmap": [[33, 40], ["None"], "methods", ["None"], ["", "def", "get_acqmap", "(", "self", ",", "xin_is_list", "=", "True", ")", ":", "\n", "    ", "\"\"\" Return acqmap.\n        Inputs: xin_is_list True if input to acqmap is a list of xin \"\"\"", "\n", "# Potentially do acqmap setup here. Could include inference,", "\n", "# cachining/computing quantities, instantiating objects used in acqmap", "\n", "# definition. This becomes important when we do sequential opt of acqmaps.", "\n", "return", "self", ".", "acqmap_list", "if", "xin_is_list", "else", "self", ".", "acqmap_single", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.acqmap_list": [[41, 110], ["nas_lib.bo.util.datatransform.DataTransformer", "argparse.Namespace", "argparse.Namespace", "nas_lib.bo.acq.acquisition.Acquisitioner", "acqmap.AcqMapper.acqmap_list.get_trans_data"], "methods", ["None"], ["", "def", "acqmap_list", "(", "self", ",", "xin_list", ")", ":", "\n", "    ", "\"\"\" Acqmap defined on a list of xin. \"\"\"", "\n", "\n", "def", "get_trans_data", "(", ")", ":", "\n", "      ", "\"\"\" Returns transformed data. \"\"\"", "\n", "dt", "=", "DataTransformer", "(", "self", ".", "data", ".", "y", ",", "False", ")", "\n", "return", "Namespace", "(", "X", "=", "self", ".", "data", ".", "X", ",", "y", "=", "dt", ".", "transform_data", "(", "self", ".", "data", ".", "y", ")", ")", "\n", "\n", "", "def", "apply_acq_to_pmlist", "(", "pmlist", ",", "acq_str", ",", "trans_data", ")", ":", "\n", "      ", "\"\"\" Apply acquisition to pmlist. \"\"\"", "\n", "acqp", "=", "Namespace", "(", "acq_str", "=", "acq_str", ",", "pmout_str", "=", "'sample'", ")", "\n", "acq", "=", "Acquisitioner", "(", "trans_data", ",", "acqp", ",", "False", ")", "\n", "acqfn", "=", "acq", ".", "acq_method", "\n", "return", "[", "acqfn", "(", "p", ")", "for", "p", "in", "pmlist", "]", "\n", "\n", "", "def", "georgegp_acqmap", "(", "acq_str", ")", ":", "\n", "      ", "\"\"\" Acqmaps for GeorgeGpPP \"\"\"", "\n", "trans_data", "=", "get_trans_data", "(", ")", "\n", "pp", "=", "GeorgeGpPP", "(", "trans_data", ",", "self", ".", "amp", ".", "modelp", ",", "False", ")", "\n", "pmlist", "=", "pp", ".", "sample_pp_pred", "(", "self", ".", "amp", ".", "nppred", ",", "xin_list", ")", "if", "acq_str", "==", "'ts'", "else", "pp", ".", "sample_pp_post_pred", "(", "self", ".", "amp", ".", "nppred", ",", "xin_list", ")", "\n", "return", "apply_acq_to_pmlist", "(", "pmlist", ",", "acq_str", ",", "trans_data", ")", "\n", "\n", "", "def", "stangp_acqmap", "(", "acq_str", ")", ":", "\n", "      ", "\"\"\" Acqmaps for StanGpPP \"\"\"", "\n", "trans_data", "=", "get_trans_data", "(", ")", "\n", "pp", "=", "StanGpPP", "(", "trans_data", ",", "self", ".", "amp", ".", "modelp", ",", "False", ")", "\n", "pp", ".", "infer_post_and_update_samples", "(", "print_result", "=", "True", ")", "\n", "pmlist", ",", "_", "=", "pp", ".", "sample_pp_pred", "(", "self", ".", "amp", ".", "nppred", ",", "xin_list", ")", "if", "acq_str", "==", "'ts'", "else", "pp", ".", "sample_pp_post_pred", "(", "self", ".", "amp", ".", "nppred", ",", "xin_list", ",", "full_cov", "=", "True", ",", "nloop", "=", "np", ".", "min", "(", "[", "50", ",", "self", ".", "amp", ".", "nppred", "]", ")", ")", "\n", "return", "apply_acq_to_pmlist", "(", "pmlist", ",", "acq_str", ",", "trans_data", ")", "\n", "\n", "", "def", "mygpdistmat_acqmap", "(", "acq_str", ")", ":", "\n", "      ", "\"\"\" Acqmaps for MyGpDistmatPP \"\"\"", "\n", "trans_data", "=", "get_trans_data", "(", ")", "\n", "pp", "=", "MyGpDistmatPP", "(", "trans_data", ",", "self", ".", "amp", ".", "modelp", ",", "False", ")", "\n", "pp", ".", "infer_post_and_update_samples", "(", "print_result", "=", "False", ")", "\n", "pmlist", ",", "_", "=", "pp", ".", "sample_pp_pred", "(", "self", ".", "amp", ".", "nppred", ",", "xin_list", ")", "if", "acq_str", "==", "'ts'", "else", "pp", ".", "sample_pp_post_pred", "(", "self", ".", "amp", ".", "nppred", ",", "xin_list", ",", "full_cov", "=", "True", ")", "\n", "return", "apply_acq_to_pmlist", "(", "pmlist", ",", "acq_str", ",", "trans_data", ")", "\n", "\n", "# Mapping of am_str to acqmap", "\n", "", "if", "self", ".", "amp", ".", "am_str", "==", "'georgegp_ei'", ":", "\n", "      ", "return", "georgegp_acqmap", "(", "'ei'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'georgegp_pi'", ":", "\n", "      ", "return", "georgegp_acqmap", "(", "'pi'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'georgegp_ucb'", ":", "\n", "      ", "return", "georgegp_acqmap", "(", "'ucb'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'georgegp_ts'", ":", "\n", "      ", "return", "georgegp_acqmap", "(", "'ts'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'stangp_ei'", ":", "\n", "      ", "return", "stangp_acqmap", "(", "'ei'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'stangp_pi'", ":", "\n", "      ", "return", "stangp_acqmap", "(", "'pi'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'stangp_ucb'", ":", "\n", "      ", "return", "stangp_acqmap", "(", "'ucb'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'stangp_ts'", ":", "\n", "      ", "return", "stangp_acqmap", "(", "'ts'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'mygpdistmat_ei'", ":", "\n", "      ", "return", "mygpdistmat_acqmap", "(", "'ei'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'mygpdistmat_pi'", ":", "\n", "      ", "return", "mygpdistmat_acqmap", "(", "'pi'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'mygpdistmat_ucb'", ":", "\n", "      ", "return", "mygpdistmat_acqmap", "(", "'ucb'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'mygpdistmat_ts'", ":", "\n", "      ", "return", "mygpdistmat_acqmap", "(", "'ts'", ")", "\n", "", "elif", "self", ".", "amp", ".", "am_str", "==", "'null'", ":", "\n", "      ", "return", "[", "0.", "for", "xin", "in", "xin_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.acqmap_single": [[111, 114], ["acqmap.AcqMapper.acqmap_list"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.acqmap_list"], ["", "", "def", "acqmap_single", "(", "self", ",", "xin", ")", ":", "\n", "    ", "\"\"\" Acqmap defined on a single xin. Returns acqmap(xin) value, not list. \"\"\"", "\n", "return", "self", ".", "acqmap_list", "(", "[", "xin", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqmap.AcqMapper.print_str": [[115, 119], ["print", "str"], "methods", ["None"], ["", "def", "print_str", "(", "self", ")", ":", "\n", "    ", "\"\"\" Print a description string \"\"\"", "\n", "print", "(", "'*AcqMapper with amp='", "+", "str", "(", "self", ".", "amp", ")", "\n", "+", "'.\\n-----'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.ds.makept.main": [[17, 42], ["time.time", "pickle.load", "pickle.load", "makept.get_domain", "nas_lib.bo.acq.acqmap.AcqMapper", "nas_lib.bo.acq.acqopt.AcqOptimizer", "nas_lib.bo.acq.acqopt.AcqOptimizer.optimize", "open", "open", "hasattr", "numpy.random.seed", "open", "pickle.dump", "time.time", "makept.print_info"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.ds.makept.get_domain", "home.repos.pwc.inspect_result.auroua_NPENASv1.acq.acqopt.AcqOptimizer.optimize", "home.repos.pwc.inspect_result.auroua_NPENASv1.ds.makept.print_info"], ["def", "main", "(", "args", ",", "search_space", ",", "printinfo", "=", "False", ")", ":", "\n", "  ", "starttime", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Load config and data", "\n", "makerp", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "configpkl", ",", "'rb'", ")", ")", "\n", "data", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "datapkl", ",", "'rb'", ")", ")", "\n", "\n", "if", "hasattr", "(", "args", ",", "'mode'", ")", "and", "args", ".", "mode", "==", "'single_process'", ":", "\n", "    ", "makerp", ".", "domp", ".", "mode", "=", "args", ".", "mode", "\n", "makerp", ".", "domp", ".", "iteridx", "=", "args", ".", "iteridx", "\n", "makerp", ".", "amp", ".", "modelp", ".", "mode", "=", "args", ".", "mode", "\n", "", "else", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "# Instantiate Domain, AcqMapper, AcqOptimizer", "\n", "", "dom", "=", "get_domain", "(", "makerp", ".", "domp", ",", "search_space", ")", "\n", "am", "=", "AcqMapper", "(", "data", ",", "makerp", ".", "amp", ",", "False", ")", "\n", "ao", "=", "AcqOptimizer", "(", "makerp", ".", "optp", ",", "False", ")", "\n", "# Optimize over domain to get nextpt ", "\n", "nextpt", "=", "ao", ".", "optimize", "(", "dom", ",", "am", ")", "\n", "# Serialize nextpt", "\n", "with", "open", "(", "args", ".", "nextptpkl", ",", "'wb'", ")", "as", "f", ":", "\n", "    ", "pickle", ".", "dump", "(", "nextpt", ",", "f", ")", "\n", "# Print", "\n", "", "itertime", "=", "time", ".", "time", "(", ")", "-", "starttime", "\n", "if", "printinfo", ":", "print_info", "(", "nextpt", ",", "itertime", ",", "args", ".", "nextptpkl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.ds.makept.get_domain": [[43, 51], ["hasattr", "nas_lib.bo.dom.real.RealDomain", "nas_lib.bo.dom.list.ListDomain"], "function", ["None"], ["", "def", "get_domain", "(", "domp", ",", "search_space", ")", ":", "\n", "  ", "\"\"\" Return Domain object. \"\"\"", "\n", "if", "not", "hasattr", "(", "domp", ",", "'dom_str'", ")", ":", "\n", "    ", "domp", ".", "dom_str", "=", "'real'", "\n", "", "if", "domp", ".", "dom_str", "==", "'real'", ":", "\n", "    ", "return", "RealDomain", "(", "domp", ",", "False", ")", "\n", "", "elif", "domp", ".", "dom_str", "==", "'list'", ":", "\n", "    ", "return", "ListDomain", "(", "search_space", ",", "domp", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.ds.makept.print_info": [[52, 57], ["print", "print", "print", "print", "str", "str"], "function", ["None"], ["", "", "def", "print_info", "(", "nextpt", ",", "itertime", ",", "nextptpkl", ")", ":", "\n", "  ", "print", "(", "'*Found nextpt = '", "+", "str", "(", "nextpt", ")", "+", "'.'", ")", "\n", "print", "(", "'*Saved nextpt as '", "+", "nextptpkl", "+", "'.'", ")", "\n", "print", "(", "'*Timing: makept took '", "+", "str", "(", "itertime", ")", "+", "' seconds.'", ")", "\n", "print", "(", "'-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.__init__": [[14, 32], ["layers.loss_gausian.Criterion", "utils.utils_solver.make_agent_optimizer", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.nas_agent.to", "utils.utils_solver.CosineLR", "models.gin_uncertainty_predictor.NasBenchGINGaussianAgent", "models.gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to"], ["    ", "def", "__init__", "(", "self", ",", "agent_type", ",", "lr", "=", "0.01", ",", "device", "=", "None", ",", "epochs", "=", "10", ",", "train_images", "=", "10", ",", "batch_size", "=", "10", ",", "input_dim", "=", "6", ",", "\n", "activation_fn", "=", "'celu'", ")", ":", "\n", "        ", "if", "activation_fn", "==", "'celu'", ":", "\n", "            ", "self", ".", "nas_agent", "=", "NasBenchGINGaussianAgent", "(", "input_dim", "=", "input_dim", ")", "\n", "", "elif", "activation_fn", "==", "'relu'", ":", "\n", "            ", "self", ".", "nas_agent", "=", "NasBenchGINGaussianAgentRelu", "(", "input_dim", "=", "input_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "self", ".", "agent_type", "=", "agent_type", "\n", "\n", "self", ".", "criterion", "=", "Criterion", "(", ")", "\n", "self", ".", "optimizer", "=", "make_agent_optimizer", "(", "self", ".", "nas_agent", ",", "base_lr", "=", "lr", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nas_agent", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "scheduler", "=", "CosineLR", "(", "self", ".", "optimizer", ",", "epochs", "=", "epochs", ",", "train_images", "=", "train_images", ",", "batch_size", "=", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit": [[33, 68], ["utils.metric_logger.MetricLogger", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.nas_agent.train", "range", "list", "random.shuffle", "utils.utils_solver.gen_batch_idx", "logger.info", "range", "len", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "val_tensor.unsqueeze.unsqueeze.to", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.nas_agent", "val_tensor.unsqueeze.unsqueeze.unsqueeze", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.criterion", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.optimizer.zero_grad", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.backward", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.optimizer.step", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.scheduler.step", "utils.metric_logger.MetricLogger.update", "utils.metric_logger.MetricLogger.delimiter.join", "len", "gnn_lib.data.Data", "data_list.append", "target_list.append", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.item", "edge_index[].long", "node_feature[].float", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.tools_open_domain.train_darts_cifar10.train", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.gaussian_sample_layer.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update"], ["", "def", "fit", "(", "self", ",", "edge_index", ",", "node_feature", ",", "val_accuracy", ",", "logger", "=", "None", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\" \"", ")", "\n", "self", ".", "nas_agent", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "self", ".", "batch_size", ")", "\n", "counter", "=", "0", "\n", "for", "batch_idx", "in", "batch_idx_list", ":", "\n", "                ", "counter", "+=", "len", "(", "batch_idx", ")", "\n", "data_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "target_list", ".", "append", "(", "val_accuracy", "[", "idx", "]", ")", "\n", "", "val_tensor", "=", "torch", ".", "tensor", "(", "target_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "val_tensor", "=", "val_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "# batch_nodes = F.normalize(batch_nodes, p=2, dim=-1)", "\n", "\n", "pred", ",", "mean", ",", "std", "=", "self", ".", "nas_agent", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", "\n", "val_tensor", "=", "val_tensor", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "mean", ",", "std", ",", "val_tensor", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "", "if", "logger", ":", "\n", "            ", "logger", ".", "info", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "", "return", "meters", ".", "meters", "[", "'loss'", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred": [[69, 98], ["list", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.nas_agent.eval", "utils.utils_solver.gen_batch_idx", "range", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "len", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.nas_agent", "pred.squeeze.squeeze.squeeze", "mean.squeeze.squeeze.squeeze", "std.squeeze.squeeze.squeeze", "pred_list.append", "mean_list.append", "std_list.append", "gnn_lib.data.Data", "data_list.append", "len", "pred.squeeze.squeeze.unsqueeze_", "mean.squeeze.squeeze.unsqueeze_", "std.squeeze.squeeze.unsqueeze_", "pred.squeeze.squeeze.size", "edge_index[].long", "node_feature[].float"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to"], ["", "def", "pred", "(", "self", ",", "edge_index", ",", "node_feature", ")", ":", "\n", "        ", "pred_list", "=", "[", "]", "\n", "mean_list", "=", "[", "]", "\n", "std_list", "=", "[", "]", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "self", ".", "nas_agent", ".", "eval", "(", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "64", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", "in", "batch_idx_list", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "pred", ",", "mean", ",", "std", "=", "self", ".", "nas_agent", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", "\n", "\n", "pred", "=", "pred", ".", "squeeze", "(", ")", "\n", "mean", "=", "mean", ".", "squeeze", "(", ")", "\n", "std", "=", "std", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "0", ":", "\n", "                    ", "pred", ".", "unsqueeze_", "(", "0", ")", "\n", "mean", ".", "unsqueeze_", "(", "0", ")", "\n", "std", ".", "unsqueeze_", "(", "0", ")", "\n", "", "pred_list", ".", "append", "(", "pred", ")", "\n", "mean_list", ".", "append", "(", "mean", ")", "\n", "std_list", ".", "append", "(", "std", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "mean_list", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "std_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.async_macro_model_train": [[14, 35], ["torch.multiprocessing.Queue", "torch.Manager", "multiprocessing.Manager.dict", "torch.multiprocessing.Process", "time.sleep", "torch.multiprocessing.Process.start", "torch.multiprocessing.Process.join", "manager.dict.items", "torch.multiprocessing.Process", "p.start", "p.join", "range"], "function", ["None"], ["def", "async_macro_model_train", "(", "model_data", ",", "gpus", ",", "save_dir", ",", "dataset", "=", "'cifar10'", ")", ":", "\n", "    ", "q", "=", "Queue", "(", "10", ")", "\n", "manager", "=", "multiprocessing", ".", "Manager", "(", ")", "\n", "total_data_dict", "=", "manager", ".", "dict", "(", ")", "\n", "p_producer", "=", "Process", "(", "target", "=", "model_producer", ",", "args", "=", "(", "model_data", ",", "q", ",", "gpus", ")", ")", "\n", "time", ".", "sleep", "(", "3", ")", "\n", "p_consumers", "=", "[", "Process", "(", "target", "=", "model_consumer", ",", "args", "=", "(", "q", ",", "i", ",", "save_dir", ",", "total_data_dict", ",", "model_data", ",", "dataset", ")", ")", "\n", "for", "i", "in", "range", "(", "gpus", ")", "]", "\n", "p_producer", ".", "start", "(", ")", "\n", "\n", "for", "p", "in", "p_consumers", ":", "\n", "        ", "p", ".", "start", "(", ")", "\n", "\n", "", "p_producer", ".", "join", "(", ")", "\n", "for", "p", "in", "p_consumers", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "", "data_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "total_data_dict", ".", "items", "(", ")", ":", "\n", "        ", "data_dict", "[", "v", "[", "2", "]", "]", "=", "(", "100", "-", "v", "[", "0", "]", ",", "100", "-", "v", "[", "1", "]", ")", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.model_producer": [[37, 44], ["range", "queue.put", "queue.put"], "function", ["None"], ["", "def", "model_producer", "(", "model_data", ",", "queue", ",", "gpus", ")", ":", "\n", "    ", "for", "idx", "in", "model_data", ":", "\n", "        ", "queue", ".", "put", "(", "{", "\n", "'idx'", ":", "idx", "\n", "}", ")", "\n", "", "for", "_", "in", "range", "(", "gpus", ")", ":", "\n", "        ", "queue", ".", "put", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.model_consumer": [[46, 60], ["nas_lib.utils.comm.setup_logger", "q.get", "nas_lib.utils.comm.setup_logger.info", "trainer_nasbench_open_darts_async.model_trainer_cifar10"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.model_trainer_cifar10"], ["", "", "def", "model_consumer", "(", "q", ",", "gpu", ",", "save_dir", ",", "total_data_dict", ",", "model_data", ",", "dataset", ")", ":", "\n", "    ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "save_dir", ",", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "while", "True", ":", "\n", "        ", "msg", "=", "q", ".", "get", "(", ")", "\n", "if", "msg", "==", "'done'", ":", "\n", "            ", "logger", ".", "info", "(", "'thread %d end'", "%", "gpu", ")", "\n", "break", "\n", "", "model_idx", "=", "msg", "[", "'idx'", "]", "\n", "model", "=", "model_data", "[", "model_idx", "]", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "            ", "val_acc", ",", "test_acc", ",", "hash_key", "=", "model_trainer_cifar10", "(", "model", ",", "gpu", ",", "logger", ",", "save_dir", ")", "\n", "total_data_dict", "[", "model_idx", "]", "=", "[", "val_acc", ",", "test_acc", ",", "hash_key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_nasbench_open_darts_async.model_trainer_cifar10": [[62, 213], ["torch.cuda.set_device", "torch.cuda.set_device", "nas_lib.data.cifar10_dataset.transforms_cifar10", "nas_lib.data.cifar10_dataset.get_cifar10_test_loader", "nas_lib.data.cifar10_dataset.get_cifar10_train_and_val_loader", "torch.device", "torch.device", "model.to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "copy.deepcopy", "range", "model.load_state_dict", "model.eval", "logger.info", "logger.info", "model.parameters", "model.state_dict", "model.train", "time.time", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "enumerate", "logger.info", "loss_list.append", "torch.no_grad", "torch.no_grad", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "input.to.to", "labels.to.to", "torch.optim.SGD.zero_grad", "time.time", "model", "torch.nn.CrossEntropyLoss.", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.optim.SGD.step", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "nas_lib.utils.utils_darts.top_accuracy", "input.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "criterion.item", "len", "time.time", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "model.eval", "logger.info", "val_acc_list.append", "images.to.to", "labels.to.to", "model", "nas_lib.utils.utils_darts.top_accuracy", "images.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "model.to", "torch.nn.CrossEntropyLoss.", "model.parameters", "criterion.item", "prec1.item", "prec5.item", "logger.info", "time.time", "torch.no_grad", "torch.no_grad", "copy.deepcopy", "prec1.item", "prec5.item", "images.to.to", "labels.to.to", "model", "torch.nn.CrossEntropyLoss.", "nas_lib.utils.utils_darts.top_accuracy", "images.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "labels.to.size", "model.state_dict", "criterion.item", "prec1.item", "prec5.item"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.transforms_cifar10", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.get_cifar10_test_loader", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.get_cifar10_train_and_val_loader", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_open_domain.train_darts_cifar10.train", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.gaussian_sample_layer.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.state_dict"], ["", "", "", "def", "model_trainer_cifar10", "(", "model", ",", "gpu", ",", "logger", ",", "save_dir", ",", "\n", "train_epochs", "=", "50", ",", "lr", "=", "0.025", ",", "momentum", "=", "0.9", ",", "weight_deacy", "=", "3e-4", ")", ":", "\n", "\n", "    ", "parameters", "=", "{", "\n", "'auxiliary'", ":", "False", ",", "\n", "'auxiliary_weight'", ":", "0", ",", "\n", "'cutout'", ":", "False", ",", "\n", "'cutout_length'", ":", "0", ",", "\n", "'drop_path_prob'", ":", "0.0", ",", "\n", "'grad_clip'", ":", "5", ",", "\n", "'train_portion'", ":", "0.5", "\n", "}", "\n", "\n", "auxiliary", "=", "parameters", "[", "'auxiliary'", "]", "\n", "auxiliary_weight", "=", "parameters", "[", "'auxiliary_weight'", "]", "\n", "cutout", "=", "parameters", "[", "'cutout'", "]", "\n", "cutout_length", "=", "parameters", "[", "'cutout_length'", "]", "\n", "drop_path_prob", "=", "parameters", "[", "'drop_path_prob'", "]", "\n", "train_portion", "=", "parameters", "[", "'train_portion'", "]", "\n", "grad_clip", "=", "parameters", "[", "'grad_clip'", "]", "\n", "batch_size", "=", "64", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "hash_key", "=", "model", ".", "hashkey", "\n", "genotype", "=", "model", ".", "genotype", "\n", "train_trans", ",", "test_trans", "=", "transforms_cifar10", "(", "cutout", "=", "cutout", ",", "cutout_length", "=", "cutout_length", ")", "\n", "model_test_data", "=", "get_cifar10_test_loader", "(", "cifar10_path", ",", "transform", "=", "test_trans", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "model_train_data", ",", "model_val_data", "=", "get_cifar10_train_and_val_loader", "(", "cifar10_path", ",", "transform", "=", "train_trans", ",", "\n", "train_portion", "=", "train_portion", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_deacy", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "train_epochs", ",", "0.000001", ",", "-", "1", ")", "\n", "\n", "best_val_acc", "=", "0.0", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "loss_list", "=", "[", "]", "\n", "val_acc_list", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "train_epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "model", ".", "drop_path_prob", "=", "drop_path_prob", "*", "epoch", "/", "train_epochs", "\n", "running_loss", "=", "0.0", "\n", "total_inference_time", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "model_train_data", ")", ":", "\n", "            ", "input", ",", "labels", "=", "data", "\n", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "begin_inference", "=", "time", ".", "time", "(", ")", "\n", "outputs", ",", "outputs_aux", "=", "model", "(", "input", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "if", "auxiliary", ":", "\n", "                ", "loss_aux", "=", "criterion", "(", "outputs_aux", ",", "labels", ")", "\n", "loss", "+=", "auxiliary_weight", "*", "loss_aux", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "outputs", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'train %03d %e %f %f'", ",", "i", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "", "inference_time", "=", "time", ".", "time", "(", ")", "-", "begin_inference", "\n", "total_inference_time", "+=", "inference_time", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "running_loss_avg", "=", "running_loss", "/", "len", "(", "model_train_data", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "logger", ".", "info", "(", "'epoch %d trainint loss is %.6f top1 acc is %.2f time duration is %.5f and avg inference time is %.5f'", "%", "\n", "(", "epoch", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "duration", ",", "total_inference_time", "/", "(", "i", "*", "1.0", ")", ")", ")", "\n", "loss_list", ".", "append", "(", "objs", ".", "avg", ")", "\n", "\n", "# if epoch != 0 and epoch % 5 == 0:", "\n", "if", "True", ":", "\n", "            ", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "data", "in", "model_val_data", ":", "\n", "                    ", "images", ",", "labels", "=", "data", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "_", "=", "model", "(", "images", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "outputs", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "images", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "", "", "val_acc", "=", "top1", ".", "avg", "\n", "if", "val_acc", ">", "best_val_acc", ":", "\n", "                ", "best_val_acc", "=", "val_acc", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "", "logger", ".", "info", "(", "'Accuracy of the network on validate images: %.5f %%'", "%", "(", "val_acc", ")", ")", "\n", "val_acc_list", ".", "append", "(", "val_acc", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "best_model_wts", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "top1_test", "=", "AvgrageMeter", "(", ")", "\n", "top5_test", "=", "AvgrageMeter", "(", ")", "\n", "for", "data", "in", "model_test_data", ":", "\n", "            ", "images", ",", "labels", "=", "data", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "_", "=", "model", "(", "images", ",", "device", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "outputs", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "images", ".", "size", "(", "0", ")", "\n", "top1_test", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5_test", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "", "test_acc", "=", "top1_test", ".", "avg", "\n", "", "logger", ".", "info", "(", "'Accuracy of the network on test images: %.5f %%'", "%", "(", "test_acc", ")", ")", "\n", "\n", "model_save_path", "=", "save_dir", "+", "'/model_pkl/'", "+", "hash_key", "+", "'.pkl'", "\n", "\n", "with", "open", "(", "model_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "genotype", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "model", ".", "to", "(", "'cpu'", ")", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "hash_key", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "running_loss_avg", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "val_acc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "test_acc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "best_val_acc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "loss_list", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "val_acc_list", ",", "f", ")", "\n", "", "logger", ".", "info", "(", "'##################'", "*", "15", ")", "\n", "\n", "return", "best_val_acc", ",", "test_acc", ",", "hash_key", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.__init__": [[13, 30], ["torch.nn.MSELoss", "utils.utils_solver.make_agent_optimizer", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent.to", "utils.utils_solver.CosineLR", "models.gin_predictor.NasBenchGINPredictorAgent", "models.gin_predictor_celu.NasBenchGINPredictorAgentCELU"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to"], ["    ", "def", "__init__", "(", "self", ",", "agent_type", ",", "lr", "=", "0.01", ",", "device", "=", "None", ",", "epochs", "=", "10", ",", "train_images", "=", "10", ",", "batch_size", "=", "10", ",", "rate", "=", "10", ",", "input_dim", "=", "6", ",", "\n", "activation_fn", "=", "'relu'", ")", ":", "\n", "        ", "if", "activation_fn", "==", "'relu'", ":", "\n", "            ", "self", ".", "nas_agent", "=", "NasBenchGINPredictorAgent", "(", "input_dim", "=", "input_dim", ")", "\n", "", "elif", "activation_fn", "==", "'celu'", ":", "\n", "            ", "self", ".", "nas_agent", "=", "NasBenchGINPredictorAgentCELU", "(", "input_dim", "=", "input_dim", ")", "\n", "", "self", ".", "agent_type", "=", "agent_type", "\n", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "optimizer", "=", "make_agent_optimizer", "(", "self", ".", "nas_agent", ",", "base_lr", "=", "lr", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nas_agent", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "scheduler", "=", "CosineLR", "(", "self", ".", "optimizer", ",", "epochs", "=", "epochs", ",", "train_images", "=", "train_images", ",", "batch_size", "=", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epochs", "\n", "self", ".", "rate", "=", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit": [[31, 66], ["utils.metric_logger.MetricLogger", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent.train", "range", "list", "random.shuffle", "utils.utils_solver.gen_batch_idx", "enumerate", "logger.info", "range", "len", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "val_tensor.to.to.to", "pred.squeeze.squeeze.squeeze", "trainer_predictor.NasBenchGinPredictorTrainer.criterion", "trainer_predictor.NasBenchGinPredictorTrainer.optimizer.zero_grad", "trainer_predictor.NasBenchGinPredictorTrainer.backward", "trainer_predictor.NasBenchGinPredictorTrainer.optimizer.step", "trainer_predictor.NasBenchGinPredictorTrainer.scheduler.step", "utils.metric_logger.MetricLogger.update", "utils.metric_logger.MetricLogger.delimiter.join", "len", "gnn_lib.data.Data", "data_list.append", "target_list.append", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent", "int", "trainer_predictor.NasBenchGinPredictorTrainer.item", "edge_index[].long", "node_feature[].float", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.tools_open_domain.train_darts_cifar10.train", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.gaussian_sample_layer.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update"], ["", "def", "fit", "(", "self", ",", "edge_index", ",", "node_feature", ",", "val_accuracy", ",", "logger", "=", "None", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\" \"", ")", "\n", "self", ".", "nas_agent", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "self", ".", "batch_size", ")", "\n", "counter", "=", "0", "\n", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_idx_list", ")", ":", "\n", "                ", "counter", "+=", "len", "(", "batch_idx", ")", "\n", "data_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "target_list", ".", "append", "(", "val_accuracy", "[", "idx", "]", ")", "\n", "", "val_tensor", "=", "torch", ".", "tensor", "(", "target_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "val_tensor", "=", "val_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "# batch_nodes = F.normalize(batch_nodes, p=2, dim=-1)", "\n", "\n", "pred", "=", "self", ".", "nas_agent", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", "*", "self", ".", "rate", "\n", "pred", "=", "pred", ".", "squeeze", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "pred", ",", "val_tensor", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "epoch", "+", "int", "(", "i", "/", "30", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "", "if", "logger", ":", "\n", "            ", "logger", ".", "info", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "", "return", "meters", ".", "meters", "[", "'loss'", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred": [[67, 87], ["list", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent.eval", "utils.utils_solver.gen_batch_idx", "torch.cat", "range", "torch.no_grad", "len", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "pred_list.append", "gnn_lib.data.Data", "data_list.append", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent().squeeze", "len", "pred.unsqueeze_", "pred.size", "edge_index[].long", "node_feature[].float", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_solver.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to"], ["", "def", "pred", "(", "self", ",", "edge_index", ",", "node_feature", ")", ":", "\n", "        ", "pred_list", "=", "[", "]", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "self", ".", "nas_agent", ".", "eval", "(", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "64", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", "in", "batch_idx_list", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "pred", "=", "self", ".", "nas_agent", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", ".", "squeeze", "(", ")", "*", "self", ".", "rate", "\n", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "0", ":", "\n", "                    ", "pred", ".", "unsqueeze_", "(", "0", ")", "\n", "", "pred_list", ".", "append", "(", "pred", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.__init__": [[24, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "'darts'", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.get_type": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.query_arch": [[30, 40], ["arch_darts.ArchDarts.random_arch", "arch_darts.ArchDarts().encode_paths", "arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.random_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths"], ["", "def", "query_arch", "(", "self", ",", "\n", "arch", "=", "None", ",", "\n", "encode_paths", "=", "True", ")", ":", "\n", "        ", "if", "arch", "is", "None", ":", "\n", "            ", "arch", "=", "ArchDarts", ".", "random_arch", "(", ")", "\n", "", "if", "encode_paths", ":", "\n", "            ", "encoding", "=", "ArchDarts", "(", "arch", ")", ".", "encode_paths", "(", ")", "\n", "", "else", ":", "\n", "            ", "encoding", "=", "arch", "\n", "", "return", "(", "arch", ",", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.mutate_arch": [[41, 43], ["arch_darts.ArchDarts().mutate", "int", "arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate"], ["", "def", "mutate_arch", "(", "self", ",", "arch", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "return", "ArchDarts", "(", "arch", ")", ".", "mutate", "(", "int", "(", "mutation_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.get_path_indices": [[44, 46], ["arch_darts.ArchDarts().get_path_indices", "arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "get_path_indices", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "ArchDarts", "(", "arch", ")", ".", "get_path_indices", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.generate_random_dataset": [[47, 66], ["len", "data_darts.DataSetDarts.query_arch", "data_darts.DataSetDarts.get_path_indices", "data.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "generate_random_dataset", "(", "self", ",", "\n", "num", "=", "10", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"\n        create a dataset of randomly sampled architectues\n        test for isomorphisms using a hash map of path indices\n        use patience_factor to avoid infinite loops\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "while", "len", "(", "data", ")", "<", "num", ":", "\n", "            ", "archtuple", "=", "self", ".", "query_arch", "(", "encode_paths", "=", "encode_paths", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "archtuple", "[", "0", "]", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.get_candidates": [[67, 104], ["data_darts.DataSetDarts.get_path_indices", "range", "len", "data_darts.DataSetDarts.mutate_arch", "data_darts.DataSetDarts.query_arch", "data_darts.DataSetDarts.get_path_indices", "sorted", "candidates.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "get_candidates", "(", "self", ",", "macro_graph_dict", ",", "model_keys", ",", "\n", "num", "=", "100", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "num_best_arches", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "data", "=", "[", "macro_graph_dict", "[", "k", "]", "for", "k", "in", "model_keys", "]", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch", "=", "d", "[", "0", "]", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "if", "acq_opt_type", "in", "[", "'mutation'", ",", "'mutation_random'", "]", ":", "\n", "# mutate architectures with the lowest validation error", "\n", "            ", "best_arches", "=", "[", "arch", "[", "0", "]", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "2", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "arch", "in", "best_arches", ":", "\n", "                ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                    ", "break", "\n", "", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "mutated", "=", "self", ".", "mutate_arch", "(", "arch", ")", "\n", "archtuple", "=", "self", ".", "query_arch", "(", "mutated", ",", "\n", "encode_paths", "=", "encode_paths", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "mutated", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "archtuple", ")", "\n", "", "", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.remove_duplicates": [[105, 118], ["data_darts.DataSetDarts.get_path_indices", "unduplicated.append", "data_darts.DataSetDarts.get_path_indices", "data_darts.DataSetDarts.get_path_indices"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "remove_duplicates", "(", "self", ",", "candidates", ",", "data", ")", ":", "\n", "# input: two sets of architectues: candidates and data", "\n", "# output: candidates with arches from data removed", "\n", "\n", "        ", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "dic", "[", "self", ".", "get_path_indices", "(", "d", "[", "0", "]", ")", "]", "=", "1", "\n", "", "unduplicated", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "            ", "if", "self", ".", "get_path_indices", "(", "candidate", "[", "0", "]", ")", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "self", ".", "get_path_indices", "(", "candidate", "[", "0", "]", ")", "]", "=", "1", "\n", "unduplicated", ".", "append", "(", "candidate", ")", "\n", "", "", "return", "unduplicated", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.encode_data": [[119, 128], ["arch_darts.ArchDarts().encode_paths", "data.append", "arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths"], ["", "def", "encode_data", "(", "self", ",", "dicts", ")", ":", "\n", "# input: list of arch dictionary objects", "\n", "# output: xtrain (in binary path encoding), ytrain (val loss)", "\n", "        ", "data", "=", "[", "]", "\n", "for", "dic", "in", "dicts", ":", "\n", "            ", "arch", "=", "dic", "[", "'spec'", "]", "\n", "encoding", "=", "ArchDarts", "(", "arch", ")", ".", "encode_paths", "(", ")", "\n", "data", ".", "append", "(", "(", "arch", ",", "encoding", ",", "dic", "[", "'val_loss_avg'", "]", ",", "None", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_graph": [[129, 147], ["numpy.zeros", "train_data.append", "data_darts.DataSetDarts.assemble_matrix_ops", "temp_matrix.append", "temp_ops.extend"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_matrix_ops"], ["", "def", "assemble_graph", "(", "self", ",", "graph_dict", ",", "model_keys", ")", ":", "\n", "        ", "train_data", "=", "[", "]", "\n", "for", "k", "in", "model_keys", ":", "\n", "            ", "macro_matrix", "=", "np", ".", "zeros", "(", "(", "30", ",", "30", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "arch_info", "=", "graph_dict", "[", "k", "]", "[", "0", "]", "\n", "temp_matrix", "=", "[", "]", "\n", "temp_ops", "=", "[", "]", "\n", "for", "cell", "in", "arch_info", ":", "\n", "                ", "matrix", ",", "ops", "=", "self", ".", "assemble_matrix_ops", "(", "cell", ")", "\n", "temp_matrix", ".", "append", "(", "matrix", ")", "\n", "temp_ops", ".", "extend", "(", "ops", ")", "\n", "", "macro_matrix", "[", "0", ":", "15", ",", "0", ":", "15", "]", "=", "temp_matrix", "[", "0", "]", "\n", "macro_matrix", "[", "15", ":", ",", "15", ":", "]", "=", "temp_matrix", "[", "1", "]", "\n", "\n", "macro_matrix", "[", "14", ",", "15", "]", "=", "1", "\n", "macro_matrix", "[", "14", ",", "16", "]", "=", "1", "\n", "train_data", ".", "append", "(", "[", "macro_matrix", ",", "temp_ops", "]", ")", "\n", "", "return", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_matrix_ops": [[148, 207], ["numpy.zeros", "enumerate", "normal_node_ops.append", "numpy.any", "numpy.any", "numpy.any", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "assemble_matrix_ops", "(", "self", ",", "normal_cell", ")", ":", "\n", "        ", "normal_adjacency", "=", "np", ".", "zeros", "(", "(", "15", ",", "15", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "normal_node_ops", "=", "[", "'input'", ",", "'input'", "]", "\n", "for", "j", ",", "(", "idx", ",", "op", ")", "in", "enumerate", "(", "normal_cell", ")", ":", "\n", "            ", "if", "j", "<=", "1", ":", "\n", "                ", "normal_adjacency", "[", "idx", ",", "j", "+", "2", "]", "=", "1", "\n", "normal_node_ops", ".", "append", "(", "OPS", "[", "op", "]", ")", "\n", "if", "j", "==", "1", ":", "\n", "                    ", "normal_node_ops", ".", "append", "(", "'concat'", ")", "\n", "", "", "elif", "1", "<", "j", "<=", "3", ":", "\n", "                ", "if", "idx", "==", "2", ":", "\n", "                    ", "temp_idx", "=", "4", "\n", "", "else", ":", "\n", "                    ", "temp_idx", "=", "idx", "\n", "", "normal_adjacency", "[", "temp_idx", ",", "j", "+", "3", "]", "=", "1", "\n", "normal_node_ops", ".", "append", "(", "OPS", "[", "op", "]", ")", "\n", "if", "j", "==", "3", ":", "\n", "                    ", "normal_node_ops", ".", "append", "(", "'concat'", ")", "\n", "", "", "elif", "3", "<", "j", "<=", "5", ":", "\n", "                ", "if", "idx", "==", "2", ":", "\n", "                    ", "temp_idx", "=", "4", "\n", "", "elif", "idx", "==", "3", ":", "\n", "                    ", "temp_idx", "=", "7", "\n", "", "else", ":", "\n", "                    ", "temp_idx", "=", "idx", "\n", "", "normal_adjacency", "[", "temp_idx", ",", "j", "+", "4", "]", "=", "1", "\n", "normal_node_ops", ".", "append", "(", "OPS", "[", "op", "]", ")", "\n", "if", "j", "==", "5", ":", "\n", "                    ", "normal_node_ops", ".", "append", "(", "'concat'", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "idx", "==", "2", ":", "\n", "                    ", "temp_idx", "=", "4", "\n", "", "elif", "idx", "==", "3", ":", "\n", "                    ", "temp_idx", "=", "7", "\n", "", "elif", "idx", "==", "4", ":", "\n", "                    ", "temp_idx", "=", "10", "\n", "", "else", ":", "\n", "                    ", "temp_idx", "=", "idx", "\n", "", "normal_adjacency", "[", "temp_idx", ",", "j", "+", "5", "]", "=", "1", "\n", "normal_node_ops", ".", "append", "(", "OPS", "[", "op", "]", ")", "\n", "if", "j", "==", "7", ":", "\n", "                    ", "normal_node_ops", ".", "append", "(", "'concat'", ")", "\n", "", "", "", "normal_adjacency", "[", "2", ",", "4", "]", "=", "1", "\n", "normal_adjacency", "[", "3", ",", "4", "]", "=", "1", "\n", "normal_adjacency", "[", "5", ",", "7", "]", "=", "1", "\n", "normal_adjacency", "[", "6", ",", "7", "]", "=", "1", "\n", "normal_adjacency", "[", "8", ",", "10", "]", "=", "1", "\n", "normal_adjacency", "[", "9", ",", "10", "]", "=", "1", "\n", "normal_adjacency", "[", "11", ",", "13", "]", "=", "1", "\n", "normal_adjacency", "[", "12", ",", "13", "]", "=", "1", "\n", "normal_adjacency", "[", "13", ",", "14", "]", "=", "1", "\n", "if", "not", "np", ".", "any", "(", "normal_adjacency", "[", "4", "]", ")", ":", "\n", "            ", "normal_adjacency", "[", "4", ",", "14", "]", "=", "1", "\n", "", "if", "not", "np", ".", "any", "(", "normal_adjacency", "[", "7", "]", ")", ":", "\n", "            ", "normal_adjacency", "[", "7", ",", "14", "]", "=", "1", "\n", "", "if", "not", "np", ".", "any", "(", "normal_adjacency", "[", "10", ",", "13", "]", ")", ":", "\n", "            ", "normal_adjacency", "[", "10", ",", "14", "]", "=", "1", "\n", "", "normal_node_ops", ".", "append", "(", "'output'", ")", "\n", "return", "normal_adjacency", ",", "normal_node_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.data_darts.DataSetDarts.assemble_cifar10_neural_net": [[208, 232], ["utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "models_darts.datrs_neuralnet.DartsCifar10NeuralNet", "logger.info", "logger.info", "utils.utils_darts.count_parameters_in_MB", "hashlib.sha256", "str().encode", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.count_parameters_in_MB"], ["", "def", "assemble_cifar10_neural_net", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "darts_neural_dict", "=", "{", "}", "\n", "parameters", "=", "{", "\n", "'init_channels'", ":", "16", ",", "\n", "'cifar_classed'", ":", "10", ",", "\n", "'layers'", ":", "8", ",", "\n", "'auxiliary'", ":", "False", ",", "\n", "'stem_mult'", ":", "3", "\n", "}", "\n", "for", "data", "in", "data_dict", ":", "\n", "            ", "genotype", "=", "convert_to_genotype", "(", "data", "[", "0", "]", ")", "\n", "k", "=", "sha256", "(", "str", "(", "genotype", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "dart_neural", "=", "DartsCifar10NeuralNet", "(", "C", "=", "parameters", "[", "'init_channels'", "]", ",", "\n", "num_classes", "=", "parameters", "[", "'cifar_classed'", "]", ",", "\n", "layers", "=", "parameters", "[", "'layers'", "]", ",", "\n", "auxiliary", "=", "parameters", "[", "'auxiliary'", "]", ",", "\n", "genotype", "=", "genotype", ",", "\n", "key", "=", "k", ",", "\n", "stem_mult", "=", "parameters", "[", "'stem_mult'", "]", ")", "\n", "darts_neural_dict", "[", "k", "]", "=", "dart_neural", "\n", "logger", ".", "info", "(", "k", ")", "\n", "logger", ".", "info", "(", "count_parameters_in_MB", "(", "dart_neural", ")", ")", "\n", "dart_neural", ".", "drop_path_prob", "=", "0", "\n", "", "return", "darts_neural_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.arch_darts.ArchDarts.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "arch", ")", ":", "\n", "        ", "self", ".", "arch", "=", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.arch_darts.ArchDarts.random_arch": [[22, 41], ["range", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "normal.extend", "reduction.extend", "range", "range", "range", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "random_arch", "(", "cls", ")", ":", "\n", "# output a uniformly random architecture spec", "\n", "# from the DARTS repository", "\n", "# https://github.com/quark0/darts", "\n", "\n", "        ", "normal", "=", "[", "]", "\n", "reduction", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "ops", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "OPS", ")", ")", ",", "NUM_VERTICES", ")", "\n", "\n", "# input nodes for conv", "\n", "nodes_in_normal", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "# input nodes for reduce", "\n", "nodes_in_reduce", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "\n", "normal", ".", "extend", "(", "[", "(", "nodes_in_normal", "[", "0", "]", ",", "ops", "[", "0", "]", ")", ",", "(", "nodes_in_normal", "[", "1", "]", ",", "ops", "[", "1", "]", ")", "]", ")", "\n", "reduction", ".", "extend", "(", "[", "(", "nodes_in_reduce", "[", "0", "]", ",", "ops", "[", "2", "]", ")", ",", "(", "nodes_in_reduce", "[", "1", "]", ",", "ops", "[", "3", "]", ")", "]", ")", "\n", "", "return", "(", "normal", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.arch_darts.ArchDarts.mutate": [[42, 67], ["range", "mutation.append", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "mutation[].append", "len", "numpy.random.choice", "numpy.random.choice", "[].append", "len"], "methods", ["None"], ["", "def", "mutate", "(", "self", ",", "edits", ")", ":", "\n", "        ", "\"\"\" mutate a single arch \"\"\"", "\n", "# first convert tuple to array so that it is mutable", "\n", "mutation", "=", "[", "]", "\n", "for", "cell", "in", "self", ".", "arch", ":", "\n", "            ", "mutation", ".", "append", "(", "[", "]", ")", "\n", "for", "pair", "in", "cell", ":", "\n", "                ", "mutation", "[", "-", "1", "]", ".", "append", "(", "[", "]", ")", "\n", "for", "num", "in", "pair", ":", "\n", "                    ", "mutation", "[", "-", "1", "]", "[", "-", "1", "]", ".", "append", "(", "num", ")", "\n", "# make mutations", "\n", "", "", "", "for", "_", "in", "range", "(", "edits", ")", ":", "\n", "            ", "cell", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "\n", "pair", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "OPS", ")", ")", "\n", "num", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "\n", "if", "num", "==", "1", ":", "\n", "                ", "mutation", "[", "cell", "]", "[", "pair", "]", "[", "num", "]", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "OPS", ")", ")", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "pair", "//", "2", "+", "2", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "inputs", ")", "\n", "if", "pair", "%", "2", "==", "0", "and", "mutation", "[", "cell", "]", "[", "pair", "+", "1", "]", "[", "num", "]", "!=", "choice", ":", "\n", "                    ", "mutation", "[", "cell", "]", "[", "pair", "]", "[", "num", "]", "=", "choice", "\n", "", "elif", "pair", "%", "2", "!=", "0", "and", "mutation", "[", "cell", "]", "[", "pair", "-", "1", "]", "[", "num", "]", "!=", "choice", ":", "\n", "                    ", "mutation", "[", "cell", "]", "[", "pair", "]", "[", "num", "]", "=", "choice", "\n", "", "", "", "return", "mutation", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.arch_darts.ArchDarts.get_paths": [[68, 98], ["enumerate", "range", "max", "max", "len", "[].append", "paths[].append", "len", "len", "[].append", "paths[].append", "[].append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" return all paths from input to output \"\"\"", "\n", "\n", "path_builder", "=", "[", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "]", "]", "\n", "paths", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "arch", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "OPS", ")", ")", ":", "\n", "              ", "if", "cell", "[", "j", "]", "[", "0", "]", "==", "0", ":", "\n", "                  ", "path", "=", "[", "INPUT_1", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "", "elif", "cell", "[", "j", "]", "[", "0", "]", "==", "1", ":", "\n", "                  ", "path", "=", "[", "INPUT_2", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "", "else", ":", "\n", "                  ", "for", "path", "in", "path_builder", "[", "i", "]", "[", "cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", ":", "\n", "                      ", "path", "=", "[", "*", "path", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "\n", "# check if there are paths of length >=5", "\n", "", "", "", "", "contains_long_path", "=", "[", "False", ",", "False", "]", "\n", "if", "max", "(", "[", "len", "(", "path", ")", "for", "path", "in", "paths", "[", "0", "]", "]", ")", ">=", "5", ":", "\n", "            ", "contains_long_path", "[", "0", "]", "=", "True", "\n", "", "if", "max", "(", "[", "len", "(", "path", ")", "for", "path", "in", "paths", "[", "1", "]", "]", ")", ">=", "5", ":", "\n", "            ", "contains_long_path", "[", "1", "]", "=", "True", "\n", "\n", "", "return", "paths", ",", "contains_long_path", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.arch_darts.ArchDarts.get_path_indices": [[99, 139], ["arch_darts.ArchDarts.get_paths", "len", "enumerate", "sum", "tuple", "sum", "range", "range", "path_indices.append", "range", "len", "path_indices.append", "OPS.index"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths"], ["", "def", "get_path_indices", "(", "self", ",", "long_paths", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 4 * (8^0 + ... + 8^4) paths total\n        If long_paths = False, we give a single boolean to all paths of\n        size 4, so there are only 4 * (1 + 8^0 + ... + 8^3) paths\n        \"\"\"", "\n", "paths", ",", "contains_long_path", "=", "self", ".", "get_paths", "(", ")", "\n", "normal_paths", ",", "reduce_paths", "=", "paths", "\n", "num_ops", "=", "len", "(", "OPS", ")", "\n", "\"\"\"\n        Compute the max number of paths per input per cell.\n        Since there are two cells and two inputs per cell, \n        total paths = 4 * max_paths\n        \"\"\"", "\n", "if", "not", "long_paths", ":", "\n", "            ", "max_paths", "=", "1", "+", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "max_paths", "=", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", "]", ")", "\n", "", "path_indices", "=", "[", "]", "\n", "\n", "# set the base index based on the cell and the input", "\n", "for", "i", ",", "paths", "in", "enumerate", "(", "(", "normal_paths", ",", "reduce_paths", ")", ")", ":", "\n", "            ", "for", "path", "in", "paths", ":", "\n", "                ", "index", "=", "i", "*", "2", "*", "max_paths", "\n", "if", "path", "[", "0", "]", "==", "INPUT_2", ":", "\n", "                    ", "index", "+=", "max_paths", "\n", "\n", "# recursively compute the index of the path", "\n", "", "for", "j", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", ":", "\n", "                    ", "if", "j", "==", "len", "(", "path", ")", "-", "1", ":", "\n", "                        ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "elif", "j", "==", "(", "NUM_VERTICES", "-", "1", ")", "and", "not", "long_paths", ":", "\n", "                        ", "path_indices", ".", "append", "(", "2", "*", "(", "i", "+", "1", ")", "*", "max_paths", "-", "1", ")", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "index", "+=", "num_ops", "**", "j", "*", "(", "OPS", ".", "index", "(", "path", "[", "j", "+", "1", "]", ")", "+", "1", ")", "\n", "\n", "", "", "", "", "return", "(", "tuple", "(", "path_indices", ")", ",", "contains_long_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.arch_darts.ArchDarts.encode_paths": [[140, 154], ["arch_darts.ArchDarts.get_path_indices", "len", "numpy.zeros", "sum", "sum", "range", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "encode_paths", "(", "self", ",", "long_paths", "=", "True", ")", ":", "\n", "# output one-hot encoding of paths", "\n", "        ", "path_indices", ",", "_", "=", "self", ".", "get_path_indices", "(", "long_paths", "=", "long_paths", ")", "\n", "num_ops", "=", "len", "(", "OPS", ")", "\n", "\n", "if", "not", "long_paths", ":", "\n", "            ", "max_paths", "=", "1", "+", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "max_paths", "=", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", "]", ")", "\n", "\n", "", "path_encoding", "=", "np", ".", "zeros", "(", "4", "*", "max_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.arch_darts.ArchDarts.path_distance": [[155, 159], ["numpy.sum", "numpy.array", "arch_darts.ArchDarts.encode_paths", "numpy.array", "other.encode_paths"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths"], ["", "def", "path_distance", "(", "self", ",", "other", ")", ":", "\n", "# compute the distance between two architectures", "\n", "# by comparing their path encodings", "\n", "        ", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "encode_paths", "(", ")", "!=", "np", ".", "array", "(", "other", ".", "encode_paths", "(", ")", ")", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data_darts.build_ss.build_open_search_space_dataset": [[4, 9], ["nas_lib.data_darts.data_darts.DataSetDarts", "ValueError"], "function", ["None"], ["def", "build_open_search_space_dataset", "(", "search_spaces", ")", ":", "\n", "    ", "if", "search_spaces", "==", "'darts'", ":", "\n", "        ", "return", "DataSetDarts", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"This architecture datasets does not support!\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.convert2np": [[31, 74], ["dict", "os.listdir", "list", "os.path.join", "dict", "numpy.array", "list", "open", "enumerate", "range", "pickle.load", "len", "enumerate", "total_dicts[].append", "print", "print", "nested_dicts[].append"], "function", ["None"], ["def", "convert2np", "(", "root_path", ",", "model_lists", ",", "end", "=", "None", ")", ":", "\n", "    ", "total_dicts", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "        ", "total_dicts", "[", "m", "]", "=", "[", "]", "\n", "", "files", "=", "os", ".", "listdir", "(", "root_path", ")", "\n", "if", "end", ":", "\n", "        ", "files", "=", "list", "(", "files", ")", "[", ":", "end", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "list", "(", "files", ")", "\n", "", "for", "f", "in", "files", ":", "\n", "        ", "if", "'log'", "in", "f", "or", "'full'", "in", "f", ":", "\n", "            ", "continue", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "f", ")", "\n", "nested_dicts", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "            ", "nested_dicts", "[", "m", "]", "=", "[", "]", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "nf", ":", "\n", "            ", "try", ":", "\n", "                ", "algorithm_params", ",", "metann_params", ",", "results", ",", "walltimes", "=", "pickle", ".", "load", "(", "nf", ")", "\n", "# algorithm_params, metann_params, results, walltimes, _, _ = pickle.load(nf)", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "print", "(", "file_path", ")", "\n", "", "algorithm_results_dict", "=", "{", "}", "\n", "for", "idx", ",", "algo_info", "in", "enumerate", "(", "algorithm_params", ")", ":", "\n", "                ", "algo_name", "=", "algo_info", "[", "'algo_name'", "]", "\n", "if", "algo_name", "==", "'gp_bayesopt'", ":", "\n", "                    ", "if", "'distance'", "not", "in", "algo_info", ":", "\n", "                        ", "algo_name", "=", "'BO w. GP'", "\n", "", "else", ":", "\n", "                        ", "if", "algo_info", "[", "'distance'", "]", "==", "'adj'", ":", "\n", "                            ", "algo_name", "=", "'BO w. GP'", "\n", "", "else", ":", "\n", "                            ", "algo_name", "=", "'NASBOT'", "\n", "", "", "", "algorithm_results_dict", "[", "algo_mapping", "[", "algo_name", "]", "]", "=", "results", "[", "idx", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "results", "[", "0", "]", ")", ")", ":", "\n", "                ", "for", "idx", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "# nested_dicts[m].append(results[idx][i][1])", "\n", "                    ", "nested_dicts", "[", "m", "]", ".", "append", "(", "algorithm_results_dict", "[", "m", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "", "", "for", "m", "in", "model_lists", ":", "\n", "                ", "total_dicts", "[", "m", "]", ".", "append", "(", "nested_dicts", "[", "m", "]", ")", "\n", "", "", "", "results_np", "=", "{", "m", ":", "np", ".", "array", "(", "total_dicts", "[", "m", "]", ")", "for", "m", "in", "model_lists", "}", "\n", "return", "results_np", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.convert2np_2": [[76, 107], ["dict", "os.listdir", "list", "os.path.join", "dict", "numpy.array", "list", "open", "range", "pickle.load", "len", "enumerate", "total_dicts[].append", "print", "print", "nested_dicts[].append"], "function", ["None"], ["", "def", "convert2np_2", "(", "root_path", ",", "model_lists", ",", "end", "=", "None", ")", ":", "\n", "    ", "total_dicts", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "        ", "total_dicts", "[", "m", "]", "=", "[", "]", "\n", "", "files", "=", "os", ".", "listdir", "(", "root_path", ")", "\n", "if", "end", ":", "\n", "        ", "files", "=", "list", "(", "files", ")", "[", ":", "end", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "list", "(", "files", ")", "\n", "", "for", "f", "in", "files", ":", "\n", "        ", "if", "'log'", "in", "f", "or", "'full'", "in", "f", ":", "\n", "            ", "continue", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "f", ")", "\n", "nested_dicts", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "            ", "nested_dicts", "[", "m", "]", "=", "[", "]", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "nf", ":", "\n", "            ", "try", ":", "\n", "                ", "algorithm_params", ",", "metann_params", ",", "results", ",", "walltimes", "=", "pickle", ".", "load", "(", "nf", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "print", "(", "file_path", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "results", "[", "0", "]", ")", ")", ":", "\n", "                ", "for", "idx", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "                    ", "nested_dicts", "[", "m", "]", ".", "append", "(", "results", "[", "idx", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "", "", "for", "m", "in", "model_lists", ":", "\n", "                ", "total_dicts", "[", "m", "]", ".", "append", "(", "nested_dicts", "[", "m", "]", ")", "\n", "", "", "", "results_np", "=", "{", "m", ":", "np", ".", "array", "(", "total_dicts", "[", "m", "]", ")", "for", "m", "in", "model_lists", "}", "\n", "if", "\"rate\"", "in", "algorithm_params", "[", "0", "]", ":", "\n", "        ", "results_np", "[", "\"rate\"", "]", "=", "[", "algorithm_params", "[", "0", "]", "[", "\"rate\"", "]", ",", "algorithm_params", "[", "1", "]", "[", "\"rate\"", "]", "]", "\n", "", "return", "results_np", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.getmean": [[109, 119], ["numpy.mean", "numpy.median", "ValueError", "numpy.percentile"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.SmoothedValue.median"], ["", "def", "getmean", "(", "results_np", ",", "model_lists", ",", "category", "=", "'mean'", ")", ":", "\n", "    ", "if", "category", "==", "'mean'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "mean", "(", "results_np", "[", "m", "]", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "elif", "category", "==", "'medium'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "median", "(", "results_np", "[", "m", "]", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "elif", "category", "==", "'percentile'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "percentile", "(", "results_np", "[", "m", "]", ",", "50", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'this type operation is not supported!'", ")", "\n", "", "return", "results_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.get_quantile": [[121, 124], ["numpy.percentile"], "function", ["None"], ["", "def", "get_quantile", "(", "results_np", ",", "model_lists", ",", "divider", "=", "30", ")", ":", "\n", "    ", "results_quantile", "=", "{", "m", ":", "np", ".", "percentile", "(", "results_np", "[", "m", "]", ",", "divider", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "return", "results_quantile", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.get_bounder": [[126, 132], ["dict", "numpy.stack"], "function", ["None"], ["", "def", "get_bounder", "(", "total_mean", ",", "quantile_30", ",", "quantile_70", ",", "model_lists", ",", "absolute", "=", "False", ")", ":", "\n", "    ", "bound_dict", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "        ", "bound_dict", "[", "m", "]", "=", "np", ".", "stack", "(", "[", "(", "total_mean", "[", "m", "]", "-", "quantile_30", "[", "m", "]", ")", ",", "\n", "(", "quantile_70", "[", "m", "]", "-", "total_mean", "[", "m", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "bound_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_nasbench_101": [[134, 185], ["visualize_close_domain_reverse.getmean", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_bounder", "numpy.array", "matplotlib.subplots", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "visualize_close_domain_reverse.convert2np", "visualize_close_domain_reverse.convert2np_2", "getmean.items", "enumerate", "ax.set_yticks", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "numpy.arange", "ax.set_yticks", "matplotlib.errorbar", "numpy.arange", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.convert2np_2", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_nasbench_101", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ",", "order", "=", "True", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "if", "order", ":", "\n", "        ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "model_lists", "=", "model_lists", ",", "end", "=", "None", ")", "\n", "", "else", ":", "\n", "        ", "np_datas_dict", "=", "convert2np_2", "(", "root_path", ",", "model_lists", "=", "model_lists", ",", "end", "=", "None", ")", "\n", "# EA_reuslt = np_datas_dict['EA']", "\n", "# print(EA_reuslt.shape)", "\n", "# print(np.max(EA_reuslt, axis=0))", "\n", "# print(np.min(EA_reuslt, axis=0))", "\n", "", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", ",", "150", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "15", "\n", "lowerlimits", "=", "[", "True", "]", "*", "15", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "3", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "# ax.set_yticks(np.arange(92.5, 94.4, 0.2))", "\n", "", "", "", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "5.8", ",", "7.4", ",", "0.2", ")", ")", "\n", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "5.8", ",", "7.2", ",", "0.2", ")", ")", "\n", "", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Test Error [%] of Best Neural Net'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_nasbench_101_diff_training": [[187, 227], ["visualize_close_domain_reverse.convert2np", "visualize_close_domain_reverse.getmean", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_bounder", "numpy.array", "matplotlib.subplots", "ax.set_yticks", "fig.set_dpi", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "getmean.items", "enumerate", "numpy.arange", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_nasbench_101_diff_training", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "search_strategy", "=", "'gin_predictor'", ",", "\n", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "model_lists", "=", "model_lists", ",", "end", "=", "None", ")", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", ",", "150", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "3", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "# ax.set_yticks(np.arange(92.5, 94.4, 0.2))", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "5.8", ",", "7.4", ",", "0.2", ")", ")", "\n", "# ax.grid(True)", "\n", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax", ".", "set_title", "(", "search_strategy", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Test Error [%] of Best Neural Net'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_nasbench_201": [[229, 305], ["visualize_close_domain_reverse.getmean", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_bounder", "numpy.array", "matplotlib.subplots", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "visualize_close_domain_reverse.convert2np", "visualize_close_domain_reverse.convert2np_2", "convert2np_2.pop", "getmean.pop", "getmean.pop", "convert2np_2.pop", "convert2np_2.pop", "getmean.items", "enumerate", "ax.set_yticks", "str", "str", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "numpy.arange", "ax.set_yticks", "int", "int", "matplotlib.errorbar", "numpy.arange", "ax.set_yticks", "ValueError", "matplotlib.plot", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.convert2np_2", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_nasbench_201", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "train_data", "=", "'cifar100'", ",", "draw_type", "=", "'ERRORBAR'", ",", "\n", "verbose", "=", "1", ",", "order", "=", "True", ",", "comparison_type", "=", "\"Default\"", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "if", "order", ":", "\n", "        ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "", "else", ":", "\n", "        ", "np_datas_dict", "=", "convert2np_2", "(", "root_path", ",", "model_lists", "=", "model_lists", ",", "end", "=", "None", ")", "\n", "", "if", "\"rate\"", "in", "np_datas_dict", ":", "\n", "        ", "rate_val", "=", "np_datas_dict", ".", "pop", "(", "\"rate\"", ")", "\n", "", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "# np_mean_dict_temp =copy.deepcopy(np_mean_dict)", "\n", "if", "comparison_type", "==", "\"scale_factor\"", ":", "\n", "        ", "key1", "=", "\"SCALING FACTOR=\"", "+", "str", "(", "int", "(", "rate_val", "[", "0", "]", ")", ")", "\n", "key2", "=", "\"SCALING FACTOR=\"", "+", "str", "(", "int", "(", "rate_val", "[", "1", "]", ")", ")", "\n", "np_mean_dict", "[", "key1", "]", "=", "np_mean_dict", "[", "\"SCALING FACTOR=#\"", "]", "\n", "np_mean_dict", "[", "key2", "]", "=", "np_mean_dict", "[", "\"SCALING FACTOR=*\"", "]", "\n", "np_mean_dict", ".", "pop", "(", "\"SCALING FACTOR=#\"", ")", "\n", "np_mean_dict", ".", "pop", "(", "\"SCALING FACTOR=*\"", ")", "\n", "model_lists", "=", "[", "key1", ",", "key2", ",", "\"NPENAS-GT\"", "]", "\n", "\n", "np_datas_dict", "[", "key1", "]", "=", "np_datas_dict", "[", "\"SCALING FACTOR=#\"", "]", "\n", "np_datas_dict", "[", "key2", "]", "=", "np_datas_dict", "[", "\"SCALING FACTOR=*\"", "]", "\n", "np_datas_dict", ".", "pop", "(", "\"SCALING FACTOR=#\"", ")", "\n", "np_datas_dict", ".", "pop", "(", "\"SCALING FACTOR=*\"", ")", "\n", "\n", "", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "10", "\n", "lowerlimits", "=", "[", "True", "]", "*", "10", "\n", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "6", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "", "", "", "if", "train_data", "==", "'cifar10-valid'", ":", "\n", "# ax.set_yticks(np.arange(8.9, 10.9, 0.2))", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "5.7", ",", "7.5", ",", "0.2", ")", ")", "\n", "", "elif", "train_data", "==", "'cifar100'", ":", "\n", "# ax.set_yticks(np.arange(26.5, 31, 0.5))", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "26.5", ",", "32", ",", "0.5", ")", ")", "\n", "", "elif", "train_data", "==", "'ImageNet16-120'", ":", "\n", "# ax.set_yticks(np.arange(53.2, 62, 0.5))", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "53.2", ",", "58.2", ",", "0.5", ")", ")", "\n", "# ax.set_yticks(np.arange(53.2, 57.5, 0.5))", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Train data type {train_data} does not support!'", ")", "\n", "\n", "\n", "# ax.grid(True)", "\n", "", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Test Error [%] of Best Neural Net'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_nasbench_nlp": [[307, 372], ["visualize_close_domain_reverse.getmean", "visualize_close_domain_reverse.getmean", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_bounder", "numpy.array", "matplotlib.subplots", "ax.set_yticks", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "visualize_close_domain_reverse.convert2np", "visualize_close_domain_reverse.convert2np_2", "convert2np_2.pop", "getmean.pop", "getmean.pop", "convert2np_2.pop", "convert2np_2.pop", "getmean.items", "enumerate", "numpy.arange", "str", "str", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "int", "int", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.convert2np_2", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_nasbench_nlp", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ",", "order", "=", "True", ",", "\n", "comparison_type", "=", "\"Default\"", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "if", "order", ":", "\n", "        ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "", "else", ":", "\n", "        ", "np_datas_dict", "=", "convert2np_2", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "", "if", "\"rate\"", "in", "np_datas_dict", ":", "\n", "        ", "rate_val", "=", "np_datas_dict", ".", "pop", "(", "\"rate\"", ")", "\n", "\n", "", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "if", "comparison_type", "==", "\"scale_factor\"", ":", "\n", "        ", "key1", "=", "\"SCALING FACTOR=\"", "+", "str", "(", "int", "(", "rate_val", "[", "0", "]", ")", ")", "\n", "key2", "=", "\"SCALING FACTOR=\"", "+", "str", "(", "int", "(", "rate_val", "[", "1", "]", ")", ")", "\n", "np_mean_dict", "[", "key1", "]", "=", "np_mean_dict", "[", "\"SCALING FACTOR=#\"", "]", "\n", "np_mean_dict", "[", "key2", "]", "=", "np_mean_dict", "[", "\"SCALING FACTOR=*\"", "]", "\n", "np_mean_dict", ".", "pop", "(", "\"SCALING FACTOR=#\"", ")", "\n", "np_mean_dict", ".", "pop", "(", "\"SCALING FACTOR=*\"", ")", "\n", "model_lists", "=", "[", "key1", ",", "key2", ",", "\"NPENAS-GT\"", "]", "\n", "\n", "np_datas_dict", "[", "key1", "]", "=", "np_datas_dict", "[", "\"SCALING FACTOR=#\"", "]", "\n", "np_datas_dict", "[", "key2", "]", "=", "np_datas_dict", "[", "\"SCALING FACTOR=*\"", "]", "\n", "np_datas_dict", ".", "pop", "(", "\"SCALING FACTOR=#\"", ")", "\n", "np_datas_dict", ".", "pop", "(", "\"SCALING FACTOR=*\"", ")", "\n", "", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "10", "\n", "lowerlimits", "=", "[", "True", "]", "*", "10", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "6", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "# ax.set_yticks(np.arange(4.5, 4.9, 0.05))", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "4.57", ",", "4.75", ",", "0.05", ")", ")", "\n", "# ax.set_yticks(np.arange(4.57, 4.7, 0.05))", "\n", "# ax.grid(True)", "\n", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Test Log Perplexity of Best Neural Net'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "# plt.legend(loc='lower left')", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_nasbench_asr": [[374, 441], ["visualize_close_domain_reverse.getmean", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_bounder", "numpy.array", "matplotlib.subplots", "ax.set_yticks", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "visualize_close_domain_reverse.convert2np", "visualize_close_domain_reverse.convert2np_2", "convert2np_2.pop", "getmean.pop", "getmean.pop", "convert2np_2.pop", "convert2np_2.pop", "getmean.items", "enumerate", "numpy.arange", "str", "str", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "int", "int", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.convert2np_2", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_nasbench_asr", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ",", "order", "=", "True", ",", "\n", "comparison_type", "=", "\"Default\"", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "if", "order", ":", "\n", "        ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "", "else", ":", "\n", "        ", "np_datas_dict", "=", "convert2np_2", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "\n", "", "if", "\"rate\"", "in", "np_datas_dict", ":", "\n", "        ", "rate_val", "=", "np_datas_dict", ".", "pop", "(", "\"rate\"", ")", "\n", "\n", "", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "if", "comparison_type", "==", "\"scale_factor\"", ":", "\n", "        ", "key1", "=", "\"SCALING FACTOR=\"", "+", "str", "(", "int", "(", "rate_val", "[", "0", "]", ")", ")", "\n", "key2", "=", "\"SCALING FACTOR=\"", "+", "str", "(", "int", "(", "rate_val", "[", "1", "]", ")", ")", "\n", "np_mean_dict", "[", "key1", "]", "=", "np_mean_dict", "[", "\"SCALING FACTOR=#\"", "]", "\n", "np_mean_dict", "[", "key2", "]", "=", "np_mean_dict", "[", "\"SCALING FACTOR=*\"", "]", "\n", "np_mean_dict", ".", "pop", "(", "\"SCALING FACTOR=#\"", ")", "\n", "np_mean_dict", ".", "pop", "(", "\"SCALING FACTOR=*\"", ")", "\n", "model_lists", "=", "[", "key1", ",", "key2", ",", "\"NPENAS-GT\"", "]", "\n", "\n", "np_datas_dict", "[", "key1", "]", "=", "np_datas_dict", "[", "\"SCALING FACTOR=#\"", "]", "\n", "np_datas_dict", "[", "key2", "]", "=", "np_datas_dict", "[", "\"SCALING FACTOR=*\"", "]", "\n", "np_datas_dict", ".", "pop", "(", "\"SCALING FACTOR=#\"", ")", "\n", "np_datas_dict", ".", "pop", "(", "\"SCALING FACTOR=*\"", ")", "\n", "\n", "", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "10", "\n", "lowerlimits", "=", "[", "True", "]", "*", "10", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "6", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "# ax.set_yticks(np.arange(0.217, 0.224, 0.002))", "\n", "# ax.set_yticks(np.arange(21.7, 22.4, 0.2)) # error bar", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "21.8", ",", "22.4", ",", "0.1", ")", ")", "# mean error", "\n", "# ax.set_yticks(np.arange(21.7, 25, 0.2))", "\n", "# ax.grid(True)", "\n", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Test Phoneme Error Rate [%] of Best Neural Net'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "# plt.legend(loc='lower left')", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_priori_scalar": [[443, 484], ["visualize_close_domain_reverse.convert2np", "visualize_close_domain_reverse.getmean", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_bounder", "numpy.array", "matplotlib.subplots", "ax.set_yticks", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "getmean.items", "enumerate", "numpy.arange", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_priori_scalar", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", ",", "150", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "15", "\n", "lowerlimits", "=", "[", "True", "]", "*", "15", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "3", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "5.6", ",", "7.4", ",", "0.2", ")", ")", "\n", "# ax.grid(True)", "\n", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ",", "fontsize", "=", "11", ")", "\n", "ax", ".", "set_ylabel", "(", "'Test Error of Best Neural Net'", ",", "fontsize", "=", "11", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "11", ")", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.draw_plot_evaluation_compare": [[486, 530], ["visualize_close_domain_reverse.convert2np_2", "visualize_close_domain_reverse.getmean", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_quantile", "visualize_close_domain_reverse.get_bounder", "numpy.array", "matplotlib.subplots", "ax.set_yticks", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "getmean.items", "enumerate", "numpy.arange", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain_reverse.convert2np_2", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_evaluation_compare", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "model_lists", "=", "[", "\"1\"", ",", "\"10\"", ",", "\"20\"", ",", "\"30\"", "]", "\n", "# np_datas_dict = convert2np(root_path, end=None, model_lists=model_lists)", "\n", "np_datas_dict", "=", "convert2np_2", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", ",", "150", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "15", "\n", "lowerlimits", "=", "[", "True", "]", "*", "15", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "3", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "5.7", ",", "6.9", ",", "0.2", ")", ")", "\n", "# ax.grid(True)", "\n", "fig", ".", "set_dpi", "(", "600.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ",", "fontsize", "=", "12", ")", "\n", "# ax.set_ylabel('Test Error of Best Architecture (%)', fontsize=12)", "\n", "ax", ".", "set_ylabel", "(", "'Test Error [%] of Best Neural Net'", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "12", ")", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot": [[5, 39], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "range", "range", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "len", "graphviz.Digraph.node", "graphviz.Digraph.edge", "dict", "dict", "len", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.node"], ["def", "plot", "(", "genotype", ",", "filename", ")", ":", "\n", "    ", "g", "=", "Digraph", "(", "\n", "format", "=", "'pdf'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", "\n", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "assert", "len", "(", "genotype", ")", "%", "2", "==", "0", "\n", "steps", "=", "len", "(", "genotype", ")", "//", "2", "\n", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "        ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "        ", "for", "k", "in", "[", "2", "*", "i", ",", "2", "*", "i", "+", "1", "]", ":", "\n", "            ", "op", ",", "j", "=", "genotype", "[", "k", "]", "\n", "if", "j", "==", "0", ":", "\n", "                ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "                ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "                ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "        ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.load_model": [[41, 45], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_model", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "gtyp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "gtyp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np": [[11, 40], ["dict", "os.listdir", "list", "os.path.join", "dict", "numpy.array", "list", "open", "range", "pickle.load", "len", "enumerate", "total_dicts[].append", "print", "print", "nested_dicts[].append"], "function", ["None"], ["def", "convert2np", "(", "root_path", ",", "end", "=", "None", ")", ":", "\n", "    ", "total_dicts", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "        ", "total_dicts", "[", "m", "]", "=", "[", "]", "\n", "", "files", "=", "os", ".", "listdir", "(", "root_path", ")", "\n", "if", "end", ":", "\n", "        ", "files", "=", "list", "(", "files", ")", "[", ":", "end", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "list", "(", "files", ")", "\n", "", "for", "f", "in", "files", ":", "\n", "        ", "if", "'log'", "in", "f", ":", "\n", "            ", "continue", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "f", ")", "\n", "nested_dicts", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "            ", "nested_dicts", "[", "m", "]", "=", "[", "]", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "nf", ":", "\n", "            ", "try", ":", "\n", "                ", "algorithm_params", ",", "metann_params", ",", "results", ",", "walltimes", "=", "pickle", ".", "load", "(", "nf", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "print", "(", "file_path", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "results", "[", "0", "]", ")", ")", ":", "\n", "                ", "for", "idx", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "                    ", "nested_dicts", "[", "m", "]", ".", "append", "(", "100", "-", "results", "[", "idx", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "", "", "for", "m", "in", "model_lists", ":", "\n", "                ", "total_dicts", "[", "m", "]", ".", "append", "(", "nested_dicts", "[", "m", "]", ")", "\n", "", "", "", "results_np", "=", "{", "m", ":", "np", ".", "array", "(", "total_dicts", "[", "m", "]", ")", "for", "m", "in", "model_lists", "}", "\n", "return", "results_np", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean": [[42, 52], ["numpy.mean", "numpy.median", "ValueError", "numpy.percentile"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.metric_logger.SmoothedValue.median"], ["", "def", "getmean", "(", "results_np", ",", "category", "=", "'mean'", ")", ":", "\n", "    ", "if", "category", "==", "'mean'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "mean", "(", "results_np", "[", "m", "]", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "elif", "category", "==", "'medium'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "median", "(", "results_np", "[", "m", "]", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "elif", "category", "==", "'percentile'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "percentile", "(", "results_np", "[", "m", "]", ",", "50", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'this type operation is not supported!'", ")", "\n", "", "return", "results_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile": [[54, 57], ["numpy.percentile"], "function", ["None"], ["", "def", "get_quantile", "(", "results_np", ",", "divider", "=", "30", ")", ":", "\n", "    ", "results_quantile", "=", "{", "m", ":", "np", ".", "percentile", "(", "results_np", "[", "m", "]", ",", "divider", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "return", "results_quantile", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder": [[59, 69], ["dict", "numpy.stack"], "function", ["None"], ["", "def", "get_bounder", "(", "total_mean", ",", "quantile_30", ",", "quantile_70", ",", "absolute", "=", "False", ")", ":", "\n", "    ", "bound_dict", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "# if absolute:", "\n", "#     bound_dict[m] = np.abs(np.stack([(total_mean[m]-quantile_30[m]),", "\n", "#                                      (quantile_70[m]-total_mean[m])], axis=0))", "\n", "# else:", "\n", "        ", "bound_dict", "[", "m", "]", "=", "np", ".", "stack", "(", "[", "(", "total_mean", "[", "m", "]", "-", "quantile_30", "[", "m", "]", ")", ",", "\n", "(", "quantile_70", "[", "m", "]", "-", "total_mean", "[", "m", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "bound_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.draw_plot_nasbench_101": [[71, 109], ["visualize_close_domain.convert2np", "visualize_close_domain.getmean", "visualize_close_domain.get_quantile", "visualize_close_domain.get_quantile", "visualize_close_domain.get_bounder", "numpy.array", "matplotlib.subplots", "ax.set_yticks", "ax.grid", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.grid", "matplotlib.show", "getmean.items", "enumerate", "numpy.arange", "print", "print", "print", "print", "print", "enumerate", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_nasbench_101", "(", "root_path", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ")", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", ",", "150", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "15", "\n", "lowerlimits", "=", "[", "True", "]", "*", "15", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "3", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "# ax.set_yticks(np.arange(92.5, 94.4, 0.2))", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "93.1", ",", "94.2", ",", "0.2", ")", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Testing Accuracy'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#666699'", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.draw_plot_nasbench_201": [[111, 148], ["visualize_close_domain.convert2np", "visualize_close_domain.getmean", "visualize_close_domain.get_quantile", "visualize_close_domain.get_quantile", "visualize_close_domain.get_bounder", "numpy.array", "matplotlib.subplots", "ax.set_yticks", "ax.grid", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.grid", "matplotlib.show", "getmean.items", "enumerate", "numpy.arange", "print", "print", "print", "print", "print", "enumerate", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_nasbench_201", "(", "root_path", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ")", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "10", "\n", "lowerlimits", "=", "[", "True", "]", "*", "10", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "uplims", "=", "upperlimits", ",", "lolims", "=", "lowerlimits", ",", "\n", "label", "=", "m", ",", "capthick", "=", "2", ")", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], label=m, capsize=6, capthick=2)", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "89.5", ",", "91.5", ",", "0.2", ")", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Testing Accuracy'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#666699'", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.draw_plot_priori_scalar": [[150, 188], ["visualize_close_domain.convert2np", "visualize_close_domain.getmean", "visualize_close_domain.get_quantile", "visualize_close_domain.get_quantile", "visualize_close_domain.get_bounder", "numpy.array", "matplotlib.subplots", "ax.set_yticks", "ax.grid", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.grid", "matplotlib.show", "getmean.items", "enumerate", "numpy.arange", "print", "print", "print", "print", "print", "enumerate", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot"], ["", "def", "draw_plot_priori_scalar", "(", "root_path", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ")", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", ",", "150", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "15", "\n", "lowerlimits", "=", "[", "True", "]", "*", "15", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "3", ",", "capthick", "=", "2", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "# ax.set_yticks(np.arange(92.5, 94.4, 0.2))", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "93.1", ",", "94.2", ",", "0.2", ")", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Testing Accuracy'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#666699'", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.ReLUConvBN.__init__": [[24, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.ReLUConvBN.forward": [[32, 34], ["darts_ops.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.DilConv.__init__": [[37, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.DilConv.forward": [[46, 48], ["darts_ops.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.SepConv.__init__": [[51, 62], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.SepConv.forward": [[64, 66], ["darts_ops.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.Identity.__init__": [[69, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.Identity.forward": [[72, 74], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.Zero.__init__": [[77, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.Zero.forward": [[81, 85], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.FactorizedReduce.__init__": [[88, 95], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_ops.FactorizedReduce.forward": [[96, 101], ["darts_ops.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "darts_ops.FactorizedReduce.bn", "darts_ops.FactorizedReduce.conv_1", "darts_ops.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_graph.nasbench2graph2": [[22, 37], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["def", "nasbench2graph2", "(", "data", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "11", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_cell.Cell.__init__": [[6, 21], ["nn.Module.__init__", "darts_ops.ReLUConvBN", "darts_cell.Cell._compile", "darts_ops.FactorizedReduce", "darts_ops.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_cell.Cell._compile"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(C_prev_prev, C_prev, C)", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_cell.Cell._compile": [[22, 34], ["len", "nn.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_cell.Cell.forward": [[35, 54], ["darts_cell.Cell.preprocess0", "darts_cell.Cell.preprocess1", "range", "torch.cat", "op1", "op2", "isinstance", "nas_lib.utils.utils_darts.drop_path", "isinstance", "nas_lib.utils.utils_darts.drop_path"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.drop_path", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", "=", "0.0", ",", "device", "=", "None", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ",", "device", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ",", "device", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_cell.AuxiliaryHeadCIFAR.__init__": [[57, 71], ["nn.Module.__init__", "nn.Sequential", "nn.Linear", "nn.ReLU", "nn.AvgPool2d", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_cell.AuxiliaryHeadCIFAR.forward": [[72, 76], ["darts_cell.AuxiliaryHeadCIFAR.features", "darts_cell.AuxiliaryHeadCIFAR.classifier", "darts_cell.AuxiliaryHeadCIFAR.view", "darts_cell.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_cell.AuxiliaryHeadImageNet.__init__": [[79, 95], ["nn.Module.__init__", "nn.Sequential", "nn.Linear", "nn.ReLU", "nn.AvgPool2d", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.darts_cell.AuxiliaryHeadImageNet.forward": [[96, 100], ["darts_cell.AuxiliaryHeadImageNet.features", "darts_cell.AuxiliaryHeadImageNet.classifier", "darts_cell.AuxiliaryHeadImageNet.view", "darts_cell.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.datrs_neuralnet.DartsCifar10NeuralNet.__init__": [[6, 38], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "darts_cell.Cell", "datrs_neuralnet.DartsCifar10NeuralNet.cells.append", "darts_cell.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "key", ",", "stem_mult", "=", "3", ")", ":", "\n", "        ", "super", "(", "DartsCifar10NeuralNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hashkey", "=", "key", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "genotype", "=", "genotype", "\n", "C_curr", "=", "stem_mult", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "# self.cells += [cell]", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.datrs_neuralnet.DartsCifar10NeuralNet.forward": [[39, 50], ["datrs_neuralnet.DartsCifar10NeuralNet.stem", "enumerate", "datrs_neuralnet.DartsCifar10NeuralNet.global_pooling", "datrs_neuralnet.DartsCifar10NeuralNet.classifier", "datrs_neuralnet.DartsCifar10NeuralNet.view", "cell", "datrs_neuralnet.DartsCifar10NeuralNet.size", "datrs_neuralnet.DartsCifar10NeuralNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "device", "=", "None", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ",", "device", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.datrs_neuralnet.DartsImageNetNeuralNet.__init__": [[53, 91], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "darts_cell.Cell", "datrs_neuralnet.DartsImageNetNeuralNet.cells.append", "darts_cell.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "        ", "super", "(", "DartsImageNetNeuralNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "# self.cells += [cell]", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models_darts.datrs_neuralnet.DartsImageNetNeuralNet.forward": [[92, 104], ["datrs_neuralnet.DartsImageNetNeuralNet.stem0", "datrs_neuralnet.DartsImageNetNeuralNet.stem1", "enumerate", "datrs_neuralnet.DartsImageNetNeuralNet.global_pooling", "datrs_neuralnet.DartsImageNetNeuralNet.classifier", "datrs_neuralnet.DartsImageNetNeuralNet.view", "cell", "datrs_neuralnet.DartsImageNetNeuralNet.size", "datrs_neuralnet.DartsImageNetNeuralNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "drop_path_prob", "=", "0.0", ",", "device", "=", "None", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "drop_path_prob", ",", "device", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.gaussian_sample_layer.GaussianFunction.forward": [[9, 15], ["ctx.save_for_backward", "vec.mul().add", "vec.mul"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "mean", ",", "std", ",", "vec", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "mean", ",", "std", ",", "vec", ")", "\n", "# output = vec.mul_(std).add_(mean)", "\n", "output", "=", "vec", ".", "mul", "(", "std", ")", ".", "add", "(", "mean", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.gaussian_sample_layer.GaussianFunction.backward": [[16, 27], ["torch.ones_like().mul", "vec.mul", "torch.ones_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "mean", ",", "std", ",", "vec", "=", "ctx", ".", "saved_tensors", "\n", "grad_mean", "=", "grad_std", "=", "grad_vec", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_mean", "=", "torch", ".", "ones_like", "(", "mean", ")", ".", "mul", "(", "grad_output", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_std", "=", "vec", ".", "mul", "(", "grad_output", ")", "\n", "# grad_std = vec.mul(-1*grad_output)", "\n", "# grad_std = vec.mul(torch.exp(-1*grad_output))", "\n", "", "return", "grad_mean", ",", "grad_std", ",", "grad_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.loss_gausian.Criterion.__init__": [[8, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sqrtpi", "=", "2.5066282746310002", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.loss_gausian.Criterion.forward": [[12, 23], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mu", ",", "sigma", ",", "target_y", ")", ":", "\n", "        ", "\"\"\" mu : (bs, n_target)\n            sigma : (bs, n_target)\n            target_y : (bs, n_target)\n        \"\"\"", "\n", "l1", "=", "0.5", "*", "torch", ".", "pow", "(", "(", "target_y", "-", "mu", ")", ",", "2", ")", "/", "torch", ".", "pow", "(", "sigma", ",", "2", ")", "\n", "l3", "=", "-", "1", "*", "torch", ".", "log", "(", "self", ".", "sqrtpi", "*", "sigma", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "l3", "-", "l1", ")", "\n", "# loss2 = self.forward_test(mu, sigma, target_y)", "\n", "# print('the absolute error of two loss is %.10f' % (loss-loss2))", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.loss_gausian.Criterion.forward_test": [[24, 35], ["range", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal.log_prob", "torch.distributions.normal.Normal.log_prob", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward_test", "(", "self", ",", "mu", ",", "sigma", ",", "target_y", ")", ":", "\n", "        ", "loss", "=", "0.0", "\n", "bs", "=", "mu", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "# dist = torch.distributions.multivariate_normal.MultivariateNormal(loc=mu[i],", "\n", "# covariance_matrix=torch.diag(sigma[i]))", "\n", "            ", "dist", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "loc", "=", "mu", "[", "i", "]", ",", "scale", "=", "sigma", "[", "i", "]", ")", "\n", "log_prob", "=", "dist", ".", "log_prob", "(", "target_y", "[", "i", "]", ")", "\n", "loss", "=", "loss", "-", "1.0", "*", "torch", ".", "mean", "(", "log_prob", ")", "\n", "", "loss", "=", "loss", "/", "bs", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.__init__": [[13, 44], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "layers.append", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "6", ")", ":", "\n", "        ", "super", "(", "NasBenchGINGaussianAgentRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "dim", "=", "32", "\n", "dim2", "=", "16", "\n", "nn1", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "GINConv", "(", "nn1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "nn2", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2", "=", "GINConv", "(", "nn2", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "#", "\n", "nn3", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ")", ")", "\n", "self", ".", "conv3", "=", "GINConv", "(", "nn3", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "linear_before", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim2", ",", "bias", "=", "True", ")", "\n", "self", ".", "linear_before_std", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim2", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "linear_mean", "=", "Linear", "(", "dim2", ",", "1", ")", "\n", "self", ".", "linear_std", "=", "Linear", "(", "dim2", ",", "1", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_mean", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_std", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_before", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_before_std", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.forward": [[45, 47], ["gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor_celu.NasBenchGINPredictorAgentCELU.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.forward_batch": [[48, 71], ["torch.relu", "torch.relu", "torch.relu", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.bn1", "torch.relu", "torch.relu", "torch.relu", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.bn2", "torch.relu", "torch.relu", "torch.relu", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.bn3", "gnn_lib.global_mean_pool", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.linear_mean", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "gaussian_layer", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.conv1", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.conv2", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.conv3", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.linear_before", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.linear_before_std", "gin_uncertainty_predictor_relu.NasBenchGINGaussianAgentRelu.linear_std"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data", ",", "edge_index", ")", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x1", ",", "edge_index", ")", ")", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "\n", "x3", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x2", ",", "edge_index", ")", ")", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "\n", "x_embedding", "=", "gmp", "(", "x3", ",", "batch", ")", "\n", "x_embedding_mean", "=", "F", ".", "relu", "(", "self", ".", "linear_before", "(", "x_embedding", ")", ")", "\n", "x_embedding_drop", "=", "F", ".", "dropout", "(", "x_embedding_mean", ",", "p", "=", "0.1", ",", "training", "=", "self", ".", "training", ")", "\n", "mean", "=", "self", ".", "linear_mean", "(", "x_embedding_drop", ")", "\n", "\n", "x_embedding_std", "=", "F", ".", "relu", "(", "self", ".", "linear_before_std", "(", "x_embedding", ")", ")", "\n", "std", "=", "F", ".", "relu", "(", "self", ".", "linear_std", "(", "x_embedding_std", ")", ")", "\n", "\n", "std", "=", "torch", ".", "exp", "(", "std", "/", "2", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "x_sample", "=", "gaussian_layer", "(", "mean", ",", "std", ",", "eps", ")", "\n", "\n", "return", "x_sample", ",", "mean", ",", "std", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_uncertainty_predictor.NasBenchGINGaussianAgent.__init__": [[13, 44], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "layers.append", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "6", ")", ":", "\n", "        ", "super", "(", "NasBenchGINGaussianAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "dim", "=", "32", "\n", "dim2", "=", "16", "\n", "nn1", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "GINConv", "(", "nn1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "nn2", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2", "=", "GINConv", "(", "nn2", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "#", "\n", "nn3", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ")", ")", "\n", "self", ".", "conv3", "=", "GINConv", "(", "nn3", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "linear_before", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim2", ",", "bias", "=", "True", ")", "\n", "self", ".", "linear_before_std", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim2", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "linear_mean", "=", "Linear", "(", "dim2", ",", "1", ")", "\n", "self", ".", "linear_std", "=", "Linear", "(", "dim2", ",", "1", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_mean", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_std", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_before", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_before_std", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_uncertainty_predictor.NasBenchGINGaussianAgent.forward": [[45, 47], ["gin_uncertainty_predictor.NasBenchGINGaussianAgent.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor_celu.NasBenchGINPredictorAgentCELU.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_uncertainty_predictor.NasBenchGINGaussianAgent.forward_batch": [[48, 71], ["torch.celu", "torch.celu", "torch.celu", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.bn1", "torch.celu", "torch.celu", "torch.celu", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.bn2", "torch.celu", "torch.celu", "torch.celu", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.bn3", "gnn_lib.global_mean_pool", "torch.celu", "torch.celu", "torch.celu", "torch.dropout", "torch.dropout", "torch.dropout", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.linear_mean", "torch.celu", "torch.celu", "torch.celu", "torch.celu", "torch.celu", "torch.celu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "gaussian_layer", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.conv1", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.conv2", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.conv3", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.linear_before", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.linear_before_std", "gin_uncertainty_predictor.NasBenchGINGaussianAgent.linear_std"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "x1", "=", "F", ".", "celu", "(", "self", ".", "conv1", "(", "data", ",", "edge_index", ")", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "\n", "x2", "=", "F", ".", "celu", "(", "self", ".", "conv2", "(", "x1", ",", "edge_index", ")", ")", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "\n", "x3", "=", "F", ".", "celu", "(", "self", ".", "conv3", "(", "x2", ",", "edge_index", ")", ")", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "\n", "x_embedding", "=", "gmp", "(", "x3", ",", "batch", ")", "\n", "x_embedding_mean", "=", "F", ".", "celu", "(", "self", ".", "linear_before", "(", "x_embedding", ")", ")", "\n", "x_embedding_drop", "=", "F", ".", "dropout", "(", "x_embedding_mean", ",", "p", "=", "0.1", ",", "training", "=", "self", ".", "training", ")", "\n", "mean", "=", "self", ".", "linear_mean", "(", "x_embedding_drop", ")", "\n", "\n", "x_embedding_std", "=", "F", ".", "celu", "(", "self", ".", "linear_before_std", "(", "x_embedding", ")", ")", "\n", "std", "=", "F", ".", "celu", "(", "self", ".", "linear_std", "(", "x_embedding_std", ")", ")", "\n", "\n", "std", "=", "torch", ".", "exp", "(", "std", "/", "2", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "x_sample", "=", "gaussian_layer", "(", "mean", ",", "std", ",", "eps", ")", "\n", "\n", "return", "x_sample", ",", "mean", ",", "std", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor.NasBenchGINPredictorAgent.__init__": [[11, 39], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "layers.append", "layers.append", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "6", ")", ":", "\n", "        ", "super", "(", "NasBenchGINPredictorAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "dim", "=", "32", "\n", "dim2", "=", "16", "\n", "nn1", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "GINConv", "(", "nn1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "nn2", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2", "=", "GINConv", "(", "nn2", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "#", "\n", "nn3", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ")", ")", "\n", "self", ".", "conv3", "=", "GINConv", "(", "nn3", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "linear_before", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim2", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "linear_mean", "=", "Linear", "(", "dim2", ",", "1", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_mean", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_before", ")", "\n", "self", ".", "out_layer", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor.NasBenchGINPredictorAgent.forward": [[40, 42], ["gin_predictor.NasBenchGINPredictorAgent.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor_celu.NasBenchGINPredictorAgentCELU.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor.NasBenchGINPredictorAgent.forward_batch": [[43, 59], ["torch.relu", "torch.relu", "torch.relu", "gin_predictor.NasBenchGINPredictorAgent.bn1", "torch.relu", "torch.relu", "torch.relu", "gin_predictor.NasBenchGINPredictorAgent.bn2", "torch.relu", "torch.relu", "torch.relu", "gin_predictor.NasBenchGINPredictorAgent.bn3", "gnn_lib.global_mean_pool", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "gin_predictor.NasBenchGINPredictorAgent.linear_mean", "gin_predictor.NasBenchGINPredictorAgent.out_layer", "gin_predictor.NasBenchGINPredictorAgent.conv1", "gin_predictor.NasBenchGINPredictorAgent.conv2", "gin_predictor.NasBenchGINPredictorAgent.conv3", "gin_predictor.NasBenchGINPredictorAgent.linear_before"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data", ",", "edge_index", ")", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x1", ",", "edge_index", ")", ")", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "\n", "x3", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x2", ",", "edge_index", ")", ")", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "\n", "x_embedding", "=", "gmp", "(", "x3", ",", "batch", ")", "\n", "x_embedding_mean", "=", "F", ".", "relu", "(", "self", ".", "linear_before", "(", "x_embedding", ")", ")", "\n", "x_embedding_drop", "=", "F", ".", "dropout", "(", "x_embedding_mean", ",", "p", "=", "0.1", ",", "training", "=", "self", ".", "training", ")", "\n", "mean", "=", "self", ".", "linear_mean", "(", "x_embedding_drop", ")", "\n", "mean", "=", "self", ".", "out_layer", "(", "mean", ")", "\n", "return", "mean", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor_celu.NasBenchGINPredictorAgentCELU.__init__": [[11, 39], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "layers.append", "layers.append", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "6", ")", ":", "\n", "        ", "super", "(", "NasBenchGINPredictorAgentCELU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "dim", "=", "32", "\n", "dim2", "=", "16", "\n", "nn1", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "GINConv", "(", "nn1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "nn2", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2", "=", "GINConv", "(", "nn2", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "#", "\n", "nn3", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ")", ")", "\n", "self", ".", "conv3", "=", "GINConv", "(", "nn3", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "linear_before", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim2", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "linear_mean", "=", "Linear", "(", "dim2", ",", "1", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_mean", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_before", ")", "\n", "self", ".", "out_layer", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor_celu.NasBenchGINPredictorAgentCELU.forward": [[40, 42], ["gin_predictor_celu.NasBenchGINPredictorAgentCELU.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor_celu.NasBenchGINPredictorAgentCELU.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.gin_predictor_celu.NasBenchGINPredictorAgentCELU.forward_batch": [[43, 59], ["torch.celu", "torch.celu", "torch.celu", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.bn1", "torch.celu", "torch.celu", "torch.celu", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.bn2", "torch.celu", "torch.celu", "torch.celu", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.bn3", "gnn_lib.global_mean_pool", "torch.celu", "torch.celu", "torch.celu", "torch.dropout", "torch.dropout", "torch.dropout", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.linear_mean", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.out_layer", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.conv1", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.conv2", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.conv3", "gin_predictor_celu.NasBenchGINPredictorAgentCELU.linear_before"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "x1", "=", "F", ".", "celu", "(", "self", ".", "conv1", "(", "data", ",", "edge_index", ")", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "\n", "x2", "=", "F", ".", "celu", "(", "self", ".", "conv2", "(", "x1", ",", "edge_index", ")", ")", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "\n", "x3", "=", "F", ".", "celu", "(", "self", ".", "conv3", "(", "x2", ",", "edge_index", ")", ")", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "\n", "x_embedding", "=", "gmp", "(", "x3", ",", "batch", ")", "\n", "x_embedding_mean", "=", "F", ".", "celu", "(", "self", ".", "linear_before", "(", "x_embedding", ")", ")", "\n", "x_embedding_drop", "=", "F", ".", "dropout", "(", "x_embedding_mean", ",", "p", "=", "0.1", ",", "training", "=", "self", ".", "training", ")", "\n", "mean", "=", "self", ".", "linear_mean", "(", "x_embedding_drop", ")", "\n", "mean", "=", "self", ".", "out_layer", "(", "mean", ")", "\n", "return", "mean", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.__init__": [[24, 29], ["isinstance", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gpu", "=", "'0'", ",", "sess", "=", "None", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "if", "not", "isinstance", "(", "gpu", ",", "str", ")", ":", "\n", "            ", "gpu", "=", "str", "(", "gpu", ")", "\n", "", "self", ".", "gpu", "=", "gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.clear_gpu": [[30, 36], ["tensorflow.ConfigProto", "str", "tensorflow.Session", "keras.backend.tensorflow_backend.clear_session"], "methods", ["None"], ["", "def", "clear_gpu", "(", "self", ")", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "1", "}", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "gpu_options", ".", "visible_device_list", "=", "str", "(", "self", ".", "gpu", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "clear_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.get_dense_model": [[37, 70], ["tensorflow.ConfigProto", "str", "tensorflow.Session", "keras.backend.set_session", "keras.layers.Input", "keras.models.Sequential", "range", "model.", "keras.models.Model", "model.add", "keras.layers.concatenate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "keras.regularizers.l1", "keras.layers.Dense", "keras.layers.Dense"], "methods", ["None"], ["", "def", "get_dense_model", "(", "self", ",", "\n", "input_dims", ",", "\n", "num_layers", ",", "\n", "layer_width", ",", "\n", "loss", ",", "\n", "regularization", ")", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "1", "}", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "gpu_options", ".", "visible_device_list", "=", "str", "(", "self", ".", "gpu", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "keras", ".", "backend", ".", "set_session", "(", "self", ".", "sess", ")", "\n", "\n", "input_layer", "=", "keras", ".", "layers", ".", "Input", "(", "input_dims", ")", "\n", "model", "=", "keras", ".", "models", ".", "Sequential", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "layer_width", ",", "activation", "=", "'relu'", ")", ")", "\n", "\n", "", "model", "=", "model", "(", "input_layer", ")", "\n", "if", "loss", "==", "'mle'", ":", "\n", "            ", "mean", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "var", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "var", "=", "keras", ".", "layers", ".", "Activation", "(", "tf", ".", "math", ".", "softplus", ")", "(", "var", ")", "\n", "output", "=", "keras", ".", "layers", ".", "concatenate", "(", "[", "mean", ",", "var", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "regularization", "==", "0", ":", "\n", "                ", "output", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "", "else", ":", "\n", "                ", "reg", "=", "keras", ".", "regularizers", ".", "l1", "(", "regularization", ")", "\n", "output", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "kernel_regularizer", "=", "reg", ")", "(", "model", ")", "\n", "\n", "", "", "dense_net", "=", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "input_layer", ",", "outputs", "=", "output", ")", "\n", "return", "dense_net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit": [[71, 102], ["meta_neural_net.MetaNeuralnet.get_dense_model", "keras.optimizers.Adam", "meta_neural_net.MetaNeuralnet.model.compile", "meta_neural_net.MetaNeuralnet.model.fit", "numpy.squeeze", "numpy.mean", "meta_neural_net.MetaNeuralnet.model.predict", "abs"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.get_dense_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "\n", "num_layers", "=", "10", ",", "\n", "layer_width", "=", "20", ",", "\n", "loss", "=", "'mae'", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "32", ",", "\n", "lr", "=", ".01", ",", "\n", "verbose", "=", "0", ",", "\n", "regularization", "=", "0", ")", ":", "\n", "\n", "        ", "if", "loss", "==", "'mle'", ":", "\n", "            ", "loss_fn", "=", "mle_loss", "\n", "", "elif", "loss", "==", "'mape'", ":", "\n", "            ", "loss_fn", "=", "mape_loss", "\n", "", "else", ":", "\n", "            ", "loss_fn", "=", "'mae'", "\n", "\n", "", "self", ".", "model", "=", "self", ".", "get_dense_model", "(", "(", "xtrain", ".", "shape", "[", "1", "]", ",", ")", ",", "\n", "loss", "=", "loss_fn", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "layer_width", "=", "layer_width", ",", "\n", "regularization", "=", "regularization", ")", "\n", "optimizer", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr", ",", "beta_1", "=", ".9", ",", "beta_2", "=", ".99", ")", "\n", "self", ".", "model", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "loss_fn", ")", "\n", "self", ".", "model", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "epochs", ",", "\n", "verbose", "=", "verbose", ")", "\n", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "model", ".", "predict", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict": [[103, 105], ["meta_neural_net.MetaNeuralnet.model.predict"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict"], ["", "def", "predict", "(", "self", ",", "xtest", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict", "(", "xtest", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.mle_loss": [[8, 13], ["tensorflow.slice", "tensorflow.slice", "tensorflow.log", "tensorflow.square"], "function", ["None"], ["def", "mle_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# Minimum likelihood estimate loss function", "\n", "    ", "mean", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "var", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "return", "0.5", "*", "tf", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "var", ")", "+", "tf", ".", "square", "(", "y_true", "-", "mean", ")", "/", "(", "2", "*", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.mape_loss": [[15, 21], ["tensorflow.math.divide", "tensorflow.abs", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.subtract"], "function", ["None"], ["", "def", "mape_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# Minimum absolute percentage error loss function", "\n", "    ", "lower_bound", "=", "4.5", "\n", "fraction", "=", "tf", ".", "math", ".", "divide", "(", "tf", ".", "subtract", "(", "y_pred", ",", "lower_bound", ")", ",", "\n", "tf", ".", "subtract", "(", "y_true", ",", "lower_bound", ")", ")", "\n", "return", "tf", ".", "abs", "(", "tf", ".", "subtract", "(", "fraction", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.config.build_config": [[104, 112], ["FLAGS.flags_by_module_dict"], "function", ["None"], ["def", "build_config", "(", ")", ":", "\n", "  ", "\"\"\"Build config from flags defined in this module.\"\"\"", "\n", "config", "=", "{", "\n", "flag", ".", "name", ":", "flag", ".", "value", "\n", "for", "flag", "in", "FLAGS", ".", "flags_by_module_dict", "(", ")", "[", "__name__", "]", "\n", "}", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.ModelSpec.__init__": [[35, 71], ["numpy.shape", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model_spec.ModelSpec._prune", "isinstance", "numpy.array", "ValueError", "len", "ValueError", "model_spec.is_upper_triangular", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.ModelSpec._prune", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.is_upper_triangular"], ["def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "data_format", "=", "'channels_last'", ")", ":", "\n", "    ", "\"\"\"Initialize the module spec.\n\n    Args:\n      matrix: ndarray or nested list with shape [V, V] for the adjacency matrix.\n      ops: V-length list of labels for the base ops used. The first and last\n        elements are ignored because they are the input and output vertices\n        which have no operations. The elements are retained to keep consistent\n        indexing.\n      data_format: channels_last or channels_first.\n\n    Raises:\n      ValueError: invalid matrix or ops\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "matrix", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", "or", "shape", "[", "0", "]", "!=", "shape", "[", "1", "]", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be square'", ")", "\n", "", "if", "shape", "[", "0", "]", "!=", "len", "(", "ops", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'length of ops must match matrix dimensions'", ")", "\n", "", "if", "not", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be upper triangular'", ")", "\n", "\n", "# Both the original and pruned matrices are deep copies of the matrix and", "\n", "# ops so any changes to those after initialization are not recognized by the", "\n", "# spec.", "\n", "", "self", ".", "original_matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "original_ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "\n", "self", ".", "matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "self", ".", "valid_spec", "=", "True", "\n", "self", ".", "_prune", "(", ")", "\n", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.ModelSpec._prune": [[72, 122], ["set", "set", "set().difference", "numpy.delete", "numpy.delete", "sorted", "numpy.shape", "frontier.pop", "range", "frontier.pop", "range", "set.intersection", "len", "list", "list", "set", "set.add", "frontier.append", "set.add", "frontier.append", "range"], "methods", ["None"], ["", "def", "_prune", "(", "self", ")", ":", "\n", "    ", "\"\"\"Prune the extraneous parts of the graph.\n\n    General procedure:\n      1) Remove parts of graph not connected to input.\n      2) Remove parts of graph not connected to output.\n      3) Reorder the vertices so that they are consecutive after steps 1 and 2.\n\n    These 3 steps can be combined by deleting the rows and columns of the\n    vertices that are not reachable from both the input and output (in reverse).\n    \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "original_matrix", ")", "[", "0", "]", "\n", "\n", "# DFS forward from input", "\n", "visited_from_input", "=", "set", "(", "[", "0", "]", ")", "\n", "frontier", "=", "[", "0", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "top", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "top", ",", "v", "]", "and", "v", "not", "in", "visited_from_input", ":", "\n", "          ", "visited_from_input", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# DFS backward from output", "\n", "", "", "", "visited_from_output", "=", "set", "(", "[", "num_vertices", "-", "1", "]", ")", "\n", "frontier", "=", "[", "num_vertices", "-", "1", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "0", ",", "top", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "v", ",", "top", "]", "and", "v", "not", "in", "visited_from_output", ":", "\n", "          ", "visited_from_output", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# Any vertex that isn't connected to both input and output is extraneous to", "\n", "# the computation graph.", "\n", "", "", "", "extraneous", "=", "set", "(", "range", "(", "num_vertices", ")", ")", ".", "difference", "(", "\n", "visited_from_input", ".", "intersection", "(", "visited_from_output", ")", ")", "\n", "\n", "# If the non-extraneous graph is less than 2 vertices, the input is not", "\n", "# connected to the output and the spec is invalid.", "\n", "if", "len", "(", "extraneous", ")", ">", "num_vertices", "-", "2", ":", "\n", "      ", "self", ".", "matrix", "=", "None", "\n", "self", ".", "ops", "=", "None", "\n", "self", ".", "valid_spec", "=", "False", "\n", "return", "\n", "\n", "", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "1", ")", "\n", "for", "index", "in", "sorted", "(", "extraneous", ",", "reverse", "=", "True", ")", ":", "\n", "      ", "del", "self", ".", "ops", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.ModelSpec.hash_spec": [[123, 136], ["nas_lib.nasbench101.graph_util.hash_module", "canonical_ops.index"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.hash_module"], ["", "", "def", "hash_spec", "(", "self", ",", "canonical_ops", ")", ":", "\n", "    ", "\"\"\"Computes the isomorphism-invariant graph hash of this spec.\n\n    Args:\n      canonical_ops: list of operations in the canonical ordering which they\n        were assigned (i.e. the order provided in the config['available_ops']).\n\n    Returns:\n      MD5 hash of this spec which can be used to query the dataset.\n    \"\"\"", "\n", "# Invert the operations back to integer label indices used in graph gen.", "\n", "labeling", "=", "[", "-", "1", "]", "+", "[", "canonical_ops", ".", "index", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "return", "graph_util", ".", "hash_module", "(", "self", ".", "matrix", ",", "labeling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.ModelSpec.visualize": [[137, 152], ["graphviz.Digraph", "graphviz.Digraph.node", "range", "graphviz.Digraph.node", "range", "numpy.shape", "str", "graphviz.Digraph.node", "str", "range", "str", "graphviz.Digraph.edge", "str", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.node"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "    ", "\"\"\"Creates a dot graph. Can be visualized in colab directly.\"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "matrix", ")", "[", "0", "]", "\n", "g", "=", "graphviz", ".", "Digraph", "(", ")", "\n", "g", ".", "node", "(", "str", "(", "0", ")", ",", "'input'", ")", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "      ", "g", ".", "node", "(", "str", "(", "v", ")", ",", "self", ".", "ops", "[", "v", "]", ")", "\n", "", "g", ".", "node", "(", "str", "(", "num_vertices", "-", "1", ")", ",", "'output'", ")", "\n", "\n", "for", "src", "in", "range", "(", "num_vertices", "-", "1", ")", ":", "\n", "      ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "matrix", "[", "src", ",", "dst", "]", ":", "\n", "          ", "g", ".", "edge", "(", "str", "(", "src", ")", ",", "str", "(", "dst", ")", ")", "\n", "\n", "", "", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.is_upper_triangular": [[154, 162], ["range", "range", "numpy.shape"], "function", ["None"], ["", "", "def", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"True if matrix is 0 on diagonal and below.\"\"\"", "\n", "for", "src", "in", "range", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ")", ":", "\n", "    ", "for", "dst", "in", "range", "(", "0", ",", "src", "+", "1", ")", ":", "\n", "      ", "if", "matrix", "[", "src", ",", "dst", "]", "!=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.gen_is_edge_fn": [[22, 56], ["numpy.vectorize"], "function", ["None"], ["def", "gen_is_edge_fn", "(", "bits", ")", ":", "\n", "  ", "\"\"\"Generate a boolean function for the edge connectivity.\n\n  Given a bitstring FEDCBA and a 4x4 matrix, the generated matrix is\n    [[0, A, B, D],\n     [0, 0, C, E],\n     [0, 0, 0, F],\n     [0, 0, 0, 0]]\n\n  Note that this function is agnostic to the actual matrix dimension due to\n  order in which elements are filled out (column-major, starting from least\n  significant bit). For example, the same FEDCBA bitstring (0-padded) on a 5x5\n  matrix is\n    [[0, A, B, D, 0],\n     [0, 0, C, E, 0],\n     [0, 0, 0, F, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0]]\n\n  Args:\n    bits: integer which will be interpreted as a bit mask.\n\n  Returns:\n    vectorized function that returns True when an edge is present.\n  \"\"\"", "\n", "def", "is_edge", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Is there an edge from x to y (0-indexed)?\"\"\"", "\n", "if", "x", ">=", "y", ":", "\n", "      ", "return", "0", "\n", "# Map x, y to index into bit string", "\n", "", "index", "=", "x", "+", "(", "y", "*", "(", "y", "-", "1", ")", "//", "2", ")", "\n", "return", "(", "bits", ">>", "index", ")", "%", "2", "==", "1", "\n", "\n", "", "return", "np", ".", "vectorize", "(", "is_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.is_full_dag": [[58, 84], ["numpy.shape", "numpy.all", "numpy.any", "numpy.all", "numpy.any"], "function", ["None"], ["", "def", "is_full_dag", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"Full DAG == all vertices on a path from vert 0 to (V-1).\n\n  i.e. no disconnected or \"hanging\" vertices.\n\n  It is sufficient to check for:\n    1) no rows of 0 except for row V-1 (only output vertex has no out-edges)\n    2) no cols of 0 except for col 0 (only input vertex has no in-edges)\n\n  Args:\n    matrix: V x V upper-triangular adjacency matrix\n\n  Returns:\n    True if the there are no dangling vertices.\n  \"\"\"", "\n", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "\n", "rows", "=", "matrix", "[", ":", "shape", "[", "0", "]", "-", "1", ",", ":", "]", "==", "0", "\n", "rows", "=", "np", ".", "all", "(", "rows", ",", "axis", "=", "1", ")", "# Any row with all 0 will be True", "\n", "rows_bad", "=", "np", ".", "any", "(", "rows", ")", "\n", "\n", "cols", "=", "matrix", "[", ":", ",", "1", ":", "]", "==", "0", "\n", "cols", "=", "np", ".", "all", "(", "cols", ",", "axis", "=", "0", ")", "# Any col with all 0 will be True", "\n", "cols_bad", "=", "np", ".", "any", "(", "cols", ")", "\n", "\n", "return", "(", "not", "rows_bad", ")", "and", "(", "not", "cols_bad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.num_edges": [[86, 89], ["numpy.sum"], "function", ["None"], ["", "def", "num_edges", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"Computes number of edges in adjacency matrix.\"\"\"", "\n", "return", "np", ".", "sum", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.hash_module": [[91, 124], ["numpy.sum().tolist", "numpy.sum().tolist", "list", "range", "hashlib.md5().hexdigest", "numpy.shape", "len", "len", "len", "zip", "hashlib.md5().hexdigest", "range", "numpy.sum", "numpy.sum", "new_hashes.append", "hashlib.md5", "hashlib.md5", "hashlib.md5().hexdigest", "str().encode", "str().encode", "range", "range", "hashlib.md5", "str", "str", "sorted", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "hash_module", "(", "matrix", ",", "labeling", ")", ":", "\n", "  ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n\n  Args:\n    matrix: np.ndarray square upper-triangular adjacency matrix.\n    labeling: list of int labels of length equal to both dimensions of\n      matrix.\n\n  Returns:\n    MD5 hash of the matrix and labeling.\n  \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labeling", ")", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labeling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "    ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "      ", "in_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "hashlib", ".", "md5", "(", "\n", "(", "''", ".", "join", "(", "sorted", "(", "in_neighbors", ")", ")", "+", "'|'", "+", "\n", "''", ".", "join", "(", "sorted", "(", "out_neighbors", ")", ")", "+", "'|'", "+", "\n", "hashes", "[", "v", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "return", "fingerprint", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.permute_graph": [[126, 146], ["zip", "numpy.fromfunction", "list", "numpy.vectorize", "range", "sorted", "len", "len", "range", "len", "len"], "function", ["None"], ["", "def", "permute_graph", "(", "graph", ",", "label", ",", "permutation", ")", ":", "\n", "  ", "\"\"\"Permutes the graph and labels based on permutation.\n\n  Args:\n    graph: np.ndarray adjacency matrix.\n    label: list of labels of same length as graph dimensions.\n    permutation: a permutation list of ints of same length as graph dimensions.\n\n  Returns:\n    np.ndarray where vertex permutation[v] is vertex v from the original graph\n  \"\"\"", "\n", "# vertex permutation[v] in new graph is vertex v in the old graph", "\n", "forward_perm", "=", "zip", "(", "permutation", ",", "list", "(", "range", "(", "len", "(", "permutation", ")", ")", ")", ")", "\n", "inverse_perm", "=", "[", "x", "[", "1", "]", "for", "x", "in", "sorted", "(", "forward_perm", ")", "]", "\n", "edge_fn", "=", "lambda", "x", ",", "y", ":", "graph", "[", "inverse_perm", "[", "x", "]", ",", "inverse_perm", "[", "y", "]", "]", "==", "1", "\n", "new_matrix", "=", "np", ".", "fromfunction", "(", "np", ".", "vectorize", "(", "edge_fn", ")", ",", "\n", "(", "len", "(", "label", ")", ",", "len", "(", "label", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int8", ")", "\n", "new_label", "=", "[", "label", "[", "inverse_perm", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", "]", "\n", "return", "new_matrix", ",", "new_label", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.is_isomorphic": [[148, 164], ["itertools.permutations", "numpy.array", "numpy.array", "numpy.shape", "numpy.shape", "len", "len", "numpy.shape", "range", "graph_util.permute_graph", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.permute_graph"], ["", "def", "is_isomorphic", "(", "graph1", ",", "graph2", ")", ":", "\n", "  ", "\"\"\"Exhaustively checks if 2 graphs are isomorphic.\"\"\"", "\n", "matrix1", ",", "label1", "=", "np", ".", "array", "(", "graph1", "[", "0", "]", ")", ",", "graph1", "[", "1", "]", "\n", "matrix2", ",", "label2", "=", "np", ".", "array", "(", "graph2", "[", "0", "]", ")", ",", "graph2", "[", "1", "]", "\n", "assert", "np", ".", "shape", "(", "matrix1", ")", "==", "np", ".", "shape", "(", "matrix2", ")", "\n", "assert", "len", "(", "label1", ")", "==", "len", "(", "label2", ")", "\n", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix1", ")", "[", "0", "]", "\n", "# Note: input and output in our constrained graphs always map to themselves", "\n", "# but this script does not enforce that.", "\n", "for", "perm", "in", "itertools", ".", "permutations", "(", "range", "(", "0", ",", "vertices", ")", ")", ":", "\n", "    ", "pmatrix1", ",", "plabel1", "=", "permute_graph", "(", "matrix1", ",", "label1", ",", "perm", ")", "\n", "if", "np", ".", "array_equal", "(", "pmatrix1", ",", "matrix2", ")", "and", "plabel1", "==", "label2", ":", "\n", "      ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.__init__": [[23, 64], ["nas_lib.build_config", "random.seed", "print", "time.time", "set", "print", "open", "pickle.load", "open", "pickle.load", "time.time"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.config.build_config"], ["def", "__init__", "(", "self", ",", "fixed_statistics_path", "=", "fixed_statistics_path", ",", "\n", "computed_statistics_path", "=", "computed_statistics_path", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initialize dataset, this should only be done once per experiment.\n\n    Args:\n      dataset_file: path to .tfrecord file containing the dataset.\n      seed: random seed used for sampling queried models. Two NASBench objects\n        created with the same seed will return the same data points when queried\n        with the same models in the same order. By default, the seed is randomly\n        generated.\n    \"\"\"", "\n", "self", ".", "config", "=", "config", ".", "build_config", "(", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "print", "(", "'Loading dataset from file... This may take a few minutes...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Stores the fixed statistics that are independent of evaluation (i.e.,", "\n", "# adjacency matrix, operations, and number of parameters).", "\n", "# hash --> metric name --> scalar", "\n", "with", "open", "(", "fixed_statistics_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "self", ".", "fixed_statistics", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Stores the statistics that are computed via training and evaluating the", "\n", "# model on CIFAR-10. Statistics are computed for multiple repeats of each", "\n", "# model at each max epoch length.", "\n", "# hash --> epochs --> repeat index --> metric name --> scalar", "\n", "", "self", ".", "computed_statistics", "=", "{", "}", "\n", "with", "open", "(", "computed_statistics_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "self", ".", "computed_statistics", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Valid queriable epoch lengths. {4, 12, 36, 108} for the full dataset or", "\n", "# {108} for the smaller dataset with only the 108 epochs.", "\n", "", "self", ".", "valid_epochs", "=", "set", "(", "[", "108", ",", "]", ")", "\n", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Loaded dataset in %d seconds'", "%", "elapsed", ")", "\n", "\n", "self", ".", "history", "=", "{", "}", "\n", "self", ".", "training_time_spent", "=", "0.0", "\n", "self", ".", "total_epochs_spent", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.query": [[65, 125], ["nasbench.NASBench.get_metrics_from_spec", "random.randint", "nasbench.OutOfDomainError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.get_metrics_from_spec"], ["", "def", "query", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fetch one of the evaluations for this model spec.\n\n    Each call will sample one of the config['num_repeats'] evaluations of the\n    model. This means that repeated queries of the same model (or isomorphic\n    models) may return identical metrics.\n\n    This function will increment the budget counters for benchmarking purposes.\n    See self.training_time_spent, and self.total_epochs_spent.\n\n    This function also allows querying the evaluation metrics at the halfway\n    point of training using stop_halfway. Using this option will increment the\n    budget counters only up to the halfway point.\n\n    Args:\n      model_spec: ModelSpec object.\n      epochs: number of epochs trained. Must be one of the evaluated number of\n        epochs, [4, 12, 36, 108] for the full dataset.\n      stop_halfway: if True, returned dict will only contain the training time\n        and accuracies at the halfway point of training (num_epochs/2).\n        Otherwise, returns the time and accuracies at the end of training\n        (num_epochs).\n\n    Returns:\n      dict containing the evaluated data for this object.\n\n    Raises:\n      OutOfDomainError: if model_spec or num_epochs is outside the search space.\n    \"\"\"", "\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "sampled_index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "config", "[", "'num_repeats'", "]", "-", "1", ")", "\n", "computed_stat", "=", "computed_stat", "[", "epochs", "]", "[", "sampled_index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat", "[", "'halfway_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat", "[", "'halfway_test_accuracy'", "]", "\n", "", "else", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat", "[", "'final_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat", "[", "'final_test_accuracy'", "]", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.query_macro_test": [[126, 196], ["nasbench.NASBench.get_metrics_from_spec", "range", "numpy.mean", "numpy.mean", "random.randint", "nasbench.OutOfDomainError", "val_accuracy_list.append", "test_accuray_list.append", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.get_metrics_from_spec"], ["", "def", "query_macro_test", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fetch one of the evaluations for this model spec.\n\n    Each call will sample one of the config['num_repeats'] evaluations of the\n    model. This means that repeated queries of the same model (or isomorphic\n    models) may return identical metrics.\n\n    This function will increment the budget counters for benchmarking purposes.\n    See self.training_time_spent, and self.total_epochs_spent.\n\n    This function also allows querying the evaluation metrics at the halfway\n    point of training using stop_halfway. Using this option will increment the\n    budget counters only up to the halfway point.\n\n    Args:\n      model_spec: ModelSpec object.\n      epochs: number of epochs trained. Must be one of the evaluated number of\n        epochs, [4, 12, 36, 108] for the full dataset.\n      stop_halfway: if True, returned dict will only contain the training time\n        and accuracies at the halfway point of training (num_epochs/2).\n        Otherwise, returns the time and accuracies at the end of training\n        (num_epochs).\n\n    Returns:\n      dict containing the evaluated data for this object.\n\n    Raises:\n      OutOfDomainError: if model_spec or num_epochs is outside the search space.\n    \"\"\"", "\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "\n", "test_accuray_list", "=", "[", "]", "\n", "val_accuracy_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "      ", "computed_stat_iter", "=", "computed_stat", "[", "epochs", "]", "[", "i", "]", "\n", "val_accuracy_list", ".", "append", "(", "computed_stat_iter", "[", "'final_validation_accuracy'", "]", ")", "\n", "test_accuray_list", ".", "append", "(", "computed_stat_iter", "[", "'final_test_accuracy'", "]", ")", "\n", "", "avg_val_acc", "=", "np", ".", "mean", "(", "val_accuracy_list", ")", "\n", "avg_test_val", "=", "np", ".", "mean", "(", "test_accuray_list", ")", "\n", "\n", "sampled_index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "config", "[", "'num_repeats'", "]", "-", "1", ")", "\n", "computed_stat", "=", "computed_stat", "[", "epochs", "]", "[", "sampled_index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "float", "(", "avg_val_acc", ")", "\n", "data", "[", "'test_accuracy'", "]", "=", "float", "(", "avg_test_val", ")", "\n", "", "else", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "float", "(", "avg_val_acc", ")", "\n", "data", "[", "'test_accuracy'", "]", "=", "float", "(", "avg_test_val", ")", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid": [[197, 215], ["nasbench.NASBench._check_spec"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench._check_spec"], ["", "def", "is_valid", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Checks the validity of the model_spec.\n\n    For the purposes of benchmarking, this does not increment the budget\n    counters.\n\n    Args:\n      model_spec: ModelSpec object.\n\n    Returns:\n      True if model is within space.\n    \"\"\"", "\n", "try", ":", "\n", "      ", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "", "except", "OutOfDomainError", ":", "\n", "      ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.get_budget_counters": [[216, 219], ["None"], "methods", ["None"], ["", "def", "get_budget_counters", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the time and budget counters.\"\"\"", "\n", "return", "self", ".", "training_time_spent", ",", "self", ".", "total_epochs_spent", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.reset_budget_counters": [[220, 224], ["None"], "methods", ["None"], ["", "def", "reset_budget_counters", "(", "self", ")", ":", "\n", "    ", "\"\"\"Reset the time and epoch budget counters.\"\"\"", "\n", "self", ".", "training_time_spent", "=", "0.0", "\n", "self", ".", "total_epochs_spent", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.hash_iterator": [[225, 228], ["nasbench.NASBench.fixed_statistics.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "def", "hash_iterator", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns iterator over all unique model hashes.\"\"\"", "\n", "return", "self", ".", "fixed_statistics", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.get_metrics_from_hash": [[229, 244], ["copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "get_metrics_from_hash", "(", "self", ",", "module_hash", ")", ":", "\n", "    ", "\"\"\"Returns the metrics for all epochs and all repeats of a hash.\n\n    This method is for dataset analysis and should not be used for benchmarking.\n    As such, it does not increment any of the budget counters.\n\n    Args:\n      module_hash: MD5 hash, i.e., the values yielded by hash_iterator().\n\n    Returns:\n      fixed stats and computed stats of the model spec provided.\n    \"\"\"", "\n", "fixed_stat", "=", "copy", ".", "deepcopy", "(", "self", ".", "fixed_statistics", "[", "module_hash", "]", ")", "\n", "computed_stat", "=", "copy", ".", "deepcopy", "(", "self", ".", "computed_statistics", "[", "module_hash", "]", ")", "\n", "return", "fixed_stat", ",", "computed_stat", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.get_metrics_from_spec": [[245, 260], ["nasbench.NASBench._check_spec", "nasbench.NASBench._hash_spec", "nasbench.NASBench.get_metrics_from_hash"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench._check_spec", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench._hash_spec", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.get_metrics_from_hash"], ["", "def", "get_metrics_from_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Returns the metrics for all epochs and all repeats of a model.\n\n    This method is for dataset analysis and should not be used for benchmarking.\n    As such, it does not increment any of the budget counters.\n\n    Args:\n      model_spec: ModelSpec object.\n\n    Returns:\n      fixed stats and computed stats of the model spec provided.\n    \"\"\"", "\n", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "module_hash", "=", "self", ".", "_hash_spec", "(", "model_spec", ")", "\n", "return", "self", ".", "get_metrics_from_hash", "(", "module_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench._check_spec": [[261, 285], ["len", "numpy.sum", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError"], "methods", ["None"], ["", "def", "_check_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Checks that the model spec is within the dataset.\"\"\"", "\n", "if", "not", "model_spec", ".", "valid_spec", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid spec, provided graph is disconnected.'", ")", "\n", "\n", "", "num_vertices", "=", "len", "(", "model_spec", ".", "ops", ")", "\n", "num_edges", "=", "np", ".", "sum", "(", "model_spec", ".", "matrix", ")", "\n", "\n", "if", "num_vertices", ">", "self", ".", "config", "[", "'module_vertices'", "]", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'too many vertices, got %d (max vertices = %d)'", "\n", "%", "(", "num_vertices", ",", "config", "[", "'module_vertices'", "]", ")", ")", "\n", "\n", "", "if", "num_edges", ">", "self", ".", "config", "[", "'max_edges'", "]", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'too many edges, got %d (max edges = %d)'", "\n", "%", "(", "num_edges", ",", "self", ".", "config", "[", "'max_edges'", "]", ")", ")", "\n", "\n", "", "if", "model_spec", ".", "ops", "[", "0", "]", "!=", "'input'", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'first operation should be \\'input\\''", ")", "\n", "", "if", "model_spec", ".", "ops", "[", "-", "1", "]", "!=", "'output'", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'last operation should be \\'output\\''", ")", "\n", "", "for", "op", "in", "model_spec", ".", "ops", "[", "1", ":", "-", "1", "]", ":", "\n", "      ", "if", "op", "not", "in", "self", ".", "config", "[", "'available_ops'", "]", ":", "\n", "        ", "raise", "OutOfDomainError", "(", "'unsupported op %s (available ops = %s)'", "\n", "%", "(", "op", ",", "self", ".", "config", "[", "'available_ops'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench._hash_spec": [[286, 289], ["model_spec.hash_spec"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.ModelSpec.hash_spec"], ["", "", "", "def", "_hash_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Returns the MD5 hash for a provided model_spec.\"\"\"", "\n", "return", "model_spec", ".", "hash_spec", "(", "self", ".", "config", "[", "'available_ops'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset._RepeatSampler.__init__": [[14, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset._RepeatSampler.__iter__": [[17, 20], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "from", "iter", "(", "self", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.FastDataLoader.__init__": [[24, 28], ["super().__init__", "object.__setattr__", "super().__iter__", "cifar10_dataset._RepeatSampler"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__iter__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "object", ".", "__setattr__", "(", "self", ",", "'batch_sampler'", ",", "_RepeatSampler", "(", "self", ".", "batch_sampler", ")", ")", "\n", "self", ".", "iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.FastDataLoader.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.FastDataLoader.__iter__": [[32, 35], ["range", "len", "next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.Cutout.__init__": [[113, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.Cutout.__call__": [[116, 132], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.get_cifar10_train_and_val_loader": [[52, 71], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "len", "list", "int", "cifar10_dataset.FastDataLoader", "cifar10_dataset.FastDataLoader", "torchvision.Compose", "range", "numpy.floor", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_train_and_val_loader", "(", "root_path", ",", "train_portion", "=", "0.7", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "train_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "num_train", "=", "len", "(", "train_set", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "train_loader", "=", "FastDataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ")", "\n", "val_loader", "=", "FastDataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.get_cifar10_train_loader": [[73, 86], ["cifar10_dataset.Cifar10Train", "cifar10_dataset.FastDataLoader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_train_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "trainset", "=", "Cifar10Train", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "\n", "trainloader", "=", "FastDataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.get_cifar10_val_loader": [[88, 98], ["cifar10_dataset.Cifar10Val", "cifar10_dataset.FastDataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_val_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "valset", "=", "Cifar10Val", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "valloader", "=", "FastDataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "valloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.get_cifar10_test_loader": [[100, 110], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "cifar10_dataset.FastDataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_test_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "False", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "testloader", "=", "FastDataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset.transforms_cifar10": [[134, 152], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "cifar10_dataset.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "transforms_cifar10", "(", "cutout", ",", "cutout_length", ")", ":", "\n", "    ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "cutout", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.__init__": [[23, 27], ["nasbench.api.NASBench", "data_nasbench.DataNasBench.get_total_keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.get_total_keys"], ["    ", "def", "__init__", "(", "self", ",", "search_space", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "nasbench", "=", "api", ".", "NASBench", "(", "tf_records_path", ")", "\n", "self", ".", "total_keys", "=", "self", ".", "get_total_keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_total_keys": [[28, 33], ["total_keys.append"], "methods", ["None"], ["", "def", "get_total_keys", "(", "self", ")", ":", "\n", "        ", "total_keys", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "nasbench", ".", "computed_statistics", ":", "\n", "            ", "total_keys", ".", "append", "(", "k", ")", "\n", "", "return", "total_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_type": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch": [[37, 60], ["cell.Cell.random_cell", "cell.Cell().encode_paths", "cell.Cell().encode_cell_3ops", "cell.Cell().get_val_loss2", "cell.Cell().get_test_loss2", "cell.Cell().get_val_loss", "cell.Cell().get_test_loss", "cell.Cell", "cell.Cell", "cell.Cell", "cell.Cell", "cell.Cell", "cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.random_cell", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell_3ops", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss"], ["", "def", "query_arch", "(", "self", ",", "\n", "arch", "=", "None", ",", "\n", "train", "=", "True", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic", "=", "True", ",", "\n", "isnnp", "=", "False", ")", ":", "\n", "        ", "if", "arch", "is", "None", ":", "\n", "            ", "arch", "=", "Cell", ".", "random_cell", "(", "self", ".", "nasbench", ")", "\n", "", "if", "encode_paths", ":", "\n", "            ", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_paths", "(", ")", "\n", "", "else", ":", "\n", "            ", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_cell_3ops", "(", ")", "\n", "\n", "", "if", "train", ":", "\n", "            ", "if", "isnnp", ":", "\n", "                ", "val_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_val_loss2", "(", "self", ".", "nasbench", ",", "deterministic", ")", "\n", "test_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_test_loss2", "(", "self", ".", "nasbench", ")", "\n", "", "else", ":", "\n", "                ", "val_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_val_loss", "(", "self", ".", "nasbench", ",", "deterministic", ")", "\n", "test_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_test_loss", "(", "self", ".", "nasbench", ")", "\n", "", "return", "arch", ",", "encoding", ",", "val_loss", ",", "test_loss", "\n", "", "else", ":", "\n", "            ", "return", "arch", ",", "encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch_gin": [[61, 84], ["cell.Cell.random_cell_gnn", "cell.Cell().encode_paths", "cell.Cell().encode_cell_3ops", "cell.Cell().get_val_loss2", "cell.Cell().get_test_loss2", "cell.Cell().get_val_loss", "cell.Cell().get_test_loss", "cell.Cell", "cell.Cell", "cell.Cell", "cell.Cell", "cell.Cell", "cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.random_cell_gnn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell_3ops", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss"], ["", "", "def", "query_arch_gin", "(", "self", ",", "\n", "arch", "=", "None", ",", "\n", "train", "=", "True", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic", "=", "True", ",", "\n", "isnnp", "=", "False", ")", ":", "\n", "        ", "if", "arch", "is", "None", ":", "\n", "            ", "arch", "=", "Cell", ".", "random_cell_gnn", "(", "self", ".", "nasbench", ")", "\n", "", "if", "encode_paths", ":", "\n", "            ", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_paths", "(", ")", "\n", "", "else", ":", "\n", "            ", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_cell_3ops", "(", ")", "\n", "\n", "", "if", "train", ":", "\n", "            ", "if", "isnnp", ":", "\n", "                ", "val_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_val_loss2", "(", "self", ".", "nasbench", ",", "deterministic", ")", "\n", "test_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_test_loss2", "(", "self", ".", "nasbench", ")", "\n", "", "else", ":", "\n", "                ", "val_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_val_loss", "(", "self", ".", "nasbench", ",", "deterministic", ")", "\n", "test_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_test_loss", "(", "self", ".", "nasbench", ")", "\n", "", "return", "arch", ",", "encoding", ",", "val_loss", ",", "test_loss", "\n", "", "else", ":", "\n", "            ", "return", "arch", ",", "encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.generate_random_dataset_gin": [[85, 113], ["len", "data_nasbench.DataNasBench.query_arch_gin", "data_nasbench.DataNasBench.get_path_indices", "data.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "", "def", "generate_random_dataset_gin", "(", "self", ",", "\n", "num", "=", "10", ",", "\n", "train", "=", "True", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "patience_factor", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        create a dataset of randomly sampled architectues\n        test for isomorphisms using a hash map of path indices\n        use patience_factor to avoid infinite loops\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "tries_left", "=", "num", "*", "patience_factor", "\n", "while", "len", "(", "data", ")", "<", "num", ":", "\n", "            ", "tries_left", "-=", "1", "\n", "if", "tries_left", "<=", "0", ":", "\n", "                ", "break", "\n", "", "archtuple", "=", "self", ".", "query_arch_gin", "(", "train", "=", "train", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "deterministic", "=", "deterministic_loss", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "archtuple", "[", "0", "]", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.generate_random_dataset": [[114, 142], ["len", "data_nasbench.DataNasBench.query_arch", "data_nasbench.DataNasBench.get_path_indices", "data.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "generate_random_dataset", "(", "self", ",", "\n", "num", "=", "10", ",", "\n", "train", "=", "True", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "patience_factor", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        create a dataset of randomly sampled architectues\n        test for isomorphisms using a hash map of path indices\n        use patience_factor to avoid infinite loops\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "tries_left", "=", "num", "*", "patience_factor", "\n", "while", "len", "(", "data", ")", "<", "num", ":", "\n", "            ", "tries_left", "-=", "1", "\n", "if", "tries_left", "<=", "0", ":", "\n", "                ", "break", "\n", "", "archtuple", "=", "self", ".", "query_arch", "(", "train", "=", "train", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "deterministic", "=", "deterministic_loss", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "archtuple", "[", "0", "]", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_path_indices": [[143, 145], ["cell.Cell().get_path_indices", "cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "get_path_indices", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "Cell", "(", "**", "arch", ")", ".", "get_path_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.mutate_arch": [[146, 148], ["cell.Cell().mutate", "cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate"], ["", "def", "mutate_arch", "(", "self", ",", "arch", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "return", "Cell", "(", "**", "arch", ")", ".", "mutate", "(", "self", ".", "nasbench", ",", "mutation_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_candidates": [[149, 202], ["data_nasbench.DataNasBench.get_path_indices", "range", "range", "data_nasbench.DataNasBench.query_arch", "data_nasbench.DataNasBench.get_path_indices", "len", "data_nasbench.DataNasBench.mutate_arch", "data_nasbench.DataNasBench.query_arch", "data_nasbench.DataNasBench.get_path_indices", "len", "candidates.append", "sorted", "candidates.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "get_candidates", "(", "self", ",", "data", ",", "\n", "num", "=", "100", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "num_best_arches", "=", "10", ",", "\n", "train", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch", "=", "d", "[", "0", "]", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "if", "acq_opt_type", "in", "[", "'mutation'", ",", "'mutation_random'", "]", ":", "\n", "# mutate architectures with the lowest validation error", "\n", "            ", "best_arches", "=", "[", "arch", "[", "0", "]", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "2", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "arch", "in", "best_arches", ":", "\n", "                ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                    ", "break", "\n", "", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "mutated", "=", "self", ".", "mutate_arch", "(", "arch", ")", "\n", "archtuple", "=", "self", ".", "query_arch", "(", "mutated", ",", "\n", "train", "=", "train", ",", "\n", "deterministic", "=", "deterministic_loss", ",", "\n", "encode_paths", "=", "encode_paths", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "mutated", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "archtuple", ")", "\n", "\n", "", "", "", "", "if", "acq_opt_type", "in", "[", "'random'", ",", "'mutation_random'", "]", ":", "\n", "            ", "for", "_", "in", "range", "(", "num", "*", "patience_factor", ")", ":", "\n", "                ", "if", "len", "(", "candidates", ")", ">=", "2", "*", "num", ":", "\n", "                    ", "break", "\n", "", "archtuple", "=", "self", ".", "query_arch", "(", "train", "=", "train", ",", "\n", "deterministic", "=", "deterministic_loss", ",", "\n", "encode_paths", "=", "encode_paths", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "archtuple", "[", "0", "]", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "archtuple", ")", "\n", "", "", "", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_candidates_gin": [[203, 260], ["data_nasbench.DataNasBench.get_path_indices", "range", "range", "data_nasbench.DataNasBench.query_arch", "data_nasbench.DataNasBench.get_path_indices", "len", "data_nasbench.DataNasBench.mutate_arch", "nas_lib.utils.utils_data.find_isolate_node", "data_nasbench.DataNasBench.query_arch_gin", "data_nasbench.DataNasBench.get_path_indices", "len", "candidates.append", "sorted", "candidates.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "get_candidates_gin", "(", "self", ",", "data", ",", "\n", "num", "=", "100", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "num_best_arches", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch", "=", "d", "[", "0", "]", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "if", "acq_opt_type", "in", "[", "'mutation'", ",", "'mutation_random'", "]", ":", "\n", "# mutate architectures with the lowest validation error", "\n", "            ", "best_arches", "=", "[", "arch", "[", "0", "]", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "2", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "arch", "in", "best_arches", ":", "\n", "                ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                    ", "break", "\n", "", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "mutated", "=", "self", ".", "mutate_arch", "(", "arch", ")", "\n", "mutated_matrix", ",", "mutated_ops", "=", "mutated", "[", "'matrix'", "]", ",", "mutated", "[", "'ops'", "]", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "mutated_matrix", ")", "\n", "mutated", "[", "'matrix'", "]", "=", "mutated_matrix", "\n", "mutated", "[", "'isolate_node_idxs'", "]", "=", "isolate_nodes", "\n", "\n", "archtuple", "=", "self", ".", "query_arch_gin", "(", "mutated", ",", "\n", "train", "=", "False", ",", "\n", "deterministic", "=", "deterministic_loss", ",", "\n", "encode_paths", "=", "encode_paths", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "mutated", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "archtuple", ")", "\n", "\n", "", "", "", "", "if", "acq_opt_type", "in", "[", "'random'", ",", "'mutation_random'", "]", ":", "\n", "            ", "for", "_", "in", "range", "(", "num", "*", "patience_factor", ")", ":", "\n", "                ", "if", "len", "(", "candidates", ")", ">=", "2", "*", "num", ":", "\n", "                    ", "break", "\n", "", "archtuple", "=", "self", ".", "query_arch", "(", "train", "=", "False", ",", "\n", "deterministic", "=", "deterministic_loss", ",", "\n", "encode_paths", "=", "encode_paths", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "archtuple", "[", "0", "]", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "archtuple", ")", "\n", "", "", "", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.generate_random_dataset_both": [[262, 288], ["len", "data_nasbench.DataNasBench.query_arch_both", "data_nasbench.DataNasBench.get_path_indices_both", "data.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch_both", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_path_indices_both"], ["", "def", "generate_random_dataset_both", "(", "self", ",", "\n", "num", "=", "10", ",", "\n", "train", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "patience_factor", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        create a dataset of randomly sampled architectues\n        test for isomorphisms using a hash map of path indices\n        use patience_factor to avoid infinite loops\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "tries_left", "=", "num", "*", "patience_factor", "\n", "while", "len", "(", "data", ")", "<", "num", ":", "\n", "            ", "tries_left", "-=", "1", "\n", "if", "tries_left", "<=", "0", ":", "\n", "                ", "break", "\n", "", "archtuple", "=", "self", ".", "query_arch_both", "(", "train", "=", "train", ",", "\n", "deterministic", "=", "deterministic_loss", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices_both", "(", "archtuple", "[", "0", "]", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.query_arch_both": [[289, 304], ["cell_both.CellM().encode_paths", "cell_both.CellM().encode_cell", "cell_both.CellM.random_cell_gnn", "cell_both.CellM().get_val_loss", "cell_both.CellM().get_test_loss", "cell_both.CellM", "cell_both.CellM", "cell_both.CellM", "cell_both.CellM"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.random_cell_gnn", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss"], ["", "def", "query_arch_both", "(", "self", ",", "\n", "arch", "=", "None", ",", "\n", "train", "=", "True", ",", "\n", "deterministic", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "search_space", "==", "'nasbench_case1'", ":", "\n", "            ", "if", "arch", "is", "None", ":", "\n", "                ", "arch", "=", "CellM", ".", "random_cell_gnn", "(", "self", ".", "nasbench", ")", "\n", "", "encoding", "=", "CellM", "(", "**", "arch", ")", ".", "encode_paths", "(", ")", "\n", "encoding_f", "=", "CellM", "(", "**", "arch", ")", ".", "encode_cell", "(", ")", "\n", "if", "train", ":", "\n", "                ", "val_loss", "=", "CellM", "(", "**", "arch", ")", ".", "get_val_loss", "(", "self", ".", "nasbench", ",", "deterministic", ")", "\n", "test_loss", "=", "CellM", "(", "**", "arch", ")", ".", "get_test_loss", "(", "self", ".", "nasbench", ")", "\n", "return", "arch", ",", "encoding", ",", "encoding_f", ",", "val_loss", ",", "test_loss", "\n", "", "else", ":", "\n", "                ", "return", "arch", ",", "encoding", ",", "encoding_f", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_path_indices_both": [[305, 307], ["cell_both.CellM().get_path_indices", "cell_both.CellM"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "", "", "def", "get_path_indices_both", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "CellM", "(", "**", "arch", ")", ".", "get_path_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.remove_duplicates_both": [[308, 320], ["data_nasbench.DataNasBench.get_path_indices_both", "unduplicated.append", "data_nasbench.DataNasBench.get_path_indices_both", "data_nasbench.DataNasBench.get_path_indices_both"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_path_indices_both", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_path_indices_both", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_path_indices_both"], ["", "def", "remove_duplicates_both", "(", "self", ",", "candidates", ",", "data", ")", ":", "\n", "# input: two sets of architectues: candidates and data", "\n", "# output: candidates with arches from data removed", "\n", "        ", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "dic", "[", "self", ".", "get_path_indices_both", "(", "d", "[", "0", "]", ")", "]", "=", "1", "\n", "", "unduplicated", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "            ", "if", "self", ".", "get_path_indices_both", "(", "candidate", "[", "0", "]", ")", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "self", ".", "get_path_indices_both", "(", "candidate", "[", "0", "]", ")", "]", "=", "1", "\n", "unduplicated", ".", "append", "(", "candidate", ")", "\n", "", "", "return", "unduplicated", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_candidates_fixed_nums_single_arch": [[321, 351], ["data_nasbench.DataNasBench.get_path_indices", "len", "data_nasbench.DataNasBench.mutate_arch", "data_nasbench.DataNasBench.query_arch", "data_nasbench.DataNasBench.get_path_indices", "candidates.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "get_candidates_fixed_nums_single_arch", "(", "self", ",", "data", ",", "\n", "num", "=", "100", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "\n", "arch", "=", "data", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "while", "len", "(", "candidates", ")", "<=", "num", ":", "\n", "            ", "mutated", "=", "self", ".", "mutate_arch", "(", "arch", ",", "mutation_rate", "=", "mutation_rate", ")", "\n", "archtuple", "=", "self", ".", "query_arch", "(", "mutated", ",", "\n", "train", "=", "True", ",", "\n", "deterministic", "=", "deterministic_loss", ",", "\n", "encode_paths", "=", "encode_paths", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "mutated", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "archtuple", ")", "\n", "\n", "", "", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.get_arch_list": [[352, 411], ["pickle.load", "open", "print", "cell.Cell().get_path_indices", "range", "len", "range", "data_nasbench.matrix_dummy_nodes", "range", "cell.Cell.random_cell", "cell.Cell().get_path_indices", "cell.Cell", "cell.Cell().mutate2", "cell.Cell().get_path_indices", "data_nasbench.matrix_dummy_nodes", "new_arch_list.append", "data_nasbench.matrix_dummy_nodes", "new_arch_list.append", "cell.Cell", "min", "cell.Cell", "cell.Cell", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.random_cell", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.mutate2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes"], ["", "def", "get_arch_list", "(", "self", ",", "\n", "aux_file_path", ",", "\n", "distance", "=", "None", ",", "\n", "iteridx", "=", "0", ",", "\n", "num_top_arches", "=", "5", ",", "\n", "max_edits", "=", "20", ",", "\n", "num_repeats", "=", "5", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "verbose", "=", "0", ")", ":", "\n", "# Method used for gp_bayesopt", "\n", "\n", "# load the list of architectures chosen by bayesopt so far", "\n", "        ", "base_arch_list", "=", "pickle", ".", "load", "(", "open", "(", "aux_file_path", ",", "'rb'", ")", ")", "\n", "top_arches", "=", "[", "archtuple", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "num_top_arches", "]", "]", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "[", "archtuple", "[", "1", "]", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "min", "(", "5", ",", "len", "(", "base_arch_list", ")", ")", "]", "]", "\n", "print", "(", "'top 5 val losses {}'", ".", "format", "(", "top_5_loss", ")", ")", "\n", "\n", "# perturb the best k architectures", "\n", "", "dic", "=", "{", "}", "\n", "for", "archtuple", "in", "base_arch_list", ":", "\n", "            ", "matrix", "=", "archtuple", "[", "0", "]", "[", "'matrix'", "]", "\n", "ops", "=", "archtuple", "[", "0", "]", "[", "'ops'", "]", "\n", "if", "matrix", ".", "shape", "[", "0", "]", "<", "NUM_VERTICES", ":", "\n", "                ", "matrix", ",", "ops", "=", "matrix_dummy_nodes", "(", "matrix", ",", "ops", ")", "\n", "", "path_indices", "=", "Cell", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", ".", "get_path_indices", "(", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "new_arch_list", "=", "[", "]", "\n", "for", "arch", "in", "top_arches", ":", "\n", "            ", "for", "edits", "in", "range", "(", "1", ",", "max_edits", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "num_repeats", ")", ":", "\n", "#perturbation = Cell(**arch).perturb(self.nasbench, edits)", "\n", "                    ", "arch_mutate", "=", "Cell", "(", "**", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "'ops'", ":", "arch", "[", "'ops'", "]", "}", ")", ".", "mutate2", "(", "self", ".", "nasbench", ",", "\n", "mutation_rate", "=", "edits", ")", "\n", "matrix", "=", "arch_mutate", "[", "'matrix'", "]", "\n", "ops", "=", "arch_mutate", "[", "'ops'", "]", "\n", "if", "matrix", ".", "shape", "[", "0", "]", "<", "NUM_VERTICES", ":", "\n", "                        ", "matrix", ",", "ops", "=", "matrix_dummy_nodes", "(", "matrix", ",", "ops", ")", "\n", "\n", "", "path_indices", "=", "Cell", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", ".", "get_path_indices", "(", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "arch_mutate", ")", "\n", "\n", "# make sure new_arch_list is not empty", "\n", "", "", "", "", "while", "len", "(", "new_arch_list", ")", "==", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "                ", "arch", "=", "Cell", ".", "random_cell", "(", "self", ".", "nasbench", ")", "\n", "matrix", "=", "arch", "[", "'matrix'", "]", "\n", "ops", "=", "arch", "[", "'ops'", "]", "\n", "if", "matrix", ".", "shape", "[", "0", "]", "<", "NUM_VERTICES", ":", "\n", "                    ", "matrix", ",", "ops", "=", "matrix_dummy_nodes", "(", "matrix", ",", "ops", ")", "\n", "", "path_indices", "=", "Cell", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", ".", "get_path_indices", "(", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "arch", ")", "\n", "\n", "", "", "", "return", "new_arch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.matrix_dummy_nodes": [[413, 426], ["numpy.zeros", "range", "nas_lib.utils.utils_data.find_isolate_node", "numpy.where"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node"], ["", "", "def", "matrix_dummy_nodes", "(", "matrix_in", ",", "ops_in", ")", ":", "\n", "# {2, 3, 4, 5, 6, 7}", "\n", "    ", "matrix", "=", "np", ".", "zeros", "(", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "for", "i", "in", "range", "(", "matrix_in", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "idxs", "=", "np", ".", "where", "(", "matrix_in", "[", "i", "]", "==", "1", ")", "\n", "for", "id", "in", "idxs", "[", "0", "]", ":", "\n", "            ", "if", "id", "==", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                ", "matrix", "[", "i", ",", "6", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "matrix", "[", "i", ",", "id", "]", "=", "1", "\n", "", "", "", "ops", "=", "ops_in", "[", ":", "(", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ")", "]", "+", "[", "'isolate'", "]", "*", "(", "7", "-", "matrix_in", ".", "shape", "[", "0", "]", ")", "+", "ops_in", "[", "-", "1", ":", "]", "\n", "find_isolate_node", "(", "matrix", ")", "\n", "return", "matrix", ",", "ops", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.__init__": [[20, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "matrix", ",", "matrix_orig", ",", "ops", ",", "isolate_node_idxs", "=", "None", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "matrix", "\n", "self", ".", "matrix_orig", "=", "matrix_orig", "\n", "self", ".", "ops", "=", "ops", "\n", "self", ".", "isolate_node_idxs", "=", "isolate_node_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.serialize": [[26, 30], ["None"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'matrix'", ":", "self", ".", "matrix", ",", "\n", "'ops'", ":", "self", ".", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.modelspec": [[32, 34], ["nas_lib.ModelSpec"], "methods", ["None"], ["", "def", "modelspec", "(", "self", ")", ":", "\n", "        ", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.random_cell": [[35, 53], ["numpy.random.choice", "numpy.triu", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "@", "classmethod", "\n", "def", "random_cell", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.random_cell_gnn": [[55, 78], ["numpy.random.choice", "numpy.triu", "numpy.triu.copy", "nas_lib.utils.utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "", "", "@", "classmethod", "\n", "def", "random_cell_gnn", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "matrix_orig", "=", "matrix", ".", "copy", "(", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'matrix_orig'", ":", "matrix_orig", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.get_val_loss": [[80, 94], ["round", "len", "nasbench.query", "accs.append", "nasbench.query", "nas_lib.ModelSpec", "numpy.mean", "nas_lib.ModelSpec"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query"], ["", "", "", "def", "get_val_loss", "(", "self", ",", "nasbench", ",", "deterministic", "=", "1", ",", "patience", "=", "50", ")", ":", "\n", "        ", "if", "not", "deterministic", ":", "\n", "# output one of the three validation accuracies at random", "\n", "            ", "return", "100", "*", "(", "1", "-", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", ")", "\n", "", "else", ":", "\n", "# query the api until we see all three accuracies, then average them", "\n", "# a few architectures only have two accuracies, so we use patience to avoid an infinite loop", "\n", "            ", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "                ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                    ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.get_test_loss": [[95, 107], ["round", "len", "nasbench.query", "accs.append", "nas_lib.ModelSpec", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query"], ["", "", "def", "get_test_loss", "(", "self", ",", "nasbench", ",", "patience", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        query the api until we see all three accuracies, then average them\n        a few architectures only have two accuracies, so we use patience to avoid an infinite loop\n        \"\"\"", "\n", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "            ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'test_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.perturb": [[108, 132], ["copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.random", "range", "range", "range", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "def", "perturb", "(", "self", ",", "nasbench", ",", "edits", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        create new perturbed cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "for", "_", "in", "range", "(", "edits", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                            ", "new_matrix", "[", "src", "]", "[", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", "]", "[", "dst", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "ind", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "available", "=", "[", "op", "for", "op", "in", "OPS", "if", "op", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.mutate": [[134, 160], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "def", "mutate", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "NUM_VERTICES", "\n", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "mutation_rate", "/", "OP_SPOTS", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.mutate_gvae": [[162, 190], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.utils.utils_data.find_isolate_node", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "", "", "def", "mutate_gvae", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "NUM_VERTICES", "\n", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "mutation_rate", "/", "OP_SPOTS", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "isolate_nodes", "=", "find_isolate_node", "(", "new_matrix", ")", "\n", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.encode_cell": [[192, 209], ["numpy.zeros", "range", "range", "tuple", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "", "", "def", "encode_cell", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the \"standard\" encoding,\n        i.e. adjacency matrix + op list encoding\n        \"\"\"", "\n", "encoding_length", "=", "(", "NUM_VERTICES", "**", "2", "-", "NUM_VERTICES", ")", "//", "2", "+", "OP_SPOTS", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ")", "\n", "# dic = {CONV1X1: 0., CONV3X3: 0.5, MAXPOOL3X3: 1.0}", "\n", "dic", "=", "{", "CONV1X1", ":", "0.", ",", "CONV3X3", ":", "0.3", ",", "MAXPOOL3X3", ":", "0.6", ",", "'isolate'", ":", "1.0", "}", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "encoding", "[", "-", "i", "]", "=", "dic", "[", "self", ".", "ops", "[", "i", "]", "]", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.get_paths": [[210, 225], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return all paths from input to output\n        \"\"\"", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "self", ".", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.get_path_indices": [[226, 245], ["cell_both.CellM.get_paths", "tuple", "range", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths"], ["", "def", "get_path_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 3^0 + ... + 3^5 paths total.\n        (Paths can be length 0 to 5, and for each path, for each node, there\n        are three choices for the operation.)\n        \"\"\"", "\n", "paths", "=", "self", ".", "get_paths", "(", ")", "\n", "mapping", "=", "{", "CONV3X3", ":", "0", ",", "CONV1X1", ":", "1", ",", "MAXPOOL3X3", ":", "2", "}", "\n", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "len", "(", "OPS", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.encode_paths": [[246, 254], ["sum", "cell_both.CellM.get_path_indices", "numpy.zeros", "len", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "encode_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" output one-hot encoding of paths \"\"\"", "\n", "num_paths", "=", "sum", "(", "[", "len", "(", "OPS", ")", "**", "i", "for", "i", "in", "range", "(", "OP_SPOTS", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", ")", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "num_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.path_distance": [[255, 261], ["numpy.sum", "numpy.array", "cell_both.CellM.encode_paths", "numpy.array", "other.encode_paths"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths"], ["", "def", "path_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their path encodings\n        \"\"\"", "\n", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "encode_paths", "(", ")", "!=", "np", ".", "array", "(", "other", ".", "encode_paths", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_both.CellM.edit_distance": [[262, 270], ["numpy.sum", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "edit_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their adjacency matrices and op lists\n        \"\"\"", "\n", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "matrix", ")", "!=", "np", ".", "array", "(", "other", ".", "matrix", ")", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "ops", ")", "!=", "np", ".", "array", "(", "other", ".", "ops", ")", ")", "\n", "return", "graph_dist", "+", "ops_dist", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.__init__": [[21, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "isolate_node_idxs", "=", "None", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "matrix", "\n", "self", ".", "ops", "=", "ops", "\n", "self", ".", "isolate_node_idxs", "=", "isolate_node_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.serialize": [[26, 30], ["None"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'matrix'", ":", "self", ".", "matrix", ",", "\n", "'ops'", ":", "self", ".", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.modelspec": [[32, 34], ["nas_lib.ModelSpec"], "methods", ["None"], ["", "def", "modelspec", "(", "self", ")", ":", "\n", "        ", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.random_cell": [[35, 53], ["numpy.random.choice", "numpy.triu", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "@", "classmethod", "\n", "def", "random_cell", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.random_cell_gnn": [[55, 76], ["numpy.random.choice", "numpy.triu", "nas_lib.utils.utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "", "", "@", "classmethod", "\n", "def", "random_cell_gnn", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.perturb": [[78, 102], ["copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.random", "range", "range", "range", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "", "", "def", "perturb", "(", "self", ",", "nasbench", ",", "edits", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        create new perturbed cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "for", "_", "in", "range", "(", "edits", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                            ", "new_matrix", "[", "src", "]", "[", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", "]", "[", "dst", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "ind", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "available", "=", "[", "op", "for", "op", "in", "OPS", "if", "op", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.encode_cell2": [[104, 122], ["numpy.zeros", "range", "range", "tuple", "range", "OPS.index", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "encode_cell2", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the \"standard\" encoding,\n        i.e. adjacency matrix + op list encoding\n        \"\"\"", "\n", "OPS", "=", "[", "SKIP", ",", "CONV1X1", ",", "CONV3X3", ",", "AVGPOOL3X3", ",", "ISOLATE", "]", "\n", "encoding_length", "=", "(", "NUM_VERTICES", "**", "2", "-", "NUM_VERTICES", ")", "//", "2", "+", "OP_SPOTS", "*", "len", "(", "OPS", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "op_idx", "=", "OPS", ".", "index", "(", "self", ".", "ops", "[", "i", "]", ")", "\n", "encoding", "[", "n", "+", "op_idx", "]", "=", "1", "\n", "n", "+=", "len", "(", "OPS", ")", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.get_paths": [[123, 138], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return all paths from input to output\n        \"\"\"", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "self", ".", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.get_path_indices": [[139, 159], ["cell_nasbench201.Cell.get_paths", "tuple", "range", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths"], ["", "def", "get_path_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 3^0 + ... + 3^5 paths total.\n        (Paths can be length 0 to 5, and for each path, for each node, there\n        are three choices for the operation.)\n        \"\"\"", "\n", "paths", "=", "self", ".", "get_paths", "(", ")", "\n", "# mapping = {CONV3X3: 0, CONV1X1: 1, MAXPOOL3X3: 2}", "\n", "mapping", "=", "{", "SKIP", ":", "0", ",", "CONV1X1", ":", "1", ",", "CONV3X3", ":", "2", ",", "AVGPOOL3X3", ":", "3", "}", "\n", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "len", "(", "OPS", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.encode_paths": [[160, 169], ["sum", "cell_nasbench201.Cell.get_path_indices", "numpy.zeros", "len", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "encode_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" output one-hot encoding of paths \"\"\"", "\n", "num_paths", "=", "sum", "(", "[", "len", "(", "OPS", ")", "**", "i", "for", "i", "in", "range", "(", "OP_SPOTS", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", ")", "\n", "# path_encoding = np.zeros(num_paths, dtype=np.int8)", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "num_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.path_distance": [[170, 176], ["numpy.sum", "numpy.array", "cell_nasbench201.Cell.encode_paths", "numpy.array", "other.encode_paths"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths"], ["", "def", "path_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their path encodings\n        \"\"\"", "\n", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "encode_paths", "(", ")", "!=", "np", ".", "array", "(", "other", ".", "encode_paths", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell_nasbench201.Cell.edit_distance": [[177, 185], ["numpy.sum", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "edit_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their adjacency matrices and op lists\n        \"\"\"", "\n", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "matrix", ")", "!=", "np", ".", "array", "(", "other", ".", "matrix", ")", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "ops", ")", "!=", "np", ".", "array", "(", "other", ".", "ops", ")", ")", "\n", "return", "graph_dist", "+", "ops_dist", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.__init__": [[19, 29], ["open", "pickle.load", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "nas_bench", "=", "None", "\n", "self", ".", "max_nodes", "=", "4", "\n", "self", ".", "op_names", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", "]", "\n", "self", ".", "op_names_alphaX", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", ",", "'term'", "]", "\n", "del", "self", ".", "nas_bench", "\n", "pkl_path", "=", "nas_bench_201_converted_base_path", "%", "dataset", "\n", "with", "open", "(", "pkl_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "total_archs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "total_keys", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.random_arch": [[30, 40], ["range", "nas_lib.nas_201_api.genotypes.Structure", "range", "genotypes.append", "random.choice", "xlist.append", "tuple"], "methods", ["None"], ["", "", "def", "random_arch", "(", "self", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "CellStructure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.mutate": [[41, 56], ["copy.deepcopy", "random.randint", "list", "random.randint", "random.choice", "tuple", "copy.deepcopy.tostr", "random.choice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tostr"], ["", "def", "mutate", "(", "self", ",", "parent_arch", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "child_arch", "=", "deepcopy", "(", "parent_arch", ")", "\n", "node_id", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "child_arch", ".", "nodes", ")", "-", "1", ")", "\n", "node_info", "=", "list", "(", "child_arch", ".", "nodes", "[", "node_id", "]", ")", "\n", "snode_id", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "node_info", ")", "-", "1", ")", "\n", "xop", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "while", "xop", "==", "node_info", "[", "snode_id", "]", "[", "0", "]", ":", "\n", "                ", "xop", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "node_info", "[", "snode_id", "]", "=", "(", "xop", ",", "node_info", "[", "snode_id", "]", "[", "1", "]", ")", "\n", "child_arch", ".", "nodes", "[", "node_id", "]", "=", "tuple", "(", "node_info", ")", "\n", "str_arch", "=", "child_arch", ".", "tostr", "(", ")", "\n", "if", "str_arch", "in", "self", ".", "total_keys", ":", "\n", "                ", "break", "\n", "", "", "return", "child_arch", ",", "self", ".", "total_archs", "[", "str_arch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.get_candidates": [[57, 103], ["enumerate", "nas_lib.data.cell_nasbench201.Cell().get_path_indices", "nas_lib.nas_201_api.genotypes.Structure.str2structure", "range", "nums_list.append", "mutated_archs_list.append", "len", "data_nasbench_201.NASBench201.mutate", "nas_lib.data.cell_nasbench201.Cell().get_path_indices", "nas_lib.data.cell_nasbench201.Cell", "sorted", "sorted", "candidates.append", "data_nasbench_201.adj_distance", "dist_list.append", "nas_lib.data.cell_nasbench201.Cell", "arch.tostr"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tostr"], ["", "def", "get_candidates", "(", "self", ",", "\n", "data", ",", "\n", "num", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "num_best_arches", "=", "10", ",", "\n", "return_dist", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "dist_list", "=", "[", "]", "\n", "nums_list", "=", "[", "]", "\n", "mutated_archs_list", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch", "=", "{", "'matrix'", ":", "d", "[", "0", "]", "[", "0", "]", ",", "'ops'", ":", "d", "[", "0", "]", "[", "1", "]", "}", "\n", "path_indices", "=", "Cell", "(", "**", "arch", ")", ".", "get_path_indices", "(", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "best_arches", "=", "[", "CellStructure", ".", "str2structure", "(", "arch", "[", "6", "]", ")", "\n", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "best_arches_full", "=", "[", "arch", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "best_arches", ")", ":", "\n", "            ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                ", "break", "\n", "", "nums", "=", "0", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                ", "_", ",", "mutated", "=", "self", ".", "mutate", "(", "arch", ")", "\n", "path_indices", "=", "Cell", "(", "matrix", "=", "mutated", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "mutated", "[", "0", "]", "[", "1", "]", ")", ".", "get_path_indices", "(", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "mutated", ")", "\n", "dist", "=", "adj_distance", "(", "arch", ".", "tostr", "(", ")", ",", "mutated", "[", "6", "]", ")", "\n", "dist_list", ".", "append", "(", "dist", ")", "\n", "nums", "+=", "1", "\n", "", "", "nums_list", ".", "append", "(", "nums", ")", "\n", "mutated_archs_list", ".", "append", "(", "best_arches_full", "[", "idx", "]", ")", "\n", "", "if", "return_dist", ":", "\n", "            ", "return", "candidates", "[", ":", "num", "]", ",", "dist_list", "[", ":", "num", "]", ",", "0", ",", "nums_list", ",", "mutated_archs_list", "\n", "", "else", ":", "\n", "            ", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.generate_random_dataset": [[104, 135], ["random.sample", "key_list.append", "nas_lib.data.cell_nasbench201.Cell", "nas_lib.data.cell_nasbench201.Cell.encode_paths", "nas_lib.data.cell_nasbench201.Cell.encode_cell2", "nas_lib.data.cell_nasbench201.Cell.get_path_indices", "data.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "", "def", "generate_random_dataset", "(", "self", ",", "num", "=", "10", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "False", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "key_list", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "k", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "\n", "key_list", ".", "append", "(", "k", "[", "0", "]", ")", "\n", "arch", "=", "self", ".", "total_archs", "[", "k", "[", "0", "]", "]", "\n", "cell_arch", "=", "Cell", "(", "matrix", "=", "arch", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "arch", "[", "0", "]", "[", "1", "]", ",", "isolate_node_idxs", "=", "[", "]", ")", "\n", "path_encoding1", "=", "cell_arch", ".", "encode_paths", "(", ")", "\n", "path_encoding2", "=", "cell_arch", ".", "encode_cell2", "(", ")", "\n", "path_indices", "=", "cell_arch", ".", "get_path_indices", "(", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "\n", "(", "\n", "arch", "[", "0", "]", ",", "\n", "arch", "[", "1", "]", ",", "\n", "arch", "[", "2", "]", ",", "\n", "path_encoding1", ",", "\n", "arch", "[", "4", "]", ",", "\n", "arch", "[", "5", "]", ",", "\n", "arch", "[", "6", "]", ",", "\n", "path_encoding2", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "data", ")", "==", "num", ":", "\n", "                ", "break", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.nasbench2graph2": [[136, 151], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "OPS.index", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "nasbench2graph2", "(", "self", ",", "data", ")", ":", "\n", "        ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "8", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "idx", "=", "OPS", ".", "index", "(", "ops", "[", "i", "]", ")", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.get_arch_list": [[152, 201], ["pickle.load", "open", "print", "nas_lib.data.cell_nasbench201.Cell().get_path_indices", "range", "len", "range", "range", "data_nasbench_201.NASBench201.random_arch().tostr", "nas_lib.data.cell_nasbench201.Cell().get_path_indices", "nas_lib.data.cell_nasbench201.Cell", "data_nasbench_201.NASBench201.mutate_edit", "nas_lib.data.cell_nasbench201.Cell().get_path_indices", "new_arch_list.append", "new_arch_list.append", "data_nasbench_201.NASBench201.random_arch", "nas_lib.data.cell_nasbench201.Cell", "min", "nas_lib.data.cell_nasbench201.Cell", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tostr", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.mutate_edit", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.random_arch"], ["", "def", "get_arch_list", "(", "self", ",", "\n", "aux_file_path", ",", "\n", "distance", "=", "None", ",", "\n", "iteridx", "=", "0", ",", "\n", "num_top_arches", "=", "5", ",", "\n", "max_edits", "=", "20", ",", "\n", "num_repeats", "=", "5", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "verbose", "=", "0", ")", ":", "\n", "# Method used for gp_bayesopt", "\n", "\n", "# load the list of architectures chosen by bayesopt so far", "\n", "        ", "base_arch_list", "=", "pickle", ".", "load", "(", "open", "(", "aux_file_path", ",", "'rb'", ")", ")", "\n", "top_arches", "=", "[", "archtuple", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "num_top_arches", "]", "]", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "[", "archtuple", "[", "1", "]", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "min", "(", "5", ",", "len", "(", "base_arch_list", ")", ")", "]", "]", "\n", "print", "(", "'top 5 val losses {}'", ".", "format", "(", "top_5_loss", ")", ")", "\n", "\n", "# perturb the best k architectures", "\n", "", "dic", "=", "{", "}", "\n", "for", "archtuple", "in", "base_arch_list", ":", "\n", "            ", "arch", "=", "{", "'matrix'", ":", "self", ".", "total_archs", "[", "archtuple", "[", "0", "]", "[", "'string'", "]", "]", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "self", ".", "total_archs", "[", "archtuple", "[", "0", "]", "[", "'string'", "]", "]", "[", "0", "]", "[", "1", "]", "}", "\n", "path_indices", "=", "Cell", "(", "**", "arch", ")", ".", "get_path_indices", "(", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "new_arch_list", "=", "[", "]", "\n", "for", "arch", "in", "top_arches", ":", "\n", "            ", "for", "edits", "in", "range", "(", "1", ",", "max_edits", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "num_repeats", ")", ":", "\n", "#perturbation = Cell(**arch).perturb(self.nasbench, edits)", "\n", "                    ", "perturbation", "=", "self", ".", "mutate_edit", "(", "arch", "[", "'string'", "]", ",", "mutation_rate", "=", "edits", ")", "\n", "perturbation_arch", "=", "self", ".", "total_archs", "[", "perturbation", "]", "[", "0", "]", "\n", "path_indices", "=", "Cell", "(", "matrix", "=", "perturbation_arch", "[", "0", "]", ",", "ops", "=", "perturbation_arch", "[", "1", "]", ")", ".", "get_path_indices", "(", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "{", "'string'", ":", "perturbation", "}", ")", "\n", "\n", "# make sure new_arch_list is not empty", "\n", "", "", "", "", "while", "len", "(", "new_arch_list", ")", "==", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "                ", "random_arch_str", "=", "self", ".", "random_arch", "(", ")", ".", "tostr", "(", ")", "\n", "random_arch", "=", "self", ".", "total_archs", "[", "random_arch_str", "]", "[", "0", "]", "\n", "path_indices", "=", "Cell", "(", "matrix", "=", "random_arch", "[", "0", "]", ",", "ops", "=", "random_arch", "[", "1", "]", ")", ".", "get_path_indices", "(", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "{", "'string'", ":", "random_arch_str", "}", ")", "\n", "\n", "", "", "", "return", "new_arch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.mutate_edit": [[202, 218], ["data_nasbench_201.get_op_list", "enumerate", "data_nasbench_201.get_string_from_ops", "random.random", "new_ops.append", "new_ops.append", "random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.get_op_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.get_string_from_ops", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "def", "mutate_edit", "(", "self", ",", "arch", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        code modified from project https://github.com/naszilla/naszilla\n        \"\"\"", "\n", "ops", "=", "get_op_list", "(", "arch", ")", "\n", "new_ops", "=", "[", "]", "\n", "# keeping mutation_prob consistent with nasbench_101", "\n", "mutation_prob", "=", "mutation_rate", "/", "(", "OP_SPOTS", "-", "2", ")", "\n", "\n", "for", "i", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n", "                ", "available", "=", "[", "o", "for", "o", "in", "OPS_LIST", "if", "o", "!=", "op", "]", "\n", "new_ops", ".", "append", "(", "random", ".", "choice", "(", "available", ")", ")", "\n", "", "else", ":", "\n", "                ", "new_ops", ".", "append", "(", "op", ")", "\n", "", "", "return", "get_string_from_ops", "(", "new_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.NASBench201.generate_distance_matrix": [[219, 231], ["numpy.zeros", "enumerate", "enumerate", "len", "len", "data_nasbench_201.adj_distance", "data_nasbench_201.nasbot_distance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.nasbot_distance"], ["", "@", "classmethod", "\n", "def", "generate_distance_matrix", "(", "cls", ",", "arches_1", ",", "arches_2", ",", "distance", ")", ":", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "[", "len", "(", "arches_1", ")", ",", "len", "(", "arches_2", ")", "]", ")", "\n", "for", "i", ",", "arch_1", "in", "enumerate", "(", "arches_1", ")", ":", "\n", "            ", "for", "j", ",", "arch_2", "in", "enumerate", "(", "arches_2", ")", ":", "\n", "                ", "if", "distance", "==", "'adj'", ":", "\n", "                    ", "matrix", "[", "i", "]", "[", "j", "]", "=", "adj_distance", "(", "arch_1", "[", "'string'", "]", ",", "arch_2", "[", "'string'", "]", ")", "\n", "", "elif", "distance", "==", "'nasbot'", ":", "\n", "                    ", "matrix", "[", "i", "]", "[", "j", "]", "=", "nasbot_distance", "(", "arch_1", "[", "'string'", "]", ",", "arch_2", "[", "'string'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Distance {distance} does not support at present!'", ")", "\n", "", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.get_op_list": [[233, 241], ["arch.split", "t.split", "enumerate"], "function", ["None"], ["", "", "def", "get_op_list", "(", "arch", ")", ":", "\n", "    ", "\"\"\"\n    code modified from project https://github.com/naszilla/naszilla\n    \"\"\"", "\n", "# given a string, get the list of operations", "\n", "tokens", "=", "arch", ".", "split", "(", "'|'", ")", "\n", "ops", "=", "[", "t", ".", "split", "(", "'~'", ")", "[", "0", "]", "for", "i", ",", "t", "in", "enumerate", "(", "tokens", ")", "if", "i", "not", "in", "[", "0", ",", "2", ",", "5", ",", "9", "]", "]", "\n", "return", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.get_string_from_ops": [[242, 254], ["enumerate", "strings.append", "strings.append", "len"], "function", ["None"], ["", "def", "get_string_from_ops", "(", "ops", ")", ":", "\n", "    ", "\"\"\"\n    code modified from project https://github.com/naszilla/naszilla\n    \"\"\"", "\n", "# given a list of operations, get the string", "\n", "strings", "=", "[", "'|'", "]", "\n", "nodes", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", "\n", "for", "i", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "strings", ".", "append", "(", "op", "+", "'~{}|'", ".", "format", "(", "nodes", "[", "i", "]", ")", ")", "\n", "if", "i", "<", "len", "(", "nodes", ")", "-", "1", "and", "nodes", "[", "i", "+", "1", "]", "==", "0", ":", "\n", "            ", "strings", ".", "append", "(", "'+|'", ")", "\n", "", "", "return", "''", ".", "join", "(", "strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.adj_distance": [[256, 260], ["data_nasbench_201.get_op_list", "data_nasbench_201.get_op_list", "numpy.sum", "range", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.get_op_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.get_op_list"], ["", "def", "adj_distance", "(", "cell_1", ",", "cell_2", ")", ":", "\n", "    ", "cell_1_ops", "=", "get_op_list", "(", "cell_1", ")", "\n", "cell_2_ops", "=", "get_op_list", "(", "cell_2", ")", "\n", "return", "np", ".", "sum", "(", "[", "1", "for", "i", "in", "range", "(", "len", "(", "cell_1_ops", ")", ")", "if", "cell_1_ops", "[", "i", "]", "!=", "cell_2_ops", "[", "i", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.nasbot_distance": [[262, 273], ["data_nasbench_201.get_op_list", "data_nasbench_201.get_op_list", "numpy.sum", "get_op_list.count", "get_op_list.count", "numpy.abs", "data_nasbench_201.adj_distance", "numpy.subtract"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.get_op_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_201.get_op_list", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance"], ["", "def", "nasbot_distance", "(", "cell_1", ",", "cell_2", ")", ":", "\n", "# distance based on optimal transport between row sums, column sums, and ops", "\n", "\n", "    ", "cell_1_ops", "=", "get_op_list", "(", "cell_1", ")", "\n", "cell_2_ops", "=", "get_op_list", "(", "cell_2", ")", "\n", "\n", "cell_1_counts", "=", "[", "cell_1_ops", ".", "count", "(", "op", ")", "for", "op", "in", "OPS", "]", "\n", "cell_2_counts", "=", "[", "cell_2_ops", ".", "count", "(", "op", ")", "for", "op", "in", "OPS", "]", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_counts", ",", "cell_2_counts", ")", ")", ")", "\n", "\n", "return", "ops_dist", "+", "adj_distance", "(", "cell_1", ",", "cell_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.__init__": [[11, 14], ["nasbench.api.NASBench", "data_nasbench_101_distributon_analysis.DataNasBenchDist.get_total_keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.get_total_keys"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "nasbench", "=", "api", ".", "NASBench", "(", "tf_records_path", ")", "\n", "self", ".", "total_keys", "=", "self", ".", "get_total_keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.get_total_keys": [[15, 20], ["total_keys.append"], "methods", ["None"], ["", "def", "get_total_keys", "(", "self", ")", ":", "\n", "        ", "total_keys", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "nasbench", ".", "computed_statistics", ":", "\n", "            ", "total_keys", ".", "append", "(", "k", ")", "\n", "", "return", "total_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.get_random_architectures": [[21, 47], ["matrix.astype", "o_matrix.astype", "random.sample", "final_validation_accuracy.append", "final_test_accuracy.append", "data_nasbench_101_distributon_analysis.DataNasBenchDist.matrix_dummy_nodes", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes"], ["", "def", "get_random_architectures", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "k", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "[", "0", "]", "\n", "final_validation_accuracy", "=", "[", "]", "\n", "final_test_accuracy", "=", "[", "]", "\n", "for", "results", "in", "self", ".", "nasbench", ".", "computed_statistics", "[", "k", "]", "[", "108", "]", ":", "\n", "                ", "final_validation_accuracy", ".", "append", "(", "results", "[", "'final_validation_accuracy'", "]", ")", "\n", "final_test_accuracy", ".", "append", "(", "results", "[", "'final_test_accuracy'", "]", ")", "\n", "", "mean_val_accuracy", "=", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "final_validation_accuracy", ")", ")", "\n", "mean_test_accuracy", "=", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "final_test_accuracy", ")", ")", "\n", "o_matrix", "=", "self", ".", "nasbench", ".", "fixed_statistics", "[", "k", "]", "[", "'module_adjacency'", "]", "\n", "o_ops", "=", "self", ".", "nasbench", ".", "fixed_statistics", "[", "k", "]", "[", "'module_operations'", "]", "\n", "if", "o_matrix", ".", "shape", "[", "0", "]", "<", "7", ":", "\n", "                ", "matrix", ",", "ops", "=", "self", ".", "matrix_dummy_nodes", "(", "o_matrix", ",", "o_ops", ")", "\n", "break", "\n", "", "else", ":", "\n", "                ", "matrix", "=", "o_matrix", "\n", "ops", "=", "o_ops", "\n", "break", "\n", "", "", "return", "{", "\n", "'matrix'", ":", "matrix", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'matrix_orig'", ":", "o_matrix", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", ",", "\n", "'val_loss'", ":", "mean_val_accuracy", ",", "\n", "'test_loss'", ":", "mean_test_accuracy", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.generate_random_dataset": [[49, 78], ["len", "data_nasbench_101_distributon_analysis.DataNasBenchDist.query_arch", "data_nasbench_101_distributon_analysis.DataNasBenchDist.get_path_indices", "data.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "generate_random_dataset", "(", "self", ",", "\n", "num", "=", "10", ",", "\n", "train", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "patience_factor", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        create a dataset of randomly sampled architectues\n        test for isomorphisms using a hash map of path indices\n        use patience_factor to avoid infinite loops\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "tries_left", "=", "num", "*", "patience_factor", "\n", "while", "len", "(", "data", ")", "<", "num", ":", "\n", "            ", "tries_left", "-=", "1", "\n", "if", "tries_left", "<=", "0", ":", "\n", "                ", "break", "\n", "", "archtuple", "=", "self", ".", "query_arch", "(", "train", "=", "train", ")", "\n", "arch_temp", "=", "{", "\n", "'matrix'", ":", "archtuple", "[", "0", "]", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "archtuple", "[", "0", "]", "[", "'ops'", "]", "\n", "}", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch_temp", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.query_arch": [[79, 94], ["nas_lib.data.cell.Cell().encode_paths", "data_nasbench_101_distributon_analysis.DataNasBenchDist.get_random_architectures", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_random_architectures"], ["", "def", "query_arch", "(", "self", ",", "\n", "arch", "=", "None", ",", "\n", "train", "=", "True", ")", ":", "\n", "        ", "if", "arch", "is", "None", ":", "\n", "            ", "arch", "=", "self", ".", "get_random_architectures", "(", ")", "\n", "", "arch_temp", "=", "{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "\n", "}", "\n", "encoding", "=", "Cell", "(", "**", "arch_temp", ")", ".", "encode_paths", "(", ")", "\n", "\n", "if", "train", ":", "\n", "            ", "return", "arch", ",", "encoding", ",", "arch", "[", "'val_loss'", "]", ",", "arch", "[", "'test_loss'", "]", "\n", "", "else", ":", "\n", "            ", "return", "arch", ",", "encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.get_path_indices": [[95, 97], ["nas_lib.data.cell.Cell().get_path_indices", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "", "def", "get_path_indices", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "Cell", "(", "**", "arch", ")", ".", "get_path_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.matrix_dummy_nodes": [[98, 111], ["numpy.zeros", "range", "nas_lib.utils.utils_data.find_isolate_node", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node"], ["", "def", "matrix_dummy_nodes", "(", "self", ",", "matrix_in", ",", "ops_in", ")", ":", "\n", "# {2, 3, 4, 5, 6, 7}", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "for", "i", "in", "range", "(", "matrix_in", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "idxs", "=", "np", ".", "where", "(", "matrix_in", "[", "i", "]", "==", "1", ")", "\n", "for", "id", "in", "idxs", "[", "0", "]", ":", "\n", "                ", "if", "id", "==", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                    ", "matrix", "[", "i", ",", "6", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "matrix", "[", "i", ",", "id", "]", "=", "1", "\n", "", "", "", "ops", "=", "ops_in", "[", ":", "(", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ")", "]", "+", "[", "'isolate'", "]", "*", "(", "7", "-", "matrix_in", ".", "shape", "[", "0", "]", ")", "+", "ops_in", "[", "-", "1", ":", "]", "\n", "find_isolate_node", "(", "matrix", ")", "\n", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.get_all_path_encooding": [[112, 139], ["nasbench.api.ModelSpec", "nas_lib.data.cell.Cell().encode_paths", "data_nasbench_101_distributon_analysis.DataNasBenchDist.matrix_dummy_nodes", "nas_lib.utils.utils_data.find_isolate_node", "data_nasbench_101_distributon_analysis.DataNasBenchDist.nasbench.is_valid", "len", "print", "print", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "def", "get_all_path_encooding", "(", "self", ")", ":", "\n", "        ", "total_arch_bananas_dict", "=", "{", "}", "\n", "total_keys", "=", "[", "k", "for", "k", "in", "self", ".", "nasbench", ".", "computed_statistics", "]", "\n", "for", "k", "in", "total_keys", ":", "\n", "            ", "arch_matrix", "=", "self", ".", "nasbench", ".", "fixed_statistics", "[", "k", "]", "[", "'module_adjacency'", "]", "\n", "arch_ops", "=", "self", ".", "nasbench", ".", "fixed_statistics", "[", "k", "]", "[", "'module_operations'", "]", "\n", "if", "arch_matrix", ".", "shape", "[", "0", "]", "<", "7", ":", "\n", "                ", "matrix", ",", "ops", "=", "self", ".", "matrix_dummy_nodes", "(", "arch_matrix", ",", "arch_ops", ")", "\n", "", "else", ":", "\n", "                ", "matrix", "=", "arch_matrix", "\n", "ops", "=", "arch_ops", "\n", "", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "arch_matrix", ",", "ops", "=", "arch_ops", ")", "\n", "if", "arch_matrix", ".", "shape", "[", "0", "]", "==", "7", ":", "\n", "                ", "isolate_list", "=", "find_isolate_node", "(", "arch_matrix", ")", "\n", "if", "len", "(", "isolate_list", ")", ">=", "1", ":", "\n", "                    ", "print", "(", "arch_matrix", ")", "\n", "print", "(", "isolate_list", ")", "\n", "", "", "if", "not", "self", ".", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "arch", "=", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_paths", "(", ")", "\n", "total_arch_bananas_dict", "[", "k", "]", "=", "encoding", "\n", "", "return", "total_arch_bananas_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.__init__": [[20, 25], ["data_nasbench_asr.DataNasBenchASR.load_dates", "list", "data_nasbench_asr.DataNasBenchASR.total_archs.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.load_dates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "'nasbench_asr'", "\n", "self", ".", "total_archs", ",", "self", ".", "all_datas_dict", ",", "self", ".", "all_datas_key_arch", ",", "self", ".", "all_datas_arch_key", ",", "self", ".", "c_mapping", ",", "self", ".", "total_len", "=", "self", ".", "load_dates", "(", ")", "\n", "self", ".", "total_keys", "=", "list", "(", "self", ".", "total_archs", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.generate_random_dataset": [[26, 54], ["random.sample", "key_list.append", "tuple", "data.append", "len"], "methods", ["None"], ["", "def", "generate_random_dataset", "(", "self", ",", "num", ",", "allow_isomorphisms", ",", "deterministic_loss", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "key_list", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "k", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "\n", "key_list", ".", "append", "(", "k", "[", "0", "]", ")", "\n", "arch", "=", "self", ".", "total_archs", "[", "k", "[", "0", "]", "]", "\n", "path_encoding1", "=", "arch", "[", "3", "]", "\n", "path_encoding2", "=", "arch", "[", "-", "1", "]", "\n", "path_indices", "=", "tuple", "(", "path_encoding1", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "\n", "(", "\n", "arch", "[", "0", "]", ",", "\n", "arch", "[", "1", "]", ",", "\n", "arch", "[", "2", "]", ",", "\n", "path_encoding1", ",", "\n", "arch", "[", "4", "]", ",", "\n", "arch", "[", "5", "]", ",", "\n", "arch", "[", "6", "]", ",", "\n", "path_encoding2", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "data", ")", "==", "num", ":", "\n", "                ", "break", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.mutate": [[55, 92], ["list", "random.randint", "map", "copy.deepcopy", "tuple", "random.randint", "random.choice", "OPS_LIST.index", "random.randint", "list", "random.choice", "OPS_LIST.index", "random.randint", "map", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "mutate", "(", "self", ",", "arch_str", ",", "mutate_rate", "=", "1", ")", ":", "\n", "        ", "arch_list", "=", "self", ".", "all_datas_key_arch", "[", "arch_str", "]", "\n", "arch_list", "=", "list", "(", "map", "(", "list", ",", "arch_list", ")", ")", "\n", "which_part", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "while", "True", ":", "\n", "            ", "child_arch", "=", "deepcopy", "(", "arch_list", ")", "\n", "if", "mutate_rate", "==", "-", "1", "or", "which_part", "==", "0", ":", "\n", "                ", "block_op", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "xop", "=", "random", ".", "choice", "(", "OPS_LIST", ")", "\n", "xop_idx", "=", "OPS_LIST", ".", "index", "(", "xop", ")", "\n", "while", "xop_idx", "==", "child_arch", "[", "block_op", "]", "[", "0", "]", ":", "\n", "                    ", "xop", "=", "random", ".", "choice", "(", "OPS_LIST", ")", "\n", "xop_idx", "=", "OPS_LIST", ".", "index", "(", "xop", ")", "\n", "", "child_arch", "[", "block_op", "]", "[", "0", "]", "=", "xop_idx", "\n", "", "if", "mutate_rate", "==", "-", "1", "or", "which_part", "==", "1", ":", "\n", "                ", "block_conn", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "if", "block_conn", "==", "0", ":", "\n", "                    ", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "while", "op_idx", "==", "child_arch", "[", "0", "]", "[", "1", "]", ":", "\n", "                        ", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "", "child_arch", "[", "0", "]", "[", "1", "]", "=", "op_idx", "\n", "", "elif", "block_conn", "==", "1", ":", "\n", "                    ", "nested_block_idx", "=", "random", ".", "randint", "(", "1", ",", "2", ")", "\n", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "while", "op_idx", "==", "child_arch", "[", "1", "]", "[", "nested_block_idx", "]", ":", "\n", "                        ", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "", "child_arch", "[", "1", "]", "[", "nested_block_idx", "]", "=", "op_idx", "\n", "", "else", ":", "\n", "                    ", "nested_block_idx", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "while", "op_idx", "==", "child_arch", "[", "2", "]", "[", "nested_block_idx", "]", ":", "\n", "                        ", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "", "child_arch", "[", "2", "]", "[", "nested_block_idx", "]", "=", "op_idx", "\n", "\n", "", "", "child_arch_tuple", "=", "tuple", "(", "list", "(", "map", "(", "tuple", ",", "child_arch", ")", ")", ")", "\n", "if", "child_arch_tuple", "in", "self", ".", "all_datas_arch_key", ":", "\n", "                ", "return", "self", ".", "total_archs", "[", "self", ".", "all_datas_arch_key", "[", "child_arch_tuple", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.get_candidates": [[93, 126], ["enumerate", "data_nasbench_asr.DataNasBenchASR.get_path_indices", "range", "len", "data_nasbench_asr.DataNasBenchASR.mutate", "data_nasbench_asr.DataNasBenchASR.get_path_indices", "sorted", "candidates.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "", "", "def", "get_candidates", "(", "self", ",", "\n", "data", ",", "\n", "num", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "num_best_arches", "=", "10", ",", "\n", "mutation_rate", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "path_indices", "=", "self", ".", "get_path_indices", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "best_arches", "=", "[", "arch", "for", "arch", "in", "sorted", "(", "data", ",", "\n", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "best_arches", ")", ":", "\n", "            ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                ", "break", "\n", "", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                ", "mutated", "=", "self", ".", "mutate", "(", "arch", "[", "6", "]", ",", "mutate_rate", "=", "mutation_rate", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "mutated", "[", "1", "]", ",", "mutated", "[", "2", "]", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "mutated", ")", "\n", "", "", "", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.get_arch_info_key": [[127, 129], ["tuple", "list", "map"], "methods", ["None"], ["", "def", "get_arch_info_key", "(", "self", ",", "arch_info", ")", ":", "\n", "        ", "return", "tuple", "(", "list", "(", "map", "(", "tuple", ",", "arch_info", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.load_dates": [[130, 176], ["nasbench_asr.dataset.from_folder", "all_datas[].items", "all_datas_key_arch.items", "all_datas_dict.items", "data_nasbench_asr.DataNasBenchASR.remapping_path_based_encoding", "min", "total_val_data.index", "print", "data_list.items", "numpy.mean", "numpy.mean", "data_nasbench_asr.DataNasBenchASR.arch2dat", "data_nasbench_asr.DataNasBenchASR.get_path_indices", "total_val_data.append", "total_test_data.append", "[].append", "[].append", "numpy.array", "numpy.array", "data_nasbench_asr.DataNasBenchASR.adj_ops_encoding", "min", "data_nasbench_asr.DataNasBenchASR.get_arch_info_key"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.from_folder", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.remapping_path_based_encoding", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.arch2dat", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.adj_ops_encoding", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_arch_info_key"], ["", "def", "load_dates", "(", "self", ")", ":", "\n", "        ", "total_arch_data", "=", "{", "}", "\n", "total_val_data", "=", "[", "]", "\n", "total_test_data", "=", "[", "]", "\n", "all_data", "=", "from_folder", "(", "nas_bench_asr_path", ")", "\n", "all_datas", "=", "all_data", ".", "dbs", "\n", "all_datas_dict", "=", "{", "}", "\n", "all_datas_key_arch", "=", "{", "}", "\n", "all_datas_arch_key", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "all_datas", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "all_datas_dict", ":", "\n", "                ", "all_datas_dict", "[", "k", "]", "=", "[", "[", "v", "[", "0", "]", "[", "-", "1", "]", "]", ",", "[", "v", "[", "-", "2", "]", "]", ",", "v", "[", "-", "1", "]", "]", "\n", "all_datas_key_arch", "[", "k", "]", "=", "v", "[", "-", "1", "]", "\n", "all_datas_arch_key", "[", "self", ".", "get_arch_info_key", "(", "v", "[", "-", "1", "]", ")", "]", "=", "k", "\n", "\n", "", "", "for", "data_list", "in", "all_datas", "[", "1", ":", "]", ":", "\n", "            ", "for", "k", ",", "v", "in", "data_list", ".", "items", "(", ")", ":", "\n", "                ", "all_datas_dict", "[", "k", "]", "[", "0", "]", ".", "append", "(", "v", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "all_datas_dict", "[", "k", "]", "[", "1", "]", ".", "append", "(", "v", "[", "-", "2", "]", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "all_datas_key_arch", ".", "items", "(", ")", ":", "\n", "            ", "all_datas_dict", "[", "k", "]", "[", "0", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "all_datas_dict", "[", "k", "]", "[", "0", "]", ")", ")", "\n", "all_datas_dict", "[", "k", "]", "[", "1", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "all_datas_dict", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "all_datas_dict", ".", "items", "(", ")", ":", "\n", "            ", "adj_matrix", ",", "ops", "=", "self", ".", "arch2dat", "(", "v", "[", "-", "1", "]", ")", "\n", "path_based_indices", "=", "self", ".", "get_path_indices", "(", "adj_matrix", ",", "ops", ")", "\n", "data", "=", "[", "\n", "[", "adj_matrix", ",", "ops", "]", ",", "\n", "adj_matrix", ",", "# store adjacency matrix", "\n", "ops", ",", "# store ops list ['input', 'fc', 'output']", "\n", "path_based_indices", ",", "# path based encoding", "\n", "v", "[", "0", "]", ",", "\n", "v", "[", "1", "]", ",", "\n", "k", ",", "\n", "self", ".", "adj_ops_encoding", "(", "adj_matrix", ",", "ops", ")", ",", "# store path encoding", "\n", "]", "\n", "total_arch_data", "[", "k", "]", "=", "data", "\n", "total_val_data", ".", "append", "(", "v", "[", "0", "]", ")", "\n", "total_test_data", ".", "append", "(", "v", "[", "1", "]", ")", "\n", "", "total_arch_data", ",", "c_mapping", ",", "total_len", "=", "self", ".", "remapping_path_based_encoding", "(", "total_arch_data", ")", "\n", "min_validate_val", "=", "min", "(", "total_val_data", ")", "\n", "min_val_idx", "=", "total_val_data", ".", "index", "(", "min_validate_val", ")", "\n", "print", "(", "f'min val data value is {min_validate_val}, corr min test data is {total_test_data[min_val_idx]}, '", "\n", "f'and the min test val is {min(total_test_data)}'", ")", "\n", "return", "total_arch_data", ",", "all_datas_dict", ",", "all_datas_key_arch", ",", "all_datas_arch_key", ",", "c_mapping", ",", "total_len", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.remapping_path_based_encoding": [[177, 195], ["dict", "enumerate", "len", "total_arch_data.items", "all_idxs_00.extend", "collections.Counter", "dict.keys", "numpy.zeros", "total_arch_data.items"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "remapping_path_based_encoding", "(", "self", ",", "total_arch_data", ")", ":", "\n", "        ", "all_idxs", "=", "[", "v", "[", "3", "]", "for", "k", ",", "v", "in", "total_arch_data", ".", "items", "(", ")", "]", "\n", "all_idxs_00", "=", "[", "]", "\n", "for", "v", "in", "all_idxs", ":", "\n", "            ", "all_idxs_00", ".", "extend", "(", "v", ")", "\n", "", "c_0_dict", "=", "dict", "(", "Counter", "(", "all_idxs_00", ")", ")", "\n", "c_0_mapping", "=", "{", "}", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "c_0_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "c_0_mapping", "[", "k", "]", "=", "idx", "\n", "", "total_0", "=", "len", "(", "c_0_mapping", ")", "\n", "for", "k", ",", "v", "in", "total_arch_data", ".", "items", "(", ")", ":", "\n", "            ", "path_idxs_0", "=", "v", "[", "3", "]", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "(", "total_0", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "vp", "in", "path_idxs_0", ":", "\n", "                ", "path_encoding", "[", "c_0_mapping", "[", "vp", "]", "]", "=", "1", "\n", "", "v", "[", "3", "]", "=", "path_encoding", "\n", "total_arch_data", "[", "k", "]", "=", "v", "\n", "", "return", "total_arch_data", ",", "c_0_mapping", ",", "total_0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.arch2dat": [[196, 240], ["numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "arch2dat", "(", "self", ",", "arch_info", ")", ":", "\n", "        ", "adj_matrix", "=", "np", ".", "zeros", "(", "(", "ADJ_NODES", ",", "ADJ_NODES", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "node_1_op", "=", "OPS_LIST", "[", "arch_info", "[", "0", "]", "[", "0", "]", "]", "\n", "node_2_op", "=", "OPS_LIST", "[", "arch_info", "[", "0", "]", "[", "1", "]", "]", "\n", "node_3_op", "=", "OPS_LIST", "[", "arch_info", "[", "1", "]", "[", "1", "]", "]", "\n", "node_4_op", "=", "OPS_LIST", "[", "arch_info", "[", "2", "]", "[", "1", "]", "]", "\n", "\n", "node_5_op", "=", "OPS_LIST", "[", "arch_info", "[", "1", "]", "[", "0", "]", "]", "\n", "node_6_op", "=", "OPS_LIST", "[", "arch_info", "[", "1", "]", "[", "2", "]", "]", "\n", "node_7_op", "=", "OPS_LIST", "[", "arch_info", "[", "2", "]", "[", "2", "]", "]", "\n", "\n", "node_8_op", "=", "OPS_LIST", "[", "arch_info", "[", "2", "]", "[", "0", "]", "]", "\n", "node_9_op", "=", "OPS_LIST", "[", "arch_info", "[", "2", "]", "[", "3", "]", "]", "\n", "\n", "ops", "=", "[", "'input'", ",", "node_1_op", ",", "node_2_op", ",", "node_3_op", ",", "node_4_op", ",", "node_5_op", ",", "\n", "node_6_op", ",", "node_7_op", ",", "node_8_op", ",", "node_9_op", ",", "'output'", "]", "\n", "\n", "adj_matrix", "[", "0", ",", "1", "]", "=", "1", "\n", "adj_matrix", "[", "0", ",", "2", "]", "=", "1", "\n", "adj_matrix", "[", "0", ",", "3", "]", "=", "1", "\n", "adj_matrix", "[", "0", ",", "4", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "1", ",", "5", "]", "=", "1", "\n", "adj_matrix", "[", "1", ",", "6", "]", "=", "1", "\n", "adj_matrix", "[", "1", ",", "7", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "2", ",", "5", "]", "=", "1", "\n", "adj_matrix", "[", "2", ",", "6", "]", "=", "1", "\n", "adj_matrix", "[", "2", ",", "7", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "3", ",", "8", "]", "=", "1", "\n", "adj_matrix", "[", "5", ",", "8", "]", "=", "1", "\n", "adj_matrix", "[", "6", ",", "8", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "3", ",", "9", "]", "=", "1", "\n", "adj_matrix", "[", "5", ",", "9", "]", "=", "1", "\n", "adj_matrix", "[", "6", ",", "9", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "4", ",", "10", "]", "=", "1", "\n", "adj_matrix", "[", "7", ",", "10", "]", "=", "1", "\n", "adj_matrix", "[", "8", ",", "10", "]", "=", "1", "\n", "adj_matrix", "[", "9", ",", "10", "]", "=", "1", "\n", "\n", "return", "adj_matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.get_paths": [[241, 256], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "\"\"\"\n        return all paths from input to output\n        \"\"\"", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "ADJ_NODES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "ADJ_NODES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "ADJ_NODES", ")", ":", "\n", "                ", "if", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.get_path_indices": [[257, 277], ["data_nasbench_asr.DataNasBenchASR.get_paths", "tuple", "range", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths"], ["", "def", "get_path_indices", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "paths", "=", "self", ".", "get_paths", "(", "matrix", ",", "ops", ")", "\n", "mapping", "=", "{", "'linear'", ":", "0", ",", "\n", "'conv5'", ":", "1", ",", "\n", "'conv5d2'", ":", "2", ",", "\n", "'conv7'", ":", "3", ",", "\n", "'conv7d2'", ":", "4", ",", "\n", "'none'", ":", "5", ",", "\n", "'skip_connect'", ":", "6", "\n", "}", "\n", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_NODES", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "len", "(", "mapping", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.path_based_encoding": [[278, 284], ["data_nasbench_asr.DataNasBenchASR.get_path_indices", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "path_based_encoding", "(", "self", ",", "adj_matrix", ",", "ops", ")", ":", "\n", "        ", "path_indices", "=", "self", ".", "get_path_indices", "(", "adj_matrix", ",", "ops", ")", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_len", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "self", ".", "c_mapping", "[", "index", "]", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.adj_ops_encoding": [[285, 298], ["numpy.zeros", "range", "range", "tuple", "range", "OPS_TOTAL.index", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "adj_ops_encoding", "(", "self", ",", "adj_matrix", ",", "ops", ")", ":", "\n", "        ", "encoding_length", "=", "(", "ADJ_NODES", "**", "2", "-", "ADJ_NODES", ")", "//", "2", "+", "ADJ_NODES", "*", "len", "(", "OPS_TOTAL", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_NODES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "ADJ_NODES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "adj_matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "ADJ_NODES", ")", ":", "\n", "            ", "op_idx", "=", "OPS_TOTAL", ".", "index", "(", "ops", "[", "i", "]", ")", "\n", "encoding", "[", "n", "+", "op_idx", "]", "=", "1", "\n", "n", "+=", "len", "(", "OPS_TOTAL", ")", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.nasbench2graph2": [[299, 314], ["torch.zeros", "int", "torch.zeros", "range", "len", "numpy.sum", "OPS_TOTAL.index", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "nasbench2graph2", "(", "self", ",", "data", ")", ":", "\n", "        ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "ADJ_NODES", ",", "len", "(", "OPS_TOTAL", ")", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_NODES", ")", ":", "\n", "            ", "idx", "=", "OPS_TOTAL", ".", "index", "(", "ops", "[", "i", "]", ")", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "ADJ_NODES", ")", ":", "\n", "                ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_asr.DataNasBenchASR.get_arch_list": [[315, 364], ["pickle.load", "open", "print", "min", "len"], "methods", ["None"], ["", "def", "get_arch_list", "(", "self", ",", "\n", "aux_file_path", ",", "\n", "distance", "=", "None", ",", "\n", "iteridx", "=", "0", ",", "\n", "num_top_arches", "=", "5", ",", "\n", "max_edits", "=", "20", ",", "\n", "num_repeats", "=", "5", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "verbose", "=", "0", ")", ":", "\n", "# Method used for gp_bayesopt", "\n", "\n", "# load the list of architectures chosen by bayesopt so far", "\n", "        ", "base_arch_list", "=", "pickle", ".", "load", "(", "open", "(", "aux_file_path", ",", "'rb'", ")", ")", "\n", "top_arches", "=", "[", "archtuple", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "num_top_arches", "]", "]", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "[", "archtuple", "[", "1", "]", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "min", "(", "5", ",", "len", "(", "base_arch_list", ")", ")", "]", "]", "\n", "print", "(", "'top 5 val losses {}'", ".", "format", "(", "top_5_loss", ")", ")", "\n", "\n", "# # perturb the best k architectures", "\n", "# dic = {}", "\n", "# for archtuple in base_arch_list:", "\n", "#     arch = {'matrix': self.total_archs[archtuple[0]['string']][0][0],", "\n", "#             'ops': self.total_archs[archtuple[0]['string']][0][1]}", "\n", "#     # path_indices = Cell(**arch).get_path_indices()", "\n", "#     dic[path_indices] = 1", "\n", "# ", "\n", "# new_arch_list = []", "\n", "# for arch in top_arches:", "\n", "#     for edits in range(1, max_edits):", "\n", "#         for _ in range(num_repeats):", "\n", "#             #perturbation = Cell(**arch).perturb(self.nasbench, edits)", "\n", "#             perturbation = self.mutate_edit(arch['string'])", "\n", "#             perturbation_arch = self.total_archs[perturbation][0]", "\n", "#             # path_indices = Cell(matrix=perturbation_arch[0], ops=perturbation_arch[1]).get_path_indices()", "\n", "#             if path_indices not in dic:", "\n", "#                 dic[path_indices] = 1", "\n", "#                 new_arch_list.append({'string': perturbation})", "\n", "# ", "\n", "# # make sure new_arch_list is not empty", "\n", "# while len(new_arch_list) == 0:", "\n", "#     for _ in range(100):", "\n", "#         random_arch_str = self.random_arch().tostr()", "\n", "#         random_arch = self.total_archs[random_arch_str][0]", "\n", "#         # path_indices = Cell(matrix=random_arch[0], ops=random_arch[1]).get_path_indices()", "\n", "#         if path_indices not in dic:", "\n", "#             dic[path_indices] = 1", "\n", "#             new_arch_list.append({'string': random_arch_str})", "\n", "\n", "", "return", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.__init__": [[22, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "isolate_node_idxs", "=", "None", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "matrix", "\n", "self", ".", "ops", "=", "ops", "\n", "self", ".", "isolate_node_idxs", "=", "isolate_node_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.serialize": [[27, 31], ["None"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'matrix'", ":", "self", ".", "matrix", ",", "\n", "'ops'", ":", "self", ".", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.modelspec": [[33, 35], ["nas_lib.ModelSpec"], "methods", ["None"], ["", "def", "modelspec", "(", "self", ")", ":", "\n", "        ", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.random_cell": [[36, 54], ["numpy.random.choice", "numpy.triu", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "@", "classmethod", "\n", "def", "random_cell", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\" \n        From the NASBench repository \n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.random_cell_gnn": [[56, 77], ["numpy.random.choice", "numpy.triu", "nas_lib.utils.utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "", "", "@", "classmethod", "\n", "def", "random_cell_gnn", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.random_cell_both": [[79, 102], ["numpy.random.choice", "numpy.triu", "numpy.triu.copy", "nas_lib.utils.utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "", "", "@", "classmethod", "\n", "def", "random_cell_both", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "matrix_orig", "=", "matrix", ".", "copy", "(", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'matrix_orig'", ":", "matrix_orig", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss": [[104, 118], ["round", "len", "nasbench.query", "accs.append", "nasbench.query", "nas_lib.ModelSpec", "numpy.mean", "nas_lib.ModelSpec"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query"], ["", "", "", "def", "get_val_loss", "(", "self", ",", "nasbench", ",", "deterministic", "=", "1", ",", "patience", "=", "50", ")", ":", "\n", "        ", "if", "not", "deterministic", ":", "\n", "# output one of the three validation accuracies at random", "\n", "            ", "return", "100", "*", "(", "1", "-", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", ")", "\n", "", "else", ":", "\n", "# query the api until we see all three accuracies, then average them", "\n", "# a few architectures only have two accuracies, so we use patience to avoid an infinite loop", "\n", "            ", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "                ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                    ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss2": [[119, 133], ["round", "nasbench.query", "len", "nasbench.query", "accs.append", "numpy.mean", "nas_lib.ModelSpec", "nas_lib.ModelSpec"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query"], ["", "", "def", "get_val_loss2", "(", "self", ",", "nasbench", ",", "deterministic", "=", "1", ",", "patience", "=", "50", ")", ":", "\n", "        ", "if", "not", "deterministic", ":", "\n", "# output one of the three validation accuracies at random", "\n", "            ", "return", "100", "*", "(", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", ")", "\n", "", "else", ":", "\n", "# query the api until we see all three accuracies, then average them", "\n", "# a few architectures only have two accuracies, so we use patience to avoid an infinite loop", "\n", "            ", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "                ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                    ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss_nn_pred": [[134, 146], ["accs.append", "test_accs.append", "len", "nasbench.query", "nasbench.query", "numpy.mean", "numpy.mean", "nas_lib.ModelSpec", "nas_lib.ModelSpec", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query"], ["", "", "def", "get_val_loss_nn_pred", "(", "self", ",", "nasbench", ",", "deterministic", "=", "1", ",", "patience", "=", "50", ")", ":", "\n", "        ", "accs", "=", "[", "]", "\n", "test_accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "            ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", "\n", "test_acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'test_accuracy'", "]", "\n", "# if acc not in accs:", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "# if test_acc not in test_accs:", "\n", "test_accs", ".", "append", "(", "test_acc", ")", "\n", "", "return", "100", "*", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "accs", ")", ")", ")", ",", "100", "*", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "test_accs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss": [[147, 159], ["round", "len", "nasbench.query", "accs.append", "nas_lib.ModelSpec", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query"], ["", "def", "get_test_loss", "(", "self", ",", "nasbench", ",", "patience", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        query the api until we see all three accuracies, then average them\n        a few architectures only have two accuracies, so we use patience to avoid an infinite loop\n        \"\"\"", "\n", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "            ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'test_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss2": [[160, 172], ["round", "len", "nasbench.query", "accs.append", "numpy.mean", "nas_lib.ModelSpec"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query"], ["", "def", "get_test_loss2", "(", "self", ",", "nasbench", ",", "patience", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        query the api until we see all three accuracies, then average them\n        a few architectures only have two accuracies, so we use patience to avoid an infinite loop\n        \"\"\"", "\n", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "            ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'test_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "100", "*", "round", "(", "(", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.perturb": [[173, 197], ["copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.random", "range", "range", "range", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "def", "perturb", "(", "self", ",", "nasbench", ",", "edits", "=", "1", ")", ":", "\n", "        ", "\"\"\" \n        create new perturbed cell \n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "for", "_", "in", "range", "(", "edits", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                            ", "new_matrix", "[", "src", "]", "[", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", "]", "[", "dst", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "ind", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "available", "=", "[", "op", "for", "op", "in", "OPS", "if", "op", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.mutate": [[199, 225], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "def", "mutate", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "NUM_VERTICES", "\n", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "mutation_rate", "/", "OP_SPOTS", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.mutate2": [[227, 268], ["copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "range", "copy.deepcopy", "copy.deepcopy", "random.random", "random.random", "random.choice", "OPS.index", "range", "OPS.index", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "", "", "def", "mutate2", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "iteration", "=", "0", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "vertices", "=", "self", ".", "matrix", ".", "shape", "[", "0", "]", "\n", "op_spots", "=", "vertices", "-", "2", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "vertices", "\n", "for", "src", "in", "range", "(", "0", ",", "vertices", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "vertices", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "if", "op_spots", "!=", "0", ":", "\n", "                ", "op_mutation_prob", "=", "mutation_rate", "/", "op_spots", "\n", "for", "ind", "in", "range", "(", "1", ",", "op_spots", "+", "1", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                        ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "ops_idx", "=", "[", "-", "1", "]", "+", "[", "OPS", ".", "index", "(", "new_ops", "[", "idx", "]", ")", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "new_ops", ")", "-", "1", ")", "]", "+", "[", "-", "2", "]", "\n", "iteration", "+=", "1", "\n", "if", "iteration", "==", "500", ":", "\n", "# if iteration == 100:", "\n", "                ", "ops_idx", "=", "[", "-", "1", "]", "+", "[", "OPS", ".", "index", "(", "self", ".", "ops", "[", "idx", "]", ")", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "self", ".", "ops", ")", "-", "1", ")", "]", "+", "[", "-", "2", "]", "\n", "return", "{", "\n", "'matrix'", ":", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", ",", "\n", "'ops'", ":", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", ",", "\n", "'ops_idx'", ":", "ops_idx", "\n", "}", "\n", "", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", ",", "\n", "'ops_idx'", ":", "ops_idx", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.mutate_dist": [[270, 417], ["sorted", "list", "list", "range", "range", "numpy.random.normal", "numpy.argsort", "numpy.random.normal", "numpy.argsort", "copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "k.split", "int", "k.split", "numpy.all", "k_temp.append", "int", "int", "k_temp.append", "random.sample", "range", "copy.deepcopy", "copy.deepcopy", "random.random", "k_min.split", "OPS.index", "random.random", "k_max.split", "range", "OPS.index", "int", "copy.deepcopy.insert", "range", "int", "int", "int", "int", "int", "int", "int", "copy.deepcopy.insert", "len", "int", "random.randint", "int", "int", "int", "int", "int", "int", "len", "int", "int", "int", "random.randint", "random.sample", "int", "int", "random.sample", "random.sample", "random.sample", "list", "random.sample", "list", "list", "random.sample", "random.sample", "set", "set", "list", "list", "set", "set", "set", "set", "set", "set", "set", "set"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.normal", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "", "", "def", "mutate_dist", "(", "self", ",", "nasbench", ",", "mutate_rate", "=", "1.0", ",", "chip_distribution", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "iteration", "=", "0", "\n", "keys", "=", "[", "k", "for", "k", "in", "chip_distribution", "]", "\n", "sorted", "(", "keys", ")", "\n", "# print(keys)", "\n", "\n", "matrix_size", "=", "self", ".", "matrix", ".", "shape", "[", "0", "]", "\n", "allowed_nodes", "=", "list", "(", "range", "(", "1", ",", "matrix_size", "-", "1", ")", ")", "\n", "allowed_idxes", "=", "list", "(", "range", "(", "0", ",", "matrix_size", ")", ")", "\n", "\n", "# print(allowed_nodes)", "\n", "\n", "mutate_iteration", "=", "10", "\n", "mutate_rate", "=", "0.4", "\n", "k_temp", "=", "[", "]", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "if", "'isolate'", "in", "k", ":", "\n", "                ", "k_info", "=", "k", ".", "split", "(", "'_'", ")", "\n", "node", "=", "int", "(", "k_info", "[", "0", "]", ")", "\n", "if", "node", "in", "allowed_nodes", ":", "\n", "                    ", "k_temp", ".", "append", "(", "k", ")", "\n", "", "", "else", ":", "\n", "                ", "info_k", "=", "k", ".", "split", "(", "'_'", ")", "\n", "node0", ",", "node1", "=", "int", "(", "info_k", "[", "0", "]", ")", ",", "int", "(", "info_k", "[", "1", "]", ")", "\n", "if", "node0", "in", "allowed_idxes", "and", "node1", "in", "allowed_idxes", ":", "\n", "                    ", "k_temp", ".", "append", "(", "k", ")", "\n", "# print(k_temp)", "\n", "", "", "", "k_temp_exist", "=", "[", "k", "for", "k", "in", "k_temp", "if", "chip_distribution", "[", "k", "]", "[", "2", "]", "==", "1", "]", "\n", "mean", "=", "[", "chip_distribution", "[", "d", "]", "[", "0", "]", "for", "d", "in", "k_temp", "]", "\n", "std", "=", "[", "chip_distribution", "[", "d", "]", "[", "1", "]", "for", "d", "in", "k_temp", "]", "\n", "\n", "mean_temp_exist", "=", "[", "chip_distribution", "[", "d", "]", "[", "0", "]", "for", "d", "in", "k_temp_exist", "]", "\n", "std_temp_exist", "=", "[", "chip_distribution", "[", "d", "]", "[", "1", "]", "for", "d", "in", "k_temp_exist", "]", "\n", "# for k in k_temp:", "\n", "#     print(k, chip_distribution[k][0], chip_distribution[k][1])", "\n", "while", "True", ":", "\n", "            ", "samples", "=", "np", ".", "random", ".", "normal", "(", "mean", ",", "std", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "samples", ")", "\n", "\n", "samples_exist", "=", "np", ".", "random", ".", "normal", "(", "mean_temp_exist", ",", "std_temp_exist", ")", "\n", "sorted_indices_exist", "=", "np", ".", "argsort", "(", "samples_exist", ")", "\n", "\n", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "# update_strategy = random.sample([0, 1], 1)[0]", "\n", "# if update_strategy == 1:", "\n", "for", "i", "in", "range", "(", "mutate_iteration", ")", ":", "\n", "                ", "update_strategy", "=", "random", ".", "sample", "(", "[", "0", ",", "1", "]", ",", "1", ")", "[", "0", "]", "\n", "if", "update_strategy", "==", "1", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "mutate_rate", ":", "\n", "                        ", "k_min", "=", "k_temp", "[", "sorted_indices", "[", "i", "]", "]", "\n", "info", "=", "k_min", ".", "split", "(", "'_'", ")", "\n", "if", "'isolate'", "in", "k_min", ":", "\n", "                            ", "if", "'isolate'", "in", "self", ".", "ops", ":", "\n", "                                ", "node_idx", "=", "int", "(", "info", "[", "0", "]", ")", "\n", "new_matrix", "[", "0", ",", "node_idx", "]", "=", "1", "\n", "new_matrix", "[", "node_idx", ",", "allowed_idxes", "[", "-", "2", "]", "]", "=", "1", "\n", "new_ops", ".", "insert", "(", "node_idx", ",", "OPS", "[", "random", ".", "sample", "(", "[", "0", ",", "1", ",", "2", "]", ",", "1", ")", "[", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "                                ", "continue", "\n", "", "", "else", ":", "\n", "                            ", "if", "'0'", "in", "k_min", ":", "\n", "                                ", "src", ",", "dst", ",", "op1", "=", "int", "(", "info", "[", "0", "]", ")", ",", "int", "(", "info", "[", "1", "]", ")", ",", "info", "[", "2", "]", "\n", "if", "new_matrix", "[", "src", ",", "dst", "]", "==", "0", ":", "\n", "                                    ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "\n", "", "if", "op1", "!=", "'out'", ":", "\n", "                                    ", "op1", "=", "int", "(", "op1", ")", "\n", "new_ops", "[", "dst", "]", "=", "OPS", "[", "op1", "]", "\n", "", "", "else", ":", "\n", "                                ", "src", ",", "dst", ",", "op1", ",", "op2", "=", "int", "(", "info", "[", "0", "]", ")", ",", "int", "(", "info", "[", "1", "]", ")", ",", "info", "[", "2", "]", ",", "info", "[", "3", "]", "\n", "if", "new_matrix", "[", "src", ",", "dst", "]", "==", "0", ":", "\n", "                                    ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "\n", "", "if", "op1", "==", "'out'", ":", "\n", "                                    ", "op2", "=", "int", "(", "op2", ")", "\n", "new_ops", "[", "dst", "]", "=", "OPS", "[", "op2", "]", "\n", "", "elif", "op2", "==", "'out'", ":", "\n", "                                    ", "op1", "=", "int", "(", "op1", ")", "\n", "new_ops", "[", "src", "]", "=", "OPS", "[", "op1", "]", "\n", "", "else", ":", "\n", "                                    ", "op1", ",", "op2", "=", "int", "(", "op1", ")", ",", "int", "(", "op2", ")", "\n", "idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                                        ", "new_ops", "[", "src", "]", "=", "OPS", "[", "op1", "]", "\n", "", "else", ":", "\n", "                                        ", "new_ops", "[", "dst", "]", "=", "OPS", "[", "op2", "]", "\n", "", "", "", "", "", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "mutate_iteration", ")", ":", "\n", "                        ", "if", "random", ".", "random", "(", ")", "<", "mutate_rate", ":", "\n", "                            ", "k_max", "=", "k_temp", "[", "sorted_indices_exist", "[", "(", "-", "1", "-", "i", ")", "]", "]", "\n", "info", "=", "k_max", ".", "split", "(", "'_'", ")", "\n", "if", "'isolate'", "in", "k_max", ":", "\n", "                                ", "if", "'isolate'", "in", "self", ".", "ops", ":", "\n", "                                    ", "node_idx", "=", "int", "(", "info", "[", "0", "]", ")", "\n", "new_matrix", "[", "0", ",", "node_idx", "]", "=", "1", "\n", "new_matrix", "[", "node_idx", ",", "allowed_idxes", "[", "-", "2", "]", "]", "=", "1", "\n", "new_ops", ".", "insert", "(", "node_idx", ",", "OPS", "[", "random", ".", "sample", "(", "[", "0", ",", "1", ",", "2", "]", ",", "1", ")", "[", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "                                    ", "continue", "\n", "", "", "else", ":", "\n", "                                ", "if", "'0'", "in", "k_max", ":", "\n", "                                    ", "src", ",", "dst", ",", "op1", "=", "int", "(", "info", "[", "0", "]", ")", ",", "int", "(", "info", "[", "1", "]", ")", ",", "info", "[", "2", "]", "\n", "if", "new_matrix", "[", "src", ",", "dst", "]", "==", "1", ":", "\n", "                                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "0", "\n", "", "if", "op1", "!=", "'out'", ":", "\n", "                                        ", "op1", "=", "int", "(", "op1", ")", "\n", "if", "new_ops", "[", "dst", "]", "==", "OPS", "[", "op1", "]", ":", "\n", "                                            ", "new_ops", "[", "dst", "]", "=", "OPS", "[", "random", ".", "sample", "(", "list", "(", "set", "(", "(", "0", ",", "1", ",", "2", ")", ")", "-", "set", "(", "[", "op1", "]", ")", ")", ",", "1", ")", "[", "0", "]", "]", "\n", "", "", "", "else", ":", "\n", "                                    ", "src", ",", "dst", ",", "op1", ",", "op2", "=", "int", "(", "info", "[", "0", "]", ")", ",", "int", "(", "info", "[", "1", "]", ")", ",", "info", "[", "2", "]", ",", "info", "[", "3", "]", "\n", "if", "new_matrix", "[", "src", ",", "dst", "]", "==", "1", ":", "\n", "                                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "0", "\n", "", "if", "op1", "==", "'out'", ":", "\n", "                                        ", "op2", "=", "int", "(", "op2", ")", "\n", "new_ops", "[", "dst", "]", "=", "OPS", "[", "random", ".", "sample", "(", "list", "(", "set", "(", "(", "0", ",", "1", ",", "2", ")", ")", "-", "set", "(", "[", "op2", "]", ")", ")", ",", "1", ")", "[", "0", "]", "]", "\n", "", "elif", "op2", "==", "'out'", ":", "\n", "                                        ", "op1", "=", "int", "(", "op1", ")", "\n", "new_ops", "[", "src", "]", "=", "OPS", "[", "random", ".", "sample", "(", "list", "(", "set", "(", "(", "0", ",", "1", ",", "2", ")", ")", "-", "set", "(", "[", "op1", "]", ")", ")", ",", "1", ")", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "op1", ",", "op2", "=", "int", "(", "op1", ")", ",", "int", "(", "op2", ")", "\n", "idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                                            ", "new_ops", "[", "src", "]", "=", "OPS", "[", "random", ".", "sample", "(", "list", "(", "set", "(", "(", "0", ",", "1", ",", "2", ")", ")", "-", "set", "(", "[", "op1", "]", ")", ")", ",", "1", ")", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                                            ", "new_ops", "[", "dst", "]", "=", "OPS", "[", "random", ".", "sample", "(", "list", "(", "set", "(", "(", "0", ",", "1", ",", "2", ")", ")", "-", "set", "(", "[", "op2", "]", ")", ")", ",", "1", ")", "[", "0", "]", "]", "\n", "\n", "", "", "", "", "", "", "", "", "if", "np", ".", "all", "(", "self", ".", "matrix", "==", "new_matrix", ")", "and", "self", ".", "ops", "==", "new_ops", ":", "\n", "                ", "continue", "\n", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "ops_idx", "=", "[", "-", "1", "]", "+", "[", "OPS", ".", "index", "(", "new_ops", "[", "idx", "]", ")", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "new_ops", ")", "-", "1", ")", "]", "+", "[", "-", "2", "]", "\n", "iteration", "+=", "1", "\n", "if", "iteration", "==", "500", ":", "\n", "                ", "ops_idx", "=", "[", "-", "1", "]", "+", "[", "OPS", ".", "index", "(", "self", ".", "ops", "[", "idx", "]", ")", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "self", ".", "ops", ")", "-", "1", ")", "]", "+", "[", "-", "2", "]", "\n", "return", "{", "\n", "'matrix'", ":", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", ",", "\n", "'ops'", ":", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", ",", "\n", "'ops_idx'", ":", "ops_idx", "\n", "}", "\n", "", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", ",", "\n", "'ops_idx'", ":", "ops_idx", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.mutate_rates": [[419, 445], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "", "", "def", "mutate_rates", "(", "self", ",", "nasbench", ",", "edge_rate", ",", "node_rate", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "h", ",", "w", "=", "new_matrix", ".", "shape", "\n", "edge_mutation_prob", "=", "edge_rate", "\n", "for", "src", "in", "range", "(", "0", ",", "h", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "h", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "node_rate", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.mutate_gvae": [[447, 475], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.utils.utils_data.find_isolate_node", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "", "", "def", "mutate_gvae", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "NUM_VERTICES", "\n", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "mutation_rate", "/", "OP_SPOTS", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "isolate_nodes", "=", "find_isolate_node", "(", "new_matrix", ")", "\n", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell": [[477, 493], ["numpy.zeros", "range", "range", "tuple", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "", "", "def", "encode_cell", "(", "self", ")", ":", "\n", "        ", "\"\"\" \n        compute the \"standard\" encoding,\n        i.e. adjacency matrix + op list encoding \n        \"\"\"", "\n", "encoding_length", "=", "(", "NUM_VERTICES", "**", "2", "-", "NUM_VERTICES", ")", "//", "2", "+", "OP_SPOTS", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ")", "\n", "dic", "=", "{", "CONV1X1", ":", "0.", ",", "CONV3X3", ":", "0.5", ",", "MAXPOOL3X3", ":", "1.0", "}", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "encoding", "[", "-", "i", "]", "=", "dic", "[", "self", ".", "ops", "[", "i", "]", "]", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell_3ops": [[494, 512], ["numpy.zeros", "range", "range", "tuple", "range", "OPS.index", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "encode_cell_3ops", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the \"standard\" encoding,\n        i.e. adjacency matrix + op list encoding\n        \"\"\"", "\n", "OPS", "=", "[", "CONV3X3", ",", "CONV1X1", ",", "MAXPOOL3X3", "]", "\n", "encoding_length", "=", "(", "NUM_VERTICES", "**", "2", "-", "NUM_VERTICES", ")", "//", "2", "+", "OP_SPOTS", "*", "len", "(", "OPS", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "op_idx", "=", "OPS", ".", "index", "(", "self", ".", "ops", "[", "i", "]", ")", "\n", "encoding", "[", "n", "+", "op_idx", "]", "=", "1", "\n", "n", "+=", "len", "(", "OPS", ")", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell2": [[513, 531], ["numpy.zeros", "range", "range", "tuple", "range", "OPS.index", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "encode_cell2", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the \"standard\" encoding,\n        i.e. adjacency matrix + op list encoding\n        \"\"\"", "\n", "OPS", "=", "[", "CONV3X3", ",", "CONV1X1", ",", "MAXPOOL3X3", ",", "ISOLATE", "]", "\n", "encoding_length", "=", "(", "NUM_VERTICES", "**", "2", "-", "NUM_VERTICES", ")", "//", "2", "+", "OP_SPOTS", "*", "len", "(", "OPS", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "op_idx", "=", "OPS", ".", "index", "(", "self", ".", "ops", "[", "i", "]", ")", "\n", "encoding", "[", "n", "+", "op_idx", "]", "=", "1", "\n", "n", "+=", "4", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_paths": [[532, 547], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" \n        return all paths from input to output\n        \"\"\"", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "self", ".", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_path_indices": [[548, 567], ["cell.Cell.get_paths", "tuple", "range", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths"], ["", "def", "get_path_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 3^0 + ... + 3^5 paths total.\n        (Paths can be length 0 to 5, and for each path, for each node, there\n        are three choices for the operation.)\n        \"\"\"", "\n", "paths", "=", "self", ".", "get_paths", "(", ")", "\n", "mapping", "=", "{", "CONV3X3", ":", "0", ",", "CONV1X1", ":", "1", ",", "MAXPOOL3X3", ":", "2", "}", "\n", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "len", "(", "OPS", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths": [[568, 576], ["sum", "cell.Cell.get_path_indices", "numpy.zeros", "len", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "encode_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" output one-hot encoding of paths \"\"\"", "\n", "num_paths", "=", "sum", "(", "[", "len", "(", "OPS", ")", "**", "i", "for", "i", "in", "range", "(", "OP_SPOTS", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", ")", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "num_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.path_distance": [[577, 583], ["numpy.sum", "numpy.array", "cell.Cell.encode_paths", "numpy.array", "other.encode_paths"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths"], ["", "def", "path_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\" \n        compute the distance between two architectures\n        by comparing their path encodings\n        \"\"\"", "\n", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "encode_paths", "(", ")", "!=", "np", ".", "array", "(", "other", ".", "encode_paths", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.edit_distance": [[584, 592], ["numpy.sum", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "edit_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their adjacency matrices and op lists\n        \"\"\"", "\n", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "matrix", ")", "!=", "np", ".", "array", "(", "other", ".", "matrix", ")", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "ops", ")", "!=", "np", ".", "array", "(", "other", ".", "ops", ")", ")", "\n", "return", "graph_dist", "+", "ops_dist", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.build_datasets": [[6, 31], ["DataNasBench", "DataNasBenchNew", "NASBench201", "DataNasBenchDist", "DataNasBenchNLP", "ValueError", "DataNasBenchASR_WO_None", "DataNasBenchASR"], "function", ["None"], ["def", "build_datasets", "(", "search_spaces", ",", "dataset", ",", "nasbench_nlp_type", ",", "filter_none", ")", ":", "\n", "    ", "if", "search_spaces", "==", "\"nasbench_case1\"", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "data_nasbench", "import", "DataNasBench", "\n", "return", "DataNasBench", "(", "search_spaces", ")", "\n", "", "elif", "search_spaces", "==", "\"nasbench_case2\"", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "data_nasbench2", "import", "DataNasBenchNew", "\n", "return", "DataNasBenchNew", "(", "search_spaces", ")", "\n", "", "elif", "search_spaces", "==", "'nasbench_201'", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "data_nasbench_201", "import", "NASBench201", "\n", "return", "NASBench201", "(", "dataset", ")", "\n", "", "elif", "search_spaces", "==", "'nasbench_data_distribution'", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "data_nasbench_101_distributon_analysis", "import", "DataNasBenchDist", "\n", "return", "DataNasBenchDist", "(", ")", "\n", "", "elif", "search_spaces", "==", "'nasbench_nlp'", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "data_nasbench_nlp", "import", "DataNasBenchNLP", "\n", "return", "DataNasBenchNLP", "(", "perf_type", "=", "nasbench_nlp_type", ")", "\n", "", "elif", "search_spaces", "==", "'nasbench_asr'", ":", "\n", "        ", "if", "filter_none", "==", "'y'", ":", "\n", "            ", "from", "nas_lib", ".", "data", ".", "data_nasbench_ars_wo_none", "import", "DataNasBenchASR_WO_None", "\n", "return", "DataNasBenchASR_WO_None", "(", ")", "\n", "", "else", ":", "\n", "            ", "from", "nas_lib", ".", "data", ".", "data_nasbench_asr", "import", "DataNasBenchASR", "\n", "return", "DataNasBenchASR", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"This architecture datasets does not support!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.generate_train_data": [[33, 59], ["total_archs[].copy", "enumerate", "cell.Cell", "train_data.append", "train_data.append", "cell.Cell.encode_paths", "cell.Cell.encode_cell"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell"], ["", "", "def", "generate_train_data", "(", "model_keys", ",", "total_archs", ",", "encode_path", ",", "allow_isomorphisms", ",", "flag_100", ",", "is_bananas", "=", "False", ")", ":", "\n", "    ", "train_data", "=", "[", "]", "\n", "for", "k", "in", "model_keys", ":", "\n", "        ", "arch", "=", "total_archs", "[", "k", "]", ".", "copy", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "arch", "[", "'ops'", "]", ")", ":", "\n", "            ", "if", "op", "==", "'isolate'", ":", "\n", "                ", "arch", "[", "'ops'", "]", "[", "op_idx", "]", "=", "'maxpool3x3'", "\n", "", "", "cell_inst", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", "\n", "if", "is_bananas", ":", "\n", "            ", "if", "encode_path", ":", "\n", "                ", "encoding", "=", "cell_inst", ".", "encode_paths", "(", ")", "\n", "", "else", ":", "\n", "                ", "encoding", "=", "cell_inst", ".", "encode_cell", "(", ")", "\n", "", "train_data", ".", "append", "(", "(", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", "}", ",", "\n", "encoding", ",", "\n", "arch", "[", "'val'", "]", "*", "100", "if", "flag_100", "else", "arch", "[", "'val'", "]", ",", "\n", "arch", "[", "'test'", "]", "*", "100", "if", "flag_100", "else", "arch", "[", "'test'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "train_data", ".", "append", "(", "(", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", "}", ",", "\n", "arch", "[", "'val'", "]", "*", "100", "if", "flag_100", "else", "arch", "[", "'val'", "]", ",", "\n", "arch", "[", "'test'", "]", "*", "100", "if", "flag_100", "else", "arch", "[", "'test'", "]", ")", ")", "\n", "", "", "return", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.generate_train_data_nasbench_201": [[61, 71], ["total_archs[].copy", "train_data.append"], "function", ["None"], ["", "def", "generate_train_data_nasbench_201", "(", "model_keys", ",", "total_archs", ",", "encode_path", ",", "allow_isomorphisms", ",", "flag_100", ",", "is_bananas", "=", "False", ")", ":", "\n", "    ", "train_data", "=", "[", "]", "\n", "for", "k", "in", "model_keys", ":", "\n", "        ", "arch", "=", "total_archs", "[", "k", "]", ".", "copy", "(", ")", "\n", "train_data", ".", "append", "(", "(", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", "}", ",", "\n", "arch", "[", "'val'", "]", ",", "\n", "arch", "[", "'test'", "]", ")", ")", "\n", "", "return", "train_data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.exchange_nodes_edges": [[15, 51], ["ops.append", "ops.append", "ops.append", "ops.append", "ops.append", "ops.append", "ops.append", "numpy.zeros", "init_nasbench_201_dataset.add_dummy_node", "data_list.append", "numpy.delete", "numpy.delete", "enumerate"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.add_dummy_node"], ["def", "exchange_nodes_edges", "(", "genetype_data", ")", ":", "\n", "    ", "ops", "=", "[", "'input'", "]", "\n", "data_list", "=", "[", "]", "\n", "for", "k", "in", "genetype_data", ":", "\n", "        ", "data_list", ".", "append", "(", "k", ")", "\n", "", "ops", ".", "append", "(", "data_list", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "# 0--->1", "\n", "ops", ".", "append", "(", "data_list", "[", "1", "]", "[", "0", "]", "[", "0", "]", ")", "# 0--->2", "\n", "ops", ".", "append", "(", "data_list", "[", "2", "]", "[", "0", "]", "[", "0", "]", ")", "# 0--->3", "\n", "ops", ".", "append", "(", "data_list", "[", "1", "]", "[", "1", "]", "[", "0", "]", ")", "# 1--->4", "\n", "ops", ".", "append", "(", "data_list", "[", "2", "]", "[", "1", "]", "[", "0", "]", ")", "# 1--->5", "\n", "ops", ".", "append", "(", "data_list", "[", "2", "]", "[", "2", "]", "[", "0", "]", ")", "# 2--->6", "\n", "ops", ".", "append", "(", "'output'", ")", "\n", "\n", "adjacency_matrix", "=", "np", ".", "zeros", "(", "(", "8", ",", "8", ")", ")", "\n", "adjacency_matrix", "[", "0", ",", "1", "]", "=", "1", "\n", "adjacency_matrix", "[", "0", ",", "2", "]", "=", "1", "\n", "adjacency_matrix", "[", "0", ",", "3", "]", "=", "1", "\n", "adjacency_matrix", "[", "1", ",", "4", "]", "=", "1", "\n", "adjacency_matrix", "[", "1", ",", "5", "]", "=", "1", "\n", "adjacency_matrix", "[", "2", ",", "6", "]", "=", "1", "\n", "adjacency_matrix", "[", "4", ",", "6", "]", "=", "1", "\n", "adjacency_matrix", "[", "3", ",", "7", "]", "=", "1", "\n", "adjacency_matrix", "[", "5", ",", "7", "]", "=", "1", "\n", "adjacency_matrix", "[", "6", ",", "7", "]", "=", "1", "\n", "\n", "del_idxs", "=", "[", "id", "for", "id", ",", "op", "in", "enumerate", "(", "ops", ")", "if", "op", "==", "'none'", "]", "\n", "ops", "=", "[", "op", "for", "op", "in", "ops", "if", "op", "!=", "'none'", "]", "\n", "\n", "counter", "=", "0", "\n", "for", "id", "in", "del_idxs", ":", "\n", "        ", "temp_id", "=", "id", "-", "counter", "\n", "adjacency_matrix", "=", "np", ".", "delete", "(", "adjacency_matrix", ",", "temp_id", ",", "axis", "=", "0", ")", "\n", "adjacency_matrix", "=", "np", ".", "delete", "(", "adjacency_matrix", ",", "temp_id", ",", "axis", "=", "1", ")", "\n", "counter", "+=", "1", "\n", "", "adjacency_matrix_dummy", ",", "ops_dummy", "=", "add_dummy_node", "(", "adjacency_matrix", ",", "ops", ")", "\n", "return", "adjacency_matrix", ",", "ops", ",", "adjacency_matrix_dummy", ",", "ops_dummy", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.add_dummy_node": [[53, 66], ["numpy.zeros", "range", "nas_lib.utils.utils_data.find_isolate_node", "numpy.where"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node"], ["", "def", "add_dummy_node", "(", "matrix_in", ",", "ops_in", ")", ":", "\n", "# {1, 2, 3, 4, 5, 6, 7}", "\n", "    ", "matrix", "=", "np", ".", "zeros", "(", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "for", "i", "in", "range", "(", "matrix_in", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "idxs", "=", "np", ".", "where", "(", "matrix_in", "[", "i", "]", "==", "1", ")", "\n", "for", "id", "in", "idxs", "[", "0", "]", ":", "\n", "            ", "if", "id", "==", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                ", "matrix", "[", "i", ",", "NUM_VERTICES", "-", "1", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "matrix", "[", "i", ",", "id", "]", "=", "1", "\n", "", "", "", "ops", "=", "ops_in", "[", ":", "(", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ")", "]", "+", "[", "'isolate'", "]", "*", "(", "NUM_VERTICES", "-", "matrix_in", ".", "shape", "[", "0", "]", ")", "+", "ops_in", "[", "-", "1", ":", "]", "\n", "find_isolate_node", "(", "matrix", ")", "\n", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.get_arch_acc_info": [[68, 87], ["nas_bench.query_index_by_arch", "nas_bench.query_by_index", "nas_bench.get_more_info", "round", "round", "nas_bench.query_by_index", "val_acc.append", "round.append", "float", "float", "numpy.mean", "numpy.mean", "arch_info[].get_eval", "arch_info_test[].get_eval"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.query_index_by_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.query_by_index", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.get_more_info", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.query_by_index", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_eval", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_eval"], ["", "def", "get_arch_acc_info", "(", "nas_bench", ",", "arch", ",", "dataname", "=", "'cifar10-valid'", ")", ":", "\n", "    ", "arch_index", "=", "nas_bench", ".", "query_index_by_arch", "(", "arch", ")", "\n", "assert", "arch_index", ">=", "0", ",", "'can not find this arch : {:}'", ".", "format", "(", "arch", ")", "\n", "arch_info", "=", "nas_bench", ".", "query_by_index", "(", "arch_index", ",", "dataname", ")", "\n", "if", "dataname", "==", "'cifar10-valid'", ":", "\n", "        ", "arch_info_test", "=", "nas_bench", ".", "query_by_index", "(", "arch_index", ",", "'cifar10'", ")", "\n", "", "else", ":", "\n", "        ", "arch_info_test", "=", "arch_info", "\n", "", "val_acc", "=", "[", "]", "\n", "test_acc", "=", "[", "]", "\n", "for", "k", "in", "arch_info", ":", "\n", "        ", "val_acc", ".", "append", "(", "arch_info", "[", "k", "]", ".", "get_eval", "(", "'x-valid'", ")", "[", "'accuracy'", "]", ")", "\n", "test_acc", ".", "append", "(", "arch_info_test", "[", "k", "]", ".", "get_eval", "(", "'ori-test'", ")", "[", "'accuracy'", "]", ")", "\n", "", "info", "=", "nas_bench", ".", "get_more_info", "(", "arch_index", ",", "dataname", ",", "None", ",", "use_12epochs_result", "=", "False", ",", "is_random", "=", "False", ")", "\n", "_", ",", "_", ",", "time_cost", "=", "info", "[", "'test-accuracy'", "]", ",", "info", "[", "'valid-accuracy'", "]", ",", "info", "[", "'train-all-time'", "]", "+", "info", "[", "'valid-per-time'", "]", "\n", "valid_acc", "=", "round", "(", "float", "(", "np", ".", "mean", "(", "val_acc", ")", ")", ",", "10", ")", "\n", "test_acc", "=", "round", "(", "float", "(", "np", ".", "mean", "(", "test_acc", ")", ")", ",", "4", ")", "\n", "return", "valid_acc", ",", "test_acc", ",", "time_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.generate_all_archs": [[89, 115], ["print", "init_nasbench_201_dataset.get_arch_acc_info", "nas_lib.nas_201_api.genotypes.Structure.str2structure", "init_nasbench_201_dataset.exchange_nodes_edges", "nas_lib.data.cell_nasbench201.Cell", "nas_lib.data.cell_nasbench201.Cell.encode_paths", "nas_lib.data.cell_nasbench201.Cell.encode_cell2", "total_keys.append", "max", "min", "max", "min"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.get_arch_acc_info", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.exchange_nodes_edges", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell2"], ["", "def", "generate_all_archs", "(", "nas_bench", ",", "dataset", ")", ":", "\n", "    ", "total_archs", "=", "{", "}", "\n", "total_keys", "=", "[", "]", "\n", "meta_archs", "=", "nas_bench", ".", "meta_archs", "\n", "for", "arch", "in", "meta_archs", ":", "\n", "        ", "val_acc", ",", "test_acc", ",", "time_cost", "=", "get_arch_acc_info", "(", "nas_bench", ",", "arch", ",", "dataname", "=", "dataset", ")", "\n", "structure", "=", "CellStructure", ".", "str2structure", "(", "arch", ")", "\n", "am", ",", "ops", ",", "am_dummy", ",", "ops_dummy", "=", "exchange_nodes_edges", "(", "structure", ")", "\n", "cell_arch", "=", "Cell", "(", "matrix", "=", "am_dummy", ",", "ops", "=", "ops_dummy", ",", "isolate_node_idxs", "=", "[", "]", ")", "\n", "path_encoding1", "=", "cell_arch", ".", "encode_paths", "(", ")", "\n", "path_encoding2", "=", "cell_arch", ".", "encode_cell2", "(", ")", "\n", "total_archs", "[", "arch", "]", "=", "[", "\n", "(", "am_dummy", ",", "ops_dummy", ",", "[", "]", ")", ",", "\n", "am", ",", "\n", "ops", ",", "\n", "path_encoding1", ",", "\n", "100", "-", "val_acc", ",", "\n", "100", "-", "test_acc", ",", "\n", "arch", ",", "\n", "path_encoding2", "\n", "]", "\n", "total_keys", ".", "append", "(", "arch", ")", "\n", "", "val_acc", "=", "[", "arch_info", "[", "4", "]", "for", "arch_info", "in", "total_archs", "]", "\n", "test_acc", "=", "[", "arch_info", "[", "5", "]", "for", "arch_info", "in", "total_archs", "]", "\n", "print", "(", "max", "(", "val_acc", ")", ",", "min", "(", "val_acc", ")", ",", "max", "(", "test_acc", ")", ",", "min", "(", "test_acc", ")", ")", "\n", "return", "total_archs", ",", "total_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.inti_nasbench_201": [[117, 123], ["nas_lib.nas_201_api.NASBench201API", "init_nasbench_201_dataset.generate_all_archs", "open", "pickle.dump", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.init_nasbench_201_dataset.generate_all_archs"], ["", "def", "inti_nasbench_201", "(", "dataset", ",", "save_path", ")", ":", "\n", "    ", "nas_bench", "=", "API", "(", "nas_bench_201_path", ")", "\n", "total_archs", ",", "total_keys", "=", "generate_all_archs", "(", "nas_bench", ",", "dataset", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "total_archs", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "total_keys", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.__init__": [[27, 32], ["nasbench.api.NASBench", "data_nasbench2.DataNasBenchNew.get_clean_dummy_arch"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.get_clean_dummy_arch"], ["    ", "def", "__init__", "(", "self", ",", "search_space", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "nasbench", "=", "api", ".", "NASBench", "(", "tf_records_path", ")", "\n", "self", ".", "total_archs", ",", "self", ".", "total_keys", "=", "self", ".", "get_clean_dummy_arch", "(", ")", "\n", "self", ".", "ops_t", "=", "[", "'conv3x3-bn-relu'", ",", "'conv1x1-bn-relu'", ",", "'maxpool3x3'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.generate_random_dataset": [[33, 60], ["random.sample", "key_list.append", "data_nasbench2.DataNasBenchNew.get_path_indices", "nas_lib.data.cell.Cell().encode_paths", "nas_lib.data.cell.Cell().encode_cell2", "data.append", "len", "nas_lib.data.cell.Cell", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell2"], ["", "def", "generate_random_dataset", "(", "self", ",", "num", ",", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "key_list", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "k", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "\n", "key_list", ".", "append", "(", "k", ")", "\n", "arch", "=", "self", ".", "total_archs", "[", "k", "[", "0", "]", "]", "\n", "if", "encode_paths", ":", "\n", "                ", "encoding", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_paths", "(", ")", "\n", "", "else", ":", "\n", "                ", "encoding", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_cell2", "(", ")", "\n", "", "path_indices", "=", "self", ".", "get_path_indices", "(", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "'ops'", ":", "arch", "[", "'ops'", "]", "}", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "(", "(", "arch", "[", "'matrix'", "]", ",", "arch", "[", "'ops'", "]", ",", "[", "]", ")", ",", "\n", "arch", "[", "'o_matrix'", "]", ",", "\n", "arch", "[", "'o_ops'", "]", ",", "\n", "encoding", ",", "\n", "(", "1", "-", "arch", "[", "'val'", "]", ")", "*", "100", ",", "\n", "(", "1", "-", "arch", "[", "'test'", "]", ")", "*", "100", ",", "\n", "arch", "[", "'key'", "]", ")", ")", "\n", "", "if", "len", "(", "data", ")", "==", "num", ":", "\n", "                ", "break", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.get_candidates": [[61, 115], ["data_nasbench2.DataNasBenchNew.get_path_indices", "enumerate", "range", "nums_list.append", "mutated_archs_list.append", "len", "data_nasbench2.DataNasBenchNew.mutate_arch", "data_nasbench2.DataNasBenchNew.get_path_indices", "sorted", "sorted", "candidates.append", "data_nasbench2.adj_distance", "dist_list.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance"], ["", "def", "get_candidates", "(", "self", ",", "\n", "data", ",", "\n", "num", "=", "100", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "num_best_arches", "=", "10", ",", "\n", "return_dist", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "dist_list", "=", "[", "]", "\n", "nums_list", "=", "[", "]", "\n", "mutated_archs_list", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch", "=", "{", "'matrix'", ":", "d", "[", "0", "]", "[", "0", "]", ",", "'ops'", ":", "d", "[", "0", "]", "[", "1", "]", "}", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "mutate_arch_dict", "=", "{", "}", "\n", "if", "acq_opt_type", "in", "[", "'mutation'", ",", "'mutation_random'", "]", ":", "\n", "# mutate architectures with the lowest validation error", "\n", "            ", "best_arches", "=", "[", "{", "'matrix'", ":", "arch", "[", "1", "]", ",", "'ops'", ":", "arch", "[", "2", "]", "}", "\n", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "best_arch_datas", "=", "[", "d", "for", "d", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "best_arches", ")", ":", "\n", "                ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                    ", "break", "\n", "", "nums", "=", "0", "\n", "mutate_arch_dict", "[", "idx", "]", "=", "0", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "mutated", "=", "self", ".", "mutate_arch", "(", "arch", ",", "encode_paths", ",", "require_distance", "=", "True", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "{", "'matrix'", ":", "mutated", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "mutated", "[", "0", "]", "[", "1", "]", "}", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "mutated", ")", "\n", "mutate_arch_dict", "[", "idx", "]", "+=", "1", "\n", "dist", "=", "adj_distance", "(", "arch", ",", "{", "'matrix'", ":", "mutated", "[", "1", "]", ",", "'ops'", ":", "mutated", "[", "2", "]", "}", ")", "\n", "dist_list", ".", "append", "(", "dist", ")", "\n", "nums", "+=", "1", "\n", "", "", "nums_list", ".", "append", "(", "nums", ")", "\n", "mutated_archs_list", ".", "append", "(", "best_arch_datas", "[", "idx", "]", ")", "\n", "", "", "if", "return_dist", ":", "\n", "            ", "return", "candidates", "[", ":", "num", "]", ",", "dist_list", "[", ":", "num", "]", ",", "0", ",", "nums_list", ",", "mutated_archs_list", "\n", "", "else", ":", "\n", "            ", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.get_path_indices": [[116, 118], ["nas_lib.data.cell.Cell().get_path_indices", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "", "def", "get_path_indices", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "Cell", "(", "**", "arch", ")", ".", "get_path_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.mutate_arch": [[119, 132], ["nas_lib.data.cell.Cell().mutate2", "data_nasbench2.DataNasBenchNew.query_arch", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.mutate2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch"], ["", "def", "mutate_arch", "(", "self", ",", "arch", ",", "encode_paths", "=", "True", ",", "mutation_rate", "=", "1.0", ",", "require_distance", "=", "False", ",", "\n", "memory_array", "=", "None", ",", "distance_list", "=", "None", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "arch_mutate", "=", "Cell", "(", "**", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "'ops'", ":", "arch", "[", "'ops'", "]", "}", ")", ".", "mutate2", "(", "self", ".", "nasbench", ",", "mutation_rate", ")", "\n", "matrix", "=", "arch_mutate", "[", "'matrix'", "]", "\n", "ops", "=", "arch_mutate", "[", "'ops'", "]", "\n", "results", "=", "self", ".", "query_arch", "(", "matrix", "=", "matrix", ",", "\n", "ops", "=", "ops", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "require_distance", "=", "require_distance", ")", "\n", "if", "results", ":", "\n", "                ", "break", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.matrix_dummy_nodes": [[133, 146], ["numpy.zeros", "range", "nas_lib.utils.utils_data.find_isolate_node", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node"], ["", "def", "matrix_dummy_nodes", "(", "self", ",", "matrix_in", ",", "ops_in", ")", ":", "\n", "# {2, 3, 4, 5, 6, 7}", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "for", "i", "in", "range", "(", "matrix_in", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "idxs", "=", "np", ".", "where", "(", "matrix_in", "[", "i", "]", "==", "1", ")", "\n", "for", "id", "in", "idxs", "[", "0", "]", ":", "\n", "                ", "if", "id", "==", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                    ", "matrix", "[", "i", ",", "6", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "matrix", "[", "i", ",", "id", "]", "=", "1", "\n", "", "", "", "ops", "=", "ops_in", "[", ":", "(", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ")", "]", "+", "[", "'isolate'", "]", "*", "(", "7", "-", "matrix_in", ".", "shape", "[", "0", "]", ")", "+", "ops_in", "[", "-", "1", ":", "]", "\n", "find_isolate_node", "(", "matrix", ")", "\n", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch": [[147, 191], ["matrix.astype.astype.astype", "nasbench.api.ModelSpec", "nasbench.api.ModelSpec.hash_spec", "data_nasbench2.DataNasBenchNew.matrix_dummy_nodes", "nas_lib.data.cell.Cell().get_val_loss", "nas_lib.data.cell.Cell().get_test_loss", "nas_lib.data.cell.Cell().encode_paths", "nas_lib.data.cell.Cell().encode_cell2", "nas_lib.data.cell.Cell", "nas_lib.data.cell.Cell", "nas_lib.data.cell.Cell", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.ModelSpec.hash_spec", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell2"], ["", "def", "query_arch", "(", "self", ",", "\n", "matrix", ",", "\n", "ops", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic", "=", "True", ",", "\n", "require_distance", "=", "False", ")", ":", "\n", "        ", "matrix", "=", "matrix", ".", "astype", "(", "np", ".", "int8", ")", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "key", "=", "model_spec", ".", "hash_spec", "(", "self", ".", "ops_t", ")", "\n", "if", "not", "model_spec", ".", "valid_spec", ":", "\n", "            ", "return", "None", "\n", "\n", "", "o_matrix", "=", "model_spec", ".", "matrix", "\n", "o_ops", "=", "model_spec", ".", "ops", "\n", "\n", "if", "key", "in", "self", ".", "total_keys", ":", "\n", "            ", "matrix", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'matrix'", "]", "\n", "ops", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'ops'", "]", "\n", "val_loss", "=", "100", "*", "(", "1", "-", "self", ".", "total_archs", "[", "key", "]", "[", "'val'", "]", ")", "\n", "test_loss", "=", "100", "*", "(", "1", "-", "self", ".", "total_archs", "[", "key", "]", "[", "'test'", "]", ")", "\n", "arch", "=", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n", "", "else", ":", "\n", "            ", "matrix", ",", "ops", "=", "self", ".", "matrix_dummy_nodes", "(", "o_matrix", ",", "o_ops", ")", "\n", "arch", "=", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n", "val_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_val_loss", "(", "self", ".", "nasbench", ",", "deterministic", ")", "\n", "test_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_test_loss", "(", "self", ".", "nasbench", ")", "\n", "\n", "", "if", "encode_paths", ":", "\n", "            ", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_paths", "(", ")", "\n", "", "else", ":", "\n", "            ", "encoding", "=", "Cell", "(", "**", "arch", ")", ".", "encode_cell2", "(", ")", "\n", "", "return", "[", "(", "matrix", ",", "ops", ",", "[", "]", ")", ",", "\n", "o_matrix", ",", "\n", "o_ops", ",", "\n", "encoding", ",", "\n", "val_loss", ",", "\n", "test_loss", ",", "\n", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.get_clean_dummy_arch": [[192, 241], ["print", "nasbench.api.ModelSpec", "range", "float", "float", "data_nasbench2.DataNasBenchNew.matrix_dummy_nodes", "nas_lib.utils.utils_data.find_isolate_node", "data_nasbench2.DataNasBenchNew.nasbench.is_valid", "val_acc.append", "test_acc.append", "numpy.mean", "numpy.mean", "len", "print", "print"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid"], ["", "def", "get_clean_dummy_arch", "(", "self", ")", ":", "\n", "        ", "total_arch", "=", "{", "}", "\n", "total_keys", "=", "[", "k", "for", "k", "in", "self", ".", "nasbench", ".", "computed_statistics", "]", "\n", "\n", "best_key", "=", "None", "\n", "best_val", "=", "0", "\n", "for", "k", "in", "total_keys", ":", "\n", "            ", "val_acc", "=", "[", "]", "\n", "test_acc", "=", "[", "]", "\n", "arch_matrix", "=", "self", ".", "nasbench", ".", "fixed_statistics", "[", "k", "]", "[", "'module_adjacency'", "]", "\n", "arch_ops", "=", "self", ".", "nasbench", ".", "fixed_statistics", "[", "k", "]", "[", "'module_operations'", "]", "\n", "if", "arch_matrix", ".", "shape", "[", "0", "]", "<", "7", ":", "\n", "                ", "matrix", ",", "ops", "=", "self", ".", "matrix_dummy_nodes", "(", "arch_matrix", ",", "arch_ops", ")", "\n", "", "else", ":", "\n", "                ", "matrix", "=", "arch_matrix", "\n", "ops", "=", "arch_ops", "\n", "", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "arch_matrix", ",", "ops", "=", "arch_ops", ")", "\n", "if", "arch_matrix", ".", "shape", "[", "0", "]", "==", "7", ":", "\n", "                ", "isolate_list", "=", "find_isolate_node", "(", "arch_matrix", ")", "\n", "if", "len", "(", "isolate_list", ")", ">=", "1", ":", "\n", "                    ", "print", "(", "arch_matrix", ")", "\n", "print", "(", "isolate_list", ")", "\n", "", "", "if", "not", "self", ".", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "continue", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "val_acc", ".", "append", "(", "self", ".", "nasbench", ".", "computed_statistics", "[", "k", "]", "[", "108", "]", "[", "i", "]", "[", "'final_validation_accuracy'", "]", ")", "\n", "test_acc", ".", "append", "(", "self", ".", "nasbench", ".", "computed_statistics", "[", "k", "]", "[", "108", "]", "[", "i", "]", "[", "'final_test_accuracy'", "]", ")", "\n", "", "val_mean", "=", "float", "(", "np", ".", "mean", "(", "val_acc", ")", ")", "\n", "test_mean", "=", "float", "(", "np", ".", "mean", "(", "test_acc", ")", ")", "\n", "\n", "if", "best_val", "<", "val_mean", ":", "\n", "                ", "best_val", "=", "val_mean", "\n", "best_key", "=", "k", "\n", "\n", "", "total_arch", "[", "k", "]", "=", "{", "\n", "# 'o_matrix': arch_matrix.astype(np.float32),", "\n", "'o_matrix'", ":", "arch_matrix", ",", "\n", "'o_ops'", ":", "arch_ops", ",", "\n", "# 'matrix': matrix.astype(np.float32),", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'val'", ":", "val_mean", ",", "\n", "'test'", ":", "test_mean", ",", "\n", "'key'", ":", "k", "\n", "}", "\n", "\n", "", "best_arch", "=", "total_arch", "[", "best_key", "]", "\n", "print", "(", "best_arch", "[", "'val'", "]", ",", "best_arch", "[", "'test'", "]", ")", "\n", "return", "total_arch", ",", "total_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.generate_random_dataset_both": [[243, 273], ["len", "data_nasbench2.DataNasBenchNew.query_arch_both", "data_nasbench2.DataNasBenchNew.get_path_indices", "data.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch_both", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "generate_random_dataset_both", "(", "self", ",", "\n", "num", "=", "10", ",", "\n", "train", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "patience_factor", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        create a dataset of randomly sampled architectues\n        test for isomorphisms using a hash map of path indices\n        use patience_factor to avoid infinite loops\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "tries_left", "=", "num", "*", "patience_factor", "\n", "while", "len", "(", "data", ")", "<", "num", ":", "\n", "            ", "tries_left", "-=", "1", "\n", "if", "tries_left", "<=", "0", ":", "\n", "                ", "break", "\n", "", "archtuple", "=", "self", ".", "query_arch_both", "(", "train", "=", "train", ",", "\n", "deterministic", "=", "deterministic_loss", ")", "\n", "arch_temp", "=", "{", "\n", "'matrix'", ":", "archtuple", "[", "0", "]", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "archtuple", "[", "0", "]", "[", "'ops'", "]", "\n", "}", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch_temp", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.query_arch_both": [[274, 291], ["nas_lib.data.cell.Cell().encode_paths", "nas_lib.data.cell.Cell().encode_cell2", "data_nasbench2.DataNasBenchNew.random_cell_gnn", "nas_lib.data.cell.Cell", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_paths", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.encode_cell2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.random_cell_gnn"], ["", "def", "query_arch_both", "(", "self", ",", "\n", "arch", "=", "None", ",", "\n", "train", "=", "True", ",", "\n", "deterministic", "=", "True", ")", ":", "\n", "        ", "if", "arch", "is", "None", ":", "\n", "            ", "arch", "=", "self", ".", "random_cell_gnn", "(", "self", ".", "nasbench", ")", "\n", "", "arch_temp", "=", "{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "\n", "}", "\n", "encoding", "=", "Cell", "(", "**", "arch_temp", ")", ".", "encode_paths", "(", ")", "\n", "encoding_f", "=", "Cell", "(", "**", "arch_temp", ")", ".", "encode_cell2", "(", ")", "\n", "\n", "if", "train", ":", "\n", "            ", "return", "arch", ",", "encoding", ",", "encoding_f", ",", "arch", "[", "'val_loss'", "]", ",", "arch", "[", "'test_loss'", "]", "\n", "", "else", ":", "\n", "            ", "return", "arch", ",", "encoding", ",", "encoding_f", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.random_cell_gnn": [[292, 323], ["nasbench.api.ModelSpec", "nasbench.is_valid", "random.sample", "nasbench.api.ModelSpec.hash_spec", "data_nasbench2.DataNasBenchNew.matrix_dummy_nodes", "nas_lib.data.cell.Cell().get_val_loss", "nas_lib.data.cell.Cell().get_test_loss", "nas_lib.data.cell.Cell", "nas_lib.data.cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.model_spec.ModelSpec.hash_spec", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_val_loss", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cell.Cell.get_test_loss"], ["", "", "def", "random_cell_gnn", "(", "self", ",", "nasbench", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "key", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "[", "0", "]", "\n", "architecture", "=", "self", ".", "total_archs", "[", "key", "]", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "architecture", "[", "'o_matrix'", "]", ",", "ops", "=", "architecture", "[", "'o_ops'", "]", ")", "\n", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "key", "=", "spec", ".", "hash_spec", "(", "self", ".", "ops_t", ")", "\n", "\n", "o_matrix", ",", "o_ops", "=", "spec", ".", "matrix", ",", "spec", ".", "ops", "\n", "if", "key", "in", "self", ".", "total_keys", ":", "\n", "                    ", "matrix", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'matrix'", "]", "\n", "ops", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'ops'", "]", "\n", "o_matrix", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'o_matrix'", "]", "\n", "val_loss", "=", "100", "*", "(", "1", "-", "self", ".", "total_archs", "[", "key", "]", "[", "'val'", "]", ")", "\n", "test_loss", "=", "100", "*", "(", "1", "-", "self", ".", "total_archs", "[", "key", "]", "[", "'test'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "matrix", ",", "ops", "=", "self", ".", "matrix_dummy_nodes", "(", "o_matrix", ",", "o_ops", ")", "\n", "arch", "=", "{", "\n", "'matrix'", ":", "o_matrix", ",", "\n", "'ops'", ":", "o_ops", "\n", "}", "\n", "val_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_val_loss", "(", "self", ".", "nasbench", ",", "True", ")", "\n", "test_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_test_loss", "(", "self", ".", "nasbench", ")", "\n", "", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'matrix_orig'", ":", "o_matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", ",", "\n", "'val_loss'", ":", "val_loss", ",", "\n", "'test_loss'", ":", "test_loss", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.remove_duplicates_both": [[325, 340], ["hashlib.sha256().hexdigest", "keys.append", "hashlib.sha256().hexdigest", "unduplicated.append", "hashlib.sha256", "hashlib.sha256", "str().encode", "str().encode", "str", "str", "d[].tolist", "candidate[].tolist"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "", "", "def", "remove_duplicates_both", "(", "self", ",", "candidates", ",", "data", ")", ":", "\n", "# input: two sets of architectues: candidates and data", "\n", "# output: candidates with arches from data removed", "\n", "        ", "keys", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "            ", "k", "=", "sha256", "(", "str", "(", "d", "[", "1", "]", ".", "tolist", "(", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "keys", ".", "append", "(", "k", ")", "\n", "", "unduplicated", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "            ", "k_c", "=", "sha256", "(", "str", "(", "candidate", "[", "1", "]", ".", "tolist", "(", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "k_c", "in", "keys", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "unduplicated", ".", "append", "(", "candidate", ")", "\n", "", "", "return", "unduplicated", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.get_arch_list": [[341, 400], ["pickle.load", "open", "print", "nas_lib.data.cell.Cell().get_path_indices", "range", "len", "range", "data_nasbench2.DataNasBenchNew.matrix_dummy_nodes"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes"], ["", "def", "get_arch_list", "(", "self", ",", "\n", "aux_file_path", ",", "\n", "distance", "=", "None", ",", "\n", "iteridx", "=", "0", ",", "\n", "num_top_arches", "=", "5", ",", "\n", "max_edits", "=", "20", ",", "\n", "num_repeats", "=", "5", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "verbose", "=", "0", ")", ":", "\n", "# Method used for gp_bayesopt", "\n", "\n", "# load the list of architectures chosen by bayesopt so far", "\n", "        ", "base_arch_list", "=", "pickle", ".", "load", "(", "open", "(", "aux_file_path", ",", "'rb'", ")", ")", "\n", "top_arches", "=", "[", "archtuple", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "num_top_arches", "]", "]", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "[", "archtuple", "[", "1", "]", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "min", "(", "5", ",", "len", "(", "base_arch_list", ")", ")", "]", "]", "\n", "print", "(", "'top 5 val losses {}'", ".", "format", "(", "top_5_loss", ")", ")", "\n", "\n", "# perturb the best k architectures", "\n", "", "dic", "=", "{", "}", "\n", "for", "archtuple", "in", "base_arch_list", ":", "\n", "            ", "matrix", "=", "archtuple", "[", "0", "]", "[", "'matrix'", "]", "\n", "ops", "=", "archtuple", "[", "0", "]", "[", "'ops'", "]", "\n", "if", "matrix", ".", "shape", "[", "0", "]", "<", "NUM_VERTICES", ":", "\n", "                ", "matrix", ",", "ops", "=", "matrix_dummy_nodes", "(", "matrix", ",", "ops", ")", "\n", "", "path_indices", "=", "Cell", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", ".", "get_path_indices", "(", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "new_arch_list", "=", "[", "]", "\n", "for", "arch", "in", "top_arches", ":", "\n", "            ", "for", "edits", "in", "range", "(", "1", ",", "max_edits", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "num_repeats", ")", ":", "\n", "#perturbation = Cell(**arch).perturb(self.nasbench, edits)", "\n", "                    ", "arch_mutate", "=", "Cell", "(", "**", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "'ops'", ":", "arch", "[", "'ops'", "]", "}", ")", ".", "mutate2", "(", "self", ".", "nasbench", ",", "\n", "mutation_rate", "=", "edits", ")", "\n", "matrix", "=", "arch_mutate", "[", "'matrix'", "]", "\n", "ops", "=", "arch_mutate", "[", "'ops'", "]", "\n", "if", "matrix", ".", "shape", "[", "0", "]", "<", "NUM_VERTICES", ":", "\n", "                        ", "matrix", ",", "ops", "=", "matrix_dummy_nodes", "(", "matrix", ",", "ops", ")", "\n", "\n", "", "path_indices", "=", "Cell", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", ".", "get_path_indices", "(", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "arch_mutate", ")", "\n", "\n", "# make sure new_arch_list is not empty", "\n", "", "", "", "", "while", "len", "(", "new_arch_list", ")", "==", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "                ", "arch", "=", "Cell", ".", "random_cell", "(", "self", ".", "nasbench", ")", "\n", "matrix", "=", "arch", "[", "'matrix'", "]", "\n", "ops", "=", "arch", "[", "'ops'", "]", "\n", "if", "matrix", ".", "shape", "[", "0", "]", "<", "NUM_VERTICES", ":", "\n", "                    ", "matrix", ",", "ops", "=", "matrix_dummy_nodes", "(", "matrix", ",", "ops", ")", "\n", "", "path_indices", "=", "Cell", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", ".", "get_path_indices", "(", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "arch", ")", "\n", "\n", "", "", "", "return", "new_arch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.generate_distance_matrix": [[401, 413], ["numpy.zeros", "enumerate", "enumerate", "len", "len", "data_nasbench2.adj_distance", "data_nasbench2.nasbot_distance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.nasbot_distance"], ["", "@", "classmethod", "\n", "def", "generate_distance_matrix", "(", "cls", ",", "arches_1", ",", "arches_2", ",", "distance", ")", ":", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "[", "len", "(", "arches_1", ")", ",", "len", "(", "arches_2", ")", "]", ")", "\n", "for", "i", ",", "arch_1", "in", "enumerate", "(", "arches_1", ")", ":", "\n", "            ", "for", "j", ",", "arch_2", "in", "enumerate", "(", "arches_2", ")", ":", "\n", "                ", "if", "distance", "==", "'adj'", ":", "\n", "                    ", "matrix", "[", "i", "]", "[", "j", "]", "=", "adj_distance", "(", "arch_1", ",", "arch_2", ")", "\n", "", "elif", "distance", "==", "'nasbot'", ":", "\n", "                    ", "matrix", "[", "i", "]", "[", "j", "]", "=", "nasbot_distance", "(", "arch_1", ",", "arch_2", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Distance {distance} does not support at present!'", ")", "\n", "", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes": [[415, 428], ["numpy.zeros", "range", "nas_lib.utils.utils_data.find_isolate_node", "numpy.where"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node"], ["", "", "def", "matrix_dummy_nodes", "(", "matrix_in", ",", "ops_in", ")", ":", "\n", "# {2, 3, 4, 5, 6, 7}", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "for", "i", "in", "range", "(", "matrix_in", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "idxs", "=", "np", ".", "where", "(", "matrix_in", "[", "i", "]", "==", "1", ")", "\n", "for", "id", "in", "idxs", "[", "0", "]", ":", "\n", "                ", "if", "id", "==", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                    ", "matrix", "[", "i", ",", "6", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "matrix", "[", "i", ",", "id", "]", "=", "1", "\n", "", "", "", "ops", "=", "ops_in", "[", ":", "(", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ")", "]", "+", "[", "'isolate'", "]", "*", "(", "7", "-", "matrix_in", ".", "shape", "[", "0", "]", ")", "+", "ops_in", "[", "-", "1", ":", "]", "\n", "find_isolate_node", "(", "matrix", ")", "\n", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.adj_distance": [[430, 442], ["data_nasbench2.matrix_dummy_nodes", "data_nasbench2.matrix_dummy_nodes", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes"], ["", "def", "adj_distance", "(", "cell_1", ",", "cell_2", ")", ":", "\n", "    ", "\"\"\"\n    compute the distance between two architectures\n    by comparing their adjacency matrices and op lists\n    (edit distance)\n    \"\"\"", "\n", "c1_matrix", ",", "c1_ops", "=", "matrix_dummy_nodes", "(", "cell_1", "[", "'matrix'", "]", ",", "cell_1", "[", "'ops'", "]", ")", "\n", "c2_matrix", ",", "c2_ops", "=", "matrix_dummy_nodes", "(", "cell_2", "[", "'matrix'", "]", ",", "cell_2", "[", "'ops'", "]", ")", "\n", "\n", "graph_dist", "=", "np", ".", "sum", "(", "c1_matrix", "!=", "c2_matrix", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "c1_ops", "!=", "c2_ops", ")", "\n", "return", "graph_dist", "+", "ops_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.nasbot_distance": [[444, 464], ["data_nasbench2.matrix_dummy_nodes", "data_nasbench2.matrix_dummy_nodes", "sorted", "sorted", "sorted", "sorted", "numpy.sum", "numpy.sum", "numpy.sum", "c1_matrix.sum", "c1_matrix.sum", "c2_matrix.sum", "c2_matrix.sum", "numpy.abs", "numpy.abs", "c1_ops.count", "c2_ops.count", "numpy.abs", "numpy.subtract", "numpy.subtract", "numpy.subtract"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count"], ["", "def", "nasbot_distance", "(", "cell_1", ",", "cell_2", ")", ":", "\n", "#     # distance based on optimal transport between row sums, column sums, and ops", "\n", "    ", "c1_matrix", ",", "c1_ops", "=", "matrix_dummy_nodes", "(", "cell_1", "[", "'matrix'", "]", ",", "cell_1", "[", "'ops'", "]", ")", "\n", "c2_matrix", ",", "c2_ops", "=", "matrix_dummy_nodes", "(", "cell_2", "[", "'matrix'", "]", ",", "cell_2", "[", "'ops'", "]", ")", "\n", "\n", "cell_1_row_sums", "=", "sorted", "(", "c1_matrix", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "cell_1_col_sums", "=", "sorted", "(", "c1_matrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "cell_2_row_sums", "=", "sorted", "(", "c2_matrix", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "cell_2_col_sums", "=", "sorted", "(", "c2_matrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "row_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_row_sums", ",", "cell_2_row_sums", ")", ")", ")", "\n", "col_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_col_sums", ",", "cell_2_col_sums", ")", ")", ")", "\n", "\n", "cell_1_counts", "=", "[", "c1_ops", ".", "count", "(", "op", ")", "for", "op", "in", "OPS", "]", "\n", "cell_2_counts", "=", "[", "c2_ops", ".", "count", "(", "op", ")", "for", "op", "in", "OPS", "]", "\n", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_counts", ",", "cell_2_counts", ")", ")", ")", "\n", "\n", "return", "row_dist", "+", "col_dist", "+", "ops_dist", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain._RepeatSampler.__init__": [[14, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain._RepeatSampler.__iter__": [[17, 20], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "from", "iter", "(", "self", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.FastDataLoader.__init__": [[24, 28], ["super().__init__", "object.__setattr__", "super().__iter__", "cifar10_dataset_retrain._RepeatSampler"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__iter__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "object", ".", "__setattr__", "(", "self", ",", "'batch_sampler'", ",", "_RepeatSampler", "(", "self", ".", "batch_sampler", ")", ")", "\n", "self", ".", "iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.FastDataLoader.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.FastDataLoader.__iter__": [[32, 35], ["range", "len", "next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.Cutout.__init__": [[141, 143], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.Cutout.__call__": [[144, 160], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.get_cifar10_full_train_loader": [[52, 64], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_full_train_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "train_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.get_cifar10_full_test_loader": [[66, 78], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_full_test_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "test_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "False", ",", "download", "=", "False", ",", "transform", "=", "transform", ",", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.get_cifar10_train_and_val_loader": [[80, 99], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "len", "list", "int", "cifar10_dataset_retrain.FastDataLoader", "cifar10_dataset_retrain.FastDataLoader", "torchvision.Compose", "range", "numpy.floor", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_train_and_val_loader", "(", "root_path", ",", "train_portion", "=", "0.7", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "train_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "num_train", "=", "len", "(", "train_set", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "train_loader", "=", "FastDataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ")", "\n", "val_loader", "=", "FastDataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.get_cifar10_train_loader": [[101, 114], ["cifar10_dataset_retrain.Cifar10Train", "cifar10_dataset_retrain.FastDataLoader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_train_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "trainset", "=", "Cifar10Train", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "\n", "trainloader", "=", "FastDataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.get_cifar10_val_loader": [[116, 126], ["cifar10_dataset_retrain.Cifar10Val", "cifar10_dataset_retrain.FastDataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_val_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "valset", "=", "Cifar10Val", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "valloader", "=", "FastDataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "valloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.get_cifar10_test_loader": [[128, 138], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "cifar10_dataset_retrain.FastDataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_test_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "False", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "testloader", "=", "FastDataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.cifar10_dataset_retrain.transforms_cifar10": [[162, 180], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "cifar10_dataset_retrain.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "transforms_cifar10", "(", "cutout", ",", "cutout_length", ")", ":", "\n", "    ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "cutout", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.__init__": [[32, 74], ["os.path.exists", "list", "os.path.exists", "min", "total_val_data.index", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data_nasbench_nlp.DataNasBenchNLP.load_dates", "data_nasbench_nlp.DataNasBenchNLP.total_archs.keys", "data_nasbench_nlp.DataNasBenchNLP.distance_matrix_cal", "open", "pickle.load", "open", "pickle.dump", "data_nasbench_nlp.DataNasBenchNLP.total_archs.items", "open", "pickle.load", "open", "pickle.dump", "enumerate", "min"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.load_dates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.distance_matrix_cal"], ["    ", "def", "__init__", "(", "self", ",", "perf_type", "=", "'best'", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "'nasbench_nlp'", "\n", "self", ".", "perf_type", "=", "perf_type", "\n", "\n", "if", "perf_type", "==", "'best'", ":", "\n", "            ", "nas_nlp_save_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_nlp_path", ",", "'nas_nlp_data_best.pkl'", ")", "\n", "nas_nlp_adj_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_nlp_path", ",", "'nas_nlp_adj_path_best.pkl'", ")", "\n", "", "else", ":", "\n", "            ", "nas_nlp_save_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_nlp_path", ",", "'nas_nlp_data_last.pkl'", ")", "\n", "nas_nlp_adj_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_nlp_path", ",", "'nas_nlp_adj_path_last.pkl'", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "nas_nlp_save_path", ")", ":", "\n", "            ", "with", "open", "(", "nas_nlp_save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "total_archs", ",", "self", ".", "c_0_mapping", ",", "self", ".", "c_1_mapping", ",", "self", ".", "c_2_mapping", ",", "self", ".", "c_3_mapping", ",", "self", ".", "total_0", ",", "self", ".", "total_1", ",", "self", ".", "total_2", ",", "self", ".", "total_len", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "total_archs", ",", "self", ".", "c_0_mapping", ",", "self", ".", "c_1_mapping", ",", "self", ".", "c_2_mapping", ",", "self", ".", "c_3_mapping", ",", "self", ".", "total_0", ",", "self", ".", "total_1", ",", "self", ".", "total_2", ",", "self", ".", "total_len", "=", "self", ".", "load_dates", "(", ")", "\n", "total_save_info", "=", "[", "self", ".", "total_archs", ",", "self", ".", "c_0_mapping", ",", "self", ".", "c_1_mapping", ",", "self", ".", "c_2_mapping", ",", "\n", "self", ".", "c_3_mapping", ",", "self", ".", "total_0", ",", "self", ".", "total_1", ",", "self", ".", "total_2", ",", "self", ".", "total_len", "]", "\n", "with", "open", "(", "nas_nlp_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "total_save_info", ",", "f", ")", "\n", "\n", "# c2mapping: 6643288, 89165658", "\n", "", "", "self", ".", "total_keys", "=", "list", "(", "self", ".", "total_archs", ".", "keys", "(", ")", ")", "\n", "self", ".", "arch_keys_dict", "=", "{", "v", "[", "6", "]", ":", "k", "for", "k", ",", "v", "in", "self", ".", "total_archs", ".", "items", "(", ")", "}", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "nas_nlp_adj_path", ")", ":", "\n", "            ", "with", "open", "(", "nas_nlp_adj_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "distance_matrix", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "distance_matrix", "=", "self", ".", "distance_matrix_cal", "(", "self", ".", "total_archs", ",", "self", ".", "total_keys", ")", "\n", "with", "open", "(", "nas_nlp_adj_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "distance_matrix", ",", "f", ")", "\n", "", "", "self", ".", "keys_idx_dict", "=", "{", "key", ":", "idx", "for", "idx", ",", "key", "in", "enumerate", "(", "self", ".", "total_keys", ")", "}", "\n", "\n", "self", ".", "total_val_data", "=", "total_val_data", "=", "[", "self", ".", "total_archs", "[", "k", "]", "[", "4", "]", "for", "k", "in", "self", ".", "total_keys", "]", "\n", "self", ".", "total_test_data", "=", "total_test_data", "=", "[", "self", ".", "total_archs", "[", "k", "]", "[", "5", "]", "for", "k", "in", "self", ".", "total_keys", "]", "\n", "\n", "min_validate_val", "=", "min", "(", "total_val_data", ")", "\n", "min_val_idx", "=", "total_val_data", ".", "index", "(", "min_validate_val", ")", "\n", "print", "(", "f'min val data value is {min_validate_val}, corr min test data is {total_test_data[min_val_idx]}, '", "\n", "f'and the min test val is {min(total_test_data)}'", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.generate_random_dataset": [[76, 104], ["random.sample", "key_list.append", "tuple", "data.append", "len"], "methods", ["None"], ["", "def", "generate_random_dataset", "(", "self", ",", "num", ",", "allow_isomorphisms", ",", "deterministic_loss", "=", "True", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "key_list", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "k", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "\n", "key_list", ".", "append", "(", "k", "[", "0", "]", ")", "\n", "arch", "=", "self", ".", "total_archs", "[", "k", "[", "0", "]", "]", "\n", "path_encoding1", "=", "arch", "[", "3", "]", "\n", "path_encoding2", "=", "arch", "[", "-", "1", "]", "\n", "path_indices", "=", "tuple", "(", "path_encoding1", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "\n", "(", "\n", "arch", "[", "0", "]", ",", "\n", "arch", "[", "1", "]", ",", "\n", "arch", "[", "2", "]", ",", "\n", "path_encoding1", ",", "\n", "arch", "[", "4", "]", ",", "\n", "arch", "[", "5", "]", ",", "\n", "arch", "[", "6", "]", ",", "\n", "path_encoding2", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "data", ")", "==", "num", ":", "\n", "                ", "break", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.mutate": [[105, 175], ["json.loads", "data_nasbench_nlp.DataNasBenchNLP.arch2dag", "data_nasbench_nlp.DataNasBenchNLP.add_dummy_nodes", "data_nasbench_nlp.DataNasBenchNLP.make_keys", "data_nasbench_nlp.DataNasBenchNLP.distance_matrix[].tolist", "data_nasbench_nlp.DataNasBenchNLP.sort", "list", "int", "set", "numpy.where", "min_idxs[].tolist", "random.choice", "enumerate", "numpy.where", "min_idxs[].tolist", "random.choice", "data_nasbench_nlp.DataNasBenchNLP.distance_matrix[].tolist", "data_nasbench_nlp.DataNasBenchNLP.sort", "list", "numpy.where", "min_idxs[].tolist", "random.choice", "range", "range", "data_nasbench_nlp.DataNasBenchNLP.add_dummy_nodes", "data_nasbench_nlp.DataNasBenchNLP.make_keys", "abs", "set", "random.random", "random.choice", "range", "len", "len", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.arch2dag", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.add_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.make_keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.add_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.make_keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random"], ["", "def", "mutate", "(", "self", ",", "arch_str", ",", "mutate_rate", "=", "1.0", ",", "by_distance", "=", "True", ",", "eps", "=", "0.1", ",", "arch2list", "=", "False", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "mutate_flag", "=", "False", "\n", "arch_info", "=", "json", ".", "loads", "(", "arch_str", ")", "\n", "adj_matrix", ",", "ops", ",", "inputs", ",", "outputs", "=", "self", ".", "arch2dag", "(", "arch_info", ")", "\n", "adj_new_matrix", ",", "ops_new", "=", "self", ".", "add_dummy_nodes", "(", "adj_matrix", ",", "ops", ",", "inputs", ",", "outputs", ")", "\n", "key", "=", "self", ".", "make_keys", "(", "adj_new_matrix", ",", "ops_new", ")", "\n", "\n", "if", "arch2list", "and", "by_distance", ":", "\n", "                ", "key_idx", "=", "self", ".", "keys_idx_dict", "[", "key", "]", "\n", "self", ".", "distance_matrix", "[", "key_idx", ",", "key_idx", "]", "=", "300", "\n", "distance_list", "=", "self", ".", "distance_matrix", "[", "key_idx", ",", ":", "]", ".", "tolist", "(", ")", "\n", "distance_list", ".", "sort", "(", ")", "\n", "distance_set", "=", "list", "(", "set", "(", "distance_list", ")", ")", "\n", "mutate_rate", "=", "int", "(", "mutate_rate", ")", "\n", "if", "mutate_rate", "in", "distance_set", ":", "\n", "                    ", "min_idxs", "=", "np", ".", "where", "(", "self", ".", "distance_matrix", "[", "key_idx", ",", ":", "]", "==", "mutate_rate", ")", "\n", "min_idxs_list", "=", "min_idxs", "[", "0", "]", ".", "tolist", "(", ")", "\n", "min_idx", "=", "random", ".", "choice", "(", "min_idxs_list", ")", "\n", "closest_arch", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "min_idx", "]", "]", "\n", "return", "closest_arch", "\n", "", "else", ":", "\n", "                    ", "min_list", "=", "[", "1000", ",", "1000", "]", "\n", "for", "idx", ",", "v", "in", "enumerate", "(", "distance_set", ")", ":", "\n", "                        ", "dist", "=", "abs", "(", "mutate_rate", "-", "v", ")", "\n", "if", "dist", "<", "min_list", "[", "1", "]", ":", "\n", "                            ", "min_list", "[", "0", "]", "=", "idx", "\n", "min_list", "[", "1", "]", "=", "v", "\n", "", "", "min_idxs", "=", "np", ".", "where", "(", "self", ".", "distance_matrix", "[", "key_idx", ",", ":", "]", "==", "min_list", "[", "1", "]", ")", "\n", "min_idxs_list", "=", "min_idxs", "[", "0", "]", ".", "tolist", "(", ")", "\n", "min_idx", "=", "random", ".", "choice", "(", "min_idxs_list", ")", "\n", "closest_arch", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "min_idx", "]", "]", "\n", "return", "closest_arch", "\n", "", "", "elif", "by_distance", ":", "\n", "                ", "key_idx", "=", "self", ".", "keys_idx_dict", "[", "key", "]", "\n", "self", ".", "distance_matrix", "[", "key_idx", ",", "key_idx", "]", "=", "300", "\n", "distance_list", "=", "self", ".", "distance_matrix", "[", "key_idx", ",", ":", "]", ".", "tolist", "(", ")", "\n", "distance_list", ".", "sort", "(", ")", "\n", "distance_set", "=", "list", "(", "set", "(", "distance_list", ")", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "eps", ":", "\n", "                    ", "min_val", "=", "random", ".", "choice", "(", "distance_set", "[", "0", ":", "20", "]", ")", "\n", "", "else", ":", "\n", "                    ", "min_val", "=", "distance_set", "[", "0", "]", "\n", "", "min_idxs", "=", "np", ".", "where", "(", "self", ".", "distance_matrix", "[", "key_idx", ",", ":", "]", "==", "min_val", ")", "\n", "min_idxs_list", "=", "min_idxs", "[", "0", "]", ".", "tolist", "(", ")", "\n", "min_idx", "=", "random", ".", "choice", "(", "min_idxs_list", ")", "\n", "closest_arch", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "min_idx", "]", "]", "\n", "return", "closest_arch", "\n", "", "else", ":", "\n", "                ", "input_shape", "=", "adj_matrix", ".", "shape", "[", "0", "]", "\n", "edge_mutation_prob", "=", "mutate_rate", "/", "input_shape", "\n", "for", "src", "in", "range", "(", "0", ",", "input_shape", "-", "1", ")", ":", "\n", "                    ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "input_shape", ")", ":", "\n", "                        ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                            ", "adj_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "adj_matrix", "[", "src", ",", "dst", "]", "\n", "mutate_flag", "=", "True", "\n", "\n", "", "", "", "OP_SPOTS", "=", "input_shape", "-", "len", "(", "inputs", ")", "-", "len", "(", "outputs", ")", "\n", "op_mutation_prob", "=", "mutate_rate", "/", "OP_SPOTS", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                        ", "available", "=", "[", "o", "for", "o", "in", "OPS_LIST", "if", "o", "!=", "ops", "[", "ind", "]", "]", "\n", "ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "mutate_flag", "=", "True", "\n", "\n", "", "", "adj_new_matrix", ",", "ops_new", "=", "self", ".", "add_dummy_nodes", "(", "adj_matrix", ",", "ops", ",", "inputs", ",", "outputs", ")", "\n", "key", "=", "self", ".", "make_keys", "(", "adj_new_matrix", ",", "ops_new", ")", "\n", "if", "key", "in", "self", ".", "total_archs", ":", "\n", "# print(mutate_flag)", "\n", "                    ", "return", "self", ".", "total_archs", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.get_candidates": [[176, 235], ["enumerate", "json.loads", "data_nasbench_nlp.DataNasBenchNLP.arch2dag", "data_nasbench_nlp.DataNasBenchNLP.add_dummy_nodes", "data_nasbench_nlp.DataNasBenchNLP.get_path_indices", "data_nasbench_nlp.DataNasBenchNLP.items", "tuple", "range", "nums_list.append", "mutated_archs_list.append", "tuple.extend", "len", "data_nasbench_nlp.DataNasBenchNLP.mutate", "data_nasbench_nlp.DataNasBenchNLP.get_path_indices", "data_nasbench_nlp.DataNasBenchNLP.items", "tuple", "sorted", "tuple.extend", "candidates.append", "data_nasbench_nlp.adj_distance", "dist_list.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.arch2dag", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.add_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance"], ["", "", "", "", "def", "get_candidates", "(", "self", ",", "\n", "data", ",", "\n", "num", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "num_best_arches", "=", "10", ",", "\n", "mutation_rate", "=", "0.1", ",", "\n", "return_dist", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "dist_list", "=", "[", "]", "\n", "nums_list", "=", "[", "]", "\n", "mutated_archs_list", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch_info", "=", "json", ".", "loads", "(", "d", "[", "6", "]", ")", "\n", "adj_matrix", ",", "ops", ",", "inputs", ",", "outputs", "=", "self", ".", "arch2dag", "(", "arch_info", ")", "\n", "adj_matrix_new", ",", "ops_new", "=", "self", ".", "add_dummy_nodes", "(", "adj_matrix", ",", "ops", ",", "inputs", ",", "outputs", ")", "\n", "path_dict", "=", "self", ".", "get_path_indices", "(", "adj_matrix_new", ",", "ops_new", ")", "\n", "path_indices", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "path_dict", ".", "items", "(", ")", ":", "\n", "                ", "temp_p", "=", "[", "k", ",", "*", "v", "]", "\n", "path_indices", ".", "extend", "(", "temp_p", ")", "\n", "", "path_indices", "=", "tuple", "(", "path_indices", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "best_arches", "=", "[", "arch", "for", "arch", "in", "\n", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "best_arches", ")", ":", "\n", "            ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                ", "break", "\n", "", "nums", "=", "0", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                ", "mutated", "=", "self", ".", "mutate", "(", "arch", "[", "6", "]", ",", "eps", "=", "mutation_rate", ")", "\n", "path_dict", "=", "self", ".", "get_path_indices", "(", "mutated", "[", "1", "]", ",", "mutated", "[", "2", "]", ")", "\n", "path_indices", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "path_dict", ".", "items", "(", ")", ":", "\n", "                    ", "temp_p", "=", "[", "k", ",", "*", "v", "]", "\n", "path_indices", ".", "extend", "(", "temp_p", ")", "\n", "", "path_indices", "=", "tuple", "(", "path_indices", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "mutated", ")", "\n", "dist", "=", "adj_distance", "(", "(", "0", ",", "arch", "[", "1", "]", ",", "arch", "[", "2", "]", ")", ",", "(", "0", ",", "mutated", "[", "1", "]", ",", "mutated", "[", "2", "]", ")", ")", "\n", "dist_list", ".", "append", "(", "dist", ")", "\n", "nums", "+=", "1", "\n", "", "", "nums_list", ".", "append", "(", "nums", ")", "\n", "mutated_archs_list", ".", "append", "(", "arch", ")", "\n", "", "if", "return_dist", ":", "\n", "            ", "return", "candidates", "[", ":", "num", "]", ",", "dist_list", "[", ":", "num", "]", ",", "0", ",", "nums_list", ",", "mutated_archs_list", "\n", "", "else", ":", "\n", "            ", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.distance_matrix_cal": [[236, 242], ["numpy.zeros", "enumerate", "enumerate", "len", "len", "data_nasbench_nlp.DataNasBenchNLP.edit_distance"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.edit_distance"], ["", "", "def", "distance_matrix_cal", "(", "self", ",", "all_data", ",", "total_keys", ")", ":", "\n", "        ", "distance_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "all_data", ")", ",", "len", "(", "all_data", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "k1", "in", "enumerate", "(", "total_keys", ")", ":", "\n", "            ", "for", "j", ",", "k2", "in", "enumerate", "(", "total_keys", ")", ":", "\n", "                ", "distance_matrix", "[", "i", "]", "[", "j", "]", "=", "self", ".", "edit_distance", "(", "all_data", "[", "k1", "]", ",", "all_data", "[", "k2", "]", ")", "\n", "", "", "return", "distance_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.edit_distance": [[243, 251], ["numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "edit_distance", "(", "self", ",", "arch_1", ",", "arch_2", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their adjacency matrices and op lists\n        \"\"\"", "\n", "graph_dist", "=", "np", ".", "sum", "(", "arch_1", "[", "1", "]", "!=", "arch_2", "[", "1", "]", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "arch_1", "[", "2", "]", "!=", "arch_2", "[", "2", "]", ")", "\n", "return", "graph_dist", "+", "ops_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.load_dates": [[252, 286], ["data_nasbench_nlp.DataNasBenchNLP.remapping_path_based_encoding", "os.path.join", "json.load", "json.loads", "data_nasbench_nlp.DataNasBenchNLP.arch2dag", "data_nasbench_nlp.DataNasBenchNLP.add_dummy_nodes", "data_nasbench_nlp.DataNasBenchNLP.path_based_encoding", "data_nasbench_nlp.DataNasBenchNLP.make_keys", "os.listdir", "f.endswith", "open", "min", "min", "data_nasbench_nlp.DataNasBenchNLP.adj_ops_encoding"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.remapping_path_based_encoding", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.arch2dag", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.add_dummy_nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.path_based_encoding", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.make_keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.adj_ops_encoding"], ["", "def", "load_dates", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "nas_bench_nlp_path", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "nas_bench_nlp_path", ")", "if", "f", ".", "endswith", "(", "'json'", ")", "]", "\n", "all_data", "=", "{", "}", "\n", "counter", "=", "0", "\n", "for", "file", "in", "files", ":", "\n", "            ", "file_info", "=", "json", ".", "load", "(", "open", "(", "file", ",", "'r'", ")", ")", "\n", "if", "file_info", "[", "'status'", "]", "!=", "'OK'", ":", "\n", "                ", "continue", "\n", "", "counter", "+=", "1", "\n", "arch_info", "=", "json", ".", "loads", "(", "file_info", "[", "'recepie'", "]", ")", "\n", "adj_matrix", ",", "ops", ",", "inputs", ",", "outputs", "=", "self", ".", "arch2dag", "(", "arch_info", ")", "\n", "if", "self", ".", "perf_type", "==", "'best'", ":", "\n", "                ", "min_val_loss", "=", "min", "(", "file_info", "[", "'val_losses'", "]", ")", "\n", "min_test_loss", "=", "min", "(", "file_info", "[", "'test_losses'", "]", ")", "\n", "", "else", ":", "\n", "                ", "min_val_loss", "=", "file_info", "[", "'val_losses'", "]", "[", "-", "1", "]", "\n", "min_test_loss", "=", "file_info", "[", "'test_losses'", "]", "[", "-", "1", "]", "\n", "", "adj_new_matrix", ",", "ops_new", "=", "self", ".", "add_dummy_nodes", "(", "adj_matrix", ",", "ops", ",", "inputs", ",", "outputs", ")", "\n", "path_based_encoding", "=", "self", ".", "path_based_encoding", "(", "adj_new_matrix", ",", "ops_new", ")", "\n", "keys", "=", "self", ".", "make_keys", "(", "adj_new_matrix", ",", "ops_new", ")", "\n", "data", "=", "[", "\n", "[", "adj_matrix", ",", "ops", "]", ",", "\n", "adj_new_matrix", ",", "# store adjacency matrix", "\n", "ops_new", ",", "# store ops list ['input', 'fc', 'output']", "\n", "path_based_encoding", ",", "# path based encoding", "\n", "min_val_loss", ",", "\n", "min_test_loss", ",", "\n", "file_info", "[", "'recepie'", "]", ",", "\n", "self", ".", "adj_ops_encoding", "(", "adj_new_matrix", ",", "ops_new", ")", ",", "# store path encoding", "\n", "]", "\n", "all_data", "[", "keys", "]", "=", "data", "\n", "", "all_data", ",", "c_0_mapping", ",", "c_1_mapping", ",", "c_2_mapping", ",", "c_3_mapping", ",", "total_0", ",", "total_1", ",", "total_2", ",", "total_len", "=", "self", ".", "remapping_path_based_encoding", "(", "all_data", ")", "\n", "return", "all_data", ",", "c_0_mapping", ",", "c_1_mapping", ",", "c_2_mapping", ",", "c_3_mapping", ",", "total_0", ",", "total_1", ",", "total_2", ",", "total_len", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.make_keys": [[287, 291], ["matrix.tolist", "matrix.tolist.extend", "hashlib.sha256().hexdigest", "hashlib.sha256", "str().encode", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist"], ["", "def", "make_keys", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "matrix_list", "=", "matrix", ".", "tolist", "(", ")", "\n", "matrix_list", ".", "extend", "(", "ops", ")", "\n", "return", "sha256", "(", "str", "(", "matrix_list", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.remapping_path_based_encoding": [[292, 350], ["all_idxs_0.items", "all_idxs_1.items", "all_idxs_2.items", "all_idxs_3.items", "dict", "dict", "dict", "dict", "enumerate", "enumerate", "enumerate", "enumerate", "len", "len", "len", "all_data.items", "all_idxs_00.extend", "all_idxs_11.extend", "all_idxs_22.extend", "all_idxs_33.extend", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "dict.keys", "dict.keys", "dict.keys", "dict.keys", "len", "numpy.zeros", "all_data.items", "all_data.items", "all_data.items", "all_data.items", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "remapping_path_based_encoding", "(", "self", ",", "all_data", ")", ":", "\n", "        ", "all_idxs_0", "=", "{", "k", ":", "v", "[", "3", "]", "[", "0", "]", "for", "k", ",", "v", "in", "all_data", ".", "items", "(", ")", "}", "\n", "all_idxs_1", "=", "{", "k", ":", "v", "[", "3", "]", "[", "1", "]", "for", "k", ",", "v", "in", "all_data", ".", "items", "(", ")", "}", "\n", "all_idxs_2", "=", "{", "k", ":", "v", "[", "3", "]", "[", "2", "]", "for", "k", ",", "v", "in", "all_data", ".", "items", "(", ")", "if", "len", "(", "v", "[", "3", "]", ")", ">=", "3", "}", "\n", "all_idxs_3", "=", "{", "k", ":", "v", "[", "3", "]", "[", "3", "]", "for", "k", ",", "v", "in", "all_data", ".", "items", "(", ")", "if", "len", "(", "v", "[", "3", "]", ")", "==", "4", "}", "\n", "all_idxs_00", ",", "all_idxs_11", ",", "all_idxs_22", ",", "all_idxs_33", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "k", ",", "v", "in", "all_idxs_0", ".", "items", "(", ")", ":", "\n", "            ", "all_idxs_00", ".", "extend", "(", "v", ")", "\n", "", "for", "k", ",", "v", "in", "all_idxs_1", ".", "items", "(", ")", ":", "\n", "            ", "all_idxs_11", ".", "extend", "(", "v", ")", "\n", "", "for", "k", ",", "v", "in", "all_idxs_2", ".", "items", "(", ")", ":", "\n", "            ", "all_idxs_22", ".", "extend", "(", "v", ")", "\n", "", "for", "k", ",", "v", "in", "all_idxs_3", ".", "items", "(", ")", ":", "\n", "            ", "all_idxs_33", ".", "extend", "(", "v", ")", "\n", "\n", "", "c_0_dict", "=", "dict", "(", "Counter", "(", "all_idxs_00", ")", ")", "\n", "c_1_dict", "=", "dict", "(", "Counter", "(", "all_idxs_11", ")", ")", "\n", "c_2_dict", "=", "dict", "(", "Counter", "(", "all_idxs_22", ")", ")", "\n", "c_3_dict", "=", "dict", "(", "Counter", "(", "all_idxs_33", ")", ")", "\n", "\n", "c_0_mapping", ",", "c_1_mapping", ",", "c_2_mapping", ",", "c_3_mapping", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "c_0_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "c_0_mapping", "[", "k", "]", "=", "idx", "\n", "", "for", "idx", ",", "k", "in", "enumerate", "(", "c_1_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "c_1_mapping", "[", "k", "]", "=", "idx", "\n", "", "for", "idx", ",", "k", "in", "enumerate", "(", "c_2_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "c_2_mapping", "[", "k", "]", "=", "idx", "\n", "", "for", "idx", ",", "k", "in", "enumerate", "(", "c_3_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "c_3_mapping", "[", "k", "]", "=", "idx", "\n", "\n", "", "total_0", "=", "len", "(", "c_0_mapping", ")", "\n", "total_1", "=", "len", "(", "c_1_mapping", ")", "\n", "total_2", "=", "len", "(", "c_2_mapping", ")", "\n", "# total_3 = len(c_3_mapping)", "\n", "total_len", "=", "total_0", "+", "len", "(", "c_1_mapping", ")", "+", "len", "(", "c_2_mapping", ")", "+", "len", "(", "c_3_mapping", ")", "\n", "for", "k", ",", "v", "in", "all_data", ".", "items", "(", ")", ":", "\n", "            ", "path_idxs_0", "=", "all_idxs_0", "[", "k", "]", "\n", "path_idxs_1", "=", "all_idxs_1", "[", "k", "]", "\n", "if", "k", "in", "all_idxs_2", ":", "\n", "                ", "path_idxs_2", "=", "all_idxs_2", "[", "k", "]", "\n", "", "if", "k", "in", "all_idxs_3", ":", "\n", "                ", "path_idxs_3", "=", "all_idxs_3", "[", "k", "]", "\n", "", "path_encoding", "=", "np", ".", "zeros", "(", "(", "total_len", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "vp", "in", "path_idxs_0", ":", "\n", "                ", "path_encoding", "[", "c_0_mapping", "[", "vp", "]", "]", "=", "1", "\n", "", "for", "vp", "in", "path_idxs_1", ":", "\n", "                ", "path_encoding", "[", "total_0", "+", "c_1_mapping", "[", "vp", "]", "]", "=", "1", "\n", "", "if", "k", "in", "all_idxs_2", ":", "\n", "                ", "for", "vp", "in", "path_idxs_2", ":", "\n", "                    ", "path_encoding", "[", "total_0", "+", "total_1", "+", "c_2_mapping", "[", "vp", "]", "]", "=", "1", "\n", "", "", "if", "k", "in", "all_idxs_3", ":", "\n", "                ", "for", "vp", "in", "path_idxs_3", ":", "\n", "                    ", "path_encoding", "[", "total_0", "+", "total_1", "+", "total_2", "+", "c_3_mapping", "[", "vp", "]", "]", "=", "1", "\n", "\n", "", "", "v", "[", "3", "]", "=", "path_encoding", "\n", "all_data", "[", "k", "]", "=", "v", "\n", "", "return", "all_data", ",", "c_0_mapping", ",", "c_1_mapping", ",", "c_2_mapping", ",", "c_3_mapping", ",", "total_0", ",", "total_1", ",", "total_2", ",", "total_len", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.add_dummy_nodes": [[351, 376], ["numpy.zeros", "ops_dummy.extend", "range", "enumerate", "ops_dummy.append", "len", "len", "ops_dummy.append", "range", "ops_dummy.append", "adj_matrix.copy", "list", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "add_dummy_nodes", "(", "self", ",", "adj_matrix", ",", "ops", ",", "input_nodes", ",", "output_nodes", ")", ":", "\n", "        ", "node_shape", "=", "adj_matrix", ".", "shape", "[", "0", "]", "\n", "if", "node_shape", "==", "ADJ_SIZE", ":", "\n", "            ", "return", "adj_matrix", ".", "copy", "(", ")", ",", "list", "(", "ops", ")", "\n", "", "input_num", ",", "output_num", "=", "len", "(", "input_nodes", ")", ",", "len", "(", "output_nodes", ")", "\n", "prefix_counts", "=", "node_shape", "-", "output_num", "-", "1", "\n", "output_indice", "=", "[", "prefix_counts", "+", "i", "for", "i", "in", "range", "(", "output_num", ")", "]", "\n", "padding_nums", "=", "ADJ_SIZE", "-", "node_shape", "\n", "adj_matrix_dummy", "=", "np", ".", "zeros", "(", "shape", "=", "(", "ADJ_SIZE", ",", "ADJ_SIZE", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "ops_dummy", "=", "[", "]", "\n", "adj_matrix_dummy", "[", ":", "prefix_counts", ",", ":", "prefix_counts", "]", "=", "adj_matrix", "[", ":", "prefix_counts", ",", ":", "prefix_counts", "]", "\n", "ops_dummy", ".", "extend", "(", "ops", "[", ":", "prefix_counts", "]", ")", "\n", "for", "i", "in", "range", "(", "padding_nums", ")", ":", "\n", "            ", "adj_matrix_dummy", "[", "0", ",", "i", "+", "prefix_counts", "]", "=", "1", "\n", "ops_dummy", ".", "append", "(", "'isolated'", ")", "\n", "", "adj_dummy_idx", "=", "prefix_counts", "+", "padding_nums", "\n", "for", "idx", ",", "idx_idx", "in", "enumerate", "(", "output_indice", ")", ":", "\n", "            ", "col_idx", "=", "adj_dummy_idx", "+", "idx", "\n", "for", "j", "in", "range", "(", "node_shape", ")", ":", "\n", "                ", "if", "adj_matrix", "[", "j", ",", "idx_idx", "]", "==", "1", ":", "\n", "                    ", "adj_matrix_dummy", "[", "j", ",", "col_idx", "]", "=", "1", "\n", "", "", "ops_dummy", ".", "append", "(", "ops", "[", "idx_idx", "]", ")", "\n", "adj_matrix_dummy", "[", "col_idx", ",", "-", "1", "]", "=", "1", "\n", "", "ops_dummy", ".", "append", "(", "'output'", ")", "\n", "return", "adj_matrix_dummy", ",", "ops_dummy", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.arch2dag": [[377, 409], ["networkx.DiGraph", "cls.sort_keys", "cls.get_inputs_outputs", "cls.get_total_inputs", "networkx.DiGraph.add_node", "op_list.extend", "op_list.append", "cls.get_total_inputs.append", "numpy.array", "list", "networkx.DiGraph.add_node", "networkx.adjacency_matrix().todense", "len", "recepie.keys", "op_list.append", "networkx.DiGraph.add_edge", "networkx.DiGraph.add_edge", "output_list.append", "op_list.append", "networkx.adjacency_matrix"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.sort_keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.get_inputs_outputs", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.get_total_inputs", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "@", "classmethod", "\n", "def", "arch2dag", "(", "cls", ",", "recepie", ")", ":", "\n", "        ", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "keys", "=", "cls", ".", "sort_keys", "(", "list", "(", "recepie", ".", "keys", "(", ")", ")", ")", "\n", "input_nodes", ",", "output_nodes", "=", "cls", ".", "get_inputs_outputs", "(", "recepie", ")", "\n", "total_keys", "=", "cls", ".", "get_total_inputs", "(", "recepie", ",", "output_nodes", ")", "\n", "op_list", "=", "[", "]", "\n", "output_list", "=", "[", "]", "\n", "# add nodes", "\n", "for", "k", "in", "total_keys", ":", "\n", "            ", "G", ".", "add_node", "(", "k", ")", "\n", "if", "k", "in", "input_nodes", ":", "\n", "                ", "op_list", ".", "append", "(", "'input'", ")", "\n", "", "elif", "k", "in", "output_nodes", ":", "\n", "                ", "output_list", ".", "append", "(", "recepie", "[", "k", "]", "[", "'op'", "]", ")", "\n", "", "else", ":", "\n", "                ", "op_list", ".", "append", "(", "recepie", "[", "k", "]", "[", "'op'", "]", ")", "\n", "", "", "G", ".", "add_node", "(", "'output'", ")", "\n", "op_list", ".", "extend", "(", "output_list", ")", "\n", "op_list", ".", "append", "(", "'output'", ")", "\n", "total_keys", ".", "append", "(", "'output'", ")", "\n", "\n", "# add link", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "for", "input_k", "in", "recepie", "[", "k", "]", "[", "'input'", "]", ":", "\n", "                ", "G", ".", "add_edge", "(", "input_k", ",", "k", ",", "label", "=", "recepie", "[", "k", "]", "[", "'op'", "]", ")", "\n", "", "if", "k", "in", "output_nodes", ":", "\n", "                ", "G", ".", "add_edge", "(", "k", ",", "'output'", ")", "\n", "\n", "", "", "adj", "=", "np", ".", "array", "(", "nx", ".", "adjacency_matrix", "(", "G", ",", "nodelist", "=", "total_keys", ")", ".", "todense", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "adj", ".", "shape", "[", "0", "]", "==", "len", "(", "op_list", ")", ",", "'The adj and operations are not consistence'", "\n", "return", "adj", ",", "op_list", ",", "input_nodes", ",", "output_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.sort_keys": [[410, 438], ["len", "len", "sorted_keys.append", "sorted_keys.append", "sorted_keys.append", "sorted_keys.append", "sorted_keys.append", "sorted_keys.append", "sorted_keys.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "sort_keys", "(", "cls", ",", "input_keys", ",", "output_nodes", "=", "None", ")", ":", "\n", "        ", "sorted_keys", "=", "[", "]", "\n", "if", "output_nodes", ":", "\n", "            ", "for", "k", "in", "INPUT_NODES", ":", "\n", "                ", "if", "k", "in", "input_keys", ":", "\n", "                    ", "sorted_keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "MIDDLE_NODES", ":", "\n", "                ", "if", "k", "in", "input_keys", ":", "\n", "                    ", "sorted_keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "OUTPUT_NODES", ":", "\n", "                ", "if", "k", "in", "input_keys", "and", "k", "not", "in", "output_nodes", ":", "\n", "                    ", "sorted_keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "OUTPUT_NODES", ":", "\n", "                ", "if", "k", "in", "input_keys", "and", "k", "in", "output_nodes", ":", "\n", "                    ", "sorted_keys", ".", "append", "(", "k", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "k", "in", "INPUT_NODES", ":", "\n", "                ", "if", "k", "in", "input_keys", ":", "\n", "                    ", "sorted_keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "MIDDLE_NODES", ":", "\n", "                ", "if", "k", "in", "input_keys", ":", "\n", "                    ", "sorted_keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "OUTPUT_NODES", ":", "\n", "                ", "if", "k", "in", "input_keys", ":", "\n", "                    ", "sorted_keys", ".", "append", "(", "k", ")", "\n", "", "", "", "assert", "len", "(", "input_keys", ")", "==", "len", "(", "sorted_keys", ")", ",", "'inconsistent in the two keys size'", "\n", "return", "sorted_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.get_total_inputs": [[439, 446], ["cls.sort_keys", "total_nodes.append", "total_nodes.extend", "list", "set"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.sort_keys"], ["", "@", "classmethod", "\n", "def", "get_total_inputs", "(", "cls", ",", "recepie", ",", "output_nodes", ")", ":", "\n", "        ", "total_nodes", "=", "[", "]", "\n", "for", "k", "in", "recepie", ":", "\n", "            ", "total_nodes", ".", "append", "(", "k", ")", "\n", "total_nodes", ".", "extend", "(", "recepie", "[", "k", "]", "[", "'input'", "]", ")", "\n", "", "return", "cls", ".", "sort_keys", "(", "list", "(", "set", "(", "total_nodes", ")", ")", ",", "output_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.get_inputs_outputs": [[447, 464], ["list", "recepie.keys", "total_inputs.extend", "outputs.append", "inputs.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "@", "classmethod", "\n", "def", "get_inputs_outputs", "(", "cls", ",", "recepie", ")", ":", "\n", "        ", "total_inputs", "=", "[", "]", "\n", "op_keys", "=", "list", "(", "recepie", ".", "keys", "(", ")", ")", "\n", "inputs", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "k", "in", "recepie", ":", "\n", "            ", "total_inputs", ".", "extend", "(", "recepie", "[", "k", "]", "[", "'input'", "]", ")", "\n", "", "for", "ko", "in", "recepie", ":", "\n", "            ", "if", "ko", "not", "in", "total_inputs", ":", "\n", "                ", "outputs", ".", "append", "(", "ko", ")", "\n", "", "", "for", "ki", "in", "total_inputs", ":", "\n", "            ", "if", "ki", "not", "in", "op_keys", ":", "\n", "                ", "inputs", ".", "append", "(", "ki", ")", "\n", "", "", "inputs_order", "=", "[", "ks", "for", "ks", "in", "INPUT_NODES", "if", "ks", "in", "inputs", "]", "\n", "outputs_order", "=", "[", "ks", "for", "ks", "in", "OUTPUT_NODES", "if", "ks", "in", "outputs", "]", "\n", "return", "inputs_order", ",", "outputs_order", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.exam_nodes": [[465, 475], ["list", "recepie.items", "recepie.keys", "input_keys.extend", "list.remove"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "def", "exam_nodes", "(", "self", ",", "recepie", ")", ":", "\n", "        ", "keys", "=", "list", "(", "recepie", ".", "keys", "(", ")", ")", "\n", "input_keys", "=", "[", "]", "\n", "for", "_", ",", "v", "in", "recepie", ".", "items", "(", ")", ":", "\n", "            ", "input_node", "=", "v", "[", "'input'", "]", "\n", "input_keys", ".", "extend", "(", "input_node", ")", "\n", "", "for", "kr", "in", "input_keys", ":", "\n", "            ", "if", "kr", "in", "keys", ":", "\n", "                ", "keys", ".", "remove", "(", "kr", ")", "\n", "", "", "return", "input_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.adj_ops_encoding": [[476, 489], ["numpy.zeros", "range", "range", "tuple", "range", "OPS_LIST.index", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "adj_ops_encoding", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "encoding_length", "=", "(", "ADJ_SIZE", "**", "2", "-", "ADJ_SIZE", ")", "//", "2", "+", "ADJ_SIZE", "*", "len", "(", "OPS_LIST", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_SIZE", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "ADJ_SIZE", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "ADJ_SIZE", ")", ":", "\n", "            ", "op_idx", "=", "OPS_LIST", ".", "index", "(", "ops", "[", "i", "]", ")", "\n", "encoding", "[", "n", "+", "op_idx", "]", "=", "1", "\n", "n", "+=", "len", "(", "OPS_LIST", ")", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.get_paths": [[490, 507], ["collections.defaultdict", "ops.count", "enumerate", "range", "range", "range", "collections.defaultdict.items", "paths_dict[].append", "paths_dict[].append", "[].append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count"], ["", "def", "get_paths", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "paths_dict", "=", "defaultdict", "(", "list", ")", "\n", "input_count", "=", "ops", ".", "count", "(", "'input'", ")", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "            ", "if", "op", "==", "'input'", ":", "\n", "                ", "for", "j", "in", "range", "(", "0", ",", "ADJ_SIZE", ")", ":", "\n", "                    ", "paths_dict", "[", "idx", "]", ".", "append", "(", "[", "[", "'input'", "]", "]", ")", "if", "matrix", "[", "idx", "]", "[", "j", "]", "else", "paths_dict", "[", "idx", "]", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "", "", "for", "i", "in", "range", "(", "input_count", ",", "ADJ_SIZE", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "input_count", ",", "ADJ_SIZE", ")", ":", "\n", "                ", "if", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "k", "in", "paths_dict", ":", "\n", "                        ", "for", "path", "in", "paths_dict", "[", "k", "]", "[", "i", "]", ":", "\n", "                            ", "paths_dict", "[", "k", "]", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "", "final_paths_dict", "=", "{", "k", ":", "v", "[", "-", "1", "]", "for", "k", ",", "v", "in", "paths_dict", ".", "items", "(", ")", "}", "\n", "return", "final_paths_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.get_path_indices": [[508, 539], ["data_nasbench_nlp.DataNasBenchNLP.get_paths", "data_nasbench_nlp.DataNasBenchNLP.items", "data_nasbench_nlp.DataNasBenchNLP.items", "path_indices.sort", "tuple", "range", "e2e.remove", "new_path.append", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths"], ["", "def", "get_path_indices", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "paths", "=", "self", ".", "get_paths", "(", "matrix", ",", "ops", ")", "\n", "for", "k", ",", "v", "in", "paths", ".", "items", "(", ")", ":", "\n", "            ", "new_path", "=", "[", "]", "\n", "for", "e2e", "in", "v", ":", "\n", "                ", "if", "'input'", "in", "e2e", ":", "\n", "                    ", "e2e", ".", "remove", "(", "'input'", ")", "\n", "new_path", ".", "append", "(", "e2e", ")", "\n", "", "", "paths", "[", "k", "]", "=", "new_path", "\n", "", "mapping", "=", "{", "'linear'", ":", "0", ",", "\n", "'activation_sigm'", ":", "1", ",", "\n", "'activation_tanh'", ":", "2", ",", "\n", "'elementwise_sum'", ":", "3", ",", "\n", "'elementwise_prod'", ":", "4", ",", "\n", "'activation_leaky_relu'", ":", "5", ",", "\n", "'blend'", ":", "6", "\n", "}", "\n", "path_indices_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "paths", ".", "items", "(", ")", ":", "\n", "            ", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "v", ":", "\n", "                ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_SIZE", "-", "1", ")", ":", "\n", "                    ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                        ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "index", "+=", "len", "(", "OPS_LIST_ENCODING", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "path_indices", ".", "sort", "(", ")", "\n", "path_indices_dict", "[", "k", "]", "=", "tuple", "(", "path_indices", ")", "\n", "", "return", "path_indices_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.path_based_encoding": [[540, 543], ["data_nasbench_nlp.DataNasBenchNLP.get_path_indices"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices"], ["", "def", "path_based_encoding", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "path_indices", "=", "self", ".", "get_path_indices", "(", "matrix", ",", "ops", ")", "\n", "return", "path_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.path_based_mapping_encoding": [[544, 572], ["data_nasbench_nlp.DataNasBenchNLP.get_path_indices", "numpy.zeros", "len", "len", "len", "len", "print", "print", "print", "print", "list", "data_nasbench_nlp.DataNasBenchNLP.c_2_mapping.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "def", "path_based_mapping_encoding", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "path_indices", "=", "self", ".", "get_path_indices", "(", "matrix", ",", "ops", ")", "\n", "path_idxs_0", "=", "path_indices", "[", "0", "]", "\n", "path_idxs_1", "=", "path_indices", "[", "1", "]", "\n", "if", "len", "(", "path_indices", ")", ">=", "3", ":", "\n", "            ", "path_idxs_2", "=", "path_indices", "[", "2", "]", "\n", "", "if", "len", "(", "path_indices", ")", ">=", "4", ":", "\n", "            ", "path_idxs_3", "=", "path_indices", "[", "3", "]", "\n", "", "path_encoding", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_len", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "vp", "in", "path_idxs_0", ":", "\n", "            ", "path_encoding", "[", "self", ".", "c_0_mapping", "[", "vp", "]", "]", "=", "1", "\n", "", "for", "vp", "in", "path_idxs_1", ":", "\n", "            ", "path_encoding", "[", "self", ".", "total_0", "+", "self", ".", "c_1_mapping", "[", "vp", "]", "]", "=", "1", "\n", "", "if", "len", "(", "path_indices", ")", ">=", "3", ":", "\n", "            ", "for", "vp", "in", "path_idxs_2", ":", "\n", "                ", "if", "vp", "not", "in", "path_idxs_2", ":", "\n", "                    ", "print", "(", "'-------------'", "*", "10", ")", "\n", "print", "(", "list", "(", "self", ".", "c_2_mapping", ".", "keys", "(", ")", ")", ")", "\n", "print", "(", "vp", ")", "\n", "print", "(", "'-------------'", "*", "10", ")", "\n", "continue", "\n", "", "total_2_idx", "=", "self", ".", "c_2_mapping", "[", "vp", "]", "\n", "path_encoding", "[", "self", ".", "total_0", "+", "self", ".", "total_1", "+", "total_2_idx", "]", "=", "1", "\n", "", "", "if", "len", "(", "path_indices", ")", ">=", "4", ":", "\n", "            ", "for", "vp", "in", "path_idxs_3", ":", "\n", "                ", "total_3_idx", "=", "self", ".", "c_3_mapping", "[", "vp", "]", "\n", "path_encoding", "[", "self", ".", "total_0", "+", "self", ".", "total_1", "+", "self", ".", "total_2", "+", "total_3_idx", "]", "=", "1", "\n", "", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.nasbench2graph2": [[573, 588], ["torch.zeros", "int", "torch.zeros", "range", "len", "numpy.sum", "OPS_LIST.index", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "nasbench2graph2", "(", "self", ",", "data", ")", ":", "\n", "        ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "ADJ_SIZE", ",", "len", "(", "OPS_LIST", ")", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_SIZE", ")", ":", "\n", "            ", "idx", "=", "OPS_LIST", ".", "index", "(", "ops", "[", "i", "]", ")", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "ADJ_SIZE", ")", ":", "\n", "                ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.get_arch_list": [[589, 647], ["pickle.load", "open", "print", "data_nasbench_nlp.DataNasBenchNLP.path_based_encoding", "data_nasbench_nlp.DataNasBenchNLP.items", "range", "len", "range", "tuple.extend", "range", "data_nasbench_nlp.DataNasBenchNLP.get_path_indices", "data_nasbench_nlp.DataNasBenchNLP.items", "tuple", "tuple", "data_nasbench_nlp.DataNasBenchNLP.mutate", "data_nasbench_nlp.DataNasBenchNLP.get_path_indices", "data_nasbench_nlp.DataNasBenchNLP.items", "tuple", "data_nasbench_nlp.DataNasBenchNLP.generate_random_dataset", "tuple.extend", "new_arch_list.append", "tuple.extend", "new_arch_list.append", "min", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.path_based_encoding", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset"], ["", "def", "get_arch_list", "(", "self", ",", "\n", "aux_file_path", ",", "\n", "distance", "=", "None", ",", "\n", "iteridx", "=", "0", ",", "\n", "num_top_arches", "=", "5", ",", "\n", "max_edits", "=", "20", ",", "\n", "num_repeats", "=", "5", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "verbose", "=", "0", ")", ":", "\n", "# Method used for gp_bayesopt", "\n", "# load the list of architectures chosen by bayesopt so far", "\n", "        ", "base_arch_list", "=", "pickle", ".", "load", "(", "open", "(", "aux_file_path", ",", "'rb'", ")", ")", "\n", "top_arches", "=", "[", "archtuple", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "num_top_arches", "]", "]", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "[", "archtuple", "[", "1", "]", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "min", "(", "5", ",", "len", "(", "base_arch_list", ")", ")", "]", "]", "\n", "print", "(", "'top 5 val losses {}'", ".", "format", "(", "top_5_loss", ")", ")", "\n", "\n", "# perturb the best k architectures", "\n", "", "dic", "=", "{", "}", "\n", "for", "archtuple", "in", "base_arch_list", ":", "\n", "            ", "path_dict", "=", "self", ".", "path_based_encoding", "(", "matrix", "=", "archtuple", "[", "0", "]", "[", "1", "]", ",", "ops", "=", "archtuple", "[", "0", "]", "[", "2", "]", ")", "\n", "path_indices", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "path_dict", ".", "items", "(", ")", ":", "\n", "                ", "temp_p", "=", "[", "k", ",", "*", "v", "]", "\n", "path_indices", ".", "extend", "(", "temp_p", ")", "\n", "", "dic", "[", "tuple", "(", "path_indices", ")", "]", "=", "1", "\n", "\n", "", "new_arch_list", "=", "[", "]", "\n", "for", "arch", "in", "top_arches", ":", "\n", "            ", "for", "edits", "in", "range", "(", "1", ",", "max_edits", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "num_repeats", ")", ":", "\n", "#perturbation = Cell(**arch).perturb(self.nasbench, edits)", "\n", "                    ", "perturbation", "=", "self", ".", "mutate", "(", "arch", "[", "0", "]", ",", "mutate_rate", "=", "edits", ",", "by_distance", "=", "True", ",", "arch2list", "=", "True", ")", "\n", "path_dict", "=", "self", ".", "get_path_indices", "(", "matrix", "=", "perturbation", "[", "1", "]", ",", "ops", "=", "perturbation", "[", "2", "]", ")", "\n", "path_indices", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "path_dict", ".", "items", "(", ")", ":", "\n", "                        ", "temp_p", "=", "[", "k", ",", "*", "v", "]", "\n", "path_indices", ".", "extend", "(", "temp_p", ")", "\n", "", "path_indices", "=", "tuple", "(", "path_indices", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "[", "perturbation", "[", "6", "]", ",", "perturbation", "[", "1", "]", ",", "perturbation", "[", "2", "]", "]", ")", "\n", "\n", "# make sure new_arch_list is not empty", "\n", "", "", "", "", "while", "len", "(", "new_arch_list", ")", "==", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "                ", "random_arch", "=", "self", ".", "generate_random_dataset", "(", "num", "=", "1", ",", "allow_isomorphisms", "=", "False", ")", "[", "0", "]", "\n", "path_dict", "=", "self", ".", "get_path_indices", "(", "matrix", "=", "random_arch", "[", "1", "]", ",", "ops", "=", "random_arch", "[", "2", "]", ")", "\n", "path_indices", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "path_dict", ".", "items", "(", ")", ":", "\n", "                    ", "temp_p", "=", "[", "k", ",", "*", "v", "]", "\n", "path_indices", ".", "extend", "(", "temp_p", ")", "\n", "", "path_indices", "=", "tuple", "(", "path_indices", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "[", "random_arch", "[", "6", "]", ",", "random_arch", "[", "1", "]", ",", "random_arch", "[", "2", "]", "]", ")", "\n", "\n", "", "", "", "return", "new_arch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.DataNasBenchNLP.generate_distance_matrix": [[648, 660], ["numpy.zeros", "enumerate", "enumerate", "len", "len", "data_nasbench_nlp.adj_distance", "data_nasbench_nlp.nasbot_distance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.nasbot_distance"], ["", "@", "classmethod", "\n", "def", "generate_distance_matrix", "(", "cls", ",", "arches_1", ",", "arches_2", ",", "distance", ")", ":", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "[", "len", "(", "arches_1", ")", ",", "len", "(", "arches_2", ")", "]", ")", "\n", "for", "i", ",", "arch_1", "in", "enumerate", "(", "arches_1", ")", ":", "\n", "            ", "for", "j", ",", "arch_2", "in", "enumerate", "(", "arches_2", ")", ":", "\n", "                ", "if", "distance", "==", "'adj'", ":", "\n", "                    ", "matrix", "[", "i", "]", "[", "j", "]", "=", "adj_distance", "(", "arch_1", ",", "arch_2", ")", "\n", "", "elif", "distance", "==", "'nasbot'", ":", "\n", "                    ", "matrix", "[", "i", "]", "[", "j", "]", "=", "nasbot_distance", "(", "arch_1", ",", "arch_2", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Distance {distance} does not support at present!'", ")", "\n", "", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.adj_distance": [[662, 666], ["numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "adj_distance", "(", "cell_1", ",", "cell_2", ")", ":", "\n", "    ", "graph_dist", "=", "np", ".", "sum", "(", "cell_1", "[", "1", "]", "!=", "cell_2", "[", "1", "]", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "cell_1", "[", "2", "]", "!=", "cell_2", "[", "2", "]", ")", "\n", "return", "graph_dist", "+", "ops_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.nasbot_distance": [[668, 689], ["sorted", "sorted", "sorted", "sorted", "numpy.sum", "numpy.sum", "numpy.sum", "cell_1_matrix.sum", "cell_1_matrix.sum", "cell_2_matrix.sum", "cell_2_matrix.sum", "numpy.abs", "numpy.abs", "cell_1_ops.count", "cell_2_ops.count", "numpy.abs", "numpy.subtract", "numpy.subtract", "numpy.subtract"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count"], ["", "def", "nasbot_distance", "(", "cell_1", ",", "cell_2", ")", ":", "\n", "# distance based on optimal transport between row sums, column sums, and ops", "\n", "\n", "    ", "cell_1_matrix", ",", "cell_1_ops", "=", "cell_1", "[", "1", "]", ",", "cell_1", "[", "2", "]", "\n", "cell_2_matrix", ",", "cell_2_ops", "=", "cell_2", "[", "1", "]", ",", "cell_2", "[", "2", "]", "\n", "\n", "cell_1_row_sums", "=", "sorted", "(", "cell_1_matrix", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "cell_1_col_sums", "=", "sorted", "(", "cell_1_matrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "cell_2_row_sums", "=", "sorted", "(", "cell_2_matrix", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "cell_2_col_sums", "=", "sorted", "(", "cell_2_matrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "row_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_row_sums", ",", "cell_2_row_sums", ")", ")", ")", "\n", "col_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_col_sums", ",", "cell_2_col_sums", ")", ")", ")", "\n", "\n", "cell_1_counts", "=", "[", "cell_1_ops", ".", "count", "(", "op", ")", "for", "op", "in", "OPS_LIST", "]", "\n", "cell_2_counts", "=", "[", "cell_2_ops", ".", "count", "(", "op", ")", "for", "op", "in", "OPS_LIST", "]", "\n", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_counts", ",", "cell_2_counts", ")", ")", ")", "\n", "\n", "return", "row_dist", "+", "col_dist", "+", "ops_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.get_paths": [[691, 709], ["collections.defaultdict", "ops.count", "enumerate", "range", "range", "range", "collections.defaultdict.items", "paths_dict[].append", "paths_dict[].append", "[].append"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count"], ["", "def", "get_paths", "(", "matrix", ",", "ops", ")", ":", "\n", "    ", "ADJ_SIZE", "=", "matrix", ".", "shape", "[", "0", "]", "\n", "paths_dict", "=", "defaultdict", "(", "list", ")", "\n", "input_count", "=", "ops", ".", "count", "(", "'input'", ")", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "if", "op", "==", "'input'", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "ADJ_SIZE", ")", ":", "\n", "                ", "paths_dict", "[", "idx", "]", ".", "append", "(", "[", "[", "'input'", "]", "]", ")", "if", "matrix", "[", "idx", "]", "[", "j", "]", "else", "paths_dict", "[", "idx", "]", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "", "", "for", "i", "in", "range", "(", "input_count", ",", "ADJ_SIZE", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "input_count", ",", "ADJ_SIZE", ")", ":", "\n", "            ", "if", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "for", "k", "in", "paths_dict", ":", "\n", "                    ", "for", "path", "in", "paths_dict", "[", "k", "]", "[", "i", "]", ":", "\n", "                        ", "paths_dict", "[", "k", "]", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "", "final_paths_dict", "=", "{", "k", ":", "v", "[", "-", "1", "]", "for", "k", ",", "v", "in", "paths_dict", ".", "items", "(", ")", "}", "\n", "return", "final_paths_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_nlp.add_dummy_nodes": [[711, 736], ["numpy.zeros", "ops_dummy.extend", "range", "enumerate", "ops_dummy.append", "len", "len", "ops_dummy.append", "range", "ops_dummy.append", "adj_matrix.copy", "list", "range"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "add_dummy_nodes", "(", "adj_matrix", ",", "ops", ",", "input_nodes", ",", "output_nodes", ")", ":", "\n", "    ", "node_shape", "=", "adj_matrix", ".", "shape", "[", "0", "]", "\n", "if", "node_shape", "==", "ADJ_SIZE", ":", "\n", "        ", "return", "adj_matrix", ".", "copy", "(", ")", ",", "list", "(", "ops", ")", "\n", "", "input_num", ",", "output_num", "=", "len", "(", "input_nodes", ")", ",", "len", "(", "output_nodes", ")", "\n", "prefix_counts", "=", "node_shape", "-", "output_num", "-", "1", "\n", "output_indice", "=", "[", "prefix_counts", "+", "i", "for", "i", "in", "range", "(", "output_num", ")", "]", "\n", "padding_nums", "=", "ADJ_SIZE", "-", "node_shape", "\n", "adj_matrix_dummy", "=", "np", ".", "zeros", "(", "shape", "=", "(", "ADJ_SIZE", ",", "ADJ_SIZE", ")", ",", "dtype", "=", "adj_matrix", ".", "dtype", ")", "\n", "ops_dummy", "=", "[", "]", "\n", "adj_matrix_dummy", "[", ":", "prefix_counts", ",", ":", "prefix_counts", "]", "=", "adj_matrix", "[", ":", "prefix_counts", ",", ":", "prefix_counts", "]", "\n", "ops_dummy", ".", "extend", "(", "ops", "[", ":", "prefix_counts", "]", ")", "\n", "for", "i", "in", "range", "(", "padding_nums", ")", ":", "\n", "        ", "adj_matrix_dummy", "[", "0", ",", "i", "+", "prefix_counts", "]", "=", "1", "\n", "ops_dummy", ".", "append", "(", "'isolated'", ")", "\n", "", "adj_dummy_idx", "=", "prefix_counts", "+", "padding_nums", "\n", "for", "idx", ",", "idx_idx", "in", "enumerate", "(", "output_indice", ")", ":", "\n", "        ", "col_idx", "=", "adj_dummy_idx", "+", "idx", "\n", "for", "j", "in", "range", "(", "node_shape", ")", ":", "\n", "            ", "if", "adj_matrix", "[", "j", ",", "idx_idx", "]", "==", "1", ":", "\n", "                ", "adj_matrix_dummy", "[", "j", ",", "col_idx", "]", "=", "1", "\n", "", "", "ops_dummy", ".", "append", "(", "ops", "[", "idx_idx", "]", ")", "\n", "adj_matrix_dummy", "[", "col_idx", ",", "-", "1", "]", "=", "1", "\n", "", "ops_dummy", ".", "append", "(", "'output'", ")", "\n", "return", "adj_matrix_dummy", ",", "ops_dummy", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.__init__": [[21, 26], ["data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.load_dates", "list", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.total_archs.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.load_dates", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "'nasbench_asr'", "\n", "self", ".", "total_archs", ",", "self", ".", "all_datas_dict", ",", "self", ".", "all_datas_key_arch", ",", "self", ".", "all_datas_arch_key", ",", "self", ".", "c_mapping", ",", "self", ".", "total_len", "=", "self", ".", "load_dates", "(", ")", "\n", "self", ".", "total_keys", "=", "list", "(", "self", ".", "total_archs", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset": [[27, 55], ["random.sample", "key_list.append", "tuple", "data.append", "len"], "methods", ["None"], ["", "def", "generate_random_dataset", "(", "self", ",", "num", ",", "allow_isomorphisms", ",", "deterministic_loss", "=", "None", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "key_list", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "k", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "\n", "key_list", ".", "append", "(", "k", "[", "0", "]", ")", "\n", "arch", "=", "self", ".", "total_archs", "[", "k", "[", "0", "]", "]", "\n", "path_encoding1", "=", "arch", "[", "3", "]", "\n", "path_encoding2", "=", "arch", "[", "-", "1", "]", "\n", "path_indices", "=", "tuple", "(", "path_encoding1", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "\n", "(", "\n", "arch", "[", "0", "]", ",", "\n", "arch", "[", "1", "]", ",", "\n", "arch", "[", "2", "]", ",", "\n", "path_encoding1", ",", "\n", "arch", "[", "4", "]", ",", "\n", "arch", "[", "5", "]", ",", "\n", "arch", "[", "6", "]", ",", "\n", "path_encoding2", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "data", ")", "==", "num", ":", "\n", "                ", "break", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate": [[56, 129], ["list", "random.randint", "random.randint", "map", "copy.deepcopy", "tuple", "float", "random.randint", "random.choice", "OPS_LIST.index", "random.randint", "list", "random.choice", "OPS_LIST.index", "random.randint", "map", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "mutate", "(", "self", ",", "arch_str", ",", "mutate_rate", "=", "1", ")", ":", "\n", "        ", "arch_list", "=", "self", ".", "all_datas_key_arch", "[", "arch_str", "]", "\n", "arch_list", "=", "list", "(", "map", "(", "list", ",", "arch_list", ")", ")", "\n", "which_part", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "which_part_2", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "while", "True", ":", "\n", "            ", "child_arch", "=", "deepcopy", "(", "arch_list", ")", "\n", "mutate_prob", "=", "float", "(", "mutate_rate", ")", "/", "(", "NUM_OPS", "-", "5", ")", "\n", "# if mutate_rate == -1 or which_part == 0:", "\n", "# if np.random.rand() < mutate_prob:", "\n", "if", "True", ":", "\n", "# if which_part == 1 or which_part_2 == 1:", "\n", "                ", "block_op", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "xop", "=", "random", ".", "choice", "(", "OPS_LIST", ")", "\n", "xop_idx", "=", "OPS_LIST", ".", "index", "(", "xop", ")", "\n", "while", "xop_idx", "==", "child_arch", "[", "block_op", "]", "[", "0", "]", ":", "\n", "                    ", "xop", "=", "random", ".", "choice", "(", "OPS_LIST", ")", "\n", "xop_idx", "=", "OPS_LIST", ".", "index", "(", "xop", ")", "\n", "", "child_arch", "[", "block_op", "]", "[", "0", "]", "=", "xop_idx", "\n", "\n", "block_conn", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "if", "block_conn", "==", "0", ":", "\n", "                    ", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "while", "op_idx", "==", "child_arch", "[", "0", "]", "[", "1", "]", ":", "\n", "                        ", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "", "child_arch", "[", "0", "]", "[", "1", "]", "=", "op_idx", "\n", "", "elif", "block_conn", "==", "1", ":", "\n", "                    ", "nested_block_idx", "=", "random", ".", "randint", "(", "1", ",", "2", ")", "\n", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "while", "op_idx", "==", "child_arch", "[", "1", "]", "[", "nested_block_idx", "]", ":", "\n", "                        ", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "", "child_arch", "[", "1", "]", "[", "nested_block_idx", "]", "=", "op_idx", "\n", "", "else", ":", "\n", "                    ", "nested_block_idx", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "while", "op_idx", "==", "child_arch", "[", "2", "]", "[", "nested_block_idx", "]", ":", "\n", "                        ", "op_idx", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "", "child_arch", "[", "2", "]", "[", "nested_block_idx", "]", "=", "op_idx", "\n", "# elif which_part == 1 and which_part_2 == 0:", "\n", "#     block_op = random.randint(0, 2)", "\n", "#     xop = random.choice(OPS_LIST)", "\n", "#     xop_idx = OPS_LIST.index(xop)", "\n", "#     while xop_idx == child_arch[block_op][0]:", "\n", "#         xop = random.choice(OPS_LIST)", "\n", "#         xop_idx = OPS_LIST.index(xop)", "\n", "#     child_arch[block_op][0] = xop_idx", "\n", "# elif which_part == 0 and which_part_2 == 1:", "\n", "#     block_conn = random.randint(0, 2)", "\n", "#     if block_conn == 0:", "\n", "#         op_idx = random.randint(0, 1)", "\n", "#         while op_idx == child_arch[0][1]:", "\n", "#             op_idx = random.randint(0, 1)", "\n", "#         child_arch[0][1] = op_idx", "\n", "#     elif block_conn == 1:", "\n", "#         nested_block_idx = random.randint(1, 2)", "\n", "#         op_idx = random.randint(0, 1)", "\n", "#         while op_idx == child_arch[1][nested_block_idx]:", "\n", "#             op_idx = random.randint(0, 1)", "\n", "#         child_arch[1][nested_block_idx] = op_idx", "\n", "#     else:", "\n", "#         nested_block_idx = random.randint(1, 3)", "\n", "#         op_idx = random.randint(0, 1)", "\n", "#         while op_idx == child_arch[2][nested_block_idx]:", "\n", "#             op_idx = random.randint(0, 1)", "\n", "#         child_arch[2][nested_block_idx] = op_idx", "\n", "# mutate_prob_p2 = float(mutate_rate) / (NUM_OPS - 5)", "\n", "# if mutate_rate == -1 or which_part == 1:", "\n", "# if np.random.rand() < mutate_prob:", "\n", "# if True:", "\n", "\n", "", "", "child_arch_tuple", "=", "tuple", "(", "list", "(", "map", "(", "tuple", ",", "child_arch", ")", ")", ")", "\n", "if", "child_arch_tuple", "in", "self", ".", "all_datas_arch_key", ":", "\n", "                ", "return", "self", ".", "total_archs", "[", "self", ".", "all_datas_arch_key", "[", "child_arch_tuple", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_candidates": [[130, 180], ["enumerate", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "keys_list.append", "range", "nums_list.append", "mutated_archs_list.append", "len", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "sorted", "data_nasbench_ars_wo_none.adj_distance", "candidates.append", "dist_list.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance"], ["", "", "", "def", "get_candidates", "(", "self", ",", "\n", "data", ",", "\n", "num", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "num_best_arches", "=", "10", ",", "\n", "mutation_rate", "=", "1", ",", "\n", "return_dist", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dist_list", "=", "[", "]", "\n", "replicate_num", "=", "0", "\n", "keys_list", "=", "[", "]", "\n", "nums_list", "=", "[", "]", "\n", "mutated_archs_list", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "path_indices", "=", "self", ".", "get_path_indices", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "keys_list", ".", "append", "(", "d", "[", "6", "]", ")", "\n", "\n", "", "best_arches", "=", "[", "arch", "for", "arch", "in", "sorted", "(", "data", ",", "\n", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "best_arches", ")", ":", "\n", "            ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                ", "break", "\n", "", "nums", "=", "0", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                ", "mutated", "=", "self", ".", "mutate", "(", "arch", "[", "6", "]", ",", "mutate_rate", "=", "mutation_rate", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "mutated", "[", "1", "]", ",", "mutated", "[", "2", "]", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "dist", "=", "adj_distance", "(", "(", "0", ",", "arch", "[", "1", "]", ",", "arch", "[", "2", "]", ")", ",", "(", "0", ",", "mutated", "[", "1", "]", ",", "mutated", "[", "2", "]", ")", ")", "\n", "candidates", ".", "append", "(", "mutated", ")", "\n", "dist_list", ".", "append", "(", "dist", ")", "\n", "if", "mutated", "[", "6", "]", "in", "keys_list", ":", "\n", "                        ", "replicate_num", "+=", "1", "\n", "", "nums", "+=", "1", "\n", "", "", "nums_list", ".", "append", "(", "nums", ")", "\n", "mutated_archs_list", ".", "append", "(", "arch", ")", "\n", "", "if", "return_dist", ":", "\n", "            ", "return", "candidates", "[", ":", "num", "]", ",", "dist_list", "[", ":", "num", "]", ",", "replicate_num", ",", "nums_list", ",", "mutated_archs_list", "\n", "", "else", ":", "\n", "            ", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_arch_info_key": [[181, 183], ["tuple", "list", "map"], "methods", ["None"], ["", "", "def", "get_arch_info_key", "(", "self", ",", "arch_info", ")", ":", "\n", "        ", "return", "tuple", "(", "list", "(", "map", "(", "tuple", ",", "arch_info", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.load_dates": [[184, 230], ["nasbench_asr.dataset.from_folder", "all_datas[].items", "all_datas_key_arch.items", "all_datas_dict.items", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.remapping_path_based_encoding", "min", "total_val_data.index", "print", "data_list.items", "numpy.mean", "numpy.mean", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.arch2dat", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "total_val_data.append", "total_test_data.append", "[].append", "[].append", "numpy.array", "numpy.array", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.adj_ops_encoding", "min", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_arch_info_key"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.from_folder", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.remapping_path_based_encoding", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.arch2dat", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.adj_ops_encoding", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_arch_info_key"], ["", "def", "load_dates", "(", "self", ")", ":", "\n", "        ", "total_arch_data", "=", "{", "}", "\n", "total_val_data", "=", "[", "]", "\n", "total_test_data", "=", "[", "]", "\n", "all_data", "=", "from_folder", "(", "nas_bench_asr_path", ")", "\n", "all_datas", "=", "all_data", ".", "dbs", "\n", "all_datas_dict", "=", "{", "}", "\n", "all_datas_key_arch", "=", "{", "}", "\n", "all_datas_arch_key", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "all_datas", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "all_datas_dict", ":", "\n", "                ", "all_datas_dict", "[", "k", "]", "=", "[", "[", "v", "[", "0", "]", "[", "-", "1", "]", "]", ",", "[", "v", "[", "-", "2", "]", "]", ",", "v", "[", "-", "1", "]", "]", "\n", "all_datas_key_arch", "[", "k", "]", "=", "v", "[", "-", "1", "]", "\n", "all_datas_arch_key", "[", "self", ".", "get_arch_info_key", "(", "v", "[", "-", "1", "]", ")", "]", "=", "k", "\n", "\n", "", "", "for", "data_list", "in", "all_datas", "[", "1", ":", "]", ":", "\n", "            ", "for", "k", ",", "v", "in", "data_list", ".", "items", "(", ")", ":", "\n", "                ", "all_datas_dict", "[", "k", "]", "[", "0", "]", ".", "append", "(", "v", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "all_datas_dict", "[", "k", "]", "[", "1", "]", ".", "append", "(", "v", "[", "-", "2", "]", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "all_datas_key_arch", ".", "items", "(", ")", ":", "\n", "            ", "all_datas_dict", "[", "k", "]", "[", "0", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "all_datas_dict", "[", "k", "]", "[", "0", "]", ")", ")", "\n", "all_datas_dict", "[", "k", "]", "[", "1", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "all_datas_dict", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "all_datas_dict", ".", "items", "(", ")", ":", "\n", "            ", "adj_matrix", ",", "ops", "=", "self", ".", "arch2dat", "(", "v", "[", "-", "1", "]", ")", "\n", "path_based_indices", "=", "self", ".", "get_path_indices", "(", "adj_matrix", ",", "ops", ")", "\n", "data", "=", "[", "\n", "[", "adj_matrix", ",", "ops", "]", ",", "\n", "adj_matrix", ",", "# store adjacency matrix", "\n", "ops", ",", "# store ops list ['input', 'fc', 'output']", "\n", "path_based_indices", ",", "# path based encoding", "\n", "v", "[", "0", "]", "*", "100.", ",", "\n", "v", "[", "1", "]", "*", "100.", ",", "\n", "k", ",", "\n", "self", ".", "adj_ops_encoding", "(", "adj_matrix", ",", "ops", ")", ",", "# store path encoding", "\n", "]", "\n", "total_arch_data", "[", "k", "]", "=", "data", "\n", "total_val_data", ".", "append", "(", "v", "[", "0", "]", "*", "100", ")", "\n", "total_test_data", ".", "append", "(", "v", "[", "1", "]", "*", "100", ")", "\n", "", "total_arch_data", ",", "c_mapping", ",", "total_len", "=", "self", ".", "remapping_path_based_encoding", "(", "total_arch_data", ")", "\n", "min_validate_val", "=", "min", "(", "total_val_data", ")", "\n", "min_val_idx", "=", "total_val_data", ".", "index", "(", "min_validate_val", ")", "\n", "print", "(", "f'min val data value is {min_validate_val}, corr min test data is {total_test_data[min_val_idx]}, '", "\n", "f'and the min test val is {min(total_test_data)}'", ")", "\n", "return", "total_arch_data", ",", "all_datas_dict", ",", "all_datas_key_arch", ",", "all_datas_arch_key", ",", "c_mapping", ",", "total_len", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.remapping_path_based_encoding": [[231, 249], ["dict", "enumerate", "len", "total_arch_data.items", "all_idxs_00.extend", "collections.Counter", "dict.keys", "numpy.zeros", "total_arch_data.items"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "remapping_path_based_encoding", "(", "self", ",", "total_arch_data", ")", ":", "\n", "        ", "all_idxs", "=", "[", "v", "[", "3", "]", "for", "k", ",", "v", "in", "total_arch_data", ".", "items", "(", ")", "]", "\n", "all_idxs_00", "=", "[", "]", "\n", "for", "v", "in", "all_idxs", ":", "\n", "            ", "all_idxs_00", ".", "extend", "(", "v", ")", "\n", "", "c_0_dict", "=", "dict", "(", "Counter", "(", "all_idxs_00", ")", ")", "\n", "c_0_mapping", "=", "{", "}", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "c_0_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "c_0_mapping", "[", "k", "]", "=", "idx", "\n", "", "total_0", "=", "len", "(", "c_0_mapping", ")", "\n", "for", "k", ",", "v", "in", "total_arch_data", ".", "items", "(", ")", ":", "\n", "            ", "path_idxs_0", "=", "v", "[", "3", "]", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "(", "total_0", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "vp", "in", "path_idxs_0", ":", "\n", "                ", "path_encoding", "[", "c_0_mapping", "[", "vp", "]", "]", "=", "1", "\n", "", "v", "[", "3", "]", "=", "path_encoding", "\n", "total_arch_data", "[", "k", "]", "=", "v", "\n", "", "return", "total_arch_data", ",", "c_0_mapping", ",", "total_0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.arch2dat": [[250, 336], ["numpy.zeros", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.remove_isolate_nodes"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.remove_isolate_nodes"], ["", "def", "arch2dat", "(", "self", ",", "arch_info", ")", ":", "\n", "        ", "adj_matrix", "=", "np", ".", "zeros", "(", "(", "ADJ_NODES", ",", "ADJ_NODES", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "node_1_op", "=", "OPS_LIST", "[", "arch_info", "[", "0", "]", "[", "0", "]", "]", "\n", "node_2_op", "=", "OPS_CONN", "[", "arch_info", "[", "0", "]", "[", "1", "]", "]", "\n", "node_3_op", "=", "OPS_CONN", "[", "arch_info", "[", "1", "]", "[", "1", "]", "]", "\n", "node_4_op", "=", "OPS_CONN", "[", "arch_info", "[", "2", "]", "[", "1", "]", "]", "\n", "\n", "node_5_op", "=", "OPS_LIST", "[", "arch_info", "[", "1", "]", "[", "0", "]", "]", "\n", "node_6_op", "=", "OPS_CONN", "[", "arch_info", "[", "1", "]", "[", "2", "]", "]", "\n", "node_7_op", "=", "OPS_CONN", "[", "arch_info", "[", "2", "]", "[", "2", "]", "]", "\n", "\n", "node_8_op", "=", "OPS_LIST", "[", "arch_info", "[", "2", "]", "[", "0", "]", "]", "\n", "node_9_op", "=", "OPS_CONN", "[", "arch_info", "[", "2", "]", "[", "3", "]", "]", "\n", "\n", "ops", "=", "[", "'input'", ",", "node_1_op", ",", "node_2_op", ",", "node_3_op", ",", "node_4_op", ",", "node_5_op", ",", "\n", "node_6_op", ",", "node_7_op", ",", "node_8_op", ",", "node_9_op", ",", "'output'", "]", "\n", "\n", "adj_matrix", "[", "0", ",", "1", "]", "=", "1", "\n", "adj_matrix", "[", "0", ",", "2", "]", "=", "1", "\n", "adj_matrix", "[", "0", ",", "3", "]", "=", "1", "\n", "adj_matrix", "[", "0", ",", "4", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "1", ",", "5", "]", "=", "1", "\n", "adj_matrix", "[", "1", ",", "6", "]", "=", "1", "\n", "adj_matrix", "[", "1", ",", "7", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "2", ",", "5", "]", "=", "1", "\n", "adj_matrix", "[", "2", ",", "6", "]", "=", "1", "\n", "adj_matrix", "[", "2", ",", "7", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "3", ",", "8", "]", "=", "1", "\n", "adj_matrix", "[", "5", ",", "8", "]", "=", "1", "\n", "adj_matrix", "[", "6", ",", "8", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "3", ",", "9", "]", "=", "1", "\n", "adj_matrix", "[", "5", ",", "9", "]", "=", "1", "\n", "adj_matrix", "[", "6", ",", "9", "]", "=", "1", "\n", "\n", "adj_matrix", "[", "4", ",", "10", "]", "=", "1", "\n", "adj_matrix", "[", "7", ",", "10", "]", "=", "1", "\n", "adj_matrix", "[", "8", ",", "10", "]", "=", "1", "\n", "adj_matrix", "[", "9", ",", "10", "]", "=", "1", "\n", "\n", "if", "ops", "[", "1", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "0", ",", "1", "]", "=", "0", "\n", "adj_matrix", "[", "1", ",", "5", "]", "=", "0", "\n", "adj_matrix", "[", "1", ",", "6", "]", "=", "0", "\n", "adj_matrix", "[", "1", ",", "7", "]", "=", "0", "\n", "", "if", "ops", "[", "2", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "0", ",", "2", "]", "=", "0", "\n", "adj_matrix", "[", "2", ",", "5", "]", "=", "0", "\n", "adj_matrix", "[", "2", ",", "6", "]", "=", "0", "\n", "adj_matrix", "[", "2", ",", "7", "]", "=", "0", "\n", "", "if", "ops", "[", "3", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "0", ",", "3", "]", "=", "0", "\n", "adj_matrix", "[", "3", ",", "8", "]", "=", "0", "\n", "adj_matrix", "[", "3", ",", "9", "]", "=", "0", "\n", "", "if", "ops", "[", "4", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "0", ",", "4", "]", "=", "0", "\n", "adj_matrix", "[", "4", ",", "10", "]", "=", "0", "\n", "", "if", "ops", "[", "5", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "1", ",", "5", "]", "=", "0", "\n", "adj_matrix", "[", "2", ",", "5", "]", "=", "0", "\n", "adj_matrix", "[", "5", ",", "8", "]", "=", "0", "\n", "adj_matrix", "[", "5", ",", "9", "]", "=", "0", "\n", "", "if", "ops", "[", "6", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "1", ",", "6", "]", "=", "0", "\n", "adj_matrix", "[", "2", ",", "6", "]", "=", "0", "\n", "adj_matrix", "[", "6", ",", "8", "]", "=", "0", "\n", "adj_matrix", "[", "6", ",", "9", "]", "=", "0", "\n", "", "if", "ops", "[", "7", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "1", ",", "7", "]", "=", "0", "\n", "adj_matrix", "[", "2", ",", "7", "]", "=", "0", "\n", "adj_matrix", "[", "7", ",", "10", "]", "=", "0", "\n", "", "if", "ops", "[", "8", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "8", ",", "10", "]", "=", "0", "\n", "adj_matrix", "[", "3", ",", "8", "]", "=", "0", "\n", "adj_matrix", "[", "5", ",", "8", "]", "=", "0", "\n", "adj_matrix", "[", "6", ",", "8", "]", "=", "0", "\n", "", "if", "ops", "[", "9", "]", "==", "'none'", ":", "\n", "            ", "adj_matrix", "[", "3", ",", "9", "]", "=", "0", "\n", "adj_matrix", "[", "5", ",", "9", "]", "=", "0", "\n", "adj_matrix", "[", "6", ",", "9", "]", "=", "0", "\n", "adj_matrix", "[", "9", ",", "10", "]", "=", "0", "\n", "", "new_adj_matrix", ",", "new_ops", ",", "_", "=", "self", ".", "remove_isolate_nodes", "(", "adj_matrix", ",", "ops", ")", "\n", "return", "new_adj_matrix", ",", "new_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.remove_isolate_nodes": [[337, 348], ["nas_lib.utils.utils_data.find_isolate_node", "enumerate", "new_ops.append", "new_ops.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_data.find_isolate_node"], ["", "def", "remove_isolate_nodes", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "isolate_indices", "=", "[", "idx", "for", "idx", ",", "op", "in", "enumerate", "(", "ops", ")", "if", "op", "==", "'none'", "]", "\n", "isolate_nodes_indices", "=", "find_isolate_node", "(", "matrix", ")", "\n", "assert", "isolate_indices", "==", "isolate_nodes_indices", ",", "'The matrix and ops are not consistent.'", "\n", "new_ops", "=", "[", "]", "\n", "for", "op", "in", "ops", ":", "\n", "            ", "if", "op", "==", "'none'", ":", "\n", "                ", "new_ops", ".", "append", "(", "'isolate'", ")", "\n", "", "else", ":", "\n", "                ", "new_ops", ".", "append", "(", "op", ")", "\n", "", "", "return", "matrix", ",", "new_ops", ",", "isolate_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths": [[349, 364], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "\"\"\"\n        return all paths from input to output\n        \"\"\"", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "ADJ_NODES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "ADJ_NODES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "ADJ_NODES", ")", ":", "\n", "                ", "if", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices": [[365, 384], ["data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths", "tuple", "range", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_paths"], ["", "def", "get_path_indices", "(", "self", ",", "matrix", ",", "ops", ")", ":", "\n", "        ", "paths", "=", "self", ".", "get_paths", "(", "matrix", ",", "ops", ")", "\n", "mapping", "=", "{", "'linear'", ":", "0", ",", "\n", "'conv5'", ":", "1", ",", "\n", "'conv5d2'", ":", "2", ",", "\n", "'conv7'", ":", "3", ",", "\n", "'conv7d2'", ":", "4", ",", "\n", "'skip_connect'", ":", "5", "\n", "}", "\n", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_NODES", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "len", "(", "mapping", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.path_based_encoding": [[385, 391], ["data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "path_based_encoding", "(", "self", ",", "adj_matrix", ",", "ops", ")", ":", "\n", "        ", "path_indices", "=", "self", ".", "get_path_indices", "(", "adj_matrix", ",", "ops", ")", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_len", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "self", ".", "c_mapping", "[", "index", "]", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.adj_ops_encoding": [[392, 405], ["numpy.zeros", "range", "range", "tuple", "range", "OPS_TOTAL.index", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "adj_ops_encoding", "(", "self", ",", "adj_matrix", ",", "ops", ")", ":", "\n", "        ", "encoding_length", "=", "(", "ADJ_NODES", "**", "2", "-", "ADJ_NODES", ")", "//", "2", "+", "ADJ_NODES", "*", "len", "(", "OPS_TOTAL", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_NODES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "ADJ_NODES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "adj_matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "ADJ_NODES", ")", ":", "\n", "            ", "op_idx", "=", "OPS_TOTAL", ".", "index", "(", "ops", "[", "i", "]", ")", "\n", "encoding", "[", "n", "+", "op_idx", "]", "=", "1", "\n", "n", "+=", "len", "(", "OPS_TOTAL", ")", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2": [[406, 421], ["torch.zeros", "int", "torch.zeros", "range", "len", "numpy.sum", "OPS_TOTAL.index", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "nasbench2graph2", "(", "self", ",", "data", ")", ":", "\n", "        ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "ADJ_NODES", ",", "len", "(", "OPS_TOTAL", ")", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "ADJ_NODES", ")", ":", "\n", "            ", "idx", "=", "OPS_TOTAL", ".", "index", "(", "ops", "[", "i", "]", ")", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "ADJ_NODES", ")", ":", "\n", "                ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_arch_list": [[422, 469], ["pickle.load", "open", "print", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.arch2dat", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "range", "len", "range", "range", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "new_arch_list.append", "new_arch_list.append", "min", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.arch2dat", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.mutate", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.get_path_indices", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset"], ["", "def", "get_arch_list", "(", "self", ",", "\n", "aux_file_path", ",", "\n", "distance", "=", "None", ",", "\n", "iteridx", "=", "0", ",", "\n", "num_top_arches", "=", "5", ",", "\n", "max_edits", "=", "20", ",", "\n", "num_repeats", "=", "5", ",", "\n", "random_encoding", "=", "'adj'", ",", "\n", "verbose", "=", "0", ")", ":", "\n", "# Method used for gp_bayesopt", "\n", "\n", "# load the list of architectures chosen by bayesopt so far", "\n", "        ", "base_arch_list", "=", "pickle", ".", "load", "(", "open", "(", "aux_file_path", ",", "'rb'", ")", ")", "\n", "top_arches", "=", "[", "archtuple", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "num_top_arches", "]", "]", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "[", "archtuple", "[", "1", "]", "[", "0", "]", "for", "archtuple", "in", "base_arch_list", "[", ":", "min", "(", "5", ",", "len", "(", "base_arch_list", ")", ")", "]", "]", "\n", "print", "(", "'top 5 val losses {}'", ".", "format", "(", "top_5_loss", ")", ")", "\n", "\n", "# perturb the best k architectures", "\n", "", "dic", "=", "{", "}", "\n", "for", "archtuple", "in", "base_arch_list", ":", "\n", "            ", "arch_list", "=", "self", ".", "all_datas_key_arch", "[", "archtuple", "[", "0", "]", "[", "0", "]", "]", "\n", "matrix", ",", "ops", "=", "self", ".", "arch2dat", "(", "arch_list", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "matrix", ",", "ops", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "new_arch_list", "=", "[", "]", "\n", "for", "arch", "in", "top_arches", ":", "\n", "            ", "for", "edits", "in", "range", "(", "1", ",", "max_edits", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "num_repeats", ")", ":", "\n", "#perturbation = Cell(**arch).perturb(self.nasbench, edits)", "\n", "                    ", "perturbation", "=", "self", ".", "mutate", "(", "arch", "[", "0", "]", ",", "mutate_rate", "=", "edits", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "matrix", "=", "perturbation", "[", "1", "]", ",", "ops", "=", "perturbation", "[", "2", "]", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "[", "perturbation", "[", "6", "]", ",", "perturbation", "[", "1", "]", ",", "perturbation", "[", "2", "]", "]", ")", "\n", "\n", "# make sure new_arch_list is not empty", "\n", "", "", "", "", "while", "len", "(", "new_arch_list", ")", "==", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "                ", "random_arch", "=", "self", ".", "generate_random_dataset", "(", "num", "=", "1", ",", "allow_isomorphisms", "=", "False", ")", "[", "0", "]", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "matrix", "=", "random_arch", "[", "1", "]", ",", "ops", "=", "random_arch", "[", "2", "]", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_indices", "]", "=", "1", "\n", "new_arch_list", ".", "append", "(", "[", "random_arch", "[", "6", "]", ",", "random_arch", "[", "1", "]", ",", "random_arch", "[", "2", "]", "]", ")", "\n", "\n", "", "", "", "return", "new_arch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_distance_matrix": [[470, 482], ["numpy.zeros", "enumerate", "enumerate", "len", "len", "data_nasbench_ars_wo_none.adj_distance", "data_nasbench_ars_wo_none.nasbot_distance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.nasbot_distance"], ["", "@", "classmethod", "\n", "def", "generate_distance_matrix", "(", "cls", ",", "arches_1", ",", "arches_2", ",", "distance", ")", ":", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "[", "len", "(", "arches_1", ")", ",", "len", "(", "arches_2", ")", "]", ")", "\n", "for", "i", ",", "arch_1", "in", "enumerate", "(", "arches_1", ")", ":", "\n", "            ", "for", "j", ",", "arch_2", "in", "enumerate", "(", "arches_2", ")", ":", "\n", "                ", "if", "distance", "==", "'adj'", ":", "\n", "                    ", "matrix", "[", "i", "]", "[", "j", "]", "=", "adj_distance", "(", "arch_1", ",", "arch_2", ")", "\n", "", "elif", "distance", "==", "'nasbot'", ":", "\n", "                    ", "matrix", "[", "i", "]", "[", "j", "]", "=", "nasbot_distance", "(", "arch_1", ",", "arch_2", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Distance {distance} does not support at present!'", ")", "\n", "", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.adj_distance": [[484, 488], ["numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "adj_distance", "(", "cell_1", ",", "cell_2", ")", ":", "\n", "    ", "graph_dist", "=", "np", ".", "sum", "(", "cell_1", "[", "1", "]", "!=", "cell_2", "[", "1", "]", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "cell_1", "[", "2", "]", "!=", "cell_2", "[", "2", "]", ")", "\n", "return", "graph_dist", "+", "ops_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.nasbot_distance": [[490, 511], ["sorted", "sorted", "sorted", "sorted", "numpy.sum", "numpy.sum", "numpy.sum", "cell_1_matrix.sum", "cell_1_matrix.sum", "cell_2_matrix.sum", "cell_2_matrix.sum", "numpy.abs", "numpy.abs", "cell_1_ops.count", "cell_2_ops.count", "numpy.abs", "numpy.subtract", "numpy.subtract", "numpy.subtract"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count"], ["", "def", "nasbot_distance", "(", "cell_1", ",", "cell_2", ")", ":", "\n", "# distance based on optimal transport between row sums, column sums, and ops", "\n", "\n", "    ", "cell_1_matrix", ",", "cell_1_ops", "=", "cell_1", "[", "1", "]", ",", "cell_1", "[", "2", "]", "\n", "cell_2_matrix", ",", "cell_2_ops", "=", "cell_2", "[", "1", "]", ",", "cell_2", "[", "2", "]", "\n", "\n", "cell_1_row_sums", "=", "sorted", "(", "cell_1_matrix", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "cell_1_col_sums", "=", "sorted", "(", "cell_1_matrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "cell_2_row_sums", "=", "sorted", "(", "cell_2_matrix", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "cell_2_col_sums", "=", "sorted", "(", "cell_2_matrix", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "row_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_row_sums", ",", "cell_2_row_sums", ")", ")", ")", "\n", "col_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_col_sums", ",", "cell_2_col_sums", ")", ")", ")", "\n", "\n", "cell_1_counts", "=", "[", "cell_1_ops", ".", "count", "(", "op", ")", "for", "op", "in", "OPS", "]", "\n", "cell_2_counts", "=", "[", "cell_2_ops", ".", "count", "(", "op", ")", "for", "op", "in", "OPS", "]", "\n", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "subtract", "(", "cell_1_counts", ",", "cell_2_counts", ")", ")", ")", "\n", "\n", "return", "row_dist", "+", "col_dist", "+", "ops_dist", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.batch.Batch.__init__": [[12, 18], ["data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "batch", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Batch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "__data_class__", "=", "Data", "\n", "self", ".", "__slices__", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.batch.Batch.from_data_list": [[19, 88], ["list", "Batch.Batch", "enumerate", "Batch.contiguous", "set", "set.union", "torch.is_tensor", "torch.is_tensor", "Batch.__slices__[].append", "batch[].append", "torch.full", "Batch.batch.append", "torch.cat", "torch.is_tensor", "torch.full.size", "data.__inc__", "torch.full", "batch[].append", "isinstance", "isinstance", "torch.tensor", "data.__cat_dim__", "data_list[].__cat_dim__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.contiguous", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__inc__", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__cat_dim__", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__cat_dim__"], ["", "@", "staticmethod", "\n", "def", "from_data_list", "(", "data_list", ",", "follow_batch", "=", "[", "]", ")", ":", "\n", "        ", "r\"\"\"Constructs a batch object from a python list holding\n        :class:`torch_geometric.data.Data` objects.\n        The assignment vector :obj:`batch` is created on the fly.\n        Additionally, creates assignment batch vectors for each key in\n        :obj:`follow_batch`.\"\"\"", "\n", "\n", "keys", "=", "[", "set", "(", "data", ".", "keys", ")", "for", "data", "in", "data_list", "]", "\n", "keys", "=", "list", "(", "set", ".", "union", "(", "*", "keys", ")", ")", "\n", "assert", "'batch'", "not", "in", "keys", "\n", "\n", "batch", "=", "Batch", "(", ")", "\n", "batch", ".", "__data_class__", "=", "data_list", "[", "0", "]", ".", "__class__", "\n", "batch", ".", "__slices__", "=", "{", "key", ":", "[", "0", "]", "for", "key", "in", "keys", "}", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "batch", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "for", "key", "in", "follow_batch", ":", "\n", "            ", "batch", "[", "'{}_batch'", ".", "format", "(", "key", ")", "]", "=", "[", "]", "\n", "\n", "", "cumsum", "=", "{", "key", ":", "0", "for", "key", "in", "keys", "}", "\n", "batch", ".", "batch", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_list", ")", ":", "\n", "            ", "for", "key", "in", "data", ".", "keys", ":", "\n", "                ", "item", "=", "data", "[", "key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "item", ".", "dtype", "!=", "torch", ".", "bool", ":", "\n", "                    ", "item", "=", "item", "+", "cumsum", "[", "key", "]", "\n", "", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                    ", "size", "=", "item", ".", "size", "(", "data", ".", "__cat_dim__", "(", "key", ",", "data", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "size", "=", "1", "\n", "", "batch", ".", "__slices__", "[", "key", "]", ".", "append", "(", "size", "+", "batch", ".", "__slices__", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "cumsum", "[", "key", "]", "=", "cumsum", "[", "key", "]", "+", "data", ".", "__inc__", "(", "key", ",", "item", ")", "\n", "batch", "[", "key", "]", ".", "append", "(", "item", ")", "\n", "\n", "if", "key", "in", "follow_batch", ":", "\n", "                    ", "item", "=", "torch", ".", "full", "(", "(", "size", ",", ")", ",", "i", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch", "[", "'{}_batch'", ".", "format", "(", "key", ")", "]", ".", "append", "(", "item", ")", "\n", "\n", "", "", "num_nodes", "=", "data", ".", "num_nodes", "\n", "if", "num_nodes", "is", "not", "None", ":", "\n", "                ", "item", "=", "torch", ".", "full", "(", "(", "num_nodes", ",", ")", ",", "i", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch", ".", "batch", ".", "append", "(", "item", ")", "\n", "\n", "", "", "if", "num_nodes", "is", "None", ":", "\n", "            ", "batch", ".", "batch", "=", "None", "\n", "\n", "", "for", "key", "in", "batch", ".", "keys", ":", "\n", "            ", "item", "=", "batch", "[", "key", "]", "[", "0", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "batch", "[", "key", "]", "=", "torch", ".", "cat", "(", "batch", "[", "key", "]", ",", "\n", "dim", "=", "data_list", "[", "0", "]", ".", "__cat_dim__", "(", "key", ",", "item", ")", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "int", ")", "or", "isinstance", "(", "item", ",", "float", ")", ":", "\n", "                ", "batch", "[", "key", "]", "=", "torch", ".", "tensor", "(", "batch", "[", "key", "]", ")", "\n", "\n", "# Copy custom data functions to batch (does not work yet):", "\n", "# if data_list.__class__ != Data:", "\n", "#     org_funcs = set(Data.__dict__.keys())", "\n", "#     funcs = set(data_list[0].__class__.__dict__.keys())", "\n", "#     batch.__custom_funcs__ = funcs.difference(org_funcs)", "\n", "#     for func in funcs.difference(org_funcs):", "\n", "#         setattr(batch, func, getattr(data_list[0], func))", "\n", "\n", "# if torch_geometric.is_debug_enabled():", "\n", "#     batch.debug()", "\n", "\n", "", "", "return", "batch", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.batch.Batch.to_data_list": [[89, 120], ["range", "RuntimeError", "batch.Batch.__data_class__", "data_list.append", "len", "torch.is_tensor", "batch.Batch.narrow", "batch.Batch.__inc__", "batch.Batch.__cat_dim__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__inc__", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__cat_dim__"], ["", "def", "to_data_list", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Reconstructs the list of :class:`torch_geometric.data.Data` objects\n        from the batch object.\n        The batch object must have been created via :meth:`from_data_list` in\n        order to be able reconstruct the initial objects.\"\"\"", "\n", "\n", "if", "self", ".", "__slices__", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "(", "'Cannot reconstruct data list from batch because the batch '", "\n", "'object was not created using Batch.from_data_list()'", ")", ")", "\n", "\n", "", "keys", "=", "[", "key", "for", "key", "in", "self", ".", "keys", "if", "key", "[", "-", "5", ":", "]", "!=", "'batch'", "]", "\n", "cumsum", "=", "{", "key", ":", "0", "for", "key", "in", "keys", "}", "\n", "data_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "__slices__", "[", "keys", "[", "0", "]", "]", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "__data_class__", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "self", "[", "key", "]", ")", ":", "\n", "                    ", "data", "[", "key", "]", "=", "self", "[", "key", "]", ".", "narrow", "(", "\n", "data", ".", "__cat_dim__", "(", "key", ",", "\n", "self", "[", "key", "]", ")", ",", "self", ".", "__slices__", "[", "key", "]", "[", "i", "]", ",", "\n", "self", ".", "__slices__", "[", "key", "]", "[", "i", "+", "1", "]", "-", "self", ".", "__slices__", "[", "key", "]", "[", "i", "]", ")", "\n", "if", "self", "[", "key", "]", ".", "dtype", "!=", "torch", ".", "bool", ":", "\n", "                        ", "data", "[", "key", "]", "=", "data", "[", "key", "]", "-", "cumsum", "[", "key", "]", "\n", "", "", "else", ":", "\n", "                    ", "data", "[", "key", "]", "=", "self", "[", "key", "]", "[", "self", ".", "__slices__", "[", "key", "]", "[", "i", "]", ":", "self", ".", "\n", "__slices__", "[", "key", "]", "[", "i", "+", "1", "]", "]", "\n", "", "cumsum", "[", "key", "]", "=", "cumsum", "[", "key", "]", "+", "data", ".", "__inc__", "(", "key", ",", "data", "[", "key", "]", ")", "\n", "", "data_list", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.batch.Batch.num_graphs": [[121, 125], ["batch.Batch.batch[].item"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_graphs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of graphs in the batch.\"\"\"", "\n", "return", "self", ".", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__init__": [[59, 73], ["kwargs.items"], "methods", ["None"], ["\n", "\n", "", "def", "generate_train_data_nasbench_201", "(", "model_keys", ",", "total_archs", ",", "encode_path", ",", "allow_isomorphisms", ",", "flag_100", ",", "is_bananas", "=", "False", ")", ":", "\n", "    ", "train_data", "=", "[", "]", "\n", "for", "k", "in", "model_keys", ":", "\n", "        ", "arch", "=", "total_archs", "[", "k", "]", ".", "copy", "(", ")", "\n", "train_data", ".", "append", "(", "(", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", "}", ",", "\n", "arch", "[", "'val'", "]", ",", "\n", "arch", "[", "'test'", "]", ")", ")", "\n", "", "return", "train_data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.from_dict": [[74, 83], ["cls", "dictionary.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__getitem__": [[84, 87], ["getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__setitem__": [[88, 91], ["setattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys": [[92, 98], ["data.Data.__dict__.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__len__": [[99, 102], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__contains__": [[103, 107], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__iter__": [[108, 113], ["sorted"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__call__": [[114, 122], ["sorted"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__cat_dim__": [[123, 136], ["bool", "re.search"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__inc__": [[137, 150], ["bool", "re.search"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.num_nodes": [[180, 183], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.num_edges": [[184, 190], ["data.Data.", "item.size", "data.Data.__cat_dim__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__cat_dim__"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.num_faces": [[191, 197], ["data.Data.face.size", "data.Data.__cat_dim__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__cat_dim__"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.num_node_features": [[198, 204], ["data.Data.x.size", "data.Data.x.dim"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.num_features": [[205, 209], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.num_edge_features": [[210, 216], ["data.Data.edge_attr.size", "data.Data.edge_attr.dim"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.is_coalesced": [[217, 224], ["torch_sparse.coalesce", "data.Data.edge_index.numel", "edge_index.numel"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.coalesce"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.coalesce": [[225, 232], ["torch_sparse.coalesce"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.coalesce"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.contains_isolated_nodes": [[233, 236], ["nn.utils.contains_isolated_nodes"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.contains_isolated_nodes"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.contains_self_loops": [[237, 240], ["data.Data."], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.is_undirected": [[241, 244], ["nn.utils.is_undirected"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.is_undirected"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.is_directed": [[245, 248], ["data.Data.is_undirected"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.is_undirected"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.apply": [[249, 258], ["data.Data.", "torch.is_tensor", "func"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.contiguous": [[259, 264], ["data.Data.apply", "x.contiguous"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.apply", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.contiguous"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to": [[265, 271], ["data.Data.apply", "x.to"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.apply", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.clone": [[272, 276], ["data.Data.__class__.from_dict", "torch.is_tensor", "v.clone", "copy.deepcopy", "data.Data.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.from_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.clone"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.debug": [[278, 354], ["RuntimeError", "RuntimeError", "RuntimeError", "data.Data.edge_index.numel", "data.Data.edge_index.min", "data.Data.edge_index.max", "RuntimeError", "RuntimeError", "data.Data.face.numel", "data.Data.face.min", "data.Data.face.max", "RuntimeError", "data.Data.edge_index.size", "data.Data.edge_attr.size", "RuntimeError", "data.Data.x.size", "RuntimeError", "data.Data.pos.size", "RuntimeError", "data.Data.norm.size", "RuntimeError", "data.Data.edge_index.dim", "data.Data.edge_index.size", "data.Data.face.dim", "data.Data.face.size", "data.Data.edge_index.size", "data.Data.face.size", "data.Data.edge_index.size", "data.Data.edge_attr.size", "data.Data.x.size", "data.Data.pos.size", "data.Data.norm.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.__repr__": [[355, 358], ["data.size_repr"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.size_repr"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.size_repr": [[19, 28], ["torch.is_tensor", "list", "value.size", "isinstance", "isinstance", "isinstance", "isinstance", "len"], "function", ["None"], ["", "elif", "search_spaces", "==", "'nasbench_nlp'", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "data_nasbench_nlp", "import", "DataNasBenchNLP", "\n", "return", "DataNasBenchNLP", "(", "perf_type", "=", "nasbench_nlp_type", ")", "\n", "", "elif", "search_spaces", "==", "'nasbench_asr'", ":", "\n", "        ", "if", "filter_none", "==", "'y'", ":", "\n", "            ", "from", "nas_lib", ".", "data", ".", "data_nasbench_ars_wo_none", "import", "DataNasBenchASR_WO_None", "\n", "return", "DataNasBenchASR_WO_None", "(", ")", "\n", "", "else", ":", "\n", "            ", "from", "nas_lib", ".", "data", ".", "data_nasbench_asr", "import", "DataNasBenchASR", "\n", "return", "DataNasBenchASR", "(", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph_np": [[17, 77], ["len", "numpy.zeros", "enumerate", "labels.append", "enumerate", "labels.append", "enumerate", "range", "graph_utils.get_model_graph_np.bfs"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["def", "get_model_graph_np", "(", "arch_vec", ",", "ops", "=", "None", ",", "minimize", "=", "True", ",", "keep_dims", "=", "False", ")", ":", "\n", "    ", "if", "ops", "is", "None", ":", "\n", "        ", "from", ".", "import", "search_space", "as", "ss", "\n", "ops", "=", "ss", ".", "all_ops", "\n", "", "num_nodes", "=", "len", "(", "arch_vec", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "num_nodes", "+", "2", ",", "num_nodes", "+", "2", ")", ")", "\n", "labels", "=", "[", "'input'", "]", "\n", "prev_skips", "=", "[", "]", "\n", "for", "nidx", ",", "node", "in", "enumerate", "(", "arch_vec", ")", ":", "\n", "        ", "op", "=", "node", "[", "0", "]", "\n", "labels", ".", "append", "(", "ops", "[", "op", "]", ")", "\n", "mat", "[", "nidx", ",", "nidx", "+", "1", "]", "=", "1", "\n", "for", "i", ",", "sc", "in", "enumerate", "(", "prev_skips", ")", ":", "\n", "            ", "if", "sc", ":", "\n", "                ", "mat", "[", "i", ",", "nidx", "+", "1", "]", "=", "1", "\n", "", "", "prev_skips", "=", "node", "[", "1", ":", "]", "\n", "", "labels", ".", "append", "(", "'output'", ")", "\n", "mat", "[", "num_nodes", ",", "num_nodes", "+", "1", "]", "=", "1", "\n", "for", "i", ",", "sc", "in", "enumerate", "(", "prev_skips", ")", ":", "\n", "        ", "if", "sc", ":", "\n", "            ", "mat", "[", "i", ",", "num_nodes", "+", "1", "]", "=", "1", "\n", "", "", "orig", "=", "None", "\n", "if", "minimize", ":", "\n", "        ", "orig", "=", "copy", ".", "copy", "(", "mat", ")", ",", "copy", ".", "copy", "(", "labels", ")", "\n", "for", "n", "in", "range", "(", "len", "(", "mat", ")", ")", ":", "\n", "            ", "if", "labels", "[", "n", "]", "==", "'zero'", ":", "\n", "                ", "for", "n2", "in", "range", "(", "len", "(", "mat", ")", ")", ":", "\n", "                    ", "if", "mat", "[", "n", ",", "n2", "]", ":", "\n", "                        ", "mat", "[", "n", ",", "n2", "]", "=", "0", "\n", "", "if", "mat", "[", "n2", ",", "n", "]", ":", "\n", "                        ", "mat", "[", "n2", ",", "n", "]", "=", "0", "\n", "", "", "", "", "def", "bfs", "(", "src", ",", "mat", ",", "backward", ")", ":", "\n", "            ", "visited", "=", "np", ".", "zeros", "(", "len", "(", "mat", ")", ")", "\n", "q", "=", "[", "src", "]", "\n", "visited", "[", "src", "]", "=", "1", "\n", "while", "q", ":", "\n", "                ", "n", "=", "q", ".", "pop", "(", ")", "\n", "for", "n2", "in", "range", "(", "len", "(", "mat", ")", ")", ":", "\n", "                    ", "if", "visited", "[", "n2", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "backward", "and", "mat", "[", "n2", ",", "n", "]", ")", "or", "(", "not", "backward", "and", "mat", "[", "n", ",", "n2", "]", ")", ":", "\n", "                        ", "q", ".", "append", "(", "n2", ")", "\n", "visited", "[", "n2", "]", "=", "1", "\n", "", "", "", "return", "visited", "\n", "", "vfw", "=", "bfs", "(", "0", ",", "mat", ",", "False", ")", "\n", "vbw", "=", "bfs", "(", "len", "(", "mat", ")", "-", "1", ",", "mat", ",", "True", ")", "\n", "v", "=", "vfw", "+", "vbw", "\n", "dangling", "=", "(", "v", "<", "2", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "dangling", ".", "size", ":", "\n", "            ", "if", "keep_dims", ":", "\n", "                ", "mat", "[", "dangling", ",", ":", "]", "=", "0", "\n", "mat", "[", ":", ",", "dangling", "]", "=", "0", "\n", "for", "i", "in", "dangling", ":", "\n", "                    ", "labels", "[", "i", "]", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "mat", "=", "np", ".", "delete", "(", "mat", ",", "dangling", ",", "axis", "=", "0", ")", "\n", "mat", "=", "np", ".", "delete", "(", "mat", ",", "dangling", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "sorted", "(", "dangling", ",", "reverse", "=", "True", ")", ":", "\n", "                    ", "del", "labels", "[", "i", "]", "\n", "", "", "", "", "return", "(", "mat", ",", "labels", ")", ",", "orig", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph_nx": [[78, 137], ["len", "networkx.DiGraph", "nx.DiGraph.add_node", "enumerate", "nx.DiGraph.add_node", "nx.DiGraph.add_edge", "enumerate", "nx.DiGraph.add_node", "nx.DiGraph.add_edge", "enumerate", "copy.deepcopy", "dict", "range", "nx.DiGraph.add_edge", "dict", "nx.DiGraph.add_edge", "nx.DiGraph.remove_node", "networkx.descendants", "networkx.descendants", "print", "graph_utils.show_graph", "graph_utils.show_graph", "nx.DiGraph.remove_edges_from", "nx.DiGraph.remove_node", "list", "list", "nx.DiGraph.in_edges", "nx.DiGraph.out_edges"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.show_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.show_graph"], ["", "def", "get_model_graph_nx", "(", "arch_vector", ",", "ops", "=", "None", ",", "minimize", "=", "True", ",", "keep_dims", "=", "False", ")", ":", "\n", "    ", "''' Get :class:`netwworkx.DiGraph` object from an arch vector.\n        If ``minimize`` is ``True``, the graph will be minimized by removing\n        \"zero\" operations and consequently any dangling nodes.\n    '''", "\n", "if", "ops", "is", "None", ":", "\n", "        ", "from", ".", "import", "search_space", "as", "ss", "\n", "ops", "=", "ss", ".", "all_ops", "\n", "", "num_nodes", "=", "len", "(", "arch_vector", ")", "\n", "g", "=", "nx", ".", "DiGraph", "(", ")", "\n", "g", ".", "add_node", "(", "0", ",", "label", "=", "'input'", ")", "\n", "prev_skips", "=", "[", "]", "\n", "for", "nidx", ",", "node", "in", "enumerate", "(", "arch_vector", ")", ":", "\n", "        ", "op", "=", "node", "[", "0", "]", "\n", "g", ".", "add_node", "(", "nidx", "+", "1", ",", "label", "=", "ops", "[", "op", "]", ")", "\n", "g", ".", "add_edge", "(", "nidx", ",", "nidx", "+", "1", ")", "\n", "for", "i", ",", "sc", "in", "enumerate", "(", "prev_skips", ")", ":", "\n", "            ", "if", "sc", ":", "\n", "                ", "g", ".", "add_edge", "(", "i", ",", "nidx", "+", "1", ")", "\n", "", "", "prev_skips", "=", "node", "[", "1", ":", "]", "\n", "", "g", ".", "add_node", "(", "num_nodes", "+", "1", ",", "label", "=", "'output'", ")", "\n", "g", ".", "add_edge", "(", "num_nodes", ",", "num_nodes", "+", "1", ")", "\n", "for", "i", ",", "sc", "in", "enumerate", "(", "prev_skips", ")", ":", "\n", "        ", "if", "sc", ":", "\n", "            ", "g", ".", "add_edge", "(", "i", ",", "num_nodes", "+", "1", ")", "\n", "", "", "orig", "=", "None", "\n", "if", "minimize", ":", "\n", "        ", "orig", "=", "copy", ".", "deepcopy", "(", "g", ")", "\n", "for", "n", "in", "dict", "(", "g", ".", "nodes", ")", ":", "\n", "            ", "if", "g", ".", "nodes", "[", "n", "]", "[", "'label'", "]", "==", "'zero'", ":", "\n", "                ", "g", ".", "remove_node", "(", "n", ")", "\n", "", "", "for", "_i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "0", "in", "g", ".", "nodes", ":", "\n", "                ", "from_source", "=", "nx", ".", "descendants", "(", "g", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "from_source", "=", "[", "]", "\n", "", "for", "n", "in", "dict", "(", "g", ".", "nodes", ")", ":", "\n", "                ", "keep", "=", "True", "\n", "desc", "=", "nx", ".", "descendants", "(", "g", ",", "n", ")", "\n", "if", "n", "!=", "num_nodes", "+", "1", ":", "\n", "                    ", "if", "num_nodes", "+", "1", "not", "in", "desc", ":", "\n", "                        ", "keep", "=", "False", "\n", "", "", "if", "n", ">", "0", ":", "\n", "                    ", "if", "n", "not", "in", "from_source", ":", "\n", "                        ", "keep", "=", "False", "\n", "", "", "if", "not", "keep", ":", "\n", "                    ", "if", "not", "_i", ":", "\n", "                        ", "if", "keep_dims", ":", "\n", "                            ", "edges", "=", "list", "(", "g", ".", "in_edges", "(", "n", ")", ")", "+", "list", "(", "g", ".", "out_edges", "(", "n", ")", ")", "\n", "g", ".", "remove_edges_from", "(", "edges", ")", "\n", "g", ".", "nodes", "[", "n", "]", "[", "'label'", "]", "=", "None", "\n", "", "else", ":", "\n", "                            ", "g", ".", "remove_node", "(", "n", ")", "\n", "", "", "else", ":", "\n", "                        ", "print", "(", "_i", ",", "n", ",", "desc", ")", "\n", "show_graph", "(", "g", ")", "\n", "show_graph", "(", "orig", ")", "\n", "assert", "False", "\n", "", "", "", "", "", "return", "g", ",", "orig", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph": [[138, 143], ["graph_utils.get_model_graph_np", "graph_utils.get_model_graph_nx"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph_np", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph_nx"], ["", "def", "get_model_graph", "(", "arch_vector", ",", "ops", "=", "None", ",", "minimize", "=", "True", ",", "keep_dims", "=", "False", ")", ":", "\n", "    ", "if", "_use_np", ":", "\n", "        ", "return", "get_model_graph_np", "(", "arch_vector", ",", "ops", ",", "minimize", ",", "keep_dims", ")", "\n", "", "else", ":", "\n", "        ", "return", "get_model_graph_nx", "(", "arch_vector", ",", "ops", ",", "minimize", ",", "keep_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash_np": [[145, 181], ["graph_utils.graph_hash_np.hash_module"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench101.graph_util.hash_module"], ["", "", "def", "graph_hash_np", "(", "g", ")", ":", "\n", "    ", "from", ".", "import", "search_space", "as", "ss", "\n", "m", ",", "l", "=", "g", "\n", "def", "hash_module", "(", "matrix", ",", "labelling", ")", ":", "\n", "        ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n        Args:\n            matrix: np.ndarray square upper-triangular adjacency matrix.\n            labelling: list of int labels of length equal to both dimensions of\n                matrix.\n        Returns:\n            MD5 hash of the matrix and labelling.\n        \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labelling", ")", ",", "f'{labelling} {matrix}'", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labelling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "            ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "                ", "in_neighbours", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbours", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "hashlib", ".", "md5", "(", "\n", "(", "''", ".", "join", "(", "sorted", "(", "in_neighbours", ")", ")", "+", "'|'", "+", "\n", "''", ".", "join", "(", "sorted", "(", "out_neighbours", ")", ")", "+", "'|'", "+", "\n", "hashes", "[", "v", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "return", "fingerprint", "\n", "", "labels", "=", "[", "]", "\n", "if", "l", ":", "\n", "        ", "labels", "=", "[", "-", "1", "]", "+", "[", "ss", ".", "all_ops", ".", "index", "(", "op", ")", "for", "op", "in", "l", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "", "return", "hash_module", "(", "m", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash_nx": [[182, 184], ["networkx.algorithms.graph_hashing.weisfeiler_lehman_graph_hash"], "function", ["None"], ["", "def", "graph_hash_nx", "(", "g", ")", ":", "\n", "    ", "return", "nx", ".", "algorithms", ".", "graph_hashing", ".", "weisfeiler_lehman_graph_hash", "(", "g", ",", "node_attr", "=", "'label'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash": [[185, 190], ["graph_utils.graph_hash_np", "graph_utils.graph_hash_nx"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash_np", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash_nx"], ["", "def", "graph_hash", "(", "g", ")", ":", "\n", "    ", "if", "_use_np", ":", "\n", "        ", "return", "graph_hash_np", "(", "g", ")", "\n", "", "else", ":", "\n", "        ", "return", "graph_hash_nx", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils._make_nice": [[212, 273], ["agraph.nodes", "set", "agraph.edges", "sorted", "zip", "_op_to_label.get", "positions.keys", "agraph.get_node", "int", "int", "str", "agraph.add_edge", "agraph.remove_edge", "set.add", "int", "outputs.setdefault", "agraph.add_node", "agraph.edges", "agraph.add_edge", "agraph.add_edge", "outputs.get", "range", "int", "agraph.remove_edge", "set.add", "len", "int"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset._Dataset.nodes", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["def", "_make_nice", "(", "agraph", ")", ":", "\n", "    ", "positions", "=", "{", "}", "\n", "agraph", ".", "node_attr", "[", "'shape'", "]", "=", "'rectangle'", "\n", "agraph", ".", "node_attr", "[", "'style'", "]", "=", "'rounded'", "\n", "agraph", ".", "graph_attr", "[", "'splines'", "]", "=", "'true'", "\n", "agraph", ".", "graph_attr", "[", "'esep'", "]", "=", "0.17", "\n", "#agraph.graph_attr['overlap'] = 'false'", "\n", "for", "node", "in", "agraph", ".", "nodes", "(", ")", ":", "\n", "        ", "op", "=", "node", ".", "attr", "[", "'label'", "]", "\n", "node", ".", "attr", "[", "'label'", "]", "=", "_op_to_label", ".", "get", "(", "op", ",", "op", ")", "\n", "node", ".", "attr", "[", "'width'", "]", "=", "1.2", "\n", "node", ".", "attr", "[", "'height'", "]", "=", "0.3", "\n", "if", "op", "in", "_op_to_node_color", ":", "\n", "            ", "node", ".", "attr", "[", "'fillcolor'", "]", "=", "_op_to_node_color", "[", "op", "]", "\n", "node", ".", "attr", "[", "'style'", "]", "=", "'filled,rounded'", "\n", "\n", "", "positions", "[", "2", "*", "int", "(", "node", ")", "]", "=", "node", "\n", "\n", "\n", "", "outputs", "=", "{", "}", "\n", "removed", "=", "set", "(", ")", "\n", "for", "e", "in", "agraph", ".", "edges", "(", ")", ":", "\n", "        ", "if", "e", "in", "removed", ":", "\n", "            ", "continue", "\n", "", "if", "int", "(", "e", "[", "0", "]", ")", "+", "1", "!=", "int", "(", "e", "[", "1", "]", ")", ":", "\n", "            ", "e", ".", "attr", "[", "'group'", "]", "=", "'branches'", "\n", "e", ".", "attr", "[", "'style'", "]", "=", "'dashed'", "\n", "d", "=", "int", "(", "e", "[", "1", "]", ")", "\n", "prev", "=", "str", "(", "d", "-", "1", ")", "\n", "if", "prev", "not", "in", "outputs", ":", "\n", "                ", "onode", "=", "outputs", ".", "setdefault", "(", "prev", ",", "f'o{prev}'", ")", "\n", "agraph", ".", "add_node", "(", "onode", ",", "label", "=", "'+'", ",", "shape", "=", "'circle'", ",", "width", "=", "0.3", ",", "height", "=", "0.3", ",", "fixedsize", "=", "True", ",", "fontsize", "=", "16", ")", "\n", "positions", "[", "2", "*", "int", "(", "prev", ")", "+", "1", "]", "=", "onode", "\n", "for", "e2", "in", "agraph", ".", "edges", "(", ")", ":", "\n", "                    ", "if", "e2", "[", "0", "]", "==", "prev", "and", "e2", "[", "1", "]", "==", "e", "[", "1", "]", ":", "\n", "                        ", "agraph", ".", "remove_edge", "(", "e2", ")", "\n", "removed", ".", "add", "(", "e2", ")", "\n", "", "", "agraph", ".", "add_edge", "(", "prev", ",", "onode", ",", "group", "=", "'main'", ",", "arrowsize", "=", "0.5", ")", "\n", "agraph", ".", "add_edge", "(", "onode", ",", "e", "[", "1", "]", ",", "group", "=", "'main'", ",", "arrowsize", "=", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "onode", "=", "outputs", "[", "prev", "]", "\n", "\n", "", "agraph", ".", "add_edge", "(", "outputs", ".", "get", "(", "e", "[", "0", "]", ",", "e", "[", "0", "]", ")", ",", "onode", ",", "group", "=", "'branches'", ",", "style", "=", "'dashed'", ",", "arrowsize", "=", "0.5", ")", "\n", "agraph", ".", "remove_edge", "(", "e", ")", "\n", "removed", ".", "add", "(", "e", ")", "\n", "", "else", ":", "\n", "            ", "e", ".", "attr", "[", "'group'", "]", "=", "'main'", "\n", "e", ".", "attr", "[", "'arrowsize'", "]", "=", "0.5", "\n", "\n", "", "", "_pos", "=", "sorted", "(", "positions", ".", "keys", "(", ")", ")", "\n", "p", "=", "0", "\n", "next_half", "=", "False", "\n", "is_next_sc", "=", "[", "_pos", "[", "i", "+", "1", "]", "%", "2", "!=", "0", "for", "i", "in", "range", "(", "len", "(", "_pos", ")", "-", "1", ")", "]", "+", "[", "False", "]", "\n", "is_prev_sc", "=", "[", "False", "]", "+", "is_next_sc", "[", ":", "-", "1", "]", "\n", "for", "pos", ",", "nsc", ",", "psc", "in", "zip", "(", "_pos", ",", "is_next_sc", ",", "is_prev_sc", ")", ":", "\n", "        ", "node", "=", "agraph", ".", "get_node", "(", "positions", "[", "pos", "]", ")", "\n", "node", ".", "attr", "[", "'pos'", "]", "=", "f'0,{p}!'", "\n", "if", "not", "nsc", "and", "not", "psc", ":", "\n", "            ", "p", "-=", "0.47", "\n", "", "else", ":", "\n", "            ", "p", "-=", "0.47", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.show_graph": [[275, 299], ["networkx.nx_agraph.to_agraph", "graph_utils._make_nice", "nx.nx_agraph.to_agraph.layout", "nx.nx_agraph.to_agraph.draw", "networkx.from_numpy_array", "enumerate", "tempfile.mktemp", "subprocess.run"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils._make_nice"], ["", "", "", "def", "show_graph", "(", "g", ",", "aid", "=", "None", ",", "show", "=", "True", ",", "out_dir", "=", "None", ")", ":", "\n", "    ", "''' Renders graph ``g`` using graphiviz.\n        ``aid`` is an optional architecture id, if provided,\n        the rendered graph will be stored under \"{out_dir}/nb_graph.{aid}.png\".\n        (If ``out_dir`` is ``None``, it will default to ``graphs``).\n        Otherwise, it will be saved in a temporary file.\n        If ``show`` is ``True``, the rendered file will be opened with \"xdg-open\".\n    '''", "\n", "if", "_use_np", ":", "\n", "        ", "a", ",", "l", "=", "g", "\n", "g", "=", "nx", ".", "from_numpy_array", "(", "a", ",", "create_using", "=", "nx", ".", "DiGraph", ")", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "l", ")", ":", "\n", "            ", "g", ".", "nodes", "[", "idx", "]", "[", "'label'", "]", "=", "label", "\n", "", "", "a", "=", "nx", ".", "nx_agraph", ".", "to_agraph", "(", "g", ")", "\n", "_make_nice", "(", "a", ")", "\n", "a", ".", "layout", "(", "'dot'", ",", "'-Kfdp'", ")", "\n", "if", "aid", "is", "None", ":", "\n", "        ", "fname", "=", "tempfile", ".", "mktemp", "(", "'.png'", ",", "'nb_graph.'", ")", "\n", "", "else", ":", "\n", "        ", "dname", "=", "out_dir", "if", "out_dir", "is", "not", "None", "else", "\"graphs\"", "\n", "fname", "=", "f'{dname}/nb_graph.{aid}.png'", "\n", "", "a", ".", "draw", "(", "fname", ")", "\n", "if", "show", ":", "\n", "        ", "subprocess", ".", "run", "(", "[", "'xdg-open'", ",", "fname", "]", ",", "check", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.show_model": [[301, 317], ["graph_utils.get_model_graph", "graph_utils.show_graph", "map", "graph_utils.graph_hash", "graph_utils.graph_hash", "graph_utils.show_graph", "utils.flatten", "utils.flatten", "utils.flatten"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.show_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.show_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "", "def", "show_model", "(", "arch_vec", ",", "aid", "=", "None", ",", "show", "=", "True", ",", "inc_full", "=", "True", ",", "out_dir", "=", "None", ")", ":", "\n", "    ", "''' Renders graphs constructed from arch vector (both minimal and full).\n        Full graph is only rendered if different from minimal.\n        ``aid`` is an architecture id which will be used when saving rendered graphs,\n        if not provided it will be derived from ``arch_vec``.\n    '''", "\n", "g", ",", "full", "=", "get_model_graph", "(", "arch_vec", ")", "\n", "if", "aid", "is", "None", ":", "\n", "        ", "aid", "=", "'_'", ".", "join", "(", "map", "(", "str", ",", "flatten", "(", "arch_vec", ")", ")", ")", "\n", "", "show_graph", "(", "g", ",", "aid", "=", "aid", ",", "show", "=", "show", ",", "out_dir", "=", "out_dir", ")", "\n", "if", "full", "is", "not", "None", ":", "\n", "        ", "if", "graph_hash", "(", "g", ")", "!=", "graph_hash", "(", "full", ")", ":", "\n", "            ", "assert", "5", "in", "flatten", "(", "arch_vec", ")", "\n", "show_graph", "(", "full", ",", "aid", "=", "f'{aid}_full'", ",", "show", "=", "show", ",", "out_dir", "=", "out_dir", ")", "\n", "", "else", ":", "\n", "            ", "assert", "5", "not", "in", "flatten", "(", "arch_vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.compare_nx_and_np": [[319, 363], ["utils.count", "set", "set", "tqdm.tqdm", "set", "tqdm.tqdm", "print", "print", "print", "print", "print", "get_all_architectures", "get_all_architectures", "graph_utils.get_model_graph", "graph_utils.graph_hash", "set.add", "get_all_architectures", "graph_utils.get_model_graph", "graph_utils.graph_hash", "set.add", "len", "len", "len", "len", "len", "graph_utils.get_model_graph", "graph_utils.graph_hash", "graph_utils.show_model", "graph_utils.show_model", "utils.flatten", "unique_graphs.append", "set.add", "utils.flatten", "invalid.append"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_all_architectures", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_all_architectures", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_all_architectures", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.show_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.show_model", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "", "", "def", "compare_nx_and_np", "(", ")", ":", "\n", "    ", "from", ".", "search_space", "import", "get_all_architectures", ",", "all_ops", ",", "default_nodes", "\n", "global", "_use_np", "\n", "all_count", "=", "count", "(", "get_all_architectures", "(", "all_ops", ",", "default_nodes", ")", ")", "\n", "_use_np", "=", "False", "\n", "all_hashes", "=", "set", "(", ")", "\n", "without_zero", "=", "set", "(", ")", "\n", "unique_graphs", "=", "[", "]", "\n", "conflicts", "=", "{", "}", "\n", "for", "m", "in", "tqdm", ".", "tqdm", "(", "get_all_architectures", "(", "all_ops", ",", "default_nodes", ")", ",", "total", "=", "all_count", ")", ":", "\n", "        ", "has_zero", "=", "5", "in", "flatten", "(", "m", ")", "\n", "g", ",", "_", "=", "get_model_graph", "(", "m", ")", "\n", "h", "=", "graph_hash", "(", "g", ")", "\n", "if", "h", "not", "in", "all_hashes", ":", "\n", "            ", "unique_graphs", ".", "append", "(", "m", ")", "\n", "", "else", ":", "\n", "            ", "conflicts", "[", "h", "]", "=", "m", "\n", "", "all_hashes", ".", "add", "(", "h", ")", "\n", "if", "not", "has_zero", ":", "\n", "            ", "without_zero", ".", "add", "(", "h", ")", "\n", "", "", "_use_np", "=", "True", "\n", "np_hashes", "=", "set", "(", ")", "\n", "invalid", "=", "[", "]", "\n", "for", "m", "in", "tqdm", ".", "tqdm", "(", "get_all_architectures", "(", "all_ops", ",", "default_nodes", ")", ",", "total", "=", "all_count", ")", ":", "\n", "        ", "has_zero", "=", "5", "in", "flatten", "(", "m", ")", "\n", "g", ",", "_", "=", "get_model_graph", "(", "m", ")", "\n", "h", "=", "graph_hash", "(", "g", ")", "\n", "if", "h", "not", "in", "np_hashes", ":", "\n", "            ", "if", "m", "not", "in", "unique_graphs", ":", "\n", "                ", "invalid", ".", "append", "(", "m", ")", "\n", "", "", "np_hashes", ".", "add", "(", "h", ")", "\n", "", "print", "(", "'Core:'", ",", "len", "(", "without_zero", ")", ")", "\n", "print", "(", "'With zeros:'", ",", "len", "(", "all_hashes", ")", ")", "\n", "print", "(", "'Unique:'", ",", "len", "(", "unique_graphs", ")", ")", "\n", "print", "(", "'Np unique:'", ",", "len", "(", "np_hashes", ")", ")", "\n", "print", "(", "'Invalid:'", ",", "len", "(", "invalid", ")", ")", "\n", "_use_np", "=", "False", "\n", "if", "invalid", ":", "\n", "        ", "inv", "=", "invalid", "[", "0", "]", "\n", "g", ",", "_", "=", "get_model_graph", "(", "inv", ")", "\n", "h", "=", "graph_hash", "(", "g", ")", "\n", "conflicting", "=", "conflicts", "[", "h", "]", "\n", "show_model", "(", "invalid", "[", "0", "]", ")", "\n", "show_model", "(", "conflicting", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.main": [[365, 380], ["utils.count", "set", "set", "tqdm.tqdm", "print", "print", "get_all_architectures", "get_all_architectures", "graph_utils.get_model_graph", "graph_utils.graph_hash", "set.add", "len", "len", "utils.flatten", "set.add"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_all_architectures", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_all_architectures", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "from", ".", "search_space", "import", "get_all_architectures", ",", "all_ops", ",", "default_nodes", "\n", "all_count", "=", "count", "(", "get_all_architectures", "(", "all_ops", ",", "default_nodes", ")", ")", "\n", "all_hashes", "=", "set", "(", ")", "\n", "without_zero", "=", "set", "(", ")", "\n", "for", "m", "in", "tqdm", ".", "tqdm", "(", "get_all_architectures", "(", "all_ops", ",", "default_nodes", ")", ",", "total", "=", "all_count", ")", ":", "\n", "        ", "has_zero", "=", "5", "in", "flatten", "(", "m", ")", "\n", "g", ",", "_", "=", "get_model_graph", "(", "m", ")", "\n", "h", "=", "graph_hash", "(", "g", ")", "\n", "all_hashes", ".", "add", "(", "h", ")", "\n", "if", "not", "has_zero", ":", "\n", "            ", "without_zero", ".", "add", "(", "h", ")", "\n", "# show_model([[0,1], [5,1,0], [3,1,1,1]])", "\n", "", "", "print", "(", "'Core:'", ",", "len", "(", "without_zero", ")", ")", "\n", "print", "(", "'With zeros:'", ",", "len", "(", "all_hashes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_search_space": [[11, 19], ["range", "len"], "function", ["None"], ["def", "get_search_space", "(", "ops", "=", "None", ",", "nodes", "=", "None", ")", ":", "\n", "    ", "''' Return boundaries of the search space for the given list\n        of available operations and number of nodes. \n    '''", "\n", "ops", "=", "ops", "if", "ops", "is", "not", "None", "else", "all_ops", "\n", "nodes", "=", "nodes", "if", "nodes", "is", "not", "None", "else", "default_nodes", "\n", "search_space", "=", "[", "[", "len", "(", "ops", ")", "]", "+", "[", "2", "]", "*", "(", "idx", "+", "1", ")", "for", "idx", "in", "range", "(", "nodes", ")", "]", "\n", "return", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_model_hash": [[21, 30], ["get_model_graph", "graph_hash"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.get_model_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash"], ["", "def", "get_model_hash", "(", "arch_vec", ",", "ops", "=", "None", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "''' Get hash of the architecture specified by arch_vec.\n        Architecture hash can be used to determine if two\n        configurations from the search space are in fact the\n        same (graph isomorphism).\n    '''", "\n", "from", ".", "graph_utils", "import", "get_model_graph", ",", "graph_hash", "\n", "g", ",", "_", "=", "get_model_graph", "(", "arch_vec", ",", "ops", "=", "ops", ",", "minimize", "=", "minimize", ")", "\n", "return", "graph_hash", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_all_architectures": [[32, 48], ["search_space.get_search_space", "utils.flatten", "range", "range", "utils.copy_structure", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_search_space", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.copy_structure"], ["", "def", "get_all_architectures", "(", "ops", "=", "None", ",", "nodes", "=", "None", ")", ":", "\n", "    ", "''' Yields all architecture configurations in the search space\n    '''", "\n", "search_space", "=", "get_search_space", "(", "ops", ",", "nodes", ")", "\n", "flat", "=", "flatten", "(", "search_space", ")", "\n", "cfg", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "flat", ")", ")", "]", "\n", "end", "=", "False", "\n", "while", "not", "end", ":", "\n", "        ", "yield", "copy_structure", "(", "cfg", ",", "search_space", ")", "\n", "for", "dim", "in", "range", "(", "len", "(", "flat", ")", ")", ":", "\n", "            ", "cfg", "[", "dim", "]", "+=", "1", "\n", "if", "cfg", "[", "dim", "]", "!=", "flat", "[", "dim", "]", ":", "\n", "                ", "break", "\n", "", "cfg", "[", "dim", "]", "=", "0", "\n", "if", "dim", "+", "1", ">=", "len", "(", "flat", ")", ":", "\n", "                ", "end", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_random_architectures": [[50, 65], ["utils.flatten", "random.seed", "len", "utils.copy_structure", "models.append", "range", "random.randrange", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.copy_structure"], ["", "", "", "", "def", "get_random_architectures", "(", "num", ",", "ops", "=", "None", ",", "nodes", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "    ", "''' Get random architecture configurations from the search space\n    '''", "\n", "ops", "=", "ops", "if", "ops", "is", "not", "None", "else", "all_ops", "\n", "nodes", "=", "nodes", "if", "nodes", "is", "not", "None", "else", "default_nodes", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "", "search_space", "=", "[", "[", "len", "(", "ops", ")", "]", "+", "[", "2", "]", "*", "(", "idx", "+", "1", ")", "for", "idx", "in", "range", "(", "nodes", ")", "]", "\n", "flat", "=", "flatten", "(", "search_space", ")", "\n", "models", "=", "[", "]", "\n", "while", "len", "(", "models", ")", "<", "num", ":", "\n", "        ", "m", "=", "[", "random", ".", "randrange", "(", "opts", ")", "for", "opts", "in", "flat", "]", "\n", "m", "=", "copy_structure", "(", "m", ",", "search_space", ")", "\n", "models", ".", "append", "(", "m", ")", "\n", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_archs_with_zero": [[67, 75], ["search_space.get_all_architectures", "utils.flatten", "search_space.get_model_hash", "sorted", "models_with_zero.keys"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_all_architectures", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_model_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "def", "get_archs_with_zero", "(", ")", ":", "\n", "    ", "models_with_zero", "=", "{", "}", "\n", "for", "m", "in", "get_all_architectures", "(", "all_ops", ",", "default_nodes", ")", ":", "\n", "        ", "if", "5", "in", "flatten", "(", "m", ")", ":", "\n", "            ", "h", "=", "get_model_hash", "(", "m", ")", "\n", "models_with_zero", "[", "h", "]", "=", "m", "\n", "", "", "new_model_archs", "=", "[", "models_with_zero", "[", "k", "]", "for", "k", "in", "sorted", "(", "models_with_zero", ".", "keys", "(", ")", ")", "]", "\n", "return", "new_model_archs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.arch_vec_to_names": [[77, 94], ["None"], "function", ["None"], ["", "def", "arch_vec_to_names", "(", "arch_vec", ",", "ops", "=", "None", ")", ":", "\n", "    ", "''' Translates identifiers of operations in ``arch_vec`` to their names.\n        ``ops`` can be provided externally to avoid relying on the current definition\n        of available ops. Otherwise canonical ``all_ops`` will be used.\n    '''", "\n", "\n", "if", "ops", "is", "None", ":", "\n", "        ", "ops", "=", "all_ops", "\n", "\n", "# current approach is to have an arch vector contain sub-vectors for node in a cell,", "\n", "# each subvector has a form of:", "\n", "# [op_idx, branch_op_idx...]", "\n", "# where op_idx points to an operation from ``all_ops`` and ``branch_op_idx`` is", "\n", "# either 0 (no skip connection) or 1 (identity skip connection)", "\n", "# since skip connects are already quite self-explanatory we leave them as they are", "\n", "# and only change numbers of the main operations to their respective names", "\n", "", "return", "[", "[", "all_ops", "[", "op_idx", "]", "]", "+", "branches", "for", "op_idx", ",", "*", "branches", "in", "arch_vec", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset._Dataset.__init__": [[14, 80], ["isinstance", "ValueError", "enumerate", "open", "pickle.load", "pickle.load", "dataset._Dataset.dbs.append", "len", "db.items", "ValueError", "pickle.load.pop", "ValueError", "dataset._Dataset.seeds.append", "dataset._Dataset.dbs[].items", "len", "len", "ValueError", "len", "ValueError", "pickle.load.pop", "ValueError", "dataset._Dataset.devices.append", "ValueError", "ValueError", "print", "ValueError", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_files", ",", "validate_data", ",", "db_type", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset_files", ",", "str", ")", ":", "\n", "            ", "dataset_files", "=", "[", "dataset_files", "]", "\n", "\n", "", "self", ".", "dbs", "=", "[", "]", "\n", "self", ".", "header", "=", "None", "\n", "if", "db_type", "==", "'training'", ":", "\n", "            ", "self", ".", "seeds", "=", "[", "]", "\n", "", "elif", "db_type", "==", "'benchmarking'", ":", "\n", "            ", "self", ".", "devices", "=", "[", "]", "\n", "", "elif", "db_type", "==", "'static'", ":", "\n", "            ", "if", "len", "(", "dataset_files", ")", "!=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Expected exactly one dataste file'", ")", "\n", "\n", "", "", "for", "db_file", "in", "dataset_files", ":", "\n", "            ", "with", "open", "(", "db_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "header", "=", "pickle", ".", "load", "(", "f", ")", "\n", "if", "header", "[", "'dataset_type'", "]", "!=", "db_type", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Expected a dataset file with {db_type} information'", ")", "\n", "\n", "", "if", "db_type", "==", "'training'", ":", "\n", "                    ", "seed", "=", "header", ".", "pop", "(", "'seed'", ")", "\n", "", "elif", "db_type", "==", "'benchmarking'", ":", "\n", "                    ", "device", "=", "header", ".", "pop", "(", "'device'", ")", "\n", "\n", "", "if", "self", ".", "header", "is", "None", ":", "\n", "                    ", "self", ".", "header", "=", "header", "\n", "", "if", "self", ".", "header", "!=", "header", ":", "\n", "                    ", "raise", "ValueError", "(", "'Different dataset files contain data for different settings'", ")", "\n", "\n", "# TODO: we could relax this if needed", "\n", "", "if", "db_type", "==", "'training'", ":", "\n", "                    ", "if", "header", "[", "'columns'", "]", "[", ":", "3", "]", "!=", "[", "'model_hash'", ",", "'val_per'", ",", "'test_per'", "]", ":", "\n", "                        ", "raise", "ValueError", "(", "'In the current implementation we expect the dataset to contain information in order: model hash, val PER, test PER'", ")", "\n", "", "", "elif", "db_type", "==", "'benchmarking'", ":", "\n", "                    ", "if", "header", "[", "'columns'", "]", "[", ":", "2", "]", "!=", "[", "'model_hash'", ",", "'latency'", "]", ":", "\n", "                        ", "raise", "ValueError", "(", "'In the current implementation we expect the dataset to contain information in order: model hash, latency'", ")", "\n", "", "", "elif", "db_type", "==", "'static'", ":", "\n", "                    ", "if", "header", "[", "'columns'", "]", "[", ":", "2", "]", "!=", "[", "'model_hash'", ",", "'params'", "]", ":", "\n", "                        ", "print", "(", "header", "[", "'columns'", "]", ")", "\n", "raise", "ValueError", "(", "'In the current implementation we expect the dataset to contain information in order: model hash, number of parameters'", ")", "\n", "\n", "", "", "if", "db_type", "==", "'training'", ":", "\n", "                    ", "self", ".", "seeds", ".", "append", "(", "seed", ")", "\n", "", "elif", "db_type", "==", "'benchmarking'", ":", "\n", "                    ", "self", ".", "devices", ".", "append", "(", "device", ")", "\n", "", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "data_dict", "=", "{", "model_hash", ":", "rest", "for", "model_hash", ",", "*", "rest", "in", "data", "}", "\n", "self", ".", "dbs", ".", "append", "(", "data_dict", ")", "\n", "\n", "", "", "if", "not", "self", ".", "dbs", ":", "\n", "            ", "raise", "ValueError", "(", "'At least one dataset should be read'", ")", "\n", "\n", "", "if", "validate_data", "and", "len", "(", "self", ".", "dbs", ")", ">", "1", ":", "\n", "#if db_type == 'training':", "\n", "            ", "models", "=", "{", "model_hash", ":", "model_pt", "for", "model_hash", ",", "(", "*", "_", ",", "model_pt", ")", "in", "self", ".", "dbs", "[", "0", "]", ".", "items", "(", ")", "}", "\n", "for", "fidx", ",", "db", "in", "enumerate", "(", "self", ".", "dbs", "[", "1", ":", "]", ")", ":", "\n", "                ", "if", "len", "(", "db", ")", "!=", "len", "(", "models", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Dataset file at position {fidx+1} has {len(db)} entries but the one at position 0 has {len(models)}'", ")", "\n", "", "for", "model_hash", ",", "(", "*", "_", ",", "model_pt", ")", "in", "db", ".", "items", "(", ")", ":", "\n", "                    ", "if", "model_hash", "not", "in", "models", ":", "\n", "                        ", "raise", "ValueError", "(", "f'{model_hash} is present in dataset file {fidx+1} but no in 0'", ")", "\n", "", "if", "db_type", "==", "'training'", ":", "\n", "# even if this is not true, the same model hash should guarantee that the architectures are the same", "\n", "# however, internally we'd expect the points to be the same", "\n", "                        ", "assert", "model_pt", "==", "models", "[", "model_hash", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset._Dataset.version": [[81, 86], ["None"], "methods", ["None"], ["", "", "", "", "", "@", "property", "\n", "def", "version", "(", "self", ")", ":", "\n", "        ", "''' Version of the dataset.\n        '''", "\n", "return", "self", ".", "header", "[", "'version'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset._Dataset.search_space": [[87, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "search_space", "(", "self", ")", ":", "\n", "        ", "''' Search space shape. A (potentially nested) list of integers identifying\n            different choices and their related number of options.\n        '''", "\n", "return", "self", ".", "header", "[", "'search_space'", "]", "[", "'shape'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset._Dataset.ops": [[94, 99], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ops", "(", "self", ")", ":", "\n", "        ", "''' List of the operations which were considered when creating the dataset.\n        '''", "\n", "return", "self", ".", "header", "[", "'search_space'", "]", "[", "'ops'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset._Dataset.nodes": [[100, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nodes", "(", "self", ")", ":", "\n", "        ", "''' Number of nodes which was considered when creating the dataset.\n        '''", "\n", "return", "self", ".", "header", "[", "'search_space'", "]", "[", "'nodes'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset._Dataset.columns": [[106, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "columns", "(", "self", ")", ":", "\n", "        ", "''' Names of values stored in the dataset, in-order.\n            Can be used to identify specific information from values returned by\n            functions which do not convert their results to dictionaries.\n            See the remaining API for more information.\n        '''", "\n", "return", "self", ".", "header", "[", "'columns'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset._Dataset.__contains__": [[115, 118], ["search_space.get_model_hash"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_model_hash"], ["", "def", "__contains__", "(", "self", ",", "arch", ")", ":", "\n", "        ", "h", "=", "search_space", ".", "get_model_hash", "(", "arch", ",", "ops", "=", "self", ".", "ops", ")", "\n", "return", "h", "in", "self", ".", "dbs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.StaticInfoDataset.__init__": [[121, 123], ["dataset._Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_file", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "[", "dataset_file", "]", ",", "False", ",", "'static'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.StaticInfoDataset._get": [[124, 129], ["dataset.StaticInfoDataset.dbs[].get", "dict", "zip"], "methods", ["None"], ["", "def", "_get", "(", "self", ",", "model_hash", ",", "return_dict", ")", ":", "\n", "        ", "r", "=", "self", ".", "dbs", "[", "0", "]", ".", "get", "(", "model_hash", ")", "\n", "if", "return_dict", "and", "r", "is", "not", "None", ":", "\n", "            ", "return", "dict", "(", "zip", "(", "self", ".", "columns", "[", "1", ":", "]", ",", "r", ")", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.StaticInfoDataset.params": [[130, 149], ["search_space.get_model_hash", "dataset.StaticInfoDataset._get"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_model_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.BenchmarkingDataset._get"], ["", "def", "params", "(", "self", ",", "arch", ")", ":", "\n", "        ", "''' Return the number of parameters in a specific architecture.\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                return_dict - (optional) determinates if the returned values will be provided\n                    as a ``dict`` or a scalar value. A ``dict`` contains the same values as\n                    the ``list`` but allows the user to extract them by their names, whereas\n                    a list can be thought of as a single row in a table containing values only.\n                    The user can map particular elements of the returned ``list`` by considering\n                    the values in provided ``devices`` argument. Default: ``False``.\n\n            Returns:\n                ``None`` if information about a given ``arch`` cannot be found in the dataset,\n                otherwise a ``dict`` or a ``list`` containing information about the model.\n        '''", "\n", "model_hash", "=", "search_space", ".", "get_model_hash", "(", "arch", ",", "ops", "=", "self", ".", "ops", ")", "\n", "ret", "=", "self", ".", "_get", "(", "model_hash", ",", "False", ")", "\n", "return", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.BenchmarkingDataset.__init__": [[163, 175], ["dataset._Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "dataset_files", ",", "validate_data", "=", "True", ")", ":", "\n", "        ", "''' Create a new dataset by loading data from the provided list of files.\n\n            If multiple files are given, they should contain information about models\n            from the same search space, benchmarked on different devices.\n\n            If ``validate_data`` is set to ``True``, the data from the files will be validated\n            to check if it's consistent. If the files are known to be ok, the argument can be\n            set to ``False`` to speed up loading time a little bit (or to hack the code if you know\n            what you are doing).\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", "dataset_files", ",", "validate_data", ",", "'benchmarking'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.BenchmarkingDataset._get": [[176, 197], ["zip", "list", "isinstance", "dataset.BenchmarkingDataset.dbs[].get", "range", "dataset.BenchmarkingDataset.devices.index", "raw.append", "dict", "len", "zip"], "methods", ["None"], ["", "def", "_get", "(", "self", ",", "model_hash", ",", "devices", ",", "ret_dict", ")", ":", "\n", "        ", "if", "devices", "is", "None", ":", "\n", "            ", "devices", "=", "self", ".", "devices", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "devices", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "devices", ",", "str", ")", ":", "\n", "                ", "devices", "=", "[", "devices", "]", "\n", "", "indices", "=", "[", "self", ".", "devices", ".", "index", "(", "d", ")", "for", "d", "in", "devices", "]", "\n", "\n", "", "raw", "=", "[", "]", "if", "not", "ret_dict", "else", "{", "}", "\n", "for", "didx", ",", "device_name", "in", "zip", "(", "indices", ",", "devices", ")", ":", "\n", "            ", "value", "=", "self", ".", "dbs", "[", "didx", "]", ".", "get", "(", "model_hash", ")", "\n", "if", "value", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "if", "not", "ret_dict", ":", "\n", "                ", "raw", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "value", "=", "dict", "(", "zip", "(", "self", ".", "columns", "[", "1", ":", "]", ",", "value", ")", ")", "\n", "raw", "[", "device_name", "]", "=", "value", "\n", "\n", "", "", "return", "raw", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.BenchmarkingDataset.latency": [[198, 224], ["search_space.get_model_hash", "dataset.BenchmarkingDataset._get"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_model_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.BenchmarkingDataset._get"], ["", "def", "latency", "(", "self", ",", "arch", ",", "devices", "=", "None", ",", "return_dict", "=", "False", ")", ":", "\n", "        ", "''' Return benchmarking information about a specific architecture on the provided\n            devices from the dataset.\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                device - (optional) if provided, the returned will be information about\n                    the model's performance when run on the device with the given name(s),\n                    otherwise latency on all devices will be returned; accepted values are:\n                    Str, List[Str] and None\n                return_dict - (optional) determinates if the returned values will be provided\n                    as a ``dict`` or a simple ``list``. A ``dict`` contains the same values as\n                    the ``list`` but allows the user to extract them by their names, whereas\n                    a list can be thought of as a single row in a table containing values only.\n                    The user can map particular elements of the returned ``list`` by considering\n                    the values in provided ``devices`` argument. Default: ``False``.\n\n            Returns:\n                ``None`` if information about a given ``arch`` cannot be found in the dataset,\n                otherwise a ``dict`` or a ``list`` containing information about the model.\n\n            Raises:\n                ValueError - if invalid ``device`` is given \n        '''", "\n", "model_hash", "=", "search_space", ".", "get_model_hash", "(", "arch", ",", "ops", "=", "self", ".", "ops", ")", "\n", "return", "self", ".", "_get", "(", "model_hash", ",", "devices", ",", "return_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.__init__": [[241, 259], ["dataset._Dataset.__init__", "dataset.BenchmarkingDataset", "dataset.StaticInfoDataset"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "dataset_files", ",", "devices_files", "=", "None", ",", "static_info", "=", "None", ",", "validate_data", "=", "True", ")", ":", "\n", "        ", "''' Create a new dataset by loading data from the provided list of files.\n\n            If multiple files are given, they should contain information about models\n            trained in the same setting, differing only by their initialization seed.\n\n            If ``validate_data`` is set to ``True``, the data from the files will be validated\n            to check if it's consistent. If the files are known to be ok, the argument can be\n            set to ``False`` to speed up loading time a little bit (or to hack the code if you know\n            what you are doing).\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", "dataset_files", ",", "validate_data", ",", "'training'", ")", "\n", "self", ".", "bench_info", "=", "None", "\n", "self", ".", "static_info", "=", "None", "\n", "if", "devices_files", ":", "\n", "            ", "self", ".", "bench_info", "=", "BenchmarkingDataset", "(", "devices_files", ",", "validate_data", "=", "validate_data", ")", "\n", "", "if", "static_info", ":", "\n", "            ", "self", ".", "static_info", "=", "StaticInfoDataset", "(", "static_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.epochs": [[260, 265], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "epochs", "(", "self", ")", ":", "\n", "        ", "''' Total number of epochs for which the models were trained when creating the dataset.\n        '''", "\n", "return", "self", ".", "header", "[", "'epochs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._get_raw_info": [[266, 271], ["dataset.Dataset.dbs[].get", "list"], "methods", ["None"], ["", "def", "_get_raw_info", "(", "self", ",", "seed_idx", ",", "model_hash", ")", ":", "\n", "        ", "raw", "=", "self", ".", "dbs", "[", "seed_idx", "]", ".", "get", "(", "model_hash", ")", "\n", "if", "raw", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "model_hash", "]", "+", "list", "(", "raw", ")", "+", "[", "self", ".", "seeds", "[", "seed_idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._get_info_dict": [[272, 279], ["dataset.Dataset.dbs[].get", "dict", "zip"], "methods", ["None"], ["", "def", "_get_info_dict", "(", "self", ",", "seed_idx", ",", "model_hash", ")", ":", "\n", "        ", "raw", "=", "self", ".", "dbs", "[", "seed_idx", "]", ".", "get", "(", "model_hash", ")", "\n", "if", "raw", "is", "not", "None", ":", "\n", "            ", "raw", "=", "dict", "(", "zip", "(", "self", ".", "columns", "[", "1", ":", "]", ",", "raw", ")", ")", "\n", "raw", "[", "self", ".", "columns", "[", "0", "]", "]", "=", "model_hash", "\n", "raw", "[", "'seed'", "]", "=", "self", ".", "seeds", "[", "seed_idx", "]", "\n", "", "return", "raw", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._get_info": [[280, 285], ["dataset.Dataset._get_info_dict", "dataset.Dataset._get_raw_info"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._get_info_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._get_raw_info"], ["", "def", "_get_info", "(", "self", ",", "seed_idx", ",", "model_hash", ",", "return_dict", ")", ":", "\n", "        ", "if", "return_dict", ":", "\n", "            ", "return", "self", ".", "_get_info_dict", "(", "seed_idx", ",", "model_hash", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_get_raw_info", "(", "seed_idx", ",", "model_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._query": [[286, 312], ["dataset.Dataset._get_info", "random.randrange", "dataset.Dataset.seeds.index", "dataset.Dataset.bench_info._get", "dataset.Dataset.static_info._get", "len", "ValueError", "dataset.Dataset.update", "dataset.Dataset.extend", "ValueError", "dataset.Dataset.append"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._get_info", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.BenchmarkingDataset._get", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.BenchmarkingDataset._get", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update"], ["", "", "def", "_query", "(", "self", ",", "model_hash", ",", "seed", ",", "devices", ",", "include_static_info", ",", "return_dict", ")", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "seed_idx", "=", "random", ".", "randrange", "(", "len", "(", "self", ".", "seeds", ")", ")", "\n", "", "else", ":", "\n", "            ", "seed_idx", "=", "self", ".", "seeds", ".", "index", "(", "seed", ")", "\n", "\n", "", "ret", "=", "self", ".", "_get_info", "(", "seed_idx", ",", "model_hash", ",", "return_dict", ")", "\n", "if", "devices", "!=", "False", "and", "(", "devices", "is", "not", "None", "or", "self", ".", "bench_info", ")", ":", "\n", "            ", "if", "not", "self", ".", "bench_info", ":", "\n", "                ", "raise", "ValueError", "(", "'No benchmarking information attached'", ")", "\n", "", "lat", "=", "self", ".", "bench_info", ".", "_get", "(", "model_hash", ",", "devices", ",", "return_dict", ")", "\n", "if", "return_dict", ":", "\n", "               ", "ret", ".", "update", "(", "lat", ")", "\n", "", "else", ":", "\n", "                ", "ret", ".", "extend", "(", "lat", ")", "\n", "\n", "", "", "if", "include_static_info", ":", "\n", "            ", "if", "not", "self", ".", "static_info", ":", "\n", "                ", "raise", "ValueError", "(", "'No static information attached'", ")", "\n", "", "info", "=", "self", ".", "static_info", ".", "_get", "(", "model_hash", ",", "return_dict", ")", "\n", "if", "return_dict", ":", "\n", "                ", "ret", "[", "'info'", "]", "=", "info", "\n", "", "else", ":", "\n", "                ", "ret", ".", "append", "(", "info", ")", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.full_info": [[313, 347], ["search_space.get_model_hash", "dataset.Dataset._query"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.search_space.get_model_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._query"], ["", "def", "full_info", "(", "self", ",", "arch", ",", "seed", "=", "None", ",", "devices", "=", "None", ",", "include_static_info", "=", "None", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "''' Return all information about a specific architecture from the dataset.\n            If multiple seeds are available, the can either return information about\n            a specific one or a random one.\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                seed - (optional) if provided, the returned will be information about\n                    the model's performance when initialized with this particular seed,\n                    otherwise information related to a randomly chosen seed from the list\n                    if available ones will be used. Default: random seed\n                devices - (optional) add information about benchmarking on the provided devices,\n                    if ``None`` all available devices are included, otherwise should be a name of\n                    the device or a list of names, can also be exactly ``False`` to avoid including\n                    benchmarking information even when they are available\n                include_static_info - (optional) include static information about the model,\n                    such as number of parameters, if set to ``None`` static information will be\n                    added only if available\n                return_dict - (optional) determinates if the returned values will be provided\n                    as a ``dict`` or a simple ``list``. A ``dict`` contains the same values as\n                    the ``list`` but alolws the user to extract them by their names, whereas\n                    a list can be thought of as a single row in a table containing values only.\n                    The user can map particular elements of the returned ``list`` by considering\n                    the values in ``columns``. Default: ``True``.\n\n            Returns:\n                ``None`` if information about a given ``arch`` cannot be found in the dataset,\n                otherwise a ``dict`` or a ``list`` containing information about the model.\n\n            Raises:\n                ValueError - if invalid ``seed`` is given \n        '''", "\n", "model_hash", "=", "search_space", ".", "get_model_hash", "(", "arch", ",", "ops", "=", "self", ".", "ops", ")", "\n", "return", "self", ".", "_query", "(", "model_hash", ",", "seed", ",", "devices", ",", "include_static_info", ",", "return_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.full_info_by_graph": [[348, 384], ["graph_utils.graph_hash", "dataset.Dataset._query"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.graph_utils.graph_hash", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset._query"], ["", "def", "full_info_by_graph", "(", "self", ",", "graph", ",", "seed", "=", "None", ",", "devices", "=", "None", ",", "include_static_info", "=", "None", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "''' Return all information about an architecture identified by the provided model\n            graph.\n            If multiple seeds are available, the can either return information about\n            a specific one or a random one.\n\n            Arguments:\n                graph - a graph of a model from the search space, obtained by calling\n                    ``nasbench_asr.graph_utils.get_model_graph(arch)``\n                seed - (optional) if provided, the returned will be information about\n                    the model's performance when initialized with this particular seed,\n                    otherwise information related to a randomly chosen seed from the list\n                    if available ones will be used. Default: random seed\n                devices - (optional) add information about benchmarking on the provided devices,\n                    if ``None`` all available devices are included, otherwise should be a name of\n                    the device or a list of names, can also be exactly ``False`` to avoid including\n                    benchmarking information even when they are available\n                include_static_info - (optional) include static information about the model,\n                    such as number of parameters, if set to ``None`` static information will be\n                    added only if available\n                return_dict - (optional) determinates if the returned values will be provided\n                    as a ``dict`` or a simple ``list``. A ``dict`` contains the same values as\n                    the ``list`` but allows the user to extract them by their names, whereas\n                    a list can be thought of as a single row in a table containing values only.\n                    The user can map particular elements of the returned ``list`` by considering\n                    the values in ``columns``. Default: ``True``.\n\n            Returns:\n                ``None`` if information about a given ``arch`` cannot be found in the dataset,\n                otherwise a ``dict`` or a ``list`` containing information about the model.\n\n            Raises:\n                ValueError - if invalid ``seed`` is given\n        '''", "\n", "model_hash", "=", "graph_utils", ".", "graph_hash", "(", "graph", ")", "\n", "return", "self", ".", "_query", "(", "model_hash", ",", "seed", ",", "devices", ",", "include_static_info", ",", "return_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.test_acc": [[385, 404], ["dataset.Dataset.full_info"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.full_info"], ["", "def", "test_acc", "(", "self", ",", "arch", ",", "seed", "=", "None", ")", ":", "\n", "        ", "''' Return test PER of a model.\n\n            Test PER is currently defined as the test PER of the model at epoch\n            with the lowest validation PER.\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                seed - (optional) an initialization seed to use, if not provided information\n                    will be queried for a random seed (default: ``None``)\n\n            Returns:\n                ``None`` if the dataset does not contain information about a model ``arch``,\n                otherwise a scalar ``float``.\n        '''", "\n", "info", "=", "self", ".", "full_info", "(", "arch", ",", "seed", "=", "seed", ",", "devices", "=", "False", ",", "include_static_info", "=", "False", ",", "return_dict", "=", "False", ")", "\n", "if", "info", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "info", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.val_acc": [[405, 437], ["dataset.Dataset.full_info", "len", "min"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.full_info"], ["", "def", "val_acc", "(", "self", ",", "arch", ",", "epoch", "=", "None", ",", "best", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "''' Return validation PER of a model.\n\n            The returned PER can be either the best PER or the PER at the last epoch.\n            The maximum number of epochs to consider can be controlled by ``epoch``.\n\n            If ``vals`` is a list of validation PERs, the returned value can be\n            defined as:\n\n                epoch = epoch if epoch is not None else len(vals)\n                return min(vals[:epoch]) if best else vals[epoch-1]\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                epoch - (optional) number of epochs to consider, if not provided\n                    all epochs will be considered (default: ``None``)\n                best - (optional) return best validation PER from epoch 1 to the\n                    maximum considered epochs, otherwise return PER at the last\n                    considered epoch (default: ``True``)\n                seed - (optional) an initialization seed to use, if not provided information\n                    will be queried for a random seed (default: ``None``)\n\n        '''", "\n", "info", "=", "self", ".", "full_info", "(", "arch", ",", "seed", "=", "seed", ",", "devices", "=", "False", ",", "include_static_info", "=", "False", ",", "return_dict", "=", "False", ")", "\n", "if", "info", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "len", "(", "info", "[", "1", "]", ")", "\n", "", "if", "best", ":", "\n", "            ", "return", "min", "(", "info", "[", "1", "]", "[", ":", "epoch", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "info", "[", "1", "]", "[", "epoch", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.latency": [[438, 444], ["functools.wraps", "dataset.Dataset.bench_info.latency", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.latency"], ["", "", "@", "functools", ".", "wraps", "(", "BenchmarkingDataset", ".", "latency", ")", "\n", "def", "latency", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "bench_info", ":", "\n", "            ", "raise", "ValueError", "(", "'No benchmarking information attached'", ")", "\n", "\n", "", "return", "self", ".", "bench_info", ".", "latency", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.params": [[445, 451], ["functools.wraps", "dataset.Dataset.static_info.params", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.Dataset.params"], ["", "@", "functools", ".", "wraps", "(", "StaticInfoDataset", ".", "params", ")", "\n", "def", "params", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "static_info", ":", "\n", "            ", "raise", "ValueError", "(", "'No static information attached'", ")", "\n", "\n", "", "return", "self", ".", "static_info", ".", "params", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.dataset.from_folder": [[454, 533], ["pathlib.Path().expanduser", "re.compile", "pathlib.Path().expanduser.iterdir", "dataset.Dataset", "ValueError", "re.compile", "ff.is_file", "pathlib.Path", "pathlib.Path().expanduser.exists", "pathlib.Path().expanduser.is_dir", "isinstance", "str", "re.compile.fullmatch", "isinstance", "isinstance", "str", "datasets.append", "regex2.fullmatch", "bench_info.append", "str", "isinstance", "str", "str", "map", "map"], "function", ["None"], ["", "", "def", "from_folder", "(", "folder", ",", "max_epochs", "=", "None", ",", "seeds", "=", "None", ",", "devices", "=", "None", ",", "include_static_info", "=", "False", ",", "validate_data", "=", "True", ")", ":", "\n", "    ", "''' Create a ``Dataset`` object from files in a given directory.\n        Arguments control what subset of the files will be used.\n\n        Recognizable files should have names following the pattern::\n\n            - nb-asr-e{max_epochs}-{seed}.pickle for training datasets\n            - nb-asr-bench-{device}.pickle for benchmarking datasets\n            - nb-asr-info.pickle for static information dataset\n\n        Arguments:\n            max_epochs - load dataset files related to accuracy of models\n                when trained with at most ``max_epochs`` of training.\n                The related files should have a 'e{max_epochs}' component\n                in their name. If the argument is ``None``, load the dataset\n                related to full training.\n            seeds - if not provided the created dataset will use all available\n                seeds (each file should hold information about one seed only).\n                Otherwise it can be a single value or a list seeds to use.\n                The function will not check if the file(s) for the provided seed(s)\n                exist(s) and will fail silently (i.e., the resulting\n                dataset simply won't include results for the provided seed)\n            devices - (optional) add information about benchmarking on the provided devices,\n                if ``None`` all available devices are included, otherwise should be a name of\n                the device or a list of names, can also be exactly ``False`` to avoid including\n                benchmarking information even when they are available\n            include_static_info - (optional) include static information about the model,\n                such as number of parameters\n            validate_data - passed to ``Dataset`` constructor, if ``True`` the dataset\n                will be validated to check consistency of the data. Can be set to ``False``\n                to speed up loading if the data is known to be valid.\n\n        Raises:\n            ValueError - if ``folder`` is not a directory or does not exist\n            ValueError - if any of the loaded dataset files contain \n    '''", "\n", "f", "=", "pathlib", ".", "Path", "(", "folder", ")", ".", "expanduser", "(", ")", "\n", "if", "not", "f", ".", "exists", "(", ")", "or", "not", "f", ".", "is_dir", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'{folder} is not a directory'", ")", "\n", "\n", "", "if", "max_epochs", "is", "None", ":", "\n", "        ", "max_epochs", "=", "40", "\n", "\n", "", "max_epochs", "=", "f'e{max_epochs}-'", "\n", "\n", "if", "seeds", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "seeds", ",", "cabc", ".", "Sequence", ")", "and", "not", "isinstance", "(", "seeds", ",", "str", ")", ":", "\n", "            ", "seeds", "=", "'('", "+", "'|'", ".", "join", "(", "map", "(", "str", ",", "seeds", ")", ")", "+", "')'", "\n", "", "else", ":", "\n", "            ", "seeds", "=", "str", "(", "seeds", ")", "\n", "", "", "else", ":", "\n", "        ", "seeds", "=", "'[0-9]+'", "\n", "\n", "", "if", "devices", "!=", "False", ":", "\n", "        ", "if", "devices", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "devices", ",", "cabc", ".", "Sequence", ")", "and", "not", "isinstance", "(", "devices", ",", "str", ")", ":", "\n", "                ", "devices", "=", "'('", "+", "'|'", ".", "join", "(", "map", "(", "str", ",", "devices", ")", ")", "+", "')'", "\n", "", "else", ":", "\n", "                ", "devices", "=", "str", "(", "devices", ")", "\n", "", "", "else", ":", "\n", "            ", "devices", "=", "'[a-zA-Z0-9-]+'", "\n", "\n", "", "", "datasets", "=", "[", "]", "\n", "bench_info", "=", "[", "]", "\n", "static_info", "=", "None", "\n", "\n", "regex", "=", "re", ".", "compile", "(", "f'nb-asr-{max_epochs}{seeds}.pickle'", ")", "\n", "regex2", "=", "re", ".", "compile", "(", "f'nb-asr-bench-{devices}.pickle'", ")", "if", "devices", "else", "None", "\n", "for", "ff", "in", "f", ".", "iterdir", "(", ")", ":", "\n", "        ", "if", "ff", ".", "is_file", "(", ")", ":", "\n", "            ", "if", "regex", ".", "fullmatch", "(", "ff", ".", "name", ")", ":", "\n", "                ", "datasets", ".", "append", "(", "str", "(", "ff", ")", ")", "\n", "", "if", "devices", "and", "regex2", ".", "fullmatch", "(", "ff", ".", "name", ")", ":", "\n", "                ", "bench_info", ".", "append", "(", "str", "(", "ff", ")", ")", "\n", "", "if", "include_static_info", "and", "ff", ".", "name", "==", "'nb-asr-info.pickle'", ":", "\n", "                ", "static_info", "=", "str", "(", "ff", ")", "\n", "\n", "\n", "", "", "", "return", "Dataset", "(", "datasets", ",", "bench_info", ",", "static_info", ",", "validate_data", "=", "validate_data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.LazyModule.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "module", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.LazyModule.__repr__": [[11, 13], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.LazyModule.__getattr__": [[14, 16], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.staticproperty.__init__": [[35, 43], ["property.__init__", "ValueError", "ValueError", "ValueError", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fget", "=", "None", ",", "fset", "=", "None", ",", "fdel", "=", "None", ",", "doc", "=", "None", ")", ":", "\n", "        ", "if", "fget", "is", "not", "None", "and", "not", "isinstance", "(", "fget", ",", "staticmethod", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'fget should be a staticmethod'", ")", "\n", "", "if", "fset", "is", "not", "None", "and", "not", "isinstance", "(", "fset", ",", "staticmethod", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'fset should be a staticmethod'", ")", "\n", "", "if", "fdel", "is", "not", "None", "and", "not", "isinstance", "(", "fdel", ",", "staticmethod", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'fdel should be a staticmethod'", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "fget", ",", "fset", ",", "fdel", ",", "doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.staticproperty.__get__": [[44, 50], ["AttributeError", "utils.staticproperty.fget.__get__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.staticproperty.__get__"], ["", "def", "__get__", "(", "self", ",", "inst", ",", "cls", "=", "None", ")", ":", "\n", "        ", "if", "inst", "is", "None", ":", "\n", "            ", "return", "self", "\n", "", "if", "self", ".", "fget", "is", "None", ":", "\n", "            ", "raise", "AttributeError", "(", "\"unreadable attribute\"", ")", "\n", "", "return", "self", ".", "fget", ".", "__get__", "(", "inst", ",", "cls", ")", "(", ")", "# pylint: disable=no-member", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.staticproperty.__set__": [[51, 55], ["AttributeError", "utils.staticproperty.fset.__get__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.staticproperty.__get__"], ["", "def", "__set__", "(", "self", ",", "inst", ",", "val", ")", ":", "\n", "        ", "if", "self", ".", "fset", "is", "None", ":", "\n", "            ", "raise", "AttributeError", "(", "\"can't set attribute\"", ")", "\n", "", "return", "self", ".", "fset", ".", "__get__", "(", "inst", ")", "(", "val", ")", "# pylint: disable=no-member", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.staticproperty.__delete__": [[56, 60], ["AttributeError", "utils.staticproperty.fdel.__get__"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.staticproperty.__get__"], ["", "def", "__delete__", "(", "self", ",", "inst", ")", ":", "\n", "        ", "if", "self", ".", "fdel", "is", "None", ":", "\n", "            ", "raise", "AttributeError", "(", "\"can't delete attribute\"", ")", "\n", "", "return", "self", ".", "fdel", ".", "__get__", "(", "inst", ")", "(", ")", "# pylint: disable=no-member", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.BackendsAccessor.__init__": [[115, 120], ["pathlib.Path", "utils.BackendsAccessor.parent_module_path.iterdir", "d.is_dir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parent_module_init", ",", "parent_module_name", ")", ":", "\n", "        ", "self", ".", "parent_module_path", "=", "pathlib", ".", "Path", "(", "parent_module_init", ")", ".", "parent", "\n", "self", ".", "parent_module_name", "=", "parent_module_name", "\n", "self", ".", "backends", "=", "{", "}", "\n", "self", ".", "available_backends", "=", "[", "d", ".", "name", "for", "d", "in", "self", ".", "parent_module_path", ".", "iterdir", "(", ")", "if", "d", ".", "is_dir", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.BackendsAccessor._check_backend": [[121, 134], ["ValueError", "ImportError", "ImportError"], "methods", ["None"], ["", "def", "_check_backend", "(", "self", ",", "backend", ")", ":", "\n", "        ", "if", "backend", "==", "'tf'", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "nasbench_asr", ".", "quiet_tensorflow", "import", "tensorflow", "as", "_", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "                ", "raise", "ImportError", "(", "'Tensorflow backend not available'", ")", "from", "e", "\n", "", "", "elif", "backend", "==", "'torch'", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "torch", "as", "_", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "                ", "raise", "ImportError", "(", "'PyTorch backend not available'", ")", "from", "e", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unknown backend: {backend}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.BackendsAccessor._deduce_backend": [[135, 149], ["ImportError", "utils.BackendsAccessor._check_backend", "utils.BackendsAccessor._check_backend"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.BackendsAccessor._check_backend", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.BackendsAccessor._check_backend"], ["", "", "def", "_deduce_backend", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "_check_backend", "(", "'tf'", ")", "\n", "return", "'tf'", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "_check_backend", "(", "'torch'", ")", "\n", "return", "'torch'", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "\n", "", "raise", "ImportError", "(", "'Neither tensorflow nor torch package could not be imported - at least one should be available to train/create models'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.BackendsAccessor.get_backend": [[150, 166], ["importlib.import_module", "utils.BackendsAccessor._deduce_backend", "utils.BackendsAccessor._check_backend"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.BackendsAccessor._deduce_backend", "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.BackendsAccessor._check_backend"], ["", "def", "get_backend", "(", "self", ",", "backend", ",", "set_default", "=", "False", ")", ":", "\n", "        ", "if", "backend", "in", "self", ".", "backends", ":", "\n", "            ", "return", "self", ".", "backends", "[", "backend", "]", "\n", "\n", "", "is_none", "=", "False", "\n", "if", "backend", "is", "None", ":", "\n", "            ", "backend", "=", "self", ".", "_deduce_backend", "(", ")", "\n", "is_none", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "_check_backend", "(", "backend", ")", "\n", "\n", "", "backend_impl", "=", "importlib", ".", "import_module", "(", "f'.{backend}'", ",", "self", ".", "parent_module_name", ")", "\n", "self", ".", "backends", "[", "backend", "]", "=", "backend_impl", "\n", "if", "is_none", "or", "set_default", ":", "\n", "            ", "self", ".", "backends", "[", "None", "]", "=", "backend_impl", "\n", "", "return", "backend_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.add_module_properties": [[18, 32], ["isinstance", "properties.items", "type", "type", "setattr", "type."], "function", ["None"], ["", "", "def", "add_module_properties", "(", "module_name", ",", "properties", ")", ":", "\n", "    ", "module", "=", "sys", ".", "modules", "[", "module_name", "]", "\n", "replace", "=", "False", "\n", "if", "isinstance", "(", "module", ",", "LazyModule", ")", ":", "\n", "        ", "lazy_type", "=", "type", "(", "module", ")", "\n", "", "else", ":", "\n", "        ", "lazy_type", "=", "type", "(", "'LazyModule({})'", ".", "format", "(", "module_name", ")", ",", "(", "LazyModule", ",", ")", ",", "{", "}", ")", "\n", "replace", "=", "True", "\n", "\n", "", "for", "name", ",", "prop", "in", "properties", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "lazy_type", ",", "name", ",", "prop", ")", "\n", "\n", "", "if", "replace", ":", "\n", "        ", "sys", ".", "modules", "[", "module_name", "]", "=", "lazy_type", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.recursive_iter": [[63, 72], ["isinstance", "utils.recursive_iter"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.recursive_iter"], ["", "", "def", "recursive_iter", "(", "seq", ")", ":", "\n", "    ", "''' Iterate over elements in seq recursively (returns only non-sequences)\n    '''", "\n", "if", "isinstance", "(", "seq", ",", "collections", ".", "abc", ".", "Sequence", ")", ":", "\n", "        ", "for", "e", "in", "seq", ":", "\n", "            ", "for", "v", "in", "recursive_iter", "(", "e", ")", ":", "\n", "                ", "yield", "v", "\n", "", "", "", "else", ":", "\n", "        ", "yield", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.flatten": [[74, 78], ["list", "utils.recursive_iter"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.recursive_iter"], ["", "", "def", "flatten", "(", "seq", ")", ":", "\n", "    ", "''' Flatten all nested sequences, returned type is type of ``seq``\n    '''", "\n", "return", "list", "(", "recursive_iter", "(", "seq", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.copy_structure": [[80, 93], ["utils.recursive_iter", "utils.copy_structure.copy_level"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.recursive_iter"], ["", "def", "copy_structure", "(", "data", ",", "shape", ")", ":", "\n", "    ", "''' Put data from ``data`` into nested containers like in ``shape``.\n        This can be seen as \"unflatten\" operation, i.e.:\n            seq == copy_structure(flatten(seq), seq)\n    '''", "\n", "d_it", "=", "recursive_iter", "(", "data", ")", "\n", "\n", "def", "copy_level", "(", "s", ")", ":", "\n", "        ", "if", "isinstance", "(", "s", ",", "collections", ".", "abc", ".", "Sequence", ")", ":", "\n", "            ", "return", "type", "(", "s", ")", "(", "copy_level", "(", "ss", ")", "for", "ss", "in", "s", ")", "\n", "", "else", ":", "\n", "            ", "return", "next", "(", "d_it", ")", "\n", "", "", "return", "copy_level", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.count": [[95, 102], ["None"], "function", ["None"], ["", "def", "count", "(", "seq", ")", ":", "\n", "    ", "''' Count elements in ``seq`` in a streaming manner.\n    '''", "\n", "ret", "=", "0", "\n", "for", "_", "in", "seq", ":", "\n", "        ", "ret", "+=", "1", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.get_first_n": [[104, 112], ["iter", "next"], "function", ["None"], ["", "def", "get_first_n", "(", "seq", ",", "n", ")", ":", "\n", "    ", "''' Get first ``n`` elements of ``seq`` in a streaming manner.\n    '''", "\n", "c", "=", "0", "\n", "i", "=", "iter", "(", "seq", ")", "\n", "while", "c", "<", "n", ":", "\n", "        ", "yield", "next", "(", "i", ")", "\n", "c", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nasbench_asr.utils.make_nice_number": [[168, 176], ["str", "len", "len", "len", "range", "range"], "function", ["None"], ["", "", "def", "make_nice_number", "(", "num", ")", ":", "\n", "    ", "n", "=", "str", "(", "num", ")", "\n", "parts", "=", "(", "len", "(", "n", ")", "-", "1", ")", "//", "3", "+", "1", "\n", "if", "parts", "==", "1", ":", "\n", "        ", "return", "n", "\n", "", "offset", "=", "len", "(", "n", ")", "%", "3", "or", "3", "\n", "breaks", "=", "[", "0", "]", "+", "[", "offset", "+", "i", "*", "3", "for", "i", "in", "range", "(", "parts", ")", "]", "+", "[", "len", "(", "n", ")", "]", "\n", "return", "','", ".", "join", "(", "n", "[", "breaks", "[", "i", "]", ":", "breaks", "[", "i", "+", "1", "]", "]", "for", "i", "in", "range", "(", "parts", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.__init__": [[25, 42], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["None"], ["(", "'avg_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "1", ")", ",", "\n", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "reduce", "=", "[", "\n", "(", "'sep_conv_5x5'", ",", "1", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "0", ")", ",", "\n", "(", "'skip_connect'", ",", "3", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "2", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "2", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "]", ",", "\n", "reduce_concat", "=", "[", "4", ",", "5", ",", "6", "]", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tolist": [[43, 55], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["None"], [")", "\n", "\n", "AmoebaNet", "=", "Genotype", "(", "\n", "normal", "=", "[", "\n", "(", "'avg_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "2", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "3", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.node": [[56, 59], ["len", "len"], "methods", ["None"], ["(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "]", ",", "\n", "normal_concat", "=", "[", "4", ",", "5", ",", "6", "]", ",", "\n", "reduce", "=", "[", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tostr": [[60, 67], ["strings.append"], "methods", ["None"], ["(", "'avg_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "2", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.check_valid": [[68, 80], ["enumerate", "sums.append", "sum", "len"], "methods", ["None"], ["(", "'conv_7x1_1x7'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "5", ")", ",", "\n", "]", ",", "\n", "reduce_concat", "=", "[", "3", ",", "4", ",", "6", "]", "\n", ")", "\n", "\n", "BANANAS", "=", "Genotype", "(", "normal", "=", "[", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_5x5'", ",", "2", ")", ",", "(", "'sep_conv_5x5'", ",", "0", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_5x5'", ",", "2", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "[", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'none'", ",", "1", ")", ",", "(", "'dil_conv_3x3'", ",", "2", ")", ",", "(", "'sep_conv_5x5'", ",", "3", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "4", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", "]", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.to_unique_str": [[81, 105], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["None"], ["DARTS_V1", "=", "Genotype", "(", "normal", "=", "[", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "[", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "\n", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'avg_pool_3x3'", ",", "0", ")", "]", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "DARTS_V2", "=", "Genotype", "(", "normal", "=", "[", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'dil_conv_3x3'", ",", "2", ")", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "[", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "\n", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", "]", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "DARTS", "=", "DARTS_V2", "\n", "\n", "ASHA200", "=", "Genotype", "(", "normal", "=", "[", "(", "'skip_connect'", ",", "1", ")", ",", "(", "'dil_conv_3x3'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "\n", "(", "'none'", ",", "1", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "1", ")", ",", "(", "'dil_conv_3x3'", ",", "0", ")", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "[", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'avg_pool_3x3'", ",", "0", ")", ",", "(", "'sep_conv_5x5'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'max_pool_3x3'", ",", "3", ")", ",", "(", "'none'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_5x5'", ",", "4", ")", "]", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.check_valid_op": [[106, 112], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.__repr__": [[113, 116], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tostr"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.__len__": [[117, 119], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.__getitem__": [[120, 122], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.str2structure": [[123, 135], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.str2fullstructure": [[136, 152], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.gen_all": [[153, 174], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.get_combination", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.get_combination"], []], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.get_combination": [[7, 21], ["range", "combs.append", "new_combs.append"], "function", ["None"], ["'max_pool_3x3'", ",", "\n", "'avg_pool_3x3'", ",", "\n", "'skip_connect'", ",", "\n", "'sep_conv_3x3'", ",", "\n", "'sep_conv_5x5'", ",", "\n", "'dil_conv_3x3'", ",", "\n", "'dil_conv_5x5'", "\n", "]", "\n", "\n", "NASNet", "=", "Genotype", "(", "\n", "normal", "=", "[", "\n", "(", "'sep_conv_5x5'", ",", "1", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.__init__": [[49, 77], ["isinstance", "copy.deepcopy", "collections.OrderedDict", "collections.OrderedDict", "sorted", "sorted", "enumerate", "isinstance", "isinstance", "str", "os.path.isfile", "torch.load", "isinstance", "type", "list", "api.ArchResults.create_from_state_dict", "api.ArchResults.create_from_state_dict", "list", "print", "pathlib.Path", "copy.deepcopy", "ValueError", "file_path_or_dict[].keys", "type"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["def", "__init__", "(", "self", ",", "file_path_or_dict", ":", "Union", "[", "Text", ",", "Dict", "]", ",", "verbose", ":", "bool", "=", "True", ")", ":", "\n", "    ", "self", ".", "filename", "=", "None", "\n", "if", "isinstance", "(", "file_path_or_dict", ",", "str", ")", "or", "isinstance", "(", "file_path_or_dict", ",", "Path", ")", ":", "\n", "      ", "file_path_or_dict", "=", "str", "(", "file_path_or_dict", ")", "\n", "if", "verbose", ":", "print", "(", "'try to create the NAS-Bench-201 api from {:}'", ".", "format", "(", "file_path_or_dict", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "file_path_or_dict", ")", ",", "'invalid path : {:}'", ".", "format", "(", "file_path_or_dict", ")", "\n", "self", ".", "filename", "=", "Path", "(", "file_path_or_dict", ")", ".", "name", "\n", "file_path_or_dict", "=", "torch", ".", "load", "(", "file_path_or_dict", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "isinstance", "(", "file_path_or_dict", ",", "dict", ")", ":", "\n", "      ", "file_path_or_dict", "=", "copy", ".", "deepcopy", "(", "file_path_or_dict", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid type : {:} not in [str, dict]'", ".", "format", "(", "type", "(", "file_path_or_dict", ")", ")", ")", "\n", "assert", "isinstance", "(", "file_path_or_dict", ",", "dict", ")", ",", "'It should be a dict instead of {:}'", ".", "format", "(", "type", "(", "file_path_or_dict", ")", ")", "\n", "self", ".", "verbose", "=", "verbose", "# [TODO] a flag indicating whether to print more logs", "\n", "keys", "=", "(", "'meta_archs'", ",", "'arch2infos'", ",", "'evaluated_indexes'", ")", "\n", "for", "key", "in", "keys", ":", "assert", "key", "in", "file_path_or_dict", ",", "'Can not find key[{:}] in the dict'", ".", "format", "(", "key", ")", "\n", "self", ".", "meta_archs", "=", "copy", ".", "deepcopy", "(", "file_path_or_dict", "[", "'meta_archs'", "]", ")", "\n", "self", ".", "arch2infos_less", "=", "OrderedDict", "(", ")", "\n", "self", ".", "arch2infos_full", "=", "OrderedDict", "(", ")", "\n", "for", "xkey", "in", "sorted", "(", "list", "(", "file_path_or_dict", "[", "'arch2infos'", "]", ".", "keys", "(", ")", ")", ")", ":", "\n", "      ", "all_info", "=", "file_path_or_dict", "[", "'arch2infos'", "]", "[", "xkey", "]", "\n", "self", ".", "arch2infos_less", "[", "xkey", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "all_info", "[", "'less'", "]", ")", "\n", "self", ".", "arch2infos_full", "[", "xkey", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "all_info", "[", "'full'", "]", ")", "\n", "", "self", ".", "evaluated_indexes", "=", "sorted", "(", "list", "(", "file_path_or_dict", "[", "'evaluated_indexes'", "]", ")", ")", "\n", "self", ".", "archstr2index", "=", "{", "}", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "self", ".", "meta_archs", ")", ":", "\n", "#assert arch.tostr() not in self.archstr2index, 'This [{:}]-th arch {:} already in the dict ({:}).'.format(idx, arch, self.archstr2index[arch.tostr()])", "\n", "      ", "assert", "arch", "not", "in", "self", ".", "archstr2index", ",", "'This [{:}]-th arch {:} already in the dict ({:}).'", ".", "format", "(", "idx", ",", "arch", ",", "self", ".", "archstr2index", "[", "arch", "]", ")", "\n", "self", ".", "archstr2index", "[", "arch", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.__getitem__": [[78, 80], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "meta_archs", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "meta_archs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.__repr__": [[84, 86], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}({num}/{total} architectures, file={filename})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "num", "=", "len", "(", "self", ".", "evaluated_indexes", ")", ",", "total", "=", "len", "(", "self", ".", "meta_archs", ")", ",", "filename", "=", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.random": [[87, 90], ["random.randint", "len"], "methods", ["None"], ["", "def", "random", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return a random index of all architectures.\"\"\"", "\n", "return", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "meta_archs", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.query_index_by_arch": [[97, 106], ["isinstance", "hasattr", "arch.tostr", "arch.tostr"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tostr", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.tostr"], ["", "def", "query_index_by_arch", "(", "self", ",", "arch", ")", ":", "\n", "    ", "if", "isinstance", "(", "arch", ",", "str", ")", ":", "\n", "      ", "if", "arch", "in", "self", ".", "archstr2index", ":", "arch_index", "=", "self", ".", "archstr2index", "[", "arch", "]", "\n", "else", ":", "arch_index", "=", "-", "1", "\n", "", "elif", "hasattr", "(", "arch", ",", "'tostr'", ")", ":", "\n", "      ", "if", "arch", ".", "tostr", "(", ")", "in", "self", ".", "archstr2index", ":", "arch_index", "=", "self", ".", "archstr2index", "[", "arch", ".", "tostr", "(", ")", "]", "\n", "else", ":", "arch_index", "=", "-", "1", "\n", "", "else", ":", "arch_index", "=", "-", "1", "\n", "return", "arch_index", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.reload": [[107, 121], ["os.path.isdir", "os.path.join", "os.path.isfile", "torch.load", "api.ArchResults.create_from_state_dict", "api.ArchResults.create_from_state_dict", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.create_from_state_dict"], ["", "def", "reload", "(", "self", ",", "archive_root", ":", "Text", ",", "index", ":", "int", ")", ":", "\n", "    ", "\"\"\"Overwrite all information of the 'index'-th architecture in the search space.\n         It will load its data from 'archive_root'.\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "archive_root", ")", ",", "'invalid directory : {:}'", ".", "format", "(", "archive_root", ")", "\n", "xfile_path", "=", "os", ".", "path", ".", "join", "(", "archive_root", ",", "'{:06d}-FULL.pth'", ".", "format", "(", "index", ")", ")", "\n", "assert", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ",", "'invalid index of {:}'", ".", "format", "(", "index", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "xfile_path", ")", ",", "'invalid data path : {:}'", ".", "format", "(", "xfile_path", ")", "\n", "xdata", "=", "torch", ".", "load", "(", "xfile_path", ",", "map_location", "=", "'cpu'", ")", "\n", "assert", "isinstance", "(", "xdata", ",", "dict", ")", "and", "'full'", "in", "xdata", "and", "'less'", "in", "xdata", ",", "'invalid format of data in {:}'", ".", "format", "(", "xfile_path", ")", "\n", "if", "index", "in", "self", ".", "arch2infos_less", ":", "del", "self", ".", "arch2infos_less", "[", "index", "]", "\n", "if", "index", "in", "self", ".", "arch2infos_full", ":", "del", "self", ".", "arch2infos_full", "[", "index", "]", "\n", "self", ".", "arch2infos_less", "[", "index", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "xdata", "[", "'less'", "]", ")", "\n", "self", ".", "arch2infos_full", "[", "index", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "xdata", "[", "'full'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.clear_params": [[122, 138], ["api.NASBench201API.arch2infos_less[].clear_params", "api.NASBench201API.arch2infos_full[].clear_params", "arch2infos[].clear_params"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.clear_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.clear_params", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.clear_params"], ["", "def", "clear_params", "(", "self", ",", "index", ":", "int", ",", "use_12epochs_result", ":", "Union", "[", "bool", ",", "None", "]", ")", ":", "\n", "    ", "\"\"\"Remove the architecture's weights to save memory.\n    :arg\n      index: the index of the target architecture\n      use_12epochs_result: a flag to controll how to clear the parameters.\n        -- None: clear all the weights in both `less` and `full`, which indicates the training hyper-parameters.\n        -- True: clear all the weights in arch2infos_less, which by default is 12-epoch-training result.\n        -- False: clear all the weights in arch2infos_full, which by default is 200-epoch-training result.\n    \"\"\"", "\n", "if", "use_12epochs_result", "is", "None", ":", "\n", "      ", "self", ".", "arch2infos_less", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "self", ".", "arch2infos_full", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "", "else", ":", "\n", "      ", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch2infos", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.query_by_arch": [[144, 158], ["isinstance", "api.NASBench201API.query_index_by_arch", "api.print_information", "print"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.query_index_by_arch", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.print_information"], ["", "", "def", "query_by_arch", "(", "self", ",", "arch", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "arch", ",", "int", ")", ":", "\n", "      ", "arch_index", "=", "arch", "\n", "", "else", ":", "\n", "      ", "arch_index", "=", "self", ".", "query_index_by_arch", "(", "arch", ")", "\n", "", "if", "arch_index", "==", "-", "1", ":", "return", "None", "# the following two lines are used to support few training epochs", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "if", "arch_index", "in", "arch2infos", ":", "\n", "      ", "strings", "=", "print_information", "(", "arch2infos", "[", "arch_index", "]", ",", "'arch-index={:}'", ".", "format", "(", "arch_index", ")", ")", "\n", "return", "'\\n'", ".", "join", "(", "strings", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "'Find this arch-index : {:}, but this arch is not evaluated.'", ".", "format", "(", "arch_index", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.query_by_index": [[171, 182], ["copy.deepcopy", "copy.deepcopy.query", "copy.deepcopy.get_dataset_names"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_dataset_names"], ["", "", "def", "query_by_index", "(", "self", ",", "arch_index", ":", "int", ",", "dataname", ":", "Union", "[", "None", ",", "Text", "]", "=", "None", ",", "\n", "use_12epochs_result", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "assert", "arch_index", "in", "arch2infos", ",", "'arch_index [{:}] does not in arch2info with {:}'", ".", "format", "(", "arch_index", ",", "basestr", ")", "\n", "archInfo", "=", "copy", ".", "deepcopy", "(", "arch2infos", "[", "arch_index", "]", ")", "\n", "if", "dataname", "is", "None", ":", "return", "archInfo", "\n", "else", ":", "\n", "      ", "assert", "dataname", "in", "archInfo", ".", "get_dataset_names", "(", ")", ",", "'invalid dataset-name : {:}'", ".", "format", "(", "dataname", ")", "\n", "info", "=", "archInfo", ".", "query", "(", "dataname", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.query_meta_info_by_index": [[183, 189], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "query_meta_info_by_index", "(", "self", ",", "arch_index", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "assert", "arch_index", "in", "arch2infos", ",", "'arch_index [{:}] does not in arch2info with {:}'", ".", "format", "(", "arch_index", ",", "basestr", ")", "\n", "archInfo", "=", "copy", ".", "deepcopy", "(", "arch2infos", "[", "arch_index", "]", ")", "\n", "return", "archInfo", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.find_best": [[190, 207], ["enumerate", "arch2infos[].get_compute_costs", "arch2infos[].get_metrics"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_compute_costs", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics"], ["", "def", "find_best", "(", "self", ",", "dataset", ",", "metric_on_set", ",", "FLOP_max", "=", "None", ",", "Param_max", "=", "None", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "\"\"\"Find the architecture with the highest accuracy based on some constraints.\"\"\"", "\n", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "best_index", ",", "highest_accuracy", "=", "-", "1", ",", "None", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "self", ".", "evaluated_indexes", ")", ":", "\n", "      ", "info", "=", "arch2infos", "[", "idx", "]", ".", "get_compute_costs", "(", "dataset", ")", "\n", "flop", ",", "param", ",", "latency", "=", "info", "[", "'flops'", "]", ",", "info", "[", "'params'", "]", ",", "info", "[", "'latency'", "]", "\n", "if", "FLOP_max", "is", "not", "None", "and", "flop", ">", "FLOP_max", ":", "continue", "\n", "if", "Param_max", "is", "not", "None", "and", "param", ">", "Param_max", ":", "continue", "\n", "xinfo", "=", "arch2infos", "[", "idx", "]", ".", "get_metrics", "(", "dataset", ",", "metric_on_set", ")", "\n", "loss", ",", "accuracy", "=", "xinfo", "[", "'loss'", "]", ",", "xinfo", "[", "'accuracy'", "]", "\n", "if", "best_index", "==", "-", "1", ":", "\n", "        ", "best_index", ",", "highest_accuracy", "=", "idx", ",", "accuracy", "\n", "", "elif", "highest_accuracy", "<", "accuracy", ":", "\n", "        ", "best_index", ",", "highest_accuracy", "=", "idx", ",", "accuracy", "\n", "", "", "return", "best_index", ",", "highest_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.arch": [[208, 212], ["copy.deepcopy", "len", "len"], "methods", ["None"], ["", "def", "arch", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "    ", "\"\"\"Return the topology structure of the `index`-th architecture.\"\"\"", "\n", "assert", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ",", "'invalid index : {:} vs. {:}.'", ".", "format", "(", "index", ",", "len", "(", "self", ".", "meta_archs", ")", ")", "\n", "return", "copy", ".", "deepcopy", "(", "self", ".", "meta_archs", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.get_net_param": [[213, 227], ["arch_result.get_net_param"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_net_param"], ["", "def", "get_net_param", "(", "self", ",", "index", ",", "dataset", ",", "seed", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n      This function is used to obtain the trained weights of the `index`-th architecture on `dataset` with the seed of `seed`\n      Args [seed]:\n        -- None : return a dict containing the trained weights of all trials, where each key is a seed and its corresponding value is the weights.\n        -- a interger : return the weights of a specific trial, whose seed is this interger.\n      Args [use_12epochs_result]:\n        -- True : train the model by 12 epochs\n        -- False : train the model by 200 epochs\n    \"\"\"", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch_result", "=", "arch2infos", "[", "index", "]", "\n", "return", "arch_result", ".", "get_net_param", "(", "dataset", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.get_net_config": [[228, 247], ["archresult.query", "archresult.query.items", "ValueError", "len", "ValueError", "result.get_config"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_config"], ["", "def", "get_net_config", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ")", ":", "\n", "    ", "\"\"\"\n      This function is used to obtain the configuration for the `index`-th architecture on `dataset`.\n      Args [dataset] (4 possible options):\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n      This function will return a dict.\n      ========= Some examlpes for using this function:\n      config = api.get_net_config(128, 'cifar10')\n    \"\"\"", "\n", "archresult", "=", "self", ".", "arch2infos_full", "[", "index", "]", "\n", "all_results", "=", "archresult", ".", "query", "(", "dataset", ",", "None", ")", "\n", "if", "len", "(", "all_results", ")", "==", "0", ":", "raise", "ValueError", "(", "'can not find one valid trial for the {:}-th architecture on {:}'", ".", "format", "(", "index", ",", "dataset", ")", ")", "\n", "for", "seed", ",", "result", "in", "all_results", ".", "items", "(", ")", ":", "\n", "      ", "return", "result", ".", "get_config", "(", "None", ")", "\n", "#print ('SEED [{:}] : {:}'.format(seed, result))", "\n", "", "raise", "ValueError", "(", "'Impossible to reach here!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.get_cost_info": [[248, 254], ["arch_result.get_compute_costs"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_compute_costs"], ["", "def", "get_cost_info", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", "=", "False", ")", "->", "Dict", "[", "Text", ",", "float", "]", ":", "\n", "    ", "\"\"\"To obtain the cost metric for the `index`-th architecture on a dataset.\"\"\"", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch_result", "=", "arch2infos", "[", "index", "]", "\n", "return", "arch_result", ".", "get_compute_costs", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.get_latency": [[255, 264], ["api.NASBench201API.get_cost_info"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.get_cost_info"], ["", "def", "get_latency", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", "=", "False", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    To obtain the latency of the network (by default it will return the latency with the batch size of 256).\n    :param index: the index of the target architecture\n    :param dataset: the dataset name (cifar10-valid, cifar10, cifar100, ImageNet16-120)\n    :return: return a float value in seconds\n    \"\"\"", "\n", "cost_dict", "=", "self", ".", "get_cost_info", "(", "index", ",", "dataset", ",", "use_12epochs_result", ")", "\n", "return", "cost_dict", "[", "'latency'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.get_more_info": [[280, 338], ["archresult.get_metrics", "isinstance", "archresult.get_dataset_seeds", "random.choice", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_dataset_seeds", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics"], ["", "def", "get_more_info", "(", "self", ",", "index", ":", "int", ",", "dataset", ",", "iepoch", "=", "None", ",", "use_12epochs_result", "=", "False", ",", "is_random", "=", "True", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "archresult", "=", "arch2infos", "[", "index", "]", "\n", "# if randomly select one trial, select the seed at first", "\n", "if", "isinstance", "(", "is_random", ",", "bool", ")", "and", "is_random", ":", "\n", "      ", "seeds", "=", "archresult", ".", "get_dataset_seeds", "(", "dataset", ")", "\n", "is_random", "=", "random", ".", "choice", "(", "seeds", ")", "\n", "# collect the training information", "\n", "", "train_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'train'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "total", "=", "train_info", "[", "'iepoch'", "]", "+", "1", "\n", "xinfo", "=", "{", "'train-loss'", ":", "train_info", "[", "'loss'", "]", ",", "\n", "'train-accuracy'", ":", "train_info", "[", "'accuracy'", "]", ",", "\n", "'train-per-time'", ":", "train_info", "[", "'all_time'", "]", "/", "total", ",", "\n", "'train-all-time'", ":", "train_info", "[", "'all_time'", "]", "}", "\n", "# collect the evaluation information", "\n", "if", "dataset", "==", "'cifar10-valid'", ":", "\n", "      ", "valid_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "try", ":", "\n", "        ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "except", ":", "\n", "        ", "test_info", "=", "None", "\n", "", "valtest_info", "=", "None", "\n", "", "else", ":", "\n", "      ", "try", ":", "# collect results on the proposed test set", "\n", "        ", "if", "dataset", "==", "'cifar10'", ":", "\n", "          ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "else", ":", "\n", "          ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "", "except", ":", "\n", "        ", "test_info", "=", "None", "\n", "", "try", ":", "# collect results on the proposed validation set", "\n", "        ", "valid_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "except", ":", "\n", "        ", "valid_info", "=", "None", "\n", "", "try", ":", "\n", "        ", "if", "dataset", "!=", "'cifar10'", ":", "\n", "          ", "valtest_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "else", ":", "\n", "          ", "valtest_info", "=", "None", "\n", "", "", "except", ":", "\n", "        ", "valtest_info", "=", "None", "\n", "", "", "if", "valid_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'valid-loss'", "]", "=", "valid_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'valid-accuracy'", "]", "=", "valid_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'valid-per-time'", "]", "=", "valid_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'valid-all-time'", "]", "=", "valid_info", "[", "'all_time'", "]", "\n", "", "if", "test_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'test-loss'", "]", "=", "test_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'test-accuracy'", "]", "=", "test_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'test-per-time'", "]", "=", "test_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'test-all-time'", "]", "=", "test_info", "[", "'all_time'", "]", "\n", "", "if", "valtest_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'valtest-loss'", "]", "=", "valtest_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'valtest-accuracy'", "]", "=", "valtest_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'valtest-per-time'", "]", "=", "valtest_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'valtest-all-time'", "]", "=", "valtest_info", "[", "'all_time'", "]", "\n", "", "return", "xinfo", "\n", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.show": [[398, 431], ["print", "enumerate", "print", "print", "api.print_information", "print", "print", "api.print_information", "print", "print", "print", "len", "print", "print", "api.print_information", "print", "print", "api.print_information", "print", "print", "print", "len", "len", "api.NASBench201API.arch2infos_full[].get_total_epoch", "api.NASBench201API.arch2infos_less[].get_total_epoch", "api.NASBench201API.arch2infos_full[].get_total_epoch", "api.NASBench201API.arch2infos_less[].get_total_epoch"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.print_information", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.print_information", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.print_information", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.print_information", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_total_epoch"], ["def", "show", "(", "self", ",", "index", ":", "int", "=", "-", "1", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    This function will print the information of a specific (or all) architecture(s).\n\n    :param index: If the index < 0: it will loop for all architectures and print their information one by one.\n                  else: it will print the information of the 'index'-th archiitecture.\n    :return: nothing\n    \"\"\"", "\n", "if", "index", "<", "0", ":", "# show all architectures", "\n", "      ", "print", "(", "self", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "self", ".", "evaluated_indexes", ")", ":", "\n", "        ", "print", "(", "'\\n'", "+", "'-'", "*", "10", "+", "' The ({:5d}/{:5d}) {:06d}-th architecture! '", ".", "format", "(", "i", ",", "len", "(", "self", ".", "evaluated_indexes", ")", ",", "idx", ")", "+", "'-'", "*", "10", ")", "\n", "print", "(", "'arch : {:}'", ".", "format", "(", "self", ".", "meta_archs", "[", "idx", "]", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_full", "[", "idx", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_full", "[", "idx", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_less", "[", "idx", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_less", "[", "idx", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "print", "(", "'<'", "*", "40", "+", "'------------'", "+", "'<'", "*", "40", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ":", "\n", "        ", "if", "index", "not", "in", "self", ".", "evaluated_indexes", ":", "print", "(", "'The {:}-th architecture has not been evaluated or not saved.'", ".", "format", "(", "index", ")", ")", "\n", "else", ":", "\n", "          ", "strings", "=", "print_information", "(", "self", ".", "arch2infos_full", "[", "index", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_full", "[", "index", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_less", "[", "index", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_less", "[", "index", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "print", "(", "'<'", "*", "40", "+", "'------------'", "+", "'<'", "*", "40", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'This index ({:}) is out of range (0~{:}).'", ".", "format", "(", "index", ",", "len", "(", "self", ".", "meta_archs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.statistics": [[432, 450], ["collections.defaultdict", "range", "dict", "ValueError", "len", "len"], "methods", ["None"], ["", "", "", "def", "statistics", "(", "self", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", ")", "->", "Dict", "[", "int", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    This function will count the number of total trials.\n    \"\"\"", "\n", "valid_datasets", "=", "[", "'cifar10-valid'", ",", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", "\n", "if", "dataset", "not", "in", "valid_datasets", ":", "\n", "      ", "raise", "ValueError", "(", "'{:} not in {:}'", ".", "format", "(", "dataset", ",", "valid_datasets", ")", ")", "\n", "", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "nums", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "      ", "archInfo", "=", "arch2infos", "[", "index", "]", "\n", "dataset_seed", "=", "archInfo", ".", "dataset_seed", "\n", "if", "dataset", "not", "in", "dataset_seed", ":", "\n", "        ", "nums", "[", "0", "]", "+=", "1", "\n", "", "else", ":", "\n", "        ", "nums", "[", "len", "(", "dataset_seed", "[", "dataset", "]", ")", "]", "+=", "1", "\n", "", "", "return", "dict", "(", "nums", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.str2lists": [[451, 477], ["arch_str.split", "enumerate", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2lists", "(", "arch_str", ":", "Text", ")", "->", "List", "[", "tuple", "]", ":", "\n", "    ", "\"\"\"\n    This function shows how to read the string-based architecture encoding.\n      It is the same as the `str2structure` func in `AutoDL-Projects/lib/models/cell_searchs/genotypes.py`\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n    :return: a list of tuple, contains multiple (op, input_node_index) pairs.\n\n    :usage\n      arch = api.str2lists( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      print ('there are {:} nodes in this arch'.format(len(arch)+1)) # arch is a list\n      for i, node in enumerate(arch):\n        print('the {:}-th node is the sum of these {:} nodes with op: {:}'.format(i+1, len(node), node))\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "genotypes", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.NASBench201API.str2matrix": [[478, 515], ["arch_str.split", "numpy.zeros", "enumerate", "len", "list", "filter", "xi.split", "node_str.split", "len", "ValueError", "search_space.index", "int", "xinput.split"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "@", "staticmethod", "\n", "def", "str2matrix", "(", "arch_str", ":", "Text", ",", "\n", "search_space", ":", "List", "[", "Text", "]", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    This func shows how to convert the string-based architecture encoding to the encoding strategy in NAS-Bench-101.\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n      search_space: a list of operation string, the default list is the search space for NAS-Bench-201\n        the default value should be be consistent with this line https://github.com/D-X-Y/AutoDL-Projects/blob/master/lib/models/cell_operations.py#L24\n    :return\n      the numpy matrix (2-D np.ndarray) representing the DAG of this architecture topology\n    :usage\n      matrix = api.str2matrix( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      This matrix is 4-by-4 matrix representing a cell with 4 nodes (only the lower left triangle is useful).\n         [ [0, 0, 0, 0],  # the first line represents the input (0-th) node\n           [2, 0, 0, 0],  # the second line represents the 1-st node, is calculated by 2-th-op( 0-th-node )\n           [0, 0, 0, 0],  # the third line represents the 2-nd node, is calculated by 0-th-op( 0-th-node ) + 0-th-op( 1-th-node )\n           [0, 0, 1, 0] ] # the fourth line represents the 3-rd node, is calculated by 0-th-op( 0-th-node ) + 0-th-op( 1-th-node ) + 1-th-op( 2-th-node )\n      In NAS-Bench-201 search space, 0-th-op is 'none', 1-th-op is 'skip_connect',\n         2-th-op is 'nor_conv_1x1', 3-th-op is 'nor_conv_3x3', 4-th-op is 'avg_pool_3x3'.\n    :(NOTE)\n      If a node has two input-edges from the same node, this function does not work. One edge will be overlapped.\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "num_nodes", "=", "len", "(", "node_strs", ")", "+", "1", "\n", "matrix", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "for", "xi", "in", "inputs", ":", "\n", "        ", "op", ",", "idx", "=", "xi", ".", "split", "(", "'~'", ")", "\n", "if", "op", "not", "in", "search_space", ":", "raise", "ValueError", "(", "'this op ({:}) is not in {:}'", ".", "format", "(", "op", ",", "search_space", ")", ")", "\n", "op_idx", ",", "node_idx", "=", "search_space", ".", "index", "(", "op", ")", ",", "int", "(", "idx", ")", "\n", "matrix", "[", "i", "+", "1", ",", "node_idx", "]", "=", "op_idx", "\n", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.__init__": [[519, 525], ["int", "copy.deepcopy", "dict", "dict"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "arch_index", ",", "arch_str", ")", ":", "\n", "    ", "self", ".", "arch_index", "=", "int", "(", "arch_index", ")", "\n", "self", ".", "arch_str", "=", "copy", ".", "deepcopy", "(", "arch_str", ")", "\n", "self", ".", "all_results", "=", "dict", "(", ")", "\n", "self", ".", "dataset_seed", "=", "dict", "(", ")", "\n", "self", ".", "clear_net_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_compute_costs": [[526, 548], ["collections.defaultdict", "collections.defaultdict.items", "result.get_latency", "numpy.mean", "result.get_times", "result.get_times.items", "numpy.mean", "numpy.mean", "len", "time_infos[].append", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_latency", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_times"], ["", "def", "get_compute_costs", "(", "self", ",", "dataset", ")", ":", "\n", "    ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "results", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "]", "\n", "\n", "flops", "=", "[", "result", ".", "flop", "for", "result", "in", "results", "]", "\n", "params", "=", "[", "result", ".", "params", "for", "result", "in", "results", "]", "\n", "latencies", "=", "[", "result", ".", "get_latency", "(", ")", "for", "result", "in", "results", "]", "\n", "latencies", "=", "[", "x", "for", "x", "in", "latencies", "if", "x", ">", "0", "]", "\n", "mean_latency", "=", "np", ".", "mean", "(", "latencies", ")", "if", "len", "(", "latencies", ")", ">", "0", "else", "None", "\n", "time_infos", "=", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "results", ":", "\n", "      ", "time_info", "=", "result", ".", "get_times", "(", ")", "\n", "for", "key", ",", "value", "in", "time_info", ".", "items", "(", ")", ":", "time_infos", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "info", "=", "{", "'flops'", ":", "np", ".", "mean", "(", "flops", ")", ",", "\n", "'params'", ":", "np", ".", "mean", "(", "params", ")", ",", "\n", "'latency'", ":", "mean_latency", "}", "\n", "for", "key", ",", "value", "in", "time_infos", ".", "items", "(", ")", ":", "\n", "      ", "if", "len", "(", "value", ")", ">", "0", "and", "value", "[", "0", "]", "is", "not", "None", ":", "\n", "        ", "info", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "else", ":", "info", "[", "key", "]", "=", "None", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics": [[549, 606], ["collections.defaultdict", "dict", "result.get_eval.items", "isinstance", "random.randint", "collections.defaultdict.items", "result.get_train", "result.get_eval", "infos[].append", "isinstance", "collections.defaultdict.items", "isinstance", "len", "x_seeds.index", "collections.defaultdict.items", "ValueError", "numpy.mean", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_train", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_eval"], ["", "def", "get_metrics", "(", "self", ",", "dataset", ",", "setname", ",", "iepoch", "=", "None", ",", "is_random", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n      This `get_metrics` function is used to obtain obtain the loss, accuracy, etc information on a specific dataset.\n      If not specify, each set refer to the proposed split in NAS-Bench-201 paper.\n      If some args return None or raise error, then it is not avaliable.\n      ========================================\n      Args [dataset] (4 possible options):\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n      Args [setname] (each dataset has different setnames):\n        -- When dataset = cifar10-valid, you can use 'train', 'x-valid', 'ori-test'\n        ------ 'train' : the metric on the training set.\n        ------ 'x-valid' : the metric on the validation set.\n        ------ 'ori-test' : the metric on the test set.\n        -- When dataset = cifar10, you can use 'train', 'ori-test'.\n        ------ 'train' : the metric on the training + validation set.\n        ------ 'ori-test' : the metric on the test set.\n        -- When dataset = cifar100 or ImageNet16-120, you can use 'train', 'ori-test', 'x-valid', 'x-test'\n        ------ 'train' : the metric on the training set.\n        ------ 'x-valid' : the metric on the validation set.\n        ------ 'x-test' : the metric on the test set.\n        ------ 'ori-test' : the metric on the validation + test set.\n      Args [iepoch] (None or an integer in [0, the-number-of-total-training-epochs)\n        ------ None : return the metric after the last training epoch.\n        ------ an integer i : return the metric after the i-th training epoch.\n      Args [is_random]:\n        ------ True : return the metric of a randomly selected trial.\n        ------ False : return the averaged metric of all avaliable trials.\n        ------ an integer indicating the 'seed' value : return the metric of a specific trial (whose random seed is 'is_random').\n    \"\"\"", "\n", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "results", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "]", "\n", "infos", "=", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "results", ":", "\n", "      ", "if", "setname", "==", "'train'", ":", "\n", "        ", "info", "=", "result", ".", "get_train", "(", "iepoch", ")", "\n", "", "else", ":", "\n", "        ", "info", "=", "result", ".", "get_eval", "(", "setname", ",", "iepoch", ")", "\n", "", "for", "key", ",", "value", "in", "info", ".", "items", "(", ")", ":", "infos", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "return_info", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "is_random", ",", "bool", ")", "and", "is_random", ":", "# randomly select one", "\n", "      ", "index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "results", ")", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "return_info", "[", "key", "]", "=", "value", "[", "index", "]", "\n", "", "elif", "isinstance", "(", "is_random", ",", "bool", ")", "and", "not", "is_random", ":", "# average", "\n", "      ", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "value", ")", ">", "0", "and", "value", "[", "0", "]", "is", "not", "None", ":", "\n", "          ", "return_info", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "else", ":", "return_info", "[", "key", "]", "=", "None", "\n", "", "", "elif", "isinstance", "(", "is_random", ",", "int", ")", ":", "# specify the seed", "\n", "      ", "if", "is_random", "not", "in", "x_seeds", ":", "raise", "ValueError", "(", "'can not find random seed ({:}) from {:}'", ".", "format", "(", "is_random", ",", "x_seeds", ")", ")", "\n", "index", "=", "x_seeds", ".", "index", "(", "is_random", ")", "\n", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "return_info", "[", "key", "]", "=", "value", "[", "index", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid value for is_random: {:}'", ".", "format", "(", "is_random", ")", ")", "\n", "", "return", "return_info", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show": [[607, 609], ["api.print_information"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.print_information"], ["", "def", "show", "(", "self", ",", "is_print", "=", "False", ")", ":", "\n", "    ", "return", "print_information", "(", "self", ",", "None", ",", "is_print", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_dataset_names": [[610, 612], ["list", "api.ArchResults.dataset_seed.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "def", "get_dataset_names", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "dataset_seed", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_dataset_seeds": [[613, 615], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_dataset_seeds", "(", "self", ",", "dataset", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "dataset_seed", "[", "dataset", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_net_param": [[616, 628], ["api.ArchResults.all_results[].get_net_param", "api.ArchResults.all_results[].get_net_param"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_net_param", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_net_param"], ["", "def", "get_net_param", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "int", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function will return the trained network's weights on the 'dataset'.\n    :arg\n      dataset: one of 'cifar10-valid', 'cifar10', 'cifar100', and 'ImageNet16-120'.\n      seed: an integer indicates the seed value or None that indicates returing all trials.\n    \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "return", "{", "seed", ":", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_net_param", "(", ")", "for", "seed", "in", "x_seeds", "}", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_net_param", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.reset_latency": [[629, 636], ["api.ArchResults.all_results[].update_latency", "api.ArchResults.all_results[].update_latency"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.update_latency", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.update_latency"], ["", "", "def", "reset_latency", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "latency", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the latency in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "update_latency", "(", "[", "latency", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "update_latency", "(", "[", "latency", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.reset_pseudo_train_times": [[637, 644], ["api.ArchResults.all_results[].reset_pseudo_train_times", "api.ArchResults.all_results[].reset_pseudo_train_times"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.reset_pseudo_train_times", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.reset_pseudo_train_times"], ["", "", "def", "reset_pseudo_train_times", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the train-times in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_train_times", "(", "estimated_per_epoch_time", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_train_times", "(", "estimated_per_epoch_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.reset_pseudo_eval_times": [[645, 652], ["api.ArchResults.all_results[].reset_pseudo_eval_times", "api.ArchResults.all_results[].reset_pseudo_eval_times"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.reset_pseudo_eval_times", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.reset_pseudo_eval_times"], ["", "", "def", "reset_pseudo_eval_times", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "eval_name", ":", "Text", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the eval-times in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_eval_times", "(", "eval_name", ",", "estimated_per_epoch_time", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_eval_times", "(", "eval_name", ",", "estimated_per_epoch_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_latency": [[653, 662], ["api.ArchResults.all_results[].get_latency", "latencies.append", "sum", "len", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_latency"], ["", "", "def", "get_latency", "(", "self", ",", "dataset", ":", "Text", ")", "->", "float", ":", "\n", "    ", "\"\"\"Get the latency of a model on the target dataset. [Timestamp: 2020.03.09]\"\"\"", "\n", "latencies", "=", "[", "]", "\n", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "      ", "latency", "=", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_latency", "(", ")", "\n", "if", "not", "isinstance", "(", "latency", ",", "float", ")", "or", "latency", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid latency of {:} for {:} with {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "latencies", ".", "append", "(", "latency", ")", "\n", "", "return", "sum", "(", "latencies", ")", "/", "len", "(", "latencies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_total_epoch": [[663, 676], ["api.ArchResults.dataset_seed.items", "isinstance", "len", "ValueError", "ValueError", "set", "api.ArchResults.all_results[].get_total_epoch", "api.ArchResults.all_results[].get_total_epoch"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_total_epoch"], ["", "def", "get_total_epoch", "(", "self", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the total number of training epochs.\"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "      ", "epochss", "=", "[", "]", "\n", "for", "xdata", ",", "x_seeds", "in", "self", ".", "dataset_seed", ".", "items", "(", ")", ":", "\n", "        ", "epochss", "+=", "[", "self", ".", "all_results", "[", "(", "xdata", ",", "seed", ")", "]", ".", "get_total_epoch", "(", ")", "for", "seed", "in", "x_seeds", "]", "\n", "", "", "elif", "isinstance", "(", "dataset", ",", "str", ")", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "epochss", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_total_epoch", "(", ")", "for", "seed", "in", "x_seeds", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid dataset={:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "if", "len", "(", "set", "(", "epochss", ")", ")", ">", "1", ":", "raise", "ValueError", "(", "'Each trial mush have the same number of training epochs : {:}'", ".", "format", "(", "epochss", ")", ")", "\n", "return", "epochss", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.query": [[677, 684], ["None"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "dataset", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the ResultsCount object (containing all information of a single trial) for 'dataset' and 'seed'\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "return", "{", "seed", ":", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "}", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.arch_idx_str": [[685, 687], ["None"], "methods", ["None"], ["", "", "def", "arch_idx_str", "(", "self", ")", ":", "\n", "    ", "return", "'{:06d}'", ".", "format", "(", "self", ".", "arch_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.update": [[688, 697], ["api.ArchResults.dataset_seed[].append", "sorted"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "dataset_name", ",", "seed", ",", "result", ")", ":", "\n", "    ", "if", "dataset_name", "not", "in", "self", ".", "dataset_seed", ":", "\n", "      ", "self", ".", "dataset_seed", "[", "dataset_name", "]", "=", "[", "]", "\n", "", "assert", "seed", "not", "in", "self", ".", "dataset_seed", "[", "dataset_name", "]", ",", "'{:}-th arch alreadly has this seed ({:}) on {:}'", ".", "format", "(", "self", ".", "arch_index", ",", "seed", ",", "dataset_name", ")", "\n", "self", ".", "dataset_seed", "[", "dataset_name", "]", ".", "append", "(", "seed", ")", "\n", "self", ".", "dataset_seed", "[", "dataset_name", "]", "=", "sorted", "(", "self", ".", "dataset_seed", "[", "dataset_name", "]", ")", "\n", "assert", "(", "dataset_name", ",", "seed", ")", "not", "in", "self", ".", "all_results", "\n", "self", ".", "all_results", "[", "(", "dataset_name", ",", "seed", ")", "]", "=", "result", "\n", "self", ".", "clear_net_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.state_dict": [[698, 711], ["dict", "api.ArchResults.__dict__.items", "dict", "isinstance", "value.items", "type", "isinstance", "_v.state_dict", "type"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "state_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'all_results'", ":", "# contain the class of ResultsCount", "\n", "        ", "xvalue", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "value", ",", "dict", ")", ",", "'invalid type of value for {:} : {:}'", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "for", "_k", ",", "_v", "in", "value", ".", "items", "(", ")", ":", "\n", "          ", "assert", "isinstance", "(", "_v", ",", "ResultsCount", ")", ",", "'invalid type of value for {:}/{:} : {:}'", ".", "format", "(", "key", ",", "_k", ",", "type", "(", "_v", ")", ")", "\n", "xvalue", "[", "_k", "]", "=", "_v", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "xvalue", "=", "value", "\n", "", "state_dict", "[", "key", "]", "=", "xvalue", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.load_state_dict": [[712, 723], ["dict", "state_dict.items", "api.ArchResults.__dict__.update", "dict", "isinstance", "value.items", "type", "api.ResultsCount.create_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.create_from_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'all_results'", ":", "# to convert to the class of ResultsCount", "\n", "        ", "xvalue", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "value", ",", "dict", ")", ",", "'invalid type of value for {:} : {:}'", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "for", "_k", ",", "_v", "in", "value", ".", "items", "(", ")", ":", "\n", "          ", "xvalue", "[", "_k", "]", "=", "ResultsCount", ".", "create_from_state_dict", "(", "_v", ")", "\n", "", "", "else", ":", "xvalue", "=", "value", "\n", "new_state_dict", "[", "key", "]", "=", "xvalue", "\n", "", "self", ".", "__dict__", ".", "update", "(", "new_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.create_from_state_dict": [[724, 735], ["api.ArchResults", "isinstance", "api.ArchResults.load_state_dict", "torch.load", "isinstance", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.load_state_dict"], ["", "@", "staticmethod", "\n", "def", "create_from_state_dict", "(", "state_dict_or_file", ")", ":", "\n", "    ", "x", "=", "ArchResults", "(", "-", "1", ",", "-", "1", ")", "\n", "if", "isinstance", "(", "state_dict_or_file", ",", "str", ")", ":", "# a file path", "\n", "      ", "state_dict", "=", "torch", ".", "load", "(", "state_dict_or_file", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "isinstance", "(", "state_dict_or_file", ",", "dict", ")", ":", "\n", "      ", "state_dict", "=", "state_dict_or_file", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid type of state_dict_or_file : {:}'", ".", "format", "(", "type", "(", "state_dict_or_file", ")", ")", ")", "\n", "", "x", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.clear_params": [[738, 743], ["api.ArchResults.all_results.items"], "methods", ["None"], ["", "def", "clear_params", "(", "self", ")", ":", "\n", "    ", "for", "key", ",", "result", "in", "self", ".", "all_results", ".", "items", "(", ")", ":", "\n", "      ", "del", "result", ".", "net_state_dict", "\n", "result", ".", "net_state_dict", "=", "None", "\n", "", "self", ".", "clear_net_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.debug_test": [[744, 754], ["print", "print", "print", "print", "api.ArchResults.get_latency", "result.get_times"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_latency", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_times"], ["", "def", "debug_test", "(", "self", ")", ":", "\n", "    ", "\"\"\"This function is used for me to debug and test, which will call most methods.\"\"\"", "\n", "all_dataset", "=", "[", "'cifar10-valid'", ",", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", "\n", "for", "dataset", "in", "all_dataset", ":", "\n", "      ", "print", "(", "'---->>>> {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "print", "(", "'The latency on {:} is {:} s'", ".", "format", "(", "dataset", ",", "self", ".", "get_latency", "(", "dataset", ")", ")", ")", "\n", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "result", "=", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "\n", "print", "(", "'  ==>> result = {:}'", ".", "format", "(", "result", ")", ")", "\n", "print", "(", "'  ==>> cost = {:}'", ".", "format", "(", "result", ".", "get_times", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.__repr__": [[755, 757], ["len"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(arch-index={index}, arch={arch}, {num} runs, clear={clear})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "index", "=", "self", ".", "arch_index", ",", "arch", "=", "self", ".", "arch_str", ",", "num", "=", "len", "(", "self", ".", "all_results", ")", ",", "clear", "=", "self", ".", "clear_net_done", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.__init__": [[766, 781], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "api.ResultsCount.reset_eval"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.reset_eval"], ["  ", "def", "__init__", "(", "self", ",", "name", ",", "state_dict", ",", "train_accs", ",", "train_losses", ",", "params", ",", "flop", ",", "arch_config", ",", "seed", ",", "epochs", ",", "latency", ")", ":", "\n", "    ", "self", ".", "name", "=", "name", "\n", "self", ".", "net_state_dict", "=", "state_dict", "\n", "self", ".", "train_acc1es", "=", "copy", ".", "deepcopy", "(", "train_accs", ")", "\n", "self", ".", "train_acc5es", "=", "None", "\n", "self", ".", "train_losses", "=", "copy", ".", "deepcopy", "(", "train_losses", ")", "\n", "self", ".", "train_times", "=", "None", "\n", "self", ".", "arch_config", "=", "copy", ".", "deepcopy", "(", "arch_config", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "flop", "=", "flop", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "latency", "=", "latency", "\n", "# evaluation results", "\n", "self", ".", "reset_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.update_train_info": [[782, 787], ["None"], "methods", ["None"], ["", "def", "update_train_info", "(", "self", ",", "train_acc1es", ",", "train_acc5es", ",", "train_losses", ",", "train_times", ")", "->", "None", ":", "\n", "    ", "self", ".", "train_acc1es", "=", "train_acc1es", "\n", "self", ".", "train_acc5es", "=", "train_acc5es", "\n", "self", ".", "train_losses", "=", "train_losses", "\n", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.reset_pseudo_train_times": [[788, 794], ["collections.OrderedDict", "range"], "methods", ["None"], ["", "def", "reset_pseudo_train_times", "(", "self", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"Assign the training times.\"\"\"", "\n", "train_times", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "train_times", "[", "i", "]", "=", "estimated_per_epoch_time", "\n", "", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.reset_pseudo_eval_times": [[795, 800], ["range", "ValueError"], "methods", ["None"], ["", "def", "reset_pseudo_eval_times", "(", "self", ",", "eval_name", ":", "Text", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"Assign the evaluation times.\"\"\"", "\n", "if", "eval_name", "not", "in", "self", ".", "eval_names", ":", "raise", "ValueError", "(", "'invalid eval name : {:}'", ".", "format", "(", "eval_name", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "eval_name", ",", "i", ")", "]", "=", "estimated_per_epoch_time", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.reset_eval": [[801, 806], ["None"], "methods", ["None"], ["", "", "def", "reset_eval", "(", "self", ")", ":", "\n", "    ", "self", ".", "eval_names", "=", "[", "]", "\n", "self", ".", "eval_acc1es", "=", "{", "}", "\n", "self", ".", "eval_times", "=", "{", "}", "\n", "self", ".", "eval_losses", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.update_latency": [[807, 809], ["copy.deepcopy"], "methods", ["None"], ["", "def", "update_latency", "(", "self", ",", "latency", ")", ":", "\n", "    ", "self", ".", "latency", "=", "copy", ".", "deepcopy", "(", "latency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_latency": [[810, 814], ["sum", "len"], "methods", ["None"], ["", "def", "get_latency", "(", "self", ")", "->", "float", ":", "\n", "    ", "\"\"\"Return the latency value in seconds. -1 represents not avaliable ; otherwise it should be a float value\"\"\"", "\n", "if", "self", ".", "latency", "is", "None", ":", "return", "-", "1.0", "\n", "else", ":", "return", "sum", "(", "self", ".", "latency", ")", "/", "len", "(", "self", ".", "latency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.update_eval": [[815, 825], ["set", "api.ResultsCount.eval_names.append", "range", "x.split", "accs.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "def", "update_eval", "(", "self", ",", "accs", ",", "losses", ",", "times", ")", ":", "# new version", "\n", "    ", "data_names", "=", "set", "(", "[", "x", ".", "split", "(", "'@'", ")", "[", "0", "]", "for", "x", "in", "accs", ".", "keys", "(", ")", "]", ")", "\n", "for", "data_name", "in", "data_names", ":", "\n", "      ", "assert", "data_name", "not", "in", "self", ".", "eval_names", ",", "'{:} has already been added into eval-names'", ".", "format", "(", "data_name", ")", "\n", "self", ".", "eval_names", ".", "append", "(", "data_name", ")", "\n", "for", "iepoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "        ", "xkey", "=", "'{:}@{:}'", ".", "format", "(", "data_name", ",", "iepoch", ")", "\n", "self", ".", "eval_acc1es", "[", "xkey", "]", "=", "accs", "[", "xkey", "]", "\n", "self", ".", "eval_losses", "[", "xkey", "]", "=", "losses", "[", "xkey", "]", "\n", "self", ".", "eval_times", "[", "xkey", "]", "=", "times", "[", "xkey", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.update_OLD_eval": [[826, 833], ["api.ResultsCount.eval_names.append", "range"], "methods", ["None"], ["", "", "", "def", "update_OLD_eval", "(", "self", ",", "name", ",", "accs", ",", "losses", ")", ":", "# old version", "\n", "    ", "assert", "name", "not", "in", "self", ".", "eval_names", ",", "'{:} has already added'", ".", "format", "(", "name", ")", "\n", "self", ".", "eval_names", ".", "append", "(", "name", ")", "\n", "for", "iepoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "if", "iepoch", "in", "accs", ":", "\n", "        ", "self", ".", "eval_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "=", "accs", "[", "iepoch", "]", "\n", "self", ".", "eval_losses", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "=", "losses", "[", "iepoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.__repr__": [[834, 838], ["len"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "num_eval", "=", "len", "(", "self", ".", "eval_names", ")", "\n", "set_name", "=", "'['", "+", "', '", ".", "join", "(", "self", ".", "eval_names", ")", "+", "']'", "\n", "return", "(", "'{name}({xname}, arch={arch}, FLOP={flop:.2f}M, Param={param:.3f}MB, seed={seed}, {num_eval} eval-sets: {set_name})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "xname", "=", "self", ".", "name", ",", "arch", "=", "self", ".", "arch_config", "[", "'arch_str'", "]", ",", "flop", "=", "self", ".", "flop", ",", "param", "=", "self", ".", "params", ",", "seed", "=", "self", ".", "seed", ",", "num_eval", "=", "num_eval", ",", "set_name", "=", "set_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_total_epoch": [[839, 841], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_total_epoch", "(", "self", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_times": [[842, 858], ["isinstance", "list", "api.ResultsCount.train_times.values", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "range"], "methods", ["None"], ["", "def", "get_times", "(", "self", ")", ":", "\n", "    ", "\"\"\"Obtain the information regarding both training and evaluation time.\"\"\"", "\n", "if", "self", ".", "train_times", "is", "not", "None", "and", "isinstance", "(", "self", ".", "train_times", ",", "dict", ")", ":", "\n", "      ", "train_times", "=", "list", "(", "self", ".", "train_times", ".", "values", "(", ")", ")", "\n", "time_info", "=", "{", "'T-train@epoch'", ":", "np", ".", "mean", "(", "train_times", ")", ",", "'T-train@total'", ":", "np", ".", "sum", "(", "train_times", ")", "}", "\n", "", "else", ":", "\n", "      ", "time_info", "=", "{", "'T-train@epoch'", ":", "None", ",", "'T-train@total'", ":", "None", "}", "\n", "", "for", "name", "in", "self", ".", "eval_names", ":", "\n", "      ", "try", ":", "\n", "        ", "xtimes", "=", "[", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "i", ")", "]", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", "]", "\n", "time_info", "[", "'T-{:}@epoch'", ".", "format", "(", "name", ")", "]", "=", "np", ".", "mean", "(", "xtimes", ")", "\n", "time_info", "[", "'T-{:}@total'", ".", "format", "(", "name", ")", "]", "=", "np", ".", "sum", "(", "xtimes", ")", "\n", "", "except", ":", "\n", "        ", "time_info", "[", "'T-{:}@epoch'", ".", "format", "(", "name", ")", "]", "=", "None", "\n", "time_info", "[", "'T-{:}@total'", ".", "format", "(", "name", ")", "]", "=", "None", "\n", "", "", "return", "time_info", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_eval_set": [[859, 861], ["None"], "methods", ["None"], ["", "def", "get_eval_set", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "eval_names", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_train": [[863, 875], ["sum", "range"], "methods", ["None"], ["", "def", "get_train", "(", "self", ",", "iepoch", "=", "None", ")", ":", "\n", "    ", "if", "iepoch", "is", "None", ":", "iepoch", "=", "self", ".", "epochs", "-", "1", "\n", "assert", "0", "<=", "iepoch", "<", "self", ".", "epochs", ",", "'invalid iepoch={:} < {:}'", ".", "format", "(", "iepoch", ",", "self", ".", "epochs", ")", "\n", "if", "self", ".", "train_times", "is", "not", "None", ":", "\n", "      ", "xtime", "=", "self", ".", "train_times", "[", "iepoch", "]", "\n", "atime", "=", "sum", "(", "[", "self", ".", "train_times", "[", "i", "]", "for", "i", "in", "range", "(", "iepoch", "+", "1", ")", "]", ")", "\n", "", "else", ":", "xtime", ",", "atime", "=", "None", ",", "None", "\n", "return", "{", "'iepoch'", ":", "iepoch", ",", "\n", "'loss'", ":", "self", ".", "train_losses", "[", "iepoch", "]", ",", "\n", "'accuracy'", ":", "self", ".", "train_acc1es", "[", "iepoch", "]", ",", "\n", "'cur_time'", ":", "xtime", ",", "\n", "'all_time'", ":", "atime", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_eval": [[876, 889], ["isinstance", "sum", "len", "range"], "methods", ["None"], ["", "def", "get_eval", "(", "self", ",", "name", ",", "iepoch", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get the evaluation information ; there could be multiple evaluation sets (identified by the 'name' argument).\"\"\"", "\n", "if", "iepoch", "is", "None", ":", "iepoch", "=", "self", ".", "epochs", "-", "1", "\n", "assert", "0", "<=", "iepoch", "<", "self", ".", "epochs", ",", "'invalid iepoch={:} < {:}'", ".", "format", "(", "iepoch", ",", "self", ".", "epochs", ")", "\n", "if", "isinstance", "(", "self", ".", "eval_times", ",", "dict", ")", "and", "len", "(", "self", ".", "eval_times", ")", ">", "0", ":", "\n", "      ", "xtime", "=", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "\n", "atime", "=", "sum", "(", "[", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "i", ")", "]", "for", "i", "in", "range", "(", "iepoch", "+", "1", ")", "]", ")", "\n", "", "else", ":", "xtime", ",", "atime", "=", "None", ",", "None", "\n", "return", "{", "'iepoch'", ":", "iepoch", ",", "\n", "'loss'", ":", "self", ".", "eval_losses", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", ",", "\n", "'accuracy'", ":", "self", ".", "eval_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", ",", "\n", "'cur_time'", ":", "xtime", ",", "\n", "'all_time'", ":", "atime", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_net_param": [[890, 893], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_net_param", "(", "self", ",", "clone", "=", "False", ")", ":", "\n", "    ", "if", "clone", ":", "return", "copy", ".", "deepcopy", "(", "self", ".", "net_state_dict", ")", "\n", "else", ":", "return", "self", ".", "net_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.get_config": [[894, 904], ["str2structure"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.genotypes.Structure.str2structure"], ["", "def", "get_config", "(", "self", ",", "str2structure", ")", ":", "\n", "    ", "\"\"\"This function is used to obtain the config dict for this architecture.\"\"\"", "\n", "if", "str2structure", "is", "None", ":", "\n", "      ", "return", "{", "'name'", ":", "'infer.tiny'", ",", "'C'", ":", "self", ".", "arch_config", "[", "'channel'", "]", ",", "\n", "'N'", ":", "self", ".", "arch_config", "[", "'num_cells'", "]", ",", "\n", "'arch_str'", ":", "self", ".", "arch_config", "[", "'arch_str'", "]", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "", "else", ":", "\n", "      ", "return", "{", "'name'", ":", "'infer.tiny'", ",", "'C'", ":", "self", ".", "arch_config", "[", "'channel'", "]", ",", "\n", "'N'", ":", "self", ".", "arch_config", "[", "'num_cells'", "]", ",", "\n", "'genotype'", ":", "str2structure", "(", "self", ".", "arch_config", "[", "'arch_str'", "]", ")", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.state_dict": [[905, 908], ["api.ResultsCount.__dict__.items"], "methods", ["None"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "_state_dict", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "}", "\n", "return", "_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.load_state_dict": [[909, 911], ["api.ResultsCount.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.create_from_state_dict": [[912, 917], ["api.ResultsCount", "api.ResultsCount.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ResultsCount.load_state_dict"], ["", "@", "staticmethod", "\n", "def", "create_from_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "x", "=", "ResultsCount", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "x", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.print_information": [[18, 42], ["information.get_dataset_names", "enumerate", "information.get_compute_costs", "information.get_metrics", "print", "information.get_metrics", "api.print_information.metric2str"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_dataset_names", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_compute_costs", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.get_metrics"], ["def", "print_information", "(", "information", ",", "extra_info", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "  ", "dataset_names", "=", "information", ".", "get_dataset_names", "(", ")", "\n", "strings", "=", "[", "information", ".", "arch_str", ",", "'datasets : {:}, extra-info : {:}'", ".", "format", "(", "dataset_names", ",", "extra_info", ")", "]", "\n", "def", "metric2str", "(", "loss", ",", "acc", ")", ":", "\n", "    ", "return", "'loss = {:.3f}, top1 = {:.2f}%'", ".", "format", "(", "loss", ",", "acc", ")", "\n", "\n", "", "for", "ida", ",", "dataset", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "    ", "metric", "=", "information", ".", "get_compute_costs", "(", "dataset", ")", "\n", "flop", ",", "param", ",", "latency", "=", "metric", "[", "'flops'", "]", ",", "metric", "[", "'params'", "]", ",", "metric", "[", "'latency'", "]", "\n", "str1", "=", "'{:14s} FLOP={:6.2f} M, Params={:.3f} MB, latency={:} ms.'", ".", "format", "(", "dataset", ",", "flop", ",", "param", ",", "'{:.2f}'", ".", "format", "(", "latency", "*", "1000", ")", "if", "latency", "is", "not", "None", "and", "latency", ">", "0", "else", "None", ")", "\n", "train_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'train'", ")", "\n", "if", "dataset", "==", "'cifar10-valid'", ":", "\n", "      ", "valid_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], valid : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "valid_info", "[", "'loss'", "]", ",", "valid_info", "[", "'accuracy'", "]", ")", ")", "\n", "", "elif", "dataset", "==", "'cifar10'", ":", "\n", "      ", "test__info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], test  : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "test__info", "[", "'loss'", "]", ",", "test__info", "[", "'accuracy'", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "valid_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ")", "\n", "test__info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-test'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], valid : [{:}], test : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "valid_info", "[", "'loss'", "]", ",", "valid_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "test__info", "[", "'loss'", "]", ",", "test__info", "[", "'accuracy'", "]", ")", ")", "\n", "", "strings", "+=", "[", "str1", ",", "str2", "]", "\n", "", "if", "show", ":", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "return", "strings", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_open_domain.test_darts_cifar10.infer": [[18, 39], ["nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "model.eval", "enumerate", "input.to.to", "target.to.to", "model", "criterion", "nas_lib.utils.utils_darts.top_accuracy", "input.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "criterion.item", "prec1.item", "prec5.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update"], ["def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ",", "device", ")", ":", "\n", "    ", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "        ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "100", "==", "0", "and", "step", "!=", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'valid %03d %e %.4f %.4f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_open_domain.train_darts_cifar10.train": [[25, 52], ["nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "model.train", "enumerate", "input.to.to", "target.to.to", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "nas_lib.utils.utils_darts.top_accuracy", "input.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "criterion", "model.parameters", "criterion.item", "prec1.item", "prec5.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.tools_open_domain.train_darts_cifar10.train", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.layers.gaussian_sample_layer.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update"], ["def", "train", "(", "train_queue", ",", "model", ",", "criterion", ",", "optimizer", ",", "device", ")", ":", "\n", "    ", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "logits_aux", "=", "model", "(", "input", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "if", "args", ".", "auxiliary", ":", "\n", "            ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", "and", "step", "!=", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_open_domain.train_darts_cifar10.infer": [[54, 75], ["nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "model.eval", "enumerate", "input.to.to", "target.to.to", "model", "criterion", "nas_lib.utils.utils_darts.top_accuracy", "input.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "criterion.item", "prec1.item", "prec5.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ",", "device", ")", ":", "\n", "    ", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "        ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", "and", "step", "!=", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare_parse.load_file": [[6, 26], ["list", "open", "pickle.load", "pickle.load.keys", "total_data_train_all.append", "total_data_test_all.append", "total_data_kl_all.append", "numpy.array", "numpy.array", "numpy.array", "total_data_train.append", "total_data_test.append", "total_data_kl.append"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["def", "load_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "keys", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "total_data_train_all", "=", "[", "]", "\n", "total_data_test_all", "=", "[", "]", "\n", "total_data_kl_all", "=", "[", "]", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "total_data_train", "=", "[", "]", "\n", "total_data_test", "=", "[", "]", "\n", "total_data_kl", "=", "[", "]", "\n", "algo_data", "=", "data", "[", "k", "]", "\n", "for", "ad", "in", "algo_data", ":", "\n", "            ", "total_data_train", ".", "append", "(", "ad", "[", "0", "]", ")", "\n", "total_data_test", ".", "append", "(", "ad", "[", "1", "]", ")", "\n", "total_data_kl", ".", "append", "(", "ad", "[", "2", "]", ")", "\n", "", "total_data_train_all", ".", "append", "(", "total_data_train", ")", "\n", "total_data_test_all", ".", "append", "(", "total_data_test", ")", "\n", "total_data_kl_all", ".", "append", "(", "total_data_kl", ")", "\n", "", "return", "keys", ",", "np", ".", "array", "(", "total_data_train_all", ")", ",", "np", ".", "array", "(", "total_data_test_all", ")", ",", "np", ".", "array", "(", "total_data_kl_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare._data_split": [[27, 46], ["list", "list", "enumerate", "data_path_encoding.append", "data_wo_path_endocing.append", "tuple", "tuple", "list.append", "list.append", "list.append", "list.append", "ValueError"], "function", ["None"], ["def", "_data_split", "(", "train_data", ")", ":", "\n", "    ", "data_path_encoding", "=", "[", "]", "\n", "data_wo_path_endocing", "=", "[", "]", "\n", "for", "d", "in", "train_data", ":", "\n", "        ", "path_encoding_tuple", "=", "list", "(", ")", "\n", "path_wo_encoding_tuple", "=", "list", "(", ")", "\n", "for", "idx", ",", "d_nest", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "if", "idx", "==", "0", "or", "idx", "==", "3", "or", "idx", "==", "4", ":", "\n", "                ", "path_encoding_tuple", ".", "append", "(", "d_nest", ")", "\n", "path_wo_encoding_tuple", ".", "append", "(", "d_nest", ")", "\n", "", "elif", "idx", "==", "1", ":", "\n", "                ", "path_encoding_tuple", ".", "append", "(", "d_nest", ")", "\n", "", "elif", "idx", "==", "2", ":", "\n", "                ", "path_wo_encoding_tuple", ".", "append", "(", "d_nest", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'idx is not support!'", ")", "\n", "", "", "data_path_encoding", ".", "append", "(", "tuple", "(", "path_encoding_tuple", ")", ")", "\n", "data_wo_path_endocing", ".", "append", "(", "tuple", "(", "path_wo_encoding_tuple", ")", ")", "\n", "", "return", "data_path_encoding", ",", "data_wo_path_endocing", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.kl_divergence": [[48, 58], ["numpy.log", "numpy.log", "numpy.sum", "print"], "function", ["None"], ["", "def", "kl_divergence", "(", "dis_a", ",", "dis_b", ")", ":", "\n", "    ", "dis_a", "+=", "1e-6", "\n", "dis_b", "+=", "1e-6", "\n", "log_a", "=", "np", ".", "log", "(", "dis_a", ")", "\n", "log_b", "=", "np", ".", "log", "(", "dis_b", ")", "\n", "part1", "=", "dis_a", "*", "log_a", "\n", "part2", "=", "dis_a", "*", "log_b", "\n", "result", "=", "np", ".", "sum", "(", "part1", "-", "part2", ")", "\n", "print", "(", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.path_encoding_distribution": [[60, 67], ["list", "range", "numpy.sum", "numpy.sum", "len", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "path_encoding_distribution", "(", "path_encoding_list", ")", ":", "\n", "    ", "encoding_list", "=", "[", "d", "[", "1", "]", "for", "d", "in", "path_encoding_list", "]", "\n", "x_idx", "=", "list", "(", "range", "(", "len", "(", "encoding_list", "[", "0", "]", ")", ")", ")", "\n", "np_encoding", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "encoding_list", ")", ",", "axis", "=", "0", ")", "/", "np", ".", "sum", "(", "np", ".", "array", "(", "encoding_list", ")", ")", "\n", "# plt.bar(x_idx, np_encoding)", "\n", "# plt.show()", "\n", "return", "np_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.plot_meta_neuralnet": [[69, 91], ["matplotlib.subplots", "ax.scatter", "ax.scatter", "matplotlib.xlim", "matplotlib.ylim", "numpy.array", "matplotlib.xlim", "matplotlib.ylim", "ax.plot", "fig.set_dpi", "matplotlib.gca().set_aspect", "matplotlib.title", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.min", "numpy.max", "matplotlib.gca", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.ylim"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show"], ["", "def", "plot_meta_neuralnet", "(", "ytrain", ",", "train_pred", ",", "ytest", ",", "test_pred", ",", "max_disp", "=", "500", ",", "title", "=", "None", ",", "file_name", "=", "None", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "scatter", "(", "ytrain", "[", ":", "max_disp", "]", ",", "train_pred", "[", ":", "max_disp", "]", ",", "label", "=", "'training data'", ",", "alpha", "=", "0.7", ",", "s", "=", "64", ")", "\n", "ax", ".", "scatter", "(", "ytest", "[", ":", "max_disp", "]", ",", "test_pred", "[", ":", "max_disp", "]", ",", "label", "=", "'test data'", ",", "alpha", "=", "0.7", ",", "marker", "=", "'^'", ")", "\n", "\n", "# axis limits", "\n", "plt", ".", "xlim", "(", "(", "5", ",", "15", ")", ")", "\n", "plt", ".", "ylim", "(", "(", "5", ",", "15", ")", ")", "\n", "ax_lim", "=", "np", ".", "array", "(", "[", "np", ".", "min", "(", "[", "plt", ".", "xlim", "(", ")", "[", "0", "]", ",", "plt", ".", "ylim", "(", ")", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "[", "plt", ".", "xlim", "(", ")", "[", "1", "]", ",", "plt", ".", "ylim", "(", ")", "[", "1", "]", "]", ")", "]", ")", "\n", "plt", ".", "xlim", "(", "ax_lim", ")", "\n", "plt", ".", "ylim", "(", "ax_lim", ")", "\n", "\n", "# 45-degree line", "\n", "ax", ".", "plot", "(", "ax_lim", ",", "ax_lim", ",", "'k:'", ")", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_aspect", "(", "'equal'", ",", "adjustable", "=", "'box'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "plt", ".", "xlabel", "(", "'true percent error'", ")", "\n", "plt", ".", "ylabel", "(", "'predicted percent error'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.run_bananas": [[93, 144], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "print", "print", "nas_lib.models.meta_neural_net.MetaNeuralnet", "nas_lib.models.meta_neural_net.MetaNeuralnet.fit", "numpy.squeeze", "numpy.mean", "train_errors.append", "numpy.squeeze", "numpy.mean", "test_errors.append", "np.round.append", "test_preds.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "nas_lib.models.meta_neural_net.MetaNeuralnet.predict", "abs", "nas_lib.models.meta_neural_net.MetaNeuralnet.predict", "abs"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict", "home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.predict"], ["", "def", "run_bananas", "(", "params", ",", "\n", "train_data", ",", "\n", "test_data", ",", "\n", "num_ensemble", "=", "3", ",", "\n", "encode_paths", "=", "True", ",", "\n", "n", "=", "10", ",", "\n", "gpu", "=", "1", ")", ":", "\n", "    ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "1", "]", "for", "d", "in", "train_data", "]", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "train_data", "]", ")", "\n", "\n", "xtest", "=", "np", ".", "array", "(", "[", "d", "[", "1", "]", "for", "d", "in", "test_data", "]", ")", "\n", "ytest", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "test_data", "]", ")", "\n", "\n", "train_errors", "=", "[", "]", "\n", "test_errors", "=", "[", "]", "\n", "train_preds", "=", "[", "]", "\n", "test_preds", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "        ", "meta_neuralnet", "=", "MetaNeuralnet", "(", "gpu", "=", "gpu", ")", "\n", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "params", ")", "\n", "train_pred", "=", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "train_errors", ".", "append", "(", "train_error", ")", "\n", "test_pred", "=", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xtest", ")", ")", "\n", "test_error", "=", "np", ".", "mean", "(", "abs", "(", "test_pred", "-", "ytest", ")", ")", "\n", "test_errors", ".", "append", "(", "test_error", ")", "\n", "\n", "train_preds", ".", "append", "(", "train_pred", ")", "\n", "test_preds", ".", "append", "(", "test_pred", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "\n", "", "train_error", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "train_errors", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "test_error", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "test_errors", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "\n", "train_preds", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "train_preds", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "test_pred", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "test_preds", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "\n", "print", "(", "'Meta neuralnet training size: {}, encode paths: {}'", ".", "format", "(", "n", ",", "encode_paths", ")", ")", "\n", "print", "(", "'Train error: {}, test validation error: {}'", ".", "format", "(", "train_error", ",", "test_error", ")", ")", "\n", "if", "encode_paths", ":", "\n", "# title = 'Path encoding, training set size {}, test error {}'.format(n, test_error)", "\n", "        ", "title", "=", "'Path encoding, training set size {}'", ".", "format", "(", "n", ")", "\n", "file_all", "=", "'bananas_path_based_samples_%d_epoch_%d.png'", "%", "(", "n", ",", "params", "[", "'epochs'", "]", ")", "\n", "", "else", ":", "\n", "# title = 'Adjacency list encoding, training set size {}, test error {}'.format(n, test_error)", "\n", "        ", "title", "=", "'Adjacency list encoding, training set size {}'", ".", "format", "(", "n", ")", "\n", "file_all", "=", "'bananas_adjacency_samples_%d_epoch_%d.png'", "%", "(", "n", ",", "params", "[", "'epochs'", "]", ")", "\n", "# plot_meta_neuralnet(ytrain, train_preds, ytest, test_pred, title=title, file_name=file_all)", "\n", "", "return", "train_error", ",", "test_error", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.run_np_uncertainty": [[146, 203], ["numpy.array", "numpy.array", "nas_lib.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer", "nas_lib.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.fit", "nas_lib.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "nas_lib.eigen.trainer_uncertainty_predictor.NasBenchGinGaussianTrainer.pred", "pred_train.cpu().numpy.cpu().numpy", "mean_train.cpu().numpy.cpu().numpy", "predictions.cpu().numpy.cpu().numpy", "mean_test_pred.cpu().numpy.cpu().numpy", "numpy.mean", "numpy.mean", "train_errors.append", "train_mean_errors.append", "numpy.mean", "numpy.mean", "val_test_errors.append", "val_pred_errors.append", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "print", "print", "nas_lib.utils.utils_data.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "nas_lib.utils.utils_data.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "len", "pred_train.cpu().numpy.cpu", "mean_train.cpu().numpy.cpu", "predictions.cpu().numpy.cpu", "mean_test_pred.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2"], ["", "def", "run_np_uncertainty", "(", "n", ",", "lr", ",", "train_data", ",", "test_data", ")", ":", "\n", "    ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "train_data", "]", "\n", "arch_graph", "=", "[", "[", "d", "[", "0", "]", "[", "'matrix'", "]", ",", "d", "[", "0", "]", "[", "'ops'", "]", "]", "for", "d", "in", "train_data", "]", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_graph", ":", "\n", "        ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "train_data", "]", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "candidate_arch_graph", "=", "[", "[", "d", "[", "0", "]", "[", "'matrix'", "]", ",", "d", "[", "0", "]", "[", "'ops'", "]", "]", "for", "d", "in", "test_data", "]", "\n", "for", "cand", "in", "candidate_arch_graph", ":", "\n", "        ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "val_test_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "test_data", "]", ")", "\n", "\n", "train_errors", "=", "[", "]", "\n", "train_mean_errors", "=", "[", "]", "\n", "val_pred_errors", "=", "[", "]", "\n", "val_test_errors", "=", "[", "]", "\n", "agent", "=", "NasBenchGinGaussianTrainer", "(", "'gin_gaussian'", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "1000", ",", "\n", "train_images", "=", "len", "(", "arch_data", ")", ",", "batch_size", "=", "16", ")", "\n", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "\n", "pred_train", ",", "mean_train", ",", "_", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "predictions", ",", "mean_test_pred", ",", "_", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "\n", "pred_train", "=", "pred_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mean_train", "=", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predictions", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mean_test_pred", "=", "mean_test_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "pred_train", "-", "val_accuracy", ")", ")", "\n", "train_error_mean", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", "-", "val_accuracy", ")", ")", "\n", "train_errors", ".", "append", "(", "train_error", ")", "\n", "train_mean_errors", ".", "append", "(", "train_error_mean", ")", "\n", "\n", "val_mean_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "val_test_accuracy", "-", "mean_test_pred", ")", ")", "\n", "val_pred_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "val_test_accuracy", "-", "predictions", ")", ")", "\n", "val_test_errors", ".", "append", "(", "val_mean_error", ")", "\n", "val_pred_errors", ".", "append", "(", "val_pred_error", ")", "\n", "\n", "train_error", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "train_errors", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "train_mean_error", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "train_mean_errors", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "val_error", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "val_pred_errors", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "val_mean_error", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "val_test_errors", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "\n", "print", "(", "'Neural predictor with uncertainty estimation and predictor training size: {}'", ".", "format", "(", "n", ")", ")", "\n", "print", "(", "'Train predicted error: {}, Train mean error: {}, Test pred error: {}, Test mean error: {}'", ".", "format", "(", "\n", "train_error", ",", "train_mean_error", ",", "val_mean_error", ",", "val_error", ")", ")", "\n", "\n", "title", "=", "'Neural predictor Uncertainty, training set size {}'", ".", "format", "(", "n", ")", "\n", "file_all", "=", "'neural_predictor_w.u._samples_%d_epoch_%d.png'", "%", "(", "n", ",", "1000", ")", "\n", "# plot_meta_neuralnet(val_accuracy, mean_train, val_test_accuracy, mean_test_pred, title=title, file_name=file_all)", "\n", "return", "train_mean_error", ",", "val_error", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.run_np": [[205, 251], ["numpy.array", "numpy.array", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "mean_train.cpu().numpy.cpu().numpy", "mean_test_pred.cpu().numpy.cpu().numpy", "numpy.mean", "train_mean_errors.append", "numpy.mean", "val_test_errors.append", "numpy.round", "numpy.round", "print", "print", "nas_lib.utils.utils_data.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "nas_lib.utils.utils_data.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "numpy.abs", "numpy.abs", "numpy.mean", "numpy.mean", "len", "mean_train.cpu().numpy.cpu", "mean_test_pred.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.models.meta_neural_net.MetaNeuralnet.fit", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.nasbench2graph2"], ["", "def", "run_np", "(", "n", ",", "lr", ",", "train_data", ",", "test_data", ")", ":", "\n", "    ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "train_data", "]", "\n", "arch_graph", "=", "[", "[", "d", "[", "0", "]", "[", "'matrix'", "]", ",", "d", "[", "0", "]", "[", "'ops'", "]", "]", "for", "d", "in", "train_data", "]", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_graph", ":", "\n", "        ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "train_data", "]", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "candidate_arch_graph", "=", "[", "[", "d", "[", "0", "]", "[", "'matrix'", "]", ",", "d", "[", "0", "]", "[", "'ops'", "]", "]", "for", "d", "in", "test_data", "]", "\n", "for", "cand", "in", "candidate_arch_graph", ":", "\n", "        ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "val_test_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "2", "]", "for", "d", "in", "test_data", "]", ")", "\n", "\n", "train_mean_errors", "=", "[", "]", "\n", "val_test_errors", "=", "[", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "'nnp'", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "300", ",", "\n", "train_images", "=", "len", "(", "arch_data", ")", ",", "batch_size", "=", "16", ",", "rate", "=", "20", ")", "\n", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "\n", "mean_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "mean_test_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "\n", "mean_train", "=", "mean_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mean_test_pred", "=", "mean_test_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "train_error_mean", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_train", "-", "val_accuracy", ")", ")", "\n", "train_mean_errors", ".", "append", "(", "train_error_mean", ")", "\n", "\n", "val_mean_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "val_test_accuracy", "-", "mean_test_pred", ")", ")", "\n", "val_test_errors", ".", "append", "(", "val_mean_error", ")", "\n", "\n", "train_mean_error", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "train_mean_errors", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "val_mean_error", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "val_test_errors", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "\n", "print", "(", "'Neural predictor training size: {}'", ".", "format", "(", "n", ")", ")", "\n", "print", "(", "'Train mean error: {}, Test mean error: {}'", ".", "format", "(", "train_mean_error", ",", "val_mean_error", ")", ")", "\n", "title", "=", "'Neural predictor, training set size {}'", ".", "format", "(", "n", ")", "\n", "file_all", "=", "'neural_predictor_samples_%d_epoch_%d.png'", "%", "(", "n", ",", "300", ")", "\n", "# plot_meta_neuralnet(val_accuracy, mean_train, val_test_accuracy, mean_test_pred, title=title, file_name=file_all)", "\n", "return", "train_mean_error", ",", "val_mean_error", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.meta_neural_net_experiment": [[253, 311], ["print", "search_space.generate_random_dataset_both", "copy.deepcopy", "search_space.generate_random_dataset_both", "prediction_compare.path_encoding_distribution", "prediction_compare.path_encoding_distribution", "print", "prediction_compare.kl_divergence", "search_space.remove_duplicates_both", "prediction_compare._data_split", "prediction_compare._data_split", "print", "list", "algo_dict.keys", "len", "prediction_compare.run_bananas", "algo_dict[].append", "int", "prediction_compare.run_bananas", "algo_dict[].append", "prediction_compare.run_np_uncertainty", "algo_dict[].append", "len", "prediction_compare.run_np", "algo_dict[].append", "ValueError", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.generate_random_dataset_both", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.generate_random_dataset_both", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.path_encoding_distribution", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.path_encoding_distribution", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.kl_divergence", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench2.DataNasBenchNew.remove_duplicates_both", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare._data_split", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare._data_split", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.run_bananas", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.run_bananas", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.run_np_uncertainty", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.prediction_compare.run_np"], ["", "def", "meta_neural_net_experiment", "(", "i", ",", "lr", ",", "algo_dict", ",", "ns", "=", "(", "100", ",", "500", ")", ",", "search_space", "=", "None", ")", ":", "\n", "    ", "gpu", "=", "0", "\n", "meta_neural_net_params", "=", "{", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "20", ",", "'epochs'", ":", "200", ",", "\n", "'batch_size'", ":", "32", ",", "'lr'", ":", ".01", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", "}", "\n", "print", "(", "'#########################  Epoch %d base lr %.4f #######################'", "%", "(", "i", ",", "lr", ")", ")", "\n", "test_data_total_origin", "=", "search_space", ".", "generate_random_dataset_both", "(", "num", "=", "1000", ",", "allow_isomorphisms", "=", "False", ")", "\n", "for", "n", "in", "ns", ":", "\n", "        ", "test_data_total", "=", "copy", ".", "deepcopy", "(", "test_data_total_origin", ")", "\n", "test_size", "=", "500", "\n", "train_data_total", "=", "search_space", ".", "generate_random_dataset_both", "(", "num", "=", "n", ",", "allow_isomorphisms", "=", "False", ")", "\n", "encoding_1", "=", "path_encoding_distribution", "(", "train_data_total", ")", "\n", "encoding_2", "=", "path_encoding_distribution", "(", "test_data_total", ")", "\n", "\n", "print", "(", "f'Training dataset size {n} kl divergence ################>>>>'", ")", "\n", "kl_dist", "=", "kl_divergence", "(", "encoding_1", ",", "encoding_2", ")", "\n", "test_data_total", "=", "search_space", ".", "remove_duplicates_both", "(", "test_data_total", ",", "train_data_total", ")", "\n", "test_data_total", "=", "test_data_total", "[", ":", "int", "(", "len", "(", "test_data_total", ")", "-", "len", "(", "test_data_total", ")", "%", "64", ")", "]", "[", ":", "test_size", "]", "\n", "train_data_pe", ",", "train_data_wo_pe", "=", "_data_split", "(", "train_data_total", ")", "\n", "test_data_pe", ",", "test_data_wo_pe", "=", "_data_split", "(", "test_data_total", ")", "\n", "print", "(", "'#########################  Real test data size is %d #######################'", "%", "(", "len", "(", "test_data_total", ")", ")", ")", "\n", "algos_list", "=", "list", "(", "algo_dict", ".", "keys", "(", ")", ")", "\n", "for", "algos", "in", "algos_list", ":", "\n", "            ", "if", "algos", "==", "'bananas_false'", ":", "\n", "                ", "train_error", ",", "test_error", "=", "run_bananas", "(", "meta_neural_net_params", ",", "\n", "train_data", "=", "train_data_wo_pe", ",", "\n", "test_data", "=", "test_data_wo_pe", ",", "\n", "n", "=", "n", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "encode_paths", "=", "False", ",", "\n", "gpu", "=", "gpu", "\n", ")", "\n", "algo_dict", "[", "'bananas_false'", "]", ".", "append", "(", "(", "train_error", ",", "test_error", ",", "kl_dist", ")", ")", "\n", "", "elif", "algos", "==", "'bananas_true'", ":", "\n", "                ", "train_error", ",", "test_error", "=", "run_bananas", "(", "meta_neural_net_params", ",", "\n", "train_data", "=", "train_data_pe", ",", "\n", "test_data", "=", "test_data_pe", ",", "\n", "n", "=", "n", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "encode_paths", "=", "True", ",", "\n", "gpu", "=", "gpu", "\n", ")", "\n", "algo_dict", "[", "'bananas_true'", "]", ".", "append", "(", "(", "train_error", ",", "test_error", ",", "kl_dist", ")", ")", "\n", "", "elif", "algos", "==", "'neural_predictor_uncertainty'", ":", "\n", "                ", "train_error", ",", "test_error", "=", "run_np_uncertainty", "(", "n", "=", "n", ",", "\n", "lr", "=", "lr", ",", "\n", "train_data", "=", "train_data_pe", ",", "\n", "test_data", "=", "test_data_pe", "\n", ")", "\n", "algo_dict", "[", "'neural_predictor_uncertainty'", "]", ".", "append", "(", "(", "train_error", ",", "test_error", ",", "kl_dist", ")", ")", "\n", "", "elif", "algos", "==", "'neural_predictor'", ":", "\n", "                ", "train_error", ",", "test_error", "=", "run_np", "(", "n", "=", "n", ",", "\n", "lr", "=", "lr", ",", "\n", "train_data", "=", "train_data_pe", ",", "\n", "test_data", "=", "test_data_pe", "\n", ")", "\n", "algo_dict", "[", "'neural_predictor'", "]", ".", "append", "(", "(", "train_error", ",", "test_error", ",", "kl_dist", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'train error and test error should have value!'", ")", "\n", "# train_error_list.append(train_error)", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.kl_divergence": [[23, 32], ["numpy.log", "numpy.log", "numpy.sum", "print"], "function", ["None"], ["def", "kl_divergence", "(", "dis_a", ",", "dis_b", ")", ":", "\n", "    ", "dis_a", "+=", "1e-6", "\n", "dis_b", "+=", "1e-6", "\n", "log_a", "=", "np", ".", "log", "(", "dis_a", ")", "\n", "log_b", "=", "np", ".", "log", "(", "dis_b", ")", "\n", "part1", "=", "dis_a", "*", "log_a", "\n", "part2", "=", "dis_a", "*", "log_b", "\n", "result", "=", "np", ".", "sum", "(", "part1", "-", "part2", ")", "\n", "print", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.path_encoding_distribution": [[34, 41], ["list", "matplotlib.bar", "matplotlib.show", "range", "numpy.sum", "numpy.sum", "len", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show"], ["", "def", "path_encoding_distribution", "(", "path_encoding_list", ")", ":", "\n", "    ", "encoding_list", "=", "[", "d", "[", "1", "]", "for", "d", "in", "path_encoding_list", "]", "\n", "x_idx", "=", "list", "(", "range", "(", "len", "(", "encoding_list", "[", "0", "]", ")", ")", ")", "\n", "np_encoding", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "encoding_list", ")", ",", "axis", "=", "0", ")", "/", "np", ".", "sum", "(", "np", ".", "array", "(", "encoding_list", ")", ")", "\n", "plt", ".", "bar", "(", "x_idx", ",", "np_encoding", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "np_encoding", ",", "x_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.path_encoding_dict_distribution": [[43, 50], ["list", "matplotlib.bar", "matplotlib.show", "range", "numpy.sum", "numpy.sum", "len", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show"], ["", "def", "path_encoding_dict_distribution", "(", "path_encoding_list", ")", ":", "\n", "    ", "encoding_list", "=", "[", "path_encoding_list", "[", "k", "]", "for", "k", "in", "path_encoding_list", "]", "\n", "x_idx", "=", "list", "(", "range", "(", "len", "(", "encoding_list", "[", "0", "]", ")", ")", ")", "\n", "np_encoding", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "encoding_list", ")", ",", "axis", "=", "0", ")", "/", "np", ".", "sum", "(", "np", ".", "array", "(", "encoding_list", ")", ")", "\n", "plt", ".", "bar", "(", "x_idx", ",", "np_encoding", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "np_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.meta_neural_net_experiment_pipeline1": [[52, 58], ["nas_lib.data.data.build_datasets", "nas_lib.data.data.build_datasets.generate_random_dataset_gin", "visualize_sample_distribution.path_encoding_distribution", "print", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.build_datasets", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench.DataNasBench.generate_random_dataset_gin", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.path_encoding_distribution"], ["", "def", "meta_neural_net_experiment_pipeline1", "(", "samples", ")", ":", "\n", "    ", "search_space", "=", "build_datasets", "(", "'nasbench_case1'", ")", "\n", "test_data_total", "=", "search_space", ".", "generate_random_dataset_gin", "(", "num", "=", "samples", ",", "allow_isomorphisms", "=", "False", ")", "\n", "encoding_2", "=", "path_encoding_distribution", "(", "test_data_total", ")", "\n", "print", "(", "f'The number of samples is {len(test_data_total)}.'", ")", "\n", "return", "encoding_2", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.meta_neural_net_experiment_pipeline2": [[60, 66], ["nas_lib.data.data.build_datasets", "nas_lib.data.data.build_datasets.generate_random_dataset", "visualize_sample_distribution.path_encoding_distribution", "print", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.build_datasets", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_ars_wo_none.DataNasBenchASR_WO_None.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.path_encoding_distribution"], ["", "def", "meta_neural_net_experiment_pipeline2", "(", "samples", ")", ":", "\n", "    ", "search_space", "=", "build_datasets", "(", "'nasbench_data_distribution'", ")", "\n", "test_data_total", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "samples", ",", "allow_isomorphisms", "=", "False", ")", "\n", "encoding_2", "=", "path_encoding_distribution", "(", "test_data_total", ")", "\n", "print", "(", "f'The number of samples is {len(test_data_total)}'", ")", "\n", "return", "encoding_2", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.meta_neural_net_experiment_full": [[68, 74], ["nas_lib.data.data.build_datasets", "nas_lib.data.data.build_datasets.get_all_path_encooding", "visualize_sample_distribution.path_encoding_dict_distribution", "print", "len"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.build_datasets", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data_nasbench_101_distributon_analysis.DataNasBenchDist.get_all_path_encooding", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.path_encoding_dict_distribution"], ["", "def", "meta_neural_net_experiment_full", "(", ")", ":", "\n", "    ", "search_space", "=", "build_datasets", "(", "'nasbench_data_distribution'", ")", "\n", "total_encodings", "=", "search_space", ".", "get_all_path_encooding", "(", ")", "\n", "distributions", "=", "path_encoding_dict_distribution", "(", "total_encodings", ")", "\n", "print", "(", "f'The number of samples is {len(total_encodings)}'", ")", "\n", "return", "distributions", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.plot_combine_graph": [[76, 87], ["matplotlib.subplots", "ax.plot", "ax.plot", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "fig.set_dpi", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.visualize.visualize_gentype_darts.plot", "home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show"], ["", "def", "plot_combine_graph", "(", "encoding_1", ",", "encoding_2", ",", "idx", "=", "None", ",", "encoding_all", "=", "None", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "idx", ",", "encoding_1", ",", "label", "=", "'default'", ")", "\n", "ax", ".", "plot", "(", "idx", ",", "encoding_2", ",", "label", "=", "'new'", ")", "\n", "ax", ".", "plot", "(", "idx", ",", "encoding_all", ",", "label", "=", "'ground truth'", ")", "\n", "ax", ".", "set_xlabel", "(", "'path index'", ",", "fontsize", "=", "12", ")", "\n", "ax", ".", "set_ylabel", "(", "'value'", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "12", ")", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "# ax.grid()", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.plot_combine_graph2_log_scale": [[89, 116], ["matplotlib.subplots", "numpy.argwhere", "ax.scatter", "numpy.argwhere", "ax.scatter", "numpy.argwhere", "ax.scatter", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "fig.set_dpi", "numpy.log10", "print", "range", "matplotlib.show", "len", "print", "numpy.log10", "numpy.log10", "numpy.log10"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.nas_201_api.api.ArchResults.show"], ["", "def", "plot_combine_graph2_log_scale", "(", "encoding_1", ",", "encoding_2", ",", "idx", "=", "None", ",", "encoding_all", "=", "None", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "idx_encoding1", "=", "np", ".", "argwhere", "(", "encoding_1", "!=", "0", ")", "\n", "ax", ".", "scatter", "(", "idx_encoding1", ",", "np", ".", "log10", "(", "encoding_1", ",", "where", "=", "(", "encoding_1", "!=", "0", ")", ")", "[", "idx_encoding1", "]", ",", "label", "=", "'default'", ",", "marker", "=", "'*'", ",", "\n", "s", "=", "9", ")", "\n", "\n", "idx_encoding2", "=", "np", ".", "argwhere", "(", "encoding_2", "!=", "0", ")", "\n", "ax", ".", "scatter", "(", "idx_encoding2", ",", "np", ".", "log10", "(", "encoding_2", ",", "where", "=", "(", "encoding_2", "!=", "0", ")", ")", "[", "idx_encoding2", "]", ",", "label", "=", "'new'", ",", "marker", "=", "'o'", ",", "\n", "s", "=", "9", ")", "\n", "\n", "idx_encoding_all", "=", "np", ".", "argwhere", "(", "encoding_all", "!=", "0", ")", "\n", "ax", ".", "scatter", "(", "idx_encoding_all", ",", "np", ".", "log10", "(", "encoding_all", ",", "where", "=", "(", "encoding_all", "!=", "0", ")", ")", "[", "idx_encoding_all", "]", ",", "\n", "label", "=", "'ground truth'", ",", "marker", "=", "'1'", ",", "s", "=", "9", ")", "\n", "# ax.set(xlabel='path index', ylabel='log value',", "\n", "#        title='Comparison of paths distribution of different sampling pipeline.')", "\n", "ax", ".", "set_xlabel", "(", "'path index'", ",", "fontsize", "=", "12", ")", "\n", "ax", ".", "set_ylabel", "(", "'p'", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "12", ")", "\n", "# plt.legend(loc='upper right')", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "\n", "log_val", "=", "np", ".", "log10", "(", "encoding_2", ",", "where", "=", "(", "encoding_2", "!=", "0", ")", ")", "\n", "\n", "print", "(", "'#######'", "*", "30", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "log_val", ")", ")", ":", "\n", "        ", "print", "(", "encoding_2", "[", "i", "]", ",", "log_val", "[", "i", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.main": [[118, 136], ["nas_lib.utils.comm.set_random_seed", "visualize_sample_distribution.meta_neural_net_experiment_pipeline1", "visualize_sample_distribution.meta_neural_net_experiment_pipeline2", "visualize_sample_distribution.meta_neural_net_experiment_full", "print", "print", "print", "visualize_sample_distribution.plot_combine_graph", "visualize_sample_distribution.plot_combine_graph2_log_scale", "print"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.comm.set_random_seed", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.meta_neural_net_experiment_pipeline1", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.meta_neural_net_experiment_pipeline2", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.meta_neural_net_experiment_full", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.plot_combine_graph", "home.repos.pwc.inspect_result.auroua_NPENASv1.tools_close_domain.visualize_sample_distribution.plot_combine_graph2_log_scale"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "encoding_sample_pipeline1", ",", "x_idx", "=", "meta_neural_net_experiment_pipeline1", "(", "samples", "=", "args", ".", "sample_nums", ")", "\n", "encoding_sample_pipeline2", ",", "_", "=", "meta_neural_net_experiment_pipeline2", "(", "samples", "=", "args", ".", "sample_nums", ")", "\n", "encoding_full", "=", "meta_neural_net_experiment_full", "(", ")", "\n", "# with open(args.save_dir, 'wb') as f:", "\n", "#     pickle.dump(encoding_sample_pipeline1, f)", "\n", "#     pickle.dump(encoding_sample_pipeline2, f)", "\n", "#     pickle.dump(encoding_full, f)", "\n", "#     pickle.dump(x_idx, f)", "\n", "print", "(", "encoding_sample_pipeline1", ")", "\n", "print", "(", "encoding_sample_pipeline2", ")", "\n", "print", "(", "encoding_full", ")", "\n", "plot_combine_graph", "(", "encoding_1", "=", "encoding_sample_pipeline1", ",", "encoding_2", "=", "encoding_sample_pipeline2", ",", "idx", "=", "x_idx", ",", "\n", "encoding_all", "=", "encoding_full", ")", "\n", "plot_combine_graph2_log_scale", "(", "encoding_1", "=", "encoding_sample_pipeline1", ",", "encoding_2", "=", "encoding_sample_pipeline2", ",", "\n", "idx", "=", "x_idx", ",", "encoding_all", "=", "encoding_full", ")", "\n", "print", "(", "'kl divergence ################'", ")", "\n", "# kl_divergence(encoding_sample_pipeline1, encoding_full)", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.avg_pool._avg_pool_x": [[8, 10], ["utils.scatter_"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.scatter.scatter_"], ["def", "_avg_pool_x", "(", "cluster", ",", "x", ",", "size", "=", "None", ")", ":", "\n", "    ", "return", "scatter_", "(", "'mean'", ",", "x", ",", "cluster", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.avg_pool.avg_pool_x": [[12, 38], ["consecutive.consecutive_cluster", "avg_pool._avg_pool_x", "pool.pool_batch", "avg_pool._avg_pool_x", "pool.pool_batch.max().item", "pool.pool_batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pool.consecutive.consecutive_cluster", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.avg_pool._avg_pool_x", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_batch", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.avg_pool._avg_pool_x"], ["", "def", "avg_pool_x", "(", "cluster", ",", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Average pools node features according to the clustering defined in\n    :attr:`cluster`.\n    See :meth:`torch_geometric.nn.pool.max_pool_x` for more details.\n\n    Args:\n        cluster (LongTensor): Cluster vector :math:`\\mathbf{c} \\in \\{ 0,\n            \\ldots, N - 1 \\}^N`, which assigns each node to a specific cluster.\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): The maximum number of clusters in a single\n            example. (default: :obj:`None`)\n\n    :rtype: (:class:`Tensor`, :class:`LongTensor`) if :attr:`size` is\n        :obj:`None`, else :class:`Tensor`\n    \"\"\"", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "return", "_avg_pool_x", "(", "cluster", ",", "x", ",", "(", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", "*", "size", ")", "\n", "\n", "", "cluster", ",", "perm", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "x", "=", "_avg_pool_x", "(", "cluster", ",", "x", ")", "\n", "batch", "=", "pool_batch", "(", "perm", ",", "batch", ")", "\n", "\n", "return", "x", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.avg_pool.avg_pool": [[40, 71], ["consecutive.consecutive_cluster", "avg_pool._avg_pool_x", "pool.pool_edge", "data.Batch", "pool.pool_batch", "pool.pool_pos", "transform"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pool.consecutive.consecutive_cluster", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.avg_pool._avg_pool_x", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_edge", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_batch", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_pos"], ["", "def", "avg_pool", "(", "cluster", ",", "data", ",", "transform", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Pools and coarsens a graph given by the\n    :class:`torch_geometric.data.Data` object according to the clustering\n    defined in :attr:`cluster`.\n    Final node features are defined by the *average* features of all nodes\n    within the same cluster.\n    See :meth:`torch_geometric.nn.pool.max_pool` for more details.\n\n    Args:\n        cluster (LongTensor): Cluster vector :math:`\\mathbf{c} \\in \\{ 0,\n            \\ldots, N - 1 \\}^N`, which assigns each node to a specific cluster.\n        data (Data): Graph data object.\n        transform (callable, optional): A function/transform that takes in the\n            coarsened and pooled :obj:`torch_geometric.data.Data` object and\n            returns a transformed version. (default: :obj:`None`)\n\n    :rtype: :class:`torch_geometric.data.Data`\n    \"\"\"", "\n", "cluster", ",", "perm", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "\n", "x", "=", "_avg_pool_x", "(", "cluster", ",", "data", ".", "x", ")", "\n", "index", ",", "attr", "=", "pool_edge", "(", "cluster", ",", "data", ".", "edge_index", ",", "data", ".", "edge_attr", ")", "\n", "batch", "=", "None", "if", "data", ".", "batch", "is", "None", "else", "pool_batch", "(", "perm", ",", "data", ".", "batch", ")", "\n", "pos", "=", "None", "if", "data", ".", "pos", "is", "None", "else", "pool_pos", "(", "cluster", ",", "data", ".", "pos", ")", "\n", "\n", "data", "=", "Batch", "(", "batch", "=", "batch", ",", "x", "=", "x", ",", "edge_index", "=", "index", ",", "edge_attr", "=", "attr", ",", "pos", "=", "pos", ")", "\n", "\n", "if", "transform", "is", "not", "None", ":", "\n", "        ", "data", "=", "transform", "(", "data", ")", "\n", "\n", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.sag_pool.SAGPooling.__init__": [[67, 79], ["super().__init__", "GNN", "sag_pool.SAGPooling.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "ratio", "=", "0.5", ",", "GNN", "=", "GraphConv", ",", "min_score", "=", "None", ",", "\n", "multiplier", "=", "1", ",", "nonlinearity", "=", "torch", ".", "tanh", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SAGPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "gnn", "=", "GNN", "(", "in_channels", ",", "1", ",", "**", "kwargs", ")", "\n", "self", ".", "min_score", "=", "min_score", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.sag_pool.SAGPooling.reset_parameters": [[80, 82], ["sag_pool.SAGPooling.gnn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gnn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.sag_pool.SAGPooling.forward": [[83, 106], ["sag_pool.SAGPooling.gnn().view", "topk_pool.topk", "topk_pool.filter_adj", "edge_index.new_zeros", "attn.unsqueeze", "sag_pool.SAGPooling.nonlinearity", "utils.softmax", "score[].view", "x.size", "attn.dim", "sag_pool.SAGPooling.gnn", "utils.softmax.size"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.topk", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.filter_adj", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.softmax.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "batch", "=", "None", ",", "attn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "attn", "=", "x", "if", "attn", "is", "None", "else", "attn", "\n", "attn", "=", "attn", ".", "unsqueeze", "(", "-", "1", ")", "if", "attn", ".", "dim", "(", ")", "==", "1", "else", "attn", "\n", "score", "=", "self", ".", "gnn", "(", "attn", ",", "edge_index", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "min_score", "is", "None", ":", "\n", "            ", "score", "=", "self", ".", "nonlinearity", "(", "score", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "softmax", "(", "score", ",", "batch", ")", "\n", "\n", "", "perm", "=", "topk", "(", "score", ",", "self", ".", "ratio", ",", "batch", ",", "self", ".", "min_score", ")", "\n", "x", "=", "x", "[", "perm", "]", "*", "score", "[", "perm", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "multiplier", "*", "x", "if", "self", ".", "multiplier", "!=", "1", "else", "x", "\n", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_attr", "=", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "x", ",", "edge_index", ",", "edge_attr", ",", "batch", ",", "perm", ",", "score", "[", "perm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.sag_pool.SAGPooling.__repr__": [[107, 114], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, {}={}, multiplier={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "gnn", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "\n", "'ratio'", "if", "self", ".", "min_score", "is", "None", "else", "'min_score'", ",", "\n", "self", ".", "ratio", "if", "self", ".", "min_score", "is", "None", "else", "self", ".", "min_score", ",", "\n", "self", ".", "multiplier", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_edge": [[6, 14], ["cluster.size", "cluster[].view", "pool..", "cluster[].view.numel", "torch_sparse.coalesce", "cluster[].view.view"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.coalesce"], ["def", "pool_edge", "(", "cluster", ",", "edge_index", ",", "edge_attr", "=", "None", ")", ":", "\n", "    ", "num_nodes", "=", "cluster", ".", "size", "(", "0", ")", "\n", "edge_index", "=", "cluster", "[", "edge_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "2", ",", "-", "1", ")", "\n", "edge_index", ",", "edge_attr", "=", "remove_self_loops", "(", "edge_index", ",", "edge_attr", ")", "\n", "if", "edge_index", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "edge_index", ",", "edge_attr", "=", "coalesce", "(", "edge_index", ",", "edge_attr", ",", "num_nodes", ",", "\n", "num_nodes", ")", "\n", "", "return", "edge_index", ",", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_batch": [[16, 18], ["None"], "function", ["None"], ["", "def", "pool_batch", "(", "perm", ",", "batch", ")", ":", "\n", "    ", "return", "batch", "[", "perm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_pos": [[20, 22], ["torch_scatter.scatter_mean"], "function", ["None"], ["", "def", "pool_pos", "(", "cluster", ",", "pos", ")", ":", "\n", "    ", "return", "scatter_mean", "(", "pos", ",", "cluster", ",", "dim", "=", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.max_pool._max_pool_x": [[8, 10], ["utils.scatter_"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.scatter.scatter_"], ["def", "_max_pool_x", "(", "cluster", ",", "x", ",", "size", "=", "None", ")", ":", "\n", "    ", "return", "scatter_", "(", "'max'", ",", "x", ",", "cluster", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.max_pool.max_pool_x": [[12, 40], ["consecutive.consecutive_cluster", "max_pool._max_pool_x", "pool.pool_batch", "max_pool._max_pool_x", "pool.pool_batch.max().item", "pool.pool_batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pool.consecutive.consecutive_cluster", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.max_pool._max_pool_x", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_batch", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.max_pool._max_pool_x"], ["", "def", "max_pool_x", "(", "cluster", ",", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Max-Pools node features according to the clustering defined in\n    :attr:`cluster`.\n\n    Args:\n        cluster (LongTensor): Cluster vector :math:`\\mathbf{c} \\in \\{ 0,\n            \\ldots, N - 1 \\}^N`, which assigns each node to a specific cluster.\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): The maximum number of clusters in a single\n            example. This property is useful to obtain a batch-wise dense\n            representation, *e.g.* for applying FC layers, but should only be\n            used if the size of the maximum number of clusters per example is\n            known in advance. (default: :obj:`None`)\n\n    :rtype: (:class:`Tensor`, :class:`LongTensor`) if :attr:`size` is\n        :obj:`None`, else :class:`Tensor`\n    \"\"\"", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "return", "_max_pool_x", "(", "cluster", ",", "x", ",", "(", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", "*", "size", ")", "\n", "\n", "", "cluster", ",", "perm", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "x", "=", "_max_pool_x", "(", "cluster", ",", "x", ")", "\n", "batch", "=", "pool_batch", "(", "perm", ",", "batch", ")", "\n", "\n", "return", "x", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.max_pool.max_pool": [[42, 75], ["consecutive.consecutive_cluster", "max_pool._max_pool_x", "pool.pool_edge", "data.Batch", "pool.pool_batch", "pool.pool_pos", "transform"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pool.consecutive.consecutive_cluster", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.max_pool._max_pool_x", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_edge", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_batch", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.pool.pool_pos"], ["", "def", "max_pool", "(", "cluster", ",", "data", ",", "transform", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Pools and coarsens a graph given by the\n    :class:`torch_geometric.data.Data` object according to the clustering\n    defined in :attr:`cluster`.\n    All nodes within the same cluster will be represented as one node.\n    Final node features are defined by the *maximum* features of all nodes\n    within the same cluster, node positions are averaged and edge indices are\n    defined to be the union of the edge indices of all nodes within the same\n    cluster.\n\n    Args:\n        cluster (LongTensor): Cluster vector :math:`\\mathbf{c} \\in \\{ 0,\n            \\ldots, N - 1 \\}^N`, which assigns each node to a specific cluster.\n        data (Data): Graph data object.\n        transform (callable, optional): A function/transform that takes in the\n            coarsened and pooled :obj:`torch_geometric.data.Data` object and\n            returns a transformed version. (default: :obj:`None`)\n\n    :rtype: :class:`torch_geometric.data.Data`\n    \"\"\"", "\n", "cluster", ",", "perm", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "\n", "x", "=", "_max_pool_x", "(", "cluster", ",", "data", ".", "x", ")", "\n", "index", ",", "attr", "=", "pool_edge", "(", "cluster", ",", "data", ".", "edge_index", ",", "data", ".", "edge_attr", ")", "\n", "batch", "=", "None", "if", "data", ".", "batch", "is", "None", "else", "pool_batch", "(", "perm", ",", "data", ".", "batch", ")", "\n", "pos", "=", "None", "if", "data", ".", "pos", "is", "None", "else", "pool_pos", "(", "cluster", ",", "data", ".", "pos", ")", "\n", "\n", "data", "=", "Batch", "(", "batch", "=", "batch", ",", "x", "=", "x", ",", "edge_index", "=", "index", ",", "edge_attr", "=", "attr", ",", "pos", "=", "pos", ")", "\n", "\n", "if", "transform", "is", "not", "None", ":", "\n", "        ", "data", "=", "transform", "(", "data", ")", "\n", "\n", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.TopKPooling.__init__": [[118, 131], ["super().__init__", "torch.nn.Parameter", "topk_pool.TopKPooling.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "ratio", "=", "0.5", ",", "min_score", "=", "None", ",", "multiplier", "=", "1", ",", "\n", "nonlinearity", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "TopKPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "min_score", "=", "min_score", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "in_channels", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.TopKPooling.reset_parameters": [[132, 135], ["utils.uniform"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.uniform"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "size", "=", "self", ".", "in_channels", "\n", "uniform", "(", "size", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.TopKPooling.forward": [[136, 160], ["topk_pool.topk", "topk_pool.filter_adj", "edge_index.new_zeros", "attn.unsqueeze", "topk_pool.TopKPooling.nonlinearity", "utils.softmax", "score[].view", "x.size", "attn.dim", "utils.softmax.size", "topk_pool.TopKPooling.weight.norm"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.topk", "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.filter_adj", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.softmax.softmax", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "batch", "=", "None", ",", "attn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "attn", "=", "x", "if", "attn", "is", "None", "else", "attn", "\n", "attn", "=", "attn", ".", "unsqueeze", "(", "-", "1", ")", "if", "attn", ".", "dim", "(", ")", "==", "1", "else", "attn", "\n", "score", "=", "(", "attn", "*", "self", ".", "weight", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "min_score", "is", "None", ":", "\n", "            ", "score", "=", "self", ".", "nonlinearity", "(", "score", "/", "self", ".", "weight", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "softmax", "(", "score", ",", "batch", ")", "\n", "\n", "", "perm", "=", "topk", "(", "score", ",", "self", ".", "ratio", ",", "batch", ",", "self", ".", "min_score", ")", "\n", "x", "=", "x", "[", "perm", "]", "*", "score", "[", "perm", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "multiplier", "*", "x", "if", "self", ".", "multiplier", "!=", "1", "else", "x", "\n", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_attr", "=", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "x", ",", "edge_index", ",", "edge_attr", ",", "batch", ",", "perm", ",", "score", "[", "perm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.TopKPooling.__repr__": [[161, 167], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}={}, multiplier={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "'ratio'", "if", "self", ".", "min_score", "is", "None", "else", "'min_score'", ",", "\n", "self", ".", "ratio", "if", "self", ".", "min_score", "is", "None", "else", "self", ".", "min_score", ",", "\n", "self", ".", "multiplier", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.topk": [[10, 47], ["scores_max.clamp", "torch.nonzero().view", "torch_scatter.scatter_add", "torch.cat", "torch.arange", "x.new_full", "dense_x.view.view", "dense_x.view.sort", "perm.view.view", "torch.cat", "batch.new_ones", "torch_scatter.scatter_add.size", "torch_scatter.scatter_add.max().item", "batch.size", "torch.cat.view", "torch.nonzero", "x.size", "torch_scatter.scatter_add.new_zeros", "torch.arange", "range", "torch_scatter.scatter_max", "torch_scatter.scatter_add.max", "torch_scatter.scatter_add.cumsum", "torch_scatter.scatter_add.to"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.to"], ["def", "topk", "(", "x", ",", "ratio", ",", "batch", ",", "min_score", "=", "None", ",", "tol", "=", "1e-7", ")", ":", "\n", "    ", "if", "min_score", "is", "not", "None", ":", "\n", "# Make sure that we do not drop all nodes in a graph.", "\n", "        ", "scores_max", "=", "scatter_max", "(", "x", ",", "batch", ")", "[", "0", "]", "[", "batch", "]", "-", "tol", "\n", "scores_min", "=", "scores_max", ".", "clamp", "(", "max", "=", "min_score", ")", "\n", "\n", "perm", "=", "torch", ".", "nonzero", "(", "x", ">", "scores_min", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "num_nodes", "=", "scatter_add", "(", "batch", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ")", ",", "batch", ",", "dim", "=", "0", ")", "\n", "batch_size", ",", "max_num_nodes", "=", "num_nodes", ".", "size", "(", "0", ")", ",", "num_nodes", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "cum_num_nodes", "=", "torch", ".", "cat", "(", "\n", "[", "num_nodes", ".", "new_zeros", "(", "1", ")", ",", "\n", "num_nodes", ".", "cumsum", "(", "dim", "=", "0", ")", "[", ":", "-", "1", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "index", "=", "torch", ".", "arange", "(", "batch", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "index", "=", "(", "index", "-", "cum_num_nodes", "[", "batch", "]", ")", "+", "(", "batch", "*", "max_num_nodes", ")", "\n", "\n", "dense_x", "=", "x", ".", "new_full", "(", "(", "batch_size", "*", "max_num_nodes", ",", ")", ",", "-", "2", ")", "\n", "dense_x", "[", "index", "]", "=", "x", "\n", "dense_x", "=", "dense_x", ".", "view", "(", "batch_size", ",", "max_num_nodes", ")", "\n", "\n", "_", ",", "perm", "=", "dense_x", ".", "sort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "\n", "perm", "=", "perm", "+", "cum_num_nodes", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "perm", "=", "perm", ".", "view", "(", "-", "1", ")", "\n", "\n", "k", "=", "(", "ratio", "*", "num_nodes", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "ceil", "(", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "mask", "=", "[", "\n", "torch", ".", "arange", "(", "k", "[", "i", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "+", "\n", "i", "*", "max_num_nodes", "for", "i", "in", "range", "(", "batch_size", ")", "\n", "]", "\n", "mask", "=", "torch", ".", "cat", "(", "mask", ",", "dim", "=", "0", ")", "\n", "\n", "perm", "=", "perm", "[", "mask", "]", "\n", "\n", "", "return", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.topk_pool.filter_adj": [[49, 65], ["utils.maybe_num_nodes", "perm.new_full", "torch.arange", "perm.size", "torch.stack"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.num_nodes.maybe_num_nodes"], ["", "def", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "mask", "=", "perm", ".", "new_full", "(", "(", "num_nodes", ",", ")", ",", "-", "1", ")", "\n", "i", "=", "torch", ".", "arange", "(", "perm", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "perm", ".", "device", ")", "\n", "mask", "[", "perm", "]", "=", "i", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "row", ",", "col", "=", "mask", "[", "row", "]", ",", "mask", "[", "col", "]", "\n", "mask", "=", "(", "row", ">=", "0", ")", "&", "(", "col", ">=", "0", ")", "\n", "row", ",", "col", "=", "row", "[", "mask", "]", ",", "col", "[", "mask", "]", "\n", "\n", "if", "edge_attr", "is", "not", "None", ":", "\n", "        ", "edge_attr", "=", "edge_attr", "[", "mask", "]", "\n", "\n", "", "return", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", ",", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.pool.consecutive.consecutive_cluster": [[4, 9], ["torch.unique", "torch.arange", "inv.new_empty().scatter_", "inv.size", "inv.new_empty", "unique.size"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.scatter.scatter_"], ["def", "consecutive_cluster", "(", "src", ")", ":", "\n", "    ", "unique", ",", "inv", "=", "torch", ".", "unique", "(", "src", ",", "sorted", "=", "True", ",", "return_inverse", "=", "True", ")", "\n", "perm", "=", "torch", ".", "arange", "(", "inv", ".", "size", "(", "0", ")", ",", "dtype", "=", "inv", ".", "dtype", ",", "device", "=", "inv", ".", "device", ")", "\n", "perm", "=", "inv", ".", "new_empty", "(", "unique", ".", "size", "(", "0", ")", ")", ".", "scatter_", "(", "0", ",", "inv", ",", "perm", ")", "\n", "return", "inv", ",", "perm", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.set2set.Set2Set.__init__": [[32, 44], ["super().__init__", "torch.nn.LSTM", "set2set.Set2Set.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "processing_steps", ",", "num_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "Set2Set", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "2", "*", "in_channels", "\n", "self", ".", "processing_steps", "=", "processing_steps", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "lstm", "=", "torch", ".", "nn", ".", "LSTM", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "\n", "num_layers", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.set2set.Set2Set.reset_parameters": [[45, 47], ["set2set.Set2Set.lstm.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "lstm", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.set2set.Set2Set.forward": [[48, 65], ["x.new_zeros", "range", "batch.max().item", "x.new_zeros", "x.new_zeros", "set2set.Set2Set.lstm", "q.view.view.view", "utils.softmax", "torch_scatter.scatter_add", "torch.cat", "torch.cat.unsqueeze", "batch.max"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.softmax.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "batch_size", "=", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "\n", "h", "=", "(", "x", ".", "new_zeros", "(", "(", "self", ".", "num_layers", ",", "batch_size", ",", "self", ".", "in_channels", ")", ")", ",", "\n", "x", ".", "new_zeros", "(", "(", "self", ".", "num_layers", ",", "batch_size", ",", "self", ".", "in_channels", ")", ")", ")", "\n", "q_star", "=", "x", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "out_channels", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "processing_steps", ")", ":", "\n", "            ", "q", ",", "h", "=", "self", ".", "lstm", "(", "q_star", ".", "unsqueeze", "(", "0", ")", ",", "h", ")", "\n", "q", "=", "q", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ")", "\n", "e", "=", "(", "x", "*", "q", "[", "batch", "]", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "a", "=", "softmax", "(", "e", ",", "batch", ",", "num_nodes", "=", "batch_size", ")", "\n", "r", "=", "scatter_add", "(", "a", "*", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "batch_size", ")", "\n", "q_star", "=", "torch", ".", "cat", "(", "[", "q", ",", "r", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "q_star", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.set2set.Set2Set.__repr__": [[66, 69], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.sort.global_sort_pool": [[5, 46], ["batch_x.view.sort", "utils.to_dense_batch", "torch.cat.size", "batch_x[].sort", "torch.cat.view", "torch.cat.view", "torch.cat.view", "batch_x.view.min().item", "torch.arange", "arange.view", "batch_x[].contiguous", "torch.cat.new_full", "torch.cat", "batch_x.view.min"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.to_dense_batch.to_dense_batch", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.contiguous"], ["def", "global_sort_pool", "(", "x", ",", "batch", ",", "k", ")", ":", "\n", "    ", "r\"\"\"The global pooling operator from the `\"An End-to-End Deep Learning\n    Architecture for Graph Classification\"\n    <https://www.cse.wustl.edu/~muhan/papers/AAAI_2018_DGCNN.pdf>`_ paper,\n    where node features are first sorted individually and then  sorted in\n    descending order based on their last features. The first :math:`k` nodes\n    form the output of the layer.\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{N \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        k (int): The number of nodes to hold for each graph.\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "x", ",", "_", "=", "x", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "\n", "fill_value", "=", "x", ".", "min", "(", ")", ".", "item", "(", ")", "-", "1", "\n", "batch_x", ",", "_", "=", "to_dense_batch", "(", "x", ",", "batch", ",", "fill_value", ")", "\n", "B", ",", "N", ",", "D", "=", "batch_x", ".", "size", "(", ")", "\n", "\n", "_", ",", "perm", "=", "batch_x", "[", ":", ",", ":", ",", "-", "1", "]", ".", "sort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "perm", ".", "device", ")", "*", "N", "\n", "perm", "=", "perm", "+", "arange", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "batch_x", "=", "batch_x", ".", "view", "(", "B", "*", "N", ",", "D", ")", "\n", "batch_x", "=", "batch_x", "[", "perm", "]", "\n", "batch_x", "=", "batch_x", ".", "view", "(", "B", ",", "N", ",", "D", ")", "\n", "\n", "if", "N", ">=", "k", ":", "\n", "        ", "batch_x", "=", "batch_x", "[", ":", ",", ":", "k", "]", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "        ", "expand_batch_x", "=", "batch_x", ".", "new_full", "(", "(", "B", ",", "k", "-", "N", ",", "D", ")", ",", "fill_value", ")", "\n", "batch_x", "=", "torch", ".", "cat", "(", "[", "batch_x", ",", "expand_batch_x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "batch_x", "[", "batch_x", "==", "fill_value", "]", "=", "0", "\n", "x", "=", "batch_x", ".", "view", "(", "B", ",", "k", "*", "D", ")", "\n", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.attention.GlobalAttention.__init__": [[32, 38], ["super().__init__", "attention.GlobalAttention.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "gate_nn", ",", "nn", "=", "None", ")", ":", "\n", "        ", "super", "(", "GlobalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gate_nn", "=", "gate_nn", "\n", "self", ".", "nn", "=", "nn", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.attention.GlobalAttention.reset_parameters": [[39, 42], ["utils.reset", "utils.reset"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.reset", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.reset"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "gate_nn", ")", "\n", "reset", "(", "self", ".", "nn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.attention.GlobalAttention.forward": [[43, 56], ["attention.GlobalAttention.gate_nn().view", "utils.softmax", "torch_scatter.scatter_add", "x.unsqueeze", "attention.GlobalAttention.nn", "x.dim", "batch[].item", "attention.GlobalAttention.gate_nn", "utils.softmax.dim", "x.dim", "utils.softmax.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.softmax.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "size", "=", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "if", "size", "is", "None", "else", "size", "\n", "\n", "gate", "=", "self", ".", "gate_nn", "(", "x", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "nn", "(", "x", ")", "if", "self", ".", "nn", "is", "not", "None", "else", "x", "\n", "assert", "gate", ".", "dim", "(", ")", "==", "x", ".", "dim", "(", ")", "and", "gate", ".", "size", "(", "0", ")", "==", "x", ".", "size", "(", "0", ")", "\n", "\n", "gate", "=", "softmax", "(", "gate", ",", "batch", ",", "size", ")", "\n", "out", "=", "scatter_add", "(", "gate", "*", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.attention.GlobalAttention.__repr__": [[57, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(gate_nn={}, nn={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "gate_nn", ",", "self", ".", "nn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.glob.global_add_pool": [[4, 25], ["utils.scatter_", "batch.max().item", "batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.scatter.scatter_"], ["def", "global_add_pool", "(", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns batch-wise graph-level-outputs by adding node features\n    across the node dimension, so that for a single graph\n    :math:`\\mathcal{G}_i` its output is computed by\n\n    .. math::\n        \\mathbf{r}_i = \\sum_{n=1}^{N_i} \\mathbf{x}_n\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): Batch-size :math:`B`.\n            Automatically calculated if not given. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "size", "=", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "size", "is", "None", "else", "size", "\n", "return", "scatter_", "(", "'add'", ",", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.glob.global_mean_pool": [[27, 48], ["utils.scatter_", "batch.max().item", "batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.scatter.scatter_"], ["", "def", "global_mean_pool", "(", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns batch-wise graph-level-outputs by averaging node features\n    across the node dimension, so that for a single graph\n    :math:`\\mathcal{G}_i` its output is computed by\n\n    .. math::\n        \\mathbf{r}_i = \\frac{1}{N_i} \\sum_{n=1}^{N_i} \\mathbf{x}_n\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): Batch-size :math:`B`.\n            Automatically calculated if not given. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "size", "=", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "size", "is", "None", "else", "size", "\n", "return", "scatter_", "(", "'mean'", ",", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.glob.glob.global_max_pool": [[50, 71], ["utils.scatter_", "batch.max().item", "batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.scatter.scatter_"], ["", "def", "global_max_pool", "(", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns batch-wise graph-level-outputs by taking the channel-wise\n    maximum across the node dimension, so that for a single graph\n    :math:`\\mathcal{G}_i` its output is computed by\n\n    .. math::\n        \\mathbf{r}_i = \\mathrm{max}_{n=1}^{N_i} \\, \\mathbf{x}_n\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): Batch-size :math:`B`.\n            Automatically calculated if not given. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "size", "=", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "size", "is", "None", "else", "size", "\n", "return", "scatter_", "(", "'max'", ",", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.sg_conv.SGConv.__init__": [[34, 46], ["gnn_lib.nn.conv.message_passing.MessagePassing.__init__", "torch.nn.Linear", "sg_conv.SGConv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "K", "=", "1", ",", "cached", "=", "False", ",", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SGConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "cached", "=", "cached", "\n", "\n", "self", ".", "lin", "=", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.sg_conv.SGConv.reset_parameters": [[47, 51], ["sg_conv.SGConv.lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "self", ".", "cached_result", "=", "None", "\n", "self", ".", "cached_num_edges", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.sg_conv.SGConv.forward": [[52, 78], ["sg_conv.SGConv.lin", "edge_index.size", "gnn_lib.nn.conv.gcn_conv.GCNConv.norm", "range", "sg_conv.SGConv.lin", "edge_index.size", "RuntimeError", "sg_conv.SGConv.size", "sg_conv.SGConv.propagate", "edge_index.size"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.norm", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.propagate"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "self", ".", "cached", "and", "self", ".", "cached_result", "is", "not", "None", ":", "\n", "            ", "if", "edge_index", ".", "size", "(", "1", ")", "!=", "self", ".", "cached_num_edges", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'Cached {} number of edges, but found {}. Please '", "\n", "'disable the caching behavior of this layer by removing '", "\n", "'the `cached=True` argument in its constructor.'", ".", "format", "(", "\n", "self", ".", "cached_num_edges", ",", "edge_index", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "", "if", "not", "self", ".", "cached", ":", "\n", "            ", "x", "=", "self", ".", "lin", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "cached", "or", "self", ".", "cached_result", "is", "None", ":", "\n", "            ", "self", ".", "cached_num_edges", "=", "edge_index", ".", "size", "(", "1", ")", "\n", "edge_index", ",", "norm", "=", "GCNConv", ".", "norm", "(", "edge_index", ",", "x", ".", "size", "(", "0", ")", ",", "edge_weight", ",", "\n", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "                ", "x", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "norm", "=", "norm", ")", "\n", "", "self", ".", "cached_result", "=", "x", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "x", "=", "self", ".", "lin", "(", "self", ".", "cached_result", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.sg_conv.SGConv.message": [[79, 81], ["norm.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "norm", ")", ":", "\n", "        ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.sg_conv.SGConv.__repr__": [[82, 86], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, K={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "K", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.graph_conv.GraphConv.__init__": [[29, 40], ["message_passing.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Linear", "graph_conv.GraphConv.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "aggr", "=", "'add'", ",", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "aggr", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "lin", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.graph_conv.GraphConv.reset_parameters": [[41, 44], ["utils.uniform", "graph_conv.GraphConv.lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.uniform", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "uniform", "(", "self", ".", "in_channels", ",", "self", ".", "weight", ")", "\n", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.graph_conv.GraphConv.forward": [[45, 50], ["torch.matmul", "graph_conv.GraphConv.propagate"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.propagate"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ",", "size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "h", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ",", "h", "=", "h", ",", "\n", "edge_weight", "=", "edge_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.graph_conv.GraphConv.message": [[51, 53], ["edge_weight.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "h_j", ",", "edge_weight", ")", ":", "\n", "        ", "return", "h_j", "if", "edge_weight", "is", "None", "else", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "h_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.graph_conv.GraphConv.update": [[54, 56], ["graph_conv.GraphConv.lin"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ",", "x", ")", ":", "\n", "        ", "return", "aggr_out", "+", "self", ".", "lin", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.graph_conv.GraphConv.__repr__": [[57, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gin_conv.GINConv.__init__": [[29, 38], ["message_passing.MessagePassing.__init__", "gin_conv.GINConv.reset_parameters", "torch.nn.Parameter", "gin_conv.GINConv.register_buffer", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "nn", ",", "eps", "=", "0", ",", "train_eps", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GINConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "self", ".", "nn", "=", "nn", "\n", "self", ".", "initial_eps", "=", "eps", "\n", "if", "train_eps", ":", "\n", "            ", "self", ".", "eps", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'eps'", ",", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gin_conv.GINConv.reset_parameters": [[39, 42], ["utils.reset", "gin_conv.GINConv.eps.data.fill_"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.reset"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "nn", ")", "\n", "self", ".", "eps", ".", "data", ".", "fill_", "(", "self", ".", "initial_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gin_conv.GINConv.forward": [[43, 49], ["gin_conv.GINConv.", "gin_conv.GINConv.nn", "x.unsqueeze", "x.dim", "gin_conv.GINConv.propagate"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.propagate"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "edge_index", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "out", "=", "self", ".", "nn", "(", "(", "1", "+", "self", ".", "eps", ")", "*", "x", "+", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gin_conv.GINConv.message": [[50, 52], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ")", ":", "\n", "        ", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gin_conv.GINConv.__repr__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(nn={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "nn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.__init__": [[39, 56], ["message_passing.MessagePassing.__init__", "torch.nn.Parameter", "gcn_conv.GCNConv.reset_parameters", "torch.Tensor", "torch.nn.Parameter", "gcn_conv.GCNConv.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "improved", "=", "False", ",", "cached", "=", "False", ",", "\n", "bias", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.reset_parameters": [[57, 62], ["utils.glorot", "utils.zeros"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.glorot", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.zeros"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "weight", ")", "\n", "zeros", "(", "self", ".", "bias", ")", "\n", "self", ".", "cached_result", "=", "None", "\n", "self", ".", "cached_num_edges", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.norm": [[63, 80], ["gcn_conv.GCNConv.", "torch_scatter.scatter_add", "torch_scatter.scatter_add.pow", "torch.ones", "edge_index.size", "float"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.utils.inits.ones"], ["", "@", "staticmethod", "\n", "def", "norm", "(", "edge_index", ",", "num_nodes", ",", "edge_weight", "=", "None", ",", "improved", "=", "False", ",", "\n", "dtype", "=", "None", ")", ":", "\n", "        ", "if", "edge_weight", "is", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "dtype", "=", "dtype", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "", "fill_value", "=", "1", "if", "not", "improved", "else", "2", "\n", "edge_index", ",", "edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", ",", "num_nodes", ")", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "row", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", "[", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "\n", "return", "edge_index", ",", "deg_inv_sqrt", "[", "row", "]", "*", "edge_weight", "*", "deg_inv_sqrt", "[", "col", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.forward": [[81, 102], ["torch.matmul", "gcn_conv.GCNConv.propagate", "edge_index.size", "gcn_conv.GCNConv.norm", "edge_index.size", "RuntimeError", "torch.matmul.size", "edge_index.size"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "\n", "if", "self", ".", "cached", "and", "self", ".", "cached_result", "is", "not", "None", ":", "\n", "            ", "if", "edge_index", ".", "size", "(", "1", ")", "!=", "self", ".", "cached_num_edges", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'Cached {} number of edges, but found {}. Please '", "\n", "'disable the caching behavior of this layer by removing '", "\n", "'the `cached=True` argument in its constructor.'", ".", "format", "(", "\n", "self", ".", "cached_num_edges", ",", "edge_index", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "", "if", "not", "self", ".", "cached", "or", "self", ".", "cached_result", "is", "None", ":", "\n", "            ", "self", ".", "cached_num_edges", "=", "edge_index", ".", "size", "(", "1", ")", "\n", "edge_index", ",", "norm", "=", "self", ".", "norm", "(", "edge_index", ",", "x", ".", "size", "(", "0", ")", ",", "edge_weight", ",", "\n", "self", ".", "improved", ",", "x", ".", "dtype", ")", "\n", "self", ".", "cached_result", "=", "edge_index", ",", "norm", "\n", "\n", "", "edge_index", ",", "norm", "=", "self", ".", "cached_result", "\n", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "norm", "=", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.message": [[103, 105], ["norm.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "norm", ")", ":", "\n", "        ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.update": [[106, 110], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "aggr_out", "=", "aggr_out", "+", "self", ".", "bias", "\n", "", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.gcn_conv.GCNConv.__repr__": [[111, 114], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__": [[46, 63], ["super().__init__", "getargspec", "enumerate", "getargspec"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "aggr", "=", "'add'", ",", "flow", "=", "'source_to_target'", ")", ":", "\n", "        ", "super", "(", "MessagePassing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "aggr", "=", "aggr", "\n", "assert", "self", ".", "aggr", "in", "[", "'add'", ",", "'mean'", ",", "'max'", "]", "\n", "\n", "self", ".", "flow", "=", "flow", "\n", "assert", "self", ".", "flow", "in", "[", "'source_to_target'", ",", "'target_to_source'", "]", "\n", "\n", "self", ".", "__message_args__", "=", "getargspec", "(", "self", ".", "message", ")", "[", "0", "]", "[", "1", ":", "]", "\n", "self", ".", "__special_args__", "=", "[", "(", "i", ",", "arg", ")", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "self", ".", "__message_args__", ")", "\n", "if", "arg", "in", "special_args", "]", "\n", "self", ".", "__message_args__", "=", "[", "\n", "arg", "for", "arg", "in", "self", ".", "__message_args__", "if", "arg", "not", "in", "special_args", "\n", "]", "\n", "self", ".", "__update_args__", "=", "getargspec", "(", "self", ".", "update", ")", "[", "0", "]", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.propagate": [[64, 137], ["message_passing.MessagePassing.message", "utils.scatter_", "message_passing.MessagePassing.update", "list", "len", "ij.keys", "kwargs.get", "message_args.append", "ij.keys", "message_args.insert", "message_args.insert", "message_args.append", "kwargs.get", "isinstance", "isinstance", "message_args.append", "torch.index_select", "message_args.append", "len", "torch.index_select.size", "torch.index_select.size", "ValueError", "tmp[].size", "tmp[].size", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.message", "home.repos.pwc.inspect_result.auroua_NPENASv1.utils.scatter.scatter_", "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_NPENASv1.data.data.Data.keys"], ["", "def", "propagate", "(", "self", ",", "edge_index", ",", "size", "=", "None", ",", "dim", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"The initial call to start propagating messages.\n\n        Args:\n            edge_index (Tensor): The indices of a general (sparse) assignment\n                matrix with shape :obj:`[N, M]` (can be directed or\n                undirected).\n            size (list or tuple, optional): The size :obj:`[N, M]` of the\n                assignment matrix. If set to :obj:`None`, the size is tried to\n                get automatically inferred and assumed to be symmetric.\n                (default: :obj:`None`)\n            dim (int, optional): The axis along which to aggregate.\n                (default: :obj:`0`)\n            **kwargs: Any additional data which is needed to construct messages\n                and to update node embeddings.\n        \"\"\"", "\n", "\n", "dim", "=", "0", "\n", "size", "=", "[", "None", ",", "None", "]", "if", "size", "is", "None", "else", "list", "(", "size", ")", "\n", "assert", "len", "(", "size", ")", "==", "2", "\n", "\n", "i", ",", "j", "=", "(", "0", ",", "1", ")", "if", "self", ".", "flow", "==", "'target_to_source'", "else", "(", "1", ",", "0", ")", "\n", "ij", "=", "{", "\"_i\"", ":", "i", ",", "\"_j\"", ":", "j", "}", "\n", "\n", "message_args", "=", "[", "]", "\n", "for", "arg", "in", "self", ".", "__message_args__", ":", "\n", "            ", "if", "arg", "[", "-", "2", ":", "]", "in", "ij", ".", "keys", "(", ")", ":", "\n", "                ", "tmp", "=", "kwargs", ".", "get", "(", "arg", "[", ":", "-", "2", "]", ",", "None", ")", "\n", "if", "tmp", "is", "None", ":", "# pragma: no cover", "\n", "                    ", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "idx", "=", "ij", "[", "arg", "[", "-", "2", ":", "]", "]", "\n", "if", "isinstance", "(", "tmp", ",", "tuple", ")", "or", "isinstance", "(", "tmp", ",", "list", ")", ":", "\n", "                        ", "assert", "len", "(", "tmp", ")", "==", "2", "\n", "if", "tmp", "[", "1", "-", "idx", "]", "is", "not", "None", ":", "\n", "                            ", "if", "size", "[", "1", "-", "idx", "]", "is", "None", ":", "\n", "                                ", "size", "[", "1", "-", "idx", "]", "=", "tmp", "[", "1", "-", "idx", "]", ".", "size", "(", "dim", ")", "\n", "", "if", "size", "[", "1", "-", "idx", "]", "!=", "tmp", "[", "1", "-", "idx", "]", ".", "size", "(", "dim", ")", ":", "\n", "                                ", "raise", "ValueError", "(", "__size_error_msg__", ")", "\n", "", "", "tmp", "=", "tmp", "[", "idx", "]", "\n", "\n", "", "if", "tmp", "is", "None", ":", "\n", "                        ", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                        ", "if", "size", "[", "idx", "]", "is", "None", ":", "\n", "                            ", "size", "[", "idx", "]", "=", "tmp", ".", "size", "(", "dim", ")", "\n", "", "if", "size", "[", "idx", "]", "!=", "tmp", ".", "size", "(", "dim", ")", ":", "\n", "                            ", "raise", "ValueError", "(", "__size_error_msg__", ")", "\n", "\n", "", "tmp", "=", "torch", ".", "index_select", "(", "tmp", ",", "dim", ",", "edge_index", "[", "idx", "]", ")", "\n", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "", "", "else", ":", "\n", "                ", "message_args", ".", "append", "(", "kwargs", ".", "get", "(", "arg", ",", "None", ")", ")", "\n", "\n", "", "", "size", "[", "0", "]", "=", "size", "[", "1", "]", "if", "size", "[", "0", "]", "is", "None", "else", "size", "[", "0", "]", "\n", "size", "[", "1", "]", "=", "size", "[", "0", "]", "if", "size", "[", "1", "]", "is", "None", "else", "size", "[", "1", "]", "\n", "\n", "kwargs", "[", "'edge_index'", "]", "=", "edge_index", "\n", "kwargs", "[", "'size'", "]", "=", "size", "\n", "\n", "for", "(", "idx", ",", "arg", ")", "in", "self", ".", "__special_args__", ":", "\n", "            ", "if", "arg", "[", "-", "2", ":", "]", "in", "ij", ".", "keys", "(", ")", ":", "\n", "                ", "message_args", ".", "insert", "(", "idx", ",", "kwargs", "[", "arg", "[", ":", "-", "2", "]", "]", "[", "ij", "[", "arg", "[", "-", "2", ":", "]", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "message_args", ".", "insert", "(", "idx", ",", "kwargs", "[", "arg", "]", ")", "\n", "\n", "", "", "update_args", "=", "[", "kwargs", "[", "arg", "]", "for", "arg", "in", "self", ".", "__update_args__", "]", "\n", "\n", "out", "=", "self", ".", "message", "(", "*", "message_args", ")", "\n", "out", "=", "scatter_", "(", "self", ".", "aggr", ",", "out", ",", "edge_index", "[", "i", "]", ",", "dim", ",", "dim_size", "=", "size", "[", "i", "]", ")", "\n", "out", "=", "self", ".", "update", "(", "out", ",", "*", "update_args", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.message": [[138, 150], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ")", ":", "# pragma: no cover", "\n", "        ", "r\"\"\"Constructs messages to node :math:`i` in analogy to\n        :math:`\\phi_{\\mathbf{\\Theta}}` for each edge in\n        :math:`(j,i) \\in \\mathcal{E}` if :obj:`flow=\"source_to_target\"` and\n        :math:`(i,j) \\in \\mathcal{E}` if :obj:`flow=\"target_to_source\"`.\n        Can take any argument which was initially passed to :meth:`propagate`.\n        In addition, tensors passed to :meth:`propagate` can be mapped to the\n        respective nodes :math:`i` and :math:`j` by appending :obj:`_i` or\n        :obj:`_j` to the variable name, *.e.g.* :obj:`x_i` and :obj:`x_j`.\n        \"\"\"", "\n", "\n", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_NPENASv1.conv.message_passing.MessagePassing.update": [[151, 159], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "# pragma: no cover", "\n", "        ", "r\"\"\"Updates node embeddings in analogy to\n        :math:`\\gamma_{\\mathbf{\\Theta}}` for each node\n        :math:`i \\in \\mathcal{V}`.\n        Takes in the output of aggregation as first argument and any argument\n        which was initially passed to :meth:`propagate`.\"\"\"", "\n", "\n", "return", "aggr_out", "\n", "", "", ""]]}