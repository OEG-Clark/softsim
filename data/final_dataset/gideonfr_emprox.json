{"home.repos.pwc.inspect_result.gideonfr_emprox.None.download_models.download": [[18, 37], ["requests.get", "int", "tqdm.tqdm", "tqdm.tqdm.close", "requests.get.headers.get", "open", "requests.get.iter_content", "print", "sys.exit", "tqdm.tqdm.update", "file.write", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["def", "download", "(", "url", ",", "path", ")", ":", "\n", "# Taken from: https://stackoverflow.com/a/37573701", "\n", "    ", "response", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "\n", "# Measured in Bytes", "\n", "file_size", "=", "int", "(", "response", ".", "headers", ".", "get", "(", "'content_length'", ",", "0", ")", ")", "\n", "block_size", "=", "1024", "\n", "progress_bar", "=", "tqdm", "(", "total", "=", "file_size", ",", "unit", "=", "'iB'", ",", "unit_scale", "=", "True", ")", "\n", "\n", "# Write the download to file", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "for", "data", "in", "response", ".", "iter_content", "(", "block_size", ")", ":", "\n", "            ", "progress_bar", ".", "update", "(", "len", "(", "data", ")", ")", "\n", "file", ".", "write", "(", "data", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "if", "file_size", "not", "in", "(", "0", ",", "progress_bar", ".", "n", ")", ":", "\n", "        ", "print", "(", "'Error downloading from {}'", ".", "format", "(", "url", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.None.download_models.download_models": [[38, 74], ["os.getcwd", "os.path.join", "os.path.join", "os.path.exists", "print", "print", "download_models.download", "print", "os.path.join", "os.rename", "zipfile.ZipFile", "zipfile.extractall", "print", "os.remove"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.None.download_models.download", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.remove"], ["", "", "def", "download_models", "(", "version", ",", "delete_zip", "=", "True", ",", "\n", "download_dir", "=", "os", ".", "getcwd", "(", ")", ")", ":", "\n", "\n", "# Create paths and names", "\n", "    ", "download_url", "=", "URL_MODELS_0_9", "if", "version", "==", "'0.9'", "else", "URL_MODELS_1_0", "\n", "zip_filename", "=", "'models_{}.zip'", ".", "format", "(", "version", ")", "\n", "models_folder", "=", "'nb_models_{}'", ".", "format", "(", "version", ")", "\n", "\n", "current_dir", "=", "download_dir", "\n", "zip_path", "=", "os", ".", "path", ".", "join", "(", "current_dir", ",", "zip_filename", ")", "\n", "models_dir", "=", "os", ".", "path", ".", "join", "(", "current_dir", ",", "models_folder", ")", "\n", "\n", "# Check if already exists", "\n", "if", "os", ".", "path", ".", "exists", "(", "models_dir", ")", ":", "\n", "        ", "print", "(", "'Models {} already at {}'", ".", "format", "(", "version", ",", "models_dir", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Downloading models {} from {} to {}'", ".", "format", "(", "version", ",", "\n", "download_url", ",", "\n", "zip_path", ")", ")", "\n", "download", "(", "download_url", ",", "zip_path", ")", "\n", "\n", "# Zip contains a folder called 'nb_models' so we just unzip", "\n", "# it to the current dir and then rename it to give it a version", "\n", "print", "(", "'Extracting {} to {}'", ".", "format", "(", "zip_filename", ",", "models_dir", ")", ")", "\n", "with", "ZipFile", "(", "zip_path", ",", "'r'", ")", "as", "zipfile", ":", "\n", "            ", "zipfile", ".", "extractall", "(", "current_dir", ")", "\n", "", "unzipped_folder_name", "=", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'nb_models'", ")", "\n", "os", ".", "rename", "(", "unzipped_folder_name", ",", "models_dir", ")", "\n", "\n", "# Finally, remove the zip", "\n", "# If the library is used by a different library, these zips", "\n", "# would end up taking space in the virtual env where the libray user", "\n", "# is unlikely to know they even exists there taking up space", "\n", "if", "delete_zip", ":", "\n", "            ", "print", "(", "'Deleting downloaded zip at {}'", ".", "format", "(", "zip_path", ")", ")", "\n", "os", ".", "remove", "(", "zip_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.ImageNet16.__init__": [[57, 97], ["enumerate", "numpy.vstack().reshape", "DownsampledImageNet.ImageNet16.data.transpose", "DownsampledImageNet.ImageNet16._check_integrity", "RuntimeError", "os.path.join", "zip", "open", "DownsampledImageNet.ImageNet16.data.append", "DownsampledImageNet.ImageNet16.targets.extend", "numpy.vstack", "isinstance", "pickle.load", "pickle.load", "new_data.append", "new_targets.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.ImageNet16._check_integrity", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load"], ["def", "__init__", "(", "self", ",", "root", ",", "train", ",", "transform", ",", "use_num_of_class_only", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "# training set or valid set", "\n", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Dataset not found or corrupted.\"", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "valid_list", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "i", ",", "(", "file_name", ",", "checksum", ")", "in", "enumerate", "(", "downloaded_list", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "file_name", ")", "\n", "# print ('Load {:}/{:02d}-th : {:}'.format(i, len(downloaded_list), file_path))", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "\"data\"", "]", ")", "\n", "self", ".", "targets", ".", "extend", "(", "entry", "[", "\"labels\"", "]", ")", "\n", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "16", ",", "16", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "if", "use_num_of_class_only", "is", "not", "None", ":", "\n", "            ", "assert", "(", "\n", "isinstance", "(", "use_num_of_class_only", ",", "int", ")", "\n", "and", "use_num_of_class_only", ">", "0", "\n", "and", "use_num_of_class_only", "<", "1000", "\n", ")", ",", "\"invalid use_num_of_class_only : {:}\"", ".", "format", "(", "use_num_of_class_only", ")", "\n", "new_data", ",", "new_targets", "=", "[", "]", ",", "[", "]", "\n", "for", "I", ",", "L", "in", "zip", "(", "self", ".", "data", ",", "self", ".", "targets", ")", ":", "\n", "                ", "if", "1", "<=", "L", "<=", "use_num_of_class_only", ":", "\n", "                    ", "new_data", ".", "append", "(", "I", ")", "\n", "new_targets", ".", "append", "(", "L", ")", "\n", "", "", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "#    self.mean.append(entry['mean'])", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.ImageNet16.__getitem__": [[106, 115], ["PIL.Image.fromarray", "DownsampledImageNet.ImageNet16.transform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.transform"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "-", "1", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.ImageNet16.__len__": [[116, 118], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.ImageNet16._check_integrity": [[119, 127], ["os.path.join", "DownsampledImageNet.check_integrity"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.check_integrity"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "self", ".", "train_list", "+", "self", ".", "valid_list", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.calculate_md5": [[15, 21], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "def", "calculate_md5", "(", "fpath", ",", "chunk_size", "=", "1024", "*", "1024", ")", ":", "\n", "    ", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "chunk_size", ")", ",", "b\"\"", ")", ":", "\n", "            ", "md5", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "md5", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.check_md5": [[23, 25], ["DownsampledImageNet.calculate_md5"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.calculate_md5"], ["", "def", "check_md5", "(", "fpath", ",", "md5", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "md5", "==", "calculate_md5", "(", "fpath", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.check_integrity": [[27, 34], ["os.path.isfile", "DownsampledImageNet.check_md5"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.DownsampledImageNet.check_md5"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "md5", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "check_md5", "(", "fpath", ",", "md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging._ColorfulFormatter.__init__": [[27, 33], ["kwargs.pop", "len", "logging.Formatter.__init__", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_root_name", "=", "kwargs", ".", "pop", "(", "\"root_name\"", ")", "+", "\".\"", "\n", "self", ".", "_abbrev_name", "=", "kwargs", ".", "pop", "(", "\"abbrev_name\"", ",", "\"\"", ")", "\n", "if", "len", "(", "self", ".", "_abbrev_name", ")", ":", "\n", "            ", "self", ".", "_abbrev_name", "=", "self", ".", "_abbrev_name", "+", "\".\"", "\n", "", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging._ColorfulFormatter.formatMessage": [[34, 44], ["record.name.replace", "super().formatMessage", "termcolor.colored", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging._ColorfulFormatter.formatMessage"], ["", "def", "formatMessage", "(", "self", ",", "record", ")", ":", "\n", "        ", "record", ".", "name", "=", "record", ".", "name", ".", "replace", "(", "self", ".", "_root_name", ",", "self", ".", "_abbrev_name", ")", "\n", "log", "=", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "formatMessage", "(", "record", ")", "\n", "if", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"WARNING\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", "]", ")", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", "or", "record", ".", "levelno", "==", "logging", ".", "CRITICAL", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"ERROR\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", ",", "\"underline\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "log", "\n", "", "return", "prefix", "+", "\" \"", "+", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_formats": [[12, 19], ["isinstance", "isinstance", "logging.log_formats", "x.items"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_formats"], ["def", "log_formats", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", ".", "shape", "\n", "", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "        ", "return", "{", "k", ":", "log_formats", "(", "v", ")", "for", "k", ",", "v", "in", "x", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.setup_logger": [[46, 104], ["functools.lru_cache", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging._ColorfulFormatter", "os.path.dirname", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "output.endswith", "output.endswith", "os.path.join", "os.makedirs", "termcolor.colored", "str", "os.path.dirname"], "function", ["None"], ["", "", "@", "functools", ".", "lru_cache", "(", ")", "# so that calling setup_logger multiple times won't add many handlers", "\n", "def", "setup_logger", "(", "output", "=", "None", ",", "*", ",", "color", "=", "True", ",", "name", "=", "\"naslib\"", ",", "abbrev_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the nalsib logger and set its verbosity level to \"DEBUG\".\n    Args:\n        output (str): a file name or a directory to save log. If None, will not save log file.\n            If ends with \".txt\" or \".log\", assumed to be a file name.\n            Otherwise, logs will be saved to `output/log.txt`.\n        name (str): the root module name of this logger\n        abbrev_name (str): an abbreviation of the module, to avoid long names in logs.\n            Set to \"\" to not log the root module in logs.\n            By default, will abbreviate \"naslib\" to \"nl\" and leave other\n            modules unchanged.\n    Returns:\n        logging.Logger: a logger\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "if", "abbrev_name", "is", "None", ":", "\n", "        ", "abbrev_name", "=", "\"nl\"", "if", "name", "==", "\"naslib\"", "else", "name", "\n", "\n", "", "plain_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s] %(name)s %(levelname)s: %(message)s\"", ",", "datefmt", "=", "\"%m/%d %H:%M:%S\"", "\n", ")", "\n", "\n", "# stdout logger", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "if", "color", ":", "\n", "        ", "formatter", "=", "_ColorfulFormatter", "(", "\n", "colored", "(", "\"[%(asctime)s %(name)s]: \"", ",", "\"green\"", ")", "+", "\"%(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d %H:%M:%S\"", ",", "\n", "root_name", "=", "name", ",", "\n", "abbrev_name", "=", "str", "(", "abbrev_name", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "formatter", "=", "plain_formatter", "\n", "", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# File logging", "\n", "if", "output", "is", "not", "None", ":", "\n", "        ", "if", "output", ".", "endswith", "(", "\".txt\"", ")", "or", "output", ".", "endswith", "(", "\".log\"", ")", ":", "\n", "            ", "filename", "=", "output", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output", ",", "\"log.txt\"", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "dirname", "(", "filename", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "fh", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "plain_formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging._find_caller": [[113, 128], ["sys._getframe", "os.path.join"], "function", ["None"], ["def", "_find_caller", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns:\n        str: module name of the caller\n        tuple: a hashable key to be used to identify different callers\n    \"\"\"", "\n", "frame", "=", "sys", ".", "_getframe", "(", "2", ")", "\n", "while", "frame", ":", "\n", "        ", "code", "=", "frame", ".", "f_code", "\n", "if", "os", ".", "path", ".", "join", "(", "\"utils\"", ",", "\"logger.\"", ")", "not", "in", "code", ".", "co_filename", ":", "\n", "            ", "mod_name", "=", "frame", ".", "f_globals", "[", "\"__name__\"", "]", "\n", "if", "mod_name", "==", "\"__main__\"", ":", "\n", "                ", "mod_name", "=", "\"detectron2\"", "\n", "", "return", "mod_name", ",", "(", "code", ".", "co_filename", ",", "frame", ".", "f_lineno", ",", "code", ".", "co_name", ")", "\n", "", "frame", "=", "frame", ".", "f_back", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n": [[134, 166], ["isinstance", "logging._find_caller", "len", "logging.getLogger().log", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging._find_caller"], ["def", "log_first_n", "(", "lvl", ",", "msg", ",", "n", "=", "1", ",", "*", ",", "name", "=", "None", ",", "key", "=", "\"caller\"", ")", ":", "\n", "    ", "\"\"\"\n    Log only for the first n times.\n    Args:\n        lvl (int): the logging level\n        msg (str):\n        n (int):\n        name (str): name of the logger to use. Will use the caller's module by default.\n        key (str or tuple[str]): the string(s) can be one of \"caller\" or\n            \"message\", which defines how to identify duplicated logs.\n            For example, if called with `n=1, key=\"caller\"`, this function\n            will only log the first call from the same caller, regardless of\n            the message content.\n            If called with `n=1, key=\"message\"`, this function will log the\n            same content only once, even if they are called from different places.\n            If called with `n=1, key=(\"caller\", \"message\")`, this function\n            will not log only if the same caller has logged the same message before.\n    \"\"\"", "\n", "if", "isinstance", "(", "key", ",", "str", ")", ":", "\n", "        ", "key", "=", "(", "key", ",", ")", "\n", "", "assert", "len", "(", "key", ")", ">", "0", "\n", "\n", "caller_module", ",", "caller_key", "=", "_find_caller", "(", ")", "\n", "hash_key", "=", "(", ")", "\n", "if", "\"caller\"", "in", "key", ":", "\n", "        ", "hash_key", "=", "hash_key", "+", "caller_key", "\n", "", "if", "\"message\"", "in", "key", ":", "\n", "        ", "hash_key", "=", "hash_key", "+", "(", "msg", ",", ")", "\n", "\n", "", "_LOG_COUNTER", "[", "hash_key", "]", "+=", "1", "\n", "if", "_LOG_COUNTER", "[", "hash_key", "]", "<=", "n", ":", "\n", "        ", "logging", ".", "getLogger", "(", "name", "or", "caller_module", ")", ".", "log", "(", "lvl", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n": [[168, 181], ["logging._find_caller", "logging.getLogger().log", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging._find_caller"], ["", "", "def", "log_every_n", "(", "lvl", ",", "msg", ",", "n", "=", "1", ",", "*", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Log once per n times.\n    Args:\n        lvl (int): the logging level\n        msg (str):\n        n (int):\n        name (str): name of the logger to use. Will use the caller's module by default.\n    \"\"\"", "\n", "caller_module", ",", "key", "=", "_find_caller", "(", ")", "\n", "_LOG_COUNTER", "[", "key", "]", "+=", "1", "\n", "if", "n", "==", "1", "or", "_LOG_COUNTER", "[", "key", "]", "%", "n", "==", "1", ":", "\n", "        ", "logging", ".", "getLogger", "(", "name", "or", "caller_module", ")", ".", "log", "(", "lvl", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds": [[183, 198], ["logging._find_caller", "_LOG_TIMER.get", "time.time", "logging.getLogger().log", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging._find_caller", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "", "def", "log_every_n_seconds", "(", "lvl", ",", "msg", ",", "n", "=", "1", ",", "*", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Log no more than once per n seconds.\n    Args:\n        lvl (int): the logging level\n        msg (str):\n        n (int):\n        name (str): name of the logger to use. Will use the caller's module by default.\n    \"\"\"", "\n", "caller_module", ",", "key", "=", "_find_caller", "(", ")", "\n", "last_logged", "=", "_LOG_TIMER", ".", "get", "(", "key", ",", "None", ")", "\n", "current_time", "=", "time", ".", "time", "(", ")", "\n", "if", "last_logged", "is", "None", "or", "current_time", "-", "last_logged", ">=", "n", ":", "\n", "        ", "logging", ".", "getLogger", "(", "name", "or", "caller_module", ")", ".", "log", "(", "lvl", ",", "msg", ")", "\n", "_LOG_TIMER", "[", "key", "]", "=", "current_time", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.__init__": [[106, 170], ["random.seed", "print", "time.time", "set", "print", "time.time", "shelve.open", "_pickle.load.items", "Exception", "nb101_api.NASBench.valid_epochs.update", "open", "_pickle.load", "nb101_api.NASBench.valid_epochs.update", "set", "set", "computed_statistics.keys", "stats[].keys"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["def", "__init__", "(", "self", ",", "dataset_file", ",", "seed", "=", "None", ",", "data_format", "=", "'pickle'", ")", ":", "\n", "    ", "\"\"\"Initialize dataset, this should only be done once per experiment.\n\n    Args:\n      dataset_file: path to .tfrecord file containing the dataset.\n      seed: random seed used for sampling queried models. Two NASBench objects\n        created with the same seed will return the same data points when queried\n        with the same models in the same order. By default, the seed is randomly\n        generated.\n    \"\"\"", "\n", "self", ".", "config", "=", "{", "\n", "'module_vertices'", ":", "7", ",", "\n", "'max_edges'", ":", "9", ",", "\n", "'num_repeats'", ":", "3", ",", "\n", "'available_ops'", ":", "[", "'conv3x3-bn-relu'", ",", "'conv1x1-bn-relu'", ",", "'maxpool3x3'", "]", ",", "\n", "}", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "print", "(", "'Loading dataset from file... This may take a few minutes...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Stores the fixed statistics that are independent of evaluation (i.e.,", "\n", "# adjacency matrix, operations, and number of parameters).", "\n", "# hash --> metric name --> scalar", "\n", "self", ".", "fixed_statistics", "=", "{", "}", "\n", "\n", "# Stores the statistics that are computed via training and evaluating the", "\n", "# model on CIFAR-10. Statistics are computed for multiple repeats of each", "\n", "# model at each max epoch length.", "\n", "# hash --> epochs --> repeat index --> metric name --> scalar", "\n", "self", ".", "computed_statistics", "=", "{", "}", "\n", "\n", "# Valid queriable epoch lengths. {4, 12, 36, 108} for the full dataset or", "\n", "# {108} for the smaller dataset with only the 108 epochs.", "\n", "self", ".", "valid_epochs", "=", "set", "(", ")", "\n", "\n", "# open the database", "\n", "if", "data_format", "==", "'shelve'", ":", "\n", "        ", "with", "shelve", ".", "open", "(", "dataset_file", ",", "'r'", ")", "as", "shelf", ":", "\n", "          ", "for", "module_hash", "in", "shelf", ":", "\n", "# Parse the data from the data file.", "\n", "            ", "fixed_statistics", ",", "computed_statistics", "=", "shelf", "[", "module_hash", "]", "\n", "\n", "self", ".", "fixed_statistics", "[", "module_hash", "]", "=", "fixed_statistics", "\n", "self", ".", "computed_statistics", "[", "module_hash", "]", "=", "computed_statistics", "\n", "\n", "self", ".", "valid_epochs", ".", "update", "(", "set", "(", "computed_statistics", ".", "keys", "(", ")", ")", ")", "\n", "", "", "", "elif", "data_format", "==", "'pickle'", ":", "\n", "        ", "with", "open", "(", "dataset_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "module_hash", ",", "stats", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "fixed_statistics", "[", "module_hash", "]", "=", "stats", "[", "0", "]", "\n", "self", ".", "computed_statistics", "[", "module_hash", "]", "=", "stats", "[", "1", "]", "\n", "\n", "self", ".", "valid_epochs", ".", "update", "(", "set", "(", "stats", "[", "1", "]", ".", "keys", "(", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Data format not supported'", ")", "\n", "\n", "", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Loaded dataset in %d seconds'", "%", "elapsed", ")", "\n", "\n", "self", ".", "history", "=", "{", "}", "\n", "self", ".", "training_time_spent", "=", "0.0", "\n", "self", ".", "total_epochs_spent", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.query": [[171, 231], ["nb101_api.NASBench.get_metrics_from_spec", "random.randint", "nb101_api.OutOfDomainError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.get_metrics_from_spec"], ["", "def", "query", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fetch one of the evaluations for this model spec.\n\n    Each call will sample one of the config['num_repeats'] evaluations of the\n    model. This means that repeated queries of the same model (or isomorphic\n    models) may return identical metrics.\n\n    This function will increment the budget counters for benchmarking purposes.\n    See self.training_time_spent, and self.total_epochs_spent.\n\n    This function also allows querying the evaluation metrics at the halfway\n    point of training using stop_halfway. Using this option will increment the\n    budget counters only up to the halfway point.\n\n    Args:\n      model_spec: ModelSpec object.\n      epochs: number of epochs trained. Must be one of the evaluated number of\n        epochs, [4, 12, 36, 108] for the full dataset.\n      stop_halfway: if True, returned dict will only contain the training time\n        and accuracies at the halfway point of training (num_epochs/2).\n        Otherwise, returns the time and accuracies at the end of training\n        (num_epochs).\n\n    Returns:\n      dict containing the evaluated data for this object.\n\n    Raises:\n      OutOfDomainError: if model_spec or num_epochs is outside the search space.\n    \"\"\"", "\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "sampled_index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "config", "[", "'num_repeats'", "]", "-", "1", ")", "\n", "computed_stat", "=", "computed_stat", "[", "epochs", "]", "[", "sampled_index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat", "[", "'halfway_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat", "[", "'halfway_test_accuracy'", "]", "\n", "", "else", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat", "[", "'final_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat", "[", "'final_test_accuracy'", "]", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.is_valid": [[232, 250], ["nb101_api.NASBench._check_spec"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench._check_spec"], ["", "def", "is_valid", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Checks the validity of the model_spec.\n\n    For the purposes of benchmarking, this does not increment the budget\n    counters.\n\n    Args:\n      model_spec: ModelSpec object.\n\n    Returns:\n      True if model is within space.\n    \"\"\"", "\n", "try", ":", "\n", "      ", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "", "except", "OutOfDomainError", ":", "\n", "      ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.get_budget_counters": [[251, 254], ["None"], "methods", ["None"], ["", "def", "get_budget_counters", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the time and budget counters.\"\"\"", "\n", "return", "self", ".", "training_time_spent", ",", "self", ".", "total_epochs_spent", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.reset_budget_counters": [[255, 259], ["None"], "methods", ["None"], ["", "def", "reset_budget_counters", "(", "self", ")", ":", "\n", "    ", "\"\"\"Reset the time and epoch budget counters.\"\"\"", "\n", "self", ".", "training_time_spent", "=", "0.0", "\n", "self", ".", "total_epochs_spent", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.hash_iterator": [[260, 263], ["nb101_api.NASBench.fixed_statistics.keys"], "methods", ["None"], ["", "def", "hash_iterator", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns iterator over all unique model hashes.\"\"\"", "\n", "return", "self", ".", "fixed_statistics", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.get_metrics_from_hash": [[264, 279], ["copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "get_metrics_from_hash", "(", "self", ",", "module_hash", ")", ":", "\n", "    ", "\"\"\"Returns the metrics for all epochs and all repeats of a hash.\n\n    This method is for dataset analysis and should not be used for benchmarking.\n    As such, it does not increment any of the budget counters.\n\n    Args:\n      module_hash: MD5 hash, i.e., the values yielded by hash_iterator().\n\n    Returns:\n      fixed stats and computed stats of the model spec provided.\n    \"\"\"", "\n", "fixed_stat", "=", "copy", ".", "deepcopy", "(", "self", ".", "fixed_statistics", "[", "module_hash", "]", ")", "\n", "computed_stat", "=", "copy", ".", "deepcopy", "(", "self", ".", "computed_statistics", "[", "module_hash", "]", ")", "\n", "return", "fixed_stat", ",", "computed_stat", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.get_metrics_from_spec": [[280, 295], ["nb101_api.NASBench._check_spec", "nb101_api.NASBench._hash_spec", "nb101_api.NASBench.get_metrics_from_hash"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench._check_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench._hash_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.get_metrics_from_hash"], ["", "def", "get_metrics_from_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Returns the metrics for all epochs and all repeats of a model.\n\n    This method is for dataset analysis and should not be used for benchmarking.\n    As such, it does not increment any of the budget counters.\n\n    Args:\n      model_spec: ModelSpec object.\n\n    Returns:\n      fixed stats and computed stats of the model spec provided.\n    \"\"\"", "\n", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "module_hash", "=", "self", ".", "_hash_spec", "(", "model_spec", ")", "\n", "return", "self", ".", "get_metrics_from_hash", "(", "module_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench._check_spec": [[296, 320], ["len", "numpy.sum", "nb101_api.OutOfDomainError", "nb101_api.OutOfDomainError", "nb101_api.OutOfDomainError", "nb101_api.OutOfDomainError", "nb101_api.OutOfDomainError", "nb101_api.OutOfDomainError"], "methods", ["None"], ["", "def", "_check_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Checks that the model spec is within the dataset.\"\"\"", "\n", "if", "not", "model_spec", ".", "valid_spec", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid spec, provided graph is disconnected.'", ")", "\n", "\n", "", "num_vertices", "=", "len", "(", "model_spec", ".", "ops", ")", "\n", "num_edges", "=", "np", ".", "sum", "(", "model_spec", ".", "matrix", ")", "\n", "\n", "if", "num_vertices", ">", "self", ".", "config", "[", "'module_vertices'", "]", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'too many vertices, got %d (max vertices = %d)'", "\n", "%", "(", "num_vertices", ",", "config", "[", "'module_vertices'", "]", ")", ")", "\n", "\n", "", "if", "num_edges", ">", "self", ".", "config", "[", "'max_edges'", "]", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'too many edges, got %d (max edges = %d)'", "\n", "%", "(", "num_edges", ",", "self", ".", "config", "[", "'max_edges'", "]", ")", ")", "\n", "\n", "", "if", "model_spec", ".", "ops", "[", "0", "]", "!=", "'input'", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'first operation should be \\'input\\''", ")", "\n", "", "if", "model_spec", ".", "ops", "[", "-", "1", "]", "!=", "'output'", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'last operation should be \\'output\\''", ")", "\n", "", "for", "op", "in", "model_spec", ".", "ops", "[", "1", ":", "-", "1", "]", ":", "\n", "      ", "if", "op", "not", "in", "self", ".", "config", "[", "'available_ops'", "]", ":", "\n", "        ", "raise", "OutOfDomainError", "(", "'unsupported op %s (available ops = %s)'", "\n", "%", "(", "op", ",", "self", ".", "config", "[", "'available_ops'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench._hash_spec": [[321, 324], ["model_spec.hash_spec"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.ModelSpec.hash_spec"], ["", "", "", "def", "_hash_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Returns the MD5 hash for a provided model_spec.\"\"\"", "\n", "return", "model_spec", ".", "hash_spec", "(", "self", ".", "config", "[", "'available_ops'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.ModelSpec.__init__": [[329, 365], ["numpy.shape", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "nb101_api.ModelSpec._prune", "isinstance", "numpy.array", "ValueError", "len", "ValueError", "nb101_api.is_upper_triangular", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.ModelSpec._prune", "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.is_upper_triangular"], ["def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "data_format", "=", "'channels_last'", ")", ":", "\n", "    ", "\"\"\"Initialize the module spec.\n\n    Args:\n      matrix: ndarray or nested list with shape [V, V] for the adjacency matrix.\n      ops: V-length list of labels for the base ops used. The first and last\n        elements are ignored because they are the input and output vertices\n        which have no operations. The elements are retained to keep consistent\n        indexing.\n      data_format: channels_last or channels_first.\n\n    Raises:\n      ValueError: invalid matrix or ops\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "matrix", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", "or", "shape", "[", "0", "]", "!=", "shape", "[", "1", "]", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be square'", ")", "\n", "", "if", "shape", "[", "0", "]", "!=", "len", "(", "ops", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'length of ops must match matrix dimensions'", ")", "\n", "", "if", "not", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be upper triangular'", ")", "\n", "\n", "# Both the original and pruned matrices are deep copies of the matrix and", "\n", "# ops so any changes to those after initialization are not recognized by the", "\n", "# spec.", "\n", "", "self", ".", "original_matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "original_ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "\n", "self", ".", "matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "self", ".", "valid_spec", "=", "True", "\n", "self", ".", "_prune", "(", ")", "\n", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.ModelSpec._prune": [[366, 416], ["set", "set", "set().difference", "numpy.delete", "numpy.delete", "sorted", "numpy.shape", "frontier.pop", "range", "frontier.pop", "range", "set.intersection", "len", "list", "list", "set", "set.add", "frontier.append", "set.add", "frontier.append", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "_prune", "(", "self", ")", ":", "\n", "    ", "\"\"\"Prune the extraneous parts of the graph.\n\n    General procedure:\n      1) Remove parts of graph not connected to input.\n      2) Remove parts of graph not connected to output.\n      3) Reorder the vertices so that they are consecutive after steps 1 and 2.\n\n    These 3 steps can be combined by deleting the rows and columns of the\n    vertices that are not reachable from both the input and output (in reverse).\n    \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "original_matrix", ")", "[", "0", "]", "\n", "\n", "# DFS forward from input", "\n", "visited_from_input", "=", "set", "(", "[", "0", "]", ")", "\n", "frontier", "=", "[", "0", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "top", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "top", ",", "v", "]", "and", "v", "not", "in", "visited_from_input", ":", "\n", "          ", "visited_from_input", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# DFS backward from output", "\n", "", "", "", "visited_from_output", "=", "set", "(", "[", "num_vertices", "-", "1", "]", ")", "\n", "frontier", "=", "[", "num_vertices", "-", "1", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "0", ",", "top", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "v", ",", "top", "]", "and", "v", "not", "in", "visited_from_output", ":", "\n", "          ", "visited_from_output", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# Any vertex that isn't connected to both input and output is extraneous to", "\n", "# the computation graph.", "\n", "", "", "", "extraneous", "=", "set", "(", "range", "(", "num_vertices", ")", ")", ".", "difference", "(", "\n", "visited_from_input", ".", "intersection", "(", "visited_from_output", ")", ")", "\n", "\n", "# If the non-extraneous graph is less than 2 vertices, the input is not", "\n", "# connected to the output and the spec is invalid.", "\n", "if", "len", "(", "extraneous", ")", ">", "num_vertices", "-", "2", ":", "\n", "      ", "self", ".", "matrix", "=", "None", "\n", "self", ".", "ops", "=", "None", "\n", "self", ".", "valid_spec", "=", "False", "\n", "return", "\n", "\n", "", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "1", ")", "\n", "for", "index", "in", "sorted", "(", "extraneous", ",", "reverse", "=", "True", ")", ":", "\n", "      ", "del", "self", ".", "ops", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.ModelSpec.hash_spec": [[417, 430], ["nb101_api.hash_module", "canonical_ops.index"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.hash_module"], ["", "", "def", "hash_spec", "(", "self", ",", "canonical_ops", ")", ":", "\n", "    ", "\"\"\"Computes the isomorphism-invariant graph hash of this spec.\n\n    Args:\n      canonical_ops: list of operations in the canonical ordering which they\n        were assigned (i.e. the order provided in the config['available_ops']).\n\n    Returns:\n      MD5 hash of this spec which can be used to query the dataset.\n    \"\"\"", "\n", "# Invert the operations back to integer label indices used in graph gen.", "\n", "labeling", "=", "[", "-", "1", "]", "+", "[", "canonical_ops", ".", "index", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "return", "hash_module", "(", "self", ".", "matrix", ",", "labeling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.is_upper_triangular": [[432, 440], ["range", "range", "numpy.shape"], "function", ["None"], ["", "", "def", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"True if matrix is 0 on diagonal and below.\"\"\"", "\n", "for", "src", "in", "range", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ")", ":", "\n", "    ", "for", "dst", "in", "range", "(", "0", ",", "src", "+", "1", ")", ":", "\n", "      ", "if", "matrix", "[", "src", ",", "dst", "]", "!=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.hash_module": [[442, 475], ["numpy.sum().tolist", "numpy.sum().tolist", "list", "range", "hashlib.md5().hexdigest", "numpy.shape", "len", "len", "len", "zip", "hashlib.md5().hexdigest", "range", "numpy.sum", "numpy.sum", "new_hashes.append", "hashlib.md5", "hashlib.md5", "hashlib.md5().hexdigest", "str().encode", "str().encode", "range", "range", "hashlib.md5", "str", "str", "sorted", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "hash_module", "(", "matrix", ",", "labeling", ")", ":", "\n", "  ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n\n  Args:\n    matrix: np.ndarray square upper-triangular adjacency matrix.\n    labeling: list of int labels of length equal to both dimensions of\n      matrix.\n\n  Returns:\n    MD5 hash of the matrix and labeling.\n  \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labeling", ")", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labeling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "    ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "      ", "in_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "hashlib", ".", "md5", "(", "\n", "(", "''", ".", "join", "(", "sorted", "(", "in_neighbors", ")", ")", "+", "'|'", "+", "\n", "''", ".", "join", "(", "sorted", "(", "out_neighbors", ")", ")", "+", "'|'", "+", "\n", "hashes", "[", "v", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "return", "fingerprint", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.__init__": [[123, 189], ["isinstance", "ValueError", "enumerate", "open", "pickle.load", "pickle.load", "utils_asr._Dataset.dbs.append", "len", "db.items", "ValueError", "pickle.load.pop", "ValueError", "utils_asr._Dataset.seeds.append", "utils_asr._Dataset.dbs[].items", "len", "len", "ValueError", "len", "ValueError", "pickle.load.pop", "ValueError", "utils_asr._Dataset.devices.append", "ValueError", "ValueError", "print", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load"], ["    ", "def", "__init__", "(", "self", ",", "dataset_files", ",", "validate_data", ",", "db_type", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset_files", ",", "str", ")", ":", "\n", "            ", "dataset_files", "=", "[", "dataset_files", "]", "\n", "\n", "", "self", ".", "dbs", "=", "[", "]", "\n", "self", ".", "header", "=", "None", "\n", "if", "db_type", "==", "'training'", ":", "\n", "            ", "self", ".", "seeds", "=", "[", "]", "\n", "", "elif", "db_type", "==", "'benchmarking'", ":", "\n", "            ", "self", ".", "devices", "=", "[", "]", "\n", "", "elif", "db_type", "==", "'static'", ":", "\n", "            ", "if", "len", "(", "dataset_files", ")", "!=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Expected exactly one dataste file'", ")", "\n", "\n", "", "", "for", "db_file", "in", "dataset_files", ":", "\n", "            ", "with", "open", "(", "db_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "header", "=", "pickle", ".", "load", "(", "f", ")", "\n", "if", "header", "[", "'dataset_type'", "]", "!=", "db_type", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Expected a dataset file with {db_type} information'", ")", "\n", "\n", "", "if", "db_type", "==", "'training'", ":", "\n", "                    ", "seed", "=", "header", ".", "pop", "(", "'seed'", ")", "\n", "", "elif", "db_type", "==", "'benchmarking'", ":", "\n", "                    ", "device", "=", "header", ".", "pop", "(", "'device'", ")", "\n", "\n", "", "if", "self", ".", "header", "is", "None", ":", "\n", "                    ", "self", ".", "header", "=", "header", "\n", "", "if", "self", ".", "header", "!=", "header", ":", "\n", "                    ", "raise", "ValueError", "(", "'Different dataset files contain data for different settings'", ")", "\n", "\n", "# TODO: we could relax this if needed", "\n", "", "if", "db_type", "==", "'training'", ":", "\n", "                    ", "if", "header", "[", "'columns'", "]", "[", ":", "3", "]", "!=", "[", "'model_hash'", ",", "'val_per'", ",", "'test_per'", "]", ":", "\n", "                        ", "raise", "ValueError", "(", "'In the current implementation we expect the dataset to contain information in order: model hash, val PER, test PER'", ")", "\n", "", "", "elif", "db_type", "==", "'benchmarking'", ":", "\n", "                    ", "if", "header", "[", "'columns'", "]", "[", ":", "2", "]", "!=", "[", "'model_hash'", ",", "'latency'", "]", ":", "\n", "                        ", "raise", "ValueError", "(", "'In the current implementation we expect the dataset to contain information in order: model hash, latency'", ")", "\n", "", "", "elif", "db_type", "==", "'static'", ":", "\n", "                    ", "if", "header", "[", "'columns'", "]", "[", ":", "2", "]", "!=", "[", "'model_hash'", ",", "'params'", "]", ":", "\n", "                        ", "print", "(", "header", "[", "'columns'", "]", ")", "\n", "raise", "ValueError", "(", "'In the current implementation we expect the dataset to contain information in order: model hash, number of parameters'", ")", "\n", "\n", "", "", "if", "db_type", "==", "'training'", ":", "\n", "                    ", "self", ".", "seeds", ".", "append", "(", "seed", ")", "\n", "", "elif", "db_type", "==", "'benchmarking'", ":", "\n", "                    ", "self", ".", "devices", ".", "append", "(", "device", ")", "\n", "", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "data_dict", "=", "{", "model_hash", ":", "rest", "for", "model_hash", ",", "*", "rest", "in", "data", "}", "\n", "self", ".", "dbs", ".", "append", "(", "data_dict", ")", "\n", "\n", "", "", "if", "not", "self", ".", "dbs", ":", "\n", "            ", "raise", "ValueError", "(", "'At least one dataset should be read'", ")", "\n", "\n", "", "if", "validate_data", "and", "len", "(", "self", ".", "dbs", ")", ">", "1", ":", "\n", "#if db_type == 'training':", "\n", "            ", "models", "=", "{", "model_hash", ":", "model_pt", "for", "model_hash", ",", "(", "*", "_", ",", "model_pt", ")", "in", "self", ".", "dbs", "[", "0", "]", ".", "items", "(", ")", "}", "\n", "for", "fidx", ",", "db", "in", "enumerate", "(", "self", ".", "dbs", "[", "1", ":", "]", ")", ":", "\n", "                ", "if", "len", "(", "db", ")", "!=", "len", "(", "models", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Dataset file at position {fidx+1} has {len(db)} entries but the one at position 0 has {len(models)}'", ")", "\n", "", "for", "model_hash", ",", "(", "*", "_", ",", "model_pt", ")", "in", "db", ".", "items", "(", ")", ":", "\n", "                    ", "if", "model_hash", "not", "in", "models", ":", "\n", "                        ", "raise", "ValueError", "(", "f'{model_hash} is present in dataset file {fidx+1} but no in 0'", ")", "\n", "", "if", "db_type", "==", "'training'", ":", "\n", "# even if this is not true, the same model hash should guarantee that the architectures are the same", "\n", "# however, internally we'd expect the points to be the same", "\n", "                        ", "assert", "model_pt", "==", "models", "[", "model_hash", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.version": [[190, 195], ["None"], "methods", ["None"], ["", "", "", "", "", "@", "property", "\n", "def", "version", "(", "self", ")", ":", "\n", "        ", "''' Version of the dataset.\n        '''", "\n", "return", "self", ".", "header", "[", "'version'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.search_space": [[196, 202], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "search_space", "(", "self", ")", ":", "\n", "        ", "''' Search space shape. A (potentially nested) list of integers identifying\n            different choices and their related number of options.\n        '''", "\n", "return", "self", ".", "header", "[", "'search_space'", "]", "[", "'shape'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.ops": [[203, 208], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ops", "(", "self", ")", ":", "\n", "        ", "''' List of the operations which were considered when creating the dataset.\n        '''", "\n", "return", "self", ".", "header", "[", "'search_space'", "]", "[", "'ops'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.nodes": [[209, 214], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nodes", "(", "self", ")", ":", "\n", "        ", "''' Number of nodes which was considered when creating the dataset.\n        '''", "\n", "return", "self", ".", "header", "[", "'search_space'", "]", "[", "'nodes'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.columns": [[215, 223], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "columns", "(", "self", ")", ":", "\n", "        ", "''' Names of values stored in the dataset, in-order.\n            Can be used to identify specific information from values returned by\n            functions which do not convert their results to dictionaries.\n            See the remaining API for more information.\n        '''", "\n", "return", "self", ".", "header", "[", "'columns'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.__contains__": [[224, 227], ["utils_asr.get_model_hash"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.get_model_hash"], ["", "def", "__contains__", "(", "self", ",", "arch", ")", ":", "\n", "        ", "h", "=", "get_model_hash", "(", "arch", ",", "ops", "=", "self", ".", "ops", ")", "\n", "return", "h", "in", "self", ".", "dbs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.StaticInfoDataset.__init__": [[230, 232], ["utils_asr._Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_file", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "[", "dataset_file", "]", ",", "False", ",", "'static'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.StaticInfoDataset._get": [[233, 238], ["utils_asr.StaticInfoDataset.dbs[].get", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "def", "_get", "(", "self", ",", "model_hash", ",", "return_dict", ")", ":", "\n", "        ", "r", "=", "self", ".", "dbs", "[", "0", "]", ".", "get", "(", "model_hash", ")", "\n", "if", "return_dict", "and", "r", "is", "not", "None", ":", "\n", "            ", "return", "dict", "(", "zip", "(", "self", ".", "columns", "[", "1", ":", "]", ",", "r", ")", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.StaticInfoDataset.params": [[239, 258], ["utils_asr.get_model_hash", "utils_asr.StaticInfoDataset._get"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.get_model_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.BenchmarkingDataset._get"], ["", "def", "params", "(", "self", ",", "arch", ")", ":", "\n", "        ", "''' Return the number of parameters in a specific architecture.\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                return_dict - (optional) determinates if the returned values will be provided\n                    as a ``dict`` or a scalar value. A ``dict`` contains the same values as\n                    the ``list`` but allows the user to extract them by their names, whereas\n                    a list can be thought of as a single row in a table containing values only.\n                    The user can map particular elements of the returned ``list`` by considering\n                    the values in provided ``devices`` argument. Default: ``False``.\n\n            Returns:\n                ``None`` if information about a given ``arch`` cannot be found in the dataset,\n                otherwise a ``dict`` or a ``list`` containing information about the model.\n        '''", "\n", "model_hash", "=", "get_model_hash", "(", "arch", ",", "ops", "=", "self", ".", "ops", ")", "\n", "ret", "=", "self", ".", "_get", "(", "model_hash", ",", "False", ")", "\n", "return", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.BenchmarkingDataset.__init__": [[272, 284], ["utils_asr._Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "dataset_files", ",", "validate_data", "=", "True", ")", ":", "\n", "        ", "''' Create a new dataset by loading data from the provided list of files.\n\n            If multiple files are given, they should contain information about models\n            from the same search space, benchmarked on different devices.\n\n            If ``validate_data`` is set to ``True``, the data from the files will be validated\n            to check if it's consistent. If the files are known to be ok, the argument can be\n            set to ``False`` to speed up loading time a little bit (or to hack the code if you know\n            what you are doing).\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", "dataset_files", ",", "validate_data", ",", "'benchmarking'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.BenchmarkingDataset._get": [[285, 306], ["zip", "list", "isinstance", "utils_asr.BenchmarkingDataset.dbs[].get", "range", "utils_asr.BenchmarkingDataset.devices.index", "raw.append", "dict", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "def", "_get", "(", "self", ",", "model_hash", ",", "devices", ",", "ret_dict", ")", ":", "\n", "        ", "if", "devices", "is", "None", ":", "\n", "            ", "devices", "=", "self", ".", "devices", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "devices", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "devices", ",", "str", ")", ":", "\n", "                ", "devices", "=", "[", "devices", "]", "\n", "", "indices", "=", "[", "self", ".", "devices", ".", "index", "(", "d", ")", "for", "d", "in", "devices", "]", "\n", "\n", "", "raw", "=", "[", "]", "if", "not", "ret_dict", "else", "{", "}", "\n", "for", "didx", ",", "device_name", "in", "zip", "(", "indices", ",", "devices", ")", ":", "\n", "            ", "value", "=", "self", ".", "dbs", "[", "didx", "]", ".", "get", "(", "model_hash", ")", "\n", "if", "value", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "if", "not", "ret_dict", ":", "\n", "                ", "raw", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "value", "=", "dict", "(", "zip", "(", "self", ".", "columns", "[", "1", ":", "]", ",", "value", ")", ")", "\n", "raw", "[", "device_name", "]", "=", "value", "\n", "\n", "", "", "return", "raw", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.BenchmarkingDataset.latency": [[307, 333], ["utils_asr.get_model_hash", "utils_asr.BenchmarkingDataset._get"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.get_model_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.BenchmarkingDataset._get"], ["", "def", "latency", "(", "self", ",", "arch", ",", "devices", "=", "None", ",", "return_dict", "=", "False", ")", ":", "\n", "        ", "''' Return benchmarking information about a specific architecture on the provided\n            devices from the dataset.\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                device - (optional) if provided, the returned will be information about\n                    the model's performance when run on the device with the given name(s),\n                    otherwise latency on all devices will be returned; accepted values are:\n                    Str, List[Str] and None\n                return_dict - (optional) determinates if the returned values will be provided\n                    as a ``dict`` or a simple ``list``. A ``dict`` contains the same values as\n                    the ``list`` but allows the user to extract them by their names, whereas\n                    a list can be thought of as a single row in a table containing values only.\n                    The user can map particular elements of the returned ``list`` by considering\n                    the values in provided ``devices`` argument. Default: ``False``.\n\n            Returns:\n                ``None`` if information about a given ``arch`` cannot be found in the dataset,\n                otherwise a ``dict`` or a ``list`` containing information about the model.\n\n            Raises:\n                ValueError - if invalid ``device`` is given \n        '''", "\n", "model_hash", "=", "get_model_hash", "(", "arch", ",", "ops", "=", "self", ".", "ops", ")", "\n", "return", "self", ".", "_get", "(", "model_hash", ",", "devices", ",", "return_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.__init__": [[350, 368], ["utils_asr._Dataset.__init__", "utils_asr.BenchmarkingDataset", "utils_asr.StaticInfoDataset"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "dataset_files", ",", "devices_files", "=", "None", ",", "static_info", "=", "None", ",", "validate_data", "=", "True", ")", ":", "\n", "        ", "''' Create a new dataset by loading data from the provided list of files.\n\n            If multiple files are given, they should contain information about models\n            trained in the same setting, differing only by their initialization seed.\n\n            If ``validate_data`` is set to ``True``, the data from the files will be validated\n            to check if it's consistent. If the files are known to be ok, the argument can be\n            set to ``False`` to speed up loading time a little bit (or to hack the code if you know\n            what you are doing).\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", "dataset_files", ",", "validate_data", ",", "'training'", ")", "\n", "self", ".", "bench_info", "=", "None", "\n", "self", ".", "static_info", "=", "None", "\n", "if", "devices_files", ":", "\n", "            ", "self", ".", "bench_info", "=", "BenchmarkingDataset", "(", "devices_files", ",", "validate_data", "=", "validate_data", ")", "\n", "", "if", "static_info", ":", "\n", "            ", "self", ".", "static_info", "=", "StaticInfoDataset", "(", "static_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.epochs": [[369, 374], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "epochs", "(", "self", ")", ":", "\n", "        ", "''' Total number of epochs for which the models were trained when creating the dataset.\n        '''", "\n", "return", "self", ".", "header", "[", "'epochs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._get_raw_info": [[375, 380], ["utils_asr.Dataset.dbs[].get", "list"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "def", "_get_raw_info", "(", "self", ",", "seed_idx", ",", "model_hash", ")", ":", "\n", "        ", "raw", "=", "self", ".", "dbs", "[", "seed_idx", "]", ".", "get", "(", "model_hash", ")", "\n", "if", "raw", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "model_hash", "]", "+", "list", "(", "raw", ")", "+", "[", "self", ".", "seeds", "[", "seed_idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._get_info_dict": [[381, 388], ["utils_asr.Dataset.dbs[].get", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "def", "_get_info_dict", "(", "self", ",", "seed_idx", ",", "model_hash", ")", ":", "\n", "        ", "raw", "=", "self", ".", "dbs", "[", "seed_idx", "]", ".", "get", "(", "model_hash", ")", "\n", "if", "raw", "is", "not", "None", ":", "\n", "            ", "raw", "=", "dict", "(", "zip", "(", "self", ".", "columns", "[", "1", ":", "]", ",", "raw", ")", ")", "\n", "raw", "[", "self", ".", "columns", "[", "0", "]", "]", "=", "model_hash", "\n", "raw", "[", "'seed'", "]", "=", "self", ".", "seeds", "[", "seed_idx", "]", "\n", "", "return", "raw", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._get_info": [[389, 394], ["utils_asr.Dataset._get_info_dict", "utils_asr.Dataset._get_raw_info"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._get_info_dict", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._get_raw_info"], ["", "def", "_get_info", "(", "self", ",", "seed_idx", ",", "model_hash", ",", "return_dict", ")", ":", "\n", "        ", "if", "return_dict", ":", "\n", "            ", "return", "self", ".", "_get_info_dict", "(", "seed_idx", ",", "model_hash", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_get_raw_info", "(", "seed_idx", ",", "model_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._query": [[395, 421], ["utils_asr.Dataset._get_info", "random.randrange", "utils_asr.Dataset.seeds.index", "utils_asr.Dataset.bench_info._get", "utils_asr.Dataset.static_info._get", "len", "ValueError", "utils_asr.Dataset.update", "utils_asr.Dataset.extend", "ValueError", "utils_asr.Dataset.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._get_info", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.BenchmarkingDataset._get", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.BenchmarkingDataset._get", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "", "def", "_query", "(", "self", ",", "model_hash", ",", "seed", ",", "devices", ",", "include_static_info", ",", "return_dict", ")", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "seed_idx", "=", "random", ".", "randrange", "(", "len", "(", "self", ".", "seeds", ")", ")", "\n", "", "else", ":", "\n", "            ", "seed_idx", "=", "self", ".", "seeds", ".", "index", "(", "seed", ")", "\n", "\n", "", "ret", "=", "self", ".", "_get_info", "(", "seed_idx", ",", "model_hash", ",", "return_dict", ")", "\n", "if", "devices", "!=", "False", "and", "(", "devices", "is", "not", "None", "or", "self", ".", "bench_info", ")", ":", "\n", "            ", "if", "not", "self", ".", "bench_info", ":", "\n", "                ", "raise", "ValueError", "(", "'No benchmarking information attached'", ")", "\n", "", "lat", "=", "self", ".", "bench_info", ".", "_get", "(", "model_hash", ",", "devices", ",", "return_dict", ")", "\n", "if", "return_dict", ":", "\n", "               ", "ret", ".", "update", "(", "lat", ")", "\n", "", "else", ":", "\n", "                ", "ret", ".", "extend", "(", "lat", ")", "\n", "\n", "", "", "if", "include_static_info", ":", "\n", "            ", "if", "not", "self", ".", "static_info", ":", "\n", "                ", "raise", "ValueError", "(", "'No static information attached'", ")", "\n", "", "info", "=", "self", ".", "static_info", ".", "_get", "(", "model_hash", ",", "return_dict", ")", "\n", "if", "return_dict", ":", "\n", "                ", "ret", "[", "'info'", "]", "=", "info", "\n", "", "else", ":", "\n", "                ", "ret", ".", "append", "(", "info", ")", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.full_info": [[422, 456], ["utils_asr.get_model_hash", "utils_asr.Dataset._query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.get_model_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._query"], ["", "def", "full_info", "(", "self", ",", "arch", ",", "seed", "=", "None", ",", "devices", "=", "None", ",", "include_static_info", "=", "None", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "''' Return all information about a specific architecture from the dataset.\n            If multiple seeds are available, the can either return information about\n            a specific one or a random one.\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                seed - (optional) if provided, the returned will be information about\n                    the model's performance when initialized with this particular seed,\n                    otherwise information related to a randomly chosen seed from the list\n                    if available ones will be used. Default: random seed\n                devices - (optional) add information about benchmarking on the provided devices,\n                    if ``None`` all available devices are included, otherwise should be a name of\n                    the device or a list of names, can also be exactly ``False`` to avoid including\n                    benchmarking information even when they are available\n                include_static_info - (optional) include static information about the model,\n                    such as number of parameters, if set to ``None`` static information will be\n                    added only if available\n                return_dict - (optional) determinates if the returned values will be provided\n                    as a ``dict`` or a simple ``list``. A ``dict`` contains the same values as\n                    the ``list`` but alolws the user to extract them by their names, whereas\n                    a list can be thought of as a single row in a table containing values only.\n                    The user can map particular elements of the returned ``list`` by considering\n                    the values in ``columns``. Default: ``True``.\n\n            Returns:\n                ``None`` if information about a given ``arch`` cannot be found in the dataset,\n                otherwise a ``dict`` or a ``list`` containing information about the model.\n\n            Raises:\n                ValueError - if invalid ``seed`` is given \n        '''", "\n", "model_hash", "=", "get_model_hash", "(", "arch", ",", "ops", "=", "self", ".", "ops", ")", "\n", "return", "self", ".", "_query", "(", "model_hash", ",", "seed", ",", "devices", ",", "include_static_info", ",", "return_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.full_info_by_graph": [[457, 493], ["utils_asr.graph_hash", "utils_asr.Dataset._query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.graph_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset._query"], ["", "def", "full_info_by_graph", "(", "self", ",", "graph", ",", "seed", "=", "None", ",", "devices", "=", "None", ",", "include_static_info", "=", "None", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "''' Return all information about an architecture identified by the provided model\n            graph.\n            If multiple seeds are available, the can either return information about\n            a specific one or a random one.\n\n            Arguments:\n                graph - a graph of a model from the search space, obtained by calling\n                    ``nasbench_asr.graph_utils.get_model_graph(arch)``\n                seed - (optional) if provided, the returned will be information about\n                    the model's performance when initialized with this particular seed,\n                    otherwise information related to a randomly chosen seed from the list\n                    if available ones will be used. Default: random seed\n                devices - (optional) add information about benchmarking on the provided devices,\n                    if ``None`` all available devices are included, otherwise should be a name of\n                    the device or a list of names, can also be exactly ``False`` to avoid including\n                    benchmarking information even when they are available\n                include_static_info - (optional) include static information about the model,\n                    such as number of parameters, if set to ``None`` static information will be\n                    added only if available\n                return_dict - (optional) determinates if the returned values will be provided\n                    as a ``dict`` or a simple ``list``. A ``dict`` contains the same values as\n                    the ``list`` but allows the user to extract them by their names, whereas\n                    a list can be thought of as a single row in a table containing values only.\n                    The user can map particular elements of the returned ``list`` by considering\n                    the values in ``columns``. Default: ``True``.\n\n            Returns:\n                ``None`` if information about a given ``arch`` cannot be found in the dataset,\n                otherwise a ``dict`` or a ``list`` containing information about the model.\n\n            Raises:\n                ValueError - if invalid ``seed`` is given \n        '''", "\n", "model_hash", "=", "graph_hash", "(", "graph", ")", "\n", "return", "self", ".", "_query", "(", "model_hash", ",", "seed", ",", "devices", ",", "include_static_info", ",", "return_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.test_acc": [[494, 513], ["utils_asr.Dataset.full_info"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.full_info"], ["", "def", "test_acc", "(", "self", ",", "arch", ",", "seed", "=", "None", ")", ":", "\n", "        ", "''' Return test PER of a model.\n\n            Test PER is currently defined as the test PER of the model at epoch\n            with the lowest validation PER.\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                seed - (optional) an initialization seed to use, if not provided information\n                    will be queried for a random seed (default: ``None``)\n\n            Returns:\n                ``None`` if the dataset does not contain information about a model ``arch``,\n                otherwise a scalar ``float``.\n        '''", "\n", "info", "=", "self", ".", "full_info", "(", "arch", ",", "seed", "=", "seed", ",", "devices", "=", "False", ",", "include_static_info", "=", "False", ",", "return_dict", "=", "False", ")", "\n", "if", "info", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "info", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.val_acc": [[514, 546], ["utils_asr.Dataset.full_info", "len", "min"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.full_info"], ["", "def", "val_acc", "(", "self", ",", "arch", ",", "epoch", "=", "None", ",", "best", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "''' Return validation PER of a model.\n\n            The returned PER can be either the best PER or the PER at the last epoch.\n            The maximum number of epochs to consider can be controlled by ``epoch``.\n\n            If ``vals`` is a list of validation PERs, the returned value can be\n            defined as:\n\n                epoch = epoch if epoch is not None else len(vals)\n                return min(vals[:epoch]) if best else vals[epoch-1]\n\n            Arguments:\n                arch - a point from the search space identifying a model\n                epoch - (optional) number of epochs to consider, if not provided\n                    all epochs will be considered (default: ``None``)\n                best - (optional) return best validation PER from epoch 1 to the\n                    maximum considered epochs, otherwise return PER at the last\n                    considered epoch (default: ``True``)\n                seed - (optional) an initialization seed to use, if not provided information\n                    will be queried for a random seed (default: ``None``)\n\n        '''", "\n", "info", "=", "self", ".", "full_info", "(", "arch", ",", "seed", "=", "seed", ",", "devices", "=", "False", ",", "include_static_info", "=", "False", ",", "return_dict", "=", "False", ")", "\n", "if", "info", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "len", "(", "info", "[", "1", "]", ")", "\n", "", "if", "best", ":", "\n", "            ", "return", "min", "(", "info", "[", "1", "]", "[", ":", "epoch", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "info", "[", "1", "]", "[", "epoch", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.latency": [[547, 553], ["functools.wraps", "utils_asr.Dataset.bench_info.latency", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.latency"], ["", "", "@", "functools", ".", "wraps", "(", "BenchmarkingDataset", ".", "latency", ")", "\n", "def", "latency", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "bench_info", ":", "\n", "            ", "raise", "ValueError", "(", "'No benchmarking information attached'", ")", "\n", "\n", "", "return", "self", ".", "bench_info", ".", "latency", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.params": [[554, 560], ["functools.wraps", "utils_asr.Dataset.static_info.params", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.params"], ["", "@", "functools", ".", "wraps", "(", "StaticInfoDataset", ".", "params", ")", "\n", "def", "params", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "static_info", ":", "\n", "            ", "raise", "ValueError", "(", "'No static information attached'", ")", "\n", "\n", "", "return", "self", ".", "static_info", ".", "params", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.get_model_graph": [[12, 72], ["len", "numpy.zeros", "enumerate", "labels.append", "enumerate", "labels.append", "enumerate", "range", "utils_asr.get_model_graph.bfs"], "function", ["None"], ["def", "get_model_graph", "(", "arch_vec", ",", "ops", "=", "None", ",", "minimize", "=", "True", ",", "keep_dims", "=", "False", ")", ":", "\n", "    ", "if", "ops", "is", "None", ":", "\n", "        ", "import", "search_space", "as", "ss", "\n", "ops", "=", "ss", ".", "all_ops", "\n", "", "num_nodes", "=", "len", "(", "arch_vec", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "num_nodes", "+", "2", ",", "num_nodes", "+", "2", ")", ")", "\n", "labels", "=", "[", "'input'", "]", "\n", "prev_skips", "=", "[", "]", "\n", "for", "nidx", ",", "node", "in", "enumerate", "(", "arch_vec", ")", ":", "\n", "        ", "op", "=", "node", "[", "0", "]", "\n", "labels", ".", "append", "(", "ops", "[", "op", "]", ")", "\n", "mat", "[", "nidx", ",", "nidx", "+", "1", "]", "=", "1", "\n", "for", "i", ",", "sc", "in", "enumerate", "(", "prev_skips", ")", ":", "\n", "            ", "if", "sc", ":", "\n", "                ", "mat", "[", "i", ",", "nidx", "+", "1", "]", "=", "1", "\n", "", "", "prev_skips", "=", "node", "[", "1", ":", "]", "\n", "", "labels", ".", "append", "(", "'output'", ")", "\n", "mat", "[", "num_nodes", ",", "num_nodes", "+", "1", "]", "=", "1", "\n", "for", "i", ",", "sc", "in", "enumerate", "(", "prev_skips", ")", ":", "\n", "        ", "if", "sc", ":", "\n", "            ", "mat", "[", "i", ",", "num_nodes", "+", "1", "]", "=", "1", "\n", "", "", "orig", "=", "None", "\n", "if", "minimize", ":", "\n", "        ", "orig", "=", "copy", ".", "copy", "(", "mat", ")", ",", "copy", ".", "copy", "(", "labels", ")", "\n", "for", "n", "in", "range", "(", "len", "(", "mat", ")", ")", ":", "\n", "            ", "if", "labels", "[", "n", "]", "==", "'zero'", ":", "\n", "                ", "for", "n2", "in", "range", "(", "len", "(", "mat", ")", ")", ":", "\n", "                    ", "if", "mat", "[", "n", ",", "n2", "]", ":", "\n", "                        ", "mat", "[", "n", ",", "n2", "]", "=", "0", "\n", "", "if", "mat", "[", "n2", ",", "n", "]", ":", "\n", "                        ", "mat", "[", "n2", ",", "n", "]", "=", "0", "\n", "", "", "", "", "def", "bfs", "(", "src", ",", "mat", ",", "backward", ")", ":", "\n", "            ", "visited", "=", "np", ".", "zeros", "(", "len", "(", "mat", ")", ")", "\n", "q", "=", "[", "src", "]", "\n", "visited", "[", "src", "]", "=", "1", "\n", "while", "q", ":", "\n", "                ", "n", "=", "q", ".", "pop", "(", ")", "\n", "for", "n2", "in", "range", "(", "len", "(", "mat", ")", ")", ":", "\n", "                    ", "if", "visited", "[", "n2", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "backward", "and", "mat", "[", "n2", ",", "n", "]", ")", "or", "(", "not", "backward", "and", "mat", "[", "n", ",", "n2", "]", ")", ":", "\n", "                        ", "q", ".", "append", "(", "n2", ")", "\n", "visited", "[", "n2", "]", "=", "1", "\n", "", "", "", "return", "visited", "\n", "", "vfw", "=", "bfs", "(", "0", ",", "mat", ",", "False", ")", "\n", "vbw", "=", "bfs", "(", "len", "(", "mat", ")", "-", "1", ",", "mat", ",", "True", ")", "\n", "v", "=", "vfw", "+", "vbw", "\n", "dangling", "=", "(", "v", "<", "2", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "dangling", ".", "size", ":", "\n", "            ", "if", "keep_dims", ":", "\n", "                ", "mat", "[", "dangling", ",", ":", "]", "=", "0", "\n", "mat", "[", ":", ",", "dangling", "]", "=", "0", "\n", "for", "i", "in", "dangling", ":", "\n", "                    ", "labels", "[", "i", "]", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "mat", "=", "np", ".", "delete", "(", "mat", ",", "dangling", ",", "axis", "=", "0", ")", "\n", "mat", "=", "np", ".", "delete", "(", "mat", ",", "dangling", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "sorted", "(", "dangling", ",", "reverse", "=", "True", ")", ":", "\n", "                    ", "del", "labels", "[", "i", "]", "\n", "", "", "", "", "return", "(", "mat", ",", "labels", ")", ",", "orig", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.graph_hash": [[74, 110], ["utils_asr.graph_hash.hash_module"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.hash_module"], ["", "def", "graph_hash", "(", "g", ")", ":", "\n", "    ", "all_ops", "=", "[", "'linear'", ",", "'conv5'", ",", "'conv5d2'", ",", "'conv7'", ",", "'conv7d2'", ",", "'zero'", "]", "\n", "m", ",", "l", "=", "g", "\n", "def", "hash_module", "(", "matrix", ",", "labelling", ")", ":", "\n", "        ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n        Args:\n            matrix: np.ndarray square upper-triangular adjacency matrix.\n            labelling: list of int labels of length equal to both dimensions of\n                matrix.\n        Returns:\n            MD5 hash of the matrix and labelling.\n        \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labelling", ")", ",", "f'{labelling} {matrix}'", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labelling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "            ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "                ", "in_neighbours", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbours", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "hashlib", ".", "md5", "(", "\n", "(", "''", ".", "join", "(", "sorted", "(", "in_neighbours", ")", ")", "+", "'|'", "+", "\n", "''", ".", "join", "(", "sorted", "(", "out_neighbours", ")", ")", "+", "'|'", "+", "\n", "hashes", "[", "v", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "return", "fingerprint", "\n", "", "labels", "=", "[", "]", "\n", "if", "l", ":", "\n", "        ", "labels", "=", "[", "-", "1", "]", "+", "[", "all_ops", ".", "index", "(", "op", ")", "for", "op", "in", "l", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "", "return", "hash_module", "(", "m", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.get_model_hash": [[112, 120], ["utils_asr.get_model_graph", "utils_asr.graph_hash"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.get_model_graph", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.graph_hash"], ["", "def", "get_model_hash", "(", "arch_vec", ",", "ops", "=", "None", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "''' Get hash of the architecture specified by arch_vec.\n        Architecture hash can be used to determine if two\n        configurations from the search space are in fact the\n        same (graph isomorphism).\n    '''", "\n", "g", ",", "_", "=", "get_model_graph", "(", "arch_vec", ",", "ops", "=", "ops", ",", "minimize", "=", "minimize", ")", "\n", "return", "graph_hash", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.from_folder": [[563, 642], ["pathlib.Path().expanduser", "re.compile", "pathlib.Path().expanduser.iterdir", "utils_asr.Dataset", "ValueError", "re.compile", "ff.is_file", "pathlib.Path", "pathlib.Path().expanduser.exists", "pathlib.Path().expanduser.is_dir", "isinstance", "str", "re.compile.fullmatch", "isinstance", "isinstance", "str", "datasets.append", "regex2.fullmatch", "bench_info.append", "str", "isinstance", "str", "str", "map", "map"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.compile", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.compile"], ["", "", "def", "from_folder", "(", "folder", ",", "max_epochs", "=", "None", ",", "seeds", "=", "None", ",", "devices", "=", "None", ",", "include_static_info", "=", "False", ",", "validate_data", "=", "True", ")", ":", "\n", "    ", "''' Create a ``Dataset`` object from files in a given directory.\n        Arguments control what subset of the files will be used.\n\n        Recognizable files should have names following the pattern::\n\n            - nb-asr-e{max_epochs}-{seed}.pickle for training datasets\n            - nb-asr-bench-{device}.pickle for benchmarking datasets\n            - nb-asr-info.pickle for static information dataset\n\n        Arguments:\n            max_epochs - load dataset files related to accuracy of models\n                when trained with at most ``max_epochs`` of training.\n                The related files should have a 'e{max_epochs}' component\n                in their name. If the argument is ``None``, load the dataset\n                related to full training.\n            seeds - if not provided the created dataset will use all available\n                seeds (each file should hold information about one seed only).\n                Otherwise it can be a single value or a list seeds to use.\n                The function will not check if the file(s) for the provided seed(s)\n                exist(s) and will fail silently (i.e., the resulting\n                dataset simply won't include results for the provided seed)\n            devices - (optional) add information about benchmarking on the provided devices,\n                if ``None`` all available devices are included, otherwise should be a name of\n                the device or a list of names, can also be exactly ``False`` to avoid including\n                benchmarking information even when they are available\n            include_static_info - (optional) include static information about the model,\n                such as number of parameters\n            validate_data - passed to ``Dataset`` constructor, if ``True`` the dataset\n                will be validated to check consistency of the data. Can be set to ``False``\n                to speed up loading if the data is known to be valid.\n\n        Raises:\n            ValueError - if ``folder`` is not a directory or does not exist\n            ValueError - if any of the loaded dataset files contain \n    '''", "\n", "f", "=", "pathlib", ".", "Path", "(", "folder", ")", ".", "expanduser", "(", ")", "\n", "if", "not", "f", ".", "exists", "(", ")", "or", "not", "f", ".", "is_dir", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'{folder} is not a directory'", ")", "\n", "\n", "", "if", "max_epochs", "is", "None", ":", "\n", "        ", "max_epochs", "=", "40", "\n", "\n", "", "max_epochs", "=", "f'e{max_epochs}-'", "\n", "\n", "if", "seeds", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "seeds", ",", "cabc", ".", "Sequence", ")", "and", "not", "isinstance", "(", "seeds", ",", "str", ")", ":", "\n", "            ", "seeds", "=", "'('", "+", "'|'", ".", "join", "(", "map", "(", "str", ",", "seeds", ")", ")", "+", "')'", "\n", "", "else", ":", "\n", "            ", "seeds", "=", "str", "(", "seeds", ")", "\n", "", "", "else", ":", "\n", "        ", "seeds", "=", "'[0-9]+'", "\n", "\n", "", "if", "devices", "!=", "False", ":", "\n", "        ", "if", "devices", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "devices", ",", "cabc", ".", "Sequence", ")", "and", "not", "isinstance", "(", "devices", ",", "str", ")", ":", "\n", "                ", "devices", "=", "'('", "+", "'|'", ".", "join", "(", "map", "(", "str", ",", "devices", ")", ")", "+", "')'", "\n", "", "else", ":", "\n", "                ", "devices", "=", "str", "(", "devices", ")", "\n", "", "", "else", ":", "\n", "            ", "devices", "=", "'[a-zA-Z0-9-]+'", "\n", "\n", "", "", "datasets", "=", "[", "]", "\n", "bench_info", "=", "[", "]", "\n", "static_info", "=", "None", "\n", "\n", "regex", "=", "re", ".", "compile", "(", "f'nb-asr-{max_epochs}{seeds}.pickle'", ")", "\n", "regex2", "=", "re", ".", "compile", "(", "f'nb-asr-bench-{devices}.pickle'", ")", "if", "devices", "else", "None", "\n", "for", "ff", "in", "f", ".", "iterdir", "(", ")", ":", "\n", "        ", "if", "ff", ".", "is_file", "(", ")", ":", "\n", "            ", "if", "regex", ".", "fullmatch", "(", "ff", ".", "name", ")", ":", "\n", "                ", "datasets", ".", "append", "(", "str", "(", "ff", ")", ")", "\n", "", "if", "devices", "and", "regex2", ".", "fullmatch", "(", "ff", ".", "name", ")", ":", "\n", "                ", "bench_info", ".", "append", "(", "str", "(", "ff", ")", ")", "\n", "", "if", "include_static_info", "and", "ff", ".", "name", "==", "'nb-asr-info.pickle'", ":", "\n", "                ", "static_info", "=", "str", "(", "ff", ")", "\n", "\n", "\n", "", "", "", "return", "Dataset", "(", "datasets", ",", "bench_info", ",", "static_info", ",", "validate_data", "=", "validate_data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.TensorDatasetWithTrans.__init__": [[504, 508], ["all", "tensors[].size", "tensor.size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensors", ",", "transform", "=", "None", ")", ":", "\n", "        ", "assert", "all", "(", "tensors", "[", "0", "]", ".", "size", "(", "0", ")", "==", "tensor", ".", "size", "(", "0", ")", "for", "tensor", "in", "tensors", ")", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.TensorDatasetWithTrans.__getitem__": [[509, 518], ["utils.TensorDatasetWithTrans.transform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "x", "=", "self", ".", "tensors", "[", "0", "]", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "x", "=", "self", ".", "transform", "(", "x", ")", "\n", "\n", "", "y", "=", "self", ".", "tensors", "[", "1", "]", "[", "index", "]", "\n", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.TensorDatasetWithTrans.__len__": [[519, 521], ["utils.TensorDatasetWithTrans.tensors[].size"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensors", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AttrDict.__init__": [[676, 679], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeterGroup.__init__": [[684, 686], ["collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "meters", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeterGroup.update": [[687, 692], ["data.items", "utils.AverageMeterGroup.meters[].update", "utils.NamedAverageMeter"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "def", "update", "(", "self", ",", "data", ",", "n", "=", "1", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "meters", ":", "\n", "                ", "self", ".", "meters", "[", "k", "]", "=", "NamedAverageMeter", "(", "k", ",", "\":4f\"", ")", "\n", "", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ",", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeterGroup.__getattr__": [[693, 695], ["None"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "meters", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeterGroup.__getitem__": [[696, 698], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "meters", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeterGroup.__str__": [[699, 701], ["str", "utils.AverageMeterGroup.meters.values"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"  \"", ".", "join", "(", "str", "(", "v", ")", "for", "v", "in", "self", ".", "meters", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeterGroup.summary": [[702, 704], ["v.summary", "utils.AverageMeterGroup.meters.values"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.NamedAverageMeter.summary"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "return", "\"  \"", ".", "join", "(", "v", ".", "summary", "(", ")", "for", "v", "in", "self", ".", "meters", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.NamedAverageMeter.__init__": [[709, 722], ["utils.NamedAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ")", ":", "\n", "        ", "\"\"\"\n        Initialization of AverageMeter\n        Parameters\n        ----------\n        name : str\n            Name to display.\n        fmt : str\n            Format string to print the values.\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.NamedAverageMeter.reset": [[723, 728], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.NamedAverageMeter.update": [[729, 734], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.NamedAverageMeter.__str__": [[735, 738], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name} {val\"", "+", "self", ".", "fmt", "+", "\"} ({avg\"", "+", "self", ".", "fmt", "+", "\"})\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.NamedAverageMeter.summary": [[739, 742], ["fmtstr.format"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name}: {avg\"", "+", "self", ".", "fmt", "+", "\"}\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.__init__": [[745, 747], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset": [[748, 752], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.update": [[753, 757], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Cutout.__init__": [[760, 763], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "prob", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Cutout.__call__": [[764, 781], ["numpy.random.binomial", "numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "self", ".", "prob", ")", ":", "\n", "            ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.0", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load": [[789, 831], ["utils.Checkpointer.logger.info", "utils.Checkpointer._load_file", "utils.Checkpointer._load_model", "utils.Checkpointer.logger.info", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "fvcore.common.file_io.PathManager.get_local_path", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "utils.Checkpointer._log_incompatible_keys", "utils.Checkpointer.logger.info", "obj.load_state_dict", "utils.Checkpointer.pop", "print"], "methods", ["None"], ["    ", "def", "load", "(", "self", ",", "path", ":", "str", ",", "checkpointables", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ")", "->", "object", ":", "\n", "        ", "\"\"\"\n        Load from the given checkpoint. When path points to network file, this\n        function has to be called on all ranks.\n        Args:\n            path (str): path or url to the checkpoint. If empty, will not load\n                anything.\n            checkpointables (list): List of checkpointable names to load. If not\n                specified (None), will load all the possible checkpointables.\n        Returns:\n            dict:\n                extra data loaded from the checkpoint that has not been\n                processed. For example, those saved with\n                :meth:`.save(**extra_data)`.\n        \"\"\"", "\n", "if", "not", "path", ":", "\n", "# no checkpoint provided", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint found. Initializing model from scratch\"", ")", "\n", "return", "{", "}", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "path", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "path", "=", "PathManager", ".", "get_local_path", "(", "path", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "path", ")", ",", "\"Checkpoint {} not found!\"", ".", "format", "(", "path", ")", "\n", "\n", "", "checkpoint", "=", "self", ".", "_load_file", "(", "path", ")", "\n", "incompatible", "=", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "if", "(", "\n", "incompatible", "is", "not", "None", "\n", ")", ":", "# handle some existing subclasses that returns None", "\n", "            ", "self", ".", "_log_incompatible_keys", "(", "incompatible", ")", "\n", "\n", "", "for", "key", "in", "self", ".", "checkpointables", "if", "checkpointables", "is", "None", "else", "checkpointables", ":", "\n", "            ", "if", "key", "in", "checkpoint", ":", "# pyre-ignore", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Loading {} from {}\"", ".", "format", "(", "key", ",", "path", ")", ")", "\n", "obj", "=", "self", ".", "checkpointables", "[", "key", "]", "\n", "try", ":", "\n", "                    ", "obj", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "key", ")", ")", "# pyre-ignore", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"exception loading\"", ")", "\n", "\n", "# return any further checkpoint data", "\n", "", "", "", "return", "checkpoint", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root": [[34, 39], ["pathlib.Path"], "function", ["None"], ["def", "get_project_root", "(", ")", "->", "Path", ":", "\n", "    ", "\"\"\"\n    Returns the root path of the project.\n    \"\"\"", "\n", "return", "Path", "(", "__file__", ")", ".", "parent", ".", "parent", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.iter_flatten": [[41, 53], ["iter", "isinstance", "utils.iter_flatten"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.iter_flatten"], ["", "def", "iter_flatten", "(", "iterable", ")", ":", "\n", "    ", "\"\"\"\n    Flatten a potentially deeply nested python list\n    \"\"\"", "\n", "# taken from https://rightfootin.blogspot.com/2006/09/more-on-python-flatten.html", "\n", "it", "=", "iter", "(", "iterable", ")", "\n", "for", "e", "in", "it", ":", "\n", "        ", "if", "isinstance", "(", "e", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "for", "f", "in", "iter_flatten", "(", "e", ")", ":", "\n", "                ", "yield", "f", "\n", "", "", "else", ":", "\n", "            ", "yield", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.default_argument_parser": [[55, 118], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "utils.get_project_root"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["", "", "", "def", "default_argument_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns the argument parser with the default options.\n\n    Inspired by the implementation of FAIR's detectron2\n    \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"{}/benchmarks/predictors/predictor_config.yaml\"", ".", "format", "(", "\n", "get_project_root", "(", ")", "\n", ")", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "# parser.add_argument(\"--config-file\", default=\"{}/defaults/darts_defaults.yaml\".format(get_project_root()), metavar=\"FILE\", help=\"path to config file\")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-only\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"perform evaluation only\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "default", "=", "0", ",", "help", "=", "\"random seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Resume from last checkpoint\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model-path\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"Path to saved model weights\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--world-size\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"number of nodes for distributed training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"node rank for distributed training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "\"GPU id to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dist-url\"", ",", "\n", "default", "=", "\"tcp://127.0.0.1:8888\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"url used to set up distributed training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dist-backend\"", ",", "default", "=", "\"nccl\"", ",", "type", "=", "str", ",", "help", "=", "\"distributed backend\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multiprocessing-distributed\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use multi-processing distributed training to launch \"", "\n", "\"N processes per node, which has N GPUs. This is the \"", "\n", "\"fastest way to use PyTorch for either single node or \"", "\n", "\"multi node data parallel training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.parse_args": [[120, 124], ["utils.default_argument_parser", "parser.parse_args"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.default_argument_parser", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.parse_args"], ["", "def", "parse_args", "(", "parser", "=", "default_argument_parser", "(", ")", ",", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", ")", ":", "\n", "    ", "if", "\"-f\"", "in", "args", ":", "\n", "        ", "args", "=", "args", "[", "2", ":", "]", "\n", "", "return", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.pairwise": [[126, 135], ["iter", "zip"], "function", ["None"], ["", "def", "pairwise", "(", "iterable", ")", ":", "\n", "    ", "\"\"\"\n    Iterate pairwise over list.\n\n    from https://stackoverflow.com/questions/5389507/iterating-over-every-two-elements-in-a-list\n    \"\"\"", "\n", "\"s -> (s0, s1), (s2, s3), (s4, s5), ...\"", "\n", "a", "=", "iter", "(", "iterable", ")", "\n", "return", "zip", "(", "a", ",", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_config_from_args": [[137, 315], ["logger.info", "utils.create_exp_dir", "utils.create_exp_dir", "utils.create_exp_dir", "utils.parse_args", "utils.pairwise", "CfgNode.load_cfg.set_new_allowed", "CfgNode.load_cfg.merge_from_file", "CfgNode.load_cfg.merge_from_list", "utils.get_project_root", "open", "fvcore.common.config.CfgNode.load_cfg", "utils.pairwise", "os.path.join", "os.path.join", "os.path.join", "open", "fvcore.common.config.CfgNode.load_cfg", "arg.split", "utils.get_project_root", "os.path.join", "os.path.join", "os.path.join", "open", "fvcore.common.config.CfgNode.load_cfg", "type", "utils.get_project_root", "os.path.join", "os.path.join", "os.path.join", "open", "fvcore.common.config.CfgNode.load_cfg", "utils.get_project_root", "os.path.join", "os.path.join", "os.path.join", "open", "fvcore.common.config.CfgNode.load_cfg", "print", "utils.get_project_root", "os.path.join", "os.path.join", "os.path.join", "open", "fvcore.common.config.CfgNode.load_cfg", "utils.get_project_root", "os.path.join", "os.path.join", "os.path.join", "utils.get_project_root"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.create_exp_dir", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.create_exp_dir", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.create_exp_dir", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.parse_args", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.pairwise", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.pairwise", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["", "def", "get_config_from_args", "(", "args", "=", "None", ",", "config_type", "=", "\"nas\"", ")", ":", "\n", "    ", "\"\"\"\n    Parses command line arguments and merges them with the defaults\n    from the config file.\n\n    Prepares experiment directories.\n\n    Args:\n        args: args from a different argument parser than the default one.\n    \"\"\"", "\n", "\n", "if", "config_type", "==", "\"nas\"", ":", "\n", "# load the default base", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "get_project_root", "(", ")", ",", "\"defaults\"", ",", "\"darts_defaults.yaml\"", ")", "\n", ")", "as", "f", ":", "\n", "            ", "config", "=", "CfgNode", ".", "load_cfg", "(", "f", ")", "\n", "", "", "elif", "config_type", "==", "\"predictor\"", ":", "\n", "# load the default base", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "get_project_root", "(", ")", ",", "\"benchmarks/predictors\"", ",", "\"predictor_config.yaml\"", "\n", ")", "\n", ")", "as", "f", ":", "\n", "            ", "config", "=", "CfgNode", ".", "load_cfg", "(", "f", ")", "\n", "", "", "elif", "config_type", "==", "\"bbo-bs\"", ":", "\n", "# load the default base", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "get_project_root", "(", ")", ",", "\"benchmarks/bbo\"", ",", "\"discrete_config.yaml\"", "\n", ")", "\n", ")", "as", "f", ":", "\n", "            ", "config", "=", "CfgNode", ".", "load_cfg", "(", "f", ")", "\n", "", "", "elif", "config_type", "==", "\"nas_predictor\"", ":", "\n", "# load the default base", "\n", "# with open(os.path.join(get_project_root(), 'benchmarks/nas_predictors', 'nas_predictor_config.yaml')) as f:", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "get_project_root", "(", ")", ",", "\"benchmarks/nas_predictors\"", ",", "\"discrete_config.yaml\"", "\n", ")", "\n", ")", "as", "f", ":", "\n", "            ", "config", "=", "CfgNode", ".", "load_cfg", "(", "f", ")", "\n", "", "", "elif", "config_type", "==", "\"oneshot\"", ":", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "get_project_root", "(", ")", ",", "\n", "\"benchmarks/nas_predictors\"", ",", "\n", "\"nas_predictor_config.yaml\"", ",", "\n", ")", "\n", ")", "as", "f", ":", "\n", "            ", "config", "=", "CfgNode", ".", "load_cfg", "(", "f", ")", "\n", "", "", "elif", "config_type", "==", "\"statistics\"", ":", "\n", "# load the default base", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "get_project_root", "(", ")", ",", "\"benchmarks/statistics\"", ",", "\"statistics_config.yaml\"", "\n", ")", "\n", ")", "as", "f", ":", "\n", "            ", "config", "=", "CfgNode", ".", "load_cfg", "(", "f", ")", "\n", "\n", "", "", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "parse_args", "(", ")", "\n", "", "logger", ".", "info", "(", "\"Command line args: {}\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "# Override file args with ones from command line", "\n", "try", ":", "\n", "        ", "for", "arg", ",", "value", "in", "pairwise", "(", "args", ".", "opts", ")", ":", "\n", "            ", "if", "\".\"", "in", "arg", ":", "\n", "                ", "arg1", ",", "arg2", "=", "arg", ".", "split", "(", "\".\"", ")", "\n", "config", "[", "arg1", "]", "[", "arg2", "]", "=", "type", "(", "config", "[", "arg1", "]", "[", "arg2", "]", ")", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "config", "[", "arg", "]", "=", "value", "\n", "\n", "", "", "config", ".", "eval_only", "=", "args", ".", "eval_only", "\n", "config", ".", "resume", "=", "args", ".", "resume", "\n", "config", ".", "model_path", "=", "args", ".", "model_path", "\n", "if", "config_type", "!=", "\"nas_predictor\"", ":", "\n", "            ", "config", ".", "seed", "=", "args", ".", "seed", "\n", "\n", "# load config file", "\n", "", "config", ".", "set_new_allowed", "(", "True", ")", "\n", "config", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "config", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "for", "arg", ",", "value", "in", "pairwise", "(", "args", ")", ":", "\n", "            ", "config", "[", "arg", "]", "=", "value", "\n", "\n", "# prepare the output directories", "\n", "", "", "if", "config_type", "==", "\"nas\"", ":", "\n", "# config.seed = args.seed", "\n", "        ", "config", ".", "search", ".", "seed", "=", "config", ".", "seed", "\n", "# config.optimizer = args.optimizer", "\n", "config", ".", "evaluation", ".", "world_size", "=", "args", ".", "world_size", "\n", "config", ".", "gpu", "=", "config", ".", "search", ".", "gpu", "=", "config", ".", "evaluation", ".", "gpu", "=", "args", ".", "gpu", "\n", "config", ".", "evaluation", ".", "rank", "=", "args", ".", "rank", "\n", "config", ".", "evaluation", ".", "dist_url", "=", "args", ".", "dist_url", "\n", "config", ".", "evaluation", ".", "dist_backend", "=", "args", ".", "dist_backend", "\n", "config", ".", "evaluation", ".", "multiprocessing_distributed", "=", "args", ".", "multiprocessing_distributed", "\n", "config", ".", "save", "=", "\"{}/{}/{}/{}/{}\"", ".", "format", "(", "\n", "config", ".", "out_dir", ",", "config", ".", "search_space", ",", "config", ".", "dataset", ",", "config", ".", "optimizer", ",", "config", ".", "seed", "\n", ")", "\n", "", "elif", "config_type", "==", "\"bbo-bs\"", ":", "\n", "# config.seed = args.seed", "\n", "        ", "config", ".", "search", ".", "seed", "=", "config", ".", "seed", "\n", "# config.optimizer = args.optimizer", "\n", "config", ".", "evaluation", ".", "world_size", "=", "args", ".", "world_size", "\n", "config", ".", "gpu", "=", "config", ".", "search", ".", "gpu", "=", "config", ".", "evaluation", ".", "gpu", "=", "args", ".", "gpu", "\n", "config", ".", "evaluation", ".", "rank", "=", "args", ".", "rank", "\n", "config", ".", "evaluation", ".", "dist_url", "=", "args", ".", "dist_url", "\n", "config", ".", "evaluation", ".", "dist_backend", "=", "args", ".", "dist_backend", "\n", "config", ".", "evaluation", ".", "multiprocessing_distributed", "=", "args", ".", "multiprocessing_distributed", "\n", "config", ".", "save", "=", "\"{}/{}/{}/{}/config_{}/{}\"", ".", "format", "(", "\n", "config", ".", "out_dir", ",", "config", ".", "search_space", ",", "config", ".", "dataset", ",", "config", ".", "optimizer", ",", "config", ".", "config_id", ",", "config", ".", "seed", "\n", ")", "\n", "\n", "\n", "", "elif", "config_type", "==", "\"predictor\"", ":", "\n", "        ", "if", "config", ".", "predictor", "==", "\"lcsvr\"", "and", "config", ".", "experiment_type", "==", "\"vary_train_size\"", ":", "\n", "            ", "config", ".", "save", "=", "\"{}/{}/{}/{}_train/{}\"", ".", "format", "(", "\n", "config", ".", "out_dir", ",", "\n", "config", ".", "dataset", ",", "\n", "\"predictors\"", ",", "\n", "config", ".", "predictor", ",", "\n", "config", ".", "seed", ",", "\n", ")", "\n", "", "elif", "config", ".", "predictor", "==", "\"lcsvr\"", "and", "config", ".", "experiment_type", "==", "\"vary_fidelity\"", ":", "\n", "            ", "config", ".", "save", "=", "\"{}/{}/{}/{}_fidelity/{}\"", ".", "format", "(", "\n", "config", ".", "out_dir", ",", "\n", "config", ".", "dataset", ",", "\n", "\"predictors\"", ",", "\n", "config", ".", "predictor", ",", "\n", "config", ".", "seed", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "config", ".", "save", "=", "\"{}/{}/{}/{}/{}\"", ".", "format", "(", "\n", "config", ".", "out_dir", ",", "\n", "config", ".", "dataset", ",", "\n", "\"predictors\"", ",", "\n", "config", ".", "predictor", ",", "\n", "config", ".", "seed", ",", "\n", ")", "\n", "", "", "elif", "config_type", "==", "\"nas_predictor\"", ":", "\n", "        ", "config", ".", "search", ".", "seed", "=", "config", ".", "seed", "\n", "config", ".", "save", "=", "\"{}/{}/{}/{}/{}/{}\"", ".", "format", "(", "\n", "config", ".", "out_dir", ",", "\n", "config", ".", "dataset", ",", "\n", "\"nas_predictors\"", ",", "\n", "config", ".", "search_space", ",", "\n", "config", ".", "search", ".", "predictor_type", ",", "\n", "config", ".", "seed", ",", "\n", ")", "\n", "", "elif", "config_type", "==", "\"oneshot\"", ":", "\n", "        ", "config", ".", "save", "=", "\"{}/{}/{}/{}/{}/{}\"", ".", "format", "(", "\n", "config", ".", "out_dir", ",", "\n", "config", ".", "dataset", ",", "\n", "\"nas_predictors\"", ",", "\n", "config", ".", "search_space", ",", "\n", "config", ".", "search", ".", "predictor_type", ",", "\n", "config", ".", "seed", ",", "\n", ")", "\n", "", "elif", "config_type", "==", "\"statistics\"", ":", "\n", "        ", "config", ".", "save", "=", "\"{}/{}/{}/{}/{}\"", ".", "format", "(", "\n", "config", ".", "out_dir", ",", "\n", "config", ".", "search_space", ",", "\n", "config", ".", "dataset", ",", "\n", "\"statistics\"", ",", "\n", "config", ".", "seed", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"invalid config type in utils/utils.py\"", ")", "\n", "\n", "", "config", ".", "data", "=", "\"{}/data\"", ".", "format", "(", "get_project_root", "(", ")", ")", "\n", "\n", "create_exp_dir", "(", "config", ".", "save", ")", "\n", "create_exp_dir", "(", "config", ".", "save", "+", "\"/search\"", ")", "# required for the checkpoints", "\n", "create_exp_dir", "(", "config", ".", "save", "+", "\"/eval\"", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders": [[317, 401], ["len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils._data_transforms_cifar10", "torchvision.CIFAR10", "torchvision.CIFAR10", "range", "numpy.floor", "utils._data_transforms_cifar100", "torchvision.CIFAR100", "torchvision.CIFAR100", "torch.utils.data.sampler.SubsetRandomSampler", "numpy.random.seed", "torch.utils.data.sampler.SubsetRandomSampler", "numpy.random.seed", "numpy.random.seed", "utils._data_transforms_svhn", "torchvision.SVHN", "torchvision.SVHN", "utils._data_transforms_ImageNet_16_120", "ImageNet16", "ImageNet16", "ValueError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils._data_transforms_cifar100", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils._data_transforms_svhn", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils._data_transforms_ImageNet_16_120"], ["", "def", "get_train_val_loaders", "(", "config", ",", "mode", ")", ":", "\n", "    ", "\"\"\"\n    Constructs the dataloaders and transforms for training, validation and test data.\n    \"\"\"", "\n", "data", "=", "config", ".", "data", "\n", "dataset", "=", "config", ".", "dataset", "\n", "seed", "=", "config", ".", "search", ".", "seed", "\n", "config", "=", "config", ".", "search", "if", "mode", "==", "\"train\"", "else", "config", ".", "evaluation", "\n", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "_data_transforms_cifar10", "(", "config", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "\n", "root", "=", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", "\n", ")", "\n", "test_data", "=", "dset", ".", "CIFAR10", "(", "\n", "root", "=", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", "\n", ")", "\n", "", "elif", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "_data_transforms_cifar100", "(", "config", ")", "\n", "train_data", "=", "dset", ".", "CIFAR100", "(", "\n", "root", "=", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", "\n", ")", "\n", "test_data", "=", "dset", ".", "CIFAR100", "(", "\n", "root", "=", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", "\n", ")", "\n", "", "elif", "dataset", "==", "\"svhn\"", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "_data_transforms_svhn", "(", "config", ")", "\n", "train_data", "=", "dset", ".", "SVHN", "(", "\n", "root", "=", "data", ",", "split", "=", "\"train\"", ",", "download", "=", "True", ",", "transform", "=", "train_transform", "\n", ")", "\n", "test_data", "=", "dset", ".", "SVHN", "(", "\n", "root", "=", "data", ",", "split", "=", "\"test\"", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", "\n", ")", "\n", "", "elif", "dataset", "==", "\"ImageNet16-120\"", ":", "\n", "        ", "from", "naslib", ".", "utils", ".", "DownsampledImageNet", "import", "ImageNet16", "\n", "\n", "train_transform", ",", "valid_transform", "=", "_data_transforms_ImageNet_16_120", "(", "config", ")", "\n", "data_folder", "=", "f\"{data}/{dataset}\"", "\n", "train_data", "=", "ImageNet16", "(", "\n", "root", "=", "data_folder", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "use_num_of_class_only", "=", "120", ",", "\n", ")", "\n", "test_data", "=", "ImageNet16", "(", "\n", "root", "=", "data_folder", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "valid_transform", ",", "\n", "use_num_of_class_only", "=", "120", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown dataset: {}\"", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "config", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "\n", "worker_init_fn", "=", "np", ".", "random", ".", "seed", "(", "seed", ")", ",", "\n", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "\n", "worker_init_fn", "=", "np", ".", "random", ".", "seed", "(", "seed", ")", ",", "\n", ")", "\n", "\n", "test_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "\n", "worker_init_fn", "=", "np", ".", "random", ".", "seed", "(", "seed", ")", ",", "\n", ")", "\n", "\n", "return", "train_queue", ",", "valid_queue", ",", "test_queue", ",", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils._data_transforms_cifar10": [[403, 425], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "_data_transforms_cifar10", "(", "args", ")", ":", "\n", "    ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", "\n", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ",", "args", ".", "cutout_prob", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", "\n", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils._data_transforms_svhn": [[427, 449], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "_data_transforms_svhn", "(", "args", ")", ":", "\n", "    ", "SVHN_MEAN", "=", "[", "0.4377", ",", "0.4438", ",", "0.4728", "]", "\n", "SVHN_STD", "=", "[", "0.1980", ",", "0.2010", ",", "0.1970", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "SVHN_MEAN", ",", "SVHN_STD", ")", ",", "\n", "]", "\n", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ",", "args", ".", "cutout_prob", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "SVHN_MEAN", ",", "SVHN_STD", ")", ",", "\n", "]", "\n", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils._data_transforms_cifar100": [[451, 473], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "_data_transforms_cifar100", "(", "args", ")", ":", "\n", "    ", "CIFAR_MEAN", "=", "[", "0.5071", ",", "0.4865", ",", "0.4409", "]", "\n", "CIFAR_STD", "=", "[", "0.2673", ",", "0.2564", ",", "0.2762", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", "\n", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ",", "args", ".", "cutout_prob", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", "\n", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils._data_transforms_ImageNet_16_120": [[475, 497], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "_data_transforms_ImageNet_16_120", "(", "args", ")", ":", "\n", "    ", "IMAGENET16_MEAN", "=", "[", "x", "/", "255", "for", "x", "in", "[", "122.68", ",", "116.66", ",", "104.01", "]", "]", "\n", "IMAGENET16_STD", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.22", ",", "61.26", ",", "65.09", "]", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "16", ",", "padding", "=", "2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "IMAGENET16_MEAN", ",", "IMAGENET16_STD", ")", ",", "\n", "]", "\n", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ",", "args", ".", "cutout_prob", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "IMAGENET16_MEAN", ",", "IMAGENET16_STD", ")", ",", "\n", "]", "\n", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.set_seed": [[523, 535], ["numpy.random.seed", "random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"\n    Set the seeds for all used libraries.\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_last_checkpoint": [[537, 559], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "f.readline"], "function", ["None"], ["", "", "def", "get_last_checkpoint", "(", "config", ",", "search", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Finds the latest checkpoint in the experiment directory.\n\n    Args:\n        config (AttrDict): The config from config file.\n        search (bool): Search or evaluation checkpoint\n\n    Returns:\n        (str): The path to the latest checkpoint file.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "save", ",", "\"search\"", "if", "search", "else", "\"eval\"", ",", "\"last_checkpoint\"", "\n", ")", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "checkpoint_name", "=", "f", ".", "readline", "(", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "save", ",", "\"search\"", "if", "search", "else", "\"eval\"", ",", "checkpoint_name", "\n", ")", "\n", "", "except", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.accuracy": [[561, 577], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the accuracy given the softmax output and the target.\n    \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.count_parameters_in_MB": [[579, 590], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model parameters in mega byte.\n    \"\"\"", "\n", "return", "(", "\n", "np", ".", "sum", "(", "\n", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "\"auxiliary\"", "not", "in", "name", "\n", ")", "\n", "/", "1e6", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.log_args": [[593, 599], ["args.items", "logger.info", "str", "len", "len", "str"], "function", ["None"], ["", "def", "log_args", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Log the args in a nice way.\n    \"\"\"", "\n", "for", "arg", ",", "val", "in", "args", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "arg", "+", "\".\"", "*", "(", "50", "-", "len", "(", "arg", ")", "-", "len", "(", "str", "(", "val", ")", ")", ")", "+", "str", "(", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.create_exp_dir": [[601, 608], ["logger.info", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "", "def", "create_exp_dir", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Create the experiment directories.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "", "logger", ".", "info", "(", "\"Experiment dir : {}\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.cross_validation": [[610, 647], ["numpy.mean", "predictor.fit", "predictor.query", "validation_score.append", "len", "numpy.mean", "numpy.abs", "numpy.mean", "numpy.corrcoef", "abs", "sklearn.metrics.mean_squared_error", "scipy.stats.spearmanr", "scipy.stats.kendalltau", "scipy.stats.kendalltau", "numpy.round", "scipy.stats.kendalltau", "numpy.round"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "cross_validation", "(", "\n", "xtrain", ",", "ytrain", ",", "predictor", ",", "split_indices", ",", "score_metric", "=", "\"kendalltau\"", "\n", ")", ":", "\n", "    ", "validation_score", "=", "[", "]", "\n", "\n", "for", "train_indices", ",", "validation_indices", "in", "split_indices", ":", "\n", "        ", "xtrain_i", "=", "[", "xtrain", "[", "j", "]", "for", "j", "in", "train_indices", "]", "\n", "ytrain_i", "=", "[", "ytrain", "[", "j", "]", "for", "j", "in", "train_indices", "]", "\n", "xval_i", "=", "[", "xtrain", "[", "j", "]", "for", "j", "in", "train_indices", "]", "\n", "yval_i", "=", "[", "ytrain", "[", "j", "]", "for", "j", "in", "train_indices", "]", "\n", "\n", "predictor", ".", "fit", "(", "xtrain_i", ",", "ytrain_i", ")", "\n", "ypred_i", "=", "predictor", ".", "query", "(", "xval_i", ")", "\n", "\n", "# If the predictor is an ensemble, take the mean", "\n", "if", "len", "(", "ypred_i", ".", "shape", ")", ">", "1", ":", "\n", "            ", "ypred_i", "=", "np", ".", "mean", "(", "ypred_i", ",", "axis", "=", "0", ")", "\n", "\n", "# use Pearson correlation to be the metric -> maximise Pearson correlation", "\n", "", "if", "score_metric", "==", "\"pearson\"", ":", "\n", "            ", "score_i", "=", "np", ".", "abs", "(", "np", ".", "corrcoef", "(", "yval_i", ",", "ypred_i", ")", "[", "1", ",", "0", "]", ")", "\n", "", "elif", "score_metric", "==", "\"mae\"", ":", "\n", "            ", "score_i", "=", "np", ".", "mean", "(", "abs", "(", "ypred_i", "-", "yval_i", ")", ")", "\n", "", "elif", "score_metric", "==", "\"rmse\"", ":", "\n", "            ", "score_i", "=", "metrics", ".", "mean_squared_error", "(", "yval_i", ",", "ypred_i", ",", "squared", "=", "False", ")", "\n", "", "elif", "score_metric", "==", "\"spearman\"", ":", "\n", "            ", "score_i", "=", "stats", ".", "spearmanr", "(", "yval_i", ",", "ypred_i", ")", "[", "0", "]", "\n", "", "elif", "score_metric", "==", "\"kendalltau\"", ":", "\n", "            ", "score_i", "=", "stats", ".", "kendalltau", "(", "yval_i", ",", "ypred_i", ")", "[", "0", "]", "\n", "", "elif", "score_metric", "==", "\"kt_2dec\"", ":", "\n", "            ", "score_i", "=", "stats", ".", "kendalltau", "(", "yval_i", ",", "np", ".", "round", "(", "ypred_i", ",", "decimals", "=", "2", ")", ")", "[", "0", "]", "\n", "", "elif", "score_metric", "==", "\"kt_1dec\"", ":", "\n", "            ", "score_i", "=", "stats", ".", "kendalltau", "(", "yval_i", ",", "np", ".", "round", "(", "ypred_i", ",", "decimals", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "", "validation_score", ".", "append", "(", "score_i", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "validation_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.generate_kfold": [[649, 673], ["numpy.array", "fold_indices.append", "range", "range", "kfold_indices.append", "range", "range", "numpy.concatenate"], "function", ["None"], ["", "def", "generate_kfold", "(", "n", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        n: number of training examples\n        k: number of folds\n    Returns:\n        kfold_indices: a list of len k. Each entry takes the form\n        (training indices, validation indices)\n    \"\"\"", "\n", "assert", "k", ">=", "2", "\n", "kfold_indices", "=", "[", "]", "\n", "\n", "indices", "=", "np", ".", "array", "(", "range", "(", "n", ")", ")", "\n", "fold_size", "=", "n", "//", "k", "\n", "\n", "fold_indices", "=", "[", "indices", "[", "i", "*", "fold_size", ":", "(", "i", "+", "1", ")", "*", "fold_size", "]", "for", "i", "in", "range", "(", "k", "-", "1", ")", "]", "\n", "fold_indices", ".", "append", "(", "indices", "[", "(", "k", "-", "1", ")", "*", "fold_size", ":", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "training_indices", "=", "[", "fold_indices", "[", "j", "]", "for", "j", "in", "range", "(", "k", ")", "if", "j", "!=", "i", "]", "\n", "validation_indices", "=", "fold_indices", "[", "i", "]", "\n", "kfold_indices", ".", "append", "(", "(", "np", ".", "concatenate", "(", "training_indices", ")", ",", "validation_indices", ")", ")", "\n", "\n", "", "return", "kfold_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_transbench101_api": [[13, 19], ["TransNASBenchAPI", "os.path.join", "naslib.utils.utils.get_project_root"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["def", "get_transbench101_api", "(", "dataset", "=", "None", ")", ":", "\n", "    ", "from", "naslib", ".", "search_spaces", "import", "TransNASBenchAPI", "\n", "api", "=", "TransNASBenchAPI", "(", "\n", "os", ".", "path", ".", "join", "(", "get_project_root", "(", ")", ",", "\"data\"", ",", "\"transnas-bench_v10141024.pth\"", ")", "\n", ")", "\n", "return", "{", "'api'", ":", "api", ",", "'task'", ":", "dataset", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_nasbench101_api": [[21, 29], ["api.NASBench", "os.path.join", "naslib.utils.utils.get_project_root"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["", "def", "get_nasbench101_api", "(", "dataset", "=", "None", ")", ":", "\n", "# load nasbench101", "\n", "    ", "import", "naslib", ".", "utils", ".", "nb101_api", "as", "api", "\n", "\n", "nb101_data", "=", "api", ".", "NASBench", "(", "\n", "os", ".", "path", ".", "join", "(", "get_project_root", "(", ")", ",", "\"data\"", ",", "\"nasbench_only108.pkl\"", ")", "\n", ")", "\n", "return", "{", "\"api\"", ":", "api", ",", "\"nb101_data\"", ":", "nb101_data", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_nasbench201_api": [[31, 63], ["open", "pickle.load", "os.path.join", "open", "pickle.load", "naslib.utils.utils.get_project_root", "os.path.join", "open", "pickle.load", "naslib.utils.utils.get_project_root", "os.path.join", "naslib.utils.utils.get_project_root"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["", "def", "get_nasbench201_api", "(", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Load the NAS-Bench-201 data\n    \"\"\"", "\n", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "get_project_root", "(", ")", ",", "\"data\"", ",", "\"nb201_cifar10_full_training.pickle\"", "\n", ")", ",", "\n", "\"rb\"", ",", "\n", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "elif", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "get_project_root", "(", ")", ",", "\"data\"", ",", "\"nb201_cifar100_full_training.pickle\"", "\n", ")", ",", "\n", "\"rb\"", ",", "\n", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "elif", "dataset", "==", "\"ImageNet16-120\"", ":", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "get_project_root", "(", ")", ",", "\"data\"", ",", "\"nb201_ImageNet16_full_training.pickle\"", "\n", ")", ",", "\n", "\"rb\"", ",", "\n", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "return", "{", "\"nb201_data\"", ":", "data", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_darts_api": [[65, 97], ["os.path.join", "os.path.isfile", "os.path.expanduser", "os.path.expanduser", "os.path.exists", "os.path.exists", "nasbench301.load_ensemble", "nasbench301.load_ensemble", "naslib.utils.utils.get_project_root", "open", "pickle.load", "list", "pickle.load.keys"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load"], ["", "def", "get_darts_api", "(", "dataset", "=", "None", ",", "\n", "nb301_model_path", "=", "'C:/Users/s166317/OneDrive - TU Eindhoven/Documents/_Master/Jaar 2/Kwartiel 1/Capita Selecta/NASlib/naslib/data/nb301_models/xgb_v1.0'", ",", "#'~/nb_models/xgb_v1.0', ", "\n", "nb301_runtime_path", "=", "'C:/Users/s166317/OneDrive - TU Eindhoven/Documents/_Master/Jaar 2/Kwartiel 1/Capita Selecta/NASlib/naslib/data/nb301_models/lgb_runtime_v1.0'", ")", ":", "#'~/nb_models/lgb_runtime_v1.0'):", "\n", "# Load the nb301 training data (which contains full learning curves)", "\n", "\n", "    ", "data_path", "=", "os", ".", "path", ".", "join", "(", "get_project_root", "(", ")", ",", "\"data/nb301_full_training.pickle\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "data_path", ")", ",", "\"Download nb301_full_training.pickle from\\\n    https://drive.google.com/drive/folders/1rwmkqyij3I24zn5GSO6fGv2mzdEfPIEa?usp=sharing\"", "\n", "with", "open", "(", "data_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "nb301_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "nb301_arches", "=", "list", "(", "nb301_data", ".", "keys", "(", ")", ")", "\n", "\n", "# Load the nb301 performance and runtime models", "\n", "", "nb301_model_path", "=", "os", ".", "path", ".", "expanduser", "(", "nb301_model_path", ")", "\n", "nb301_runtime_path", "=", "os", ".", "path", ".", "expanduser", "(", "nb301_runtime_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "nb301_model_path", ")", ",", "\"Download v1.0 models from\\\n    https://github.com/automl/nasbench301\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "nb301_runtime_path", ")", ",", "\"Download v1.0 models from\\\n    https://github.com/automl/nasbench301\"", "\n", "\n", "import", "nasbench301", "\n", "performance_model", "=", "nasbench301", ".", "load_ensemble", "(", "\n", "nb301_model_path", "\n", ")", "\n", "runtime_model", "=", "nasbench301", ".", "load_ensemble", "(", "\n", "nb301_runtime_path", "\n", ")", "\n", "nb301_model", "=", "[", "performance_model", ",", "runtime_model", "]", "\n", "return", "{", "\n", "\"nb301_data\"", ":", "nb301_data", ",", "\n", "\"nb301_arches\"", ":", "nb301_arches", ",", "\n", "\"nb301_model\"", ":", "nb301_model", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_nlp_api": [[100, 117], ["list", "nasbench301.load_ensemble", "open", "pickle.load", "pickle.load.keys", "os.path.expanduser", "os.path.join", "naslib.utils.utils.get_project_root"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["", "def", "get_nlp_api", "(", "dataset", "=", "None", ",", "\n", "nlp_model_path", "=", "'~/nbnlp_v01'", ")", ":", "\n", "# Load the NAS-Bench-NLP data", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "get_project_root", "(", ")", ",", "\"data\"", ",", "\"nb_nlp.pickle\"", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "nlp_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "nlp_arches", "=", "list", "(", "nlp_data", ".", "keys", "(", ")", ")", "\n", "\n", "# Load the NAS-Bench-NLP11 performance model", "\n", "import", "nasbench301", "\n", "performance_model", "=", "nasbench301", ".", "load_ensemble", "(", "\n", "os", ".", "path", ".", "expanduser", "(", "nlp_model_path", ")", "\n", ")", "\n", "\n", "return", "{", "\n", "\"nlp_data\"", ":", "nlp_data", ",", "\n", "\"nlp_arches\"", ":", "nlp_arches", ",", "\n", "\"nlp_model\"", ":", "performance_model", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_asr_api": [[120, 127], ["naslib.utils.utils_asr.from_folder", "os.path.join", "naslib.utils.utils.get_project_root"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.from_folder", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["", "def", "get_asr_api", "(", "dataset", "=", "None", ")", ":", "\n", "# Load the NAS-Bench-ASR data", "\n", "    ", "d", "=", "from_folder", "(", "os", ".", "path", ".", "join", "(", "get_project_root", "(", ")", ",", "'data'", ")", ",", "\n", "include_static_info", "=", "True", ")", "\n", "\n", "return", "{", "\n", "'asr_data'", ":", "d", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_dataset_api": [[130, 161], ["get_dataset_api.get_nasbench101_api", "get_dataset_api.get_nasbench201_api", "get_dataset_api.get_darts_api", "get_dataset_api.get_nlp_api", "get_dataset_api.get_transbench101_api", "get_dataset_api.get_transbench101_api", "get_dataset_api.get_transbench101_api", "get_dataset_api.get_asr_api", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_nasbench101_api", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_nasbench201_api", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_darts_api", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_nlp_api", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_transbench101_api", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_transbench101_api", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_transbench101_api", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.get_dataset_api.get_asr_api"], ["", "def", "get_dataset_api", "(", "search_space", "=", "None", ",", "dataset", "=", "None", ")", ":", "\n", "\n", "    ", "if", "search_space", "==", "\"nasbench101\"", ":", "\n", "        ", "return", "get_nasbench101_api", "(", "dataset", "=", "dataset", ")", "\n", "\n", "", "elif", "search_space", "==", "\"nasbench201\"", ":", "\n", "        ", "return", "get_nasbench201_api", "(", "dataset", "=", "dataset", ")", "\n", "\n", "", "elif", "search_space", "==", "\"darts\"", ":", "\n", "        ", "return", "get_darts_api", "(", "dataset", "=", "dataset", ")", "\n", "\n", "", "elif", "search_space", "==", "\"nlp\"", ":", "\n", "        ", "return", "get_nlp_api", "(", "dataset", "=", "dataset", ")", "\n", "\n", "", "elif", "search_space", "==", "'transbench101'", ":", "\n", "        ", "return", "get_transbench101_api", "(", "dataset", "=", "dataset", ")", "\n", "\n", "", "elif", "search_space", "==", "'transbench101_micro'", ":", "\n", "        ", "return", "get_transbench101_api", "(", "dataset", "=", "dataset", ")", "\n", "\n", "", "elif", "search_space", "==", "'transbench101_macro'", ":", "\n", "        ", "return", "get_transbench101_api", "(", "dataset", "=", "dataset", ")", "\n", "\n", "", "elif", "search_space", "==", "\"asr\"", ":", "\n", "        ", "return", "get_asr_api", "(", "dataset", "=", "dataset", ")", "\n", "\n", "", "elif", "search_space", "==", "\"test\"", ":", "\n", "        ", "return", "None", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_asr.encode_compact": [[13, 16], ["flatten"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten"], ["def", "encode_compact", "(", "compact", ")", ":", "\n", "    ", "from", "naslib", ".", "search_spaces", ".", "nasbenchasr", ".", "conversions", "import", "flatten", "\n", "return", "flatten", "(", "compact", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_asr.encode_asr": [[18, 32], ["arch.get_compact", "encode_adj", "encodings_asr.encode_compact", "print", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_adj", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_asr.encode_compact"], ["", "def", "encode_asr", "(", "arch", ",", "encoding_type", "=", "'path'", ",", "max_nodes", "=", "3", ",", "accs", "=", "None", ")", ":", "\n", "\n", "    ", "compact", "=", "arch", ".", "get_compact", "(", ")", "\n", "\n", "if", "encoding_type", "==", "'adjacency_one_hot'", ":", "\n", "        ", "return", "encode_adj", "(", "compact", "=", "compact", ",", "max_nodes", "=", "max_nodes", ",", "one_hot", "=", "True", ")", "\n", "\n", "", "elif", "encoding_type", "==", "'compact'", ":", "\n", "        ", "return", "encode_compact", "(", "compact", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'{} is not yet implemented as an encoding type \\\n         for asr'", ".", "format", "(", "encoding_type", ")", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_adj_matrix": [[13, 27], ["numpy.zeros", "len", "encodings_nlp.get_adj_matrix.extend"], "function", ["None"], ["def", "get_adj_matrix", "(", "compact", ",", "max_nodes", ")", ":", "\n", "# this method returns the flattened adjacency matrix only", "\n", "    ", "last_idx", "=", "len", "(", "compact", "[", "1", "]", ")", "-", "1", "\n", "assert", "last_idx", "<=", "max_nodes", "\n", "def", "extend", "(", "idx", ")", ":", "\n", "        ", "if", "idx", "==", "last_idx", ":", "\n", "            ", "return", "max_nodes", "\n", "", "return", "idx", "\n", "\n", "", "adj_matrix", "=", "np", ".", "zeros", "(", "(", "max_nodes", "+", "1", ",", "max_nodes", "+", "1", ")", ")", "\n", "for", "edge", "in", "compact", "[", "0", "]", ":", "\n", "        ", "adj_matrix", "[", "extend", "(", "edge", "[", "0", "]", ")", ",", "extend", "(", "edge", "[", "1", "]", ")", "]", "=", "1", "\n", "\n", "", "return", "adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_categorical_ops": [[28, 37], ["len"], "function", ["None"], ["", "def", "get_categorical_ops", "(", "compact", ",", "max_nodes", ")", ":", "\n", "    ", "\"\"\"\n    This returns the set of ops, extended to account for the\n    max number of nodes in the search space, so that it's the\n    same size for all ops.\n    \"\"\"", "\n", "last_idx", "=", "len", "(", "compact", "[", "1", "]", ")", "-", "1", "\n", "assert", "last_idx", "<=", "max_nodes", "\n", "return", "[", "*", "compact", "[", "1", "]", "[", ":", "-", "1", "]", ",", "*", "[", "0", "]", "*", "(", "max_nodes", "-", "last_idx", ")", ",", "compact", "[", "1", "]", "[", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_categorical_hidden_states": [[38, 41], ["len", "len"], "function", ["None"], ["", "def", "get_categorical_hidden_states", "(", "compact", ",", "max_hidden_states", "=", "3", ")", ":", "\n", "    ", "assert", "len", "(", "compact", "[", "2", "]", ")", "<=", "max_hidden_states", "\n", "return", "[", "*", "compact", "[", "2", "]", ",", "*", "[", "0", "]", "*", "(", "max_hidden_states", "-", "len", "(", "compact", "[", "2", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.encode_adj": [[42, 75], ["encodings_nlp.get_adj_matrix", "encodings_nlp.get_categorical_ops", "encodings_nlp.get_categorical_hidden_states", "enumerate", "int", "len", "len", "len", "len", "ops_onehot.extend", "get_adj_matrix.flatten", "ops_onehot.append", "range", "ops_onehot.append", "ops_onehot.append"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_adj_matrix", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_categorical_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_categorical_hidden_states", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten"], ["", "def", "encode_adj", "(", "compact", ",", "max_nodes", ",", "one_hot", "=", "False", ",", "accs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    this method returns the adjacency one hot encoding,\n    which is a flattened adjacency matrix + one hot op encoding\n    + flag for is_hidden_state on each node.\n    \"\"\"", "\n", "adj_matrix", "=", "get_adj_matrix", "(", "compact", ",", "max_nodes", "=", "max_nodes", ")", "\n", "flattened", "=", "[", "int", "(", "i", ")", "for", "i", "in", "adj_matrix", ".", "flatten", "(", ")", "]", "\n", "assert", "len", "(", "flattened", ")", "==", "(", "max_nodes", "+", "1", ")", "**", "2", "\n", "\n", "# add ops and hidden states", "\n", "ops", "=", "get_categorical_ops", "(", "compact", ",", "max_nodes", "=", "max_nodes", ")", "\n", "assert", "len", "(", "ops", ")", "==", "max_nodes", "+", "1", "\n", "hidden_states", "=", "get_categorical_hidden_states", "(", "compact", ")", "\n", "assert", "len", "(", "hidden_states", ")", "==", "3", "\n", "if", "not", "one_hot", ":", "\n", "        ", "if", "accs", "is", "not", "None", ":", "\n", "            ", "return", "[", "*", "flattened", ",", "*", "ops", ",", "*", "hidden_states", ",", "*", "accs", "]", "\n", "", "return", "[", "*", "flattened", ",", "*", "ops", ",", "*", "hidden_states", "]", "\n", "\n", "", "ops_onehot", "=", "[", "]", "\n", "last_idx", "=", "len", "(", "compact", "[", "1", "]", ")", "-", "1", "\n", "for", "i", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "onehot", "=", "[", "1", "if", "op", "==", "i", "else", "0", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "ops_onehot", ".", "extend", "(", "onehot", ")", "\n", "if", "i", "in", "compact", "[", "2", "]", ":", "\n", "            ", "ops_onehot", ".", "append", "(", "1", ")", "\n", "", "elif", "i", "==", "max_nodes", "and", "last_idx", "in", "compact", "[", "2", "]", ":", "\n", "            ", "ops_onehot", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "ops_onehot", ".", "append", "(", "0", ")", "\n", "\n", "", "", "return", "[", "*", "flattened", ",", "*", "ops_onehot", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.encode_seminas": [[76, 94], ["encodings_nlp.get_adj_matrix", "encodings_nlp.get_categorical_ops", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_adj_matrix", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_categorical_ops"], ["", "def", "encode_seminas", "(", "compact", ",", "max_nodes", "=", "25", ")", ":", "\n", "    ", "\"\"\"\n    note: this is temporary. This will be removed during the code cleanup\n    note: there's no way to add the hidden node flag    \n    \"\"\"", "\n", "matrix", "=", "get_adj_matrix", "(", "compact", ",", "max_nodes", "=", "max_nodes", ")", "\n", "ops", "=", "get_categorical_ops", "(", "compact", ",", "max_nodes", "=", "max_nodes", ")", "\n", "# offset ops list by one", "\n", "ops", "=", "[", "op", "+", "1", "for", "op", "in", "ops", "]", "\n", "\n", "dic", "=", "{", "\n", "'num_vertices'", ":", "max_nodes", ",", "\n", "'adjacency'", ":", "matrix", ",", "\n", "'operations'", ":", "ops", ",", "\n", "'mask'", ":", "np", ".", "array", "(", "[", "i", "<", "max_nodes", "for", "i", "in", "range", "(", "max_nodes", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'val_acc'", ":", "0.0", "\n", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.encode_gcn": [[95, 113], ["encodings_nlp.get_adj_matrix", "numpy.array", "encodings_nlp.get_categorical_ops", "numpy.array", "numpy.array", "range", "op_map.index", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_adj_matrix", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.get_categorical_ops"], ["", "def", "encode_gcn", "(", "compact", ",", "max_nodes", "=", "25", ")", ":", "\n", "    ", "'''\n    note: this is temporary. This will be removed during the code cleanup\n    '''", "\n", "matrix", "=", "get_adj_matrix", "(", "compact", ",", "max_nodes", "=", "max_nodes", ")", "\n", "matrix", "=", "np", ".", "array", "(", "matrix", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ops", "=", "get_categorical_ops", "(", "compact", ",", "max_nodes", "=", "max_nodes", ")", "\n", "op_map", "=", "[", "i", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "ops_onehot", "=", "np", ".", "array", "(", "[", "[", "i", "==", "op_map", ".", "index", "(", "op", ")", "for", "i", "in", "range", "(", "len", "(", "op_map", ")", ")", "]", "for", "op", "in", "ops", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "dic", "=", "{", "\n", "'num_vertices'", ":", "max_nodes", ",", "\n", "'adjacency'", ":", "matrix", ",", "\n", "'operations'", ":", "ops_onehot", ",", "\n", "'mask'", ":", "np", ".", "array", "(", "[", "i", "<", "max_nodes", "for", "i", "in", "range", "(", "max_nodes", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'val_acc'", ":", "0.0", "\n", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.encode_nlp": [[114, 137], ["arch.get_compact", "encodings_nlp.encode_adj", "encodings_nlp.encode_adj", "encodings_nlp.encode_seminas", "encodings_nlp.encode_gcn", "print", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_adj", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_adj", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_seminas", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_gcn"], ["", "def", "encode_nlp", "(", "arch", ",", "encoding_type", "=", "'path'", ",", "max_nodes", "=", "25", ",", "accs", "=", "None", ")", ":", "\n", "\n", "    ", "compact", "=", "arch", ".", "get_compact", "(", ")", "\n", "\n", "if", "encoding_type", "==", "'adjacency_one_hot'", ":", "\n", "        ", "return", "encode_adj", "(", "compact", "=", "compact", ",", "max_nodes", "=", "max_nodes", ",", "one_hot", "=", "True", ")", "\n", "\n", "", "elif", "encoding_type", "==", "'adjacency_mix'", ":", "\n", "        ", "return", "encode_adj", "(", "compact", "=", "compact", ",", "max_nodes", "=", "max_nodes", ",", "one_hot", "=", "False", ",", "accs", "=", "accs", ")", "\n", "\n", "", "elif", "encoding_type", "==", "'seminas'", ":", "\n", "        ", "return", "encode_seminas", "(", "compact", "=", "compact", ",", "max_nodes", "=", "max_nodes", ")", "\n", "\n", "", "elif", "encoding_type", "==", "'gcn'", ":", "\n", "        ", "return", "encode_gcn", "(", "compact", "=", "compact", ",", "max_nodes", "=", "max_nodes", ")", "\n", "\n", "", "elif", "encoding_type", "==", "'compact'", ":", "\n", "        ", "return", "compact", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'{} is not yet implemented as an encoding type \\\n         for nlp'", ".", "format", "(", "encoding_type", ")", ")", "\n", "raise", "NotImplementedError", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_adjacency_one_hot": [[39, 46], ["arch.get_op_indices"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["def", "encode_adjacency_one_hot", "(", "arch", ")", ":", "\n", "\n", "    ", "encoding", "=", "arch", ".", "get_op_indices", "(", ")", "\n", "one_hot", "=", "[", "]", "\n", "for", "e", "in", "encoding", ":", "\n", "        ", "one_hot", "=", "[", "*", "one_hot", ",", "*", "one_hot_nasbench201", "[", "e", "]", "]", "\n", "", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_adjacency_one_hot_tb101": [[57, 64], ["arch.get_op_indices"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "encode_adjacency_one_hot_tb101", "(", "arch", ")", ":", "\n", "\n", "    ", "encoding", "=", "arch", ".", "get_op_indices", "(", ")", "\n", "one_hot", "=", "[", "]", "\n", "for", "e", "in", "encoding", ":", "\n", "        ", "one_hot", "=", "[", "*", "one_hot", ",", "*", "one_hot_nasbench201", "[", "e", "]", "]", "\n", "", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.get_paths": [[66, 76], ["arch.get_op_indices", "paths.append"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "get_paths", "(", "arch", ")", ":", "\n", "    ", "\"\"\"\n    return all paths from input to output\n    \"\"\"", "\n", "ops", "=", "arch", ".", "get_op_indices", "(", ")", "\n", "path_blueprints", "=", "[", "[", "3", "]", ",", "[", "0", ",", "4", "]", ",", "[", "1", ",", "5", "]", ",", "[", "0", ",", "2", ",", "5", "]", "]", "\n", "paths", "=", "[", "]", "\n", "for", "blueprint", "in", "path_blueprints", ":", "\n", "        ", "paths", ".", "append", "(", "[", "ops", "[", "node", "]", "for", "node", "in", "blueprint", "]", ")", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.get_path_indices": [[78, 97], ["encodings.get_paths", "enumerate", "tuple", "enumerate", "path_indices.append"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.get_paths"], ["", "def", "get_path_indices", "(", "arch", ",", "num_ops", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    compute the index of each path\n    \"\"\"", "\n", "paths", "=", "get_paths", "(", "arch", ")", "\n", "path_indices", "=", "[", "]", "\n", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "paths", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "index", "=", "0", "\n", "", "elif", "i", "in", "[", "1", ",", "2", "]", ":", "\n", "            ", "index", "=", "num_ops", "\n", "", "else", ":", "\n", "            ", "index", "=", "num_ops", "+", "num_ops", "**", "2", "\n", "", "for", "j", ",", "op", "in", "enumerate", "(", "path", ")", ":", "\n", "            ", "index", "+=", "op", "*", "num_ops", "**", "j", "\n", "", "path_indices", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_paths": [[99, 107], ["sum", "encodings.get_path_indices", "numpy.zeros", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.get_path_indices"], ["", "def", "encode_paths", "(", "arch", ",", "num_ops", "=", "5", ",", "longest_path_length", "=", "3", ")", ":", "\n", "    ", "\"\"\"output one-hot encoding of paths\"\"\"", "\n", "num_paths", "=", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "1", ",", "longest_path_length", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "get_path_indices", "(", "arch", ",", "num_ops", "=", "num_ops", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "num_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "        ", "encoding", "[", "index", "]", "=", "1", "\n", "", "return", "encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_gcn_nasbench201": [[109, 142], ["arch.get_op_indices", "numpy.array", "numpy.array", "numpy.array", "range", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "encode_gcn_nasbench201", "(", "arch", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    a list of categorical ops starting from 0\n    \"\"\"", "\n", "ops", "=", "arch", ".", "get_op_indices", "(", ")", "\n", "# offset ops list by one, add input and output to ops list", "\n", "ops", "=", "[", "op", "+", "1", "for", "op", "in", "ops", "]", "\n", "ops", "=", "[", "0", ",", "*", "ops", ",", "6", "]", "\n", "ops_onehot", "=", "np", ".", "array", "(", "[", "[", "i", "==", "op", "for", "i", "in", "range", "(", "7", ")", "]", "for", "op", "in", "ops", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "matrix", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "# matrix = np.transpose(matrix)", "\n", "dic", "=", "{", "\n", "\"num_vertices\"", ":", "8", ",", "\n", "\"adjacency\"", ":", "matrix", ",", "\n", "\"operations\"", ":", "ops_onehot", ",", "\n", "\"mask\"", ":", "np", ".", "array", "(", "[", "i", "<", "8", "for", "i", "in", "range", "(", "8", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"val_acc\"", ":", "0.0", ",", "\n", "}", "\n", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_gcn_transbench101": [[179, 213], ["arch.get_op_indices", "numpy.array", "numpy.array", "numpy.array", "range", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "encode_gcn_transbench101", "(", "arch", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    a list of categorical ops starting from 0\n    \"\"\"", "\n", "ops", "=", "arch", ".", "get_op_indices", "(", ")", "\n", "# offset ops list by one, add input and output to ops list", "\n", "ops", "=", "[", "op", "+", "1", "for", "op", "in", "ops", "]", "\n", "ops", "=", "[", "0", ",", "*", "ops", ",", "5", "]", "\n", "# print(ops)", "\n", "ops_onehot", "=", "np", ".", "array", "(", "[", "[", "i", "==", "op", "for", "i", "in", "range", "(", "7", ")", "]", "for", "op", "in", "ops", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "matrix", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "# matrix = np.transpose(matrix)", "\n", "dic", "=", "{", "\n", "\"num_vertices\"", ":", "8", ",", "\n", "\"adjacency\"", ":", "matrix", ",", "\n", "\"operations\"", ":", "ops_onehot", ",", "\n", "\"mask\"", ":", "np", ".", "array", "(", "[", "i", "<", "8", "for", "i", "in", "range", "(", "8", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"val_acc\"", ":", "0.0", ",", "\n", "}", "\n", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_bonas_nasbench201": [[215, 247], ["arch.get_op_indices", "numpy.array", "numpy.array", "encodings.add_global_node", "encodings.add_global_node", "numpy.array", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node"], ["", "def", "encode_bonas_nasbench201", "(", "arch", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    a list of categorical ops starting from 0\n    \"\"\"", "\n", "ops", "=", "arch", ".", "get_op_indices", "(", ")", "\n", "# offset ops list by one, add input and output to ops list", "\n", "ops", "=", "[", "op", "+", "1", "for", "op", "in", "ops", "]", "\n", "ops", "=", "[", "0", ",", "*", "ops", ",", "6", "]", "\n", "ops_onehot", "=", "np", ".", "array", "(", "[", "[", "i", "==", "op", "for", "i", "in", "range", "(", "7", ")", "]", "for", "op", "in", "ops", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "matrix", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "matrix", "=", "add_global_node", "(", "matrix", ",", "True", ")", "\n", "ops_onehot", "=", "add_global_node", "(", "ops_onehot", ",", "False", ")", "\n", "\n", "matrix", "=", "np", ".", "array", "(", "matrix", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ops_onehot", "=", "np", ".", "array", "(", "ops_onehot", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "dic", "=", "{", "\"adjacency\"", ":", "matrix", ",", "\"operations\"", ":", "ops_onehot", ",", "\"val_acc\"", ":", "0.0", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.add_global_node": [[249, 261], ["numpy.column_stack", "numpy.row_stack", "numpy.fill_diagonal", "numpy.column_stack", "numpy.row_stack", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "add_global_node", "(", "mx", ",", "ifAdj", ")", ":", "\n", "    ", "\"\"\"add a global node to operation or adjacency matrixs, fill diagonal for adj and transpose adjs\"\"\"", "\n", "if", "ifAdj", ":", "\n", "        ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "ones", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "mx", ",", "1", ")", "\n", "mx", "=", "mx", ".", "T", "\n", "", "else", ":", "\n", "        ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "[", "mx", ".", "shape", "[", "0", "]", "-", "1", "]", "[", "mx", ".", "shape", "[", "1", "]", "-", "1", "]", "=", "1", "\n", "", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_seminas_nasbench201": [[263, 295], ["arch.get_op_indices", "numpy.array", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "encode_seminas_nasbench201", "(", "arch", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    a list of categorical ops starting from 0\n    \"\"\"", "\n", "ops", "=", "arch", ".", "get_op_indices", "(", ")", "\n", "# offset ops list by one, add input and output to ops list", "\n", "ops", "=", "[", "op", "+", "1", "for", "op", "in", "ops", "]", "\n", "ops", "=", "[", "0", ",", "*", "ops", ",", "6", "]", "\n", "matrix", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "# matrix = np.transpose(matrix)", "\n", "dic", "=", "{", "\n", "\"num_vertices\"", ":", "8", ",", "\n", "\"adjacency\"", ":", "matrix", ",", "\n", "\"operations\"", ":", "ops", ",", "\n", "\"mask\"", ":", "np", ".", "array", "(", "[", "i", "<", "8", "for", "i", "in", "range", "(", "8", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"val_acc\"", ":", "0.0", ",", "\n", "}", "\n", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_seminas_transbench101": [[297, 329], ["arch.get_op_indices", "numpy.array", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "encode_seminas_transbench101", "(", "arch", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    a list of categorical ops starting from 0\n    \"\"\"", "\n", "ops", "=", "arch", ".", "get_op_indices", "(", ")", "\n", "# offset ops list by one, add input and output to ops list", "\n", "ops", "=", "[", "op", "+", "1", "for", "op", "in", "ops", "]", "\n", "ops", "=", "[", "0", ",", "*", "ops", ",", "5", "]", "\n", "matrix", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "# matrix = np.transpose(matrix)", "\n", "dic", "=", "{", "\n", "\"num_vertices\"", ":", "8", ",", "\n", "\"adjacency\"", ":", "matrix", ",", "\n", "\"operations\"", ":", "ops", ",", "\n", "\"mask\"", ":", "np", ".", "array", "(", "[", "i", "<", "8", "for", "i", "in", "range", "(", "8", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"val_acc\"", ":", "0.0", ",", "\n", "}", "\n", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_201": [[331, 353], ["encodings.encode_adjacency_one_hot", "encodings.encode_paths", "encodings.encode_gcn_nasbench201", "encodings.encode_bonas_nasbench201", "encodings.encode_seminas_nasbench201", "logger.info", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_adjacency_one_hot", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_paths", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_gcn_nasbench201", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_bonas_nasbench201", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_seminas_nasbench201"], ["", "def", "encode_201", "(", "arch", ",", "encoding_type", "=", "\"adjacency_one_hot\"", ")", ":", "\n", "\n", "    ", "if", "encoding_type", "==", "\"adjacency_one_hot\"", ":", "\n", "        ", "return", "encode_adjacency_one_hot", "(", "arch", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"path\"", ":", "\n", "        ", "return", "encode_paths", "(", "arch", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"gcn\"", ":", "\n", "        ", "return", "encode_gcn_nasbench201", "(", "arch", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"bonas\"", ":", "\n", "        ", "return", "encode_bonas_nasbench201", "(", "arch", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"seminas\"", ":", "\n", "        ", "return", "encode_seminas_nasbench201", "(", "arch", ")", "\n", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"{} is not yet supported as a predictor encoding\"", ".", "format", "(", "encoding_type", ")", "\n", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_tb101": [[355, 377], ["encodings.encode_adjacency_one_hot_tb101", "encodings.encode_gcn_transbench101", "encodings.encode_seminas_transbench101", "logger.info", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_adjacency_one_hot_tb101", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_gcn_transbench101", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_seminas_transbench101"], ["", "", "def", "encode_tb101", "(", "arch", ",", "encoding_type", "=", "'adjacency_one_hot'", ")", ":", "\n", "\n", "    ", "if", "encoding_type", "==", "\"adjacency_one_hot\"", ":", "\n", "        ", "return", "encode_adjacency_one_hot_tb101", "(", "arch", ")", "\n", "\n", "#     elif encoding_type == \"path\":", "\n", "#         return encode_paths(arch)", "\n", "\n", "", "elif", "encoding_type", "==", "\"gcn\"", ":", "\n", "        ", "return", "encode_gcn_transbench101", "(", "arch", ")", "\n", "\n", "#     elif encoding_type == \"bonas\":", "\n", "#         return encode_bonas_nasbench201(arch)", "\n", "\n", "", "elif", "encoding_type", "==", "\"seminas\"", ":", "\n", "        ", "return", "encode_seminas_transbench101", "(", "arch", ")", "\n", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"{} is not yet supported as a predictor encoding\"", ".", "format", "(", "encoding_type", ")", "\n", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode": [[379, 403], ["naslib.predictors.utils.encodings_nb101.encode_101", "encodings.encode_201", "naslib.predictors.utils.encodings_darts.encode_darts", "naslib.predictors.utils.encodings_nlp.encode_nlp", "encodings.encode_tb101", "naslib.predictors.utils.encodings_asr.encode_asr", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_101", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_201", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.encode_darts", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.encode_nlp", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode_tb101", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_asr.encode_asr"], ["", "", "def", "encode", "(", "arch", ",", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "ss_type", "=", "None", ")", ":", "\n", "# this method calls either encode_201 or encode_darts based on the search space", "\n", "\n", "    ", "if", "ss_type", "==", "\"nasbench101\"", ":", "\n", "        ", "return", "encode_101", "(", "arch", ",", "encoding_type", "=", "encoding_type", ")", "\n", "", "elif", "ss_type", "==", "\"nasbench201\"", ":", "\n", "        ", "return", "encode_201", "(", "arch", ",", "encoding_type", "=", "encoding_type", ")", "\n", "", "elif", "ss_type", "==", "\"darts\"", ":", "\n", "        ", "return", "encode_darts", "(", "arch", ",", "encoding_type", "=", "encoding_type", ")", "\n", "", "elif", "ss_type", "==", "\"nlp\"", ":", "\n", "        ", "return", "encode_nlp", "(", "arch", ",", "\n", "encoding_type", "=", "'adjacency_mix'", ",", "\n", "max_nodes", "=", "12", ",", "\n", "accs", "=", "None", ")", "\n", "", "elif", "ss_type", "==", "'transbench101'", ":", "\n", "        ", "return", "encode_tb101", "(", "arch", ",", "encoding_type", "=", "encoding_type", ")", "\n", "", "elif", "ss_type", "==", "\"asr\"", ":", "\n", "        ", "return", "encode_asr", "(", "arch", ",", "\n", "encoding_type", "=", "'compact'", ",", "\n", "max_nodes", "=", "3", ",", "\n", "accs", "=", "None", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"{} is not yet supported for encodings\"", ".", "format", "(", "ss_type", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.get_paths": [[26, 49], ["enumerate", "range", "len", "[].append", "paths[].append", "[].append", "paths[].append", "[].append", "paths[].append"], "function", ["None"], ["def", "get_paths", "(", "arch", ")", ":", "\n", "    ", "\"\"\"return all paths from input to output\"\"\"", "\n", "\n", "path_builder", "=", "[", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "]", "\n", "paths", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "arch", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "OPS", ")", ")", ":", "\n", "            ", "if", "cell", "[", "j", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "path", "=", "[", "INPUT_1", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "", "elif", "cell", "[", "j", "]", "[", "0", "]", "==", "1", ":", "\n", "                ", "path", "=", "[", "INPUT_2", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "", "else", ":", "\n", "                ", "for", "path", "in", "path_builder", "[", "i", "]", "[", "cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", ":", "\n", "                    ", "path", "=", "[", "*", "path", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.get_path_indices": [[51, 89], ["encodings_darts.get_paths", "len", "sum", "enumerate", "tuple", "range", "range", "path_indices.append", "len", "path_indices.append", "OPS.index"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.get_paths"], ["", "def", "get_path_indices", "(", "arch", ",", "long_paths", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    compute the index of each path\n    There are 4 * (8^0 + ... + 8^4) paths total\n    If long_paths = False, we give a single boolean to all paths of\n    size 4, so there are only 4 * (1 + 8^0 + ... + 8^3) paths\n    \"\"\"", "\n", "paths", "=", "get_paths", "(", "arch", ")", "\n", "normal_paths", ",", "reduce_paths", "=", "paths", "\n", "num_ops", "=", "len", "(", "OPS", ")", "\n", "\"\"\"\n    Compute the max number of paths per input per cell.\n    Since there are two cells and two inputs per cell, \n    total paths = 4 * max_paths\n    \"\"\"", "\n", "\n", "max_paths", "=", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "[", "]", "\n", "\n", "# set the base index based on the cell and the input", "\n", "for", "i", ",", "paths", "in", "enumerate", "(", "(", "normal_paths", ",", "reduce_paths", ")", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "i", "*", "2", "*", "max_paths", "\n", "if", "path", "[", "0", "]", "==", "INPUT_2", ":", "\n", "                ", "index", "+=", "max_paths", "\n", "\n", "# recursively compute the index of the path", "\n", "", "for", "j", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", ":", "\n", "                ", "if", "j", "==", "len", "(", "path", ")", "-", "1", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "elif", "j", "==", "(", "NUM_VERTICES", "-", "1", ")", "and", "not", "long_paths", ":", "\n", "                    ", "path_indices", ".", "append", "(", "2", "*", "(", "i", "+", "1", ")", "*", "max_paths", "-", "1", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "num_ops", "**", "j", "*", "(", "OPS", ".", "index", "(", "path", "[", "j", "+", "1", "]", ")", "+", "1", ")", "\n", "\n", "", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.encode_paths": [[91, 104], ["encodings_darts.get_path_indices", "len", "sum", "numpy.zeros", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.get_path_indices"], ["", "def", "encode_paths", "(", "arch", ",", "cutoff", "=", "None", ")", ":", "\n", "# output one-hot encoding of paths", "\n", "    ", "path_indices", "=", "get_path_indices", "(", "arch", ")", "\n", "num_ops", "=", "len", "(", "OPS", ")", "\n", "\n", "max_paths", "=", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", "]", ")", "\n", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "4", "*", "max_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "        ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "if", "cutoff", ":", "\n", "        ", "path_encoding", "=", "path_encoding", "[", ":", "cutoff", "]", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.encode_adj": [[106, 124], ["numpy.array", "numpy.zeros", "enumerate", "range", "matrices.append", "ops.append", "op_list.append", "matrices[].flatten", "matrices[].flatten"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten"], ["", "def", "encode_adj", "(", "arch", ")", ":", "\n", "    ", "matrices", "=", "[", "]", "\n", "ops", "=", "[", "]", "\n", "true_num_vertices", "=", "NUM_VERTICES", "+", "3", "\n", "for", "cell", "in", "arch", ":", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "(", "true_num_vertices", ",", "true_num_vertices", ")", ")", "\n", "op_list", "=", "[", "]", "\n", "for", "i", ",", "edge", "in", "enumerate", "(", "cell", ")", ":", "\n", "            ", "dest", "=", "i", "//", "2", "+", "2", "\n", "matrix", "[", "edge", "[", "0", "]", "]", "[", "dest", "]", "=", "1", "\n", "op_list", ".", "append", "(", "edge", "[", "1", "]", ")", "\n", "", "for", "i", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "            ", "matrix", "[", "i", "]", "[", "-", "1", "]", "=", "1", "\n", "", "matrices", ".", "append", "(", "matrix", ")", "\n", "ops", ".", "append", "(", "op_list", ")", "\n", "\n", "", "encoding", "=", "[", "*", "matrices", "[", "0", "]", ".", "flatten", "(", ")", ",", "*", "ops", "[", "0", "]", ",", "*", "matrices", "[", "1", "]", ".", "flatten", "(", ")", ",", "*", "ops", "[", "1", "]", "]", "\n", "return", "np", ".", "array", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.encode_bonas": [[126, 162], ["encodings_darts.add_global_node", "encodings_darts.add_global_node", "numpy.transpose", "numpy.transpose", "encodings_darts.add_global_node", "encodings_darts.add_global_node", "len", "numpy.zeros", "range", "numpy.concatenate", "encodings_darts.add_global_node", "encodings_darts.add_global_node", "numpy.array", "numpy.array", "encodings_darts.transform_matrix", "matrices.append", "ops.append", "len", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.transform_matrix"], ["", "def", "encode_bonas", "(", "arch", ")", ":", "\n", "    ", "matrices", "=", "[", "]", "\n", "ops", "=", "[", "]", "\n", "\n", "for", "cell", "in", "arch", ":", "\n", "        ", "mat", ",", "op", "=", "transform_matrix", "(", "cell", ")", "\n", "matrices", ".", "append", "(", "mat", ")", "\n", "ops", ".", "append", "(", "op", ")", "\n", "\n", "", "matrices", "[", "0", "]", "=", "add_global_node", "(", "matrices", "[", "0", "]", ",", "True", ")", "\n", "matrices", "[", "1", "]", "=", "add_global_node", "(", "matrices", "[", "1", "]", ",", "True", ")", "\n", "matrices", "[", "0", "]", "=", "np", ".", "transpose", "(", "matrices", "[", "0", "]", ")", "\n", "matrices", "[", "1", "]", "=", "np", ".", "transpose", "(", "matrices", "[", "1", "]", ")", "\n", "\n", "ops", "[", "0", "]", "=", "add_global_node", "(", "ops", "[", "0", "]", ",", "False", ")", "\n", "ops", "[", "1", "]", "=", "add_global_node", "(", "ops", "[", "1", "]", ",", "False", ")", "\n", "\n", "mat_length", "=", "len", "(", "matrices", "[", "0", "]", "[", "0", "]", ")", "\n", "merged_length", "=", "len", "(", "matrices", "[", "0", "]", "[", "0", "]", ")", "*", "2", "\n", "matrix_final", "=", "np", ".", "zeros", "(", "(", "merged_length", ",", "merged_length", ")", ")", "\n", "\n", "for", "col", "in", "range", "(", "mat_length", ")", ":", "\n", "        ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "            ", "matrix_final", "[", "row", ",", "col", "]", "=", "matrices", "[", "0", "]", "[", "row", ",", "col", "]", "\n", "matrix_final", "[", "row", "+", "mat_length", ",", "col", "+", "mat_length", "]", "=", "matrices", "[", "1", "]", "[", "row", ",", "col", "]", "\n", "\n", "", "", "ops_onehot", "=", "np", ".", "concatenate", "(", "(", "ops", "[", "0", "]", ",", "ops", "[", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "matrix_final", "=", "add_global_node", "(", "matrix_final", ",", "True", ")", "\n", "ops_onehot", "=", "add_global_node", "(", "ops_onehot", ",", "False", ")", "\n", "\n", "matrix_final", "=", "np", ".", "array", "(", "matrix_final", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ops_onehot", "=", "np", ".", "array", "(", "ops_onehot", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "dic", "=", "{", "\"adjacency\"", ":", "matrix_final", ",", "\"operations\"", ":", "ops_onehot", ",", "\"val_acc\"", ":", "0.0", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.add_global_node": [[164, 176], ["numpy.column_stack", "numpy.row_stack", "numpy.fill_diagonal", "numpy.column_stack", "numpy.row_stack", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "add_global_node", "(", "mx", ",", "ifAdj", ")", ":", "\n", "    ", "\"\"\"add a global node to operation or adjacency matrixs, fill diagonal for adj and transpose adjs\"\"\"", "\n", "if", "ifAdj", ":", "\n", "        ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "ones", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "mx", ",", "1", ")", "\n", "mx", "=", "mx", ".", "T", "\n", "", "else", ":", "\n", "        ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "[", "mx", ".", "shape", "[", "0", "]", "-", "1", "]", "[", "mx", ".", "shape", "[", "1", "]", "-", "1", "]", "=", "1", "\n", "", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.transform_matrix": [[178, 199], ["numpy.zeros", "numpy.zeros", "range", "len", "len", "len"], "function", ["None"], ["", "def", "transform_matrix", "(", "cell", ")", ":", "\n", "    ", "normal", "=", "cell", "\n", "\n", "node_num", "=", "len", "(", "normal", ")", "+", "3", "\n", "\n", "adj", "=", "np", ".", "zeros", "(", "(", "node_num", ",", "node_num", ")", ")", "\n", "\n", "ops", "=", "np", ".", "zeros", "(", "(", "node_num", ",", "len", "(", "OPS", ")", "+", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "normal", ")", ")", ":", "\n", "        ", "connect", ",", "op", "=", "normal", "[", "i", "]", "\n", "if", "connect", "==", "0", "or", "connect", "==", "1", ":", "\n", "            ", "adj", "[", "connect", "]", "[", "i", "+", "2", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "adj", "[", "(", "connect", "-", "2", ")", "*", "2", "+", "2", "]", "[", "i", "+", "2", "]", "=", "1", "\n", "adj", "[", "(", "connect", "-", "2", ")", "*", "2", "+", "3", "]", "[", "i", "+", "2", "]", "=", "1", "\n", "", "ops", "[", "i", "+", "2", "]", "[", "op", "]", "=", "1", "\n", "", "adj", "[", "2", ":", "-", "1", ",", "-", "1", "]", "=", "1", "\n", "ops", "[", "0", ":", "2", ",", "0", "]", "=", "1", "\n", "ops", "[", "-", "1", "]", "[", "-", "1", "]", "=", "1", "\n", "return", "adj", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.encode_seminas": [[201, 237], ["encodings_darts.add_global_node", "encodings_darts.add_global_node", "numpy.transpose", "numpy.transpose", "encodings_darts.add_global_node", "encodings_darts.add_global_node", "len", "numpy.zeros", "range", "numpy.concatenate", "encodings_darts.add_global_node", "encodings_darts.add_global_node", "numpy.array", "numpy.array", "encodings_darts.transform_matrix", "matrices.append", "ops.append", "len", "range", "numpy.where"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.transform_matrix"], ["", "def", "encode_seminas", "(", "arch", ")", ":", "\n", "    ", "matrices", "=", "[", "]", "\n", "ops", "=", "[", "]", "\n", "for", "cell", "in", "arch", ":", "\n", "        ", "mat", ",", "op", "=", "transform_matrix", "(", "cell", ")", "\n", "matrices", ".", "append", "(", "mat", ")", "\n", "ops", ".", "append", "(", "op", ")", "\n", "\n", "", "matrices", "[", "0", "]", "=", "add_global_node", "(", "matrices", "[", "0", "]", ",", "True", ")", "\n", "matrices", "[", "1", "]", "=", "add_global_node", "(", "matrices", "[", "1", "]", ",", "True", ")", "\n", "matrices", "[", "0", "]", "=", "np", ".", "transpose", "(", "matrices", "[", "0", "]", ")", "\n", "matrices", "[", "1", "]", "=", "np", ".", "transpose", "(", "matrices", "[", "1", "]", ")", "\n", "\n", "ops", "[", "0", "]", "=", "add_global_node", "(", "ops", "[", "0", "]", ",", "False", ")", "\n", "ops", "[", "1", "]", "=", "add_global_node", "(", "ops", "[", "1", "]", ",", "False", ")", "\n", "\n", "mat_length", "=", "len", "(", "matrices", "[", "0", "]", "[", "0", "]", ")", "\n", "merged_length", "=", "len", "(", "matrices", "[", "0", "]", "[", "0", "]", ")", "*", "2", "\n", "matrix_final", "=", "np", ".", "zeros", "(", "(", "merged_length", ",", "merged_length", ")", ")", "\n", "\n", "for", "col", "in", "range", "(", "mat_length", ")", ":", "\n", "        ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "            ", "matrix_final", "[", "row", ",", "col", "]", "=", "matrices", "[", "0", "]", "[", "row", ",", "col", "]", "\n", "matrix_final", "[", "row", "+", "mat_length", ",", "col", "+", "mat_length", "]", "=", "matrices", "[", "1", "]", "[", "row", ",", "col", "]", "\n", "\n", "", "", "ops_onehot", "=", "np", ".", "concatenate", "(", "(", "ops", "[", "0", "]", ",", "ops", "[", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "matrix_final", "=", "add_global_node", "(", "matrix_final", ",", "True", ")", "\n", "ops_onehot", "=", "add_global_node", "(", "ops_onehot", ",", "False", ")", "\n", "\n", "matrix_final", "=", "np", ".", "array", "(", "matrix_final", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ops_onehot", "=", "np", ".", "array", "(", "ops_onehot", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ops", "=", "[", "np", ".", "where", "(", "r", "==", "1", ")", "[", "0", "]", "[", "0", "]", "for", "r", "in", "ops_onehot", "]", "\n", "\n", "dic", "=", "{", "\"adjacency\"", ":", "matrix_final", ",", "\"operations\"", ":", "ops", ",", "\"val_acc\"", ":", "0.0", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.encode_gcn": [[239, 269], ["len", "numpy.zeros", "range", "numpy.concatenate", "numpy.array", "numpy.array", "encodings_darts.transform_matrix", "matrices.append", "ops.append", "len", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.transform_matrix"], ["", "def", "encode_gcn", "(", "arch", ")", ":", "\n", "    ", "matrices", "=", "[", "]", "\n", "ops", "=", "[", "]", "\n", "\n", "for", "cell", "in", "arch", ":", "\n", "        ", "mat", ",", "op", "=", "transform_matrix", "(", "cell", ")", "\n", "matrices", ".", "append", "(", "mat", ")", "\n", "ops", ".", "append", "(", "op", ")", "\n", "\n", "", "mat_length", "=", "len", "(", "matrices", "[", "0", "]", "[", "0", "]", ")", "\n", "merged_length", "=", "len", "(", "matrices", "[", "0", "]", "[", "0", "]", ")", "*", "2", "\n", "matrix_final", "=", "np", ".", "zeros", "(", "(", "merged_length", ",", "merged_length", ")", ")", "\n", "\n", "for", "col", "in", "range", "(", "mat_length", ")", ":", "\n", "        ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "            ", "matrix_final", "[", "row", ",", "col", "]", "=", "matrices", "[", "0", "]", "[", "row", ",", "col", "]", "\n", "matrix_final", "[", "row", "+", "mat_length", ",", "col", "+", "mat_length", "]", "=", "matrices", "[", "1", "]", "[", "row", ",", "col", "]", "\n", "\n", "", "", "ops_onehot", "=", "np", ".", "concatenate", "(", "(", "ops", "[", "0", "]", ",", "ops", "[", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "matrix_final", "=", "np", ".", "array", "(", "matrix_final", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ops_onehot", "=", "np", ".", "array", "(", "ops_onehot", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "dic", "=", "{", "\n", "\"num_vertices\"", ":", "22", ",", "\n", "\"adjacency\"", ":", "matrix_final", ",", "\n", "\"operations\"", ":", "ops_onehot", ",", "\n", "\"val_acc\"", ":", "0.0", ",", "\n", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_darts.encode_darts": [[271, 301], ["arch.get_compact", "encodings_darts.encode_paths", "encodings_darts.encode_adj", "encodings_darts.encode_bonas", "encodings_darts.encode_seminas", "encodings_darts.encode_gcn", "print", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_paths", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_adj", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_bonas", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_seminas", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_gcn"], ["", "def", "encode_darts", "(", "arch", ",", "encoding_type", "=", "\"path\"", ")", ":", "\n", "\n", "    ", "compact", "=", "arch", ".", "get_compact", "(", ")", "\n", "\n", "if", "encoding_type", "==", "\"path\"", ":", "\n", "        ", "return", "encode_paths", "(", "arch", "=", "compact", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"adjacency_one_hot\"", ":", "\n", "        ", "return", "encode_adj", "(", "arch", "=", "compact", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"compact\"", ":", "\n", "        ", "return", "compact", "\n", "\n", "", "elif", "encoding_type", "==", "\"bonas\"", ":", "\n", "        ", "return", "encode_bonas", "(", "arch", "=", "compact", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"seminas\"", ":", "\n", "        ", "return", "encode_seminas", "(", "arch", "=", "compact", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"gcn\"", ":", "\n", "        ", "return", "encode_gcn", "(", "arch", "=", "compact", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\n", "\"{} is not yet implemented as an encoding type \\\n         for darts\"", ".", "format", "(", "\n", "encoding_type", "\n", ")", "\n", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.bin_thresholds.discretize": [[14, 33], ["enumerate", "enumerate", "len", "len", "len", "range"], "function", ["None"], ["def", "discretize", "(", "x", ",", "upper_bounds", "=", "None", ",", "one_hot", "=", "True", ")", ":", "\n", "# return discretization based on upper_bounds", "\n", "# supports one_hot or categorical output", "\n", "    ", "assert", "upper_bounds", "is", "not", "None", "and", "len", "(", "upper_bounds", ")", ">=", "1", "\n", "\n", "if", "one_hot", ":", "\n", "        ", "cat", "=", "len", "(", "upper_bounds", ")", "+", "1", "\n", "discretized", "=", "[", "0", "for", "_", "in", "range", "(", "cat", ")", "]", "\n", "for", "i", ",", "ub", "in", "enumerate", "(", "upper_bounds", ")", ":", "\n", "            ", "if", "x", "<", "ub", ":", "\n", "                ", "discretized", "[", "i", "]", "=", "1", "\n", "return", "discretized", "\n", "", "", "discretized", "[", "-", "1", "]", "=", "1", "\n", "return", "discretized", "\n", "", "else", ":", "\n", "        ", "for", "i", ",", "ub", "in", "enumerate", "(", "upper_bounds", ")", ":", "\n", "            ", "if", "x", "<", "ub", ":", "\n", "                ", "return", "i", "\n", "", "", "return", "len", "(", "upper_bounds", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.bin_thresholds.get_lce_bins": [[35, 45], ["len", "sorted", "min", "int", "range", "max", "numpy.ceil"], "function", ["None"], ["", "", "def", "get_lce_bins", "(", "train_info", ",", "key", "=", "\"TRAIN_LOSS_lc\"", ",", "max_bins", "=", "9", ")", ":", "\n", "\n", "    ", "train_size", "=", "len", "(", "train_info", ")", "\n", "losses", "=", "sorted", "(", "[", "i", "[", "key", "]", "[", "-", "1", "]", "for", "i", "in", "train_info", "]", ")", "\n", "n", "=", "min", "(", "max_bins", ",", "max", "(", "1", ",", "train_size", "//", "5", ")", ")", "\n", "if", "n", "==", "1", ":", "\n", "        ", "return", "[", "losses", "[", "train_size", "//", "2", "]", "]", "\n", "", "bin_size", "=", "int", "(", "np", ".", "ceil", "(", "train_size", "/", "n", ")", ")", "\n", "indices", "=", "range", "(", "bin_size", ",", "train_size", ",", "bin_size", ")", "\n", "return", "[", "losses", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.bin_thresholds.get_bins": [[47, 177], ["NotImplementedError"], "function", ["None"], ["", "def", "get_bins", "(", "zero_cost", ",", "train_size", ",", "ss_type", ",", "dataset", ")", ":", "\n", "\n", "    ", "if", "ss_type", "==", "\"nasbench201\"", "and", "dataset", "==", "\"cifar10\"", "and", "zero_cost", "==", "\"jacov\"", ":", "\n", "# precomputation based on 100 jacov values (366 sec on a CPU)", "\n", "        ", "if", "train_size", "<=", "10", ":", "\n", "            ", "bins", "=", "[", "-", "317.264", "]", "\n", "", "elif", "train_size", "<=", "20", ":", "\n", "            ", "bins", "=", "[", "-", "459.05", ",", "-", "282.091", "]", "\n", "", "elif", "train_size", "<=", "40", ":", "\n", "            ", "bins", "=", "[", "-", "697.812", ",", "-", "320.036", ",", "-", "280.607", "]", "\n", "", "elif", "train_size", "<=", "80", ":", "\n", "            ", "bins", "=", "[", "-", "2142.063", ",", "-", "459.471", ",", "-", "321.118", ",", "-", "282.115", ",", "-", "279.427", "]", "\n", "", "else", ":", "\n", "# precompution based on 1000 jacov values (3660 sec on a CPU)", "\n", "            ", "bins", "=", "[", "\n", "-", "20893.873", ",", "\n", "-", "1179.832", ",", "\n", "-", "518.407", ",", "\n", "-", "373.523", ",", "\n", "-", "317.264", ",", "\n", "-", "284.944", ",", "\n", "-", "281.242", ",", "\n", "-", "279.503", ",", "\n", "-", "278.083", ",", "\n", "]", "\n", "\n", "", "", "elif", "ss_type", "==", "\"nasbench201\"", "and", "dataset", "==", "\"cifar100\"", "and", "zero_cost", "==", "\"jacov\"", ":", "\n", "# precomputation based on 100 jacov values (822 sec on a CPU)", "\n", "        ", "if", "train_size", "<=", "10", ":", "\n", "            ", "bins", "=", "[", "-", "320.036", "]", "\n", "", "elif", "train_size", "<=", "20", ":", "\n", "            ", "bins", "=", "[", "-", "460.405", ",", "-", "282.114", "]", "\n", "", "elif", "train_size", "<=", "40", ":", "\n", "            ", "bins", "=", "[", "-", "702.848", ",", "-", "317.264", ",", "-", "280.275", "]", "\n", "", "elif", "train_size", "<=", "80", ":", "\n", "            ", "bins", "=", "[", "-", "2017.64", ",", "-", "460.571", ",", "-", "317.621", ",", "-", "282.179", ",", "-", "279.084", "]", "\n", "", "else", ":", "\n", "# precompution based on 1000 jacov values (8220 sec on a CPU)", "\n", "            ", "bins", "=", "[", "\n", "-", "18259.345", ",", "\n", "-", "1278.047", ",", "\n", "-", "521.781", ",", "\n", "-", "382.915", ",", "\n", "-", "320.036", ",", "\n", "-", "284.73", ",", "\n", "-", "281.404", ",", "\n", "-", "279.797", ",", "\n", "-", "278.281", ",", "\n", "]", "\n", "\n", "", "", "elif", "(", "\n", "ss_type", "==", "\"nasbench201\"", "\n", "and", "dataset", "==", "\"ImageNet16-120\"", "\n", "and", "zero_cost", "==", "\"jacov\"", "\n", ")", ":", "\n", "# precomputation based on 100 jacov values (672 sec on a CPU)", "\n", "        ", "if", "train_size", "<=", "10", ":", "\n", "            ", "bins", "=", "[", "-", "520.024", "]", "\n", "", "elif", "train_size", "<=", "20", ":", "\n", "            ", "bins", "=", "[", "-", "818.808", ",", "-", "431.293", "]", "\n", "", "elif", "train_size", "<=", "40", ":", "\n", "            ", "bins", "=", "[", "-", "1435.279", ",", "-", "520.024", ",", "-", "422.268", "]", "\n", "", "elif", "train_size", "<=", "80", ":", "\n", "            ", "bins", "=", "[", "-", "5391.315", ",", "-", "820.864", ",", "-", "521.642", ",", "-", "431.517", ",", "-", "416.104", "]", "\n", "", "else", ":", "\n", "# precompution based on 1000 jacov values (6720 sec on a CPU)", "\n", "            ", "bins", "=", "[", "\n", "-", "438912.007", ",", "\n", "-", "2943.312", ",", "\n", "-", "980.615", ",", "\n", "-", "634.461", ",", "\n", "-", "520.024", ",", "\n", "-", "439.222", ",", "\n", "-", "426.982", ",", "\n", "-", "418.229", ",", "\n", "-", "411.365", ",", "\n", "]", "\n", "\n", "", "", "elif", "ss_type", "==", "\"nasbench101\"", "and", "zero_cost", "==", "\"jacov\"", ":", "\n", "# precomputation based on 100 jacov values (1608 sec on a CPU)", "\n", "        ", "if", "train_size", "<=", "10", ":", "\n", "            ", "bins", "=", "[", "270.813", "]", "\n", "", "elif", "train_size", "<=", "20", ":", "\n", "            ", "bins", "=", "[", "270.413", ",", "271.319", "]", "\n", "", "elif", "train_size", "<=", "40", ":", "\n", "            ", "bins", "=", "[", "270.238", ",", "270.813", ",", "271.676", "]", "\n", "", "elif", "train_size", "<=", "80", ":", "\n", "            ", "bins", "=", "[", "270.055", ",", "270.409", ",", "270.809", ",", "271.305", ",", "272.303", "]", "\n", "", "else", ":", "\n", "# precompution based on 1000 jacov values (16080 sec on a CPU)", "\n", "            ", "bins", "=", "[", "\n", "269.919", ",", "\n", "270.126", ",", "\n", "270.35", ",", "\n", "270.548", ",", "\n", "270.813", ",", "\n", "271.123", ",", "\n", "271.433", ",", "\n", "272.017", ",", "\n", "272.824", ",", "\n", "]", "\n", "\n", "", "", "elif", "ss_type", "==", "\"darts\"", "and", "zero_cost", "==", "\"jacov\"", ":", "\n", "# precomputation based on 100 jacov values (3414 sec on a CPU)", "\n", "        ", "if", "train_size", "<=", "10", ":", "\n", "            ", "bins", "=", "[", "-", "273.487", "]", "\n", "", "elif", "train_size", "<=", "20", ":", "\n", "            ", "bins", "=", "[", "-", "273.826", ",", "-", "273.197", "]", "\n", "", "elif", "train_size", "<=", "40", ":", "\n", "            ", "bins", "=", "[", "-", "274.038", ",", "-", "273.487", ",", "-", "272.994", "]", "\n", "", "elif", "train_size", "<=", "80", ":", "\n", "            ", "bins", "=", "[", "-", "274.262", ",", "-", "273.827", ",", "-", "273.491", ",", "-", "273.198", ",", "-", "272.776", "]", "\n", "", "else", ":", "\n", "# precompution based on 1000 jacov values (34140 sec on a CPU)", "\n", "            ", "bins", "=", "[", "\n", "-", "274.506", ",", "\n", "-", "274.163", ",", "\n", "-", "273.897", ",", "\n", "-", "273.673", ",", "\n", "-", "273.487", ",", "\n", "-", "273.343", ",", "\n", "-", "273.112", ",", "\n", "-", "272.856", ",", "\n", "-", "272.408", ",", "\n", "]", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Currently no other zero-cost methods are supported\"", ")", "\n", "\n", "", "return", "bins", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.get_paths": [[24, 40], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "function", ["None"], ["def", "get_paths", "(", "spec", ")", ":", "\n", "    ", "\"\"\"\n    return all paths from input to output\n    \"\"\"", "\n", "matrix", ",", "ops", "=", "spec", "[", "\"matrix\"", "]", ",", "spec", "[", "\"ops\"", "]", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "        ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                    ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.get_path_indices": [[42, 64], ["encodings_nb101.get_paths", "path_indices.sort", "tuple", "range", "len", "path_indices.append", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.get_paths"], ["", "def", "get_path_indices", "(", "spec", ")", ":", "\n", "    ", "\"\"\"\n    compute the index of each path\n    There are 3^0 + ... + 3^5 paths total.\n    (Paths can be length 0 to 5, and for each path, for each node, there\n    are three choices for the operation.)\n    \"\"\"", "\n", "paths", "=", "get_paths", "(", "spec", ")", "\n", "mapping", "=", "{", "CONV3X3", ":", "0", ",", "CONV1X1", ":", "1", ",", "MAXPOOL3X3", ":", "2", "}", "\n", "path_indices", "=", "[", "]", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                ", "index", "+=", "len", "(", "OPS", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "\n", "", "", "", "path_indices", ".", "sort", "(", ")", "\n", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_paths": [[66, 74], ["encodings_nb101.get_path_indices", "sum", "numpy.zeros", "len", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.get_path_indices"], ["", "def", "encode_paths", "(", "spec", ")", ":", "\n", "    ", "\"\"\"output one-hot encoding of paths\"\"\"", "\n", "path_indices", "=", "get_path_indices", "(", "spec", ")", "\n", "num_paths", "=", "sum", "(", "[", "len", "(", "OPS", ")", "**", "i", "for", "i", "in", "range", "(", "OP_SPOTS", "+", "1", ")", "]", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "num_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "        ", "encoding", "[", "index", "]", "=", "1", "\n", "", "return", "encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_adj": [[76, 89], ["range", "range", "range", "encoding.append"], "function", ["None"], ["", "def", "encode_adj", "(", "spec", ")", ":", "\n", "    ", "\"\"\"\n    compute adjacency matrix + op list encoding\n    \"\"\"", "\n", "matrix", ",", "ops", "=", "spec", "[", "\"matrix\"", "]", ",", "spec", "[", "\"ops\"", "]", "\n", "op_dict", "=", "{", "CONV1X1", ":", "[", "0", ",", "0", ",", "1", "]", ",", "CONV3X3", ":", "[", "0", ",", "1", ",", "0", "]", ",", "MAXPOOL3X3", ":", "[", "1", ",", "0", ",", "0", "]", "}", "\n", "encoding", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "encoding", ".", "append", "(", "matrix", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "        ", "encoding", "=", "[", "*", "encoding", ",", "*", "op_dict", "[", "ops", "[", "i", "]", "]", "]", "\n", "", "return", "encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_gcn": [[91, 111], ["numpy.array", "numpy.array", "op_map.index", "range", "range", "len"], "function", ["None"], ["", "def", "encode_gcn", "(", "spec", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    a list of categorical ops starting from 0\n    \"\"\"", "\n", "matrix", ",", "ops", "=", "spec", "[", "\"matrix\"", "]", ",", "spec", "[", "\"ops\"", "]", "\n", "op_map", "=", "[", "OUTPUT", ",", "INPUT", ",", "*", "OPS", "]", "\n", "ops_onehot", "=", "np", ".", "array", "(", "\n", "[", "[", "i", "==", "op_map", ".", "index", "(", "op", ")", "for", "i", "in", "range", "(", "len", "(", "op_map", ")", ")", "]", "for", "op", "in", "ops", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "dic", "=", "{", "\n", "\"num_vertices\"", ":", "7", ",", "\n", "\"adjacency\"", ":", "matrix", ",", "\n", "\"operations\"", ":", "ops_onehot", ",", "\n", "\"mask\"", ":", "np", ".", "array", "(", "[", "i", "<", "7", "for", "i", "in", "range", "(", "7", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"val_acc\"", ":", "0.0", ",", "\n", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_bonas": [[113, 131], ["numpy.array", "encodings_nb101.add_global_node", "encodings_nb101.add_global_node", "numpy.array", "numpy.array", "op_map.index", "range", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node"], ["", "def", "encode_bonas", "(", "spec", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    a list of categorical ops starting from 0\n    \"\"\"", "\n", "matrix", ",", "ops", "=", "spec", "[", "\"matrix\"", "]", ",", "spec", "[", "\"ops\"", "]", "\n", "op_map", "=", "[", "INPUT", ",", "*", "OPS", ",", "OUTPUT", "]", "\n", "ops_onehot", "=", "np", ".", "array", "(", "\n", "[", "[", "i", "==", "op_map", ".", "index", "(", "op", ")", "for", "i", "in", "range", "(", "len", "(", "op_map", ")", ")", "]", "for", "op", "in", "ops", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "matrix", "=", "add_global_node", "(", "matrix", ",", "True", ")", "\n", "ops_onehot", "=", "add_global_node", "(", "ops_onehot", ",", "False", ")", "\n", "matrix", "=", "np", ".", "array", "(", "matrix", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ops_onehot", "=", "np", ".", "array", "(", "ops_onehot", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dic", "=", "{", "\"adjacency\"", ":", "matrix", ",", "\"operations\"", ":", "ops_onehot", ",", "\"val_acc\"", ":", "0.0", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.add_global_node": [[133, 145], ["numpy.column_stack", "numpy.row_stack", "numpy.fill_diagonal", "numpy.column_stack", "numpy.row_stack", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "add_global_node", "(", "mx", ",", "ifAdj", ")", ":", "\n", "    ", "\"\"\"add a global node to operation or adjacency matrixs, fill diagonal for adj and transpose adjs\"\"\"", "\n", "if", "ifAdj", ":", "\n", "        ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "ones", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "mx", ",", "1", ")", "\n", "mx", "=", "mx", ".", "T", "\n", "", "else", ":", "\n", "        ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "[", "mx", ".", "shape", "[", "0", "]", "-", "1", "]", "[", "mx", ".", "shape", "[", "1", "]", "-", "1", "]", "=", "1", "\n", "", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_seminas": [[147, 159], ["OPS_INCLUSIVE.index", "numpy.array", "range"], "function", ["None"], ["", "def", "encode_seminas", "(", "spec", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "spec", "[", "\"matrix\"", "]", ",", "spec", "[", "\"ops\"", "]", "\n", "# offset ops list by one, add input and output to ops list", "\n", "ops", "=", "[", "OPS_INCLUSIVE", ".", "index", "(", "op", ")", "for", "op", "in", "ops", "]", "\n", "dic", "=", "{", "\n", "\"num_vertices\"", ":", "7", ",", "\n", "\"adjacency\"", ":", "matrix", ",", "\n", "\"operations\"", ":", "ops", ",", "\n", "\"mask\"", ":", "np", ".", "array", "(", "[", "i", "<", "7", "for", "i", "in", "range", "(", "7", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"val_acc\"", ":", "0.0", ",", "\n", "}", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_101": [[161, 188], ["arch.get_spec", "encodings_nb101.encode_paths", "encodings_nb101.encode_adj", "encodings_nb101.encode_gcn", "encodings_nb101.encode_seminas", "encodings_nb101.encode_bonas", "print", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_paths", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_adj", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_gcn", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_seminas", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nb101.encode_bonas"], ["", "def", "encode_101", "(", "arch", ",", "encoding_type", "=", "\"path\"", ")", ":", "\n", "\n", "    ", "spec", "=", "arch", ".", "get_spec", "(", ")", "\n", "\n", "if", "encoding_type", "==", "\"path\"", ":", "\n", "        ", "return", "encode_paths", "(", "spec", "=", "spec", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"adjacency_one_hot\"", ":", "\n", "        ", "return", "encode_adj", "(", "spec", "=", "spec", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"gcn\"", ":", "\n", "        ", "return", "encode_gcn", "(", "spec", "=", "spec", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"seminas\"", ":", "\n", "        ", "return", "encode_seminas", "(", "spec", "=", "spec", ")", "\n", "\n", "", "elif", "encoding_type", "==", "\"bonas\"", ":", "\n", "        ", "return", "encode_bonas", "(", "spec", "=", "spec", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\n", "\"{} is not yet implemented as an encoding type \\\n         for nb101\"", ".", "format", "(", "\n", "encoding_type", "\n", ")", "\n", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.benchmarks.upload_to_s3.main": [[7, 17], ["boto3.client", "print", "boto3.client.upload_file"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "out_dir", "=", "args", ".", "out_dir", "\n", "zip_file", "=", "out_dir", "+", "\".zip\"", "\n", "bucket", "=", "args", ".", "bucket", "\n", "folder", "=", "\"results_predictors/\"", "+", "args", ".", "s3_folder", "+", "\"/\"", "\n", "\n", "s3_client", "=", "boto3", ".", "client", "(", "\"s3\"", ")", "\n", "print", "(", "\"uploading\"", ",", "zip_file", ",", "\"to\"", ",", "bucket", ",", "folder", "+", "zip_file", ")", "\n", "response", "=", "s3_client", ".", "upload_file", "(", "zip_file", ",", "bucket", ",", "folder", "+", "zip_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.benchmarks.create_configs.main": [[9, 365], ["int", "int", "os.makedirs", "range", "range", "numpy.random.seed", "random.seed", "os.makedirs", "range", "os.makedirs", "int", "int", "range", "open", "yaml.dump", "numpy.random.seed", "random.seed", "int", "int", "fidelity_list.pop", "fidelity_list.insert", "train_size_list.pop", "fidelity_list.pop", "fidelity_list.pop", "os.makedirs", "int", "int", "range", "open", "yaml.dump", "numpy.logspace", "numpy.logspace", "open", "yaml.dump", "os.makedirs", "int", "int", "range", "int", "int", "int", "int", "int", "int", "int", "open", "yaml.dump", "int", "int", "fidelity_list.pop", "fidelity_list.insert", "train_size_list.pop", "fidelity_list.pop", "fidelity_list.pop", "os.makedirs", "int", "int", "range", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.logspace", "numpy.logspace", "train_size_list.pop", "train_size_list.pop", "fidelity_list.pop", "open", "yaml.dump", "os.makedirs", "int", "int", "range", "print", "range", "range", "range", "range", "range", "range", "range", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "train_size_list.pop", "train_size_list.pop", "fidelity_list.pop", "fidelity_list.pop", "open", "yaml.dump", "open", "yaml.dump", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "config_type", "==", "'bbo-bs'", ":", "\n", "        ", "args", ".", "start_seed", "=", "int", "(", "args", ".", "start_seed", ")", "\n", "args", ".", "trials", "=", "int", "(", "args", ".", "trials", ")", "\n", "num_config", "=", "100", "\n", "\n", "# first generate the default config at config 0", "\n", "config_id", "=", "0", "\n", "folder", "=", "f\"naslib/benchmarks/bbo/configs_cpu/{args.search_space}/{args.dataset}/{args.optimizer}/config_{config_id}\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "seed", "in", "range", "(", "args", ".", "start_seed", ",", "args", ".", "start_seed", "+", "args", ".", "trials", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "config", "=", "{", "\n", "\"seed\"", ":", "seed", ",", "\n", "\"search_space\"", ":", "args", ".", "search_space", ",", "\n", "\"dataset\"", ":", "args", ".", "dataset", ",", "\n", "\"optimizer\"", ":", "args", ".", "optimizer", ",", "\n", "\"out_dir\"", ":", "args", ".", "out_dir", ",", "\n", "\"config_id\"", ":", "config_id", ",", "\n", "\"search\"", ":", "{", "\n", "\"sample_size\"", ":", "10", ",", "\n", "\"population_size\"", ":", "50", ",", "\n", "\"num_init\"", ":", "10", ",", "\n", "\"k\"", ":", "10", ",", "\n", "\"num_ensemble\"", ":", "3", ",", "\n", "\"acq_fn_type\"", ":", "\"its\"", ",", "\n", "\"num_arches_to_mutate\"", ":", "1", ",", "\n", "\"max_mutations\"", ":", "1", ",", "\n", "\"num_candidates\"", ":", "50", ",", "\n", "\"checkpoint_freq\"", ":", "args", ".", "checkpoint_freq", ",", "\n", "\"epochs\"", ":", "args", ".", "epochs", ",", "\n", "\"fidelity\"", ":", "args", ".", "fidelity", ",", "\n", "\"num_ensemble\"", ":", "3", ",", "\n", "\"acq_fn_type\"", ":", "\"its\"", ",", "\n", "\"acq_fn_optimization\"", ":", "args", ".", "acq_fn_optimization", ",", "\n", "\"encoding_type\"", ":", "\"path\"", ",", "\n", "\"predictor\"", ":", "args", ".", "predictor", ",", "\n", "\"debug_predictor\"", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "\n", "path", "=", "folder", "+", "f\"/seed_{seed}.yaml\"", "\n", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                ", "yaml", ".", "dump", "(", "config", ",", "fh", ")", "\n", "\n", "", "", "for", "config_id", "in", "range", "(", "1", ",", "num_config", ")", ":", "\n", "            ", "folder", "=", "f\"naslib/benchmarks/bbo/configs_cpu/{args.search_space}/{args.dataset}/{args.optimizer}/config_{config_id}\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "\n", "for", "seed", "in", "range", "(", "args", ".", "start_seed", ",", "args", ".", "start_seed", "+", "args", ".", "trials", ")", ":", "\n", "                ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "config", "=", "{", "\n", "\"seed\"", ":", "seed", ",", "\n", "\"search_space\"", ":", "args", ".", "search_space", ",", "\n", "\"dataset\"", ":", "args", ".", "dataset", ",", "\n", "\"optimizer\"", ":", "args", ".", "optimizer", ",", "\n", "\"out_dir\"", ":", "args", ".", "out_dir", ",", "\n", "\"config_id\"", ":", "config_id", ",", "\n", "\"search\"", ":", "{", "\n", "\"checkpoint_freq\"", ":", "args", ".", "checkpoint_freq", ",", "\n", "\"epochs\"", ":", "args", ".", "epochs", ",", "\n", "\"fidelity\"", ":", "args", ".", "fidelity", ",", "\n", "\"sample_size\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "5", ",", "100", ")", ")", ")", ",", "\n", "\"population_size\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "5", ",", "100", ")", ")", ")", ",", "\n", "\"num_init\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "5", ",", "100", ")", ")", ")", ",", "\n", "\"k\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "10", ",", "50", ")", ")", ")", ",", "\n", "\"num_ensemble\"", ":", "3", ",", "\n", "\"acq_fn_type\"", ":", "\"its\"", ",", "\n", "\"acq_fn_optimization\"", ":", "args", ".", "acq_fn_optimization", ",", "\n", "\"encoding_type\"", ":", "\"path\"", ",", "\n", "\"num_arches_to_mutate\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "1", ",", "20", ")", ")", ")", ",", "\n", "\"max_mutations\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "1", ",", "20", ")", ")", ")", ",", "\n", "\"num_candidates\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "5", ",", "50", ")", ")", ")", ",", "\n", "\"predictor\"", ":", "args", ".", "predictor", ",", "\n", "\"debug_predictor\"", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "\n", "path", "=", "folder", "+", "f\"/seed_{seed}.yaml\"", "\n", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                    ", "yaml", ".", "dump", "(", "config", ",", "fh", ")", "\n", "\n", "", "", "", "", "elif", "args", ".", "config_type", "==", "\"predictor-bs\"", ":", "\n", "        ", "folder", "=", "f\"naslib/benchmarks/predictors-bs/configs_{args.search_space}/{args.dataset}\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "args", ".", "start_seed", "=", "int", "(", "args", ".", "start_seed", ")", "\n", "args", ".", "trials", "=", "int", "(", "args", ".", "trials", ")", "\n", "\n", "if", "args", ".", "search_space", "==", "\"nasbench101\"", ":", "\n", "            ", "total_epochs", "=", "108", "-", "1", "\n", "max_train_size", "=", "1000", "\n", "", "elif", "args", ".", "search_space", "==", "\"nasbench201\"", ":", "\n", "            ", "total_epochs", "=", "200", "-", "1", "\n", "max_train_size", "=", "1000", "\n", "", "elif", "args", ".", "search_space", "==", "\"darts\"", ":", "\n", "            ", "total_epochs", "=", "96", "-", "1", "\n", "max_train_size", "=", "500", "\n", "", "elif", "args", ".", "search_space", "==", "\"nlp\"", ":", "\n", "            ", "total_epochs", "=", "50", "-", "1", "\n", "max_train_size", "=", "1000", "\n", "\n", "", "train_size_list", "=", "[", "\n", "int", "(", "j", ")", "\n", "for", "j", "in", "np", ".", "logspace", "(", "\n", "start", "=", "np", ".", "log", "(", "5.1", ")", "/", "np", ".", "log", "(", "2", ")", ",", "\n", "stop", "=", "np", ".", "log", "(", "max_train_size", ")", "/", "np", ".", "log", "(", "2", ")", ",", "\n", "num", "=", "11", ",", "\n", "endpoint", "=", "True", ",", "\n", "base", "=", "2.0", ",", "\n", ")", "\n", "]", "\n", "# train_size_list = [i for i in train_size_list if i < 230]", "\n", "fidelity_list", "=", "[", "\n", "int", "(", "j", ")", "\n", "for", "j", "in", "np", ".", "logspace", "(", "\n", "start", "=", "0.9", ",", "\n", "stop", "=", "np", ".", "log", "(", "total_epochs", ")", "/", "np", ".", "log", "(", "2", ")", ",", "\n", "num", "=", "15", ",", "\n", "endpoint", "=", "True", ",", "\n", "base", "=", "2.0", ",", "\n", ")", "\n", "]", "\n", "\n", "if", "args", ".", "search_space", "==", "\"nlp\"", ":", "\n", "            ", "fidelity_list", ".", "pop", "(", "2", ")", "\n", "fidelity_list", ".", "insert", "(", "5", ",", "6", ")", "\n", "\n", "", "if", "\"svr\"", "in", "args", ".", "predictor", ":", "\n", "            ", "train_size_list", ".", "pop", "(", "0", ")", "\n", "fidelity_list", ".", "pop", "(", "0", ")", "\n", "fidelity_list", ".", "pop", "(", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "start_seed", ",", "args", ".", "start_seed", "+", "args", ".", "trials", ")", ":", "\n", "            ", "config", "=", "{", "\n", "\"seed\"", ":", "i", ",", "\n", "\"search_space\"", ":", "args", ".", "search_space", ",", "\n", "\"dataset\"", ":", "args", ".", "dataset", ",", "\n", "\"out_dir\"", ":", "args", ".", "out_dir", ",", "\n", "\"predictor\"", ":", "args", ".", "predictor", ",", "\n", "\"test_size\"", ":", "args", ".", "test_size", ",", "\n", "\"uniform_random\"", ":", "args", ".", "uniform_random", ",", "\n", "\"experiment_type\"", ":", "args", ".", "experiment_type", ",", "\n", "\"train_size_list\"", ":", "train_size_list", ",", "\n", "\"train_size_single\"", ":", "args", ".", "train_size_single", ",", "\n", "\"fidelity_single\"", ":", "args", ".", "fidelity_single", ",", "\n", "\"fidelity_list\"", ":", "fidelity_list", ",", "\n", "\"max_hpo_time\"", ":", "900", ",", "\n", "}", "\n", "\n", "with", "open", "(", "folder", "+", "f\"/config_{args.predictor}_{i}.yaml\"", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                ", "yaml", ".", "dump", "(", "config", ",", "fh", ")", "\n", "\n", "", "", "", "elif", "args", ".", "config_type", "==", "\"nas\"", ":", "\n", "        ", "folder", "=", "f\"{args.out_dir}/{args.dataset}/configs/nas\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "args", ".", "start_seed", "=", "int", "(", "args", ".", "start_seed", ")", "\n", "args", ".", "trials", "=", "int", "(", "args", ".", "trials", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "start_seed", ",", "args", ".", "start_seed", "+", "args", ".", "trials", ")", ":", "\n", "            ", "config", "=", "{", "\n", "\"seed\"", ":", "i", ",", "\n", "\"search_space\"", ":", "args", ".", "search_space", ",", "\n", "\"dataset\"", ":", "args", ".", "dataset", ",", "\n", "\"optimizer\"", ":", "args", ".", "optimizer", ",", "\n", "\"out_dir\"", ":", "args", ".", "out_dir", ",", "\n", "\"search\"", ":", "{", "\n", "\"checkpoint_freq\"", ":", "args", ".", "checkpoint_freq", ",", "\n", "\"epochs\"", ":", "args", ".", "epochs", ",", "\n", "\"fidelity\"", ":", "200", ",", "\n", "\"sample_size\"", ":", "10", ",", "\n", "\"population_size\"", ":", "30", ",", "\n", "\"num_init\"", ":", "10", ",", "\n", "\"k\"", ":", "25", ",", "\n", "\"num_ensemble\"", ":", "3", ",", "\n", "\"acq_fn_type\"", ":", "\"its\"", ",", "\n", "\"acq_fn_optimization\"", ":", "\"mutation\"", ",", "\n", "\"encoding_type\"", ":", "\"path\"", ",", "\n", "\"num_arches_to_mutate\"", ":", "2", ",", "\n", "\"max_mutations\"", ":", "1", ",", "\n", "\"num_candidates\"", ":", "100", ",", "\n", "\"predictor_type\"", ":", "\"feedforward\"", ",", "\n", "\"debug_predictor\"", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "if", "args", ".", "optimizer", "==", "\"lcsvr\"", "and", "args", ".", "experiment_type", "==", "\"vary_fidelity\"", ":", "\n", "                ", "path", "=", "folder", "+", "f\"/config_{args.optimizer}_train_{i}.yaml\"", "\n", "", "if", "args", ".", "optimizer", "==", "\"lcsvr\"", "and", "args", ".", "experiment_type", "==", "\"vary_train_size\"", ":", "\n", "                ", "path", "=", "folder", "+", "f\"/config_{args.optimizer}_fidelity_{i}.yaml\"", "\n", "", "else", ":", "\n", "                ", "path", "=", "folder", "+", "f\"/config_{args.optimizer}_{i}.yaml\"", "\n", "\n", "", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                ", "yaml", ".", "dump", "(", "config", ",", "fh", ")", "\n", "\n", "", "", "", "elif", "args", ".", "config_type", "==", "\"predictor\"", ":", "\n", "        ", "folder", "=", "f\"{args.out_dir}/{args.dataset}/configs/predictors\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "args", ".", "start_seed", "=", "int", "(", "args", ".", "start_seed", ")", "\n", "args", ".", "trials", "=", "int", "(", "args", ".", "trials", ")", "\n", "\n", "if", "args", ".", "search_space", "==", "\"nasbench101\"", ":", "\n", "            ", "total_epochs", "=", "108", "-", "1", "\n", "max_train_size", "=", "1000", "\n", "", "elif", "args", ".", "search_space", "==", "\"nasbench201\"", ":", "\n", "            ", "total_epochs", "=", "200", "-", "1", "\n", "max_train_size", "=", "1000", "\n", "", "elif", "args", ".", "search_space", "==", "\"darts\"", ":", "\n", "            ", "total_epochs", "=", "96", "-", "1", "\n", "max_train_size", "=", "500", "\n", "", "elif", "args", ".", "search_space", "==", "\"nlp\"", ":", "\n", "            ", "total_epochs", "=", "50", "-", "1", "\n", "max_train_size", "=", "1000", "\n", "\n", "", "train_size_list", "=", "[", "\n", "int", "(", "j", ")", "\n", "for", "j", "in", "np", ".", "logspace", "(", "\n", "start", "=", "np", ".", "log", "(", "5.1", ")", "/", "np", ".", "log", "(", "2", ")", ",", "\n", "stop", "=", "np", ".", "log", "(", "max_train_size", ")", "/", "np", ".", "log", "(", "2", ")", ",", "\n", "num", "=", "11", ",", "\n", "endpoint", "=", "True", ",", "\n", "base", "=", "2.0", ",", "\n", ")", "\n", "]", "\n", "# train_size_list = [i for i in train_size_list if i < 230]", "\n", "fidelity_list", "=", "[", "\n", "int", "(", "j", ")", "\n", "for", "j", "in", "np", ".", "logspace", "(", "\n", "start", "=", "0.9", ",", "\n", "stop", "=", "np", ".", "log", "(", "total_epochs", ")", "/", "np", ".", "log", "(", "2", ")", ",", "\n", "num", "=", "15", ",", "\n", "endpoint", "=", "True", ",", "\n", "base", "=", "2.0", ",", "\n", ")", "\n", "]", "\n", "\n", "if", "args", ".", "search_space", "==", "\"nlp\"", ":", "\n", "            ", "fidelity_list", ".", "pop", "(", "2", ")", "\n", "fidelity_list", ".", "insert", "(", "5", ",", "6", ")", "\n", "\n", "", "if", "\"svr\"", "in", "args", ".", "predictor", ":", "\n", "            ", "train_size_list", ".", "pop", "(", "0", ")", "\n", "fidelity_list", ".", "pop", "(", "0", ")", "\n", "fidelity_list", ".", "pop", "(", "0", ")", "\n", "\n", "", "elif", "\"omni\"", "in", "args", ".", "predictor", "and", "args", ".", "search_space", "!=", "\"darts\"", ":", "\n", "            ", "train_size_list", ".", "pop", "(", "0", ")", "\n", "train_size_list", ".", "pop", "(", "-", "1", ")", "\n", "fidelity_list", ".", "pop", "(", "1", ")", "\n", "\n", "", "elif", "\"omni\"", "in", "args", ".", "predictor", "and", "args", ".", "search_space", "==", "\"darts\"", ":", "\n", "            ", "train_size_list", ".", "pop", "(", "0", ")", "\n", "train_size_list", ".", "pop", "(", "-", "1", ")", "\n", "fidelity_list", ".", "pop", "(", "1", ")", "\n", "fidelity_list", ".", "pop", "(", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "start_seed", ",", "args", ".", "start_seed", "+", "args", ".", "trials", ")", ":", "\n", "            ", "config", "=", "{", "\n", "\"seed\"", ":", "i", ",", "\n", "\"search_space\"", ":", "args", ".", "search_space", ",", "\n", "\"dataset\"", ":", "args", ".", "dataset", ",", "\n", "\"out_dir\"", ":", "args", ".", "out_dir", ",", "\n", "\"predictor\"", ":", "args", ".", "predictor", ",", "\n", "\"test_size\"", ":", "args", ".", "test_size", ",", "\n", "\"uniform_random\"", ":", "args", ".", "uniform_random", ",", "\n", "\"experiment_type\"", ":", "args", ".", "experiment_type", ",", "\n", "\"train_size_list\"", ":", "train_size_list", ",", "\n", "\"train_size_single\"", ":", "args", ".", "train_size_single", ",", "\n", "\"fidelity_single\"", ":", "args", ".", "fidelity_single", ",", "\n", "\"fidelity_list\"", ":", "fidelity_list", ",", "\n", "\"max_hpo_time\"", ":", "900", ",", "\n", "}", "\n", "\n", "with", "open", "(", "folder", "+", "f\"/config_{args.predictor}_{i}.yaml\"", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                ", "yaml", ".", "dump", "(", "config", ",", "fh", ")", "\n", "\n", "", "", "", "elif", "args", ".", "config_type", "==", "\"nas_predictor\"", ":", "\n", "        ", "folder", "=", "f\"{args.out_dir}/{args.dataset}/configs/nas_predictors\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "args", ".", "start_seed", "=", "int", "(", "args", ".", "start_seed", ")", "\n", "args", ".", "trials", "=", "int", "(", "args", ".", "trials", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "start_seed", ",", "args", ".", "start_seed", "+", "args", ".", "trials", ")", ":", "\n", "            ", "config", "=", "{", "\n", "\"seed\"", ":", "i", ",", "\n", "\"search_space\"", ":", "args", ".", "search_space", ",", "\n", "\"dataset\"", ":", "args", ".", "dataset", ",", "\n", "\"optimizer\"", ":", "args", ".", "optimizer", ",", "\n", "\"out_dir\"", ":", "args", ".", "out_dir", ",", "\n", "\"search\"", ":", "{", "\n", "\"predictor_type\"", ":", "args", ".", "predictor", ",", "\n", "\"epochs\"", ":", "args", ".", "epochs", ",", "\n", "\"checkpoint_freq\"", ":", "args", ".", "checkpoint_freq", ",", "\n", "\"fidelity\"", ":", "200", ",", "\n", "\"sample_size\"", ":", "10", ",", "\n", "\"population_size\"", ":", "30", ",", "\n", "\"num_init\"", ":", "20", ",", "\n", "\"k\"", ":", "20", ",", "\n", "\"num_ensemble\"", ":", "3", ",", "\n", "\"acq_fn_type\"", ":", "\"its\"", ",", "\n", "\"acq_fn_optimization\"", ":", "\"random_sampling\"", ",", "\n", "\"encoding_type\"", ":", "\"adjacency_one_hot\"", ",", "\n", "\"num_arches_to_mutate\"", ":", "5", ",", "\n", "\"max_mutations\"", ":", "1", ",", "\n", "\"num_candidates\"", ":", "200", ",", "\n", "\"batch_size\"", ":", "256", ",", "\n", "\"data_size\"", ":", "25000", ",", "\n", "\"cutout\"", ":", "False", ",", "\n", "\"cutout_length\"", ":", "16", ",", "\n", "\"cutout_prob\"", ":", "1.0", ",", "\n", "\"train_portion\"", ":", "0.7", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "path", "=", "folder", "+", "f\"/config_{args.optimizer}_{args.predictor}_{i}.yaml\"", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                ", "yaml", ".", "dump", "(", "config", ",", "fh", ")", "\n", "\n", "", "", "", "elif", "args", ".", "config_type", "==", "\"statistics\"", ":", "\n", "        ", "folder", "=", "f\"{args.out_dir}/{args.search_space}/{args.dataset}/configs/statistics\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "args", ".", "start_seed", "=", "int", "(", "args", ".", "start_seed", ")", "\n", "args", ".", "trials", "=", "int", "(", "args", ".", "trials", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "start_seed", ",", "args", ".", "start_seed", "+", "args", ".", "trials", ")", ":", "\n", "            ", "config", "=", "{", "\n", "\"seed\"", ":", "i", ",", "\n", "\"search_space\"", ":", "args", ".", "search_space", ",", "\n", "\"dataset\"", ":", "args", ".", "dataset", ",", "\n", "\"out_dir\"", ":", "args", ".", "out_dir", ",", "\n", "\"run_acc_stats\"", ":", "args", ".", "run_acc_stats", ",", "\n", "\"max_set_size\"", ":", "args", ".", "max_set_size", ",", "\n", "\"run_nbhd_size\"", ":", "args", ".", "run_nbhd_size", ",", "\n", "\"max_nbhd_trials\"", ":", "args", ".", "max_nbhd_trials", ",", "\n", "\"run_autocorr\"", ":", "args", ".", "run_autocorr", ",", "\n", "\"max_autocorr_trials\"", ":", "args", ".", "max_autocorr_trials", ",", "\n", "\"autocorr_size\"", ":", "args", ".", "autocorr_size", ",", "\n", "\"walks\"", ":", "args", ".", "walks", ",", "\n", "}", "\n", "\n", "with", "open", "(", "folder", "+", "f\"/config_{i}.yaml\"", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                ", "yaml", ".", "dump", "(", "config", ",", "fh", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "print", "(", "\"invalid config type in create_configs.py\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.ControllerDataset.__init__": [[107, 116], ["super().__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "targets", "=", "None", ",", "train", "=", "True", ",", "sos_id", "=", "0", ",", "eos_id", "=", "0", ")", ":", "\n", "        ", "super", "(", "ControllerDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "targets", ")", "\n", "", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "sos_id", "=", "sos_id", "\n", "self", ".", "eos_id", "=", "eos_id", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.ControllerDataset.__getitem__": [[117, 138], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "encoder_input", "=", "self", ".", "inputs", "[", "index", "]", "\n", "encoder_target", "=", "None", "\n", "if", "self", ".", "targets", "is", "not", "None", ":", "\n", "            ", "encoder_target", "=", "[", "self", ".", "targets", "[", "index", "]", "]", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "decoder_input", "=", "[", "self", ".", "sos_id", "]", "+", "encoder_input", "[", ":", "-", "1", "]", "\n", "sample", "=", "{", "\n", "\"encoder_input\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "\"encoder_target\"", ":", "torch", ".", "FloatTensor", "(", "encoder_target", ")", ",", "\n", "\"decoder_input\"", ":", "torch", ".", "LongTensor", "(", "decoder_input", ")", ",", "\n", "\"decoder_target\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "sample", "=", "{", "\n", "\"encoder_input\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "\"decoder_target\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "}", "\n", "if", "encoder_target", "is", "not", "None", ":", "\n", "                ", "sample", "[", "\"encoder_target\"", "]", "=", "torch", ".", "FloatTensor", "(", "encoder_target", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.ControllerDataset.__len__": [[139, 141], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.Encoder.__init__": [[144, 173], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "# self.mlp_layers = mlp_layers", "\n", "# self.mlp_hidden_size = mlp_hidden_size", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "True", ",", "\n", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", "*", "2", ",", "self", ".", "hidden_size", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.Encoder.forward": [[175, 191], ["emprox_score.Encoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "emprox_score.Encoder.rnn", "emprox_score.Encoder.out_proj", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "encoder_outputs", "=", "x", "\n", "encoder_hidden", "=", "hidden", "\n", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "arch_emb", "=", "x", "\n", "\n", "return", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", "#, predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.Attention.__init__": [[198, 209], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "source_dim", "=", "None", ",", "output_dim", "=", "None", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "source_dim", "is", "None", ":", "\n", "            ", "source_dim", "=", "input_dim", "\n", "", "if", "output_dim", "is", "None", ":", "\n", "            ", "output_dim", "=", "input_dim", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "source_dim", "=", "source_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "source_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "output_proj", "=", "nn", ".", "Linear", "(", "input_dim", "+", "source_dim", ",", "output_dim", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.Attention.forward": [[210, 236], ["input.size", "source_hids.size", "emprox_score.Attention.input_proj", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "source_hids.transpose", "torch.softmax().view.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "float", "torch.softmax().view.view", "emprox_score.Attention.output_proj", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "source_hids", ",", "mask", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "source_len", "=", "source_hids", ".", "size", "(", "1", ")", "\n", "\n", "# (batch, tgt_len, input_dim) -> (batch, tgt_len, source_dim)", "\n", "x", "=", "self", ".", "input_proj", "(", "input", ")", "\n", "\n", "# (batch, tgt_len, source_dim) * (batch, src_len, source_dim) -> (batch, tgt_len, src_len)", "\n", "attn", "=", "torch", ".", "bmm", "(", "x", ",", "source_hids", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", ".", "data", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "\"inf\"", ")", ")", "\n", "", "attn", "=", "F", ".", "softmax", "(", "attn", ".", "view", "(", "-", "1", ",", "source_len", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "\n", "batch_size", ",", "-", "1", ",", "source_len", "\n", ")", "\n", "\n", "# (batch, tgt_len, src_len) * (batch, src_len, source_dim) -> (batch, tgt_len, source_dim)", "\n", "mix", "=", "torch", ".", "bmm", "(", "attn", ",", "source_hids", ")", "\n", "\n", "# concat -> (batch, tgt_len, source_dim + input_dim)", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "mix", ",", "input", ")", ",", "dim", "=", "2", ")", "\n", "# output -> (batch, tgt_len, output_dim)", "\n", "output", "=", "torch", ".", "tanh", "(", "\n", "self", ".", "output_proj", "(", "combined", ".", "view", "(", "-", "1", ",", "self", ".", "input_dim", "+", "self", ".", "source_dim", ")", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "output_dim", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.Decoder.__init__": [[239, 270], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "emprox_score.Attention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "range", "math.floor", "emprox_score.Decoder.offsets.append", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "layers", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", "\n", "self", ".", "sos_id", "=", "SOS_ID", "\n", "self", ".", "eos_id", "=", "EOS_ID", "\n", "self", ".", "init_input", "=", "None", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention", "=", "Attention", "(", "self", ".", "hidden_size", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "vocab_size", ")", "\n", "self", ".", "n", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "sqrt", "(", "(", "self", ".", "length", "+", "1", ")", "*", "2", ")", ")", ")", "\n", "self", ".", "offsets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "self", ".", "offsets", ".", "append", "(", "(", "i", "+", "3", ")", "*", "i", "//", "2", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.Decoder.forward": [[271, 319], ["emprox_score.Decoder._init_state", "encoder_hidden[].size", "encoder_hidden[].new().fill_().long", "encoder_hidden[].new().fill_().long", "range", "torch.dropout.size", "torch.dropout.size", "emprox_score.Decoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "emprox_score.Decoder.rnn", "emprox_score.Decoder.attention", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "predicted_softmax.view.view.view", "emprox_score.Decoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "emprox_score.Decoder.rnn", "emprox_score.Decoder.attention", "emprox_score.Decoder.out", "emprox_score.Decoder.forward.decode"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Decoder._init_state"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "encoder_hidden", "=", "None", ",", "encoder_outputs", "=", "None", ")", ":", "\n", "        ", "decoder_hidden", "=", "self", ".", "_init_state", "(", "encoder_hidden", ")", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "x", ".", "size", "(", "1", ")", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ",", "decoder_hidden", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "residual", "=", "x", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "x", ",", "encoder_outputs", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "predicted_softmax", "=", "F", ".", "log_softmax", "(", "\n", "self", ".", "out", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_size", ")", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "predicted_softmax", "=", "predicted_softmax", ".", "view", "(", "bsz", ",", "tgt_len", ",", "-", "1", ")", "\n", "return", "predicted_softmax", ",", "None", "\n", "\n", "# inference", "\n", "", "assert", "x", "is", "None", "\n", "bsz", "=", "encoder_hidden", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "length", "=", "self", ".", "length", "\n", "decoder_input", "=", "encoder_hidden", "[", "0", "]", ".", "new", "(", "bsz", ",", "1", ")", ".", "fill_", "(", "0", ")", ".", "long", "(", ")", "\n", "decoded_ids", "=", "encoder_hidden", "[", "0", "]", ".", "new", "(", "bsz", ",", "0", ")", ".", "fill_", "(", "0", ")", ".", "long", "(", ")", "\n", "\n", "def", "decode", "(", "step", ",", "output", ")", ":", "\n", "            ", "if", "step", "in", "self", ".", "offsets", ":", "# sample operation, should be in [3, 7]", "\n", "                ", "symbol", "=", "output", "[", ":", ",", "3", ":", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "3", "\n", "", "else", ":", "# sample connection, should be in [1, 2]", "\n", "                ", "symbol", "=", "output", "[", ":", ",", "1", ":", "3", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "1", "\n", "", "return", "symbol", "\n", "\n", "", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "x", "=", "self", ".", "embedding", "(", "decoder_input", "[", ":", ",", "i", ":", "i", "+", "1", "]", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "decoder_hidden", "=", "self", ".", "rnn", "(", "x", ",", "decoder_hidden", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "residual", "=", "x", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "x", ",", "encoder_outputs", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "output", "=", "self", ".", "out", "(", "x", ".", "squeeze", "(", "1", ")", ")", "\n", "symbol", "=", "decode", "(", "i", ",", "output", ")", "\n", "decoded_ids", "=", "torch", ".", "cat", "(", "(", "decoded_ids", ",", "symbol", ")", ",", "axis", "=", "-", "1", ")", "\n", "decoder_input", "=", "torch", ".", "cat", "(", "(", "decoder_input", ",", "symbol", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "None", ",", "decoded_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.Decoder._init_state": [[320, 329], ["isinstance", "tuple"], "methods", ["None"], ["", "def", "_init_state", "(", "self", ",", "encoder_hidden", ")", ":", "\n", "        ", "\"\"\"Initialize the encoder hidden state.\"\"\"", "\n", "if", "encoder_hidden", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "encoder_hidden", ",", "tuple", ")", ":", "\n", "            ", "encoder_hidden", "=", "tuple", "(", "[", "h", "for", "h", "in", "encoder_hidden", "]", ")", "\n", "", "else", ":", "\n", "            ", "encoder_hidden", "=", "encoder_hidden", "\n", "", "return", "encoder_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.NAO.__init__": [[332, 369], ["torch.Module.__init__", "Encoder().to", "Decoder().to", "emprox_score.NAO.flatten_parameters", "numpy.empty", "emprox_score.Encoder", "emprox_score.Decoder"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoder_layers", ",", "\n", "decoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", "decoder_length", ",", "\n", "k_nn", "\n", ")", ":", "\n", "        ", "super", "(", "NAO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "encoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "decoder_layers", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "decoder_length", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "k_nn", "=", "k_nn", "\n", "\n", "self", ".", "flatten_parameters", "(", ")", "\n", "self", ".", "embedding_list", "=", "np", ".", "empty", "(", "(", "0", ",", "hidden_size", ")", ")", "\n", "self", ".", "accuracy_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.NAO.flatten_parameters": [[370, 373], ["emprox_score.NAO.encoder.rnn.flatten_parameters", "emprox_score.NAO.decoder.rnn.flatten_parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters"], ["", "def", "flatten_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "self", ".", "decoder", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.NAO.estimate_scores": [[374, 400], ["scipy.spatial.distance.cdist", "enumerate", "numpy.argpartition", "range", "numpy.sum", "est_accs.append", "known_accs.append", "numpy.multiply", "numpy.sum", "range", "numpy.sum", "numpy.fromiter", "range"], "methods", ["None"], ["", "def", "estimate_scores", "(", "self", ",", "K", ",", "unknown_archs", ",", "known_archs", ",", "accuracies", ")", ":", "\n", "# compute distance matrix from all unscored archs to all scored archs ", "\n", "        ", "dist_mat", "=", "cdist", "(", "unknown_archs", ",", "known_archs", ",", "metric", "=", "'euclidean'", ")", "\n", "est_accs", "=", "[", "]", "\n", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "dist_mat", ")", ":", "\n", "# partition the distances in the distance matrix such that first k are sorted (closest to furthest)", "\n", "            ", "k_min_dist", "=", "np", ".", "argpartition", "(", "row", ",", "(", "K", "-", "1", ")", ")", "# faster than argsort", "\n", "\n", "# determine weight by inverse distance weighting", "\n", "# weight = distance / sum(distances), inverse by taking weight = 1/weight", "\n", "# alternative calculation inverse weights: 1/dist / sum(1/distances)", "\n", "weights", "=", "[", "dist_mat", "[", "i", "]", "[", "k_min_dist", "[", "j", "]", "]", "/", "(", "np", ".", "sum", "(", "np", ".", "fromiter", "(", "iter", "=", "[", "dist_mat", "[", "i", "]", "[", "k_min_dist", "[", "l", "]", "]", "for", "l", "in", "range", "(", "K", ")", "]", ",", "dtype", "=", "float", ")", ")", ")", "for", "j", "in", "range", "(", "K", ")", "]", "\n", "temp_weights", "=", "[", "(", "1", "/", "weight", ")", "for", "weight", "in", "weights", "]", "\n", "inverse_weights", "=", "[", "temp_weight", "/", "(", "np", ".", "sum", "(", "temp_weights", ")", ")", "for", "temp_weight", "in", "temp_weights", "]", "\n", "\n", "# get accuracies of k nearest architectures", "\n", "known_accs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "known_accs", ".", "append", "(", "accuracies", "[", "k_min_dist", "[", "j", "]", "]", ")", "\n", "\n", "# compute score my summing the weights and the accuracies of the corresponding archs", "\n", "", "inverse_score", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "inverse_weights", ",", "known_accs", ")", ")", "\n", "est_accs", ".", "append", "(", "inverse_score", ")", "\n", "\n", "", "return", "est_accs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.NAO.forward": [[401, 442], ["emprox_score.NAO.encoder", "numpy.concatenate", "emprox_score.NAO.decoder", "emprox_score.NAO.encoder", "arch_emb.detach().numpy", "numpy.array", "emprox_score.NAO.estimate_scores", "input_variable.to", "arch_emb.unsqueeze().to", "arch_emb.unsqueeze().to", "target_variable.to", "encoder_outputs.to", "input_variable.to", "val.item", "arch_emb.detach().numpy", "arch_emb.detach", "arch_emb.unsqueeze", "arch_emb.unsqueeze", "arch_emb.detach"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.NAO.estimate_scores"], ["", "def", "forward", "(", "self", ",", "input_variable", ",", "target_variable", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "# print(f'input var: {input_variable.shape}')", "\n", "            ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", "=", "self", ".", "encoder", "(", "# , predict_value", "\n", "input_variable", ".", "to", "(", "device", ")", "\n", ")", "\n", "\n", "# print(f'num nan in emb: {np.count_nonzero(~np.isnan(arch_emb.detach().numpy()))}')", "\n", "\n", "# print(f'embedding: {arch_emb.shape}')", "\n", "# print(arch_emb.detach().numpy())", "\n", "# self.embedding_list.append(arch_emb.detach().numpy()) # are same archs passed through forward multiple times? Then list invalid", "\n", "self", ".", "embedding_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "embedding_list", ",", "arch_emb", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "# print(f'embedding list: {shape(self.embedding_list)}')", "\n", "# print(f'embedding list element: {shape(self.embedding_list[-1])}')", "\n", "# print(self.embedding_list)", "\n", "\n", "decoder_hidden", "=", "(", "\n", "arch_emb", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", "arch_emb", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "decoder_outputs", ",", "archs", "=", "self", ".", "decoder", "(", "\n", "target_variable", ".", "to", "(", "device", ")", ",", "decoder_hidden", ",", "encoder_outputs", ".", "to", "(", "device", ")", "\n", ")", "\n", "return", "decoder_outputs", ",", "archs", "\n", "", "else", ":", "\n", "            ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", "=", "self", ".", "encoder", "(", "# , predict_value", "\n", "input_variable", ".", "to", "(", "device", ")", "\n", ")", "\n", "# decoder_hidden = (", "\n", "#     arch_emb.unsqueeze(0).to(device),", "\n", "#     arch_emb.unsqueeze(0).to(device),", "\n", "# )", "\n", "# decoder_outputs, archs = self.decoder(", "\n", "#     target_variable.to(device), decoder_hidden, encoder_outputs.to(device)", "\n", "# )           ", "\n", "unknown_archs", "=", "arch_emb", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "known_archs", "=", "np", ".", "array", "(", "self", ".", "embedding_list", ")", "\n", "accuracies", "=", "[", "val", ".", "item", "(", ")", "for", "sublist", "in", "self", ".", "accuracy_list", "for", "val", "in", "sublist", "]", "# flatten list", "\n", "predict_value", "=", "self", ".", "estimate_scores", "(", "K", "=", "self", ".", "k_nn", ",", "unknown_archs", "=", "unknown_archs", ",", "known_archs", "=", "known_archs", ",", "accuracies", "=", "accuracies", ")", "\n", "return", "predict_value", "#, decoder_outputs, archs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.NAO.visualize": [[443, 453], ["sklearn.manifold.TSNE().fit_transform", "sklearn.preprocessing.MinMaxScaler", "sklearn.preprocessing.MinMaxScaler.fit_transform", "matplotlib.scatter", "matplotlib.title", "matplotlib.savefig", "sklearn.manifold.TSNE", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform"], ["", "", "def", "visualize", "(", "self", ",", "embeddings", ",", "scores", ",", "new_mask", ")", ":", "\n", "        ", "dim2_emb", "=", "TSNE", "(", "n_components", "=", "2", ")", ".", "fit_transform", "(", "embeddings", ")", "\n", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "dim2_emb_sc", "=", "scaler", ".", "fit_transform", "(", "dim2_emb", ")", "\n", "dim2_emb_sc", "=", "[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "dim2_emb_sc", "]", "\n", "# make new architectures larger", "\n", "# sizes = [100 if i==0 else 20 for i in new_mask]", "\n", "plt", ".", "scatter", "(", "*", "zip", "(", "*", "dim2_emb_sc", ")", ",", "c", "=", "scores", ",", "cmap", "=", "'RdYlGn'", ",", "alpha", "=", "0.3", ")", "# s=sizes,", "\n", "plt", ".", "title", "(", "'Plot embeddings'", ")", "\n", "plt", ".", "savefig", "(", "'plot_embeddings.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.EmProxPredictor.__init__": [[534, 554], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "k_nn", ",", "\n", "hidden_lay", ",", "\n", "encoding_type", "=", "\"seminas\"", ",", "\n", "ss_type", "=", "None", ",", "\n", "semi", "=", "False", ",", "\n", "hpo_wrapper", "=", "False", ",", "\n", "synthetic_factor", "=", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "semi", "=", "False", "#semi # OWN CODE FIX TODO", "\n", "self", ".", "synthetic_factor", "=", "synthetic_factor", "\n", "if", "ss_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "ss_type", "=", "ss_type", "\n", "", "self", ".", "hpo_wrapper", "=", "hpo_wrapper", "\n", "self", ".", "default_hyperparams", "=", "{", "\"gcn_hidden\"", ":", "64", ",", "\"batch_size\"", ":", "100", ",", "\"lr\"", ":", "1e-3", "}", "\n", "self", ".", "hyperparams", "=", "None", "\n", "self", ".", "k_nn", "=", "k_nn", "\n", "self", ".", "hidden_lay", "=", "hidden_lay", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.EmProxPredictor.fit": [[556, 654], ["numpy.mean", "numpy.std", "enumerate", "NAO().to", "range", "numpy.squeeze", "numpy.mean", "emprox_score.EmProxPredictor.default_hyperparams.copy", "naslib.predictors.utils.encodings.encode", "emprox_score.convert_arch_to_seq", "train_seq_pool.append", "train_target_pool.append", "print", "emprox_score.train_controller", "print", "emprox_score.EmProxPredictor.query", "abs", "emprox_score.NAO"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.convert_arch_to_seq", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.train_controller", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "fit", "(", "\n", "self", ",", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "train_info", "=", "None", ",", "\n", "wd", "=", "0", ",", "\n", "iterations", "=", "1", ",", "\n", "epochs", "=", "50", ",", "\n", "pretrain_epochs", "=", "50", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "batch_size", "=", "self", ".", "hyperparams", "[", "\"batch_size\"", "]", "\n", "gcn_hidden", "=", "self", ".", "hyperparams", "[", "\"gcn_hidden\"", "]", "\n", "lr", "=", "self", ".", "hyperparams", "[", "\"lr\"", "]", "\n", "up_sample_ratio", "=", "10", "\n", "\n", "if", "self", ".", "ss_type", "==", "\"nasbench101\"", ":", "\n", "            ", "self", ".", "max_n", "=", "7", "\n", "encoder_length", "=", "27", "\n", "decoder_length", "=", "27", "\n", "vocab_size", "=", "7", "\n", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nasbench201\"", ":", "\n", "            ", "self", ".", "max_n", "=", "8", "\n", "encoder_length", "=", "35", "\n", "decoder_length", "=", "35", "\n", "vocab_size", "=", "9", "\n", "\n", "", "elif", "self", ".", "ss_type", "==", "\"darts\"", ":", "\n", "            ", "self", ".", "max_n", "=", "35", "\n", "encoder_length", "=", "629", "\n", "decoder_length", "=", "629", "\n", "vocab_size", "=", "13", "\n", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nlp\"", ":", "\n", "            ", "self", ".", "max_n", "=", "25", "\n", "encoder_length", "=", "324", "\n", "decoder_length", "=", "324", "\n", "vocab_size", "=", "12", "\n", "\n", "", "elif", "self", ".", "ss_type", "==", "\"transbench101\"", ":", "\n", "            ", "self", ".", "max_n", "=", "8", "\n", "encoder_length", "=", "35", "\n", "decoder_length", "=", "35", "\n", "vocab_size", "=", "9", "\n", "\n", "\n", "# get mean and std, normlize accuracies", "\n", "", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "ytrain_normed", "=", "(", "ytrain", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "# encode data in seq", "\n", "train_seq_pool", "=", "[", "]", "\n", "train_target_pool", "=", "[", "]", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "xtrain", ")", ":", "\n", "            ", "encoded", "=", "encode", "(", "\n", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", "\n", ")", "\n", "seq", "=", "convert_arch_to_seq", "(", "\n", "encoded", "[", "\"adjacency\"", "]", ",", "encoded", "[", "\"operations\"", "]", ",", "max_n", "=", "self", ".", "max_n", "\n", ")", "\n", "train_seq_pool", ".", "append", "(", "seq", ")", "\n", "train_target_pool", ".", "append", "(", "ytrain_normed", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "model", "=", "NAO", "(", "\n", "encoder_layers", ",", "\n", "decoder_layers", ",", "\n", "mlp_layers", ",", "\n", "self", ".", "hidden_lay", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", "decoder_length", ",", "\n", "self", ".", "k_nn", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "#print(\"Iteration {}\".format(i + 1))", "\n", "\n", "            ", "train_encoder_input", "=", "train_seq_pool", "\n", "train_encoder_target", "=", "train_target_pool", "\n", "\n", "# Pre-train", "\n", "print", "(", "\"Pre-train EPD\"", ")", "\n", "train_controller", "(", "\n", "self", ".", "model", ",", "train_encoder_input", ",", "train_encoder_target", ",", "pretrain_epochs", "\n", ")", "\n", "print", "(", "\"Finish pre-training EPD\"", ")", "\n", "\n", "\n", "", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "query", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.EmProxPredictor.query": [[655, 692], ["enumerate", "emprox_score.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "emprox_score.EmProxPredictor.model.eval", "numpy.concatenate", "numpy.squeeze", "naslib.predictors.utils.encodings.encode", "emprox_score.convert_arch_to_seq", "test_seq_pool.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "emprox_score.move_to_cuda", "emprox_score.move_to_cuda", "emprox_score.EmProxPredictor.model", "numpy.concatenate.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.convert_arch_to_seq", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ",", "eval_batch_size", "=", "100", ")", ":", "\n", "\n", "        ", "test_seq_pool", "=", "[", "]", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "xtest", ")", ":", "\n", "            ", "encoded", "=", "encode", "(", "\n", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", "\n", ")", "\n", "seq", "=", "convert_arch_to_seq", "(", "\n", "encoded", "[", "\"adjacency\"", "]", ",", "encoded", "[", "\"operations\"", "]", ",", "max_n", "=", "self", ".", "max_n", "\n", ")", "\n", "test_seq_pool", ".", "append", "(", "seq", ")", "\n", "\n", "", "test_dataset", "=", "ControllerDataset", "(", "test_seq_pool", ",", "None", ",", "False", ")", "\n", "test_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# visualize trained embeddings ", "\n", "# flat_acc_list = [val.item() for sublist in self.model.accuracy_list for val in sublist] # flatten list", "\n", "# self.model.visualize(self.model.embedding_list, flat_acc_list, '')", "\n", "\n", "pred", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", ",", "sample", "in", "enumerate", "(", "test_queue", ")", ":", "\n", "                ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "decoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_target\"", "]", ")", "# the same as enc_input if in eval mode", "\n", "prediction", "=", "self", ".", "model", "(", "encoder_input", ",", "decoder_target", ")", "\n", "pred", ".", "append", "(", "prediction", ")", "\n", "\n", "", "", "pred", "=", "np", ".", "concatenate", "(", "pred", ")", "\n", "return", "np", ".", "squeeze", "(", "pred", "*", "self", ".", "std", "+", "self", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.EmProxPredictor.set_random_hyperparams": [[693, 707], ["emprox_score.EmProxPredictor.default_hyperparams.copy", "int", "int", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"gcn_hidden\"", ":", "int", "(", "loguniform", "(", "16", ",", "128", ")", ")", ",", "\n", "\"batch_size\"", ":", "int", "(", "loguniform", "(", "32", ",", "256", ")", ")", ",", "\n", "\"lr\"", ":", "loguniform", "(", "0.00001", ",", "0.1", ")", ",", "\n", "}", "\n", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.EmProxPredictor.pre_compute": [[708, 714], ["None"], "methods", ["None"], ["", "def", "pre_compute", "(", "self", ",", "xtrain", ",", "xtest", ",", "unlabeled", ")", ":", "\n", "        ", "\"\"\"\n        This method is used to pass in unlabeled architectures\n        for SemiNAS to use, in standalone predictor experiments.\n        \"\"\"", "\n", "self", ".", "unlabeled", "=", "unlabeled", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.EmProxPredictor.set_pre_computations": [[715, 729], ["None"], "methods", ["None"], ["", "def", "set_pre_computations", "(", "\n", "self", ",", "\n", "unlabeled", "=", "None", ",", "\n", "xtrain_zc_info", "=", "None", ",", "\n", "xtest_zc_info", "=", "None", ",", "\n", "unlabeled_zc_info", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        This is the method to pass in unlabeled architectures during\n        NAS. The reason we need this method and pre_compute() is to be\n        consistent with omni_seminas, where the methods do different things.\n        \"\"\"", "\n", "if", "unlabeled", "is", "not", "None", ":", "\n", "            ", "self", ".", "unlabeled", "=", "unlabeled", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.EmProxPredictor.get_data_reqs": [[730, 745], ["None"], "methods", ["None"], ["", "", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query, such as a partial learning curve,\n        hyperparameters, or how much unlabeled data it needs\n        \"\"\"", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "False", ",", "\n", "\"metric\"", ":", "None", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "{", "}", ",", "\n", "\"unlabeled\"", ":", "self", ".", "semi", ",", "\n", "\"unlabeled_factor\"", ":", "self", ".", "synthetic_factor", ",", "\n", "}", "\n", "return", "reqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.move_to_cuda": [[70, 74], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "tensor.cuda"], "function", ["None"], ["def", "move_to_cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.convert_arch_to_seq": [[76, 92], ["len", "range", "len", "len", "seq.append", "range", "seq.append", "seq.append", "range"], "function", ["None"], ["", "def", "convert_arch_to_seq", "(", "matrix", ",", "ops", ",", "max_n", "=", "8", ")", ":", "\n", "    ", "seq", "=", "[", "]", "\n", "n", "=", "len", "(", "matrix", ")", "\n", "max_n", "=", "max_n", "\n", "assert", "n", "==", "len", "(", "ops", ")", "\n", "for", "col", "in", "range", "(", "1", ",", "max_n", ")", ":", "\n", "        ", "if", "col", ">=", "n", ":", "\n", "            ", "seq", "+=", "[", "0", "for", "i", "in", "range", "(", "col", ")", "]", "\n", "seq", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "                ", "seq", ".", "append", "(", "matrix", "[", "row", "]", "[", "col", "]", "+", "1", ")", "\n", "", "seq", ".", "append", "(", "ops", "[", "col", "]", "+", "2", ")", "\n", "\n", "", "", "assert", "len", "(", "seq", ")", "==", "(", "max_n", "+", "2", ")", "*", "(", "max_n", "-", "1", ")", "/", "2", "\n", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.convert_seq_to_arch": [[94, 104], ["int", "range", "math.floor", "range", "ops.append", "math.sqrt", "range", "range", "len"], "function", ["None"], ["", "def", "convert_seq_to_arch", "(", "seq", ")", ":", "\n", "    ", "n", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "sqrt", "(", "(", "len", "(", "seq", ")", "+", "1", ")", "*", "2", ")", ")", ")", "\n", "matrix", "=", "[", "[", "0", "for", "_", "in", "range", "(", "n", ")", "]", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "ops", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "        ", "offset", "=", "(", "i", "+", "3", ")", "*", "i", "//", "2", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "            ", "matrix", "[", "j", "]", "[", "i", "+", "1", "]", "=", "seq", "[", "offset", "+", "j", "]", "-", "1", "\n", "", "ops", ".", "append", "(", "seq", "[", "offset", "+", "i", "+", "1", "]", "-", "2", ")", "\n", "", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.controller_train": [[455, 498], ["naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "model.train", "enumerate", "emprox_score.move_to_cuda", "emprox_score.move_to_cuda", "emprox_score.move_to_cuda", "emprox_score.move_to_cuda", "model.accuracy_list.append", "optimizer.zero_grad", "model", "torch.nll_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "move_to_cuda.size", "naslib.utils.utils.AverageMeter.update", "naslib.utils.utils.AverageMeter.update", "move_to_cuda.detach().numpy", "log_prob.contiguous().view", "move_to_cuda.view", "model.parameters", "log_prob.size", "move_to_cuda.detach", "log_prob.contiguous"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "", "def", "controller_train", "(", "train_queue", ",", "model", ",", "optimizer", ")", ":", "\n", "\n", "    ", "objs", "=", "AverageMeter", "(", ")", "\n", "mse", "=", "AverageMeter", "(", ")", "\n", "nll", "=", "AverageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "sample", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "\n", "        ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "# architecture", "\n", "encoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_target\"", "]", ")", "# normalized accuracies", "\n", "decoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_input\"", "]", ")", "# embedding?", "\n", "decoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_target\"", "]", ")", "# architecture?", "\n", "\n", "model", ".", "accuracy_list", ".", "append", "(", "encoder_target", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "log_prob", ",", "arch", "=", "model", "(", "encoder_input", ",", "decoder_input", ")", "# predict_value, ", "\n", "# loss_1 = F.mse_loss(predict_value.squeeze(), encoder_target.squeeze()) # regression loss ", "\n", "loss_2", "=", "F", ".", "nll_loss", "(", "# only use reconstruction loss", "\n", "log_prob", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "-", "1", ")", ")", ",", "decoder_target", ".", "view", "(", "-", "1", ")", "\n", ")", "\n", "#loss = trade_off * loss_1 + (1 - trade_off) * loss_2", "\n", "loss", "=", "loss_2", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_bound", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "n", "=", "encoder_input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "#mse.update(loss_1.data, n)", "\n", "nll", ".", "update", "(", "loss_2", ".", "data", ",", "n", ")", "\n", "\n", "################################### TODO PROBLEM FIX #########################################", "\n", "# There are always 64 nan values in each row of the embedding list", "\n", "# also embedding list instantiated as np.empty((0,64)) since hidden dim = 64", "\n", "# coincidence? i think not", "\n", "# also:", "\n", "# num nan in emb: 6400", "\n", "# num nan in emb: 1344", "\n", "# num nan in emb: 6400", "\n", "# num nan in emb: 1344", "\n", "\n", "", "return", "objs", ".", "avg", ",", "mse", ".", "avg", ",", "nll", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.emprox_score.train_controller": [[515, 531], ["logging.info", "emprox_score.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "model.parameters", "emprox_score.controller_train", "len", "print"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.controller_train"], ["", "def", "train_controller", "(", "model", ",", "train_input", ",", "train_target", ",", "epochs", ")", ":", "\n", "\n", "    ", "logging", ".", "info", "(", "\"Train data: {}\"", ".", "format", "(", "len", "(", "train_input", ")", ")", ")", "\n", "controller_train_dataset", "=", "ControllerDataset", "(", "train_input", ",", "train_target", ",", "True", ")", "\n", "controller_train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "controller_train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "l2_reg", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "        ", "loss", ",", "mse", ",", "ce", "=", "controller_train", "(", "controller_train_queue", ",", "model", ",", "optimizer", ")", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "\"epoch {} train loss {} mse {} ce {}\"", ".", "format", "(", "epoch", ",", "loss", ",", "mse", ",", "ce", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.__init__": [[2, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ss_type", "=", "None", ",", "encoding_type", "=", "None", ")", ":", "\n", "        ", "self", ".", "ss_type", "=", "ss_type", "\n", "self", ".", "encoding_type", "=", "encoding_type", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.set_ss_type": [[6, 8], ["None"], "methods", ["None"], ["", "def", "set_ss_type", "(", "self", ",", "ss_type", ")", ":", "\n", "        ", "self", ".", "ss_type", "=", "ss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.pre_process": [[9, 15], ["None"], "methods", ["None"], ["", "def", "pre_process", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is called at the start of the NAS algorithm,\n        before any architectures have been queried\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.pre_compute": [[16, 24], ["None"], "methods", ["None"], ["", "def", "pre_compute", "(", "self", ",", "xtrain", ",", "xtest", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This method is used to make batch predictions\n        more efficient. Perform a computation on the train/test\n        set once (e.g., calculate the Jacobian covariance)\n        and then use it for all train_sizes.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.fit": [[25, 32], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "info", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This can be called any number of times during the NAS algorithm.\n        input: list of architectures, list of architecture accuracies\n        output: none\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.query": [[33, 41], ["None"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", ")", ":", "\n", "        ", "\"\"\"\n        This can be called any number of times during the NAS algorithm.\n        inputs: list of architectures,\n                info about the architectures (e.g., training data up to 20 epochs)\n        output: predictions for the architectures\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.get_data_reqs": [[42, 57], ["None"], "methods", ["None"], ["", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query, such as a partial learning curve,\n        or hyperparameters of the architecture\n        \"\"\"", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "False", ",", "\n", "\"metric\"", ":", "None", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "{", "}", ",", "\n", "\"unlabeled\"", ":", "False", ",", "\n", "\"unlabeled_factor\"", ":", "0", ",", "\n", "}", "\n", "return", "reqs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.set_hyperparams": [[58, 60], ["None"], "methods", ["None"], ["", "def", "set_hyperparams", "(", "self", ",", "hyperparams", ")", ":", "\n", "        ", "self", ".", "hyperparams", "=", "hyperparams", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.get_hyperparams": [[61, 68], ["hasattr", "print"], "methods", ["None"], ["", "def", "get_hyperparams", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"hyperparams\"", ")", ":", "\n", "            ", "return", "self", ".", "hyperparams", "\n", "", "else", ":", "\n", "# TODO: set hyperparams (at least to None) for all predictors", "\n", "            ", "print", "(", "\"no hyperparams set\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.reset_hyperparams": [[69, 71], ["None"], "methods", ["None"], ["", "", "def", "reset_hyperparams", "(", "self", ")", ":", "\n", "        ", "self", ".", "hyperparams", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.get_hpo_wrapper": [[72, 78], ["hasattr"], "methods", ["None"], ["", "def", "get_hpo_wrapper", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"hpo_wrapper\"", ")", ":", "\n", "            ", "return", "self", ".", "hpo_wrapper", "\n", "", "else", ":", "\n", "# TODO: set hpo_wrapper to a boolean for all predictors", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v2.ZeroCostV2.__init__": [[29, 45], ["torch.device", "naslib.utils.utils.get_project_root", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "batch_size", "=", "64", ",", "method_type", "=", "\"jacov\"", ")", ":", "\n", "# available zero-cost method types: 'jacov', 'snip', 'synflow', 'grad_norm', 'fisher', 'grasp'", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataload", "=", "\"random\"", "\n", "self", ".", "num_imgs_or_batches", "=", "1", "\n", "self", ".", "method_type", "=", "method_type", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "config", ".", "data", "=", "\"{}/data\"", ".", "format", "(", "get_project_root", "(", ")", ")", "\n", "self", ".", "config", "=", "config", "\n", "num_classes_dic", "=", "{", "\"cifar10\"", ":", "10", ",", "\"cifar100\"", ":", "100", ",", "\"ImageNet16-120\"", ":", "120", "}", "\n", "self", ".", "num_classes", "=", "None", "\n", "if", "self", ".", "config", ".", "dataset", "in", "num_classes_dic", ":", "\n", "            ", "self", ".", "num_classes", "=", "num_classes_dic", "[", "self", ".", "config", ".", "dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v2.ZeroCostV2.pre_process": [[46, 48], ["naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["", "", "def", "pre_process", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_loader", ",", "_", ",", "_", ",", "_", ",", "_", "=", "get_train_val_loaders", "(", "self", ".", "config", ",", "mode", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v2.ZeroCostV2.query": [[49, 146], ["numpy.array", "logger.info", "naslib.predictors.utils.models.nasbench1.Network.to", "naslib.predictors.utils.pruners.predictive.find_measures", "math.isnan", "test_set_scores.append", "torch.cuda.empty_cache", "naslib.predictors.utils.models.nasbench2.get_model_from_arch_str", "naslib.predictors.utils.models.nasbench2.get_arch_str_from_model", "len", "print", "naslib.search_spaces.darts.conversions.convert_compact_to_genotype", "naslib.predictors.utils.models.build_darts_net.NetworkCIFAR", "sorted", "naslib.predictors.utils.models.nasbench1_spec._ToModelSpec", "naslib.predictors.utils.models.nasbench1.Network"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.pruners.predictive.find_measures", "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.get_model_from_arch_str", "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.get_arch_str_from_model", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec._ToModelSpec"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ")", ":", "\n", "\n", "        ", "test_set_scores", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "test_arch", "in", "xtest", ":", "\n", "            ", "count", "+=", "1", "\n", "logger", ".", "info", "(", "\"zero cost: {} of {}\"", ".", "format", "(", "count", ",", "len", "(", "xtest", ")", ")", ")", "\n", "if", "\"nasbench201\"", "in", "self", ".", "config", ".", "search_space", ":", "\n", "                ", "ops_to_nb201", "=", "{", "\n", "\"AvgPool1x1\"", ":", "\"avg_pool_3x3\"", ",", "\n", "\"ReLUConvBN1x1\"", ":", "\"nor_conv_1x1\"", ",", "\n", "\"ReLUConvBN3x3\"", ":", "\"nor_conv_3x3\"", ",", "\n", "\"Identity\"", ":", "\"skip_connect\"", ",", "\n", "\"Zero\"", ":", "\"none\"", ",", "\n", "}", "\n", "# convert the naslib representation to nasbench201", "\n", "cell", "=", "test_arch", ".", "edges", "[", "2", ",", "3", "]", ".", "op", "\n", "edge_op_dict", "=", "{", "\n", "(", "i", ",", "j", ")", ":", "ops_to_nb201", "[", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "\"op\"", "]", ".", "get_op_name", "]", "\n", "for", "i", ",", "j", "in", "cell", ".", "edges", "\n", "}", "\n", "op_edge_list", "=", "[", "\n", "\"{}~{}\"", ".", "format", "(", "edge_op_dict", "[", "(", "i", ",", "j", ")", "]", ",", "i", "-", "1", ")", "\n", "for", "i", ",", "j", "in", "sorted", "(", "edge_op_dict", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "]", "\n", "arch_str", "=", "\"|{}|+|{}|{}|+|{}|{}|{}|\"", ".", "format", "(", "*", "op_edge_list", ")", "\n", "arch_config", "=", "{", "\n", "\"name\"", ":", "\"infer.tiny\"", ",", "\n", "\"C\"", ":", "16", ",", "\n", "\"N\"", ":", "5", ",", "\n", "\"arch_str\"", ":", "arch_str", ",", "\n", "\"num_classes\"", ":", "self", ".", "num_classes", ",", "\n", "}", "\n", "network", "=", "nas201_arch", ".", "get_model_from_arch_str", "(", "\n", "arch_str", ",", "self", ".", "num_classes", "\n", ")", "# create the network from configuration", "\n", "# zero-cost-proxy author has the following checking lines (which I think might be optional)", "\n", "arch_str2", "=", "nas201_arch", ".", "get_arch_str_from_model", "(", "network", ")", "\n", "if", "arch_str", "!=", "arch_str2", ":", "\n", "                    ", "print", "(", "\n", "f\"Value Error: orig_arch={arch_str}, convert_arch={arch_str2}\"", "\n", ")", "\n", "measure_score", "=", "-", "10e8", "\n", "return", "measure_score", "\n", "\n", "", "", "elif", "\"darts\"", "in", "self", ".", "config", ".", "search_space", ":", "\n", "                ", "test_genotype", "=", "convert_compact_to_genotype", "(", "test_arch", ".", "compact", ")", "\n", "arch_config", "=", "{", "\n", "\"name\"", ":", "\"darts\"", ",", "\n", "\"C\"", ":", "32", ",", "\n", "\"layers\"", ":", "8", ",", "\n", "\"genotype\"", ":", "test_genotype", ",", "\n", "\"num_classes\"", ":", "self", ".", "num_classes", ",", "\n", "\"auxiliary\"", ":", "False", ",", "\n", "}", "\n", "network", "=", "NetworkCIFAR", "(", "arch_config", ")", "\n", "\n", "", "elif", "\"nasbench101\"", "in", "self", ".", "config", ".", "search_space", ":", "\n", "                ", "spec", "=", "nasbench1_spec", ".", "_ToModelSpec", "(", "\n", "test_arch", ".", "spec", "[", "\"matrix\"", "]", ",", "test_arch", ".", "spec", "[", "\"ops\"", "]", "\n", ")", "\n", "network", "=", "nas101_arch", ".", "Network", "(", "\n", "spec", ",", "\n", "stem_out", "=", "128", ",", "\n", "num_stacks", "=", "3", ",", "\n", "num_mods", "=", "3", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", ")", "\n", "\n", "", "network", "=", "network", ".", "to", "(", "self", ".", "device", ")", "\n", "score", "=", "predictive", ".", "find_measures", "(", "\n", "network", ",", "\n", "self", ".", "train_loader", ",", "\n", "(", "self", ".", "dataload", ",", "self", ".", "num_imgs_or_batches", ",", "self", ".", "num_classes", ")", ",", "\n", "self", ".", "device", ",", "\n", "measure_names", "=", "[", "self", ".", "method_type", "]", ",", "\n", ")", "\n", "if", "math", ".", "isnan", "(", "score", ")", ":", "\n", "                ", "score", "=", "-", "1e8", "\n", "\n", "", "if", "(", "\n", "\"nasbench101\"", "in", "self", ".", "config", ".", "search_space", "\n", "and", "self", ".", "method_type", "==", "\"jacov\"", "\n", ")", ":", "\n", "                ", "score", "=", "-", "score", "\n", "", "elif", "\"darts\"", "in", "self", ".", "config", ".", "search_space", "and", "self", ".", "method_type", "in", "[", "\n", "\"fisher\"", ",", "\n", "\"grad_norm\"", ",", "\n", "\"synflow\"", ",", "\n", "\"snip\"", ",", "\n", "]", ":", "\n", "                ", "score", "=", "-", "score", "\n", "\n", "", "test_set_scores", ".", "append", "(", "score", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "test_set_scores", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.ControllerDataset.__init__": [[108, 117], ["super().__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "targets", "=", "None", ",", "train", "=", "True", ",", "sos_id", "=", "0", ",", "eos_id", "=", "0", ")", ":", "\n", "        ", "super", "(", "ControllerDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "targets", ")", "\n", "", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "sos_id", "=", "sos_id", "\n", "self", ".", "eos_id", "=", "eos_id", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.ControllerDataset.__getitem__": [[118, 139], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "encoder_input", "=", "self", ".", "inputs", "[", "index", "]", "\n", "encoder_target", "=", "None", "\n", "if", "self", ".", "targets", "is", "not", "None", ":", "\n", "            ", "encoder_target", "=", "[", "self", ".", "targets", "[", "index", "]", "]", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "decoder_input", "=", "[", "self", ".", "sos_id", "]", "+", "encoder_input", "[", ":", "-", "1", "]", "\n", "sample", "=", "{", "\n", "\"encoder_input\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "\"encoder_target\"", ":", "torch", ".", "FloatTensor", "(", "encoder_target", ")", ",", "\n", "\"decoder_input\"", ":", "torch", ".", "LongTensor", "(", "decoder_input", ")", ",", "\n", "\"decoder_target\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "sample", "=", "{", "\n", "\"encoder_input\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "\"decoder_target\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "}", "\n", "if", "encoder_target", "is", "not", "None", ":", "\n", "                ", "sample", "[", "\"encoder_target\"", "]", "=", "torch", ".", "FloatTensor", "(", "encoder_target", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.ControllerDataset.__len__": [[140, 142], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Encoder.__init__": [[145, 183], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "omni_seminas.Encoder.mlp.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "omni_seminas.Encoder.mlp.append", "omni_seminas.Encoder.mlp.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "mlp_layers", "=", "mlp_layers", "\n", "self", ".", "mlp_hidden_size", "=", "mlp_hidden_size", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "True", ",", "\n", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", "*", "2", ",", "self", ".", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "mlp_layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "mlp_hidden_size", ")", ")", "\n", "", "elif", "i", "==", "self", ".", "mlp_layers", "-", "1", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "mlp_hidden_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "mlp_hidden_size", ",", "self", ".", "mlp_hidden_size", ")", ")", "\n", "", "", "self", ".", "regressor", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Encoder.forward_predictor": [[184, 195], ["enumerate", "omni_seminas.Encoder.regressor", "mlp_layer", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "math.sqrt", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward_predictor", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "for", "i", ",", "mlp_layer", "in", "enumerate", "(", "self", ".", "mlp", ")", ":", "\n", "            ", "x", "=", "mlp_layer", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "if", "i", "!=", "self", ".", "mlp_layers", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "x", "=", "self", ".", "regressor", "(", "x", ")", "\n", "predict_value", "=", "x", "\n", "return", "predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Encoder.forward": [[196, 221], ["omni_seminas.Encoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "omni_seminas.Encoder.rnn", "omni_seminas.Encoder.out_proj", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "enumerate", "omni_seminas.Encoder.regressor", "mlp_layer", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "math.sqrt", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "encoder_outputs", "=", "x", "\n", "encoder_hidden", "=", "hidden", "\n", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "arch_emb", "=", "x", "\n", "\n", "residual", "=", "x", "\n", "for", "i", ",", "mlp_layer", "in", "enumerate", "(", "self", ".", "mlp", ")", ":", "\n", "            ", "x", "=", "mlp_layer", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "if", "i", "!=", "self", ".", "mlp_layers", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "x", "=", "self", ".", "regressor", "(", "x", ")", "\n", "predict_value", "=", "x", "\n", "return", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Encoder.infer": [[222, 247], ["omni_seminas.Encoder.", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "omni_seminas.Encoder.forward_predictor", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Encoder.forward_predictor"], ["", "def", "infer", "(", "self", ",", "x", ",", "predict_lambda", ",", "direction", "=", "\"-\"", ")", ":", "\n", "        ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "=", "self", "(", "x", ")", "\n", "grads_on_outputs", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "predict_value", ",", "encoder_outputs", ",", "torch", ".", "ones_like", "(", "predict_value", ")", "\n", ")", "[", "0", "]", "\n", "if", "direction", "==", "\"+\"", ":", "\n", "            ", "new_encoder_outputs", "=", "encoder_outputs", "+", "predict_lambda", "*", "grads_on_outputs", "\n", "", "elif", "direction", "==", "\"-\"", ":", "\n", "            ", "new_encoder_outputs", "=", "encoder_outputs", "-", "predict_lambda", "*", "grads_on_outputs", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Direction must be + or -, got {} instead\"", ".", "format", "(", "direction", ")", "\n", ")", "\n", "", "new_encoder_outputs", "=", "F", ".", "normalize", "(", "new_encoder_outputs", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "new_arch_emb", "=", "torch", ".", "mean", "(", "new_encoder_outputs", ",", "dim", "=", "1", ")", "\n", "new_arch_emb", "=", "F", ".", "normalize", "(", "new_arch_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "new_predict_value", "=", "self", ".", "forward_predictor", "(", "new_arch_emb", ")", "\n", "return", "(", "\n", "encoder_outputs", ",", "\n", "encoder_hidden", ",", "\n", "arch_emb", ",", "\n", "predict_value", ",", "\n", "new_encoder_outputs", ",", "\n", "new_arch_emb", ",", "\n", "new_predict_value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Attention.__init__": [[255, 266], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "source_dim", "=", "None", ",", "output_dim", "=", "None", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "source_dim", "is", "None", ":", "\n", "            ", "source_dim", "=", "input_dim", "\n", "", "if", "output_dim", "is", "None", ":", "\n", "            ", "output_dim", "=", "input_dim", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "source_dim", "=", "source_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "source_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "output_proj", "=", "nn", ".", "Linear", "(", "input_dim", "+", "source_dim", ",", "output_dim", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Attention.forward": [[267, 293], ["input.size", "source_hids.size", "omni_seminas.Attention.input_proj", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "source_hids.transpose", "torch.softmax().view.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "float", "torch.softmax().view.view", "omni_seminas.Attention.output_proj", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "source_hids", ",", "mask", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "source_len", "=", "source_hids", ".", "size", "(", "1", ")", "\n", "\n", "# (batch, tgt_len, input_dim) -> (batch, tgt_len, source_dim)", "\n", "x", "=", "self", ".", "input_proj", "(", "input", ")", "\n", "\n", "# (batch, tgt_len, source_dim) * (batch, src_len, source_dim) -> (batch, tgt_len, src_len)", "\n", "attn", "=", "torch", ".", "bmm", "(", "x", ",", "source_hids", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", ".", "data", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "\"inf\"", ")", ")", "\n", "", "attn", "=", "F", ".", "softmax", "(", "attn", ".", "view", "(", "-", "1", ",", "source_len", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "\n", "batch_size", ",", "-", "1", ",", "source_len", "\n", ")", "\n", "\n", "# (batch, tgt_len, src_len) * (batch, src_len, source_dim) -> (batch, tgt_len, source_dim)", "\n", "mix", "=", "torch", ".", "bmm", "(", "attn", ",", "source_hids", ")", "\n", "\n", "# concat -> (batch, tgt_len, source_dim + input_dim)", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "mix", ",", "input", ")", ",", "dim", "=", "2", ")", "\n", "# output -> (batch, tgt_len, output_dim)", "\n", "output", "=", "torch", ".", "tanh", "(", "\n", "self", ".", "output_proj", "(", "combined", ".", "view", "(", "-", "1", ",", "self", ".", "input_dim", "+", "self", ".", "source_dim", ")", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "output_dim", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Decoder.__init__": [[296, 327], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "omni_seminas.Attention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "range", "math.floor", "omni_seminas.Decoder.offsets.append", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "layers", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", "\n", "self", ".", "sos_id", "=", "SOS_ID", "\n", "self", ".", "eos_id", "=", "EOS_ID", "\n", "self", ".", "init_input", "=", "None", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention", "=", "Attention", "(", "self", ".", "hidden_size", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "vocab_size", ")", "\n", "self", ".", "n", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "sqrt", "(", "(", "self", ".", "length", "+", "1", ")", "*", "2", ")", ")", ")", "\n", "self", ".", "offsets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "self", ".", "offsets", ".", "append", "(", "(", "i", "+", "3", ")", "*", "i", "//", "2", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Decoder.forward": [[328, 376], ["omni_seminas.Decoder._init_state", "encoder_hidden[].size", "encoder_hidden[].new().fill_().long", "encoder_hidden[].new().fill_().long", "range", "torch.dropout.size", "torch.dropout.size", "omni_seminas.Decoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "omni_seminas.Decoder.rnn", "omni_seminas.Decoder.attention", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "predicted_softmax.view.view.view", "omni_seminas.Decoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "omni_seminas.Decoder.rnn", "omni_seminas.Decoder.attention", "omni_seminas.Decoder.out", "omni_seminas.Decoder.forward.decode"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Decoder._init_state"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "encoder_hidden", "=", "None", ",", "encoder_outputs", "=", "None", ")", ":", "\n", "        ", "decoder_hidden", "=", "self", ".", "_init_state", "(", "encoder_hidden", ")", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "x", ".", "size", "(", "1", ")", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ",", "decoder_hidden", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "residual", "=", "x", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "x", ",", "encoder_outputs", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "predicted_softmax", "=", "F", ".", "log_softmax", "(", "\n", "self", ".", "out", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_size", ")", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "predicted_softmax", "=", "predicted_softmax", ".", "view", "(", "bsz", ",", "tgt_len", ",", "-", "1", ")", "\n", "return", "predicted_softmax", ",", "None", "\n", "\n", "# inference", "\n", "", "assert", "x", "is", "None", "\n", "bsz", "=", "encoder_hidden", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "length", "=", "self", ".", "length", "\n", "decoder_input", "=", "encoder_hidden", "[", "0", "]", ".", "new", "(", "bsz", ",", "1", ")", ".", "fill_", "(", "0", ")", ".", "long", "(", ")", "\n", "decoded_ids", "=", "encoder_hidden", "[", "0", "]", ".", "new", "(", "bsz", ",", "0", ")", ".", "fill_", "(", "0", ")", ".", "long", "(", ")", "\n", "\n", "def", "decode", "(", "step", ",", "output", ")", ":", "\n", "            ", "if", "step", "in", "self", ".", "offsets", ":", "# sample operation, should be in [3, 7]", "\n", "                ", "symbol", "=", "output", "[", ":", ",", "3", ":", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "3", "\n", "", "else", ":", "# sample connection, should be in [1, 2]", "\n", "                ", "symbol", "=", "output", "[", ":", ",", "1", ":", "3", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "1", "\n", "", "return", "symbol", "\n", "\n", "", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "x", "=", "self", ".", "embedding", "(", "decoder_input", "[", ":", ",", "i", ":", "i", "+", "1", "]", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "decoder_hidden", "=", "self", ".", "rnn", "(", "x", ",", "decoder_hidden", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "residual", "=", "x", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "x", ",", "encoder_outputs", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "output", "=", "self", ".", "out", "(", "x", ".", "squeeze", "(", "1", ")", ")", "\n", "symbol", "=", "decode", "(", "i", ",", "output", ")", "\n", "decoded_ids", "=", "torch", ".", "cat", "(", "(", "decoded_ids", ",", "symbol", ")", ",", "axis", "=", "-", "1", ")", "\n", "decoder_input", "=", "torch", ".", "cat", "(", "(", "decoder_input", ",", "symbol", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "None", ",", "decoded_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.Decoder._init_state": [[377, 386], ["isinstance", "tuple"], "methods", ["None"], ["", "def", "_init_state", "(", "self", ",", "encoder_hidden", ")", ":", "\n", "        ", "\"\"\"Initialize the encoder hidden state.\"\"\"", "\n", "if", "encoder_hidden", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "encoder_hidden", ",", "tuple", ")", ":", "\n", "            ", "encoder_hidden", "=", "tuple", "(", "[", "h", "for", "h", "in", "encoder_hidden", "]", ")", "\n", "", "else", ":", "\n", "            ", "encoder_hidden", "=", "encoder_hidden", "\n", "", "return", "encoder_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.NAO.__init__": [[390, 423], ["torch.Module.__init__", "Encoder().to", "Decoder().to", "omni_seminas.NAO.flatten_parameters", "omni_seminas.Encoder", "omni_seminas.Decoder"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoder_layers", ",", "\n", "decoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", "decoder_length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NAO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "encoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "decoder_layers", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "decoder_length", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "flatten_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.NAO.flatten_parameters": [[424, 427], ["omni_seminas.NAO.encoder.rnn.flatten_parameters", "omni_seminas.NAO.decoder.rnn.flatten_parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters"], ["", "def", "flatten_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "self", ".", "decoder", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.NAO.forward": [[428, 440], ["omni_seminas.NAO.encoder", "omni_seminas.NAO.decoder", "input_variable.to", "arch_emb.unsqueeze().to", "arch_emb.unsqueeze().to", "target_variable.to", "encoder_outputs.to", "arch_emb.unsqueeze", "arch_emb.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_variable", ",", "target_variable", "=", "None", ")", ":", "\n", "        ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "=", "self", ".", "encoder", "(", "\n", "input_variable", ".", "to", "(", "device", ")", "\n", ")", "\n", "decoder_hidden", "=", "(", "\n", "arch_emb", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", "arch_emb", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "decoder_outputs", ",", "archs", "=", "self", ".", "decoder", "(", "\n", "target_variable", ".", "to", "(", "device", ")", ",", "decoder_hidden", ",", "encoder_outputs", ".", "to", "(", "device", ")", "\n", ")", "\n", "return", "predict_value", ",", "decoder_outputs", ",", "archs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.NAO.generate_new_arch": [[441, 456], ["omni_seminas.NAO.encoder.infer", "omni_seminas.NAO.decoder", "new_arch_emb.unsqueeze", "new_arch_emb.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Encoder.infer"], ["", "def", "generate_new_arch", "(", "self", ",", "input_variable", ",", "predict_lambda", "=", "1", ",", "direction", "=", "\"-\"", ")", ":", "\n", "        ", "(", "\n", "encoder_outputs", ",", "\n", "encoder_hidden", ",", "\n", "arch_emb", ",", "\n", "predict_value", ",", "\n", "new_encoder_outputs", ",", "\n", "new_arch_emb", ",", "\n", "new_predict_value", ",", "\n", ")", "=", "self", ".", "encoder", ".", "infer", "(", "input_variable", ",", "predict_lambda", ",", "direction", "=", "direction", ")", "\n", "new_encoder_hidden", "=", "(", "new_arch_emb", ".", "unsqueeze", "(", "0", ")", ",", "new_arch_emb", ".", "unsqueeze", "(", "0", ")", ")", "\n", "decoder_outputs", ",", "new_archs", "=", "self", ".", "decoder", "(", "\n", "None", ",", "new_encoder_hidden", ",", "new_encoder_outputs", "\n", ")", "\n", "return", "new_archs", ",", "new_predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.__init__": [[524, 556], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoding_type", "=", "\"seminas\"", ",", "\n", "ss_type", "=", "None", ",", "\n", "semi", "=", "True", ",", "\n", "hpo_wrapper", "=", "False", ",", "\n", "config", "=", "None", ",", "\n", "run_pre_compute", "=", "True", ",", "\n", "jacov_onehot", "=", "True", ",", "\n", "synthetic_factor", "=", "1", ",", "\n", "max_zerocost", "=", "np", ".", "inf", ",", "\n", "zero_cost", "=", "[", "]", ",", "\n", "lce", "=", "[", "]", ",", "\n", ")", ":", "\n", "        ", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "semi", "=", "semi", "\n", "self", ".", "synthetic_factor", "=", "synthetic_factor", "\n", "self", ".", "lce", "=", "lce", "\n", "self", ".", "ss_type", "=", "ss_type", "\n", "self", ".", "hpo_wrapper", "=", "hpo_wrapper", "\n", "self", ".", "max_zerocost", "=", "max_zerocost", "\n", "self", ".", "default_hyperparams", "=", "{", "\"gcn_hidden\"", ":", "64", ",", "\"batch_size\"", ":", "100", ",", "\"lr\"", ":", "1e-3", "}", "\n", "self", ".", "hyperparams", "=", "None", "\n", "self", ".", "config", "=", "config", "\n", "if", "config", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "", "self", ".", "zero_cost", "=", "zero_cost", "\n", "self", ".", "run_pre_compute", "=", "run_pre_compute", "\n", "self", ".", "min_fidelity", "=", "3", "\n", "\n", "# todo: this should be generalized to any zero-cost method", "\n", "self", ".", "jacov_onehot", "=", "jacov_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.prepare_features": [[557, 596], ["enumerate", "range", "range", "naslib.predictors.utils.encodings.encode", "omni_seminas.convert_arch_to_seq", "len", "range", "len", "naslib.predictors.utils.bin_thresholds.discretize", "len", "len", "naslib.predictors.utils.bin_thresholds.discretize"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.convert_arch_to_seq", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.bin_thresholds.discretize", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.bin_thresholds.discretize"], ["", "def", "prepare_features", "(", "self", ",", "xdata", ",", "zc_info", "=", "None", ",", "lc_info", "=", "None", ")", ":", "\n", "# this concatenates architecture features with zero-cost features", "\n", "        ", "full_xdata", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "xdata", ")", ")", "]", "\n", "\n", "if", "self", ".", "encoding_type", "is", "not", "None", ":", "\n", "# convert the architecture to a categorical encoding", "\n", "            ", "for", "i", ",", "arch", "in", "enumerate", "(", "xdata", ")", ":", "\n", "                ", "encoded", "=", "encode", "(", "\n", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", "\n", ")", "\n", "seq", "=", "convert_arch_to_seq", "(", "\n", "encoded", "[", "\"adjacency\"", "]", ",", "encoded", "[", "\"operations\"", "]", ",", "max_n", "=", "self", ".", "max_n", "\n", ")", "\n", "full_xdata", "[", "i", "]", "=", "[", "*", "full_xdata", "[", "i", "]", ",", "*", "seq", "]", "\n", "\n", "", "", "if", "len", "(", "self", ".", "zero_cost", ")", ">", "0", "and", "self", ".", "train_size", "<=", "self", ".", "max_zerocost", ":", "\n", "# add zero_cost features", "\n", "            ", "for", "key", "in", "self", ".", "zero_cost", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "xdata", ")", ")", ":", "\n", "# todo: the following code is still specific to jacov. Make it for any zerocost", "\n", "# currently only one_hot zc features are supported", "\n", "                    ", "jac_encoded", "=", "discretize", "(", "\n", "zc_info", "[", "\"jacov_scores\"", "]", "[", "i", "]", ",", "\n", "upper_bounds", "=", "self", ".", "jacov_bins", ",", "\n", "one_hot", "=", "self", ".", "jacov_onehot", ",", "\n", ")", "\n", "jac_encoded", "=", "[", "jac", "+", "self", ".", "zc_offset", "for", "jac", "in", "jac_encoded", "]", "\n", "full_xdata", "[", "i", "]", "=", "[", "*", "full_xdata", "[", "i", "]", ",", "*", "jac_encoded", "]", "\n", "\n", "", "", "", "if", "self", ".", "add_lce", ":", "\n", "# add LCE features", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "xdata", ")", ")", ":", "\n", "                ", "sotle_encoded", "=", "discretize", "(", "\n", "lc_info", "[", "i", "]", "[", "\"TRAIN_LOSS_lc\"", "]", "[", "-", "1", "]", ",", "upper_bounds", "=", "self", ".", "lce_bins", "\n", ")", "\n", "sotle_encoded", "=", "[", "s", "+", "self", ".", "lce_offset", "for", "s", "in", "sotle_encoded", "]", "\n", "full_xdata", "[", "i", "]", "=", "[", "*", "full_xdata", "[", "i", "]", ",", "*", "sotle_encoded", "]", "\n", "\n", "", "", "return", "full_xdata", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.generate_synthetic_labels": [[597, 618], ["omni_seminas.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "len", "len", "len", "omni_seminas.move_to_cuda", "model.encoder", "predict_value.data.squeeze().tolist", "predict_value.data.squeeze"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "def", "generate_synthetic_labels", "(", "self", ",", "model", ",", "synthetic_input", ")", ":", "\n", "\n", "# use the model to label the synthetic data", "\n", "        ", "synthetic_dataset", "=", "ControllerDataset", "(", "synthetic_input", ",", "None", ",", "False", ")", "\n", "synthetic_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "synthetic_dataset", ",", "\n", "batch_size", "=", "len", "(", "synthetic_dataset", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "synthetic_target", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "for", "sample", "in", "synthetic_queue", ":", "\n", "                ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "_", ",", "_", ",", "_", ",", "predict_value", "=", "model", ".", "encoder", "(", "encoder_input", ")", "\n", "synthetic_target", "+=", "predict_value", ".", "data", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "assert", "len", "(", "synthetic_input", ")", "==", "len", "(", "synthetic_target", ")", "\n", "return", "synthetic_target", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.check_fidelity": [[619, 628], ["len"], "methods", ["None"], ["", "def", "check_fidelity", "(", "self", ",", "train_info", ",", "key", "=", "\"TRAIN_LOSS_lc\"", ")", ":", "\n", "# check if we will be using SoTL in the features", "\n", "        ", "if", "train_info", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "elif", "key", "not", "in", "train_info", "[", "0", "]", ":", "\n", "            ", "return", "False", "\n", "", "elif", "len", "(", "train_info", "[", "0", "]", "[", "key", "]", ")", "<", "self", ".", "min_fidelity", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.fit": [[629, 754], ["len", "omni_seminas.OmniSemiNASPredictor.check_fidelity", "print", "NAO().to", "numpy.mean", "numpy.std", "omni_seminas.OmniSemiNASPredictor.prepare_features", "range", "omni_seminas.OmniSemiNASPredictor.default_hyperparams.copy", "len", "naslib.predictors.utils.bin_thresholds.get_bins", "naslib.predictors.utils.bin_thresholds.get_lce_bins", "print", "print", "omni_seminas.train_controller", "print", "len", "len", "len", "len", "omni_seminas.NAO", "print", "omni_seminas.OmniSemiNASPredictor.prepare_features", "omni_seminas.OmniSemiNASPredictor.generate_synthetic_labels", "print", "omni_seminas.train_controller", "print", "len", "len", "numpy.ceil().astype", "list", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.check_fidelity", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.prepare_features", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.bin_thresholds.get_bins", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.bin_thresholds.get_lce_bins", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.train_controller", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.prepare_features", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.generate_synthetic_labels", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.train_controller"], ["", "def", "fit", "(", "\n", "self", ",", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "train_info", "=", "None", ",", "\n", "wd", "=", "0", ",", "\n", "iterations", "=", "1", ",", "\n", "epochs", "=", "50", ",", "\n", "pretrain_epochs", "=", "50", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "train_size", "=", "len", "(", "xtrain", ")", "\n", "self", ".", "add_lce", "=", "self", ".", "check_fidelity", "(", "train_info", ")", "\n", "print", "(", "\"using lce:\"", ",", "self", ".", "add_lce", ")", "\n", "\n", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "batch_size", "=", "self", ".", "hyperparams", "[", "\"batch_size\"", "]", "\n", "gcn_hidden", "=", "self", ".", "hyperparams", "[", "\"gcn_hidden\"", "]", "\n", "lr", "=", "self", ".", "hyperparams", "[", "\"lr\"", "]", "\n", "up_sample_ratio", "=", "10", "\n", "\n", "# todo: these could be made non class attributes", "\n", "if", "self", ".", "ss_type", "==", "\"nasbench101\"", ":", "\n", "            ", "self", ".", "max_n", "=", "7", "\n", "self", ".", "encoder_length", "=", "27", "\n", "self", ".", "decoder_length", "=", "27", "\n", "self", ".", "vocab_size", "=", "7", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nasbench201\"", ":", "\n", "            ", "self", ".", "max_n", "=", "8", "\n", "self", ".", "encoder_length", "=", "35", "\n", "self", ".", "decoder_length", "=", "35", "\n", "self", ".", "vocab_size", "=", "9", "\n", "", "elif", "self", ".", "ss_type", "==", "\"darts\"", ":", "\n", "            ", "self", ".", "max_n", "=", "35", "\n", "self", ".", "encoder_length", "=", "629", "\n", "self", ".", "decoder_length", "=", "629", "\n", "self", ".", "vocab_size", "=", "13", "\n", "\n", "", "full_vocab_size", "=", "self", ".", "vocab_size", "\n", "\n", "if", "len", "(", "self", ".", "zero_cost", ")", ">", "0", ":", "\n", "# todo: this should be generalized to any zero-cost method", "\n", "            ", "self", ".", "jacov_bins", "=", "get_bins", "(", "\n", "\"jacov\"", ",", "\n", "train_size", "=", "len", "(", "xtrain", ")", ",", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", ")", "\n", "\n", "# modify feature length and vocab size based on encoding type and num bins", "\n", "assert", "self", ".", "jacov_onehot", ",", "\"Zero-cost categorical currently not supported\"", "\n", "self", ".", "encoder_length", "+=", "len", "(", "self", ".", "jacov_bins", ")", "+", "1", "\n", "self", ".", "decoder_length", "+=", "len", "(", "self", ".", "jacov_bins", ")", "+", "1", "\n", "self", ".", "zc_offset", "=", "full_vocab_size", "\n", "full_vocab_size", "+=", "2", "\n", "\n", "", "self", ".", "lce_bins", "=", "[", "]", "\n", "if", "self", ".", "add_lce", ":", "\n", "            ", "self", ".", "lce_bins", "=", "get_lce_bins", "(", "train_info", ")", "\n", "self", ".", "encoder_length", "+=", "len", "(", "self", ".", "lce_bins", ")", "+", "1", "\n", "self", ".", "decoder_length", "+=", "len", "(", "self", ".", "lce_bins", ")", "+", "1", "\n", "self", ".", "lce_offset", "=", "full_vocab_size", "\n", "full_vocab_size", "+=", "2", "\n", "\n", "", "self", ".", "model", "=", "NAO", "(", "\n", "encoder_layers", ",", "\n", "decoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "full_vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "self", ".", "encoder_length", ",", "\n", "self", ".", "decoder_length", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "# get mean and std, normlize accuracies", "\n", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "ytrain_normed", "=", "(", "ytrain", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "# encode the training data (including zero cost if applicable)", "\n", "xtrain_full_features", "=", "self", ".", "prepare_features", "(", "\n", "xtrain", ",", "zc_info", "=", "self", ".", "xtrain_zc_info", ",", "lc_info", "=", "train_info", "\n", ")", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "            ", "print", "(", "\"Iteration {}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "\n", "# Pre-train", "\n", "print", "(", "\"Pre-train EPD\"", ")", "\n", "train_controller", "(", "\n", "self", ".", "model", ",", "xtrain_full_features", ",", "ytrain_normed", ",", "pretrain_epochs", "\n", ")", "\n", "print", "(", "\"Finish pre-training EPD\"", ")", "\n", "\n", "if", "self", ".", "semi", "and", "not", "self", ".", "add_lce", ":", "\n", "# Check that we have unlabeled data from either pre_compute() or set_pre_compute()", "\n", "                ", "assert", "self", ".", "unlabeled", "is", "not", "None", ",", "\"Unlabeled data was never generated\"", "\n", "print", "(", "\"Generate synthetic data for EPD\"", ")", "\n", "num_synthetic", "=", "self", ".", "synthetic_factor", "*", "len", "(", "xtrain", ")", "\n", "synthetic_full_features", "=", "self", ".", "prepare_features", "(", "\n", "self", ".", "unlabeled", "[", ":", "num_synthetic", "]", ",", "zc_info", "=", "self", ".", "unlabeled_zc_info", "\n", ")", "\n", "synthetic_target", "=", "self", ".", "generate_synthetic_labels", "(", "\n", "self", ".", "model", ",", "synthetic_full_features", "\n", ")", "\n", "if", "up_sample_ratio", "is", "None", ":", "\n", "                    ", "up_sample_ratio", "=", "np", ".", "ceil", "(", "m", "/", "len", "(", "xtrain_full_features", ")", ")", ".", "astype", "(", "\n", "np", ".", "int", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "up_sample_ratio", "=", "up_sample_ratio", "\n", "\n", "", "combined_input", "=", "(", "\n", "xtrain_full_features", "*", "up_sample_ratio", "+", "synthetic_full_features", "\n", ")", "\n", "combined_target", "=", "(", "\n", "list", "(", "ytrain_normed", ")", "*", "up_sample_ratio", "+", "synthetic_target", "\n", ")", "\n", "print", "(", "\"Train EPD\"", ")", "\n", "train_controller", "(", "self", ".", "model", ",", "combined_input", ",", "combined_target", ",", "epochs", ")", "\n", "print", "(", "\"Finish training EPD\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.query": [[755, 785], ["omni_seminas.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "omni_seminas.OmniSemiNASPredictor.model.eval", "numpy.concatenate", "numpy.squeeze", "omni_seminas.OmniSemiNASPredictor.prepare_features", "omni_seminas.OmniSemiNASPredictor.prepare_features", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "omni_seminas.move_to_cuda", "omni_seminas.move_to_cuda", "omni_seminas.OmniSemiNASPredictor.model", "numpy.concatenate.append", "prediction.cpu().numpy", "prediction.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.prepare_features", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.prepare_features", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda"], ["", "", "", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ",", "batch_size", "=", "100", ")", ":", "\n", "\n", "        ", "if", "self", ".", "run_pre_compute", ":", "\n", "# if we ran pre_compute(), the xtest zc scores are in self.xtest_zc_info", "\n", "            ", "test_data", "=", "self", ".", "prepare_features", "(", "\n", "xtest", ",", "zc_info", "=", "self", ".", "xtest_zc_info", ",", "lc_info", "=", "info", "\n", ")", "\n", "", "else", ":", "\n", "# otherwise, they will be in info (often used during NAS experiments)", "\n", "            ", "test_data", "=", "self", ".", "prepare_features", "(", "xtest", ",", "zc_info", "=", "info", ")", "\n", "", "test_dataset", "=", "ControllerDataset", "(", "test_data", ",", "None", ",", "False", ")", "\n", "test_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "pred", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", ",", "sample", "in", "enumerate", "(", "test_queue", ")", ":", "\n", "                ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "decoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_target\"", "]", ")", "\n", "prediction", ",", "_", ",", "_", "=", "self", ".", "model", "(", "encoder_input", ",", "decoder_target", ")", "\n", "pred", ".", "append", "(", "prediction", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "pred", "=", "np", ".", "concatenate", "(", "pred", ")", "\n", "return", "np", ".", "squeeze", "(", "pred", "*", "self", ".", "std", "+", "self", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.set_random_hyperparams": [[786, 800], ["omni_seminas.OmniSemiNASPredictor.default_hyperparams.copy", "int", "int", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"gcn_hidden\"", ":", "int", "(", "loguniform", "(", "16", ",", "128", ")", ")", ",", "\n", "\"batch_size\"", ":", "int", "(", "loguniform", "(", "32", ",", "256", ")", ")", ",", "\n", "\"lr\"", ":", "loguniform", "(", "0.00001", ",", "0.1", ")", ",", "\n", "}", "\n", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.pre_compute": [[801, 837], ["len", "naslib.utils.utils.get_train_val_loaders", "copy.deepcopy", "naslib.predictors.zerocost_v1.ZeroCostV1.query", "naslib.predictors.zerocost_v1.ZeroCostV1.query", "naslib.predictors.zerocost_v2.ZeroCostV2", "naslib.predictors.zerocost_v1.ZeroCostV1", "naslib.predictors.zerocost_v1.ZeroCostV1.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "pre_compute", "(", "self", ",", "xtrain", ",", "xtest", "=", "None", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        All of this computation could go into fit() and query(), but we do it\n        here to save time, so that we don't have to re-compute Jacobian covariances\n        for all train_sizes when running experiment_types that vary train size or fidelity.\n\n        This method computes zerocost info for the train set, test set, and synthetic set\n        (if applicable). It also stores the synthetic architectures.\n        \"\"\"", "\n", "self", ".", "xtrain_zc_info", "=", "{", "}", "\n", "self", ".", "xtest_zc_info", "=", "{", "}", "\n", "self", ".", "unlabeled_zc_info", "=", "{", "}", "\n", "self", ".", "unlabeled", "=", "unlabeled", "\n", "\n", "if", "len", "(", "self", ".", "zero_cost", ")", ">", "0", ":", "\n", "            ", "self", ".", "train_loader", ",", "_", ",", "_", ",", "_", ",", "_", "=", "utils", ".", "get_train_val_loaders", "(", "\n", "self", ".", "config", ",", "mode", "=", "\"train\"", "\n", ")", "\n", "\n", "for", "method_name", "in", "self", ".", "zero_cost", ":", "\n", "                ", "if", "self", ".", "ss_type", "in", "[", "\"nasbench101\"", ",", "\"darts\"", "]", ":", "\n", "                    ", "zc_method", "=", "ZeroCostV2", "(", "\n", "self", ".", "config", ",", "batch_size", "=", "64", ",", "method_type", "=", "method_name", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "zc_method", "=", "ZeroCostV1", "(", "\n", "self", ".", "config", ",", "batch_size", "=", "64", ",", "method_type", "=", "method_name", "\n", ")", "\n", "", "zc_method", ".", "train_loader", "=", "copy", ".", "deepcopy", "(", "self", ".", "train_loader", ")", "\n", "\n", "# save the raw scores, since bucketing depends on the train set size", "\n", "self", ".", "xtrain_zc_info", "[", "f\"{method_name}_scores\"", "]", "=", "zc_method", ".", "query", "(", "xtrain", ")", "\n", "self", ".", "xtest_zc_info", "[", "f\"{method_name}_scores\"", "]", "=", "zc_method", ".", "query", "(", "xtest", ")", "\n", "if", "unlabeled", "is", "not", "None", ":", "\n", "                    ", "self", ".", "unlabeled_zc_info", "[", "f\"{method_name}_scores\"", "]", "=", "zc_method", ".", "query", "(", "\n", "unlabeled", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.set_pre_computations": [[839, 859], ["None"], "methods", ["None"], ["", "", "", "", "def", "set_pre_computations", "(", "\n", "self", ",", "\n", "unlabeled", "=", "None", ",", "\n", "xtrain_zc_info", "=", "None", ",", "\n", "xtest_zc_info", "=", "None", ",", "\n", "unlabeled_zc_info", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        This is another way to add pre-computations, if they are done outside this class.\n        This is currently used in the NAS experiments; since the predictor is retrained constantly,\n        it avoids re-computing zero-cost scores.\n        \"\"\"", "\n", "if", "unlabeled", "is", "not", "None", ":", "\n", "            ", "self", ".", "unlabeled", "=", "unlabeled", "\n", "", "if", "xtrain_zc_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "xtrain_zc_info", "=", "xtrain_zc_info", "\n", "", "if", "xtest_zc_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "xtest_zc_info", "=", "xtest_zc_info", "\n", "", "if", "unlabeled_zc_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "unlabeled_zc_info", "=", "unlabeled_zc_info", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.OmniSemiNASPredictor.get_data_reqs": [[860, 881], ["len", "len"], "methods", ["None"], ["", "", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query, such as a partial learning curve,\n        or hyperparameters of the architecture\n        \"\"\"", "\n", "self", ".", "metric", "=", "None", "\n", "if", "len", "(", "self", ".", "lce", ")", ">", "0", ":", "\n", "# add the metrics needed for the lce predictors", "\n", "            ", "required_metric_dict", "=", "{", "\"sotle\"", ":", "Metric", ".", "TRAIN_LOSS", "}", "\n", "self", ".", "metric", "=", "[", "required_metric_dict", "[", "key", "]", "for", "key", "in", "self", ".", "lce", "]", "\n", "\n", "", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "len", "(", "self", ".", "lce", ")", ">", "0", ",", "\n", "\"metric\"", ":", "self", ".", "metric", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "{", "}", ",", "\n", "\"unlabeled\"", ":", "self", ".", "semi", ",", "\n", "\"unlabeled_factor\"", ":", "self", ".", "synthetic_factor", ",", "\n", "}", "\n", "return", "reqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.move_to_cuda": [[68, 72], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "tensor.cuda"], "function", ["None"], ["def", "move_to_cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.convert_arch_to_seq": [[75, 91], ["len", "range", "len", "len", "seq.append", "range", "seq.append", "seq.append", "range"], "function", ["None"], ["", "def", "convert_arch_to_seq", "(", "matrix", ",", "ops", ",", "max_n", "=", "8", ")", ":", "\n", "    ", "seq", "=", "[", "]", "\n", "n", "=", "len", "(", "matrix", ")", "\n", "max_n", "=", "max_n", "\n", "assert", "n", "==", "len", "(", "ops", ")", "\n", "for", "col", "in", "range", "(", "1", ",", "max_n", ")", ":", "\n", "        ", "if", "col", ">=", "n", ":", "\n", "            ", "seq", "+=", "[", "0", "for", "i", "in", "range", "(", "col", ")", "]", "\n", "seq", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "                ", "seq", ".", "append", "(", "matrix", "[", "row", "]", "[", "col", "]", "+", "1", ")", "\n", "", "seq", ".", "append", "(", "ops", "[", "col", "]", "+", "2", ")", "\n", "\n", "", "", "assert", "len", "(", "seq", ")", "==", "(", "max_n", "+", "2", ")", "*", "(", "max_n", "-", "1", ")", "/", "2", "\n", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.convert_seq_to_arch": [[94, 104], ["int", "range", "math.floor", "range", "ops.append", "math.sqrt", "range", "range", "len"], "function", ["None"], ["", "def", "convert_seq_to_arch", "(", "seq", ")", ":", "\n", "    ", "n", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "sqrt", "(", "(", "len", "(", "seq", ")", "+", "1", ")", "*", "2", ")", ")", ")", "\n", "matrix", "=", "[", "[", "0", "for", "_", "in", "range", "(", "n", ")", "]", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "ops", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "        ", "offset", "=", "(", "i", "+", "3", ")", "*", "i", "//", "2", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "            ", "matrix", "[", "j", "]", "[", "i", "+", "1", "]", "=", "seq", "[", "offset", "+", "j", "]", "-", "1", "\n", "", "ops", ".", "append", "(", "seq", "[", "offset", "+", "i", "+", "1", "]", "-", "2", ")", "\n", "", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.controller_train": [[458, 488], ["naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "model.train", "enumerate", "omni_seminas.move_to_cuda", "omni_seminas.move_to_cuda", "omni_seminas.move_to_cuda", "omni_seminas.move_to_cuda", "optimizer.zero_grad", "model", "torch.mse_loss", "torch.nll_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "move_to_cuda.size", "naslib.utils.utils.AverageMeter.update", "naslib.utils.utils.AverageMeter.update", "naslib.utils.utils.AverageMeter.update", "predict_value.squeeze", "move_to_cuda.squeeze", "log_prob.contiguous().view", "move_to_cuda.view", "model.parameters", "log_prob.size", "log_prob.contiguous"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "", "def", "controller_train", "(", "train_queue", ",", "model", ",", "optimizer", ")", ":", "\n", "\n", "    ", "objs", "=", "AverageMeter", "(", ")", "\n", "mse", "=", "AverageMeter", "(", ")", "\n", "nll", "=", "AverageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "sample", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "\n", "        ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "encoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_target\"", "]", ")", "\n", "decoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_input\"", "]", ")", "\n", "decoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_target\"", "]", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "predict_value", ",", "log_prob", ",", "arch", "=", "model", "(", "encoder_input", ",", "decoder_input", ")", "\n", "loss_1", "=", "F", ".", "mse_loss", "(", "predict_value", ".", "squeeze", "(", ")", ",", "encoder_target", ".", "squeeze", "(", ")", ")", "\n", "loss_2", "=", "F", ".", "nll_loss", "(", "\n", "log_prob", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "-", "1", ")", ")", ",", "decoder_target", ".", "view", "(", "-", "1", ")", "\n", ")", "\n", "loss", "=", "trade_off", "*", "loss_1", "+", "(", "1", "-", "trade_off", ")", "*", "loss_2", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_bound", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "n", "=", "encoder_input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "mse", ".", "update", "(", "loss_1", ".", "data", ",", "n", ")", "\n", "nll", ".", "update", "(", "loss_2", ".", "data", ",", "n", ")", "\n", "\n", "", "return", "objs", ".", "avg", ",", "mse", ".", "avg", ",", "nll", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.controller_infer": [[490, 503], ["model.eval", "enumerate", "omni_seminas.move_to_cuda", "model.zero_grad", "model.generate_new_arch", "new_arch_list.extend", "new_predict_values.extend", "new_arch.data.squeeze().tolist", "new_predict_value.data.squeeze().tolist", "new_arch.data.squeeze", "new_predict_value.data.squeeze"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.generate_new_arch", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "def", "controller_infer", "(", "queue", ",", "model", ",", "step", ",", "direction", "=", "\"+\"", ")", ":", "\n", "    ", "new_arch_list", "=", "[", "]", "\n", "new_predict_values", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "queue", ")", ":", "\n", "        ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "new_arch", ",", "new_predict_value", "=", "model", ".", "generate_new_arch", "(", "\n", "encoder_input", ",", "step", ",", "direction", "=", "direction", "\n", ")", "\n", "new_arch_list", ".", "extend", "(", "new_arch", ".", "data", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "new_predict_values", ".", "extend", "(", "new_predict_value", ".", "data", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "return", "new_arch_list", ",", "new_predict_values", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_seminas.train_controller": [[505, 520], ["omni_seminas.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "model.parameters", "omni_seminas.controller_train", "print"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.controller_train"], ["", "def", "train_controller", "(", "model", ",", "train_input", ",", "train_target", ",", "epochs", ")", ":", "\n", "\n", "    ", "controller_train_dataset", "=", "ControllerDataset", "(", "train_input", ",", "train_target", ",", "True", ")", "\n", "controller_train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "controller_train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "l2_reg", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "        ", "loss", ",", "mse", ",", "ce", "=", "controller_train", "(", "controller_train_queue", ",", "model", ",", "optimizer", ")", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "\"epoch {} train loss {} mse {} ce {}\"", ".", "format", "(", "epoch", ",", "loss", ",", "mse", ",", "ce", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.ControllerDataset.__init__": [[97, 106], ["super().__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "targets", "=", "None", ",", "train", "=", "True", ",", "sos_id", "=", "0", ",", "eos_id", "=", "0", ")", ":", "\n", "        ", "super", "(", "ControllerDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "targets", ")", "\n", "", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "sos_id", "=", "sos_id", "\n", "self", ".", "eos_id", "=", "eos_id", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.ControllerDataset.__getitem__": [[107, 128], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "encoder_input", "=", "self", ".", "inputs", "[", "index", "]", "\n", "encoder_target", "=", "None", "\n", "if", "self", ".", "targets", "is", "not", "None", ":", "\n", "            ", "encoder_target", "=", "[", "self", ".", "targets", "[", "index", "]", "]", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "decoder_input", "=", "[", "self", ".", "sos_id", "]", "+", "encoder_input", "[", ":", "-", "1", "]", "\n", "sample", "=", "{", "\n", "\"encoder_input\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "\"encoder_target\"", ":", "torch", ".", "FloatTensor", "(", "encoder_target", ")", ",", "\n", "\"decoder_input\"", ":", "torch", ".", "LongTensor", "(", "decoder_input", ")", ",", "\n", "\"decoder_target\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "sample", "=", "{", "\n", "\"encoder_input\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "\"decoder_target\"", ":", "torch", ".", "LongTensor", "(", "encoder_input", ")", ",", "\n", "}", "\n", "if", "encoder_target", "is", "not", "None", ":", "\n", "                ", "sample", "[", "\"encoder_target\"", "]", "=", "torch", ".", "FloatTensor", "(", "encoder_target", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.ControllerDataset.__len__": [[129, 131], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Encoder.__init__": [[134, 172], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "seminas.Encoder.mlp.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "seminas.Encoder.mlp.append", "seminas.Encoder.mlp.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "mlp_layers", "=", "mlp_layers", "\n", "self", ".", "mlp_hidden_size", "=", "mlp_hidden_size", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "True", ",", "\n", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", "*", "2", ",", "self", ".", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "mlp_layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "mlp_hidden_size", ")", ")", "\n", "", "elif", "i", "==", "self", ".", "mlp_layers", "-", "1", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "mlp_hidden_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "mlp_hidden_size", ",", "self", ".", "mlp_hidden_size", ")", ")", "\n", "", "", "self", ".", "regressor", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Encoder.forward_predictor": [[173, 184], ["enumerate", "seminas.Encoder.regressor", "mlp_layer", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "math.sqrt", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward_predictor", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "for", "i", ",", "mlp_layer", "in", "enumerate", "(", "self", ".", "mlp", ")", ":", "\n", "            ", "x", "=", "mlp_layer", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "if", "i", "!=", "self", ".", "mlp_layers", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "x", "=", "self", ".", "regressor", "(", "x", ")", "\n", "predict_value", "=", "x", "\n", "return", "predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Encoder.forward": [[185, 210], ["seminas.Encoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "seminas.Encoder.rnn", "seminas.Encoder.out_proj", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "enumerate", "seminas.Encoder.regressor", "mlp_layer", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "math.sqrt", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "encoder_outputs", "=", "x", "\n", "encoder_hidden", "=", "hidden", "\n", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "arch_emb", "=", "x", "\n", "\n", "residual", "=", "x", "\n", "for", "i", ",", "mlp_layer", "in", "enumerate", "(", "self", ".", "mlp", ")", ":", "\n", "            ", "x", "=", "mlp_layer", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "if", "i", "!=", "self", ".", "mlp_layers", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "x", "=", "self", ".", "regressor", "(", "x", ")", "\n", "predict_value", "=", "x", "\n", "return", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Encoder.infer": [[211, 236], ["seminas.Encoder.", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "seminas.Encoder.forward_predictor", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Encoder.forward_predictor"], ["", "def", "infer", "(", "self", ",", "x", ",", "predict_lambda", ",", "direction", "=", "\"-\"", ")", ":", "\n", "        ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "=", "self", "(", "x", ")", "\n", "grads_on_outputs", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "predict_value", ",", "encoder_outputs", ",", "torch", ".", "ones_like", "(", "predict_value", ")", "\n", ")", "[", "0", "]", "\n", "if", "direction", "==", "\"+\"", ":", "\n", "            ", "new_encoder_outputs", "=", "encoder_outputs", "+", "predict_lambda", "*", "grads_on_outputs", "\n", "", "elif", "direction", "==", "\"-\"", ":", "\n", "            ", "new_encoder_outputs", "=", "encoder_outputs", "-", "predict_lambda", "*", "grads_on_outputs", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Direction must be + or -, got {} instead\"", ".", "format", "(", "direction", ")", "\n", ")", "\n", "", "new_encoder_outputs", "=", "F", ".", "normalize", "(", "new_encoder_outputs", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "new_arch_emb", "=", "torch", ".", "mean", "(", "new_encoder_outputs", ",", "dim", "=", "1", ")", "\n", "new_arch_emb", "=", "F", ".", "normalize", "(", "new_arch_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "new_predict_value", "=", "self", ".", "forward_predictor", "(", "new_arch_emb", ")", "\n", "return", "(", "\n", "encoder_outputs", ",", "\n", "encoder_hidden", ",", "\n", "arch_emb", ",", "\n", "predict_value", ",", "\n", "new_encoder_outputs", ",", "\n", "new_arch_emb", ",", "\n", "new_predict_value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Attention.__init__": [[244, 255], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "source_dim", "=", "None", ",", "output_dim", "=", "None", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "source_dim", "is", "None", ":", "\n", "            ", "source_dim", "=", "input_dim", "\n", "", "if", "output_dim", "is", "None", ":", "\n", "            ", "output_dim", "=", "input_dim", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "source_dim", "=", "source_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "source_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "output_proj", "=", "nn", ".", "Linear", "(", "input_dim", "+", "source_dim", ",", "output_dim", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Attention.forward": [[256, 282], ["input.size", "source_hids.size", "seminas.Attention.input_proj", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "source_hids.transpose", "torch.softmax().view.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "float", "torch.softmax().view.view", "seminas.Attention.output_proj", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "source_hids", ",", "mask", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "source_len", "=", "source_hids", ".", "size", "(", "1", ")", "\n", "\n", "# (batch, tgt_len, input_dim) -> (batch, tgt_len, source_dim)", "\n", "x", "=", "self", ".", "input_proj", "(", "input", ")", "\n", "\n", "# (batch, tgt_len, source_dim) * (batch, src_len, source_dim) -> (batch, tgt_len, src_len)", "\n", "attn", "=", "torch", ".", "bmm", "(", "x", ",", "source_hids", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", ".", "data", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "\"inf\"", ")", ")", "\n", "", "attn", "=", "F", ".", "softmax", "(", "attn", ".", "view", "(", "-", "1", ",", "source_len", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "\n", "batch_size", ",", "-", "1", ",", "source_len", "\n", ")", "\n", "\n", "# (batch, tgt_len, src_len) * (batch, src_len, source_dim) -> (batch, tgt_len, source_dim)", "\n", "mix", "=", "torch", ".", "bmm", "(", "attn", ",", "source_hids", ")", "\n", "\n", "# concat -> (batch, tgt_len, source_dim + input_dim)", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "mix", ",", "input", ")", ",", "dim", "=", "2", ")", "\n", "# output -> (batch, tgt_len, output_dim)", "\n", "output", "=", "torch", ".", "tanh", "(", "\n", "self", ".", "output_proj", "(", "combined", ".", "view", "(", "-", "1", ",", "self", ".", "input_dim", "+", "self", ".", "source_dim", ")", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "output_dim", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Decoder.__init__": [[285, 316], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "seminas.Attention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "range", "math.floor", "seminas.Decoder.offsets.append", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "layers", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", "\n", "self", ".", "sos_id", "=", "SOS_ID", "\n", "self", ".", "eos_id", "=", "EOS_ID", "\n", "self", ".", "init_input", "=", "None", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention", "=", "Attention", "(", "self", ".", "hidden_size", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "vocab_size", ")", "\n", "self", ".", "n", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "sqrt", "(", "(", "self", ".", "length", "+", "1", ")", "*", "2", ")", ")", ")", "\n", "self", ".", "offsets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "self", ".", "offsets", ".", "append", "(", "(", "i", "+", "3", ")", "*", "i", "//", "2", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Decoder.forward": [[317, 365], ["seminas.Decoder._init_state", "encoder_hidden[].size", "encoder_hidden[].new().fill_().long", "encoder_hidden[].new().fill_().long", "range", "torch.dropout.size", "torch.dropout.size", "seminas.Decoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "seminas.Decoder.rnn", "seminas.Decoder.attention", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "predicted_softmax.view.view.view", "seminas.Decoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "seminas.Decoder.rnn", "seminas.Decoder.attention", "seminas.Decoder.out", "seminas.Decoder.forward.decode"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Decoder._init_state"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "encoder_hidden", "=", "None", ",", "encoder_outputs", "=", "None", ")", ":", "\n", "        ", "decoder_hidden", "=", "self", ".", "_init_state", "(", "encoder_hidden", ")", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "x", ".", "size", "(", "1", ")", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ",", "decoder_hidden", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "residual", "=", "x", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "x", ",", "encoder_outputs", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "predicted_softmax", "=", "F", ".", "log_softmax", "(", "\n", "self", ".", "out", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_size", ")", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "predicted_softmax", "=", "predicted_softmax", ".", "view", "(", "bsz", ",", "tgt_len", ",", "-", "1", ")", "\n", "return", "predicted_softmax", ",", "None", "\n", "\n", "# inference", "\n", "", "assert", "x", "is", "None", "\n", "bsz", "=", "encoder_hidden", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "length", "=", "self", ".", "length", "\n", "decoder_input", "=", "encoder_hidden", "[", "0", "]", ".", "new", "(", "bsz", ",", "1", ")", ".", "fill_", "(", "0", ")", ".", "long", "(", ")", "\n", "decoded_ids", "=", "encoder_hidden", "[", "0", "]", ".", "new", "(", "bsz", ",", "0", ")", ".", "fill_", "(", "0", ")", ".", "long", "(", ")", "\n", "\n", "def", "decode", "(", "step", ",", "output", ")", ":", "\n", "            ", "if", "step", "in", "self", ".", "offsets", ":", "# sample operation, should be in [3, 7]", "\n", "                ", "symbol", "=", "output", "[", ":", ",", "3", ":", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "3", "\n", "", "else", ":", "# sample connection, should be in [1, 2]", "\n", "                ", "symbol", "=", "output", "[", ":", ",", "1", ":", "3", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "1", "\n", "", "return", "symbol", "\n", "\n", "", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "x", "=", "self", ".", "embedding", "(", "decoder_input", "[", ":", ",", "i", ":", "i", "+", "1", "]", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "decoder_hidden", "=", "self", ".", "rnn", "(", "x", ",", "decoder_hidden", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "residual", "=", "x", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "x", ",", "encoder_outputs", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "output", "=", "self", ".", "out", "(", "x", ".", "squeeze", "(", "1", ")", ")", "\n", "symbol", "=", "decode", "(", "i", ",", "output", ")", "\n", "decoded_ids", "=", "torch", ".", "cat", "(", "(", "decoded_ids", ",", "symbol", ")", ",", "axis", "=", "-", "1", ")", "\n", "decoder_input", "=", "torch", ".", "cat", "(", "(", "decoder_input", ",", "symbol", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "None", ",", "decoded_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Decoder._init_state": [[366, 375], ["isinstance", "tuple"], "methods", ["None"], ["", "def", "_init_state", "(", "self", ",", "encoder_hidden", ")", ":", "\n", "        ", "\"\"\"Initialize the encoder hidden state.\"\"\"", "\n", "if", "encoder_hidden", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "encoder_hidden", ",", "tuple", ")", ":", "\n", "            ", "encoder_hidden", "=", "tuple", "(", "[", "h", "for", "h", "in", "encoder_hidden", "]", ")", "\n", "", "else", ":", "\n", "            ", "encoder_hidden", "=", "encoder_hidden", "\n", "", "return", "encoder_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.__init__": [[378, 411], ["torch.Module.__init__", "Encoder().to", "Decoder().to", "seminas.NAO.flatten_parameters", "seminas.Encoder", "seminas.Decoder"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoder_layers", ",", "\n", "decoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", "decoder_length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NAO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "encoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "decoder_layers", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "decoder_length", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "flatten_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters": [[412, 415], ["seminas.NAO.encoder.rnn.flatten_parameters", "seminas.NAO.decoder.rnn.flatten_parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.flatten_parameters"], ["", "def", "flatten_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "self", ".", "decoder", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.forward": [[416, 429], ["seminas.NAO.encoder", "seminas.NAO.decoder", "input_variable.to", "arch_emb.unsqueeze().to", "arch_emb.unsqueeze().to", "target_variable.to", "encoder_outputs.to", "arch_emb.unsqueeze", "arch_emb.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_variable", ",", "target_variable", "=", "None", ")", ":", "\n", "        ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "=", "self", ".", "encoder", "(", "\n", "input_variable", ".", "to", "(", "device", ")", "\n", ")", "\n", "\n", "decoder_hidden", "=", "(", "\n", "arch_emb", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", "arch_emb", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "decoder_outputs", ",", "archs", "=", "self", ".", "decoder", "(", "\n", "target_variable", ".", "to", "(", "device", ")", ",", "decoder_hidden", ",", "encoder_outputs", ".", "to", "(", "device", ")", "\n", ")", "\n", "return", "predict_value", ",", "decoder_outputs", ",", "archs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.generate_new_arch": [[430, 445], ["seminas.NAO.encoder.infer", "seminas.NAO.decoder", "new_arch_emb.unsqueeze", "new_arch_emb.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.Encoder.infer"], ["", "def", "generate_new_arch", "(", "self", ",", "input_variable", ",", "predict_lambda", "=", "1", ",", "direction", "=", "\"-\"", ")", ":", "\n", "        ", "(", "\n", "encoder_outputs", ",", "\n", "encoder_hidden", ",", "\n", "arch_emb", ",", "\n", "predict_value", ",", "\n", "new_encoder_outputs", ",", "\n", "new_arch_emb", ",", "\n", "new_predict_value", ",", "\n", ")", "=", "self", ".", "encoder", ".", "infer", "(", "input_variable", ",", "predict_lambda", ",", "direction", "=", "direction", ")", "\n", "new_encoder_hidden", "=", "(", "new_arch_emb", ".", "unsqueeze", "(", "0", ")", ",", "new_arch_emb", ".", "unsqueeze", "(", "0", ")", ")", "\n", "decoder_outputs", ",", "new_archs", "=", "self", ".", "decoder", "(", "\n", "None", ",", "new_encoder_hidden", ",", "new_encoder_outputs", "\n", ")", "\n", "return", "new_archs", ",", "new_predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.__init__": [[513, 529], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoding_type", "=", "\"seminas\"", ",", "\n", "ss_type", "=", "None", ",", "\n", "semi", "=", "False", ",", "\n", "hpo_wrapper", "=", "False", ",", "\n", "synthetic_factor", "=", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "semi", "=", "semi", "\n", "self", ".", "synthetic_factor", "=", "synthetic_factor", "\n", "if", "ss_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "ss_type", "=", "ss_type", "\n", "", "self", ".", "hpo_wrapper", "=", "hpo_wrapper", "\n", "self", ".", "default_hyperparams", "=", "{", "\"gcn_hidden\"", ":", "64", ",", "\"batch_size\"", ":", "100", ",", "\"lr\"", ":", "1e-3", "}", "\n", "self", ".", "hyperparams", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.generate_synthetic_data": [[530, 566], ["range", "seminas.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "naslib.predictors.utils.encodings.encode", "seminas.convert_arch_to_seq", "synthetic_input.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "len", "len", "len", "model.encoder", "predict_value.data.squeeze().tolist", "seminas.move_to_cuda", "predict_value.data.squeeze"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.convert_arch_to_seq", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda"], ["", "def", "generate_synthetic_data", "(", "self", ",", "model", ",", "num_synthetic", ")", ":", "\n", "        ", "synthetic_input", "=", "[", "]", "\n", "synthetic_target", "=", "[", "]", "\n", "\n", "# convert the architectures in self.unlabeled to the right encoding", "\n", "for", "i", "in", "range", "(", "num_synthetic", ")", ":", "\n", "            ", "arch", "=", "self", ".", "unlabeled", "[", "i", "]", "\n", "encoded", "=", "encode", "(", "\n", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", "\n", ")", "\n", "seq", "=", "convert_arch_to_seq", "(", "\n", "encoded", "[", "\"adjacency\"", "]", ",", "encoded", "[", "\"operations\"", "]", ",", "max_n", "=", "self", ".", "max_n", "\n", ")", "\n", "synthetic_input", ".", "append", "(", "seq", ")", "\n", "\n", "# use the model to label the synthetic data", "\n", "", "synthetic_dataset", "=", "ControllerDataset", "(", "synthetic_input", ",", "None", ",", "False", ")", "\n", "synthetic_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "synthetic_dataset", ",", "\n", "batch_size", "=", "len", "(", "synthetic_dataset", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "for", "sample", "in", "synthetic_queue", ":", "\n", "                ", "if", "use_cuda", ":", "\n", "                    ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "encoder_input", "=", "sample", "[", "\"encoder_input\"", "]", "\n", "", "_", ",", "_", ",", "_", ",", "predict_value", "=", "model", ".", "encoder", "(", "encoder_input", ")", "\n", "synthetic_target", "+=", "predict_value", ".", "data", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "assert", "len", "(", "synthetic_input", ")", "==", "len", "(", "synthetic_target", ")", "\n", "return", "synthetic_input", ",", "synthetic_target", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.fit": [[567, 687], ["numpy.mean", "numpy.std", "enumerate", "NAO().to", "range", "numpy.squeeze", "numpy.mean", "seminas.SemiNASPredictor.default_hyperparams.copy", "naslib.predictors.utils.encodings.encode", "seminas.convert_arch_to_seq", "train_seq_pool.append", "train_target_pool.append", "print", "print", "seminas.train_controller", "print", "seminas.SemiNASPredictor.query", "abs", "seminas.NAO", "seminas.SemiNASPredictor.generate_synthetic_data", "print", "seminas.train_controller", "print", "len", "numpy.ceil().astype", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.convert_arch_to_seq", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.train_controller", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.generate_synthetic_data", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.train_controller"], ["", "def", "fit", "(", "\n", "self", ",", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "train_info", "=", "None", ",", "\n", "wd", "=", "0", ",", "\n", "iterations", "=", "1", ",", "\n", "epochs", "=", "50", ",", "\n", "pretrain_epochs", "=", "50", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "batch_size", "=", "self", ".", "hyperparams", "[", "\"batch_size\"", "]", "\n", "gcn_hidden", "=", "self", ".", "hyperparams", "[", "\"gcn_hidden\"", "]", "\n", "lr", "=", "self", ".", "hyperparams", "[", "\"lr\"", "]", "\n", "up_sample_ratio", "=", "10", "\n", "\n", "if", "self", ".", "ss_type", "==", "\"nasbench101\"", ":", "\n", "            ", "self", ".", "max_n", "=", "7", "\n", "encoder_length", "=", "27", "\n", "decoder_length", "=", "27", "\n", "vocab_size", "=", "7", "\n", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nasbench201\"", ":", "\n", "            ", "self", ".", "max_n", "=", "8", "\n", "encoder_length", "=", "35", "\n", "decoder_length", "=", "35", "\n", "vocab_size", "=", "9", "\n", "\n", "", "elif", "self", ".", "ss_type", "==", "\"darts\"", ":", "\n", "            ", "self", ".", "max_n", "=", "35", "\n", "encoder_length", "=", "629", "\n", "decoder_length", "=", "629", "\n", "vocab_size", "=", "13", "\n", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nlp\"", ":", "\n", "            ", "self", ".", "max_n", "=", "25", "\n", "encoder_length", "=", "324", "\n", "decoder_length", "=", "324", "\n", "vocab_size", "=", "12", "\n", "\n", "", "elif", "self", ".", "ss_type", "==", "\"transbench101\"", ":", "\n", "            ", "self", ".", "max_n", "=", "8", "\n", "encoder_length", "=", "35", "\n", "decoder_length", "=", "35", "\n", "vocab_size", "=", "9", "\n", "\n", "\n", "# get mean and std, normlize accuracies", "\n", "", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "ytrain_normed", "=", "(", "ytrain", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "# encode data in seq", "\n", "train_seq_pool", "=", "[", "]", "\n", "train_target_pool", "=", "[", "]", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "xtrain", ")", ":", "\n", "            ", "encoded", "=", "encode", "(", "\n", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", "\n", ")", "\n", "seq", "=", "convert_arch_to_seq", "(", "\n", "encoded", "[", "\"adjacency\"", "]", ",", "encoded", "[", "\"operations\"", "]", ",", "max_n", "=", "self", ".", "max_n", "\n", ")", "\n", "train_seq_pool", ".", "append", "(", "seq", ")", "\n", "train_target_pool", ".", "append", "(", "ytrain_normed", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "model", "=", "NAO", "(", "\n", "encoder_layers", ",", "\n", "decoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", "decoder_length", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "            ", "print", "(", "\"Iteration {}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "\n", "train_encoder_input", "=", "train_seq_pool", "\n", "train_encoder_target", "=", "train_target_pool", "\n", "\n", "# Pre-train", "\n", "print", "(", "\"Pre-train EPD\"", ")", "\n", "train_controller", "(", "\n", "self", ".", "model", ",", "train_encoder_input", ",", "train_encoder_target", ",", "pretrain_epochs", "\n", ")", "\n", "print", "(", "\"Finish pre-training EPD\"", ")", "\n", "\n", "if", "self", ".", "semi", ":", "\n", "                ", "num_synthetic", "=", "self", ".", "synthetic_factor", "*", "len", "(", "train_encoder_input", ")", "\n", "synthetic_data", "=", "self", ".", "generate_synthetic_data", "(", "self", ".", "model", ",", "num_synthetic", ")", "\n", "synthetic_encoder_input", ",", "synthetic_encoder_target", "=", "synthetic_data", "\n", "\n", "if", "up_sample_ratio", "is", "None", ":", "\n", "                    ", "up_sample_ratio", "=", "np", ".", "ceil", "(", "m", "/", "len", "(", "train_encoder_input", ")", ")", ".", "astype", "(", "\n", "np", ".", "int", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "up_sample_ratio", "=", "up_sample_ratio", "\n", "\n", "", "all_encoder_input", "=", "(", "\n", "train_encoder_input", "*", "up_sample_ratio", "+", "synthetic_encoder_input", "\n", ")", "\n", "all_encoder_target", "=", "(", "\n", "train_encoder_target", "*", "up_sample_ratio", "+", "synthetic_encoder_target", "\n", ")", "\n", "print", "(", "\"Train EPD\"", ")", "\n", "train_controller", "(", "\n", "self", ".", "model", ",", "all_encoder_input", ",", "all_encoder_target", ",", "epochs", "\n", ")", "\n", "print", "(", "\"Finish training EPD\"", ")", "\n", "\n", "", "", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "query", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.query": [[688, 720], ["enumerate", "seminas.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "seminas.SemiNASPredictor.model.eval", "numpy.concatenate", "numpy.squeeze", "naslib.predictors.utils.encodings.encode", "seminas.convert_arch_to_seq", "test_seq_pool.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "seminas.move_to_cuda", "seminas.move_to_cuda", "seminas.SemiNASPredictor.model", "numpy.concatenate.append", "prediction.cpu().numpy", "prediction.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.convert_arch_to_seq", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ",", "eval_batch_size", "=", "100", ")", ":", "\n", "\n", "        ", "test_seq_pool", "=", "[", "]", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "xtest", ")", ":", "\n", "            ", "encoded", "=", "encode", "(", "\n", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", "\n", ")", "\n", "seq", "=", "convert_arch_to_seq", "(", "\n", "encoded", "[", "\"adjacency\"", "]", ",", "encoded", "[", "\"operations\"", "]", ",", "max_n", "=", "self", ".", "max_n", "\n", ")", "\n", "test_seq_pool", ".", "append", "(", "seq", ")", "\n", "\n", "", "test_dataset", "=", "ControllerDataset", "(", "test_seq_pool", ",", "None", ",", "False", ")", "\n", "test_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "pred", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", ",", "sample", "in", "enumerate", "(", "test_queue", ")", ":", "\n", "                ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "decoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_target\"", "]", ")", "\n", "prediction", ",", "_", ",", "_", "=", "self", ".", "model", "(", "encoder_input", ",", "decoder_target", ")", "\n", "pred", ".", "append", "(", "prediction", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "pred", "=", "np", ".", "concatenate", "(", "pred", ")", "\n", "return", "np", ".", "squeeze", "(", "pred", "*", "self", ".", "std", "+", "self", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.set_random_hyperparams": [[721, 735], ["seminas.SemiNASPredictor.default_hyperparams.copy", "int", "int", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"gcn_hidden\"", ":", "int", "(", "loguniform", "(", "16", ",", "128", ")", ")", ",", "\n", "\"batch_size\"", ":", "int", "(", "loguniform", "(", "32", ",", "256", ")", ")", ",", "\n", "\"lr\"", ":", "loguniform", "(", "0.00001", ",", "0.1", ")", ",", "\n", "}", "\n", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.pre_compute": [[736, 742], ["None"], "methods", ["None"], ["", "def", "pre_compute", "(", "self", ",", "xtrain", ",", "xtest", ",", "unlabeled", ")", ":", "\n", "        ", "\"\"\"\n        This method is used to pass in unlabeled architectures\n        for SemiNAS to use, in standalone predictor experiments.\n        \"\"\"", "\n", "self", ".", "unlabeled", "=", "unlabeled", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.set_pre_computations": [[743, 757], ["None"], "methods", ["None"], ["", "def", "set_pre_computations", "(", "\n", "self", ",", "\n", "unlabeled", "=", "None", ",", "\n", "xtrain_zc_info", "=", "None", ",", "\n", "xtest_zc_info", "=", "None", ",", "\n", "unlabeled_zc_info", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        This is the method to pass in unlabeled architectures during\n        NAS. The reason we need this method and pre_compute() is to be\n        consistent with omni_seminas, where the methods do different things.\n        \"\"\"", "\n", "if", "unlabeled", "is", "not", "None", ":", "\n", "            ", "self", ".", "unlabeled", "=", "unlabeled", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.SemiNASPredictor.get_data_reqs": [[758, 773], ["None"], "methods", ["None"], ["", "", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query, such as a partial learning curve,\n        hyperparameters, or how much unlabeled data it needs\n        \"\"\"", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "False", ",", "\n", "\"metric\"", ":", "None", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "{", "}", ",", "\n", "\"unlabeled\"", ":", "self", ".", "semi", ",", "\n", "\"unlabeled_factor\"", ":", "self", ".", "synthetic_factor", ",", "\n", "}", "\n", "return", "reqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda": [[60, 64], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "tensor.cuda"], "function", ["None"], ["def", "move_to_cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.convert_arch_to_seq": [[66, 82], ["len", "range", "len", "len", "seq.append", "range", "seq.append", "seq.append", "range"], "function", ["None"], ["", "def", "convert_arch_to_seq", "(", "matrix", ",", "ops", ",", "max_n", "=", "8", ")", ":", "\n", "    ", "seq", "=", "[", "]", "\n", "n", "=", "len", "(", "matrix", ")", "\n", "max_n", "=", "max_n", "\n", "assert", "n", "==", "len", "(", "ops", ")", "\n", "for", "col", "in", "range", "(", "1", ",", "max_n", ")", ":", "\n", "        ", "if", "col", ">=", "n", ":", "\n", "            ", "seq", "+=", "[", "0", "for", "i", "in", "range", "(", "col", ")", "]", "\n", "seq", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "                ", "seq", ".", "append", "(", "matrix", "[", "row", "]", "[", "col", "]", "+", "1", ")", "\n", "", "seq", ".", "append", "(", "ops", "[", "col", "]", "+", "2", ")", "\n", "\n", "", "", "assert", "len", "(", "seq", ")", "==", "(", "max_n", "+", "2", ")", "*", "(", "max_n", "-", "1", ")", "/", "2", "\n", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.convert_seq_to_arch": [[84, 94], ["int", "range", "math.floor", "range", "ops.append", "math.sqrt", "range", "range", "len"], "function", ["None"], ["", "def", "convert_seq_to_arch", "(", "seq", ")", ":", "\n", "    ", "n", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "sqrt", "(", "(", "len", "(", "seq", ")", "+", "1", ")", "*", "2", ")", ")", ")", "\n", "matrix", "=", "[", "[", "0", "for", "_", "in", "range", "(", "n", ")", "]", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "ops", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "        ", "offset", "=", "(", "i", "+", "3", ")", "*", "i", "//", "2", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "            ", "matrix", "[", "j", "]", "[", "i", "+", "1", "]", "=", "seq", "[", "offset", "+", "j", "]", "-", "1", "\n", "", "ops", ".", "append", "(", "seq", "[", "offset", "+", "i", "+", "1", "]", "-", "2", ")", "\n", "", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.controller_train": [[447, 477], ["naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "model.train", "enumerate", "seminas.move_to_cuda", "seminas.move_to_cuda", "seminas.move_to_cuda", "seminas.move_to_cuda", "optimizer.zero_grad", "model", "torch.mse_loss", "torch.nll_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "move_to_cuda.size", "naslib.utils.utils.AverageMeter.update", "naslib.utils.utils.AverageMeter.update", "naslib.utils.utils.AverageMeter.update", "predict_value.squeeze", "move_to_cuda.squeeze", "log_prob.contiguous().view", "move_to_cuda.view", "model.parameters", "log_prob.size", "log_prob.contiguous"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "", "def", "controller_train", "(", "train_queue", ",", "model", ",", "optimizer", ")", ":", "\n", "\n", "    ", "objs", "=", "AverageMeter", "(", ")", "\n", "mse", "=", "AverageMeter", "(", ")", "\n", "nll", "=", "AverageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "sample", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "\n", "        ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "encoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_target\"", "]", ")", "\n", "decoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_input\"", "]", ")", "\n", "decoder_target", "=", "move_to_cuda", "(", "sample", "[", "\"decoder_target\"", "]", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "predict_value", ",", "log_prob", ",", "arch", "=", "model", "(", "encoder_input", ",", "decoder_input", ")", "\n", "loss_1", "=", "F", ".", "mse_loss", "(", "predict_value", ".", "squeeze", "(", ")", ",", "encoder_target", ".", "squeeze", "(", ")", ")", "\n", "loss_2", "=", "F", ".", "nll_loss", "(", "\n", "log_prob", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "-", "1", ")", ")", ",", "decoder_target", ".", "view", "(", "-", "1", ")", "\n", ")", "\n", "loss", "=", "trade_off", "*", "loss_1", "+", "(", "1", "-", "trade_off", ")", "*", "loss_2", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_bound", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "n", "=", "encoder_input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "mse", ".", "update", "(", "loss_1", ".", "data", ",", "n", ")", "\n", "nll", ".", "update", "(", "loss_2", ".", "data", ",", "n", ")", "\n", "\n", "", "return", "objs", ".", "avg", ",", "mse", ".", "avg", ",", "nll", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.controller_infer": [[479, 492], ["model.eval", "enumerate", "seminas.move_to_cuda", "model.zero_grad", "model.generate_new_arch", "new_arch_list.extend", "new_predict_values.extend", "new_arch.data.squeeze().tolist", "new_predict_value.data.squeeze().tolist", "new_arch.data.squeeze", "new_predict_value.data.squeeze"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.move_to_cuda", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.NAO.generate_new_arch", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "def", "controller_infer", "(", "queue", ",", "model", ",", "step", ",", "direction", "=", "\"+\"", ")", ":", "\n", "    ", "new_arch_list", "=", "[", "]", "\n", "new_predict_values", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "queue", ")", ":", "\n", "        ", "encoder_input", "=", "move_to_cuda", "(", "sample", "[", "\"encoder_input\"", "]", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "new_arch", ",", "new_predict_value", "=", "model", ".", "generate_new_arch", "(", "\n", "encoder_input", ",", "step", ",", "direction", "=", "direction", "\n", ")", "\n", "new_arch_list", ".", "extend", "(", "new_arch", ".", "data", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "new_predict_values", ".", "extend", "(", "new_predict_value", ".", "data", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "return", "new_arch_list", ",", "new_predict_values", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.train_controller": [[494, 510], ["logging.info", "seminas.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "model.parameters", "seminas.controller_train", "len", "print"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.seminas.controller_train"], ["", "def", "train_controller", "(", "model", ",", "train_input", ",", "train_target", ",", "epochs", ")", ":", "\n", "\n", "    ", "logging", ".", "info", "(", "\"Train data: {}\"", ".", "format", "(", "len", "(", "train_input", ")", ")", ")", "\n", "controller_train_dataset", "=", "ControllerDataset", "(", "train_input", ",", "train_target", ",", "True", ")", "\n", "controller_train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "controller_train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "l2_reg", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "        ", "loss", ",", "mse", ",", "ce", "=", "controller_train", "(", "controller_train_queue", ",", "model", ",", "optimizer", ")", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "\"epoch {} train loss {} mse {} ce {}\"", ".", "format", "(", "epoch", ",", "loss", ",", "mse", ",", "ce", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v1.ZeroCostV1.__init__": [[47, 60], ["torch.device", "naslib.utils.utils.get_project_root", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "batch_size", "=", "64", ",", "method_type", "=", "\"jacov\"", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "method_type", "=", "method_type", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "config", ".", "data", "=", "\"{}/data\"", ".", "format", "(", "get_project_root", "(", ")", ")", "\n", "self", ".", "config", "=", "config", "\n", "if", "method_type", "==", "\"jacov\"", ":", "\n", "            ", "self", ".", "num_classes", "=", "1", "\n", "", "else", ":", "\n", "            ", "num_classes_dic", "=", "{", "\"cifar10\"", ":", "10", ",", "\"cifar100\"", ":", "100", ",", "\"ImageNet16-120\"", ":", "120", "}", "\n", "self", ".", "num_classes", "=", "num_classes_dic", "[", "self", ".", "config", ".", "dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v1.ZeroCostV1.pre_process": [[61, 63], ["naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["", "", "def", "pre_process", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_loader", ",", "_", ",", "_", ",", "_", ",", "_", "=", "get_train_val_loaders", "(", "self", ".", "config", ",", "mode", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v1.ZeroCostV1.query": [[64, 165], ["numpy.array", "logger.info", "iter", "next", "naslib.predictors.utils.build_nets.build_darts_net.NetworkCIFAR.to", "test_set_scores.append", "torch.cuda.empty_cache", "gc.collect", "naslib.predictors.utils.build_nets.get_cell_based_tiny_net", "x.to", "target.to", "zerocost_v1.get_batch_jacobian", "jacobs.reshape().cpu().numpy.reshape().cpu().numpy.reshape().cpu().numpy", "len", "naslib.search_spaces.darts.conversions.convert_compact_to_genotype", "naslib.predictors.utils.build_nets.build_darts_net.NetworkCIFAR", "zerocost_v1.eval_score", "torch.nn.CrossEntropyLoss", "naslib.predictors.utils.build_nets.build_darts_net.NetworkCIFAR.zero_grad", "naslib.predictors.utils.build_nets.build_darts_net.NetworkCIFAR.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.backward", "sorted", "jacobs.reshape().cpu().numpy.reshape().cpu().numpy.reshape().cpu", "print", "p.grad.detach().clone().abs", "torch.no_grad", "torch.sum().cpu().numpy", "naslib.predictors.utils.build_nets.build_darts_net.NetworkCIFAR.parameters", "hasattr", "jacobs.reshape().cpu().numpy.reshape().cpu().numpy.reshape", "p.grad.detach().clone", "zip", "torch.sum().cpu", "jacobs.reshape().cpu().numpy.reshape().cpu().numpy.size", "naslib.predictors.utils.build_nets.build_darts_net.NetworkCIFAR.parameters", "p.grad.detach", "torch.sum", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.gideonfr_emprox.measures.jacov.get_batch_jacobian", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.measures.jacov.eval_score", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ")", ":", "\n", "\n", "        ", "test_set_scores", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "test_arch", "in", "xtest", ":", "\n", "            ", "count", "+=", "1", "\n", "logger", ".", "info", "(", "\"zero cost: {} of {}\"", ".", "format", "(", "count", ",", "len", "(", "xtest", ")", ")", ")", "\n", "if", "\"nasbench201\"", "in", "self", ".", "config", ".", "search_space", ":", "\n", "                ", "ops_to_nb201", "=", "{", "\n", "\"AvgPool1x1\"", ":", "\"avg_pool_3x3\"", ",", "\n", "\"ReLUConvBN1x1\"", ":", "\"nor_conv_1x1\"", ",", "\n", "\"ReLUConvBN3x3\"", ":", "\"nor_conv_3x3\"", ",", "\n", "\"Identity\"", ":", "\"skip_connect\"", ",", "\n", "\"Zero\"", ":", "\"none\"", ",", "\n", "}", "\n", "# convert the naslib representation to nasbench201", "\n", "cell", "=", "test_arch", ".", "edges", "[", "2", ",", "3", "]", ".", "op", "\n", "edge_op_dict", "=", "{", "\n", "(", "i", ",", "j", ")", ":", "ops_to_nb201", "[", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "\"op\"", "]", ".", "get_op_name", "]", "\n", "for", "i", ",", "j", "in", "cell", ".", "edges", "\n", "}", "\n", "op_edge_list", "=", "[", "\n", "\"{}~{}\"", ".", "format", "(", "edge_op_dict", "[", "(", "i", ",", "j", ")", "]", ",", "i", "-", "1", ")", "\n", "for", "i", ",", "j", "in", "sorted", "(", "edge_op_dict", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "]", "\n", "arch_str", "=", "\"|{}|+|{}|{}|+|{}|{}|{}|\"", ".", "format", "(", "*", "op_edge_list", ")", "\n", "arch_config", "=", "{", "\n", "\"name\"", ":", "\"infer.tiny\"", ",", "\n", "\"C\"", ":", "16", ",", "\n", "\"N\"", ":", "5", ",", "\n", "\"arch_str\"", ":", "arch_str", ",", "\n", "\"num_classes\"", ":", "self", ".", "num_classes", ",", "\n", "}", "\n", "\n", "network", "=", "get_cell_based_tiny_net", "(", "\n", "arch_config", "\n", ")", "# create the network from configuration", "\n", "\n", "", "elif", "\"darts\"", "in", "self", ".", "config", ".", "search_space", ":", "\n", "                ", "test_genotype", "=", "convert_compact_to_genotype", "(", "test_arch", ".", "compact", ")", "\n", "arch_config", "=", "{", "\n", "\"name\"", ":", "\"darts\"", ",", "\n", "\"C\"", ":", "32", ",", "\n", "\"layers\"", ":", "8", ",", "\n", "\"genotype\"", ":", "test_genotype", ",", "\n", "\"num_classes\"", ":", "self", ".", "num_classes", ",", "\n", "\"auxiliary\"", ":", "False", ",", "\n", "}", "\n", "network", "=", "NetworkCIFAR", "(", "arch_config", ")", "\n", "\n", "", "data_iterator", "=", "iter", "(", "self", ".", "train_loader", ")", "\n", "x", ",", "target", "=", "next", "(", "data_iterator", ")", "\n", "x", ",", "target", "=", "x", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "network", "=", "network", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "method_type", "==", "\"jacov\"", ":", "\n", "                ", "jacobs", ",", "labels", "=", "get_batch_jacobian", "(", "network", ",", "x", ",", "target", ")", "\n", "# print('done get jacobs')", "\n", "jacobs", "=", "jacobs", ".", "reshape", "(", "jacobs", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "try", ":", "\n", "                    ", "score", "=", "eval_score", "(", "jacobs", ",", "labels", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "score", "=", "-", "10e8", "\n", "\n", "", "", "elif", "self", ".", "method_type", "==", "\"snip\"", ":", "\n", "                ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "network", ".", "zero_grad", "(", ")", "\n", "_", ",", "y", "=", "network", "(", "x", ")", "\n", "loss", "=", "criterion", "(", "y", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grads", "=", "[", "\n", "p", ".", "grad", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "abs", "(", ")", "\n", "for", "p", "in", "network", ".", "parameters", "(", ")", "\n", "if", "p", ".", "grad", "is", "not", "None", "\n", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "saliences", "=", "[", "\n", "(", "grad", "*", "weight", ")", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", "\n", "for", "weight", ",", "grad", "in", "zip", "(", "network", ".", "parameters", "(", ")", ",", "grads", ")", "\n", "]", "\n", "score", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "saliences", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "hasattr", "(", "self", ",", "\"ss_type\"", ")", "and", "self", ".", "ss_type", "==", "\"darts\"", ":", "\n", "                        ", "score", "=", "-", "score", "\n", "\n", "", "", "", "test_set_scores", ".", "append", "(", "score", ")", "\n", "network", ",", "data_iterator", ",", "x", ",", "target", ",", "jacobs", ",", "labels", "=", "(", "\n", "None", ",", "\n", "None", ",", "\n", "None", ",", "\n", "None", ",", "\n", "None", ",", "\n", "None", ",", "\n", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "test_set_scores", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v1.get_batch_jacobian": [[26, 37], ["net.zero_grad", "x.requires_grad_", "net", "y.backward", "x.grad.detach", "torch.ones_like", "target.detach"], "function", ["None"], ["def", "get_batch_jacobian", "(", "net", ",", "x", ",", "target", ")", ":", "\n", "    ", "net", ".", "zero_grad", "(", ")", "\n", "\n", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "_", ",", "y", "=", "net", "(", "x", ")", "\n", "\n", "y", ".", "backward", "(", "torch", ".", "ones_like", "(", "y", ")", ")", "\n", "jacob", "=", "x", ".", "grad", ".", "detach", "(", ")", "\n", "\n", "return", "jacob", ",", "target", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v1.eval_score": [[39, 44], ["numpy.corrcoef", "numpy.linalg.eig", "numpy.sum", "numpy.log"], "function", ["None"], ["", "def", "eval_score", "(", "jacob", ",", "labels", "=", "None", ")", ":", "\n", "    ", "corrs", "=", "np", ".", "corrcoef", "(", "jacob", ")", "\n", "v", ",", "_", "=", "np", ".", "linalg", ".", "eig", "(", "corrs", ")", "\n", "k", "=", "1e-5", "\n", "return", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "v", "+", "k", ")", "+", "1.0", "/", "(", "v", "+", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.__init__": [[24, 41], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "metric", "=", "Metric", ".", "VAL_ACCURACY", ",", "\n", "all_curve", "=", "True", ",", "\n", "model_name", "=", "\"svr\"", ",", "\n", "best_hyper", "=", "None", ",", "\n", "n_hypers", "=", "1000", ",", "\n", "require_hyper", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "n_hypers", "=", "n_hypers", "\n", "self", ".", "all_curve", "=", "all_curve", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "best_hyper", "=", "best_hyper", "\n", "self", ".", "name", "=", "\"LcSVR\"", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "require_hyperparameters", "=", "require_hyper", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.fit": [[42, 132], ["lcsvr.SVR_Estimator.prepare_data", "numpy.array", "numpy.array", "sklearn.ensemble.RandomForestRegressor.fit", "print", "time.time", "range", "time.time", "numpy.argmax", "numpy.argmax", "numpy.max", "numpy.max", "print", "sklearn.svm.NuSVR", "lcsvr.loguniform", "numpy.random.uniform", "numpy.random.uniform", "lcsvr.loguniform", "sklearn.model_selection.cross_val_score", "numpy.mean", "numpy.mean", "mean_score_list.append", "sklearn.linear_model.BayesianRidge", "numpy.vstack", "numpy.vstack", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "sklearn.svm.NuSVR", "sklearn.ensemble.RandomForestRegressor", "numpy.vstack", "numpy.vstack", "numpy.random.randint", "numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "sklearn.linear_model.BayesianRidge", "numpy.vstack", "numpy.vstack", "sklearn.ensemble.RandomForestRegressor", "int", "int"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.prepare_data", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "info", ",", "learn_hyper", "=", "True", ")", ":", "\n", "\n", "# prepare training data", "\n", "        ", "xtrain_data", "=", "self", ".", "prepare_data", "(", "info", ")", "\n", "y_train", "=", "np", ".", "array", "(", "ytrain", ")", "\n", "\n", "# learn hyperparameters of the extrapolator by cross validation", "\n", "if", "self", ".", "best_hyper", "is", "None", "or", "learn_hyper", ":", "\n", "# specify model hyper-parameters", "\n", "            ", "if", "self", ".", "model_name", "==", "\"svr\"", ":", "\n", "                ", "C", "=", "loguniform", "(", "1e-5", ",", "10", ",", "self", ".", "n_hypers", ")", "\n", "nu", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "self", ".", "n_hypers", ")", "\n", "gamma", "=", "loguniform", "(", "1e-5", ",", "10", ",", "self", ".", "n_hypers", ")", "\n", "hyper", "=", "np", ".", "vstack", "(", "[", "C", ",", "nu", ",", "gamma", "]", ")", ".", "T", "\n", "\n", "", "elif", "self", ".", "model_name", "==", "\"blr\"", ":", "\n", "                ", "alpha_1", "=", "np", ".", "random", ".", "uniform", "(", "1e-7", ",", "1e-5", ",", "self", ".", "n_hypers", ")", "\n", "alpha_2", "=", "np", ".", "random", ".", "uniform", "(", "1e-7", ",", "1e-5", ",", "self", ".", "n_hypers", ")", "\n", "lambda_1", "=", "np", ".", "random", ".", "uniform", "(", "1e-7", ",", "1e-5", ",", "self", ".", "n_hypers", ")", "\n", "lambda_2", "=", "np", ".", "random", ".", "uniform", "(", "1e-7", ",", "1e-5", ",", "self", ".", "n_hypers", ")", "\n", "hyper", "=", "np", ".", "vstack", "(", "[", "alpha_1", ",", "alpha_2", ",", "lambda_1", ",", "lambda_2", "]", ")", ".", "T", "\n", "\n", "", "elif", "self", ".", "model_name", "==", "\"rf\"", ":", "\n", "                ", "n_trees", "=", "np", ".", "random", ".", "randint", "(", "10", ",", "800", ",", "self", ".", "n_hypers", ")", "\n", "frac_feature", "=", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "0.5", ",", "self", ".", "n_hypers", ")", "\n", "hyper", "=", "np", ".", "vstack", "(", "[", "n_trees", ",", "frac_feature", "]", ")", ".", "T", "\n", "\n", "", "print", "(", "f\"start CV on {self.model_name}\"", ")", "\n", "mean_score_list", "=", "[", "]", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_hypers", ")", ":", "\n", "# define model", "\n", "                ", "if", "self", ".", "model_name", "==", "\"svr\"", ":", "\n", "                    ", "model", "=", "NuSVR", "(", "\n", "C", "=", "hyper", "[", "i", ",", "0", "]", ",", "nu", "=", "hyper", "[", "i", ",", "1", "]", ",", "gamma", "=", "hyper", "[", "i", ",", "2", "]", ",", "kernel", "=", "\"rbf\"", "\n", ")", "\n", "\n", "", "elif", "self", ".", "model_name", "==", "\"blr\"", ":", "\n", "                    ", "model", "=", "BayesianRidge", "(", "\n", "alpha_1", "=", "hyper", "[", "i", ",", "0", "]", ",", "\n", "alpha_2", "=", "hyper", "[", "i", ",", "1", "]", ",", "\n", "lambda_1", "=", "hyper", "[", "i", ",", "2", "]", ",", "\n", "lambda_2", "=", "hyper", "[", "i", ",", "3", "]", ",", "\n", ")", "\n", "\n", "", "elif", "self", ".", "model_name", "==", "\"rf\"", ":", "\n", "                    ", "model", "=", "RandomForestRegressor", "(", "\n", "n_estimators", "=", "int", "(", "hyper", "[", "i", ",", "0", "]", ")", ",", "max_features", "=", "hyper", "[", "i", ",", "1", "]", "\n", ")", "\n", "\n", "# perform cross validation to learn the best hyper value", "\n", "", "scores", "=", "cross_val_score", "(", "model", ",", "xtrain_data", ",", "y_train", ",", "cv", "=", "3", ")", "\n", "mean_scores", "=", "np", ".", "mean", "(", "scores", ")", "\n", "mean_score_list", ".", "append", "(", "mean_scores", ")", "\n", "\n", "", "t_end", "=", "time", ".", "time", "(", ")", "\n", "best_hyper_idx", "=", "np", ".", "argmax", "(", "mean_score_list", ")", "\n", "best_hyper", "=", "hyper", "[", "best_hyper_idx", "]", "\n", "max_score", "=", "np", ".", "max", "(", "mean_score_list", ")", "\n", "time_taken", "=", "t_end", "-", "t_start", "\n", "print", "(", "\n", "f\"{self.model_name}\"", "\n", "f\"best_hyper={best_hyper}, score={max_score}, time={time_taken}\"", "\n", ")", "\n", "self", ".", "best_hyper", "=", "best_hyper", "\n", "\n", "# fit the extrapolator with the best hyperparameters to the training data", "\n", "", "if", "self", ".", "model_name", "==", "\"svr\"", ":", "\n", "            ", "best_model", "=", "NuSVR", "(", "\n", "C", "=", "self", ".", "best_hyper", "[", "0", "]", ",", "\n", "nu", "=", "self", ".", "best_hyper", "[", "1", "]", ",", "\n", "gamma", "=", "self", ".", "best_hyper", "[", "2", "]", ",", "\n", "kernel", "=", "\"rbf\"", ",", "\n", ")", "\n", "\n", "", "elif", "self", ".", "model_name", "==", "\"blr\"", ":", "\n", "            ", "best_model", "=", "BayesianRidge", "(", "\n", "alpha_1", "=", "self", ".", "best_hyper", "[", "0", "]", ",", "\n", "alpha_2", "=", "self", ".", "best_hyper", "[", "1", "]", ",", "\n", "lambda_1", "=", "self", ".", "best_hyper", "[", "2", "]", ",", "\n", "lambda_2", "=", "self", ".", "best_hyper", "[", "3", "]", ",", "\n", ")", "\n", "\n", "", "elif", "self", ".", "model_name", "==", "\"rf\"", ":", "\n", "            ", "best_model", "=", "RandomForestRegressor", "(", "\n", "n_estimators", "=", "int", "(", "self", ".", "best_hyper", "[", "0", "]", ")", ",", "max_features", "=", "self", ".", "best_hyper", "[", "1", "]", "\n", ")", "\n", "\n", "", "best_model", ".", "fit", "(", "xtrain_data", ",", "y_train", ")", "\n", "self", ".", "best_model", "=", "best_model", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.collate_inputs": [[133, 171], ["numpy.vstack", "numpy.vstack", "numpy.diff", "numpy.diff", "numpy.diff", "numpy.diff", "numpy.hstack", "numpy.hstack", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "len", "numpy.vstack", "numpy.vstack", "numpy.hstack", "numpy.hstack", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "collate_inputs", "(", "self", ",", "VC_all_archs_list", ",", "AP_all_archs_list", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            VC_all_archs_list: a list of validation accuracy curves for all archs\n            AP_all_archs_list: a list of architecture features for all archs\n\n        Returns:\n            X: an collated array of all input information used for extrapolation model\n        \"\"\"", "\n", "VC", "=", "np", ".", "vstack", "(", "VC_all_archs_list", ")", "# dimension: n_archs x n_epochs", "\n", "DVC", "=", "np", ".", "diff", "(", "VC", ",", "n", "=", "1", ",", "axis", "=", "1", ")", "\n", "DDVC", "=", "np", ".", "diff", "(", "DVC", ",", "n", "=", "1", ",", "axis", "=", "1", ")", "\n", "\n", "mVC", "=", "np", ".", "mean", "(", "VC", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "stdVC", "=", "np", ".", "std", "(", "VC", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "mDVC", "=", "np", ".", "mean", "(", "DVC", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "stdDVC", "=", "np", ".", "std", "(", "DVC", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "mDDVC", "=", "np", ".", "mean", "(", "DDVC", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "stdDDVC", "=", "np", ".", "std", "(", "DDVC", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "if", "self", ".", "all_curve", ":", "\n", "            ", "TS_list", "=", "[", "VC", ",", "DVC", ",", "DDVC", ",", "mVC", ",", "stdVC", "]", "\n", "", "else", ":", "\n", "            ", "TS_list", "=", "[", "mVC", ",", "stdVC", ",", "mDVC", ",", "stdDVC", ",", "mDDVC", ",", "stdDDVC", "]", "\n", "\n", "", "if", "self", ".", "metric", "==", "Metric", ".", "TRAIN_LOSS", ":", "\n", "            ", "sumVC", "=", "np", ".", "sum", "(", "VC", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "TS_list", "+=", "[", "sumVC", "]", "\n", "\n", "", "TS", "=", "np", ".", "hstack", "(", "TS_list", ")", "\n", "\n", "if", "len", "(", "AP_all_archs_list", ")", "!=", "0", ":", "\n", "            ", "AP", "=", "np", ".", "vstack", "(", "AP_all_archs_list", ")", "\n", "X", "=", "np", ".", "hstack", "(", "[", "AP", ",", "TS", "]", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "TS", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.query": [[172, 176], ["lcsvr.SVR_Estimator.prepare_data", "lcsvr.SVR_Estimator.best_model.predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.prepare_data", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", ")", ":", "\n", "        ", "data", "=", "self", ".", "prepare_data", "(", "info", ")", "\n", "pred_on_test_set", "=", "self", ".", "best_model", ".", "predict", "(", "data", ")", "\n", "return", "pred_on_test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.get_data_reqs": [[177, 191], ["None"], "methods", ["None"], ["", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query.\n        \"\"\"", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "True", ",", "\n", "\"metric\"", ":", "self", ".", "metric", ",", "\n", "\"requires_hyperparameters\"", ":", "self", ".", "require_hyperparameters", ",", "\n", "\"hyperparams\"", ":", "[", "\"flops\"", ",", "\"latency\"", ",", "\"params\"", "]", ",", "\n", "\"unlabeled\"", ":", "False", ",", "\n", "\"unlabeled_factor\"", ":", "0", ",", "\n", "}", "\n", "return", "reqs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.prepare_data": [[192, 204], ["range", "lcsvr.SVR_Estimator.collate_inputs", "len", "val_acc_curve.append", "arch_params.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.SVR_Estimator.collate_inputs"], ["", "def", "prepare_data", "(", "self", ",", "info", ")", ":", "\n", "# todo: this can be added at the top of collate_inputs", "\n", "        ", "val_acc_curve", "=", "[", "]", "\n", "arch_params", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "info", ")", ")", ":", "\n", "            ", "acc_metric", "=", "info", "[", "i", "]", "[", "\"lc\"", "]", "\n", "if", "self", ".", "require_hyperparameters", ":", "\n", "                ", "arch_hp", "=", "[", "info", "[", "i", "]", "[", "hp", "]", "for", "hp", "in", "[", "\"flops\"", ",", "\"latency\"", ",", "\"params\"", "]", "]", "\n", "arch_params", ".", "append", "(", "arch_hp", ")", "\n", "", "val_acc_curve", ".", "append", "(", "acc_metric", ")", "\n", "", "return", "self", ".", "collate_inputs", "(", "val_acc_curve", ",", "arch_params", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.lcsvr.loguniform": [[19, 21], ["numpy.exp", "numpy.random.uniform", "numpy.log", "numpy.log"], "function", ["None"], ["def", "loguniform", "(", "low", "=", "0", ",", "high", "=", "1", ",", "size", "=", "None", ")", ":", "\n", "    ", "return", "np", ".", "exp", "(", "np", ".", "random", ".", "uniform", "(", "np", ".", "log", "(", "low", ")", ",", "np", ".", "log", "(", "high", ")", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.GraphConvolution.__init__": [[99, 109], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bonas.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bonas.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.DirectedGraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.GraphConvolution.reset_parameters": [[110, 115], ["bonas.GraphConvolution.weight.data.uniform_", "math.sqrt", "bonas.GraphConvolution.bias.data.uniform_", "bonas.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.GraphConvolution.forward": [[116, 123], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "matmul", "(", "input_", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.GraphConvolution.__repr__": [[124, 132], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", "+", "\" (\"", "\n", "+", "str", "(", "self", ".", "in_features", ")", "\n", "+", "\" -> \"", "\n", "+", "str", "(", "self", ".", "out_features", ")", "\n", "+", "\")\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.GCN.__init__": [[137, 152], ["torch.Module.__init__", "bonas.GraphConvolution", "bonas.GraphConvolution", "bonas.GraphConvolution", "bonas.GraphConvolution", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "bonas.GCN.init_weights"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.GCN.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", "=", "7", ",", "ifsigmoid", "=", "False", ",", "gcn_hidden", "=", "64", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ifsigmoid", "=", "ifsigmoid", "\n", "self", ".", "size", "=", "gcn_hidden", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "nfeat", ",", "self", ".", "size", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "self", ".", "gc3", "=", "GraphConvolution", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "self", ".", "gc4", "=", "GraphConvolution", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "size", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "size", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "size", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "size", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "size", ",", "1", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.GCN.init_weights": [[153, 158], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "gc1", ".", "weight", ",", "a", "=", "-", "0.05", ",", "b", "=", "0.05", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "gc2", ".", "weight", ",", "a", "=", "-", "0.05", ",", "b", "=", "0.05", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "gc3", ".", "weight", ",", "a", "=", "-", "0.05", ",", "b", "=", "0.05", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "gc4", ".", "weight", ",", "a", "=", "-", "0.05", ",", "b", "=", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.GCN.forward": [[159, 178], ["feat.to.to.to", "adj.to.to.to", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bonas.GCN.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bonas.GCN.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bonas.GCN.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bonas.GCN.transpose", "bonas.GCN.fc().view", "bonas.GCN.bn1", "bonas.GCN.bn2", "bonas.GCN.bn3", "bonas.GCN.bn4", "bonas.GCN.sigmoid", "bonas.GCN.gc1().transpose", "bonas.GCN.gc2().transpose", "bonas.GCN.gc3().transpose", "bonas.GCN.gc4().transpose", "bonas.GCN.fc", "bonas.GCN.gc1", "bonas.GCN.gc2", "bonas.GCN.gc3", "bonas.GCN.gc4", "bonas.GCN.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ",", "adj", ",", "extract_embedding", "=", "False", ")", ":", "\n", "        ", "feat", "=", "feat", ".", "to", "(", "device", ")", "\n", "adj", "=", "adj", ".", "to", "(", "device", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "gc1", "(", "feat", ",", "adj", ")", ".", "transpose", "(", "2", ",", "1", ")", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "gc2", "(", "x", ",", "adj", ")", ".", "transpose", "(", "2", ",", "1", ")", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "gc3", "(", "x", ",", "adj", ")", ".", "transpose", "(", "2", ",", "1", ")", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "gc4", "(", "x", ",", "adj", ")", ".", "transpose", "(", "2", ",", "1", ")", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "embeddings", "=", "x", "[", ":", ",", "x", ".", "size", "(", ")", "[", "1", "]", "-", "1", ",", ":", "]", "\n", "x", "=", "self", ".", "fc", "(", "embeddings", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "extract_embedding", ":", "\n", "            ", "return", "embeddings", "\n", "", "if", "self", ".", "ifsigmoid", ":", "\n", "            ", "return", "self", ".", "sigmoid", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.BonasPredictor.__init__": [[181, 188], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "encoding_type", "=", "\"bonas\"", ",", "ss_type", "=", "None", ",", "hpo_wrapper", "=", "False", ")", ":", "\n", "        ", "self", ".", "encoding_type", "=", "encoding_type", "\n", "if", "ss_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "ss_type", "=", "ss_type", "\n", "", "self", ".", "hpo_wrapper", "=", "hpo_wrapper", "\n", "self", ".", "default_hyperparams", "=", "{", "\"gcn_hidden\"", ":", "64", ",", "\"batch_size\"", ":", "128", ",", "\"lr\"", ":", "1e-4", "}", "\n", "self", ".", "hyperparams", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.BonasPredictor.get_model": [[189, 192], ["bonas.GCN"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "predictor", "=", "GCN", "(", "**", "kwargs", ")", "\n", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.BonasPredictor.fit": [[193, 252], ["numpy.mean", "numpy.std", "enumerate", "numpy.array", "len", "bonas.BonasPredictor.get_model", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "bonas.BonasPredictor.model.to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "bonas.BonasPredictor.model.train", "range", "numpy.squeeze", "numpy.mean", "bonas.BonasPredictor.default_hyperparams.copy", "naslib.predictors.utils.encodings.encode", "float", "numpy.array.append", "bonas.BonasPredictor.model.parameters", "naslib.utils.utils.AverageMeterGroup", "enumerate", "torch.lr_scheduler.CosineAnnealingLR.step", "bonas.BonasPredictor.query", "abs", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "bonas.BonasPredictor.model", "torch.MSELoss().to.", "nn.MSELoss().to.backward", "torch.Adam.step", "bonas.accuracy_mse", "naslib.utils.utils.AverageMeterGroup.update", "batch[].to", "batch[].to", "batch[].float().to", "nn.MSELoss().to.item", "accuracy_mse.item", "target.size", "batch[].float"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.get_model", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.accuracy_mse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "epochs", "=", "100", ",", "wd", "=", "0", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "batch_size", "=", "self", ".", "hyperparams", "[", "\"batch_size\"", "]", "\n", "gcn_hidden", "=", "self", ".", "hyperparams", "[", "\"gcn_hidden\"", "]", "\n", "lr", "=", "self", ".", "hyperparams", "[", "\"lr\"", "]", "\n", "\n", "# get mean and std, normlize accuracies", "\n", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "ytrain_normed", "=", "(", "ytrain", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "# encode data in gcn format", "\n", "train_data", "=", "[", "]", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "xtrain", ")", ":", "\n", "            ", "encoded", "=", "encode", "(", "\n", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", "\n", ")", "\n", "encoded", "[", "\"val_acc\"", "]", "=", "float", "(", "ytrain_normed", "[", "i", "]", ")", "\n", "train_data", ".", "append", "(", "encoded", ")", "\n", "", "train_data", "=", "np", ".", "array", "(", "train_data", ")", "\n", "nfeat", "=", "len", "(", "train_data", "[", "0", "]", "[", "\"operations\"", "]", "[", "0", "]", ")", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", "gcn_hidden", "=", "gcn_hidden", ",", "nfeat", "=", "nfeat", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", "\n", ")", "\n", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "epochs", ",", "eta_min", "=", "0", "\n", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "meters", "=", "AverageMeterGroup", "(", ")", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "for", "_", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "feat", ",", "adjmat", ",", "target", "=", "(", "\n", "batch", "[", "\"operations\"", "]", ".", "to", "(", "device", ")", ",", "\n", "batch", "[", "\"adjacency\"", "]", ".", "to", "(", "device", ")", ",", "\n", "batch", "[", "\"val_acc\"", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "prediction", "=", "self", ".", "model", "(", "feat", ",", "adjmat", ")", "\n", "# print('predictions:\\n{}'.format(prediction))", "\n", "loss", "=", "criterion", "(", "prediction", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "mse", "=", "accuracy_mse", "(", "prediction", ",", "target", ")", "\n", "meters", ".", "update", "(", "\n", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", ",", "\"mse\"", ":", "mse", ".", "item", "(", ")", "}", ",", "n", "=", "target", ".", "size", "(", "0", ")", "\n", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", ")", "\n", "", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "query", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.BonasPredictor.query": [[253, 274], ["numpy.array", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "bonas.BonasPredictor.model.eval", "numpy.concatenate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "naslib.predictors.utils.encodings.encode", "bonas.BonasPredictor.model", "numpy.concatenate.append", "bonas.BonasPredictor.cpu().numpy", "bonas.BonasPredictor.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ",", "eval_batch_size", "=", "100", ")", ":", "\n", "        ", "test_data", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtest", "\n", "]", "\n", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "eval_batch_size", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "pred", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", ",", "batch", "in", "enumerate", "(", "test_data_loader", ")", ":", "\n", "                ", "feat", ",", "adjmat", "=", "batch", "[", "\"operations\"", "]", ",", "batch", "[", "\"adjacency\"", "]", "\n", "prediction", "=", "self", ".", "model", "(", "feat", ",", "adjmat", ")", "\n", "pred", ".", "append", "(", "prediction", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "pred", "=", "np", ".", "concatenate", "(", "pred", ")", "\n", "return", "pred", "*", "self", ".", "std", "+", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.BonasPredictor.set_random_hyperparams": [[275, 289], ["bonas.BonasPredictor.default_hyperparams.copy", "int", "int", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"gcn_hidden\"", ":", "int", "(", "loguniform", "(", "16", ",", "128", ")", ")", ",", "\n", "\"batch_size\"", ":", "int", "(", "loguniform", "(", "32", ",", "256", ")", ")", ",", "\n", "\"lr\"", ":", "loguniform", "(", "0.00001", ",", "0.1", ")", ",", "\n", "}", "\n", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize": [[28, 36], ["numpy.array", "numpy.power().flatten", "numpy.diag", "numpy.dot", "np.dot.sum", "numpy.power", "numpy.isinf"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten"], ["def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.0", "\n", "r_mat_inv", "=", "np", ".", "diag", "(", "r_inv", ")", "\n", "mx", "=", "np", ".", "dot", "(", "r_mat_inv", ",", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.normalize_adj": [[38, 43], ["adj.size", "adj.sum().repeat", "torch.div", "torch.div", "torch.div", "torch.div", "adj.sum"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "# Row-normalize matrix", "\n", "    ", "last_dim", "=", "adj", ".", "size", "(", "-", "1", ")", "\n", "rowsum", "=", "adj", ".", "sum", "(", "2", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "1", ",", "last_dim", ")", "\n", "return", "torch", ".", "div", "(", "adj", ",", "rowsum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.accuracy_mse": [[45, 49], ["torch.mse_loss", "prediction.detach"], "function", ["None"], ["", "def", "accuracy_mse", "(", "prediction", ",", "target", ",", "scale", "=", "100.0", ")", ":", "\n", "    ", "prediction", "=", "prediction", ".", "detach", "(", ")", "*", "scale", "\n", "target", "=", "(", "target", ")", "*", "scale", "\n", "return", "F", ".", "mse_loss", "(", "prediction", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.add_global_node": [[51, 63], ["numpy.column_stack", "numpy.row_stack", "numpy.fill_diagonal", "numpy.column_stack", "numpy.row_stack", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "add_global_node", "(", "mx", ",", "ifAdj", ")", ":", "\n", "    ", "\"\"\"add a global node to operation or adjacency matrixs, fill diagonal for adj and transpose adjs\"\"\"", "\n", "if", "ifAdj", ":", "\n", "        ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "ones", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "mx", ",", "1", ")", "\n", "mx", "=", "mx", ".", "T", "\n", "", "else", ":", "\n", "        ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "[", "mx", ".", "shape", "[", "0", "]", "-", "1", "]", "[", "mx", ".", "shape", "[", "1", "]", "-", "1", "]", "=", "1", "\n", "", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.padzero": [[65, 74], ["numpy.column_stack", "numpy.row_stack", "numpy.row_stack", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "padzero", "(", "mx", ",", "ifAdj", ",", "maxsize", "=", "7", ")", ":", "\n", "    ", "if", "ifAdj", ":", "\n", "        ", "while", "mx", ".", "shape", "[", "0", "]", "<", "maxsize", ":", "\n", "            ", "mx", "=", "np", ".", "column_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "while", "mx", ".", "shape", "[", "0", "]", "<", "maxsize", ":", "\n", "            ", "mx", "=", "np", ".", "row_stack", "(", "(", "mx", ",", "np", ".", "zeros", "(", "mx", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "", "", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.bonas.net_decoder": [[76, 92], ["numpy.array", "range", "numpy.zeros", "len", "len", "numpy.arange", "len"], "function", ["None"], ["", "def", "net_decoder", "(", "operations", ")", ":", "\n", "    ", "operations", "=", "np", ".", "array", "(", "operations", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "operations", ")", ")", ":", "\n", "        ", "if", "operations", "[", "i", "]", "==", "2", ":", "# input", "\n", "            ", "operations", "[", "i", "]", "=", "3", "\n", "", "elif", "operations", "[", "i", "]", "==", "3", ":", "# conv1", "\n", "            ", "operations", "[", "i", "]", "=", "0", "\n", "", "elif", "operations", "[", "i", "]", "==", "4", ":", "# pool", "\n", "            ", "operations", "[", "i", "]", "=", "2", "\n", "", "elif", "operations", "[", "i", "]", "==", "5", ":", "# conv3", "\n", "            ", "operations", "[", "i", "]", "=", "1", "\n", "", "elif", "operations", "[", "i", "]", "==", "6", ":", "# output", "\n", "            ", "operations", "[", "i", "]", "=", "4", "\n", "", "", "one_hot", "=", "np", ".", "zeros", "(", "(", "len", "(", "operations", ")", ",", "5", ")", ")", "\n", "one_hot", "[", "np", ".", "arange", "(", "len", "(", "operations", ")", ")", ",", "operations", "]", "=", "1", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.soloss.SoLosspredictor.__init__": [[13, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "metric", "=", "\"train_loss\"", ",", "sum_option", "=", "\"SoTLEMA\"", ")", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "self", ".", "sum_option", "=", "sum_option", "\n", "self", ".", "name", "=", "\"SoLoss\"", "\n", "self", ".", "need_separate_hpo", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.soloss.SoLosspredictor.query": [[19, 51], ["len", "zip", "numpy.array", "test_set_scores.append", "test_set_scores.append", "range", "numpy.sum", "numpy.sum", "EMA_SoTL.append"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", ")", ":", "\n", "        ", "\"\"\"\n        This can be called any number of times during the NAS algorithm.\n        inputs: list of architectures,\n                info about the architectures (e.g., training data up to 20 epochs)\n        output: predictions for the architectures\n        \"\"\"", "\n", "test_set_scores", "=", "[", "]", "\n", "learning_curves", "=", "[", "inf", "[", "\"lc\"", "]", "for", "inf", "in", "info", "]", "\n", "trained_epochs", "=", "len", "(", "info", "[", "0", "]", "[", "\"lc\"", "]", ")", "\n", "for", "test_arch", ",", "past_loss", "in", "zip", "(", "xtest", ",", "learning_curves", ")", ":", "\n", "# assume we have the training loss for each preceding epoch: past_loss is a list", "\n", "            ", "if", "self", ".", "sum_option", "==", "\"SoTLE\"", "or", "self", ".", "sum_option", "==", "\"SoVLE\"", ":", "\n", "                ", "score", "=", "past_loss", "[", "-", "1", "]", "\n", "", "elif", "self", ".", "sum_option", "==", "\"SoTLEMA\"", ":", "\n", "                ", "EMA_SoTL", "=", "[", "]", "\n", "mu", "=", "0.99", "\n", "for", "se", "in", "range", "(", "trained_epochs", ")", ":", "\n", "                    ", "if", "se", "<=", "0", ":", "\n", "                        ", "ema", "=", "past_loss", "[", "se", "]", "\n", "", "else", ":", "\n", "                        ", "ema", "=", "ema", "*", "(", "1", "-", "mu", ")", "+", "mu", "*", "past_loss", "[", "se", "]", "\n", "", "EMA_SoTL", ".", "append", "(", "ema", ")", "\n", "", "score", "=", "np", ".", "sum", "(", "EMA_SoTL", ")", "\n", "", "else", ":", "\n", "                ", "score", "=", "np", ".", "sum", "(", "past_loss", ")", "\n", "", "if", "self", ".", "metric", "in", "[", "Metric", ".", "VAL_LOSS", ",", "Metric", ".", "TRAIN_LOSS", ",", "Metric", ".", "TEST_LOSS", "]", ":", "\n", "                ", "test_set_scores", ".", "append", "(", "-", "score", ")", "\n", "", "else", ":", "\n", "                ", "test_set_scores", ".", "append", "(", "score", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "test_set_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.soloss.SoLosspredictor.get_data_reqs": [[52, 66], ["None"], "methods", ["None"], ["", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query.\n        \"\"\"", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "True", ",", "\n", "\"metric\"", ":", "self", ".", "metric", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "None", ",", "\n", "\"unlabeled\"", ":", "False", ",", "\n", "\"unlabeled_factor\"", ":", "0", ",", "\n", "}", "\n", "return", "reqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.early_stopping.EarlyStopping.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "metric", ")", ":", "\n", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.early_stopping.EarlyStopping.query": [[12, 23], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", ")", ":", "\n", "        ", "\"\"\"\n        info: a list of dictionaries which include the learning curve of the\n        corresponding architecture.\n        Return the final value on the learning curve\n        \"\"\"", "\n", "if", "self", ".", "metric", "in", "[", "Metric", ".", "VAL_LOSS", ",", "Metric", ".", "TRAIN_LOSS", "]", ":", "\n", "# invert to get accurate rank correlation", "\n", "            ", "return", "np", ".", "array", "(", "[", "-", "inf", "[", "\"lc\"", "]", "[", "-", "1", "]", "for", "inf", "in", "info", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "inf", "[", "\"lc\"", "]", "[", "-", "1", "]", "for", "inf", "in", "info", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.early_stopping.EarlyStopping.get_metric": [[24, 26], ["None"], "methods", ["None"], ["", "", "def", "get_metric", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.early_stopping.EarlyStopping.get_data_reqs": [[27, 41], ["None"], "methods", ["None"], ["", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query.\n        \"\"\"", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "True", ",", "\n", "\"metric\"", ":", "self", ".", "metric", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "None", ",", "\n", "\"unlabeled\"", ":", "False", ",", "\n", "\"unlabeled_factor\"", ":", "0", ",", "\n", "}", "\n", "return", "reqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.DirectedGraphConvolution.__init__": [[44, 52], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "gcn.DirectedGraphConvolution.reset_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.DirectedGraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "in_features", ",", "out_features", ")", ")", ")", "\n", "self", ".", "weight2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "in_features", ",", "out_features", ")", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.DirectedGraphConvolution.reset_parameters": [[53, 56], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight1", ".", "data", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight2", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.DirectedGraphConvolution.forward": [[57, 65], ["gcn.normalize_adj", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "gcn.normalize_adj", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "gcn.DirectedGraphConvolution.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "adj.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.normalize_adj", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.normalize_adj"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "adj", ")", ":", "\n", "        ", "norm_adj", "=", "normalize_adj", "(", "adj", ")", "\n", "output1", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "norm_adj", ",", "torch", ".", "matmul", "(", "inputs", ",", "self", ".", "weight1", ")", ")", ")", "\n", "inv_norm_adj", "=", "normalize_adj", "(", "adj", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "output2", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "inv_norm_adj", ",", "torch", ".", "matmul", "(", "inputs", ",", "self", ".", "weight2", ")", ")", ")", "\n", "out", "=", "(", "output1", "+", "output2", ")", "/", "2", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.DirectedGraphConvolution.__repr__": [[66, 74], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", "+", "\" (\"", "\n", "+", "str", "(", "self", ".", "in_features", ")", "\n", "+", "\" -> \"", "\n", "+", "str", "(", "self", ".", "out_features", ")", "\n", "+", "\")\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.NeuralPredictorModel.__init__": [[78, 92], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "gcn.DirectedGraphConvolution", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "initial_hidden", "=", "-", "1", ",", "gcn_hidden", "=", "144", ",", "gcn_layers", "=", "4", ",", "linear_hidden", "=", "128", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gcn", "=", "[", "\n", "DirectedGraphConvolution", "(", "\n", "initial_hidden", "if", "i", "==", "0", "else", "gcn_hidden", ",", "gcn_hidden", "\n", ")", "\n", "for", "i", "in", "range", "(", "gcn_layers", ")", "\n", "]", "\n", "self", ".", "gcn", "=", "nn", ".", "ModuleList", "(", "self", ".", "gcn", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "gcn_hidden", ",", "linear_hidden", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "linear_hidden", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.NeuralPredictorModel.forward": [[93, 114], ["adj.to.to.to", "numv.to.to.to", "layer.to", "adj.to.to.size", "gcn.normalize_adj", "gcn.graph_pooling", "gcn.NeuralPredictorModel.fc1", "gcn.NeuralPredictorModel.dropout", "gcn.NeuralPredictorModel.fc2().view", "layer", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "gcn.NeuralPredictorModel.fc2"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.normalize_adj", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.graph_pooling"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "numv", ",", "adj", ",", "out", "=", "(", "\n", "inputs", "[", "\"num_vertices\"", "]", ",", "\n", "inputs", "[", "\"adjacency\"", "]", ",", "\n", "inputs", "[", "\"operations\"", "]", ",", "\n", ")", "\n", "adj", "=", "adj", ".", "to", "(", "device", ")", "\n", "numv", "=", "numv", ".", "to", "(", "device", ")", "\n", "out", "=", "out", ".", "to", "(", "device", ")", "\n", "gs", "=", "adj", ".", "size", "(", "1", ")", "# graph node number", "\n", "\n", "adj_with_diag", "=", "normalize_adj", "(", "\n", "adj", "+", "torch", ".", "eye", "(", "gs", ",", "device", "=", "adj", ".", "device", ")", "\n", ")", "# assuming diagonal is not 1", "\n", "for", "layer", "in", "self", ".", "gcn", ":", "\n", "            ", "out", "=", "layer", "(", "out", ",", "adj_with_diag", ")", "\n", "", "out", "=", "graph_pooling", "(", "out", ",", "numv", ")", "\n", "out", "=", "self", ".", "fc1", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.GCNPredictor.__init__": [[117, 129], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "encoding_type", "=", "\"gcn\"", ",", "ss_type", "=", "None", ",", "hpo_wrapper", "=", "False", ")", ":", "\n", "        ", "self", ".", "encoding_type", "=", "encoding_type", "\n", "if", "ss_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "ss_type", "=", "ss_type", "\n", "", "self", ".", "hpo_wrapper", "=", "hpo_wrapper", "\n", "self", ".", "default_hyperparams", "=", "{", "\n", "\"gcn_hidden\"", ":", "144", ",", "\n", "\"batch_size\"", ":", "7", ",", "\n", "\"lr\"", ":", "1e-4", ",", "\n", "\"wd\"", ":", "3e-4", ",", "\n", "}", "\n", "self", ".", "hyperparams", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.GCNPredictor.get_model": [[130, 146], ["gcn.NeuralPredictorModel", "NotImplementedError"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "ss_type", "==", "\"nasbench101\"", ":", "\n", "            ", "initial_hidden", "=", "5", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nasbench201\"", ":", "\n", "            ", "initial_hidden", "=", "7", "\n", "", "elif", "self", ".", "ss_type", "==", "\"darts\"", ":", "\n", "            ", "initial_hidden", "=", "9", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nlp\"", ":", "\n", "            ", "initial_hidden", "=", "8", "\n", "", "elif", "self", ".", "ss_type", "==", "\"transbench101\"", ":", "\n", "            ", "initial_hidden", "=", "7", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "predictor", "=", "NeuralPredictorModel", "(", "initial_hidden", "=", "initial_hidden", ")", "\n", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.GCNPredictor.fit": [[147, 201], ["numpy.mean", "numpy.std", "enumerate", "numpy.array", "gcn.GCNPredictor.get_model", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "gcn.GCNPredictor.model.to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "gcn.GCNPredictor.model.train", "range", "numpy.squeeze", "numpy.mean", "gcn.GCNPredictor.default_hyperparams.copy", "naslib.predictors.utils.encodings.encode", "float", "numpy.array.append", "gcn.GCNPredictor.model.parameters", "naslib.utils.utils.AverageMeterGroup", "enumerate", "torch.lr_scheduler.CosineAnnealingLR.step", "gcn.GCNPredictor.query", "abs", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "batch[].float().to", "gcn.GCNPredictor.model", "torch.MSELoss().to.", "nn.MSELoss().to.backward", "torch.Adam.step", "gcn.accuracy_mse", "naslib.utils.utils.AverageMeterGroup.update", "batch[].float", "nn.MSELoss().to.item", "accuracy_mse.item", "batch[].float().to.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.get_model", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.accuracy_mse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "epochs", "=", "300", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "gcn_hidden", "=", "self", ".", "hyperparams", "[", "\"gcn_hidden\"", "]", "\n", "batch_size", "=", "self", ".", "hyperparams", "[", "\"batch_size\"", "]", "\n", "lr", "=", "self", ".", "hyperparams", "[", "\"lr\"", "]", "\n", "wd", "=", "self", ".", "hyperparams", "[", "\"wd\"", "]", "\n", "\n", "# get mean and std, normlize accuracies", "\n", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "ytrain_normed", "=", "(", "ytrain", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "# encode data in gcn format", "\n", "train_data", "=", "[", "]", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "xtrain", ")", ":", "\n", "            ", "encoded", "=", "encode", "(", "\n", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", "\n", ")", "\n", "encoded", "[", "\"val_acc\"", "]", "=", "float", "(", "ytrain_normed", "[", "i", "]", ")", "\n", "train_data", ".", "append", "(", "encoded", ")", "\n", "", "train_data", "=", "np", ".", "array", "(", "train_data", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", "gcn_hidden", "=", "gcn_hidden", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", "\n", ")", "\n", "\n", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "epochs", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "meters", "=", "AverageMeterGroup", "(", ")", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "for", "_", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "target", "=", "batch", "[", "\"val_acc\"", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "prediction", "=", "self", ".", "model", "(", "batch", ")", "\n", "loss", "=", "criterion", "(", "prediction", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "mse", "=", "accuracy_mse", "(", "prediction", ",", "target", ")", "\n", "meters", ".", "update", "(", "\n", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", ",", "\"mse\"", ":", "mse", ".", "item", "(", ")", "}", ",", "n", "=", "target", ".", "size", "(", "0", ")", "\n", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", ")", "\n", "", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "query", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.GCNPredictor.query": [[202, 220], ["numpy.array", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "gcn.GCNPredictor.model.eval", "numpy.concatenate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "naslib.predictors.utils.encodings.encode", "gcn.GCNPredictor.model", "numpy.concatenate.append", "gcn.GCNPredictor.cpu().numpy", "gcn.GCNPredictor.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ",", "eval_batch_size", "=", "1000", ")", ":", "\n", "        ", "test_data", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtest", "\n", "]", "\n", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "eval_batch_size", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "pred", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", ",", "batch", "in", "enumerate", "(", "test_data_loader", ")", ":", "\n", "                ", "prediction", "=", "self", ".", "model", "(", "batch", ")", "\n", "pred", ".", "append", "(", "prediction", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "pred", "=", "np", ".", "concatenate", "(", "pred", ")", "\n", "return", "pred", "*", "self", ".", "std", "+", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.GCNPredictor.set_random_hyperparams": [[221, 236], ["gcn.GCNPredictor.default_hyperparams.copy", "int", "int", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform", "naslib.predictors.trees.ngb.loguniform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"gcn_hidden\"", ":", "int", "(", "loguniform", "(", "64", ",", "200", ")", ")", ",", "\n", "\"batch_size\"", ":", "int", "(", "loguniform", "(", "5", ",", "32", ")", ")", ",", "\n", "\"lr\"", ":", "loguniform", "(", "0.00001", ",", "0.1", ")", ",", "\n", "\"wd\"", ":", "loguniform", "(", "0.00001", ",", "0.1", ")", ",", "\n", "}", "\n", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.normalize_adj": [[25, 30], ["adj.size", "adj.sum().repeat", "torch.div", "torch.div", "torch.div", "torch.div", "adj.sum"], "function", ["None"], ["def", "normalize_adj", "(", "adj", ")", ":", "\n", "# Row-normalize matrix", "\n", "    ", "last_dim", "=", "adj", ".", "size", "(", "-", "1", ")", "\n", "rowsum", "=", "adj", ".", "sum", "(", "2", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "1", ",", "last_dim", ")", "\n", "return", "torch", ".", "div", "(", "adj", ",", "rowsum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.graph_pooling": [[32, 35], ["inputs.sum", "torch.div", "torch.div", "torch.div", "torch.div", "num_vertices.unsqueeze().expand_as", "num_vertices.unsqueeze"], "function", ["None"], ["", "def", "graph_pooling", "(", "inputs", ",", "num_vertices", ")", ":", "\n", "    ", "out", "=", "inputs", ".", "sum", "(", "1", ")", "\n", "return", "torch", ".", "div", "(", "out", ",", "num_vertices", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.accuracy_mse": [[37, 41], ["torch.mse_loss", "prediction.detach"], "function", ["None"], ["", "def", "accuracy_mse", "(", "prediction", ",", "target", ",", "scale", "=", "100.0", ")", ":", "\n", "    ", "prediction", "=", "prediction", ".", "detach", "(", ")", "*", "scale", "\n", "target", "=", "(", "target", ")", "*", "scale", "\n", "return", "F", ".", "mse_loss", "(", "prediction", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.FeedforwardNet.__init__": [[24, 53], ["torch.Module.__init__", "eval", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "len", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dims", ":", "int", "=", "5", ",", "\n", "num_layers", ":", "int", "=", "3", ",", "\n", "layer_width", ":", "list", "=", "[", "10", ",", "10", ",", "10", "]", ",", "\n", "output_dims", ":", "int", "=", "1", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FeedforwardNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "\n", "len", "(", "layer_width", ")", "==", "num_layers", "\n", ")", ",", "\"number of widths should be \\\n        equal to the number of layers\"", "\n", "\n", "self", ".", "activation", "=", "eval", "(", "\"F.\"", "+", "activation", ")", "\n", "\n", "all_units", "=", "[", "input_dims", "]", "+", "layer_width", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "all_units", "[", "i", "]", ",", "all_units", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "all_units", "[", "-", "1", "]", ",", "1", ")", "\n", "\n", "# make the init similar to the tf.keras version", "\n", "for", "l", "in", "self", ".", "layers", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "l", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "l", ".", "bias", ")", "\n", "", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "out", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "out", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.FeedforwardNet.forward": [[54, 58], ["mlp.FeedforwardNet.out", "mlp.FeedforwardNet.activation", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "layer", "(", "x", ")", ")", "\n", "", "return", "self", ".", "out", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.FeedforwardNet.basis_funcs": [[59, 63], ["mlp.FeedforwardNet.activation", "layer"], "methods", ["None"], ["", "def", "basis_funcs", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "layer", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.MLPPredictor.__init__": [[66, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "\n", "ss_type", "=", "\"nasbench201\"", ",", "\n", "hpo_wrapper", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "ss_type", "=", "ss_type", "\n", "self", ".", "hpo_wrapper", "=", "hpo_wrapper", "\n", "self", ".", "default_hyperparams", "=", "{", "\n", "\"num_layers\"", ":", "20", ",", "\n", "\"layer_width\"", ":", "20", ",", "\n", "\"batch_size\"", ":", "32", ",", "\n", "\"lr\"", ":", "0.001", ",", "\n", "\"regularization\"", ":", "0.2", ",", "\n", "}", "\n", "self", ".", "hyperparams", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.MLPPredictor.get_model": [[84, 87], ["mlp.FeedforwardNet"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "predictor", "=", "FeedforwardNet", "(", "**", "kwargs", ")", "\n", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.MLPPredictor.fit": [[88, 176], ["numpy.mean", "numpy.std", "numpy.array", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "mlp.MLPPredictor.get_model", "mlp.MLPPredictor.model.to", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "mlp.MLPPredictor.model.train", "range", "numpy.squeeze", "numpy.mean", "mlp.MLPPredictor.default_hyperparams.copy", "numpy.array", "mlp.MLPPredictor.model.parameters", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "naslib.utils.utils.AverageMeterGroup", "enumerate", "mlp.MLPPredictor.query", "abs", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.Adam.zero_grad", "batch[].to", "batch[].to", "mlp.MLPPredictor.model().view", "torch.L1Loss().to.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nn.L1Loss().to.backward", "torch.Adam.step", "mlp.accuracy_mse", "naslib.utils.utils.AverageMeterGroup.update", "print", "naslib.predictors.utils.encodings.encode", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "mlp.MLPPredictor.model", "x[].view", "nn.L1Loss().to.item", "accuracy_mse.item", "batch[].to.size", "mlp.MLPPredictor.model.named_parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.get_model", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.accuracy_mse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "epochs", "=", "500", ",", "loss", "=", "\"mae\"", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "num_layers", "=", "self", ".", "hyperparams", "[", "\"num_layers\"", "]", "\n", "layer_width", "=", "self", ".", "hyperparams", "[", "\"layer_width\"", "]", "\n", "batch_size", "=", "self", ".", "hyperparams", "[", "\"batch_size\"", "]", "\n", "lr", "=", "self", ".", "hyperparams", "[", "\"lr\"", "]", "\n", "regularization", "=", "self", ".", "hyperparams", "[", "\"regularization\"", "]", "\n", "\n", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "if", "self", ".", "encoding_type", "is", "not", "None", ":", "\n", "            ", "_xtrain", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtrain", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "_xtrain", "=", "xtrain", "\n", "", "_ytrain", "=", "np", ".", "array", "(", "ytrain", ")", "\n", "\n", "X_tensor", "=", "torch", ".", "FloatTensor", "(", "_xtrain", ")", ".", "to", "(", "device", ")", "\n", "y_tensor", "=", "torch", ".", "FloatTensor", "(", "_ytrain", ")", ".", "to", "(", "device", ")", "\n", "\n", "train_data", "=", "TensorDataset", "(", "X_tensor", ",", "y_tensor", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "pin_memory", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", "\n", "input_dims", "=", "_xtrain", ".", "shape", "[", "1", "]", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "layer_width", "=", "num_layers", "*", "[", "layer_width", "]", ",", "\n", ")", "\n", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "if", "loss", "==", "\"mse\"", ":", "\n", "            ", "criterion", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "loss", "==", "\"mae\"", ":", "\n", "            ", "criterion", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "e", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "meters", "=", "AverageMeterGroup", "(", ")", "\n", "for", "b", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "# print('BATCH')", "\n", "# print(batch)", "\n", "# print('BATCH 0')", "\n", "# print(batch[0])", "\n", "# print('BATCH 1')", "\n", "# print(batch[1])", "\n", "input", "=", "batch", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "target", "=", "batch", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "prediction", "=", "self", ".", "model", "(", "input", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "loss_fn", "=", "criterion", "(", "prediction", ",", "target", ")", "\n", "# add L1 regularization", "\n", "params", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "x", "[", "1", "]", ".", "view", "(", "-", "1", ")", "\n", "for", "x", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "\n", "if", "x", "[", "0", "]", "==", "\"out.weight\"", "\n", "]", "\n", ")", "\n", "loss_fn", "+=", "regularization", "*", "torch", ".", "norm", "(", "params", ",", "1", ")", "\n", "loss_fn", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "mse", "=", "accuracy_mse", "(", "prediction", ",", "target", ")", "\n", "meters", ".", "update", "(", "\n", "{", "\"loss\"", ":", "loss_fn", ".", "item", "(", ")", ",", "\"mse\"", ":", "mse", ".", "item", "(", ")", "}", ",", "n", "=", "target", ".", "size", "(", "0", ")", "\n", ")", "\n", "\n", "", "if", "verbose", "and", "e", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "\"Epoch {}, {}, {}\"", ".", "format", "(", "e", ",", "meters", "[", "\"loss\"", "]", ",", "meters", "[", "\"mse\"", "]", ")", ")", "\n", "\n", "", "", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "query", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.MLPPredictor.query": [[177, 202], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "mlp.MLPPredictor.model.eval", "numpy.concatenate", "numpy.squeeze", "numpy.array", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "mlp.MLPPredictor.model().view", "numpy.concatenate.append", "naslib.predictors.utils.encodings.encode", "mlp.MLPPredictor.cpu().numpy", "mlp.MLPPredictor.model", "batch[].to", "mlp.MLPPredictor.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ",", "eval_batch_size", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "encoding_type", "is", "not", "None", ":", "\n", "            ", "xtest", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtest", "\n", "]", "\n", ")", "\n", "", "X_tensor", "=", "torch", ".", "FloatTensor", "(", "xtest", ")", ".", "to", "(", "device", ")", "\n", "test_data", "=", "TensorDataset", "(", "X_tensor", ")", "\n", "\n", "eval_batch_size", "=", "len", "(", "xtest", ")", "if", "eval_batch_size", "is", "None", "else", "eval_batch_size", "\n", "test_data_loader", "=", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "eval_batch_size", ",", "pin_memory", "=", "False", "\n", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "pred", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", ",", "batch", "in", "enumerate", "(", "test_data_loader", ")", ":", "\n", "                ", "prediction", "=", "self", ".", "model", "(", "batch", "[", "0", "]", ".", "to", "(", "device", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "pred", ".", "append", "(", "prediction", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "pred", "=", "np", ".", "concatenate", "(", "pred", ")", "\n", "return", "np", ".", "squeeze", "(", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.MLPPredictor.set_random_hyperparams": [[203, 219], ["mlp.MLPPredictor.default_hyperparams.copy", "int", "int", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"num_layers\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "5", ",", "25", ")", ")", ")", ",", "\n", "\"layer_width\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "5", ",", "25", ")", ")", ")", ",", "\n", "\"batch_size\"", ":", "32", ",", "\n", "\"lr\"", ":", "np", ".", "random", ".", "choice", "(", "[", "0.1", ",", "0.01", ",", "0.005", ",", "0.001", ",", "0.0001", "]", ")", ",", "\n", "\"regularization\"", ":", "0.2", ",", "\n", "}", "\n", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.mlp.accuracy_mse": [[17, 21], ["torch.mse_loss", "prediction.detach"], "function", ["None"], ["def", "accuracy_mse", "(", "prediction", ",", "target", ",", "scale", "=", "100.0", ")", ":", "\n", "    ", "prediction", "=", "prediction", ".", "detach", "(", ")", "*", "scale", "\n", "target", "=", "(", "target", ")", "*", "scale", "\n", "return", "F", ".", "mse_loss", "(", "prediction", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.__init__": [[31, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "zero_cost", ",", "\n", "lce", ",", "\n", "encoding_type", ",", "\n", "ss_type", "=", "None", ",", "\n", "config", "=", "None", ",", "\n", "n_hypers", "=", "35", ",", "\n", "run_pre_compute", "=", "True", ",", "\n", "min_train_size", "=", "0", ",", "\n", "max_zerocost", "=", "np", ".", "inf", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "zero_cost", "=", "zero_cost", "\n", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "n_hypers", "=", "n_hypers", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "lce", "=", "lce", "\n", "self", ".", "ss_type", "=", "ss_type", "\n", "self", ".", "run_pre_compute", "=", "run_pre_compute", "\n", "self", ".", "min_train_size", "=", "min_train_size", "\n", "self", ".", "max_zerocost", "=", "max_zerocost", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.pre_compute": [[55, 85], ["len", "naslib.utils.utils.get_train_val_loaders", "naslib.predictors.zerocost_v1.ZeroCostV1", "copy.deepcopy", "naslib.predictors.zerocost_v1.ZeroCostV1.query", "naslib.predictors.zerocost_v1.ZeroCostV1.query", "numpy.mean", "numpy.std", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "pre_compute", "(", "self", ",", "xtrain", ",", "xtest", ")", ":", "\n", "        ", "\"\"\"\n        All of this computation could go into fit() and query(), but we do it\n        here to save time, so that we don't have to re-compute Jacobian covariances\n        for all train_sizes when running experiment_types that vary train size or fidelity.\n        \"\"\"", "\n", "self", ".", "xtrain_zc_info", "=", "{", "}", "\n", "self", ".", "xtest_zc_info", "=", "{", "}", "\n", "\n", "if", "len", "(", "self", ".", "zero_cost", ")", ">", "0", ":", "\n", "            ", "self", ".", "train_loader", ",", "_", ",", "_", ",", "_", ",", "_", "=", "utils", ".", "get_train_val_loaders", "(", "\n", "self", ".", "config", ",", "mode", "=", "\"train\"", "\n", ")", "\n", "\n", "for", "method_name", "in", "self", ".", "zero_cost", ":", "\n", "                ", "zc_method", "=", "ZeroCostV1", "(", "\n", "self", ".", "config", ",", "batch_size", "=", "64", ",", "method_type", "=", "method_name", "\n", ")", "\n", "zc_method", ".", "train_loader", "=", "copy", ".", "deepcopy", "(", "self", ".", "train_loader", ")", "\n", "xtrain_zc_scores", "=", "zc_method", ".", "query", "(", "xtrain", ")", "\n", "xtest_zc_scores", "=", "zc_method", ".", "query", "(", "xtest", ")", "\n", "\n", "train_mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "xtrain_zc_scores", ")", ")", "\n", "train_std", "=", "np", ".", "std", "(", "(", "np", ".", "array", "(", "xtrain_zc_scores", ")", ")", ")", "\n", "\n", "normalized_train", "=", "(", "np", ".", "array", "(", "xtrain_zc_scores", ")", "-", "train_mean", ")", "/", "train_std", "\n", "normalized_test", "=", "(", "np", ".", "array", "(", "xtest_zc_scores", ")", "-", "train_mean", ")", "/", "train_std", "\n", "\n", "self", ".", "xtrain_zc_info", "[", "f\"{method_name}_scores\"", "]", "=", "normalized_train", "\n", "self", ".", "xtest_zc_info", "[", "f\"{method_name}_scores\"", "]", "=", "normalized_test", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.get_random_params": [[86, 97], ["int", "naslib.predictors.lcsvr.loguniform", "numpy.random.uniform", "numpy.random.uniform", "naslib.predictors.lcsvr.loguniform", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "", "", "def", "get_random_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "{", "\n", "\"param:n_estimators\"", ":", "int", "(", "loguniform", "(", "128", ",", "512", ")", ")", ",", "\n", "\"param:learning_rate\"", ":", "loguniform", "(", "0.001", ",", "0.1", ")", ",", "\n", "\"param:minibatch_frac\"", ":", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "1", ")", ",", "\n", "\"base:max_depth\"", ":", "np", ".", "random", ".", "choice", "(", "24", ")", "+", "1", ",", "\n", "\"base:max_features\"", ":", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "1", ")", ",", "\n", "\"base:min_samples_leaf\"", ":", "np", ".", "random", ".", "choice", "(", "18", ")", "+", "2", ",", "\n", "\"base:min_samples_split\"", ":", "np", ".", "random", ".", "choice", "(", "18", ")", "+", "2", ",", "\n", "}", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.run_hpo": [[98, 112], ["range", "omni_ngb.OmniNGBPredictor.get_random_params", "omni_ngb.OmniNGBPredictor.cross_validate", "max", "logger.info", "min", "int", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.get_random_params", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.cross_validate"], ["", "def", "run_hpo", "(", "self", ",", "xtrain", ",", "ytrain", ")", ":", "\n", "        ", "min_score", "=", "100000", "\n", "best_params", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "n_hypers", ")", ":", "\n", "            ", "params", "=", "self", ".", "get_random_params", "(", ")", "\n", "for", "key", "in", "[", "\"base:min_samples_leaf\"", ",", "\"base:min_samples_split\"", "]", ":", "\n", "                ", "params", "[", "key", "]", "=", "max", "(", "2", ",", "min", "(", "params", "[", "key", "]", ",", "int", "(", "len", "(", "xtrain", ")", "/", "3", ")", "-", "1", ")", ")", "\n", "\n", "", "score", "=", "self", ".", "cross_validate", "(", "xtrain", ",", "ytrain", ",", "params", ")", "\n", "if", "score", "<", "min_score", ":", "\n", "                ", "min_score", "=", "score", "\n", "best_params", "=", "params", "\n", "logger", ".", "info", "(", "\"{} new best {}, {}\"", ".", "format", "(", "i", ",", "score", ",", "params", ")", ")", "\n", "", "", "return", "best_params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.cross_validate": [[113, 129], ["sklearn.tree.DecisionTreeRegressor", "ngboost.NGBRegressor", "sklearn.model_selection.cross_val_score", "numpy.mean", "omni_ngb.parse_params", "omni_ngb.parse_params"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.parse_params", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.parse_params"], ["", "def", "cross_validate", "(", "self", ",", "xtrain", ",", "ytrain", ",", "params", ")", ":", "\n", "        ", "base_learner", "=", "DecisionTreeRegressor", "(", "\n", "criterion", "=", "\"friedman_mse\"", ",", "\n", "random_state", "=", "None", ",", "\n", "splitter", "=", "\"best\"", ",", "\n", "**", "parse_params", "(", "params", ",", "\"base:\"", ")", ",", "\n", ")", "\n", "model", "=", "NGBRegressor", "(", "\n", "Dist", "=", "Normal", ",", "\n", "Base", "=", "base_learner", ",", "\n", "Score", "=", "LogScore", ",", "\n", "verbose", "=", "False", ",", "\n", "**", "parse_params", "(", "params", ",", "\"param:\"", ")", ",", "\n", ")", "\n", "scores", "=", "cross_val_score", "(", "model", ",", "xtrain", ",", "ytrain", ",", "cv", "=", "3", ")", "\n", "return", "np", ".", "mean", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.prepare_features": [[130, 177], ["numpy.array", "numpy.array", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.array", "range", "len", "len", "logger.info", "len", "len", "enumerate", "len", "enumerate", "naslib.predictors.utils.encodings.encode", "enumerate", "enumerate", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "prepare_features", "(", "self", ",", "xdata", ",", "info", ",", "train", "=", "True", ")", ":", "\n", "# prepare training data features", "\n", "        ", "full_xdata", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "xdata", ")", ")", "]", "\n", "if", "len", "(", "self", ".", "zero_cost", ")", ">", "0", "and", "self", ".", "train_size", "<=", "self", ".", "max_zerocost", ":", "\n", "            ", "if", "self", ".", "run_pre_compute", ":", "\n", "                ", "for", "key", "in", "self", ".", "xtrain_zc_info", ":", "\n", "                    ", "if", "train", ":", "\n", "                        ", "full_xdata", "=", "[", "\n", "[", "*", "x", ",", "self", ".", "xtrain_zc_info", "[", "key", "]", "[", "i", "]", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "full_xdata", ")", "\n", "]", "\n", "", "else", ":", "\n", "                        ", "full_xdata", "=", "[", "\n", "[", "*", "x", ",", "self", ".", "xtest_zc_info", "[", "key", "]", "[", "i", "]", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "full_xdata", ")", "\n", "]", "\n", "", "", "", "else", ":", "\n", "# if the zero_cost scores were not precomputed, they are in info", "\n", "                ", "full_xdata", "=", "[", "[", "*", "x", ",", "info", "[", "i", "]", "]", "for", "i", ",", "x", "in", "enumerate", "(", "full_xdata", ")", "]", "\n", "\n", "", "", "if", "\"sotle\"", "in", "self", ".", "lce", "and", "len", "(", "info", "[", "0", "]", "[", "\"TRAIN_LOSS_lc\"", "]", ")", ">=", "3", ":", "\n", "            ", "train_losses", "=", "np", ".", "array", "(", "[", "lcs", "[", "\"TRAIN_LOSS_lc\"", "]", "[", "-", "1", "]", "for", "lcs", "in", "info", "]", ")", "\n", "mean", "=", "np", ".", "mean", "(", "train_losses", ")", "\n", "std", "=", "np", ".", "std", "(", "train_losses", ")", "\n", "normalized", "=", "(", "train_losses", "-", "mean", ")", "/", "std", "\n", "full_xdata", "=", "[", "[", "*", "x", ",", "normalized", "[", "i", "]", "]", "for", "i", ",", "x", "in", "enumerate", "(", "full_xdata", ")", "]", "\n", "\n", "", "elif", "\"sotle\"", "in", "self", ".", "lce", "and", "len", "(", "info", "[", "0", "]", "[", "\"TRAIN_LOSS_lc\"", "]", ")", "<", "3", ":", "\n", "            ", "logger", ".", "info", "(", "\"Not enough fidelities to use train loss\"", ")", "\n", "\n", "", "if", "\"valacc\"", "in", "self", ".", "lce", "and", "len", "(", "info", "[", "0", "]", "[", "\"VAL_ACCURACY_lc\"", "]", ")", ">=", "3", ":", "\n", "            ", "val_accs", "=", "[", "lcs", "[", "\"VAL_ACCURACY_lc\"", "]", "[", "-", "1", "]", "for", "lcs", "in", "info", "]", "\n", "mean", "=", "np", ".", "mean", "(", "val_accs", ")", "\n", "std", "=", "np", ".", "std", "(", "val_accs", ")", "\n", "normalized", "=", "(", "val_accs", "-", "mean", ")", "/", "std", "\n", "full_xdata", "=", "[", "[", "*", "x", ",", "normalized", "[", "i", "]", "]", "for", "i", ",", "x", "in", "enumerate", "(", "full_xdata", ")", "]", "\n", "\n", "", "if", "self", ".", "encoding_type", "is", "not", "None", ":", "\n", "            ", "xdata_encoded", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xdata", "\n", "]", "\n", ")", "\n", "full_xdata", "=", "[", "[", "*", "x", ",", "*", "xdata_encoded", "[", "i", "]", "]", "for", "i", ",", "x", "in", "enumerate", "(", "full_xdata", ")", "]", "\n", "\n", "", "return", "np", ".", "array", "(", "full_xdata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.fit": [[178, 209], ["len", "numpy.mean", "numpy.std", "omni_ngb.OmniNGBPredictor.prepare_features", "omni_ngb.OmniNGBPredictor.run_hpo", "sklearn.tree.DecisionTreeRegressor", "ngboost.NGBRegressor", "omni_ngb.OmniNGBPredictor.model.fit", "len", "numpy.array", "omni_ngb.parse_params", "omni_ngb.parse_params"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.prepare_features", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.run_hpo", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.parse_params", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.parse_params"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", ",", "learn_hyper", "=", "True", ")", ":", "\n", "\n", "# if we are below the min train size, use the zero_cost and lce info", "\n", "        ", "if", "len", "(", "xtrain", ")", "<", "self", ".", "min_train_size", ":", "\n", "            ", "self", ".", "trained", "=", "False", "\n", "return", "None", "\n", "", "self", ".", "trained", "=", "True", "\n", "self", ".", "train_size", "=", "len", "(", "xtrain", ")", "\n", "\n", "# prepare training data labels", "\n", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "ytrain", "=", "(", "np", ".", "array", "(", "ytrain", ")", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "xtrain", "=", "self", ".", "prepare_features", "(", "xtrain", ",", "train_info", ",", "train", "=", "True", ")", "\n", "params", "=", "self", ".", "run_hpo", "(", "xtrain", ",", "ytrain", ")", "\n", "\n", "# todo: this code is repeated in cross_validate", "\n", "base_learner", "=", "DecisionTreeRegressor", "(", "\n", "criterion", "=", "\"friedman_mse\"", ",", "\n", "random_state", "=", "None", ",", "\n", "splitter", "=", "\"best\"", ",", "\n", "**", "parse_params", "(", "params", ",", "\"base:\"", ")", ",", "\n", ")", "\n", "self", ".", "model", "=", "NGBRegressor", "(", "\n", "Dist", "=", "Normal", ",", "\n", "Base", "=", "base_learner", ",", "\n", "Score", "=", "LogScore", ",", "\n", "verbose", "=", "True", ",", "\n", "**", "parse_params", "(", "params", ",", "\"param:\"", ")", ",", "\n", ")", "\n", "self", ".", "model", ".", "fit", "(", "xtrain", ",", "ytrain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.query": [[210, 217], ["omni_ngb.OmniNGBPredictor.prepare_features", "logger.info", "numpy.squeeze", "omni_ngb.OmniNGBPredictor.model.predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.prepare_features", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", ")", ":", "\n", "        ", "if", "self", ".", "trained", ":", "\n", "            ", "test_data", "=", "self", ".", "prepare_features", "(", "xtest", ",", "info", ",", "train", "=", "False", ")", "\n", "return", "np", ".", "squeeze", "(", "self", ".", "model", ".", "predict", "(", "test_data", ")", ")", "*", "self", ".", "std", "+", "self", ".", "mean", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"below the train size, so returning info\"", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.get_data_reqs": [[218, 243], ["len", "super().get_data_reqs"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.get_data_reqs"], ["", "", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query.\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "lce", ")", ">", "0", ":", "\n", "# add the metrics needed for the lce predictors", "\n", "            ", "required_metric_dict", "=", "{", "\n", "\"sotle\"", ":", "Metric", ".", "TRAIN_LOSS", ",", "\n", "\"valacc\"", ":", "Metric", ".", "VAL_ACCURACY", ",", "\n", "}", "\n", "self", ".", "metric", "=", "[", "required_metric_dict", "[", "key", "]", "for", "key", "in", "self", ".", "lce", "]", "\n", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "True", ",", "\n", "\"metric\"", ":", "self", ".", "metric", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "{", "}", ",", "\n", "\"unlabeled\"", ":", "False", ",", "\n", "\"unlabeled_factor\"", ":", "0", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "reqs", "=", "super", "(", ")", ".", "get_data_reqs", "(", ")", "\n", "\n", "", "return", "reqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.parse_params": [[21, 28], ["params.items", "k.startswith", "k.replace"], "function", ["None"], ["def", "parse_params", "(", "params", ",", "identifier", ")", ":", "\n", "    ", "to_return", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "identifier", ")", ":", "\n", "            ", "to_return", "[", "k", ".", "replace", "(", "identifier", ",", "\"\"", ")", "]", "=", "v", "\n", "\n", "", "", "return", "to_return", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.__init__": [[22, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoding_type", "=", "None", ",", "\n", "num_ensemble", "=", "3", ",", "\n", "predictor_type", "=", "None", ",", "\n", "ss_type", "=", "None", ",", "\n", "hpo_wrapper", "=", "True", ",", "\n", "config", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "num_ensemble", "=", "num_ensemble", "\n", "self", ".", "predictor_type", "=", "predictor_type", "\n", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "ss_type", "=", "ss_type", "\n", "self", ".", "hpo_wrapper", "=", "hpo_wrapper", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "hyperparams", "=", "None", "\n", "self", ".", "ensemble", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.get_ensemble": [[40, 118], ["naslib.predictors.mlp.MLPPredictor", "naslib.predictors.bnn.BayesianLinearRegression", "naslib.predictors.bnn.BOHAMIANN", "naslib.predictors.bonas.BonasPredictor", "naslib.predictors.bnn.DNGOPredictor", "naslib.predictors.trees.LGBoost", "naslib.predictors.gcn.GCNPredictor", "naslib.predictors.gp.GPPredictor", "naslib.predictors.gp.GPWLPredictor", "naslib.predictors.mlp.MLPPredictor", "naslib.predictors.seminas.SemiNASPredictor", "naslib.predictors.trees.NGBoost", "naslib.predictors.trees.RandomForestPredictor", "naslib.predictors.seminas.SemiNASPredictor", "naslib.predictors.gp.SparseGPPredictor", "naslib.predictors.gp.VarSparseGPPredictor", "naslib.predictors.trees.XGBoost", "naslib.predictors.omni_ngb.OmniNGBPredictor", "naslib.predictors.omni_seminas.OmniSemiNASPredictor", "copy.deepcopy", "range"], "methods", ["None"], ["", "def", "get_ensemble", "(", "self", ")", ":", "\n", "# TODO: if encoding_type is not None, set the encoding type", "\n", "\n", "        ", "trainable_predictors", "=", "{", "\n", "\"bananas\"", ":", "MLPPredictor", "(", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"path\"", ")", ",", "\n", "\"bayes_lin_reg\"", ":", "BayesianLinearRegression", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"adjacency_one_hot\"", "\n", ")", ",", "\n", "\"bohamiann\"", ":", "BOHAMIANN", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"adjacency_one_hot\"", "\n", ")", ",", "\n", "\"bonas\"", ":", "BonasPredictor", "(", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"bonas\"", ")", ",", "\n", "\"dngo\"", ":", "DNGOPredictor", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"adjacency_one_hot\"", "\n", ")", ",", "\n", "\"lgb\"", ":", "LGBoost", "(", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"adjacency_one_hot\"", ")", ",", "\n", "\"gcn\"", ":", "GCNPredictor", "(", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"gcn\"", ")", ",", "\n", "\"gp\"", ":", "GPPredictor", "(", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"adjacency_one_hot\"", ")", ",", "\n", "\"gpwl\"", ":", "GPWLPredictor", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "\n", "kernel_type", "=", "\"wloa\"", ",", "\n", "optimize_gp_hyper", "=", "True", ",", "\n", "h", "=", "\"auto\"", ",", "\n", ")", ",", "\n", "\"mlp\"", ":", "MLPPredictor", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"adjacency_one_hot\"", "\n", ")", ",", "\n", "\"nao\"", ":", "SemiNASPredictor", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "semi", "=", "False", ",", "encoding_type", "=", "\"seminas\"", "\n", ")", ",", "\n", "\"ngb\"", ":", "NGBoost", "(", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"adjacency_one_hot\"", ")", ",", "\n", "\"rf\"", ":", "RandomForestPredictor", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "encoding_type", "=", "\"adjacency_one_hot\"", "\n", ")", ",", "\n", "\"seminas\"", ":", "SemiNASPredictor", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "semi", "=", "True", ",", "encoding_type", "=", "\"seminas\"", "\n", ")", ",", "\n", "\"sparse_gp\"", ":", "SparseGPPredictor", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "\n", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "\n", "optimize_gp_hyper", "=", "True", ",", "\n", "num_steps", "=", "100", ",", "\n", ")", ",", "\n", "\"var_sparse_gp\"", ":", "VarSparseGPPredictor", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "\n", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "\n", "optimize_gp_hyper", "=", "True", ",", "\n", "num_steps", "=", "200", ",", "\n", "zc", "=", "False", ",", "\n", ")", ",", "\n", "\"xgb\"", ":", "XGBoost", "(", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "zc", "=", "False", ",", "encoding_type", "=", "\"adjacency_one_hot\"", "\n", ")", ",", "\n", "\"omni_ngb\"", ":", "OmniNGBPredictor", "(", "\n", "zero_cost", "=", "[", "\"jacov\"", "]", ",", "\n", "lce", "=", "[", "]", ",", "\n", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "\n", "run_pre_compute", "=", "False", ",", "\n", "n_hypers", "=", "25", ",", "\n", "min_train_size", "=", "0", ",", "\n", "max_zerocost", "=", "100", ",", "\n", ")", ",", "\n", "\"omni_seminas\"", ":", "OmniSemiNASPredictor", "(", "\n", "zero_cost", "=", "[", "\"jacov\"", "]", ",", "\n", "lce", "=", "[", "]", ",", "\n", "encoding_type", "=", "\"seminas\"", ",", "\n", "ss_type", "=", "self", ".", "ss_type", ",", "\n", "run_pre_compute", "=", "False", ",", "\n", "semi", "=", "True", ",", "\n", "max_zerocost", "=", "1000", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "return", "[", "\n", "copy", ".", "deepcopy", "(", "trainable_predictors", "[", "self", ".", "predictor_type", "]", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_ensemble", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.fit": [[120, 138], ["ensemble.Ensemble.set_hyperparams", "range", "ensemble.Ensemble.get_ensemble", "hasattr", "ensemble.Ensemble.ensemble[].default_hyperparams.copy", "ensemble.Ensemble.ensemble[].fit", "train_errors.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_hyperparams", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.get_ensemble", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "ensemble", "is", "None", ":", "\n", "            ", "self", ".", "ensemble", "=", "self", ".", "get_ensemble", "(", ")", "\n", "\n", "", "if", "self", ".", "hyperparams", "is", "None", "and", "hasattr", "(", "\n", "self", ".", "ensemble", "[", "0", "]", ",", "\"default_hyperparams\"", "\n", ")", ":", "\n", "# todo: ideally should implement get_default_hyperparams() for all predictors", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "ensemble", "[", "0", "]", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "self", ".", "set_hyperparams", "(", "self", ".", "hyperparams", ")", "\n", "\n", "train_errors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_ensemble", ")", ":", "\n", "            ", "train_error", "=", "self", ".", "ensemble", "[", "i", "]", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "train_info", ")", "\n", "train_errors", ".", "append", "(", "train_error", ")", "\n", "\n", "", "return", "train_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.query": [[139, 146], ["range", "numpy.array", "ensemble.Ensemble.ensemble[].query", "predictions.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ")", ":", "\n", "        ", "predictions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_ensemble", ")", ":", "\n", "            ", "prediction", "=", "self", ".", "ensemble", "[", "i", "]", ".", "query", "(", "xtest", ",", "info", ")", "\n", "predictions", ".", "append", "(", "prediction", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_hyperparams": [[147, 155], ["ensemble.Ensemble.get_ensemble", "model.set_hyperparams"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.get_ensemble", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_hyperparams"], ["", "def", "set_hyperparams", "(", "self", ",", "params", ")", ":", "\n", "        ", "if", "self", ".", "ensemble", "is", "None", ":", "\n", "            ", "self", ".", "ensemble", "=", "self", ".", "get_ensemble", "(", ")", "\n", "\n", "", "for", "model", "in", "self", ".", "ensemble", ":", "\n", "            ", "model", ".", "set_hyperparams", "(", "params", ")", "\n", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_random_hyperparams": [[156, 173], ["ensemble.Ensemble.set_hyperparams", "ensemble.Ensemble.get_ensemble", "hasattr", "ensemble.Ensemble.ensemble[].default_hyperparams.copy", "ensemble.Ensemble.ensemble[].set_random_hyperparams"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_hyperparams", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.get_ensemble", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.set_random_hyperparams"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ensemble", "is", "None", ":", "\n", "            ", "self", ".", "ensemble", "=", "self", ".", "get_ensemble", "(", ")", "\n", "\n", "", "if", "self", ".", "hyperparams", "is", "None", "and", "hasattr", "(", "\n", "self", ".", "ensemble", "[", "0", "]", ",", "\"default_hyperparams\"", "\n", ")", ":", "\n", "# todo: ideally should implement get_default_hyperparams() for all predictors", "\n", "            ", "params", "=", "self", ".", "ensemble", "[", "0", "]", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "\n", "", "elif", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "params", "=", "None", "\n", "", "else", ":", "\n", "            ", "params", "=", "self", ".", "ensemble", "[", "0", "]", ".", "set_random_hyperparams", "(", ")", "\n", "\n", "", "self", ".", "set_hyperparams", "(", "params", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_pre_computations": [[174, 199], ["ensemble.Ensemble.get_ensemble", "hasattr", "model.set_pre_computations"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.get_ensemble", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_pre_computations"], ["", "def", "set_pre_computations", "(", "\n", "self", ",", "\n", "unlabeled", "=", "None", ",", "\n", "xtrain_zc_info", "=", "None", ",", "\n", "xtest_zc_info", "=", "None", ",", "\n", "unlabeled_zc_info", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Some predictors have pre_computation steps that are performed outside the\n        predictor. E.g., omni needs zerocost metrics computed, and unlabeled data\n        generated. In the case of an ensemble, this method relays that info to\n        the predictor.\n        \"\"\"", "\n", "if", "self", ".", "ensemble", "is", "None", ":", "\n", "            ", "self", ".", "ensemble", "=", "self", ".", "get_ensemble", "(", ")", "\n", "\n", "", "for", "model", "in", "self", ".", "ensemble", ":", "\n", "            ", "assert", "hasattr", "(", "\n", "model", ",", "\"set_pre_computations\"", "\n", ")", ",", "\"set_pre_computations() not implemented\"", "\n", "model", ".", "set_pre_computations", "(", "\n", "unlabeled", "=", "unlabeled", ",", "\n", "xtrain_zc_info", "=", "xtrain_zc_info", ",", "\n", "xtest_zc_info", "=", "xtest_zc_info", ",", "\n", "unlabeled_zc_info", "=", "unlabeled_zc_info", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph.HierarchicalSearchSpace.__init__": [[33, 94], ["naslib.search_spaces.core.graph.Graph.__init__", "range", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_nodes_from", "naslib.search_spaces.core.graph.Graph.add_edges_densly", "zip", "graph.HierarchicalSearchSpace.add_nodes_from", "graph.HierarchicalSearchSpace.add_edges_from", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_nodes_from", "naslib.search_spaces.core.graph.Graph.add_edges_densly", "level2_motifs.append", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope.update_edges", "naslib.search_spaces.core.graph.Graph.copy().set_scope.set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope.update_edges", "cells.append", "naslib.search_spaces.core.primitives.Stem", "naslib.search_spaces.core.primitives.SepConv", "naslib.search_spaces.core.primitives.SepConv", "naslib.search_spaces.core.primitives.Sequential", "naslib.search_spaces.core.primitives.SepConv", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Linear", "range", "naslib.search_spaces.core.graph.Graph.copy", "range", "range", "range", "graph._set_motifs", "graph._set_cell_ops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_edges_densly", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_edges_densly", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph._set_motifs", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph._set_cell_ops"], ["\"stage_3\"", ",", "\n", "]", "\n", "\n", "QUERYABLE", "=", "True", "\n", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "self", ".", "NUM_CLASSES", "if", "hasattr", "(", "self", ",", "'NUM_CLASSES'", ")", "else", "10", "\n", "self", ".", "op_indices", "=", "None", "\n", "\n", "self", ".", "max_epoch", "=", "199", "\n", "self", ".", "space_name", "=", "'transbench101'", "\n", "self", ".", "space", "=", "'micro'", "\n", "#", "\n", "# Cell definition", "\n", "#", "\n", "cell", "=", "Graph", "(", ")", "\n", "cell", ".", "name", "=", "\"cell\"", "# Use the same name for all cells with shared attributes", "\n", "\n", "# Input node", "\n", "cell", ".", "add_node", "(", "1", ")", "\n", "\n", "# Intermediate nodes", "\n", "cell", ".", "add_node", "(", "2", ")", "\n", "cell", ".", "add_node", "(", "3", ")", "\n", "\n", "# Output node", "\n", "cell", ".", "add_node", "(", "4", ")", "\n", "\n", "# Edges", "\n", "cell", ".", "add_edges_densly", "(", ")", "\n", "\n", "#", "\n", "# Makrograph definition", "\n", "#", "\n", "self", ".", "name", "=", "\"makrograph\"", "\n", "\n", "# Cell is on the edges", "\n", "# 1-2:               Preprocessing", "\n", "# 2-3, ..., 6-7:     cells stage 1", "\n", "# 7-8:               residual block stride 2", "\n", "# 8-9, ..., 12-13:   cells stage 2", "\n", "# 13-14:             residual block stride 2", "\n", "# 14-15, ..., 18-19: cells stage 3", "\n", "# 19-20:             post-processing", "\n", "\n", "total_num_nodes", "=", "20", "\n", "self", ".", "add_nodes_from", "(", "range", "(", "1", ",", "total_num_nodes", "+", "1", ")", ")", "\n", "self", ".", "add_edges_from", "(", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "1", ",", "total_num_nodes", ")", "]", ")", "\n", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "\n", "\n", "#", "\n", "# operations at the edges", "\n", "#", "\n", "\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph.HierarchicalSearchSpace.prepare_evaluation": [[97, 163], ["graph.HierarchicalSearchSpace._expand", "zip", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.edges[].set", "graph.HierarchicalSearchSpace.update_edges", "cell.edges.data", "naslib.search_spaces.core.primitives.Stem", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.Sequential", "data.op.update_nodes", "naslib.search_spaces.core.primitives.SepConv", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Linear", "graph._increase_channels", "graph._set_comb_op_channels"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace._expand", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph._increase_channels", "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph._set_comb_op_channels"], ["# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n", "", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n", "\n", "# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n", "", "if", "dataset_api", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n", "\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n", "\n", "\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_neg_loss'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph.HierarchicalSearchSpace._expand": [[165, 179], ["networkx.relabel_nodes", "graph.HierarchicalSearchSpace.remove_edges_from", "graph.HierarchicalSearchSpace.add_edges_from", "list", "graph.HierarchicalSearchSpace.edges", "range"], "methods", ["None"], ["}", "\n", "\n", "", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "else", ":", "# ['normal', 'autoencoder']", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph.LiuFinalArch.__init__": [[285, 443], ["logger.info", "naslib.search_spaces.core.graph.Graph.__init__", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_nodes_from", "naslib.search_spaces.core.graph.Graph.add_edges_densly", "naslib.search_spaces.core.graph.Graph.clone", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].update", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph.clone.edges[].set", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_nodes_from", "naslib.search_spaces.core.graph.Graph.add_edges_densly", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "naslib.search_spaces.core.graph.Graph.edges[].set", "zip", "graph.LiuFinalArch.add_nodes_from", "graph.LiuFinalArch.add_edges_from", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.edges[].set", "graph.LiuFinalArch.compile", "naslib.search_spaces.core.primitives.MaxPool1x1", "naslib.search_spaces.core.primitives.MaxPool1x1", "naslib.search_spaces.core.primitives.MaxPool1x1", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.AvgPool1x1", "naslib.search_spaces.core.primitives.AvgPool1x1", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.MaxPool1x1", "naslib.search_spaces.core.primitives.AvgPool1x1", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.MaxPool1x1", "naslib.search_spaces.core.primitives.MaxPool1x1", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.AvgPool1x1", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.clone.copy", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope.update_edges", "cells.append", "naslib.search_spaces.core.primitives.Stem", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.SepConv", "cells[].copy", "naslib.search_spaces.core.primitives.Sequential", "naslib.search_spaces.core.primitives.SepConv", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Linear", "naslib.search_spaces.core.graph.Graph.copy", "range", "range", "edge.data.update"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_edges_densly", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_edges_densly", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.compile", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "parent_op_ind", "=", "parent_op_indices", "[", "parent_op_indices", "!=", "0", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "parent_op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "dic1", "=", "{", "1", ":", "a", ",", "2", ":", "b", ",", "3", ":", "c", "}", "\n", "dic2", "=", "{", "1", ":", "a_available", ",", "2", ":", "b_available", ",", "3", ":", "c_available", "}", "\n", "\n", "numb", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "\n", "dic1", "[", "numb", "]", "=", "random", ".", "choice", "(", "dic2", "[", "numb", "]", ")", "\n", "\n", "\n", "op_indices", "=", "g", "(", "dic1", "[", "1", "]", ",", "dic1", "[", "2", "]", ",", "dic1", "[", "3", "]", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "mutate", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "mutate_micro", "(", "parent", ",", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "mutate_macro", "(", "parent", ",", "dataset_api", ")", "\n", "\n", "\n", "\n", "", "", "def", "get_nbhd_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "nbrs", "=", "[", "]", "\n", "for", "edge", "in", "range", "(", "len", "(", "self", ".", "op_indices", ")", ")", ":", "\n", "            ", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "self", ".", "op_indices", "[", "edge", "]", "]", "\n", "\n", "for", "op_index", "in", "available", ":", "\n", "                ", "nbr_op_indices", "=", "list", "(", "self", ".", "op_indices", ")", ".", "copy", "(", ")", "\n", "nbr_op_indices", "[", "edge", "]", "=", "op_index", "\n", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n", "\n", "", "def", "get_nbhd_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "op_ind", "=", "self", ".", "op_indices", "[", "self", ".", "op_indices", "!=", "0", "]", "\n", "nbrs", "=", "[", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "for", "r", "in", "a_available", ":", "\n", "            ", "for", "p", "in", "b_available", ":", "\n", "                ", "for", "q", "in", "c_available", ":", "\n", "                    ", "nbr_op_indices", "=", "g", "(", "r", ",", "p", ",", "q", ")", "\n", "while", "len", "(", "nbr_op_indices", ")", "<", "6", ":", "\n", "                        ", "nbr_op_indices", "=", "np", ".", "append", "(", "nbr_op_indices", ",", "0", ")", "\n", "", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n", "\n", "", "def", "get_nbhd", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "\n", "\n", "", "", "def", "get_type", "(", "self", ")", ":", "\n", "#         return 'transbench101'", "\n", "        ", "return", "'transbench101'", "\n", "\n", "\n", "", "", "def", "_set_cell_ops", "(", "edge", ",", "C", ")", ":", "\n", "    ", "edge", ".", "data", ".", "set", "(", "'op'", ",", "[", "\n", "ops", ".", "Identity", "(", ")", ",", "\n", "ops", ".", "Zero", "(", "stride", "=", "1", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "3", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "1", ")", ",", "\n", "]", ")", "\n", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph._set_comb_op_channels": [[214, 218], ["naslib.search_spaces.core.primitives.Concat1x1"], "function", ["None"], ["        ", "if", "self", ".", "op_indices", "is", "None", ":", "\n", "            ", "self", ".", "op_indices", "=", "convert_naslib_to_op_indices", "(", "self", ")", "\n", "", "return", "self", ".", "op_indices", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph._set_cell_ops": [[220, 248], ["isinstance", "all", "isinstance", "edge.data.set", "ValueError", "isinstance", "naslib.search_spaces.core.primitives.Zero1x1", "naslib.search_spaces.core.primitives.MaxPool1x1", "naslib.search_spaces.core.primitives.AvgPool1x1", "naslib.search_spaces.core.primitives.SepConv", "primitives.DepthwiseConv", "primitives.ConvBNReLU", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.FactorizedReduce"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["        ", "return", "tuple", "(", "self", ".", "get_op_indices", "(", ")", ")", "\n", "\n", "\n", "", "def", "set_op_indices", "(", "self", ",", "op_indices", ")", ":", "\n", "# This will update the edges in the naslib object to op_indices", "\n", "        ", "self", ".", "op_indices", "=", "op_indices", "\n", "#         convert_op_indices_to_naslib(op_indices, self)", "\n", "\n", "", "def", "get_arch_iterator", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "return", "itertools", ".", "product", "(", "range", "(", "4", ")", ",", "repeat", "=", "6", ")", "\n", "\n", "", "def", "set_spec", "(", "self", ",", "op_indices", ",", "dataset_api", "=", "None", ")", ":", "\n", "# this is just to unify the setters across search spaces", "\n", "# TODO: change it to set_spec on all search spaces", "\n", "        ", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "sample_random_architecture_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "op_indices", "=", "np", ".", "random", ".", "randint", "(", "4", ",", "size", "=", "(", "6", ")", ")", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph._set_motifs": [[250, 261], ["edge.data.set", "motif.copy", "naslib.search_spaces.core.primitives.Concat1x1", "op.append"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["r", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "p", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "q", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "op_indices", "=", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.graph._increase_channels": [[263, 273], ["isinstance", "edge.data.set", "edge.data.op.__class__"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "", "", "def", "mutate_micro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.primitives.ConvBNReLU.__init__": [[7, 14], ["core.primitives.AbstractPrimitive.__init__", "torch.Sequential", "locals", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.primitives.ConvBNReLU.forward": [[16, 18], ["primitives.ConvBNReLU.op"], "methods", ["None"], ["\n", "\n", "class", "ResNetBasicblock", "(", "AbstractPrimitive", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.primitives.ConvBNReLU.get_embedded_ops": [[19, 21], ["None"], "methods", ["None"], ["\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.primitives.DepthwiseConv.__init__": [[28, 42], ["core.primitives.AbstractPrimitive.__init__", "torch.Sequential", "locals", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "x", ",", "None", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ",", "None", ")", "\n", "residual", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "is", "not", "None", "else", "x", "\n", "return", "residual", "+", "basicblock", "\n", "\n", "\n", "", "def", "get_embedded_ops", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.primitives.DepthwiseConv.forward": [[44, 46], ["primitives.DepthwiseConv.op"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.hierarchical.primitives.DepthwiseConv.get_embedded_ops": [[47, 49], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.add_alphas": [[22, 32], ["len", "torch.nn.Parameter", "edge.data.set", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["@", "staticmethod", "\n", "def", "add_alphas", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to add the architectural weights to the edges.\n        \"\"\"", "\n", "len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.update_ops": [[33, 41], ["edge.data.set", "optimizer.MixedOp"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.__init__": [[42, 70], ["torch.nn.CrossEntropyLoss", "naslib.optimizers.core.metaclasses.MetaOptimizer.__init__", "torch.nn.ParameterList", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a new instance.\n\n        Args:\n\n        \"\"\"", "\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.adapt_search_space": [[71, 116], ["search_space.clone", "search_space.clone.update_edges", "search_space.clone.update_edges", "search_space.clone.get_all_edge_data", "search_space.clone.parse", "optimizer.DARTSOptimizer.op_optimizer", "search_space.clone.train", "optimizer.DARTSOptimizer.architectural_weights.append", "optimizer.DARTSOptimizer.arch_optimizer", "search_space.clone.parameters", "optimizer.DARTSOptimizer.architectural_weights.parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.get_all_edge_data", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n", "# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.get_checkpointables": [[117, 123], ["None"], "methods", ["None"], ["", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.before_training": [[125, 131], ["optimizer.DARTSOptimizer.graph.to", "optimizer.DARTSOptimizer.architectural_weights.to"], "methods", ["None"], ["", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "architectural_weights", "=", "self", ".", "architectural_weights", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.new_epoch": [[132, 147], ["logger.info", "super().new_epoch", "numpy.argmax", "a.detach().cpu().numpy", "a.detach().cpu", "a.detach"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.new_epoch"], ["", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Just log the architecture weights.\n        \"\"\"", "\n", "alpha_str", "=", "[", "\n", "\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n", "logger", ".", "info", "(", "\n", "\"Arch weights (alphas, last column argmax): \\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "alpha_str", ")", "\n", ")", "\n", ")", "\n", "super", "(", ")", ".", "new_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.step": [[148, 175], ["NotImplementedError", "optimizer.DARTSOptimizer.arch_optimizer.zero_grad", "optimizer.DARTSOptimizer.graph", "optimizer.DARTSOptimizer.loss", "optimizer.DARTSOptimizer.backward", "optimizer.DARTSOptimizer.arch_optimizer.step", "optimizer.DARTSOptimizer.op_optimizer.zero_grad", "optimizer.DARTSOptimizer.graph", "optimizer.DARTSOptimizer.loss", "optimizer.DARTSOptimizer.backward", "optimizer.DARTSOptimizer.op_optimizer.step", "torch.nn.utils.clip_grad_norm_", "optimizer.DARTSOptimizer.graph.parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step"], ["", "def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "input_train", ",", "target_train", "=", "data_train", "\n", "input_val", ",", "target_val", "=", "data_val", "\n", "\n", "unrolled", "=", "False", "# what it this?", "\n", "\n", "if", "unrolled", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Update architecture weights", "\n", "            ", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_val", "=", "self", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "logits_val", ",", "target_val", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update op weights", "\n", "self", ".", "op_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_train", "=", "self", ".", "graph", "(", "input_train", ")", "\n", "train_loss", "=", "self", ".", "loss", "(", "logits_train", ",", "target_train", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "graph", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "self", ".", "op_optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.get_final_architecture": [[176, 196], ["logger.info", "optimizer.DARTSOptimizer.graph.clone().unparse", "graph.to.to.prepare_discretization", "graph.to.to.update_edges", "graph.to.to.prepare_evaluation", "graph.to.to.parse", "graph.to.to.to", "edge.data.has", "optimizer.DARTSOptimizer.graph.clone", "edge.data.op.get_embedded_ops", "edge.data.alpha.detach().cpu", "edge.data.set", "edge.data.alpha.detach", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.unparse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.prepare_discretization", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.prepare_evaluation", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "get_final_architecture", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Arch weights before discretization: {}\"", ".", "format", "(", "\n", "[", "a", "for", "a", "in", "self", ".", "architectural_weights", "]", "\n", ")", "\n", ")", "\n", "graph", "=", "self", ".", "graph", ".", "clone", "(", ")", ".", "unparse", "(", ")", "\n", "graph", ".", "prepare_discretization", "(", ")", "\n", "\n", "def", "discretize_ops", "(", "edge", ")", ":", "\n", "            ", "if", "edge", ".", "data", ".", "has", "(", "\"alpha\"", ")", ":", "\n", "                ", "primitives", "=", "edge", ".", "data", ".", "op", ".", "get_embedded_ops", "(", ")", "\n", "alphas", "=", "edge", ".", "data", ".", "alpha", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "primitives", "[", "np", ".", "argmax", "(", "alphas", ")", "]", ")", "\n", "\n", "", "", "graph", ".", "update_edges", "(", "discretize_ops", ",", "scope", "=", "self", ".", "scope", ",", "private_edge_data", "=", "True", ")", "\n", "graph", ".", "prepare_evaluation", "(", ")", "\n", "graph", ".", "parse", "(", ")", "\n", "graph", "=", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.get_op_optimizer": [[197, 199], ["None"], "methods", ["None"], ["", "def", "get_op_optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "op_optimizer", ".", "__class__", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.get_model_size": [[200, 202], ["naslib.utils.utils.count_parameters_in_MB"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.count_parameters_in_MB"], ["", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "return", "count_parameters_in_MB", "(", "self", ".", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer.test_statistics": [[203, 212], ["optimizer.DARTSOptimizer.get_final_architecture", "optimizer.DARTSOptimizer.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "test_statistics", "(", "self", ")", ":", "\n", "# nb301 is not there but we use it anyways to generate the arch strings.", "\n", "# if self.graph.QUERYABLE:", "\n", "        ", "try", ":", "\n", "# record anytime performance", "\n", "            ", "best_arch", "=", "self", ".", "get_final_architecture", "(", ")", "\n", "return", "best_arch", ".", "query", "(", "Metric", ".", "TEST_ACCURACY", ",", "self", ".", "dataset", ")", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._step": [[213, 245], ["optimizer.DARTSOptimizer.optimizer.zero_grad", "optimizer.DARTSOptimizer.optimizer.step", "optimizer.DARTSOptimizer._backward_step_unrolled", "optimizer.DARTSOptimizer._backward_step", "torch.nn.utils.clip_grad_norm_", "optimizer.DARTSOptimizer.architectural_weights.parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._backward_step_unrolled", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._backward_step"], ["", "", "def", "_step", "(", "\n", "self", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "input_train", ",", "\n", "target_train", ",", "\n", "input_valid", ",", "\n", "target_valid", ",", "\n", "eta", ",", "\n", "network_optimizer", ",", "\n", "unrolled", ",", "\n", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "unrolled", ":", "\n", "            ", "self", ".", "_backward_step_unrolled", "(", "\n", "model", ",", "\n", "criterion", ",", "\n", "input_train", ",", "\n", "target_train", ",", "\n", "input_valid", ",", "\n", "target_valid", ",", "\n", "eta", ",", "\n", "network_optimizer", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_backward_step", "(", "model", ",", "criterion", ",", "input_valid", ",", "target_valid", ")", "\n", "\n", "", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", "\n", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._backward_step": [[246, 250], ["optimizer.DARTSOptimizer._loss", "optimizer.DARTSOptimizer.backward"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._loss"], ["", "def", "_backward_step", "(", "self", ",", "model", ",", "criterion", ",", "input_valid", ",", "target_valid", ")", ":", "\n", "        ", "\"\"\"Compute 1st order approximation\"\"\"", "\n", "loss", "=", "self", ".", "_loss", "(", "model", ",", "criterion", ",", "input_valid", ",", "target_valid", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._backward_step_unrolled": [[251, 294], ["optimizer.DARTSOptimizer._compute_unrolled_model", "optimizer.DARTSOptimizer._loss", "optimizer.DARTSOptimizer.backward", "optimizer.DARTSOptimizer._hessian_vector_product", "zip", "zip", "g.data.sub_", "model.arch_parameters", "optimizer.DARTSOptimizer.arch_parameters", "torch.zeros_like", "optimizer.DARTSOptimizer.parameters", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._compute_unrolled_model", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._loss", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._hessian_vector_product", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.arch_parameters", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.arch_parameters"], ["", "def", "_backward_step_unrolled", "(", "\n", "self", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "input_train", ",", "\n", "target_train", ",", "\n", "input_valid", ",", "\n", "target_valid", ",", "\n", "eta", ",", "\n", "network_optimizer", ",", "\n", ")", ":", "\n", "        ", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "\n", "model", ",", "criterion", ",", "input_train", ",", "target_train", ",", "eta", ",", "network_optimizer", "\n", ")", "\n", "unrolled_loss", "=", "self", ".", "_loss", "(", "\n", "model", "=", "unrolled_model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "input", "=", "input_valid", ",", "\n", "target", "=", "target_valid", ",", "\n", ")", "\n", "\n", "# Compute backwards pass with respect to the unrolled model parameters", "\n", "unrolled_loss", ".", "backward", "(", ")", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "arch_parameters", "(", ")", "]", "\n", "vector", "=", "[", "\n", "v", ".", "grad", ".", "data", "if", "v", ".", "grad", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "v", ")", "\n", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "\n", "]", "\n", "\n", "# Compute expression (8) from paper", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_product", "(", "\n", "model", ",", "criterion", ",", "vector", ",", "input_train", ",", "target_train", "\n", ")", "\n", "\n", "# Compute expression (7) from paper", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "            ", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "", "for", "v", ",", "g", "in", "zip", "(", "model", ".", "arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "            ", "if", "v", ".", "grad", "is", "None", ":", "\n", "                ", "v", ".", "grad", "=", "Variable", "(", "g", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "v", ".", "grad", ".", "data", ".", "copy_", "(", "g", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._compute_unrolled_model": [[295, 316], ["optimizer.DARTSOptimizer._loss", "optimizer.DARTSOptimizer._construct_model_from_theta", "_concat", "_concat().mul_", "theta.sub", "model.parameters", "torch.zeros_like", "_concat", "_concat", "torch.autograd.grad", "model.parameters", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._loss", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._construct_model_from_theta"], ["", "", "", "def", "_compute_unrolled_model", "(", "\n", "self", ",", "model", ",", "criterion", ",", "input", ",", "target", ",", "eta", ",", "network_optimizer", "\n", ")", ":", "\n", "        ", "loss", "=", "self", ".", "_loss", "(", "model", "=", "model", ",", "criterion", "=", "criterion", ",", "input", "=", "input", ",", "target", "=", "target", ")", "\n", "theta", "=", "_concat", "(", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "try", ":", "\n", "            ", "moment", "=", "_concat", "(", "\n", "network_optimizer", ".", "state", "[", "v", "]", "[", "\"momentum_buffer\"", "]", "\n", "for", "v", "in", "model", ".", "parameters", "(", ")", "\n", ")", ".", "mul_", "(", "self", ".", "network_momentum", ")", "\n", "", "except", ":", "\n", "            ", "moment", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "", "dtheta", "=", "(", "\n", "_concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "model", ".", "parameters", "(", ")", ")", ")", ".", "data", "\n", "+", "self", ".", "network_weight_decay", "*", "theta", "\n", ")", "\n", "\n", "unrolled_model", "=", "self", ".", "_construct_model_from_theta", "(", "\n", "model", ",", "theta", ".", "sub", "(", "eta", ",", "moment", "+", "dtheta", ")", "\n", ")", "\n", "return", "unrolled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._construct_model_from_theta": [[317, 333], ["model.new", "model.state_dict", "model.named_parameters", "model.state_dict.update", "model_new.to.to.load_state_dict", "model_new.to.to.to", "numpy.prod", "theta[].view", "len", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "def", "_construct_model_from_theta", "(", "self", ",", "model", ",", "theta", ")", ":", "\n", "        ", "model_new", "=", "model", ".", "new", "(", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v_length", "=", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "params", "[", "k", "]", "=", "theta", "[", "offset", ":", "offset", "+", "v_length", "]", ".", "view", "(", "v", ".", "size", "(", ")", ")", "\n", "offset", "+=", "v_length", "\n", "\n", "", "assert", "offset", "==", "len", "(", "theta", ")", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "model_new", ".", "load_state_dict", "(", "model_dict", ")", "\n", "model_new", "=", "model_new", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._hessian_vector_product": [[334, 350], ["zip", "optimizer.DARTSOptimizer._loss", "torch.autograd.grad", "zip", "optimizer.DARTSOptimizer._loss", "torch.autograd.grad", "zip", "_concat().norm", "model.parameters", "p.data.add_", "model.arch_parameters", "model.parameters", "p.data.sub_", "model.arch_parameters", "model.parameters", "p.data.add_", "zip", "_concat"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._loss", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._loss", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.arch_parameters", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.arch_parameters"], ["", "def", "_hessian_vector_product", "(", "self", ",", "model", ",", "criterion", ",", "vector", ",", "input", ",", "target", ",", "r", "=", "1e-2", ")", ":", "\n", "        ", "R", "=", "r", "/", "_concat", "(", "vector", ")", ".", "norm", "(", ")", "\n", "for", "p", ",", "v", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "", "train_loss", "=", "self", ".", "_loss", "(", "model", ",", "criterion", ",", "input", "=", "input", ",", "target", "=", "target", ")", "\n", "grads_p", "=", "torch", ".", "autograd", ".", "grad", "(", "train_loss", ",", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "sub_", "(", "2", "*", "R", ",", "v", ")", "\n", "", "train_loss", "=", "self", ".", "_loss", "(", "model", ",", "criterion", ",", "input", "=", "input", ",", "target", "=", "target", ")", "\n", "grads_n", "=", "torch", ".", "autograd", ".", "grad", "(", "train_loss", ",", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "\n", "", "return", "[", "(", "x", "-", "y", ")", ".", "div_", "(", "2", "*", "R", ")", "for", "x", ",", "y", "in", "zip", "(", "grads_p", ",", "grads_n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.DARTSOptimizer._loss": [[351, 354], ["model", "criterion"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "model", ",", "criterion", ",", "input", ",", "target", ")", ":", "\n", "        ", "pred", "=", "model", "(", "input", ")", "\n", "return", "criterion", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.MixedOp.__init__": [[361, 366], ["naslib.search_spaces.core.primitives.AbstractPrimitive.__init__", "enumerate", "locals", "optimizer.MixedOp.add_module"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "primitives", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n", "self", ".", "primitives", "=", "primitives", "\n", "for", "i", ",", "primitive", "in", "enumerate", "(", "primitives", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"primitive-{}\"", ".", "format", "(", "i", ")", ",", "primitive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.MixedOp.forward": [[367, 370], ["torch.softmax", "sum", "op", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "normed_alphas", "=", "torch", ".", "softmax", "(", "edge_data", ".", "alpha", ",", "dim", "=", "-", "1", ")", "\n", "return", "sum", "(", "w", "*", "op", "(", "x", ",", "None", ")", "for", "w", ",", "op", "in", "zip", "(", "normed_alphas", ",", "self", ".", "primitives", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.optimizer.MixedOp.get_embedded_ops": [[371, 373], ["None"], "methods", ["None"], ["", "def", "get_embedded_ops", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "primitives", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.__init__": [[62, 193], ["naslib.search_spaces.core.graph.Graph.__init__", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "copy.deepcopy", "naslib.search_spaces.core.graph.Graph.edges.data", "copy.deepcopy.edges.data", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.add_edges_from", "graph.DartsSearchSpace.add_edges_from", "graph.DartsSearchSpace.add_edge", "graph.DartsSearchSpace.add_edge", "graph.channel_maps", "graph.DartsSearchSpace._set_makrograph_ops", "graph.DartsSearchSpace._set_cell_ops", "hasattr", "edge_data.is_final", "edge_data.set", "edge_data.is_final", "edge_data.set", "naslib.search_spaces.core.graph.Graph.set_scope().set_input", "naslib.search_spaces.core.graph.Graph.copy().set_scope().set_input", "copy.deepcopy.set_scope().set_input", "naslib.search_spaces.core.graph.Graph.copy().set_scope().set_input", "naslib.search_spaces.core.graph.Graph.copy().set_scope().set_input", "copy.deepcopy.copy().set_scope().set_input", "naslib.search_spaces.core.graph.Graph.copy().set_scope().set_input", "naslib.search_spaces.core.graph.Graph.copy().set_scope().set_input", "range", "range", "naslib.search_spaces.core.graph.EdgeData().finalize", "range", "range", "range", "naslib.search_spaces.core.graph.Graph.set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "copy.deepcopy.set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "copy.deepcopy.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.EdgeData", "naslib.search_spaces.core.graph.Graph.copy", "naslib.search_spaces.core.graph.Graph.copy", "naslib.search_spaces.core.graph.Graph.copy", "copy.deepcopy.copy", "naslib.search_spaces.core.graph.Graph.copy", "naslib.search_spaces.core.graph.Graph.copy"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.channel_maps", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace._set_makrograph_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph._set_cell_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.finalize", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["\n", "# Edges", "\n", "cell", ".", "add_edges_densly", "(", ")", "\n", "\n", "#", "\n", "# Makrograph definition", "\n", "#", "\n", "self", ".", "name", "=", "\"makrograph\"", "\n", "\n", "# Cell is on the edges", "\n", "# 1-2:               Preprocessing", "\n", "# 2-3, ..., 6-7:     cells stage 1", "\n", "# 7-8:               residual block stride 2", "\n", "# 8-9, ..., 12-13:   cells stage 2", "\n", "# 13-14:             residual block stride 2", "\n", "# 14-15, ..., 18-19: cells stage 3", "\n", "# 19-20:             post-processing", "\n", "\n", "total_num_nodes", "=", "20", "\n", "self", ".", "add_nodes_from", "(", "range", "(", "1", ",", "total_num_nodes", "+", "1", ")", ")", "\n", "self", ".", "add_edges_from", "(", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "1", ",", "total_num_nodes", ")", "]", ")", "\n", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "\n", "\n", "#", "\n", "# operations at the edges", "\n", "#", "\n", "\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_1'", ")", ")", "\n", "\n", "# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n", "", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n", "\n", "# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n", "", "if", "dataset_api", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n", "\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n", "\n", "\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_neg_loss'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "else", ":", "# ['normal', 'autoencoder']", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_ssim'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_ssim'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_ssim'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_l1_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_l1_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_l1_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "RAW", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace._set_makrograph_ops": [[194, 239], ["graph.DartsSearchSpace.edges[].set", "sorted", "data.set", "naslib.search_spaces.core.primitives.Stem", "graph.DartsSearchSpace.edges", "sorted", "naslib.search_spaces.core.primitives.Sequential", "graph.DartsSearchSpace.edges", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "data.set", "data.set", "naslib.search_spaces.core.primitives.ReLUConvBN", "naslib.search_spaces.core.primitives.FactorizedReduce"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["# return all data", "\n", "            ", "return", "query_results", ".", "get_arch_result", "(", "arch_str", ")", ".", "query_all_results", "(", ")", "[", "task", "]", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "HP", ":", "\n", "# return hyperparameter info", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "'cost_info'", "]", "\n", "", "elif", "metric", "==", "Metric", ".", "TRAIN_TIME", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "if", "full_lc", "and", "epoch", "==", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "\n", "", "elif", "full_lc", "and", "epoch", "!=", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "[", ":", "epoch", "]", "\n", "", "else", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "", "def", "get_op_indices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "op_indices", "is", "None", ":", "\n", "            ", "self", ".", "op_indices", "=", "convert_naslib_to_op_indices", "(", "self", ")", "\n", "", "return", "self", ".", "op_indices", "\n", "\n", "\n", "", "def", "get_hash", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "get_op_indices", "(", ")", ")", "\n", "\n", "\n", "", "def", "set_op_indices", "(", "self", ",", "op_indices", ")", ":", "\n", "# This will update the edges in the naslib object to op_indices", "\n", "        ", "self", ".", "op_indices", "=", "op_indices", "\n", "#         convert_op_indices_to_naslib(op_indices, self)", "\n", "\n", "", "def", "get_arch_iterator", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "return", "itertools", ".", "product", "(", "range", "(", "4", ")", ",", "repeat", "=", "6", ")", "\n", "\n", "", "def", "set_spec", "(", "self", ",", "op_indices", ",", "dataset_api", "=", "None", ")", ":", "\n", "# this is just to unify the setters across search spaces", "\n", "# TODO: change it to set_spec on all search spaces", "\n", "        ", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "sample_random_architecture_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace._set_cell_ops": [[242, 269], ["zip", "zip", "sorted", "graph.DartsSearchSpace.update_edges", "reduction_cell.edges.data", "graph.DartsSearchSpace.nodes", "data.is_final", "naslib.utils.utils.AttrDict", "graph._set_ops", "graph._set_ops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph._set_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph._set_ops"], ["self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "r", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "p", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "q", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "op_indices", "=", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "", "", "def", "mutate_micro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.prepare_discretization": [[270, 278], ["graph.DartsSearchSpace.update_nodes"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_nodes"], ["        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "op_indices", "=", "list", "(", "parent_op_indices", ")", "\n", "\n", "edge", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "parent_op_indices", ")", ")", "\n", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "parent_op_indices", "[", "edge", "]", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.prepare_evaluation": [[280, 327], ["graph.DartsSearchSpace._expand", "graph.channel_maps", "graph.DartsSearchSpace._set_makrograph_ops", "graph.DartsSearchSpace.edges[].set", "graph.DartsSearchSpace.update_edges", "naslib.search_spaces.core.primitives.Sequential", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace._expand", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.channel_maps", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace._set_makrograph_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges"], ["op_indices", "[", "edge", "]", "=", "op_index", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "mutate_macro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "parent_op_ind", "=", "parent_op_indices", "[", "parent_op_indices", "!=", "0", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "parent_op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "dic1", "=", "{", "1", ":", "a", ",", "2", ":", "b", ",", "3", ":", "c", "}", "\n", "dic2", "=", "{", "1", ":", "a_available", ",", "2", ":", "b_available", ",", "3", ":", "c_available", "}", "\n", "\n", "numb", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "\n", "dic1", "[", "numb", "]", "=", "random", ".", "choice", "(", "dic2", "[", "numb", "]", ")", "\n", "\n", "\n", "op_indices", "=", "g", "(", "dic1", "[", "1", "]", ",", "dic1", "[", "2", "]", ",", "dic1", "[", "3", "]", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "mutate", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "mutate_micro", "(", "parent", ",", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace._expand": [[329, 367], ["networkx.relabel_nodes", "graph.DartsSearchSpace.remove_edges_from", "graph.DartsSearchSpace.add_edges_from", "graph.DartsSearchSpace.add_edges_from", "graph.DartsSearchSpace.add_edges_from", "graph.DartsSearchSpace.add_edge", "graph.DartsSearchSpace.add_edge", "sorted", "list", "list", "graph.DartsSearchSpace.add_node", "graph.DartsSearchSpace.nodes", "graph.DartsSearchSpace.edges", "list", "range", "range", "range", "list", "range", "normal_cell.copy().set_scope().set_input", "range", "normal_cell.copy().set_scope", "normal_cell.copy"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["\n", "\n", "\n", "", "", "def", "get_nbhd_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "nbrs", "=", "[", "]", "\n", "for", "edge", "in", "range", "(", "len", "(", "self", ".", "op_indices", ")", ")", ":", "\n", "            ", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "self", ".", "op_indices", "[", "edge", "]", "]", "\n", "\n", "for", "op_index", "in", "available", ":", "\n", "                ", "nbr_op_indices", "=", "list", "(", "self", ".", "op_indices", ")", ".", "copy", "(", ")", "\n", "nbr_op_indices", "[", "edge", "]", "=", "op_index", "\n", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n", "\n", "", "def", "get_nbhd_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "op_ind", "=", "self", ".", "op_indices", "[", "self", ".", "op_indices", "!=", "0", "]", "\n", "nbrs", "=", "[", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.auxilary_logits": [[368, 370], ["None"], "methods", ["None"], ["return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "op_ind", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.load_labeled_architecture": [[371, 382], ["numpy.random.choice", "graph.DartsSearchSpace.set_compact", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact"], ["\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "for", "r", "in", "a_available", ":", "\n", "            ", "for", "p", "in", "b_available", ":", "\n", "                ", "for", "q", "in", "c_available", ":", "\n", "                    ", "nbr_op_indices", "=", "g", "(", "r", ",", "p", ",", "q", ")", "\n", "while", "len", "(", "nbr_op_indices", ")", "<", "6", ":", "\n", "                        ", "nbr_op_indices", "=", "np", ".", "append", "(", "nbr_op_indices", ",", "0", ")", "\n", "", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.query": [[383, 451], ["naslib.search_spaces.darts.conversions.convert_naslib_to_genotype", "[].predict", "[].predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_naslib_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n", "\n", "", "def", "get_nbhd", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "\n", "\n", "", "", "def", "get_type", "(", "self", ")", ":", "\n", "#         return 'transbench101'", "\n", "        ", "return", "'transbench101'", "\n", "\n", "\n", "", "", "def", "_set_cell_ops", "(", "edge", ",", "C", ")", ":", "\n", "    ", "edge", ".", "data", ".", "set", "(", "'op'", ",", "[", "\n", "ops", ".", "Identity", "(", ")", ",", "\n", "ops", ".", "Zero", "(", "stride", "=", "1", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "3", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "1", ")", ",", "\n", "]", ")", "\n", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.get_compact": [[452, 456], ["naslib.search_spaces.darts.conversions.convert_naslib_to_compact"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_naslib_to_compact"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.get_hash": [[457, 459], ["graph.DartsSearchSpace.get_compact"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.get_arch_iterator": [[460, 465], ["numpy.array", "random.shuffle"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.set_compact": [[466, 470], ["naslib.search_spaces.darts.conversions.convert_compact_to_naslib"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_naslib"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.set_spec": [[471, 475], ["graph.DartsSearchSpace.set_compact", "naslib.search_spaces.darts.conversions.make_compact_immutable"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.make_compact_immutable"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.sample_random_architecture": [[476, 496], ["range", "graph.DartsSearchSpace.set_compact", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "compact[].extend", "compact[].extend", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.mutate": [[497, 521], ["parent.get_compact", "naslib.search_spaces.darts.conversions.make_compact_mutable", "range", "graph.DartsSearchSpace.set_compact", "int", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.make_compact_mutable", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.get_nbhd": [[522, 560], ["graph.DartsSearchSpace.get_compact", "enumerate", "random.shuffle", "enumerate", "naslib.search_spaces.darts.conversions.make_compact_mutable", "graph.DartsSearchSpace", "graph.DartsSearchSpace.set_compact", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "nbrs.append", "naslib.search_spaces.darts.conversions.make_compact_mutable", "graph.DartsSearchSpace", "graph.DartsSearchSpace.set_compact", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "nbrs.append", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.make_compact_mutable", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.make_compact_mutable", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.get_configspace": [[561, 580], ["os.path.join", "naslib.utils.utils.get_project_root", "open", "fh.read", "ConfigSpace.read_and_write.json.read"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_project_root"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.get_type": [[581, 583], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph._set_ops": [[585, 615], ["edge.data.set", "naslib.search_spaces.core.primitives.Zero", "naslib.search_spaces.core.primitives.MaxPool", "naslib.search_spaces.core.primitives.AvgPool", "naslib.search_spaces.core.primitives.SepConv", "naslib.search_spaces.core.primitives.SepConv", "naslib.search_spaces.core.primitives.DilConv", "naslib.search_spaces.core.primitives.DilConv", "naslib.search_spaces.core.primitives.Identity", "primitives.FactorizedReduce"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph._truncate_input_edges": [[620, 660], ["edge_data.alpha.detach", "torch.softmax", "torch.max", "torch.max", "len", "any", "torch.min", "torch.min", "sorted", "zip", "any", "range", "e.has", "data.has", "float", "edge_data.delete", "isinstance", "data.op.pop", "[].delete", "e.has", "e.has", "len", "random.randint", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph._double_channels": [[662, 671], ["edge.data.set", "int", "int", "edge.data.op.__class__"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.channel_concat": [[673, 675], ["torch.cat", "torch.cat"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.channel_maps": [[677, 693], ["channel_map_from.update", "channel_map_from.update", "channel_map_from.update", "channel_map_to.update", "channel_map_to.update", "channel_map_to.update", "len", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.primitives.FactorizedReduce.__init__": [[16, 32], ["core.primitives.AbstractPrimitive.__init__", "locals", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "\n", "class", "ResNetBasicblock", "(", "AbstractPrimitive", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "C_out", ",", "C_out", ",", "3", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.primitives.FactorizedReduce.forward": [[33, 41], ["primitives.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "primitives.FactorizedReduce.bn", "primitives.FactorizedReduce.conv_1", "primitives.FactorizedReduce.conv_2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "x", ",", "None", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ",", "None", ")", "\n", "residual", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "is", "not", "None", "else", "x", "\n", "return", "residual", "+", "basicblock", "\n", "\n", "\n", "", "def", "get_embedded_ops", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.primitives.FactorizedReduce.get_embedded_ops": [[42, 44], ["None"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.get_cell_of_type": [[17, 26], ["Exception"], "function", ["None"], ["EDGE_LIST", "=", "(", "(", "1", ",", "2", ")", ",", "(", "1", ",", "3", ")", ",", "(", "1", ",", "4", ")", ",", "(", "2", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "(", "3", ",", "4", ")", ")", "\n", "\n", "\n", "def", "convert_naslib_to_op_indices", "(", "naslib_object", ")", ":", "\n", "\n", "    ", "cell", "=", "naslib_object", ".", "_get_child_graphs", "(", "single_instances", "=", "True", ")", "[", "0", "]", "\n", "ops", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "EDGE_LIST", ":", "\n", "        ", "ops", ".", "append", "(", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_naslib_to_genotype": [[28, 69], ["Genotype", "conversions.get_cell_of_type", "conversions.get_cell_of_type", "converted_cells.append", "sorted"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.get_cell_of_type", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.get_cell_of_type"], ["\n", "\n", "", "def", "convert_op_indices_to_naslib", "(", "op_indices", ",", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts op indices to a naslib object\n    input: op_indices (list of six ints)\n    naslib_object is an empty NasBench201SearchSpace() object.\n    Do not call this method with a naslib object that has already been \n    discretized (i.e., all edges have a single op).\n\n    output: none, but the naslib object now has all edges set\n    as in genotype.\n    \n    warning: this method will modify the edges in naslib_object.\n    \"\"\"", "\n", "\n", "# create a dictionary of edges to ops", "\n", "edge_op_dict", "=", "{", "}", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "op_indices", ")", ":", "\n", "        ", "edge_op_dict", "[", "EDGE_LIST", "[", "i", "]", "]", "=", "OP_NAMES", "[", "index", "]", "\n", "\n", "", "def", "add_op_index", "(", "edge", ")", ":", "\n", "# function that adds the op index from the dictionary to each edge", "\n", "        ", "if", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "in", "edge_op_dict", ":", "\n", "            ", "for", "i", ",", "op", "in", "enumerate", "(", "edge", ".", "data", ".", "op", ")", ":", "\n", "                ", "if", "op", ".", "get_op_name", "==", "edge_op_dict", "[", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "]", ":", "\n", "                    ", "index", "=", "i", "\n", "break", "\n", "", "", "edge", ".", "data", ".", "set", "(", "'op_index'", ",", "index", ",", "shared", "=", "True", ")", "\n", "\n", "", "", "def", "update_ops", "(", "edge", ")", ":", "\n", "# function that replaces the primitive ops at the edges with the one in op_index", "\n", "        ", "if", "isinstance", "(", "edge", ".", "data", ".", "op", ",", "list", ")", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "", "else", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "primitives", "\n", "\n", "", "edge", ".", "data", ".", "set", "(", "'op'", ",", "primitives", "[", "edge", ".", "data", ".", "op_index", "]", ")", "\n", "edge", ".", "data", ".", "set", "(", "'primitives'", ",", "primitives", ")", "# store for later use", "\n", "\n", "", "naslib_object", ".", "update_edges", "(", "\n", "add_op_index", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_naslib": [[72, 140], ["enumerate", "naslib_object.update_edges", "naslib_object.update_edges", "eval", "enumerate", "isinstance", "edge.data.set", "edge.data.set", "enumerate", "edge.data.set", "edge.data.delete"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete"], [")", "\n", "\n", "naslib_object", ".", "update_edges", "(", "\n", "update_ops", ",", "\n", "scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "def", "convert_naslib_to_str", "(", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "\n", "ops_to_nb201", "=", "{", "\n", "'AvgPool1x1'", ":", "'avg_pool_3x3'", ",", "\n", "'ReLUConvBN1x1'", ":", "'nor_conv_1x1'", ",", "\n", "'ReLUConvBN3x3'", ":", "'nor_conv_3x3'", ",", "\n", "'Identity'", ":", "'skip_connect'", ",", "\n", "'Zero'", ":", "'none'", ",", "\n", "}", "\n", "\n", "cell", "=", "naslib_object", ".", "edges", "[", "2", ",", "3", "]", ".", "op", "\n", "\n", "edge_op_dict", "=", "{", "\n", "(", "i", ",", "j", ")", ":", "ops_to_nb201", "[", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", "]", "for", "i", ",", "j", "in", "cell", ".", "edges", "\n", "}", "\n", "op_edge_list", "=", "[", "\n", "'{}~{}'", ".", "format", "(", "edge_op_dict", "[", "(", "i", ",", "j", ")", "]", ",", "i", "-", "1", ")", "for", "i", ",", "j", "in", "sorted", "(", "edge_op_dict", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "]", "\n", "\n", "return", "'|{}|+|{}|{}|+|{}|{}|{}|'", ".", "format", "(", "*", "op_edge_list", ")", "\n", "\n", "\n", "# def convert_naslib_to_tb101(naslib_object):", "\n", "#     \"\"\"", "\n", "#     Converts naslib object to string representation.", "\n", "#     To be used later used later with one-shot optimizers ", "\n", "#     \"\"\"", "\n", "\n", "#     ops_to_tb101 = {", "\n", "#         'ReLUConvBN1x1': '2',", "\n", "#         'ReLUConvBN3x3': '3',", "\n", "#         'Identity': '1',", "\n", "#         'Zero': '0',", "\n", "#     }", "\n", "\n", "#     cell = naslib_object.edges[2, 3].op", "\n", "\n", "#     edge_op_dict = {", "\n", "#         (i, j): ops_to_tb101[cell.edges[i, j]['op'].get_op_name] for i, j in cell.edges", "\n", "#     }", "\n", "# #     op_edge_list = [", "\n", "# #         '{}~{}'.format(edge_op_dict[(i, j)], i-1) for i, j in sorted(edge_op_dict, key=lambda x: x[1])", "\n", "# #     ]", "\n", "#     op_edge_list = [", "\n", "#         '{}'.format(edge_op_dict[(i, j)]) for i, j in sorted(edge_op_dict, key=lambda x: x[1])", "\n", "#     ]", "\n", "\n", "#     return '64-41414-{}_{}{}_{}{}{}'.format(*op_edge_list)", "\n", "\n", "\n", "", "def", "convert_naslib_to_transbench101_micro", "(", "op_indices", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "return", "'64-41414-{}_{}{}_{}{}{}'", ".", "format", "(", "*", "op_indices", ")", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_config": [[143, 181], ["eval", "range", "config.update", "sorted", "config.update", "str", "list", "map", "str", "str"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["\n", "ops_string", "=", "''", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "op_indices", ".", "tolist", "(", ")", "if", "e", "!=", "0", "]", ")", "\n", "return", "'64-{}-basic'", ".", "format", "(", "ops_string", ")", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_config_to_genotype": [[183, 212], ["enumerate", "Genotype", "genotype.append", "range", "range", "len", "print", "genotype[].append"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_compact": [[215, 237], ["enumerate", "eval", "compact.append", "range", "tuple", "tuple", "compact[].append", "OPS.index"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_genotype": [[239, 264], ["range", "Genotype", "genotype.append", "range", "genotype[].append"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.make_compact_mutable": [[274, 284], ["arch_list.append", "arch_list[].append", "[].append"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.make_compact_immutable": [[285, 294], ["tuple", "arch_list.append", "tuple", "arch_list[].append", "tuple"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_naslib_to_config": [[295, 298], ["conversions.convert_naslib_to_genotype", "conversions.convert_genotype_to_config"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_naslib_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_config"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_config_to_naslib": [[300, 303], ["conversions.convert_config_to_genotype", "conversions.convert_genotype_to_naslib"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_config_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_naslib"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_naslib_to_compact": [[305, 308], ["conversions.convert_naslib_to_genotype", "conversions.convert_genotype_to_compact"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_naslib_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_compact"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_naslib": [[310, 313], ["conversions.convert_compact_to_genotype", "conversions.convert_genotype_to_naslib"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_naslib"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_config_to_compact": [[315, 318], ["conversions.convert_config_to_genotype", "conversions.convert_genotype_to_compact"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_config_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_compact"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_config": [[320, 323], ["conversions.convert_compact_to_genotype", "conversions.convert_genotype_to_config"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_genotype_to_config"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.__init__": [[41, 130], ["naslib.search_spaces.core.graph.Graph.__init__", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_edges_densly", "graph.NasBench201SearchSpace.add_nodes_from", "graph.NasBench201SearchSpace.add_edges_from", "graph.NasBench201SearchSpace.edges[].set", "range", "graph.NasBench201SearchSpace.edges[].set", "range", "graph.NasBench201SearchSpace.edges[].set", "range", "graph.NasBench201SearchSpace.edges[].set", "zip", "hasattr", "range", "naslib.search_spaces.core.primitives.Stem", "graph.NasBench201SearchSpace.edges[].set", "naslib.search_spaces.core.primitives.ResNetBasicblock", "graph.NasBench201SearchSpace.edges[].set", "naslib.search_spaces.core.primitives.ResNetBasicblock", "graph.NasBench201SearchSpace.edges[].set", "naslib.search_spaces.core.primitives.Sequential", "graph.NasBench201SearchSpace.update_edges", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "range", "naslib.search_spaces.core.graph.Graph.copy", "naslib.search_spaces.core.graph.Graph.copy", "naslib.search_spaces.core.graph.Graph.copy", "graph._set_cell_ops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_edges_densly", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph._set_cell_ops"], ["self", ".", "num_classes", "=", "self", ".", "NUM_CLASSES", "if", "hasattr", "(", "self", ",", "'NUM_CLASSES'", ")", "else", "10", "\n", "self", ".", "op_indices", "=", "None", "\n", "\n", "self", ".", "max_epoch", "=", "199", "\n", "self", ".", "space_name", "=", "'transbench101'", "\n", "self", ".", "space", "=", "'micro'", "\n", "#", "\n", "# Cell definition", "\n", "#", "\n", "cell", "=", "Graph", "(", ")", "\n", "cell", ".", "name", "=", "\"cell\"", "# Use the same name for all cells with shared attributes", "\n", "\n", "# Input node", "\n", "cell", ".", "add_node", "(", "1", ")", "\n", "\n", "# Intermediate nodes", "\n", "cell", ".", "add_node", "(", "2", ")", "\n", "cell", ".", "add_node", "(", "3", ")", "\n", "\n", "# Output node", "\n", "cell", ".", "add_node", "(", "4", ")", "\n", "\n", "# Edges", "\n", "cell", ".", "add_edges_densly", "(", ")", "\n", "\n", "#", "\n", "# Makrograph definition", "\n", "#", "\n", "self", ".", "name", "=", "\"makrograph\"", "\n", "\n", "# Cell is on the edges", "\n", "# 1-2:               Preprocessing", "\n", "# 2-3, ..., 6-7:     cells stage 1", "\n", "# 7-8:               residual block stride 2", "\n", "# 8-9, ..., 12-13:   cells stage 2", "\n", "# 13-14:             residual block stride 2", "\n", "# 14-15, ..., 18-19: cells stage 3", "\n", "# 19-20:             post-processing", "\n", "\n", "total_num_nodes", "=", "20", "\n", "self", ".", "add_nodes_from", "(", "range", "(", "1", ",", "total_num_nodes", "+", "1", ")", ")", "\n", "self", ".", "add_edges_from", "(", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "1", ",", "total_num_nodes", ")", "]", ")", "\n", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "\n", "\n", "#", "\n", "# operations at the edges", "\n", "#", "\n", "\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_1'", ")", ")", "\n", "\n", "# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n", "", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n", "\n", "# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.query": [[132, 202], ["isinstance", "naslib.search_spaces.nasbench201.conversions.convert_naslib_to_str", "NotImplementedError", "NotImplementedError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_str"], ["            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n", "\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n", "\n", "\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_neg_loss'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "else", ":", "# ['normal', 'autoencoder']", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_ssim'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_ssim'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_ssim'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_l1_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_l1_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_l1_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "RAW", ":", "\n", "# return all data", "\n", "            ", "return", "query_results", ".", "get_arch_result", "(", "arch_str", ")", ".", "query_all_results", "(", ")", "[", "task", "]", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "HP", ":", "\n", "# return hyperparameter info", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "'cost_info'", "]", "\n", "", "elif", "metric", "==", "Metric", ".", "TRAIN_TIME", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.get_op_indices": [[203, 207], ["naslib.search_spaces.nasbench201.conversions.convert_naslib_to_op_indices"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_op_indices"], ["\n", "\n", "", "if", "full_lc", "and", "epoch", "==", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "\n", "", "elif", "full_lc", "and", "epoch", "!=", "-", "1", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.get_hash": [[208, 210], ["tuple", "graph.NasBench201SearchSpace.get_op_indices"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "[", ":", "epoch", "]", "\n", "", "else", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.get_arch_iterator": [[211, 213], ["itertools.product", "range"], "methods", ["None"], ["\n", "\n", "", "", "def", "get_op_indices", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.set_op_indices": [[214, 218], ["naslib.search_spaces.nasbench201.conversions.convert_op_indices_to_naslib"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_op_indices_to_naslib"], ["        ", "if", "self", ".", "op_indices", "is", "None", ":", "\n", "            ", "self", ".", "op_indices", "=", "convert_naslib_to_op_indices", "(", "self", ")", "\n", "", "return", "self", ".", "op_indices", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.set_spec": [[219, 223], ["graph.NasBench201SearchSpace.set_op_indices"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["", "def", "get_hash", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "get_op_indices", "(", ")", ")", "\n", "\n", "\n", "", "def", "set_op_indices", "(", "self", ",", "op_indices", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.sample_random_architecture": [[224, 231], ["numpy.random.randint", "graph.NasBench201SearchSpace.set_op_indices"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["# This will update the edges in the naslib object to op_indices", "\n", "        ", "self", ".", "op_indices", "=", "op_indices", "\n", "#         convert_op_indices_to_naslib(op_indices, self)", "\n", "\n", "", "def", "get_arch_iterator", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "return", "itertools", ".", "product", "(", "range", "(", "4", ")", ",", "repeat", "=", "6", ")", "\n", "\n", "", "def", "set_spec", "(", "self", ",", "op_indices", ",", "dataset_api", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.mutate": [[232, 245], ["parent.get_op_indices", "list", "numpy.random.choice", "numpy.random.choice", "graph.NasBench201SearchSpace.set_op_indices", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["# this is just to unify the setters across search spaces", "\n", "# TODO: change it to set_spec on all search spaces", "\n", "        ", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "sample_random_architecture_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "op_indices", "=", "np", ".", "random", ".", "randint", "(", "4", ",", "size", "=", "(", "6", ")", ")", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.get_nbhd": [[246, 264], ["graph.NasBench201SearchSpace.get_op_indices", "range", "random.shuffle", "len", "list().copy", "graph.NasBench201SearchSpace", "graph.NasBench201SearchSpace.set_op_indices", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "nbrs.append", "range", "len", "list"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "r", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "p", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "q", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "op_indices", "=", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_micro", "(", "dataset_api", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph.NasBench201SearchSpace.get_type": [[265, 267], ["None"], "methods", ["None"], ["", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_macro", "(", "dataset_api", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.graph._set_cell_ops": [[269, 278], ["edge.data.set", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.Zero", "naslib.search_spaces.core.primitives.ReLUConvBN", "naslib.search_spaces.core.primitives.ReLUConvBN", "naslib.search_spaces.core.primitives.AvgPool1x1"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "", "def", "mutate_micro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "op_indices", "=", "list", "(", "parent_op_indices", ")", "\n", "\n", "edge", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "parent_op_indices", ")", ")", "\n", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "parent_op_indices", "[", "edge", "]", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.primitives.ResNetBasicblock.__init__": [[19, 31], ["core.primitives.AbstractPrimitive.__init__", "core.primitives.ReLUConvBN", "core.primitives.ReLUConvBN", "locals", "torch.Sequential", "torch.AvgPool2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "C_out", ",", "C_out", ",", "3", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.primitives.ResNetBasicblock.forward": [[32, 37], ["primitives.ResNetBasicblock.conv_a", "primitives.ResNetBasicblock.conv_b", "primitives.ResNetBasicblock.downsample"], "methods", ["None"], ["\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "x", ",", "None", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ",", "None", ")", "\n", "residual", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "is", "not", "None", "else", "x", "\n", "return", "residual", "+", "basicblock", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.primitives.ResNetBasicblock.get_embedded_ops": [[38, 40], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "get_embedded_ops", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.conversions.convert_naslib_to_op_indices": [[19, 27], ["naslib_object._get_child_graphs", "ops.append", "OP_NAMES.index"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs"], ["\n", "def", "convert_naslib_to_op_indices", "(", "naslib_object", ")", ":", "\n", "\n", "    ", "cell", "=", "naslib_object", ".", "_get_child_graphs", "(", "single_instances", "=", "True", ")", "[", "0", "]", "\n", "ops", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "EDGE_LIST", ":", "\n", "        ", "ops", ".", "append", "(", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", ")", "\n", "\n", "", "return", "[", "OP_NAMES", ".", "index", "(", "name", ")", "for", "name", "in", "ops", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.conversions.convert_op_indices_to_naslib": [[29, 73], ["enumerate", "naslib_object.update_edges", "naslib_object.update_edges", "isinstance", "edge.data.set", "edge.data.set", "enumerate", "edge.data.set"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["\n", "", "def", "convert_op_indices_to_naslib", "(", "op_indices", ",", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts op indices to a naslib object\n    input: op_indices (list of six ints)\n    naslib_object is an empty NasBench201SearchSpace() object.\n    Do not call this method with a naslib object that has already been \n    discretized (i.e., all edges have a single op).\n\n    output: none, but the naslib object now has all edges set\n    as in genotype.\n    \n    warning: this method will modify the edges in naslib_object.\n    \"\"\"", "\n", "\n", "# create a dictionary of edges to ops", "\n", "edge_op_dict", "=", "{", "}", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "op_indices", ")", ":", "\n", "        ", "edge_op_dict", "[", "EDGE_LIST", "[", "i", "]", "]", "=", "OP_NAMES", "[", "index", "]", "\n", "\n", "", "def", "add_op_index", "(", "edge", ")", ":", "\n", "# function that adds the op index from the dictionary to each edge", "\n", "        ", "if", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "in", "edge_op_dict", ":", "\n", "            ", "for", "i", ",", "op", "in", "enumerate", "(", "edge", ".", "data", ".", "op", ")", ":", "\n", "                ", "if", "op", ".", "get_op_name", "==", "edge_op_dict", "[", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "]", ":", "\n", "                    ", "index", "=", "i", "\n", "break", "\n", "", "", "edge", ".", "data", ".", "set", "(", "'op_index'", ",", "index", ",", "shared", "=", "True", ")", "\n", "\n", "", "", "def", "update_ops", "(", "edge", ")", ":", "\n", "# function that replaces the primitive ops at the edges with the one in op_index", "\n", "        ", "if", "isinstance", "(", "edge", ".", "data", ".", "op", ",", "list", ")", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "", "else", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "primitives", "\n", "\n", "", "edge", ".", "data", ".", "set", "(", "'op'", ",", "primitives", "[", "edge", ".", "data", ".", "op_index", "]", ")", "\n", "edge", ".", "data", ".", "set", "(", "'primitives'", ",", "primitives", ")", "# store for later use", "\n", "\n", "", "naslib_object", ".", "update_edges", "(", "\n", "add_op_index", ",", "\n", "scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "False", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench201.conversions.convert_naslib_to_str": [[76, 99], ["sorted"], "function", ["None"], ["scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "def", "convert_naslib_to_str", "(", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "\n", "ops_to_nb201", "=", "{", "\n", "'AvgPool1x1'", ":", "'avg_pool_3x3'", ",", "\n", "'ReLUConvBN1x1'", ":", "'nor_conv_1x1'", ",", "\n", "'ReLUConvBN3x3'", ":", "'nor_conv_3x3'", ",", "\n", "'Identity'", ":", "'skip_connect'", ",", "\n", "'Zero'", ":", "'none'", ",", "\n", "}", "\n", "\n", "cell", "=", "naslib_object", ".", "edges", "[", "2", ",", "3", "]", ".", "op", "\n", "\n", "edge_op_dict", "=", "{", "\n", "(", "i", ",", "j", ")", ":", "ops_to_nb201", "[", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", "]", "for", "i", ",", "j", "in", "cell", ".", "edges", "\n", "}", "\n", "op_edge_list", "=", "[", "\n", "'{}~{}'", ".", "format", "(", "edge_op_dict", "[", "(", "i", ",", "j", ")", "]", ",", "i", "-", "1", ")", "for", "i", ",", "j", "in", "sorted", "(", "edge_op_dict", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarWideResNet.WideBasicblock.__init__": [[8, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "WideBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "if", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarWideResNet.WideBasicblock.forward": [[32, 48], ["CifarWideResNet.WideBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "CifarWideResNet.WideBasicblock.conv_a", "CifarWideResNet.WideBasicblock.bn_b", "torch.relu", "torch.relu", "torch.relu", "CifarWideResNet.WideBasicblock.conv_b", "CifarWideResNet.WideBasicblock.dropout", "CifarWideResNet.WideBasicblock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "basicblock", "=", "self", ".", "bn_a", "(", "x", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ")", "\n", "basicblock", "=", "self", ".", "conv_a", "(", "basicblock", ")", "\n", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "basicblock", "=", "self", ".", "dropout", "(", "basicblock", ")", "\n", "", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "x", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarWideResNet.CifarWideResNet.__init__": [[56, 92], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "CifarWideResNet.CifarWideResNet._make_layer", "CifarWideResNet.CifarWideResNet._make_layer", "CifarWideResNet.CifarWideResNet._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "CifarWideResNet.CifarWideResNet.apply", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "num_classes", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "CifarWideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ",", "\"depth should be one of 20, 32, 44, 56, 110\"", "\n", "layer_blocks", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "print", "(", "\n", "\"CifarPreResNet : Depth : {} , Layers for each block : {}\"", ".", "format", "(", "\n", "depth", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "conv_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "message", "=", "\"Wide ResNet : depth={:}, widen_factor={:}, class={:}\"", ".", "format", "(", "\n", "depth", ",", "widen_factor", ",", "num_classes", "\n", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "\n", "WideBasicblock", ",", "16", "*", "widen_factor", ",", "layer_blocks", ",", "1", "\n", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "\n", "WideBasicblock", ",", "32", "*", "widen_factor", ",", "layer_blocks", ",", "2", "\n", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "\n", "WideBasicblock", ",", "64", "*", "widen_factor", ",", "layer_blocks", ",", "2", "\n", ")", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "64", "*", "widen_factor", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", "*", "widen_factor", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarWideResNet.CifarWideResNet.get_message": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarWideResNet.CifarWideResNet._make_layer": [[96, 105], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "self", ".", "dropout", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "self", ".", "dropout", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarWideResNet.CifarWideResNet.forward": [[106, 116], ["CifarWideResNet.CifarWideResNet.conv_3x3", "CifarWideResNet.CifarWideResNet.stage_1", "CifarWideResNet.CifarWideResNet.stage_2", "CifarWideResNet.CifarWideResNet.stage_3", "CifarWideResNet.CifarWideResNet.lastact", "CifarWideResNet.CifarWideResNet.avgpool", "CifarWideResNet.CifarWideResNet.view", "CifarWideResNet.CifarWideResNet.classifier", "CifarWideResNet.CifarWideResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_3x3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "lastact", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "outs", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "outs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.Cell.__init__": [[7, 24], ["torch.Module.__init__", "print", "build_darts_net.ReLUConvBN", "build_darts_net.Cell._compile", "build_darts_net.FactorizedReduce", "build_darts_net.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Cell._compile"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.Cell._compile": [[25, 37], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.Cell.forward": [[38, 61], ["build_darts_net.Cell.preprocess0", "build_darts_net.Cell.preprocess1", "range", "op1", "op2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "isinstance", "build_darts_net.drop_path", "isinstance", "build_darts_net.drop_path"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path", "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.0", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "try", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"hold\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.AuxiliaryHeadCIFAR.__init__": [[64, 80], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "\n", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", "\n", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.AuxiliaryHeadCIFAR.forward": [[81, 85], ["build_darts_net.AuxiliaryHeadCIFAR.features", "build_darts_net.AuxiliaryHeadCIFAR.classifier", "build_darts_net.AuxiliaryHeadCIFAR.view", "build_darts_net.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.AuxiliaryHeadImageNet.__init__": [[88, 104], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.AuxiliaryHeadImageNet.forward": [[105, 109], ["build_darts_net.AuxiliaryHeadImageNet.features", "build_darts_net.AuxiliaryHeadImageNet.classifier", "build_darts_net.AuxiliaryHeadImageNet.view", "build_darts_net.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.NetworkCIFAR.__init__": [[112, 151], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "build_darts_net.Cell", "build_darts_net.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "arch_config", ")", ":", "\n", "        ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "genotype", "=", "arch_config", "[", "\"genotype\"", "]", "\n", "C", "=", "arch_config", "[", "\"C\"", "]", "\n", "layers", "=", "arch_config", "[", "\"layers\"", "]", "\n", "num_classes", "=", "arch_config", "[", "\"num_classes\"", "]", "\n", "auxiliary", "=", "arch_config", "[", "\"auxiliary\"", "]", "\n", "self", ".", "drop_path_prob", "=", "0", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "\n", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", "\n", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.NetworkCIFAR.forward": [[152, 163], ["build_darts_net.NetworkCIFAR.stem", "enumerate", "build_darts_net.NetworkCIFAR.global_pooling", "build_darts_net.NetworkCIFAR.classifier", "build_darts_net.NetworkCIFAR.view", "cell", "build_darts_net.NetworkCIFAR.size", "build_darts_net.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits_aux", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.ReLUConvBN.__init__": [[199, 207], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.ReLUConvBN.forward": [[209, 211], ["build_darts_net.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.DilConv.__init__": [[214, 232], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "\n", "C_in", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "C_in", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.DilConv.forward": [[234, 236], ["build_darts_net.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.SepConv.__init__": [[239, 266], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "\n", "C_in", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "C_in", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "\n", "C_in", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "C_in", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.SepConv.forward": [[268, 270], ["build_darts_net.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.Identity.__init__": [[273, 275], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.Identity.forward": [[276, 278], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.Zero.__init__": [[281, 284], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.Zero.forward": [[285, 289], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.0", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.FactorizedReduce.__init__": [[292, 299], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.FactorizedReduce.forward": [[300, 305], ["build_darts_net.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "build_darts_net.FactorizedReduce.bn", "build_darts_net.FactorizedReduce.conv_1", "build_darts_net.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.build_darts_net.drop_path": [[307, 315], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.FloatTensor().bernoulli_", "torch.FloatTensor().bernoulli_", "torch.FloatTensor", "torch.FloatTensor", "x.size"], "function", ["None"], ["", "", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "    ", "if", "drop_prob", ">", "0.0", ":", "\n", "        ", "keep_prob", "=", "1.0", "-", "drop_prob", "\n", "# mask = Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))", "\n", "mask", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.initialization.initialize_resnet": [[5, 17], ["isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["def", "initialize_resnet", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_conv": [[5, 12], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "init.weight.detach", "init.bias.detach"], "function", ["None"], ["def", "copy_conv", "(", "module", ",", "init", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ",", "\"invalid module : {:}\"", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "Conv2d", ")", ",", "\"invalid module : {:}\"", ".", "format", "(", "init", ")", "\n", "new_i", ",", "new_o", "=", "module", ".", "in_channels", ",", "module", ".", "out_channels", "\n", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "new_o", ",", ":", "new_i", "]", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "new_o", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_bn": [[14, 26], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "module.running_mean.copy_", "module.running_var.copy_", "init.weight.detach", "init.bias.detach", "init.running_mean.detach", "init.running_var.detach"], "function", ["None"], ["", "", "def", "copy_bn", "(", "module", ",", "init", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ",", "\"invalid module : {:}\"", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "BatchNorm2d", ")", ",", "\"invalid module : {:}\"", ".", "format", "(", "init", ")", "\n", "num_features", "=", "module", ".", "num_features", "\n", "if", "module", ".", "weight", "is", "not", "None", ":", "\n", "        ", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "running_mean", "is", "not", "None", ":", "\n", "        ", "module", ".", "running_mean", ".", "copy_", "(", "init", ".", "running_mean", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "running_var", "is", "not", "None", ":", "\n", "        ", "module", ".", "running_var", ".", "copy_", "(", "init", ".", "running_var", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_fc": [[28, 35], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "init.weight.detach", "init.bias.detach"], "function", ["None"], ["", "", "def", "copy_fc", "(", "module", ",", "init", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ",", "\"invalid module : {:}\"", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "Linear", ")", ",", "\"invalid module : {:}\"", ".", "format", "(", "init", ")", "\n", "new_i", ",", "new_o", "=", "module", ".", "in_features", ",", "module", ".", "out_features", "\n", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "new_o", ",", ":", "new_i", "]", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "new_o", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_base": [[37, 50], ["clone_weights.copy_conv", "clone_weights.copy_bn", "type", "type"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_conv", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_bn"], ["", "", "def", "copy_base", "(", "module", ",", "init", ")", ":", "\n", "    ", "assert", "type", "(", "module", ")", ".", "__name__", "in", "[", "\n", "\"ConvBNReLU\"", ",", "\n", "\"Downsample\"", ",", "\n", "]", ",", "\"invalid module : {:}\"", ".", "format", "(", "module", ")", "\n", "assert", "type", "(", "init", ")", ".", "__name__", "in", "[", "\n", "\"ConvBNReLU\"", ",", "\n", "\"Downsample\"", ",", "\n", "]", ",", "\"invalid module : {:}\"", ".", "format", "(", "init", ")", "\n", "if", "module", ".", "conv", "is", "not", "None", ":", "\n", "        ", "copy_conv", "(", "module", ".", "conv", ",", "init", ".", "conv", ")", "\n", "", "if", "module", ".", "bn", "is", "not", "None", ":", "\n", "        ", "copy_bn", "(", "module", ".", "bn", ",", "init", ".", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_basic": [[52, 58], ["clone_weights.copy_base", "clone_weights.copy_base", "clone_weights.copy_base"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_base", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_base", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_base"], ["", "", "def", "copy_basic", "(", "module", ",", "init", ")", ":", "\n", "    ", "copy_base", "(", "module", ".", "conv_a", ",", "init", ".", "conv_a", ")", "\n", "copy_base", "(", "module", ".", "conv_b", ",", "init", ".", "conv_b", ")", "\n", "if", "module", ".", "downsample", "is", "not", "None", ":", "\n", "        ", "if", "init", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "copy_base", "(", "module", ".", "downsample", ",", "init", ".", "downsample", ")", "\n", "# else:", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.init_from_model": [[62, 75], ["torch.no_grad", "torch.no_grad", "clone_weights.copy_fc", "zip", "clone_weights.copy_base", "type", "type", "type", "clone_weights.copy_basic", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_fc", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_base", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.clone_weights.copy_basic"], ["", "", "", "def", "init_from_model", "(", "network", ",", "init_model", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "copy_fc", "(", "network", ".", "classifier", ",", "init_model", ".", "classifier", ")", "\n", "for", "base", ",", "target", "in", "zip", "(", "init_model", ".", "layers", ",", "network", ".", "layers", ")", ":", "\n", "            ", "assert", "(", "\n", "type", "(", "base", ")", ".", "__name__", "==", "type", "(", "target", ")", ".", "__name__", "\n", ")", ",", "\"invalid type : {:} vs {:}\"", ".", "format", "(", "base", ",", "target", ")", "\n", "if", "type", "(", "base", ")", ".", "__name__", "==", "\"ConvBNReLU\"", ":", "\n", "                ", "copy_base", "(", "target", ",", "base", ")", "\n", "", "elif", "type", "(", "base", ")", ".", "__name__", "==", "\"ResNetBasicblock\"", ":", "\n", "                ", "copy_basic", "(", "target", ",", "base", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"unknown type name : {:}\"", ".", "format", "(", "type", "(", "base", ")", ".", "__name__", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.get_dataset_with_transform.CUTOUT.__init__": [[30, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.get_dataset_with_transform.CUTOUT.__repr__": [[33, 36], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(length={length})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.get_dataset_with_transform.CUTOUT.__call__": [[38, 54], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.0", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.get_dataset_with_transform.Lighting.__init__": [[69, 77], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "alphastd", ",", "eigval", "=", "imagenet_pca", "[", "\"eigval\"", "]", ",", "eigvec", "=", "imagenet_pca", "[", "\"eigvec\"", "]", "\n", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "assert", "eigval", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "eigvec", ".", "shape", "==", "(", "3", ",", "3", ")", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.get_dataset_with_transform.Lighting.__call__": [[78, 93], ["rnd.astype.astype.astype", "v.reshape.reshape.reshape", "numpy.dot().reshape", "numpy.add", "PIL.Image.fromarray", "numpy.random.randn", "numpy.asarray", "numpy.clip", "numpy.clip.astype", "numpy.dot"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0.0", ":", "\n", "            ", "return", "img", "\n", "", "rnd", "=", "np", ".", "random", ".", "randn", "(", "3", ")", "*", "self", ".", "alphastd", "\n", "rnd", "=", "rnd", ".", "astype", "(", "\"float32\"", ")", "\n", "v", "=", "rnd", "\n", "old_dtype", "=", "np", ".", "asarray", "(", "img", ")", ".", "dtype", "\n", "v", "=", "v", "*", "self", ".", "eigval", "\n", "v", "=", "v", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inc", "=", "np", ".", "dot", "(", "self", ".", "eigvec", ",", "v", ")", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "img", "=", "np", ".", "add", "(", "img", ",", "inc", ")", "\n", "if", "old_dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "255", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "old_dtype", ")", ",", "\"RGB\"", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.get_dataset_with_transform.Lighting.__repr__": [[94, 96], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "\"()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.get_dataset_with_transform.get_datasets": [[98, 238], ["torchvision.Compose", "torchvision.Compose", "name.startswith", "torchvision.CIFAR10", "torchvision.CIFAR10", "name.startswith", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.CIFAR100", "torchvision.CIFAR100", "name.startswith", "name.startswith", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "name.startswith", "len", "len", "torchvision.ImageFolder", "torchvision.ImageFolder", "TypeError", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "xlists.append", "xlists.append", "xlists.append", "torchvision.Compose", "torchvision.Compose", "TypeError", "len", "len", "os.join", "os.join", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "get_dataset_with_transform.CUTOUT", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "xlists.append", "xlists.append", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "get_dataset_with_transform.Lighting", "ValueError", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "torchvision.RandomResizedCrop", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "TypeError", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "get_datasets", "(", "name", ",", "root", ",", "cutout", ")", ":", "\n", "\n", "    ", "if", "name", "==", "\"cifar10\"", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "", "elif", "name", "==", "\"cifar100\"", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "", "elif", "name", ".", "startswith", "(", "\"imagenet-1k\"", ")", ":", "\n", "        ", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "name", ".", "startswith", "(", "\"ImageNet16\"", ")", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "122.68", ",", "116.66", ",", "104.01", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.22", ",", "61.26", ",", "65.09", "]", "]", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# Data Argumentation", "\n", "", "if", "name", "==", "\"cifar10\"", "or", "name", "==", "\"cifar100\"", ":", "\n", "        ", "lists", "=", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", "\n", "if", "cutout", ">", "0", ":", "\n", "            ", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "\"ImageNet16\"", ")", ":", "\n", "        ", "lists", "=", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "16", ",", "padding", "=", "2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", "\n", "if", "cutout", ">", "0", ":", "\n", "            ", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "16", ",", "16", ")", "\n", "", "elif", "name", "==", "\"tiered\"", ":", "\n", "        ", "lists", "=", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "80", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", "\n", "if", "cutout", ">", "0", ":", "\n", "            ", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "CenterCrop", "(", "80", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", "\n", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "\"imagenet-1k\"", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "if", "name", "==", "\"imagenet-1k\"", ":", "\n", "            ", "xlists", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ")", "]", "\n", "xlists", ".", "append", "(", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0.2", "\n", ")", "\n", ")", "\n", "xlists", ".", "append", "(", "Lighting", "(", "0.1", ")", ")", "\n", "", "elif", "name", "==", "\"imagenet-1k-s\"", ":", "\n", "            ", "xlists", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid name : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "", "xlists", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "xlists", ".", "append", "(", "normalize", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "xlists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "if", "name", "==", "\"cifar10\"", ":", "\n", "        ", "train_data", "=", "dset", ".", "CIFAR10", "(", "\n", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "test_data", "=", "dset", ".", "CIFAR10", "(", "\n", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", "\n", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", "==", "\"cifar100\"", ":", "\n", "        ", "train_data", "=", "dset", ".", "CIFAR100", "(", "\n", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "test_data", "=", "dset", ".", "CIFAR100", "(", "\n", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", "\n", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", ".", "startswith", "(", "\"imagenet-1k\"", ")", ":", "\n", "        ", "train_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "\"train\"", ")", ",", "train_transform", ")", "\n", "test_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "\"val\"", ")", ",", "test_transform", ")", "\n", "assert", "(", "\n", "len", "(", "train_data", ")", "==", "1281167", "and", "len", "(", "test_data", ")", "==", "50000", "\n", ")", ",", "\"invalid number of images : {:} & {:} vs {:} & {:}\"", ".", "format", "(", "\n", "len", "(", "train_data", ")", ",", "len", "(", "test_data", ")", ",", "1281167", ",", "50000", "\n", ")", "\n", "", "elif", "name", "==", "\"ImageNet16\"", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "1281167", "and", "len", "(", "test_data", ")", "==", "50000", "\n", "", "elif", "name", "==", "\"ImageNet16-120\"", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "120", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "120", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "151700", "and", "len", "(", "test_data", ")", "==", "6000", "\n", "", "elif", "name", "==", "\"ImageNet16-150\"", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "150", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "150", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "190272", "and", "len", "(", "test_data", ")", "==", "7500", "\n", "", "elif", "name", "==", "\"ImageNet16-200\"", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "200", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "200", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "254775", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "class_num", "=", "Dataset2Class", "[", "name", "]", "\n", "return", "train_data", ",", "test_data", ",", "xshape", ",", "class_num", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.get_dataset_with_transform.get_nas_search_loaders": [[240, 358], ["isinstance", "config_utils.load_config", "copy.deepcopy", "hasattr", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "config_utils.load_config", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "list", "config_utils.load_config", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "range", "torch.utils.data.sampler.SubsetRandomSampler", "list", "len", "range", "torch.utils.data.sampler.SubsetRandomSampler", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.load_config", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.load_config", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.load_config"], ["", "def", "get_nas_search_loaders", "(", "\n", "train_data", ",", "valid_data", ",", "dataset", ",", "config_root", ",", "batch_size", ",", "workers", "\n", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "batch", ",", "test_batch", "=", "batch_size", "\n", "", "else", ":", "\n", "        ", "batch", ",", "test_batch", "=", "batch_size", ",", "batch_size", "\n", "", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "# split_Fpath = 'configs/nas-benchmark/cifar-split.txt'", "\n", "        ", "cifar_split", "=", "load_config", "(", "\"{:}/cifar-split.txt\"", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "train_split", ",", "valid_split", "=", "(", "\n", "cifar_split", ".", "train", ",", "\n", "cifar_split", ".", "valid", ",", "\n", ")", "# search over the proposed training and validation set", "\n", "# logger.log('Load split file from {:}'.format(split_Fpath))      # they are two disjoint groups in the original CIFAR-10 training set", "\n", "# To split data", "\n", "xvalid_data", "=", "deepcopy", "(", "train_data", ")", "\n", "if", "hasattr", "(", "xvalid_data", ",", "\"transforms\"", ")", ":", "# to avoid a print issue", "\n", "            ", "xvalid_data", ".", "transforms", "=", "valid_data", ".", "transform", "\n", "", "xvalid_data", ".", "transform", "=", "deepcopy", "(", "valid_data", ".", "transform", ")", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "train_data", ",", "train_split", ",", "valid_split", ")", "\n", "# data loader", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "search_data", ",", "\n", "batch_size", "=", "batch", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "batch", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_split", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "xvalid_data", ",", "\n", "batch_size", "=", "test_batch", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "valid_split", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "", "elif", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "cifar100_test_split", "=", "load_config", "(", "\n", "\"{:}/cifar100-test-split.txt\"", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", "\n", ")", "\n", "search_train_data", "=", "train_data", "\n", "search_valid_data", "=", "deepcopy", "(", "valid_data", ")", "\n", "search_valid_data", ".", "transform", "=", "train_data", ".", "transform", "\n", "search_data", "=", "SearchDataset", "(", "\n", "dataset", ",", "\n", "[", "search_train_data", ",", "search_valid_data", "]", ",", "\n", "list", "(", "range", "(", "len", "(", "search_train_data", ")", ")", ")", ",", "\n", "cifar100_test_split", ".", "xvalid", ",", "\n", ")", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "search_data", ",", "\n", "batch_size", "=", "batch", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "batch", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "\n", "batch_size", "=", "test_batch", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "\n", "cifar100_test_split", ".", "xvalid", "\n", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "", "elif", "dataset", "==", "\"ImageNet16-120\"", ":", "\n", "        ", "imagenet_test_split", "=", "load_config", "(", "\n", "\"{:}/imagenet-16-120-test-split.txt\"", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", "\n", ")", "\n", "search_train_data", "=", "train_data", "\n", "search_valid_data", "=", "deepcopy", "(", "valid_data", ")", "\n", "search_valid_data", ".", "transform", "=", "train_data", ".", "transform", "\n", "search_data", "=", "SearchDataset", "(", "\n", "dataset", ",", "\n", "[", "search_train_data", ",", "search_valid_data", "]", ",", "\n", "list", "(", "range", "(", "len", "(", "search_train_data", ")", ")", ")", ",", "\n", "imagenet_test_split", ".", "xvalid", ",", "\n", ")", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "search_data", ",", "\n", "batch_size", "=", "batch", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "batch", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "\n", "batch_size", "=", "test_batch", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "\n", "imagenet_test_split", ".", "xvalid", "\n", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid dataset : {:}\"", ".", "format", "(", "dataset", ")", ")", "\n", "", "return", "search_loader", ",", "train_loader", ",", "valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func": [[8, 23], ["min", "A.size", "B.size", "A.size", "B.size", "A.size", "B.size", "A.dim", "B.dim", "A.size", "B.size", "A.size", "B.size", "B.clone", "A.clone"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone"], ["def", "additive_func", "(", "A", ",", "B", ")", ":", "\n", "    ", "assert", "A", ".", "dim", "(", ")", "==", "B", ".", "dim", "(", ")", "and", "A", ".", "size", "(", "0", ")", "==", "B", ".", "size", "(", "0", ")", ",", "\"{:} vs {:}\"", ".", "format", "(", "\n", "A", ".", "size", "(", ")", ",", "B", ".", "size", "(", ")", "\n", ")", "\n", "C", "=", "min", "(", "A", ".", "size", "(", "1", ")", ",", "B", ".", "size", "(", "1", ")", ")", "\n", "if", "A", ".", "size", "(", "1", ")", "==", "B", ".", "size", "(", "1", ")", ":", "\n", "        ", "return", "A", "+", "B", "\n", "", "elif", "A", ".", "size", "(", "1", ")", "<", "B", ".", "size", "(", "1", ")", ":", "\n", "        ", "out", "=", "B", ".", "clone", "(", ")", "\n", "out", "[", ":", ",", ":", "C", "]", "+=", "A", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "out", "=", "A", ".", "clone", "(", ")", "\n", "out", "[", ":", ",", ":", "C", "]", "+=", "B", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.change_key": [[25, 31], ["hasattr", "setattr"], "function", ["None"], ["", "", "def", "change_key", "(", "key", ",", "value", ")", ":", "\n", "    ", "def", "func", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "key", ")", ":", "\n", "            ", "setattr", "(", "m", ",", "key", ",", "value", ")", "\n", "\n", "", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.parse_channel_info": [[33, 38], ["xstring.split", "x.split", "int"], "function", ["None"], ["", "def", "parse_channel_info", "(", "xstring", ")", ":", "\n", "    ", "blocks", "=", "xstring", ".", "split", "(", "\" \"", ")", "\n", "blocks", "=", "[", "x", ".", "split", "(", "\"-\"", ")", "for", "x", "in", "blocks", "]", "\n", "blocks", "=", "[", "[", "int", "(", "_", ")", "for", "_", "in", "x", "]", "for", "x", "in", "blocks", "]", "\n", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.Bottleneck.__init__": [[11, 19], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "interChannels", "=", "4", "*", "growthRate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "interChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "interChannels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "interChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.Bottleneck.forward": [[21, 26], ["CifarDenseNet.Bottleneck.conv1", "CifarDenseNet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.Bottleneck.bn1", "CifarDenseNet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.SingleLayer.__init__": [[29, 34], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ")", ":", "\n", "        ", "super", "(", "SingleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.SingleLayer.forward": [[36, 40], ["CifarDenseNet.SingleLayer.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.SingleLayer.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.Transition.__init__": [[43, 47], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "nOutChannels", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "nOutChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.Transition.forward": [[48, 52], ["CifarDenseNet.Transition.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.Transition.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.DenseNet.__init__": [[55, 95], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "CifarDenseNet.DenseNet._make_dense", "int", "CifarDenseNet.Transition", "CifarDenseNet.DenseNet._make_dense", "int", "CifarDenseNet.Transition", "CifarDenseNet.DenseNet._make_dense", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "CifarDenseNet.DenseNet.apply", "int", "int", "math.floor", "math.floor", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.DenseNet._make_dense", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.DenseNet._make_dense", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.DenseNet._make_dense"], ["    ", "def", "__init__", "(", "self", ",", "growthRate", ",", "depth", ",", "reduction", ",", "nClasses", ",", "bottleneck", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bottleneck", ":", "\n", "            ", "nDenseBlocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "", "else", ":", "\n", "            ", "nDenseBlocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "3", ")", "\n", "\n", "", "self", ".", "message", "=", "\"CifarDenseNet : block : {:}, depth : {:}, reduction : {:}, growth-rate = {:}, class = {:}\"", ".", "format", "(", "\n", "\"bottleneck\"", "if", "bottleneck", "else", "\"basic\"", ",", "\n", "depth", ",", "\n", "reduction", ",", "\n", "growthRate", ",", "\n", "nClasses", ",", "\n", ")", "\n", "\n", "nChannels", "=", "2", "*", "growthRate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "\n", "self", ".", "act", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", ",", "nClasses", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.DenseNet.get_message": [[96, 98], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.DenseNet._make_dense": [[99, 108], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "layers.append", "CifarDenseNet.Bottleneck", "CifarDenseNet.SingleLayer"], "methods", ["None"], ["", "def", "_make_dense", "(", "self", ",", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nDenseBlocks", ")", ")", ":", "\n", "            ", "if", "bottleneck", ":", "\n", "                ", "layers", ".", "append", "(", "Bottleneck", "(", "nChannels", ",", "growthRate", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "SingleLayer", "(", "nChannels", ",", "growthRate", ")", ")", "\n", "", "nChannels", "+=", "growthRate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarDenseNet.DenseNet.forward": [[109, 118], ["CifarDenseNet.DenseNet.conv1", "CifarDenseNet.DenseNet.trans1", "CifarDenseNet.DenseNet.trans2", "CifarDenseNet.DenseNet.dense3", "CifarDenseNet.DenseNet.act", "features.view.view.view", "CifarDenseNet.DenseNet.fc", "CifarDenseNet.DenseNet.dense1", "CifarDenseNet.DenseNet.dense2", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense3", "(", "out", ")", "\n", "features", "=", "self", ".", "act", "(", "out", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "features", ")", "\n", "return", "features", ",", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.convert_param": [[15, 46], ["isinstance", "isinstance", "outs.append", "int", "str", "bool", "int", "float", "TypeError", "float.lower", "ValueError"], "function", ["None"], ["def", "convert_param", "(", "original_lists", ")", ":", "\n", "    ", "assert", "isinstance", "(", "original_lists", ",", "list", ")", ",", "\"The type is not right : {:}\"", ".", "format", "(", "\n", "original_lists", "\n", ")", "\n", "ctype", ",", "value", "=", "original_lists", "[", "0", "]", ",", "original_lists", "[", "1", "]", "\n", "assert", "ctype", "in", "support_types", ",", "\"Ctype={:}, support={:}\"", ".", "format", "(", "ctype", ",", "support_types", ")", "\n", "is_list", "=", "isinstance", "(", "value", ",", "list", ")", "\n", "if", "not", "is_list", ":", "\n", "        ", "value", "=", "[", "value", "]", "\n", "", "outs", "=", "[", "]", "\n", "for", "x", "in", "value", ":", "\n", "        ", "if", "ctype", "==", "\"int\"", ":", "\n", "            ", "x", "=", "int", "(", "x", ")", "\n", "", "elif", "ctype", "==", "\"str\"", ":", "\n", "            ", "x", "=", "str", "(", "x", ")", "\n", "", "elif", "ctype", "==", "\"bool\"", ":", "\n", "            ", "x", "=", "bool", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "ctype", "==", "\"float\"", ":", "\n", "            ", "x", "=", "float", "(", "x", ")", "\n", "", "elif", "ctype", "==", "\"none\"", ":", "\n", "            ", "if", "x", ".", "lower", "(", ")", "!=", "\"none\"", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"For the none type, the value must be none instead of {:}\"", ".", "format", "(", "x", ")", "\n", ")", "\n", "", "x", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Does not know this type : {:}\"", ".", "format", "(", "ctype", ")", ")", "\n", "", "outs", ".", "append", "(", "x", ")", "\n", "", "if", "not", "is_list", ":", "\n", "        ", "outs", "=", "outs", "[", "0", "]", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.load_config": [[48, 67], ["str", "hasattr", "os.path.exists", "isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "logger.log", "open", "json.load", "configure_utils.convert_param", "isinstance", "logger.log", "json.load.items", "Arguments.keys"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.convert_param"], ["", "def", "load_config", "(", "path", ",", "extra", ",", "logger", ")", ":", "\n", "    ", "path", "=", "str", "(", "path", ")", "\n", "if", "hasattr", "(", "logger", ",", "\"log\"", ")", ":", "\n", "        ", "logger", ".", "log", "(", "path", ")", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "\"Can not find {:}\"", ".", "format", "(", "path", ")", "\n", "# Reading data back", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "content", "=", "{", "k", ":", "convert_param", "(", "v", ")", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", "}", "\n", "assert", "extra", "is", "None", "or", "isinstance", "(", "\n", "extra", ",", "dict", "\n", ")", ",", "\"invalid type of extra : {:}\"", ".", "format", "(", "extra", ")", "\n", "if", "isinstance", "(", "extra", ",", "dict", ")", ":", "\n", "        ", "content", "=", "{", "**", "content", ",", "**", "extra", "}", "\n", "", "Arguments", "=", "namedtuple", "(", "\"Configure\"", ",", "\" \"", ".", "join", "(", "content", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "content", ")", "\n", "if", "hasattr", "(", "logger", ",", "\"log\"", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"{:}\"", ".", "format", "(", "content", ")", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.configure2str": [[69, 127], ["config._asdict.items", "isinstance", "config._asdict._asdict", "isinstance", "isinstance", "isinstance", "configure_utils.configure2str.gtype"], "function", ["None"], ["", "def", "configure2str", "(", "config", ",", "xpath", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "        ", "config", "=", "config", ".", "_asdict", "(", ")", "\n", "\n", "", "def", "cstring", "(", "x", ")", ":", "\n", "        ", "return", "'\"{:}\"'", ".", "format", "(", "x", ")", "\n", "\n", "", "def", "gtype", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "x", "=", "x", "[", "0", "]", "\n", "", "if", "isinstance", "(", "x", ",", "str", ")", ":", "\n", "            ", "return", "\"str\"", "\n", "", "elif", "isinstance", "(", "x", ",", "bool", ")", ":", "\n", "            ", "return", "\"bool\"", "\n", "", "elif", "isinstance", "(", "x", ",", "int", ")", ":", "\n", "            ", "return", "\"int\"", "\n", "", "elif", "isinstance", "(", "x", ",", "float", ")", ":", "\n", "            ", "return", "\"float\"", "\n", "", "elif", "x", "is", "None", ":", "\n", "            ", "return", "\"none\"", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid : {:}\"", ".", "format", "(", "x", ")", ")", "\n", "\n", "", "", "def", "cvalue", "(", "x", ",", "xtype", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "is_list", "=", "True", "\n", "", "else", ":", "\n", "            ", "is_list", ",", "x", "=", "False", ",", "[", "x", "]", "\n", "", "temps", "=", "[", "]", "\n", "for", "temp", "in", "x", ":", "\n", "            ", "if", "xtype", "==", "\"bool\"", ":", "\n", "                ", "temp", "=", "cstring", "(", "int", "(", "temp", ")", ")", "\n", "", "elif", "xtype", "==", "\"none\"", ":", "\n", "                ", "temp", "=", "cstring", "(", "\"None\"", ")", "\n", "", "else", ":", "\n", "                ", "temp", "=", "cstring", "(", "temp", ")", "\n", "", "temps", ".", "append", "(", "temp", ")", "\n", "", "if", "is_list", ":", "\n", "            ", "return", "\"[{:}]\"", ".", "format", "(", "\", \"", ".", "join", "(", "temps", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "temps", "[", "0", "]", "\n", "\n", "", "", "xstrings", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "xtype", "=", "gtype", "(", "value", ")", "\n", "string", "=", "\"  {:20s} : [{:8s}, {:}]\"", ".", "format", "(", "\n", "cstring", "(", "key", ")", ",", "cstring", "(", "xtype", ")", ",", "cvalue", "(", "value", ",", "xtype", ")", "\n", ")", "\n", "xstrings", ".", "append", "(", "string", ")", "\n", "", "Fstring", "=", "\"{\\n\"", "+", "\",\\n\"", ".", "join", "(", "xstrings", ")", "+", "\"\\n}\"", "\n", "if", "xpath", "is", "not", "None", ":", "\n", "        ", "parent", "=", "Path", "(", "xpath", ")", ".", "resolve", "(", ")", ".", "parent", "\n", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "osp", ".", "isfile", "(", "xpath", ")", ":", "\n", "            ", "os", ".", "remove", "(", "xpath", ")", "\n", "", "with", "open", "(", "xpath", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "            ", "text_file", ".", "write", "(", "\"{:}\"", ".", "format", "(", "Fstring", ")", ")", "\n", "", "", "return", "Fstring", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.dict2config": [[129, 136], ["isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "type", "logger.log", "xdict.keys"], "function", ["None"], ["", "def", "dict2config", "(", "xdict", ",", "logger", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xdict", ",", "dict", ")", ",", "\"invalid type : {:}\"", ".", "format", "(", "type", "(", "xdict", ")", ")", "\n", "Arguments", "=", "namedtuple", "(", "\"Configure\"", ",", "\" \"", ".", "join", "(", "xdict", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "xdict", ")", "\n", "if", "hasattr", "(", "logger", ",", "\"log\"", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"{:}\"", ".", "format", "(", "content", ")", ")", "\n", "", "return", "content", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.BasicBlock.__init__": [[25, 39], ["torch.Module.__init__", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv3x3", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "base_width", "=", "64", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\"BasicBlock only supports groups=1 and base_width=64\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.BasicBlock.forward": [[40, 57], ["ImageNet_ResNet.BasicBlock.conv1", "ImageNet_ResNet.BasicBlock.bn1", "ImageNet_ResNet.BasicBlock.relu", "ImageNet_ResNet.BasicBlock.conv2", "ImageNet_ResNet.BasicBlock.bn2", "ImageNet_ResNet.BasicBlock.relu", "ImageNet_ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.Bottleneck.__init__": [[62, 77], ["torch.Module.__init__", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv1x1", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv3x3", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "base_width", "=", "64", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.0", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.Bottleneck.forward": [[78, 99], ["ImageNet_ResNet.Bottleneck.conv1", "ImageNet_ResNet.Bottleneck.bn1", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.conv2", "ImageNet_ResNet.Bottleneck.bn2", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.conv3", "ImageNet_ResNet.Bottleneck.bn3", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet.__init__": [[102, 173], ["torch.Module.__init__", "torch.MaxPool2d", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Linear", "ImageNet_ResNet.ResNet.apply", "torch.Sequential", "torch.Sequential", "ImageNet_ResNet.ResNet.modules", "ValueError", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "isinstance", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block_name", ",", "\n", "layers", ",", "\n", "deep_stem", ",", "\n", "num_classes", ",", "\n", "zero_init_residual", ",", "\n", "groups", ",", "\n", "width_per_group", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# planes = [int(width_per_group * groups * 2 ** i) for i in range(4)]", "\n", "if", "block_name", "==", "\"BasicBlock\"", ":", "\n", "            ", "block", "=", "BasicBlock", "\n", "", "elif", "block_name", "==", "\"Bottleneck\"", ":", "\n", "            ", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block-name : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "if", "not", "deep_stem", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "message", "=", "(", "\n", "\"block = {:}, layers = {:}, deep_stem = {:}, num_classes = {:}\"", ".", "format", "(", "\n", "block", ",", "layers", ",", "deep_stem", ",", "num_classes", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet._make_layer": [[174, 200], ["layers.append", "range", "torch.Sequential", "block", "layers.append", "torch.Sequential", "block", "torch.AvgPool2d", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "torch.Sequential", "ValueError", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv1x1", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "groups", ",", "base_width", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "stride", "==", "2", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"invalid stride [{:}] for downsample\"", ".", "format", "(", "stride", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "groups", ",", "base_width", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "groups", ",", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet.get_message": [[201, 203], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.ResNet.forward": [[204, 218], ["ImageNet_ResNet.ResNet.conv", "ImageNet_ResNet.ResNet.maxpool", "ImageNet_ResNet.ResNet.layer1", "ImageNet_ResNet.ResNet.layer2", "ImageNet_ResNet.ResNet.layer3", "ImageNet_ResNet.ResNet.layer4", "ImageNet_ResNet.ResNet.avgpool", "features.view.view.view", "ImageNet_ResNet.ResNet.fc", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "fc", "(", "features", ")", "\n", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv3x3": [[6, 15], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv1x1": [[18, 20], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.ReLUConvBN.__init__": [[115, 140], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "affine", ",", "\n", "track_running_stats", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "\n", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.ReLUConvBN.forward": [[143, 145], ["cell_operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.SepConv.__init__": [[148, 175], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "affine", ",", "\n", "track_running_stats", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "\n", "C_in", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "C_in", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "\n", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.SepConv.forward": [[178, 180], ["cell_operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.DualSepConv.__init__": [[183, 207], ["torch.Module.__init__", "cell_operations.SepConv", "cell_operations.SepConv"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "affine", ",", "\n", "track_running_stats", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DualSepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op_a", "=", "SepConv", "(", "\n", "C_in", ",", "\n", "C_in", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "self", ".", "op_b", "=", "SepConv", "(", "\n", "C_in", ",", "C_out", ",", "kernel_size", ",", "1", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.DualSepConv.forward": [[209, 213], ["cell_operations.DualSepConv.op_a", "cell_operations.DualSepConv.op_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "op_a", "(", "x", ")", "\n", "x", "=", "self", ".", "op_b", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.ResNetBasicblock.__init__": [[216, 236], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "cell_operations.ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "1", ",", "affine", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "1", ",", "affine", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "in_dim", "=", "inplanes", "\n", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.ResNetBasicblock.extra_repr": [[237, 242], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "string", "=", "\"{name}(inC={in_dim}, outC={out_dim}, stride={stride})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.ResNetBasicblock.forward": [[243, 253], ["cell_operations.ResNetBasicblock.conv_a", "cell_operations.ResNetBasicblock.conv_b", "cell_operations.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "return", "residual", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.POOLING.__init__": [[256, 272], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "mode", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "POOLING", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "C_in", "==", "C_out", ":", "\n", "            ", "self", ".", "preprocess", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess", "=", "ReLUConvBN", "(", "\n", "C_in", ",", "C_out", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "", "if", "mode", "==", "\"avg\"", ":", "\n", "            ", "self", ".", "op", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "", "elif", "mode", "==", "\"max\"", ":", "\n", "            ", "self", ".", "op", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid mode={:} in POOLING\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.POOLING.forward": [[273, 279], ["cell_operations.POOLING.op", "cell_operations.POOLING.preprocess"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "preprocess", ":", "\n", "            ", "x", "=", "self", ".", "preprocess", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "inputs", "\n", "", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.Identity.__init__": [[282, 284], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.Identity.forward": [[285, 287], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.Zero.__init__": [[290, 296], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_zero", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.Zero.forward": [[297, 308], ["list", "x.new_zeros", "x.mul", "x[].mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "C_in", "==", "self", ".", "C_out", ":", "\n", "            ", "if", "self", ".", "stride", "==", "1", ":", "\n", "                ", "return", "x", ".", "mul", "(", "0.0", ")", "\n", "", "else", ":", "\n", "                ", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.0", ")", "\n", "", "", "else", ":", "\n", "            ", "shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "self", ".", "C_out", "\n", "zeros", "=", "x", ".", "new_zeros", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.Zero.extra_repr": [[309, 311], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"C_in={C_in}, C_out={C_out}, stride={stride}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.FactorizedReduce.__init__": [[314, 335], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ConstantPad2d", "torch.ConstantPad2d", "cell_operations.FactorizedReduce.convs.append", "torch.Conv2d", "torch.Conv2d", "ValueError", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "# assert C_out % 2 == 0, 'C_out : {:}'.format(C_out)", "\n", "            ", "C_outs", "=", "[", "C_out", "//", "2", ",", "C_out", "-", "C_out", "//", "2", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "self", ".", "convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_outs", "[", "i", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", ")", "\n", "", "self", ".", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "0", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid stride : {:}\"", ".", "format", "(", "stride", ")", ")", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "\n", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.FactorizedReduce.forward": [[337, 346], ["cell_operations.FactorizedReduce.bn", "cell_operations.FactorizedReduce.relu", "cell_operations.FactorizedReduce.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.FactorizedReduce.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "y", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "convs", "[", "0", "]", "(", "x", ")", ",", "self", ".", "convs", "[", "1", "]", "(", "y", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.FactorizedReduce.extra_repr": [[347, 349], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"C_in={C_in}, C_out={C_out}, stride={stride}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.PartAwareOp.__init__": [[353, 376], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "cell_operations.PartAwareOp.local_conv_list.append", "cell_operations.FactorizedReduce", "torch.Sequential", "torch.Sequential", "cell_operations.FactorizedReduce", "ValueError", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "part", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "part", "=", "4", "\n", "self", ".", "hidden", "=", "C_in", "//", "3", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "local_conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "            ", "self", ".", "local_conv_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "self", ".", "hidden", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "hidden", ",", "affine", "=", "True", ")", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "W_K", "=", "nn", ".", "Linear", "(", "self", ".", "hidden", ",", "self", ".", "hidden", ")", "\n", "self", ".", "W_Q", "=", "nn", ".", "Linear", "(", "self", ".", "hidden", ",", "self", ".", "hidden", ")", "\n", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "last", "=", "FactorizedReduce", "(", "C_in", "+", "self", ".", "hidden", ",", "C_out", ",", "2", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "            ", "self", ".", "last", "=", "FactorizedReduce", "(", "C_in", "+", "self", ".", "hidden", ",", "C_out", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid Stride : {:}\"", ".", "format", "(", "stride", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.PartAwareOp.forward": [[377, 409], ["x.size", "range", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "part_feature.transpose().contiguous.transpose().contiguous.transpose().contiguous", "cell_operations.PartAwareOp.W_K", "cell_operations.PartAwareOp.W_Q().transpose().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "range", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.PartAwareOp.last", "IHs.append", "cell_operations.PartAwareOp.avg_pool", "local_feat_list.append", "aggreateF[].expand", "feature.view.view.view", "torch.cat().expand.append", "torch.cat().expand.append", "min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "part_feature.transpose().contiguous.transpose().contiguous.transpose", "cell_operations.PartAwareOp.W_Q().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "cell_operations.PartAwareOp.W_Q", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "assert", "H", ">=", "self", ".", "part", ",", "\"input size too small : {:} vs {:}\"", ".", "format", "(", "\n", "x", ".", "shape", ",", "self", ".", "part", "\n", ")", "\n", "IHs", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "            ", "IHs", ".", "append", "(", "min", "(", "H", ",", "int", "(", "(", "i", "+", "1", ")", "*", "(", "float", "(", "H", ")", "/", "self", ".", "part", ")", ")", ")", ")", "\n", "", "local_feat_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "            ", "feature", "=", "x", "[", ":", ",", ":", ",", "IHs", "[", "i", "]", ":", "IHs", "[", "i", "+", "1", "]", ",", ":", "]", "\n", "xfeax", "=", "self", ".", "avg_pool", "(", "feature", ")", "\n", "xfea", "=", "self", ".", "local_conv_list", "[", "i", "]", "(", "xfeax", ")", "\n", "local_feat_list", ".", "append", "(", "xfea", ")", "\n", "", "part_feature", "=", "torch", ".", "cat", "(", "local_feat_list", ",", "dim", "=", "2", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "self", ".", "part", ")", "\n", "part_feature", "=", "part_feature", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "part_K", "=", "self", ".", "W_K", "(", "part_feature", ")", "\n", "part_Q", "=", "self", ".", "W_Q", "(", "part_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "weight_att", "=", "torch", ".", "bmm", "(", "part_K", ",", "part_Q", ")", "\n", "attention", "=", "torch", ".", "softmax", "(", "weight_att", ",", "dim", "=", "2", ")", "\n", "aggreateF", "=", "torch", ".", "bmm", "(", "attention", ",", "part_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "            ", "feature", "=", "aggreateF", "[", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", ".", "expand", "(", "\n", "batch", ",", "self", ".", "hidden", ",", "IHs", "[", "i", "+", "1", "]", "-", "IHs", "[", "i", "]", "\n", ")", "\n", "feature", "=", "feature", ".", "view", "(", "batch", ",", "self", ".", "hidden", ",", "IHs", "[", "i", "+", "1", "]", "-", "IHs", "[", "i", "]", ",", "1", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "dim", "=", "2", ")", ".", "expand", "(", "batch", ",", "self", ".", "hidden", ",", "H", ",", "W", ")", "\n", "final_fea", "=", "torch", ".", "cat", "(", "(", "x", ",", "features", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "self", ".", "last", "(", "final_fea", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.GDAS_Reduction_Cell.__init__": [[413, 500], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "cell_operations.FactorizedReduce", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C_prev_prev", ",", "\n", "C_prev", ",", "\n", "C", ",", "\n", "reduction_prev", ",", "\n", "multiplier", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GDAS_Reduction_Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "\n", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "\n", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "\n", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "\n", "self", ".", "reduction", "=", "True", "\n", "self", ".", "ops1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C", ",", "\n", "C", ",", "\n", "(", "1", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "2", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ")", ",", "\n", "groups", "=", "8", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C", ",", "\n", "C", ",", "\n", "(", "3", ",", "1", ")", ",", "\n", "stride", "=", "(", "2", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "0", ")", ",", "\n", "groups", "=", "8", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C", ",", "\n", "C", ",", "\n", "(", "1", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "2", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ")", ",", "\n", "groups", "=", "8", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C", ",", "\n", "C", ",", "\n", "(", "3", ",", "1", ")", ",", "\n", "stride", "=", "(", "2", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "0", ")", ",", "\n", "groups", "=", "8", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "ops2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.cell_operations.GDAS_Reduction_Cell.forward": [[504, 519], ["cell_operations.GDAS_Reduction_Cell.preprocess0", "cell_operations.GDAS_Reduction_Cell.preprocess1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "drop_path", "drop_path", "drop_path", "drop_path"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path", "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path", "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path", "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", "=", "-", "1", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "X0", "=", "self", ".", "ops1", "[", "0", "]", "(", "s0", ")", "\n", "X1", "=", "self", ".", "ops1", "[", "1", "]", "(", "s1", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.0", ":", "\n", "            ", "X0", ",", "X1", "=", "drop_path", "(", "X0", ",", "drop_prob", ")", ",", "drop_path", "(", "X1", ",", "drop_prob", ")", "\n", "\n", "# X2 = self.ops2[0] (X0+X1)", "\n", "", "X2", "=", "self", ".", "ops2", "[", "0", "]", "(", "s0", ")", "\n", "X3", "=", "self", ".", "ops2", "[", "1", "]", "(", "s1", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.0", ":", "\n", "            ", "X2", ",", "X3", "=", "drop_path", "(", "X2", ",", "drop_prob", ")", ",", "drop_path", "(", "X3", ",", "drop_prob", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "X0", ",", "X1", ",", "X2", ",", "X3", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.get_cell_based_tiny_net": [[28, 91], ["isinstance", "getattr", "configure_utils.dict2config", "hasattr", "TinyNetwork", "hasattr", "isinstance", "cell_searchs.CellStructure.str2structure", "DynamicShapeTinyNet", "cell_searchs.CellStructure.str2structure", "ValueError", "tuple", "ValueError", "int", "configure_utils.dict2config.channels.split"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.dict2config", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.str2structure"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.get_search_spaces": [[94, 104], ["ValueError", "SearchSpaceNames.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.get_cifar_models": [[106, 183], ["getattr", "getattr.startswith", "CifarResNet", "ValueError", "DenseNet", "len", "getattr.split", "InferWidthCifarResNet", "CifarWideResNet", "ValueError", "getattr.split", "InferDepthCifarResNet", "InferCifarResNet", "NASNetonCIFAR", "ValueError", "torch.load", "hasattr", "hasattr", "os.path.isfile", "ValueError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.get_imagenet_models": [[185, 241], ["getattr", "getattr.startswith", "ResNet", "ValueError", "MobileNetV2", "ValueError", "len", "getattr.split", "ValueError", "getattr.split", "InferImagenetResNet", "InferMobileNetV2", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.obtain_model": [[244, 251], ["__init__.get_cifar_models", "__init__.get_imagenet_models", "ValueError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.get_cifar_models", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.get_imagenet_models"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.obtain_search_model": [[253, 301], ["ValueError", "SearchWidthCifarResNet", "ValueError", "SearchShapeImagenetResNet", "ValueError", "SearchDepthCifarResNet", "SearchWidthSimResNet", "ValueError", "SearchShapeCifarResNet", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.load_net_from_checkpoint": [[303, 310], ["os.path.isfile", "torch.load", "configure_utils.dict2config", "__init__.obtain_model", "obtain_model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.configure_utils.dict2config", "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.__init__.obtain_model"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.Downsample.__init__": [[9, 18], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Downsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "and", "nOut", "==", "2", "*", "nIn", ",", "\"stride:{} IO:{},{}\"", ".", "format", "(", "\n", "stride", ",", "nIn", ",", "nOut", "\n", ")", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.Downsample.forward": [[19, 23], ["CifarResNet.Downsample.avg", "CifarResNet.Downsample.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.ConvBNReLU.__init__": [[26, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "relu", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "num_conv", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.ConvBNReLU.forward": [[39, 46], ["CifarResNet.ConvBNReLU.conv", "CifarResNet.ConvBNReLU.bn", "CifarResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv", "=", "self", ".", "conv", "(", "x", ")", "\n", "bn", "=", "self", ".", "bn", "(", "conv", ")", "\n", "if", "self", ".", "relu", ":", "\n", "            ", "return", "self", ".", "relu", "(", "bn", ")", "\n", "", "else", ":", "\n", "            ", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.ResNetBasicblock.__init__": [[51, 64], ["torch.Module.__init__", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.Downsample", "CifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "Downsample", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.ResNetBasicblock.forward": [[65, 76], ["CifarResNet.ResNetBasicblock.conv_a", "CifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.relu", "torch.relu", "torch.relu", "CifarResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.ResNetBottleneck.__init__": [[81, 99], ["torch.Module.__init__", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.Downsample", "CifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "Downsample", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "stride", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "num_conv", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.ResNetBottleneck.forward": [[100, 112], ["CifarResNet.ResNetBottleneck.conv_1x1", "CifarResNet.ResNetBottleneck.conv_3x3", "CifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.relu", "torch.relu", "torch.relu", "CifarResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.CifarResNet.__init__": [[115, 169], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "CifarResNet.CifarResNet.apply", "range", "CifarResNet.CifarResNet.modules", "ValueError", "CifarResNet.ConvBNReLU", "block", "CifarResNet.CifarResNet.channels.append", "CifarResNet.CifarResNet.layers.append", "sum", "sum", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "        ", "super", "(", "CifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"ResNetBasicblock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "\"depth should be one of 20, 32, 44, 56, 110\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "\"ResNetBottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "\"depth should be one of 164\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "\"CifarResNet : Block : {:}, Depth : {:}, Layers for each block : {:}\"", ".", "format", "(", "\n", "block_name", ",", "depth", ",", "layer_blocks", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "True", ")", "]", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iC", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "assert", "(", "\n", "sum", "(", "x", ".", "num_conv", "for", "x", "in", "self", ".", "layers", ")", "+", "1", "==", "depth", "\n", ")", ",", "\"invalid depth check {:} vs {:}\"", ".", "format", "(", "\n", "sum", "(", "x", ".", "num_conv", "for", "x", "in", "self", ".", "layers", ")", "+", "1", ",", "depth", "\n", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.CifarResNet.get_message": [[170, 172], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.CifarResNet.CifarResNet.forward": [[173, 181], ["enumerate", "CifarResNet.CifarResNet.avgpool", "features.view.view.view", "CifarResNet.CifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_MobileNetV2.ConvBNReLU.__init__": [[7, 21], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_MobileNetV2.ConvBNReLU.forward": [[22, 27], ["ImageNet_MobileNetV2.ConvBNReLU.conv", "ImageNet_MobileNetV2.ConvBNReLU.bn", "ImageNet_MobileNetV2.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_MobileNetV2.InvertedResidual.__init__": [[30, 52], ["torch.nn.Module.__init__", "int", "layers.extend", "torch.nn.Sequential", "round", "layers.append", "ImageNet_MobileNetV2.ConvBNReLU", "ImageNet_MobileNetV2.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "round", "(", "inp", "*", "expand_ratio", ")", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "# pw", "\n", "            ", "layers", ".", "append", "(", "ConvBNReLU", "(", "inp", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "layers", ".", "extend", "(", "\n", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "hidden_dim", ",", "hidden_dim", ",", "stride", "=", "stride", ",", "groups", "=", "hidden_dim", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_MobileNetV2.InvertedResidual.forward": [[53, 58], ["ImageNet_MobileNetV2.InvertedResidual.conv", "ImageNet_MobileNetV2.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_MobileNetV2.MobileNetV2.__init__": [[61, 109], ["torch.nn.Module.__init__", "int", "int", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "ImageNet_MobileNetV2.MobileNetV2.apply", "ValueError", "ImageNet_MobileNetV2.ConvBNReLU", "int", "range", "ImageNet_MobileNetV2.ConvBNReLU", "torch.nn.Dropout", "torch.nn.Linear", "max", "features.append", "block"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_classes", ",", "width_mult", ",", "input_channel", ",", "last_channel", ",", "block_name", ",", "dropout", "\n", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "block_name", "==", "\"InvertedResidual\"", ":", "\n", "            ", "block", "=", "InvertedResidual", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block name : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "", "inverted_residual_setting", "=", "[", "\n", "# t, c,  n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "max", "(", "1.0", ",", "width_mult", ")", ")", "\n", "features", "=", "[", "ConvBNReLU", "(", "3", ",", "input_channel", ",", "stride", "=", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "features", ".", "append", "(", "\n", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ")", "\n", ")", "\n", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "features", ".", "append", "(", "ConvBNReLU", "(", "input_channel", ",", "self", ".", "last_channel", ",", "kernel_size", "=", "1", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n", "self", ".", "message", "=", "\"MobileNetV2 : width_mult={:}, in-C={:}, last-C={:}, block={:}, dropout={:}\"", ".", "format", "(", "\n", "width_mult", ",", "input_channel", ",", "last_channel", ",", "block_name", ",", "dropout", "\n", ")", "\n", "\n", "# weight initialization", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_MobileNetV2.MobileNetV2.get_message": [[110, 112], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_MobileNetV2.MobileNetV2.forward": [[113, 118], ["ImageNet_MobileNetV2.MobileNetV2.features", "ImageNet_MobileNetV2.MobileNetV2.mean", "ImageNet_MobileNetV2.MobileNetV2.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "inputs", ")", "\n", "vectors", "=", "features", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "predicts", "=", "self", ".", "classifier", "(", "vectors", ")", "\n", "return", "features", ",", "predicts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.cells.InferCell.__init__": [[13, 37], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range", "len", "len", "cells.InferCell.node_IX.append", "cells.InferCell.node_IN.append", "cur_index.append", "cur_innod.append", "cells.InferCell.layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "InferCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "node_IN", "=", "[", "]", "\n", "self", ".", "node_IX", "=", "[", "]", "\n", "self", ".", "genotype", "=", "deepcopy", "(", "genotype", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "genotype", ")", ")", ":", "\n", "            ", "node_info", "=", "genotype", "[", "i", "-", "1", "]", "\n", "cur_index", "=", "[", "]", "\n", "cur_innod", "=", "[", "]", "\n", "for", "(", "op_name", ",", "op_in", ")", "in", "node_info", ":", "\n", "                ", "if", "op_in", "==", "0", ":", "\n", "                    ", "layer", "=", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "True", ",", "True", ")", "\n", "", "else", ":", "\n", "                    ", "layer", "=", "OPS", "[", "op_name", "]", "(", "C_out", ",", "C_out", ",", "1", ",", "True", ",", "True", ")", "\n", "", "cur_index", ".", "append", "(", "len", "(", "self", ".", "layers", ")", ")", "\n", "cur_innod", ".", "append", "(", "op_in", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "", "self", ".", "node_IX", ".", "append", "(", "cur_index", ")", "\n", "self", ".", "node_IN", ".", "append", "(", "cur_innod", ")", "\n", "", "self", ".", "nodes", "=", "len", "(", "genotype", ")", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.cells.InferCell.extra_repr": [[38, 54], ["enumerate", "zip", "laystr.append", "cells.InferCell.genotype.tostr", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tostr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "string", "=", "\"info :: nodes={nodes}, inC={in_dim}, outC={out_dim}\"", ".", "format", "(", "\n", "**", "self", ".", "__dict__", "\n", ")", "\n", "laystr", "=", "[", "]", "\n", "for", "i", ",", "(", "node_layers", ",", "node_innods", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "node_IX", ",", "self", ".", "node_IN", ")", ")", ":", "\n", "            ", "y", "=", "[", "\n", "\"I{:}-L{:}\"", ".", "format", "(", "_ii", ",", "_il", ")", "\n", "for", "_il", ",", "_ii", "in", "zip", "(", "node_layers", ",", "node_innods", ")", "\n", "]", "\n", "x", "=", "\"{:}<-({:})\"", ".", "format", "(", "i", "+", "1", ",", "\",\"", ".", "join", "(", "y", ")", ")", "\n", "laystr", ".", "append", "(", "x", ")", "\n", "", "return", "(", "\n", "string", "\n", "+", "\", [{:}]\"", ".", "format", "(", "\" | \"", ".", "join", "(", "laystr", ")", ")", "\n", "+", "\", {:}\"", ".", "format", "(", "self", ".", "genotype", ".", "tostr", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.cells.InferCell.forward": [[56, 65], ["enumerate", "zip", "sum", "nodes.append", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", ",", "(", "node_layers", ",", "node_innods", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "node_IX", ",", "self", ".", "node_IN", ")", ")", ":", "\n", "            ", "node_feature", "=", "sum", "(", "\n", "self", ".", "layers", "[", "_il", "]", "(", "nodes", "[", "_ii", "]", ")", "\n", "for", "_il", ",", "_ii", "in", "zip", "(", "node_layers", ",", "node_innods", ")", "\n", ")", "\n", "nodes", ".", "append", "(", "node_feature", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.cells.NASNetInferCell.__init__": [[69, 110], ["torch.Module.__init__", "len", "len", "torch.ModuleDict", "torch.ModuleDict", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "genotype", ",", "\n", "C_prev_prev", ",", "\n", "C_prev", ",", "\n", "C", ",", "\n", "reduction", ",", "\n", "reduction_prev", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NASNetInferCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "OPS", "[", "\"skip_connect\"", "]", "(", "\n", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "OPS", "[", "\"nor_conv_1x1\"", "]", "(", "\n", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "", "self", ".", "preprocess1", "=", "OPS", "[", "\"nor_conv_1x1\"", "]", "(", "\n", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "\n", "if", "not", "reduction", ":", "\n", "            ", "nodes", ",", "concats", "=", "genotype", "[", "\"normal\"", "]", ",", "genotype", "[", "\"normal_concat\"", "]", "\n", "", "else", ":", "\n", "            ", "nodes", ",", "concats", "=", "genotype", "[", "\"reduce\"", "]", ",", "genotype", "[", "\"reduce_concat\"", "]", "\n", "", "self", ".", "_multiplier", "=", "len", "(", "concats", ")", "\n", "self", ".", "_concats", "=", "concats", "\n", "self", ".", "_steps", "=", "len", "(", "nodes", ")", "\n", "self", ".", "_nodes", "=", "nodes", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "nodes", ")", ":", "\n", "            ", "for", "in_node", "in", "node", ":", "\n", "                ", "name", ",", "j", "=", "in_node", "[", "0", "]", ",", "in_node", "[", "1", "]", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", "+", "2", ",", "j", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "OPS", "[", "name", "]", "(", "\n", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.cells.NASNetInferCell.forward": [[113, 127], ["cells.NASNetInferCell.preprocess0", "cells.NASNetInferCell.preprocess1", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "states.append", "clist.append", "sum", "op"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "unused_drop_prob", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "self", ".", "_nodes", ")", ":", "\n", "            ", "clist", "=", "[", "]", "\n", "for", "in_node", "in", "node", ":", "\n", "                ", "name", ",", "j", "=", "in_node", "[", "0", "]", ",", "in_node", "[", "1", "]", "\n", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", "+", "2", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "clist", ".", "append", "(", "op", "(", "states", "[", "j", "]", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "x", "]", "for", "x", "in", "self", ".", "_concats", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.cells.AuxiliaryHeadCIFAR.__init__": [[130, 146], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "\n", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", "\n", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.cells.AuxiliaryHeadCIFAR.forward": [[147, 151], ["cells.AuxiliaryHeadCIFAR.features", "cells.AuxiliaryHeadCIFAR.classifier", "cells.AuxiliaryHeadCIFAR.view", "cells.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.nasnet_cifar.NASNetonCIFAR.__init__": [[12, 75], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "cells.NASNetInferCell", "nasnet_cifar.NASNetonCIFAR.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cells.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C", ",", "\n", "N", ",", "\n", "stem_multiplier", ",", "\n", "num_classes", ",", "\n", "genotype", ",", "\n", "auxiliary", ",", "\n", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NASNetonCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ",", "\n", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "(", "\n", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", ")", "\n", "layer_reductions", "=", "(", "\n", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "(", "\n", "C", "*", "stem_multiplier", ",", "\n", "C", "*", "stem_multiplier", ",", "\n", "C", ",", "\n", "False", ",", "\n", ")", "\n", "self", ".", "auxiliary_index", "=", "None", "\n", "self", ".", "auxiliary_head", "=", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "cell", "=", "InferCell", "(", "\n", "genotype", ",", "\n", "C_prev_prev", ",", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "reduction", ",", "\n", "reduction_prev", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "(", "\n", "C_prev", ",", "\n", "cell", ".", "_multiplier", "*", "C_curr", ",", "\n", "reduction", ",", "\n", ")", "\n", "if", "reduction", "and", "C_curr", "==", "C", "*", "4", "and", "auxiliary", ":", "\n", "                ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "auxiliary_index", "=", "index", "\n", "", "", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "drop_path_prob", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.nasnet_cifar.NASNetonCIFAR.update_drop_path": [[76, 78], ["None"], "methods", ["None"], ["", "def", "update_drop_path", "(", "self", ",", "drop_path_prob", ")", ":", "\n", "        ", "self", ".", "drop_path_prob", "=", "drop_path_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.nasnet_cifar.NASNetonCIFAR.auxiliary_param": [[79, 84], ["list", "nasnet_cifar.NASNetonCIFAR.auxiliary_head.parameters"], "methods", ["None"], ["", "def", "auxiliary_param", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "auxiliary_head", "is", "None", ":", "\n", "            ", "return", "[", "]", "\n", "", "else", ":", "\n", "            ", "return", "list", "(", "self", ".", "auxiliary_head", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.nasnet_cifar.NASNetonCIFAR.get_message": [[85, 92], ["nasnet_cifar.NASNetonCIFAR.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.nasnet_cifar.NASNetonCIFAR.extra_repr": [[93, 96], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, N={_layerN}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.nasnet_cifar.NASNetonCIFAR.forward": [[98, 118], ["enumerate", "nasnet_cifar.NASNetonCIFAR.lastact", "nasnet_cifar.NASNetonCIFAR.global_pooling", "out.view.view.view", "nasnet_cifar.NASNetonCIFAR.classifier", "nasnet_cifar.NASNetonCIFAR.stem", "cell", "cell_results.append", "out.view.view.size", "nasnet_cifar.NASNetonCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "stem_feature", ",", "logits_aux", "=", "self", ".", "stem", "(", "inputs", ")", ",", "None", "\n", "cell_results", "=", "[", "stem_feature", ",", "stem_feature", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "cell_feature", "=", "cell", "(", "cell_results", "[", "-", "2", "]", ",", "cell_results", "[", "-", "1", "]", ",", "self", ".", "drop_path_prob", ")", "\n", "cell_results", ".", "append", "(", "cell_feature", ")", "\n", "if", "(", "\n", "self", ".", "auxiliary_index", "is", "not", "None", "\n", "and", "i", "==", "self", ".", "auxiliary_index", "\n", "and", "self", ".", "training", "\n", ")", ":", "\n", "                ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "cell_results", "[", "-", "1", "]", ")", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "cell_results", "[", "-", "1", "]", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "if", "logits_aux", "is", "None", ":", "\n", "            ", "return", "out", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "out", ",", "[", "logits", ",", "logits_aux", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.tiny_network.TinyNetwork.__init__": [[11, 39], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "zip", "tiny_network.TinyNetwork.cells.append", "torch.BatchNorm2d", "torch.ReLU", "cell_operations.ResNetBasicblock", "cells.InferCell"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "genotype", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "TinyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C", ")", "\n", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", "=", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ",", "True", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "InferCell", "(", "genotype", ",", "C_prev", ",", "C_curr", ",", "1", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.tiny_network.TinyNetwork.get_message": [[40, 47], ["tiny_network.TinyNetwork.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.tiny_network.TinyNetwork.extra_repr": [[48, 51], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, N={_layerN}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_infers.tiny_network.TinyNetwork.forward": [[53, 64], ["tiny_network.TinyNetwork.stem", "enumerate", "tiny_network.TinyNetwork.lastact", "tiny_network.TinyNetwork.global_pooling", "out.view.view.view", "tiny_network.TinyNetwork.classifier", "cell", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.__init__": [[35, 68], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet_depth.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices"], ["def", "__init__", "(", "\n", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "\"choices_tensor\"", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "if", "has_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.get_flops": [[69, 91], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "divide", "=", "1", ")", ":", "\n", "        ", "iC", ",", "oC", "=", "self", ".", "in_dim", ",", "self", ".", "out_dim", "\n", "assert", "(", "\n", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", "\n", ")", ",", "\"{:} vs {:}  |  {:} vs {:}\"", ".", "format", "(", "\n", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", "\n", ")", "\n", "assert", "(", "\n", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", "\n", ")", ",", "\"invalid in-shape : {:}\"", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "(", "\n", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", "\n", ")", ",", "\"invalid out-shape : {:}\"", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "# conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "\n", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", "\n", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "all_positions", "/", "divide", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.forward": [[92, 110], ["SearchCifarResNet_depth.ConvBNReLU.conv", "SearchCifarResNet_depth.ConvBNReLU.avg", "SearchCifarResNet_depth.ConvBNReLU.bn", "SearchCifarResNet_depth.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet_depth.ConvBNReLU.size", "SearchCifarResNet_depth.ConvBNReLU.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.__init__": [[116, 161], ["torch.Module.__init__", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "\n", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.get_flops": [[162, 170], ["SearchCifarResNet_depth.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet_depth.ResNetBasicblock.conv_b.get_flops", "hasattr", "SearchCifarResNet_depth.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "divide", "=", "1", ")", ":", "\n", "        ", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "divide", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "divide", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "divide", ")", "\n", "", "else", ":", "\n", "            ", "flop_C", "=", "0", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.forward": [[171, 180], ["SearchCifarResNet_depth.ResNetBasicblock.conv_a", "SearchCifarResNet_depth.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_depth.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.__init__": [[186, 242], ["torch.Module.__init__", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.get_range": [[243, 248], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "\n", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "\n", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.get_flops": [[250, 259], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "SearchCifarResNet_depth.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "divide", ")", ":", "\n", "        ", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "divide", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "divide", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "divide", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "divide", ")", "\n", "", "else", ":", "\n", "            ", "flop_D", "=", "0", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.forward": [[260, 270], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x1", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_depth.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.__init__": [[273, 363], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "collections.OrderedDict", "collections.OrderedDict", "range", "SearchCifarResNet_depth.SearchDepthCifarResNet.depth_info.items", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "SearchCifarResNet_depth.SearchDepthCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet_depth.SearchDepthCifarResNet.apply", "SearchCifarResNet_depth.get_depth_choices", "range", "SearchCifarResNet_depth.SearchDepthCifarResNet.depth_info_list.append", "range", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet_depth.ConvBNReLU", "len", "block", "SearchCifarResNet_depth.SearchDepthCifarResNet.channels.append", "SearchCifarResNet_depth.SearchDepthCifarResNet.layers.append", "bisect.bisect_right", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "block_choices.append", "SearchCifarResNet_depth.get_depth_choices", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_depth_choices"], ["    ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "SearchDepthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"ResNetBasicblock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "\"depth should be one of 20, 32, 44, 56, 110\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "\"ResNetBottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "\"depth should be one of 164\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "(", "\n", "\"SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}\"", ".", "format", "(", "\n", "depth", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "]", "\n", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "            ", "cur_block_choices", "=", "get_depth_choices", "(", "layer_blocks", ",", "False", ")", "\n", "assert", "(", "\n", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", "\n", ")", ",", "\"stage={:}, {:} vs {:}\"", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "self", ".", "message", "+=", "(", "\n", "\"\\nstage={:} ::: depth-block-choices={:} for {:} blocks.\"", ".", "format", "(", "\n", "stage", ",", "cur_block_choices", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iC", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "\n", "                    ", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "                    ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "\n", "\"choices\"", ":", "block_choices", ",", "\n", "\"stage\"", ":", "stage", ",", "\n", "\"xstart\"", ":", "xstart", ",", "\n", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "\"xstart\"", "]", ",", "info", "[", "\"stage\"", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "                ", "idx", "=", "bisect_right", "(", "info", "[", "\"choices\"", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "# assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "self", ".", "register_parameter", "(", "\n", "\"depth_attentions\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", ",", "get_depth_choices", "(", "layer_blocks", ",", "True", ")", ")", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.arch_parameters": [[364, 366], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "depth_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.base_parameters": [[367, 372], ["list", "list", "list", "SearchCifarResNet_depth.SearchDepthCifarResNet.classifier.parameters", "SearchCifarResNet_depth.SearchDepthCifarResNet.layers.parameters", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_flop": [[374, 413], ["zip", "enumerate", "config_dict.copy.copy.copy", "selected_layers.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "ValueError", "layer.get_flops", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.functional.softmax.size", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.functional.softmax.size", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "        ", "if", "config_dict", "is", "not", "None", ":", "\n", "            ", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select depth", "\n", "", "if", "mode", "==", "\"genotype\"", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "elif", "mode", "==", "\"max\"", ":", "\n", "            ", "choices", "=", "[", "depth_probs", ".", "size", "(", "1", ")", "-", "1", "for", "_", "in", "range", "(", "depth_probs", ".", "size", "(", "0", ")", ")", "]", "\n", "", "elif", "mode", "==", "\"random\"", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "multinomial", "(", "depth_probs", ",", "1", ",", "False", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid mode : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "            ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "\"choices\"", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "\"xstart\"", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "                ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "                    ", "flop", "+=", "layer", ".", "get_flops", "(", ")", "\n", "", "else", ":", "\n", "                    ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "                ", "flop", "+=", "layer", ".", "get_flops", "(", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "self", ".", "classifier", ".", "in_features", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "            ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "            ", "config_dict", "[", "\"xblocks\"", "]", "=", "selected_layers", "\n", "config_dict", "[", "\"super_type\"", "]", "=", "\"infer-depth\"", "\n", "config_dict", "[", "\"estimated_FLOP\"", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_arch_info": [[414, 440], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "        ", "string", "=", "\"for depth, there are {:} attention probabilities.\"", ".", "format", "(", "\n", "len", "(", "self", ".", "depth_attentions", ")", "\n", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "                ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", "\n", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "\"{:03d}/{:03d}-th : {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "\" \"", ".", "join", "(", "prob", ")", "\n", ")", "\n", "logt", "=", "[", "\"{:.4f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "\"  ||  {:17s}\"", ".", "format", "(", "\" \"", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "\"  || discrepancy={:.2f} || select={:}/{:}\"", ".", "format", "(", "\n", "disc", ",", "selc", ",", "len", "(", "prob", ")", "\n", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.set_tau": [[441, 447], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "        ", "assert", "(", "\n", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", "\n", ")", ",", "\"invalid epoch-ratio : {:}\"", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_message": [[448, 450], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.forward": [[451, 458], ["SearchCifarResNet_depth.SearchDepthCifarResNet.basic_forward", "SearchCifarResNet_depth.SearchDepthCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.search_forward": [[459, 505], ["torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "enumerate", "sum", "layer.get_flops", "possible_tensors.append", "layer.get_flops", "sum", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "\n", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", "\n", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "\n", "x", ",", "flops", "=", "inputs", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "layer_i", "=", "layer", "(", "x", ")", "\n", "feature_maps", ".", "append", "(", "layer_i", ")", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "                ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "\"choices\"", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "\"stage\"", "]", "\n", "possible_tensors", "=", "[", "]", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "                    ", "xtensor", "=", "feature_maps", "[", "A", "]", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "\n", "xtensor", "*", "W", "\n", "for", "xtensor", ",", "W", "in", "zip", "(", "\n", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", "\n", ")", "\n", ")", "\n", "x", "=", "weighted_sum", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer_i", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "                ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "# print ('layer-{:03d}, stage={:}, att={:}, prob={:}, flop={:}'.format(i, xstagei, xatti, flop_depth_probs[xstagei, xatti].item(), layer.get_flops(1e6)))", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "layer", ".", "get_flops", "(", "\n", "1e6", "\n", ")", "\n", "", "else", ":", "\n", "                ", "x_expected_flop", "=", "layer", ".", "get_flops", "(", "1e6", ")", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "\n", "(", "self", ".", "classifier", ".", "in_features", "*", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", "\n", ")", "\n", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.basic_forward": [[506, 516], ["enumerate", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet_depth.SearchDepthCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_depth.get_depth_choices": [[15, 30], ["len", "list", "ValueError", "range", "list.append"], "function", ["None"], ["def", "get_depth_choices", "(", "nDepth", ",", "return_num", ")", ":", "\n", "    ", "if", "nDepth", "==", "2", ":", "\n", "        ", "choices", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "nDepth", "==", "3", ":", "\n", "        ", "choices", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "", "elif", "nDepth", ">", "3", ":", "\n", "        ", "choices", "=", "list", "(", "range", "(", "1", ",", "nDepth", "+", "1", ",", "2", ")", ")", "\n", "if", "choices", "[", "-", "1", "]", "<", "nDepth", ":", "\n", "            ", "choices", ".", "append", "(", "nDepth", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid nDepth : {:}\"", ".", "format", "(", "nDepth", ")", ")", "\n", "", "if", "return_num", ":", "\n", "        ", "return", "len", "(", "choices", ")", "\n", "", "else", ":", "\n", "        ", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ConvBNReLU.__init__": [[27, 63], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet_width.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchCifarResNet_width.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices"], ["def", "__init__", "(", "\n", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "\"choices_tensor\"", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "# if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "# else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "            ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ConvBNReLU.get_flops": [[64, 87], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "        ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "\n", "            ", "assert", "(", "\n", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", "\n", ")", ",", "\"{:} vs {:}  |  {:} vs {:}\"", ".", "format", "(", "\n", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", "\n", ")", "\n", "", "assert", "(", "\n", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", "\n", ")", ",", "\"invalid in-shape : {:}\"", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "(", "\n", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", "\n", ")", ",", "\"invalid out-shape : {:}\"", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "# conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "\n", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", "\n", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "all_positions", "/", "divide", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ConvBNReLU.get_range": [[88, 90], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ConvBNReLU.forward": [[91, 98], ["SearchCifarResNet_width.ConvBNReLU.basic_forward", "SearchCifarResNet_width.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ConvBNReLU.search_forward": [[99, 130], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchCifarResNet_width.ConvBNReLU.get_flops", "SearchCifarResNet_width.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchCifarResNet_width.ConvBNReLU.avg", "SearchCifarResNet_width.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "\"invalid length : {:}\"", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "# coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "# out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ConvBNReLU.basic_forward": [[131, 149], ["SearchCifarResNet_width.ConvBNReLU.conv", "SearchCifarResNet_width.ConvBNReLU.avg", "SearchCifarResNet_width.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet_width.ConvBNReLU.size", "SearchCifarResNet_width.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "\n", "            ", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.__init__": [[155, 200], ["torch.Module.__init__", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "\n", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.get_range": [[201, 203], ["SearchCifarResNet_width.ResNetBasicblock.conv_a.get_range", "SearchCifarResNet_width.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.get_flops": [[204, 222], ["SearchCifarResNet_width.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet_width.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchCifarResNet_width.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "        ", "assert", "len", "(", "channels", ")", "==", "3", ",", "\"invalid channels : {:}\"", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "flop_C", "=", "0", "\n", "", "if", "(", "\n", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", "\n", ")", ":", "# this short-cut will be added during the infer-train", "\n", "            ", "flop_C", "=", "(", "\n", "channels", "[", "0", "]", "\n", "*", "channels", "[", "-", "1", "]", "\n", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "\n", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", ")", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.forward": [[223, 230], ["SearchCifarResNet_width.ResNetBasicblock.basic_forward", "SearchCifarResNet_width.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.search_forward": [[231, 254], ["SearchCifarResNet_width.ResNetBasicblock.conv_a", "SearchCifarResNet_width.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet_width.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", "\n", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "\n", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "(", "\n", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "\n", "expected_inC_b", ",", "\n", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.basic_forward": [[256, 265], ["SearchCifarResNet_width.ResNetBasicblock.conv_a", "SearchCifarResNet_width.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_width.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.__init__": [[271, 327], ["torch.Module.__init__", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.get_range": [[328, 333], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet_width.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "\n", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "\n", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.get_flops": [[335, 354], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchCifarResNet_width.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "        ", "assert", "len", "(", "channels", ")", "==", "4", ",", "\"invalid channels : {:}\"", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "flop_D", "=", "0", "\n", "", "if", "(", "\n", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", "\n", ")", ":", "# this short-cut will be added during the infer-train", "\n", "            ", "flop_D", "=", "(", "\n", "channels", "[", "0", "]", "\n", "*", "channels", "[", "-", "1", "]", "\n", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "\n", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", ")", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.forward": [[355, 362], ["SearchCifarResNet_width.ResNetBottleneck.basic_forward", "SearchCifarResNet_width.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.basic_forward": [[363, 373], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_width.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.search_forward": [[374, 405], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet_width.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", "\n", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "\n", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "\n", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", "\n", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "(", "\n", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "\n", "expected_inC_1x4", ",", "\n", "sum", "(", "\n", "[", "\n", "expected_flop_1x1", ",", "\n", "expected_flop_3x3", ",", "\n", "expected_flop_1x4", ",", "\n", "expected_flop_c", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.__init__": [[411, 483], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchCifarResNet_width.SearchWidthCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet_width.SearchWidthCifarResNet.apply", "range", "len", "layer.get_range", "SearchCifarResNet_width.SearchWidthCifarResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet_width.ConvBNReLU", "block", "SearchCifarResNet_width.SearchWidthCifarResNet.channels.append", "SearchCifarResNet_width.SearchWidthCifarResNet.layers.append", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len", "SoftSelect.get_width_choices", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices"], ["    ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "SearchWidthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"ResNetBasicblock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "\"depth should be one of 20, 32, 44, 56, 110\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "\"ResNetBottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "\"depth should be one of 164\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "(", "\n", "\"SearchWidthCifarResNet : Depth : {:} , Layers for each block : {:}\"", ".", "format", "(", "\n", "depth", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "]", "\n", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iC", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "# assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "\"invalid depth check {:} vs {:}\"", ".", "format", "(", "\n", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", "\n", ")", "\n", "\n", "self", ".", "register_parameter", "(", "\n", "\"width_attentions\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_choices", "(", "None", ")", ")", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.arch_parameters": [[484, 486], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "width_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.base_parameters": [[487, 492], ["list", "list", "list", "SearchCifarResNet_width.SearchWidthCifarResNet.classifier.parameters", "SearchCifarResNet_width.SearchWidthCifarResNet.layers.parameters", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_flop": [[494, 537], ["enumerate", "enumerate", "config_dict.copy.copy.copy", "channels.append", "tuple", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "        ", "if", "config_dict", "is", "not", "None", ":", "\n", "            ", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# weights = [F.softmax(x, dim=0) for x in self.width_attentions]", "\n", "", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "            ", "if", "mode", "==", "\"genotype\"", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "\"max\"", ":", "\n", "                ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "\"fix\"", ":", "\n", "                ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "\"random\"", ":", "\n", "                ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "\"invalid extra_info : {:}\"", ".", "format", "(", "\n", "extra_info", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "prob", "[", "j", "]", "=", "1", "/", "(", "\n", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", "\n", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"invalid mode : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "            ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "            ", "config_dict", "[", "\"xchannels\"", "]", "=", "channels", "\n", "config_dict", "[", "\"super_type\"", "]", "=", "\"infer-width\"", "\n", "config_dict", "[", "\"estimated_FLOP\"", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_arch_info": [[538, 563], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "        ", "string", "=", "\"for width, there are {:} attention probabilities.\"", ".", "format", "(", "\n", "len", "(", "self", ".", "width_attentions", ")", "\n", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "                ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", "\n", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "\"{:03d}/{:03d}-th : {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "\" \"", ".", "join", "(", "prob", ")", "\n", ")", "\n", "logt", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "\"  ||  {:52s}\"", ".", "format", "(", "\" \"", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "\"  || dis={:.2f} || select={:}/{:}\"", ".", "format", "(", "\n", "disc", ",", "selc", ",", "len", "(", "prob", ")", "\n", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.set_tau": [[564, 570], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "        ", "assert", "(", "\n", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", "\n", ")", ",", "\"invalid epoch-ratio : {:}\"", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_message": [[571, 573], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.forward": [[574, 581], ["SearchCifarResNet_width.SearchWidthCifarResNet.basic_forward", "SearchCifarResNet_width.SearchWidthCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.search_forward": [[582, 609], ["torch.functional.softmax", "torch.functional.softmax", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sum"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.linear_forward"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "flop_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "selected_widths", ",", "selected_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "selected_w_index", "=", "selected_widths", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "selected_w_probs", "=", "selected_probs", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "layer_prob", "=", "flop_probs", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "\n", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", "\n", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "flops", ".", "append", "(", "expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.basic_forward": [[610, 620], ["enumerate", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet_width.SearchWidthCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet_width.conv_forward": [[13, 22], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "    ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.ConvBNReLU.__init__": [[27, 63], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchSimResNet_width.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchSimResNet_width.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices"], ["def", "__init__", "(", "\n", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "\"choices_tensor\"", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "# if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "# else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "            ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.ConvBNReLU.get_flops": [[64, 87], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "        ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "\n", "            ", "assert", "(", "\n", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", "\n", ")", ",", "\"{:} vs {:}  |  {:} vs {:}\"", ".", "format", "(", "\n", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", "\n", ")", "\n", "", "assert", "(", "\n", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", "\n", ")", ",", "\"invalid in-shape : {:}\"", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "(", "\n", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", "\n", ")", ",", "\"invalid out-shape : {:}\"", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "# conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "\n", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", "\n", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "all_positions", "/", "divide", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.ConvBNReLU.get_range": [[88, 90], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.ConvBNReLU.forward": [[91, 98], ["SearchSimResNet_width.ConvBNReLU.basic_forward", "SearchSimResNet_width.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.ConvBNReLU.search_forward": [[99, 130], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchSimResNet_width.ConvBNReLU.get_flops", "SearchSimResNet_width.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchSimResNet_width.ConvBNReLU.avg", "SearchSimResNet_width.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "\"invalid length : {:}\"", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "# coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "# out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.ConvBNReLU.basic_forward": [[131, 149], ["SearchSimResNet_width.ConvBNReLU.conv", "SearchSimResNet_width.ConvBNReLU.avg", "SearchSimResNet_width.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchSimResNet_width.ConvBNReLU.size", "SearchSimResNet_width.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "\n", "            ", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SimBlock.__init__": [[155, 197], ["torch.Module.__init__", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SimBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SimBlock.get_range": [[198, 200], ["SearchSimResNet_width.SimBlock.conv.get_range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SimBlock.get_flops": [[201, 218], ["SearchSimResNet_width.SimBlock.conv.get_flops", "hasattr", "len", "SearchSimResNet_width.SimBlock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "        ", "assert", "len", "(", "channels", ")", "==", "2", ",", "\"invalid channels : {:}\"", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "flop_C", "=", "0", "\n", "", "if", "(", "\n", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", "\n", ")", ":", "# this short-cut will be added during the infer-train", "\n", "            ", "flop_C", "=", "(", "\n", "channels", "[", "0", "]", "\n", "*", "channels", "[", "-", "1", "]", "\n", "*", "self", ".", "conv", ".", "OutShape", "[", "0", "]", "\n", "*", "self", ".", "conv", ".", "OutShape", "[", "1", "]", "\n", ")", "\n", "", "return", "flop_A", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SimBlock.forward": [[219, 226], ["SearchSimResNet_width.SimBlock.basic_forward", "SearchSimResNet_width.SimBlock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SimBlock.search_forward": [[227, 251], ["SearchSimResNet_width.SimBlock.conv", "SharedUtils.additive_func", "isinstance", "type", "indexes.size", "probs.size", "probability.size", "SearchSimResNet_width.SimBlock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "(", "\n", "indexes", ".", "size", "(", "0", ")", "==", "1", "and", "probs", ".", "size", "(", "0", ")", "==", "1", "and", "probability", ".", "size", "(", "0", ")", "==", "1", "\n", ")", ",", "\"invalid size : {:}, {:}, {:}\"", ".", "format", "(", "\n", "indexes", ".", "size", "(", ")", ",", "probs", ".", "size", "(", ")", ",", "probability", ".", "size", "(", ")", "\n", ")", "\n", "out", ",", "expected_next_inC", ",", "expected_flop", "=", "self", ".", "conv", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", "\n", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "-", "1", "]", ",", "indexes", "[", "-", "1", "]", ",", "probs", "[", "-", "1", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out", ")", "\n", "return", "(", "\n", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "\n", "expected_next_inC", ",", "\n", "sum", "(", "[", "expected_flop", ",", "expected_flop_c", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SimBlock.basic_forward": [[253, 261], ["SearchSimResNet_width.SimBlock.conv", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchSimResNet_width.SimBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.__init__": [[264, 330], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchSimResNet_width.SearchWidthSimResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchSimResNet_width.SearchWidthSimResNet.apply", "range", "len", "layer.get_range", "SearchSimResNet_width.SearchWidthSimResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.SimBlock", "SearchSimResNet_width.SearchWidthSimResNet.channels.append", "SearchSimResNet_width.SearchWidthSimResNet.layers.append", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len", "SoftSelect.get_width_choices", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "SearchWidthSimResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "\n", "depth", "-", "2", "\n", ")", "%", "3", "==", "0", ",", "\"depth should be one of 5, 8, 11, 14, ... instead of {:}\"", ".", "format", "(", "\n", "depth", "\n", ")", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "3", "\n", "self", ".", "message", "=", "(", "\n", "\"SearchWidthSimResNet : Depth : {:} , Layers for each block : {:}\"", ".", "format", "(", "\n", "depth", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "]", "\n", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "SimBlock", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iC", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "# assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "\"invalid depth check {:} vs {:}\"", ".", "format", "(", "\n", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", "\n", ")", "\n", "\n", "self", ".", "register_parameter", "(", "\n", "\"width_attentions\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_choices", "(", "None", ")", ")", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.arch_parameters": [[331, 333], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "width_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.base_parameters": [[334, 339], ["list", "list", "list", "SearchSimResNet_width.SearchWidthSimResNet.classifier.parameters", "SearchSimResNet_width.SearchWidthSimResNet.layers.parameters", "SearchSimResNet_width.SearchWidthSimResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_flop": [[341, 384], ["enumerate", "enumerate", "config_dict.copy.copy.copy", "channels.append", "tuple", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "        ", "if", "config_dict", "is", "not", "None", ":", "\n", "            ", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# weights = [F.softmax(x, dim=0) for x in self.width_attentions]", "\n", "", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "            ", "if", "mode", "==", "\"genotype\"", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "\"max\"", ":", "\n", "                ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "\"fix\"", ":", "\n", "                ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "\"random\"", ":", "\n", "                ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "\"invalid extra_info : {:}\"", ".", "format", "(", "\n", "extra_info", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "prob", "[", "j", "]", "=", "1", "/", "(", "\n", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", "\n", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"invalid mode : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "            ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "            ", "config_dict", "[", "\"xchannels\"", "]", "=", "channels", "\n", "config_dict", "[", "\"super_type\"", "]", "=", "\"infer-width\"", "\n", "config_dict", "[", "\"estimated_FLOP\"", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_arch_info": [[385, 410], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "        ", "string", "=", "\"for width, there are {:} attention probabilities.\"", ".", "format", "(", "\n", "len", "(", "self", ".", "width_attentions", ")", "\n", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "                ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", "\n", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "\"{:03d}/{:03d}-th : {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "\" \"", ".", "join", "(", "prob", ")", "\n", ")", "\n", "logt", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "\"  ||  {:52s}\"", ".", "format", "(", "\" \"", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "\"  || dis={:.2f} || select={:}/{:}\"", ".", "format", "(", "\n", "disc", ",", "selc", ",", "len", "(", "prob", ")", "\n", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.set_tau": [[411, 417], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "        ", "assert", "(", "\n", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", "\n", ")", ",", "\"invalid epoch-ratio : {:}\"", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_message": [[418, 420], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.forward": [[421, 428], ["SearchSimResNet_width.SearchWidthSimResNet.basic_forward", "SearchSimResNet_width.SearchWidthSimResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.search_forward": [[429, 456], ["torch.functional.softmax", "torch.functional.softmax", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchSimResNet_width.SearchWidthSimResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sum"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.linear_forward"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "flop_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "selected_widths", ",", "selected_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "selected_w_index", "=", "selected_widths", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "selected_w_probs", "=", "selected_probs", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "layer_prob", "=", "flop_probs", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "\n", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", "\n", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "flops", ".", "append", "(", "expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.basic_forward": [[457, 467], ["enumerate", "SearchSimResNet_width.SearchWidthSimResNet.avgpool", "features.view.view.view", "SearchSimResNet_width.SearchWidthSimResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchSimResNet_width.conv_forward": [[13, 22], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "    ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ConvBNReLU.__init__": [[37, 88], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchImagenetResNet.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchImagenetResNet.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", ",", "\n", "has_avg", ",", "\n", "has_bn", ",", "\n", "has_relu", ",", "\n", "last_max_pool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "\"choices_tensor\"", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "# if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "# else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "            ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n", "", "if", "last_max_pool", ":", "\n", "            ", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "maxpool", "=", "None", "\n", "", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ConvBNReLU.get_flops": [[89, 112], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "        ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "\n", "            ", "assert", "(", "\n", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", "\n", ")", ",", "\"{:} vs {:}  |  {:} vs {:}\"", ".", "format", "(", "\n", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", "\n", ")", "\n", "", "assert", "(", "\n", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", "\n", ")", ",", "\"invalid in-shape : {:}\"", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "(", "\n", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", "\n", ")", ",", "\"invalid out-shape : {:}\"", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "# conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "\n", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", "\n", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "all_positions", "/", "divide", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ConvBNReLU.get_range": [[113, 115], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ConvBNReLU.forward": [[116, 123], ["SearchImagenetResNet.ConvBNReLU.basic_forward", "SearchImagenetResNet.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ConvBNReLU.search_forward": [[124, 155], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchImagenetResNet.ConvBNReLU.get_flops", "SearchImagenetResNet.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchImagenetResNet.ConvBNReLU.avg", "SearchImagenetResNet.ConvBNReLU.relu", "SearchImagenetResNet.ConvBNReLU.maxpool", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "\"invalid length : {:}\"", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "# coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "# out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "if", "self", ".", "maxpool", ":", "\n", "            ", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ConvBNReLU.basic_forward": [[156, 176], ["SearchImagenetResNet.ConvBNReLU.conv", "SearchImagenetResNet.ConvBNReLU.avg", "SearchImagenetResNet.ConvBNReLU.relu", "SearchImagenetResNet.ConvBNReLU.maxpool", "inputs.size", "inputs.size", "SearchImagenetResNet.ConvBNReLU.size", "SearchImagenetResNet.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "\n", "            ", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "if", "self", ".", "maxpool", ":", "\n", "            ", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBasicblock.__init__": [[182, 227], ["torch.Module.__init__", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "\n", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBasicblock.get_range": [[228, 230], ["SearchImagenetResNet.ResNetBasicblock.conv_a.get_range", "SearchImagenetResNet.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBasicblock.get_flops": [[231, 249], ["SearchImagenetResNet.ResNetBasicblock.conv_a.get_flops", "SearchImagenetResNet.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchImagenetResNet.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "        ", "assert", "len", "(", "channels", ")", "==", "3", ",", "\"invalid channels : {:}\"", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "flop_C", "=", "0", "\n", "", "if", "(", "\n", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", "\n", ")", ":", "# this short-cut will be added during the infer-train", "\n", "            ", "flop_C", "=", "(", "\n", "channels", "[", "0", "]", "\n", "*", "channels", "[", "-", "1", "]", "\n", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "\n", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", ")", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBasicblock.forward": [[250, 257], ["SearchImagenetResNet.ResNetBasicblock.basic_forward", "SearchImagenetResNet.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBasicblock.search_forward": [[258, 282], ["SearchImagenetResNet.ResNetBasicblock.conv_a", "SearchImagenetResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchImagenetResNet.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "# import pdb; pdb.set_trace()", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", "\n", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "\n", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "(", "\n", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "\n", "expected_inC_b", ",", "\n", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBasicblock.basic_forward": [[284, 293], ["SearchImagenetResNet.ResNetBasicblock.conv_a", "SearchImagenetResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchImagenetResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBottleneck.__init__": [[299, 355], ["torch.Module.__init__", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBottleneck.get_range": [[356, 361], ["SearchImagenetResNet.ResNetBottleneck.conv_1x4.get_range", "SearchImagenetResNet.ResNetBottleneck.conv_1x1.get_range", "SearchImagenetResNet.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "\n", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "\n", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBottleneck.get_flops": [[363, 382], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1.get_flops", "SearchImagenetResNet.ResNetBottleneck.conv_3x3.get_flops", "SearchImagenetResNet.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchImagenetResNet.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "        ", "assert", "len", "(", "channels", ")", "==", "4", ",", "\"invalid channels : {:}\"", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "flop_D", "=", "0", "\n", "", "if", "(", "\n", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", "\n", ")", ":", "# this short-cut will be added during the infer-train", "\n", "            ", "flop_D", "=", "(", "\n", "channels", "[", "0", "]", "\n", "*", "channels", "[", "-", "1", "]", "\n", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "\n", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", ")", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBottleneck.forward": [[383, 390], ["SearchImagenetResNet.ResNetBottleneck.basic_forward", "SearchImagenetResNet.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBottleneck.basic_forward": [[391, 401], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1", "SearchImagenetResNet.ResNetBottleneck.conv_3x3", "SearchImagenetResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchImagenetResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.ResNetBottleneck.search_forward": [[402, 433], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1", "SearchImagenetResNet.ResNetBottleneck.conv_3x3", "SearchImagenetResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchImagenetResNet.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", "\n", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "\n", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "\n", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", "\n", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "(", "\n", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "\n", "expected_inC_1x4", ",", "\n", "sum", "(", "\n", "[", "\n", "expected_flop_1x1", ",", "\n", "expected_flop_3x3", ",", "\n", "expected_flop_1x4", ",", "\n", "expected_flop_c", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.__init__": [[439, 566], ["torch.Module.__init__", "SearchImagenetResNet.get_depth_choices", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.depth_info.items", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.register_parameter", "SearchImagenetResNet.SearchShapeImagenetResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "SearchImagenetResNet.SearchShapeImagenetResNet.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "SearchImagenetResNet.SearchShapeImagenetResNet.depth_info_list.append", "range", "len", "layer.get_range", "SearchImagenetResNet.SearchShapeImagenetResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ValueError", "sum", "len", "block", "SearchImagenetResNet.SearchShapeImagenetResNet.channels.append", "SearchImagenetResNet.SearchShapeImagenetResNet.layers.append", "bisect.bisect_right", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "len", "block_choices.append", "len", "len", "SoftSelect.get_width_choices", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices"], ["    ", "def", "__init__", "(", "self", ",", "block_name", ",", "layers", ",", "deep_stem", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "SearchShapeImagenetResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"BasicBlock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "", "elif", "block_name", "==", "\"Bottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "(", "\n", "\"SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}\"", ".", "format", "(", "\n", "sum", "(", "layers", ")", "*", "block", ".", "num_conv", ",", "layers", "\n", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "not", "deep_stem", ":", "\n", "            ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "3", ",", "\n", "64", ",", "\n", "7", ",", "\n", "2", ",", "\n", "3", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "last_max_pool", "=", "True", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "self", ".", "channels", "=", "[", "64", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", ",", "\n", "ConvBNReLU", "(", "\n", "32", ",", "\n", "64", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "last_max_pool", "=", "True", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "channels", "=", "[", "32", ",", "64", "]", "\n", "\n", "", "meta_depth_info", "=", "get_depth_choices", "(", "layers", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", ",", "layer_blocks", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "cur_block_choices", "=", "meta_depth_info", "[", "stage", "]", "\n", "assert", "(", "\n", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", "\n", ")", ",", "\"stage={:}, {:} vs {:}\"", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "64", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iC", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "\n", "                    ", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "                    ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "\n", "\"choices\"", ":", "block_choices", ",", "\n", "\"stage\"", ":", "stage", ",", "\n", "\"xstart\"", ":", "xstart", ",", "\n", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "\"xstart\"", "]", ",", "info", "[", "\"stage\"", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "                ", "idx", "=", "bisect_right", "(", "info", "[", "\"choices\"", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "# assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "\n", "", "self", ".", "register_parameter", "(", "\n", "\"width_attentions\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_width_choices", "(", "None", ")", ")", ")", ",", "\n", ")", "\n", "self", ".", "register_parameter", "(", "\n", "\"depth_attentions\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "layers", ")", ",", "meta_depth_info", "[", "\"num\"", "]", ")", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.arch_parameters": [[567, 574], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ",", "LR", "=", "None", ")", ":", "\n", "        ", "if", "LR", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "width_attentions", ",", "self", ".", "depth_attentions", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "\n", "{", "\"params\"", ":", "self", ".", "width_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "depth_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.base_parameters": [[576, 581], ["list", "list", "list", "SearchImagenetResNet.SearchShapeImagenetResNet.classifier.parameters", "SearchImagenetResNet.SearchShapeImagenetResNet.layers.parameters", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool.parameters"], "methods", ["None"], ["", "", "def", "base_parameters", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_flop": [[583, 629], ["enumerate", "zip", "enumerate", "config_dict.copy.copy.copy", "channels.append", "ValueError", "selected_layers.append", "tuple", "ValueError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "layer.get_flops", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "        ", "if", "config_dict", "is", "not", "None", ":", "\n", "            ", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select channels", "\n", "", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "            ", "if", "mode", "==", "\"genotype\"", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"invalid mode : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "# select depth", "\n", "", "if", "mode", "==", "\"genotype\"", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid mode : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "            ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "\"choices\"", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "\"xstart\"", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "                ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "                    ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "", "else", ":", "\n", "                    ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "                ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "            ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "            ", "config_dict", "[", "\"xchannels\"", "]", "=", "channels", "\n", "config_dict", "[", "\"xblocks\"", "]", "=", "selected_layers", "\n", "config_dict", "[", "\"super_type\"", "]", "=", "\"infer-shape\"", "\n", "config_dict", "[", "\"estimated_FLOP\"", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_arch_info": [[630, 677], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "        ", "string", "=", "(", "\n", "\"for depth and width, there are {:} + {:} attention probabilities.\"", ".", "format", "(", "\n", "len", "(", "self", ".", "depth_attentions", ")", ",", "len", "(", "self", ".", "width_attentions", ")", "\n", ")", "\n", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "                ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", "\n", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "\"{:03d}/{:03d}-th : {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "\" \"", ".", "join", "(", "prob", ")", "\n", ")", "\n", "logt", "=", "[", "\"{:.4f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "\"  ||  {:17s}\"", ".", "format", "(", "\" \"", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "\"  || discrepancy={:.2f} || select={:}/{:}\"", ".", "format", "(", "\n", "disc", ",", "selc", ",", "len", "(", "prob", ")", "\n", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "xstring", ")", "\n", "", "string", "+=", "\"\\n-----------------------------------------------\"", "\n", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "                ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", "\n", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "\"{:03d}/{:03d}-th : {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "\" \"", ".", "join", "(", "prob", ")", "\n", ")", "\n", "logt", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "\"  ||  {:52s}\"", ".", "format", "(", "\" \"", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "\"  || dis={:.2f} || select={:}/{:}\"", ".", "format", "(", "\n", "disc", ",", "selc", ",", "len", "(", "prob", ")", "\n", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.set_tau": [[678, 684], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "        ", "assert", "(", "\n", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", "\n", ")", ",", "\"invalid epoch-ratio : {:}\"", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_message": [[685, 687], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.forward": [[688, 695], ["SearchImagenetResNet.SearchShapeImagenetResNet.basic_forward", "SearchImagenetResNet.SearchShapeImagenetResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.search_forward": [[696, 756], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "max", "enumerate", "sum", "SoftSelect.ChannelWiseInter", "possible_tensors.append", "sum", "feature_maps[].size", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "flop_width_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "\n", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", "\n", ")", "\n", "selected_widths", ",", "selected_width_probs", "=", "select2withP", "(", "\n", "self", ".", "width_attentions", ",", "self", ".", "tau", "\n", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "selected_w_index", "=", "selected_widths", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "selected_w_probs", "=", "selected_width_probs", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "layer_prob", "=", "flop_width_probs", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "\n", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", "\n", ")", "\n", "feature_maps", ".", "append", "(", "x", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "                ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "\"choices\"", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "\"stage\"", "]", "\n", "# print ('iL={:}, choices={:}, stage={:}, probs={:}'.format(i, choices, xstagei, selected_depth_probs[xstagei].cpu().tolist()))", "\n", "# for A, W in zip(choices, selected_depth_probs[xstagei]):", "\n", "#  print('Size = {:}, W = {:}'.format(feature_maps[A].size(), W))", "\n", "possible_tensors", "=", "[", "]", "\n", "max_C", "=", "max", "(", "feature_maps", "[", "A", "]", ".", "size", "(", "1", ")", "for", "A", "in", "choices", ")", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "                    ", "xtensor", "=", "ChannelWiseInter", "(", "feature_maps", "[", "A", "]", ",", "max_C", ")", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "\n", "xtensor", "*", "W", "\n", "for", "xtensor", ",", "W", "in", "zip", "(", "\n", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", "\n", ")", "\n", ")", "\n", "x", "=", "weighted_sum", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "                ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "expected_flop", "\n", "", "else", ":", "\n", "                ", "x_expected_flop", "=", "expected_flop", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.basic_forward": [[757, 767], ["enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool", "features.view.view.view", "SearchImagenetResNet.SearchShapeImagenetResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.get_depth_choices": [[12, 21], ["min", "enumerate", "range", "choices.append", "int", "float"], "function", ["None"], ["def", "get_depth_choices", "(", "layers", ")", ":", "\n", "    ", "min_depth", "=", "min", "(", "layers", ")", "\n", "info", "=", "{", "\"num\"", ":", "min_depth", "}", "\n", "for", "i", ",", "depth", "in", "enumerate", "(", "layers", ")", ":", "\n", "        ", "choices", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "min_depth", "+", "1", ")", ":", "\n", "            ", "choices", ".", "append", "(", "int", "(", "float", "(", "depth", ")", "*", "j", "/", "min_depth", ")", ")", "\n", "", "info", "[", "i", "]", "=", "choices", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchImagenetResNet.conv_forward": [[23, 32], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["", "def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "    ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ConvBNReLU.__init__": [[46, 82], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchCifarResNet.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices"], ["def", "__init__", "(", "\n", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "\"choices_tensor\"", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "# if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "# else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "            ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ConvBNReLU.get_flops": [[83, 106], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "        ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "\n", "            ", "assert", "(", "\n", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", "\n", ")", ",", "\"{:} vs {:}  |  {:} vs {:}\"", ".", "format", "(", "\n", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", "\n", ")", "\n", "", "assert", "(", "\n", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", "\n", ")", ",", "\"invalid in-shape : {:}\"", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "(", "\n", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", "\n", ")", ",", "\"invalid out-shape : {:}\"", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "# conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "\n", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", "\n", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "all_positions", "/", "divide", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ConvBNReLU.get_range": [[107, 109], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ConvBNReLU.forward": [[110, 117], ["SearchCifarResNet.ConvBNReLU.basic_forward", "SearchCifarResNet.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ConvBNReLU.search_forward": [[118, 149], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchCifarResNet.ConvBNReLU.get_flops", "SearchCifarResNet.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchCifarResNet.ConvBNReLU.avg", "SearchCifarResNet.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "\"invalid length : {:}\"", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "# coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "# out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ConvBNReLU.basic_forward": [[150, 168], ["SearchCifarResNet.ConvBNReLU.conv", "SearchCifarResNet.ConvBNReLU.avg", "SearchCifarResNet.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet.ConvBNReLU.size", "SearchCifarResNet.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "\n", "            ", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBasicblock.__init__": [[174, 219], ["torch.Module.__init__", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "\n", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBasicblock.get_range": [[220, 222], ["SearchCifarResNet.ResNetBasicblock.conv_a.get_range", "SearchCifarResNet.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBasicblock.get_flops": [[223, 241], ["SearchCifarResNet.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchCifarResNet.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "        ", "assert", "len", "(", "channels", ")", "==", "3", ",", "\"invalid channels : {:}\"", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "flop_C", "=", "0", "\n", "", "if", "(", "\n", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", "\n", ")", ":", "# this short-cut will be added during the infer-train", "\n", "            ", "flop_C", "=", "(", "\n", "channels", "[", "0", "]", "\n", "*", "channels", "[", "-", "1", "]", "\n", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "\n", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", ")", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBasicblock.forward": [[242, 249], ["SearchCifarResNet.ResNetBasicblock.basic_forward", "SearchCifarResNet.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBasicblock.search_forward": [[250, 273], ["SearchCifarResNet.ResNetBasicblock.conv_a", "SearchCifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", "\n", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "\n", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "(", "\n", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "\n", "expected_inC_b", ",", "\n", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBasicblock.basic_forward": [[275, 284], ["SearchCifarResNet.ResNetBasicblock.conv_a", "SearchCifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.__init__": [[290, 346], ["torch.Module.__init__", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range": [[347, 352], ["SearchCifarResNet.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "\n", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "\n", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops": [[354, 373], ["SearchCifarResNet.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchCifarResNet.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "        ", "assert", "len", "(", "channels", ")", "==", "4", ",", "\"invalid channels : {:}\"", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "\"get_flops\"", ")", ":", "\n", "            ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "flop_D", "=", "0", "\n", "", "if", "(", "\n", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", "\n", ")", ":", "# this short-cut will be added during the infer-train", "\n", "            ", "flop_D", "=", "(", "\n", "channels", "[", "0", "]", "\n", "*", "channels", "[", "-", "1", "]", "\n", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "\n", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", ")", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.forward": [[374, 381], ["SearchCifarResNet.ResNetBottleneck.basic_forward", "SearchCifarResNet.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.basic_forward": [[382, 392], ["SearchCifarResNet.ResNetBottleneck.conv_1x1", "SearchCifarResNet.ResNetBottleneck.conv_3x3", "SearchCifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.search_forward": [[393, 424], ["SearchCifarResNet.ResNetBottleneck.conv_1x1", "SearchCifarResNet.ResNetBottleneck.conv_3x3", "SearchCifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", "\n", ")", ",", "\"invalid type input : {:}\"", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", "\n", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "\n", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", "\n", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "\n", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", "\n", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "\n", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "(", "\n", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "\n", "expected_inC_1x4", ",", "\n", "sum", "(", "\n", "[", "\n", "expected_flop_1x1", ",", "\n", "expected_flop_3x3", ",", "\n", "expected_flop_1x4", ",", "\n", "expected_flop_c", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.__init__": [[430, 536], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "collections.OrderedDict", "collections.OrderedDict", "range", "SearchCifarResNet.SearchShapeCifarResNet.depth_info.items", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchCifarResNet.SearchShapeCifarResNet.register_parameter", "SearchCifarResNet.SearchShapeCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet.SearchShapeCifarResNet.apply", "SearchCifarResNet.get_depth_choices", "range", "SearchCifarResNet.SearchShapeCifarResNet.depth_info_list.append", "range", "len", "layer.get_range", "SearchCifarResNet.SearchShapeCifarResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet.ConvBNReLU", "len", "block", "SearchCifarResNet.SearchShapeCifarResNet.channels.append", "SearchCifarResNet.SearchShapeCifarResNet.layers.append", "bisect.bisect_right", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "block_choices.append", "len", "len", "SoftSelect.get_width_choices", "SearchCifarResNet.get_depth_choices", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_depth_choices"], ["    ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "SearchShapeCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"ResNetBasicblock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "\"depth should be one of 20, 32, 44, 56, 110\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "\"ResNetBottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "\"depth should be one of 164\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "(", "\n", "\"SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}\"", ".", "format", "(", "\n", "depth", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "]", "\n", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "            ", "cur_block_choices", "=", "get_depth_choices", "(", "layer_blocks", ",", "False", ")", "\n", "assert", "(", "\n", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", "\n", ")", ",", "\"stage={:}, {:} vs {:}\"", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "self", ".", "message", "+=", "(", "\n", "\"\\nstage={:} ::: depth-block-choices={:} for {:} blocks.\"", ".", "format", "(", "\n", "stage", ",", "cur_block_choices", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iC", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "\n", "                    ", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "                    ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "\n", "\"choices\"", ":", "block_choices", ",", "\n", "\"stage\"", ":", "stage", ",", "\n", "\"xstart\"", ":", "xstart", ",", "\n", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "\"xstart\"", "]", ",", "info", "[", "\"stage\"", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "                ", "idx", "=", "bisect_right", "(", "info", "[", "\"choices\"", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "\"basic\"", "\n", "# assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "\"invalid depth check {:} vs {:}\"", ".", "format", "(", "\n", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", "\n", ")", "\n", "\n", "self", ".", "register_parameter", "(", "\n", "\"width_attentions\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_width_choices", "(", "None", ")", ")", ")", ",", "\n", ")", "\n", "self", ".", "register_parameter", "(", "\n", "\"depth_attentions\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", ",", "get_depth_choices", "(", "layer_blocks", ",", "True", ")", ")", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.arch_parameters": [[537, 544], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ",", "LR", "=", "None", ")", ":", "\n", "        ", "if", "LR", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "width_attentions", ",", "self", ".", "depth_attentions", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "\n", "{", "\"params\"", ":", "self", ".", "width_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "depth_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.base_parameters": [[546, 551], ["list", "list", "list", "SearchCifarResNet.SearchShapeCifarResNet.classifier.parameters", "SearchCifarResNet.SearchShapeCifarResNet.layers.parameters", "SearchCifarResNet.SearchShapeCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "", "def", "base_parameters", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_flop": [[553, 621], ["enumerate", "zip", "enumerate", "config_dict.copy.copy.copy", "channels.append", "selected_layers.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "ValueError", "layer.get_flops", "int", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.functional.softmax.size", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "torch.functional.softmax.size", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "        ", "if", "config_dict", "is", "not", "None", ":", "\n", "            ", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select channels", "\n", "", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "            ", "if", "mode", "==", "\"genotype\"", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "\"max\"", ":", "\n", "                ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "\"fix\"", ":", "\n", "                ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "\"random\"", ":", "\n", "                ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "\"invalid extra_info : {:}\"", ".", "format", "(", "\n", "extra_info", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "prob", "[", "j", "]", "=", "1", "/", "(", "\n", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", "\n", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"invalid mode : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "# select depth", "\n", "", "if", "mode", "==", "\"genotype\"", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "elif", "mode", "==", "\"max\"", "or", "mode", "==", "\"fix\"", ":", "\n", "            ", "choices", "=", "[", "depth_probs", ".", "size", "(", "1", ")", "-", "1", "for", "_", "in", "range", "(", "depth_probs", ".", "size", "(", "0", ")", ")", "]", "\n", "", "elif", "mode", "==", "\"random\"", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "multinomial", "(", "depth_probs", ",", "1", ",", "False", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid mode : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "            ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "\"choices\"", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "\"xstart\"", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "                ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "                    ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "", "else", ":", "\n", "                    ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "                ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "            ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "            ", "config_dict", "[", "\"xchannels\"", "]", "=", "channels", "\n", "config_dict", "[", "\"xblocks\"", "]", "=", "selected_layers", "\n", "config_dict", "[", "\"super_type\"", "]", "=", "\"infer-shape\"", "\n", "config_dict", "[", "\"estimated_FLOP\"", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_arch_info": [[622, 669], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "        ", "string", "=", "(", "\n", "\"for depth and width, there are {:} + {:} attention probabilities.\"", ".", "format", "(", "\n", "len", "(", "self", ".", "depth_attentions", ")", ",", "len", "(", "self", ".", "width_attentions", ")", "\n", ")", "\n", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "                ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", "\n", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "\"{:03d}/{:03d}-th : {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "\" \"", ".", "join", "(", "prob", ")", "\n", ")", "\n", "logt", "=", "[", "\"{:.4f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "\"  ||  {:17s}\"", ".", "format", "(", "\" \"", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "\"  || discrepancy={:.2f} || select={:}/{:}\"", ".", "format", "(", "\n", "disc", ",", "selc", ",", "len", "(", "prob", ")", "\n", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "xstring", ")", "\n", "", "string", "+=", "\"\\n-----------------------------------------------\"", "\n", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "                ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", "\n", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "\"{:03d}/{:03d}-th : {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "\" \"", ".", "join", "(", "prob", ")", "\n", ")", "\n", "logt", "=", "[", "\"{:.3f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "\"  ||  {:52s}\"", ".", "format", "(", "\" \"", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "\"  || dis={:.2f} || select={:}/{:}\"", ".", "format", "(", "\n", "disc", ",", "selc", ",", "len", "(", "prob", ")", "\n", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "\"\\n{:}\"", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.set_tau": [[670, 676], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "        ", "assert", "(", "\n", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", "\n", ")", ",", "\"invalid epoch-ratio : {:}\"", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_message": [[677, 679], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.forward": [[680, 687], ["SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "SearchCifarResNet.SearchShapeCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "search_mode", "==", "\"basic\"", ":", "\n", "            ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "\"search\"", ":", "\n", "            ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid search_mode = {:}\"", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward": [[688, 750], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet.SearchShapeCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "max", "enumerate", "sum", "SoftSelect.ChannelWiseInter", "possible_tensors.append", "sum", "feature_maps[].size", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "flop_width_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "\n", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", "\n", ")", "\n", "selected_widths", ",", "selected_width_probs", "=", "select2withP", "(", "\n", "self", ".", "width_attentions", ",", "self", ".", "tau", "\n", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "selected_w_index", "=", "selected_widths", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "selected_w_probs", "=", "selected_width_probs", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "layer_prob", "=", "flop_width_probs", "[", "\n", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "\n", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "\n", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", "\n", ")", "\n", "feature_maps", ".", "append", "(", "x", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "                ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "\"choices\"", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "\"stage\"", "]", "\n", "# print ('iL={:}, choices={:}, stage={:}, probs={:}'.format(i, choices, xstagei, selected_depth_probs[xstagei].cpu().tolist()))", "\n", "# for A, W in zip(choices, selected_depth_probs[xstagei]):", "\n", "#  print('Size = {:}, W = {:}'.format(feature_maps[A].size(), W))", "\n", "possible_tensors", "=", "[", "]", "\n", "max_C", "=", "max", "(", "feature_maps", "[", "A", "]", ".", "size", "(", "1", ")", "for", "A", "in", "choices", ")", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "                    ", "xtensor", "=", "ChannelWiseInter", "(", "feature_maps", "[", "A", "]", ",", "max_C", ")", "\n", "# drop_ratio = 1-(tempi+1.0)/len(choices)", "\n", "# xtensor = drop_path(xtensor, drop_ratio)", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "\n", "xtensor", "*", "W", "\n", "for", "xtensor", ",", "W", "in", "zip", "(", "\n", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", "\n", ")", "\n", ")", "\n", "x", "=", "weighted_sum", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "                ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "expected_flop", "\n", "", "else", ":", "\n", "                ", "x_expected_flop", "=", "expected_flop", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward": [[751, 761], ["enumerate", "SearchCifarResNet.SearchShapeCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet.SearchShapeCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "InShape", "is", "None", ":", "\n", "            ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.get_depth_choices": [[15, 30], ["len", "list", "ValueError", "range", "list.append"], "function", ["None"], ["def", "get_depth_choices", "(", "nDepth", ",", "return_num", ")", ":", "\n", "    ", "if", "nDepth", "==", "2", ":", "\n", "        ", "choices", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "nDepth", "==", "3", ":", "\n", "        ", "choices", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "", "elif", "nDepth", ">", "3", ":", "\n", "        ", "choices", "=", "list", "(", "range", "(", "1", ",", "nDepth", "+", "1", ",", "2", ")", ")", "\n", "if", "choices", "[", "-", "1", "]", "<", "nDepth", ":", "\n", "            ", "choices", ".", "append", "(", "nDepth", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid nDepth : {:}\"", ".", "format", "(", "nDepth", ")", ")", "\n", "", "if", "return_num", ":", "\n", "        ", "return", "len", "(", "choices", ")", "\n", "", "else", ":", "\n", "        ", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SearchCifarResNet.conv_forward": [[32, 41], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["", "", "def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "    ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.select2withP": [[8, 36], ["torch.gather", "torch.gather", "torch.functional.softmax", "torch.functional.softmax", "torch.no_grad", "torch.no_grad", "nn.functional.softmax.cpu", "torch.multinomial().to", "torch.multinomial().to", "torch.functional.softmax", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.multinomial", "torch.multinomial", "logits.log_softmax", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like"], "function", ["None"], ["def", "select2withP", "(", "logits", ",", "tau", ",", "just_prob", "=", "False", ",", "num", "=", "2", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "if", "tau", "<=", "0", ":", "\n", "        ", "new_logits", "=", "logits", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "new_logits", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "while", "True", ":", "# a trick to avoid the gumbels bug", "\n", "            ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "logits", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "new_logits", "=", "(", "logits", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "new_logits", ",", "dim", "=", "1", ")", "\n", "if", "(", "\n", "(", "not", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "\n", "and", "(", "not", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "\n", "and", "(", "not", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", "\n", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "if", "just_prob", ":", "\n", "        ", "return", "probs", "\n", "\n", "# with torch.no_grad(): # add eps for unexpected torch error", "\n", "#  probs = nn.functional.softmax(new_logits, dim=1)", "\n", "#  selected_index = torch.multinomial(probs + eps, 2, False)", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "# add eps for unexpected torch error", "\n", "        ", "probs", "=", "probs", ".", "cpu", "(", ")", "\n", "selected_index", "=", "torch", ".", "multinomial", "(", "probs", "+", "eps", ",", "num", ",", "False", ")", ".", "to", "(", "logits", ".", "device", ")", "\n", "", "selected_logit", "=", "torch", ".", "gather", "(", "new_logits", ",", "1", ",", "selected_index", ")", "\n", "selcted_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "selected_logit", ",", "dim", "=", "1", ")", "\n", "return", "selected_index", ",", "selcted_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInter": [[38, 45], ["SoftSelect.ChannelWiseInterV1", "SoftSelect.ChannelWiseInterV2", "ValueError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInterV1", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInterV2"], ["", "def", "ChannelWiseInter", "(", "inputs", ",", "oC", ",", "mode", "=", "\"v2\"", ")", ":", "\n", "    ", "if", "mode", "==", "\"v1\"", ":", "\n", "        ", "return", "ChannelWiseInterV1", "(", "inputs", ",", "oC", ")", "\n", "", "elif", "mode", "==", "\"v2\"", ":", "\n", "        ", "return", "ChannelWiseInterV2", "(", "inputs", ",", "oC", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid mode : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInterV1": [[47, 65], ["inputs.size", "torch.zeros", "torch.zeros", "range", "inputs.dim", "inputs.size", "int", "int", "inputs[].mean", "math.floor", "math.ceil", "SoftSelect.ChannelWiseInterV1.start_index"], "function", ["None"], ["", "", "def", "ChannelWiseInterV1", "(", "inputs", ",", "oC", ")", ":", "\n", "    ", "assert", "inputs", ".", "dim", "(", ")", "==", "4", ",", "\"invalid dimension : {:}\"", ".", "format", "(", "inputs", ".", "size", "(", ")", ")", "\n", "\n", "def", "start_index", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "        ", "return", "int", "(", "math", ".", "floor", "(", "float", "(", "a", "*", "c", ")", "/", "b", ")", ")", "\n", "\n", "", "def", "end_index", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "        ", "return", "int", "(", "math", ".", "ceil", "(", "float", "(", "(", "a", "+", "1", ")", "*", "c", ")", "/", "b", ")", ")", "\n", "\n", "", "batch", ",", "iC", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "outputs", "=", "torch", ".", "zeros", "(", "(", "batch", ",", "oC", ",", "H", ",", "W", ")", ",", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "if", "iC", "==", "oC", ":", "\n", "        ", "return", "inputs", "\n", "", "for", "ot", "in", "range", "(", "oC", ")", ":", "\n", "        ", "istartT", ",", "iendT", "=", "start_index", "(", "ot", ",", "oC", ",", "iC", ")", ",", "end_index", "(", "ot", ",", "oC", ",", "iC", ")", "\n", "values", "=", "inputs", "[", ":", ",", "istartT", ":", "iendT", "]", ".", "mean", "(", "dim", "=", "1", ")", "\n", "outputs", "[", ":", ",", "ot", ",", ":", ",", ":", "]", "=", "values", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.ChannelWiseInterV2": [[67, 74], ["inputs.size", "inputs.dim", "inputs.size", "torch.functional.adaptive_avg_pool3d"], "function", ["None"], ["", "def", "ChannelWiseInterV2", "(", "inputs", ",", "oC", ")", ":", "\n", "    ", "assert", "inputs", ".", "dim", "(", ")", "==", "4", ",", "\"invalid dimension : {:}\"", ".", "format", "(", "inputs", ".", "size", "(", ")", ")", "\n", "batch", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "if", "C", "==", "oC", ":", "\n", "        ", "return", "inputs", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "adaptive_avg_pool3d", "(", "inputs", ",", "(", "oC", ",", "H", ",", "W", ")", ")", "\n", "# inputs_5D = inputs.view(batch, 1, C, H, W)", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.linear_forward": [[81, 91], ["inputs.size", "torch.functional.linear"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.linear"], ["", "", "def", "linear_forward", "(", "inputs", ",", "linear", ")", ":", "\n", "    ", "if", "linear", "is", "None", ":", "\n", "        ", "return", "inputs", "\n", "", "iC", "=", "inputs", ".", "size", "(", "1", ")", "\n", "weight", "=", "linear", ".", "weight", "[", ":", ",", ":", "iC", "]", "\n", "if", "linear", ".", "bias", "is", "None", ":", "\n", "        ", "bias", "=", "None", "\n", "", "else", ":", "\n", "        ", "bias", "=", "linear", ".", "bias", "\n", "", "return", "nn", ".", "functional", ".", "linear", "(", "inputs", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_width_choices": [[93, 103], ["len", "sorted", "tuple", "int", "list", "set"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "get_width_choices", "(", "nOut", ")", ":", "\n", "    ", "xsrange", "=", "[", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1.0", "]", "\n", "if", "nOut", "is", "None", ":", "\n", "        ", "return", "len", "(", "xsrange", ")", "\n", "", "else", ":", "\n", "        ", "Xs", "=", "[", "int", "(", "nOut", "*", "i", ")", "for", "i", "in", "xsrange", "]", "\n", "# xs = [ int(nOut * i // 10) for i in range(2, 11)]", "\n", "# Xs = [x for i, x in enumerate(xs) if i+1 == len(xs) or xs[i+1] > x+1]", "\n", "Xs", "=", "sorted", "(", "list", "(", "set", "(", "Xs", ")", ")", ")", "\n", "return", "tuple", "(", "Xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.get_depth_choices": [[105, 118], ["ValueError"], "function", ["None"], ["", "", "def", "get_depth_choices", "(", "nDepth", ")", ":", "\n", "    ", "if", "nDepth", "is", "None", ":", "\n", "        ", "return", "3", "\n", "", "else", ":", "\n", "        ", "assert", "nDepth", ">=", "3", ",", "\"nDepth should be greater than 2 vs {:}\"", ".", "format", "(", "nDepth", ")", "\n", "if", "nDepth", "==", "1", ":", "\n", "            ", "return", "(", "1", ",", "1", ",", "1", ")", "\n", "", "elif", "nDepth", "==", "2", ":", "\n", "            ", "return", "(", "1", ",", "1", ",", "2", ")", "\n", "", "elif", "nDepth", ">=", "3", ":", "\n", "            ", "return", "(", "nDepth", "//", "3", ",", "nDepth", "*", "2", "//", "3", ",", "nDepth", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid Depth : {:}\"", ".", "format", "(", "nDepth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_searchs.SoftSelect.drop_path": [[120, 129], ["x.new_zeros", "mask.bernoulli_.bernoulli_", "x.size"], "function", ["None"], ["", "", "", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "    ", "if", "drop_prob", ">", "0.0", ":", "\n", "        ", "keep_prob", "=", "1.0", "-", "drop_prob", "\n", "mask", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "mask", "=", "mask", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "x", "=", "x", "*", "(", "mask", "/", "keep_prob", ")", "\n", "# x.div_(keep_prob)", "\n", "# x.mul_(mask)", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts.TinyNetworkDarts.__init__": [[15, 62], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_darts.TinyNetworkDarts.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", "\n", ")", ":", "\n", "        ", "super", "(", "TinyNetworkDarts", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C", ")", "\n", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "SearchCell", "(", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "1", ",", "\n", "max_nodes", ",", "\n", "search_space", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "if", "num_edge", "is", "None", ":", "\n", "                    ", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "\n", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", "\n", ")", ",", "\"invalid {:} vs. {:}.\"", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts.TinyNetworkDarts.get_weights": [[64, 71], ["list", "list", "list", "list", "list", "search_model_darts.TinyNetworkDarts.classifier.parameters", "search_model_darts.TinyNetworkDarts.stem.parameters", "search_model_darts.TinyNetworkDarts.cells.parameters", "search_model_darts.TinyNetworkDarts.lastact.parameters", "search_model_darts.TinyNetworkDarts.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "\n", "self", ".", "global_pooling", ".", "parameters", "(", ")", "\n", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts.TinyNetworkDarts.get_alphas": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts.TinyNetworkDarts.show_alphas": [[75, 79], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "\"arch-parameters :\\n{:}\"", ".", "format", "(", "\n", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts.TinyNetworkDarts.get_message": [[81, 88], ["search_model_darts.TinyNetworkDarts.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts.TinyNetworkDarts.extra_repr": [[89, 92], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts.TinyNetworkDarts.genotype": [[94, 106], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts.TinyNetworkDarts.forward": [[107, 123], ["torch.functional.softmax", "torch.functional.softmax", "search_model_darts.TinyNetworkDarts.stem", "enumerate", "search_model_darts.TinyNetworkDarts.lastact", "search_model_darts.TinyNetworkDarts.global_pooling", "out.view.view.view", "search_model_darts.TinyNetworkDarts.classifier", "isinstance", "out.view.view.size", "cell", "cell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "\n", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "                ", "feature", "=", "cell", "(", "feature", ",", "alphas", ")", "\n", "", "else", ":", "\n", "                ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.__init__": [[24, 45], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ")", ":", "\n", "        ", "assert", "isinstance", "(", "genotype", ",", "list", ")", "or", "isinstance", "(", "\n", "genotype", ",", "tuple", "\n", ")", ",", "\"invalid class of genotype : {:}\"", ".", "format", "(", "type", "(", "genotype", ")", ")", "\n", "self", ".", "node_num", "=", "len", "(", "genotype", ")", "+", "1", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "node_N", "=", "[", "]", "\n", "for", "idx", ",", "node_info", "in", "enumerate", "(", "genotype", ")", ":", "\n", "            ", "assert", "isinstance", "(", "node_info", ",", "list", ")", "or", "isinstance", "(", "\n", "node_info", ",", "tuple", "\n", ")", ",", "\"invalid class of node_info : {:}\"", ".", "format", "(", "type", "(", "node_info", ")", ")", "\n", "assert", "len", "(", "node_info", ")", ">=", "1", ",", "\"invalid length : {:}\"", ".", "format", "(", "len", "(", "node_info", ")", ")", "\n", "for", "node_in", "in", "node_info", ":", "\n", "                ", "assert", "isinstance", "(", "node_in", ",", "list", ")", "or", "isinstance", "(", "\n", "node_in", ",", "tuple", "\n", ")", ",", "\"invalid class of in-node : {:}\"", ".", "format", "(", "type", "(", "node_in", ")", ")", "\n", "assert", "(", "\n", "len", "(", "node_in", ")", "==", "2", "and", "node_in", "[", "1", "]", "<=", "idx", "\n", ")", ",", "\"invalid in-node : {:}\"", ".", "format", "(", "node_in", ")", "\n", "", "self", ".", "node_N", ".", "append", "(", "len", "(", "node_info", ")", ")", "\n", "self", ".", "nodes", ".", "append", "(", "tuple", "(", "deepcopy", "(", "node_info", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist": [[46, 59], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["None"], ["", "", "def", "tolist", "(", "self", ",", "remove_str", ")", ":", "\n", "# convert this class to the list, if remove_str is 'none', then remove the 'none' operation.", "\n", "# note that we re-order the input node in this function", "\n", "# return the-genotype-list and success [if unsuccess, it is not a connectivity]", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "            ", "node_info", "=", "list", "(", "node_info", ")", "\n", "node_info", "=", "sorted", "(", "node_info", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "node_info", "=", "tuple", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "!=", "remove_str", ",", "node_info", ")", ")", "\n", "if", "len", "(", "node_info", ")", "==", "0", ":", "\n", "                ", "return", "None", ",", "False", "\n", "", "genotypes", ".", "append", "(", "node_info", ")", "\n", "", "return", "genotypes", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.node": [[60, 65], ["len", "len"], "methods", ["None"], ["", "def", "node", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", ">", "0", "and", "index", "<=", "len", "(", "self", ")", ",", "\"invalid index={:} < {:}\"", ".", "format", "(", "\n", "index", ",", "len", "(", "self", ")", "\n", ")", "\n", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tostr": [[66, 73], ["strings.append"], "methods", ["None"], ["", "def", "tostr", "(", "self", ")", ":", "\n", "        ", "strings", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "            ", "string", "=", "\"|\"", ".", "join", "(", "[", "x", "[", "0", "]", "+", "\"~{:}\"", ".", "format", "(", "x", "[", "1", "]", ")", "for", "x", "in", "node_info", "]", ")", "\n", "string", "=", "\"|{:}|\"", ".", "format", "(", "string", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "", "return", "\"+\"", ".", "join", "(", "strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.check_valid": [[74, 86], ["enumerate", "sums.append", "sum", "len"], "methods", ["None"], ["", "def", "check_valid", "(", "self", ")", ":", "\n", "        ", "nodes", "=", "{", "0", ":", "True", "}", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "            ", "sums", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "                ", "if", "op", "==", "\"none\"", "or", "nodes", "[", "xin", "]", "is", "False", ":", "\n", "                    ", "x", "=", "False", "\n", "", "else", ":", "\n", "                    ", "x", "=", "True", "\n", "", "sums", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i", "+", "1", "]", "=", "sum", "(", "sums", ")", ">", "0", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.to_unique_str": [[87, 111], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["None"], ["", "def", "to_unique_str", "(", "self", ",", "consider_zero", "=", "False", ")", ":", "\n", "# this is used to identify the isomorphic cell, which rerquires the prior knowledge of operation", "\n", "# two operations are special, i.e., none and skip_connect", "\n", "        ", "nodes", "=", "{", "0", ":", "\"0\"", "}", "\n", "for", "i_node", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "            ", "cur_node", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "                ", "if", "consider_zero", "is", "None", ":", "\n", "                    ", "x", "=", "\"(\"", "+", "nodes", "[", "xin", "]", "+", "\")\"", "+", "\"@{:}\"", ".", "format", "(", "op", ")", "\n", "", "elif", "consider_zero", ":", "\n", "                    ", "if", "op", "==", "\"none\"", "or", "nodes", "[", "xin", "]", "==", "\"#\"", ":", "\n", "                        ", "x", "=", "\"#\"", "# zero", "\n", "", "elif", "op", "==", "\"skip_connect\"", ":", "\n", "                        ", "x", "=", "nodes", "[", "xin", "]", "\n", "", "else", ":", "\n", "                        ", "x", "=", "\"(\"", "+", "nodes", "[", "xin", "]", "+", "\")\"", "+", "\"@{:}\"", ".", "format", "(", "op", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "op", "==", "\"skip_connect\"", ":", "\n", "                        ", "x", "=", "nodes", "[", "xin", "]", "\n", "", "else", ":", "\n", "                        ", "x", "=", "\"(\"", "+", "nodes", "[", "xin", "]", "+", "\")\"", "+", "\"@{:}\"", ".", "format", "(", "op", ")", "\n", "", "", "cur_node", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i_node", "+", "1", "]", "=", "\"+\"", ".", "join", "(", "sorted", "(", "cur_node", ")", ")", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.check_valid_op": [[112, 119], ["None"], "methods", ["None"], ["", "def", "check_valid_op", "(", "self", ",", "op_names", ")", ":", "\n", "        ", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "            ", "for", "inode_edge", "in", "node_info", ":", "\n", "# assert inode_edge[0] in op_names, 'invalid op-name : {:}'.format(inode_edge[0])", "\n", "                ", "if", "inode_edge", "[", "0", "]", "not", "in", "op_names", ":", "\n", "                    ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.__repr__": [[120, 123], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tostr"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}({node_num} nodes with {node_info})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "node_info", "=", "self", ".", "tostr", "(", ")", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "nodes", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.__getitem__": [[128, 130], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.str2structure": [[131, 148], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2structure", "(", "xstr", ")", ":", "\n", "        ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "\"must take string (not {:}) as input\"", ".", "format", "(", "\n", "type", "(", "xstr", ")", "\n", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "\"+\"", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "            ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "\"\"", ",", "node_str", ".", "split", "(", "\"|\"", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "\n", "                ", "assert", "len", "(", "xinput", ".", "split", "(", "\"~\"", ")", ")", "==", "2", ",", "\"invalid input length : {:}\"", ".", "format", "(", "\n", "xinput", "\n", ")", "\n", "", "inputs", "=", "(", "xi", ".", "split", "(", "\"~\"", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.str2fullstructure": [[149, 171], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2fullstructure", "(", "xstr", ",", "default_name", "=", "\"none\"", ")", ":", "\n", "        ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "\"must take string (not {:}) as input\"", ".", "format", "(", "\n", "type", "(", "xstr", ")", "\n", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "\"+\"", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "            ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "\"\"", ",", "node_str", ".", "split", "(", "\"|\"", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "\n", "                ", "assert", "len", "(", "xinput", ".", "split", "(", "\"~\"", ")", ")", "==", "2", ",", "\"invalid input length : {:}\"", ".", "format", "(", "\n", "xinput", "\n", ")", "\n", "", "inputs", "=", "(", "xi", ".", "split", "(", "\"~\"", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "list", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "all_in_nodes", "=", "list", "(", "x", "[", "1", "]", "for", "x", "in", "input_infos", ")", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "if", "j", "not", "in", "all_in_nodes", ":", "\n", "                    ", "input_infos", ".", "append", "(", "(", "default_name", ",", "j", ")", ")", "\n", "", "", "node_info", "=", "sorted", "(", "input_infos", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "genotypes", ".", "append", "(", "tuple", "(", "node_info", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.gen_all": [[172, 197], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.get_combination", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.get_combination"], ["", "@", "staticmethod", "\n", "def", "gen_all", "(", "search_space", ",", "num", ",", "return_ori", ")", ":", "\n", "        ", "assert", "isinstance", "(", "search_space", ",", "list", ")", "or", "isinstance", "(", "\n", "search_space", ",", "tuple", "\n", ")", ",", "\"invalid class of search-space : {:}\"", ".", "format", "(", "type", "(", "search_space", ")", ")", "\n", "assert", "(", "\n", "num", ">=", "2", "\n", ")", ",", "\"There should be at least two nodes in a neural cell instead of {:}\"", ".", "format", "(", "\n", "num", "\n", ")", "\n", "all_archs", "=", "get_combination", "(", "search_space", ",", "1", ")", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "all_archs", ")", ":", "\n", "            ", "all_archs", "[", "i", "]", "=", "[", "tuple", "(", "arch", ")", "]", "\n", "\n", "", "for", "inode", "in", "range", "(", "2", ",", "num", ")", ":", "\n", "            ", "cur_nodes", "=", "get_combination", "(", "search_space", ",", "inode", ")", "\n", "new_all_archs", "=", "[", "]", "\n", "for", "previous_arch", "in", "all_archs", ":", "\n", "                ", "for", "cur_node", "in", "cur_nodes", ":", "\n", "                    ", "new_all_archs", ".", "append", "(", "previous_arch", "+", "[", "tuple", "(", "cur_node", ")", "]", ")", "\n", "", "", "all_archs", "=", "new_all_archs", "\n", "", "if", "return_ori", ":", "\n", "            ", "return", "all_archs", "\n", "", "else", ":", "\n", "            ", "return", "[", "Structure", "(", "x", ")", "for", "x", "in", "all_archs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.get_combination": [[7, 21], ["range", "combs.append", "new_combs.append"], "function", ["None"], ["def", "get_combination", "(", "space", ",", "num", ")", ":", "\n", "    ", "combs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "for", "func", "in", "space", ":", "\n", "                ", "combs", ".", "append", "(", "[", "(", "func", ",", "i", ")", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "new_combs", "=", "[", "]", "\n", "for", "string", "in", "combs", ":", "\n", "                ", "for", "func", "in", "space", ":", "\n", "                    ", "xstring", "=", "string", "+", "[", "(", "func", ",", "i", ")", "]", "\n", "new_combs", ".", "append", "(", "xstring", ")", "\n", "", "", "combs", "=", "new_combs", "\n", "", "", "return", "combs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.__init__": [[15, 64], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_gdas.TinyNetworkGDAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", "\n", ")", ":", "\n", "        ", "super", "(", "TinyNetworkGDAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C", ")", "\n", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "SearchCell", "(", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "1", ",", "\n", "max_nodes", ",", "\n", "search_space", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "if", "num_edge", "is", "None", ":", "\n", "                    ", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "\n", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", "\n", ")", ",", "\"invalid {:} vs. {:}.\"", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n", "self", ".", "tau", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_weights": [[65, 72], ["list", "list", "list", "list", "list", "search_model_gdas.TinyNetworkGDAS.classifier.parameters", "search_model_gdas.TinyNetworkGDAS.stem.parameters", "search_model_gdas.TinyNetworkGDAS.cells.parameters", "search_model_gdas.TinyNetworkGDAS.lastact.parameters", "search_model_gdas.TinyNetworkGDAS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "\n", "self", ".", "global_pooling", ".", "parameters", "(", ")", "\n", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.set_tau": [[73, 75], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "        ", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_tau": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_tau", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_alphas": [[79, 81], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.show_alphas": [[82, 86], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "\"arch-parameters :\\n{:}\"", ".", "format", "(", "\n", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_message": [[88, 95], ["search_model_gdas.TinyNetworkGDAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.extra_repr": [[96, 99], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.genotype": [[101, 113], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas.TinyNetworkGDAS.forward": [[114, 143], ["search_model_gdas.TinyNetworkGDAS.stem", "enumerate", "search_model_gdas.TinyNetworkGDAS.lastact", "search_model_gdas.TinyNetworkGDAS.global_pooling", "out.view.view.view", "search_model_gdas.TinyNetworkGDAS.classifier", "torch.functional.softmax", "torch.functional.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "isinstance", "out.view.view.size", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.functional.softmax.max", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "cell.forward_gdas", "cell", "search_model_gdas.TinyNetworkGDAS.arch_parameters.log_softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.functional.softmax.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "self", ".", "arch_parameters", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "self", ".", "arch_parameters", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "hardwts", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "\n", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "\n", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "\n", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", "\n", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "                ", "feature", "=", "cell", ".", "forward_gdas", "(", "feature", ",", "hardwts", ",", "index", ")", "\n", "", "else", ":", "\n", "                ", "feature", "=", "cell", "(", "feature", ")", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.__init__": [[12, 87], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_gdas_nasnet.NASNetworkGDAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C", ",", "\n", "N", ",", "\n", "steps", ",", "\n", "multiplier", ",", "\n", "stem_multiplier", ",", "\n", "num_classes", ",", "\n", "search_space", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NASNetworkGDAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ",", "\n", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "(", "\n", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", ")", "\n", "layer_reductions", "=", "(", "\n", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "(", "\n", "C", "*", "stem_multiplier", ",", "\n", "C", "*", "stem_multiplier", ",", "\n", "C", ",", "\n", "False", ",", "\n", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "cell", "=", "SearchCell", "(", "\n", "search_space", ",", "\n", "steps", ",", "\n", "multiplier", ",", "\n", "C_prev_prev", ",", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "reduction", ",", "\n", "reduction_prev", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "if", "num_edge", "is", "None", ":", "\n", "                ", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "", "else", ":", "\n", "                ", "assert", "(", "\n", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", "\n", ")", ",", "\"invalid {:} vs. {:}.\"", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n", "self", ".", "tau", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_weights": [[88, 95], ["list", "list", "list", "list", "list", "search_model_gdas_nasnet.NASNetworkGDAS.classifier.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.stem.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.cells.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.lastact.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "\n", "self", ".", "global_pooling", ".", "parameters", "(", ")", "\n", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.set_tau": [[96, 98], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "        ", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_tau": [[99, 101], ["None"], "methods", ["None"], ["", "def", "get_tau", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_alphas": [[102, 104], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.show_alphas": [[105, 114], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "A", "=", "\"arch-normal-parameters :\\n{:}\"", ".", "format", "(", "\n", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "B", "=", "\"arch-reduce-parameters :\\n{:}\"", ".", "format", "(", "\n", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "", "return", "\"{:}\\n{:}\"", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_message": [[115, 122], ["search_model_gdas_nasnet.NASNetworkGDAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.extra_repr": [[123, 126], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.genotype": [[128, 160], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_gdas_nasnet.NASNetworkGDAS.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "        ", "def", "_parse", "(", "weights", ")", ":", "\n", "            ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "                ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "                    ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "                        ", "if", "op_name", "==", "\"none\"", ":", "\n", "                            ", "continue", "\n", "", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "gene_normal", "=", "_parse", "(", "\n", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "gene_reduce", "=", "_parse", "(", "\n", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "", "return", "{", "\n", "\"normal\"", ":", "gene_normal", ",", "\n", "\"normal_concat\"", ":", "list", "(", "\n", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", ")", ",", "\n", "\"reduce\"", ":", "gene_reduce", ",", "\n", "\"reduce_concat\"", ":", "list", "(", "\n", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.forward": [[163, 198], ["search_model_gdas_nasnet.NASNetworkGDAS.forward.get_gumbel_prob"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "def", "get_gumbel_prob", "(", "xins", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "xins", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "xins", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "hardwts", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "\n", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "\n", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "\n", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", "\n", ")", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "return", "hardwts", ",", "index", "\n", "\n", "", "normal_hardwts", ",", "normal_index", "=", "get_gumbel_prob", "(", "self", ".", "arch_normal_parameters", ")", "\n", "reduce_hardwts", ",", "reduce_index", "=", "get_gumbel_prob", "(", "self", ".", "arch_reduce_parameters", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "cell", ".", "reduction", ":", "\n", "                ", "hardwts", ",", "index", "=", "reduce_hardwts", ",", "reduce_index", "\n", "", "else", ":", "\n", "                ", "hardwts", ",", "index", "=", "normal_hardwts", ",", "normal_index", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_gdas", "(", "s0", ",", "s1", ",", "hardwts", ",", "index", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_enas_utils.Controller.__init__": [[13, 47], ["torch.Module.__init__", "search_model_enas_utils.Controller.register_parameter", "torch.LSTM", "torch.LSTM", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_edge", ",", "\n", "num_ops", ",", "\n", "lstm_size", "=", "32", ",", "\n", "lstm_num_layers", "=", "2", ",", "\n", "tanh_constant", "=", "2.5", ",", "\n", "temperature", "=", "5.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Controller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# assign the attributes", "\n", "self", ".", "num_edge", "=", "num_edge", "\n", "self", ".", "num_ops", "=", "num_ops", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "lstm_N", "=", "lstm_num_layers", "\n", "self", ".", "tanh_constant", "=", "tanh_constant", "\n", "self", ".", "temperature", "=", "temperature", "\n", "# create parameters", "\n", "self", ".", "register_parameter", "(", "\n", "\"input_vars\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "lstm_size", ")", ")", "\n", ")", "\n", "self", ".", "w_lstm", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "self", ".", "lstm_size", ",", "\n", "hidden_size", "=", "self", ".", "lstm_size", ",", "\n", "num_layers", "=", "self", ".", "lstm_N", ",", "\n", ")", "\n", "self", ".", "w_embd", "=", "nn", ".", "Embedding", "(", "self", ".", "num_ops", ",", "self", ".", "lstm_size", ")", "\n", "self", ".", "w_pred", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_size", ",", "self", ".", "num_ops", ")", "\n", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "input_vars", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_lstm", ".", "weight_hh_l0", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_lstm", ".", "weight_ih_l0", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_embd", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_pred", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_enas_utils.Controller.forward": [[48, 74], ["range", "search_model_enas_utils.Controller.w_lstm", "search_model_enas_utils.Controller.w_pred", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "sampled_arch.append", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "log_probs.append", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "entropys.append", "search_model_enas_utils.Controller.w_embd", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.distributions.categorical.Categorical.sample.item", "torch.distributions.categorical.Categorical.log_prob.view", "torch.distributions.categorical.Categorical.entropy.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "inputs", ",", "h0", "=", "self", ".", "input_vars", ",", "None", "\n", "log_probs", ",", "entropys", ",", "sampled_arch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "iedge", "in", "range", "(", "self", ".", "num_edge", ")", ":", "\n", "            ", "outputs", ",", "h0", "=", "self", ".", "w_lstm", "(", "inputs", ",", "h0", ")", "\n", "\n", "logits", "=", "self", ".", "w_pred", "(", "outputs", ")", "\n", "logits", "=", "logits", "/", "self", ".", "temperature", "\n", "logits", "=", "self", ".", "tanh_constant", "*", "torch", ".", "tanh", "(", "logits", ")", "\n", "# distribution", "\n", "op_distribution", "=", "Categorical", "(", "logits", "=", "logits", ")", "\n", "op_index", "=", "op_distribution", ".", "sample", "(", ")", "\n", "sampled_arch", ".", "append", "(", "op_index", ".", "item", "(", ")", ")", "\n", "\n", "op_log_prob", "=", "op_distribution", ".", "log_prob", "(", "op_index", ")", "\n", "log_probs", ".", "append", "(", "op_log_prob", ".", "view", "(", "-", "1", ")", ")", "\n", "op_entropy", "=", "op_distribution", ".", "entropy", "(", ")", "\n", "entropys", ".", "append", "(", "op_entropy", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# obtain the input embedding for the next step", "\n", "inputs", "=", "self", ".", "w_embd", "(", "op_index", ")", "\n", "", "return", "(", "\n", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "log_probs", ")", ")", ",", "\n", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "entropys", ")", ")", ",", "\n", "sampled_arch", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.__init__": [[13, 86], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_darts_nasnet.NASNetworkDARTS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C", ":", "int", ",", "\n", "N", ":", "int", ",", "\n", "steps", ":", "int", ",", "\n", "multiplier", ":", "int", ",", "\n", "stem_multiplier", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "\n", "search_space", ":", "List", "[", "Text", "]", ",", "\n", "affine", ":", "bool", ",", "\n", "track_running_stats", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NASNetworkDARTS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ",", "\n", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "(", "\n", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", ")", "\n", "layer_reductions", "=", "(", "\n", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "(", "\n", "C", "*", "stem_multiplier", ",", "\n", "C", "*", "stem_multiplier", ",", "\n", "C", ",", "\n", "False", ",", "\n", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "cell", "=", "SearchCell", "(", "\n", "search_space", ",", "\n", "steps", ",", "\n", "multiplier", ",", "\n", "C_prev_prev", ",", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "reduction", ",", "\n", "reduction_prev", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "if", "num_edge", "is", "None", ":", "\n", "                ", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "", "else", ":", "\n", "                ", "assert", "(", "\n", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", "\n", ")", ",", "\"invalid {:} vs. {:}.\"", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_weights": [[88, 95], ["list", "list", "list", "list", "list", "search_model_darts_nasnet.NASNetworkDARTS.classifier.parameters", "search_model_darts_nasnet.NASNetworkDARTS.stem.parameters", "search_model_darts_nasnet.NASNetworkDARTS.cells.parameters", "search_model_darts_nasnet.NASNetworkDARTS.lastact.parameters", "search_model_darts_nasnet.NASNetworkDARTS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", "->", "List", "[", "torch", ".", "nn", ".", "Parameter", "]", ":", "\n", "        ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "\n", "self", ".", "global_pooling", ".", "parameters", "(", ")", "\n", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_alphas": [[96, 98], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", "->", "List", "[", "torch", ".", "nn", ".", "Parameter", "]", ":", "\n", "        ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.show_alphas": [[99, 108], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", "->", "Text", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "A", "=", "\"arch-normal-parameters :\\n{:}\"", ".", "format", "(", "\n", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "B", "=", "\"arch-reduce-parameters :\\n{:}\"", ".", "format", "(", "\n", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "", "return", "\"{:}\\n{:}\"", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_message": [[109, 116], ["search_model_darts_nasnet.NASNetworkDARTS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.extra_repr": [[117, 120], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "Text", ":", "\n", "        ", "return", "\"{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.genotype": [[122, 154], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_darts_nasnet.NASNetworkDARTS.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", "->", "Dict", "[", "Text", ",", "List", "]", ":", "\n", "        ", "def", "_parse", "(", "weights", ")", ":", "\n", "            ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "                ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "                    ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "                        ", "if", "op_name", "==", "\"none\"", ":", "\n", "                            ", "continue", "\n", "", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "gene_normal", "=", "_parse", "(", "\n", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "gene_reduce", "=", "_parse", "(", "\n", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "", "return", "{", "\n", "\"normal\"", ":", "gene_normal", ",", "\n", "\"normal_concat\"", ":", "list", "(", "\n", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", ")", ",", "\n", "\"reduce\"", ":", "gene_reduce", ",", "\n", "\"reduce_concat\"", ":", "list", "(", "\n", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.forward": [[157, 175], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "search_model_darts_nasnet.NASNetworkDARTS.stem", "enumerate", "search_model_darts_nasnet.NASNetworkDARTS.lastact", "search_model_darts_nasnet.NASNetworkDARTS.global_pooling", "out.view.view.view", "search_model_darts_nasnet.NASNetworkDARTS.classifier", "out.view.view.size", "cell.forward_darts"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "normal_w", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "1", ")", "\n", "reduce_w", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "1", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "cell", ".", "reduction", ":", "\n", "                ", "ww", "=", "reduce_w", "\n", "", "else", ":", "\n", "                ", "ww", "=", "normal_w", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_darts", "(", "s0", ",", "s1", ",", "ww", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.__init__": [[15, 91], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_setn_nasnet.NASNetworkSETN.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C", ":", "int", ",", "\n", "N", ":", "int", ",", "\n", "steps", ":", "int", ",", "\n", "multiplier", ":", "int", ",", "\n", "stem_multiplier", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "\n", "search_space", ":", "List", "[", "Text", "]", ",", "\n", "affine", ":", "bool", ",", "\n", "track_running_stats", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NASNetworkSETN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ",", "\n", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "(", "\n", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", ")", "\n", "layer_reductions", "=", "(", "\n", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "(", "\n", "C", "*", "stem_multiplier", ",", "\n", "C", "*", "stem_multiplier", ",", "\n", "C", ",", "\n", "False", ",", "\n", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "cell", "=", "SearchCell", "(", "\n", "search_space", ",", "\n", "steps", ",", "\n", "multiplier", ",", "\n", "C_prev_prev", ",", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "reduction", ",", "\n", "reduction_prev", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "if", "num_edge", "is", "None", ":", "\n", "                ", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "", "else", ":", "\n", "                ", "assert", "(", "\n", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", "\n", ")", ",", "\"invalid {:} vs. {:}.\"", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n", "self", ".", "mode", "=", "\"urs\"", "\n", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.set_cal_mode": [[92, 99], ["copy.deepcopy"], "methods", ["None"], ["", "def", "set_cal_mode", "(", "self", ",", "mode", ",", "dynamic_cell", "=", "None", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "\"urs\"", ",", "\"joint\"", ",", "\"select\"", ",", "\"dynamic\"", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "\"dynamic\"", ":", "\n", "            ", "self", ".", "dynamic_cell", "=", "deepcopy", "(", "dynamic_cell", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_weights": [[100, 107], ["list", "list", "list", "list", "list", "search_model_setn_nasnet.NASNetworkSETN.classifier.parameters", "search_model_setn_nasnet.NASNetworkSETN.stem.parameters", "search_model_setn_nasnet.NASNetworkSETN.cells.parameters", "search_model_setn_nasnet.NASNetworkSETN.lastact.parameters", "search_model_setn_nasnet.NASNetworkSETN.global_pooling.parameters"], "methods", ["None"], ["", "", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "\n", "self", ".", "global_pooling", ".", "parameters", "(", ")", "\n", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_alphas": [[108, 110], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.show_alphas": [[111, 120], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "A", "=", "\"arch-normal-parameters :\\n{:}\"", ".", "format", "(", "\n", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "B", "=", "\"arch-reduce-parameters :\\n{:}\"", ".", "format", "(", "\n", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "", "return", "\"{:}\\n{:}\"", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_message": [[121, 128], ["search_model_setn_nasnet.NASNetworkSETN.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.extra_repr": [[129, 132], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.dync_genotype": [[134, 151], ["range", "Structure", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "range", "genotypes.append", "xlist.append", "tuple", "random.choice", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["None"], ["", "def", "dync_genotype", "(", "self", ",", "use_random", "=", "False", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "alphas_cpu", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "use_random", ":", "\n", "                    ", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "else", ":", "\n", "                    ", "weights", "=", "alphas_cpu", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_index", "=", "torch", ".", "multinomial", "(", "weights", ",", "1", ")", ".", "item", "(", ")", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.genotype": [[152, 184], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_setn_nasnet.NASNetworkSETN.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "        ", "def", "_parse", "(", "weights", ")", ":", "\n", "            ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "                ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "                    ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "                        ", "if", "op_name", "==", "\"none\"", ":", "\n", "                            ", "continue", "\n", "", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "gene_normal", "=", "_parse", "(", "\n", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "gene_reduce", "=", "_parse", "(", "\n", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "", "return", "{", "\n", "\"normal\"", ":", "gene_normal", ",", "\n", "\"normal_concat\"", ":", "list", "(", "\n", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", ")", ",", "\n", "\"reduce\"", ":", "gene_reduce", ",", "\n", "\"reduce_concat\"", ":", "list", "(", "\n", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.forward": [[187, 206], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "search_model_setn_nasnet.NASNetworkSETN.stem", "enumerate", "search_model_setn_nasnet.NASNetworkSETN.lastact", "search_model_setn_nasnet.NASNetworkSETN.global_pooling", "out.view.view.view", "search_model_setn_nasnet.NASNetworkSETN.classifier", "out.view.view.size", "cell.forward_gdas"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "normal_hardwts", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", "\n", "reduce_hardwts", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "# [TODO]", "\n", "            ", "raise", "NotImplementedError", "\n", "if", "cell", ".", "reduction", ":", "\n", "                ", "hardwts", ",", "index", "=", "reduce_hardwts", ",", "reduce_index", "\n", "", "else", ":", "\n", "                ", "hardwts", ",", "index", "=", "normal_hardwts", ",", "normal_index", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_gdas", "(", "s0", ",", "s1", ",", "hardwts", ",", "index", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.__init__": [[14, 48], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "search_cells.NAS201SearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "stride", ",", "\n", "max_nodes", ",", "\n", "op_names", ",", "\n", "affine", "=", "False", ",", "\n", "track_running_stats", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NAS201SearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "op_names", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "for", "i", "in", "range", "(", "1", ",", "max_nodes", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "j", "==", "0", ":", "\n", "                    ", "xlists", "=", "[", "\n", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "for", "op_name", "in", "op_names", "\n", "]", "\n", "", "else", ":", "\n", "                    ", "xlists", "=", "[", "\n", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "for", "op_name", "in", "op_names", "\n", "]", "\n", "", "self", ".", "edges", "[", "node_str", "]", "=", "nn", ".", "ModuleList", "(", "xlists", ")", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.extra_repr": [[49, 54], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "string", "=", "\"info :: {max_nodes} nodes, inC={in_dim}, outC={out_dim}\"", ".", "format", "(", "\n", "**", "self", ".", "__dict__", "\n", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward": [[55, 70], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "sum", "layer", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "\n", "sum", "(", "\n", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "\n", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", "\n", ")", "\n", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_gdas": [[72, 87], ["range", "range", "nodes.append", "index[].item", "sum", "inter_nodes.append", "sum", "enumerate", "edge"], "methods", ["None"], ["", "def", "forward_gdas", "(", "self", ",", "inputs", ",", "hardwts", ",", "index", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "hardwts", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "argmaxs", "=", "index", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "weigsum", "=", "sum", "(", "\n", "weights", "[", "_ie", "]", "*", "edge", "(", "nodes", "[", "j", "]", ")", "if", "_ie", "==", "argmaxs", "else", "weights", "[", "_ie", "]", "\n", "for", "_ie", ",", "edge", "in", "enumerate", "(", "self", ".", "edges", "[", "node_str", "]", ")", "\n", ")", "\n", "inter_nodes", ".", "append", "(", "weigsum", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_joint": [[89, 104], ["range", "range", "nodes.append", "sum", "inter_nodes.append", "sum", "layer", "zip"], "methods", ["None"], ["", "def", "forward_joint", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "# aggregation = sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) / weights.numel()", "\n", "aggregation", "=", "sum", "(", "\n", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "\n", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", "\n", ")", "\n", "inter_nodes", ".", "append", "(", "aggregation", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_urs": [[106, 125], ["range", "enumerate", "nodes.append", "range", "inter_nodes.append", "sum", "random.choice", "sops.append", "random.choice.", "hasattr"], "methods", ["None"], ["", "def", "forward_urs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "while", "True", ":", "# to avoid select zero for all ops", "\n", "                ", "sops", ",", "has_non_zero", "=", "[", "]", ",", "False", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                    ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "candidates", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "select_op", "=", "random", ".", "choice", "(", "candidates", ")", "\n", "sops", ".", "append", "(", "select_op", ")", "\n", "if", "not", "hasattr", "(", "select_op", ",", "\"is_zero\"", ")", "or", "select_op", ".", "is_zero", "is", "False", ":", "\n", "                        ", "has_non_zero", "=", "True", "\n", "", "", "if", "has_non_zero", ":", "\n", "                    ", "break", "\n", "", "", "inter_nodes", "=", "[", "]", "\n", "for", "j", ",", "select_op", "in", "enumerate", "(", "sops", ")", ":", "\n", "                ", "inter_nodes", ".", "append", "(", "select_op", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_select": [[127, 140], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "weights.argmax().item", "weights.argmax"], "methods", ["None"], ["", "def", "forward_select", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "\n", "self", ".", "edges", "[", "node_str", "]", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "(", "nodes", "[", "j", "]", ")", "\n", ")", "\n", "# inter_nodes.append( sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) )", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic": [[142, 153], ["range", "nodes.append", "search_cells.NAS201SearchCell.op_names.index", "inter_nodes.append", "sum"], "methods", ["None"], ["", "def", "forward_dynamic", "(", "self", ",", "inputs", ",", "structure", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "cur_op_node", "=", "structure", ".", "nodes", "[", "i", "-", "1", "]", "\n", "inter_nodes", "=", "[", "]", "\n", "for", "op_name", ",", "j", "in", "cur_op_node", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "self", ".", "op_names", ".", "index", "(", "op_name", ")", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "op_index", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.MixedOp.__init__": [[156, 162], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "search_cells.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "        ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "space", ":", "\n", "            ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.MixedOp.forward_gdas": [[163, 165], ["None"], "methods", ["None"], ["", "", "def", "forward_gdas", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "_ops", "[", "index", "]", "(", "x", ")", "*", "weights", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.MixedOp.forward_darts": [[166, 168], ["sum", "op", "zip"], "methods", ["None"], ["", "def", "forward_darts", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "        ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NASNetSearchCell.__init__": [[172, 215], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "search_cells.MixedOp", "search_cells.NASNetSearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "space", ",", "\n", "steps", ",", "\n", "multiplier", ",", "\n", "C_prev_prev", ",", "\n", "C_prev", ",", "\n", "C", ",", "\n", "reduction", ",", "\n", "reduction_prev", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NASNetSearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "space", ")", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "OPS", "[", "\"skip_connect\"", "]", "(", "\n", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "OPS", "[", "\"nor_conv_1x1\"", "]", "(", "\n", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "", "self", ".", "preprocess1", "=", "OPS", "[", "\"nor_conv_1x1\"", "]", "(", "\n", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "\n", "i", ",", "j", "\n", ")", "# indicate the edge from node-(j) to node-(i+2)", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "op", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NASNetSearchCell.forward_gdas": [[216, 232], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "indexs[].item", "clist.append", "sum", "op.forward_gdas"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward_gdas", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ",", "indexs", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "index", "=", "indexs", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "clist", ".", "append", "(", "op", ".", "forward_gdas", "(", "h", ",", "weights", ",", "index", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NASNetSearchCell.forward_darts": [[233, 248], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "clist.append", "sum", "op.forward_darts"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward_darts", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "clist", ".", "append", "(", "op", ".", "forward_darts", "(", "h", ",", "weights", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.__init__": [[15, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_setn.TinyNetworkSETN.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", "\n", ")", ":", "\n", "        ", "super", "(", "TinyNetworkSETN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C", ")", "\n", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "SearchCell", "(", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "1", ",", "\n", "max_nodes", ",", "\n", "search_space", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "if", "num_edge", "is", "None", ":", "\n", "                    ", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "\n", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", "\n", ")", ",", "\"invalid {:} vs. {:}.\"", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", "\n", ")", "\n", "self", ".", "mode", "=", "\"urs\"", "\n", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.set_cal_mode": [[66, 73], ["copy.deepcopy"], "methods", ["None"], ["", "def", "set_cal_mode", "(", "self", ",", "mode", ",", "dynamic_cell", "=", "None", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "\"urs\"", ",", "\"joint\"", ",", "\"select\"", ",", "\"dynamic\"", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "\"dynamic\"", ":", "\n", "            ", "self", ".", "dynamic_cell", "=", "deepcopy", "(", "dynamic_cell", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.get_cal_mode": [[74, 76], ["None"], "methods", ["None"], ["", "", "def", "get_cal_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.get_weights": [[77, 84], ["list", "list", "list", "list", "list", "search_model_setn.TinyNetworkSETN.classifier.parameters", "search_model_setn.TinyNetworkSETN.stem.parameters", "search_model_setn.TinyNetworkSETN.cells.parameters", "search_model_setn.TinyNetworkSETN.lastact.parameters", "search_model_setn.TinyNetworkSETN.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "\n", "self", ".", "global_pooling", ".", "parameters", "(", ")", "\n", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.get_alphas": [[85, 87], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.get_message": [[88, 95], ["search_model_setn.TinyNetworkSETN.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.extra_repr": [[96, 99], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.genotype": [[101, 113], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.dync_genotype": [[114, 131], ["range", "genotypes.Structure", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "range", "genotypes.append", "xlist.append", "tuple", "random.choice", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["None"], ["", "def", "dync_genotype", "(", "self", ",", "use_random", "=", "False", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "alphas_cpu", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "use_random", ":", "\n", "                    ", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "else", ":", "\n", "                    ", "weights", "=", "alphas_cpu", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_index", "=", "torch", ".", "multinomial", "(", "weights", ",", "1", ")", ".", "item", "(", ")", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.get_log_prob": [[132, 142], ["enumerate", "sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.log_softmax", "torch.functional.log_softmax", "search_model_setn.TinyNetworkSETN.op_names.index", "select_logits.append", "sum"], "methods", ["None"], ["", "def", "get_log_prob", "(", "self", ",", "arch", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "nn", ".", "functional", ".", "log_softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "select_logits", "=", "[", "]", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "arch", ".", "nodes", ")", ":", "\n", "            ", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", "+", "1", ",", "xin", ")", "\n", "op_index", "=", "self", ".", "op_names", ".", "index", "(", "op", ")", "\n", "select_logits", ".", "append", "(", "logits", "[", "self", ".", "edge2index", "[", "node_str", "]", ",", "op_index", "]", ")", "\n", "", "", "return", "sum", "(", "select_logits", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.return_topK": [[143, 151], ["genotypes.Structure.gen_all", "sorted", "len", "search_model_setn.TinyNetworkSETN.get_log_prob", "len", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.gen_all", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.get_log_prob"], ["", "def", "return_topK", "(", "self", ",", "K", ")", ":", "\n", "        ", "archs", "=", "Structure", ".", "gen_all", "(", "self", ".", "op_names", ",", "self", ".", "max_nodes", ",", "False", ")", "\n", "pairs", "=", "[", "(", "self", ".", "get_log_prob", "(", "arch", ")", ",", "arch", ")", "for", "arch", "in", "archs", "]", "\n", "if", "K", "<", "0", "or", "K", ">=", "len", "(", "archs", ")", ":", "\n", "            ", "K", "=", "len", "(", "archs", ")", "\n", "", "sorted_pairs", "=", "sorted", "(", "pairs", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "0", "]", ")", "\n", "return_pairs", "=", "[", "sorted_pairs", "[", "_", "]", "[", "1", "]", "for", "_", "in", "range", "(", "K", ")", "]", "\n", "return", "return_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_setn.TinyNetworkSETN.forward": [[152, 179], ["torch.functional.softmax", "torch.functional.softmax", "search_model_setn.TinyNetworkSETN.stem", "enumerate", "search_model_setn.TinyNetworkSETN.lastact", "search_model_setn.TinyNetworkSETN.global_pooling", "out.view.view.view", "search_model_setn.TinyNetworkSETN.classifier", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax.detach().cpu", "isinstance", "out.view.view.size", "cell", "torch.functional.softmax.detach", "cell.forward_urs", "cell.forward_select", "cell.forward_joint", "cell.forward_dynamic", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_urs", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_select", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_joint", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "alphas_cpu", "=", "alphas", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "                ", "if", "self", ".", "mode", "==", "\"urs\"", ":", "\n", "                    ", "feature", "=", "cell", ".", "forward_urs", "(", "feature", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"select\"", ":", "\n", "                    ", "feature", "=", "cell", ".", "forward_select", "(", "feature", ",", "alphas_cpu", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"joint\"", ":", "\n", "                    ", "feature", "=", "cell", ".", "forward_joint", "(", "feature", ",", "alphas", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"dynamic\"", ":", "\n", "                    ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "dynamic_cell", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"invalid mode={:}\"", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_enas.TinyNetworkENAS.__init__": [[16, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_enas.TinyNetworkENAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", "\n", ")", ":", "\n", "        ", "super", "(", "TinyNetworkENAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C", ")", "\n", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "SearchCell", "(", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "1", ",", "\n", "max_nodes", ",", "\n", "search_space", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "if", "num_edge", "is", "None", ":", "\n", "                    ", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "\n", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", "\n", ")", ",", "\"invalid {:} vs. {:}.\"", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "# to maintain the sampled architecture", "\n", "self", ".", "sampled_arch", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_enas.TinyNetworkENAS.update_arch": [[64, 83], ["isinstance", "isinstance", "range", "genotypes.Structure", "ValueError", "range", "genotypes.append", "xlist.append", "tuple"], "methods", ["None"], ["", "def", "update_arch", "(", "self", ",", "_arch", ")", ":", "\n", "        ", "if", "_arch", "is", "None", ":", "\n", "            ", "self", ".", "sampled_arch", "=", "None", "\n", "", "elif", "isinstance", "(", "_arch", ",", "Structure", ")", ":", "\n", "            ", "self", ".", "sampled_arch", "=", "_arch", "\n", "", "elif", "isinstance", "(", "_arch", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "                ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                    ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "_arch", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "self", ".", "sampled_arch", "=", "Structure", "(", "genotypes", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid type of input architecture : {:}\"", ".", "format", "(", "_arch", ")", ")", "\n", "", "return", "self", ".", "sampled_arch", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_enas.TinyNetworkENAS.create_controller": [[84, 86], ["search_model_enas_utils.Controller", "len", "len"], "methods", ["None"], ["", "def", "create_controller", "(", "self", ")", ":", "\n", "        ", "return", "Controller", "(", "len", "(", "self", ".", "edge2index", ")", ",", "len", "(", "self", ".", "op_names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_enas.TinyNetworkENAS.get_message": [[87, 94], ["search_model_enas.TinyNetworkENAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_enas.TinyNetworkENAS.extra_repr": [[95, 98], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_enas.TinyNetworkENAS.forward": [[100, 115], ["search_model_enas.TinyNetworkENAS.stem", "enumerate", "search_model_enas.TinyNetworkENAS.lastact", "search_model_enas.TinyNetworkENAS.global_pooling", "out.view.view.view", "search_model_enas.TinyNetworkENAS.classifier", "isinstance", "out.view.view.size", "cell.forward_dynamic", "cell"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "                ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "sampled_arch", ")", "\n", "", "else", ":", "\n", "                ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs._test_module.main": [[8, 11], ["search_model_enas_utils.Controller", "search_model_enas_utils.Controller."], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "controller", "=", "Controller", "(", "6", ",", "4", ")", "\n", "predictions", "=", "controller", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_random.TinyNetworkRANDOM.__init__": [[15, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_random.TinyNetworkRANDOM.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", "\n", ")", ":", "\n", "        ", "super", "(", "TinyNetworkRANDOM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C", ")", "\n", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "\n", "zip", "(", "layer_channels", ",", "layer_reductions", ")", "\n", ")", ":", "\n", "            ", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "SearchCell", "(", "\n", "C_prev", ",", "\n", "C_curr", ",", "\n", "1", ",", "\n", "max_nodes", ",", "\n", "search_space", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", ")", "\n", "if", "num_edge", "is", "None", ":", "\n", "                    ", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "\n", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", "\n", ")", ",", "\"invalid {:} vs. {:}.\"", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_random.TinyNetworkRANDOM.get_message": [[62, 69], ["search_model_random.TinyNetworkRANDOM.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_random.TinyNetworkRANDOM.extra_repr": [[70, 73], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_random.TinyNetworkRANDOM.random_genotype": [[75, 88], ["range", "genotypes.Structure", "range", "genotypes.append", "random.choice", "xlist.append", "tuple"], "methods", ["None"], ["", "def", "random_genotype", "(", "self", ",", "set_cache", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "\"{:}<-{:}\"", ".", "format", "(", "i", ",", "j", ")", "\n", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "arch", "=", "Structure", "(", "genotypes", ")", "\n", "if", "set_cache", ":", "\n", "            ", "self", ".", "arch_cache", "=", "arch", "\n", "", "return", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_model_random.TinyNetworkRANDOM.forward": [[89, 103], ["search_model_random.TinyNetworkRANDOM.stem", "enumerate", "search_model_random.TinyNetworkRANDOM.lastact", "search_model_random.TinyNetworkRANDOM.global_pooling", "out.view.view.view", "search_model_random.TinyNetworkRANDOM.classifier", "isinstance", "out.view.view.size", "cell.forward_dynamic", "cell"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "                ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "arch_cache", ")", "\n", "", "else", ":", "\n", "                ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.ConvBNReLU.__init__": [[10, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "if", "has_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.ConvBNReLU.forward": [[37, 53], ["InferCifarResNet_depth.ConvBNReLU.conv", "InferCifarResNet_depth.ConvBNReLU.avg", "InferCifarResNet_depth.ConvBNReLU.bn", "InferCifarResNet_depth.ConvBNReLU.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.ResNetBasicblock.__init__": [[59, 104], ["torch.Module.__init__", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "\n", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.ResNetBasicblock.forward": [[105, 115], ["InferCifarResNet_depth.ResNetBasicblock.conv_a", "InferCifarResNet_depth.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet_depth.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.ResNetBottleneck.__init__": [[121, 176], ["torch.Module.__init__", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "inplanes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.ResNetBottleneck.forward": [[177, 189], ["InferCifarResNet_depth.ResNetBottleneck.conv_1x1", "InferCifarResNet_depth.ResNetBottleneck.conv_3x3", "InferCifarResNet_depth.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet_depth.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.__init__": [[192, 252], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet_depth.InferDepthCifarResNet.apply", "len", "range", "InferCifarResNet_depth.InferDepthCifarResNet.modules", "ValueError", "InferCifarResNet_depth.ConvBNReLU", "block", "InferCifarResNet_depth.InferDepthCifarResNet.channels.append", "InferCifarResNet_depth.InferDepthCifarResNet.layers.append", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "xblocks", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "        ", "super", "(", "InferDepthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"ResNetBasicblock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "\"depth should be one of 20, 32, 44, 56, 110\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "\"ResNetBottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "\"depth should be one of 164\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "3", ",", "\"invalid xblocks : {:}\"", ".", "format", "(", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "(", "\n", "\"InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}\"", ".", "format", "(", "\n", "depth", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "]", "\n", ")", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "planes", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "                    ", "break", "\n", "\n", "", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "channels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.get_message": [[253, 255], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.forward": [[256, 264], ["enumerate", "InferCifarResNet_depth.InferDepthCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet_depth.InferDepthCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.ConvBNReLU.__init__": [[10, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "if", "has_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.ConvBNReLU.forward": [[37, 53], ["InferCifarResNet.ConvBNReLU.conv", "InferCifarResNet.ConvBNReLU.avg", "InferCifarResNet.ConvBNReLU.bn", "InferCifarResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.ResNetBasicblock.__init__": [[59, 111], ["torch.Module.__init__", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "\n", "iCs", ",", "list", "\n", ")", ",", "\"invalid type of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "\"invalid lengths of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "1", "]", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "# self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.ResNetBasicblock.forward": [[112, 122], ["InferCifarResNet.ResNetBasicblock.conv_a", "InferCifarResNet.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.ResNetBottleneck.__init__": [[128, 183], ["torch.Module.__init__", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "\n", "iCs", ",", "list", "\n", ")", ",", "\"invalid type of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "\"invalid lengths of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "1", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "3", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "3", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "# self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.ResNetBottleneck.forward": [[184, 196], ["InferCifarResNet.ResNetBottleneck.conv_1x1", "InferCifarResNet.ResNetBottleneck.conv_3x3", "InferCifarResNet.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.InferCifarResNet.__init__": [[199, 275], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet.InferCifarResNet.apply", "len", "range", "InferCifarResNet.InferCifarResNet.modules", "ValueError", "InferCifarResNet.ConvBNReLU", "block", "InferCifarResNet.InferCifarResNet.layers.append", "isinstance", "range", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "block_name", ",", "depth", ",", "xblocks", ",", "xchannels", ",", "num_classes", ",", "zero_init_residual", "\n", ")", ":", "\n", "        ", "super", "(", "InferCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"ResNetBasicblock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "\"depth should be one of 20, 32, 44, 56, 110\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "\"ResNetBottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "\"depth should be one of 164\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "3", ",", "\"invalid xblocks : {:}\"", ".", "format", "(", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "(", "\n", "\"InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}\"", ".", "format", "(", "\n", "depth", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "xchannels", "[", "0", "]", ",", "\n", "xchannels", "[", "1", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "last_channel_idx", "=", "1", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iCs", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "                    ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "iL", "+", "1", ",", "layer_blocks", ")", ":", "\n", "                        ", "last_channel_idx", "+=", "num_conv", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "\n", "", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.InferCifarResNet.get_message": [[276, 278], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet.InferCifarResNet.forward": [[279, 287], ["enumerate", "InferCifarResNet.InferCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet.InferCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferMobileNetV2.ConvBNReLU.__init__": [[11, 40], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "groups", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "if", "has_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferMobileNetV2.ConvBNReLU.forward": [[41, 48], ["InferMobileNetV2.ConvBNReLU.conv", "InferMobileNetV2.ConvBNReLU.bn", "InferMobileNetV2.ConvBNReLU.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferMobileNetV2.InvertedResidual.__init__": [[51, 76], ["torch.nn.Module.__init__", "layers.extend", "torch.nn.Sequential", "len", "len", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "stride", ",", "expand_ratio", ",", "additive", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", ",", "\"invalid stride : {:}\"", ".", "format", "(", "stride", ")", "\n", "assert", "len", "(", "channels", ")", "in", "[", "2", ",", "3", "]", ",", "\"invalid channels : {:}\"", ".", "format", "(", "channels", ")", "\n", "\n", "if", "len", "(", "channels", ")", "==", "2", ":", "\n", "            ", "layers", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "layers", "=", "[", "ConvBNReLU", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", "]", "\n", "", "layers", ".", "extend", "(", "\n", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "channels", "[", "-", "2", "]", ",", "channels", "[", "-", "2", "]", ",", "3", ",", "stride", ",", "channels", "[", "-", "2", "]", ")", ",", "\n", "# pw-linear", "\n", "ConvBNReLU", "(", "channels", "[", "-", "2", "]", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "1", ",", "1", ",", "True", ",", "False", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "additive", "=", "additive", "\n", "if", "self", ".", "additive", "and", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", ":", "\n", "            ", "self", ".", "shortcut", "=", "ConvBNReLU", "(", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "1", ",", "1", ",", "True", ",", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "", "self", ".", "out_dim", "=", "channels", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferMobileNetV2.InvertedResidual.forward": [[77, 84], ["InferMobileNetV2.InvertedResidual.conv", "InferMobileNetV2.InvertedResidual.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "# if self.additive: return additive_func(out, x)", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "return", "out", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferMobileNetV2.InferMobileNetV2.__init__": [[87, 166], ["torch.nn.Module.__init__", "zip", "SharedUtils.parse_channel_info", "enumerate", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "InferMobileNetV2.InferMobileNetV2.apply", "len", "len", "len", "len", "InferMobileNetV2.ConvBNReLU", "range", "InferMobileNetV2.ConvBNReLU", "len", "len", "torch.nn.Dropout", "torch.nn.Linear", "block", "features.append", "len", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.shared_utils.parse_channel_info"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "xchannels", ",", "xblocks", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "InferMobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "inverted_residual_setting", "=", "[", "\n", "# t, c,  n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "assert", "len", "(", "inverted_residual_setting", ")", "==", "len", "(", "\n", "xblocks", "\n", ")", ",", "\"invalid number of layers : {:} vs {:}\"", ".", "format", "(", "\n", "len", "(", "inverted_residual_setting", ")", ",", "len", "(", "xblocks", ")", "\n", ")", "\n", "for", "block_num", ",", "ir_setting", "in", "zip", "(", "xblocks", ",", "inverted_residual_setting", ")", ":", "\n", "            ", "assert", "block_num", "<=", "ir_setting", "[", "2", "]", ",", "\"{:} vs {:}\"", ".", "format", "(", "\n", "block_num", ",", "ir_setting", "\n", ")", "\n", "", "xchannels", "=", "parse_channel_info", "(", "xchannels", ")", "\n", "# for i, chs in enumerate(xchannels):", "\n", "#  if i > 0: assert chs[0] == xchannels[i-1][-1], 'Layer[{:}] is invalid {:} vs {:}'.format(i, xchannels[i-1], chs)", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "message", "=", "\"InferMobileNetV2 : xblocks={:}\"", ".", "format", "(", "xblocks", ")", "\n", "# building first layer", "\n", "features", "=", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", "[", "0", "]", ",", "xchannels", "[", "0", "]", "[", "1", "]", ",", "3", ",", "2", ",", "1", ")", "]", "\n", "last_channel_idx", "=", "1", "\n", "\n", "# building inverted residual blocks", "\n", "for", "stage", ",", "(", "t", ",", "c", ",", "n", ",", "s", ")", "in", "enumerate", "(", "inverted_residual_setting", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "additv", "=", "True", "if", "i", ">", "0", "else", "False", "\n", "module", "=", "block", "(", "self", ".", "xchannels", "[", "last_channel_idx", "]", ",", "stride", ",", "t", ",", "additv", ")", "\n", "features", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, Cs={:}, stride={:}, expand={:}, original-C={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "i", ",", "\n", "n", ",", "\n", "len", "(", "features", ")", ",", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", ",", "\n", "stride", ",", "\n", "t", ",", "\n", "c", ",", "\n", ")", "\n", "last_channel_idx", "+=", "1", "\n", "if", "i", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "\n", "                    ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "                        ", "last_channel_idx", "+=", "1", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "0", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "# building last several layers", "\n", "", "", "", "features", ".", "append", "(", "\n", "ConvBNReLU", "(", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "0", "]", ",", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "1", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "1", ",", "\n", ")", "\n", ")", "\n", "assert", "last_channel_idx", "+", "2", "==", "len", "(", "self", ".", "xchannels", ")", ",", "\"{:} vs {:}\"", ".", "format", "(", "\n", "last_channel_idx", ",", "len", "(", "self", ".", "xchannels", ")", "\n", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "1", "]", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "# weight initialization", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferMobileNetV2.InferMobileNetV2.get_message": [[167, 169], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferMobileNetV2.InferMobileNetV2.forward": [[170, 175], ["InferMobileNetV2.InferMobileNetV2.features", "InferMobileNetV2.InferMobileNetV2.mean", "InferMobileNetV2.InferMobileNetV2.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "inputs", ")", "\n", "vectors", "=", "features", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "predicts", "=", "self", ".", "classifier", "(", "vectors", ")", "\n", "return", "features", ",", "predicts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.ConvBNReLU.__init__": [[13, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "\n", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "if", "has_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.ConvBNReLU.forward": [[40, 56], ["InferImagenetResNet.ConvBNReLU.conv", "InferImagenetResNet.ConvBNReLU.avg", "InferImagenetResNet.ConvBNReLU.bn", "InferImagenetResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.ResNetBasicblock.__init__": [[62, 114], ["torch.Module.__init__", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "\n", "iCs", ",", "list", "\n", ")", ",", "\"invalid type of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "\"invalid lengths of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "1", "]", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "# self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.ResNetBasicblock.forward": [[115, 125], ["InferImagenetResNet.ResNetBasicblock.conv_a", "InferImagenetResNet.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferImagenetResNet.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.ResNetBottleneck.__init__": [[131, 186], ["torch.Module.__init__", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "\n", "iCs", ",", "list", "\n", ")", ",", "\"invalid type of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "\"invalid lengths of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "1", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "3", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "3", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "# self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.ResNetBottleneck.forward": [[187, 199], ["InferImagenetResNet.ResNetBottleneck.conv_1x1", "InferImagenetResNet.ResNetBottleneck.conv_3x3", "InferImagenetResNet.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferImagenetResNet.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.InferImagenetResNet.__init__": [[202, 313], ["torch.Module.__init__", "InferImagenetResNet.InferImagenetResNet.layers.append", "enumerate", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "InferImagenetResNet.InferImagenetResNet.apply", "len", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.MaxPool2d", "torch.MaxPool2d", "range", "len", "len", "InferImagenetResNet.InferImagenetResNet.modules", "ValueError", "sum", "sum", "block", "InferImagenetResNet.InferImagenetResNet.layers.append", "isinstance", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "range", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block_name", ",", "\n", "layers", ",", "\n", "xblocks", ",", "\n", "xchannels", ",", "\n", "deep_stem", ",", "\n", "num_classes", ",", "\n", "zero_init_residual", ",", "\n", ")", ":", "\n", "        ", "super", "(", "InferImagenetResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"BasicBlock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "", "elif", "block_name", "==", "\"Bottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "len", "(", "\n", "layers", "\n", ")", ",", "\"invalid layers : {:} vs xblocks : {:}\"", ".", "format", "(", "layers", ",", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "\"InferImagenetResNet : Depth : {:} -> {:}, Layers for each block : {:}\"", ".", "format", "(", "\n", "sum", "(", "layers", ")", "*", "block", ".", "num_conv", ",", "sum", "(", "xblocks", ")", "*", "block", ".", "num_conv", ",", "xblocks", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "if", "not", "deep_stem", ":", "\n", "            ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "xchannels", "[", "0", "]", ",", "\n", "xchannels", "[", "1", "]", ",", "\n", "7", ",", "\n", "2", ",", "\n", "3", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "last_channel_idx", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "xchannels", "[", "0", "]", ",", "\n", "xchannels", "[", "1", "]", ",", "\n", "3", ",", "\n", "2", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", ",", "\n", "ConvBNReLU", "(", "\n", "xchannels", "[", "1", "]", ",", "\n", "xchannels", "[", "2", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "last_channel_idx", "=", "2", "\n", "", "self", ".", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "for", "stage", ",", "layer_blocks", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iCs", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "                    ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "iL", "+", "1", ",", "layer_blocks", ")", ":", "\n", "                        ", "last_channel_idx", "+=", "num_conv", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "", "", "", "assert", "last_channel_idx", "+", "1", "==", "len", "(", "self", ".", "xchannels", ")", ",", "\"{:} vs {:}\"", ".", "format", "(", "\n", "last_channel_idx", ",", "len", "(", "self", ".", "xchannels", ")", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.InferImagenetResNet.get_message": [[314, 316], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferImagenetResNet.InferImagenetResNet.forward": [[317, 325], ["enumerate", "InferImagenetResNet.InferImagenetResNet.avgpool", "features.view.view.view", "InferImagenetResNet.InferImagenetResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.__init__": [[11, 40], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "ValueError", "len", "torch.Conv2d", "torch.BatchNorm2d", "zip", "InferTinyCellNet.DynamicShapeTinyNet.cells.append", "torch.BatchNorm2d", "torch.ReLU", "len", "models.cell_operations.ResNetBasicblock", "models.cell_infers.cells.InferCell", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ":", "List", "[", "int", "]", ",", "genotype", ":", "Any", ",", "num_classes", ":", "int", ")", ":", "\n", "        ", "super", "(", "DynamicShapeTinyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_channels", "=", "channels", "\n", "if", "len", "(", "channels", ")", "%", "3", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid number of layers : {:}\"", ".", "format", "(", "len", "(", "channels", ")", ")", ")", "\n", "", "self", ".", "_num_stage", "=", "N", "=", "len", "(", "channels", ")", "//", "3", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channels", "[", "0", "]", ")", ",", "\n", ")", "\n", "\n", "# layer_channels   = [C    ] * N + [C*2 ] + [C*2  ] * N + [C*4 ] + [C*4  ] * N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "c_prev", "=", "channels", "[", "0", "]", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "c_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "channels", ",", "layer_reductions", ")", ")", ":", "\n", "            ", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "c_prev", ",", "c_curr", ",", "2", ",", "True", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "InferCell", "(", "genotype", ",", "c_prev", ",", "c_curr", ",", "1", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "c_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_num_layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "c_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "c_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.get_message": [[41, 48], ["InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "\"\\n {:02d}/{:02d} :: {:}\"", ".", "format", "(", "\n", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", "\n", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr": [[49, 52], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}(C={_channels}, N={_num_stage}, L={_num_layer})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.forward": [[54, 65], ["InferTinyCellNet.DynamicShapeTinyNet.stem", "enumerate", "InferTinyCellNet.DynamicShapeTinyNet.lastact", "InferTinyCellNet.DynamicShapeTinyNet.global_pooling", "out.view.view.view", "InferTinyCellNet.DynamicShapeTinyNet.classifier", "cell", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.shared_utils.parse_channel_info": [[1, 6], ["xstring.split", "x.split", "int"], "function", ["None"], ["def", "parse_channel_info", "(", "xstring", ")", ":", "\n", "    ", "blocks", "=", "xstring", ".", "split", "(", "\" \"", ")", "\n", "blocks", "=", "[", "x", ".", "split", "(", "\"-\"", ")", "for", "x", "in", "blocks", "]", "\n", "blocks", "=", "[", "[", "int", "(", "_", ")", "for", "_", "in", "x", "]", "for", "x", "in", "blocks", "]", "\n", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.ConvBNReLU.__init__": [[10, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "\n", "            ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "None", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "nIn", ",", "\n", "nOut", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "if", "has_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.ConvBNReLU.forward": [[37, 53], ["InferCifarResNet_width.ConvBNReLU.conv", "InferCifarResNet_width.ConvBNReLU.avg", "InferCifarResNet_width.ConvBNReLU.bn", "InferCifarResNet_width.ConvBNReLU.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "            ", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "inputs", "\n", "", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "conv", "\n", "", "if", "self", ".", "relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.ResNetBasicblock.__init__": [[59, 111], ["torch.Module.__init__", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "\n", "iCs", ",", "list", "\n", ")", ",", "\"invalid type of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "\"invalid lengths of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "1", "]", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "# self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.ResNetBasicblock.forward": [[112, 122], ["InferCifarResNet_width.ResNetBasicblock.conv_a", "InferCifarResNet_width.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet_width.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.ResNetBottleneck.__init__": [[128, 183], ["torch.Module.__init__", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"invalid stride {:}\"", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "\n", "iCs", ",", "list", "\n", ")", ",", "\"invalid type of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "\"invalid lengths of iCs : {:}\"", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", "\n", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "1", "]", ",", "\n", "iCs", "[", "2", "]", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "3", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "True", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "            ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "\n", "iCs", "[", "0", "]", ",", "\n", "iCs", "[", "3", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "False", ",", "\n", "has_relu", "=", "False", ",", "\n", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "# self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.ResNetBottleneck.forward": [[184, 196], ["InferCifarResNet_width.ResNetBottleneck.conv_1x1", "InferCifarResNet_width.ResNetBottleneck.conv_3x3", "InferCifarResNet_width.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet_width.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.__init__": [[199, 266], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet_width.InferWidthCifarResNet.apply", "range", "InferCifarResNet_width.InferWidthCifarResNet.modules", "ValueError", "InferCifarResNet_width.ConvBNReLU", "block", "InferCifarResNet_width.InferWidthCifarResNet.layers.append", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "xchannels", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "        ", "super", "(", "InferWidthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "\"ResNetBasicblock\"", ":", "\n", "            ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "\"depth should be one of 20, 32, 44, 56, 110\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "\"ResNetBottleneck\"", ":", "\n", "            ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "\"depth should be one of 164\"", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid block : {:}\"", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "(", "\n", "\"InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}\"", ".", "format", "(", "\n", "depth", ",", "layer_blocks", "\n", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ConvBNReLU", "(", "\n", "xchannels", "[", "0", "]", ",", "\n", "xchannels", "[", "1", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "False", ",", "\n", "has_avg", "=", "False", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "last_channel_idx", "=", "1", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "                ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "\n", "stage", ",", "\n", "iL", ",", "\n", "layer_blocks", ",", "\n", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "\n", "iCs", ",", "\n", "module", ".", "out_dim", ",", "\n", "stride", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.get_message": [[267, 269], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.forward": [[270, 278], ["enumerate", "InferCifarResNet_width.InferWidthCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet_width.InferWidthCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.weight_initializers.init_net": [[19, 41], ["net.apply", "net.apply", "net.apply", "net.apply", "net.apply", "NotImplementedError", "net.apply", "NotImplementedError"], "function", ["None"], ["def", "init_net", "(", "net", ",", "w_type", ",", "b_type", ")", ":", "\n", "    ", "if", "w_type", "==", "\"none\"", ":", "\n", "        ", "pass", "\n", "", "elif", "w_type", "==", "\"xavier\"", ":", "\n", "        ", "net", ".", "apply", "(", "init_weights_vs", ")", "\n", "", "elif", "w_type", "==", "\"kaiming\"", ":", "\n", "        ", "net", ".", "apply", "(", "init_weights_he", ")", "\n", "", "elif", "w_type", "==", "\"zero\"", ":", "\n", "        ", "net", ".", "apply", "(", "init_weights_zero", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"init_type={w_type} is not supported.\"", ")", "\n", "\n", "", "if", "b_type", "==", "\"none\"", ":", "\n", "        ", "pass", "\n", "", "elif", "b_type", "==", "\"xavier\"", ":", "\n", "        ", "net", ".", "apply", "(", "init_bias_vs", ")", "\n", "", "elif", "b_type", "==", "\"kaiming\"", ":", "\n", "        ", "net", ".", "apply", "(", "init_bias_he", ")", "\n", "", "elif", "b_type", "==", "\"zero\"", ":", "\n", "        ", "net", ".", "apply", "(", "init_bias_zero", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"init_type={b_type} is not supported.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.weight_initializers.init_weights_vs": [[43, 46], ["torch.init.xavier_normal_", "type", "type"], "function", ["None"], ["", "", "def", "init_weights_vs", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", "or", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.weight_initializers.init_bias_vs": [[48, 52], ["type", "type", "torch.init.xavier_normal_"], "function", ["None"], ["", "", "def", "init_bias_vs", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", "or", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "        ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.weight_initializers.init_weights_he": [[54, 57], ["torch.init.kaiming_normal_", "type", "type"], "function", ["None"], ["", "", "", "def", "init_weights_he", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", "or", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.weight_initializers.init_bias_he": [[59, 63], ["type", "type", "torch.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "init_bias_he", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", "or", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "        ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.weight_initializers.init_weights_zero": [[65, 68], ["m.weight.data.fill_", "type", "type"], "function", ["None"], ["", "", "", "def", "init_weights_zero", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", "or", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.weight_initializers.init_bias_zero": [[70, 74], ["type", "type", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "init_bias_zero", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", "or", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "        ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_some_data": [[24, 34], ["iter", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.to.to", "targets.to.to", "traindata.append", "next"], "function", ["None"], ["def", "get_some_data", "(", "train_dataloader", ",", "num_batches", ",", "device", ")", ":", "\n", "    ", "traindata", "=", "[", "]", "\n", "dataloader_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "for", "_", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "traindata", ".", "append", "(", "next", "(", "dataloader_iter", ")", ")", "\n", "", "inputs", "=", "torch", ".", "cat", "(", "[", "a", "for", "a", ",", "_", "in", "traindata", "]", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "[", "b", "for", "_", ",", "b", "in", "traindata", "]", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_some_data_grasp": [[36, 57], ["dict", "iter", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "next", "range", "range", "range", "torch.cat().view().to.item", "datas[].append", "labels[].append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "get_some_data_grasp", "(", "train_dataloader", ",", "num_classes", ",", "samples_per_class", ",", "device", ")", ":", "\n", "    ", "datas", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "labels", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "mark", "=", "dict", "(", ")", "\n", "dataloader_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "while", "True", ":", "\n", "        ", "inputs", ",", "targets", "=", "next", "(", "dataloader_iter", ")", "\n", "for", "idx", "in", "range", "(", "inputs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x", ",", "y", "=", "inputs", "[", "idx", ":", "idx", "+", "1", "]", ",", "targets", "[", "idx", ":", "idx", "+", "1", "]", "\n", "category", "=", "y", ".", "item", "(", ")", "\n", "if", "len", "(", "datas", "[", "category", "]", ")", "==", "samples_per_class", ":", "\n", "                ", "mark", "[", "category", "]", "=", "True", "\n", "continue", "\n", "", "datas", "[", "category", "]", ".", "append", "(", "x", ")", "\n", "labels", "[", "category", "]", ".", "append", "(", "y", ")", "\n", "", "if", "len", "(", "mark", ")", "==", "num_classes", ":", "\n", "            ", "break", "\n", "\n", "", "", "x", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "_", ",", "0", ")", "for", "_", "in", "datas", "]", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "_", ")", "for", "_", "in", "labels", "]", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_layer_metric_array": [[59, 69], ["net.modules", "hasattr", "isinstance", "isinstance", "metric_array.append", "metric"], "function", ["None"], ["", "def", "get_layer_metric_array", "(", "net", ",", "metric", ",", "mode", ")", ":", "\n", "    ", "metric_array", "=", "[", "]", "\n", "\n", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "mode", "==", "\"channel\"", "and", "hasattr", "(", "layer", ",", "\"dont_ch_prune\"", ")", ":", "\n", "            ", "continue", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "metric_array", ".", "append", "(", "metric", "(", "layer", ")", ")", "\n", "\n", "", "", "return", "metric_array", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.reshape_elements": [[71, 87], ["zip", "type", "zip", "p_utils.reshape_elements.broadcast_val"], "function", ["None"], ["", "def", "reshape_elements", "(", "elements", ",", "shapes", ",", "device", ")", ":", "\n", "    ", "def", "broadcast_val", "(", "elements", ",", "shapes", ")", ":", "\n", "        ", "ret_grads", "=", "[", "]", "\n", "for", "e", ",", "sh", "in", "zip", "(", "elements", ",", "shapes", ")", ":", "\n", "            ", "ret_grads", ".", "append", "(", "\n", "torch", ".", "stack", "(", "[", "torch", ".", "Tensor", "(", "sh", ")", ".", "fill_", "(", "v", ")", "for", "v", "in", "e", "]", ",", "dim", "=", "0", ")", ".", "to", "(", "device", ")", "\n", ")", "\n", "", "return", "ret_grads", "\n", "\n", "", "if", "type", "(", "elements", "[", "0", "]", ")", "==", "list", ":", "\n", "        ", "outer", "=", "[", "]", "\n", "for", "e", ",", "sh", "in", "zip", "(", "elements", ",", "shapes", ")", ":", "\n", "            ", "outer", ".", "append", "(", "broadcast_val", "(", "e", ",", "sh", ")", ")", "\n", "", "return", "outer", "\n", "", "else", ":", "\n", "        ", "return", "broadcast_val", "(", "elements", ",", "shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.count_parameters": [[89, 91], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.predictive.no_op": [[27, 29], ["None"], "function", ["None"], ["def", "no_op", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.predictive.copynet": [[31, 38], ["copy.deepcopy", "copy.deepcopy.modules", "isinstance", "isinstance", "types.MethodType"], "function", ["None"], ["", "def", "copynet", "(", "self", ",", "bn", ")", ":", "\n", "    ", "net", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "if", "bn", "==", "False", ":", "\n", "        ", "for", "l", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "l", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "l", ".", "forward", "=", "types", ".", "MethodType", "(", "no_op", ",", "l", ")", "\n", "", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.predictive.find_measures_arrays": [[40, 112], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "net_orig.to().train.cpu", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "net_orig.to().train.to().train", "hasattr", "types.MethodType", "p_utils.get_some_data", "p_utils.get_some_data_grasp", "NotImplementedError", "net_orig.to().train.to", "measures.calc_measure", "str", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "ValueError"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_some_data", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_some_data_grasp", "home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.calc_measure"], ["", "def", "find_measures_arrays", "(", "\n", "net_orig", ",", "\n", "trainloader", ",", "\n", "dataload_info", ",", "\n", "device", ",", "\n", "measure_names", "=", "None", ",", "\n", "loss_fn", "=", "F", ".", "cross_entropy", ",", "\n", ")", ":", "\n", "    ", "if", "measure_names", "is", "None", ":", "\n", "        ", "measure_names", "=", "measures", ".", "available_measures", "\n", "\n", "", "dataload", ",", "num_imgs_or_batches", ",", "num_classes", "=", "dataload_info", "\n", "\n", "if", "not", "hasattr", "(", "net_orig", ",", "\"get_prunable_copy\"", ")", ":", "\n", "        ", "net_orig", ".", "get_prunable_copy", "=", "types", ".", "MethodType", "(", "copynet", ",", "net_orig", ")", "\n", "\n", "# move to cpu to free up mem", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "net_orig", "=", "net_orig", ".", "cpu", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# given 1 minibatch of data", "\n", "if", "dataload", "==", "\"random\"", ":", "\n", "        ", "inputs", ",", "targets", "=", "get_some_data", "(", "\n", "trainloader", ",", "num_batches", "=", "num_imgs_or_batches", ",", "device", "=", "device", "\n", ")", "\n", "", "elif", "dataload", "==", "\"grasp\"", ":", "\n", "        ", "inputs", ",", "targets", "=", "get_some_data_grasp", "(", "\n", "trainloader", ",", "\n", "num_classes", ",", "\n", "samples_per_class", "=", "num_imgs_or_batches", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"dataload {dataload} is not supported\"", ")", "\n", "\n", "", "done", ",", "ds", "=", "False", ",", "1", "\n", "measure_values", "=", "{", "}", "\n", "\n", "while", "not", "done", ":", "\n", "        ", "try", ":", "\n", "            ", "for", "measure_name", "in", "measure_names", ":", "\n", "                ", "if", "measure_name", "not", "in", "measure_values", ":", "\n", "                    ", "val", "=", "measures", ".", "calc_measure", "(", "\n", "measure_name", ",", "\n", "net_orig", ",", "\n", "device", ",", "\n", "inputs", ",", "\n", "targets", ",", "\n", "loss_fn", "=", "loss_fn", ",", "\n", "split_data", "=", "ds", ",", "\n", ")", "\n", "measure_values", "[", "measure_name", "]", "=", "val", "\n", "\n", "", "", "done", "=", "True", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "if", "\"out of memory\"", "in", "str", "(", "e", ")", ":", "\n", "                ", "done", "=", "False", "\n", "if", "ds", "==", "inputs", ".", "shape", "[", "0", "]", "//", "2", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f\"Can't split data anymore, but still unable to run. Something is wrong\"", "\n", ")", "\n", "", "ds", "+=", "1", "\n", "while", "inputs", ".", "shape", "[", "0", "]", "%", "ds", "!=", "0", ":", "\n", "                    ", "ds", "+=", "1", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "print", "(", "f\"Caught CUDA OOM, retrying with data split into {ds} parts\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "\n", "", "", "", "net_orig", "=", "net_orig", ".", "to", "(", "device", ")", ".", "train", "(", ")", "\n", "return", "measure_values", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.predictive.find_measures": [[114, 154], ["find_measures_arrays.items", "range", "sum.item", "predictive.find_measures_arrays", "len", "torch.sum", "torch.sum", "torch.sum", "predictive.find_measures.sum_arr"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.pruners.predictive.find_measures_arrays"], ["", "def", "find_measures", "(", "\n", "net_orig", ",", "# neural network", "\n", "dataloader", ",", "# a data loader (typically for training data)", "\n", "dataload_info", ",", "# a tuple with (dataload_type = {random, grasp}, number_of_batches_for_random_or_images_per_class_for_grasp, number of classes)", "\n", "device", ",", "# GPU/CPU device used", "\n", "loss_fn", "=", "F", ".", "cross_entropy", ",", "# loss function to use within the zero-cost metrics", "\n", "measure_names", "=", "None", ",", "# an array of measure names to compute, if left blank, all measures are computed by default", "\n", "measures_arr", "=", "None", ",", "\n", ")", ":", "# [not used] if the measures are already computed but need to be summarized, pass them here", "\n", "\n", "# Given a neural net", "\n", "# and some information about the input data (dataloader)", "\n", "# and loss function (loss_fn)", "\n", "# this function returns an array of zero-cost proxy metrics.", "\n", "\n", "    ", "def", "sum_arr", "(", "arr", ")", ":", "\n", "        ", "sum", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "arr", ")", ")", ":", "\n", "            ", "sum", "+=", "torch", ".", "sum", "(", "arr", "[", "i", "]", ")", "\n", "", "return", "sum", ".", "item", "(", ")", "\n", "\n", "", "if", "measures_arr", "is", "None", ":", "\n", "        ", "measures_arr", "=", "find_measures_arrays", "(", "\n", "net_orig", ",", "\n", "dataloader", ",", "\n", "dataload_info", ",", "\n", "device", ",", "\n", "loss_fn", "=", "loss_fn", ",", "\n", "measure_names", "=", "measure_names", ",", "\n", ")", "\n", "\n", "# measure_score_list = {}", "\n", "", "for", "k", ",", "v", "in", "measures_arr", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "\"jacov\"", ":", "\n", "            ", "measure_score", "=", "v", "\n", "", "else", ":", "\n", "            ", "measure_score", "=", "sum_arr", "(", "v", ")", "\n", "# measure_score_list[k] = measure_score", "\n", "# return measure_score, measure_score_list", "\n", "", "", "return", "measure_score", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.synflow.compute_synflow_per_weight": [[22, 69], ["measure", "measure", "torch.no_grad", "torch.no_grad", "synflow.compute_synflow_per_weight.linearize"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure", "home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure"], ["@", "measure", "(", "\"synflow\"", ",", "bn", "=", "False", ",", "mode", "=", "\"param\"", ")", "\n", "@", "measure", "(", "\"synflow_bn\"", ",", "bn", "=", "True", ",", "mode", "=", "\"param\"", ")", "\n", "def", "compute_synflow_per_weight", "(", "net", ",", "inputs", ",", "targets", ",", "mode", ",", "split_data", "=", "1", ",", "loss_fn", "=", "None", ")", ":", "\n", "\n", "    ", "device", "=", "inputs", ".", "device", "\n", "\n", "# convert params to their abs. Keep sign for converting it back.", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "linearize", "(", "net", ")", ":", "\n", "        ", "signs", "=", "{", "}", "\n", "for", "name", ",", "param", "in", "net", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "signs", "[", "name", "]", "=", "torch", ".", "sign", "(", "param", ")", "\n", "param", ".", "abs_", "(", ")", "\n", "", "return", "signs", "\n", "\n", "# convert to orig values", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "nonlinearize", "(", "net", ",", "signs", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "net", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "\"weight_mask\"", "not", "in", "name", ":", "\n", "                ", "param", ".", "mul_", "(", "signs", "[", "name", "]", ")", "\n", "\n", "# keep signs of all params", "\n", "", "", "", "signs", "=", "linearize", "(", "net", ".", "double", "(", ")", ")", "\n", "\n", "# Compute gradients with input of 1s", "\n", "net", ".", "zero_grad", "(", ")", "\n", "net", ".", "double", "(", ")", "\n", "input_dim", "=", "list", "(", "inputs", "[", "0", ",", ":", "]", ".", "shape", ")", "\n", "# inputs = torch.ones([1] + input_dim).to(device)", "\n", "inputs", "=", "torch", ".", "ones", "(", "[", "1", "]", "+", "input_dim", ")", ".", "double", "(", ")", ".", "to", "(", "device", ")", "\n", "output", "=", "net", ".", "forward", "(", "inputs", ")", "\n", "torch", ".", "sum", "(", "output", ")", ".", "backward", "(", ")", "\n", "\n", "# select the gradients that we want to use for search/prune", "\n", "def", "synflow", "(", "layer", ")", ":", "\n", "        ", "if", "layer", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "            ", "return", "torch", ".", "abs", "(", "layer", ".", "weight", "*", "layer", ".", "weight", ".", "grad", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros_like", "(", "layer", ".", "weight", ")", "\n", "\n", "", "", "grads_abs", "=", "get_layer_metric_array", "(", "net", ",", "synflow", ",", "mode", ")", "\n", "\n", "# apply signs of all params", "\n", "nonlinearize", "(", "net", ",", "signs", ")", "\n", "\n", "return", "grads_abs", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.grasp.compute_grasp_per_weight": [[25, 89], ["measure", "net.modules", "net.zero_grad", "range", "range", "p_utils.get_layer_metric_array", "range", "loss_fn", "torch.grad", "net.modules", "z.backward", "isinstance", "isinstance", "weights.append", "layer.weight.requires_grad_", "loss_fn", "torch.grad", "net.forward", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "net.forward", "list", "range", "isinstance", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_layer_metric_array", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward"], ["@", "measure", "(", "\"grasp\"", ",", "bn", "=", "True", ",", "mode", "=", "\"param\"", ")", "\n", "def", "compute_grasp_per_weight", "(", "\n", "net", ",", "inputs", ",", "targets", ",", "mode", ",", "loss_fn", ",", "T", "=", "1", ",", "num_iters", "=", "1", ",", "split_data", "=", "1", "\n", ")", ":", "\n", "\n", "# get all applicable weights", "\n", "    ", "weights", "=", "[", "]", "\n", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "weights", ".", "append", "(", "layer", ".", "weight", ")", "\n", "layer", ".", "weight", ".", "requires_grad_", "(", "True", ")", "# TODO isn't this already true?", "\n", "\n", "# NOTE original code had some input/target splitting into 2", "\n", "# I am guessing this was because of GPU mem limit", "\n", "", "", "net", ".", "zero_grad", "(", ")", "\n", "N", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "for", "sp", "in", "range", "(", "split_data", ")", ":", "\n", "        ", "st", "=", "sp", "*", "N", "//", "split_data", "\n", "en", "=", "(", "sp", "+", "1", ")", "*", "N", "//", "split_data", "\n", "\n", "# forward/grad pass #1", "\n", "grad_w", "=", "None", "\n", "for", "_", "in", "range", "(", "num_iters", ")", ":", "\n", "# TODO get new data, otherwise num_iters is useless!", "\n", "            ", "outputs", "=", "net", ".", "forward", "(", "inputs", "[", "st", ":", "en", "]", ")", "/", "T", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", "[", "st", ":", "en", "]", ")", "\n", "grad_w_p", "=", "autograd", ".", "grad", "(", "loss", ",", "weights", ",", "allow_unused", "=", "True", ")", "\n", "if", "grad_w", "is", "None", ":", "\n", "                ", "grad_w", "=", "list", "(", "grad_w_p", ")", "\n", "", "else", ":", "\n", "                ", "for", "idx", "in", "range", "(", "len", "(", "grad_w", ")", ")", ":", "\n", "                    ", "grad_w", "[", "idx", "]", "+=", "grad_w_p", "[", "idx", "]", "\n", "\n", "", "", "", "", "for", "sp", "in", "range", "(", "split_data", ")", ":", "\n", "        ", "st", "=", "sp", "*", "N", "//", "split_data", "\n", "en", "=", "(", "sp", "+", "1", ")", "*", "N", "//", "split_data", "\n", "\n", "# forward/grad pass #2", "\n", "outputs", "=", "net", ".", "forward", "(", "inputs", "[", "st", ":", "en", "]", ")", "/", "T", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", "[", "st", ":", "en", "]", ")", "\n", "grad_f", "=", "autograd", ".", "grad", "(", "loss", ",", "weights", ",", "create_graph", "=", "True", ",", "allow_unused", "=", "True", ")", "\n", "\n", "# accumulate gradients computed in previous step and call backwards", "\n", "z", ",", "count", "=", "0", ",", "0", "\n", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "grad_w", "[", "count", "]", "is", "not", "None", ":", "\n", "                    ", "z", "+=", "(", "grad_w", "[", "count", "]", ".", "data", "*", "grad_f", "[", "count", "]", ")", ".", "sum", "(", ")", "\n", "", "count", "+=", "1", "\n", "", "", "z", ".", "backward", "(", ")", "\n", "\n", "# compute final sensitivity metric and put in grads", "\n", "", "def", "grasp", "(", "layer", ")", ":", "\n", "        ", "if", "layer", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "            ", "return", "-", "layer", ".", "weight", ".", "data", "*", "layer", ".", "weight", ".", "grad", "# -theta_q Hg", "\n", "# NOTE in the grasp code they take the *bottom* (1-p)% of values", "\n", "# but we take the *top* (1-p)%, therefore we remove the -ve sign", "\n", "# EDIT accuracy seems to be negatively correlated with this metric, so we add -ve sign here!", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros_like", "(", "layer", ".", "weight", ")", "\n", "\n", "", "", "grads", "=", "get_layer_metric_array", "(", "net", ",", "grasp", ",", "mode", ")", "\n", "\n", "return", "grads", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.jacov.get_batch_jacobian": [[22, 35], ["x.requires_grad_", "range", "x.grad.detach", "x.requires_grad_", "net", "net.backward", "target.detach", "torch.ones_like"], "function", ["None"], ["def", "get_batch_jacobian", "(", "net", ",", "x", ",", "target", ",", "device", ",", "split_data", ")", ":", "\n", "    ", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "N", "=", "x", ".", "shape", "[", "0", "]", "\n", "for", "sp", "in", "range", "(", "split_data", ")", ":", "\n", "        ", "st", "=", "sp", "*", "N", "//", "split_data", "\n", "en", "=", "(", "sp", "+", "1", ")", "*", "N", "//", "split_data", "\n", "y", "=", "net", "(", "x", "[", "st", ":", "en", "]", ")", "\n", "y", ".", "backward", "(", "torch", ".", "ones_like", "(", "y", ")", ")", "\n", "\n", "", "jacob", "=", "x", ".", "grad", ".", "detach", "(", ")", "\n", "x", ".", "requires_grad_", "(", "False", ")", "\n", "return", "jacob", ",", "target", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.jacov.eval_score": [[37, 42], ["numpy.corrcoef", "numpy.linalg.eig", "numpy.sum", "numpy.log"], "function", ["None"], ["", "def", "eval_score", "(", "jacob", ",", "labels", "=", "None", ")", ":", "\n", "    ", "corrs", "=", "np", ".", "corrcoef", "(", "jacob", ")", "\n", "v", ",", "_", "=", "np", ".", "linalg", ".", "eig", "(", "corrs", ")", "\n", "k", "=", "1e-5", "\n", "return", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "v", "+", "k", ")", "+", "1.0", "/", "(", "v", "+", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.jacov.compute_jacob_cov": [[44, 62], ["measure", "net.zero_grad", "jacov.get_batch_jacobian", "jacobs.reshape().cpu().numpy.reshape().cpu().numpy", "jacov.eval_score", "jacobs.reshape().cpu().numpy.reshape().cpu", "print", "jacobs.reshape().cpu().numpy.reshape", "jacobs.reshape().cpu().numpy.size"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure", "home.repos.pwc.inspect_result.gideonfr_emprox.measures.jacov.get_batch_jacobian", "home.repos.pwc.inspect_result.gideonfr_emprox.measures.jacov.eval_score"], ["", "@", "measure", "(", "\"jacov\"", ",", "bn", "=", "True", ")", "\n", "def", "compute_jacob_cov", "(", "net", ",", "inputs", ",", "targets", ",", "split_data", "=", "1", ",", "loss_fn", "=", "None", ")", ":", "\n", "    ", "device", "=", "inputs", ".", "device", "\n", "# Compute gradients (but don't apply them)", "\n", "net", ".", "zero_grad", "(", ")", "\n", "\n", "jacobs", ",", "labels", "=", "get_batch_jacobian", "(", "\n", "net", ",", "inputs", ",", "targets", ",", "device", ",", "split_data", "=", "split_data", "\n", ")", "\n", "jacobs", "=", "jacobs", ".", "reshape", "(", "jacobs", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "jc", "=", "eval_score", "(", "jacobs", ",", "labels", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "jc", "=", "np", ".", "nan", "\n", "\n", "", "return", "jc", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.grad_norm.get_grad_norm_arr": [[25, 46], ["measure", "net.zero_grad", "range", "net.forward", "loss_fn", "loss_fn.backward", "p_utils.get_layer_metric_array", "l.weight.grad.norm", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_layer_metric_array"], ["@", "measure", "(", "\"grad_norm\"", ",", "bn", "=", "True", ")", "\n", "def", "get_grad_norm_arr", "(", "net", ",", "inputs", ",", "targets", ",", "loss_fn", ",", "split_data", "=", "1", ",", "skip_grad", "=", "False", ")", ":", "\n", "    ", "net", ".", "zero_grad", "(", ")", "\n", "N", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "for", "sp", "in", "range", "(", "split_data", ")", ":", "\n", "        ", "st", "=", "sp", "*", "N", "//", "split_data", "\n", "en", "=", "(", "sp", "+", "1", ")", "*", "N", "//", "split_data", "\n", "\n", "outputs", "=", "net", ".", "forward", "(", "inputs", "[", "st", ":", "en", "]", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", "[", "st", ":", "en", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "grad_norm_arr", "=", "get_layer_metric_array", "(", "\n", "net", ",", "\n", "lambda", "l", ":", "l", ".", "weight", ".", "grad", ".", "norm", "(", ")", "\n", "if", "l", ".", "weight", ".", "grad", "is", "not", "None", "\n", "else", "torch", ".", "zeros_like", "(", "l", ".", "weight", ")", ",", "\n", "mode", "=", "\"param\"", ",", "\n", ")", "\n", "\n", "", "return", "grad_norm_arr", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.snip.snip_forward_conv2d": [[28, 37], ["torch.conv2d"], "function", ["None"], ["def", "snip_forward_conv2d", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "conv2d", "(", "\n", "x", ",", "\n", "self", ".", "weight", "*", "self", ".", "weight_mask", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.snip.snip_forward_linear": [[40, 42], ["torch.linear"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.linear"], ["", "def", "snip_forward_linear", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "weight_mask", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.snip.compute_snip_per_weight": [[44, 79], ["measure", "net.modules", "net.zero_grad", "range", "p_utils.get_layer_metric_array", "isinstance", "isinstance", "net.forward", "loss_fn", "loss_fn.backward", "isinstance", "isinstance", "torch.Parameter", "types.MethodType", "types.MethodType", "torch.abs", "torch.abs", "torch.abs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_layer_metric_array", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward"], ["", "@", "measure", "(", "\"snip\"", ",", "bn", "=", "True", ",", "mode", "=", "\"param\"", ")", "\n", "def", "compute_snip_per_weight", "(", "net", ",", "inputs", ",", "targets", ",", "mode", ",", "loss_fn", ",", "split_data", "=", "1", ")", ":", "\n", "    ", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "layer", ".", "weight_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones_like", "(", "layer", ".", "weight", ")", ")", "\n", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "# Override the forward methods:", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "snip_forward_conv2d", ",", "layer", ")", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "snip_forward_linear", ",", "layer", ")", "\n", "\n", "# Compute gradients (but don't apply them)", "\n", "", "", "net", ".", "zero_grad", "(", ")", "\n", "N", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "for", "sp", "in", "range", "(", "split_data", ")", ":", "\n", "        ", "st", "=", "sp", "*", "N", "//", "split_data", "\n", "en", "=", "(", "sp", "+", "1", ")", "*", "N", "//", "split_data", "\n", "\n", "outputs", "=", "net", ".", "forward", "(", "inputs", "[", "st", ":", "en", "]", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", "[", "st", ":", "en", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# select the gradients that we want to use for search/prune", "\n", "", "def", "snip", "(", "layer", ")", ":", "\n", "        ", "if", "layer", ".", "weight_mask", ".", "grad", "is", "not", "None", ":", "\n", "            ", "return", "torch", ".", "abs", "(", "layer", ".", "weight_mask", ".", "grad", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros_like", "(", "layer", ".", "weight", ")", "\n", "\n", "", "", "grads_abs", "=", "get_layer_metric_array", "(", "net", ",", "snip", ",", "mode", ")", "\n", "\n", "return", "grads_abs", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.l2_norm.get_l2_norm_array": [[20, 23], ["measure", "p_utils.get_layer_metric_array", "l.weight.norm"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_layer_metric_array"], ["@", "measure", "(", "\"l2_norm\"", ",", "copy_net", "=", "False", ",", "mode", "=", "\"param\"", ")", "\n", "def", "get_l2_norm_array", "(", "net", ",", "inputs", ",", "targets", ",", "mode", ",", "split_data", "=", "1", ")", ":", "\n", "    ", "return", "get_layer_metric_array", "(", "net", ",", "lambda", "l", ":", "l", ".", "weight", ".", "norm", "(", ")", ",", "mode", "=", "mode", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.plain.compute_plain_per_weight": [[23, 45], ["measure", "net.zero_grad", "range", "p_utils.get_layer_metric_array", "net.forward", "loss_fn", "loss_fn.backward", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_layer_metric_array", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward"], ["@", "measure", "(", "\"plain\"", ",", "bn", "=", "True", ",", "mode", "=", "\"param\"", ")", "\n", "def", "compute_plain_per_weight", "(", "net", ",", "inputs", ",", "targets", ",", "mode", ",", "loss_fn", ",", "split_data", "=", "1", ")", ":", "\n", "\n", "    ", "net", ".", "zero_grad", "(", ")", "\n", "N", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "for", "sp", "in", "range", "(", "split_data", ")", ":", "\n", "        ", "st", "=", "sp", "*", "N", "//", "split_data", "\n", "en", "=", "(", "sp", "+", "1", ")", "*", "N", "//", "split_data", "\n", "\n", "outputs", "=", "net", ".", "forward", "(", "inputs", "[", "st", ":", "en", "]", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", "[", "st", ":", "en", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# select the gradients that we want to use for search/prune", "\n", "", "def", "plain", "(", "layer", ")", ":", "\n", "        ", "if", "layer", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "            ", "return", "layer", ".", "weight", ".", "grad", "*", "layer", ".", "weight", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros_like", "(", "layer", ".", "weight", ")", "\n", "\n", "", "", "grads_abs", "=", "get_layer_metric_array", "(", "net", ",", "plain", ",", "mode", ")", "\n", "return", "grads_abs", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure": [[21, 47], ["available_measures.append", "func", "KeyError", "net_orig.get_prunable_copy().to", "torch.cuda.empty_cache", "gc.collect", "net_orig.get_prunable_copy"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.NAS201Model.get_prunable_copy"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.calc_measure": [[49, 51], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.load_all": [[53, 61], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.fisher.fisher_forward_conv2d": [[26, 33], ["torch.conv2d", "fisher..dummy"], "function", ["None"], ["def", "fisher_forward_conv2d", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "# intercept and store the activations after passing through 'hooked' identity op", "\n", "self", ".", "act", "=", "self", ".", "dummy", "(", "x", ")", "\n", "return", "self", ".", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.fisher.fisher_forward_linear": [[35, 39], ["torch.linear", "fisher..dummy"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.linear"], ["", "def", "fisher_forward_linear", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "self", ".", "act", "=", "self", ".", "dummy", "(", "x", ")", "\n", "return", "self", ".", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.measures.fisher.compute_fisher_per_weight": [[41, 114], ["measure", "net.train", "net.modules", "range", "p_utils.get_layer_metric_array", "p_utils.get_layer_metric_array", "p_utils.reshape_elements", "ValueError", "net.zero_grad", "net", "loss_fn", "loss_fn.backward", "isinstance", "isinstance", "torch.Identity", "isinstance", "isinstance", "layer.dummy.register_backward_hook", "torch.abs", "torch.abs", "torch.abs", "torch.zeros", "torch.zeros", "torch.zeros", "types.MethodType", "types.MethodType", "fisher.compute_fisher_per_weight.hook_factory"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.measures.__init__.measure", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_layer_metric_array", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.get_layer_metric_array", "home.repos.pwc.inspect_result.gideonfr_emprox.pruners.p_utils.reshape_elements"], ["", "@", "measure", "(", "\"fisher\"", ",", "bn", "=", "True", ",", "mode", "=", "\"channel\"", ")", "\n", "def", "compute_fisher_per_weight", "(", "net", ",", "inputs", ",", "targets", ",", "loss_fn", ",", "mode", ",", "split_data", "=", "1", ")", ":", "\n", "\n", "    ", "device", "=", "inputs", ".", "device", "\n", "\n", "if", "mode", "==", "\"param\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"Fisher pruning does not support parameter pruning.\"", ")", "\n", "\n", "", "net", ".", "train", "(", ")", "\n", "all_hooks", "=", "[", "]", "\n", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "# variables/op needed for fisher computation", "\n", "            ", "layer", ".", "fisher", "=", "None", "\n", "layer", ".", "act", "=", "0.0", "\n", "layer", ".", "dummy", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "# replace forward method of conv/linear", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "fisher_forward_conv2d", ",", "layer", ")", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "fisher_forward_linear", ",", "layer", ")", "\n", "\n", "# function to call during backward pass (hooked on identity op at output of layer)", "\n", "", "def", "hook_factory", "(", "layer", ")", ":", "\n", "                ", "def", "hook", "(", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "                    ", "act", "=", "layer", ".", "act", ".", "detach", "(", ")", "\n", "grad", "=", "grad_output", "[", "0", "]", ".", "detach", "(", ")", "\n", "if", "len", "(", "act", ".", "shape", ")", ">", "2", ":", "\n", "                        ", "g_nk", "=", "torch", ".", "sum", "(", "(", "act", "*", "grad", ")", ",", "list", "(", "range", "(", "2", ",", "len", "(", "act", ".", "shape", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "g_nk", "=", "act", "*", "grad", "\n", "", "del_k", "=", "g_nk", ".", "pow", "(", "2", ")", ".", "mean", "(", "0", ")", ".", "mul", "(", "0.5", ")", "\n", "if", "layer", ".", "fisher", "is", "None", ":", "\n", "                        ", "layer", ".", "fisher", "=", "del_k", "\n", "", "else", ":", "\n", "                        ", "layer", ".", "fisher", "+=", "del_k", "\n", "", "del", "(", "\n", "layer", ".", "act", "\n", ")", "# without deleting this, a nasty memory leak occurs! related: https://discuss.pytorch.org/t/memory-leak-when-using-forward-hook-and-backward-hook-simultaneously/27555", "\n", "\n", "", "return", "hook", "\n", "\n", "# register backward hook on identity fcn to compute fisher info", "\n", "", "layer", ".", "dummy", ".", "register_backward_hook", "(", "hook_factory", "(", "layer", ")", ")", "\n", "\n", "", "", "N", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "for", "sp", "in", "range", "(", "split_data", ")", ":", "\n", "        ", "st", "=", "sp", "*", "N", "//", "split_data", "\n", "en", "=", "(", "sp", "+", "1", ")", "*", "N", "//", "split_data", "\n", "\n", "net", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", "[", "st", ":", "en", "]", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", "[", "st", ":", "en", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# retrieve fisher info", "\n", "", "def", "fisher", "(", "layer", ")", ":", "\n", "        ", "if", "layer", ".", "fisher", "is", "not", "None", ":", "\n", "            ", "return", "torch", ".", "abs", "(", "layer", ".", "fisher", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "layer", ".", "weight", ".", "shape", "[", "0", "]", ")", "# size=ch", "\n", "\n", "", "", "grads_abs_ch", "=", "get_layer_metric_array", "(", "net", ",", "fisher", ",", "mode", ")", "\n", "\n", "# broadcast channel value here to all parameters in that channel", "\n", "# to be compatible with stuff downstream (which expects per-parameter metrics)", "\n", "# TODO cleanup on the selectors/apply_prune_mask side (?)", "\n", "shapes", "=", "get_layer_metric_array", "(", "net", ",", "lambda", "l", ":", "l", ".", "weight", ".", "shape", "[", "1", ":", "]", ",", "mode", ")", "\n", "\n", "grads_abs", "=", "reshape_elements", "(", "grads_abs_ch", ",", "shapes", ",", "device", ")", "\n", "\n", "return", "grads_abs", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.ReLUConvBN.__init__": [[24, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "affine", ",", "\n", "track_running_stats", "=", "True", ",", "\n", "use_bn", "=", "True", ",", "\n", "name", "=", "\"ReLUConvBN\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "not", "affine", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "\n", "out_channels", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "not", "affine", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.ReLUConvBN.forward": [[69, 71], ["nasbench2_ops.ReLUConvBN.op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.Identity.__init__": [[74, 77], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "\"Identity\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.Identity.forward": [[78, 80], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.Zero.__init__": [[83, 87], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ",", "name", "=", "\"Zero\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.Zero.forward": [[88, 92], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.0", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.POOLING.__init__": [[95, 100], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", ",", "padding", ",", "name", "=", "\"POOLING\"", ")", ":", "\n", "        ", "super", "(", "POOLING", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.POOLING.forward": [[102, 104], ["nasbench2_ops.POOLING.avgpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "avgpool", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.reduction.__init__": [[107, 140], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "nasbench2_ops.ReLUConvBN", "nasbench2_ops.ReLUConvBN", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "reduction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ",", "\n", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.reduction.forward": [[142, 147], ["nasbench2_ops.reduction.conv_a", "nasbench2_ops.reduction.conv_b", "nasbench2_ops.reduction.residual"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "return", "residual", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.stem.__init__": [[150, 171], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "use_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "stem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "3", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "3", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.stem.forward": [[174, 176], ["nasbench2_ops.stem.net"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.top.__init__": [[179, 187], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dims", ",", "num_classes", ",", "use_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "top", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "in_dims", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lastact", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "in_dims", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.top.forward": [[188, 194], ["nasbench2_ops.top.lastact", "nasbench2_ops.top.global_pooling", "x.view.view.view", "nasbench2_ops.top.classifier", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "lastact", "(", "x", ")", "\n", "x", "=", "self", ".", "global_pooling", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.SearchCell.__init__": [[197, 228], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "OPS.keys", "len", "nasbench2_ops.SearchCell.options.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", "use_bn", "=", "True", ",", "\n", "num_nodes", "=", "4", ",", "\n", "keep_mask", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "options", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "curr_node", "in", "range", "(", "self", ".", "num_nodes", "-", "1", ")", ":", "\n", "            ", "for", "prev_node", "in", "range", "(", "curr_node", "+", "1", ")", ":", "\n", "                ", "for", "_op_name", "in", "OPS", ".", "keys", "(", ")", ":", "\n", "                    ", "op", "=", "OPS", "[", "_op_name", "]", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", ",", "\n", "affine", ",", "\n", "track_running_stats", ",", "\n", "use_bn", ",", "\n", ")", "\n", "self", ".", "options", ".", "append", "(", "op", ")", "\n", "\n", "", "", "", "if", "keep_mask", "is", "not", "None", ":", "\n", "            ", "self", ".", "keep_mask", "=", "keep_mask", "\n", "", "else", ":", "\n", "            ", "self", ".", "keep_mask", "=", "[", "True", "]", "*", "len", "(", "self", ".", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2_ops.SearchCell.forward": [[229, 244], ["range", "range", "sum", "outs.append", "range", "len", "OPS.keys", "edges_in.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "x", "]", "\n", "\n", "idx", "=", "0", "\n", "for", "curr_node", "in", "range", "(", "self", ".", "num_nodes", "-", "1", ")", ":", "\n", "            ", "edges_in", "=", "[", "]", "\n", "for", "prev_node", "in", "range", "(", "curr_node", "+", "1", ")", ":", "# n-1 prev nodes", "\n", "                ", "for", "op_idx", "in", "range", "(", "len", "(", "OPS", ".", "keys", "(", ")", ")", ")", ":", "\n", "                    ", "if", "self", ".", "keep_mask", "[", "idx", "]", ":", "\n", "                        ", "edges_in", ".", "append", "(", "self", ".", "options", "[", "idx", "]", "(", "outs", "[", "prev_node", "]", ")", ")", "\n", "", "idx", "+=", "1", "\n", "", "", "node_output", "=", "sum", "(", "edges_in", ")", "\n", "outs", ".", "append", "(", "node_output", ")", "\n", "\n", "", "return", "outs", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_ops.ConvBnRelu.__init__": [[28, 47], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bn", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBnRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bn", ":", "\n", "            ", "self", ".", "conv_bn_relu", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_bn_relu", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_ops.ConvBnRelu.forward": [[49, 51], ["nasbench1_ops.ConvBnRelu.conv_bn_relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv_bn_relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_ops.Conv3x3BnRelu.__init__": [[56, 60], ["torch.Module.__init__", "nasbench1_ops.ConvBnRelu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv3x3BnRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv3x3", "=", "ConvBnRelu", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_ops.Conv3x3BnRelu.forward": [[61, 64], ["nasbench1_ops.Conv3x3BnRelu.conv3x3"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv3x3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv3x3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_ops.Conv1x1BnRelu.__init__": [[69, 73], ["torch.Module.__init__", "nasbench1_ops.ConvBnRelu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv1x1BnRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1x1", "=", "ConvBnRelu", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_ops.Conv1x1BnRelu.forward": [[74, 77], ["nasbench1_ops.Conv1x1BnRelu.conv1x1"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.build_nets.ImageNet_ResNet.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_ops.MaxPool3x3.__init__": [[82, 88], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bn", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "MaxPool3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_ops.MaxPool3x3.forward": [[89, 92], ["nasbench1_ops.MaxPool3x3.maxpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Cell.__init__": [[37, 54], ["torch.Module.__init__", "build_darts_net.ReLUConvBN", "build_darts_net.Cell._compile", "build_darts_net.FactorizedReduce", "build_darts_net.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Cell._compile"], ["\n", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.0", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Cell._compile": [[55, 67], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "try", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"hold\"", ")", "\n", "\n", "\n", "", "", "", "class", "AuxiliaryHeadCIFAR", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Cell.forward": [[68, 91], ["build_darts_net.Cell.preprocess0", "build_darts_net.Cell.preprocess1", "range", "op1", "op2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "isinstance", "build_darts_net.drop_path", "isinstance", "build_darts_net.drop_path"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path", "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "\n", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", "\n", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "AuxiliaryHeadImageNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.AuxiliaryHeadCIFAR.__init__": [[94, 110], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.AuxiliaryHeadCIFAR.forward": [[111, 115], ["build_darts_net.AuxiliaryHeadCIFAR.features", "build_darts_net.AuxiliaryHeadCIFAR.classifier", "build_darts_net.AuxiliaryHeadCIFAR.view", "build_darts_net.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "", "class", "NetworkCIFAR", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "arch_config", ")", ":", "\n", "        ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "genotype", "=", "arch_config", "[", "\"genotype\"", "]", "\n", "C", "=", "arch_config", "[", "\"C\"", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.AuxiliaryHeadImageNet.__init__": [[118, 134], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["auxiliary", "=", "arch_config", "[", "\"auxiliary\"", "]", "\n", "self", ".", "drop_path_prob", "=", "0", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.AuxiliaryHeadImageNet.forward": [[135, 139], ["build_darts_net.AuxiliaryHeadImageNet.features", "build_darts_net.AuxiliaryHeadImageNet.classifier", "build_darts_net.AuxiliaryHeadImageNet.view", "build_darts_net.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "\n", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.NetworkCIFAR.__init__": [[142, 181], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "build_darts_net.Cell", "build_darts_net.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits_aux", ",", "logits", "\n", "\n", "\n", "", "", "OPS", "=", "{", "\n", "\"none\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "Zero", "(", "stride", ")", ",", "\n", "\"avg_pool_3x3\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "nn", ".", "AvgPool2d", "(", "\n", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", "\n", ")", ",", "\n", "\"max_pool_3x3\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", ",", "\n", "\"skip_connect\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "Identity", "(", ")", "\n", "if", "stride", "==", "1", "\n", "else", "FactorizedReduce", "(", "C", ",", "C", ",", "affine", "=", "affine", ")", ",", "\n", "\"sep_conv_3x3\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "SepConv", "(", "\n", "C", ",", "C", ",", "3", ",", "stride", ",", "1", ",", "affine", "=", "affine", "\n", ")", ",", "\n", "\"sep_conv_5x5\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "SepConv", "(", "\n", "C", ",", "C", ",", "5", ",", "stride", ",", "2", ",", "affine", "=", "affine", "\n", ")", ",", "\n", "\"sep_conv_7x7\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "SepConv", "(", "\n", "C", ",", "C", ",", "7", ",", "stride", ",", "3", ",", "affine", "=", "affine", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.NetworkCIFAR.forward": [[182, 194], ["build_darts_net.NetworkCIFAR.stem", "enumerate", "build_darts_net.NetworkCIFAR.global_pooling", "build_darts_net.NetworkCIFAR.classifier", "build_darts_net.NetworkCIFAR.view", "cell", "build_darts_net.NetworkCIFAR.size", "build_darts_net.NetworkCIFAR.auxiliary_head"], "methods", ["None"], [")", ",", "\n", "\"dil_conv_3x3\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "DilConv", "(", "\n", "C", ",", "C", ",", "3", ",", "stride", ",", "2", ",", "2", ",", "affine", "=", "affine", "\n", ")", ",", "\n", "\"dil_conv_5x5\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "DilConv", "(", "\n", "C", ",", "C", ",", "5", ",", "stride", ",", "4", ",", "2", ",", "affine", "=", "affine", "\n", ")", ",", "\n", "\"conv_7x1_1x7\"", ":", "lambda", "C", ",", "stride", ",", "affine", ":", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "(", "stride", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.ReLUConvBN.__init__": [[230, 238], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n", "\n", "", "", "class", "SepConv", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.ReLUConvBN.forward": [[240, 242], ["build_darts_net.ReLUConvBN.op"], "methods", ["None"], ["        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.DilConv.__init__": [[245, 263], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["C_in", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "C_in", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "\n", "C_in", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "C_in", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.DilConv.forward": [[265, 267], ["build_darts_net.DilConv.op"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.SepConv.__init__": [[270, 297], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "\n", "", "", "class", "Identity", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n", "\n", "", "", "class", "Zero", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.0", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.0", ")", "\n", "\n", "\n", "", "", "class", "FactorizedReduce", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.SepConv.forward": [[299, 301], ["build_darts_net.SepConv.op"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Identity.__init__": [[304, 306], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Identity.forward": [[307, 309], ["None"], "methods", ["None"], ["", "", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "    ", "if", "drop_prob", ">", "0.0", ":", "\n", "        ", "keep_prob", "=", "1.0", "-", "drop_prob", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Zero.__init__": [[312, 315], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.Zero.forward": [[316, 320], ["x[].mul", "x.mul"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.FactorizedReduce.__init__": [[323, 330], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.FactorizedReduce.forward": [[331, 336], ["build_darts_net.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "build_darts_net.FactorizedReduce.bn", "build_darts_net.FactorizedReduce.conv_1", "build_darts_net.FactorizedReduce.conv_2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.parse_arch_to_darts": [[10, 33], ["Genotype", "darts_arch[].append"], "function", ["None"], ["\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n", "", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.build_darts_net.drop_path": [[338, 350], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.FloatTensor().to().bernoulli_", "torch.FloatTensor().to().bernoulli_", "mask.double.double", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "x.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Network.__init__": [[40, 74], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "nasbench1_ops.ConvBnRelu", "nasbench1.Network.layers.append", "range", "torch.Linear", "torch.Linear", "torch.Linear", "nasbench1.Network._initialize_weights", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "nasbench1.Network.layers.append", "nasbench1.Cell", "nasbench1.Network.layers.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Network._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "spec", ",", "stem_out", ",", "num_stacks", ",", "num_mods", ",", "num_classes", ",", "bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "spec", "=", "spec", "\n", "self", ".", "stem_out", "=", "stem_out", "\n", "self", ".", "num_stacks", "=", "num_stacks", "\n", "self", ".", "num_mods", "=", "num_mods", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "\n", "in_channels", "=", "3", "\n", "out_channels", "=", "stem_out", "\n", "\n", "# initial stem convolution", "\n", "stem_conv", "=", "ConvBnRelu", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "bn", "=", "bn", ")", "\n", "self", ".", "layers", ".", "append", "(", "stem_conv", ")", "\n", "\n", "in_channels", "=", "out_channels", "\n", "for", "stack_num", "in", "range", "(", "num_stacks", ")", ":", "\n", "            ", "if", "stack_num", ">", "0", ":", "\n", "                ", "downsample", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layers", ".", "append", "(", "downsample", ")", "\n", "\n", "out_channels", "*=", "2", "\n", "\n", "", "for", "_", "in", "range", "(", "num_mods", ")", ":", "\n", "                ", "cell", "=", "Cell", "(", "spec", ",", "in_channels", ",", "out_channels", ",", "bn", "=", "bn", ")", "\n", "self", ".", "layers", ".", "append", "(", "cell", ")", "\n", "in_channels", "=", "out_channels", "\n", "\n", "", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "out_channels", ",", "num_classes", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Network.forward": [[75, 82], ["enumerate", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "nasbench1.Network.classifier", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "_", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "out", "=", "torch", ".", "mean", "(", "x", ",", "(", "2", ",", "3", ")", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Network.get_prunable_copy": [[83, 100], ["nasbench1.Network", "Network.load_state_dict", "Network.train", "nasbench1.Network.state_dict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "def", "get_prunable_copy", "(", "self", ",", "bn", "=", "False", ")", ":", "\n", "\n", "        ", "model_new", "=", "Network", "(", "\n", "self", ".", "spec", ",", "\n", "self", ".", "stem_out", ",", "\n", "self", ".", "num_stacks", ",", "\n", "self", ".", "num_mods", ",", "\n", "self", ".", "num_classes", ",", "\n", "bn", "=", "bn", ",", "\n", ")", "\n", "\n", "# TODO this is quite brittle and doesn't work with nn.Sequential when bn is different", "\n", "# it is only required to maintain initialization -- maybe init after get_punable_copy?", "\n", "model_new", ".", "load_state_dict", "(", "self", ".", "state_dict", "(", ")", ",", "strict", "=", "False", ")", "\n", "model_new", ".", "train", "(", ")", "\n", "\n", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Network._initialize_weights": [[101, 115], ["nasbench1.Network.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Cell.__init__": [[125, 154], ["torch.Module.__init__", "nasbench1.ComputeVertexChannels", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "numpy.shape", "nasbench1.Cell.vertex_op.append", "nasbench1.Cell.input_op.append", "nasbench1.Cell.input_op.append", "nasbench1.Projection"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.ComputeVertexChannels", "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Projection"], ["def", "__init__", "(", "self", ",", "spec", ",", "in_channels", ",", "out_channels", ",", "bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "spec", "=", "spec", "\n", "self", ".", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "spec", ".", "matrix", ")", "[", "0", "]", "\n", "\n", "# vertex_channels[i] = number of output channels of vertex i", "\n", "self", ".", "vertex_channels", "=", "ComputeVertexChannels", "(", "\n", "in_channels", ",", "out_channels", ",", "self", ".", "spec", ".", "matrix", "\n", ")", "\n", "# self.vertex_channels = [in_channels] + [out_channels] * (self.num_vertices - 1)", "\n", "\n", "# operation for each node", "\n", "self", ".", "vertex_op", "=", "nn", ".", "ModuleList", "(", "[", "None", "]", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "self", ".", "num_vertices", "-", "1", ")", ":", "\n", "            ", "op", "=", "OP_MAP", "[", "spec", ".", "ops", "[", "t", "]", "]", "(", "\n", "self", ".", "vertex_channels", "[", "t", "]", ",", "self", ".", "vertex_channels", "[", "t", "]", ",", "bn", "=", "bn", "\n", ")", "\n", "self", ".", "vertex_op", ".", "append", "(", "op", ")", "\n", "\n", "# operation for input on each vertex", "\n", "", "self", ".", "input_op", "=", "nn", ".", "ModuleList", "(", "[", "None", "]", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "self", ".", "num_vertices", ")", ":", "\n", "            ", "if", "self", ".", "spec", ".", "matrix", "[", "0", ",", "t", "]", ":", "\n", "                ", "self", ".", "input_op", ".", "append", "(", "\n", "Projection", "(", "in_channels", ",", "self", ".", "vertex_channels", "[", "t", "]", ",", "bn", "=", "bn", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "input_op", ".", "append", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Cell.forward": [[155, 196], ["range", "sum", "tensors.append", "nasbench1.Truncate", "fan_in.append", "out_concat.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Truncate"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tensors", "=", "[", "x", "]", "\n", "\n", "out_concat", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "1", ",", "self", ".", "num_vertices", "-", "1", ")", ":", "\n", "            ", "fan_in", "=", "[", "\n", "Truncate", "(", "tensors", "[", "src", "]", ",", "self", ".", "vertex_channels", "[", "t", "]", ")", "\n", "for", "src", "in", "range", "(", "1", ",", "t", ")", "\n", "if", "self", ".", "spec", ".", "matrix", "[", "src", ",", "t", "]", "\n", "]", "\n", "\n", "if", "self", ".", "spec", ".", "matrix", "[", "0", ",", "t", "]", ":", "\n", "                ", "fan_in", ".", "append", "(", "self", ".", "input_op", "[", "t", "]", "(", "x", ")", ")", "\n", "\n", "# perform operation on node", "\n", "# vertex_input = torch.stack(fan_in, dim=0).sum(dim=0)", "\n", "", "vertex_input", "=", "sum", "(", "fan_in", ")", "\n", "# vertex_input = sum(fan_in) / len(fan_in)", "\n", "vertex_output", "=", "self", ".", "vertex_op", "[", "t", "]", "(", "vertex_input", ")", "\n", "\n", "tensors", ".", "append", "(", "vertex_output", ")", "\n", "if", "self", ".", "spec", ".", "matrix", "[", "t", ",", "self", ".", "num_vertices", "-", "1", "]", ":", "\n", "                ", "out_concat", ".", "append", "(", "tensors", "[", "t", "]", ")", "\n", "\n", "", "", "if", "not", "out_concat", ":", "\n", "            ", "assert", "self", ".", "spec", ".", "matrix", "[", "0", ",", "self", ".", "num_vertices", "-", "1", "]", "\n", "outputs", "=", "self", ".", "input_op", "[", "self", ".", "num_vertices", "-", "1", "]", "(", "tensors", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "out_concat", ")", "==", "1", ":", "\n", "                ", "outputs", "=", "out_concat", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "torch", ".", "cat", "(", "out_concat", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "spec", ".", "matrix", "[", "0", ",", "self", ".", "num_vertices", "-", "1", "]", ":", "\n", "                ", "outputs", "+=", "self", ".", "input_op", "[", "self", ".", "num_vertices", "-", "1", "]", "(", "tensors", "[", "0", "]", ")", "\n", "\n", "# if self.spec.matrix[0, self.num_vertices-1]:", "\n", "#    out_concat.append(self.input_op[self.num_vertices-1](tensors[0]))", "\n", "# outputs = sum(out_concat) / len(out_concat)", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Projection": [[198, 201], ["nasbench1_ops.ConvBnRelu"], "function", ["None"], ["", "", "def", "Projection", "(", "in_channels", ",", "out_channels", ",", "bn", "=", "True", ")", ":", "\n", "    ", "\"\"\"1x1 projection (as in ResNet) followed by batch normalization and ReLU.\"\"\"", "\n", "return", "ConvBnRelu", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.Truncate": [[203, 216], ["inputs.size", "ValueError"], "function", ["None"], ["", "def", "Truncate", "(", "inputs", ",", "channels", ")", ":", "\n", "    ", "\"\"\"Slice the inputs to channels if necessary.\"\"\"", "\n", "input_channels", "=", "inputs", ".", "size", "(", ")", "[", "1", "]", "\n", "if", "input_channels", "<", "channels", ":", "\n", "        ", "raise", "ValueError", "(", "\"input channel < output channels for truncate\"", ")", "\n", "", "elif", "input_channels", "==", "channels", ":", "\n", "        ", "return", "inputs", "# No truncation necessary", "\n", "", "else", ":", "\n", "# Truncation should only be necessary when channel division leads to", "\n", "# vertices with +1 channels. The input vertex should always be projected to", "\n", "# the minimum channel count.", "\n", "        ", "assert", "input_channels", "-", "channels", "==", "1", "\n", "return", "inputs", "[", ":", ",", ":", "channels", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1.ComputeVertexChannels": [[218, 275], ["numpy.sum", "range", "range", "range", "numpy.shape", "range", "range", "max"], "function", ["None"], ["", "", "def", "ComputeVertexChannels", "(", "in_channels", ",", "out_channels", ",", "matrix", ")", ":", "\n", "    ", "\"\"\"Computes the number of channels at every vertex.\n    Given the input channels and output channels, this calculates the number of\n    channels at each interior vertex. Interior vertices have the same number of\n    channels as the max of the channels of the vertices it feeds into. The output\n    channels are divided amongst the vertices that are directly connected to it.\n    When the division is not even, some vertices may receive an extra channel to\n    compensate.\n    Returns:\n        list of channel counts, in order of the vertices.\n    \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "\n", "vertex_channels", "=", "[", "0", "]", "*", "num_vertices", "\n", "vertex_channels", "[", "0", "]", "=", "in_channels", "\n", "vertex_channels", "[", "num_vertices", "-", "1", "]", "=", "out_channels", "\n", "\n", "if", "num_vertices", "==", "2", ":", "\n", "# Edge case where module only has input and output vertices", "\n", "        ", "return", "vertex_channels", "\n", "\n", "# Compute the in-degree ignoring input, axis 0 is the src vertex and axis 1 is", "\n", "# the dst vertex. Summing over 0 gives the in-degree count of each vertex.", "\n", "", "in_degree", "=", "np", ".", "sum", "(", "matrix", "[", "1", ":", "]", ",", "axis", "=", "0", ")", "\n", "interior_channels", "=", "out_channels", "//", "in_degree", "[", "num_vertices", "-", "1", "]", "\n", "correction", "=", "out_channels", "%", "in_degree", "[", "num_vertices", "-", "1", "]", "# Remainder to add", "\n", "\n", "# Set channels of vertices that flow directly to output", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "        ", "if", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "            ", "vertex_channels", "[", "v", "]", "=", "interior_channels", "\n", "if", "correction", ":", "\n", "                ", "vertex_channels", "[", "v", "]", "+=", "1", "\n", "correction", "-=", "1", "\n", "\n", "# Set channels for all other vertices to the max of the out edges, going", "\n", "# backwards. (num_vertices - 2) index skipped because it only connects to", "\n", "# output.", "\n", "", "", "", "for", "v", "in", "range", "(", "num_vertices", "-", "3", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "if", "not", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "            ", "for", "dst", "in", "range", "(", "v", "+", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "                ", "if", "matrix", "[", "v", ",", "dst", "]", ":", "\n", "                    ", "vertex_channels", "[", "v", "]", "=", "max", "(", "vertex_channels", "[", "v", "]", ",", "vertex_channels", "[", "dst", "]", ")", "\n", "", "", "", "assert", "vertex_channels", "[", "v", "]", ">", "0", "\n", "\n", "# Sanity check, verify that channels never increase and final channels add up.", "\n", "", "final_fan_in", "=", "0", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "        ", "if", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "            ", "final_fan_in", "+=", "vertex_channels", "[", "v", "]", "\n", "", "for", "dst", "in", "range", "(", "v", "+", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "            ", "if", "matrix", "[", "v", ",", "dst", "]", ":", "\n", "                ", "assert", "vertex_channels", "[", "v", "]", ">=", "vertex_channels", "[", "dst", "]", "\n", "", "", "", "assert", "final_fan_in", "==", "out_channels", "or", "num_vertices", "==", "2", "\n", "# num_vertices == 2 means only input/output nodes, so 0 fan-in", "\n", "\n", "return", "vertex_channels", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.ModelSpec.__init__": [[185, 219], ["numpy.shape", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "nasbench1_spec.ModelSpec._prune", "isinstance", "numpy.array", "ValueError", "len", "ValueError", "nasbench1_spec.is_upper_triangular", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.ModelSpec._prune", "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.is_upper_triangular"], ["def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "data_format", "=", "\"channels_last\"", ")", ":", "\n", "        ", "\"\"\"Initialize the module spec.\n        Args:\n          matrix: ndarray or nested list with shape [V, V] for the adjacency matrix.\n          ops: V-length list of labels for the base ops used. The first and last\n            elements are ignored because they are the input and output vertices\n            which have no operations. The elements are retained to keep consistent\n            indexing.\n          data_format: channels_last or channels_first.\n        Raises:\n          ValueError: invalid matrix or ops\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "matrix", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", "or", "shape", "[", "0", "]", "!=", "shape", "[", "1", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"matrix must be square\"", ")", "\n", "", "if", "shape", "[", "0", "]", "!=", "len", "(", "ops", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"length of ops must match matrix dimensions\"", ")", "\n", "", "if", "not", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"matrix must be upper triangular\"", ")", "\n", "\n", "# Both the original and pruned matrices are deep copies of the matrix and", "\n", "# ops so any changes to those after initialization are not recognized by the", "\n", "# spec.", "\n", "", "self", ".", "original_matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "original_ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "\n", "self", ".", "matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "self", ".", "valid_spec", "=", "True", "\n", "self", ".", "_prune", "(", ")", "\n", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.ModelSpec._prune": [[220, 269], ["set", "set", "set().difference", "numpy.delete", "numpy.delete", "sorted", "numpy.shape", "frontier.pop", "range", "frontier.pop", "range", "set.intersection", "len", "list", "list", "set", "set.add", "frontier.append", "set.add", "frontier.append", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "_prune", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prune the extraneous parts of the graph.\n        General procedure:\n          1) Remove parts of graph not connected to input.\n          2) Remove parts of graph not connected to output.\n          3) Reorder the vertices so that they are consecutive after steps 1 and 2.\n        These 3 steps can be combined by deleting the rows and columns of the\n        vertices that are not reachable from both the input and output (in reverse).\n        \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "original_matrix", ")", "[", "0", "]", "\n", "\n", "# DFS forward from input", "\n", "visited_from_input", "=", "set", "(", "[", "0", "]", ")", "\n", "frontier", "=", "[", "0", "]", "\n", "while", "frontier", ":", "\n", "            ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "top", "+", "1", ",", "num_vertices", ")", ":", "\n", "                ", "if", "self", ".", "original_matrix", "[", "top", ",", "v", "]", "and", "v", "not", "in", "visited_from_input", ":", "\n", "                    ", "visited_from_input", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# DFS backward from output", "\n", "", "", "", "visited_from_output", "=", "set", "(", "[", "num_vertices", "-", "1", "]", ")", "\n", "frontier", "=", "[", "num_vertices", "-", "1", "]", "\n", "while", "frontier", ":", "\n", "            ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "0", ",", "top", ")", ":", "\n", "                ", "if", "self", ".", "original_matrix", "[", "v", ",", "top", "]", "and", "v", "not", "in", "visited_from_output", ":", "\n", "                    ", "visited_from_output", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# Any vertex that isn't connected to both input and output is extraneous to", "\n", "# the computation graph.", "\n", "", "", "", "extraneous", "=", "set", "(", "range", "(", "num_vertices", ")", ")", ".", "difference", "(", "\n", "visited_from_input", ".", "intersection", "(", "visited_from_output", ")", "\n", ")", "\n", "\n", "# If the non-extraneous graph is less than 2 vertices, the input is not", "\n", "# connected to the output and the spec is invalid.", "\n", "if", "len", "(", "extraneous", ")", ">", "num_vertices", "-", "2", ":", "\n", "            ", "self", ".", "matrix", "=", "None", "\n", "self", ".", "ops", "=", "None", "\n", "self", ".", "valid_spec", "=", "False", "\n", "return", "\n", "\n", "", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "1", ")", "\n", "for", "index", "in", "sorted", "(", "extraneous", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "del", "self", ".", "ops", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.ModelSpec.hash_spec": [[270, 281], ["graph_util.hash_module", "canonical_ops.index"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.hash_module"], ["", "", "def", "hash_spec", "(", "self", ",", "canonical_ops", ")", ":", "\n", "        ", "\"\"\"Computes the isomorphism-invariant graph hash of this spec.\n        Args:\n          canonical_ops: list of operations in the canonical ordering which they\n            were assigned (i.e. the order provided in the config['available_ops']).\n        Returns:\n          MD5 hash of this spec which can be used to query the dataset.\n        \"\"\"", "\n", "# Invert the operations back to integer label indices used in graph gen.", "\n", "labeling", "=", "[", "-", "1", "]", "+", "[", "canonical_ops", ".", "index", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "return", "graph_util", ".", "hash_module", "(", "self", ".", "matrix", ",", "labeling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.ModelSpec.visualize": [[282, 297], ["graphviz.Digraph", "graphviz.Digraph.node", "range", "graphviz.Digraph.node", "range", "numpy.shape", "str", "graphviz.Digraph.node", "str", "range", "str", "graphviz.Digraph.edge", "str", "str"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.node", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.node", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.node"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Creates a dot graph. Can be visualized in colab directly.\"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "matrix", ")", "[", "0", "]", "\n", "g", "=", "graphviz", ".", "Digraph", "(", ")", "\n", "g", ".", "node", "(", "str", "(", "0", ")", ",", "\"input\"", ")", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "            ", "g", ".", "node", "(", "str", "(", "v", ")", ",", "self", ".", "ops", "[", "v", "]", ")", "\n", "", "g", ".", "node", "(", "str", "(", "num_vertices", "-", "1", ")", ",", "\"output\"", ")", "\n", "\n", "for", "src", "in", "range", "(", "num_vertices", "-", "1", ")", ":", "\n", "            ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "num_vertices", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "src", ",", "dst", "]", ":", "\n", "                    ", "g", ".", "edge", "(", "str", "(", "src", ")", ",", "str", "(", "dst", ")", ")", "\n", "\n", "", "", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec._ToModelSpec": [[38, 40], ["nasbench1_spec.ModelSpec"], "function", ["None"], ["", "def", "_ToModelSpec", "(", "mat", ",", "ops", ")", ":", "\n", "    ", "return", "ModelSpec", "(", "mat", ",", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.gen_is_edge_fn": [[42, 73], ["numpy.vectorize"], "function", ["None"], ["", "def", "gen_is_edge_fn", "(", "bits", ")", ":", "\n", "    ", "\"\"\"Generate a boolean function for the edge connectivity.\n    Given a bitstring FEDCBA and a 4x4 matrix, the generated matrix is\n      [[0, A, B, D],\n       [0, 0, C, E],\n       [0, 0, 0, F],\n       [0, 0, 0, 0]]\n    Note that this function is agnostic to the actual matrix dimension due to\n    order in which elements are filled out (column-major, starting from least\n    significant bit). For example, the same FEDCBA bitstring (0-padded) on a 5x5\n    matrix is\n      [[0, A, B, D, 0],\n       [0, 0, C, E, 0],\n       [0, 0, 0, F, 0],\n       [0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0]]\n    Args:\n      bits: integer which will be interpreted as a bit mask.\n    Returns:\n      vectorized function that returns True when an edge is present.\n    \"\"\"", "\n", "\n", "def", "is_edge", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Is there an edge from x to y (0-indexed)?\"\"\"", "\n", "if", "x", ">=", "y", ":", "\n", "            ", "return", "0", "\n", "# Map x, y to index into bit string", "\n", "", "index", "=", "x", "+", "(", "y", "*", "(", "y", "-", "1", ")", "//", "2", ")", "\n", "return", "(", "bits", ">>", "index", ")", "%", "2", "==", "1", "\n", "\n", "", "return", "np", ".", "vectorize", "(", "is_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.is_full_dag": [[75, 97], ["numpy.shape", "numpy.all", "numpy.any", "numpy.all", "numpy.any"], "function", ["None"], ["", "def", "is_full_dag", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Full DAG == all vertices on a path from vert 0 to (V-1).\n    i.e. no disconnected or \"hanging\" vertices.\n    It is sufficient to check for:\n      1) no rows of 0 except for row V-1 (only output vertex has no out-edges)\n      2) no cols of 0 except for col 0 (only input vertex has no in-edges)\n    Args:\n      matrix: V x V upper-triangular adjacency matrix\n    Returns:\n      True if the there are no dangling vertices.\n    \"\"\"", "\n", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "\n", "rows", "=", "matrix", "[", ":", "shape", "[", "0", "]", "-", "1", ",", ":", "]", "==", "0", "\n", "rows", "=", "np", ".", "all", "(", "rows", ",", "axis", "=", "1", ")", "# Any row with all 0 will be True", "\n", "rows_bad", "=", "np", ".", "any", "(", "rows", ")", "\n", "\n", "cols", "=", "matrix", "[", ":", ",", "1", ":", "]", "==", "0", "\n", "cols", "=", "np", ".", "all", "(", "cols", ",", "axis", "=", "0", ")", "# Any col with all 0 will be True", "\n", "cols_bad", "=", "np", ".", "any", "(", "cols", ")", "\n", "\n", "return", "(", "not", "rows_bad", ")", "and", "(", "not", "cols_bad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.num_edges": [[99, 102], ["numpy.sum"], "function", ["None"], ["", "def", "num_edges", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Computes number of edges in adjacency matrix.\"\"\"", "\n", "return", "np", ".", "sum", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.hash_module": [[104, 142], ["numpy.sum().tolist", "numpy.sum().tolist", "list", "range", "hashlib.md5().hexdigest", "numpy.shape", "len", "len", "len", "zip", "hashlib.md5().hexdigest", "range", "numpy.sum", "numpy.sum", "new_hashes.append", "hashlib.md5", "hashlib.md5", "hashlib.md5().hexdigest", "str().encode", "str().encode", "range", "range", "hashlib.md5", "str", "str", "sorted", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "hash_module", "(", "matrix", ",", "labeling", ")", ":", "\n", "    ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n    Args:\n      matrix: np.ndarray square upper-triangular adjacency matrix.\n      labeling: list of int labels of length equal to both dimensions of\n        matrix.\n    Returns:\n      MD5 hash of the matrix and labeling.\n    \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labeling", ")", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labeling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "        ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "            ", "in_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "\n", "hashlib", ".", "md5", "(", "\n", "(", "\n", "\"\"", ".", "join", "(", "sorted", "(", "in_neighbors", ")", ")", "\n", "+", "\"|\"", "\n", "+", "\"\"", ".", "join", "(", "sorted", "(", "out_neighbors", ")", ")", "\n", "+", "\"|\"", "\n", "+", "hashes", "[", "v", "]", "\n", ")", ".", "encode", "(", "\"utf-8\"", ")", "\n", ")", ".", "hexdigest", "(", ")", "\n", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "return", "fingerprint", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.permute_graph": [[144, 162], ["zip", "numpy.fromfunction", "list", "numpy.vectorize", "range", "sorted", "len", "len", "range", "len", "len"], "function", ["None"], ["", "def", "permute_graph", "(", "graph", ",", "label", ",", "permutation", ")", ":", "\n", "    ", "\"\"\"Permutes the graph and labels based on permutation.\n    Args:\n      graph: np.ndarray adjacency matrix.\n      label: list of labels of same length as graph dimensions.\n      permutation: a permutation list of ints of same length as graph dimensions.\n    Returns:\n      np.ndarray where vertex permutation[v] is vertex v from the original graph\n    \"\"\"", "\n", "# vertex permutation[v] in new graph is vertex v in the old graph", "\n", "forward_perm", "=", "zip", "(", "permutation", ",", "list", "(", "range", "(", "len", "(", "permutation", ")", ")", ")", ")", "\n", "inverse_perm", "=", "[", "x", "[", "1", "]", "for", "x", "in", "sorted", "(", "forward_perm", ")", "]", "\n", "edge_fn", "=", "lambda", "x", ",", "y", ":", "graph", "[", "inverse_perm", "[", "x", "]", ",", "inverse_perm", "[", "y", "]", "]", "==", "1", "\n", "new_matrix", "=", "np", ".", "fromfunction", "(", "\n", "np", ".", "vectorize", "(", "edge_fn", ")", ",", "(", "len", "(", "label", ")", ",", "len", "(", "label", ")", ")", ",", "dtype", "=", "np", ".", "int8", "\n", ")", "\n", "new_label", "=", "[", "label", "[", "inverse_perm", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", "]", "\n", "return", "new_matrix", ",", "new_label", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.is_isomorphic": [[164, 180], ["itertools.permutations", "numpy.array", "numpy.array", "numpy.shape", "numpy.shape", "len", "len", "numpy.shape", "range", "nasbench1_spec.permute_graph", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.permute_graph"], ["", "def", "is_isomorphic", "(", "graph1", ",", "graph2", ")", ":", "\n", "    ", "\"\"\"Exhaustively checks if 2 graphs are isomorphic.\"\"\"", "\n", "matrix1", ",", "label1", "=", "np", ".", "array", "(", "graph1", "[", "0", "]", ")", ",", "graph1", "[", "1", "]", "\n", "matrix2", ",", "label2", "=", "np", ".", "array", "(", "graph2", "[", "0", "]", ")", ",", "graph2", "[", "1", "]", "\n", "assert", "np", ".", "shape", "(", "matrix1", ")", "==", "np", ".", "shape", "(", "matrix2", ")", "\n", "assert", "len", "(", "label1", ")", "==", "len", "(", "label2", ")", "\n", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix1", ")", "[", "0", "]", "\n", "# Note: input and output in our constrained graphs always map to themselves", "\n", "# but this script does not enforce that.", "\n", "for", "perm", "in", "itertools", ".", "permutations", "(", "range", "(", "0", ",", "vertices", ")", ")", ":", "\n", "        ", "pmatrix1", ",", "plabel1", "=", "permute_graph", "(", "matrix1", ",", "label1", ",", "perm", ")", "\n", "if", "np", ".", "array_equal", "(", "pmatrix1", ",", "matrix2", ")", "and", "plabel1", "==", "label2", ":", "\n", "            ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench1_spec.is_upper_triangular": [[299, 307], ["range", "range", "numpy.shape"], "function", ["None"], ["", "", "def", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"True if matrix is 0 on diagonal and below.\"\"\"", "\n", "for", "src", "in", "range", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ")", ":", "\n", "        ", "for", "dst", "in", "range", "(", "0", ",", "src", "+", "1", ")", ":", "\n", "            ", "if", "matrix", "[", "src", ",", "dst", "]", "!=", "0", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.NAS201Model.__init__": [[63, 115], ["torch.Module.__init__", "nasbench2_ops.stem", "torch.Sequential", "torch.Sequential", "torch.Sequential", "nasbench2_ops.reduction", "torch.Sequential", "torch.Sequential", "torch.Sequential", "nasbench2_ops.reduction", "torch.Sequential", "torch.Sequential", "torch.Sequential", "nasbench2_ops.top", "nasbench2_ops.SearchCell", "nasbench2_ops.SearchCell", "nasbench2_ops.SearchCell", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "arch_str", ",", "num_classes", ",", "use_bn", "=", "True", ",", "keep_mask", "=", "None", ",", "stem_ch", "=", "16", ")", ":", "\n", "        ", "super", "(", "NAS201Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arch_str", "=", "arch_str", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "\n", "self", ".", "stem", "=", "stem", "(", "out_channels", "=", "stem_ch", ",", "use_bn", "=", "use_bn", ")", "\n", "self", ".", "stack_cell1", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "SearchCell", "(", "\n", "in_channels", "=", "stem_ch", ",", "\n", "out_channels", "=", "stem_ch", ",", "\n", "stride", "=", "1", ",", "\n", "affine", "=", "False", ",", "\n", "track_running_stats", "=", "False", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "keep_mask", "=", "keep_mask", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "5", ")", "\n", "]", "\n", ")", "\n", "self", ".", "reduction1", "=", "reduction", "(", "in_channels", "=", "stem_ch", ",", "out_channels", "=", "stem_ch", "*", "2", ")", "\n", "self", ".", "stack_cell2", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "SearchCell", "(", "\n", "in_channels", "=", "stem_ch", "*", "2", ",", "\n", "out_channels", "=", "stem_ch", "*", "2", ",", "\n", "stride", "=", "1", ",", "\n", "affine", "=", "False", ",", "\n", "track_running_stats", "=", "False", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "keep_mask", "=", "keep_mask", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "5", ")", "\n", "]", "\n", ")", "\n", "self", ".", "reduction2", "=", "reduction", "(", "in_channels", "=", "stem_ch", "*", "2", ",", "out_channels", "=", "stem_ch", "*", "4", ")", "\n", "self", ".", "stack_cell3", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "SearchCell", "(", "\n", "in_channels", "=", "stem_ch", "*", "4", ",", "\n", "out_channels", "=", "stem_ch", "*", "4", ",", "\n", "stride", "=", "1", ",", "\n", "affine", "=", "False", ",", "\n", "track_running_stats", "=", "False", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "keep_mask", "=", "keep_mask", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "5", ")", "\n", "]", "\n", ")", "\n", "self", ".", "top", "=", "top", "(", "in_dims", "=", "stem_ch", "*", "4", ",", "num_classes", "=", "num_classes", ",", "use_bn", "=", "use_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.NAS201Model.forward": [[116, 129], ["nasbench2.NAS201Model.stem", "nasbench2.NAS201Model.stack_cell1", "nasbench2.NAS201Model.reduction1", "nasbench2.NAS201Model.stack_cell2", "nasbench2.NAS201Model.reduction2", "nasbench2.NAS201Model.stack_cell3", "nasbench2.NAS201Model.top"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stack_cell1", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stack_cell2", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stack_cell3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "top", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.NAS201Model.get_prunable_copy": [[130, 139], ["nasbench2.get_model_from_arch_str", "get_model_from_arch_str.load_state_dict", "get_model_from_arch_str.train", "nasbench2.NAS201Model.state_dict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.get_model_from_arch_str", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "def", "get_prunable_copy", "(", "self", ",", "bn", "=", "False", ")", ":", "\n", "        ", "model_new", "=", "get_model_from_arch_str", "(", "self", ".", "arch_str", ",", "self", ".", "num_classes", ",", "use_bn", "=", "bn", ")", "\n", "\n", "# TODO this is quite brittle and doesn't work with nn.Sequential when bn is different", "\n", "# it is only required to maintain initialization -- maybe init after get_punable_copy?", "\n", "model_new", ".", "load_state_dict", "(", "self", ".", "state_dict", "(", ")", ",", "strict", "=", "False", ")", "\n", "model_new", ".", "train", "(", ")", "\n", "\n", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.gen_searchcell_mask_from_arch_str": [[24, 43], ["arch_str.split", "range", "node[].split", "len", "range", "op_and_input.split", "OPS.keys", "len", "keep_mask.append", "int"], "function", ["None"], ["def", "gen_searchcell_mask_from_arch_str", "(", "arch_str", ")", ":", "\n", "    ", "nodes", "=", "arch_str", ".", "split", "(", "\"+\"", ")", "\n", "nodes", "=", "[", "node", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\"|\"", ")", "for", "node", "in", "nodes", "]", "\n", "nodes", "=", "[", "[", "op_and_input", ".", "split", "(", "\"~\"", ")", "for", "op_and_input", "in", "node", "]", "for", "node", "in", "nodes", "]", "\n", "\n", "keep_mask", "=", "[", "]", "\n", "for", "curr_node_idx", "in", "range", "(", "len", "(", "nodes", ")", ")", ":", "\n", "        ", "for", "prev_node_idx", "in", "range", "(", "curr_node_idx", "+", "1", ")", ":", "\n", "            ", "_op", "=", "[", "\n", "edge", "[", "0", "]", "\n", "for", "edge", "in", "nodes", "[", "curr_node_idx", "]", "\n", "if", "int", "(", "edge", "[", "1", "]", ")", "==", "prev_node_idx", "\n", "]", "\n", "assert", "(", "\n", "len", "(", "_op", ")", "==", "1", "\n", ")", ",", "\"The arch string does not follow the assumption of 1 connection between two nodes.\"", "\n", "for", "_op_name", "in", "OPS", ".", "keys", "(", ")", ":", "\n", "                ", "keep_mask", ".", "append", "(", "_op", "[", "0", "]", "==", "_op_name", ")", "\n", "", "", "", "return", "keep_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.get_model_from_arch_str": [[45, 55], ["nasbench2.gen_searchcell_mask_from_arch_str", "nasbench2.NAS201Model"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.gen_searchcell_mask_from_arch_str"], ["", "def", "get_model_from_arch_str", "(", "arch_str", ",", "num_classes", ",", "use_bn", "=", "True", ",", "init_channels", "=", "16", ")", ":", "\n", "    ", "keep_mask", "=", "gen_searchcell_mask_from_arch_str", "(", "arch_str", ")", "\n", "net", "=", "NAS201Model", "(", "\n", "arch_str", "=", "arch_str", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "keep_mask", "=", "keep_mask", ",", "\n", "stem_ch", "=", "init_channels", ",", "\n", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.get_super_model": [[57, 60], ["nasbench2.NAS201Model"], "function", ["None"], ["", "def", "get_super_model", "(", "num_classes", ",", "use_bn", "=", "True", ")", ":", "\n", "    ", "net", "=", "NAS201Model", "(", "arch_str", "=", "arch_str", ",", "num_classes", "=", "num_classes", ",", "use_bn", "=", "use_bn", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.models.nasbench2.get_arch_str_from_model": [[141, 160], ["range", "range", "nodes.append", "OPS.keys", "edges.append"], "function", ["None"], ["", "", "def", "get_arch_str_from_model", "(", "net", ")", ":", "\n", "    ", "search_cell", "=", "net", ".", "stack_cell1", "[", "0", "]", ".", "options", "\n", "keep_mask", "=", "net", ".", "stack_cell1", "[", "0", "]", ".", "keep_mask", "\n", "num_nodes", "=", "net", ".", "stack_cell1", "[", "0", "]", ".", "num_nodes", "\n", "\n", "nodes", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "curr_node", "in", "range", "(", "num_nodes", "-", "1", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "prev_node", "in", "range", "(", "curr_node", "+", "1", ")", ":", "# n-1 prev nodes", "\n", "            ", "for", "_op_name", "in", "OPS", ".", "keys", "(", ")", ":", "\n", "                ", "if", "keep_mask", "[", "idx", "]", ":", "\n", "                    ", "edges", ".", "append", "(", "f\"{_op_name}~{prev_node}\"", ")", "\n", "", "idx", "+=", "1", "\n", "", "", "node_str", "=", "\"|\"", ".", "join", "(", "edges", ")", "\n", "node_str", "=", "f\"|{node_str}|\"", "\n", "nodes", ".", "append", "(", "node_str", ")", "\n", "", "arch_str", "=", "\"+\"", ".", "join", "(", "nodes", ")", "\n", "return", "arch_str", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bayesian_linear_reg.BayesianLinearRegression.get_model": [[10, 22], ["pybnn.bayesian_linear_regression.BayesianLinearRegression"], "methods", ["None"], ["    ", "def", "get_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "predictor", "=", "BLR", "(", "\n", "alpha", "=", "1.0", ",", "\n", "beta", "=", "100", ",", "\n", "basis_func", "=", "linear_basis_func", ",", "\n", "prior", "=", "None", ",", "\n", "do_mcmc", "=", "False", ",", "# turn this off for better sample efficiency", "\n", "n_hypers", "=", "20", ",", "\n", "chain_length", "=", "100", ",", "\n", "burnin_steps", "=", "100", ",", "\n", ")", "\n", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bayesian_linear_reg.BayesianLinearRegression.train_model": [[23, 25], ["bayesian_linear_reg.BayesianLinearRegression.model.train"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "def", "train_model", "(", "self", ",", "xtrain", ",", "ytrain", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", "xtrain", ",", "ytrain", ",", "do_optimize", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bnn_base.BNN.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "ss_type", "=", "\"nasbench201\"", ")", ":", "\n", "        ", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "ss_type", "=", "ss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bnn_base.BNN.get_model": [[12, 14], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NotImplementedError", "(", "\"Model needs to be defined.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bnn_base.BNN.train_model": [[15, 17], ["NotImplementedError"], "methods", ["None"], ["", "def", "train_model", "(", "self", ",", "xtrain", ",", "ytrain", ")", ":", "\n", "        ", "return", "NotImplementedError", "(", "\"Training method not defined.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bnn_base.BNN.fit": [[18, 36], ["numpy.array", "bnn_base.BNN.get_model", "bnn_base.BNN.train_model", "bnn_base.BNN.query", "numpy.mean", "numpy.array", "abs", "naslib.predictors.utils.encodings.encode"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.get_model", "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bohamiann.BOHAMIANN.train_model", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "encoding_type", "is", "not", "None", ":", "\n", "            ", "_xtrain", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtrain", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "_xtrain", "=", "xtrain", "\n", "", "_ytrain", "=", "np", ".", "array", "(", "ytrain", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", "**", "kwargs", ")", "\n", "self", ".", "train_model", "(", "_xtrain", ",", "_ytrain", ")", "\n", "\n", "train_pred", "=", "self", ".", "query", "(", "xtrain", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "_ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bnn_base.BNN.query": [[37, 50], ["bnn_base.BNN.model.predict", "numpy.squeeze", "numpy.array", "naslib.predictors.utils.encodings.encode"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "encoding_type", "is", "not", "None", ":", "\n", "            ", "test_data", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtest", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "test_data", "=", "xtest", "\n", "\n", "", "m", ",", "v", "=", "self", ".", "model", ".", "predict", "(", "test_data", ")", "\n", "return", "np", ".", "squeeze", "(", "m", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.dngo.DNGOPredictor.get_model": [[10, 30], ["pybnn.dngo.DNGO"], "methods", ["None"], ["    ", "def", "get_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "predictor", "=", "DNGO", "(", "\n", "batch_size", "=", "10", ",", "\n", "num_epochs", "=", "500", ",", "\n", "learning_rate", "=", "0.01", ",", "\n", "adapt_epoch", "=", "5000", ",", "\n", "n_units_1", "=", "50", ",", "\n", "n_units_2", "=", "50", ",", "\n", "n_units_3", "=", "50", ",", "\n", "alpha", "=", "1.0", ",", "\n", "beta", "=", "1000", ",", "\n", "prior", "=", "None", ",", "\n", "do_mcmc", "=", "True", ",", "# turn this off for better sample efficiency", "\n", "n_hypers", "=", "20", ",", "\n", "chain_length", "=", "2000", ",", "\n", "burnin_steps", "=", "2000", ",", "\n", "normalize_input", "=", "False", ",", "\n", "normalize_output", "=", "True", ",", "\n", ")", "\n", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.dngo.DNGOPredictor.train_model": [[31, 36], ["dngo.DNGOPredictor.model.train", "dngo.DNGOPredictor.model.train"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "def", "train_model", "(", "self", ",", "xtrain", ",", "ytrain", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", "xtrain", ",", "ytrain", ",", "do_optimize", "=", "True", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", "xtrain", ",", "ytrain", ",", "do_optimize", "=", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bohamiann.BOHAMIANN.get_model": [[12, 24], ["pybnn.bohamiann.Bohamiann"], "methods", ["None"], ["    ", "def", "get_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "predictor", "=", "Bohamiann", "(", "\n", "get_network", "=", "get_default_network", ",", "\n", "sampling_method", "=", "\"adaptive_sghmc\"", ",", "\n", "use_double_precision", "=", "True", ",", "\n", "metrics", "=", "(", "nn", ".", "MSELoss", ",", ")", ",", "\n", "likelihood_function", "=", "nll", ",", "\n", "print_every_n_steps", "=", "10", ",", "\n", "normalize_input", "=", "False", ",", "\n", "normalize_output", "=", "True", ",", "\n", ")", "\n", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bnn.bohamiann.BOHAMIANN.train_model": [[25, 34], ["bohamiann.BOHAMIANN.model.train"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "def", "train_model", "(", "self", ",", "xtrain", ",", "ytrain", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "num_steps", "=", "100", ",", "\n", "num_burn_in_steps", "=", "10", ",", "\n", "keep_every", "=", "5", ",", "\n", "lr", "=", "1e-2", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot.oneshot.OneShotPredictor.__init__": [[17, 36], ["trainer.optimizer.graph.get_type", "print", "oneshot.OneShotPredictor.model.search", "print", "oneshot.OneShotPredictor.model.optimizer.graph.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.search", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "trainer", ",", "model_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "model", "=", "trainer", "\n", "if", "trainer", ".", "optimizer", ".", "graph", ".", "get_type", "(", ")", "==", "\"darts\"", ":", "\n", "            ", "self", ".", "converter", "=", "convert_naslib_to_genotype", "\n", "", "else", ":", "\n", "            ", "self", ".", "converter", "=", "convert_naslib_to_op_indices", "\n", "\n", "", "if", "model_path", "is", "None", ":", "\n", "# if no saved model is provided conduct the search from scratch.", "\n", "# NOTE: that this is an expensive step and it should be avoided when", "\n", "# using the oneshot model as performance predictor", "\n", "            ", "print", "(", "\"No saved model found! Starting search...\"", ")", "\n", "self", ".", "model", ".", "search", "(", ")", "\n", "", "else", ":", "\n", "# TODO: change after refactoring checkpointer in NASLib", "\n", "            ", "print", "(", "\"Loading model from {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "self", ".", "model", ".", "optimizer", ".", "graph", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", "[", "\"model\"", "]", ")", "\n", "print", "(", "\"Fineshed loading model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot.oneshot.OneShotPredictor.__call__": [[37, 60], ["print", "print", "oneshot.OneShotPredictor.model.optimizer.set_alphas_from_path", "oneshot.OneShotPredictor.model.evaluate_oneshot", "prediction.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotNASOptimizer.set_alphas_from_path", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.evaluate_oneshot"], ["", "", "def", "__call__", "(", "self", ",", "archs", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate, i.e. do a forward pass for every image datapoint, the\n        one-shot model for every architecture in archs.\n            params:\n                archs: torch.Tensor where each element is an architecture encoding\n\n            return:\n                torch.Tensor with the predictions for every arch in archs\n        \"\"\"", "\n", "prediction", "=", "[", "]", "\n", "for", "arch", "in", "archs", ":", "\n", "# we have to iterate through all the architectures in the", "\n", "# mini-batch", "\n", "            ", "self", ".", "model", ".", "optimizer", ".", "set_alphas_from_path", "(", "arch", ")", "\n", "# NOTE: evaluation on the 25k validation data for now. provide a test", "\n", "# dataloader to evaluate on the test data", "\n", "val_acc", "=", "self", ".", "model", ".", "evaluate_oneshot", "(", "dataloader", "=", "None", ")", "\n", "prediction", ".", "append", "(", "val_acc", ")", "\n", "", "print", "(", "\"Predictions:\"", ")", "\n", "print", "(", "prediction", ")", "\n", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot.oneshot.OneShotPredictor.fit": [[61, 63], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot.oneshot.OneShotPredictor.query": [[64, 67], ["numpy.squeeze", "oneshot.OneShotPredictor.converter", "numpy.array", "oneshot.OneShotPredictor."], "methods", ["None"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ",", "eval_batch_size", "=", "None", ")", ":", "\n", "        ", "_xtest", "=", "[", "self", ".", "converter", "(", "arch", ")", "for", "arch", "in", "xtest", "]", "\n", "return", "np", ".", "squeeze", "(", "np", ".", "array", "(", "self", "(", "_xtest", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.pow3": [[12, 14], ["None"], "function", ["None"], ["def", "pow3", "(", "x", ",", "c", ",", "a", ",", "alpha", ")", ":", "\n", "    ", "return", "c", "-", "a", "*", "x", "**", "(", "-", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.linear": [[21, 23], ["None"], "function", ["None"], ["def", "linear", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "*", "x", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.log_power": [[33, 36], ["numpy.exp"], "function", ["None"], ["def", "log_power", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "# logistic power", "\n", "    ", "return", "a", "/", "(", "1.0", "+", "(", "x", "/", "np", ".", "exp", "(", "b", ")", ")", "**", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.weibull": [[43, 55], ["numpy.exp"], "function", ["None"], ["def", "weibull", "(", "x", ",", "alpha", ",", "beta", ",", "kappa", ",", "delta", ")", ":", "\n", "    ", "\"\"\"\n    Weibull modell\n\n    http://www.pisces-conservation.com/growthhelp/index.html?morgan_mercer_floden.htm\n\n    alpha: upper asymptote\n    beta: lower asymptote\n    k: growth rate\n    delta: controls the x-ordinate for the point of inflection\n    \"\"\"", "\n", "return", "alpha", "-", "(", "alpha", "-", "beta", ")", "*", "np", ".", "exp", "(", "-", "(", "(", "kappa", "*", "x", ")", "**", "delta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.mmf": [[62, 77], ["None"], "function", ["None"], ["def", "mmf", "(", "x", ",", "alpha", ",", "beta", ",", "kappa", ",", "delta", ")", ":", "\n", "    ", "\"\"\"\n    Morgan-Mercer-Flodin\n\n    description:\n    Nonlinear Regression page 342\n    http://bit.ly/1jodG17\n    http://www.pisces-conservation.com/growthhelp/index.html?morgan_mercer_floden.htm\n\n    alpha: upper asymptote\n    kappa: growth rate\n    beta: initial value\n    delta: controls the point of inflection\n    \"\"\"", "\n", "return", "alpha", "-", "(", "alpha", "-", "beta", ")", "/", "(", "1.0", "+", "(", "kappa", "*", "x", ")", "**", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.janoschek": [[84, 89], ["numpy.exp"], "function", ["None"], ["def", "janoschek", "(", "x", ",", "a", ",", "beta", ",", "k", ",", "delta", ")", ":", "\n", "    ", "\"\"\"\n    http://www.pisces-conservation.com/growthhelp/janoschek.htm\n    \"\"\"", "\n", "return", "a", "-", "(", "a", "-", "beta", ")", "*", "np", ".", "exp", "(", "-", "k", "*", "x", "**", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.ilog2": [[96, 100], ["numpy.all", "numpy.log"], "function", ["None"], ["def", "ilog2", "(", "x", ",", "c", ",", "a", ")", ":", "\n", "    ", "x", "=", "1", "+", "x", "\n", "assert", "np", ".", "all", "(", "x", ">", "1", ")", "\n", "return", "c", "-", "a", "/", "np", ".", "log", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.dr_hill_zero_background": [[107, 110], ["None"], "function", ["None"], ["def", "dr_hill_zero_background", "(", "x", ",", "theta", ",", "eta", ",", "kappa", ")", ":", "\n", "    ", "x_eta", "=", "x", "**", "eta", "\n", "return", "(", "theta", "*", "x_eta", ")", "/", "(", "kappa", "**", "eta", "+", "x_eta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.logx_linear": [[121, 124], ["numpy.log"], "function", ["None"], ["def", "logx_linear", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "x", "=", "np", ".", "log", "(", "x", ")", "\n", "return", "a", "*", "x", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.vap": [[131, 134], ["numpy.exp", "numpy.log"], "function", ["None"], ["def", "vap", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "\"\"\"Vapor pressure model\"\"\"", "\n", "return", "np", ".", "exp", "(", "a", "+", "b", "/", "x", "+", "c", "*", "np", ".", "log", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.loglog_linear": [[141, 144], ["numpy.log", "numpy.log"], "function", ["None"], ["def", "loglog_linear", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "x", "=", "np", ".", "log", "(", "x", ")", "\n", "return", "np", ".", "log", "(", "a", "*", "x", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.exp3": [[153, 155], ["numpy.exp"], "function", ["None"], ["def", "exp3", "(", "x", ",", "c", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "c", "-", "np", ".", "exp", "(", "-", "a", "*", "x", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.exp4": [[162, 164], ["numpy.exp"], "function", ["None"], ["def", "exp4", "(", "x", ",", "c", ",", "a", ",", "b", ",", "alpha", ")", ":", "\n", "    ", "return", "c", "-", "np", ".", "exp", "(", "-", "a", "*", "(", "x", "**", "alpha", ")", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.pow2": [[177, 179], ["None"], "function", ["None"], ["def", "pow2", "(", "x", ",", "a", ",", "alpha", ")", ":", "\n", "    ", "return", "a", "*", "x", "**", "(", "-", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.pow4": [[186, 188], ["None"], "function", ["None"], ["def", "pow4", "(", "x", ",", "c", ",", "a", ",", "b", ",", "alpha", ")", ":", "\n", "    ", "return", "c", "-", "(", "a", "*", "x", "+", "b", ")", "**", "-", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.sat_growth": [[195, 197], ["None"], "function", ["None"], ["def", "sat_growth", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "*", "x", "/", "(", "b", "+", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.dr_hill": [[204, 206], ["None"], "function", ["None"], ["def", "dr_hill", "(", "x", ",", "alpha", ",", "theta", ",", "eta", ",", "kappa", ")", ":", "\n", "    ", "return", "alpha", "+", "(", "theta", "*", "(", "x", "**", "eta", ")", ")", "/", "(", "kappa", "**", "eta", "+", "x", "**", "eta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.gompertz": [[218, 233], ["numpy.exp", "numpy.exp"], "function", ["None"], ["def", "gompertz", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "\"\"\"\n    Gompertz growth function.\n\n    sigmoidal family\n    a is the upper asymptote, since\n    b, c are negative numbers\n    b sets the displacement along the x axis (translates the graph to the left or right)\n    c sets the growth rate (y scaling)\n\n    e.g. used to model the growth of tumors\n\n    http://en.wikipedia.org/wiki/Gompertz_function\n    \"\"\"", "\n", "return", "a", "*", "np", ".", "exp", "(", "-", "b", "*", "np", ".", "exp", "(", "-", "c", "*", "x", ")", ")", "\n", "# return a + b * np.exp(np.exp(-k*(x-i)))", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.logistic_curve": [[241, 249], ["numpy.exp"], "function", ["None"], ["def", "logistic_curve", "(", "x", ",", "a", ",", "k", ",", "b", ")", ":", "\n", "    ", "\"\"\"\n    a: asymptote\n    k:\n    b: inflection point\n    http://www.pisces-conservation.com/growthhelp/logistic_curve.htm\n    \"\"\"", "\n", "return", "a", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "k", "*", "(", "x", "-", "b", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvefunctions.bertalanffy": [[256, 263], ["numpy.exp"], "function", ["None"], ["def", "bertalanffy", "(", "x", ",", "a", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    a: asymptote\n    k: growth rate\n    http://www.pisces-conservation.com/growthhelp/von_bertalanffy.htm\n    \"\"\"", "\n", "return", "a", "*", "(", "1.0", "-", "np", ".", "exp", "(", "-", "k", "*", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.lce_m.LCEMPredictor.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "metric", "=", "None", ")", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.lce_m.LCEMPredictor.query": [[14, 62], ["numpy.array", "len", "numpy.arange", "naslib.predictors.lce_m.learning_curves.MCMCCurveModelCombination", "range", "numpy.array", "len", "naslib.predictors.lce_m.learning_curves.MCMCCurveModelCombination.fit", "numpy.array.append", "naslib.predictors.lce_m.learning_curves.MCMCCurveModelCombination.predictive_distribution", "numpy.isnan", "print", "numpy.array", "NotImplementedError", "numpy.mean", "print", "numpy.isfinite", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.predictive_distribution"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", ")", ":", "\n", "\n", "        ", "learning_curves", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "inf", "[", "\"lc\"", "]", ")", "/", "100", "for", "inf", "in", "info", "]", ")", "\n", "trained_epochs", "=", "len", "(", "info", "[", "0", "]", "[", "\"lc\"", "]", ")", "\n", "t_idx", "=", "np", ".", "arange", "(", "1", ",", "trained_epochs", "+", "1", ")", "\n", "\n", "if", "self", ".", "ss_type", "==", "\"nasbench201\"", ":", "\n", "            ", "final_epoch", "=", "200", "\n", "default_guess", "=", "85.0", "\n", "", "elif", "self", ".", "ss_type", "==", "\"darts\"", ":", "\n", "            ", "final_epoch", "=", "98", "\n", "default_guess", "=", "93.0", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nlp\"", ":", "\n", "            ", "final_epoch", "=", "50", "\n", "default_guess", "=", "94.83", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "model", "=", "MCMCCurveModelCombination", "(", "\n", "final_epoch", "+", "1", ",", "\n", "nwalkers", "=", "50", ",", "\n", "nsamples", "=", "800", ",", "\n", "burn_in", "=", "500", ",", "\n", "recency_weighting", "=", "False", ",", "\n", "soft_monotonicity_constraint", "=", "False", ",", "\n", "monotonicity_constraint", "=", "True", ",", "\n", "initial_model_weight_ml_estimate", "=", "True", ",", "\n", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "xtest", ")", ")", ":", "\n", "\n", "            ", "model", ".", "fit", "(", "t_idx", ",", "learning_curves", "[", "i", "]", ")", "\n", "try", ":", "\n", "                ", "p", "=", "model", ".", "predictive_distribution", "(", "final_epoch", ")", "\n", "prediction", "=", "np", ".", "mean", "(", "p", ")", "*", "100", "\n", "", "except", "AssertionError", ":", "\n", "# catch AssertionError in _split_theta method", "\n", "                ", "print", "(", "\"caught AssertionError running model\"", ")", "\n", "prediction", "=", "np", ".", "nan", "\n", "\n", "", "if", "np", ".", "isnan", "(", "prediction", ")", "or", "not", "np", ".", "isfinite", "(", "prediction", ")", ":", "\n", "                ", "print", "(", "\"nan or finite\"", ")", "\n", "prediction", "=", "default_guess", "+", "np", ".", "random", ".", "rand", "(", ")", "\n", "", "predictions", ".", "append", "(", "prediction", ")", "\n", "\n", "", "predictions", "=", "np", ".", "array", "(", "predictions", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.lce_m.LCEMPredictor.get_data_reqs": [[63, 77], ["None"], "methods", ["None"], ["", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query.\n        \"\"\"", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "True", ",", "\n", "\"metric\"", ":", "self", ".", "metric", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "None", ",", "\n", "\"unlabeled\"", ":", "False", ",", "\n", "\"unlabeled_factor\"", ":", "0", ",", "\n", "}", "\n", "return", "reqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.__init__": [[23, 72], ["isinstance", "min_vals.copy", "isinstance", "max_vals.copy", "default_vals.keys", "default_vals.copy", "curvemodels.CurveModel.all_param_names.append", "len", "NotImplementedError", "inspect.getargspec", "logging.info"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["    ", "def", "__init__", "(", "\n", "self", ",", "function", ",", "function_der", "=", "None", ",", "min_vals", "=", "{", "}", ",", "max_vals", "=", "{", "}", ",", "default_vals", "=", "{", "}", "\n", ")", ":", "\n", "        ", "\"\"\"\n        function: the function to be fit\n        function_der: derivative of that function\n        \"\"\"", "\n", "self", ".", "function", "=", "function", "\n", "if", "function_der", "!=", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"function derivate is not implemented yet...sorry!\"", "\n", ")", "\n", "", "self", ".", "function_der", "=", "function_der", "\n", "assert", "isinstance", "(", "min_vals", ",", "dict", ")", "\n", "self", ".", "min_vals", "=", "min_vals", ".", "copy", "(", ")", "\n", "assert", "isinstance", "(", "max_vals", ",", "dict", ")", "\n", "self", ".", "max_vals", "=", "max_vals", ".", "copy", "(", ")", "\n", "function_args", "=", "inspect", ".", "getargspec", "(", "function", ")", ".", "args", "\n", "assert", "\"x\"", "in", "function_args", ",", "\"The function needs 'x' as a parameter.\"", "\n", "for", "default_param_name", "in", "default_vals", ".", "keys", "(", ")", ":", "\n", "            ", "if", "default_param_name", "==", "\"sigma\"", ":", "\n", "                ", "continue", "\n", "", "msg", "=", "\"function %s doesn't take default param %s\"", "%", "(", "\n", "function", ".", "__name__", ",", "\n", "default_param_name", ",", "\n", ")", "\n", "assert", "default_param_name", "in", "function_args", ",", "msg", "\n", "", "self", ".", "function_params", "=", "[", "param", "for", "param", "in", "function_args", "if", "param", "!=", "\"x\"", "]", "\n", "# set default values:", "\n", "self", ".", "default_vals", "=", "default_vals", ".", "copy", "(", ")", "\n", "for", "param_name", "in", "self", ".", "function_params", ":", "\n", "            ", "if", "param_name", "not", "in", "default_vals", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"setting function parameter %s to default of 1.0 for \"", "\n", "\"function %s\"", "%", "(", "param_name", ",", "self", ".", "function", ".", "__name__", ")", "\n", ")", "\n", "self", ".", "default_vals", "[", "param_name", "]", "=", "1.0", "\n", "", "", "self", ".", "all_param_names", "=", "[", "param", "for", "param", "in", "self", ".", "function_params", "]", "\n", "self", ".", "all_param_names", ".", "append", "(", "\"sigma\"", ")", "\n", "self", ".", "name", "=", "self", ".", "function", ".", "__name__", "\n", "self", ".", "ndim", "=", "len", "(", "self", ".", "all_param_names", ")", "\n", "\n", "# uniform noise prior over interval:", "\n", "if", "\"sigma\"", "not", "in", "self", ".", "min_vals", ":", "\n", "            ", "self", ".", "min_vals", "[", "\"sigma\"", "]", "=", "0.0", "\n", "", "if", "\"sigma\"", "not", "in", "self", ".", "max_vals", ":", "\n", "            ", "self", ".", "max_vals", "[", "\"sigma\"", "]", "=", "1.0", "\n", "", "if", "\"sigma\"", "not", "in", "self", ".", "default_vals", ":", "\n", "            ", "self", ".", "default_vals", "[", "\"sigma\"", "]", "=", "0.05", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.default_function_param_array": [[73, 76], ["numpy.asarray"], "methods", ["None"], ["", "", "def", "default_function_param_array", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "\n", "[", "self", ".", "default_vals", "[", "param_name", "]", "for", "param_name", "in", "self", ".", "function_params", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.are_params_in_bounds": [[78, 92], ["zip"], "methods", ["None"], ["", "def", "are_params_in_bounds", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Are the parameters in their respective bounds?\n        \"\"\"", "\n", "in_bounds", "=", "True", "\n", "\n", "for", "param_name", ",", "param_value", "in", "zip", "(", "self", ".", "all_param_names", ",", "theta", ")", ":", "\n", "            ", "if", "param_name", "in", "self", ".", "min_vals", ":", "\n", "                ", "if", "param_value", "<", "self", ".", "min_vals", "[", "param_name", "]", ":", "\n", "                    ", "in_bounds", "=", "False", "\n", "", "", "if", "param_name", "in", "self", ".", "max_vals", ":", "\n", "                ", "if", "param_value", ">", "self", ".", "max_vals", "[", "param_name", "]", ":", "\n", "                    ", "in_bounds", "=", "False", "\n", "", "", "", "return", "in_bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta": [[93, 103], ["zip"], "methods", ["None"], ["", "def", "split_theta", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"Split theta into the function parameters (dict) and sigma.\"\"\"", "\n", "params", "=", "{", "}", "\n", "sigma", "=", "None", "\n", "for", "param_name", ",", "param_value", "in", "zip", "(", "self", ".", "all_param_names", ",", "theta", ")", ":", "\n", "            ", "if", "param_name", "in", "self", ".", "function_params", ":", "\n", "                ", "params", "[", "param_name", "]", "=", "param_value", "\n", "", "elif", "param_name", "==", "\"sigma\"", ":", "\n", "                ", "sigma", "=", "param_value", "\n", "", "", "return", "params", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta_to_array": [[104, 109], ["None"], "methods", ["None"], ["", "def", "split_theta_to_array", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"Split theta into the function parameters (array) and sigma.\"\"\"", "\n", "params", "=", "theta", "[", ":", "-", "1", "]", "\n", "sigma", "=", "theta", "[", "-", "1", "]", "\n", "return", "params", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.fit": [[110, 112], ["NotImplementedError"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.predict": [[113, 115], ["NotImplementedError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.predict_given_theta": [[116, 123], ["curvemodels.CurveModel.split_theta", "curvemodels.CurveModel.function"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta"], ["", "def", "predict_given_theta", "(", "self", ",", "x", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Make predictions given a single theta\n        \"\"\"", "\n", "params", ",", "sigma", "=", "self", ".", "split_theta", "(", "theta", ")", "\n", "predictive_mu", "=", "self", ".", "function", "(", "x", ",", "**", "params", ")", "\n", "return", "predictive_mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.likelihood": [[124, 131], ["curvemodels.CurveModel.split_theta", "scipy.stats.norm.pdf", "curvemodels.CurveModel.function"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta"], ["", "def", "likelihood", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        for each y_i in y:\n            p(y_i|x, model)\n        \"\"\"", "\n", "params", ",", "sigma", "=", "self", ".", "split_theta", "(", "self", ".", "ml_params", ")", "\n", "return", "norm", ".", "pdf", "(", "y", "-", "self", ".", "function", "(", "x", ",", "**", "params", ")", ",", "loc", "=", "0", ",", "scale", "=", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.__init__": [[138, 144], ["curvemodels.CurveModel.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "recency_weighting", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLCurveModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "# Maximum Likelihood values of the parameters", "\n", "self", ".", "ml_params", "=", "None", "\n", "self", ".", "recency_weighting", "=", "recency_weighting", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.fit": [[145, 150], ["curvemodels.MLCurveModel.fit_ml"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.fit_ml"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ",", "weights", "=", "None", ",", "start_from_default", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        weights: None or weight for each sample.\n        \"\"\"", "\n", "return", "self", ".", "fit_ml", "(", "x", ",", "y", ",", "weights", ",", "start_from_default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.predict": [[151, 155], ["curvemodels.MLCurveModel.split_theta_to_array", "curvemodels.MLCurveModel.function"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta_to_array"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "# assert len(x.shape) == 1", "\n", "        ", "params", ",", "sigma", "=", "self", ".", "split_theta_to_array", "(", "self", ".", "ml_params", ")", "\n", "return", "self", ".", "function", "(", "x", ",", "*", "params", ")", "\n", "# return np.asarray([self.function(x_pred, **params) for x_pred in x])", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.fit_ml": [[157, 172], ["curvemodels.MLCurveModel.fit_leastsq", "curvemodels.MLCurveModel.fit_bfgs"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.fit_leastsq", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.fit_bfgs"], ["", "def", "fit_ml", "(", "self", ",", "x", ",", "y", ",", "weights", ",", "start_from_default", ")", ":", "\n", "        ", "\"\"\"\n        non-linear least-squares fit of the data.\n\n        First tries Levenberg-Marquardt and falls back\n        to BFGS in case that fails.\n\n        Start from default values or from previous ml_params?\n        \"\"\"", "\n", "successful", "=", "self", ".", "fit_leastsq", "(", "x", ",", "y", ",", "weights", ",", "start_from_default", ")", "\n", "if", "not", "successful", ":", "\n", "            ", "successful", "=", "self", ".", "fit_bfgs", "(", "x", ",", "y", ",", "weights", ",", "start_from_default", ")", "\n", "if", "not", "successful", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "successful", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.ml_sigma": [[173, 198], ["numpy.average", "numpy.sqrt", "numpy.average", "numpy.sqrt", "numpy.average", "numpy.sqrt", "curvemodels.recency_weights", "curvemodels.MLCurveModel.function", "len", "curvemodels.MLCurveModel.function", "curvemodels.MLCurveModel.function", "curvemodels.recency_weights", "curvemodels.MLCurveModel.function", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.recency_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.recency_weights"], ["", "def", "ml_sigma", "(", "self", ",", "x", ",", "y", ",", "popt", ",", "weights", ")", ":", "\n", "        ", "\"\"\"\n        Given the ML parameters (popt) get the ML estimate of sigma.\n        \"\"\"", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "if", "self", ".", "recency_weighting", ":", "\n", "                ", "variance", "=", "np", ".", "average", "(", "\n", "(", "y", "-", "self", ".", "function", "(", "x", ",", "*", "popt", ")", ")", "**", "2", ",", "weights", "=", "recency_weights", "(", "len", "(", "y", ")", ")", "\n", ")", "\n", "sigma", "=", "np", ".", "sqrt", "(", "variance", ")", "\n", "", "else", ":", "\n", "                ", "sigma", "=", "(", "y", "-", "self", ".", "function", "(", "x", ",", "*", "popt", ")", ")", ".", "std", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "recency_weighting", ":", "\n", "                ", "variance", "=", "np", ".", "average", "(", "\n", "(", "y", "-", "self", ".", "function", "(", "x", ",", "*", "popt", ")", ")", "**", "2", ",", "\n", "weights", "=", "recency_weights", "(", "len", "(", "y", ")", ")", "*", "weights", ",", "\n", ")", "\n", "sigma", "=", "np", ".", "sqrt", "(", "variance", ")", "\n", "", "else", ":", "\n", "                ", "variance", "=", "np", ".", "average", "(", "\n", "(", "y", "-", "self", ".", "function", "(", "x", ",", "*", "popt", ")", ")", "**", "2", ",", "weights", "=", "weights", "\n", ")", "\n", "sigma", "=", "np", ".", "sqrt", "(", "variance", ")", "\n", "", "", "return", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.fit_leastsq": [[199, 258], ["scipy.optimize.leastsq", "numpy.any", "curvemodels.MLCurveModel.default_function_param_array", "curvemodels.MLCurveModel.split_theta_to_array", "numpy.isnan", "any", "curvemodels.MLCurveModel.ml_sigma", "numpy.append", "logging.info", "logging.warn", "logging.warn", "logging.error", "traceback.format_exc", "logging.error", "numpy.isnan", "curvemodels.MLCurveModel.are_params_in_bounds", "str", "numpy.sqrt", "curvemodels.MLCurveModel.function", "numpy.sqrt", "numpy.sqrt", "curvemodels.recency_weights", "curvemodels.MLCurveModel.function", "curvemodels.MLCurveModel.function", "curvemodels.MLCurveModel.function", "len", "curvemodels.recency_weights", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.default_function_param_array", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta_to_array", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.ml_sigma", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.are_params_in_bounds", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.recency_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.recency_weights"], ["", "def", "fit_leastsq", "(", "self", ",", "x", ",", "y", ",", "weights", ",", "start_from_default", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "weights", "is", "None", ":", "\n", "                ", "if", "self", ".", "recency_weighting", ":", "\n", "                    ", "residuals", "=", "lambda", "p", ":", "np", ".", "sqrt", "(", "recency_weights", "(", "len", "(", "y", ")", ")", ")", "*", "(", "\n", "self", ".", "function", "(", "x", ",", "*", "p", ")", "-", "y", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "residuals", "=", "lambda", "p", ":", "self", ".", "function", "(", "x", ",", "*", "p", ")", "-", "y", "\n", "", "", "else", ":", "\n", "# the return value of this function will be squared, hence", "\n", "# we need to take the sqrt of the weights here", "\n", "                ", "if", "self", ".", "recency_weighting", ":", "\n", "                    ", "residuals", "=", "lambda", "p", ":", "np", ".", "sqrt", "(", "recency_weights", "(", "len", "(", "y", ")", ")", "*", "weights", ")", "*", "(", "\n", "self", ".", "function", "(", "x", ",", "*", "p", ")", "-", "y", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "residuals", "=", "lambda", "p", ":", "np", ".", "sqrt", "(", "weights", ")", "*", "(", "self", ".", "function", "(", "x", ",", "*", "p", ")", "-", "y", ")", "\n", "\n", "", "", "if", "start_from_default", ":", "\n", "                ", "initial_params", "=", "self", ".", "default_function_param_array", "(", ")", "\n", "", "else", ":", "\n", "                ", "initial_params", ",", "_", "=", "self", ".", "split_theta_to_array", "(", "self", ".", "ml_params", ")", "\n", "\n", "", "popt", ",", "cov_popt", ",", "info", ",", "msg", ",", "status", "=", "leastsq", "(", "\n", "residuals", ",", "x0", "=", "initial_params", ",", "full_output", "=", "True", "\n", ")", "\n", "# Dfun=,", "\n", "# col_deriv=True)", "\n", "\n", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "info", "[", "\"fjac\"", "]", ")", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "leastsq_success_statuses", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "if", "status", "in", "leastsq_success_statuses", ":", "\n", "                ", "if", "any", "(", "np", ".", "isnan", "(", "popt", ")", ")", ":", "\n", "                    ", "return", "False", "\n", "# within bounds?", "\n", "", "if", "not", "self", ".", "are_params_in_bounds", "(", "popt", ")", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "sigma", "=", "self", ".", "ml_sigma", "(", "x", ",", "y", ",", "popt", ",", "weights", ")", "\n", "self", ".", "ml_params", "=", "np", ".", "append", "(", "popt", ",", "[", "sigma", "]", ")", "\n", "\n", "logging", ".", "info", "(", "\"leastsq successful for model %s\"", "%", "self", ".", "function", ".", "__name__", ")", "\n", "\n", "return", "True", "\n", "", "else", ":", "\n", "                ", "logging", ".", "warn", "(", "\n", "\"leastsq NOT successful for model %s, msg: %s\"", "\n", "%", "(", "self", ".", "function", ".", "__name__", ",", "msg", ")", "\n", ")", "\n", "logging", ".", "warn", "(", "\"best parameters found: \"", "+", "str", "(", "popt", ")", ")", "\n", "return", "False", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logging", ".", "error", "(", "e", ")", "\n", "tb", "=", "traceback", ".", "format_exc", "(", ")", "\n", "logging", ".", "error", "(", "tb", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.fit_bfgs": [[259, 323], ["scipy.optimize.fmin_l_bfgs_b", "any", "curvemodels.MLCurveModel.ml_sigma", "numpy.append", "logging.info", "curvemodels.MLCurveModel.default_function_param_array", "curvemodels.MLCurveModel.split_theta_to_array", "logging.warn", "logging.warn", "numpy.isnan", "logging.info", "bounds.append", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "bounds.append", "bounds.append", "bounds.append", "curvemodels.recency_weights", "len", "curvemodels.MLCurveModel.function", "curvemodels.recency_weights", "curvemodels.MLCurveModel.function", "len", "curvemodels.MLCurveModel.function", "curvemodels.MLCurveModel.function"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.ml_sigma", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.default_function_param_array", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta_to_array", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.recency_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.recency_weights"], ["", "", "def", "fit_bfgs", "(", "self", ",", "x", ",", "y", ",", "weights", ",", "start_from_default", ")", ":", "\n", "        ", "try", ":", "\n", "\n", "            ", "def", "objective", "(", "params", ")", ":", "\n", "                ", "if", "weights", "is", "None", ":", "\n", "                    ", "if", "self", ".", "recency_weighting", ":", "\n", "                        ", "return", "np", ".", "sum", "(", "\n", "recency_weights", "(", "len", "(", "y", ")", ")", "\n", "*", "(", "self", ".", "function", "(", "x", ",", "*", "params", ")", "-", "y", ")", "**", "2", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "return", "np", ".", "sum", "(", "(", "self", ".", "function", "(", "x", ",", "*", "params", ")", "-", "y", ")", "**", "2", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "self", ".", "recency_weighting", ":", "\n", "                        ", "return", "np", ".", "sum", "(", "\n", "weights", "\n", "*", "recency_weights", "(", "len", "(", "y", ")", ")", "\n", "*", "(", "self", ".", "function", "(", "x", ",", "*", "params", ")", "-", "y", ")", "**", "2", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "return", "np", ".", "sum", "(", "weights", "*", "(", "self", ".", "function", "(", "x", ",", "*", "params", ")", "-", "y", ")", "**", "2", ")", "\n", "\n", "", "", "", "bounds", "=", "[", "]", "\n", "for", "param_name", "in", "self", ".", "function_params", ":", "\n", "                ", "if", "param_name", "in", "self", ".", "min_vals", "and", "param_name", "in", "self", ".", "max_vals", ":", "\n", "                    ", "bounds", ".", "append", "(", "\n", "(", "self", ".", "min_vals", "[", "param_name", "]", ",", "self", ".", "max_vals", "[", "param_name", "]", ")", "\n", ")", "\n", "", "elif", "param_name", "in", "self", ".", "min_vals", ":", "\n", "                    ", "bounds", ".", "append", "(", "(", "self", ".", "min_vals", "[", "param_name", "]", ",", "None", ")", ")", "\n", "", "elif", "param_name", "in", "self", ".", "max_vals", ":", "\n", "                    ", "bounds", ".", "append", "(", "(", "None", ",", "self", ".", "max_vals", "[", "param_name", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "bounds", ".", "append", "(", "(", "None", ",", "None", ")", ")", "\n", "\n", "", "", "if", "start_from_default", ":", "\n", "                ", "initial_params", "=", "self", ".", "default_function_param_array", "(", ")", "\n", "", "else", ":", "\n", "                ", "initial_params", ",", "_", "=", "self", ".", "split_theta_to_array", "(", "self", ".", "ml_params", ")", "\n", "\n", "", "popt", ",", "fval", ",", "info", "=", "fmin_l_bfgs_b", "(", "\n", "objective", ",", "x0", "=", "initial_params", ",", "bounds", "=", "bounds", ",", "approx_grad", "=", "True", "\n", ")", "\n", "if", "info", "[", "\"warnflag\"", "]", "!=", "0", ":", "\n", "                ", "logging", ".", "warn", "(", "\n", "\"BFGS not converged! (warnflag %d) for model %s\"", "\n", "%", "(", "info", "[", "\"warnflag\"", "]", ",", "self", ".", "name", ")", "\n", ")", "\n", "logging", ".", "warn", "(", "info", ")", "\n", "return", "False", "\n", "\n", "", "if", "popt", "is", "None", ":", "\n", "                ", "return", "False", "\n", "", "if", "any", "(", "np", ".", "isnan", "(", "popt", ")", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"bfgs NOT successful for model %s, parameter NaN\"", "%", "self", ".", "name", "\n", ")", "\n", "return", "False", "\n", "", "sigma", "=", "self", ".", "ml_sigma", "(", "x", ",", "y", ",", "popt", ",", "weights", ")", "\n", "self", ".", "ml_params", "=", "np", ".", "append", "(", "popt", ",", "[", "sigma", "]", ")", "\n", "logging", ".", "info", "(", "\"bfgs successful for model %s\"", "%", "self", ".", "name", ")", "\n", "return", "True", "\n", "", "except", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.MLCurveModel.aic": [[324, 333], ["curvemodels.MLCurveModel.split_theta_to_array", "curvemodels.MLCurveModel.function", "scipy.stats.norm.logpdf().sum", "scipy.stats.norm.logpdf", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta_to_array"], ["", "", "def", "aic", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Akaike information criterion\n        http://en.wikipedia.org/wiki/Akaike_information_criterion\n        \"\"\"", "\n", "params", ",", "sigma", "=", "self", ".", "split_theta_to_array", "(", "self", ".", "ml_params", ")", "\n", "y_model", "=", "self", ".", "function", "(", "x", ",", "*", "params", ")", "\n", "log_likelihood", "=", "norm", ".", "logpdf", "(", "y", "-", "y_model", ",", "loc", "=", "0", ",", "scale", "=", "sigma", ")", ".", "sum", "(", ")", "\n", "return", "2", "*", "len", "(", "self", ".", "function_params", ")", "-", "2", "*", "log_likelihood", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.recency_weights": [[13, 20], ["numpy.ones", "numpy.arange"], "function", ["None"], ["def", "recency_weights", "(", "num", ")", ":", "\n", "    ", "if", "num", "==", "1", ":", "\n", "        ", "return", "np", ".", "ones", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "recency_weights", "=", "[", "10", "**", "(", "1.0", "/", "num", ")", "]", "*", "num", "\n", "recency_weights", "=", "recency_weights", "**", "(", "np", ".", "arange", "(", "0", ",", "num", ")", ")", "\n", "return", "recency_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.__init__": [[32, 94], ["numpy.linspace", "numpy.asarray", "curve_models.append", "naslib.predictors.lce_m.curvemodels.MLCurveModel", "naslib.predictors.lce_m.curvemodels.MLCurveModel"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "xlim", ",", "\n", "ml_curve_models", "=", "None", ",", "\n", "burn_in", "=", "500", ",", "\n", "nwalkers", "=", "100", ",", "\n", "nsamples", "=", "2500", ",", "\n", "normalize_weights", "=", "True", ",", "\n", "monotonicity_constraint", "=", "True", ",", "\n", "soft_monotonicity_constraint", "=", "False", ",", "\n", "initial_model_weight_ml_estimate", "=", "False", ",", "\n", "normalized_weights_initialization", "=", "\"constant\"", ",", "\n", "strictly_positive_weights", "=", "True", ",", "\n", "sanity_check_prior", "=", "True", ",", "\n", "nthreads", "=", "1", ",", "\n", "recency_weighting", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        xlim: the point on the x axis we eventually want to make predictions for.\n        \"\"\"", "\n", "if", "ml_curve_models", "is", "None", ":", "\n", "            ", "curve_models", "=", "[", "]", "\n", "for", "model_name", "in", "curve_combination_models", ":", "\n", "                ", "if", "model_name", "in", "model_defaults", ":", "\n", "                    ", "m", "=", "MLCurveModel", "(", "\n", "function", "=", "all_models", "[", "model_name", "]", ",", "\n", "default_vals", "=", "model_defaults", "[", "model_name", "]", ",", "\n", "recency_weighting", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "m", "=", "MLCurveModel", "(", "\n", "function", "=", "all_models", "[", "model_name", "]", ",", "recency_weighting", "=", "False", "\n", ")", "\n", "", "curve_models", ".", "append", "(", "m", ")", "\n", "", "self", ".", "ml_curve_models", "=", "curve_models", "\n", "", "else", ":", "\n", "            ", "self", ".", "ml_curve_models", "=", "ml_curve_models", "\n", "\n", "", "self", ".", "xlim", "=", "xlim", "\n", "self", ".", "burn_in", "=", "burn_in", "\n", "self", ".", "nwalkers", "=", "nwalkers", "\n", "self", ".", "nsamples", "=", "nsamples", "\n", "self", ".", "normalize_weights", "=", "normalize_weights", "\n", "assert", "not", "(", "\n", "monotonicity_constraint", "and", "soft_monotonicity_constraint", "\n", ")", ",", "\"choose either the monotonicity_constraint or the soft_monotonicity_constraint, but not both\"", "\n", "self", ".", "monotonicity_constraint", "=", "monotonicity_constraint", "\n", "self", ".", "soft_monotonicity_constraint", "=", "soft_monotonicity_constraint", "\n", "self", ".", "initial_model_weight_ml_estimate", "=", "initial_model_weight_ml_estimate", "\n", "self", ".", "normalized_weights_initialization", "=", "normalized_weights_initialization", "\n", "self", ".", "strictly_positive_weights", "=", "strictly_positive_weights", "\n", "self", ".", "sanity_check_prior", "=", "sanity_check_prior", "\n", "self", ".", "nthreads", "=", "nthreads", "\n", "self", ".", "recency_weighting", "=", "recency_weighting", "\n", "# the constant used for initializing the parameters in a ball around the ML parameters", "\n", "self", ".", "rand_init_ball", "=", "1e-6", "\n", "self", ".", "name", "=", "\"model combination\"", "# (%s)\" % \", \".join([model.name for model in self.ml_curve_models])", "\n", "\n", "if", "self", ".", "monotonicity_constraint", ":", "\n", "            ", "self", ".", "_x_mon", "=", "np", ".", "linspace", "(", "2", ",", "self", ".", "xlim", ",", "50", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_x_mon", "=", "np", ".", "asarray", "(", "[", "2", ",", "self", ".", "xlim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.fit": [[97, 107], ["learning_curves.MCMCCurveModelCombination.fit_ml_individual", "logging.info", "learning_curves.MCMCCurveModelCombination.fit_mcmc", "logging.info", "logging.warning"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.fit_ml_individual", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.fit_mcmc"], ["", "", "def", "fit", "(", "self", ",", "x", ",", "y", ",", "model_weights", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "fit_ml_individual", "(", "x", ",", "y", ",", "model_weights", ")", ":", "\n", "# run MCMC:", "\n", "            ", "logging", ".", "info", "(", "\"Fitted models!\"", ")", "\n", "self", ".", "fit_mcmc", "(", "x", ",", "y", ")", "\n", "logging", ".", "info", "(", "\"Fitted mcmc!\"", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "logging", ".", "warning", "(", "\"fit_ml_individual failed\"", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.y_lim_sanity_check": [[108, 117], ["isinstance", "numpy.isfinite"], "methods", ["None"], ["", "", "def", "y_lim_sanity_check", "(", "self", ",", "ylim", ")", ":", "\n", "# just make sure that the prediction is not below 0 nor insanely big", "\n", "# HOWEVER: there might be cases where some models might predict value larger than 1.0", "\n", "# and this is alright, because in those cases we don't necessarily want to stop a run.", "\n", "        ", "assert", "not", "isinstance", "(", "ylim", ",", "np", ".", "ndarray", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "ylim", ")", "or", "ylim", "<", "0.0", "or", "ylim", ">", "100.0", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.y_lim_sanity_check_array": [[118, 124], ["isinstance", "numpy.isfinite"], "methods", ["None"], ["", "", "def", "y_lim_sanity_check_array", "(", "self", ",", "ylim", ")", ":", "\n", "# just make sure that the prediction is not below 0 nor insanely big", "\n", "# HOWEVER: there might be cases where some models might predict value larger than 1.0", "\n", "# and this is alright, because in those cases we don't necessarily want to stop a run.", "\n", "        ", "assert", "isinstance", "(", "ylim", ",", "np", ".", "ndarray", ")", "\n", "return", "~", "(", "~", "np", ".", "isfinite", "(", "ylim", ")", "|", "(", "ylim", "<", "0.0", ")", "|", "(", "ylim", ">", "100.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.fit_ml_individual": [[125, 198], ["learning_curves.MCMCCurveModelCombination._predict_given_params", "learning_curves.MCMCCurveModelCombination._join_theta", "len", "model.fit", "len", "model.split_theta_to_array", "model_params.append", "all_model_params.extend", "numpy.array", "logging.warning", "model.predict", "model.split_theta_to_array", "learning_curves.MCMCCurveModelCombination.fit_models.append", "numpy.array", "learning_curves.MCMCCurveModelCombination.y_lim_sanity_check", "print", "numpy.isfinite", "print", "learning_curves.MCMCCurveModelCombination.get_ml_model_weights", "zip", "learning_curves.MCMCCurveModelCombination._ln_model_prior", "len", "non_zero_fit_models.append", "non_zero_weights.append", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._predict_given_params", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._join_theta", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta_to_array", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.split_theta_to_array", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.y_lim_sanity_check", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.get_ml_model_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._ln_model_prior"], ["", "def", "fit_ml_individual", "(", "self", ",", "x", ",", "y", ",", "model_weights", ")", ":", "\n", "        ", "\"\"\"\n        Do a ML fit for each model individually and then another ML fit for the combination of models.\n        \"\"\"", "\n", "self", ".", "fit_models", "=", "[", "]", "\n", "for", "model", "in", "self", ".", "ml_curve_models", ":", "\n", "            ", "if", "model", ".", "fit", "(", "x", ",", "y", ")", ":", "\n", "                ", "ylim", "=", "model", ".", "predict", "(", "self", ".", "xlim", ")", "\n", "if", "not", "self", ".", "y_lim_sanity_check", "(", "ylim", ")", ":", "\n", "                    ", "print", "(", "\n", "\"ML fit of model %s is out of bound range [0.0, \"", "\n", "\"100.] at xlim.\"", "%", "(", "model", ".", "function", ".", "__name__", ")", "\n", ")", "\n", "continue", "\n", "", "params", ",", "sigma", "=", "model", ".", "split_theta_to_array", "(", "model", ".", "ml_params", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "self", ".", "_ln_model_prior", "(", "model", ",", "np", ".", "array", "(", "[", "params", "]", ")", ")", "[", "0", "]", ")", ":", "\n", "                    ", "print", "(", "\n", "\"ML fit of model %s is not supported by prior.\"", "\n", "%", "model", ".", "function", ".", "__name__", "\n", ")", "\n", "continue", "\n", "", "self", ".", "fit_models", ".", "append", "(", "model", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "fit_models", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "model_weights", "is", "None", ":", "\n", "            ", "if", "self", ".", "normalize_weights", ":", "\n", "                ", "if", "self", ".", "normalized_weights_initialization", "==", "\"constant\"", ":", "\n", "# initialize with a constant value", "\n", "# we will sample in this unnormalized space and then later normalize", "\n", "                    ", "model_weights", "=", "[", "10.0", "for", "model", "in", "self", ".", "fit_models", "]", "\n", "", "else", ":", "# self.normalized_weights_initialization == \"normalized\"", "\n", "                    ", "model_weights", "=", "[", "\n", "1.0", "/", "len", "(", "self", ".", "fit_models", ")", "for", "model", "in", "self", ".", "fit_models", "\n", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "initial_model_weight_ml_estimate", ":", "\n", "                    ", "model_weights", "=", "self", ".", "get_ml_model_weights", "(", "x", ",", "y", ")", "\n", "non_zero_fit_models", "=", "[", "]", "\n", "non_zero_weights", "=", "[", "]", "\n", "for", "w", ",", "model", "in", "zip", "(", "model_weights", ",", "self", ".", "fit_models", ")", ":", "\n", "                        ", "if", "w", ">", "1e-4", ":", "\n", "                            ", "non_zero_fit_models", ".", "append", "(", "model", ")", "\n", "non_zero_weights", ".", "append", "(", "w", ")", "\n", "", "", "self", ".", "fit_models", "=", "non_zero_fit_models", "\n", "model_weights", "=", "non_zero_weights", "\n", "", "else", ":", "\n", "                    ", "model_weights", "=", "[", "\n", "1.0", "/", "len", "(", "self", ".", "fit_models", ")", "for", "model", "in", "self", ".", "fit_models", "\n", "]", "\n", "\n", "# build joint ml estimated parameter vector", "\n", "", "", "", "model_params", "=", "[", "]", "\n", "all_model_params", "=", "[", "]", "\n", "for", "model", "in", "self", ".", "fit_models", ":", "\n", "            ", "params", ",", "sigma", "=", "model", ".", "split_theta_to_array", "(", "model", ".", "ml_params", ")", "\n", "model_params", ".", "append", "(", "params", ")", "\n", "all_model_params", ".", "extend", "(", "params", ")", "\n", "\n", "", "y_predicted", "=", "self", ".", "_predict_given_params", "(", "\n", "x", ",", "[", "np", ".", "array", "(", "[", "mp", "]", ")", "for", "mp", "in", "model_params", "]", ",", "np", ".", "array", "(", "[", "model_weights", "]", ")", "\n", ")", "\n", "sigma", "=", "(", "y", "-", "y_predicted", ")", ".", "std", "(", ")", "\n", "\n", "self", ".", "ml_params", "=", "self", ".", "_join_theta", "(", "all_model_params", ",", "sigma", ",", "model_weights", ")", "\n", "self", ".", "ndim", "=", "len", "(", "self", ".", "ml_params", ")", "\n", "if", "self", ".", "nwalkers", "<", "2", "*", "self", ".", "ndim", ":", "\n", "            ", "self", ".", "nwalkers", "=", "2", "*", "self", ".", "ndim", "\n", "logging", ".", "warning", "(", "\n", "\"increasing number of walkers to 2*ndim=%d\"", "%", "(", "self", ".", "nwalkers", ")", "\n", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.get_ml_model_weights": [[199, 249], ["len", "numpy.zeros", "range", "numpy.linalg.matrix_rank", "model.predict", "y_predicted.append", "b.append", "range", "print", "print", "print", "print", "model.predict.dot", "y_predicted[].dot", "numpy.linalg.solve", "scipy.optimize.nnls", "numpy.linalg.lstsq", "scipy.optimize.nnls", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "get_ml_model_weights", "(", "self", ",", "x", ",", "y_target", ")", ":", "\n", "        ", "\"\"\"\n        Get the ML estimate of the model weights.\n        \"\"\"", "\n", "\n", "\"\"\"\n            Take all the models that have been fit using ML.\n            For each model we get a prediction of y: y_i\n\n            Now how can we combine those to reduce the squared error:\n\n                argmin_w (y_target - w_1 * y_1 - w_2 * y_2 - w_3 * y_3 ...)\n\n            Deriving and setting to zero we get a linear system of equations that we need to solve.\n\n\n            Resource on QP:\n            http://stats.stackexchange.com/questions/21565/how-do-i-fit-a-constrained-regression-in-r-so-that-coefficients-total-1\n            http://maggotroot.blogspot.de/2013/11/constrained-linear-least-squares-in.html\n        \"\"\"", "\n", "num_models", "=", "len", "(", "self", ".", "fit_models", ")", "\n", "y_predicted", "=", "[", "]", "\n", "b", "=", "[", "]", "\n", "for", "model", "in", "self", ".", "fit_models", ":", "\n", "            ", "y_model", "=", "model", ".", "predict", "(", "x", ")", "\n", "y_predicted", ".", "append", "(", "y_model", ")", "\n", "b", ".", "append", "(", "y_model", ".", "dot", "(", "y_target", ")", ")", "\n", "", "a", "=", "np", ".", "zeros", "(", "(", "num_models", ",", "num_models", ")", ")", "\n", "for", "i", "in", "range", "(", "num_models", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_models", ")", ":", "\n", "                ", "a", "[", "i", ",", "j", "]", "=", "y_predicted", "[", "i", "]", ".", "dot", "(", "y_predicted", "[", "j", "]", ")", "\n", "# if i == j:", "\n", "#    a[i, j] -= 0.1 #constraint the weights!", "\n", "", "", "a_rank", "=", "np", ".", "linalg", ".", "matrix_rank", "(", "a", ")", "\n", "if", "a_rank", "!=", "num_models", ":", "\n", "            ", "print", "(", "\n", "\"Rank %d not sufficcient for solving the linear system. %d \"", "\n", "\"needed at least.\"", "%", "(", "a_rank", ",", "num_models", ")", "\n", ")", "\n", "", "try", ":", "\n", "            ", "print", "(", "np", ".", "linalg", ".", "lstsq", "(", "a", ",", "b", ")", "[", "0", "]", ")", "\n", "print", "(", "np", ".", "linalg", ".", "solve", "(", "a", ",", "b", ")", ")", "\n", "print", "(", "nnls", "(", "a", ",", "b", ")", "[", "0", "]", ")", "\n", "##return np.linalg.solve(a, b)", "\n", "weights", "=", "nnls", "(", "a", ",", "b", ")", "[", "0", "]", "\n", "# weights = [w if w > 1e-4 else 1e-4 for w in weights]", "\n", "return", "weights", "\n", "# except LinAlgError as e:", "\n", "", "except", ":", "\n", "            ", "return", "[", "1.0", "/", "len", "(", "self", ".", "fit_models", ")", "for", "model", "in", "self", ".", "fit_models", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._ln_prior": [[251, 276], ["numpy.array", "learning_curves.MCMCCurveModelCombination._split_theta", "zip", "len", "theta.reshape.reshape.reshape", "numpy.any", "numpy.isfinite", "learning_curves.MCMCCurveModelCombination._ln_model_prior", "len", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._split_theta", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._ln_model_prior"], ["", "", "def", "_ln_prior", "(", "self", ",", "theta", ")", ":", "\n", "# TODO remove this check, accept only 2d data", "\n", "        ", "if", "len", "(", "theta", ".", "shape", ")", "==", "1", ":", "\n", "            ", "theta", "=", "theta", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "ln", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "len", "(", "theta", ")", ")", "\n", "model_params", ",", "sigma", ",", "model_weights", "=", "self", ".", "_split_theta", "(", "theta", ")", "\n", "\n", "# we expect all weights to be positive", "\n", "# TODO add unit test for this!", "\n", "\n", "if", "self", ".", "strictly_positive_weights", ":", "\n", "            ", "violation", "=", "np", ".", "any", "(", "model_weights", "<", "0", ",", "axis", "=", "1", ")", "\n", "ln", "[", "violation", "]", "=", "-", "np", ".", "inf", "\n", "\n", "", "for", "model", ",", "params", "in", "zip", "(", "self", ".", "fit_models", ",", "model_params", ")", ":", "\n", "# Only calculate the prior further when the value is still finite", "\n", "            ", "mask", "=", "np", ".", "isfinite", "(", "ln", ")", "\n", "if", "np", ".", "sum", "(", "mask", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "ln", "[", "mask", "]", "+=", "self", ".", "_ln_model_prior", "(", "model", ",", "params", "[", "mask", "]", ")", "\n", "\n", "# if self.normalize_weights:", "\n", "# when we normalize we expect all weights to be positive", "\n", "", "return", "ln", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._ln_model_prior": [[277, 340], ["numpy.array", "numpy.isfinite", "enumerate", "params[].reshape", "model.function", "numpy.any", "learning_curves.MCMCCurveModelCombination.y_lim_sanity_check_array", "len", "range", "model.function", "any", "model.function", "len", "numpy.diff", "enumerate", "model.are_params_in_bounds", "range", "learning_curves.MCMCCurveModelCombination.flatten", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.y_lim_sanity_check_array", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.curvemodels.CurveModel.are_params_in_bounds", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten"], ["", "def", "_ln_model_prior", "(", "self", ",", "model", ",", "params", ")", ":", "\n", "        ", "prior", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "len", "(", "params", ")", ")", "\n", "# reshaped_params = [", "\n", "#    np.array([params[j][i]", "\n", "#              for j in range(len(params))]).reshape((-1, 1))", "\n", "#    for i in range(len(params[0]))]", "\n", "reshaped_params", "=", "[", "params", "[", ":", ",", "i", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "for", "i", "in", "range", "(", "len", "(", "params", "[", "0", "]", ")", ")", "]", "\n", "\n", "# prior_stats = []", "\n", "# prior_stats.append((0, np.mean(~np.isfinite(prior))))", "\n", "\n", "# TODO curvefunctions must be vectorized, too", "\n", "# y_mon = np.array([model.function(self._x_mon, *params_)", "\n", "#                  for params_ in params])", "\n", "\n", "# Check, is this predict the most expensive part of the whole code? TODO", "\n", "# y_mon = model.function(self._x_mon, *reshaped_params)", "\n", "\n", "if", "self", ".", "monotonicity_constraint", ":", "\n", "            ", "y_mon", "=", "model", ".", "function", "(", "self", ".", "_x_mon", ",", "*", "reshaped_params", ")", "\n", "# check for monotonicity(this obviously this is a hack, but it works for now):", "\n", "constraint_violated", "=", "np", ".", "any", "(", "np", ".", "diff", "(", "y_mon", ",", "axis", "=", "1", ")", "<", "0", ",", "axis", "=", "1", ")", "\n", "prior", "[", "constraint_violated", "]", "=", "-", "np", ".", "inf", "\n", "# for i in range(len(y_mon)):", "\n", "#    if np.any(np.diff(y_mon[i]) < 0):", "\n", "#        prior[i] = -np.inf", "\n", "\n", "", "elif", "self", ".", "soft_monotonicity_constraint", ":", "\n", "            ", "y_mon", "=", "model", ".", "function", "(", "self", ".", "_x_mon", "[", "[", "0", ",", "-", "1", "]", "]", ",", "*", "reshaped_params", ")", "\n", "# soft monotonicity: defined as the last value being bigger than the first one", "\n", "not_monotone", "=", "[", "y_mon", "[", "i", ",", "0", "]", ">", "y_mon", "[", "i", ",", "-", "1", "]", "for", "i", "in", "range", "(", "len", "(", "y_mon", ")", ")", "]", "\n", "if", "any", "(", "not_monotone", ")", ":", "\n", "                ", "for", "i", ",", "nm", "in", "enumerate", "(", "not_monotone", ")", ":", "\n", "                    ", "if", "nm", ":", "\n", "                        ", "prior", "[", "i", "]", "=", "-", "np", ".", "inf", "\n", "\n", "", "", "", "", "else", ":", "\n", "            ", "y_mon", "=", "model", ".", "function", "(", "self", ".", "_x_mon", ",", "*", "reshaped_params", ")", "\n", "\n", "# TODO curvefunctions must be vectorized, too", "\n", "# ylim = np.array([model.function(self.xlim, *params_)", "\n", "#                for params_ in params])", "\n", "# ylim = model.function(self.xlim, *reshaped_params)", "\n", "", "ylim", "=", "y_mon", "[", ":", ",", "-", "1", "]", "\n", "\n", "# sanity check for ylim", "\n", "if", "self", ".", "sanity_check_prior", ":", "\n", "            ", "sane", "=", "self", ".", "y_lim_sanity_check_array", "(", "ylim", ")", "\n", "prior", "[", "~", "sane", ".", "flatten", "(", ")", "]", "=", "-", "np", ".", "inf", "\n", "# for i, s in enumerate(sane):", "\n", "#    if not s:", "\n", "#        prior[i] = -np.inf", "\n", "\n", "# TODO vectorize this!", "\n", "", "mask", "=", "np", ".", "isfinite", "(", "prior", ")", "\n", "for", "i", ",", "params_", "in", "enumerate", "(", "params", ")", ":", "\n", "# Only check parameters which are not yet rejected", "\n", "            ", "if", "mask", "[", "i", "]", "and", "not", "model", ".", "are_params_in_bounds", "(", "params_", ")", ":", "\n", "                ", "prior", "[", "i", "]", "=", "-", "np", ".", "inf", "\n", "\n", "# prior_stats.append((3, np.mean(~np.isfinite(prior))))", "\n", "# print(prior_stats)", "\n", "", "", "return", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._ln_likelihood": [[342, 364], ["learning_curves.MCMCCurveModelCombination._predict_given_theta", "len", "NotImplementedError", "learning_curves.recency_weights", "numpy.zeros", "sigma.reshape.reshape.reshape", "scipy.stats.norm.logpdf().sum", "len", "scipy.stats.norm.logpdf", "numpy.isfinite", "scipy.stats.norm.logpdf"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._predict_given_theta", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.recency_weights"], ["", "def", "_ln_likelihood", "(", "self", ",", "theta", ",", "x", ",", "y", ")", ":", "\n", "        ", "y_model", ",", "sigma", "=", "self", ".", "_predict_given_theta", "(", "x", ",", "theta", ")", "\n", "n_models", "=", "len", "(", "y_model", ")", "\n", "\n", "if", "self", ".", "recency_weighting", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "weight", "=", "recency_weights", "(", "len", "(", "y", ")", ")", "\n", "ln_likelihood", "=", "(", "\n", "weight", "*", "norm", ".", "logpdf", "(", "y", "-", "y_model", ",", "loc", "=", "0", ",", "scale", "=", "sigma", ")", "\n", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "# ln_likelihood = [norm.logpdf(y - y_model_, loc=0, scale=sigma_).sum()", "\n", "#                 for y_model_, sigma_ in zip(y_model, sigma)]", "\n", "# ln_likelihood = np.array(ln_likelihood)", "\n", "            ", "loc", "=", "np", ".", "zeros", "(", "(", "n_models", ",", "1", ")", ")", "\n", "sigma", "=", "sigma", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "ln_likelihood2", "=", "norm", ".", "logpdf", "(", "y", "-", "y_model", ",", "loc", "=", "loc", ",", "scale", "=", "sigma", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "# print(ln_likelihood == ln_likelihood2)", "\n", "ln_likelihood", "=", "ln_likelihood2", "\n", "\n", "", "ln_likelihood", "[", "~", "np", ".", "isfinite", "(", "ln_likelihood", ")", "]", "=", "-", "np", ".", "inf", "\n", "return", "ln_likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._ln_prob": [[365, 373], ["learning_curves.MCMCCurveModelCombination._ln_prior", "learning_curves.MCMCCurveModelCombination._ln_likelihood", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._ln_prior", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._ln_likelihood"], ["", "def", "_ln_prob", "(", "self", ",", "theta", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        posterior probability\n        \"\"\"", "\n", "lp", "=", "self", ".", "_ln_prior", "(", "theta", ")", "\n", "lp", "[", "~", "np", ".", "isfinite", "(", "lp", ")", "]", "=", "-", "np", ".", "inf", "\n", "ln_prob", "=", "lp", "+", "self", ".", "_ln_likelihood", "(", "theta", ",", "x", ",", "y", ")", "\n", "return", "ln_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._split_theta": [[374, 397], ["len", "theta.reshape.reshape.reshape", "len", "all_model_params.append", "len"], "methods", ["None"], ["", "def", "_split_theta", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        theta is structured as follows:\n        for each model i\n            for each model parameter j\n        theta = (theta_ij, sigma, w_i)\n        \"\"\"", "\n", "# TODO remove this check, theta should always be 2d!", "\n", "if", "len", "(", "theta", ".", "shape", ")", "==", "1", ":", "\n", "            ", "theta", "=", "theta", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "all_model_params", "=", "[", "]", "\n", "for", "model", "in", "self", ".", "fit_models", ":", "\n", "            ", "num_model_params", "=", "len", "(", "model", ".", "function_params", ")", "\n", "model_params", "=", "theta", "[", ":", ",", ":", "num_model_params", "]", "\n", "all_model_params", ".", "append", "(", "model_params", ")", "\n", "\n", "theta", "=", "theta", "[", ":", ",", "num_model_params", ":", "]", "\n", "\n", "", "sigma", "=", "theta", "[", ":", ",", "0", "]", "\n", "model_weights", "=", "theta", "[", ":", ",", "1", ":", "]", "\n", "assert", "model_weights", ".", "shape", "[", "1", "]", "==", "len", "(", "self", ".", "fit_models", ")", "\n", "return", "all_model_params", ",", "sigma", ",", "model_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._join_theta": [[398, 405], ["theta.extend", "theta.append", "theta.extend"], "methods", ["None"], ["", "def", "_join_theta", "(", "self", ",", "model_params", ",", "sigma", ",", "model_weights", ")", ":", "\n", "# assert len(model_params) == len(model_weights)", "\n", "        ", "theta", "=", "[", "]", "\n", "theta", ".", "extend", "(", "model_params", ")", "\n", "theta", ".", "append", "(", "sigma", ")", "\n", "theta", ".", "extend", "(", "model_weights", ")", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.fit_mcmc": [[406, 437], ["numpy.random.RandomState", "emcee.EnsembleSampler.run_mcmc", "emcee.EnsembleSampler", "emcee.EnsembleSampler", "learning_curves.MCMCCurveModelCombination.normalize_chain_model_weights", "range", "numpy.random.RandomState.randn", "PseudoPool", "func", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.normalize_chain_model_weights"], ["", "def", "fit_mcmc", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# initialize in an area around the starting position", "\n", "\n", "        ", "class", "PseudoPool", "(", "object", ")", ":", "\n", "            ", "def", "map", "(", "self", ",", "func", ",", "proposals", ")", ":", "\n", "                ", "return", "[", "f", "for", "f", "in", "func", "(", "np", ".", "array", "(", "proposals", ")", ")", "]", "\n", "\n", "", "", "rstate0", "=", "np", ".", "random", ".", "RandomState", "(", "1", ")", "\n", "assert", "self", ".", "ml_params", "is", "not", "None", "\n", "pos", "=", "[", "\n", "self", ".", "ml_params", "+", "self", ".", "rand_init_ball", "*", "rstate0", ".", "randn", "(", "self", ".", "ndim", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nwalkers", ")", "\n", "]", "\n", "\n", "if", "self", ".", "nthreads", "<=", "1", ":", "\n", "            ", "sampler", "=", "emcee", ".", "EnsembleSampler", "(", "\n", "self", ".", "nwalkers", ",", "self", ".", "ndim", ",", "self", ".", "_ln_prob", ",", "args", "=", "(", "x", ",", "y", ")", ",", "pool", "=", "PseudoPool", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "emcee", ".", "EnsembleSampler", "(", "\n", "self", ".", "nwalkers", ",", "\n", "self", ".", "ndim", ",", "\n", "model_ln_prob", ",", "\n", "args", "=", "(", "self", ",", "x", ",", "y", ")", ",", "\n", "threads", "=", "self", ".", "nthreads", ",", "\n", ")", "\n", "", "sampler", ".", "run_mcmc", "(", "pos", ",", "self", ".", "nsamples", ",", "rstate0", "=", "rstate0", ")", "\n", "self", ".", "mcmc_chain", "=", "sampler", ".", "chain", "\n", "\n", "if", "self", ".", "normalize_weights", ":", "\n", "            ", "self", ".", "normalize_chain_model_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.normalize_chain_model_weights": [[438, 449], ["model_weights_chain.sum", "len", "len"], "methods", ["None"], ["", "", "def", "normalize_chain_model_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        In the chain we sample w_1,... w_i however we are interested in the model\n        probabilities p_1,... p_i\n        \"\"\"", "\n", "model_weights_chain", "=", "self", ".", "mcmc_chain", "[", ":", ",", ":", ",", "-", "len", "(", "self", ".", "fit_models", ")", ":", "]", "\n", "model_probabilities_chain", "=", "(", "\n", "model_weights_chain", "/", "model_weights_chain", ".", "sum", "(", "axis", "=", "2", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", ")", "\n", "# replace in chain", "\n", "self", ".", "mcmc_chain", "[", ":", ",", ":", ",", "-", "len", "(", "self", ".", "fit_models", ")", ":", "]", "=", "model_probabilities_chain", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.get_burned_in_samples": [[450, 453], ["learning_curves.MCMCCurveModelCombination.mcmc_chain[].reshape"], "methods", ["None"], ["", "def", "get_burned_in_samples", "(", "self", ")", ":", "\n", "        ", "samples", "=", "self", ".", "mcmc_chain", "[", ":", ",", "self", ".", "burn_in", ":", ",", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "ndim", ")", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.print_probs": [[454, 458], ["learning_curves.MCMCCurveModelCombination.get_burned_in_samples", "print", "model_probabilities.mean", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.get_burned_in_samples"], ["", "def", "print_probs", "(", "self", ")", ":", "\n", "        ", "burned_in_chain", "=", "self", ".", "get_burned_in_samples", "(", ")", "\n", "model_probabilities", "=", "burned_in_chain", "[", ":", ",", "-", "len", "(", "self", ".", "fit_models", ")", ":", "]", "\n", "print", "(", "model_probabilities", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._predict_given_theta": [[459, 468], ["learning_curves.MCMCCurveModelCombination._split_theta", "learning_curves.MCMCCurveModelCombination._predict_given_params"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._split_theta", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._predict_given_params"], ["", "def", "_predict_given_theta", "(", "self", ",", "x", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        returns y_predicted, sigma\n        \"\"\"", "\n", "model_params", ",", "sigma", ",", "model_weights", "=", "self", ".", "_split_theta", "(", "theta", ")", "\n", "\n", "y_predicted", "=", "self", ".", "_predict_given_params", "(", "x", ",", "model_params", ",", "model_weights", ")", "\n", "\n", "return", "y_predicted", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._predict_given_params": [[469, 505], ["numpy.zeros", "zip", "numpy.sum", "hasattr", "len", "model_ws.transpose", "len", "params[].reshape", "model_w.reshape", "model.function", "range", "model_weights.transpose"], "methods", ["None"], ["", "def", "_predict_given_params", "(", "self", ",", "x", ",", "model_params", ",", "model_weights", ")", ":", "\n", "        ", "\"\"\"\n        returns y_predicted\n        \"\"\"", "\n", "\n", "if", "self", ".", "normalize_weights", ":", "\n", "            ", "model_weight_sum", "=", "np", ".", "sum", "(", "model_weights", ",", "axis", "=", "1", ")", "\n", "model_ws", "=", "(", "model_weights", ".", "transpose", "(", ")", "/", "model_weight_sum", ")", ".", "transpose", "(", ")", "\n", "", "else", ":", "\n", "            ", "model_ws", "=", "model_weights", "\n", "\n", "# # TODO vectorize!", "\n", "# vectorized_predictions = []", "\n", "# for i in range(len(model_weights)):", "\n", "#     y_model = []", "\n", "#     for model, model_w, params in zip(self.fit_models, model_ws[i],", "\n", "#                                       model_params):", "\n", "#         y_model.append(model_w * model.function(x, *params[i]))", "\n", "#     y_predicted = functools.reduce(lambda a, b: a + b, y_model)", "\n", "#     vectorized_predictions.append(y_predicted)", "\n", "\n", "", "len_x", "=", "len", "(", "x", ")", "if", "hasattr", "(", "x", ",", "\"__len__\"", ")", "else", "1", "\n", "test_predictions", "=", "np", ".", "zeros", "(", "(", "len", "(", "model_weights", ")", ",", "len_x", ")", ")", "\n", "for", "model", ",", "model_w", ",", "params", "in", "zip", "(", "\n", "self", ".", "fit_models", ",", "model_ws", ".", "transpose", "(", ")", ",", "model_params", "\n", ")", ":", "\n", "            ", "params2", "=", "[", "params", "[", ":", ",", "i", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "for", "i", "in", "range", "(", "params", ".", "shape", "[", "1", "]", ")", "]", "\n", "params", "=", "params2", "\n", "# params = [np.array([params[j][i] for j in range(len(params))]).reshape((-1, 1))", "\n", "#          for i in range(len(params[0]))]", "\n", "# print('Diff', np.sum(np.array(params2)", "\n", "#             - np.array(params).reshape((len(params2), -1))))", "\n", "prediction", "=", "model_w", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "*", "model", ".", "function", "(", "x", ",", "*", "params", ")", "\n", "test_predictions", "+=", "prediction", "\n", "\n", "", "return", "test_predictions", "\n", "# return np.array(vectorized_predictions)", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.predictive_distribution": [[507, 517], ["learning_curves.MCMCCurveModelCombination.get_burned_in_samples", "numpy.asarray", "isinstance", "isinstance", "type", "learning_curves.MCMCCurveModelCombination._split_theta", "learning_curves.MCMCCurveModelCombination._predict_given_params", "predictions.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.get_burned_in_samples", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._split_theta", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._predict_given_params"], ["", "def", "predictive_distribution", "(", "self", ",", "x", ",", "thin", "=", "1", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "float", ")", "or", "isinstance", "(", "x", ",", "int", ")", ",", "(", "x", ",", "type", "(", "x", ")", ")", "\n", "\n", "samples", "=", "self", ".", "get_burned_in_samples", "(", ")", "\n", "predictions", "=", "[", "]", "\n", "for", "theta", "in", "samples", "[", ":", ":", "thin", "]", ":", "\n", "            ", "model_params", ",", "sigma", ",", "model_weights", "=", "self", ".", "_split_theta", "(", "theta", ")", "\n", "y_predicted", "=", "self", ".", "_predict_given_params", "(", "x", ",", "model_params", ",", "model_weights", ")", "\n", "predictions", ".", "append", "(", "y_predicted", ")", "\n", "", "return", "np", ".", "asarray", "(", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.prob_x_greater_than": [[518, 529], ["learning_curves.MCMCCurveModelCombination._split_theta", "learning_curves.MCMCCurveModelCombination._predict_given_params", "scipy.stats.norm.cdf"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._split_theta", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination._predict_given_params"], ["", "def", "prob_x_greater_than", "(", "self", ",", "x", ",", "y", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        P(f(x) > y | Data, theta)\n        \"\"\"", "\n", "model_params", ",", "sigma", ",", "model_weights", "=", "self", ".", "_split_theta", "(", "theta", ")", "\n", "\n", "y_predicted", "=", "self", ".", "_predict_given_params", "(", "x", ",", "model_params", ",", "model_weights", ")", "\n", "\n", "cdf", "=", "norm", ".", "cdf", "(", "y", ",", "loc", "=", "y_predicted", ",", "scale", "=", "sigma", ")", "\n", "\n", "return", "1.0", "-", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.posterior_prob_x_greater_than": [[530, 544], ["learning_curves.MCMCCurveModelCombination.get_burned_in_samples", "numpy.ma.masked_invalid().mean", "isinstance", "isinstance", "isinstance", "isinstance", "probs.append", "learning_curves.MCMCCurveModelCombination.prob_x_greater_than", "numpy.ma.masked_invalid"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.get_burned_in_samples", "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.MCMCCurveModelCombination.prob_x_greater_than"], ["", "def", "posterior_prob_x_greater_than", "(", "self", ",", "x", ",", "y", ",", "thin", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        P(f(x) > y | Data)\n\n        Posterior probability that f(x) is greater than y.\n        \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "float", ")", "or", "isinstance", "(", "x", ",", "int", ")", "\n", "assert", "isinstance", "(", "y", ",", "float", ")", "or", "isinstance", "(", "y", ",", "int", ")", "\n", "probs", "=", "[", "]", "\n", "samples", "=", "self", ".", "get_burned_in_samples", "(", ")", "\n", "for", "theta", "in", "samples", "[", ":", ":", "thin", "]", ":", "\n", "            ", "probs", ".", "append", "(", "self", ".", "prob_x_greater_than", "(", "x", ",", "y", ",", "theta", ")", ")", "\n", "\n", "", "return", "np", ".", "ma", ".", "masked_invalid", "(", "probs", ")", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.recency_weights": [[18, 25], ["numpy.ones", "numpy.arange"], "function", ["None"], ["def", "recency_weights", "(", "num", ")", ":", "\n", "    ", "if", "num", "==", "1", ":", "\n", "        ", "return", "np", ".", "ones", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "recency_weights", "=", "[", "10", "**", "(", "1.0", "/", "num", ")", "]", "*", "num", "\n", "recency_weights", "=", "recency_weights", "**", "(", "np", ".", "arange", "(", "0", ",", "num", ")", ")", "\n", "return", "recency_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce_m.learning_curves.model_ln_prob": [[27, 29], ["model.ln_prob"], "function", ["None"], ["", "", "def", "model_ln_prob", "(", "theta", ",", "model", ",", "x", ",", "y", ")", ":", "\n", "    ", "return", "model", ".", "ln_prob", "(", "theta", ",", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.__init__": [[13, 16], ["len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parametric_models", ":", "List", "[", "ParametricModel", "]", ")", ":", "\n", "        ", "self", ".", "parametric_models", "=", "parametric_models", "\n", "self", ".", "weights", "=", "[", "1", "/", "len", "(", "parametric_models", ")", "]", "*", "len", "(", "parametric_models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.fit": [[17, 32], ["range", "model.fit", "model.get_params", "parametric_ensemble.ParametricEnsemble.predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.ParametricModel.get_params", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "fit", "(", "self", ",", "x", ",", "fit_weights", "=", "False", ")", ":", "\n", "        ", "if", "fit_weights", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "self", ".", "x", "=", "x", "\n", "for", "model", "in", "self", ".", "parametric_models", ":", "\n", "                ", "model", ".", "fit", "(", "x", ")", "\n", "", "self", ".", "params", "=", "{", "\n", "model", ".", "name", ":", "model", ".", "get_params", "(", ")", "for", "model", "in", "self", ".", "parametric_models", "\n", "}", "\n", "# set sigma squared to be the sample variance", "\n", "sum_sq", "=", "0", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "sum_sq", "+=", "(", "x", "[", "i", "]", "-", "self", ".", "predict", "(", "i", "+", "1", ")", ")", "**", "2", "\n", "", "self", ".", "sigma_sq", "=", "(", "1", "/", "x", ".", "shape", "[", "0", "]", ")", "*", "sum_sq", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.predict": [[33, 45], ["sum", "sum", "model.predict", "zip", "model.predict", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "", "def", "predict", "(", "self", ",", "x", ",", "params", "=", "None", ",", "weights", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "not", "None", ":", "\n", "            ", "return", "sum", "(", "\n", "[", "\n", "w", "*", "model", ".", "predict", "(", "x", ",", "params", "=", "params", "[", "model", ".", "name", "]", ")", "\n", "for", "(", "w", ",", "model", ")", "in", "zip", "(", "weights", ",", "self", ".", "parametric_models", ")", "\n", "]", "\n", ")", "\n", "", "return", "sum", "(", "\n", "[", "\n", "w", "*", "model", ".", "predict", "(", "x", ")", "\n", "for", "(", "w", ",", "model", ")", "in", "zip", "(", "self", ".", "weights", ",", "self", ".", "parametric_models", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.get_params": [[48, 50], ["None"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "params", ",", "self", ".", "weights", ",", "self", ".", "sigma_sq", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.set_params": [[51, 55], ["None"], "methods", ["None"], ["", "def", "set_params", "(", "self", ",", "params", ",", "sigma_sq", "=", "None", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "if", "sigma_sq", ":", "\n", "            ", "self", ".", "sigma_sq", "=", "sigma_sq", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.perturb_params": [[56, 78], ["numpy.random.normal", "params.copy", "weights.copy", "range", "sum", "numpy.concatenate", "len", "len", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["", "", "def", "perturb_params", "(", "self", ",", "params", ",", "weights", ",", "sigma_sq", ",", "var", ")", ":", "\n", "\n", "# free variables: sigma squared, weights, model parameters", "\n", "        ", "deg_freedom", "=", "(", "\n", "1", "\n", "+", "len", "(", "self", ".", "weights", ")", "\n", "+", "sum", "(", "[", "model", ".", "degrees_freedom", "for", "model", "in", "self", ".", "parametric_models", "]", ")", "\n", ")", "\n", "perturbation", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "var", ",", "size", "=", "(", "deg_freedom", ",", ")", ")", "\n", "perturbed_params", "=", "params", ".", "copy", "(", ")", "\n", "perturbed_weights", "=", "weights", ".", "copy", "(", ")", "\n", "pos", "=", "0", "\n", "for", "model", "in", "self", ".", "parametric_models", ":", "\n", "            ", "perturbed_params", "[", "model", ".", "name", "]", "+=", "np", ".", "concatenate", "(", "\n", "[", "perturbation", "[", "pos", ":", "pos", "+", "model", ".", "degrees_freedom", "]", ",", "np", ".", "zeros", "(", "(", "1", ",", ")", ")", "]", "\n", ")", "\n", "pos", "+=", "model", ".", "degrees_freedom", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "weights", ")", ")", ":", "\n", "            ", "perturbed_weights", "[", "i", "]", "+=", "perturbation", "[", "pos", "]", "\n", "pos", "+=", "1", "\n", "", "perturbed_sigma_sq", "=", "sigma_sq", "+", "perturbation", "[", "-", "1", "]", "\n", "return", "perturbed_params", ",", "perturbed_weights", ",", "perturbed_sigma_sq", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.mcmc": [[79, 163], ["parametric_ensemble.ParametricEnsemble.fit", "time.time", "parametric_ensemble.ParametricEnsemble.params.copy", "parametric_ensemble.ParametricEnsemble.weights.copy", "range", "print", "parametric_ensemble.ParametricEnsemble.mcmc_sample_params.append", "range", "parametric_ensemble.ParametricEnsemble.perturb_params", "range", "min", "scipy.stats.norm.pdf", "numpy.log", "scipy.stats.norm.pdf", "min", "numpy.exp", "parametric_ensemble.ParametricEnsemble.predict", "parametric_ensemble.ParametricEnsemble.predict", "parametric_ensemble.ParametricEnsemble.predict", "parametric_ensemble.ParametricEnsemble.predict", "numpy.log", "numpy.random.random", "print", "numpy.sqrt", "print", "numpy.sqrt", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.perturb_params", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "mcmc", "(", "self", ",", "x", ",", "N", "=", "10000", ",", "var", "=", "0.0001", ",", "fit_weights", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "(", "\n", "acceptances", ",", "\n", "stochastic_rejections", ",", "\n", "pathological_rejections", ",", "\n", "way_off_rejections", ",", "\n", ")", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "\n", "self", ".", "fit", "(", "x", ",", "fit_weights", ")", "# initialize with mle estimates for each model", "\n", "\n", "curvelen", "=", "x", ".", "shape", "[", "0", "]", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "params", "=", "self", ".", "params", ".", "copy", "(", ")", "\n", "weights", "=", "self", ".", "weights", ".", "copy", "(", ")", "\n", "sigma_sq", "=", "self", ".", "sigma_sq", "\n", "self", ".", "mcmc_sample_params", "=", "[", "]", "\n", "\n", "zero_likelihood", "=", "False", "\n", "\n", "# sampling loop", "\n", "for", "t", "in", "range", "(", "N", ")", ":", "\n", "            ", "self", ".", "mcmc_sample_params", ".", "append", "(", "(", "params", ",", "weights", ")", ")", "\n", "\n", "if", "verbose", ":", "\n", "                ", "if", "t", "==", "1", ":", "\n", "                    ", "last_power_two", "=", "t", "\n", "", "elif", "t", "==", "2", "*", "last_power_two", ":", "\n", "                    ", "last_power_two", "=", "t", "\n", "print", "(", "\n", "f\"Completed {t} Metropolis steps in {time.time() - start} seconds.\"", "\n", ")", "\n", "\n", "", "", "current_log_likelihood", "=", "0", "\n", "for", "j", "in", "range", "(", "curvelen", ")", ":", "\n", "                ", "jth_error", "=", "self", ".", "predict", "(", "j", "+", "1", ",", "params", "=", "params", ",", "weights", "=", "weights", ")", "-", "x", "[", "j", "]", "\n", "point_likelihood", "=", "norm", ".", "pdf", "(", "jth_error", ",", "scale", "=", "np", ".", "sqrt", "(", "sigma_sq", ")", ")", "\n", "if", "not", "point_likelihood", ">", "0", ":", "\n", "                    ", "point_likelihood", "=", "1e-10", "\n", "if", "not", "zero_likelihood", ":", "\n", "                        ", "zero_likelihood", "=", "True", "\n", "print", "(", "\"point likelihood was 0\"", ")", "\n", "", "", "current_log_likelihood", "+=", "np", ".", "log", "(", "point_likelihood", ")", "\n", "\n", "", "(", "\n", "candidate_params", ",", "\n", "candidate_weights", ",", "\n", "candidate_sigma_sq", ",", "\n", ")", "=", "self", ".", "perturb_params", "(", "params", ",", "weights", ",", "sigma_sq", ",", "var", ")", "\n", "if", "candidate_sigma_sq", "<=", "0", ":", "\n", "# reject, sigma squared must be positive", "\n", "                ", "continue", "\n", "", "candidate_log_likelihood", "=", "0", "\n", "min_point_likelihood", "=", "1", "\n", "for", "j", "in", "range", "(", "curvelen", ")", ":", "\n", "                ", "jth_error", "=", "(", "\n", "self", ".", "predict", "(", "\n", "j", "+", "1", ",", "params", "=", "candidate_params", ",", "weights", "=", "candidate_weights", "\n", ")", "\n", "-", "x", "[", "j", "]", "\n", ")", "\n", "point_likelihood", "=", "norm", ".", "pdf", "(", "\n", "jth_error", ",", "scale", "=", "np", ".", "sqrt", "(", "candidate_sigma_sq", ")", "\n", ")", "\n", "min_point_likelihood", "=", "min", "(", "min_point_likelihood", ",", "point_likelihood", ")", "\n", "if", "point_likelihood", ">", "0", ":", "\n", "                    ", "candidate_log_likelihood", "+=", "np", ".", "log", "(", "point_likelihood", ")", "\n", "", "", "if", "min_point_likelihood", "==", "0", ":", "\n", "# reject due to vanishing point likelihood", "\n", "                ", "continue", "\n", "\n", "", "acceptance_probability", "=", "min", "(", "\n", "1", ",", "np", ".", "exp", "(", "candidate_log_likelihood", "-", "current_log_likelihood", ")", "\n", ")", "\n", "if", "self", ".", "predict", "(", "\n", "curvelen", "+", "1", ",", "params", "=", "candidate_params", ",", "weights", "=", "candidate_weights", "\n", ")", ">", "self", ".", "predict", "(", "1", ",", "params", "=", "candidate_params", ",", "weights", "=", "candidate_weights", ")", ":", "\n", "                ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "acceptance_probability", ":", "\n", "                    ", "params", "=", "candidate_params", "\n", "weights", "=", "candidate_weights", "\n", "sigma_sq", "=", "candidate_sigma_sq", "\n", "acceptances", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\n", "f\"Completed with acceptance rate {acceptances / N} in {time.time() - start} seconds.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.mcmc_sample_predict": [[165, 172], ["sum", "len", "parametric_ensemble.ParametricEnsemble.predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "mcmc_sample_predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "sum", "(", "\n", "[", "\n", "self", ".", "predict", "(", "x", ",", "params", "=", "p", "[", "0", "]", ",", "weights", "=", "p", "[", "1", "]", ")", "\n", "for", "p", "in", "self", ".", "mcmc_sample_params", "\n", "]", "\n", ")", "/", "len", "(", "self", ".", "mcmc_sample_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.mcmc_sample_eval": [[173, 182], ["parametric_ensemble.ParametricEnsemble.mcmc_sample_predict", "range", "print", "print"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.mcmc_sample_predict"], ["", "def", "mcmc_sample_eval", "(", "self", ",", "epochs", ",", "y", ")", ":", "\n", "        ", "predictions", "=", "self", ".", "mcmc_sample_predict", "(", "epochs", ")", "\n", "mse", "=", "0", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "print", "(", "\"pred\"", ",", "predictions", "[", "i", "]", ",", "\"real\"", ",", "y", "[", "i", "]", ")", "\n", "mse", "+=", "(", "predictions", "[", "i", "]", "-", "y", "[", "i", "]", ")", "**", "2", "\n", "print", "(", "\"mse\"", ",", "(", "predictions", "[", "i", "]", "-", "y", "[", "i", "]", ")", "**", "2", ")", "\n", "", "mse", "/=", "y", ".", "shape", "[", "0", "]", "\n", "return", "mse", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.ParametricModel.__init__": [[23, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_class", ",", "degrees_freedom", ",", "name", ",", "bounds", "=", "None", ")", ":", "\n", "        ", "self", ".", "model_class", "=", "model_class", "\n", "self", ".", "degrees_freedom", "=", "degrees_freedom", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "bounds", "=", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.ParametricModel.fit": [[29, 38], ["parametric_model.optimize_model_class", "list", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.optimize_model_class"], ["", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "# x is np array dim 1", "\n", "        ", "self", ".", "x", "=", "x", "\n", "self", ".", "params", "=", "optimize_model_class", "(", "\n", "self", ".", "model_class", ",", "\n", "self", ".", "degrees_freedom", ",", "\n", "list", "(", "range", "(", "1", ",", "x", ".", "shape", "[", "0", "]", "+", "1", ")", ")", ",", "\n", "x", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.ParametricModel.get_params": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.ParametricModel.set_params": [[43, 45], ["None"], "methods", ["None"], ["", "def", "set_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.ParametricModel.predict": [[46, 50], ["parametric_model.ParametricModel.model_class", "parametric_model.ParametricModel.model_class"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "model_class", "(", "params", ")", "(", "x", ")", "\n", "", "return", "self", ".", "model_class", "(", "self", ".", "params", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.optimize_model_class": [[8, 20], ["scipy.optimize.minimize", "numpy.array", "sum", "numpy.log", "numpy.log", "len", "len", "fn_class"], "function", ["None"], ["def", "optimize_model_class", "(", "fn_class", ",", "deg_freedom", ",", "x", ",", "y", ",", "bounds", "=", "None", ")", ":", "\n", "    ", "def", "likelihood", "(", "parameters", ")", ":", "\n", "        ", "return", "(", "\n", "len", "(", "x", ")", "/", "2", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "\n", "+", "len", "(", "x", ")", "/", "2", "*", "np", ".", "log", "(", "parameters", "[", "-", "1", "]", "**", "2", ")", "\n", "+", "1", "/", "(", "2", "*", "parameters", "[", "-", "1", "]", "**", "2", ")", "*", "sum", "(", "(", "y", "-", "fn_class", "(", "parameters", ")", "(", "x", ")", ")", "**", "2", ")", "\n", ")", "\n", "\n", "", "opt_model", "=", "minimize", "(", "\n", "likelihood", ",", "np", ".", "array", "(", "[", "1", "]", "*", "(", "deg_freedom", "+", "1", ")", ")", ",", "method", "=", "\"L-BFGS-B\"", ",", "bounds", "=", "bounds", "\n", ")", "\n", "return", "opt_model", "[", "\"x\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.parametric_model": [[52, 54], ["numpy.vectorize", "func"], "function", ["None"], ["", "", "def", "parametric_model", "(", "func", ")", ":", "\n", "    ", "return", "lambda", "params", ":", "np", ".", "vectorize", "(", "lambda", "x", ":", "func", "(", "params", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.vapor_pressure": [[60, 64], ["numpy.log"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "vapor_pressure", "(", "params", ",", "x", ")", ":", "\n", "    ", "a", ",", "b", ",", "c", ",", "_", "=", "params", "\n", "return", "a", "+", "b", "/", "x", "+", "c", "*", "np", ".", "log", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.pow3": [[66, 70], ["None"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "pow3", "(", "params", ",", "x", ")", ":", "\n", "    ", "a", ",", "c", ",", "alpha", ",", "_", "=", "params", "\n", "return", "c", "-", "a", "*", "(", "(", "1.0", "*", "x", ")", "**", "-", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.logloglinear": [[72, 76], ["numpy.log", "numpy.log"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "logloglinear", "(", "params", ",", "x", ")", ":", "\n", "    ", "a", ",", "b", ",", "_", "=", "params", "\n", "return", "np", ".", "log", "(", "a", "*", "np", ".", "log", "(", "x", ")", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.hill3": [[78, 82], ["None"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "hill3", "(", "params", ",", "x", ")", ":", "\n", "    ", "ymax", ",", "eta", ",", "kappa", ",", "_", "=", "params", "\n", "return", "ymax", "*", "(", "x", "**", "eta", ")", "/", "(", "kappa", "*", "eta", "+", "x", "**", "eta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.logpower": [[84, 88], ["numpy.exp"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "logpower", "(", "params", ",", "x", ")", ":", "\n", "    ", "a", ",", "b", ",", "c", ",", "_", "=", "params", "\n", "return", "a", "/", "(", "1", "+", "(", "x", "/", "np", ".", "exp", "(", "b", ")", ")", "**", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.pow4": [[90, 94], ["None"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "pow4", "(", "params", ",", "x", ")", ":", "\n", "    ", "a", ",", "b", ",", "c", ",", "alpha", ",", "_", "=", "params", "\n", "return", "c", "-", "(", "a", "*", "x", "+", "b", ")", "**", "(", "-", "1", "*", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.mmf": [[96, 100], ["None"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "mmf", "(", "params", ",", "x", ")", ":", "\n", "    ", "alpha", ",", "beta", ",", "delta", ",", "kappa", ",", "_", "=", "params", "\n", "return", "alpha", "-", "(", "alpha", "-", "beta", ")", "/", "(", "1", "+", "(", "kappa", "*", "x", ")", "**", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.exp4": [[102, 106], ["numpy.exp"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "exp4", "(", "params", ",", "x", ")", ":", "\n", "    ", "a", ",", "b", ",", "c", ",", "alpha", ",", "_", "=", "params", "\n", "return", "c", "-", "np", ".", "exp", "(", "-", "a", "*", "(", "x", "**", "alpha", ")", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.janoschek": [[108, 112], ["numpy.exp"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "janoschek", "(", "params", ",", "x", ")", ":", "\n", "    ", "alpha", ",", "beta", ",", "kappa", ",", "delta", ",", "_", "=", "params", "\n", "return", "alpha", "-", "(", "alpha", "-", "beta", ")", "*", "np", ".", "exp", "(", "-", "kappa", "*", "(", "x", "**", "delta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.weibull": [[114, 118], ["numpy.exp"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "weibull", "(", "params", ",", "x", ")", ":", "\n", "    ", "alpha", ",", "beta", ",", "kappa", ",", "delta", ",", "_", "=", "params", "\n", "return", "alpha", "-", "(", "alpha", "-", "beta", ")", "*", "np", ".", "exp", "(", "-", "(", "(", "kappa", "*", "x", ")", "**", "delta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.ilog2": [[120, 124], ["numpy.log"], "function", ["None"], ["", "@", "parametric_model", "\n", "def", "ilog2", "(", "params", ",", "x", ")", ":", "\n", "    ", "a", ",", "c", ",", "_", "=", "params", "\n", "return", "c", "-", "(", "a", "/", "np", ".", "log", "(", "x", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.construct_parametric_model": [[199, 205], ["parametric_model.ParametricModel"], "function", ["None"], ["def", "construct_parametric_model", "(", "model_config", ",", "model_name", ")", ":", "\n", "    ", "return", "ParametricModel", "(", "\n", "model_config", "[", "model_name", "]", "[", "\"model\"", "]", ",", "\n", "model_config", "[", "model_name", "]", "[", "\"deg_freedom\"", "]", ",", "\n", "model_name", ",", "\n", "model_config", "[", "model_name", "]", "[", "\"bounds\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "metric", "=", "None", ")", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.query": [[19, 57], ["naslib.predictors.lce.parametric_ensemble.ParametricEnsemble", "numpy.array", "len", "range", "numpy.squeeze", "len", "naslib.predictors.lce.parametric_ensemble.ParametricEnsemble.mcmc", "naslib.predictors.lce.parametric_ensemble.ParametricEnsemble.mcmc_sample_predict", "numpy.squeeze.append", "numpy.array", "naslib.predictors.lce.parametric_model.construct_parametric_model", "numpy.squeeze", "numpy.isnan", "print", "numpy.array", "NotImplementedError", "numpy.isfinite", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.mcmc", "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_ensemble.ParametricEnsemble.mcmc_sample_predict", "home.repos.pwc.inspect_result.gideonfr_emprox.lce.parametric_model.construct_parametric_model"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", ")", ":", "\n", "\n", "        ", "ensemble", "=", "ParametricEnsemble", "(", "\n", "[", "construct_parametric_model", "(", "model_config", ",", "name", ")", "for", "name", "in", "model_name_list", "]", "\n", ")", "\n", "\n", "learning_curves", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "inf", "[", "\"lc\"", "]", ")", "/", "100", "for", "inf", "in", "info", "]", ")", "\n", "trained_epochs", "=", "len", "(", "info", "[", "0", "]", "[", "\"lc\"", "]", ")", "\n", "\n", "if", "self", ".", "ss_type", "==", "\"nasbench201\"", ":", "\n", "            ", "final_epoch", "=", "200", "\n", "default_guess", "=", "85.0", "\n", "N", "=", "300", "\n", "", "elif", "self", ".", "ss_type", "==", "\"darts\"", ":", "\n", "            ", "final_epoch", "=", "98", "\n", "default_guess", "=", "93.0", "\n", "N", "=", "1000", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nlp\"", ":", "\n", "            ", "final_epoch", "=", "50", "\n", "default_guess", "=", "94.83", "\n", "N", "=", "1000", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "predictions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "xtest", ")", ")", ":", "\n", "            ", "ensemble", ".", "mcmc", "(", "learning_curves", "[", "i", ",", ":", "]", ",", "N", "=", "N", ")", "\n", "prediction", "=", "ensemble", ".", "mcmc_sample_predict", "(", "[", "final_epoch", "]", ")", "\n", "prediction", "=", "np", ".", "squeeze", "(", "prediction", ")", "*", "100", "\n", "\n", "if", "np", ".", "isnan", "(", "prediction", ")", "or", "not", "np", ".", "isfinite", "(", "prediction", ")", ":", "\n", "                ", "print", "(", "\"nan or finite\"", ")", "\n", "prediction", "=", "default_guess", "+", "np", ".", "random", ".", "rand", "(", ")", "\n", "", "predictions", ".", "append", "(", "prediction", ")", "\n", "\n", "", "predictions", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "predictions", ")", ")", "\n", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.get_data_reqs": [[58, 72], ["None"], "methods", ["None"], ["", "def", "get_data_reqs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary with info about whether the predictor needs\n        extra info to train/query.\n        \"\"\"", "\n", "reqs", "=", "{", "\n", "\"requires_partial_lc\"", ":", "True", ",", "\n", "\"metric\"", ":", "self", ".", "metric", ",", "\n", "\"requires_hyperparameters\"", ":", "False", ",", "\n", "\"hyperparams\"", ":", "None", ",", "\n", "\"unlabeled\"", ":", "False", ",", "\n", "\"unlabeled_factor\"", ":", "0", ",", "\n", "}", "\n", "return", "reqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.base_tree_class.BaseTree.__init__": [[8, 21], ["naslib.predictors.predictor.Predictor.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "\n", "ss_type", "=", "\"nasbench201\"", ",", "\n", "zc", "=", "False", ",", "\n", "hpo_wrapper", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "ss_type", "=", "ss_type", "\n", "self", ".", "zc", "=", "zc", "\n", "self", ".", "hyperparams", "=", "None", "\n", "self", ".", "hpo_wrapper", "=", "hpo_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.base_tree_class.BaseTree.default_hyperparams": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "default_hyperparams", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.base_tree_class.BaseTree.get_dataset": [[26, 30], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "encodings", ",", "labels", "=", "None", ")", ":", "\n", "        ", "return", "NotImplementedError", "(", "\n", "\"Tree cannot process the numpy data without \\\n                                   converting to the proper representation\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.base_tree_class.BaseTree.train": [[32, 34], ["NotImplementedError"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "train_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NotImplementedError", "(", "\"Train method not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.base_tree_class.BaseTree.predict": [[35, 37], ["base_tree_class.BaseTree.model.predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "predict", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict", "(", "data", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.base_tree_class.BaseTree.fit": [[38, 77], ["numpy.mean", "numpy.std", "base_tree_class.BaseTree.get_dataset", "base_tree_class.BaseTree.train", "numpy.squeeze", "numpy.mean", "type", "numpy.array", "numpy.array", "numpy.array", "base_tree_class.BaseTree.predict", "abs", "naslib.predictors.utils.encodings.encode", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.get_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "params", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "# normalize accuracies", "\n", "        ", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "\n", "if", "type", "(", "xtrain", ")", "is", "list", ":", "\n", "# when used in itself, we use", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtrain", "\n", "]", "\n", ")", "\n", "\n", "if", "self", ".", "zc", ":", "\n", "                ", "mean", ",", "std", "=", "-", "10000000.0", ",", "150000000.0", "\n", "xtrain", "=", "[", "\n", "[", "*", "x", ",", "(", "train_info", "[", "i", "]", "-", "mean", ")", "/", "std", "]", "for", "i", ",", "x", "in", "enumerate", "(", "xtrain", ")", "\n", "]", "\n", "", "xtrain", "=", "np", ".", "array", "(", "xtrain", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "ytrain", ")", "\n", "\n", "", "else", ":", "\n", "# when used in aug_lcsvr we feed in ndarray directly", "\n", "            ", "xtrain", "=", "xtrain", "\n", "ytrain", "=", "ytrain", "\n", "\n", "# convert to the right representation", "\n", "", "train_data", "=", "self", ".", "get_dataset", "(", "xtrain", ",", "ytrain", ")", "\n", "\n", "# fit to the training data", "\n", "self", ".", "model", "=", "self", ".", "train", "(", "train_data", ")", "\n", "\n", "# predict", "\n", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "predict", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.base_tree_class.BaseTree.query": [[78, 99], ["base_tree_class.BaseTree.get_dataset", "type", "numpy.array", "numpy.array", "numpy.squeeze", "naslib.predictors.utils.encodings.encode", "base_tree_class.BaseTree.model.predict", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.get_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ")", ":", "\n", "\n", "        ", "if", "type", "(", "xtest", ")", "is", "list", ":", "\n", "#  when used in itself, we use", "\n", "            ", "xtest", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtest", "\n", "]", "\n", ")", "\n", "if", "self", ".", "zc", ":", "\n", "                ", "mean", ",", "std", "=", "-", "10000000.0", ",", "150000000.0", "\n", "xtest", "=", "[", "[", "*", "x", ",", "(", "info", "[", "i", "]", "-", "mean", ")", "/", "std", "]", "for", "i", ",", "x", "in", "enumerate", "(", "xtest", ")", "]", "\n", "", "xtest", "=", "np", ".", "array", "(", "xtest", ")", "\n", "\n", "", "else", ":", "\n", "# when used in aug_lcsvr we feed in ndarray directly", "\n", "            ", "xtest", "=", "xtest", "\n", "\n", "", "test_data", "=", "self", ".", "get_dataset", "(", "xtest", ")", "\n", "return", "np", ".", "squeeze", "(", "self", ".", "model", ".", "predict", "(", "test_data", ")", ")", "*", "self", ".", "std", "+", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.base_tree_class.BaseTree.get_random_hyperparams": [[100, 102], ["None"], "methods", ["None"], ["", "def", "get_random_hyperparams", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.NGBoost.default_hyperparams": [[25, 36], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "default_hyperparams", "(", "self", ")", ":", "\n", "        ", "params", "=", "{", "\n", "\"param:n_estimators\"", ":", "505", ",", "\n", "\"param:learning_rate\"", ":", "0.08127053060223186", ",", "\n", "\"base:max_depth\"", ":", "6", ",", "\n", "\"base:max_features\"", ":", "0.7920456318712875", ",", "\n", "#'early_stopping_rounds': 100,", "\n", "#'verbose': -1", "\n", "}", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.NGBoost.set_random_hyperparams": [[37, 50], ["ngb.NGBoost.default_hyperparams.copy", "int", "ngb.loguniform", "numpy.random.uniform", "ngb.loguniform", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "# evaluate the default config first during HPO", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"param:n_estimators\"", ":", "int", "(", "loguniform", "(", "128", ",", "512", ")", ")", ",", "\n", "\"param:learning_rate\"", ":", "loguniform", "(", "0.001", ",", "0.1", ")", ",", "\n", "\"base:max_depth\"", ":", "np", ".", "random", ".", "choice", "(", "24", ")", "+", "1", ",", "\n", "\"base:max_features\"", ":", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "1", ")", ",", "\n", "}", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.NGBoost.get_dataset": [[51, 56], ["None"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "encodings", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "labels", "is", "None", ":", "\n", "            ", "return", "encodings", "\n", "", "else", ":", "\n", "            ", "return", "(", "encodings", ",", "(", "labels", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.NGBoost.train": [[57, 82], ["sklearn.tree.DecisionTreeRegressor", "ngboost.NGBRegressor", "ngboost.NGBRegressor.fit", "ngb.parse_params", "ngb.parse_params"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.parse_params", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.parse_params"], ["", "", "def", "train", "(", "self", ",", "train_data", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "train_data", "\n", "# note: cross-validation will error unless these values are set:", "\n", "min_samples_leaf", "=", "1", "\n", "min_samples_split", "=", "2", "\n", "minibatch_frac", "=", "0.5", "\n", "\n", "base_learner", "=", "DecisionTreeRegressor", "(", "\n", "criterion", "=", "\"friedman_mse\"", ",", "\n", "min_samples_leaf", "=", "min_samples_leaf", ",", "\n", "min_samples_split", "=", "min_samples_split", ",", "\n", "random_state", "=", "None", ",", "\n", "splitter", "=", "\"best\"", ",", "\n", "**", "parse_params", "(", "self", ".", "hyperparams", ",", "identifier", "=", "\"base:\"", ")", "\n", ")", "\n", "model", "=", "NGBRegressor", "(", "\n", "Dist", "=", "Normal", ",", "\n", "Base", "=", "base_learner", ",", "\n", "Score", "=", "LogScore", ",", "\n", "minibatch_frac", "=", "minibatch_frac", ",", "\n", "verbose", "=", "True", ",", "\n", "**", "parse_params", "(", "self", ".", "hyperparams", ",", "identifier", "=", "\"param:\"", ")", "\n", ")", "\n", "\n", "return", "model", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.NGBoost.fit": [[83, 87], ["super().fit", "ngb.NGBoost.default_hyperparams.copy"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "params", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "", "return", "super", "(", "NGBoost", ",", "self", ")", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "train_info", ",", "params", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.parse_params": [[12, 18], ["params.items", "k.startswith", "k.replace"], "function", ["None"], ["def", "parse_params", "(", "params", ",", "identifier", "=", "\"base\"", ")", ":", "\n", "    ", "parsed_params", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "identifier", ")", ":", "\n", "            ", "parsed_params", "[", "k", ".", "replace", "(", "identifier", ",", "\"\"", ")", "]", "=", "v", "\n", "", "", "return", "parsed_params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform": [[20, 22], ["numpy.exp", "numpy.random.uniform", "numpy.log", "numpy.log"], "function", ["None"], ["", "def", "loguniform", "(", "low", "=", "0", ",", "high", "=", "1", ",", "size", "=", "None", ")", ":", "\n", "    ", "return", "np", ".", "exp", "(", "np", ".", "random", ".", "uniform", "(", "np", ".", "log", "(", "low", ")", ",", "np", ".", "log", "(", "high", ")", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.random_forest.RandomForestPredictor.default_hyperparams": [[9, 21], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "default_hyperparams", "(", "self", ")", ":", "\n", "# NOTE: Copied from NB301", "\n", "        ", "params", "=", "{", "\n", "\"n_estimators\"", ":", "116", ",", "\n", "\"max_features\"", ":", "0.17055852159745608", ",", "\n", "\"min_samples_leaf\"", ":", "2", ",", "\n", "\"min_samples_split\"", ":", "2", ",", "\n", "\"bootstrap\"", ":", "False", ",", "\n", "#'verbose': -1", "\n", "}", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.random_forest.RandomForestPredictor.set_random_hyperparams": [[22, 37], ["random_forest.RandomForestPredictor.default_hyperparams.copy", "int", "naslib.predictors.trees.ngb.loguniform", "int", "int", "naslib.predictors.trees.ngb.loguniform", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "# evaluate the default config first during HPO", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"n_estimators\"", ":", "int", "(", "loguniform", "(", "16", ",", "128", ")", ")", ",", "\n", "\"max_features\"", ":", "loguniform", "(", "0.1", ",", "0.9", ")", ",", "\n", "\"min_samples_leaf\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "19", ")", "+", "1", ")", ",", "\n", "\"min_samples_split\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "18", ")", "+", "2", ")", ",", "\n", "\"bootstrap\"", ":", "False", ",", "\n", "#'verbose': -1", "\n", "}", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.random_forest.RandomForestPredictor.get_dataset": [[38, 43], ["None"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "encodings", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "labels", "is", "None", ":", "\n", "            ", "return", "encodings", "\n", "", "else", ":", "\n", "            ", "return", "(", "encodings", ",", "(", "labels", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.random_forest.RandomForestPredictor.train": [[44, 48], ["sklearn.ensemble.RandomForestRegressor", "sklearn.ensemble.RandomForestRegressor.fit"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit"], ["", "", "def", "train", "(", "self", ",", "train_data", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "train_data", "\n", "model", "=", "RF", "(", "**", "self", ".", "hyperparams", ")", "\n", "return", "model", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.random_forest.RandomForestPredictor.fit": [[49, 53], ["super().fit", "random_forest.RandomForestPredictor.default_hyperparams.copy"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "params", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "", "return", "super", "(", "RandomForestPredictor", ",", "self", ")", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "params", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.xgb.XGBoost.default_hyperparams": [[9, 22], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "default_hyperparams", "(", "self", ")", ":", "\n", "        ", "params", "=", "{", "\n", "\"objective\"", ":", "\"reg:squarederror\"", ",", "\n", "\"eval_metric\"", ":", "\"rmse\"", ",", "\n", "\"booster\"", ":", "\"gbtree\"", ",", "\n", "\"max_depth\"", ":", "6", ",", "\n", "\"min_child_weight\"", ":", "1", ",", "\n", "\"colsample_bytree\"", ":", "1", ",", "\n", "\"learning_rate\"", ":", "0.3", ",", "\n", "\"colsample_bylevel\"", ":", "1", ",", "\n", "}", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.xgb.XGBoost.set_random_hyperparams": [[23, 43], ["xgboost.XGBoost.default_hyperparams.copy", "int", "int", "numpy.random.uniform", "naslib.predictors.trees.ngb.loguniform", "numpy.random.uniform", "numpy.random.choice", "numpy.random.choice", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "# evaluate the default config first during HPO", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"objective\"", ":", "\"reg:squarederror\"", ",", "\n", "\"eval_metric\"", ":", "\"rmse\"", ",", "\n", "#'early_stopping_rounds': 100,", "\n", "\"booster\"", ":", "\"gbtree\"", ",", "\n", "\"max_depth\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "1", ",", "15", ")", ")", ")", ",", "\n", "\"min_child_weight\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "1", ",", "10", ")", ")", ")", ",", "\n", "\"colsample_bytree\"", ":", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", ",", "\n", "\"learning_rate\"", ":", "loguniform", "(", "0.001", ",", "0.5", ")", ",", "\n", "#'alpha': 0.24167936088332426,", "\n", "#'lambda': 31.393252465064943,", "\n", "\"colsample_bylevel\"", ":", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", ",", "\n", "}", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.xgb.XGBoost.get_dataset": [[44, 49], ["xgboost.DMatrix", "xgboost.DMatrix"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "encodings", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "labels", "is", "None", ":", "\n", "            ", "return", "xgb", ".", "DMatrix", "(", "encodings", ")", "\n", "", "else", ":", "\n", "            ", "return", "xgb", ".", "DMatrix", "(", "encodings", ",", "label", "=", "(", "(", "labels", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.xgb.XGBoost.train": [[50, 52], ["xgboost.train"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "", "def", "train", "(", "self", ",", "train_data", ")", ":", "\n", "        ", "return", "xgb", ".", "train", "(", "self", ".", "hyperparams", ",", "train_data", ",", "num_boost_round", "=", "500", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.xgb.XGBoost.predict": [[53, 55], ["xgboost.XGBoost.model.predict", "xgboost.XGBoost.get_dataset"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.get_dataset"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict", "(", "self", ".", "get_dataset", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.xgb.XGBoost.fit": [[56, 60], ["super().fit", "xgboost.XGBoost.default_hyperparams.copy"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "params", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "", "return", "super", "(", "XGBoost", ",", "self", ")", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "train_info", ",", "params", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.default_hyperparams": [[13, 28], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "default_hyperparams", "(", "self", ",", "params", "=", "None", ")", ":", "\n", "# default parameters used in Luo et al. 2020", "\n", "        ", "params", "=", "{", "\n", "\"boosting_type\"", ":", "\"gbdt\"", ",", "\n", "\"objective\"", ":", "\"regression\"", ",", "\n", "\"min_data_in_leaf\"", ":", "5", ",", "\n", "\"num_leaves\"", ":", "31", ",", "\n", "\"learning_rate\"", ":", "0.05", ",", "\n", "\"feature_fraction\"", ":", "0.9", ",", "\n", "\"bagging_fraction\"", ":", "0.8", ",", "\n", "\"bagging_freq\"", ":", "5", ",", "\n", "\"verbose\"", ":", "-", "1", ",", "\n", "}", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.set_random_hyperparams": [[29, 47], ["lightgbm.LGBoost.default_hyperparams.copy", "int", "naslib.predictors.trees.ngb.loguniform", "numpy.random.uniform", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.ngb.loguniform"], ["", "def", "set_random_hyperparams", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "# evaluate the default config first during HPO", "\n", "            ", "params", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "params", "=", "{", "\n", "\"boosting_type\"", ":", "\"gbdt\"", ",", "\n", "\"objective\"", ":", "\"regression\"", ",", "\n", "\"min_data_in_leaf\"", ":", "5", ",", "\n", "\"num_leaves\"", ":", "int", "(", "np", ".", "random", ".", "choice", "(", "90", ")", "+", "10", ")", ",", "\n", "\"learning_rate\"", ":", "loguniform", "(", "0.001", ",", "0.1", ")", ",", "\n", "\"feature_fraction\"", ":", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "1", ")", ",", "\n", "\"bagging_fraction\"", ":", "0.8", ",", "\n", "\"bagging_freq\"", ":", "5", ",", "\n", "\"verbose\"", ":", "-", "1", ",", "\n", "}", "\n", "", "self", ".", "hyperparams", "=", "params", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.get_dataset": [[48, 53], ["lightgbm.Dataset"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "encodings", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "labels", "is", "None", ":", "\n", "            ", "return", "encodings", "\n", "", "else", ":", "\n", "            ", "return", "lgb", ".", "Dataset", "(", "encodings", ",", "label", "=", "(", "(", "labels", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.train": [[54, 57], ["lightgbm.train"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "", "def", "train", "(", "self", ",", "train_data", ")", ":", "\n", "        ", "hparams", "=", "{", "**", "self", ".", "hyperparams", ",", "\"metric\"", ":", "{", "\"l2\"", "}", "}", "\n", "return", "lgb", ".", "train", "(", "hparams", ",", "train_data", ",", "num_boost_round", "=", "500", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.predict": [[58, 60], ["lightgbm.LGBoost.model.predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict", "(", "data", ",", "num_iteration", "=", "self", ".", "model", ".", "best_iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.fit": [[61, 65], ["super().fit", "lightgbm.LGBoost.default_hyperparams.copy"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "params", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "hyperparams", "is", "None", ":", "\n", "            ", "self", ".", "hyperparams", "=", "self", ".", "default_hyperparams", ".", "copy", "(", ")", "\n", "", "return", "super", "(", "LGBoost", ",", "self", ")", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "train_info", ",", "params", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.var_sparse_gp.VarSparseGPPredictor.get_model": [[9, 22], ["pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "var_sparse_gp.VarSparseGPPredictor.kernel", "Xu.expand().double.expand().double.unsqueeze_", "Xu.expand().double.expand().double.expand().double", "pyro.likelihoods.Gaussian", "pyro.likelihoods.Gaussian", "pyro.models.VariationalSparseGP", "pyro.models.VariationalSparseGP", "torch.arange", "Xu.expand().double.expand().double.expand"], "methods", ["None"], ["    ", "def", "get_model", "(", "self", ",", "train_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "train_data", "\n", "# initialize the kernel and model", "\n", "pyro", ".", "clear_param_store", "(", ")", "\n", "kernel", "=", "self", ".", "kernel", "(", "input_dim", "=", "X_train", ".", "shape", "[", "1", "]", ")", "\n", "Xu", "=", "torch", ".", "arange", "(", "10.0", ")", "/", "2.0", "\n", "Xu", ".", "unsqueeze_", "(", "-", "1", ")", "\n", "Xu", "=", "Xu", ".", "expand", "(", "10", ",", "X_train", ".", "shape", "[", "1", "]", ")", ".", "double", "(", ")", "\n", "likelihood", "=", "gp", ".", "likelihoods", ".", "Gaussian", "(", ")", "\n", "gpr", "=", "gp", ".", "models", ".", "VariationalSparseGP", "(", "\n", "X_train", ",", "y_train", ",", "kernel", ",", "Xu", "=", "Xu", ",", "likelihood", "=", "likelihood", ",", "whiten", "=", "True", "\n", ")", "\n", "return", "gpr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.__init__": [[11, 27], ["naslib.predictors.predictor.Predictor.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "\n", "ss_type", "=", "\"nasbench201\"", ",", "\n", "kernel_type", "=", "None", ",", "\n", "optimize_gp_hyper", "=", "False", ",", "\n", "num_steps", "=", "200", ",", "\n", "zc", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoding_type", "=", "encoding_type", "\n", "self", ".", "ss_type", "=", "ss_type", "\n", "self", ".", "kernel_type", "=", "kernel_type", "\n", "self", ".", "optimize_gp_hyper", "=", "optimize_gp_hyper", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "zc", "=", "zc", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.get_dataset": [[28, 35], ["torch.tensor().double", "torch.tensor().double", "torch.tensor().double", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "encodings", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "labels", "is", "None", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "encodings", ")", ".", "double", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "torch", ".", "tensor", "(", "encodings", ")", ".", "double", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "(", "labels", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ".", "double", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.get_model": [[37, 39], ["None"], "methods", ["None"], ["", "", "def", "get_model", "(", "self", ",", "train_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train": [[40, 42], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "train_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.predict": [[43, 45], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "input_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.optimize_GP_hyperparameters": [[46, 55], ["pyro.util.train", "pyro.util.train", "type", "torch.optim.Adam", "torch.optim.Adam", "gp_model.parameters", "pyro.infer.Trace_ELBO", "pyro.infer.Trace_ELBO", "pyro.infer.Trace_ELBO", "pyro.infer.Trace_ELBO", "gp_model.parameters", "pyro.infer.TraceMeanField_ELBO", "pyro.infer.TraceMeanField_ELBO", "pyro.infer.TraceMeanField_ELBO", "pyro.infer.TraceMeanField_ELBO"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train"], ["", "def", "optimize_GP_hyperparameters", "(", "self", ",", "gp_model", ")", ":", "\n", "        ", "if", "type", "(", "gp_model", ")", "==", "gp", ".", "models", ".", "GPRegression", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "gp_model", ".", "parameters", "(", ")", ",", "lr", "=", "0.005", ")", "\n", "loss_fn", "=", "pyro", ".", "infer", ".", "Trace_ELBO", "(", ")", ".", "differentiable_loss", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "gp_model", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "loss_fn", "=", "pyro", ".", "infer", ".", "TraceMeanField_ELBO", "(", ")", ".", "differentiable_loss", "\n", "", "losses", "=", "gp", ".", "util", ".", "train", "(", "gp_model", ",", "num_steps", "=", "self", ".", "num_steps", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.fit": [[56, 91], ["numpy.mean", "numpy.std", "numpy.array", "numpy.array", "gp_base.BaseGPModel.get_dataset", "gp_base.BaseGPModel.get_model", "gp_base.BaseGPModel.train", "print", "numpy.squeeze", "numpy.mean", "numpy.array", "gp_base.BaseGPModel.optimize_GP_hyperparameters", "print", "gp_base.BaseGPModel.predict", "abs", "naslib.predictors.utils.encodings.encode", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.get_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.get_model", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.optimize_GP_hyperparameters", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "params", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "# normalize accuracies", "\n", "        ", "self", ".", "mean", "=", "np", ".", "mean", "(", "ytrain", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "ytrain", ")", "\n", "if", "self", ".", "encoding_type", "is", "not", "None", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtrain", "\n", "]", "\n", ")", "\n", "", "if", "self", ".", "zc", ":", "\n", "            ", "mean", ",", "std", "=", "-", "10000000.0", ",", "150000000.0", "\n", "xtrain", "=", "[", "[", "*", "x", ",", "(", "train_info", "[", "i", "]", "-", "mean", ")", "/", "std", "]", "for", "i", ",", "x", "in", "enumerate", "(", "xtrain", ")", "]", "\n", "", "xtrain", "=", "np", ".", "array", "(", "xtrain", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "ytrain", ")", "\n", "\n", "# convert to the right representation", "\n", "train_data", "=", "self", ".", "get_dataset", "(", "xtrain", ",", "ytrain", ")", "\n", "\n", "# instantiate model and fit to the training data", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", "train_data", ",", "**", "kwargs", ")", "\n", "self", ".", "train", "(", "train_data", ",", "**", "kwargs", ")", "\n", "print", "(", "\"Finished fitting GP\"", ")", "\n", "\n", "if", "self", ".", "optimize_gp_hyper", ":", "\n", "            ", "losses", "=", "self", ".", "optimize_GP_hyperparameters", "(", "self", ".", "model", ")", "\n", "print", "(", "\"Finished tuning GP hyperparameters\"", ")", "\n", "\n", "# predict", "\n", "", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "predict", "(", "train_data", "[", "0", "]", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.query": [[92, 108], ["numpy.array", "gp_base.BaseGPModel.get_dataset", "numpy.array", "numpy.squeeze", "naslib.predictors.utils.encodings.encode", "enumerate", "gp_base.BaseGPModel.predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.get_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings.encode", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "encoding_type", "is", "not", "None", ":", "\n", "            ", "xtest", "=", "np", ".", "array", "(", "\n", "[", "\n", "encode", "(", "arch", ",", "encoding_type", "=", "self", ".", "encoding_type", ",", "ss_type", "=", "self", ".", "ss_type", ")", "\n", "for", "arch", "in", "xtest", "\n", "]", "\n", ")", "\n", "\n", "", "if", "self", ".", "zc", ":", "\n", "            ", "mean", ",", "std", "=", "-", "10000000.0", ",", "150000000.0", "\n", "xtest", "=", "[", "[", "*", "x", ",", "(", "info", "[", "i", "]", "-", "mean", ")", "/", "std", "]", "for", "i", ",", "x", "in", "enumerate", "(", "xtest", ")", "]", "\n", "", "xtest", "=", "np", ".", "array", "(", "xtest", ")", "\n", "\n", "test_data", "=", "self", ".", "get_dataset", "(", "xtest", ")", "\n", "return", "np", ".", "squeeze", "(", "self", ".", "predict", "(", "test_data", ")", ")", "*", "self", ".", "std", "+", "self", ".", "mean", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp.GPPredictor.__init__": [[12, 33], ["naslib.predictors.gp.BaseGPModel.__init__", "functools.partial", "eval", "torch.tensor().double", "torch.tensor().double", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoding_type", "=", "\"adjacency_one_hot\"", ",", "\n", "ss_type", "=", "\"nasbench201\"", ",", "\n", "kernel_type", "=", "\"RBF\"", ",", "\n", "optimize_gp_hyper", "=", "False", ",", "\n", "num_steps", "=", "200", ",", "\n", "zc", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Params:\n            kernel_type (str): determines the kernel type. Can be RBF,\n            RationalQuadratic, Exponential, Matern32, Matern52, Cosine, Periodic\n        \"\"\"", "\n", "super", "(", "GPPredictor", ",", "self", ")", ".", "__init__", "(", "\n", "encoding_type", ",", "ss_type", ",", "kernel_type", ",", "optimize_gp_hyper", "\n", ")", "\n", "self", ".", "kernel", "=", "partial", "(", "\n", "eval", "(", "\"gp.kernels.\"", "+", "kernel_type", ")", ",", "\n", "variance", "=", "torch", ".", "tensor", "(", "5.0", ")", ".", "double", "(", ")", ",", "\n", "lengthscale", "=", "torch", ".", "tensor", "(", "10.0", ")", ".", "double", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp.GPPredictor.get_model": [[35, 49], ["pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.GPPredictor.kernel", "pyro.models.GPRegression", "pyro.models.GPRegression", "pyro.models.GPRegression", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.nn.PyroSample", "pyro.LogNormal", "pyro.LogNormal", "pyro.LogNormal", "pyro.LogNormal", "pyro.LogNormal", "pyro.LogNormal", "torch.tensor().double", "torch.tensor"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "train_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "train_data", "\n", "# initialize the kernel and model", "\n", "pyro", ".", "clear_param_store", "(", ")", "\n", "kernel", "=", "self", ".", "kernel", "(", "input_dim", "=", "X_train", ".", "shape", "[", "1", "]", ")", "\n", "gpr", "=", "gp", ".", "models", ".", "GPRegression", "(", "\n", "X_train", ",", "y_train", ",", "kernel", ",", "noise", "=", "torch", ".", "tensor", "(", "1.0", ")", ".", "double", "(", ")", "\n", ")", "\n", "\n", "# optional: fit the model using MAP", "\n", "gpr", ".", "kernel", ".", "lengthscale", "=", "pyro", ".", "nn", ".", "PyroSample", "(", "dist", ".", "LogNormal", "(", "0.0", ",", "1.0", ")", ")", "\n", "gpr", ".", "kernel", ".", "variance", "=", "pyro", ".", "nn", ".", "PyroSample", "(", "dist", ".", "LogNormal", "(", "0.0", ",", "1.0", ")", ")", "\n", "\n", "return", "gpr", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp.GPPredictor.predict": [[50, 57], ["mean.numpy", "torch.no_grad", "type", "pyro.GPPredictor.model", "pyro.GPPredictor.model"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "input_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "type", "(", "self", ".", "model", ")", "==", "gp", ".", "models", ".", "VariationalSparseGP", ":", "\n", "                ", "mean", ",", "cov", "=", "self", ".", "model", "(", "input_data", ",", "full_cov", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "mean", ",", "cov", "=", "self", ".", "model", "(", "input_data", ",", "full_cov", "=", "True", ",", "noiseless", "=", "False", ")", "\n", "", "", "return", "mean", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.sparse_gp.SparseGPPredictor.get_model": [[11, 23], ["pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "pyro.clear_param_store", "sparse_gp.SparseGPPredictor.kernel", "Xu.expand().double.expand().double.unsqueeze_", "Xu.expand().double.expand().double.expand().double", "pyro.models.SparseGPRegression", "pyro.models.SparseGPRegression", "pyro.models.SparseGPRegression", "torch.arange", "Xu.expand().double.expand().double.expand"], "methods", ["None"], ["    ", "def", "get_model", "(", "self", ",", "train_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "train_data", "\n", "# initialize the kernel and model", "\n", "pyro", ".", "clear_param_store", "(", ")", "\n", "kernel", "=", "self", ".", "kernel", "(", "input_dim", "=", "X_train", ".", "shape", "[", "1", "]", ")", "\n", "Xu", "=", "torch", ".", "arange", "(", "10.0", ")", "/", "2.0", "\n", "Xu", ".", "unsqueeze_", "(", "-", "1", ")", "\n", "Xu", "=", "Xu", ".", "expand", "(", "10", ",", "X_train", ".", "shape", "[", "1", "]", ")", ".", "double", "(", ")", "\n", "gpr", "=", "gp", ".", "models", ".", "SparseGPRegression", "(", "\n", "X_train", ",", "y_train", ",", "kernel", ",", "Xu", "=", "Xu", ",", "jitter", "=", "1.0e-5", "\n", ")", "\n", "return", "gpr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GraphGP.__init__": [[96, 176], ["copy.deepcopy", "gpwl._normalize", "np.array", "list", "np.array", "torch.tensor", "copy.deepcopy", "NotImplementedError", "np.array", "list", "list", "grakel.utils.graph_from_networkx", "range", "grakel.utils.graph_from_networkx", "grakel.utils.graph_from_networkx", "range", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._normalize"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "gkernel", ",", "\n", "space", "=", "\"nasbench101\"", ",", "\n", "h", "=", "\"auto\"", ",", "\n", "noise_var", "=", "1e-3", ",", "\n", "num_steps", "=", "200", ",", "\n", "max_noise_var", "=", "1e-1", ",", "\n", "max_h", "=", "3", ",", "\n", "optimize_noise_var", "=", "True", ",", "\n", "node_label", "=", "\"op_name\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "likelihood", "=", "noise_var", "\n", "self", ".", "space", "=", "space", "\n", "self", ".", "h", "=", "h", "\n", "\n", "if", "gkernel", "==", "\"wl\"", ":", "\n", "            ", "self", ".", "wl_base", "=", "CustomVertexHistogram", ",", "{", "\"sparse\"", ":", "False", "}", "\n", "", "elif", "gkernel", "==", "\"wloa\"", ":", "\n", "            ", "self", ".", "wl_base", "=", "CustomVertexHistogram", ",", "{", "\"sparse\"", ":", "False", ",", "\"oa\"", ":", "True", "}", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "gkernel", "+", "\" is not a valid graph kernel choice!\"", ")", "\n", "\n", "", "self", ".", "gkernel", "=", "None", "\n", "# only applicable for the DARTS search space, where we optimise two graphs jointly.", "\n", "self", ".", "gkernel_reduce", "=", "None", "\n", "\n", "# sometimes (especially for NAS-Bench-201), we can have invalid graphs with all nodes being pruned. Remove", "\n", "# these graphs at training time.", "\n", "if", "self", ".", "space", "==", "\"nasbench301\"", "or", "self", ".", "space", "==", "\"darts\"", ":", "\n", "# For NAS-Bench-301 or DARTS search space, we need to search for 2 cells (normal and reduction simultaneously)", "\n", "            ", "valid_indices", "=", "[", "\n", "i", "\n", "for", "i", "in", "range", "(", "len", "(", "xtrain", "[", "0", "]", ")", ")", "\n", "if", "len", "(", "xtrain", "[", "0", "]", "[", "i", "]", ")", "and", "len", "(", "xtrain", "[", "1", "]", "[", "i", "]", ")", "\n", "]", "\n", "self", ".", "x", "=", "np", ".", "array", "(", "xtrain", ")", "[", ":", ",", "valid_indices", "]", "\n", "# self.x = [xtrain[i] for i in valid_indices]", "\n", "self", ".", "xtrain_converted", "=", "[", "\n", "list", "(", "\n", "graph_from_networkx", "(", "\n", "self", ".", "x", "[", "0", "]", ",", "\n", "node_label", ",", "\n", ")", "\n", ")", ",", "\n", "list", "(", "\n", "graph_from_networkx", "(", "\n", "self", ".", "x", "[", "1", "]", ",", "\n", "node_label", ",", "\n", ")", "\n", ")", ",", "\n", "]", "\n", "\n", "", "else", ":", "\n", "            ", "valid_indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "xtrain", ")", ")", "if", "len", "(", "xtrain", "[", "i", "]", ")", "]", "\n", "self", ".", "x", "=", "np", ".", "array", "(", "[", "xtrain", "[", "i", "]", "for", "i", "in", "valid_indices", "]", ")", "\n", "self", ".", "xtrain_converted", "=", "list", "(", "\n", "graph_from_networkx", "(", "\n", "self", ".", "x", ",", "\n", "node_label", ",", "\n", ")", "\n", ")", "\n", "\n", "", "ytrain", "=", "np", ".", "array", "(", "ytrain", ")", "[", "valid_indices", "]", "\n", "self", ".", "y_", "=", "deepcopy", "(", "\n", "torch", ".", "tensor", "(", "ytrain", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", ")", "\n", "self", ".", "y", ",", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "_normalize", "(", "deepcopy", "(", "self", ".", "y_", ")", ")", "\n", "# number of steps of training", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "\n", "# other hyperparameters", "\n", "self", ".", "max_noise_var", "=", "max_noise_var", "\n", "self", ".", "max_h", "=", "max_h", "\n", "self", ".", "optimize_noise_var", "=", "optimize_noise_var", "\n", "\n", "self", ".", "node_label", "=", "node_label", "\n", "self", ".", "K_i", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GraphGP.forward": [[177, 284], ["range", "torch.clamp", "gpwl.unnormalize_y", "torch.sqrt", "gpwl.unnormalize_y", "torch.tensor", "torch.tensor", "ValueError", "np.array", "np.argwhere", "len", "np.array", "np.array", "np.concatenate", "torch.tensor", "list", "torch.tensor", "torch.diag", "torch.zeros", "torch.zeros", "grakel.utils.graph_from_networkx", "gpwl.GraphGP.gkernel.fit_transform", "K_s.t", "torch.tensor", "torch.tensor", "range", "len", "len", "len", "list", "list", "np.array", "torch.eye", "torch.eye", "K_s.t", "len", "int", "int", "int", "grakel.utils.graph_from_networkx", "grakel.utils.graph_from_networkx", "torch.tensor", "torch.tensor", "len", "len", "len", "len", "len", "len", "len", "gpwl.GraphGP.gkernel.fit_transform", "gpwl.GraphGP.gkernel_reduce.fit_transform", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.unnormalize_y", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.unnormalize_y", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "Xnew", ",", "\n", "full_cov", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "self", ".", "K_i", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"The GraphGP model has not been fit!\"", ")", "\n", "\n", "# At testing time, similarly we first inspect to see whether there are invalid graphs", "\n", "", "if", "self", ".", "space", "==", "\"nasbench301\"", "or", "self", ".", "space", "==", "\"darts\"", ":", "\n", "            ", "invalid_indices", "=", "[", "\n", "i", "\n", "for", "i", "in", "range", "(", "len", "(", "Xnew", "[", "0", "]", ")", ")", "\n", "if", "len", "(", "Xnew", "[", "0", "]", "[", "i", "]", ")", "==", "0", "or", "len", "(", "Xnew", "[", "1", "]", "[", "i", "]", ")", "==", "0", "\n", "]", "\n", "", "else", ":", "\n", "            ", "nnodes", "=", "np", ".", "array", "(", "[", "len", "(", "x", ")", "for", "x", "in", "Xnew", "]", ")", "\n", "invalid_indices", "=", "np", ".", "argwhere", "(", "nnodes", "==", "0", ")", "\n", "\n", "# replace the invalid indices with something valid", "\n", "", "patience", "=", "100", "\n", "for", "i", "in", "range", "(", "len", "(", "Xnew", ")", ")", ":", "\n", "            ", "if", "i", "in", "invalid_indices", ":", "\n", "                ", "patience", "-=", "1", "\n", "continue", "\n", "", "break", "\n", "", "if", "patience", "<", "0", ":", "\n", "# All architectures are invalid!", "\n", "            ", "return", "torch", ".", "zeros", "(", "len", "(", "Xnew", ")", ")", ",", "torch", ".", "zeros", "(", "len", "(", "Xnew", ")", ")", "\n", "", "for", "j", "in", "invalid_indices", ":", "\n", "            ", "if", "self", ".", "space", "==", "\"nasbench301\"", "or", "self", ".", "space", "==", "\"darts\"", ":", "\n", "                ", "Xnew", "[", "0", "]", "[", "int", "(", "j", ")", "]", "=", "Xnew", "[", "0", "]", "[", "i", "]", "\n", "Xnew", "[", "1", "]", "[", "int", "(", "j", ")", "]", "=", "Xnew", "[", "1", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "Xnew", "[", "int", "(", "j", ")", "]", "=", "Xnew", "[", "i", "]", "\n", "\n", "", "", "if", "self", ".", "space", "==", "\"nasbench301\"", "or", "self", ".", "space", "==", "\"darts\"", ":", "\n", "            ", "Xnew_T", "=", "np", ".", "array", "(", "Xnew", ")", "\n", "Xnew", "=", "np", ".", "array", "(", "\n", "[", "\n", "list", "(", "\n", "graph_from_networkx", "(", "\n", "Xnew_T", "[", "0", "]", ",", "\n", "self", ".", "node_label", ",", "\n", ")", "\n", ")", ",", "\n", "list", "(", "\n", "graph_from_networkx", "(", "\n", "Xnew_T", "[", "1", "]", ",", "\n", "self", ".", "node_label", ",", "\n", ")", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "X_full", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "self", ".", "xtrain_converted", ")", ",", "Xnew", ")", ",", "axis", "=", "1", ")", "\n", "K_full", "=", "torch", ".", "tensor", "(", "\n", "0.5", "\n", "*", "torch", ".", "tensor", "(", "\n", "self", ".", "gkernel", ".", "fit_transform", "(", "X_full", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "float32", "\n", ")", "\n", "+", "0.5", "\n", "*", "torch", ".", "tensor", "(", "\n", "self", ".", "gkernel_reduce", ".", "fit_transform", "(", "X_full", "[", "1", "]", ")", ",", "dtype", "=", "torch", ".", "float32", "\n", ")", "\n", ")", "\n", "# Kriging equations", "\n", "K_s", "=", "K_full", "[", ":", "len", "(", "self", ".", "x", "[", "0", "]", ")", ":", ",", "len", "(", "self", ".", "x", "[", "0", "]", ")", ":", "]", "\n", "K_ss", "=", "K_full", "[", "\n", "len", "(", "self", ".", "x", "[", "0", "]", ")", ":", ",", "len", "(", "self", ".", "x", "[", "0", "]", ")", ":", "\n", "]", "+", "self", ".", "likelihood", "*", "torch", ".", "eye", "(", "\n", "Xnew", ".", "shape", "[", "1", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "Xnew", "=", "list", "(", "\n", "graph_from_networkx", "(", "\n", "Xnew", ",", "\n", "self", ".", "node_label", ",", "\n", ")", "\n", ")", "\n", "X_full", "=", "self", ".", "xtrain_converted", "+", "Xnew", "\n", "K_full", "=", "torch", ".", "tensor", "(", "\n", "self", ".", "gkernel", ".", "fit_transform", "(", "X_full", ")", ",", "dtype", "=", "torch", ".", "float32", "\n", ")", "\n", "# Kriging equations", "\n", "K_s", "=", "K_full", "[", ":", "len", "(", "self", ".", "x", ")", ":", ",", "len", "(", "self", ".", "x", ")", ":", "]", "\n", "K_ss", "=", "K_full", "[", "len", "(", "self", ".", "x", ")", ":", ",", "len", "(", "self", ".", "x", ")", ":", "]", "+", "self", ".", "likelihood", "*", "torch", ".", "eye", "(", "\n", "len", "(", "Xnew", ")", ",", "\n", ")", "\n", "", "mu_s", "=", "K_s", ".", "t", "(", ")", "@", "self", ".", "K_i", "@", "self", ".", "y", "\n", "cov_s", "=", "K_ss", "-", "K_s", ".", "t", "(", ")", "@", "self", ".", "K_i", "@", "K_s", "\n", "cov_s", "=", "torch", ".", "clamp", "(", "cov_s", ",", "self", ".", "likelihood", ",", "np", ".", "inf", ")", "\n", "mu_s", "=", "unnormalize_y", "(", "mu_s", ",", "self", ".", "y_mean", ",", "self", ".", "y_std", ")", "\n", "std_s", "=", "torch", ".", "sqrt", "(", "cov_s", ")", "\n", "std_s", "=", "unnormalize_y", "(", "std_s", ",", "None", ",", "self", ".", "y_std", ",", "True", ")", "\n", "cov_s", "=", "std_s", "**", "2", "\n", "if", "not", "full_cov", ":", "\n", "            ", "cov_s", "=", "torch", ".", "diag", "(", "cov_s", ")", "\n", "# replace the invalid architectures with zeros", "\n", "", "mu_s", "[", "torch", ".", "tensor", "(", "invalid_indices", ",", "dtype", "=", "torch", ".", "long", ")", "]", "=", "torch", ".", "tensor", "(", "\n", "0.0", ",", "dtype", "=", "torch", ".", "float32", "\n", ")", "\n", "cov_s", "[", "torch", ".", "tensor", "(", "invalid_indices", ",", "dtype", "=", "torch", ".", "long", ")", "]", "=", "torch", ".", "tensor", "(", "\n", "0.0", ",", "dtype", "=", "torch", ".", "float32", "\n", ")", "\n", "return", "mu_s", ",", "cov_s", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GraphGP.fit": [[285, 371], ["torch.tensor", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman", "torch.tensor", "torch.optim.Adam", "range", "gpwl._compute_pd_inverse", "K_i.detach().cpu", "logDetK.detach().cpu", "torch.tensor.item", "gpwl._compute_pd_inverse", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman", "gpwl._compute_pd_inverse", "torch.tensor", "torch.optim.Adam.zero_grad", "gpwl._compute_pd_inverse", "nlml.backward", "torch.optim.Adam.step", "range", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman", "torch.tensor", "gpwl._compute_log_marginal_likelihood", "torch.clone", "gpwl.GraphGP.gkernel.fit_transform", "gpwl._compute_log_marginal_likelihood", "torch.no_grad", "torch.tensor.clamp_", "K_i.detach", "logDetK.detach", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman.fit_transform", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gpwl.GraphGP.gkernel.fit_transform", "gpwl.GraphGP.gkernel_reduce.fit_transform", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman.fit_transform", "naslib.predictors.gp.gpwl_utils.wl_kernel.WeisfeilerLehman.fit_transform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._compute_pd_inverse", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._compute_pd_inverse", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._compute_pd_inverse", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._compute_pd_inverse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._compute_log_marginal_likelihood", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._compute_log_marginal_likelihood", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform"], ["", "def", "fit", "(", "self", ")", ":", "\n", "\n", "        ", "xtrain_grakel", "=", "self", ".", "xtrain_converted", "\n", "# Valid values of h are non-negative integers. Here we test each of them once, and pick the one that leads to", "\n", "# the highest marginal likelihood of the GP model.", "\n", "if", "self", ".", "h", "==", "\"auto\"", ":", "\n", "            ", "best_nlml", "=", "torch", ".", "tensor", "(", "np", ".", "inf", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "best_h", "=", "None", "\n", "best_K", "=", "None", "\n", "for", "candidate", "in", "[", "h", "for", "h", "in", "range", "(", "self", ".", "max_h", "+", "1", ")", "]", ":", "\n", "                ", "gkernel", "=", "WeisfeilerLehman", "(", "base_graph_kernel", "=", "self", ".", "wl_base", ",", "h", "=", "candidate", ")", "\n", "if", "self", ".", "space", "==", "\"nasbench301\"", "or", "self", ".", "space", "==", "\"darts\"", ":", "\n", "                    ", "gkernel_reduce", "=", "WeisfeilerLehman", "(", "\n", "base_graph_kernel", "=", "self", ".", "wl_base", ",", "h", "=", "candidate", "\n", ")", "\n", "K", "=", "(", "\n", "torch", ".", "tensor", "(", "\n", "gkernel", ".", "fit_transform", "(", "xtrain_grakel", "[", "0", "]", ",", "self", ".", "y", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "+", "torch", ".", "tensor", "(", "\n", "gkernel_reduce", ".", "fit_transform", "(", "xtrain_grakel", "[", "1", "]", ",", "self", ".", "y", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", ")", "/", "2.0", "\n", "", "else", ":", "\n", "                    ", "K", "=", "torch", ".", "tensor", "(", "\n", "gkernel", ".", "fit_transform", "(", "xtrain_grakel", ",", "self", ".", "y", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "", "K_i", ",", "logDetK", "=", "_compute_pd_inverse", "(", "K", ",", "self", ".", "likelihood", ")", "\n", "nlml", "=", "-", "_compute_log_marginal_likelihood", "(", "K_i", ",", "logDetK", ",", "self", ".", "y", ")", "\n", "if", "nlml", "<", "best_nlml", ":", "\n", "                    ", "best_nlml", "=", "nlml", "\n", "best_h", "=", "candidate", "\n", "best_K", "=", "torch", ".", "clone", "(", "K", ")", "\n", "", "", "K", "=", "best_K", "\n", "self", ".", "gkernel", "=", "WeisfeilerLehman", "(", "base_graph_kernel", "=", "self", ".", "wl_base", ",", "h", "=", "best_h", ")", "\n", "self", ".", "gkernel_reduce", "=", "WeisfeilerLehman", "(", "\n", "base_graph_kernel", "=", "self", ".", "wl_base", ",", "h", "=", "best_h", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gkernel", "=", "WeisfeilerLehman", "(", "base_graph_kernel", "=", "self", ".", "wl_base", ",", "h", "=", "self", ".", "h", ")", "\n", "self", ".", "gkernel_reduce", "=", "WeisfeilerLehman", "(", "\n", "base_graph_kernel", "=", "self", ".", "wl_base", ",", "h", "=", "self", ".", "h", "\n", ")", "\n", "if", "self", ".", "space", "==", "\"nasbench301\"", "or", "self", ".", "space", "==", "\"darts\"", ":", "\n", "                ", "K", "=", "(", "\n", "torch", ".", "tensor", "(", "\n", "self", ".", "gkernel", ".", "fit_transform", "(", "xtrain_grakel", "[", "0", "]", ",", "self", ".", "y", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "+", "torch", ".", "tensor", "(", "\n", "self", ".", "gkernel_reduce", ".", "fit_transform", "(", "xtrain_grakel", "[", "1", "]", ",", "self", ".", "y", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", ")", "/", "2.0", "\n", "", "else", ":", "\n", "                ", "K", "=", "torch", ".", "tensor", "(", "\n", "self", ".", "gkernel", ".", "fit_transform", "(", "xtrain_grakel", ",", "self", ".", "y", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "\n", "# CONDITIONAL on the valid h parameter picked, here we optimise the noise as a hyperparameter using standard", "\n", "# gradient-based optimisation. Here by default we use Adam optimizer.", "\n", "", "", "if", "self", ".", "optimize_noise_var", ":", "\n", "            ", "likelihood", "=", "torch", ".", "tensor", "(", "\n", "self", ".", "likelihood", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "True", "\n", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "likelihood", "]", ",", "lr", "=", "0.1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "                ", "optim", ".", "zero_grad", "(", ")", "\n", "K_i", ",", "logDetK", "=", "_compute_pd_inverse", "(", "K", ",", "likelihood", ")", "\n", "nlml", "=", "-", "_compute_log_marginal_likelihood", "(", "K_i", ",", "logDetK", ",", "self", ".", "y", ")", "\n", "nlml", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "likelihood", ".", "clamp_", "(", "1e-7", ",", "self", ".", "max_noise_var", ")", "\n", "# finally", "\n", "", "", "K_i", ",", "logDetK", "=", "_compute_pd_inverse", "(", "K", ",", "likelihood", ")", "\n", "self", ".", "K_i", "=", "K_i", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "logDetK", "=", "logDetK", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "likelihood", "=", "likelihood", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "# Compute the inverse covariance matrix", "\n", "            ", "self", ".", "K_i", ",", "self", ".", "logDetK", "=", "_compute_pd_inverse", "(", "K", ",", "self", ".", "likelihood", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.__init__": [[374, 389], ["naslib.predictors.gp.BaseGPModel.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "kernel_type", "=", "\"wloa\"", ",", "\n", "ss_type", "=", "\"nasbench201\"", ",", "\n", "optimize_gp_hyper", "=", "False", ",", "\n", "h", "=", "2", ",", "\n", "num_steps", "=", "200", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GPWLPredictor", ",", "self", ")", ".", "__init__", "(", "\n", "None", ",", "ss_type", ",", "kernel_type", ",", "optimize_gp_hyper", "\n", ")", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "need_separate_hpo", "=", "True", "\n", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor._convert_data": [[390, 404], ["convert_n101_arch_to_graph", "convert_n201_arch_to_graph", "np.array().T.tolist", "NotImplementedError", "convert_darts_arch_to_graph", "np.array"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.convert.convert_n101_arch_to_graph", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.convert.convert_n201_arch_to_graph", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.convert.convert_darts_arch_to_graph"], ["", "def", "_convert_data", "(", "self", ",", "data", ":", "list", ")", ":", "\n", "        ", "if", "self", ".", "ss_type", "==", "\"nasbench101\"", ":", "\n", "            ", "converted_data", "=", "[", "convert_n101_arch_to_graph", "(", "arch", ")", "for", "arch", "in", "data", "]", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nasbench201\"", ":", "\n", "            ", "converted_data", "=", "[", "convert_n201_arch_to_graph", "(", "arch", ")", "for", "arch", "in", "data", "]", "\n", "", "elif", "self", ".", "ss_type", "==", "\"nasbench301\"", "or", "self", ".", "ss_type", "==", "\"darts\"", ":", "\n", "            ", "converted_data", "=", "[", "convert_darts_arch_to_graph", "(", "arch", ")", "for", "arch", "in", "data", "]", "\n", "# the converted data is in shape of (N, 2). Transpose to (2,N) for convenience later on.", "\n", "converted_data", "=", "np", ".", "array", "(", "converted_data", ")", ".", "T", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Search space %s is not implemented!\"", "%", "self", ".", "ss_type", "\n", ")", "\n", "", "return", "converted_data", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.get_model": [[405, 423], ["gpwl._transform", "gpwl.GPWLPredictor._convert_data", "gpwl.GraphGP", "gpwl.GPWLPredictor.model.fit"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor._convert_data", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit"], ["", "def", "get_model", "(", "self", ",", "train_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "train_data", "\n", "# log-transform", "\n", "y_train", "=", "_transform", "(", "y_train", ")", "\n", "# first convert data to networkx", "\n", "X_train", "=", "self", ".", "_convert_data", "(", "X_train", ")", "\n", "self", ".", "model", "=", "GraphGP", "(", "\n", "X_train", ",", "\n", "y_train", ",", "\n", "self", ".", "kernel_type", ",", "\n", "h", "=", "self", ".", "h", ",", "\n", "num_steps", "=", "self", ".", "num_steps", ",", "\n", "optimize_noise_var", "=", "self", ".", "optimize_gp_hyper", ",", "\n", "space", "=", "self", ".", "ss_type", ",", "\n", ")", "\n", "# fit the model", "\n", "self", ".", "model", ".", "fit", "(", ")", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict": [[424, 430], ["gpwl.GPWLPredictor._convert_data", "gpwl.GPWLPredictor.model.forward", "_untransform.cpu().detach().numpy", "gpwl._untransform", "_untransform.cpu().detach", "_untransform.cpu"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor._convert_data", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._untransform"], ["", "def", "predict", "(", "self", ",", "input_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "X_test", "=", "self", ".", "_convert_data", "(", "input_data", ")", "\n", "mean", ",", "cov", "=", "self", ".", "model", ".", "forward", "(", "X_test", ",", "full_cov", "=", "True", ")", "\n", "mean", "=", "mean", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "mean", "=", "_untransform", "(", "mean", ")", "\n", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.fit": [[431, 452], ["gpwl.GPWLPredictor._convert_data", "gpwl._transform", "gpwl.GraphGP", "gpwl.GPWLPredictor.model.fit", "print", "gpwl.GPWLPredictor.query().squeeze", "np.mean", "abs", "gpwl.GPWLPredictor.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor._convert_data", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._transform", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "train_info", "=", "None", ",", "params", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# if not isinstance(xtrain[0], nx.DiGraph):", "\n", "        ", "xtrain_conv", "=", "self", ".", "_convert_data", "(", "xtrain", ")", "\n", "ytrain_transformed", "=", "_transform", "(", "ytrain", ")", "\n", "\n", "self", ".", "model", "=", "GraphGP", "(", "\n", "xtrain_conv", ",", "\n", "ytrain_transformed", ",", "\n", "self", ".", "kernel_type", ",", "\n", "h", "=", "self", ".", "h", ",", "\n", "num_steps", "=", "self", ".", "num_steps", ",", "\n", "optimize_noise_var", "=", "self", ".", "optimize_gp_hyper", ",", "\n", "space", "=", "self", ".", "ss_type", ",", "\n", ")", "\n", "# fit the model", "\n", "self", ".", "model", ".", "fit", "(", ")", "\n", "print", "(", "\"Finished fitting GP\"", ")", "\n", "# predict on training data for checking", "\n", "train_pred", "=", "self", ".", "query", "(", "xtrain", ")", ".", "squeeze", "(", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.query": [[453, 456], ["gpwl.GPWLPredictor.predict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["", "def", "query", "(", "self", ",", "xtest", ",", "info", "=", "None", ")", ":", "\n", "        ", "\"\"\"alias for predict\"\"\"", "\n", "return", "self", ".", "predict", "(", "xtest", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._normalize": [[15, 20], ["torch.mean", "torch.std"], "function", ["None"], ["def", "_normalize", "(", "y", ")", ":", "\n", "    ", "y_mean", "=", "torch", ".", "mean", "(", "y", ")", "\n", "y_std", "=", "torch", ".", "std", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "y_mean", ")", "/", "y_std", "\n", "return", "y", ",", "y_mean", ",", "y_std", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._transform": [[22, 26], ["np.log", "np.array"], "function", ["None"], ["", "def", "_transform", "(", "y", ")", ":", "\n", "    ", "\"\"\"By default naslib returns target in terms of accuracy in percentages. We transform this into\n    log (error) in decimal\"\"\"", "\n", "return", "np", ".", "log", "(", "1.0", "-", "np", ".", "array", "(", "y", ")", "/", "100.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._untransform": [[28, 31], ["np.exp"], "function", ["None"], ["", "def", "_untransform", "(", "y", ")", ":", "\n", "    ", "\"\"\"Inverse operation of _transform(y)\"\"\"", "\n", "return", "100.0", "*", "(", "1.0", "-", "np", ".", "exp", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.unnormalize_y": [[33, 40], ["None"], "function", ["None"], ["", "def", "unnormalize_y", "(", "y", ",", "y_mean", ",", "y_std", ",", "scale_std", "=", "False", ")", ":", "\n", "    ", "\"\"\"Similar to the undoing of the pre-processing step above, but on the output predictions\"\"\"", "\n", "if", "not", "scale_std", ":", "\n", "        ", "y", "=", "y", "*", "y_std", "+", "y_mean", "\n", "", "else", ":", "\n", "        ", "y", "*=", "y_std", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._compute_pd_inverse": [[42, 64], ["torch.cholesky_inverse", "print", "RuntimeError", "torch.sum", "torch.cholesky_inverse.float", "logDetK.float", "torch.cholesky", "torch.log", "torch.diag", "torch.eye"], "function", ["None"], ["", "def", "_compute_pd_inverse", "(", "K", ",", "jitter", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"Compute the inverse of a postive-(semi)definite matrix K using Cholesky inversion.\n    Return both the inverse matrix and the log determinant.\"\"\"", "\n", "n", "=", "K", ".", "shape", "[", "0", "]", "\n", "# assert isinstance(jitter, float) or jitter.ndim == 0, 'only homoscedastic noise variance is allowed here!'", "\n", "is_successful", "=", "False", "\n", "fail_count", "=", "0", "\n", "max_fail", "=", "3", "\n", "while", "fail_count", "<", "max_fail", "and", "not", "is_successful", ":", "\n", "        ", "try", ":", "\n", "            ", "jitter_diag", "=", "jitter", "*", "torch", ".", "eye", "(", "n", ",", "device", "=", "K", ".", "device", ")", "*", "10", "**", "fail_count", "\n", "K_", "=", "K", "+", "jitter_diag", "\n", "Kc", "=", "torch", ".", "cholesky", "(", "K_", ")", "\n", "is_successful", "=", "True", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "fail_count", "+=", "1", "\n", "", "", "if", "not", "is_successful", ":", "\n", "        ", "print", "(", "K", ")", "\n", "raise", "RuntimeError", "(", "\"Gram matrix not positive definite despite of jitter\"", ")", "\n", "", "logDetK", "=", "-", "2", "*", "torch", ".", "sum", "(", "torch", ".", "log", "(", "torch", ".", "diag", "(", "Kc", ")", ")", ")", "\n", "K_i", "=", "torch", ".", "cholesky_inverse", "(", "Kc", ")", "\n", "return", "K_i", ".", "float", "(", ")", ",", "logDetK", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl._compute_log_marginal_likelihood": [[66, 93], ["torch.log", "torch.tensor", "y.t"], "function", ["None"], ["", "def", "_compute_log_marginal_likelihood", "(", "\n", "K_i", ",", "\n", "logDetK", ",", "\n", "y", ",", "\n", "normalize", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Compute the zero mean Gaussian process log marginal likelihood given the inverse of Gram matrix K(x2,x2), its\n    log determinant, and the training label vector y.\n    Option:\n\n    normalize: normalize the log marginal likelihood by the length of the label vector, as per the gpytorch\n    routine.\n    \"\"\"", "\n", "# print(K_i.device, logDetK.device, y.device)", "\n", "lml", "=", "(", "\n", "-", "0.5", "*", "y", ".", "t", "(", ")", "@", "K_i", "@", "y", "\n", "+", "0.5", "*", "logDetK", "\n", "-", "y", ".", "shape", "[", "0", "]", "\n", "/", "2.0", "\n", "*", "torch", ".", "log", "(", "\n", "2", "\n", "*", "torch", ".", "tensor", "(", "\n", "np", ".", "pi", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "return", "lml", "/", "y", ".", "shape", "[", "0", "]", "if", "normalize", "else", "lml", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.wl_kernel.WeisfeilerLehman.__init__": [[71, 88], ["grakel.kernels.Kernel.__init__", "wl_kernel.WeisfeilerLehman._initialized.update"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["def", "__init__", "(", "\n", "self", ",", "\n", "normalize", "=", "True", ",", "\n", "h", "=", "2", ",", "\n", "base_graph_kernel", "=", "CustomVertexHistogram", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initialise a `weisfeiler_lehman` kernel.\"\"\"", "\n", "super", "(", "WeisfeilerLehman", ",", "self", ")", ".", "__init__", "(", "\n", "n_jobs", "=", "None", ",", "verbose", "=", "False", ",", "normalize", "=", "normalize", "\n", ")", "\n", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "base_graph_kernel", "=", "base_graph_kernel", "\n", "self", ".", "_initialized", ".", "update", "(", "{", "\"h\"", ":", "False", ",", "\"base_graph_kernel\"", ":", "False", "}", ")", "\n", "self", ".", "_base_graph_kernel", "=", "None", "\n", "self", ".", "feature_dims", "=", "[", "\n", "0", ",", "\n", "]", "# Record the dimensions of the vectors of each WL iteration", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.wl_kernel.WeisfeilerLehman.initialize": [[90, 142], ["super().initialize", "TypeError", "dict", "issubclass", "dict", "dict.pop", "type", "type", "TypeError", "type", "ValueError", "str", "TypeError", "issubclass", "type"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.initialize"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize all transformer arguments, needing initialization.\"\"\"", "\n", "super", "(", "WeisfeilerLehman", ",", "self", ")", ".", "initialize", "(", ")", "\n", "if", "not", "self", ".", "_initialized", "[", "\"base_graph_kernel\"", "]", ":", "\n", "            ", "base_graph_kernel", "=", "self", ".", "base_graph_kernel", "\n", "if", "base_graph_kernel", "is", "None", ":", "\n", "                ", "base_graph_kernel", ",", "params", "=", "CustomVertexHistogram", ",", "dict", "(", ")", "\n", "", "elif", "type", "(", "base_graph_kernel", ")", "is", "type", "and", "issubclass", "(", "\n", "base_graph_kernel", ",", "Kernel", "\n", ")", ":", "\n", "                ", "params", "=", "dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "base_graph_kernel", ",", "params", "=", "base_graph_kernel", "\n", "", "except", "Exception", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "\"Base kernel was not formulated in \"", "\n", "\"the correct way. \"", "\n", "\"Check documentation.\"", "\n", ")", "\n", "\n", "", "if", "not", "(", "\n", "type", "(", "base_graph_kernel", ")", "is", "type", "\n", "and", "issubclass", "(", "base_graph_kernel", ",", "Kernel", ")", "\n", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "\"The first argument must be a valid \"", "\n", "\"grakel.kernel.kernel Object\"", "\n", ")", "\n", "", "if", "type", "(", "params", ")", "is", "not", "dict", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"If the second argument of base \"", "\n", "\"kernel exists, it must be a diction\"", "\n", "\"ary between parameters names and \"", "\n", "\"values\"", "\n", ")", "\n", "", "params", ".", "pop", "(", "\"normalize\"", ",", "None", ")", "\n", "\n", "", "params", "[", "\"normalize\"", "]", "=", "False", "\n", "# params[\"verbose\"] = False", "\n", "# params[\"n_jobs\"] = None", "\n", "self", ".", "_base_graph_kernel", "=", "base_graph_kernel", "\n", "self", ".", "_params", "=", "params", "\n", "self", ".", "_initialized", "[", "\"base_graph_kernel\"", "]", "=", "True", "\n", "\n", "", "if", "not", "self", ".", "_initialized", "[", "\"h\"", "]", ":", "\n", "            ", "if", "type", "(", "self", ".", "h", ")", "is", "not", "int", "or", "self", ".", "h", "<", "0", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"'h' must be a non-negative integer. Got h\"", "+", "str", "(", "self", ".", "h", ")", "\n", ")", "\n", "", "self", ".", "_h", "=", "self", ".", "h", "+", "1", "\n", "self", ".", "_initialized", "[", "\"h\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.wl_kernel.WeisfeilerLehman.parse_input": [[143, 348], ["collections.OrderedDict", "sorted", "collections.OrderedDict", "copy.deepcopy", "wl_kernel.WeisfeilerLehman.feature_dims.append", "enumerate", "ValueError", "hasattr", "isinstance", "TypeError", "enumerate", "list", "len", "list", "range", "range", "wl_kernel.WeisfeilerLehman.parse_input.generate_graphs"], "methods", ["None"], ["", "", "def", "parse_input", "(", "\n", "self", ",", "\n", "X", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Parse input for weisfeiler lehman.\n\n        Parameters\n        ----------\n        X : iterable\n            For the input to pass the test, we must have:\n            Each element must be an iterable with at most three features and at\n            least one. The first that is obligatory is a valid graph structure\n            (adjacency matrix or edge_dictionary) while the second is\n            node_labels and the third edge_labels (that correspond to the given\n            graph format). A valid input also consists of graph type objects.\n\n        return_embedding_only: bool\n            Whether to return the embedding of the graphs only, instead of computing the kernel all\n            the way to the end.\n\n        Returns\n        -------\n        base_graph_kernel : object\n        Returns base_graph_kernel.\n\n        \"\"\"", "\n", "if", "self", ".", "_method_calling", "not", "in", "[", "1", ",", "2", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"method call must be called either from fit \"", "+", "\"or fit-transform\"", "\n", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "\"_X_diag\"", ")", ":", "\n", "# Clean _X_diag value", "\n", "            ", "delattr", "(", "self", ",", "\"_X_diag\"", ")", "\n", "\n", "# Input validation and parsing", "\n", "", "if", "not", "isinstance", "(", "X", ",", "collections", ".", "Iterable", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"input must be an iterable\\n\"", ")", "\n", "", "else", ":", "\n", "            ", "nx", "=", "0", "\n", "Gs_ed", ",", "L", ",", "distinct_values", ",", "extras", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "set", "(", ")", ",", "dict", "(", ")", "\n", "for", "(", "idx", ",", "x", ")", "in", "enumerate", "(", "iter", "(", "X", ")", ")", ":", "\n", "                ", "is_iter", "=", "isinstance", "(", "x", ",", "collections", ".", "Iterable", ")", "\n", "if", "is_iter", ":", "\n", "                    ", "x", "=", "list", "(", "x", ")", "\n", "", "if", "is_iter", "and", "(", "len", "(", "x", ")", "==", "0", "or", "len", "(", "x", ")", ">=", "2", ")", ":", "\n", "                    ", "if", "len", "(", "x", ")", "==", "0", ":", "\n", "                        ", "warnings", ".", "warn", "(", "\"Ignoring empty element on index: \"", "+", "str", "(", "idx", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                        ", "if", "len", "(", "x", ")", ">", "2", ":", "\n", "                            ", "extra", "=", "tuple", "(", ")", "\n", "if", "len", "(", "x", ")", ">", "3", ":", "\n", "                                ", "extra", "=", "tuple", "(", "x", "[", "3", ":", "]", ")", "\n", "", "x", "=", "Graph", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ",", "graph_format", "=", "self", ".", "_graph_format", ")", "\n", "extra", "=", "(", "\n", "x", ".", "get_labels", "(", "\n", "purpose", "=", "self", ".", "_graph_format", ",", "\n", "label_type", "=", "\"edge\"", ",", "\n", "return_none", "=", "True", ",", "\n", ")", ",", "\n", ")", "+", "extra", "\n", "", "else", ":", "\n", "                            ", "x", "=", "Graph", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "{", "}", ",", "graph_format", "=", "self", ".", "_graph_format", ")", "\n", "extra", "=", "tuple", "(", ")", "\n", "\n", "", "", "", "elif", "type", "(", "x", ")", "is", "Graph", ":", "\n", "                    ", "x", ".", "desired_format", "(", "self", ".", "_graph_format", ")", "\n", "el", "=", "x", ".", "get_labels", "(", "\n", "purpose", "=", "self", ".", "_graph_format", ",", "label_type", "=", "\"edge\"", ",", "return_none", "=", "True", "\n", ")", "\n", "if", "el", "is", "None", ":", "\n", "                        ", "extra", "=", "tuple", "(", ")", "\n", "", "else", ":", "\n", "                        ", "extra", "=", "(", "el", ",", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "\"each element of X must be either a \"", "\n", "+", "\"graph object or a list with at least \"", "\n", "+", "\"a graph like object and node labels \"", "\n", "+", "\"dict \\n\"", "\n", ")", "\n", "", "Gs_ed", "[", "nx", "]", "=", "x", ".", "get_edge_dictionary", "(", ")", "\n", "L", "[", "nx", "]", "=", "x", ".", "get_labels", "(", "purpose", "=", "\"dictionary\"", ")", "\n", "extras", "[", "nx", "]", "=", "extra", "\n", "distinct_values", "|=", "set", "(", "itervalues", "(", "L", "[", "nx", "]", ")", ")", "\n", "nx", "+=", "1", "\n", "", "if", "nx", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"parsed input is empty\"", ")", "\n", "\n", "# Save the number of \"fitted\" graphs.", "\n", "", "", "self", ".", "_nx", "=", "nx", "\n", "WL_labels_inverse", "=", "OrderedDict", "(", ")", "\n", "\n", "# assign a number to each label", "\n", "label_count", "=", "0", "\n", "for", "dv", "in", "sorted", "(", "list", "(", "distinct_values", ")", ")", ":", "\n", "            ", "WL_labels_inverse", "[", "dv", "]", "=", "label_count", "\n", "label_count", "+=", "1", "\n", "\n", "# Initalize an inverse dictionary of labels for all iterations", "\n", "", "self", ".", "_inv_labels", "=", "(", "\n", "OrderedDict", "(", ")", "\n", ")", "# Inverse dictionary of labels, in term of the *previous layer*", "\n", "self", ".", "_inv_labels", "[", "0", "]", "=", "deepcopy", "(", "WL_labels_inverse", ")", "\n", "self", ".", "feature_dims", ".", "append", "(", "\n", "len", "(", "WL_labels_inverse", ")", "\n", ")", "# Update the zeroth iteration feature dim", "\n", "\n", "# self._inv_label_node_attr = OrderedDict()  # Inverse dictionary of labels, in term of the *node attribute*", "\n", "# self._label_node_attr = OrderedDict()  # Same as above, but with key and value inverted", "\n", "# self._label_node_attr[0], self._inv_label_node_attr[0] = self.translate_label(WL_labels_inverse, 0)", "\n", "\n", "# if self.node_weights is not None:", "\n", "#     self._feature_weight = OrderedDict()", "\n", "#     # Ensure the order is the same", "\n", "#     self._feature_weight[0] = self._compute_feature_weight(self.node_weights, 0, WL_labels_inverse)[1]", "\n", "# else:", "\n", "#     self._feature_weight = None", "\n", "\n", "def", "generate_graphs", "(", "label_count", ",", "WL_labels_inverse", ")", ":", "\n", "            ", "new_graphs", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "_nx", ")", ":", "\n", "                ", "new_labels", "=", "dict", "(", ")", "\n", "for", "k", "in", "L", "[", "j", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "new_labels", "[", "k", "]", "=", "WL_labels_inverse", "[", "L", "[", "j", "]", "[", "k", "]", "]", "\n", "", "L", "[", "j", "]", "=", "new_labels", "\n", "# add new labels", "\n", "new_graphs", ".", "append", "(", "(", "Gs_ed", "[", "j", "]", ",", "new_labels", ")", "+", "extras", "[", "j", "]", ")", "\n", "", "yield", "new_graphs", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "_h", ")", ":", "\n", "                ", "label_set", ",", "WL_labels_inverse", ",", "L_temp", "=", "set", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "j", "in", "range", "(", "nx", ")", ":", "\n", "# Find unique labels and sort", "\n", "# them for both graphs", "\n", "# Keep for each node the temporary", "\n", "                    ", "L_temp", "[", "j", "]", "=", "dict", "(", ")", "\n", "for", "v", "in", "Gs_ed", "[", "j", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "credential", "=", "(", "\n", "str", "(", "L", "[", "j", "]", "[", "v", "]", ")", "\n", "+", "\",\"", "\n", "+", "str", "(", "sorted", "(", "[", "L", "[", "j", "]", "[", "n", "]", "for", "n", "in", "Gs_ed", "[", "j", "]", "[", "v", "]", ".", "keys", "(", ")", "]", ")", ")", "\n", ")", "\n", "L_temp", "[", "j", "]", "[", "v", "]", "=", "credential", "\n", "label_set", ".", "add", "(", "credential", ")", "\n", "\n", "", "", "label_list", "=", "sorted", "(", "list", "(", "label_set", ")", ")", "\n", "for", "dv", "in", "label_list", ":", "\n", "                    ", "WL_labels_inverse", "[", "dv", "]", "=", "label_count", "\n", "label_count", "+=", "1", "\n", "\n", "# Recalculate labels", "\n", "", "new_graphs", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "nx", ")", ":", "\n", "                    ", "new_labels", "=", "dict", "(", ")", "\n", "for", "k", "in", "L_temp", "[", "j", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "new_labels", "[", "k", "]", "=", "WL_labels_inverse", "[", "L_temp", "[", "j", "]", "[", "k", "]", "]", "\n", "", "L", "[", "j", "]", "=", "new_labels", "\n", "# relabel", "\n", "new_graphs", ".", "append", "(", "(", "Gs_ed", "[", "j", "]", ",", "new_labels", ")", "+", "extras", "[", "j", "]", ")", "\n", "", "self", ".", "_inv_labels", "[", "i", "]", "=", "WL_labels_inverse", "\n", "# Compute the translated inverse node label", "\n", "# self._label_node_attr[i], self._inv_label_node_attr[i] = self.translate_label(WL_labels_inverse, i, self._label_node_attr[i - 1])", "\n", "# self.feature_dims.append(self.feature_dims[-1] + len(self._label_node_attr[i]))", "\n", "# Compute the feature weight of the current layer", "\n", "# if self.node_weights is not None:", "\n", "#     self._feature_weight[i] = self._compute_feature_weight(self.node_weights, i, self._inv_label_node_attr[i])[1]", "\n", "# assert len(self._feature_weight[i] == len(WL_labels_inverse))", "\n", "yield", "new_graphs", "\n", "\n", "# Initialise the base graph kernel.", "\n", "", "", "base_graph_kernel", "=", "{", "}", "\n", "\n", "K", "=", "[", "]", "\n", "for", "(", "i", ",", "g", ")", "in", "enumerate", "(", "generate_graphs", "(", "label_count", ",", "WL_labels_inverse", ")", ")", ":", "\n", "            ", "param", "=", "self", ".", "_params", "\n", "# if self._feature_weight is not None:", "\n", "# print(self._feature_weight)", "\n", "# param.update({'mahalanobis_precision': self._feature_weight[i]})", "\n", "base_graph_kernel", ".", "update", "(", "{", "i", ":", "self", ".", "_base_graph_kernel", "(", "**", "param", ")", "}", ")", "\n", "# if return_embedding_only:", "\n", "#     K.append(base_graph_kernel[i].parse_input(", "\n", "#         g, label_start_idx=self.feature_dims[i], label_end_idx=self.feature_dims[i + 1]))", "\n", "# else:", "\n", "if", "self", ".", "_method_calling", "==", "1", ":", "\n", "                ", "base_graph_kernel", "[", "i", "]", ".", "fit", "(", "\n", "g", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "K", ".", "append", "(", "\n", "base_graph_kernel", "[", "i", "]", ".", "fit_transform", "(", "\n", "g", ",", "\n", ")", "\n", ")", "\n", "\n", "# if return_embedding_only:", "\n", "#     return K", "\n", "", "", "if", "self", ".", "_method_calling", "==", "1", ":", "\n", "            ", "return", "base_graph_kernel", "\n", "", "elif", "self", ".", "_method_calling", "==", "2", ":", "\n", "# if self.as_tensor:", "\n", "#     K = torch.stack(K, dim=0).sum(dim=0)", "\n", "#     return K, base_graph_kernel", "\n", "            ", "return", "np", ".", "sum", "(", "K", ",", "axis", "=", "0", ")", ",", "base_graph_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.wl_kernel.WeisfeilerLehman.fit_transform": [[349, 384], ["wl_kernel.WeisfeilerLehman.initialize", "ValueError", "wl_kernel.WeisfeilerLehman.parse_input"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.initialize", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.parse_input"], ["", "", "def", "fit_transform", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit and transform, on the same dataset.\n\n        Parameters\n        ----------\n        X : iterable\n            Each element must be an iterable with at most three features and at\n            least one. The first that is obligatory is a valid graph structure\n            (adjacency matrix or edge_dictionary) while the second is\n            node_labels and the third edge_labels (that fitting the given graph\n            format). If None the kernel matrix is calculated upon fit data.\n            The test samples.\n\n        y : Object, default=None\n            Ignored argument, added for the pipeline.\n\n        Returns\n        -------\n        K : numpy array, shape = [n_targets, n_input_graphs]\n            corresponding to the kernel matrix, a calculation between\n            all pairs of graphs between target an features\n\n        \"\"\"", "\n", "self", ".", "_method_calling", "=", "2", "\n", "self", ".", "_is_transformed", "=", "False", "\n", "self", ".", "initialize", "(", ")", "\n", "self", ".", "feature_dims", "=", "[", "\n", "0", ",", "\n", "]", "# Flush the feature dimensions", "\n", "if", "X", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"transform input cannot be None\"", ")", "\n", "", "else", ":", "\n", "            ", "km", ",", "self", ".", "X", "=", "self", ".", "parse_input", "(", "X", ")", "\n", "\n", "", "return", "km", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.wl_kernel.WeisfeilerLehman.transform": [[385, 540], ["sklearn.utils.validation.check_is_fitted", "len", "collections.OrderedDict", "numpy.sum", "ValueError", "list", "range", "range", "wl_kernel.WeisfeilerLehman.diagonal", "numpy.seterr", "numpy.nan_to_num", "numpy.seterr", "isinstance", "ValueError", "set", "enumerate", "enumerate", "dict", "six.iteritems", "list.append", "list", "len", "range", "dict", "list", "range", "wl_kernel.WeisfeilerLehman.X[].transform", "numpy.divide", "dict", "dict", "iter", "isinstance", "grakel.graph.Graph.get_edge_dictionary", "grakel.graph.Graph.get_labels", "set", "ValueError", "sorted", "dict", "set", "dict", "Gs_ed[].keys", "len", "sorted", "dict", "six.iteritems", "list.append", "enumerate", "numpy.sqrt", "list", "list", "list", "wl_kernel.WeisfeilerLehman.transform.generate_graphs_transform"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.transform", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "transform", "(", "\n", "self", ",", "\n", "X", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Calculate the kernel matrix, between given and fitted dataset.\n\n        Parameters\n        ----------\n        X : iterable\n            Each element must be an iterable with at most three features and at\n            least one. The first that is obligatory is a valid graph structure\n            (adjacency matrix or edge_dictionary) while the second is\n            node_labels and the third edge_labels (that fitting the given graph\n            format). If None the kernel matrix is calculated upon fit data.\n            The test samples.\n\n            Whether to return the embedding of the graphs only, instead of computing the kernel all\n            the way to the end.\n        Returns\n        -------\n        K : numpy array, shape = [n_targets, n_input_graphs]\n            corresponding to the kernel matrix, a calculation between\n            all pairs of graphs between target an features\n\n        \"\"\"", "\n", "self", ".", "_method_calling", "=", "3", "\n", "# Check is fit had been called", "\n", "check_is_fitted", "(", "self", ",", "[", "\"X\"", ",", "\"_nx\"", ",", "\"_inv_labels\"", "]", ")", "\n", "\n", "# Input validation and parsing", "\n", "if", "X", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"transform input cannot be None\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "X", ",", "collections", ".", "Iterable", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"input must be an iterable\\n\"", ")", "\n", "", "else", ":", "\n", "                ", "nx", "=", "0", "\n", "distinct_values", "=", "set", "(", ")", "\n", "Gs_ed", ",", "L", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "iter", "(", "X", ")", ")", ":", "\n", "                    ", "is_iter", "=", "isinstance", "(", "x", ",", "collections", ".", "Iterable", ")", "\n", "if", "is_iter", ":", "\n", "                        ", "x", "=", "list", "(", "x", ")", "\n", "", "if", "is_iter", "and", "len", "(", "x", ")", "in", "[", "0", ",", "2", ",", "3", "]", ":", "\n", "                        ", "if", "len", "(", "x", ")", "==", "0", ":", "\n", "                            ", "warnings", ".", "warn", "(", "\"Ignoring empty element on index: \"", "+", "str", "(", "i", ")", ")", "\n", "continue", "\n", "\n", "", "elif", "len", "(", "x", ")", "in", "[", "2", ",", "3", "]", ":", "\n", "                            ", "x", "=", "Graph", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "{", "}", ",", "self", ".", "_graph_format", ")", "\n", "", "", "elif", "type", "(", "x", ")", "is", "Graph", ":", "\n", "                        ", "x", ".", "desired_format", "(", "\"dictionary\"", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "\"each element of X must have at \"", "\n", "+", "\"least one and at most 3 elements\\n\"", "\n", ")", "\n", "", "Gs_ed", "[", "nx", "]", "=", "x", ".", "get_edge_dictionary", "(", ")", "\n", "L", "[", "nx", "]", "=", "x", ".", "get_labels", "(", "purpose", "=", "\"dictionary\"", ")", "\n", "\n", "# Hold all the distinct values", "\n", "distinct_values", "|=", "set", "(", "\n", "v", "for", "v", "in", "itervalues", "(", "L", "[", "nx", "]", ")", "if", "v", "not", "in", "self", ".", "_inv_labels", "[", "0", "]", "\n", ")", "\n", "nx", "+=", "1", "\n", "", "if", "nx", "==", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"parsed input is empty\"", ")", "\n", "\n", "", "", "", "nl", "=", "len", "(", "self", ".", "_inv_labels", "[", "0", "]", ")", "\n", "WL_labels_inverse", "=", "{", "\n", "dv", ":", "idx", "for", "(", "idx", ",", "dv", ")", "in", "enumerate", "(", "sorted", "(", "list", "(", "distinct_values", ")", ")", ",", "nl", ")", "\n", "}", "\n", "WL_labels_inverse", "=", "OrderedDict", "(", "WL_labels_inverse", ")", "\n", "\n", "def", "generate_graphs_transform", "(", "WL_labels_inverse", ",", "nl", ")", ":", "\n", "# calculate the kernel matrix for the 0 iteration", "\n", "            ", "new_graphs", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "nx", ")", ":", "\n", "                ", "new_labels", "=", "dict", "(", ")", "\n", "for", "(", "k", ",", "v", ")", "in", "iteritems", "(", "L", "[", "j", "]", ")", ":", "\n", "                    ", "if", "v", "in", "self", ".", "_inv_labels", "[", "0", "]", ":", "\n", "                        ", "new_labels", "[", "k", "]", "=", "self", ".", "_inv_labels", "[", "0", "]", "[", "v", "]", "\n", "", "else", ":", "\n", "                        ", "new_labels", "[", "k", "]", "=", "WL_labels_inverse", "[", "v", "]", "\n", "", "", "L", "[", "j", "]", "=", "new_labels", "\n", "# produce the new graphs", "\n", "new_graphs", ".", "append", "(", "[", "Gs_ed", "[", "j", "]", ",", "new_labels", "]", ")", "\n", "", "yield", "new_graphs", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "_h", ")", ":", "\n", "                ", "new_graphs", "=", "list", "(", ")", "\n", "L_temp", ",", "label_set", "=", "dict", "(", ")", ",", "set", "(", ")", "\n", "nl", "+=", "len", "(", "self", ".", "_inv_labels", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "nx", ")", ":", "\n", "# Find unique labels and sort them for both graphs", "\n", "# Keep for each node the temporary", "\n", "                    ", "L_temp", "[", "j", "]", "=", "dict", "(", ")", "\n", "for", "v", "in", "Gs_ed", "[", "j", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "credential", "=", "(", "\n", "str", "(", "L", "[", "j", "]", "[", "v", "]", ")", "\n", "+", "\",\"", "\n", "+", "str", "(", "sorted", "(", "[", "L", "[", "j", "]", "[", "n", "]", "for", "n", "in", "Gs_ed", "[", "j", "]", "[", "v", "]", ".", "keys", "(", ")", "]", ")", ")", "\n", ")", "\n", "L_temp", "[", "j", "]", "[", "v", "]", "=", "credential", "\n", "if", "credential", "not", "in", "self", ".", "_inv_labels", "[", "i", "]", ":", "\n", "                            ", "label_set", ".", "add", "(", "credential", ")", "\n", "\n", "# Calculate the new label_set", "\n", "", "", "", "WL_labels_inverse", "=", "dict", "(", ")", "\n", "if", "len", "(", "label_set", ")", ">", "0", ":", "\n", "                    ", "for", "dv", "in", "sorted", "(", "list", "(", "label_set", ")", ")", ":", "\n", "                        ", "idx", "=", "len", "(", "WL_labels_inverse", ")", "+", "nl", "\n", "WL_labels_inverse", "[", "dv", "]", "=", "idx", "\n", "\n", "# Recalculate labels", "\n", "", "", "new_graphs", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "nx", ")", ":", "\n", "                    ", "new_labels", "=", "dict", "(", ")", "\n", "for", "(", "k", ",", "v", ")", "in", "iteritems", "(", "L_temp", "[", "j", "]", ")", ":", "\n", "                        ", "if", "v", "in", "self", ".", "_inv_labels", "[", "i", "]", ":", "\n", "                            ", "new_labels", "[", "k", "]", "=", "self", ".", "_inv_labels", "[", "i", "]", "[", "v", "]", "\n", "", "else", ":", "\n", "                            ", "new_labels", "[", "k", "]", "=", "WL_labels_inverse", "[", "v", "]", "\n", "", "", "L", "[", "j", "]", "=", "new_labels", "\n", "# Create the new graphs with the new labels.", "\n", "new_graphs", ".", "append", "(", "[", "Gs_ed", "[", "j", "]", ",", "new_labels", "]", ")", "\n", "", "yield", "new_graphs", "\n", "\n", "# Calculate the kernel matrix without parallelization", "\n", "", "", "K", "=", "np", ".", "sum", "(", "\n", "(", "\n", "self", ".", "X", "[", "i", "]", ".", "transform", "(", "\n", "g", ",", "\n", "label_start_idx", "=", "self", ".", "feature_dims", "[", "i", "]", ",", "\n", "label_end_idx", "=", "self", ".", "feature_dims", "[", "i", "+", "1", "]", ",", "\n", ")", "\n", "for", "(", "i", ",", "g", ")", "in", "enumerate", "(", "\n", "generate_graphs_transform", "(", "WL_labels_inverse", ",", "nl", ")", "\n", ")", "\n", ")", ",", "\n", "axis", "=", "0", ",", "\n", ")", "\n", "\n", "self", ".", "_is_transformed", "=", "True", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "X_diag", ",", "Y_diag", "=", "self", ".", "diagonal", "(", ")", "\n", "# if self.as_tensor:", "\n", "#     div_ = torch.sqrt(torch.ger(Y_diag, X_diag))", "\n", "#     K /= div_", "\n", "# else:", "\n", "old_settings", "=", "np", ".", "seterr", "(", "divide", "=", "\"ignore\"", ")", "\n", "K", "=", "np", ".", "nan_to_num", "(", "np", ".", "divide", "(", "K", ",", "np", ".", "sqrt", "(", "np", ".", "outer", "(", "Y_diag", ",", "X_diag", ")", ")", ")", ")", "\n", "np", ".", "seterr", "(", "**", "old_settings", ")", "\n", "\n", "", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.wl_kernel.WeisfeilerLehman.diagonal": [[541, 599], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "range", "wl_kernel.WeisfeilerLehman.X[].diagonal", "wl_kernel.WeisfeilerLehman.X[].diagonal", "range", "wl_kernel.WeisfeilerLehman.X[].diagonal", "wl_kernel.WeisfeilerLehman.X[].diagonal", "wl_kernel.WeisfeilerLehman.X[].diagonal", "range", "wl_kernel.WeisfeilerLehman.X[].diagonal"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal"], ["", "def", "diagonal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate the kernel matrix diagonal for fitted data.\n\n        A funtion called on transform on a seperate dataset to apply\n        normalization on the exterior.\n\n        Parameters\n        ----------\n        None.\n\n        Returns\n        -------\n        X_diag : np.array\n            The diagonal of the kernel matrix, of the fitted data.\n            This consists of kernel calculation for each element with itself.\n\n        Y_diag : np.array\n            The diagonal of the kernel matrix, of the transformed data.\n            This consists of kernel calculation for each element with itself.\n\n        \"\"\"", "\n", "# Check if fit had been called", "\n", "check_is_fitted", "(", "self", ",", "[", "\"X\"", "]", ")", "\n", "try", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "[", "\"_X_diag\"", "]", ")", "\n", "if", "self", ".", "_is_transformed", ":", "\n", "                ", "Y_diag", "=", "self", ".", "X", "[", "0", "]", ".", "diagonal", "(", ")", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "_h", ")", ":", "\n", "                    ", "Y_diag", "+=", "self", ".", "X", "[", "i", "]", ".", "diagonal", "(", ")", "[", "1", "]", "\n", "", "", "", "except", "NotFittedError", ":", "\n", "# Calculate diagonal of X", "\n", "            ", "if", "self", ".", "_is_transformed", ":", "\n", "                ", "X_diag", ",", "Y_diag", "=", "self", ".", "X", "[", "0", "]", ".", "diagonal", "(", ")", "\n", "# X_diag is considered a mutable and should not affect the kernel matrix itself.", "\n", "X_diag", ".", "flags", ".", "writeable", "=", "True", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "_h", ")", ":", "\n", "                    ", "x", ",", "y", "=", "self", ".", "X", "[", "i", "]", ".", "diagonal", "(", ")", "\n", "X_diag", "+=", "x", "\n", "Y_diag", "+=", "y", "\n", "self", ".", "_X_diag", "=", "X_diag", "\n", "", "else", ":", "\n", "# case sub kernel is only fitted", "\n", "                    ", "X_diag", "=", "self", ".", "X", "[", "0", "]", ".", "diagonal", "(", ")", "\n", "# X_diag is considered a mutable and should not affect the kernel matrix itself.", "\n", "X_diag", ".", "flags", ".", "writeable", "=", "True", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "_n_iter", ")", ":", "\n", "                        ", "x", "=", "self", ".", "X", "[", "i", "]", ".", "diagonal", "(", ")", "\n", "X_diag", "+=", "x", "\n", "", "self", ".", "_X_diag", "=", "X_diag", "\n", "\n", "# if self.as_tensor:", "\n", "#     self._X_diag = torch.tensor(self._X_diag)", "\n", "#     if Y_diag is not None:", "\n", "#         Y_diag = torch.tensor(Y_diag)", "\n", "", "", "", "if", "self", ".", "_is_transformed", ":", "\n", "            ", "return", "self", ".", "_X_diag", ",", "Y_diag", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_X_diag", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.__init__": [[53, 84], ["grakel.kernels.Kernel.__init__", "vertex_histogram.CustomVertexHistogram._initialized.update"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["def", "__init__", "(", "\n", "self", ",", "\n", "normalize", "=", "False", ",", "\n", "sparse", "=", "\"auto\"", ",", "\n", "oa", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initialise a vertex histogram kernel.\n\n        require_ordered_features: bool\n            Whether the ordering of the features in the feature matrix matters.\n            If True, the features will be parsed in the same order as the WL\n            node label.\n\n            Note that if called directly (not from Weisfiler Lehman kernel), turning\n            this option on could break the code, as the label in general is non-int.\n\n        \"\"\"", "\n", "super", "(", "CustomVertexHistogram", ",", "self", ")", ".", "__init__", "(", "\n", "n_jobs", "=", "None", ",", "normalize", "=", "normalize", ",", "verbose", "=", "False", "\n", ")", "\n", "# self.as_tensor = as_tensor", "\n", "# if self.as_tensor:", "\n", "#     self.sparse = False", "\n", "# else:", "\n", "self", ".", "sparse", "=", "sparse", "\n", "self", ".", "oa", "=", "oa", "\n", "self", ".", "_initialized", ".", "update", "(", "{", "\"sparse\"", ":", "True", "}", ")", "\n", "\n", "self", ".", "_X_diag", "=", "None", "\n", "self", ".", "X_tensor", "=", "None", "\n", "self", ".", "Y_tensor", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.initialize": [[85, 95], ["warnings.warn", "TypeError"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize all transformer arguments, needing initialization.\"\"\"", "\n", "if", "not", "self", ".", "_initialized", "[", "\"n_jobs\"", "]", ":", "\n", "            ", "if", "self", ".", "n_jobs", "is", "not", "None", ":", "\n", "                ", "warn", "(", "\"no implemented parallelization for VertexHistogram\"", ")", "\n", "", "self", ".", "_initialized", "[", "\"n_jobs\"", "]", "=", "True", "\n", "", "if", "not", "self", ".", "_initialized", "[", "\"sparse\"", "]", ":", "\n", "            ", "if", "self", ".", "sparse", "not", "in", "[", "\"auto\"", ",", "False", ",", "True", "]", ":", "\n", "                ", "TypeError", "(", "\"sparse could be False, True or auto\"", ")", "\n", "", "self", ".", "_initialized", "[", "\"sparse\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.parse_input": [[96, 194], ["isinstance", "TypeError", "enumerate", "len", "list", "list", "list", "dict", "iter", "isinstance", "six.iteritems", "scipy.sparse.csr_matrix", "ValueError", "dict", "list", "collections.Counter", "rows.append", "dict.get", "cols.append", "data.append", "bool", "numpy.zeros", "len", "len", "warnings.warn", "type", "list.get_labels", "TypeError", "six.itervalues", "len", "warnings.warn", "len", "float", "scipy.sparse.csr_matrix", "str"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "", "def", "parse_input", "(", "\n", "self", ",", "\n", "X", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Parse and check the given input for VH kernel.\n\n        Parameters\n        ----------\n        X : iterable\n            For the input to pass the test, we must have:\n            Each element must be an iterable with at most three features and at\n            least one. The first that is obligatory is a valid graph structure\n            (adjacency matrix or edge_dictionary) while the second is\n            node_labels and the third edge_labels (that fitting the given graph\n            format).\n\n        Returns\n        -------\n        out : np.array, shape=(len(X), n_labels)\n            A np.array for frequency (cols) histograms for all Graphs (rows).\n\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "X", ",", "Iterable", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"input must be an iterable\\n\"", ")", "\n", "", "else", ":", "\n", "            ", "rows", ",", "cols", ",", "data", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "if", "self", ".", "_method_calling", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "                ", "labels", "=", "dict", "(", ")", "\n", "self", ".", "_labels", "=", "labels", "\n", "", "elif", "self", ".", "_method_calling", "==", "3", ":", "\n", "                ", "labels", "=", "dict", "(", "self", ".", "_labels", ")", "\n", "", "ni", "=", "0", "\n", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "iter", "(", "X", ")", ")", ":", "\n", "                ", "is_iter", "=", "isinstance", "(", "x", ",", "Iterable", ")", "\n", "if", "is_iter", ":", "\n", "                    ", "x", "=", "list", "(", "x", ")", "\n", "", "if", "is_iter", "and", "len", "(", "x", ")", "in", "[", "0", ",", "2", ",", "3", "]", ":", "\n", "                    ", "if", "len", "(", "x", ")", "==", "0", ":", "\n", "                        ", "warn", "(", "\"Ignoring empty element on index: \"", "+", "str", "(", "i", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "# Our element is an iterable of at least 2 elements", "\n", "                        ", "L", "=", "x", "[", "1", "]", "\n", "", "", "elif", "type", "(", "x", ")", "is", "Graph", ":", "\n", "# get labels in any existing format", "\n", "                    ", "L", "=", "x", ".", "get_labels", "(", "purpose", "=", "\"any\"", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "\"each element of X must be either a \"", "\n", "\"graph object or a list with at least \"", "\n", "\"a graph like object and node labels \"", "\n", "\"dict \\n\"", "\n", ")", "\n", "\n", "# construct the data input for the numpy array", "\n", "", "for", "(", "label", ",", "frequency", ")", "in", "iteritems", "(", "Counter", "(", "itervalues", "(", "L", ")", ")", ")", ":", "\n", "# for the row that corresponds to that graph", "\n", "                    ", "rows", ".", "append", "(", "ni", ")", "\n", "col_idx", "=", "labels", ".", "get", "(", "label", ",", "None", ")", "\n", "if", "col_idx", "is", "None", ":", "\n", "# if not indexed, add the new index (the next)", "\n", "                        ", "col_idx", "=", "len", "(", "labels", ")", "\n", "labels", "[", "label", "]", "=", "col_idx", "\n", "\n", "# designate the certain column information", "\n", "", "cols", ".", "append", "(", "col_idx", ")", "\n", "\n", "# as well as the frequency value to data", "\n", "data", ".", "append", "(", "frequency", ")", "\n", "", "ni", "+=", "1", "\n", "\n", "", "label_length", "=", "len", "(", "labels", ")", "\n", "\n", "if", "self", ".", "_method_calling", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "                ", "if", "self", ".", "sparse", "==", "\"auto\"", ":", "\n", "                    ", "self", ".", "sparse_", "=", "len", "(", "cols", ")", "/", "float", "(", "ni", "*", "label_length", ")", "<=", "0.5", "\n", "", "else", ":", "\n", "                    ", "self", ".", "sparse_", "=", "bool", "(", "self", ".", "sparse", ")", "\n", "\n", "", "", "if", "self", ".", "sparse_", ":", "\n", "                ", "features", "=", "csr_matrix", "(", "\n", "(", "data", ",", "(", "rows", ",", "cols", ")", ")", ",", "shape", "=", "(", "ni", ",", "label_length", ")", ",", "copy", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "# Initialise the feature matrix", "\n", "                ", "try", ":", "\n", "                    ", "features", "=", "zeros", "(", "shape", "=", "(", "ni", ",", "label_length", ")", ")", "\n", "features", "[", "rows", ",", "cols", "]", "=", "data", "\n", "\n", "", "except", "MemoryError", ":", "\n", "                    ", "warn", "(", "\"memory-error: switching to sparse\"", ")", "\n", "self", ".", "sparse_", ",", "features", "=", "True", ",", "csr_matrix", "(", "\n", "(", "data", ",", "(", "rows", ",", "cols", ")", ")", ",", "shape", "=", "(", "ni", ",", "label_length", ")", ",", "copy", "=", "False", "\n", ")", "\n", "\n", "", "", "if", "ni", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"parsed input is empty\"", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram._calculate_kernel_matrix": [[195, 241], ["numpy.zeros.toarray", "numpy.zeros", "range", "numpy.zeros", "range", "range", "range", "numpy.sum", "numpy.sum", "numpy.minimum", "numpy.minimum"], "methods", ["None"], ["", "", "def", "_calculate_kernel_matrix", "(", "self", ",", "Y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Calculate the kernel matrix given a target_graph and a kernel.\n\n        Each a matrix is calculated between all elements of Y on the rows and\n        all elements of X on the columns.\n\n        Parameters\n        ----------\n        Y : np.array, default=None\n            The array between samples and features.\n\n        Returns\n        -------\n        K : numpy array, shape = [n_targets, n_inputs]\n            The kernel matrix: a calculation between all pairs of graphs\n            between targets and inputs. If Y is None targets and inputs\n            are the taken from self.X. Otherwise Y corresponds to targets\n            and self.X to inputs.\n\n        \"\"\"", "\n", "import", "numpy", "as", "np", "\n", "\n", "if", "Y", "is", "None", ":", "\n", "            ", "if", "self", ".", "oa", ":", "\n", "                ", "K", "=", "np", ".", "zeros", "(", "(", "self", ".", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "i", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "K", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "np", ".", "minimum", "(", "self", ".", "X", "[", "i", ",", ":", "]", ",", "self", ".", "X", "[", "j", ",", ":", "]", ")", ")", "\n", "K", "[", "j", ",", "i", "]", "=", "K", "[", "i", ",", "j", "]", "\n", "", "", "", "else", ":", "\n", "                ", "K", "=", "self", ".", "X", "@", "self", ".", "X", ".", "T", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "oa", ":", "\n", "                ", "K", "=", "np", ".", "zeros", "(", "(", "Y", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "Y", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "K", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "\n", "np", ".", "minimum", "(", "self", ".", "X", "[", "j", ",", ":", "]", ",", "Y", "[", "i", ",", ":", "self", ".", "X", ".", "shape", "[", "1", "]", "]", ")", "\n", ")", "\n", "", "", "", "else", ":", "\n", "                ", "K", "=", "Y", "[", ":", ",", ":", "self", ".", "X", ".", "shape", "[", "1", "]", "]", "@", "self", ".", "X", ".", "T", "\n", "\n", "", "", "if", "self", ".", "sparse_", ":", "\n", "            ", "return", "K", ".", "toarray", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal": [[242, 280], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "numpy.squeeze", "numpy.einsum", "numpy.squeeze", "numpy.einsum", "numpy.array", "numpy.array", "vertex_histogram.CustomVertexHistogram._Y.multiply().sum", "vertex_histogram.CustomVertexHistogram.X.multiply().sum", "vertex_histogram.CustomVertexHistogram._Y.multiply", "vertex_histogram.CustomVertexHistogram.X.multiply"], "methods", ["None"], ["", "", "def", "diagonal", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Calculate the kernel matrix diagonal of the fitted data.\n\n        Parameters\n        ----------\n        None.\n\n        Returns\n        -------\n        X_diag : np.array\n            The diagonal of the kernel matrix, of the fitted. This consists\n            of each element calculated with itself.\n\n        use_tensor: bool:\n            The flag to use whether return tensor instead of numpy array. All other operations are the same\n\n        \"\"\"", "\n", "# Check is fit had been called", "\n", "check_is_fitted", "(", "self", ",", "[", "\"X\"", ",", "\"sparse_\"", "]", ")", "\n", "try", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "[", "\"_X_diag\"", "]", ")", "\n", "", "except", "NotFittedError", ":", "\n", "# Calculate diagonal of X", "\n", "            ", "if", "self", ".", "sparse_", ":", "\n", "                ", "self", ".", "_X_diag", "=", "squeeze", "(", "array", "(", "self", ".", "X", ".", "multiply", "(", "self", ".", "X", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_X_diag", "=", "einsum", "(", "\"ij,ij->i\"", ",", "self", ".", "X", ",", "self", ".", "X", ")", "\n", "", "", "try", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "[", "\"_Y\"", "]", ")", "\n", "if", "self", ".", "sparse_", ":", "\n", "                ", "Y_diag", "=", "squeeze", "(", "array", "(", "self", ".", "_Y", ".", "multiply", "(", "self", ".", "_Y", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "Y_diag", "=", "einsum", "(", "\"ij,ij->i\"", ",", "self", ".", "_Y", ",", "self", ".", "_Y", ")", "\n", "", "return", "self", ".", "_X_diag", ",", "Y_diag", "\n", "", "except", "NotFittedError", ":", "\n", "            ", "return", "self", ".", "_X_diag", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.transform": [[281, 330], ["sklearn.utils.validation.check_is_fitted", "vertex_histogram.CustomVertexHistogram._calculate_kernel_matrix", "ValueError", "vertex_histogram.CustomVertexHistogram.parse_input", "vertex_histogram.CustomVertexHistogram.diagonal", "numpy.sqrt", "numpy.outer"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram._calculate_kernel_matrix", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.parse_input", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal"], ["", "", "def", "transform", "(", "self", ",", "X", ",", "return_embedding_only", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate the kernel matrix, between given and fitted dataset.\n\n        Parameters\n        ----------\n        X : iterable\n            Each element must be an iterable with at most three features and at\n            least one. The first that is obligatory is a valid graph structure\n            (adjacency matrix or edge_dictionary) while the second is\n            node_labels and the third edge_labels (that fitting the given graph\n            format). If None the kernel matrix is calculated upon fit data.\n            The test samples.\n\n        return_embedding_only: bool\n            Whether returns the vector embedding of the kernel only (without actually\n            computing the kernel function). This is used when computing the derivative\n            of the kernel w.r.t. the test points/\n\n        Returns\n        -------\n        K : numpy array, shape = [n_targets, n_input_graphs]\n            corresponding to the kernel matrix, a calculation between\n            all pairs of graphs between target an features\n\n        \"\"\"", "\n", "self", ".", "_method_calling", "=", "3", "\n", "# Check is fit had been called", "\n", "check_is_fitted", "(", "self", ",", "[", "\"X\"", "]", ")", "\n", "\n", "# Input validation and parsing", "\n", "if", "X", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"`transform` input cannot be None\"", ")", "\n", "", "else", ":", "\n", "            ", "Y", "=", "self", ".", "parse_input", "(", "X", ",", "**", "kwargs", ")", "\n", "", "if", "return_embedding_only", ":", "\n", "            ", "return", "Y", "\n", "\n", "", "self", ".", "_Y", "=", "Y", "\n", "self", ".", "_is_transformed", "=", "True", "\n", "\n", "# Transform - calculate kernel matrix", "\n", "km", "=", "self", ".", "_calculate_kernel_matrix", "(", "Y", ")", "\n", "# Self transform must appear before the diagonal call on normilization", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "X_diag", ",", "Y_diag", "=", "self", ".", "diagonal", "(", ")", "\n", "km", "/=", "np", ".", "sqrt", "(", "np", ".", "outer", "(", "Y_diag", ",", "X_diag", ")", ")", "\n", "# if self.as_tensor:", "\n", "#     km = torch.tensor(km)", "\n", "", "return", "km", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit_transform": [[331, 367], ["vertex_histogram.CustomVertexHistogram.fit", "vertex_histogram.CustomVertexHistogram._calculate_kernel_matrix", "numpy.diagonal", "numpy.sqrt", "numpy.outer"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram._calculate_kernel_matrix", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.diagonal"], ["", "def", "fit_transform", "(", "self", ",", "X", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Fit and transform, on the same dataset.\n\n        Parameters\n        ----------\n        X : iterable\n            Each element must be an iterable with at most three features and at\n            least one. The first that is obligatory is a valid graph structure\n            (adjacency matrix or edge_dictionary) while the second is\n            node_labels and the third edge_labels (that fitting the given graph\n            format). If None the kernel matrix is calculated upon fit data.\n            The test samples.\n\n        y : None\n            There is no need of a target in a transformer, yet the pipeline API\n            requires this parameter.\n\n        Returns\n        -------\n        K : numpy array, shape = [n_targets, n_input_graphs]\n            corresponding to the kernel matrix, a calculation between\n            all pairs of graphs between target an features\n\n        \"\"\"", "\n", "self", ".", "_method_calling", "=", "2", "\n", "self", ".", "fit", "(", "X", ",", "**", "kwargs", ")", "\n", "\n", "# Transform - calculate kernel matrix", "\n", "km", "=", "self", ".", "_calculate_kernel_matrix", "(", ")", "\n", "\n", "self", ".", "_X_diag", "=", "np", ".", "diagonal", "(", "km", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "km", "=", "km", "/", "np", ".", "sqrt", "(", "np", ".", "outer", "(", "self", ".", "_X_diag", ",", "self", ".", "_X_diag", ")", ")", "\n", "# if self.as_tensor:", "\n", "#     km = torch.tensor(km)", "\n", "", "return", "km", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit": [[368, 404], ["vertex_histogram.CustomVertexHistogram.initialize", "ValueError", "vertex_histogram.CustomVertexHistogram.parse_input"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.initialize", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.parse_input"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Fit a dataset, for a transformer.\n\n        Parameters\n        ----------\n        X : iterable\n            Each element must be an iterable with at most three features and at\n            least one. The first that is obligatory is a valid graph structure\n            (adjacency matrix or edge_dictionary) while the second is\n            node_labels and the third edge_labels (that fitting the given graph\n            format). The train samples.\n\n        y : None\n            There is no need of a target in a transformer, yet the pipeline API\n            requires this parameter.\n\n        Returns\n        -------\n        self : object\n        Returns self.\n\n        \"\"\"", "\n", "self", ".", "_is_transformed", "=", "False", "\n", "self", ".", "_method_calling", "=", "1", "\n", "\n", "# Parameter initialization", "\n", "self", ".", "initialize", "(", ")", "\n", "\n", "# Input validation and parsing", "\n", "if", "X", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"`fit` input cannot be None\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "parse_input", "(", "X", ",", "**", "kwargs", ")", "\n", "\n", "# Return the transformer", "\n", "", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.convert.convert_n101_arch_to_graph": [[10, 22], ["arch.get_spec.get_spec", "networkx.from_numpy_array", "enumerate", "convert.prune", "OPS_INCLUSIVE.index"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.convert.prune"], ["def", "convert_n101_arch_to_graph", "(", "arch", ",", "prune_arch", "=", "True", ")", ":", "\n", "    ", "from", "naslib", ".", "predictors", ".", "utils", ".", "encodings_nb101", "import", "OPS_INCLUSIVE", "\n", "\n", "arch", "=", "arch", ".", "get_spec", "(", ")", "\n", "matrix", ",", "ops", "=", "arch", "[", "\"matrix\"", "]", ",", "arch", "[", "\"ops\"", "]", "\n", "if", "prune_arch", ":", "\n", "        ", "matrix", ",", "ops", "=", "prune", "(", "matrix", ",", "ops", ")", "\n", "", "ops", "=", "[", "OPS_INCLUSIVE", ".", "index", "(", "op", ")", "for", "op", "in", "ops", "]", "\n", "g_nx", "=", "nx", ".", "from_numpy_array", "(", "matrix", ",", "create_using", "=", "nx", ".", "DiGraph", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "g_nx", ".", "nodes", "[", "i", "]", "[", "\"op_name\"", "]", "=", "n", "\n", "", "return", "g_nx", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.convert.prune": [[24, 78], ["copy.deepcopy", "copy.deepcopy", "set().difference", "numpy.delete", "numpy.delete", "sorted", "numpy.shape", "frontier.pop", "range", "frontier.pop", "range", "visited_from_input.intersection", "len", "list", "list", "set", "visited_from_input.add", "frontier.append", "visited_from_output.add", "frontier.append", "range"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "prune", "(", "original_matrix", ",", "ops", ")", ":", "\n", "    ", "\"\"\"Prune the extraneous parts of the graph.\n\n    General procedure:\n      1) Remove parts of graph not connected to input.\n      2) Remove parts of graph not connected to output.\n      3) Reorder the vertices so that they are consecutive after steps 1 and 2.\n\n    These 3 steps can be combined by deleting the rows and columns of the\n    vertices that are not reachable from both the input and output (in reverse).\n    \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "original_matrix", ")", "[", "0", "]", "\n", "new_matrix", "=", "copy", ".", "deepcopy", "(", "original_matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "# DFS forward from input", "\n", "visited_from_input", "=", "{", "0", "}", "\n", "frontier", "=", "[", "0", "]", "\n", "while", "frontier", ":", "\n", "        ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "top", "+", "1", ",", "num_vertices", ")", ":", "\n", "            ", "if", "original_matrix", "[", "top", ",", "v", "]", "and", "v", "not", "in", "visited_from_input", ":", "\n", "                ", "visited_from_input", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# DFS backward from output", "\n", "", "", "", "visited_from_output", "=", "{", "num_vertices", "-", "1", "}", "\n", "frontier", "=", "[", "num_vertices", "-", "1", "]", "\n", "while", "frontier", ":", "\n", "        ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "0", ",", "top", ")", ":", "\n", "            ", "if", "original_matrix", "[", "v", ",", "top", "]", "and", "v", "not", "in", "visited_from_output", ":", "\n", "                ", "visited_from_output", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# Any vertex that isn't connected to both input and output is extraneous to", "\n", "# the computation graph.", "\n", "", "", "", "extraneous", "=", "set", "(", "range", "(", "num_vertices", ")", ")", ".", "difference", "(", "\n", "visited_from_input", ".", "intersection", "(", "visited_from_output", ")", "\n", ")", "\n", "\n", "# If the non-extraneous graph is less than 2 vertices, the input is not", "\n", "# connected to the output and the spec is invalid.", "\n", "if", "len", "(", "extraneous", ")", ">", "num_vertices", "-", "2", ":", "\n", "        ", "new_matrix", "=", "None", "\n", "new_ops", "=", "None", "\n", "valid_spec", "=", "False", "\n", "return", "\n", "\n", "", "new_matrix", "=", "np", ".", "delete", "(", "new_matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "0", ")", "\n", "new_matrix", "=", "np", ".", "delete", "(", "new_matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "1", ")", "\n", "for", "index", "in", "sorted", "(", "extraneous", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "del", "new_ops", "[", "index", "]", "\n", "\n", "", "return", "new_matrix", ",", "new_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.convert.convert_n201_arch_to_graph": [[80, 160], ["convert_naslib_to_str", "convert_naslib_to_str.split", "networkx.DiGraph", "nx.DiGraph.add_edges_from", "enumerate", "nx.DiGraph.add_edges_from", "nx.DiGraph.remove_nodes_from", "nx.DiGraph.nodes", "nx.DiGraph.remove_nodes_from", "nx.DiGraph.in_edges", "nx.DiGraph.out_edges", "ops.append", "nodes_to_remove_list.append", "remove_nodes_list.append", "nodes_to_be_further_removed.append", "len", "nodes_to_be_further_removed.append", "nx.DiGraph.in_edges", "nx.DiGraph.out_edges", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_str", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.nodes"], ["", "def", "convert_n201_arch_to_graph", "(", "arch_str", ")", ":", "\n", "    ", "\"\"\"Convert a nas-bench-201 string to a compatible networkx graph\"\"\"", "\n", "from", "naslib", ".", "search_spaces", ".", "nasbench201", ".", "conversions", "import", "convert_naslib_to_str", "\n", "\n", "OPS", "=", "[", "\n", "\"input\"", ",", "\n", "\"avg_pool_3x3\"", ",", "\n", "\"nor_conv_1x1\"", ",", "\n", "\"nor_conv_3x3\"", ",", "\n", "\"none\"", ",", "\n", "\"skip_connect\"", ",", "\n", "\"output\"", ",", "\n", "]", "\n", "\n", "# split the string into lists", "\n", "arch_str", "=", "convert_naslib_to_str", "(", "arch_str", ")", "\n", "arch_str_list", "=", "arch_str", ".", "split", "(", "\"|\"", ")", "\n", "ops", "=", "[", "]", "\n", "for", "str_i", "in", "arch_str_list", ":", "\n", "        ", "if", "\"~\"", "in", "str_i", ":", "\n", "            ", "ops", ".", "append", "(", "str_i", "[", ":", "-", "2", "]", ")", "\n", "\n", "", "", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "edge_list", "=", "[", "\n", "(", "0", ",", "1", ")", ",", "\n", "(", "0", ",", "2", ")", ",", "\n", "(", "0", ",", "4", ")", ",", "\n", "(", "1", ",", "3", ")", ",", "\n", "(", "1", ",", "5", ")", ",", "\n", "(", "2", ",", "6", ")", ",", "\n", "(", "3", ",", "6", ")", ",", "\n", "(", "4", ",", "7", ")", ",", "\n", "(", "5", ",", "7", ")", ",", "\n", "(", "6", ",", "7", ")", ",", "\n", "]", "\n", "G", ".", "add_edges_from", "(", "edge_list", ")", "\n", "\n", "# assign node attributes and collate the information for nodes to be removed", "\n", "# (i.e. nodes with 'skip_connect' or 'none' label)", "\n", "node_labelling", "=", "[", "\"input\"", "]", "+", "ops", "+", "[", "\"output\"", "]", "\n", "nodes_to_remove_list", "=", "[", "]", "\n", "remove_nodes_list", "=", "[", "]", "\n", "edges_to_add_list", "=", "[", "]", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "node_labelling", ")", ":", "\n", "        ", "G", ".", "nodes", "[", "i", "]", "[", "\"op_name\"", "]", "=", "n", "\n", "if", "n", "==", "\"none\"", "or", "n", "==", "\"skip_connect\"", ":", "\n", "            ", "input_nodes", "=", "[", "edge", "[", "0", "]", "for", "edge", "in", "G", ".", "in_edges", "(", "i", ")", "]", "\n", "output_nodes", "=", "[", "edge", "[", "1", "]", "for", "edge", "in", "G", ".", "out_edges", "(", "i", ")", "]", "\n", "nodes_to_remove_info", "=", "{", "\n", "\"id\"", ":", "i", ",", "\n", "\"input_nodes\"", ":", "input_nodes", ",", "\n", "\"output_nodes\"", ":", "output_nodes", ",", "\n", "}", "\n", "nodes_to_remove_list", ".", "append", "(", "nodes_to_remove_info", ")", "\n", "remove_nodes_list", ".", "append", "(", "i", ")", "\n", "\n", "if", "n", "==", "\"skip_connect\"", ":", "\n", "                ", "for", "n_i", "in", "input_nodes", ":", "\n", "                    ", "edges_to_add", "=", "[", "(", "n_i", ",", "n_o", ")", "for", "n_o", "in", "output_nodes", "]", "\n", "edges_to_add_list", "+=", "edges_to_add", "\n", "\n", "# reconnect edges for removed nodes with 'skip_connect'", "\n", "", "", "", "", "G", ".", "add_edges_from", "(", "edges_to_add_list", ")", "\n", "\n", "# remove nodes with 'skip_connect' or 'none' label", "\n", "G", ".", "remove_nodes_from", "(", "remove_nodes_list", ")", "\n", "\n", "# after removal, some op nodes have no input nodes and some have no output nodes", "\n", "# --> remove these redundant nodes", "\n", "nodes_to_be_further_removed", "=", "[", "]", "\n", "for", "n_id", "in", "G", ".", "nodes", "(", ")", ":", "\n", "        ", "in_edges", "=", "G", ".", "in_edges", "(", "n_id", ")", "\n", "out_edges", "=", "G", ".", "out_edges", "(", "n_id", ")", "\n", "if", "n_id", "!=", "0", "and", "len", "(", "in_edges", ")", "==", "0", ":", "\n", "            ", "nodes_to_be_further_removed", ".", "append", "(", "n_id", ")", "\n", "", "elif", "n_id", "!=", "7", "and", "len", "(", "out_edges", ")", "==", "0", ":", "\n", "            ", "nodes_to_be_further_removed", ".", "append", "(", "n_id", ")", "\n", "\n", "", "", "G", ".", "remove_nodes_from", "(", "nodes_to_be_further_removed", ")", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.convert.convert_darts_arch_to_graph": [[162, 266], ["convert_naslib_to_genotype", "Genotype", "convert.convert_darts_arch_to_graph._cell2graph"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_naslib_to_genotype"], ["", "def", "convert_darts_arch_to_graph", "(", "\n", "genotype", ",", "\n", "return_reduction", "=", "True", ",", "\n", ")", ":", "\n", "    ", "from", "naslib", ".", "search_spaces", ".", "darts", ".", "conversions", "import", "(", "\n", "convert_naslib_to_genotype", ",", "\n", "Genotype", ",", "\n", ")", "\n", "\n", "genotype", "=", "convert_naslib_to_genotype", "(", "genotype", ")", "\n", "\n", "def", "_cell2graph", "(", "cell", ",", "concat", ")", ":", "\n", "        ", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "n_nodes", "=", "(", "len", "(", "cell", ")", "//", "2", ")", "*", "3", "+", "3", "\n", "G", ".", "add_nodes_from", "(", "range", "(", "n_nodes", ")", ",", "op_name", "=", "None", ")", "\n", "n_ops", "=", "len", "(", "cell", ")", "//", "2", "\n", "G", ".", "nodes", "[", "0", "]", "[", "\"op_name\"", "]", "=", "\"input1\"", "\n", "G", ".", "nodes", "[", "1", "]", "[", "\"op_name\"", "]", "=", "\"input2\"", "\n", "G", ".", "nodes", "[", "n_nodes", "-", "1", "]", "[", "\"op_name\"", "]", "=", "\"output\"", "\n", "for", "i", "in", "range", "(", "n_ops", ")", ":", "\n", "            ", "G", ".", "nodes", "[", "i", "*", "3", "+", "2", "]", "[", "\"op_name\"", "]", "=", "cell", "[", "i", "*", "2", "]", "[", "0", "]", "\n", "G", ".", "nodes", "[", "i", "*", "3", "+", "3", "]", "[", "\"op_name\"", "]", "=", "cell", "[", "i", "*", "2", "+", "1", "]", "[", "0", "]", "\n", "G", ".", "nodes", "[", "i", "*", "3", "+", "4", "]", "[", "\"op_name\"", "]", "=", "\"add\"", "\n", "G", ".", "add_edge", "(", "i", "*", "3", "+", "2", ",", "i", "*", "3", "+", "4", ")", "\n", "G", ".", "add_edge", "(", "i", "*", "3", "+", "3", ",", "i", "*", "3", "+", "4", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "n_ops", ")", ":", "\n", "# Add the connections to the input", "\n", "            ", "for", "offset", "in", "range", "(", "2", ")", ":", "\n", "                ", "if", "cell", "[", "i", "*", "2", "+", "offset", "]", "[", "1", "]", "==", "0", ":", "\n", "                    ", "G", ".", "add_edge", "(", "0", ",", "i", "*", "3", "+", "2", "+", "offset", ")", "\n", "", "elif", "cell", "[", "i", "*", "2", "+", "offset", "]", "[", "1", "]", "==", "1", ":", "\n", "                    ", "G", ".", "add_edge", "(", "1", ",", "i", "*", "3", "+", "2", "+", "offset", ")", "\n", "", "else", ":", "\n", "                    ", "k", "=", "cell", "[", "i", "*", "2", "+", "offset", "]", "[", "1", "]", "-", "2", "\n", "# Add a connection from the output of another block", "\n", "G", ".", "add_edge", "(", "int", "(", "k", ")", "*", "3", "+", "4", ",", "i", "*", "3", "+", "2", "+", "offset", ")", "\n", "# Add connections to the output", "\n", "", "", "", "for", "i", "in", "concat", ":", "\n", "            ", "if", "i", "<=", "1", ":", "\n", "                ", "G", ".", "add_edge", "(", "i", ",", "n_nodes", "-", "1", ")", "# Directly from either input to the output", "\n", "", "else", ":", "\n", "                ", "op_number", "=", "i", "-", "2", "\n", "G", ".", "add_edge", "(", "op_number", "*", "3", "+", "4", ",", "n_nodes", "-", "1", ")", "\n", "# If remove the skip link nodes, do another sweep of the graph", "\n", "", "", "for", "j", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "G", ".", "nodes", "[", "j", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "continue", "\n", "", "if", "G", ".", "nodes", "[", "j", "]", "[", "\"op_name\"", "]", "==", "\"skip_connect\"", ":", "\n", "                ", "in_edges", "=", "list", "(", "G", ".", "in_edges", "(", "j", ")", ")", "\n", "out_edge", "=", "list", "(", "G", ".", "out_edges", "(", "j", ")", ")", "[", "0", "]", "[", "\n", "1", "\n", "]", "# There should be only one out edge really...", "\n", "for", "in_edge", "in", "in_edges", ":", "\n", "                    ", "G", ".", "add_edge", "(", "in_edge", "[", "0", "]", ",", "out_edge", ")", "\n", "", "G", ".", "remove_node", "(", "j", ")", "\n", "", "elif", "G", ".", "nodes", "[", "j", "]", "[", "\"op_name\"", "]", "==", "\"none\"", ":", "\n", "                ", "G", ".", "remove_node", "(", "j", ")", "\n", "", "", "for", "j", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "G", ".", "nodes", "[", "j", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "G", ".", "nodes", "[", "j", "]", "[", "\"op_name\"", "]", "not", "in", "[", "\"input1\"", ",", "\"input2\"", "]", ":", "\n", "# excepting the input nodes, if the node has no incoming edge, remove it", "\n", "                ", "if", "len", "(", "list", "(", "G", ".", "in_edges", "(", "j", ")", ")", ")", "==", "0", ":", "\n", "                    ", "G", ".", "remove_node", "(", "j", ")", "\n", "", "", "elif", "G", ".", "nodes", "[", "j", "]", "[", "\"op_name\"", "]", "!=", "\"output\"", ":", "\n", "# excepting the output nodes, if the node has no outgoing edge, remove it", "\n", "                ", "if", "len", "(", "list", "(", "G", ".", "out_edges", "(", "j", ")", ")", ")", "==", "0", ":", "\n", "                    ", "G", ".", "remove_node", "(", "j", ")", "\n", "", "", "elif", "(", "\n", "G", ".", "nodes", "[", "j", "]", "[", "\"op_name\"", "]", "==", "\"add\"", "\n", ")", ":", "# If add has one incoming edge only, remove the node", "\n", "                ", "in_edges", "=", "list", "(", "G", ".", "in_edges", "(", "j", ")", ")", "\n", "out_edges", "=", "list", "(", "G", ".", "out_edges", "(", "j", ")", ")", "\n", "if", "len", "(", "in_edges", ")", "==", "1", "and", "len", "(", "out_edges", ")", "==", "1", ":", "\n", "                    ", "G", ".", "add_edge", "(", "in_edges", "[", "0", "]", "[", "0", "]", ",", "out_edges", "[", "0", "]", "[", "1", "]", ")", "\n", "G", ".", "remove_node", "(", "j", ")", "\n", "\n", "", "", "", "return", "G", "\n", "\n", "# todo: the naslib conversion gives normal_concat in [2,3,4,5,6]. Check whether that is alright?", "\n", "#   Here if I used [2,3,4,5,6] there will be errors in the graph conversion. So the code below is a temporary patch", "\n", "#   Xingchen Wan (Feb 2021)", "\n", "", "genotype", "=", "Genotype", "(", "\n", "normal", "=", "genotype", ".", "normal", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "reduce", "=", "genotype", ".", "reduce", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", ")", "\n", "\n", "G_normal", "=", "_cell2graph", "(", "genotype", ".", "normal", ",", "genotype", ".", "normal_concat", ")", "\n", "try", ":", "\n", "        ", "G_reduce", "=", "_cell2graph", "(", "genotype", ".", "reduce", ",", "genotype", ".", "reduce_concat", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "G_reduce", "=", "None", "\n", "", "if", "return_reduction", "and", "G_reduce", "is", "not", "None", ":", "\n", "        ", "return", "G_normal", ",", "G_reduce", "\n", "", "else", ":", "\n", "        ", "return", "G_normal", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASOptimizer.__init__": [[19, 47], ["torch.nn.CrossEntropyLoss", "naslib.optimizers.oneshot.darts.optimizer.DARTSOptimizer.__init__", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_alphas", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to add the architectural weights to the edges.\n        \"\"\"", "\n", "len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASOptimizer.update_ops": [[48, 56], ["edge.data.set", "optimizer.GDASMixedOp"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], [")", ":", "\n", "        ", "\"\"\"\n        Initialize a new instance.\n\n        Args:\n\n        \"\"\"", "\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASOptimizer.adapt_search_space": [[57, 64], ["super().adapt_search_space", "optimizer.GDASOptimizer.graph.register_buffer"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.adapt_search_space"], ["self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASOptimizer.new_epoch": [[65, 75], ["super().new_epoch", "logger.info"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.new_epoch"], ["\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASOptimizer.sample_alphas": [[76, 113], ["torch.device", "torch.unsqueeze", "index[].item", "edge.data.set", "edge.data.set", "gumbels.to.to.to", "tau.to.to.to", "arch_parameters.to.to.to", "torch.nn.functional.softmax", "torch.zeros_like().scatter_", "torch.cuda.is_available", "torch.empty_like().exponential_().log", "torch.nn.functional.softmax.max", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "arch_parameters.to.to.log_softmax", "torch.zeros_like", "torch.nn.functional.softmax.detach", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isnan", "torch.empty_like"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASOptimizer.remove_sampled_alphas": [[114, 118], ["edge.data.has", "edge.data.remove"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.remove"], ["self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n", "", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASOptimizer.step": [[119, 167], ["optimizer.GDASOptimizer.graph.update_edges", "optimizer.GDASOptimizer.arch_optimizer.zero_grad", "optimizer.GDASOptimizer.graph", "optimizer.GDASOptimizer.loss", "optimizer.GDASOptimizer.backward", "optimizer.GDASOptimizer.arch_optimizer.step", "optimizer.GDASOptimizer.graph.update_edges", "optimizer.GDASOptimizer.op_optimizer.zero_grad", "optimizer.GDASOptimizer.graph", "optimizer.GDASOptimizer.loss", "optimizer.GDASOptimizer.backward", "optimizer.GDASOptimizer.op_optimizer.step", "optimizer.GDASOptimizer.graph.update_edges", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.GDASOptimizer.architectural_weights.parameters", "optimizer.GDASOptimizer.graph.parameters", "optimizer.GDASOptimizer.sample_alphas", "optimizer.GDASOptimizer.sample_alphas"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.sample_alphas", "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.sample_alphas"], ["\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "architectural_weights", "=", "self", ".", "architectural_weights", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Just log the architecture weights.\n        \"\"\"", "\n", "alpha_str", "=", "[", "\n", "\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n", "logger", ".", "info", "(", "\n", "\"Arch weights (alphas, last column argmax): \\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "alpha_str", ")", "\n", ")", "\n", ")", "\n", "super", "(", ")", ".", "new_epoch", "(", "epoch", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "input_train", ",", "target_train", "=", "data_train", "\n", "input_val", ",", "target_val", "=", "data_val", "\n", "\n", "unrolled", "=", "False", "# what it this?", "\n", "\n", "if", "unrolled", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Update architecture weights", "\n", "            ", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_val", "=", "self", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "logits_val", ",", "target_val", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update op weights", "\n", "self", ".", "op_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_train", "=", "self", ".", "graph", "(", "input_train", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASMixedOp.__init__": [[170, 181], ["naslib.search_spaces.core.primitives.AbstractPrimitive.__init__", "enumerate", "locals", "optimizer.GDASMixedOp.add_module"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["if", "self", ".", "grad_clip", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "graph", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "self", ".", "op_optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "\n", "\n", "", "def", "get_final_architecture", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Arch weights before discretization: {}\"", ".", "format", "(", "\n", "[", "a", "for", "a", "in", "self", ".", "architectural_weights", "]", "\n", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASMixedOp.forward": [[182, 199], ["sum", "enumerate", "op"], "methods", ["None"], ["graph", "=", "self", ".", "graph", ".", "clone", "(", ")", ".", "unparse", "(", ")", "\n", "graph", ".", "prepare_discretization", "(", ")", "\n", "\n", "def", "discretize_ops", "(", "edge", ")", ":", "\n", "            ", "if", "edge", ".", "data", ".", "has", "(", "\"alpha\"", ")", ":", "\n", "                ", "primitives", "=", "edge", ".", "data", ".", "op", ".", "get_embedded_ops", "(", ")", "\n", "alphas", "=", "edge", ".", "data", ".", "alpha", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "primitives", "[", "np", ".", "argmax", "(", "alphas", ")", "]", ")", "\n", "\n", "", "", "graph", ".", "update_edges", "(", "discretize_ops", ",", "scope", "=", "self", ".", "scope", ",", "private_edge_data", "=", "True", ")", "\n", "graph", ".", "prepare_evaluation", "(", ")", "\n", "graph", ".", "parse", "(", ")", "\n", "graph", "=", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "graph", "\n", "\n", "", "def", "get_op_optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "op_optimizer", ".", "__class__", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.gdas.optimizer.GDASMixedOp.get_embedded_ops": [[200, 202], ["None"], "methods", ["None"], ["", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "return", "count_parameters_in_MB", "(", "self", ".", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotNASOptimizer.add_alphas": [[18, 29], ["len", "edge.data.set", "torch.no_grad", "torch.nn.Parameter", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_alphas", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to add the architectural weights to the edges.\n        \"\"\"", "\n", "len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotNASOptimizer.update_ops": [[30, 38], ["edge.data.set", "optimizer.OneShotOp"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], [")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotNASOptimizer.__init__": [[39, 49], ["torch.nn.CrossEntropyLoss", "naslib.optimizers.DARTSOptimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotNASOptimizer.step": [[51, 69], ["optimizer.OneShotNASOptimizer.graph", "optimizer.OneShotNASOptimizer.loss", "optimizer.OneShotNASOptimizer.backward", "optimizer.OneShotNASOptimizer.op_optimizer.zero_grad", "optimizer.OneShotNASOptimizer.graph", "optimizer.OneShotNASOptimizer.loss", "optimizer.OneShotNASOptimizer.backward", "optimizer.OneShotNASOptimizer.op_optimizer.step", "torch.nn.utils.clip_grad_norm_", "optimizer.OneShotNASOptimizer.graph.parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step"], ["\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotNASOptimizer.set_alphas_from_path": [[70, 135], ["optimizer.OneShotNASOptimizer.graph.get_type", "type", "torch.no_grad", "enumerate", "optimizer.OneShotNASOptimizer.graph.get_type", "torch.nn.Parameter", "optimizer.OneShotNASOptimizer.architectural_weights[].copy_", "type", "enumerate", "torch.no_grad", "optimizer.OneShotNASOptimizer.set_alphas_from_path.update_alphas"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type"], ["\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n", "# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n", "", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "architectural_weights", "=", "self", ".", "architectural_weights", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Just log the architecture weights.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotNASOptimizer.get_final_architecture": [[137, 142], ["None"], "methods", ["None"], ["\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n", "logger", ".", "info", "(", "\n", "\"Arch weights (alphas, last column argmax): \\n{}\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotOp.__init__": [[149, 154], ["naslib.search_spaces.core.primitives.AbstractPrimitive.__init__", "enumerate", "locals", "optimizer.OneShotOp.add_module"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["        ", "input_train", ",", "target_train", "=", "data_train", "\n", "input_val", ",", "target_val", "=", "data_val", "\n", "\n", "unrolled", "=", "False", "# what it this?", "\n", "\n", "if", "unrolled", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotOp.forward": [[155, 160], ["sum", "op", "zip"], "methods", ["None"], ["            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Update architecture weights", "\n", "            ", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_val", "=", "self", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "logits_val", ",", "target_val", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotOp.get_embedded_ops": [[161, 163], ["None"], "methods", ["None"], ["val_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs_ws.optimizer.RandomNASOptimizer.add_alphas": [[16, 26], ["len", "torch.nn.Parameter", "edge.data.set", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["class", "DARTSOptimizer", "(", "MetaOptimizer", ")", ":", "\n", "    ", "\"\"\"\n    Implementation of the DARTS paper as in\n        Liu et al. 2019: DARTS: Differentiable Architecture Search.\n    \"\"\"", "\n", "\n", "@", "staticmethod", "\n", "def", "add_alphas", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to add the architectural weights to the edges.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs_ws.optimizer.RandomNASOptimizer.step": [[27, 49], ["optimizer.RandomNASOptimizer.sample_random_and_update_alphas", "optimizer.RandomNASOptimizer.graph", "optimizer.RandomNASOptimizer.loss", "optimizer.RandomNASOptimizer.backward", "optimizer.RandomNASOptimizer.op_optimizer.zero_grad", "optimizer.RandomNASOptimizer.graph", "optimizer.RandomNASOptimizer.loss", "optimizer.RandomNASOptimizer.backward", "optimizer.RandomNASOptimizer.op_optimizer.step", "torch.nn.utils.clip_grad_norm_", "optimizer.RandomNASOptimizer.graph.parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs_ws.optimizer.RandomNASOptimizer.sample_random_and_update_alphas", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step"], ["len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs_ws.optimizer.RandomNASOptimizer.sample_random_and_update_alphas": [[50, 60], ["optimizer.RandomNASOptimizer.search_space.clone", "optimizer.RandomNASOptimizer.sample_random_architecture", "optimizer.RandomNASOptimizer.set_alphas_from_path", "optimizer.RandomNASOptimizer.graph.get_type", "optimizer.RandomNASOptimizer.get_op_indices", "optimizer.RandomNASOptimizer.graph.get_type", "naslib.search_spaces.darts.conversions.convert_compact_to_genotype", "optimizer.RandomNASOptimizer.get_compact"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.oneshot_train.optimizer.OneShotNASOptimizer.set_alphas_from_path", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.conversions.convert_compact_to_genotype", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact"], ["\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.add_alphas": [[25, 35], ["len", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "edge.data.set", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["@", "staticmethod", "\n", "def", "add_alphas", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to add the architectural weights to the edges.\n        \"\"\"", "\n", "len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.sample_alphas": [[36, 42], ["torch.distributions.dirichlet.Dirichlet().rsample", "torch.distributions.dirichlet.Dirichlet().rsample", "torch.distributions.dirichlet.Dirichlet().rsample", "torch.distributions.dirichlet.Dirichlet().rsample", "edge.data.set", "torch.elu", "torch.elu", "torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "@", "staticmethod", "\n", "def", "sample_alphas", "(", "edge", ")", ":", "\n", "# ? check if we need to unsqueeze here? -- torch.unsqueeze(edge.data.alpha, dim=0)", "\n", "        ", "beta", "=", "F", ".", "elu", "(", "edge", ".", "data", ".", "alpha", ")", "+", "1", "\n", "weights", "=", "torch", ".", "distributions", ".", "dirichlet", ".", "Dirichlet", "(", "beta", ")", ".", "rsample", "(", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"sampled_arch_weight\"", ",", "weights", ",", "shared", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.remove_sampled_alphas": [[43, 47], ["edge.data.has", "edge.data.remove"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.remove"], ["", "@", "staticmethod", "\n", "def", "remove_sampled_alphas", "(", "edge", ")", ":", "\n", "        ", "if", "edge", ".", "data", ".", "has", "(", "\"sampled_arch_weight\"", ")", ":", "\n", "            ", "edge", ".", "data", ".", "remove", "(", "\"sampled_arch_weight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.update_ops": [[48, 56], ["edge.data.set", "optimizer_progressive_growing.DrNASMixedOp"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DrNAS specific DrNASMixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "DrNASMixedOp", "(", "primitives", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.__init__": [[57, 76], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "naslib.optimizers.oneshot.darts.optimizer.DARTSOptimizer.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a new instance.\n\n        Args:\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "config", ",", "op_optimizer", ",", "arch_optimizer", ",", "loss_criteria", ")", "\n", "self", ".", "reg_type", "=", "\"kl\"", "\n", "self", ".", "reg_scale", "=", "1e-3", "\n", "# self.reg_scale = config.reg_scale", "\n", "self", ".", "epochs", "=", "config", ".", "search", ".", "epochs", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.new_epoch": [[77, 79], ["super().new_epoch"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.new_epoch"], ["", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "new_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.adapt_search_space": [[80, 130], ["search_space.clone", "search_space.clone.update_edges", "search_space.clone.update_edges", "search_space.clone.get_all_edge_data", "search_space.clone.parse", "logger.info", "optimizer_progressive_growing.DrNASGrowOptimizer.op_optimizer", "search_space.clone.train", "torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet", "optimizer_progressive_growing.DrNASGrowOptimizer.architectural_weights.append", "optimizer_progressive_growing.DrNASGrowOptimizer.arch_optimizer", "search_space.clone.parameters", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "search_space.clone.modules_str", "optimizer_progressive_growing.DrNASGrowOptimizer.architectural_weights.parameters", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.get_all_edge_data", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str"], ["", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n", "# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "logger", ".", "info", "(", "\"Parsed graph:\\n\"", "+", "graph", ".", "modules_str", "(", ")", ")", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n", "self", ".", "anchor", "=", "Dirichlet", "(", "\n", "torch", ".", "ones_like", "(", "\n", "torch", ".", "nn", ".", "utils", ".", "parameters_to_vector", "(", "self", ".", "architectural_weights", ")", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.step": [[132, 185], ["optimizer_progressive_growing.DrNASGrowOptimizer.graph.update_edges", "optimizer_progressive_growing.DrNASGrowOptimizer.arch_optimizer.zero_grad", "optimizer_progressive_growing.DrNASGrowOptimizer.graph", "optimizer_progressive_growing.DrNASGrowOptimizer.loss", "optimizer_progressive_growing.DrNASGrowOptimizer.backward", "optimizer_progressive_growing.DrNASGrowOptimizer.arch_optimizer.step", "optimizer_progressive_growing.DrNASGrowOptimizer.graph.update_edges", "optimizer_progressive_growing.DrNASGrowOptimizer.op_optimizer.zero_grad", "optimizer_progressive_growing.DrNASGrowOptimizer.graph", "optimizer_progressive_growing.DrNASGrowOptimizer.loss", "optimizer_progressive_growing.DrNASGrowOptimizer.backward", "optimizer_progressive_growing.DrNASGrowOptimizer.op_optimizer.step", "optimizer_progressive_growing.DrNASGrowOptimizer.graph.update_edges", "optimizer_progressive_growing.DrNASGrowOptimizer._get_kl_reg", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer_progressive_growing.DrNASGrowOptimizer.architectural_weights.parameters", "optimizer_progressive_growing.DrNASGrowOptimizer.graph.parameters", "optimizer_progressive_growing.DrNASGrowOptimizer.sample_alphas", "optimizer_progressive_growing.DrNASGrowOptimizer.sample_alphas"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer._get_kl_reg", "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.sample_alphas", "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.sample_alphas"], ["", "def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "input_train", ",", "target_train", "=", "data_train", "\n", "input_val", ",", "target_val", "=", "data_val", "\n", "\n", "# sample weights (alphas) from the dirichlet distribution (parameterized by beta) and set to edges", "\n", "self", ".", "graph", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "self", ".", "sample_alphas", "(", "edge", ")", ",", "\n", "scope", "=", "self", ".", "scope", ",", "\n", "private_edge_data", "=", "False", ",", "\n", ")", "\n", "\n", "# Update architecture weights", "\n", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_val", "=", "self", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "logits_val", ",", "target_val", ")", "\n", "\n", "if", "self", ".", "reg_type", "==", "\"kl\"", ":", "\n", "            ", "val_loss", "+=", "self", ".", "_get_kl_reg", "(", ")", "\n", "\n", "", "val_loss", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "grad_clip", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", "\n", ")", "\n", "", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# has to be done again, cause val_loss.backward() frees the gradient from sampled alphas", "\n", "# TODO: this is not how it is intended because the samples are now different. Another", "\n", "# option would be to set val_loss.backward(retain_graph=True) but that requires more memory.", "\n", "self", ".", "graph", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "self", ".", "sample_alphas", "(", "edge", ")", ",", "\n", "scope", "=", "self", ".", "scope", ",", "\n", "private_edge_data", "=", "False", ",", "\n", ")", "\n", "\n", "# Update op weights", "\n", "self", ".", "op_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_train", "=", "self", ".", "graph", "(", "input_train", ")", "\n", "train_loss", "=", "self", ".", "loss", "(", "logits_train", ",", "target_train", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "graph", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "self", ".", "op_optimizer", ".", "step", "(", ")", "\n", "\n", "# in order to properly unparse remove the alphas again", "\n", "self", ".", "graph", ".", "update_edges", "(", "\n", "update_func", "=", "self", ".", "remove_sampled_alphas", ",", "\n", "scope", "=", "self", ".", "scope", ",", "\n", "private_edge_data", "=", "False", ",", "\n", ")", "\n", "\n", "return", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer._get_kl_reg": [[186, 194], ["torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet", "torch.elu", "torch.elu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence"], "methods", ["None"], ["", "def", "_get_kl_reg", "(", "self", ")", ":", "\n", "        ", "cons", "=", "(", "\n", "F", ".", "elu", "(", "torch", ".", "nn", ".", "utils", ".", "parameters_to_vector", "(", "self", ".", "architectural_weights", ")", ")", "+", "1", "\n", ")", "\n", "q", "=", "Dirichlet", "(", "cons", ")", "\n", "p", "=", "self", ".", "anchor", "\n", "kl_reg", "=", "self", ".", "reg_scale", "*", "torch", ".", "sum", "(", "kl_divergence", "(", "q", ",", "p", ")", ")", "\n", "return", "kl_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASGrowOptimizer.get_final_architecture": [[195, 215], ["logger.info", "optimizer_progressive_growing.DrNASGrowOptimizer.graph.clone().unparse", "graph.to.to.prepare_discretization", "graph.to.to.update_edges", "graph.to.to.prepare_evaluation", "graph.to.to.parse", "graph.to.to.to", "edge.data.has", "optimizer_progressive_growing.DrNASGrowOptimizer.graph.clone", "edge.data.op.get_embedded_ops", "edge.data.alpha.detach().cpu", "edge.data.set", "edge.data.alpha.detach", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.unparse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.prepare_discretization", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.prepare_evaluation", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "get_final_architecture", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Arch weights before discretization: {}\"", ".", "format", "(", "\n", "[", "a", "for", "a", "in", "self", ".", "architectural_weights", "]", "\n", ")", "\n", ")", "\n", "graph", "=", "self", ".", "graph", ".", "clone", "(", ")", ".", "unparse", "(", ")", "\n", "graph", ".", "prepare_discretization", "(", ")", "\n", "\n", "def", "discretize_ops", "(", "edge", ")", ":", "\n", "            ", "if", "edge", ".", "data", ".", "has", "(", "\"alpha\"", ")", ":", "\n", "                ", "primitives", "=", "edge", ".", "data", ".", "op", ".", "get_embedded_ops", "(", ")", "\n", "alphas", "=", "edge", ".", "data", ".", "alpha", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "primitives", "[", "np", ".", "argmax", "(", "alphas", ")", "]", ")", "\n", "\n", "", "", "graph", ".", "update_edges", "(", "discretize_ops", ",", "scope", "=", "self", ".", "scope", ",", "private_edge_data", "=", "True", ")", "\n", "graph", ".", "prepare_evaluation", "(", ")", "\n", "graph", ".", "parse", "(", ")", "\n", "graph", "=", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASMixedOp.__init__": [[218, 229], ["naslib.search_spaces.core.primitives.AbstractPrimitive.__init__", "enumerate", "locals", "optimizer_progressive_growing.DrNASMixedOp.add_module"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "primitives", ",", "min_cuda_memory", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the mixed ops\n\n        Args:\n            primitives (list): The primitive operations to sample from.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n", "self", ".", "primitives", "=", "primitives", "\n", "for", "i", ",", "primitive", "in", "enumerate", "(", "primitives", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"primitive-{}\"", ".", "format", "(", "i", ")", ",", "primitive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASMixedOp.forward": [[230, 240], ["sum", "op", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "\"\"\"\n        applies the previously sampled weights from the dirichlet distribution\n        before forwarding `x` through the graph as in DARTS\n        \"\"\"", "\n", "weigsum", "=", "sum", "(", "\n", "w", "*", "op", "(", "x", ",", "None", ")", "\n", "for", "w", ",", "op", "in", "zip", "(", "edge_data", ".", "sampled_arch_weight", ",", "self", ".", "primitives", ")", "\n", ")", "\n", "return", "weigsum", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer_progressive_growing.DrNASMixedOp.get_embedded_ops": [[241, 243], ["None"], "methods", ["None"], ["", "def", "get_embedded_ops", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "primitives", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.sample_alphas": [[27, 32], ["torch.distributions.dirichlet.Dirichlet().rsample", "torch.distributions.dirichlet.Dirichlet().rsample", "torch.distributions.dirichlet.Dirichlet().rsample", "torch.distributions.dirichlet.Dirichlet().rsample", "edge.data.set", "torch.elu", "torch.elu", "torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.remove_sampled_alphas": [[33, 37], ["edge.data.has", "edge.data.remove"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.remove"], ["", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.update_ops": [[38, 46], ["edge.data.set", "optimizer.DrNASMixedOp"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.__init__": [[47, 66], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "naslib.optimizers.oneshot.darts.optimizer.DARTSOptimizer.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a new instance.\n\n        Args:\n\n        \"\"\"", "\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.new_epoch": [[67, 69], ["super().new_epoch"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.new_epoch"], ["self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.adapt_search_space": [[70, 80], ["super().adapt_search_space", "torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.adapt_search_space"], ["\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n", "# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.step": [[82, 135], ["optimizer.DrNASOptimizer.graph.update_edges", "optimizer.DrNASOptimizer.arch_optimizer.zero_grad", "optimizer.DrNASOptimizer.graph", "optimizer.DrNASOptimizer.loss", "optimizer.DrNASOptimizer.backward", "optimizer.DrNASOptimizer.arch_optimizer.step", "optimizer.DrNASOptimizer.graph.update_edges", "optimizer.DrNASOptimizer.op_optimizer.zero_grad", "optimizer.DrNASOptimizer.graph", "optimizer.DrNASOptimizer.loss", "optimizer.DrNASOptimizer.backward", "optimizer.DrNASOptimizer.op_optimizer.step", "optimizer.DrNASOptimizer.graph.update_edges", "optimizer.DrNASOptimizer._get_kl_reg", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.DrNASOptimizer.architectural_weights.parameters", "optimizer.DrNASOptimizer.graph.parameters", "optimizer.DrNASOptimizer.sample_alphas", "optimizer.DrNASOptimizer.sample_alphas"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer._get_kl_reg", "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.sample_alphas", "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.sample_alphas"], ["self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n", "", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "architectural_weights", "=", "self", ".", "architectural_weights", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Just log the architecture weights.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer._get_kl_reg": [[136, 144], ["torch.distributions.dirichlet.Dirichlet", "torch.distributions.dirichlet.Dirichlet", "torch.elu", "torch.elu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence"], "methods", ["None"], ["alpha_str", "=", "[", "\n", "\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n", "logger", ".", "info", "(", "\n", "\"Arch weights (alphas, last column argmax): \\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "alpha_str", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASOptimizer.get_final_architecture": [[145, 165], ["logger.info", "optimizer.DrNASOptimizer.graph.clone().unparse", "graph.to.to.prepare_discretization", "graph.to.to.update_edges", "graph.to.to.prepare_evaluation", "graph.to.to.parse", "graph.to.to.to", "edge.data.has", "optimizer.DrNASOptimizer.graph.clone", "edge.data.op.get_embedded_ops", "edge.data.alpha.detach().cpu", "edge.data.set", "edge.data.alpha.detach", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.unparse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.prepare_discretization", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.prepare_evaluation", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], [")", "\n", "super", "(", ")", ".", "new_epoch", "(", "epoch", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "input_train", ",", "target_train", "=", "data_train", "\n", "input_val", ",", "target_val", "=", "data_val", "\n", "\n", "unrolled", "=", "False", "# what it this?", "\n", "\n", "if", "unrolled", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Update architecture weights", "\n", "            ", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_val", "=", "self", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "logits_val", ",", "target_val", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update op weights", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASMixedOp.__init__": [[168, 179], ["naslib.search_spaces.core.primitives.AbstractPrimitive.__init__", "enumerate", "locals", "optimizer.DrNASMixedOp.add_module"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["train_loss", "=", "self", ".", "loss", "(", "logits_train", ",", "target_train", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "graph", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "self", ".", "op_optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "\n", "\n", "", "def", "get_final_architecture", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Arch weights before discretization: {}\"", ".", "format", "(", "\n", "[", "a", "for", "a", "in", "self", ".", "architectural_weights", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASMixedOp.forward": [[180, 190], ["sum", "op", "zip"], "methods", ["None"], [")", "\n", ")", "\n", "graph", "=", "self", ".", "graph", ".", "clone", "(", ")", ".", "unparse", "(", ")", "\n", "graph", ".", "prepare_discretization", "(", ")", "\n", "\n", "def", "discretize_ops", "(", "edge", ")", ":", "\n", "            ", "if", "edge", ".", "data", ".", "has", "(", "\"alpha\"", ")", ":", "\n", "                ", "primitives", "=", "edge", ".", "data", ".", "op", ".", "get_embedded_ops", "(", ")", "\n", "alphas", "=", "edge", ".", "data", ".", "alpha", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "primitives", "[", "np", ".", "argmax", "(", "alphas", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.drnas.optimizer.DrNASMixedOp.get_embedded_ops": [[191, 193], ["None"], "methods", ["None"], ["", "", "graph", ".", "update_edges", "(", "discretize_ops", ",", "scope", "=", "self", ".", "scope", ",", "private_edge_data", "=", "True", ")", "\n", "graph", ".", "prepare_evaluation", "(", ")", "\n", "graph", ".", "parse", "(", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step": [[11, 27], ["NotImplementedError"], "methods", ["None"], ["def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "\"\"\"\n        Run one optimizer step with the batch of training and test data.\n\n        Args:\n            data_train (tuple(Tensor, Tensor)): A tuple of input and target\n                tensors from the training split\n            data_val (tuple(Tensor, Tensor)): A tuple of input and target\n                tensors from the validation split\n            error_dict\n\n        Returns:\n            dict: A dict containing training statistics (TODO)\n        \"\"\"", "\n", "if", "self", ".", "using_step_function", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.train_statistics": [[28, 35], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "train_statistics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        If the step function is not used we need the statistics from\n        the optimizer\n        \"\"\"", "\n", "if", "not", "self", ".", "using_step_function", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.test_statistics": [[36, 41], ["None"], "methods", ["None"], ["", "", "def", "test_statistics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return anytime test statistics if provided by the optimizer\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.adapt_search_space": [[42, 60], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Modify the search space to fit the optimizer's needs,\n        e.g. discretize, add architectural parameters, ...\n\n        To modify the search space use `search_space.update(...)`\n\n        Good practice is to deepcopy the search space, store\n        the modified version and leave the original search space\n        untouched in case it is beeing used somewhere else.\n\n        Args:\n            search_space (Graph): The search space we are doing NAS in.\n            scope (str or list(str)): The scope of the search space which\n                should be optimized by the optimizer.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.new_epoch": [[61, 70], ["None"], "methods", ["None"], ["", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Function called at the beginning of each new search epoch. To be\n        used as hook for the optimizer.\n\n        Args:\n            epoch (int): Number of the epoch to start.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.before_training": [[71, 77], ["None"], "methods", ["None"], ["", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function called right before training starts. To be used as hook\n        for the optimizer.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.after_training": [[78, 84], ["None"], "methods", ["None"], ["", "def", "after_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function called right after training finished. To be used as hook\n        for the optimizer.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.get_final_architecture": [[85, 94], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_final_architecture", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the final discretized architecture.\n\n        Returns:\n            Graph: The final architecture.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.get_op_optimizer": [[95, 104], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_op_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is required for the final validation when\n        training from scratch.\n\n        Returns:\n            (torch.optim.Optimizer): The optimizer used for the op weights update.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.get_model_size": [[105, 113], ["None"], "methods", ["None"], ["", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size of the model parameters in mb, e.g. by using\n        `utils.count_parameters_in_MB()`.\n\n        This is only used for logging purposes.\n        \"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.get_checkpointables": [[114, 124], ["None"], "methods", ["None"], ["", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return all objects that should be saved in a checkpoint during training.\n\n        Will be called after `before_training` and must include key \"model\".\n\n        Returns:\n            (dict): with name as key and object as value. e.g. graph, arch weights, optimizers, ...\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.__init__": [[85, 137], ["networkx.DiGraph.__init__", "torch.nn.Module.__init__", "random.random", "graph.EdgeData", "dict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "#", "\n", "# operations at the edges", "\n", "#", "\n", "\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_1'", ")", ")", "\n", "\n", "# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n", "", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n", "\n", "# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n", "", "if", "dataset_api", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.__eq__": [[138, 140], ["None"], "methods", ["None"], ["\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.__hash__": [[141, 154], ["hash", "hash", "hash"], "methods", ["None"], ["\n", "\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.__repr__": [[155, 158], ["graph.Graph.number_of_nodes"], "methods", ["None"], ["", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str": [[160, 173], ["graph.Graph.__repr__", "graph.Graph._get_child_graphs", "torch.nn.Module.__repr__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.ArchResult.__repr__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.ArchResult.__repr__"], ["Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope": [[174, 194], ["graph.Graph._get_child_graphs"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs"], ["Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "else", ":", "# ['normal', 'autoencoder']", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_ssim'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_ssim'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_ssim'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_l1_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_l1_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_l1_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "RAW", ":", "\n", "# return all data", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node": [[195, 208], ["networkx.DiGraph.add_node"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node"], ["            ", "return", "query_results", ".", "get_arch_result", "(", "arch_str", ")", ".", "query_all_results", "(", ")", "[", "task", "]", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "HP", ":", "\n", "# return hyperparameter info", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "'cost_info'", "]", "\n", "", "elif", "metric", "==", "Metric", ".", "TRAIN_TIME", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "if", "full_lc", "and", "epoch", "==", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "\n", "", "elif", "full_lc", "and", "epoch", "!=", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "[", ":", "epoch", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.copy": [[209, 240], ["graph.Graph.__class__", "graph.Graph.graph.update", "graph.Graph.add_nodes_from", "graph.Graph.add_edges_from", "d.copy", "d.items", "isinstance", "v.copy", "isinstance", "graph.Graph.copy.copy_dict"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["", "else", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "", "def", "get_op_indices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "op_indices", "is", "None", ":", "\n", "            ", "self", ".", "op_indices", "=", "convert_naslib_to_op_indices", "(", "self", ")", "\n", "", "return", "self", ".", "op_indices", "\n", "\n", "\n", "", "def", "get_hash", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "get_op_indices", "(", ")", ")", "\n", "\n", "\n", "", "def", "set_op_indices", "(", "self", ",", "op_indices", ")", ":", "\n", "# This will update the edges in the naslib object to op_indices", "\n", "        ", "self", ".", "op_indices", "=", "op_indices", "\n", "#         convert_op_indices_to_naslib(op_indices, self)", "\n", "\n", "", "def", "get_arch_iterator", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "return", "itertools", ".", "product", "(", "range", "(", "4", ")", ",", "repeat", "=", "6", ")", "\n", "\n", "", "def", "set_spec", "(", "self", ",", "op_indices", ",", "dataset_api", "=", "None", ")", ":", "\n", "# this is just to unify the setters across search spaces", "\n", "# TODO: change it to set_spec on all search spaces", "\n", "        ", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "sample_random_architecture_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input": [[241, 276], ["sum", "len", "len", "graph.Graph.in_degree"], "methods", ["None"], ["op_indices", "=", "np", ".", "random", ".", "randint", "(", "4", ",", "size", "=", "(", "6", ")", ")", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "r", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "p", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "q", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "op_indices", "=", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "", "", "def", "mutate_micro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "op_indices", "=", "list", "(", "parent_op_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.num_input_nodes": [[277, 286], ["sum", "graph.Graph.in_degree"], "methods", ["None"], ["edge", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "parent_op_indices", ")", ")", "\n", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "parent_op_indices", "[", "edge", "]", "]", "\n", "op_index", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "op_indices", "[", "edge", "]", "=", "op_index", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "mutate_macro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._assign_x_to_nodes": [[287, 331], ["isinstance", "isinstance", "isinstance", "all", "iter", "networkx.algorithms.dag.lexicographical_topological_sort", "graph.Graph.num_input_nodes", "len", "graph.Graph.nodes[].keys", "graph.Graph.num_input_nodes", "len", "logger.debug", "list", "graph.Graph.in_degree", "graph.Graph.predecessors", "x.keys", "next"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.num_input_nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.num_input_nodes"], ["\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "parent_op_ind", "=", "parent_op_indices", "[", "parent_op_indices", "!=", "0", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "parent_op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "dic1", "=", "{", "1", ":", "a", ",", "2", ":", "b", ",", "3", ":", "c", "}", "\n", "dic2", "=", "{", "1", ":", "a_available", ",", "2", ":", "b_available", ",", "3", ":", "c_available", "}", "\n", "\n", "numb", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "\n", "dic1", "[", "numb", "]", "=", "random", ".", "choice", "(", "dic2", "[", "numb", "]", ")", "\n", "\n", "\n", "op_indices", "=", "g", "(", "dic1", "[", "1", "]", ",", "dic1", "[", "2", "]", ",", "dic1", "[", "3", "]", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "mutate", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "mutate_micro", "(", "parent", ",", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "mutate_macro", "(", "parent", ",", "dataset_api", ")", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.forward": [[332, 417], ["logger.debug", "graph.Graph._assign_x_to_nodes", "networkx.algorithms.dag.lexicographical_topological_sort", "logger.debug", "logger.debug", "logger.debug", "naslib.utils.logging.log_formats", "naslib.utils.logging.log_first_n", "node[].forward", "logger.debug", "graph.Graph.neighbors", "naslib.utils.logging.log_formats", "naslib.utils.logging.log_formats", "len", "len", "graph.Graph.get_edge_data", "isinstance", "[].update", "node[].values", "list", "list", "list", "graph.Graph.op.forward", "isinstance", "node[].values", "graph.Graph.neighbors", "networkx.algorithms.dag.lexicographical_topological_sort", "logger.debug", "graph.Graph.op.forward", "ValueError", "sorted", "node[].keys"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._assign_x_to_nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_formats", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_formats", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_formats", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward"], ["", "", "def", "get_nbhd_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "nbrs", "=", "[", "]", "\n", "for", "edge", "in", "range", "(", "len", "(", "self", ".", "op_indices", ")", ")", ":", "\n", "            ", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "self", ".", "op_indices", "[", "edge", "]", "]", "\n", "\n", "for", "op_index", "in", "available", ":", "\n", "                ", "nbr_op_indices", "=", "list", "(", "self", ".", "op_indices", ")", ".", "copy", "(", ")", "\n", "nbr_op_indices", "[", "edge", "]", "=", "op_index", "\n", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n", "\n", "", "def", "get_nbhd_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "op_ind", "=", "self", ".", "op_indices", "[", "self", ".", "op_indices", "!=", "0", "]", "\n", "nbrs", "=", "[", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "for", "r", "in", "a_available", ":", "\n", "            ", "for", "p", "in", "b_available", ":", "\n", "                ", "for", "q", "in", "c_available", ":", "\n", "                    ", "nbr_op_indices", "=", "g", "(", "r", ",", "p", ",", "q", ")", "\n", "while", "len", "(", "nbr_op_indices", ")", "<", "6", ":", "\n", "                        ", "nbr_op_indices", "=", "np", ".", "append", "(", "nbr_op_indices", ",", "0", ")", "\n", "", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n", "\n", "", "def", "get_nbhd", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "\n", "\n", "", "", "def", "get_type", "(", "self", ")", ":", "\n", "#         return 'transbench101'", "\n", "        ", "return", "'transbench101'", "\n", "\n", "\n", "", "", "def", "_set_cell_ops", "(", "edge", ",", "C", ")", ":", "\n", "    ", "edge", ".", "data", ".", "set", "(", "'op'", ",", "[", "\n", "ops", ".", "Identity", "(", ")", ",", "\n", "ops", ".", "Zero", "(", "stride", "=", "1", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "3", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "1", ")", ",", "\n", "]", ")", "\n", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse": [[418, 449], ["networkx.algorithms.dag.lexicographical_topological_sort", "graph.Graph.neighbors", "[].parse", "graph.Graph.add_module", "isinstance", "graph.Graph.get_edge_data", "isinstance", "graph.Graph.add_module", "graph.Graph.add_module", "graph.Graph.op.parse", "graph.Graph.op.get_embedded_ops", "graph.Graph.op.get_embedded_ops", "isinstance", "primitive.parse"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.parse"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.unparse": [[450, 489], ["graph.Graph.__class__", "graph.Graph.clear", "graph_nodes.data", "graph_edges.data", "graph.Graph.add_nodes_from", "graph.Graph.add_edges_from", "graph.Graph.graph.update", "isinstance", "graph_nodes.data", "graph_edges.data", "data[].unparse", "data.set", "data.op.unparse"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.unparse", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.unparse"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs": [[490, 554], ["networkx.algorithms.dag.lexicographical_topological_sort", "graph.Graph.edges.data", "isinstance", "sorted", "sorted", "graphs.append", "graphs.append", "graphs.append", "graphs.append", "isinstance", "naslib.utils.utils.iter_flatten", "node_data[]._get_child_graphs", "edge_data.op._get_child_graphs", "isinstance", "single.append", "isinstance", "edge_data.op.get_embedded_ops", "inspect.isclass", "graphs.append", "graphs.append", "isinstance", "ValueError", "op._get_child_graphs", "graphs.append", "graphs.append", "isinstance", "issubclass", "edge_data.op.get_embedded_ops._get_child_graphs", "edge_data.op.get_embedded_ops", "logger.debug", "isinstance", "graphs.append", "graphs.append", "child_op._get_child_graphs"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.iter_flatten", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.get_all_edge_data": [[555, 583], ["graph.Graph._get_child_graphs", "graph.edges.data", "isinstance", "edge_data.has", "result.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_at_edges": [[584, 593], ["graph.Graph._get_child_graphs", "logger.debug", "graph.edges.data", "edge_data.is_final", "edge_data.set"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.compile": [[594, 629], ["graph.Graph._get_child_graphs", "logger.debug", "graph.edges.data", "edge_data.is_final", "edge_data.to_dict", "edge_data.to_dict.pop", "isinstance", "enumerate", "edge_data.set", "isinstance", "inspect.isclass", "logger.debug", "compiled_ops.append", "logger.debug", "inspect.isclass", "issubclass", "edge_data.set", "isinstance", "o", "edge_data.to_dict.pop.", "ValueError", "isinstance", "edge_data.to_dict.items"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.to_dict", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._verify_update_function": [[630, 673], ["graph.EdgeData", "graph.EdgeData.set", "graph.EdgeData.set", "isinstance", "graph.EdgeData.clone", "update_func", "naslib.utils.logging.log_first_n"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges": [[677, 718], ["graph.Graph._verify_update_function", "graph.Graph._delete_flagged_edges", "graph.Graph._get_child_graphs", "logger.debug", "graph.edges.data", "isinstance", "edge_data.is_final", "naslib.utils.utils.AttrDict", "update_func"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._verify_update_function", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._delete_flagged_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_nodes": [[719, 772], ["graph.Graph._delete_flagged_edges", "graph.Graph._get_child_graphs", "logger.debug", "networkx.algorithms.dag.lexicographical_topological_sort", "isinstance", "list", "list", "update_func", "graph.in_edges", "graph.out_edges", "data.is_final", "data.is_final"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._delete_flagged_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._delete_flagged_edges": [[773, 787], ["graph.Graph._get_child_graphs", "graph.edges.data", "edge_data.is_deleted", "graph.remove_edges_from", "to_remove.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_deleted"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.clone": [[788, 796], ["copy.deepcopy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.reset_weights": [[797, 821], ["graph.Graph.Graph.apply", "getattr", "callable", "graph.Graph.Graph.clone", "m.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.gcn.DirectedGraphConvolution.reset_parameters"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.prepare_discretization": [[822, 829], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.prepare_evaluation": [[830, 837], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.sample_random_architecture": [[838, 840], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.mutate": [[841, 843], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_load_labeled": [[844, 846], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.query": [[847, 869], ["NotImplementedError", "NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.get_dense_edges": [[871, 887], ["sorted", "list", "graph.Graph.nodes", "edges.append"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.nodes"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_edges_densly": [[888, 893], ["graph.Graph.add_edges_from", "graph.Graph.get_dense_edges"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.get_dense_edges"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__init__": [[908, 927], ["graph.EdgeData.set", "data.items", "primitives.Identity", "graph.EdgeData.set"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has": [[928, 944], ["key.startswith", "graph.EdgeData._private.keys", "graph.EdgeData._shared.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__getitem__": [[945, 948], ["graph.EdgeData.__getattr__", "key.startswith"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__getattr__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get": [[949, 954], ["graph.EdgeData.__getattr__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__getattr__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__getattr__": [[955, 966], ["key.startswith", "AttributeError", "key.startswith", "AttributeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__setattr__": [[968, 973], ["name.startswith", "super().__setattr__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__setattr__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__str__": [[974, 977], ["str", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__repr__": [[979, 981], ["graph.EdgeData.__str__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.__str__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update": [[982, 999], ["isinstance", "data.items", "isinstance", "graph.EdgeData.set", "graph.EdgeData.__dict__.update", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.remove": [[1000, 1013], ["KeyError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy": [[1014, 1044], ["graph.EdgeData", "copy.deepcopy", "graph.EdgeData._private.items", "isinstance", "v.copy", "isinstance", "isinstance", "i.copy"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set": [[1045, 1071], ["isinstance", "type", "key.startswith", "graph.EdgeData.is_final", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone": [[1072, 1081], ["copy.deepcopy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete": [[1082, 1087], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_deleted": [[1088, 1093], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.finalize": [[1094, 1102], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.is_final": [[1103, 1109], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.to_dict": [[1110, 1121], ["graph.EdgeData._shared.items", "graph.EdgeData.to_dict", "graph.EdgeData.update", "ValueError", "k.startswith", "graph.EdgeData._private.items", "graph.EdgeData.to_dict", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.to_dict", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.to_dict"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AbstractPrimitive.__init__": [[17, 24], ["torch.Module.__init__", "kwargs.items", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "class", "ResNetBasicblock", "(", "AbstractPrimitive", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "C_out", ",", "C_out", ",", "3", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AbstractPrimitive.forward": [[26, 32], ["NotImplementedError"], "methods", ["None"], ["            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AbstractPrimitive.get_embedded_ops": [[33, 44], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "x", ",", "None", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ",", "None", ")", "\n", "residual", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "is", "not", "None", "else", "x", "\n", "return", "residual", "+", "basicblock", "\n", "\n", "\n", "", "def", "get_embedded_ops", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AbstractPrimitive.get_op_name": [[45, 48], ["type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Identity.__init__": [[55, 57], ["primitives.AbstractPrimitive.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Identity.forward": [[58, 60], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Identity.get_embedded_ops": [[61, 63], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Zero.__init__": [[71, 78], ["primitives.AbstractPrimitive.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Zero.forward": [[79, 84], ["x.mul", "x[].mul"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Zero.get_embedded_ops": [[85, 87], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Zero.__repr__": [[88, 90], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Zero1x1.__init__": [[98, 105], ["primitives.AbstractPrimitive.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Zero1x1.forward": [[106, 112], ["x[].mul.mul", "x[].mul", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Zero1x1.get_embedded_ops": [[113, 115], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Zero1x1.__repr__": [[116, 118], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.SepConv.__init__": [[126, 156], ["primitives.AbstractPrimitive.__init__", "torch.Sequential", "torch.Sequential", "locals", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.SepConv.forward": [[158, 160], ["primitives.SepConv.op"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.SepConv.get_embedded_ops": [[161, 163], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.SepConv.get_op_name": [[164, 169], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.DilConv.__init__": [[177, 196], ["primitives.AbstractPrimitive.__init__", "torch.Sequential", "torch.Sequential", "locals", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.DilConv.forward": [[198, 200], ["primitives.DilConv.op"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.DilConv.get_embedded_ops": [[201, 203], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.DilConv.get_op_name": [[204, 209], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Stem.__init__": [[217, 221], ["primitives.AbstractPrimitive.__init__", "torch.Sequential", "torch.Sequential", "locals", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Stem.forward": [[223, 225], ["primitives.Stem.seq"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Stem.get_embedded_ops": [[226, 228], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Sequential.__init__": [[236, 240], ["primitives.AbstractPrimitive.__init__", "torch.Sequential", "torch.Sequential", "locals"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Sequential.forward": [[241, 243], ["primitives.Sequential.op"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Sequential.get_embedded_ops": [[244, 246], ["list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.MaxPool.__init__": [[249, 260], ["primitives.AbstractPrimitive.__init__", "locals", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.MaxPool.forward": [[261, 264], ["primitives.MaxPool.maxpool"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.MaxPool.get_embedded_ops": [[265, 267], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.MaxPool1x1.__init__": [[276, 286], ["primitives.AbstractPrimitive.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "locals", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.MaxPool1x1.forward": [[287, 293], ["primitives.MaxPool1x1.maxpool", "primitives.MaxPool1x1.conv", "primitives.MaxPool1x1.bn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.MaxPool1x1.get_embedded_ops": [[294, 296], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AvgPool.__init__": [[303, 313], ["primitives.AbstractPrimitive.__init__", "locals", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AvgPool.forward": [[314, 317], ["primitives.AvgPool.avgpool"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AvgPool.get_embedded_ops": [[318, 320], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AvgPool1x1.__init__": [[329, 341], ["primitives.AbstractPrimitive.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "locals", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AvgPool1x1.forward": [[342, 348], ["primitives.AvgPool1x1.avgpool", "primitives.AvgPool1x1.conv", "primitives.AvgPool1x1.bn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.AvgPool1x1.get_embedded_ops": [[349, 351], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.GlobalAveragePooling.__init__": [[357, 359], ["primitives.AbstractPrimitive.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.GlobalAveragePooling.forward": [[360, 362], ["torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.GlobalAveragePooling.get_embedded_ops": [[363, 365], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.ReLUConvBN.__init__": [[371, 379], ["primitives.AbstractPrimitive.__init__", "torch.Sequential", "torch.Sequential", "locals", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.ReLUConvBN.forward": [[381, 383], ["primitives.ReLUConvBN.op"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.ReLUConvBN.get_embedded_ops": [[384, 386], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.ReLUConvBN.get_op_name": [[387, 392], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.ConvBnReLU.__init__": [[397, 405], ["primitives.AbstractPrimitive.__init__", "torch.Sequential", "torch.Sequential", "locals", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.ConvBnReLU.forward": [[407, 409], ["primitives.ConvBnReLU.op"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.ConvBnReLU.get_embedded_ops": [[410, 412], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.ConvBnReLU.get_op_name": [[413, 418], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.InputProjection.__init__": [[424, 436], ["primitives.AbstractPrimitive.__init__", "torch.Sequential", "torch.Sequential", "locals", "primitives.ConvBnReLU"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.InputProjection.forward": [[438, 440], ["primitives.InputProjection.op"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.InputProjection.get_embedded_ops": [[441, 443], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.InputProjection.get_op_name": [[444, 449], ["primitives.InputProjection.module.get_op_name"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ReLUConvBN.get_op_name"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Concat1x1.__init__": [[457, 463], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.core.primitives.Concat1x1.forward": [[464, 473], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "primitives.Concat1x1.conv", "primitives.Concat1x1.bn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.__init__": [[24, 39], ["naslib.optimizers.core.metaclasses.MetaOptimizer.__init__", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["        ", "\"\"\"\n        Function to add the architectural weights to the edges.\n        \"\"\"", "\n", "len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.adapt_search_space": [[40, 47], ["search_space.clone"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone"], ["edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.new_epoch": [[48, 105], ["torch.nn.Module", "optimizer.LocalSearch.search_space.clone", "optimizer.LocalSearch.arch.sample_random_architecture", "optimizer.LocalSearch.arch.query", "optimizer.LocalSearch._update_history", "logger.info", "torch.nn.Module", "optimizer.LocalSearch.search_space.clone", "optimizer.LocalSearch.arch.sample_random_architecture", "optimizer.LocalSearch.arch.query", "optimizer.LocalSearch.chosen.arch.get_nbhd", "optimizer.LocalSearch.nbhd.pop", "optimizer.LocalSearch.arch.query", "optimizer.LocalSearch._update_history", "len", "len", "logger.info", "optimizer.LocalSearch.chosen.arch.get_nbhd", "logger.info"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_nbhd", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_nbhd"], [")", ":", "\n", "        ", "\"\"\"\n        Initialize a new instance.\n\n        Args:\n\n        \"\"\"", "\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n", "# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch._update_history": [[106, 116], ["len", "optimizer.LocalSearch.history.append", "enumerate", "len"], "methods", ["None"], ["graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.train_statistics": [[117, 134], ["optimizer.LocalSearch.get_final_architecture", "optimizer.LocalSearch.query", "optimizer.LocalSearch.query", "optimizer.LocalSearch.query", "optimizer.LocalSearch.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "architectural_weights", "=", "self", ".", "architectural_weights", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.test_statistics": [[137, 140], ["optimizer.LocalSearch.get_final_architecture", "optimizer.LocalSearch.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.get_final_architecture": [[141, 143], ["max"], "methods", ["None"], ["logger", ".", "info", "(", "\n", "\"Arch weights (alphas, last column argmax): \\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "alpha_str", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.get_op_optimizer": [[144, 146], ["NotImplementedError"], "methods", ["None"], [")", "\n", ")", "\n", "super", "(", ")", ".", "new_epoch", "(", "epoch", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.get_checkpointables": [[147, 149], ["None"], "methods", ["None"], ["\n", "", "def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "input_train", ",", "target_train", "=", "data_train", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.ls.optimizer.LocalSearch.get_model_size": [[150, 152], ["naslib.utils.utils.count_parameters_in_MB"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.count_parameters_in_MB"], ["input_val", ",", "target_val", "=", "data_val", "\n", "\n", "unrolled", "=", "False", "# what it this?", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.acquisition_functions.acquisition_function": [[10, 74], ["ensemble.query", "numpy.squeeze", "numpy.mean", "numpy.std", "numpy.random.normal", "ensemble.query", "numpy.mean", "numpy.std", "ensemble.query", "numpy.mean", "numpy.std", "ytrain.max", "logger.info", "NotImplementedError", "ensemble.query", "numpy.mean", "scipy.stats.norm.pdf", "scipy.stats.norm.cdf"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["def", "acquisition_function", "(", "\n", "ensemble", ",", "ytrain", ",", "acq_fn_type", "=", "\"its\"", ",", "explore_factor", "=", "0.5", ",", "ei_calibration_factor", "=", "5.0", "\n", ")", ":", "\n", "    ", "\"\"\"\n    input:  trained ensemble\n            ytrain (because some acquisition functions\n            need to know the best arch found so far)\n            acq_fn_type\n\n    output: a method which takes in an encoded architecture and\n            outputs the acquisition function value\n    \"\"\"", "\n", "\n", "if", "acq_fn_type", "==", "\"its\"", ":", "\n", "# Independent Thompson sampling (ITS) acquisition function", "\n", "\n", "        ", "def", "its", "(", "arch_encoding", ",", "info", "=", "None", ")", ":", "\n", "            ", "predictions", "=", "ensemble", ".", "query", "(", "[", "arch_encoding", "]", ",", "info", ")", "\n", "predictions", "=", "np", ".", "squeeze", "(", "predictions", ")", "\n", "mean", "=", "np", ".", "mean", "(", "predictions", ")", "\n", "std", "=", "np", ".", "std", "(", "predictions", ")", "\n", "sample", "=", "np", ".", "random", ".", "normal", "(", "mean", ",", "std", ")", "\n", "return", "sample", "\n", "\n", "", "return", "its", "\n", "\n", "", "elif", "acq_fn_type", "==", "\"ucb\"", ":", "\n", "# Upper confidence bound (UCB) acquisition function", "\n", "\n", "        ", "def", "ucb", "(", "arch_encoding", ",", "info", "=", "None", ")", ":", "\n", "            ", "predictions", "=", "ensemble", ".", "query", "(", "[", "arch_encoding", "]", ",", "info", ")", "\n", "mean", "=", "np", ".", "mean", "(", "predictions", ")", "\n", "std", "=", "np", ".", "std", "(", "predictions", ")", "\n", "return", "mean", "+", "explore_factor", "*", "std", "\n", "\n", "", "return", "ucb", "\n", "\n", "", "elif", "acq_fn_type", "==", "\"ei\"", ":", "\n", "# Expected improvement (EI) acquisition function", "\n", "\n", "        ", "def", "ei", "(", "arch_encoding", ",", "info", "=", "None", ")", ":", "\n", "            ", "predictions", "=", "ensemble", ".", "query", "(", "[", "arch_encoding", "]", ",", "info", ")", "\n", "mean", "=", "np", ".", "mean", "(", "predictions", ")", "\n", "std", "=", "np", ".", "std", "(", "predictions", ")", "\n", "factored_std", "=", "std", "/", "ei_calibration_factor", "\n", "max_y", "=", "ytrain", ".", "max", "(", ")", "\n", "gam", "=", "(", "mean", "-", "max_y", ")", "/", "factored_std", "\n", "ei_value", "=", "factored_std", "*", "(", "gam", "*", "norm", ".", "cdf", "(", "gam", ")", "+", "norm", ".", "pdf", "(", "gam", ")", ")", "\n", "return", "ei_value", "\n", "\n", "", "return", "ei", "\n", "\n", "", "elif", "acq_fn_type", "==", "\"exploit_only\"", ":", "\n", "# Expected improvement (EI) acquisition function", "\n", "\n", "        ", "def", "exploit", "(", "arch_encoding", ",", "info", "=", "None", ")", ":", "\n", "            ", "predictions", "=", "ensemble", ".", "query", "(", "[", "arch_encoding", "]", ",", "info", ")", "\n", "return", "np", ".", "mean", "(", "predictions", ")", "\n", "\n", "", "return", "exploit", "\n", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"{} is not a valid exploration type\"", ".", "format", "(", "acq_fn_type", ")", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.__init__": [[30, 56], ["naslib.optimizers.core.metaclasses.MetaOptimizer.__init__", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], [")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a new instance.\n\n        Args:\n\n        \"\"\"", "\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.adapt_search_space": [[57, 72], ["search_space.clone", "optimizer.Bananas.search_space.get_type", "naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.get_zc_method": [[73, 78], ["naslib.predictors.zerocost_v2.ZeroCostV2", "naslib.predictors.zerocost_v1.ZeroCostV1"], "methods", ["None"], ["        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n", "# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.new_epoch": [[79, 219], ["torch.nn.Module", "optimizer.Bananas.search_space.clone", "torch.nn.Module.arch.sample_random_architecture", "torch.nn.Module.arch.query", "optimizer.Bananas.train_data.append", "optimizer.Bananas._update_history", "torch.nn.Module", "optimizer.Bananas.next_batch.pop", "torch.nn.Module.arch.query", "optimizer.Bananas._update_history", "optimizer.Bananas.train_data.append", "optimizer.Bananas.get_zc_method", "copy.deepcopy", "optimizer.Bananas.query", "numpy.squeeze", "len", "naslib.predictors.ensemble.Ensemble", "naslib.predictors.ensemble.Ensemble.fit", "naslib.optimizers.discrete.bananas.acquisition_functions.acquisition_function", "numpy.argsort", "optimizer.Bananas.get_zc_method", "copy.deepcopy", "optimizer.Bananas.query", "numpy.squeeze", "len", "naslib.predictors.ensemble.Ensemble.set_pre_computations", "naslib.predictors.ensemble.Ensemble.set_pre_computations", "naslib.predictors.ensemble.Ensemble.set_pre_computations", "range", "optimizer.Bananas.get_zc_method", "copy.deepcopy", "optimizer.Bananas.query", "len", "len", "len", "len", "torch.nn.Module", "optimizer.Bananas.search_space.clone", "torch.nn.Module.arch.sample_random_architecture", "optimizer.Bananas.unlabeled.append", "optimizer.Bananas.search_space.clone", "optimizer.Bananas.sample_random_architecture", "candidates.append", "logger.info", "NotImplementedError", "len", "naslib.optimizers.discrete.bananas.acquisition_functions.acquisition_function.", "naslib.optimizers.discrete.bananas.acquisition_functions.acquisition_function.", "optimizer.Bananas.get_zc_method", "copy.deepcopy", "optimizer.Bananas.query", "numpy.squeeze", "len", "numpy.argsort", "range", "zip", "len", "int", "optimizer.Bananas.clone", "range", "candidates.append", "int", "optimizer.Bananas.search_space.clone", "optimizer.Bananas.mutate", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.acquisition_functions.acquisition_function", "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_pre_computations", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_pre_computations", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_pre_computations", "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate"], ["\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n", "", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "architectural_weights", "=", "self", ".", "architectural_weights", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Just log the architecture weights.\n        \"\"\"", "\n", "alpha_str", "=", "[", "\n", "\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n", "logger", ".", "info", "(", "\n", "\"Arch weights (alphas, last column argmax): \\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "alpha_str", ")", "\n", ")", "\n", ")", "\n", "super", "(", ")", ".", "new_epoch", "(", "epoch", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "input_train", ",", "target_train", "=", "data_train", "\n", "input_val", ",", "target_val", "=", "data_val", "\n", "\n", "unrolled", "=", "False", "# what it this?", "\n", "\n", "if", "unrolled", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Update architecture weights", "\n", "            ", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_val", "=", "self", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "logits_val", ",", "target_val", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update op weights", "\n", "self", ".", "op_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_train", "=", "self", ".", "graph", "(", "input_train", ")", "\n", "train_loss", "=", "self", ".", "loss", "(", "logits_train", ",", "target_train", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "graph", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "self", ".", "op_optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "\n", "\n", "", "def", "get_final_architecture", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Arch weights before discretization: {}\"", ".", "format", "(", "\n", "[", "a", "for", "a", "in", "self", ".", "architectural_weights", "]", "\n", ")", "\n", ")", "\n", "graph", "=", "self", ".", "graph", ".", "clone", "(", ")", ".", "unparse", "(", ")", "\n", "graph", ".", "prepare_discretization", "(", ")", "\n", "\n", "def", "discretize_ops", "(", "edge", ")", ":", "\n", "            ", "if", "edge", ".", "data", ".", "has", "(", "\"alpha\"", ")", ":", "\n", "                ", "primitives", "=", "edge", ".", "data", ".", "op", ".", "get_embedded_ops", "(", ")", "\n", "alphas", "=", "edge", ".", "data", ".", "alpha", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "primitives", "[", "np", ".", "argmax", "(", "alphas", ")", "]", ")", "\n", "\n", "", "", "graph", ".", "update_edges", "(", "discretize_ops", ",", "scope", "=", "self", ".", "scope", ",", "private_edge_data", "=", "True", ")", "\n", "graph", ".", "prepare_evaluation", "(", ")", "\n", "graph", ".", "parse", "(", ")", "\n", "graph", "=", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "graph", "\n", "\n", "", "def", "get_op_optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "op_optimizer", ".", "__class__", "\n", "\n", "", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "return", "count_parameters_in_MB", "(", "self", ".", "graph", ")", "\n", "\n", "", "def", "test_statistics", "(", "self", ")", ":", "\n", "# nb301 is not there but we use it anyways to generate the arch strings.", "\n", "# if self.graph.QUERYABLE:", "\n", "        ", "try", ":", "\n", "# record anytime performance", "\n", "            ", "best_arch", "=", "self", ".", "get_final_architecture", "(", ")", "\n", "return", "best_arch", ".", "query", "(", "Metric", ".", "TEST_ACCURACY", ",", "self", ".", "dataset", ")", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "def", "_step", "(", "\n", "self", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "input_train", ",", "\n", "target_train", ",", "\n", "input_valid", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas._update_history": [[220, 228], ["len", "optimizer.Bananas.history.append", "enumerate"], "methods", ["None"], ["target_valid", ",", "\n", "eta", ",", "\n", "network_optimizer", ",", "\n", "unrolled", ",", "\n", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "unrolled", ":", "\n", "            ", "self", ".", "_backward_step_unrolled", "(", "\n", "model", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.train_statistics": [[229, 247], ["optimizer.Bananas.get_final_architecture", "optimizer.Bananas.query", "optimizer.Bananas.query", "optimizer.Bananas.query", "optimizer.Bananas.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["criterion", ",", "\n", "input_train", ",", "\n", "target_train", ",", "\n", "input_valid", ",", "\n", "target_valid", ",", "\n", "eta", ",", "\n", "network_optimizer", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_backward_step", "(", "model", ",", "criterion", ",", "input_valid", ",", "target_valid", ")", "\n", "\n", "", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", "\n", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "def", "_backward_step", "(", "self", ",", "model", ",", "criterion", ",", "input_valid", ",", "target_valid", ")", ":", "\n", "        ", "\"\"\"Compute 1st order approximation\"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.test_statistics": [[250, 253], ["optimizer.Bananas.get_final_architecture", "optimizer.Bananas.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["\n", "", "def", "_backward_step_unrolled", "(", "\n", "self", ",", "\n", "model", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.get_final_architecture": [[254, 256], ["max"], "methods", ["None"], ["criterion", ",", "\n", "input_train", ",", "\n", "target_train", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.get_op_optimizer": [[257, 259], ["NotImplementedError"], "methods", ["None"], ["input_valid", ",", "\n", "target_valid", ",", "\n", "eta", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.get_checkpointables": [[260, 262], ["None"], "methods", ["None"], ["network_optimizer", ",", "\n", ")", ":", "\n", "        ", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.optimizer.Bananas.get_model_size": [[263, 265], ["naslib.utils.utils.count_parameters_in_MB"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.count_parameters_in_MB"], ["model", ",", "criterion", ",", "input_train", ",", "target_train", ",", "eta", ",", "network_optimizer", "\n", ")", "\n", "unrolled_loss", "=", "self", ".", "_loss", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.__init__": [[30, 53], ["naslib.optimizers.core.metaclasses.MetaOptimizer.__init__", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], [")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.adapt_search_space": [[54, 69], ["search_space.clone", "optimizer.Npenas.search_space.get_type", "naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method": [[70, 75], ["naslib.predictors.zerocost_v2.ZeroCostV2", "naslib.predictors.zerocost_v1.ZeroCostV1"], "methods", ["None"], ["\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.new_epoch": [[76, 197], ["torch.nn.Module", "optimizer.Npenas.search_space.clone", "torch.nn.Module.arch.sample_random_architecture", "torch.nn.Module.arch.query", "optimizer.Npenas.train_data.append", "optimizer.Npenas._update_history", "torch.nn.Module", "optimizer.Npenas.next_batch.pop", "torch.nn.Module.arch.query", "optimizer.Npenas._update_history", "optimizer.Npenas.train_data.append", "optimizer.Npenas.get_zc_method", "copy.deepcopy", "optimizer.Npenas.query", "numpy.squeeze", "len", "naslib.predictors.ensemble.Ensemble", "naslib.predictors.ensemble.Ensemble.fit", "naslib.optimizers.discrete.bananas.acquisition_functions.acquisition_function", "numpy.argsort", "optimizer.Npenas.get_zc_method", "copy.deepcopy", "optimizer.Npenas.query", "numpy.squeeze", "len", "naslib.predictors.ensemble.Ensemble.set_pre_computations", "naslib.predictors.ensemble.Ensemble.set_pre_computations", "naslib.predictors.ensemble.Ensemble.set_pre_computations", "numpy.argsort", "range", "optimizer.Npenas.get_zc_method", "copy.deepcopy", "optimizer.Npenas.query", "len", "len", "len", "len", "torch.nn.Module", "optimizer.Npenas.search_space.clone", "torch.nn.Module.arch.sample_random_architecture", "optimizer.Npenas.unlabeled.append", "int", "optimizer.Npenas.clone", "range", "candidates.append", "len", "naslib.optimizers.discrete.bananas.acquisition_functions.acquisition_function.", "naslib.optimizers.discrete.bananas.acquisition_functions.acquisition_function.", "optimizer.Npenas.get_zc_method", "copy.deepcopy", "optimizer.Npenas.query", "numpy.squeeze", "len", "int", "optimizer.Npenas.search_space.clone", "optimizer.Npenas.mutate", "zip", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.bananas.acquisition_functions.acquisition_function", "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_pre_computations", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_pre_computations", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_pre_computations", "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_zc_method", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate"], ["# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n", "", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "architectural_weights", "=", "self", ".", "architectural_weights", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Just log the architecture weights.\n        \"\"\"", "\n", "alpha_str", "=", "[", "\n", "\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n", "logger", ".", "info", "(", "\n", "\"Arch weights (alphas, last column argmax): \\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "alpha_str", ")", "\n", ")", "\n", ")", "\n", "super", "(", ")", ".", "new_epoch", "(", "epoch", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "input_train", ",", "target_train", "=", "data_train", "\n", "input_val", ",", "target_val", "=", "data_val", "\n", "\n", "unrolled", "=", "False", "# what it this?", "\n", "\n", "if", "unrolled", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Update architecture weights", "\n", "            ", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_val", "=", "self", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "logits_val", ",", "target_val", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update op weights", "\n", "self", ".", "op_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_train", "=", "self", ".", "graph", "(", "input_train", ")", "\n", "train_loss", "=", "self", ".", "loss", "(", "logits_train", ",", "target_train", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "graph", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "self", ".", "op_optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "\n", "\n", "", "def", "get_final_architecture", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Arch weights before discretization: {}\"", ".", "format", "(", "\n", "[", "a", "for", "a", "in", "self", ".", "architectural_weights", "]", "\n", ")", "\n", ")", "\n", "graph", "=", "self", ".", "graph", ".", "clone", "(", ")", ".", "unparse", "(", ")", "\n", "graph", ".", "prepare_discretization", "(", ")", "\n", "\n", "def", "discretize_ops", "(", "edge", ")", ":", "\n", "            ", "if", "edge", ".", "data", ".", "has", "(", "\"alpha\"", ")", ":", "\n", "                ", "primitives", "=", "edge", ".", "data", ".", "op", ".", "get_embedded_ops", "(", ")", "\n", "alphas", "=", "edge", ".", "data", ".", "alpha", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "primitives", "[", "np", ".", "argmax", "(", "alphas", ")", "]", ")", "\n", "\n", "", "", "graph", ".", "update_edges", "(", "discretize_ops", ",", "scope", "=", "self", ".", "scope", ",", "private_edge_data", "=", "True", ")", "\n", "graph", ".", "prepare_evaluation", "(", ")", "\n", "graph", ".", "parse", "(", ")", "\n", "graph", "=", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "graph", "\n", "\n", "", "def", "get_op_optimizer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas._update_history": [[198, 206], ["len", "optimizer.Npenas.history.append", "enumerate"], "methods", ["None"], ["        ", "return", "self", ".", "op_optimizer", ".", "__class__", "\n", "\n", "", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "return", "count_parameters_in_MB", "(", "self", ".", "graph", ")", "\n", "\n", "", "def", "test_statistics", "(", "self", ")", ":", "\n", "# nb301 is not there but we use it anyways to generate the arch strings.", "\n", "# if self.graph.QUERYABLE:", "\n", "        ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.train_statistics": [[207, 225], ["optimizer.Npenas.get_final_architecture", "optimizer.Npenas.query", "optimizer.Npenas.query", "optimizer.Npenas.query", "optimizer.Npenas.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["# record anytime performance", "\n", "            ", "best_arch", "=", "self", ".", "get_final_architecture", "(", ")", "\n", "return", "best_arch", ".", "query", "(", "Metric", ".", "TEST_ACCURACY", ",", "self", ".", "dataset", ")", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "def", "_step", "(", "\n", "self", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "input_train", ",", "\n", "target_train", ",", "\n", "input_valid", ",", "\n", "target_valid", ",", "\n", "eta", ",", "\n", "network_optimizer", ",", "\n", "unrolled", ",", "\n", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.test_statistics": [[228, 231], ["optimizer.Npenas.get_final_architecture", "optimizer.Npenas.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["model", ",", "\n", "criterion", ",", "\n", "input_train", ",", "\n", "target_train", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_final_architecture": [[232, 234], ["max"], "methods", ["None"], ["input_valid", ",", "\n", "target_valid", ",", "\n", "eta", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_op_optimizer": [[235, 237], ["NotImplementedError"], "methods", ["None"], ["network_optimizer", ",", "\n", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_checkpointables": [[238, 240], ["None"], "methods", ["None"], ["            ", "self", ".", "_backward_step", "(", "model", ",", "criterion", ",", "input_valid", ",", "target_valid", ")", "\n", "\n", "", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.npenas.optimizer.Npenas.get_model_size": [[241, 243], ["naslib.utils.utils.count_parameters_in_MB"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.count_parameters_in_MB"], ["            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.__init__": [[21, 33], ["naslib.optimizers.core.metaclasses.MetaOptimizer.__init__", "collections.deque", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "@", "staticmethod", "\n", "def", "add_alphas", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to add the architectural weights to the edges.\n        \"\"\"", "\n", "len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.adapt_search_space": [[34, 41], ["search_space.clone"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone"], ["def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.new_epoch": [[42, 81], ["logger.info", "torch.nn.Module", "optimizer.RegularizedEvolution.search_space.clone", "torch.nn.Module.arch.sample_random_architecture", "torch.nn.Module.arch.query", "optimizer.RegularizedEvolution.population.append", "optimizer.RegularizedEvolution._update_history", "naslib.utils.logging.log_every_n_seconds", "max", "torch.nn.Module", "optimizer.RegularizedEvolution.search_space.clone", "torch.nn.Module.arch.mutate", "torch.nn.Module.arch.query", "optimizer.RegularizedEvolution.population.append", "optimizer.RegularizedEvolution._update_history", "len", "numpy.random.choice", "sample.append", "len", "list"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a new instance.\n\n        Args:\n\n        \"\"\"", "\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n", "# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution._update_history": [[82, 90], ["len", "optimizer.RegularizedEvolution.history.append", "enumerate"], "methods", ["None"], ["self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.train_statistics": [[91, 109], ["optimizer.RegularizedEvolution.get_final_architecture", "optimizer.RegularizedEvolution.query", "optimizer.RegularizedEvolution.query", "optimizer.RegularizedEvolution.query", "optimizer.RegularizedEvolution.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.test_statistics": [[112, 115], ["optimizer.RegularizedEvolution.get_final_architecture", "optimizer.RegularizedEvolution.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.get_final_architecture": [[116, 118], ["max"], "methods", ["None"], ["\n", "", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.get_op_optimizer": [[119, 121], ["NotImplementedError"], "methods", ["None"], ["\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.get_checkpointables": [[122, 124], ["None"], "methods", ["None"], ["\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.re.optimizer.RegularizedEvolution.get_model_size": [[125, 127], ["naslib.utils.utils.count_parameters_in_MB"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.count_parameters_in_MB"], ["", "def", "before_training", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.__init__": [[25, 46], ["naslib.optimizers.core.metaclasses.MetaOptimizer.__init__", "int", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.adapt_search_space": [[47, 55], ["search_space.clone"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone"], ["loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a new instance.\n\n        Args:\n\n        \"\"\"", "\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.new_epoch": [[56, 114], ["torch.nn.Module", "optimizer.BasePredictor.search_space.clone", "torch.nn.Module.arch.sample_random_architecture", "torch.nn.Module.arch.query", "optimizer.BasePredictor.train_data.append", "optimizer.BasePredictor._update_history", "torch.nn.Module", "torch.nn.Module.arch.query", "optimizer.BasePredictor._update_history", "naslib.predictors.ensemble.Ensemble", "naslib.predictors.ensemble.Ensemble.fit", "range", "numpy.squeeze", "numpy.mean", "optimizer.BasePredictor.search_space.clone", "optimizer.BasePredictor.sample_random_architecture", "xtest.append", "naslib.predictors.ensemble.Ensemble.query", "optimizer.BasePredictor.evaluate_predictor", "numpy.argsort", "optimizer.BasePredictor.choices.append", "optimizer.BasePredictor.search_space.get_type"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.evaluate_predictor", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type"], ["\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "graph", "=", "search_space", ".", "clone", "(", ")", "\n", "\n", "# If there is no scope defined, let's use the search space default one", "\n", "if", "not", "scope", ":", "\n", "            ", "scope", "=", "graph", ".", "OPTIMIZER_SCOPE", "\n", "\n", "# 1. add alphas", "\n", "", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "add_alphas", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "# 2. replace primitives with mixed_op", "\n", "graph", ".", "update_edges", "(", "\n", "self", ".", "__class__", ".", "update_ops", ",", "scope", "=", "scope", ",", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "for", "alpha", "in", "graph", ".", "get_all_edge_data", "(", "\"alpha\"", ")", ":", "\n", "            ", "self", ".", "architectural_weights", ".", "append", "(", "alpha", ")", "\n", "\n", "", "graph", ".", "parse", "(", ")", "\n", "#logger.info(\"Parsed graph:\\n\" + graph.modules_str())", "\n", "\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.evaluate_predictor": [[115, 143], ["print", "print", "print", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "ytest.append", "abs", "numpy.corrcoef", "arch.query", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["self", ".", "scope", "=", "scope", "\n", "\n", "", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "architectural_weights", "=", "self", ".", "architectural_weights", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Just log the architecture weights.\n        \"\"\"", "\n", "alpha_str", "=", "[", "\n", "\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n", "logger", ".", "info", "(", "\n", "\"Arch weights (alphas, last column argmax): \\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "alpha_str", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor._update_history": [[144, 152], ["len", "optimizer.BasePredictor.history.append", "enumerate"], "methods", ["None"], [")", "\n", ")", "\n", "super", "(", ")", ".", "new_epoch", "(", "epoch", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "data_train", ",", "data_val", ")", ":", "\n", "        ", "input_train", ",", "target_train", "=", "data_train", "\n", "input_val", ",", "target_val", "=", "data_val", "\n", "\n", "unrolled", "=", "False", "# what it this?", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.train_statistics": [[153, 167], ["optimizer.BasePredictor.get_final_architecture", "optimizer.BasePredictor.query", "optimizer.BasePredictor.query", "optimizer.BasePredictor.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["\n", "if", "unrolled", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Update architecture weights", "\n", "            ", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_val", "=", "self", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "logits_val", ",", "target_val", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update op weights", "\n", "self", ".", "op_optimizer", ".", "zero_grad", "(", ")", "\n", "logits_train", "=", "self", ".", "graph", "(", "input_train", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.test_statistics": [[170, 173], ["optimizer.BasePredictor.get_final_architecture", "optimizer.BasePredictor.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["if", "self", ".", "grad_clip", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "graph", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "self", ".", "op_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.get_final_architecture": [[174, 176], ["max"], "methods", ["None"], ["", "return", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "\n", "\n", "", "def", "get_final_architecture", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.get_op_optimizer": [[177, 179], ["NotImplementedError"], "methods", ["None"], ["        ", "logger", ".", "info", "(", "\n", "\"Arch weights before discretization: {}\"", ".", "format", "(", "\n", "[", "a", "for", "a", "in", "self", ".", "architectural_weights", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.get_checkpointables": [[180, 182], ["None"], "methods", ["None"], [")", "\n", ")", "\n", "graph", "=", "self", ".", "graph", ".", "clone", "(", ")", ".", "unparse", "(", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.get_model_size": [[183, 185], ["naslib.utils.utils.count_parameters_in_MB"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.count_parameters_in_MB"], ["graph", ".", "prepare_discretization", "(", ")", "\n", "\n", "def", "discretize_ops", "(", "edge", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.__init__": [[18, 50], ["torch.nn.CrossEntropyLoss", "naslib.optimizers.core.metaclasses.MetaOptimizer.__init__", "torch.device", "torch.nn.ModuleList", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_alphas", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to add the architectural weights to the edges.\n        \"\"\"", "\n", "len_primitives", "=", "len", "(", "edge", ".", "data", ".", "op", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "1e-3", "*", "torch", ".", "randn", "(", "size", "=", "[", "len_primitives", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "edge", ".", "data", ".", "set", "(", "\"alpha\"", ",", "alpha", ",", "shared", "=", "True", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "update_ops", "(", "edge", ")", ":", "\n", "        ", "\"\"\"\n        Function to replace the primitive ops at the edges\n        with the DARTS specific MixedOp.\n        \"\"\"", "\n", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "edge", ".", "data", ".", "set", "(", "\"op\"", ",", "MixedOp", "(", "primitives", ")", ")", "\n", "\n", "", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "op_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "\n", "loss_criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.adapt_search_space": [[51, 58], ["search_space.clone"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone"], ["\n", "super", "(", "DARTSOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "op_optimizer", "=", "op_optimizer", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.new_epoch": [[59, 72], ["torch.nn.Module", "optimizer.RandomSearch.search_space.clone", "torch.nn.Module.arch.sample_random_architecture", "torch.nn.Module.arch.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "loss", "=", "loss_criteria", "\n", "self", ".", "grad_clip", "=", "self", ".", "config", ".", "search", ".", "grad_clip", "\n", "\n", "self", ".", "architectural_weights", "=", "torch", ".", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "perturb_alphas", "=", "None", "\n", "self", ".", "epsilon", "=", "0", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "\n", "", "def", "adapt_search_space", "(", "self", ",", "search_space", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# We are going to modify the search space", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch._update_history": [[95, 103], ["len", "optimizer.RandomSearch.history.append", "enumerate"], "methods", ["None"], ["\n", "# Init optimizers", "\n", "if", "self", ".", "arch_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "arch_optimizer", "=", "self", ".", "arch_optimizer", "(", "\n", "self", ".", "architectural_weights", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "arch_learning_rate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "arch_weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture": [[104, 109], ["max"], "methods", ["None"], ["\n", "", "self", ".", "op_optimizer", "=", "self", ".", "op_optimizer", "(", "\n", "graph", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "search", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "search", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "search", ".", "weight_decay", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.train_statistics": [[110, 129], ["optimizer.RandomSearch.get_final_architecture", "optimizer.RandomSearch.query", "optimizer.RandomSearch.query", "optimizer.RandomSearch.query", "optimizer.RandomSearch.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], [")", "\n", "\n", "graph", ".", "train", "(", ")", "\n", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "scope", "=", "scope", "\n", "\n", "", "def", "get_checkpointables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "self", ".", "graph", ",", "\n", "\"op_optimizer\"", ":", "self", ".", "op_optimizer", ",", "\n", "\"arch_optimizer\"", ":", "self", ".", "arch_optimizer", ",", "\n", "\"arch_weights\"", ":", "self", ".", "architectural_weights", ",", "\n", "}", "\n", "\n", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Move the graph into cuda memory if available.\n        \"\"\"", "\n", "self", ".", "graph", "=", "self", ".", "graph", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.test_statistics": [[132, 135], ["optimizer.RandomSearch.get_final_architecture", "optimizer.RandomSearch.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "new_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Just log the architecture weights.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_op_optimizer": [[136, 138], ["None"], "methods", ["None"], ["alpha_str", "=", "[", "\n", "\", \"", ".", "join", "(", "[", "\"{:+.06f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "a", "]", ")", "\n", "+", "\", {}\"", ".", "format", "(", "np", ".", "argmax", "(", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_checkpointables": [[139, 141], ["None"], "methods", ["None"], ["for", "a", "in", "self", ".", "architectural_weights", "\n", "]", "\n", "logger", ".", "info", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.evaluate_nasbench_201.get_nb_eval": [[45, 58], ["nb_metric_per_run.append", "nb_metric.append"], "function", ["None"], ["def", "get_nb_eval", "(", "optimizer_runs", ",", "dataset", ",", "metric", ")", ":", "\n", "    ", "nb_metric_per_run", "=", "[", "]", "\n", "for", "run", "in", "optimizer_runs", ":", "\n", "        ", "nb_metric", "=", "[", "]", "\n", "if", "dataset", "==", "\"darts\"", ":", "\n", "            ", "if", "metric", "==", "\"eval_acc1es\"", ":", "\n", "                ", "metric", "=", "\"test_acc\"", "\n", "", "nb_metric", "=", "run", "[", "metric", "]", "\n", "", "else", ":", "\n", "            ", "for", "eval", "in", "run", "[", "\"test_acc\"", "]", ":", "\n", "                ", "nb_metric", ".", "append", "(", "eval", "[", "dataset", "]", "[", "metric", "]", ")", "\n", "", "", "nb_metric_per_run", ".", "append", "(", "nb_metric", ")", "\n", "", "return", "nb_metric_per_run", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.evaluate_nasbench_201.analyze": [[60, 148], ["matplotlib.subplots", "print", "optimizer_dict.items", "ax_left.set_xlabel", "ax_left.set_ylabel", "matplotlib.grid", "ax_left.legend", "matplotlib.xlim", "ax_left.legend", "matplotlib.tight_layout", "matplotlib.savefig", "print", "ax_left.plot", "ax_left.fill_between", "lines.append", "ax_left.plot", "lines.append", "matplotlib.title", "matplotlib.title", "ax_left.twinx", "ax_left.twinx.set_ylabel", "optimizer_dict.items", "next", "numpy.array", "numpy.mean", "numpy.std", "numpy.arange", "numpy.arange", "print", "ax_left.twinx.plot", "ax_left.twinx.fill_between", "lines.append", "l.get_label", "evaluate_nasbench_201.get_nb_eval", "len", "markers.get", "len", "next", "numpy.array", "numpy.mean", "numpy.std", "numpy.arange", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.analysis.evaluate_discrete_nasbench_201.get_nb_eval", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "def", "analyze", "(", "optimizer_dict", ",", "dataset", ")", ":", "\n", "    ", "fig", ",", "ax_left", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "\n", "lines", "=", "[", "]", "\n", "print", "(", "dataset", ")", "\n", "for", "optimizer_name", ",", "optimizer_runs", "in", "optimizer_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "optimizer_runs", ":", "\n", "            ", "continue", "\n", "", "color", "=", "next", "(", "ax_left", ".", "_get_lines", ".", "prop_cycler", ")", "[", "\"color\"", "]", "\n", "nb_test_error", "=", "100", "-", "np", ".", "array", "(", "\n", "get_nb_eval", "(", "optimizer_runs", ",", "dataset", ",", "\"eval_acc1es\"", ")", "\n", ")", "\n", "\n", "mean", ",", "std", "=", "np", ".", "mean", "(", "nb_test_error", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "nb_test_error", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "\n", "\"test! optimizer: {}, {:.02f} {{\\\\scriptsize $\\\\pm$ {:.02f}}}\"", ".", "format", "(", "\n", "optimizer_name", ",", "100", "-", "mean", "[", "-", "1", "]", ",", "std", "[", "-", "1", "]", "\n", ")", "\n", ")", "\n", "line", "=", "ax_left", ".", "plot", "(", "\n", "np", ".", "arange", "(", "len", "(", "mean", ")", ")", ",", "\n", "mean", ",", "\n", "label", "=", "\"{}\"", ".", "format", "(", "optimizer_dir_name_to_name", "[", "optimizer_name", "]", ")", ",", "\n", "marker", "=", "markers", ".", "get", "(", "optimizer_name", ",", "None", ")", ",", "\n", "markersize", "=", "7", ",", "\n", "markevery", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "color", "=", "color", ",", "\n", ")", "\n", "ax_left", ".", "fill_between", "(", "np", ".", "arange", "(", "len", "(", "mean", ")", ")", ",", "mean", "-", "std", ",", "mean", "+", "std", ",", "alpha", "=", "0.3", ")", "\n", "lines", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "line", "=", "ax_left", ".", "plot", "(", "[", "0", ",", "50", "]", ",", "[", "5.77", ",", "5.77", "]", ",", "label", "=", "\"RE final performance\"", ")", "\n", "lines", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "", "ax_left", ".", "set_xlabel", "(", "\"Search Epochs\"", ")", "\n", "ax_left", ".", "set_ylabel", "(", "\"Test Error [%]\"", ")", "\n", "if", "dataset", "==", "\"darts\"", ":", "\n", "        ", "plt", ".", "title", "(", "\"Results on Nas-Bench 301\"", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "title", "(", "dataset", ")", "\n", "", "plt", ".", "grid", "(", "True", ",", "which", "=", "\"both\"", ",", "ls", "=", "\"-\"", ",", "alpha", "=", "0.8", ")", "\n", "ax_left", ".", "legend", "(", ")", "\n", "\n", "if", "dataset", "==", "\"cifar10\"", "or", "dataset", "==", "\"darts\"", ":", "\n", "        ", "ax_right", "=", "(", "\n", "ax_left", ".", "twinx", "(", ")", "\n", ")", "# instantiate a second axes that shares the same x-axis", "\n", "ax_right", ".", "set_ylabel", "(", "\"Validation Error [%]\"", ")", "\n", "\n", "for", "optimizer_name", ",", "optimizer_runs", "in", "optimizer_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "optimizer_runs", ":", "\n", "                ", "continue", "\n", "", "color", "=", "next", "(", "ax_right", ".", "_get_lines", ".", "prop_cycler", ")", "[", "\"color\"", "]", "\n", "one_shot_valid_error", "=", "100", "-", "np", ".", "array", "(", "\n", "[", "run", "[", "\"valid_acc\"", "]", "for", "run", "in", "optimizer_runs", "]", "\n", ")", "\n", "mean", ",", "std", "=", "np", ".", "mean", "(", "one_shot_valid_error", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "\n", "one_shot_valid_error", ",", "axis", "=", "0", "\n", ")", "\n", "print", "(", "\n", "\"validation! optimizer: {}, {:.02f} {{\\\\scriptsize $\\\\pm$ {:.02f}}}\"", ".", "format", "(", "\n", "optimizer_name", ",", "100", "-", "mean", "[", "-", "1", "]", ",", "std", "[", "-", "1", "]", "\n", ")", "\n", ")", "\n", "line", "=", "ax_right", ".", "plot", "(", "\n", "np", ".", "arange", "(", "len", "(", "mean", ")", ")", ",", "\n", "mean", ",", "\n", "label", "=", "\"{} validation error\"", ".", "format", "(", "\n", "optimizer_dir_name_to_name", "[", "optimizer_name", "]", "\n", ")", ",", "\n", "linestyle", "=", "\"-.\"", ",", "\n", "alpha", "=", "0.3", ",", "\n", "color", "=", "color", ",", "\n", ")", "\n", "ax_right", ".", "fill_between", "(", "\n", "np", ".", "arange", "(", "len", "(", "mean", ")", ")", ",", "mean", "-", "std", ",", "mean", "+", "std", ",", "linestyle", "=", "\":\"", ",", "alpha", "=", "0.1", "\n", ")", "\n", "lines", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "# ax_left.set_yscale('log')", "\n", "# ax_right.set_yscale('log')", "\n", "# plt.xlim(left=0, right=len(mean))", "\n", "", "", "plt", ".", "xlim", "(", "left", "=", "0", ",", "right", "=", "51", "if", "dataset", "==", "\"darts\"", "else", "50", ")", "\n", "ax_left", ".", "legend", "(", "lines", ",", "[", "l", ".", "get_label", "(", ")", "for", "l", "in", "lines", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "\"optim_{}_{}.pdf\"", ".", "format", "(", "dir", ",", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.evaluate_discrete_nasbench_201.get_nb_eval": [[26, 44], ["nb_metric_per_run.append", "nb_metric.append", "nb_metric.append", "nb_metric.append"], "function", ["None"], ["def", "get_nb_eval", "(", "optimizer_runs", ",", "dataset", ",", "metric", ")", ":", "\n", "    ", "nb_metric_per_run", "=", "[", "]", "\n", "for", "run", "in", "optimizer_runs", ":", "\n", "        ", "nb_metric", "=", "[", "]", "\n", "last_val", "=", "0", "if", "metric", "==", "\"train_times\"", "else", "-", "np", ".", "inf", "\n", "for", "eval", "in", "run", "[", "\"arch_eval\"", "]", ":", "\n", "            ", "curr_val", "=", "eval", "[", "dataset", "]", "[", "metric", "]", "\n", "if", "metric", "==", "\"train_times\"", ":", "\n", "                ", "last_val", "+=", "curr_val", "\n", "nb_metric", ".", "append", "(", "last_val", ")", "\n", "", "else", ":", "\n", "                ", "if", "curr_val", ">", "last_val", ":", "\n", "                    ", "nb_metric", ".", "append", "(", "curr_val", ")", "\n", "last_val", "=", "curr_val", "\n", "", "else", ":", "\n", "                    ", "nb_metric", ".", "append", "(", "last_val", ")", "\n", "", "", "", "nb_metric_per_run", ".", "append", "(", "nb_metric", ")", "\n", "", "return", "nb_metric_per_run", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.evaluate_discrete_nasbench_201.analyze": [[46, 73], ["matplotlib.subplots", "optimizer_dict.items", "util.get_trajectories", "util.plot_losses", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.set_xlim", "ax.set_xscale", "matplotlib.legend", "matplotlib.title", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.savefig", "numpy.array", "optimizer_dict.keys", "numpy.array", "evaluate_discrete_nasbench_201.get_nb_eval", "evaluate_discrete_nasbench_201.get_nb_eval"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.analysis.util.get_trajectories", "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.util.plot_losses", "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.evaluate_discrete_nasbench_201.get_nb_eval", "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.evaluate_discrete_nasbench_201.get_nb_eval"], ["", "def", "analyze", "(", "optimizer_dict", ",", "dataset", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "parser_dict", "=", "{", "k", ":", "{", "}", "for", "k", "in", "optimizer_dict", ".", "keys", "(", ")", "}", "\n", "\n", "for", "optimizer_name", ",", "optimizer_runs", "in", "optimizer_dict", ".", "items", "(", ")", ":", "\n", "        ", "nb_test_error", "=", "100", "-", "np", ".", "array", "(", "\n", "get_nb_eval", "(", "optimizer_runs", ",", "dataset", ",", "\"eval_acc1es\"", ")", "\n", ")", "\n", "parser_dict", "[", "optimizer_name", "]", "[", "\"losses\"", "]", "=", "nb_test_error", "\n", "nb_training_time", "=", "np", ".", "array", "(", "get_nb_eval", "(", "optimizer_runs", ",", "dataset", ",", "\"train_times\"", ")", ")", "\n", "parser_dict", "[", "optimizer_name", "]", "[", "\"time\"", "]", "=", "nb_training_time", "\n", "\n", "", "trajectories", "=", "get_trajectories", "(", "parser_dict", ")", "\n", "plot_losses", "(", "fig", ",", "ax", ",", "None", ",", "trajectories", ",", "regret", "=", "False", ",", "plot_mean", "=", "True", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "\"Wallclock time [h]\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"Test Error [%]\"", ")", "\n", "# ax.set_yscale('log')", "\n", "ax", ".", "set_ylim", "(", "top", "=", "7", ")", "\n", "ax", ".", "set_xlim", "(", "left", "=", "1000", ")", "\n", "ax", ".", "set_xscale", "(", "\"log\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "dataset", ")", "\n", "plt", ".", "grid", "(", "True", ",", "which", "=", "\"both\"", ",", "ls", "=", "\"-\"", ",", "alpha", "=", "0.8", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "\"optimizer_comp_nb201_{}_discrete.pdf\"", ".", "format", "(", "dataset", ")", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.evaluate_discrete_nasbench_201.test": [[104, 108], ["numpy.mean", "numpy.std", "print"], "function", ["None"], ["def", "test", "(", "x", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "x", ")", "\n", "std", "=", "np", ".", "std", "(", "x", ")", "\n", "print", "(", "\"{:.02f} {{\\\\scriptsize $\\\\pm$ {:.02f}}}\"", ".", "format", "(", "mean", ",", "std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.util.get_trajectories": [[45, 71], ["range", "util.merge_and_fill_trajectories", "print", "len", "print", "pandas.DataFrame", "dfs.append", "numpy.array", "numpy.array", "min", "str"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.analysis.util.merge_and_fill_trajectories"], ["def", "get_trajectories", "(", "opt_dict", ",", "methods", "=", "[", "\"RE\"", ",", "\"RS\"", "]", ")", ":", "\n", "    ", "all_trajectories", "=", "{", "}", "\n", "\n", "for", "m", "in", "methods", ":", "\n", "        ", "dfs", "=", "[", "]", "\n", "data", "=", "opt_dict", "[", "m", "]", "\n", "losses", "=", "data", "[", "\"losses\"", "]", "\n", "times", "=", "data", "[", "\"time\"", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "losses", ")", ")", ":", "\n", "            ", "loss", "=", "losses", "[", "i", "]", "\n", "time", "=", "times", "[", "i", "]", "\n", "print", "(", "\"Seed: \"", ",", "i", ",", "\" MIN: \"", ",", "min", "(", "loss", ")", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "{", "str", "(", "i", ")", ":", "loss", "}", ",", "index", "=", "time", ")", "\n", "dfs", ".", "append", "(", "df", ")", "\n", "\n", "", "df", "=", "merge_and_fill_trajectories", "(", "dfs", ",", "default_value", "=", "None", ")", "\n", "if", "df", ".", "empty", ":", "\n", "            ", "continue", "\n", "", "print", "(", "m", ",", "df", ".", "shape", ")", "\n", "\n", "all_trajectories", "[", "m", "]", "=", "{", "\n", "\"time_stamps\"", ":", "np", ".", "array", "(", "df", ".", "index", ")", ",", "\n", "\"losses\"", ":", "np", ".", "array", "(", "df", ".", "T", ")", ",", "\n", "}", "\n", "\n", "", "return", "all_trajectories", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.util.merge_and_fill_trajectories": [[73, 88], ["pandas.DataFrame().join", "df.fillna.fillna", "df.fillna.fillna", "df.fillna.fillna", "pandas.DataFrame"], "function", ["None"], ["", "def", "merge_and_fill_trajectories", "(", "pandas_data_frames", ",", "default_value", "=", "None", ")", ":", "\n", "# merge all tracjectories keeping all time steps", "\n", "    ", "df", "=", "pd", ".", "DataFrame", "(", ")", ".", "join", "(", "pandas_data_frames", ",", "how", "=", "\"outer\"", ")", "\n", "\n", "# forward fill to make it a propper step function", "\n", "df", "=", "df", ".", "fillna", "(", "method", "=", "\"ffill\"", ")", "\n", "\n", "if", "default_value", "is", "None", ":", "\n", "# backward fill to replace the NaNs for the early times by", "\n", "# the performance of a random configuration", "\n", "        ", "df", "=", "df", ".", "fillna", "(", "method", "=", "\"bfill\"", ")", "\n", "", "else", ":", "\n", "        ", "df", "=", "df", ".", "fillna", "(", "default_value", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.util.plot_losses": [[90, 171], ["incumbent_trajectories.items", "numpy.copy", "numpy.sqrt", "ax.fill_between", "ax.plot", "incumbent_trajectories.values", "print", "np.copy.mean", "numpy.median", "axins.plot", "min", "np.copy.var", "labels.get", "colors.get", "markers.get", "[].min", "labels.get", "colors.get", "markers.get"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "def", "plot_losses", "(", "\n", "fig", ",", "\n", "ax", ",", "\n", "axins", ",", "\n", "incumbent_trajectories", ",", "\n", "regret", "=", "True", ",", "\n", "incumbent", "=", "None", ",", "\n", "show", "=", "True", ",", "\n", "linewidth", "=", "3", ",", "\n", "marker_size", "=", "10", ",", "\n", "xscale", "=", "\"log\"", ",", "\n", "xlabel", "=", "\"wall clock time [s]\"", ",", "\n", "yscale", "=", "\"log\"", ",", "\n", "ylabel", "=", "None", ",", "\n", "legend_loc", "=", "\"best\"", ",", "\n", "xlim", "=", "None", ",", "\n", "ylim", "=", "None", ",", "\n", "plot_mean", "=", "True", ",", "\n", "labels", "=", "{", "}", ",", "\n", "markers", "=", "markers", ",", "\n", "colors", "=", "colors", ",", "\n", "figsize", "=", "(", "16", ",", "9", ")", ",", "\n", ")", ":", "\n", "\n", "    ", "if", "regret", ":", "\n", "        ", "if", "ylabel", "is", "None", ":", "\n", "            ", "ylabel", "=", "\"regret\"", "\n", "# find lowest performance in the data to update incumbent", "\n", "\n", "", "if", "incumbent", "is", "None", ":", "\n", "            ", "incumbent", "=", "np", ".", "inf", "\n", "for", "tr", "in", "incumbent_trajectories", ".", "values", "(", ")", ":", "\n", "                ", "incumbent", "=", "min", "(", "tr", "[", "\"losses\"", "]", "[", ":", ",", "-", "1", "]", ".", "min", "(", ")", ",", "incumbent", ")", "\n", "", "print", "(", "\"incumbent value: \"", ",", "incumbent", ")", "\n", "\n", "", "", "for", "m", ",", "tr", "in", "incumbent_trajectories", ".", "items", "(", ")", ":", "\n", "        ", "trajectory", "=", "np", ".", "copy", "(", "tr", "[", "\"losses\"", "]", ")", "\n", "if", "trajectory", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "regret", ":", "\n", "            ", "trajectory", "-=", "incumbent", "\n", "\n", "", "sem", "=", "np", ".", "sqrt", "(", "trajectory", ".", "var", "(", "axis", "=", "0", ",", "ddof", "=", "1", ")", "/", "tr", "[", "\"losses\"", "]", ".", "shape", "[", "0", "]", ")", "\n", "if", "plot_mean", ":", "\n", "            ", "mean", "=", "trajectory", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "np", ".", "median", "(", "trajectory", ",", "axis", "=", "0", ")", "\n", "sem", "*=", "1.253", "\n", "\n", "", "ax", ".", "fill_between", "(", "\n", "tr", "[", "\"time_stamps\"", "]", ",", "\n", "mean", "-", "2", "*", "sem", ",", "\n", "mean", "+", "2", "*", "sem", ",", "\n", "color", "=", "colors", "[", "m", "]", ",", "\n", "alpha", "=", "0.2", ",", "\n", ")", "\n", "\n", "ax", ".", "plot", "(", "\n", "tr", "[", "\"time_stamps\"", "]", ",", "\n", "mean", ",", "\n", "label", "=", "labels", ".", "get", "(", "m", ",", "m", ")", ",", "\n", "color", "=", "colors", ".", "get", "(", "m", ",", "None", ")", ",", "\n", "linewidth", "=", "linewidth", ",", "\n", "marker", "=", "markers", ".", "get", "(", "m", ",", "None", ")", ",", "\n", "markersize", "=", "marker_size", ",", "\n", "markevery", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", ")", "\n", "\n", "if", "axins", "is", "not", "None", ":", "\n", "            ", "axins", ".", "plot", "(", "\n", "tr", "[", "\"time_stamps\"", "]", ",", "\n", "mean", ",", "\n", "label", "=", "labels", ".", "get", "(", "m", ",", "m", ")", ",", "\n", "color", "=", "colors", ".", "get", "(", "m", ",", "None", ")", ",", "\n", "linewidth", "=", "linewidth", ",", "\n", "marker", "=", "markers", ".", "get", "(", "m", ",", "None", ")", ",", "\n", "markersize", "=", "marker_size", ",", "\n", "markevery", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", ")", "\n", "\n", "", "", "return", "(", "fig", ",", "ax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.util.plot_cells": [[179, 269], ["naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_nodes_from", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_nodes_from", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edge", "naslib.search_spaces.core.graph.Graph.add_edges_from", "matplotlib.subplots", "networkx.draw_networkx_nodes", "networkx.draw_networkx_labels", "networkx.draw_networkx_edges", "networkx.draw_networkx_edge_labels", "ax_top.set_title", "networkx.draw_networkx_nodes", "networkx.draw_networkx_labels", "networkx.draw_networkx_edges", "networkx.draw_networkx_edge_labels", "ax_bot.set_title", "matplotlib.tight_layout", "matplotlib.savefig", "print", "range", "range", "str", "dict", "str", "dict", "range", "range", "naslib.search_spaces.core.graph.Graph.nodes", "naslib.search_spaces.core.graph.Graph.edges", "naslib.search_spaces.core.graph.Graph.nodes", "naslib.search_spaces.core.graph.Graph.edges", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr._Dataset.nodes"], ["def", "plot_cells", "(", ")", ":", "\n", "    ", "cell", "=", "Graph", "(", ")", "\n", "cell", ".", "add_nodes_from", "(", "range", "(", "1", ",", "8", ")", ")", "\n", "cell", ".", "add_edge", "(", "1", ",", "3", ",", "op", "=", "\"sep_conv_3x3\"", ")", "\n", "cell", ".", "add_edge", "(", "1", ",", "4", ",", "op", "=", "\"identity\"", ")", "\n", "cell", ".", "add_edge", "(", "1", ",", "5", ",", "op", "=", "\"identity\"", ")", "\n", "cell", ".", "add_edge", "(", "1", ",", "6", ",", "op", "=", "\"identity\"", ")", "\n", "cell", ".", "add_edge", "(", "2", ",", "3", ",", "op", "=", "\"sep_conv_3x3\"", ")", "\n", "cell", ".", "add_edge", "(", "2", ",", "6", ",", "op", "=", "\"sep_conv_3x3\"", ")", "\n", "cell", ".", "add_edge", "(", "3", ",", "4", ",", "op", "=", "\"identity\"", ")", "\n", "cell", ".", "add_edge", "(", "2", ",", "5", ",", "op", "=", "\"dil_conv_5x5\"", ")", "\n", "cell", ".", "add_edges_from", "(", "[", "(", "i", ",", "7", ")", "for", "i", "in", "range", "(", "3", ",", "7", ")", "]", ")", "\n", "\n", "redu", "=", "Graph", "(", ")", "\n", "redu", ".", "add_nodes_from", "(", "range", "(", "1", ",", "8", ")", ")", "\n", "redu", ".", "add_edge", "(", "1", ",", "3", ",", "op", "=", "\"max_pool_3x3\"", ")", "\n", "redu", ".", "add_edge", "(", "1", ",", "4", ",", "op", "=", "\"max_pool_3x3\"", ")", "\n", "redu", ".", "add_edge", "(", "1", ",", "5", ",", "op", "=", "\"max_pool_3x3\"", ")", "\n", "redu", ".", "add_edge", "(", "2", ",", "3", ",", "op", "=", "\"max_pool_3x3\"", ")", "\n", "redu", ".", "add_edge", "(", "2", ",", "4", ",", "op", "=", "\"max_pool_3x3\"", ")", "\n", "redu", ".", "add_edge", "(", "2", ",", "5", ",", "op", "=", "\"identity\"", ")", "\n", "redu", ".", "add_edge", "(", "3", ",", "6", ",", "op", "=", "\"identity\"", ")", "\n", "redu", ".", "add_edge", "(", "4", ",", "6", ",", "op", "=", "\"identity\"", ")", "\n", "redu", ".", "add_edges_from", "(", "[", "(", "i", ",", "7", ")", "for", "i", "in", "range", "(", "3", ",", "7", ")", "]", ")", "\n", "\n", "fig", ",", "(", "ax_top", ",", "ax_bot", ")", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "1", ")", "\n", "\n", "pos", "=", "{", "\n", "1", ":", "[", "-", "1", ",", "0.5", "]", ",", "\n", "2", ":", "[", "-", "1", ",", "-", "0.5", "]", ",", "\n", "3", ":", "[", "0", ",", "0.35", "]", ",", "\n", "4", ":", "[", "0.6", ",", "0.5", "]", ",", "\n", "5", ":", "[", "0", ",", "-", "0.5", "]", ",", "\n", "6", ":", "[", "0.5", ",", "0", "]", ",", "\n", "7", ":", "[", "1", ",", "0", "]", ",", "\n", "}", "\n", "nx", ".", "draw_networkx_nodes", "(", "\n", "cell", ",", "pos", ",", "ax", "=", "ax_top", ",", "node_color", "=", "[", "\"g\"", ",", "\"g\"", ",", "\"y\"", ",", "\"y\"", ",", "\"y\"", ",", "\"y\"", ",", "\"m\"", "]", "\n", ")", "\n", "\n", "nx", ".", "draw_networkx_labels", "(", "cell", ",", "pos", ",", "{", "k", ":", "str", "(", "k", ")", "for", "k", "in", "cell", ".", "nodes", "(", ")", "}", ",", "ax", "=", "ax_top", ")", "\n", "nx", ".", "draw_networkx_edges", "(", "cell", ",", "pos", ",", "ax", "=", "ax_top", ")", "\n", "nx", ".", "draw_networkx_edge_labels", "(", "\n", "cell", ",", "\n", "pos", ",", "\n", "{", "\n", "(", "u", ",", "v", ")", ":", "d", ".", "op", "\n", "for", "u", ",", "v", ",", "d", "in", "cell", ".", "edges", "(", "data", "=", "True", ")", "\n", "if", "not", "isinstance", "(", "d", ".", "op", ",", "Identity", ")", "\n", "}", ",", "\n", "label_pos", "=", "0.68", ",", "\n", "ax", "=", "ax_top", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "\"white\"", ",", "alpha", "=", "0.4", ",", "edgecolor", "=", "\"white\"", ")", ",", "\n", "font_size", "=", "10", ",", "\n", ")", "\n", "ax_top", ".", "set_title", "(", "\"Normal cell\"", ")", "\n", "\n", "pos", "=", "{", "\n", "1", ":", "[", "-", "1", ",", "1", "]", ",", "\n", "2", ":", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "3", ":", "[", "0", ",", "1", "]", ",", "\n", "4", ":", "[", "0", ",", "-", "0.2", "]", ",", "\n", "5", ":", "[", "0", ",", "-", "1", "]", ",", "\n", "6", ":", "[", "0.55", ",", "0.1", "]", ",", "\n", "7", ":", "[", "1", ",", "0", "]", ",", "\n", "}", "\n", "nx", ".", "draw_networkx_nodes", "(", "\n", "redu", ",", "pos", ",", "ax", "=", "ax_bot", ",", "node_color", "=", "[", "\"g\"", ",", "\"g\"", ",", "\"y\"", ",", "\"y\"", ",", "\"y\"", ",", "\"y\"", ",", "\"m\"", "]", "\n", ")", "\n", "\n", "nx", ".", "draw_networkx_labels", "(", "redu", ",", "pos", ",", "{", "k", ":", "str", "(", "k", ")", "for", "k", "in", "redu", ".", "nodes", "(", ")", "}", ",", "ax", "=", "ax_bot", ")", "\n", "nx", ".", "draw_networkx_edges", "(", "redu", ",", "pos", ",", "ax", "=", "ax_bot", ")", "\n", "nx", ".", "draw_networkx_edge_labels", "(", "\n", "redu", ",", "\n", "pos", ",", "\n", "{", "\n", "(", "u", ",", "v", ")", ":", "d", ".", "op", "\n", "for", "u", ",", "v", ",", "d", "in", "redu", ".", "edges", "(", "data", "=", "True", ")", "\n", "if", "not", "isinstance", "(", "d", ".", "op", ",", "Identity", ")", "\n", "}", ",", "\n", "label_pos", "=", "0.68", ",", "\n", "ax", "=", "ax_bot", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "\"white\"", ",", "alpha", "=", "0.4", ",", "edgecolor", "=", "\"white\"", ")", ",", "\n", "font_size", "=", "10", ",", "\n", ")", "\n", "ax_bot", ".", "set_title", "(", "\"Reduction cell\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "\"darts_cells.pdf\"", ")", "\n", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.analysis.util.params_from_checkpoint": [[277, 283], ["print", "torch.load", "numpy.sum", "torch.device", "numpy.prod", "v.size", "model.values"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load"], ["def", "params_from_checkpoint", "(", ")", ":", "\n", "\n", "    ", "model", "=", "torch", ".", "load", "(", "\"darts/model_final.pth\"", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "[", "\n", "\"model\"", "\n", "]", "\n", "print", "(", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "values", "(", ")", ")", "/", "1e6", ",", "\"M\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.additional_primitives.DropPathWrapper.__init__": [[11, 15], ["naslib.search_spaces.core.primitives.AbstractPrimitive.__init__", "torch.device", "locals", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "op", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n", "self", ".", "op", "=", "op", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.additional_primitives.DropPathWrapper.forward": [[16, 29], ["additional_primitives.DropPathWrapper.op", "torch.FloatTensor().bernoulli_", "mask.to.to.to", "additional_primitives.DropPathWrapper.div_", "additional_primitives.DropPathWrapper.mul_", "isinstance", "torch.FloatTensor", "additional_primitives.DropPathWrapper.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "x", "=", "self", ".", "op", "(", "x", ",", "edge_data", ")", "\n", "if", "(", "\n", "edge_data", ".", "drop_path_prob", ">", "0.0", "\n", "and", "not", "isinstance", "(", "self", ".", "op", ",", "Identity", ")", "\n", "and", "self", ".", "training", "\n", ")", ":", "\n", "            ", "keep_prob", "=", "1.0", "-", "edge_data", ".", "drop_path_prob", "\n", "mask", "=", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "mask", "=", "mask", ".", "to", "(", "self", ".", "device", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.additional_primitives.DropPathWrapper.get_embedded_ops": [[30, 32], ["None"], "methods", ["None"], ["", "def", "get_embedded_ops", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "op", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.__init__": [[26, 50], ["print", "torch.device", "torch.cuda.is_available"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "predictor", ",", "config", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "predictor", "=", "predictor", "\n", "print", "(", "f'PREDICTOR: {predictor}'", ")", "#OWN CODE", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "experiment_type", "=", "config", ".", "experiment_type", "\n", "\n", "self", ".", "test_size", "=", "config", ".", "test_size", "\n", "self", ".", "train_size_single", "=", "config", ".", "train_size_single", "\n", "self", ".", "train_size_list", "=", "config", ".", "train_size_list", "\n", "self", ".", "fidelity_single", "=", "config", ".", "fidelity_single", "\n", "self", ".", "fidelity_list", "=", "config", ".", "fidelity_list", "\n", "self", ".", "max_hpo_time", "=", "config", ".", "max_hpo_time", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "self", ".", "metric", "=", "Metric", ".", "VAL_ACCURACY", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "results", "=", "[", "config", "]", "\n", "\n", "# mutation parameters", "\n", "self", ".", "uniform_random", "=", "config", ".", "uniform_random", "\n", "self", ".", "mutate_pool", "=", "10", "\n", "self", ".", "num_arches_to_mutate", "=", "5", "\n", "self", ".", "max_mutation_rate", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.adapt_search_space": [[51, 79], ["search_space.clone", "predictor_evaluator.PredictorEvaluator.predictor.set_ss_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.set_ss_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type"], ["", "def", "adapt_search_space", "(", "\n", "self", ",", "search_space", ",", "load_labeled", ",", "scope", "=", "None", ",", "dataset_api", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "search_space", ".", "clone", "(", ")", "\n", "self", ".", "scope", "=", "scope", "if", "scope", "else", "search_space", ".", "OPTIMIZER_SCOPE", "\n", "self", ".", "predictor", ".", "set_ss_type", "(", "self", ".", "search_space", ".", "get_type", "(", ")", ")", "\n", "self", ".", "load_labeled", "=", "load_labeled", "\n", "self", ".", "dataset_api", "=", "dataset_api", "\n", "\n", "# nasbench101 does not have full learning curves or hyperparameters", "\n", "if", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"nasbench101\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "False", "\n", "self", ".", "hyperparameters", "=", "False", "\n", "", "elif", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"nasbench201\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "True", "\n", "self", ".", "hyperparameters", "=", "True", "\n", "", "elif", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"darts\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "True", "\n", "self", ".", "hyperparameters", "=", "True", "\n", "", "elif", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"nlp\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "True", "\n", "self", ".", "hyperparameters", "=", "True", "\n", "", "elif", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"transbench101\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "True", "\n", "self", ".", "hyperparameters", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"This search space is not yet implemented in PredictorEvaluator.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.get_full_arch_info": [[81, 124], ["arch.query", "arch.query", "predictor_evaluator.PredictorEvaluator.predictor.get_data_reqs", "type", "arch.query", "arch.query", "arch.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.get_data_reqs", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "", "def", "get_full_arch_info", "(", "self", ",", "arch", ")", ":", "\n", "        ", "\"\"\"\n        Given an arch, return the accuracy, train_time,\n        and also a dict of extra info if required by the predictor\n        \"\"\"", "\n", "info_dict", "=", "{", "}", "\n", "accuracy", "=", "arch", ".", "query", "(", "\n", "metric", "=", "self", ".", "metric", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "\n", "train_time", "=", "arch", ".", "query", "(", "\n", "metric", "=", "Metric", ".", "TRAIN_TIME", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "\n", "data_reqs", "=", "self", ".", "predictor", ".", "get_data_reqs", "(", ")", "\n", "if", "data_reqs", "[", "\"requires_partial_lc\"", "]", ":", "\n", "# add partial learning curve if applicable", "\n", "            ", "assert", "self", ".", "full_lc", ",", "\"This predictor requires learning curve info\"", "\n", "if", "type", "(", "data_reqs", "[", "\"metric\"", "]", ")", "is", "list", ":", "\n", "                ", "for", "metric_i", "in", "data_reqs", "[", "\"metric\"", "]", ":", "\n", "                    ", "metric_lc", "=", "arch", ".", "query", "(", "\n", "metric", "=", "metric_i", ",", "\n", "full_lc", "=", "True", ",", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", "dataset_api", "=", "self", ".", "dataset_api", ",", "\n", ")", "\n", "info_dict", "[", "f\"{metric_i.name}_lc\"", "]", "=", "metric_lc", "\n", "\n", "", "", "else", ":", "\n", "                ", "lc", "=", "arch", ".", "query", "(", "\n", "metric", "=", "data_reqs", "[", "\"metric\"", "]", ",", "\n", "full_lc", "=", "True", ",", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", "dataset_api", "=", "self", ".", "dataset_api", ",", "\n", ")", "\n", "info_dict", "[", "\"lc\"", "]", "=", "lc", "\n", "", "if", "data_reqs", "[", "\"requires_hyperparameters\"", "]", ":", "\n", "                ", "assert", "(", "\n", "self", ".", "hyperparameters", "\n", ")", ",", "\"This predictor requires querying arch hyperparams\"", "\n", "for", "hp", "in", "data_reqs", "[", "\"hyperparams\"", "]", ":", "\n", "                    ", "info_dict", "[", "hp", "]", "=", "arch", ".", "query", "(", "\n", "Metric", ".", "HP", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "[", "hp", "]", "\n", "", "", "", "return", "accuracy", ",", "train_time", ",", "info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.load_dataset": [[125, 162], ["len", "predictor_evaluator.PredictorEvaluator.get_hash", "predictor_evaluator.PredictorEvaluator.get_full_arch_info", "xdata.append", "ydata.append", "info.append", "train_times.append", "predictor_evaluator.PredictorEvaluator.search_space.clone", "predictor_evaluator.PredictorEvaluator.sample_random_architecture", "predictor_evaluator.PredictorEvaluator.search_space.clone", "predictor_evaluator.PredictorEvaluator.load_labeled_architecture"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.load_labeled_architecture"], ["", "def", "load_dataset", "(", "self", ",", "load_labeled", "=", "False", ",", "data_size", "=", "10", ",", "arch_hash_map", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"\n        There are two ways to load an architecture.\n        load_labeled=False: sample a random architecture from the search space.\n        This works on NAS benchmarks where we can query any architecture (nasbench101/201/301)\n        load_labeled=True: sample a random architecture from a set of evaluated architectures.\n        When we only have data on a subset of the search space (e.g., the set of 5k DARTS\n        architectures that have the full training info).\n\n        After we load an architecture, query the final val accuracy.\n        If the predictor requires extra info such as partial learning curve info, query that too.\n        \"\"\"", "\n", "xdata", "=", "[", "]", "\n", "ydata", "=", "[", "]", "\n", "info", "=", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "while", "len", "(", "xdata", ")", "<", "data_size", ":", "\n", "            ", "if", "not", "load_labeled", ":", "\n", "                ", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "sample_random_architecture", "(", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "", "else", ":", "\n", "                ", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "load_labeled_architecture", "(", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "\n", "", "arch_hash", "=", "arch", ".", "get_hash", "(", ")", "\n", "if", "False", ":", "# removing this for consistency, for now", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "arch_hash_map", "[", "arch_hash", "]", "=", "True", "\n", "\n", "", "accuracy", ",", "train_time", ",", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "xdata", ".", "append", "(", "arch", ")", "\n", "ydata", ".", "append", "(", "accuracy", ")", "\n", "info", ".", "append", "(", "info_dict", ")", "\n", "train_times", ".", "append", "(", "train_time", ")", "\n", "\n", "", "return", "[", "xdata", ",", "ydata", ",", "info", ",", "train_times", "]", ",", "arch_hash_map", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.load_mutated_test": [[163, 221], ["len", "predictor_evaluator.PredictorEvaluator.search_space.clone", "xdata[].clone.sample_random_architecture", "xdata[].clone.get_hash", "predictor_evaluator.PredictorEvaluator.get_full_arch_info", "xdata.append", "ydata.append", "info.append", "train_times.append", "numpy.flip", "len", "numpy.random.choice", "xdata[].clone", "range", "xdata[].clone.get_hash", "predictor_evaluator.PredictorEvaluator.get_full_arch_info", "xdata.append", "ydata.append", "info.append", "train_times.append", "numpy.argsort", "numpy.random.choice", "predictor_evaluator.PredictorEvaluator.search_space.clone", "predictor_evaluator.PredictorEvaluator.mutate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate"], ["", "def", "load_mutated_test", "(", "self", ",", "data_size", "=", "10", ",", "arch_hash_map", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"\n        Load a test set not uniformly at random, but by picking some random\n        architectures and then mutation the best ones. This better emulates\n        distributions in local or mutation-based NAS algorithms.\n        \"\"\"", "\n", "assert", "(", "\n", "self", ".", "load_labeled", "==", "False", "\n", ")", ",", "\"Mutation is only implemented for load_labeled = False\"", "\n", "xdata", "=", "[", "]", "\n", "ydata", "=", "[", "]", "\n", "info", "=", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "\n", "# step 1: create a large pool of architectures", "\n", "while", "len", "(", "xdata", ")", "<", "self", ".", "mutate_pool", ":", "\n", "            ", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "sample_random_architecture", "(", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch_hash", "=", "arch", ".", "get_hash", "(", ")", "\n", "if", "arch_hash", "in", "arch_hash_map", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "arch_hash_map", "[", "arch_hash", "]", "=", "True", "\n", "", "accuracy", ",", "train_time", ",", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "xdata", ".", "append", "(", "arch", ")", "\n", "ydata", ".", "append", "(", "accuracy", ")", "\n", "info", ".", "append", "(", "info_dict", ")", "\n", "train_times", ".", "append", "(", "train_time", ")", "\n", "\n", "# step 2: prune the pool down to the top 5 architectures", "\n", "", "indices", "=", "np", ".", "flip", "(", "np", ".", "argsort", "(", "ydata", ")", ")", "[", ":", "self", ".", "num_arches_to_mutate", "]", "\n", "xdata", "=", "[", "xdata", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "ydata", "=", "[", "ydata", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "info", "=", "[", "info", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "train_times", "=", "[", "train_times", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n", "# step 3: mutate the top architectures to generate the full list", "\n", "while", "len", "(", "xdata", ")", "<", "data_size", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_arches_to_mutate", ")", "\n", "arch", "=", "xdata", "[", "idx", "]", ".", "clone", "(", ")", "\n", "mutation_factor", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "max_mutation_rate", ")", "+", "1", "\n", "for", "i", "in", "range", "(", "mutation_factor", ")", ":", "\n", "                ", "new_arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "new_arch", ".", "mutate", "(", "arch", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch", "=", "new_arch", "\n", "\n", "", "arch_hash", "=", "arch", ".", "get_hash", "(", ")", "\n", "if", "arch_hash", "in", "arch_hash_map", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "arch_hash_map", "[", "arch_hash", "]", "=", "True", "\n", "", "accuracy", ",", "train_time", ",", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "xdata", ".", "append", "(", "arch", ")", "\n", "ydata", ".", "append", "(", "accuracy", ")", "\n", "info", ".", "append", "(", "info_dict", ")", "\n", "train_times", ".", "append", "(", "train_time", ")", "\n", "\n", "", "return", "[", "xdata", ",", "ydata", ",", "info", ",", "train_times", "]", ",", "arch_hash_map", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.load_mutated_train": [[222, 254], ["len", "numpy.random.choice", "predictor_evaluator.PredictorEvaluator.search_space.clone", "predictor_evaluator.PredictorEvaluator.mutate", "predictor_evaluator.PredictorEvaluator.get_hash", "predictor_evaluator.PredictorEvaluator.get_full_arch_info", "xdata.append", "ydata.append", "info.append", "train_times.append", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info"], ["", "def", "load_mutated_train", "(", "self", ",", "data_size", "=", "10", ",", "arch_hash_map", "=", "{", "}", ",", "test_data", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load a training set not uniformly at random, but by picking architectures\n        from the test set and mutating the best ones. There is still no overlap\n        between the training and test sets. This better emulates local or\n        mutation-based NAS algorithms.\n        \"\"\"", "\n", "assert", "(", "\n", "self", ".", "load_labeled", "==", "False", "\n", ")", ",", "\"Mutation is only implemented for load_labeled = False\"", "\n", "xdata", "=", "[", "]", "\n", "ydata", "=", "[", "]", "\n", "info", "=", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "\n", "while", "len", "(", "xdata", ")", "<", "data_size", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "test_data", "[", "0", "]", ")", ")", "\n", "parent", "=", "test_data", "[", "0", "]", "[", "idx", "]", "\n", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "mutate", "(", "parent", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch_hash", "=", "arch", ".", "get_hash", "(", ")", "\n", "if", "arch_hash", "in", "arch_hash_map", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "arch_hash_map", "[", "arch_hash", "]", "=", "True", "\n", "", "accuracy", ",", "train_time", ",", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "xdata", ".", "append", "(", "arch", ")", "\n", "ydata", ".", "append", "(", "accuracy", ")", "\n", "info", ".", "append", "(", "info_dict", ")", "\n", "train_times", ".", "append", "(", "train_time", ")", "\n", "\n", "", "return", "[", "xdata", ",", "ydata", ",", "info", ",", "train_times", "]", ",", "arch_hash_map", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.single_evaluate": [[255, 341], ["len", "predictor_evaluator.PredictorEvaluator.predictor.get_data_reqs", "logger.info", "predictor_evaluator.PredictorEvaluator.predictor.reset_hyperparams", "time.time", "predictor_evaluator.PredictorEvaluator.predictor.fit", "predictor_evaluator.PredictorEvaluator.predictor.get_hyperparams", "time.time", "predictor_evaluator.PredictorEvaluator.predictor.query", "time.time", "logger.info", "predictor_evaluator.PredictorEvaluator.compare", "numpy.sum", "logger.info", "logger.info", "predictor_evaluator.PredictorEvaluator.results.append", "copy.deepcopy", "copy.deepcopy", "predictor_evaluator.PredictorEvaluator.predictor.get_hpo_wrapper", "predictor_evaluator.PredictorEvaluator.run_hpo", "predictor_evaluator.PredictorEvaluator.predictor.set_hyperparams", "len", "numpy.mean", "len", "len", "numpy.round", "type", "info_dict.keys", "info_dict.keys", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.get_data_reqs", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.reset_hyperparams", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.get_hyperparams", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.compare", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.get_hpo_wrapper", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.run_hpo", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_hyperparams"], ["", "def", "single_evaluate", "(", "self", ",", "train_data", ",", "test_data", ",", "fidelity", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the predictor for a single (train_data / fidelity) pair\n        \"\"\"", "\n", "xtrain", ",", "ytrain", ",", "train_info", ",", "train_times", "=", "train_data", "\n", "xtest", ",", "ytest", ",", "test_info", ",", "_", "=", "test_data", "\n", "train_size", "=", "len", "(", "xtrain", ")", "\n", "\n", "data_reqs", "=", "self", ".", "predictor", ".", "get_data_reqs", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Fit the predictor\"", ")", "\n", "if", "data_reqs", "[", "\"requires_partial_lc\"", "]", ":", "\n", "            ", "\"\"\"\n            todo: distinguish between predictors that need LC info\n            at training time vs test time\n            \"\"\"", "\n", "train_info", "=", "copy", ".", "deepcopy", "(", "train_info", ")", "\n", "test_info", "=", "copy", ".", "deepcopy", "(", "test_info", ")", "\n", "for", "info_dict", "in", "train_info", ":", "\n", "                ", "lc_related_keys", "=", "[", "key", "for", "key", "in", "info_dict", ".", "keys", "(", ")", "if", "\"lc\"", "in", "key", "]", "\n", "for", "lc_key", "in", "lc_related_keys", ":", "\n", "                    ", "info_dict", "[", "lc_key", "]", "=", "info_dict", "[", "lc_key", "]", "[", ":", "fidelity", "]", "\n", "\n", "", "", "for", "info_dict", "in", "test_info", ":", "\n", "                ", "lc_related_keys", "=", "[", "key", "for", "key", "in", "info_dict", ".", "keys", "(", ")", "if", "\"lc\"", "in", "key", "]", "\n", "for", "lc_key", "in", "lc_related_keys", ":", "\n", "                    ", "info_dict", "[", "lc_key", "]", "=", "info_dict", "[", "lc_key", "]", "[", ":", "fidelity", "]", "\n", "\n", "", "", "", "self", ".", "predictor", ".", "reset_hyperparams", "(", ")", "\n", "fit_time_start", "=", "time", ".", "time", "(", ")", "\n", "cv_score", "=", "0", "\n", "if", "(", "\n", "self", ".", "max_hpo_time", ">", "0", "\n", "and", "len", "(", "xtrain", ")", ">=", "10", "\n", "and", "self", ".", "predictor", ".", "get_hpo_wrapper", "(", ")", "\n", ")", ":", "\n", "\n", "# run cross-validation (for model-based predictors)", "\n", "            ", "hyperparams", ",", "cv_score", "=", "self", ".", "run_hpo", "(", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "train_info", ",", "\n", "start_time", "=", "fit_time_start", ",", "\n", "metric", "=", "\"kendalltau\"", ",", "\n", ")", "\n", "self", ".", "predictor", ".", "set_hyperparams", "(", "hyperparams", ")", "\n", "\n", "", "self", ".", "predictor", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "train_info", ")", "\n", "hyperparams", "=", "self", ".", "predictor", ".", "get_hyperparams", "(", ")", "\n", "\n", "fit_time_end", "=", "time", ".", "time", "(", ")", "\n", "test_pred", "=", "self", ".", "predictor", ".", "query", "(", "xtest", ",", "test_info", ")", "\n", "query_time_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# If the predictor is an ensemble, take the mean", "\n", "if", "len", "(", "test_pred", ".", "shape", ")", ">", "1", ":", "\n", "            ", "test_pred", "=", "np", ".", "mean", "(", "test_pred", ",", "axis", "=", "0", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Compute evaluation metrics\"", ")", "\n", "results_dict", "=", "self", ".", "compare", "(", "ytest", ",", "test_pred", ")", "\n", "results_dict", "[", "\"train_size\"", "]", "=", "train_size", "\n", "results_dict", "[", "\"fidelity\"", "]", "=", "fidelity", "\n", "results_dict", "[", "\"train_time\"", "]", "=", "np", ".", "sum", "(", "train_times", ")", "\n", "results_dict", "[", "\"fit_time\"", "]", "=", "fit_time_end", "-", "fit_time_start", "\n", "results_dict", "[", "\"query_time\"", "]", "=", "(", "query_time_end", "-", "fit_time_end", ")", "/", "len", "(", "xtest", ")", "\n", "if", "hyperparams", ":", "\n", "            ", "for", "key", "in", "hyperparams", ":", "\n", "                ", "results_dict", "[", "\"hp_\"", "+", "key", "]", "=", "hyperparams", "[", "key", "]", "\n", "", "", "results_dict", "[", "\"cv_score\"", "]", "=", "cv_score", "\n", "# print abridged results on one line:", "\n", "logger", ".", "info", "(", "\n", "\"train_size: {}, fidelity: {}, kendall tau {}\"", ".", "format", "(", "\n", "train_size", ",", "fidelity", ",", "np", ".", "round", "(", "results_dict", "[", "\"kendalltau\"", "]", ",", "4", ")", "\n", ")", "\n", ")", "\n", "# print entire results dict:", "\n", "print_string", "=", "\"\"", "\n", "for", "key", "in", "results_dict", ":", "\n", "            ", "if", "type", "(", "results_dict", "[", "key", "]", ")", "not", "in", "[", "str", ",", "set", ",", "bool", "]", ":", "\n", "# todo: serialize other types", "\n", "                ", "print_string", "+=", "key", "+", "\": {}, \"", ".", "format", "(", "np", ".", "round", "(", "results_dict", "[", "key", "]", ",", "4", ")", ")", "\n", "", "", "logger", ".", "info", "(", "print_string", ")", "\n", "self", ".", "results", ".", "append", "(", "results_dict", ")", "\n", "\"\"\"\n        Todo: query_time currently does not include the time taken to train a partial learning curve\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.evaluate": [[342, 416], ["predictor_evaluator.PredictorEvaluator.predictor.pre_process", "logger.info", "logger.info", "predictor_evaluator.PredictorEvaluator.predictor.get_data_reqs", "predictor_evaluator.PredictorEvaluator.predictor.pre_compute", "predictor_evaluator.PredictorEvaluator._log_to_json", "predictor_evaluator.PredictorEvaluator.load_dataset", "predictor_evaluator.PredictorEvaluator.load_mutated_test", "predictor_evaluator.PredictorEvaluator.load_dataset", "predictor_evaluator.PredictorEvaluator.load_mutated_train", "logger.info", "predictor_evaluator.PredictorEvaluator.load_dataset", "predictor_evaluator.PredictorEvaluator.single_evaluate", "predictor_evaluator.PredictorEvaluator.single_evaluate", "predictor_evaluator.PredictorEvaluator.single_evaluate", "NotImplementedError", "predictor_evaluator.PredictorEvaluator.single_evaluate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v1.ZeroCostV1.pre_process", "home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.get_data_reqs", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.pre_compute", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator._log_to_json", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_mutated_test", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_mutated_train", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "predictor", ".", "pre_process", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Load the test set\"", ")", "\n", "if", "self", ".", "uniform_random", ":", "\n", "            ", "test_data", ",", "arch_hash_map", "=", "self", ".", "load_dataset", "(", "\n", "load_labeled", "=", "self", ".", "load_labeled", ",", "data_size", "=", "self", ".", "test_size", "\n", ")", "\n", "", "else", ":", "\n", "            ", "test_data", ",", "arch_hash_map", "=", "self", ".", "load_mutated_test", "(", "data_size", "=", "self", ".", "test_size", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Load the training set\"", ")", "\n", "max_train_size", "=", "self", ".", "train_size_single", "\n", "\n", "if", "self", ".", "experiment_type", "in", "[", "\"vary_train_size\"", ",", "\"vary_both\"", "]", ":", "\n", "            ", "max_train_size", "=", "self", ".", "train_size_list", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "uniform_random", ":", "\n", "            ", "full_train_data", ",", "_", "=", "self", ".", "load_dataset", "(", "\n", "load_labeled", "=", "self", ".", "load_labeled", ",", "\n", "data_size", "=", "max_train_size", ",", "\n", "arch_hash_map", "=", "arch_hash_map", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "full_train_data", ",", "_", "=", "self", ".", "load_mutated_train", "(", "\n", "data_size", "=", "max_train_size", ",", "\n", "arch_hash_map", "=", "arch_hash_map", ",", "\n", "test_data", "=", "test_data", ",", "\n", ")", "\n", "\n", "# if the predictor requires unlabeled data (e.g. SemiNAS), generate it:", "\n", "", "reqs", "=", "self", ".", "predictor", ".", "get_data_reqs", "(", ")", "\n", "unlabeled_data", "=", "None", "\n", "if", "reqs", "[", "\"unlabeled\"", "]", ":", "\n", "            ", "logger", ".", "info", "(", "\"Load unlabeled data\"", ")", "\n", "unlabeled_size", "=", "max_train_size", "*", "reqs", "[", "\"unlabeled_factor\"", "]", "\n", "[", "unlabeled_data", ",", "_", ",", "_", ",", "_", "]", ",", "_", "=", "self", ".", "load_dataset", "(", "\n", "load_labeled", "=", "self", ".", "load_labeled", ",", "\n", "data_size", "=", "unlabeled_size", ",", "\n", "arch_hash_map", "=", "arch_hash_map", ",", "\n", ")", "\n", "\n", "# some of the predictors use a pre-computation step to save time in batch experiments:", "\n", "", "self", ".", "predictor", ".", "pre_compute", "(", "full_train_data", "[", "0", "]", ",", "test_data", "[", "0", "]", ",", "unlabeled_data", ")", "\n", "\n", "if", "self", ".", "experiment_type", "==", "\"single\"", ":", "\n", "            ", "train_size", "=", "self", ".", "train_size_single", "\n", "fidelity", "=", "self", ".", "fidelity_single", "\n", "self", ".", "single_evaluate", "(", "full_train_data", ",", "test_data", ",", "fidelity", "=", "fidelity", ")", "\n", "\n", "", "elif", "self", ".", "experiment_type", "==", "\"vary_train_size\"", ":", "\n", "            ", "fidelity", "=", "self", ".", "fidelity_single", "\n", "for", "train_size", "in", "self", ".", "train_size_list", ":", "\n", "                ", "train_data", "=", "[", "data", "[", ":", "train_size", "]", "for", "data", "in", "full_train_data", "]", "\n", "self", ".", "single_evaluate", "(", "train_data", ",", "test_data", ",", "fidelity", "=", "fidelity", ")", "\n", "\n", "", "", "elif", "self", ".", "experiment_type", "==", "\"vary_fidelity\"", ":", "\n", "            ", "train_size", "=", "self", ".", "train_size_single", "\n", "for", "fidelity", "in", "self", ".", "fidelity_list", ":", "\n", "                ", "self", ".", "single_evaluate", "(", "full_train_data", ",", "test_data", ",", "fidelity", "=", "fidelity", ")", "\n", "\n", "", "", "elif", "self", ".", "experiment_type", "==", "\"vary_both\"", ":", "\n", "            ", "for", "train_size", "in", "self", ".", "train_size_list", ":", "\n", "                ", "train_data", "=", "[", "data", "[", ":", "train_size", "]", "for", "data", "in", "full_train_data", "]", "\n", "\n", "for", "fidelity", "in", "self", ".", "fidelity_list", ":", "\n", "                    ", "self", ".", "single_evaluate", "(", "train_data", ",", "test_data", ",", "fidelity", "=", "fidelity", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "self", ".", "_log_to_json", "(", ")", "\n", "return", "self", ".", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.compare": [[417, 471], ["numpy.array", "numpy.array", "numpy.mean", "sklearn.metrics.mean_squared_error", "numpy.abs", "numpy.isnan", "logger.info", "logger.info", "logger.info", "abs", "scipy.stats.spearmanr", "scipy.stats.kendalltau", "scipy.stats.kendalltau", "scipy.stats.kendalltau", "numpy.array", "numpy.array", "numpy.isfinite", "numpy.corrcoef", "numpy.round", "numpy.round", "sum", "float", "sorted", "sorted", "max", "max", "len", "len"], "methods", ["None"], ["", "def", "compare", "(", "self", ",", "ytest", ",", "test_pred", ")", ":", "\n", "        ", "ytest", "=", "np", ".", "array", "(", "ytest", ")", "\n", "test_pred", "=", "np", ".", "array", "(", "test_pred", ")", "\n", "METRICS", "=", "[", "\n", "\"mae\"", ",", "\n", "\"rmse\"", ",", "\n", "\"pearson\"", ",", "\n", "\"spearman\"", ",", "\n", "\"kendalltau\"", ",", "\n", "\"kt_2dec\"", ",", "\n", "\"kt_1dec\"", ",", "\n", "\"precision_10\"", ",", "\n", "\"precision_20\"", ",", "\n", "]", "\n", "metrics_dict", "=", "{", "}", "\n", "\n", "try", ":", "\n", "            ", "metrics_dict", "[", "\"mae\"", "]", "=", "np", ".", "mean", "(", "abs", "(", "test_pred", "-", "ytest", ")", ")", "\n", "metrics_dict", "[", "\"rmse\"", "]", "=", "metrics", ".", "mean_squared_error", "(", "\n", "ytest", ",", "test_pred", ",", "squared", "=", "False", "\n", ")", "\n", "metrics_dict", "[", "\"pearson\"", "]", "=", "np", ".", "abs", "(", "np", ".", "corrcoef", "(", "ytest", ",", "test_pred", ")", "[", "1", ",", "0", "]", ")", "\n", "metrics_dict", "[", "\"spearman\"", "]", "=", "stats", ".", "spearmanr", "(", "ytest", ",", "test_pred", ")", "[", "0", "]", "\n", "metrics_dict", "[", "\"kendalltau\"", "]", "=", "stats", ".", "kendalltau", "(", "ytest", ",", "test_pred", ")", "[", "0", "]", "\n", "metrics_dict", "[", "\"kt_2dec\"", "]", "=", "stats", ".", "kendalltau", "(", "\n", "ytest", ",", "np", ".", "round", "(", "test_pred", ",", "decimals", "=", "2", ")", "\n", ")", "[", "0", "]", "\n", "metrics_dict", "[", "\"kt_1dec\"", "]", "=", "stats", ".", "kendalltau", "(", "\n", "ytest", ",", "np", ".", "round", "(", "test_pred", ",", "decimals", "=", "1", ")", "\n", ")", "[", "0", "]", "\n", "for", "k", "in", "[", "10", ",", "20", "]", ":", "\n", "                ", "top_ytest", "=", "np", ".", "array", "(", "\n", "[", "y", ">", "sorted", "(", "ytest", ")", "[", "max", "(", "-", "len", "(", "ytest", ")", ",", "-", "k", "-", "1", ")", "]", "for", "y", "in", "ytest", "]", "\n", ")", "\n", "top_test_pred", "=", "np", ".", "array", "(", "\n", "[", "\n", "y", ">", "sorted", "(", "test_pred", ")", "[", "max", "(", "-", "len", "(", "test_pred", ")", ",", "-", "k", "-", "1", ")", "]", "\n", "for", "y", "in", "test_pred", "\n", "]", "\n", ")", "\n", "metrics_dict", "[", "\"precision_{}\"", ".", "format", "(", "k", ")", "]", "=", "(", "\n", "sum", "(", "top_ytest", "&", "top_test_pred", ")", "/", "k", "\n", ")", "\n", "", "", "except", ":", "\n", "            ", "for", "metric", "in", "METRICS", ":", "\n", "                ", "metrics_dict", "[", "metric", "]", "=", "float", "(", "\"nan\"", ")", "\n", "", "", "if", "np", ".", "isnan", "(", "metrics_dict", "[", "\"pearson\"", "]", ")", "or", "not", "np", ".", "isfinite", "(", "\n", "metrics_dict", "[", "\"pearson\"", "]", "\n", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Error when computing metrics. ytest and test_pred are:\"", ")", "\n", "logger", ".", "info", "(", "ytest", ")", "\n", "logger", ".", "info", "(", "test_pred", ")", "\n", "\n", "", "return", "metrics_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator.run_hpo": [[472, 520], ["logger.info", "len", "naslib.utils.generate_kfold", "copy.deepcopy", "math.isnan", "logger.info", "logger.info", "copy.deepcopy.set_random_hyperparams", "naslib.utils.cross_validation", "best_hyperparams.copy", "numpy.isnan", "logger.info", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.generate_kfold", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.set_random_hyperparams", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.cross_validation", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["", "def", "run_hpo", "(", "\n", "self", ",", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "train_info", ",", "\n", "start_time", ",", "\n", "metric", "=", "\"kendalltau\"", ",", "\n", "max_iters", "=", "5000", ",", "\n", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Starting cross validation\"", ")", "\n", "n_train", "=", "len", "(", "xtrain", ")", "\n", "split_indices", "=", "generate_kfold", "(", "n_train", ",", "3", ")", "\n", "# todo: try to run this without copying the predictor", "\n", "predictor", "=", "copy", ".", "deepcopy", "(", "self", ".", "predictor", ")", "\n", "\n", "best_score", "=", "-", "1e6", "\n", "best_hyperparams", "=", "None", "\n", "\n", "t", "=", "0", "\n", "while", "t", "<", "max_iters", ":", "\n", "            ", "t", "+=", "1", "\n", "hyperparams", "=", "predictor", ".", "set_random_hyperparams", "(", ")", "\n", "cv_score", "=", "cross_validation", "(", "\n", "xtrain", ",", "ytrain", ",", "predictor", ",", "split_indices", ",", "metric", "\n", ")", "\n", "if", "np", ".", "isnan", "(", "cv_score", ")", "or", "cv_score", "<", "0", ":", "\n", "# todo: this will not work for mae/rmse", "\n", "                ", "cv_score", "=", "0", "\n", "\n", "", "if", "cv_score", ">", "best_score", "or", "t", "==", "0", ":", "\n", "                ", "best_hyperparams", "=", "hyperparams", "\n", "best_score", "=", "cv_score", "\n", "logger", ".", "info", "(", "f\"new best score={cv_score}, hparams = {hyperparams}\"", ")", "\n", "\n", "", "if", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ">", "self", ".", "max_hpo_time", "*", "(", "\n", "len", "(", "xtrain", ")", "/", "1000", "\n", ")", "+", "20", ":", "\n", "# we always give at least 20 seconds, and the time scales with train_size", "\n", "                ", "break", "\n", "\n", "", "", "if", "math", ".", "isnan", "(", "best_score", ")", ":", "\n", "            ", "best_hyperparams", "=", "predictor", ".", "default_hyperparams", "\n", "\n", "", "logger", ".", "info", "(", "f\"Finished {t} rounds\"", ")", "\n", "logger", ".", "info", "(", "f\"Best hyperparams = {best_hyperparams} Score = {best_score}\"", ")", "\n", "self", ".", "predictor", ".", "hyperparams", "=", "best_hyperparams", "\n", "\n", "return", "best_hyperparams", ".", "copy", "(", ")", ",", "best_score", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.predictor_evaluator.PredictorEvaluator._log_to_json": [[521, 529], ["os.path.exists", "os.makedirs", "codecs.open", "json.dump", "os.path.join"], "methods", ["None"], ["", "def", "_log_to_json", "(", "self", ")", ":", "\n", "        ", "\"\"\"log statistics to json file\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "save", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "save", ")", "\n", "", "with", "codecs", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "save", ",", "\"errors.json\"", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "results", ",", "file", ",", "separators", "=", "(", "\",\"", ",", "\":\"", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.__init__": [[34, 73], ["torch.device", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "optimizer.get_model_size", "logger.info", "naslib.utils.utils.AttrDict", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.get_model_size"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "config", ",", "lightweight_output", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the trainer.\n\n        Args:\n            optimizer: A NASLib optimizer\n            config (AttrDict): The configuration loaded from a yaml file, e.g\n                via  `utils.get_config_from_args()`\n        \"\"\"", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "epochs", "=", "self", ".", "config", ".", "search", ".", "epochs", "\n", "self", ".", "lightweight_output", "=", "lightweight_output", "\n", "\n", "# preparations", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# measuring stuff", "\n", "self", ".", "train_top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "train_top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "train_loss", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "val_top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "val_top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "val_loss", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "n_parameters", "=", "optimizer", ".", "get_model_size", "(", ")", "\n", "logger", ".", "info", "(", "\"param size = %fMB\"", ",", "n_parameters", ")", "\n", "self", ".", "errors_dict", "=", "utils", ".", "AttrDict", "(", "\n", "{", "\n", "\"train_acc\"", ":", "[", "]", ",", "\n", "\"train_loss\"", ":", "[", "]", ",", "\n", "\"valid_acc\"", ":", "[", "]", ",", "\n", "\"valid_loss\"", ":", "[", "]", ",", "\n", "\"test_acc\"", ":", "[", "]", ",", "\n", "\"test_loss\"", ":", "[", "]", ",", "\n", "\"runtime\"", ":", "[", "]", ",", "\n", "\"train_time\"", ":", "[", "]", ",", "\n", "\"arch_eval\"", ":", "[", "]", ",", "\n", "\"params\"", ":", "n_parameters", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.search": [[76, 207], ["logger.info", "numpy.random.seed", "torch.manual_seed", "trainer.Trainer.optimizer.before_training", "range", "trainer.Trainer.optimizer.after_training", "logger.info", "trainer.Trainer.build_search_scheduler", "trainer.Trainer._setup_checkpointers", "trainer.Trainer._setup_checkpointers", "trainer.Trainer.build_search_dataloaders", "time.time", "trainer.Trainer.optimizer.new_epoch", "trainer.Trainer.periodic_checkpointer.step", "trainer.Trainer.optimizer.test_statistics", "trainer.Trainer._log_to_json", "trainer.Trainer._log_and_reset_accuracies", "summary_writer.close", "enumerate", "trainer.Trainer.scheduler.step", "time.time", "trainer.Trainer.errors_dict.train_acc.append", "trainer.Trainer.errors_dict.train_loss.append", "trainer.Trainer.errors_dict.valid_acc.append", "trainer.Trainer.errors_dict.valid_loss.append", "trainer.Trainer.errors_dict.runtime.append", "time.time", "trainer.Trainer.optimizer.train_statistics", "trainer.Trainer.errors_dict.train_acc.append", "trainer.Trainer.errors_dict.train_loss.append", "trainer.Trainer.errors_dict.valid_acc.append", "trainer.Trainer.errors_dict.valid_loss.append", "trainer.Trainer.errors_dict.test_acc.append", "trainer.Trainer.errors_dict.test_loss.append", "trainer.Trainer.errors_dict.runtime.append", "trainer.Trainer.errors_dict.train_time.append", "trainer.Trainer.errors_dict.arch_eval.append", "naslib.utils.logging.log_every_n_seconds", "after_epoch", "next", "trainer.Trainer.optimizer.step", "trainer.Trainer._store_accuracies", "trainer.Trainer._store_accuracies", "naslib.utils.logging.log_every_n_seconds", "torch.cuda.is_available", "trainer.Trainer.train_loss.update", "trainer.Trainer.val_loss.update", "data_train[].to", "data_train[].to", "iter", "data_val[].to", "data_val[].to", "naslib.utils.logging.log_first_n", "float", "float", "trainer.Trainer.scheduler.get_last_lr", "train_loss.detach().cpu", "val_loss.detach().cpu", "torch.cuda.memory_summary", "train_loss.detach", "val_loss.detach"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.before_training", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.after_training", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_search_scheduler", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_search_dataloaders", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.new_epoch", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.test_statistics", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator._log_to_json", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._log_and_reset_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.train_statistics", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n"], ["", "def", "search", "(", "self", ",", "resume_from", "=", "\"\"", ",", "summary_writer", "=", "None", ",", "after_epoch", ":", "Callable", "[", "[", "int", "]", ",", "None", "]", "=", "None", ",", "report_incumbent", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Start the architecture search.\n\n        Generates a json file with training statistics.\n\n        Args:\n            resume_from (str): Checkpoint file to resume from. If not given then\n                train from scratch.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "config", ".", "search", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "config", ".", "search", ".", "seed", ")", "\n", "\n", "self", ".", "optimizer", ".", "before_training", "(", ")", "\n", "checkpoint_freq", "=", "self", ".", "config", ".", "search", ".", "checkpoint_freq", "\n", "if", "self", ".", "optimizer", ".", "using_step_function", ":", "\n", "            ", "self", ".", "scheduler", "=", "self", ".", "build_search_scheduler", "(", "\n", "self", ".", "optimizer", ".", "op_optimizer", ",", "self", ".", "config", "\n", ")", "\n", "\n", "start_epoch", "=", "self", ".", "_setup_checkpointers", "(", "\n", "resume_from", ",", "period", "=", "checkpoint_freq", ",", "scheduler", "=", "self", ".", "scheduler", "\n", ")", "\n", "", "else", ":", "\n", "            ", "start_epoch", "=", "self", ".", "_setup_checkpointers", "(", "resume_from", ",", "period", "=", "checkpoint_freq", ")", "\n", "\n", "", "if", "self", ".", "optimizer", ".", "using_step_function", ":", "\n", "            ", "self", ".", "train_queue", ",", "self", ".", "valid_queue", ",", "_", "=", "self", ".", "build_search_dataloaders", "(", "\n", "self", ".", "config", "\n", ")", "\n", "\n", "", "for", "e", "in", "range", "(", "start_epoch", ",", "self", ".", "epochs", ")", ":", "\n", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "optimizer", ".", "new_epoch", "(", "e", ")", "\n", "\n", "if", "self", ".", "optimizer", ".", "using_step_function", ":", "\n", "                ", "for", "step", ",", "data_train", "in", "enumerate", "(", "self", ".", "train_queue", ")", ":", "\n", "                    ", "data_train", "=", "(", "\n", "data_train", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "data_train", "[", "1", "]", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", ",", "\n", ")", "\n", "data_val", "=", "next", "(", "iter", "(", "self", ".", "valid_queue", ")", ")", "\n", "data_val", "=", "(", "\n", "data_val", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "data_val", "[", "1", "]", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", ",", "\n", ")", "\n", "\n", "stats", "=", "self", ".", "optimizer", ".", "step", "(", "data_train", ",", "data_val", ")", "\n", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "=", "stats", "\n", "\n", "self", ".", "_store_accuracies", "(", "logits_train", ",", "data_train", "[", "1", "]", ",", "\"train\"", ")", "\n", "self", ".", "_store_accuracies", "(", "logits_val", ",", "data_val", "[", "1", "]", ",", "\"val\"", ")", "\n", "\n", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Epoch {}-{}, Train loss: {:.5f}, validation loss: {:.5f}, learning rate: {}\"", ".", "format", "(", "\n", "e", ",", "step", ",", "train_loss", ",", "val_loss", ",", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "\n", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "log_first_n", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"cuda consumption\\n {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "memory_summary", "(", ")", ")", ",", "\n", "n", "=", "3", ",", "\n", ")", "\n", "\n", "", "self", ".", "train_loss", ".", "update", "(", "float", "(", "train_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "self", ".", "val_loss", ".", "update", "(", "float", "(", "val_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "errors_dict", ".", "train_acc", ".", "append", "(", "self", ".", "train_top1", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "train_loss", ".", "append", "(", "self", ".", "train_loss", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "valid_acc", ".", "append", "(", "self", ".", "val_top1", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "valid_loss", ".", "append", "(", "self", ".", "val_loss", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "runtime", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "", "else", ":", "\n", "                ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "# TODO: nasbench101 does not have train_loss, valid_loss, test_loss implemented, so this is a quick fix for now", "\n", "# train_acc, train_loss, valid_acc, valid_loss, test_acc, test_loss = self.optimizer.train_statistics()", "\n", "(", "\n", "train_acc", ",", "\n", "valid_acc", ",", "\n", "test_acc", ",", "\n", "train_time", ",", "\n", ")", "=", "self", ".", "optimizer", ".", "train_statistics", "(", "report_incumbent", ")", "\n", "train_loss", ",", "valid_loss", ",", "test_loss", "=", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n", "self", ".", "errors_dict", ".", "train_acc", ".", "append", "(", "train_acc", ")", "\n", "self", ".", "errors_dict", ".", "train_loss", ".", "append", "(", "train_loss", ")", "\n", "self", ".", "errors_dict", ".", "valid_acc", ".", "append", "(", "valid_acc", ")", "\n", "self", ".", "errors_dict", ".", "valid_loss", ".", "append", "(", "valid_loss", ")", "\n", "self", ".", "errors_dict", ".", "test_acc", ".", "append", "(", "test_acc", ")", "\n", "self", ".", "errors_dict", ".", "test_loss", ".", "append", "(", "test_loss", ")", "\n", "self", ".", "errors_dict", ".", "runtime", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "self", ".", "errors_dict", ".", "train_time", ".", "append", "(", "train_time", ")", "\n", "self", ".", "train_top1", ".", "avg", "=", "train_acc", "\n", "self", ".", "val_top1", ".", "avg", "=", "valid_acc", "\n", "\n", "", "self", ".", "periodic_checkpointer", ".", "step", "(", "e", ")", "\n", "\n", "anytime_results", "=", "self", ".", "optimizer", ".", "test_statistics", "(", ")", "\n", "if", "anytime_results", ":", "\n", "# record anytime performance", "\n", "                ", "self", ".", "errors_dict", ".", "arch_eval", ".", "append", "(", "anytime_results", ")", "\n", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Epoch {}, Anytime results: {}\"", ".", "format", "(", "e", ",", "anytime_results", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "", "self", ".", "_log_to_json", "(", ")", "\n", "\n", "self", ".", "_log_and_reset_accuracies", "(", "e", ",", "summary_writer", ")", "\n", "\n", "if", "after_epoch", "is", "not", "None", ":", "\n", "                ", "after_epoch", "(", "e", ")", "\n", "\n", "", "", "self", ".", "optimizer", ".", "after_training", "(", ")", "\n", "\n", "if", "summary_writer", "is", "not", "None", ":", "\n", "            ", "summary_writer", ".", "close", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Training finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.evaluate_oneshot": [[208, 251], ["logger.info", "trainer.Trainer.optimizer.before_training", "trainer.Trainer._setup_checkpointers", "torch.nn.CrossEntropyLoss", "trainer.Trainer.optimizer.graph.eval", "logger.info", "trainer.Trainer.build_search_dataloaders", "torch.no_grad", "time.time", "enumerate", "time.time", "trainer.Trainer.errors_dict.valid_acc.append", "trainer.Trainer.errors_dict.valid_loss.append", "trainer.Trainer.errors_dict.runtime.append", "trainer.Trainer._log_to_json", "data_val[].to", "data_val[].to", "trainer.Trainer.optimizer.graph", "torch.nn.CrossEntropyLoss.", "trainer.Trainer._store_accuracies", "trainer.Trainer.val_loss.update", "float", "torch.nn.CrossEntropyLoss.detach().cpu", "torch.nn.CrossEntropyLoss.detach"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.before_training", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_search_dataloaders", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator._log_to_json", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "def", "evaluate_oneshot", "(", "self", ",", "resume_from", "=", "\"\"", ",", "dataloader", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the one-shot model on the specified dataset.\n\n        Generates a json file with training statistics.\n\n        Args:\n            resume_from (str): Checkpoint file to resume from. If not given then\n                evaluate with the current one-shot weights.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Start one-shot evaluation\"", ")", "\n", "self", ".", "optimizer", ".", "before_training", "(", ")", "\n", "self", ".", "_setup_checkpointers", "(", "resume_from", ")", "\n", "\n", "loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "dataloader", "is", "None", ":", "\n", "# load only the validation data", "\n", "            ", "_", ",", "dataloader", ",", "_", "=", "self", ".", "build_search_dataloaders", "(", "self", ".", "config", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "graph", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "step", ",", "data_val", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "                ", "input_val", "=", "data_val", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "target_val", "=", "data_val", "[", "1", "]", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "logits_val", "=", "self", ".", "optimizer", ".", "graph", "(", "input_val", ")", "\n", "val_loss", "=", "loss", "(", "logits_val", ",", "target_val", ")", "\n", "\n", "self", ".", "_store_accuracies", "(", "logits_val", ",", "data_val", "[", "1", "]", ",", "\"val\"", ")", "\n", "self", ".", "val_loss", ".", "update", "(", "float", "(", "val_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "errors_dict", ".", "valid_acc", ".", "append", "(", "self", ".", "val_top1", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "valid_loss", ".", "append", "(", "self", ".", "val_loss", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "runtime", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "\n", "self", ".", "_log_to_json", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Evaluation finished\"", ")", "\n", "return", "self", ".", "val_top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.evaluate": [[252, 453], ["logger.info", "logger.info", "trainer.Trainer._setup_checkpointers", "trainer.Trainer.optimizer.get_final_architecture", "trainer.Trainer.query", "logger.info", "trainer.Trainer.to", "trainer.Trainer.update_edges", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "trainer.Trainer.eval", "enumerate", "logger.info", "os.path.join", "trainer.Trainer.modules_str", "logger.info", "trainer.Trainer.reset_weights", "trainer.Trainer.build_eval_dataloaders", "trainer.Trainer.build_eval_optimizer", "trainer.Trainer.build_eval_scheduler", "trainer.Trainer._setup_checkpointers", "torch.nn.CrossEntropyLoss", "trainer.Trainer.train_top1.reset", "trainer.Trainer.train_top5.reset", "trainer.Trainer.val_top1.reset", "trainer.Trainer.val_top5.reset", "trainer.Trainer.update_edges", "range", "input_test.to.to.to", "target_test.to.to.to", "input_test.to.to.size", "naslib.utils.logging.log_every_n_seconds", "trainer.Trainer.parameters", "trainer.Trainer.train", "torch.cuda.is_available", "trainer.Trainer.update_edges", "enumerate", "trainer.Trainer.step", "trainer.Trainer.periodic_checkpointer.step", "trainer.Trainer._log_and_reset_accuracies", "torch.no_grad", "trainer.Trainer.", "naslib.utils.utils.accuracy", "naslib.utils.utils.AverageMeter.update", "naslib.utils.utils.AverageMeter.update", "naslib.utils.logging.log_first_n", "input_train.to.to.to", "target_train.to.to.to", "trainer.Trainer.zero_grad", "trainer.Trainer.", "torch.nn.CrossEntropyLoss.", "hasattr", "torch.nn.CrossEntropyLoss.backward", "trainer.Trainer.step", "trainer.Trainer._store_accuracies", "naslib.utils.logging.log_every_n_seconds", "trainer.Trainer.eval", "enumerate", "edge.data.set", "prec1.data.item", "prec5.data.item", "len", "edge.data.set", "naslib.utils.logging.log_first_n", "torch.nn.CrossEntropyLoss.", "torch.nn.utils.clip_grad_norm_", "input_valid.to().float.to().float.to().float", "target_valid.to().float.to().float.to().float", "edge.data.op.get_embedded_ops", "additional_primitives.DropPathWrapper", "torch.cuda.memory_summary", "edge.data.set", "trainer.Trainer.auxilary_logits", "trainer.Trainer.parameters", "trainer.Trainer.get_last_lr", "torch.no_grad", "trainer.Trainer.", "trainer.Trainer._store_accuracies", "input_valid.to().float.to().float.to", "target_valid.to().float.to().float.to"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.reset_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_dataloaders", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_optimizer", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_scheduler", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._log_and_reset_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.accuracy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.auxilary_logits", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies"], ["", "def", "evaluate", "(", "\n", "self", ",", "\n", "retrain", ":", "bool", "=", "True", ",", "\n", "search_model", ":", "str", "=", "\"\"", ",", "\n", "resume_from", ":", "str", "=", "\"\"", ",", "\n", "best_arch", ":", "Graph", "=", "None", ",", "\n", "dataset_api", ":", "object", "=", "None", ",", "\n", "metric", ":", "Metric", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the final architecture as given from the optimizer.\n\n        If the search space has an interface to a benchmark then query that.\n        Otherwise train as defined in the config.\n\n        Args:\n            retrain (bool)      : Reset the weights from the architecure search\n            search_model (str)  : Path to checkpoint file that was created during search. If not provided,\n                                  then try to load 'model_final.pth' from search\n            resume_from (str)   : Resume retraining from the given checkpoint file.\n            best_arch           : Parsed model you want to directly evaluate and ignore the final model\n                                  from the optimizer.\n            dataset_api         : Dataset API to use for querying model performance.\n            metric              : Metric to query the benchmark for.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Start evaluation\"", ")", "\n", "if", "not", "best_arch", ":", "\n", "\n", "            ", "if", "not", "search_model", ":", "\n", "                ", "search_model", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "save", ",", "\"search\"", ",", "\"model_final.pth\"", "\n", ")", "\n", "", "self", ".", "_setup_checkpointers", "(", "search_model", ")", "# required to load the architecture", "\n", "\n", "best_arch", "=", "self", ".", "optimizer", ".", "get_final_architecture", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Final architecture:\\n\"", "+", "best_arch", ".", "modules_str", "(", ")", ")", "\n", "\n", "if", "best_arch", ".", "QUERYABLE", ":", "\n", "            ", "if", "metric", "is", "None", ":", "\n", "                ", "metric", "=", "Metric", ".", "TEST_ACCURACY", "\n", "", "result", "=", "best_arch", ".", "query", "(", "\n", "metric", "=", "metric", ",", "dataset", "=", "self", ".", "config", ".", "dataset", ",", "dataset_api", "=", "dataset_api", "\n", ")", "\n", "logger", ".", "info", "(", "\"Queried results ({}): {}\"", ".", "format", "(", "metric", ",", "result", ")", ")", "\n", "", "else", ":", "\n", "            ", "best_arch", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "retrain", ":", "\n", "                ", "logger", ".", "info", "(", "\"Starting retraining from scratch\"", ")", "\n", "best_arch", ".", "reset_weights", "(", "inplace", "=", "True", ")", "\n", "\n", "(", "\n", "self", ".", "train_queue", ",", "\n", "self", ".", "valid_queue", ",", "\n", "self", ".", "test_queue", ",", "\n", ")", "=", "self", ".", "build_eval_dataloaders", "(", "self", ".", "config", ")", "\n", "\n", "optim", "=", "self", ".", "build_eval_optimizer", "(", "best_arch", ".", "parameters", "(", ")", ",", "self", ".", "config", ")", "\n", "scheduler", "=", "self", ".", "build_eval_scheduler", "(", "optim", ",", "self", ".", "config", ")", "\n", "\n", "start_epoch", "=", "self", ".", "_setup_checkpointers", "(", "\n", "resume_from", ",", "\n", "search", "=", "False", ",", "\n", "period", "=", "self", ".", "config", ".", "evaluation", ".", "checkpoint_freq", ",", "\n", "model", "=", "best_arch", ",", "# checkpointables start here", "\n", "optim", "=", "optim", ",", "\n", "scheduler", "=", "scheduler", ",", "\n", ")", "\n", "\n", "grad_clip", "=", "self", ".", "config", ".", "evaluation", ".", "grad_clip", "\n", "loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "train_top1", ".", "reset", "(", ")", "\n", "self", ".", "train_top5", ".", "reset", "(", ")", "\n", "self", ".", "val_top1", ".", "reset", "(", ")", "\n", "self", ".", "val_top5", ".", "reset", "(", ")", "\n", "\n", "# Enable drop path", "\n", "best_arch", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "edge", ".", "data", ".", "set", "(", "\n", "\"op\"", ",", "DropPathWrapper", "(", "edge", ".", "data", ".", "op", ")", "\n", ")", ",", "\n", "scope", "=", "best_arch", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", ",", "\n", ")", "\n", "\n", "# train from scratch", "\n", "epochs", "=", "self", ".", "config", ".", "evaluation", ".", "epochs", "\n", "for", "e", "in", "range", "(", "start_epoch", ",", "epochs", ")", ":", "\n", "                    ", "best_arch", ".", "train", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "log_first_n", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"cuda consumption\\n {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "memory_summary", "(", ")", ")", ",", "\n", "n", "=", "20", ",", "\n", ")", "\n", "\n", "# update drop path probability", "\n", "", "drop_path_prob", "=", "self", ".", "config", ".", "evaluation", ".", "drop_path_prob", "*", "e", "/", "epochs", "\n", "best_arch", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "edge", ".", "data", ".", "set", "(", "\n", "\"drop_path_prob\"", ",", "drop_path_prob", "\n", ")", ",", "\n", "scope", "=", "best_arch", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", ",", "\n", ")", "\n", "\n", "# Train queue", "\n", "for", "i", ",", "(", "input_train", ",", "target_train", ")", "in", "enumerate", "(", "self", ".", "train_queue", ")", ":", "\n", "                        ", "input_train", "=", "input_train", ".", "to", "(", "self", ".", "device", ")", "\n", "target_train", "=", "target_train", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "logits_train", "=", "best_arch", "(", "input_train", ")", "\n", "train_loss", "=", "loss", "(", "logits_train", ",", "target_train", ")", "\n", "if", "hasattr", "(", "\n", "best_arch", ",", "\"auxilary_logits\"", "\n", ")", ":", "# darts specific stuff", "\n", "                            ", "log_first_n", "(", "logging", ".", "INFO", ",", "\"Auxiliary is used\"", ",", "n", "=", "10", ")", "\n", "auxiliary_loss", "=", "loss", "(", "\n", "best_arch", ".", "auxilary_logits", "(", ")", ",", "target_train", "\n", ")", "\n", "train_loss", "+=", "(", "\n", "self", ".", "config", ".", "evaluation", ".", "auxiliary_weight", "*", "auxiliary_loss", "\n", ")", "\n", "", "train_loss", ".", "backward", "(", ")", "\n", "if", "grad_clip", ":", "\n", "                            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "best_arch", ".", "parameters", "(", ")", ",", "grad_clip", "\n", ")", "\n", "", "optim", ".", "step", "(", ")", "\n", "\n", "self", ".", "_store_accuracies", "(", "logits_train", ",", "target_train", ",", "\"train\"", ")", "\n", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Epoch {}-{}, Train loss: {:.5}, learning rate: {}\"", ".", "format", "(", "\n", "e", ",", "i", ",", "train_loss", ",", "scheduler", ".", "get_last_lr", "(", ")", "\n", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "# Validation queue", "\n", "", "if", "self", ".", "valid_queue", ":", "\n", "                        ", "best_arch", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "input_valid", ",", "target_valid", ")", "in", "enumerate", "(", "\n", "self", ".", "valid_queue", "\n", ")", ":", "\n", "\n", "                            ", "input_valid", "=", "input_valid", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "target_valid", "=", "target_valid", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# just log the validation accuracy", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                                ", "logits_valid", "=", "best_arch", "(", "input_valid", ")", "\n", "self", ".", "_store_accuracies", "(", "\n", "logits_valid", ",", "target_valid", ",", "\"val\"", "\n", ")", "\n", "\n", "", "", "", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "periodic_checkpointer", ".", "step", "(", "e", ")", "\n", "self", ".", "_log_and_reset_accuracies", "(", "e", ")", "\n", "\n", "# Disable drop path", "\n", "", "", "best_arch", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "edge", ".", "data", ".", "set", "(", "\n", "\"op\"", ",", "edge", ".", "data", ".", "op", ".", "get_embedded_ops", "(", ")", "\n", ")", ",", "\n", "scope", "=", "best_arch", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", ",", "\n", ")", "\n", "\n", "# measure final test accuracy", "\n", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "best_arch", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "data_test", "in", "enumerate", "(", "self", ".", "test_queue", ")", ":", "\n", "                ", "input_test", ",", "target_test", "=", "data_test", "\n", "input_test", "=", "input_test", ".", "to", "(", "self", ".", "device", ")", "\n", "target_test", "=", "target_test", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "n", "=", "input_test", ".", "size", "(", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "logits", "=", "best_arch", "(", "input_test", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target_test", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Inference batch {} of {}.\"", ".", "format", "(", "i", ",", "len", "(", "self", ".", "test_queue", ")", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "", "logger", ".", "info", "(", "\n", "\"Evaluation finished. Test accuracies: top-1 = {:.5}, top-5 = {:.5}\"", ".", "format", "(", "\n", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.build_search_dataloaders": [[456, 462], ["naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["", "", "@", "staticmethod", "\n", "def", "build_search_dataloaders", "(", "config", ")", ":", "\n", "        ", "train_queue", ",", "valid_queue", ",", "test_queue", ",", "_", ",", "_", "=", "utils", ".", "get_train_val_loaders", "(", "\n", "config", ",", "mode", "=", "\"train\"", "\n", ")", "\n", "return", "train_queue", ",", "valid_queue", ",", "_", "# test_queue is not used in search currently", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.build_eval_dataloaders": [[463, 469], ["naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["", "@", "staticmethod", "\n", "def", "build_eval_dataloaders", "(", "config", ")", ":", "\n", "        ", "train_queue", ",", "valid_queue", ",", "test_queue", ",", "_", ",", "_", "=", "utils", ".", "get_train_val_loaders", "(", "\n", "config", ",", "mode", "=", "\"val\"", "\n", ")", "\n", "return", "train_queue", ",", "valid_queue", ",", "test_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.build_eval_optimizer": [[470, 477], ["torch.optim.SGD"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_eval_optimizer", "(", "parameters", ",", "config", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "SGD", "(", "\n", "parameters", ",", "\n", "lr", "=", "config", ".", "evaluation", ".", "learning_rate", ",", "\n", "momentum", "=", "config", ".", "evaluation", ".", "momentum", ",", "\n", "weight_decay", "=", "config", ".", "evaluation", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.build_search_scheduler": [[479, 485], ["torch.optim.lr_scheduler.CosineAnnealingLR"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_search_scheduler", "(", "optimizer", ",", "config", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "\n", "T_max", "=", "config", ".", "search", ".", "epochs", ",", "\n", "eta_min", "=", "config", ".", "search", ".", "learning_rate_min", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer.build_eval_scheduler": [[487, 493], ["torch.optim.lr_scheduler.CosineAnnealingLR"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_eval_scheduler", "(", "optimizer", ",", "config", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "\n", "T_max", "=", "config", ".", "evaluation", ".", "epochs", ",", "\n", "eta_min", "=", "config", ".", "evaluation", ".", "learning_rate_min", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer._log_and_reset_accuracies": [[495, 520], ["logger.info", "trainer.Trainer.train_top1.reset", "trainer.Trainer.train_top5.reset", "trainer.Trainer.train_loss.reset", "trainer.Trainer.val_top1.reset", "trainer.Trainer.val_top5.reset", "trainer.Trainer.val_loss.reset", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset"], ["", "def", "_log_and_reset_accuracies", "(", "self", ",", "epoch", ",", "writer", "=", "None", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Epoch {} done. Train accuracy (top1, top5): {:.5f}, {:.5f}, Validation accuracy: {:.5f}, {:.5f}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "self", ".", "train_top1", ".", "avg", ",", "\n", "self", ".", "train_top5", ".", "avg", ",", "\n", "self", ".", "val_top1", ".", "avg", ",", "\n", "self", ".", "val_top5", ".", "avg", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'Train accuracy (top 1)'", ",", "self", ".", "train_top1", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Train accuracy (top 5)'", ",", "self", ".", "train_top5", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Train loss'", ",", "self", ".", "train_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Validation accuracy (top 1)'", ",", "self", ".", "val_top1", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Validation accuracy (top 5)'", ",", "self", ".", "val_top5", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Validation loss'", ",", "self", ".", "val_loss", ".", "avg", ",", "epoch", ")", "\n", "\n", "", "self", ".", "train_top1", ".", "reset", "(", ")", "\n", "self", ".", "train_top5", ".", "reset", "(", ")", "\n", "self", ".", "train_loss", ".", "reset", "(", ")", "\n", "self", ".", "val_top1", ".", "reset", "(", ")", "\n", "self", ".", "val_top5", ".", "reset", "(", ")", "\n", "self", ".", "val_loss", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer._store_accuracies": [[521, 536], ["logits.clone().detach().cpu.clone().detach().cpu.clone().detach().cpu", "target.clone().detach().cpu.clone().detach().cpu.clone().detach().cpu", "naslib.utils.utils.accuracy", "logits.clone().detach().cpu.clone().detach().cpu.size", "trainer.Trainer.train_top1.update", "trainer.Trainer.train_top5.update", "logits.clone().detach().cpu.clone().detach().cpu.clone().detach", "target.clone().detach().cpu.clone().detach().cpu.clone().detach", "prec1.data.item", "prec5.data.item", "trainer.Trainer.val_top1.update", "trainer.Trainer.val_top5.update", "ValueError", "prec1.data.item", "prec5.data.item", "logits.clone().detach().cpu.clone().detach().cpu.clone", "target.clone().detach().cpu.clone().detach().cpu.clone"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.accuracy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone"], ["", "def", "_store_accuracies", "(", "self", ",", "logits", ",", "target", ",", "split", ")", ":", "\n", "        ", "\"\"\"Update the accuracy counters\"\"\"", "\n", "logits", "=", "logits", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "target", "=", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "logits", ".", "size", "(", "0", ")", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "self", ".", "train_top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "self", ".", "train_top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "self", ".", "val_top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "self", ".", "val_top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown split: {}. Expected either 'train' or 'val'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer._prepare_dataloaders": [[537, 551], ["naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["", "", "def", "_prepare_dataloaders", "(", "self", ",", "config", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"\n        Prepare train, validation, and test dataloaders with the splits defined\n        in the config.\n\n        Args:\n            config (AttrDict): config from config file.\n        \"\"\"", "\n", "train_queue", ",", "valid_queue", ",", "test_queue", ",", "_", ",", "_", "=", "utils", ".", "get_train_val_loaders", "(", "\n", "config", ",", "mode", "\n", ")", "\n", "self", ".", "train_queue", "=", "train_queue", "\n", "self", ".", "valid_queue", "=", "valid_queue", "\n", "self", ".", "test_queue", "=", "test_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer._setup_checkpointers": [[552, 592], ["trainer.Trainer.optimizer.get_checkpointables", "trainer.Trainer.update", "naslib.utils.utils.Checkpointer", "fvcore.common.checkpoint.PeriodicCheckpointer", "logger.info", "naslib.utils.utils.Checkpointer.resume_or_load", "naslib.utils.utils.Checkpointer.has_checkpoint", "trainer.Trainer.pop", "utils.Checkpointer.resume_or_load.get"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_checkpointables", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "def", "_setup_checkpointers", "(", "\n", "self", ",", "resume_from", "=", "\"\"", ",", "search", "=", "True", ",", "period", "=", "1", ",", "**", "add_checkpointables", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sets up a periodic chechkpointer which can be used to save checkpoints\n        at every epoch. It will call optimizer's `get_checkpointables()` as objects\n        to store.\n\n        Args:\n            resume_from (str): A checkpoint file to resume the search or evaluation from.\n            search (bool): Whether search or evaluation phase is checkpointed. This is required\n                because the files are in different folders to not be overridden\n            add_checkpointables (object): Additional things to checkpoint together with the\n                optimizer's checkpointables.\n        \"\"\"", "\n", "checkpointables", "=", "self", ".", "optimizer", ".", "get_checkpointables", "(", ")", "\n", "checkpointables", ".", "update", "(", "add_checkpointables", ")", "\n", "\n", "checkpointer", "=", "utils", ".", "Checkpointer", "(", "\n", "model", "=", "checkpointables", ".", "pop", "(", "\"model\"", ")", ",", "\n", "save_dir", "=", "self", ".", "config", ".", "save", "+", "\"/search\"", "\n", "if", "search", "\n", "else", "self", ".", "config", ".", "save", "+", "\"/eval\"", ",", "\n", "# **checkpointables #NOTE: this is throwing an Error", "\n", ")", "\n", "\n", "self", ".", "periodic_checkpointer", "=", "PeriodicCheckpointer", "(", "\n", "checkpointer", ",", "\n", "period", "=", "period", ",", "\n", "max_iter", "=", "self", ".", "config", ".", "search", ".", "epochs", "\n", "if", "search", "\n", "else", "self", ".", "config", ".", "evaluation", ".", "epochs", ",", "\n", ")", "\n", "\n", "if", "resume_from", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading model from file {}\"", ".", "format", "(", "resume_from", ")", ")", "\n", "checkpoint", "=", "checkpointer", ".", "resume_or_load", "(", "resume_from", ",", "resume", "=", "True", ")", "\n", "if", "checkpointer", ".", "has_checkpoint", "(", ")", ":", "\n", "                ", "return", "checkpoint", ".", "get", "(", "\"iteration\"", ",", "-", "1", ")", "+", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer.Trainer._log_to_json": [[593, 610], ["os.path.exists", "os.makedirs", "codecs.open", "json.dump", "codecs.open", "copy.deepcopy", "json.dump", "os.path.join", "os.path.join", "copy.deepcopy.pop"], "methods", ["None"], ["", "def", "_log_to_json", "(", "self", ")", ":", "\n", "        ", "\"\"\"log training statistics to json file\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "save", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "save", ")", "\n", "", "if", "not", "self", ".", "lightweight_output", ":", "\n", "            ", "with", "codecs", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "save", ",", "\"errors.json\"", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "file", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "errors_dict", ",", "file", ",", "separators", "=", "(", "\",\"", ",", "\":\"", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "codecs", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "save", ",", "\"errors.json\"", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "file", ":", "\n", "                ", "lightweight_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "errors_dict", ")", "\n", "for", "key", "in", "[", "\"arch_eval\"", ",", "\"train_loss\"", ",", "\"valid_loss\"", ",", "\"test_loss\"", "]", ":", "\n", "                    ", "lightweight_dict", ".", "pop", "(", "key", ")", "\n", "", "json", ".", "dump", "(", "[", "self", ".", "config", ",", "lightweight_dict", "]", ",", "file", ",", "separators", "=", "(", "\",\"", ",", "\":\"", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.__init__": [[22, 40], ["torch.device", "torch.cuda.is_available"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "\n", "self", ".", "run_acc_stats", "=", "config", ".", "run_acc_stats", "\n", "self", ".", "max_set_size", "=", "config", ".", "max_set_size", "\n", "\n", "self", ".", "run_nbhd_size", "=", "config", ".", "run_nbhd_size", "\n", "self", ".", "max_nbhd_trials", "=", "config", ".", "max_nbhd_trials", "\n", "\n", "self", ".", "run_autocorr", "=", "config", ".", "run_autocorr", "\n", "self", ".", "max_autocorr_trials", "=", "config", ".", "max_autocorr_trials", "\n", "self", ".", "autocorr_size", "=", "config", ".", "autocorr_size", "\n", "self", ".", "walks", "=", "config", ".", "walks", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "results", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.adapt_search_space": [[41, 56], ["search_space.clone", "list", "logger.info", "random.shuffle", "max", "logger.info", "statistics_evaluator.StatisticsEvaluator.search_space.get_arch_iterator", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_arch_iterator"], ["", "def", "adapt_search_space", "(", "\n", "self", ",", "search_space", ",", "load_labeled", ",", "scope", "=", "None", ",", "dataset_api", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "search_space", ".", "clone", "(", ")", "\n", "self", ".", "scope", "=", "scope", "if", "scope", "else", "search_space", ".", "OPTIMIZER_SCOPE", "\n", "self", ".", "load_labeled", "=", "load_labeled", "\n", "self", ".", "dataset_api", "=", "dataset_api", "\n", "\n", "# Set up the arch iterator", "\n", "self", ".", "arch_iterator", "=", "list", "(", "self", ".", "search_space", ".", "get_arch_iterator", "(", "dataset_api", "=", "self", ".", "dataset_api", ")", ")", "\n", "logger", ".", "info", "(", "\"Total size of iterator: {}\"", ".", "format", "(", "len", "(", "self", ".", "arch_iterator", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "arch_iterator", ")", "\n", "max_size", "=", "max", "(", "self", ".", "max_set_size", ",", "self", ".", "max_nbhd_trials", ",", "self", ".", "max_autocorr_trials", ")", "\n", "self", ".", "arch_iterator", "=", "self", ".", "arch_iterator", "[", ":", "max_size", "]", "\n", "logger", ".", "info", "(", "\"Arch iterator sanity check {}\"", ".", "format", "(", "self", ".", "arch_iterator", "[", ":", "10", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.get_full_arch_info": [[58, 74], ["arch.query", "arch.query", "arch.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "get_full_arch_info", "(", "self", ",", "arch", ")", ":", "\n", "        ", "\"\"\"\n        Given an arch, return the validation accuracy, \n        test accuracy, train_time, and other info\n        \"\"\"", "\n", "info_dict", "=", "{", "}", "\n", "val_acc", "=", "arch", ".", "query", "(", "\n", "metric", "=", "Metric", ".", "VAL_ACCURACY", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "\n", "test_acc", "=", "arch", ".", "query", "(", "\n", "metric", "=", "Metric", ".", "TEST_ACCURACY", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "\n", "train_time", "=", "arch", ".", "query", "(", "\n", "metric", "=", "Metric", ".", "TRAIN_TIME", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "\n", "return", "{", "'val_acc'", ":", "val_acc", ",", "'test_acc'", ":", "test_acc", ",", "'train_time'", ":", "train_time", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.evaluate_acc_stats": [[75, 134], ["numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.std", "numpy.min", "numpy.max", "numpy.median", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.abs", "val_accs[].tolist", "test_accs[].tolist", "len", "logger.info", "statistics_evaluator.StatisticsEvaluator.search_space.clone", "statistics_evaluator.StatisticsEvaluator.set_spec", "statistics_evaluator.StatisticsEvaluator.set_load_labeled", "statistics_evaluator.StatisticsEvaluator.get_full_arch_info", "info_dicts.append", "numpy.percentile", "numpy.median", "numpy.percentile", "hist_20[].tolist", "hist_20[].tolist", "hist_30[].tolist", "hist_30[].tolist", "hist_50[].tolist", "hist_50[].tolist", "scipy.stats.spearmanr", "scipy.stats.kendalltau", "logger.info", "numpy.corrcoef", "max"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.set_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_load_labeled", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "def", "evaluate_acc_stats", "(", "self", ")", ":", "\n", "\n", "# loop through the full set of accuracies (or up to max_set_size)", "\n", "        ", "info_dicts", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "arch_spec", "in", "self", ".", "arch_iterator", "[", ":", "self", ".", "max_set_size", "]", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "i", "%", "max", "(", "1", ",", "self", ".", "max_set_size", "//", "10", ")", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'acc stats trial {}'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "set_spec", "(", "arch_spec", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch", ".", "set_load_labeled", "(", ")", "\n", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "info_dicts", ".", "append", "(", "info_dict", ")", "\n", "\n", "", "val_accs", "=", "np", ".", "array", "(", "[", "info_dict", "[", "'val_acc'", "]", "for", "info_dict", "in", "info_dicts", "]", ")", "\n", "test_accs", "=", "np", ".", "array", "(", "[", "info_dict", "[", "'test_acc'", "]", "for", "info_dict", "in", "info_dicts", "]", ")", "\n", "runtimes", "=", "np", ".", "array", "(", "[", "info_dict", "[", "'train_time'", "]", "for", "info_dict", "in", "info_dicts", "]", ")", "\n", "\n", "# compute val accuracy statistics", "\n", "self", ".", "results", "[", "'mean'", "]", "=", "np", ".", "mean", "(", "val_accs", ")", "\n", "self", ".", "results", "[", "'std'", "]", "=", "np", ".", "std", "(", "val_accs", ")", "\n", "self", ".", "results", "[", "'minimum'", "]", "=", "np", ".", "min", "(", "val_accs", ")", "\n", "self", ".", "results", "[", "'maximum'", "]", "=", "np", ".", "max", "(", "val_accs", ")", "\n", "self", ".", "results", "[", "'median'", "]", "=", "np", ".", "median", "(", "val_accs", ")", "\n", "self", ".", "results", "[", "'mean_test'", "]", "=", "np", ".", "mean", "(", "test_accs", ")", "\n", "self", ".", "results", "[", "'std_test'", "]", "=", "np", ".", "std", "(", "test_accs", ")", "\n", "self", ".", "results", "[", "'mean_time'", "]", "=", "np", ".", "mean", "(", "runtimes", ")", "\n", "self", ".", "results", "[", "'std_time'", "]", "=", "np", ".", "std", "(", "runtimes", ")", "\n", "\n", "self", ".", "results", "[", "'boxplot'", "]", "=", "[", "np", ".", "percentile", "(", "val_accs", ",", "25", ")", ",", "\n", "np", ".", "median", "(", "val_accs", ")", ",", "\n", "np", ".", "percentile", "(", "val_accs", ",", "75", ")", "\n", "]", "\n", "\n", "hist_20", "=", "np", ".", "histogram", "(", "val_accs", ",", "20", ")", "\n", "hist_30", "=", "np", ".", "histogram", "(", "val_accs", ",", "30", ")", "\n", "hist_50", "=", "np", ".", "histogram", "(", "val_accs", ",", "50", ")", "\n", "self", ".", "results", "[", "'hist_20'", "]", "=", "[", "hist_20", "[", "0", "]", ".", "tolist", "(", ")", ",", "hist_20", "[", "1", "]", ".", "tolist", "(", ")", "]", "\n", "self", ".", "results", "[", "'hist_30'", "]", "=", "[", "hist_30", "[", "0", "]", ".", "tolist", "(", ")", ",", "hist_30", "[", "1", "]", ".", "tolist", "(", ")", "]", "\n", "self", ".", "results", "[", "'hist_50'", "]", "=", "[", "hist_50", "[", "0", "]", ".", "tolist", "(", ")", ",", "hist_50", "[", "1", "]", ".", "tolist", "(", ")", "]", "\n", "\n", "# compute val - test correlation", "\n", "self", ".", "results", "[", "'pearson'", "]", "=", "np", ".", "abs", "(", "np", ".", "corrcoef", "(", "val_accs", ",", "test_accs", ")", "[", "1", ",", "0", "]", ")", "\n", "self", ".", "results", "[", "'spearman'", "]", "=", "stats", ".", "spearmanr", "(", "val_accs", ",", "test_accs", ")", "[", "0", "]", "\n", "self", ".", "results", "[", "'kendalltau'", "]", "=", "stats", ".", "kendalltau", "(", "val_accs", ",", "test_accs", ")", "[", "0", "]", "\n", "\n", "# sanity check: return first 10 accs and length", "\n", "self", ".", "results", "[", "'val_accs_10'", "]", "=", "val_accs", "[", ":", "10", "]", ".", "tolist", "(", ")", "\n", "self", ".", "results", "[", "'test_accs_10'", "]", "=", "test_accs", "[", ":", "10", "]", ".", "tolist", "(", ")", "\n", "self", ".", "results", "[", "'size'", "]", "=", "len", "(", "val_accs", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"mean: {}, std: {}, min: {}, max: {}\"", ".", "format", "(", "\n", "self", ".", "results", "[", "'mean'", "]", ",", "\n", "self", ".", "results", "[", "'std'", "]", ",", "\n", "self", ".", "results", "[", "'minimum'", "]", ",", "\n", "self", ".", "results", "[", "'maximum'", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.evaluate_nbhd_sizes": [[137, 156], ["numpy.mean", "numpy.std", "logger.info", "statistics_evaluator.StatisticsEvaluator.search_space.clone", "statistics_evaluator.StatisticsEvaluator.set_spec", "statistics_evaluator.StatisticsEvaluator.set_load_labeled", "statistics_evaluator.StatisticsEvaluator.get_nbhd", "nbhd_sizes.append", "logger.info", "len", "max"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.set_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_load_labeled", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_nbhd"], ["", "def", "evaluate_nbhd_sizes", "(", "self", ")", ":", "\n", "        ", "nbhd_sizes", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "arch_spec", "in", "self", ".", "arch_iterator", "[", ":", "self", ".", "max_nbhd_trials", "]", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "i", "%", "max", "(", "1", ",", "self", ".", "max_nbhd_trials", "//", "10", ")", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'nbhd trial {}'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "set_spec", "(", "arch_spec", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch", ".", "set_load_labeled", "(", ")", "\n", "nbhd", "=", "arch", ".", "get_nbhd", "(", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "nbhd_sizes", ".", "append", "(", "len", "(", "nbhd", ")", ")", "\n", "\n", "", "self", ".", "results", "[", "'nbhd_size_mean'", "]", "=", "np", ".", "mean", "(", "nbhd_sizes", ")", "\n", "self", ".", "results", "[", "'nbhd_size_std'", "]", "=", "np", ".", "std", "(", "nbhd_sizes", ")", "\n", "logger", ".", "info", "(", "\"nbhd mean: {}, std: {}\"", ".", "format", "(", "\n", "self", ".", "results", "[", "'nbhd_size_mean'", "]", ",", "\n", "self", ".", "results", "[", "'nbhd_size_std'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.evaluate_autocorr": [[157, 213], ["numpy.mean().tolist", "numpy.std().tolist", "logger.info", "statistics_evaluator.StatisticsEvaluator.search_space.clone", "statistics_evaluator.StatisticsEvaluator.set_spec", "statistics_evaluator.StatisticsEvaluator.set_load_labeled", "statistics_evaluator.StatisticsEvaluator.query", "collections.deque", "range", "numpy.zeros", "range", "range", "corrs.append", "float", "logger.info", "statistics_evaluator.StatisticsEvaluator.search_space.clone", "statistics_evaluator.StatisticsEvaluator.mutate", "statistics_evaluator.StatisticsEvaluator.set_load_labeled", "statistics_evaluator.StatisticsEvaluator.query", "collections.deque.append", "statistics_evaluator.StatisticsEvaluator.search_space.clone", "statistics_evaluator.StatisticsEvaluator.mutate", "statistics_evaluator.StatisticsEvaluator.set_load_labeled", "statistics_evaluator.StatisticsEvaluator.query", "collections.deque.append", "collections.deque.popleft", "numpy.array", "numpy.array", "corr.append", "numpy.mean", "numpy.std", "numpy.power", "range", "max", "numpy.corrcoef"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.set_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_load_labeled", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_load_labeled", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_load_labeled", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["", "def", "evaluate_autocorr", "(", "self", ")", ":", "\n", "\n", "        ", "corrs", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "arch_spec", "in", "self", ".", "arch_iterator", "[", ":", "self", ".", "max_autocorr_trials", "]", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "i", "%", "max", "(", "1", ",", "self", ".", "max_autocorr_trials", "//", "10", ")", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'autocorr trial {}'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "set_spec", "(", "arch_spec", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch", ".", "set_load_labeled", "(", ")", "\n", "val_acc", "=", "arch", ".", "query", "(", "metric", "=", "Metric", ".", "VAL_ACCURACY", ",", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "\n", "# first create the initial window", "\n", "window", "=", "collections", ".", "deque", "(", "[", "val_acc", "]", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "autocorr_size", "-", "1", ")", ":", "\n", "                ", "new_arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "new_arch", ".", "mutate", "(", "arch", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "new_arch", ".", "set_load_labeled", "(", ")", "\n", "val_acc", "=", "new_arch", ".", "query", "(", "metric", "=", "Metric", ".", "VAL_ACCURACY", ",", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "window", ".", "append", "(", "val_acc", ")", "\n", "arch", "=", "new_arch", "\n", "\n", "# perform a random walk", "\n", "", "autocorrs", "=", "np", ".", "zeros", "(", "(", "self", ".", "autocorr_size", ",", "self", ".", "walks", ",", "2", ")", ")", "\n", "for", "t", "in", "range", "(", "self", ".", "walks", ")", ":", "\n", "                ", "new_arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "new_arch", ".", "mutate", "(", "arch", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "new_arch", ".", "set_load_labeled", "(", ")", "\n", "val_acc", "=", "new_arch", ".", "query", "(", "metric", "=", "Metric", ".", "VAL_ACCURACY", ",", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "window", ".", "append", "(", "val_acc", ")", "\n", "window", ".", "popleft", "(", ")", "\n", "arch", "=", "new_arch", "\n", "autocorrs", "[", ":", ",", "t", ",", "0", "]", "=", "np", ".", "array", "(", "[", "window", "[", "-", "1", "]", "]", "*", "self", ".", "autocorr_size", ")", "\n", "autocorrs", "[", ":", ",", "t", ",", "1", "]", "=", "np", ".", "array", "(", "window", ")", "\n", "\n", "# compute autocorrelations", "\n", "", "corr", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "autocorr_size", ")", ":", "\n", "                ", "corr", ".", "append", "(", "np", ".", "corrcoef", "(", "autocorrs", "[", "j", ",", ":", ",", "0", "]", ",", "autocorrs", "[", "j", ",", ":", ",", "1", "]", ")", "[", "1", ",", "0", "]", ")", "\n", "", "corrs", ".", "append", "(", "corr", ")", "\n", "\n", "", "self", ".", "results", "[", "'autocorr_mean'", "]", "=", "np", ".", "mean", "(", "corrs", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "self", ".", "results", "[", "'autocorr_std'", "]", "=", "np", ".", "std", "(", "corrs", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "logger", ".", "info", "(", "\"autocorr mean: {}, std: {}\"", ".", "format", "(", "\n", "self", ".", "results", "[", "'autocorr_mean'", "]", "[", "-", "5", ":", "]", ",", "\n", "self", ".", "results", "[", "'autocorr_std'", "]", "[", "-", "5", ":", "]", ")", ")", "\n", "self", ".", "results", "[", "'autocorr_x'", "]", "=", "[", "float", "(", "np", ".", "power", "(", "self", ".", "autocorr_size", "-", "i", "-", "1", ",", "1", "/", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "autocorr_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.evaluate": [[214, 230], ["statistics_evaluator.StatisticsEvaluator._log_to_json", "logger.info", "statistics_evaluator.StatisticsEvaluator.evaluate_acc_stats", "logger.info", "statistics_evaluator.StatisticsEvaluator.evaluate_nbhd_sizes", "logger.info", "statistics_evaluator.StatisticsEvaluator.evaluate_autocorr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator._log_to_json", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.evaluate_acc_stats", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.evaluate_nbhd_sizes", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator.evaluate_autocorr"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "run_acc_stats", ":", "\n", "            ", "logger", ".", "info", "(", "'compute acc stats'", ")", "\n", "self", ".", "evaluate_acc_stats", "(", ")", "\n", "\n", "", "if", "self", ".", "run_nbhd_size", ":", "\n", "            ", "logger", ".", "info", "(", "'compute nbhd sizes'", ")", "\n", "self", ".", "evaluate_nbhd_sizes", "(", ")", "\n", "\n", "", "if", "self", ".", "run_autocorr", ":", "\n", "            ", "logger", ".", "info", "(", "'compute autocorrelation'", ")", "\n", "self", ".", "evaluate_autocorr", "(", ")", "\n", "\n", "", "self", ".", "_log_to_json", "(", ")", "\n", "return", "self", ".", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.statistics_evaluator.StatisticsEvaluator._log_to_json": [[232, 240], ["os.path.exists", "os.makedirs", "codecs.open", "json.dump", "os.path.join"], "methods", ["None"], ["", "def", "_log_to_json", "(", "self", ")", ":", "\n", "        ", "\"\"\"log statistics to json file\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "save", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "save", ")", "\n", "", "with", "codecs", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "save", ",", "\"statistics.json\"", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "[", "self", ".", "config", ",", "self", ".", "results", "]", ",", "file", ",", "separators", "=", "(", "\",\"", ",", "\":\"", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.__init__": [[36, 74], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "optimizer.get_model_size", "logger.info", "naslib.utils.utils.AttrDict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.bp.optimizer.BasePredictor.get_model_size"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the trainer.\n\n        Args:\n            optimizer: A NASLib optimizer\n            config (AttrDict): The configuration loaded from a yaml file, e.g\n                via  `utils.get_config_from_args()`\n        \"\"\"", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "epochs", "=", "self", ".", "config", ".", "search", ".", "epochs", "\n", "\n", "# preparations", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# measuring stuff", "\n", "self", ".", "QUERYABLE", "=", "False", "\n", "self", ".", "train_top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "train_top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "train_loss", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "val_top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "val_top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "self", ".", "val_loss", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "n_parameters", "=", "optimizer", ".", "get_model_size", "(", ")", "\n", "logger", ".", "info", "(", "\"param size = %fMB\"", ",", "n_parameters", ")", "\n", "self", ".", "errors_dict", "=", "utils", ".", "AttrDict", "(", "\n", "{", "\n", "\"train_acc\"", ":", "[", "]", ",", "\n", "\"train_loss\"", ":", "[", "]", ",", "\n", "\"valid_acc\"", ":", "[", "]", ",", "\n", "\"valid_loss\"", ":", "[", "]", ",", "\n", "\"test_acc\"", ":", "[", "]", ",", "\n", "\"test_loss\"", ":", "[", "]", ",", "\n", "\"runtime\"", ":", "[", "]", ",", "\n", "\"arch_eval\"", ":", "[", "]", ",", "\n", "\"params\"", ":", "n_parameters", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.search": [[77, 188], ["logger.info", "trainer_multi.Trainer.optimizer.before_training", "trainer_multi.Trainer.build_search_dataloaders", "range", "trainer_multi.Trainer.optimizer.after_training", "logger.info", "trainer_multi.Trainer.build_search_scheduler", "trainer_multi.Trainer._setup_checkpointers", "trainer_multi.Trainer._setup_checkpointers", "trainer_multi.Trainer.optimizer.new_epoch", "time.time", "trainer_multi.Trainer.periodic_checkpointer.step", "trainer_multi.Trainer.optimizer.test_statistics", "trainer_multi.Trainer._log_to_json", "trainer_multi.Trainer._log_and_reset_accuracies", "enumerate", "trainer_multi.Trainer.scheduler.step", "time.time", "trainer_multi.Trainer.errors_dict.train_acc.append", "trainer_multi.Trainer.errors_dict.train_loss.append", "trainer_multi.Trainer.errors_dict.valid_acc.append", "trainer_multi.Trainer.errors_dict.valid_loss.append", "trainer_multi.Trainer.errors_dict.runtime.append", "time.time", "trainer_multi.Trainer.optimizer.train_statistics", "trainer_multi.Trainer.errors_dict.train_acc.append", "trainer_multi.Trainer.errors_dict.train_loss.append", "trainer_multi.Trainer.errors_dict.valid_acc.append", "trainer_multi.Trainer.errors_dict.valid_loss.append", "trainer_multi.Trainer.errors_dict.runtime.append", "trainer_multi.Trainer.errors_dict.arch_eval.append", "naslib.utils.logging.log_every_n_seconds", "zip", "trainer_multi.Trainer.optimizer.step", "trainer_multi.Trainer._store_accuracies", "trainer_multi.Trainer._store_accuracies", "naslib.utils.logging.log_every_n_seconds", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "trainer_multi.Trainer.train_loss.update", "trainer_multi.Trainer.val_loss.update", "data_train[].to", "data_train[].to", "data_val[].to", "data_val[].to", "naslib.utils.logging.log_first_n", "float", "float", "trainer_multi.Trainer.scheduler.get_last_lr", "train_loss.detach().cpu", "val_loss.detach().cpu", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "train_loss.detach", "val_loss.detach"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.before_training", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_search_dataloaders", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.after_training", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_search_scheduler", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.new_epoch", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.test_statistics", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator._log_to_json", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._log_and_reset_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.train_statistics", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n"], ["", "def", "search", "(", "self", ",", "resume_from", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        Start the architecture search.\n\n        Generates a json file with training statistics.\n\n        Args:\n            resume_from (str): Checkpoint file to resume from. If not given then\n                train from scratch.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "self", ".", "optimizer", ".", "before_training", "(", ")", "\n", "checkpoint_freq", "=", "self", ".", "config", ".", "search", ".", "checkpoint_freq", "\n", "if", "self", ".", "optimizer", ".", "using_step_function", ":", "\n", "            ", "self", ".", "scheduler", "=", "self", ".", "build_search_scheduler", "(", "\n", "self", ".", "optimizer", ".", "op_optimizer", ",", "self", ".", "config", "\n", ")", "\n", "\n", "start_epoch", "=", "self", ".", "_setup_checkpointers", "(", "\n", "resume_from", ",", "period", "=", "checkpoint_freq", ",", "scheduler", "=", "self", ".", "scheduler", "\n", ")", "\n", "", "else", ":", "\n", "            ", "start_epoch", "=", "self", ".", "_setup_checkpointers", "(", "resume_from", ",", "period", "=", "checkpoint_freq", ")", "\n", "\n", "", "self", ".", "train_queue", ",", "self", ".", "valid_queue", ",", "_", "=", "self", ".", "build_search_dataloaders", "(", "\n", "self", ".", "config", "\n", ")", "\n", "\n", "for", "e", "in", "range", "(", "start_epoch", ",", "self", ".", "epochs", ")", ":", "\n", "            ", "self", ".", "optimizer", ".", "new_epoch", "(", "e", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "optimizer", ".", "using_step_function", ":", "\n", "                ", "for", "step", ",", "(", "data_train", ",", "data_val", ")", "in", "enumerate", "(", "\n", "zip", "(", "self", ".", "train_queue", ",", "self", ".", "valid_queue", ")", "\n", ")", ":", "\n", "                    ", "data_train", "=", "(", "\n", "data_train", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "data_train", "[", "1", "]", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", ",", "\n", ")", "\n", "data_val", "=", "(", "\n", "data_val", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "data_val", "[", "1", "]", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", ",", "\n", ")", "\n", "\n", "stats", "=", "self", ".", "optimizer", ".", "step", "(", "data_train", ",", "data_val", ")", "\n", "logits_train", ",", "logits_val", ",", "train_loss", ",", "val_loss", "=", "stats", "\n", "\n", "self", ".", "_store_accuracies", "(", "logits_train", ",", "data_train", "[", "1", "]", ",", "\"train\"", ")", "\n", "self", ".", "_store_accuracies", "(", "logits_val", ",", "data_val", "[", "1", "]", ",", "\"val\"", ")", "\n", "\n", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Epoch {}-{}, Train loss: {:.5f}, validation loss: {:.5f}, learning rate: {}\"", ".", "format", "(", "\n", "e", ",", "step", ",", "train_loss", ",", "val_loss", ",", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "\n", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "log_first_n", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"cuda consumption\\n {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "memory_summary", "(", ")", ")", ",", "\n", "n", "=", "3", ",", "\n", ")", "\n", "\n", "", "self", ".", "train_loss", ".", "update", "(", "float", "(", "train_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "self", ".", "val_loss", ".", "update", "(", "float", "(", "val_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "errors_dict", ".", "train_acc", ".", "append", "(", "self", ".", "train_top1", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "train_loss", ".", "append", "(", "self", ".", "train_loss", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "valid_acc", ".", "append", "(", "self", ".", "val_top1", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "valid_loss", ".", "append", "(", "self", ".", "val_loss", ".", "avg", ")", "\n", "self", ".", "errors_dict", ".", "runtime", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "", "else", ":", "\n", "                ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "(", "\n", "train_acc", ",", "\n", "train_loss", ",", "\n", "valid_acc", ",", "\n", "valid_loss", ",", "\n", ")", "=", "self", ".", "optimizer", ".", "train_statistics", "(", ")", "\n", "self", ".", "errors_dict", ".", "train_acc", ".", "append", "(", "train_acc", ")", "\n", "self", ".", "errors_dict", ".", "train_loss", ".", "append", "(", "train_loss", ")", "\n", "self", ".", "errors_dict", ".", "valid_acc", ".", "append", "(", "valid_acc", ")", "\n", "self", ".", "errors_dict", ".", "valid_loss", ".", "append", "(", "valid_loss", ")", "\n", "self", ".", "errors_dict", ".", "runtime", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "self", ".", "train_top1", ".", "avg", "=", "train_acc", "\n", "self", ".", "val_top1", ".", "avg", "=", "valid_acc", "\n", "\n", "", "self", ".", "periodic_checkpointer", ".", "step", "(", "e", ")", "\n", "\n", "anytime_results", "=", "self", ".", "optimizer", ".", "test_statistics", "(", ")", "\n", "if", "anytime_results", ":", "\n", "# record anytime performance", "\n", "                ", "self", ".", "errors_dict", ".", "arch_eval", ".", "append", "(", "anytime_results", ")", "\n", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Epoch {}, Anytime results: {}\"", ".", "format", "(", "e", ",", "anytime_results", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "", "self", ".", "_log_to_json", "(", ")", "\n", "self", ".", "_log_and_reset_accuracies", "(", "e", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "after_training", "(", ")", "\n", "logger", ".", "info", "(", "\"Training finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.main_worker": [[189, 378], ["logger.info", "logger.info", "torch.nn.DataParallel().cuda.reset_weights", "torch.nn.DataParallel().cuda.reset_weights", "torch.nn.DataParallel().cuda.reset_weights", "torch.nn.DataParallel().cuda.reset_weights", "torch.nn.DataParallel().cuda.reset_weights", "torch.nn.DataParallel().cuda.reset_weights", "logger.info", "trainer_multi.Trainer.build_eval_dataloaders", "trainer_multi.Trainer.build_eval_optimizer", "trainer_multi.Trainer.build_eval_scheduler", "trainer_multi.Trainer._setup_checkpointers", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.DataParallel().cuda.train", "torch.nn.DataParallel().cuda.train", "torch.nn.DataParallel().cuda.train", "torch.nn.DataParallel().cuda.train", "torch.nn.DataParallel().cuda.train", "torch.nn.DataParallel().cuda.train", "trainer_multi.Trainer.train_top1.reset", "trainer_multi.Trainer.train_top5.reset", "trainer_multi.Trainer.val_top1.reset", "trainer_multi.Trainer.val_top5.reset", "isinstance", "range", "trainer_multi.Trainer._setup_checkpointers", "trainer_multi.Trainer.optimizer.get_final_architecture", "torch.nn.DataParallel().cuda.query", "torch.nn.DataParallel().cuda.query", "torch.nn.DataParallel().cuda.query", "torch.nn.DataParallel().cuda.query", "torch.nn.DataParallel().cuda.query", "torch.nn.DataParallel().cuda.query", "logger.info", "logger.info", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logger.warning", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "isinstance", "enumerate", "trainer_multi.Trainer.step", "trainer_multi.Trainer.periodic_checkpointer.step", "trainer_multi.Trainer._log_and_reset_accuracies", "os.path.join", "torch.nn.DataParallel().cuda.modules_str", "torch.nn.DataParallel().cuda.modules_str", "torch.nn.DataParallel().cuda.modules_str", "torch.nn.DataParallel().cuda.modules_str", "torch.nn.DataParallel().cuda.modules_str", "torch.nn.DataParallel().cuda.modules_str", "int", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.module.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "torch.nn.DataParallel().cuda.update_edges", "input_train.to.to.to", "target_train.to.to.to", "trainer_multi.Trainer.zero_grad", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "hasattr", "torch.nn.CrossEntropyLoss.backward", "trainer_multi.Trainer.step", "trainer_multi.Trainer._store_accuracies", "naslib.utils.logging.log_every_n_seconds", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "enumerate", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "naslib.utils.logging.log_first_n", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "naslib.utils.logging.log_first_n", "input_valid.to().float.to().float.to().float", "target_valid.to().float.to().float.to().float", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "trainer_multi.Trainer._store_accuracies", "edge.data.set", "edge.data.set", "torch.nn.DataParallel().cuda.auxilary_logits", "torch.nn.DataParallel().cuda.auxilary_logits", "torch.nn.DataParallel().cuda.auxilary_logits", "torch.nn.DataParallel().cuda.auxilary_logits", "torch.nn.DataParallel().cuda.auxilary_logits", "torch.nn.DataParallel().cuda.auxilary_logits", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "trainer_multi.Trainer.get_last_lr", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "additional_primitives.DropPathWrapper", "additional_primitives.DropPathWrapper", "edge.data.set", "edge.data.set", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "torch.cuda.memory_summary", "input_valid.to().float.to().float.to", "target_valid.to().float.to().float.to"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.reset_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.reset_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.reset_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.reset_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.reset_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.reset_weights", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_dataloaders", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_optimizer", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_scheduler", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gp_base.BaseGPModel.train", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers", "home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_final_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._log_and_reset_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.modules_str", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.metaclasses.MetaOptimizer.step", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_first_n", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.auxilary_logits", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.auxilary_logits", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.auxilary_logits", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.auxilary_logits", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.auxilary_logits", "home.repos.pwc.inspect_result.gideonfr_emprox.darts.graph.DartsSearchSpace.auxilary_logits", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "main_worker", "(", "self", ",", "gpu", ",", "ngpus_per_node", ",", "args", ",", "search_model", ",", "best_arch", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Start evaluation\"", ")", "\n", "if", "not", "best_arch", ":", "\n", "            ", "if", "not", "search_model", ":", "\n", "                ", "search_model", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "save", ",", "\"search\"", ",", "\"model_final.pth\"", "\n", ")", "\n", "", "self", ".", "_setup_checkpointers", "(", "search_model", ")", "# required to load the architecture", "\n", "\n", "best_arch", "=", "self", ".", "optimizer", ".", "get_final_architecture", "(", ")", "\n", "", "logger", ".", "info", "(", "\"Final architecture:\\n\"", "+", "best_arch", ".", "modules_str", "(", ")", ")", "\n", "\n", "if", "best_arch", ".", "QUERYABLE", ":", "\n", "            ", "metric", "=", "Metric", ".", "TEST_ACCURACY", "\n", "result", "=", "best_arch", ".", "query", "(", "metric", "=", "metric", ",", "dataset", "=", "self", ".", "config", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "\"Queried results ({}): {}\"", ".", "format", "(", "metric", ",", "result", ")", ")", "\n", "self", ".", "QUERYABLE", "=", "True", "\n", "return", "\n", "\n", "", "best_arch", ".", "reset_weights", "(", "inplace", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Starting retraining from scratch\"", ")", "\n", "\n", "args", ".", "gpu", "=", "gpu", "\n", "if", "gpu", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "            ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "                ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all processes", "\n", "                ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ",", "\n", ")", "\n", "\n", "", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Using CPU, this will be slow!\"", ")", "\n", "", "elif", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "best_arch", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "best_arch", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "best_arch", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "best_arch", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "best_arch", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "best_arch", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "best_arch", "=", "best_arch", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "            ", "best_arch", "=", "torch", ".", "nn", ".", "DataParallel", "(", "best_arch", ")", ".", "cuda", "(", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "(", "\n", "self", ".", "train_queue", ",", "\n", "self", ".", "valid_queue", ",", "\n", "self", ".", "test_queue", ",", "\n", ")", "=", "self", ".", "build_eval_dataloaders", "(", "self", ".", "config", ")", "\n", "\n", "optim", "=", "self", ".", "build_eval_optimizer", "(", "best_arch", ".", "parameters", "(", ")", ",", "self", ".", "config", ")", "\n", "scheduler", "=", "self", ".", "build_eval_scheduler", "(", "optim", ",", "self", ".", "config", ")", "\n", "\n", "start_epoch", "=", "self", ".", "_setup_checkpointers", "(", "\n", "args", ".", "resume_from", ",", "\n", "search", "=", "False", ",", "\n", "period", "=", "self", ".", "config", ".", "evaluation", ".", "checkpoint_freq", ",", "\n", "model", "=", "best_arch", ",", "# checkpointables start here", "\n", "optim", "=", "optim", ",", "\n", "scheduler", "=", "scheduler", ",", "\n", ")", "\n", "\n", "grad_clip", "=", "self", ".", "config", ".", "evaluation", ".", "grad_clip", "\n", "loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "best_arch", ".", "train", "(", ")", "\n", "self", ".", "train_top1", ".", "reset", "(", ")", "\n", "self", ".", "train_top5", ".", "reset", "(", ")", "\n", "self", ".", "val_top1", ".", "reset", "(", ")", "\n", "self", ".", "val_top5", ".", "reset", "(", ")", "\n", "\n", "# Enable drop path", "\n", "if", "isinstance", "(", "best_arch", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "best_arch", ".", "module", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "edge", ".", "data", ".", "set", "(", "\n", "\"op\"", ",", "DropPathWrapper", "(", "edge", ".", "data", ".", "op", ")", "\n", ")", ",", "\n", "scope", "=", "best_arch", ".", "module", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "best_arch", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "edge", ".", "data", ".", "set", "(", "\n", "\"op\"", ",", "DropPathWrapper", "(", "edge", ".", "data", ".", "op", ")", "\n", ")", ",", "\n", "scope", "=", "best_arch", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", ",", "\n", ")", "\n", "\n", "# train from scratch", "\n", "", "epochs", "=", "self", ".", "config", ".", "evaluation", ".", "epochs", "\n", "for", "e", "in", "range", "(", "start_epoch", ",", "epochs", ")", ":", "\n", "# update drop path probability", "\n", "            ", "drop_path_prob", "=", "self", ".", "config", ".", "evaluation", ".", "drop_path_prob", "*", "e", "/", "epochs", "\n", "if", "isinstance", "(", "best_arch", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "best_arch", ".", "module", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "edge", ".", "data", ".", "set", "(", "\n", "\"drop_path_prob\"", ",", "drop_path_prob", "\n", ")", ",", "\n", "scope", "=", "best_arch", ".", "module", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "best_arch", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "edge", ".", "data", ".", "set", "(", "\n", "\"drop_path_prob\"", ",", "drop_path_prob", "\n", ")", ",", "\n", "scope", "=", "best_arch", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", ",", "\n", ")", "\n", "\n", "# Train queue", "\n", "", "for", "i", ",", "(", "input_train", ",", "target_train", ")", "in", "enumerate", "(", "self", ".", "train_queue", ")", ":", "\n", "                ", "input_train", "=", "input_train", ".", "to", "(", "self", ".", "device", ")", "\n", "target_train", "=", "target_train", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "logits_train", "=", "best_arch", "(", "input_train", ")", "\n", "train_loss", "=", "loss", "(", "logits_train", ",", "target_train", ")", "\n", "if", "hasattr", "(", "best_arch", ",", "\"auxilary_logits\"", ")", ":", "# darts specific stuff", "\n", "                    ", "log_first_n", "(", "logging", ".", "INFO", ",", "\"Auxiliary is used\"", ",", "n", "=", "10", ")", "\n", "auxiliary_loss", "=", "loss", "(", "best_arch", ".", "auxilary_logits", "(", ")", ",", "target_train", ")", "\n", "train_loss", "+=", "(", "\n", "self", ".", "config", ".", "evaluation", ".", "auxiliary_weight", "*", "auxiliary_loss", "\n", ")", "\n", "", "train_loss", ".", "backward", "(", ")", "\n", "if", "grad_clip", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "best_arch", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "", "optim", ".", "step", "(", ")", "\n", "\n", "self", ".", "_store_accuracies", "(", "logits_train", ",", "target_train", ",", "\"train\"", ")", "\n", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Epoch {}-{}, Train loss: {:.5}, learning rate: {}\"", ".", "format", "(", "\n", "e", ",", "i", ",", "train_loss", ",", "scheduler", ".", "get_last_lr", "(", ")", "\n", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "log_first_n", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"cuda consumption\\n {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "memory_summary", "(", ")", ")", ",", "\n", "n", "=", "3", ",", "\n", ")", "\n", "\n", "# Validation queue", "\n", "", "", "if", "self", ".", "valid_queue", ":", "\n", "                ", "for", "i", ",", "(", "input_valid", ",", "target_valid", ")", "in", "enumerate", "(", "self", ".", "valid_queue", ")", ":", "\n", "\n", "                    ", "input_valid", "=", "input_valid", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "target_valid", "=", "target_valid", ".", "to", "(", "\n", "self", ".", "device", ",", "non_blocking", "=", "True", "\n", ")", ".", "float", "(", ")", "\n", "\n", "# just log the validation accuracy", "\n", "logits_valid", "=", "best_arch", "(", "input_valid", ")", "\n", "self", ".", "_store_accuracies", "(", "logits_valid", ",", "target_valid", ",", "\"val\"", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "periodic_checkpointer", ".", "step", "(", "e", ")", "\n", "self", ".", "_log_and_reset_accuracies", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.evaluate": [[379, 491], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "best_arch.update_edges", "naslib.utils.utils.AverageMeter", "naslib.utils.utils.AverageMeter", "best_arch.eval", "enumerate", "logger.info", "logger.warning", "int", "torch.spawn", "torch.spawn", "torch.spawn", "torch.spawn", "torch.spawn", "torch.spawn", "trainer_multi.Trainer.main_worker", "input_test.to.to.to", "target_test.to.to.to", "input_test.to.to.size", "naslib.utils.logging.log_every_n_seconds", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "best_arch", "naslib.utils.utils.accuracy", "naslib.utils.utils.AverageMeter.update", "naslib.utils.utils.AverageMeter.update", "edge.data.set", "prec1.data.item", "prec5.data.item", "len", "edge.data.op.get_embedded_ops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.main_worker", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.logging.log_every_n_seconds", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.accuracy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops"], ["", "", "def", "evaluate", "(", "\n", "self", ",", "\n", "retrain", "=", "True", ",", "\n", "search_model", "=", "\"\"", ",", "\n", "resume_from", "=", "\"\"", ",", "\n", "best_arch", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the final architecture as given from the optimizer.\n\n        If the search space has an interface to a benchmark then query that.\n        Otherwise train as defined in the config.\n\n        Args:\n            retrain (bool): Reset the weights from the architecure search\n            search_model (str): Path to checkpoint file that was created during\n                search. If not provided, then try to load 'model_final.pth' from search\n            resume_from (str): Resume retraining from the given checkpoint file.\n            multi_gpu (bool): Distribute training on multiple gpus.\n            best_arch: Parsed model you want to directly evaluate and ignore the final model\n                from the optimizer.\n        \"\"\"", "\n", "\n", "# best_arch.to(self.device)", "\n", "self", ".", "config", ".", "evaluation", ".", "resume_from", "=", "resume_from", "\n", "if", "retrain", ":", "\n", "            ", "if", "self", ".", "config", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "\"You have chosen a specific GPU. This will completely \\\n                    disable data parallelism.\"", "\n", ")", "\n", "\n", "", "if", "(", "\n", "self", ".", "config", ".", "evaluation", ".", "dist_url", "==", "\"env://\"", "\n", "and", "self", ".", "config", ".", "evaluation", ".", "world_size", "==", "-", "1", "\n", ")", ":", "\n", "                ", "self", ".", "config", ".", "evaluation", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "self", ".", "config", ".", "evaluation", ".", "distributed", "=", "(", "\n", "self", ".", "config", ".", "evaluation", ".", "world_size", ">", "1", "\n", "or", "self", ".", "config", ".", "evaluation", ".", "multiprocessing_distributed", "\n", ")", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "self", ".", "config", ".", "evaluation", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the", "\n", "# total world_size needs to be adjusted", "\n", "                ", "self", ".", "config", ".", "evaluation", ".", "world_size", "=", "(", "\n", "ngpus_per_node", "*", "self", ".", "config", ".", "evaluation", ".", "world_size", "\n", ")", "\n", "# Use torch.multiprocessing.spawn to launch distributed", "\n", "# processes: the main_worker process function", "\n", "mp", ".", "spawn", "(", "\n", "self", ".", "main_worker", ",", "\n", "nprocs", "=", "ngpus_per_node", ",", "\n", "args", "=", "(", "\n", "ngpus_per_node", ",", "\n", "self", ".", "config", ".", "evaluation", ",", "\n", "search_model", ",", "\n", "best_arch", ",", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "                ", "self", ".", "main_worker", "(", "\n", "self", ".", "config", ".", "gpu", ",", "\n", "ngpus_per_node", ",", "\n", "self", ".", "config", ".", "evaluation", ",", "\n", "search_model", ",", "\n", "best_arch", ",", "\n", ")", "\n", "\n", "", "", "if", "not", "self", ".", "QUERYABLE", ":", "\n", "# Disable drop path", "\n", "            ", "best_arch", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "edge", ".", "data", ".", "set", "(", "\n", "\"op\"", ",", "edge", ".", "data", ".", "op", ".", "get_embedded_ops", "(", ")", "\n", ")", ",", "\n", "scope", "=", "best_arch", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", ",", "\n", ")", "\n", "\n", "# measure final test accuracy", "\n", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "best_arch", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "data_test", "in", "enumerate", "(", "self", ".", "test_queue", ")", ":", "\n", "                ", "input_test", ",", "target_test", "=", "data_test", "\n", "input_test", "=", "input_test", ".", "to", "(", "self", ".", "device", ")", "\n", "target_test", "=", "target_test", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "n", "=", "input_test", ".", "size", "(", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "logits", "=", "best_arch", "(", "input_test", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target_test", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Inference batch {} of {}.\"", ".", "format", "(", "i", ",", "len", "(", "self", ".", "test_queue", ")", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "", "logger", ".", "info", "(", "\n", "\"Evaluation finished. Test accuracies: top-1 = {:.5}, \\\n                        top-5 = {:.5}\"", ".", "format", "(", "\n", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_search_dataloaders": [[494, 500], ["naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["", "", "@", "staticmethod", "\n", "def", "build_search_dataloaders", "(", "config", ")", ":", "\n", "        ", "train_queue", ",", "valid_queue", ",", "test_queue", ",", "_", ",", "_", "=", "utils", ".", "get_train_val_loaders", "(", "\n", "config", ",", "mode", "=", "\"train\"", "\n", ")", "\n", "return", "train_queue", ",", "valid_queue", ",", "_", "# test_queue is not used in search currently", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_dataloaders": [[501, 507], ["naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["", "@", "staticmethod", "\n", "def", "build_eval_dataloaders", "(", "config", ")", ":", "\n", "        ", "train_queue", ",", "valid_queue", ",", "test_queue", ",", "_", ",", "_", "=", "utils", ".", "get_train_val_loaders", "(", "\n", "config", ",", "mode", "=", "\"val\"", "\n", ")", "\n", "return", "train_queue", ",", "valid_queue", ",", "test_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_optimizer": [[508, 515], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_eval_optimizer", "(", "parameters", ",", "config", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "SGD", "(", "\n", "parameters", ",", "\n", "lr", "=", "config", ".", "evaluation", ".", "learning_rate", ",", "\n", "momentum", "=", "config", ".", "evaluation", ".", "momentum", ",", "\n", "weight_decay", "=", "config", ".", "evaluation", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_search_scheduler": [[517, 523], ["torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_search_scheduler", "(", "optimizer", ",", "config", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "\n", "T_max", "=", "config", ".", "search", ".", "epochs", ",", "\n", "eta_min", "=", "config", ".", "search", ".", "learning_rate_min", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer.build_eval_scheduler": [[525, 531], ["torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_eval_scheduler", "(", "optimizer", ",", "config", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "\n", "T_max", "=", "config", ".", "evaluation", ".", "epochs", ",", "\n", "eta_min", "=", "config", ".", "evaluation", ".", "learning_rate_min", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._log_and_reset_accuracies": [[533, 550], ["logger.info", "trainer_multi.Trainer.train_top1.reset", "trainer_multi.Trainer.train_top5.reset", "trainer_multi.Trainer.train_loss.reset", "trainer_multi.Trainer.val_top1.reset", "trainer_multi.Trainer.val_top5.reset", "trainer_multi.Trainer.val_loss.reset"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.AverageMeter.reset"], ["", "def", "_log_and_reset_accuracies", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Epoch {} done. Train accuracy (top1, top5): {:.5f}, {:.5f}, \\\n            Validation accuracy: {:.5f}, {:.5f}\"", ".", "format", "(", "\n", "epoch", ",", "\n", "self", ".", "train_top1", ".", "avg", ",", "\n", "self", ".", "train_top5", ".", "avg", ",", "\n", "self", ".", "val_top1", ".", "avg", ",", "\n", "self", ".", "val_top5", ".", "avg", ",", "\n", ")", "\n", ")", "\n", "self", ".", "train_top1", ".", "reset", "(", ")", "\n", "self", ".", "train_top5", ".", "reset", "(", ")", "\n", "self", ".", "train_loss", ".", "reset", "(", ")", "\n", "self", ".", "val_top1", ".", "reset", "(", ")", "\n", "self", ".", "val_top5", ".", "reset", "(", ")", "\n", "self", ".", "val_loss", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._store_accuracies": [[551, 564], ["naslib.utils.utils.accuracy", "logits.size", "trainer_multi.Trainer.train_top1.update", "trainer_multi.Trainer.train_top5.update", "prec1.data.item", "prec5.data.item", "trainer_multi.Trainer.val_top1.update", "trainer_multi.Trainer.val_top5.update", "ValueError", "prec1.data.item", "prec5.data.item"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.accuracy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update"], ["", "def", "_store_accuracies", "(", "self", ",", "logits", ",", "target", ",", "split", ")", ":", "\n", "        ", "\"\"\"Update the accuracy counters\"\"\"", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "logits", ".", "size", "(", "0", ")", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "self", ".", "train_top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "self", ".", "train_top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "self", ".", "val_top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "self", ".", "val_top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown split: {}. Expected either 'train' or 'val'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._prepare_dataloaders": [[565, 579], ["naslib.utils.utils.get_train_val_loaders"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.get_train_val_loaders"], ["", "", "def", "_prepare_dataloaders", "(", "self", ",", "config", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"\n        Prepare train, validation, and test dataloaders with the splits defined\n        in the config.\n\n        Args:\n            config (AttrDict): config from config file.\n        \"\"\"", "\n", "train_queue", ",", "valid_queue", ",", "test_queue", ",", "_", ",", "_", "=", "utils", ".", "get_train_val_loaders", "(", "\n", "config", ",", "mode", "\n", ")", "\n", "self", ".", "train_queue", "=", "train_queue", "\n", "self", ".", "valid_queue", "=", "valid_queue", "\n", "self", ".", "test_queue", "=", "test_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._setup_checkpointers": [[580, 620], ["trainer_multi.Trainer.optimizer.get_checkpointables", "trainer_multi.Trainer.update", "naslib.utils.utils.Checkpointer", "fvcore.common.checkpoint.PeriodicCheckpointer", "logger.info", "naslib.utils.utils.Checkpointer.resume_or_load", "naslib.utils.utils.Checkpointer.has_checkpoint", "trainer_multi.Trainer.pop", "utils.Checkpointer.resume_or_load.get"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.rs.optimizer.RandomSearch.get_checkpointables", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.update", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["", "def", "_setup_checkpointers", "(", "\n", "self", ",", "resume_from", "=", "\"\"", ",", "search", "=", "True", ",", "period", "=", "1", ",", "**", "add_checkpointables", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sets up a periodic chechkpointer which can be used to save checkpoints\n        at every epoch. It will call optimizer's `get_checkpointables()` as objects\n        to store.\n\n        Args:\n            resume_from (str): A checkpoint file to resume the search or evaluation from.\n            search (bool): Whether search or evaluation phase is checkpointed. This is required\n                because the files are in different folders to not be overridden\n            add_checkpointables (object): Additional things to checkpoint together with the\n                optimizer's checkpointables.\n        \"\"\"", "\n", "checkpointables", "=", "self", ".", "optimizer", ".", "get_checkpointables", "(", ")", "\n", "checkpointables", ".", "update", "(", "add_checkpointables", ")", "\n", "\n", "checkpointer", "=", "utils", ".", "Checkpointer", "(", "\n", "model", "=", "checkpointables", ".", "pop", "(", "\"model\"", ")", ",", "\n", "save_dir", "=", "self", ".", "config", ".", "save", "+", "\"/search\"", "\n", "if", "search", "\n", "else", "self", ".", "config", ".", "save", "+", "\"/eval\"", ",", "\n", "**", "checkpointables", "\n", ")", "\n", "\n", "self", ".", "periodic_checkpointer", "=", "PeriodicCheckpointer", "(", "\n", "checkpointer", ",", "\n", "period", "=", "period", ",", "\n", "max_iter", "=", "self", ".", "config", ".", "search", ".", "epochs", "\n", "if", "search", "\n", "else", "self", ".", "config", ".", "evaluation", ".", "epochs", ",", "\n", ")", "\n", "\n", "if", "resume_from", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading model from file {}\"", ".", "format", "(", "resume_from", ")", ")", "\n", "checkpoint", "=", "checkpointer", ".", "resume_or_load", "(", "resume_from", ",", "resume", "=", "True", ")", "\n", "if", "checkpointer", ".", "has_checkpoint", "(", ")", ":", "\n", "                ", "return", "checkpoint", ".", "get", "(", "\"iteration\"", ",", "-", "1", ")", "+", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.defaults.trainer_multi.Trainer._log_to_json": [[621, 629], ["os.path.exists", "os.makedirs", "codecs.open", "json.dump", "os.path.join"], "methods", ["None"], ["", "def", "_log_to_json", "(", "self", ")", ":", "\n", "        ", "\"\"\"log training statistics to json file\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "save", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "save", ")", "\n", "", "with", "codecs", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "save", ",", "\"errors.json\"", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "errors_dict", ",", "file", ",", "separators", "=", "(", "\",\"", ",", "\":\"", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.__init__": [[39, 120], ["naslib.search_spaces.core.graph.Graph.__init__", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_edges_densly", "graph.TransBench101SearchSpace.add_nodes_from", "graph.TransBench101SearchSpace.add_edges_from", "graph.TransBench101SearchSpace.edges[].set", "range", "graph.TransBench101SearchSpace.edges[].set", "range", "graph.TransBench101SearchSpace.edges[].set", "range", "graph.TransBench101SearchSpace.edges[].set", "zip", "hasattr", "range", "naslib.search_spaces.core.primitives.Stem", "graph.TransBench101SearchSpace.edges[].set", "naslib.search_spaces.core.primitives.ResNetBasicblock", "graph.TransBench101SearchSpace.edges[].set", "naslib.search_spaces.core.primitives.ResNetBasicblock", "graph.TransBench101SearchSpace.edges[].set", "naslib.search_spaces.core.primitives.Sequential", "graph.TransBench101SearchSpace.update_edges", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "naslib.search_spaces.core.graph.Graph.copy().set_scope", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "range", "naslib.search_spaces.core.graph.Graph.copy", "naslib.search_spaces.core.graph.Graph.copy", "naslib.search_spaces.core.graph.Graph.copy", "graph._set_cell_ops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_edges_densly", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph._set_cell_ops"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "self", ".", "NUM_CLASSES", "if", "hasattr", "(", "self", ",", "'NUM_CLASSES'", ")", "else", "10", "\n", "self", ".", "op_indices", "=", "None", "\n", "\n", "self", ".", "max_epoch", "=", "199", "\n", "self", ".", "space_name", "=", "'transbench101'", "\n", "self", ".", "space", "=", "'micro'", "\n", "#", "\n", "# Cell definition", "\n", "#", "\n", "cell", "=", "Graph", "(", ")", "\n", "cell", ".", "name", "=", "\"cell\"", "# Use the same name for all cells with shared attributes", "\n", "\n", "# Input node", "\n", "cell", ".", "add_node", "(", "1", ")", "\n", "\n", "# Intermediate nodes", "\n", "cell", ".", "add_node", "(", "2", ")", "\n", "cell", ".", "add_node", "(", "3", ")", "\n", "\n", "# Output node", "\n", "cell", ".", "add_node", "(", "4", ")", "\n", "\n", "# Edges", "\n", "cell", ".", "add_edges_densly", "(", ")", "\n", "\n", "#", "\n", "# Makrograph definition", "\n", "#", "\n", "self", ".", "name", "=", "\"makrograph\"", "\n", "\n", "# Cell is on the edges", "\n", "# 1-2:               Preprocessing", "\n", "# 2-3, ..., 6-7:     cells stage 1", "\n", "# 7-8:               residual block stride 2", "\n", "# 8-9, ..., 12-13:   cells stage 2", "\n", "# 13-14:             residual block stride 2", "\n", "# 14-15, ..., 18-19: cells stage 3", "\n", "# 19-20:             post-processing", "\n", "\n", "total_num_nodes", "=", "20", "\n", "self", ".", "add_nodes_from", "(", "range", "(", "1", ",", "total_num_nodes", "+", "1", ")", ")", "\n", "self", ".", "add_edges_from", "(", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "1", ",", "total_num_nodes", ")", "]", ")", "\n", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "\n", "\n", "#", "\n", "# operations at the edges", "\n", "#", "\n", "\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_1'", ")", ")", "\n", "\n", "# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n", "", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n", "\n", "# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.query": [[122, 211], ["isinstance", "NotImplementedError", "NotImplementedError", "naslib.search_spaces.transbench101.conversions.convert_naslib_to_transbench101_micro", "naslib.search_spaces.transbench101.conversions.convert_naslib_to_transbench101_macro", "query_results.get_arch_result().query_all_results", "query_results.get_single_metric", "query_results.get_single_metric", "query_results.get_arch_result"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_transbench101_micro", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_transbench101_macro", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.ArchResult.query_all_results", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_single_metric", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_single_metric", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_result"], ["", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n", "", "if", "dataset_api", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n", "\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n", "\n", "\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_neg_loss'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "else", ":", "# ['normal', 'autoencoder']", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_ssim'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_ssim'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_ssim'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_l1_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_l1_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_l1_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "RAW", ":", "\n", "# return all data", "\n", "            ", "return", "query_results", ".", "get_arch_result", "(", "arch_str", ")", ".", "query_all_results", "(", ")", "[", "task", "]", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "HP", ":", "\n", "# return hyperparameter info", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "'cost_info'", "]", "\n", "", "elif", "metric", "==", "Metric", ".", "TRAIN_TIME", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "if", "full_lc", "and", "epoch", "==", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "\n", "", "elif", "full_lc", "and", "epoch", "!=", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "[", ":", "epoch", "]", "\n", "", "else", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices": [[213, 217], ["naslib.search_spaces.transbench101.conversions.convert_naslib_to_op_indices"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_op_indices"], ["", "", "def", "get_op_indices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "op_indices", "is", "None", ":", "\n", "            ", "self", ".", "op_indices", "=", "convert_naslib_to_op_indices", "(", "self", ")", "\n", "", "return", "self", ".", "op_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_hash": [[219, 221], ["tuple", "graph.TransBench101SearchSpace.get_op_indices"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "get_hash", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "get_op_indices", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices": [[223, 226], ["None"], "methods", ["None"], ["", "def", "set_op_indices", "(", "self", ",", "op_indices", ")", ":", "\n", "# This will update the edges in the naslib object to op_indices", "\n", "        ", "self", ".", "op_indices", "=", "op_indices", "\n", "#         convert_op_indices_to_naslib(op_indices, self)", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_arch_iterator": [[228, 230], ["itertools.product", "range"], "methods", ["None"], ["", "def", "get_arch_iterator", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "return", "itertools", ".", "product", "(", "range", "(", "4", ")", ",", "repeat", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_spec": [[231, 235], ["graph.TransBench101SearchSpace.set_op_indices"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["", "def", "set_spec", "(", "self", ",", "op_indices", ",", "dataset_api", "=", "None", ")", ":", "\n", "# this is just to unify the setters across search spaces", "\n", "# TODO: change it to set_spec on all search spaces", "\n", "        ", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.sample_random_architecture_micro": [[236, 243], ["numpy.random.randint", "graph.TransBench101SearchSpace.set_op_indices"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["", "def", "sample_random_architecture_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "op_indices", "=", "np", ".", "random", ".", "randint", "(", "4", ",", "size", "=", "(", "6", ")", ")", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.sample_random_architecture_macro": [[245, 260], ["random.randint", "random.randint", "random.randint", "numpy.random.permutation", "graph.TransBench101SearchSpace.set_op_indices", "int", "len", "numpy.append", "int", "range", "range", "sum", "zip"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["", "def", "sample_random_architecture_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "r", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "p", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "q", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "op_indices", "=", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.sample_random_architecture": [[262, 267], ["graph.TransBench101SearchSpace.sample_random_architecture_micro", "graph.TransBench101SearchSpace.sample_random_architecture_macro"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.sample_random_architecture_micro", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.sample_random_architecture_macro"], ["", "def", "sample_random_architecture", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_macro", "(", "dataset_api", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.mutate_micro": [[269, 282], ["parent.get_op_indices", "list", "numpy.random.choice", "numpy.random.choice", "graph.TransBench101SearchSpace.set_op_indices", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["", "", "def", "mutate_micro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "op_indices", "=", "list", "(", "parent_op_indices", ")", "\n", "\n", "edge", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "parent_op_indices", ")", ")", "\n", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "parent_op_indices", "[", "edge", "]", "]", "\n", "op_index", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "op_indices", "[", "edge", "]", "=", "op_index", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.mutate_macro": [[283, 322], ["parent.get_op_indices", "graph.TransBench101SearchSpace.mutate_macro.f"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "mutate_macro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "parent_op_ind", "=", "parent_op_indices", "[", "parent_op_indices", "!=", "0", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "parent_op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "dic1", "=", "{", "1", ":", "a", ",", "2", ":", "b", ",", "3", ":", "c", "}", "\n", "dic2", "=", "{", "1", ":", "a_available", ",", "2", ":", "b_available", ",", "3", ":", "c_available", "}", "\n", "\n", "numb", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "\n", "dic1", "[", "numb", "]", "=", "random", ".", "choice", "(", "dic2", "[", "numb", "]", ")", "\n", "\n", "\n", "op_indices", "=", "g", "(", "dic1", "[", "1", "]", ",", "dic1", "[", "2", "]", ",", "dic1", "[", "3", "]", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.mutate": [[324, 329], ["graph.TransBench101SearchSpace.mutate_micro", "graph.TransBench101SearchSpace.mutate_macro"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.mutate_micro", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.mutate_macro"], ["", "def", "mutate", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "mutate_micro", "(", "parent", ",", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "mutate_macro", "(", "parent", ",", "dataset_api", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_nbhd_micro": [[332, 350], ["graph.TransBench101SearchSpace.get_op_indices", "range", "random.shuffle", "len", "list().copy", "graph.TransBench101SearchSpace", "graph.TransBench101SearchSpace.set_op_indices", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "nbrs.append", "range", "len", "list"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.set_op_indices"], ["", "", "def", "get_nbhd_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "nbrs", "=", "[", "]", "\n", "for", "edge", "in", "range", "(", "len", "(", "self", ".", "op_indices", ")", ")", ":", "\n", "            ", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "self", ".", "op_indices", "[", "edge", "]", "]", "\n", "\n", "for", "op_index", "in", "available", ":", "\n", "                ", "nbr_op_indices", "=", "list", "(", "self", ".", "op_indices", ")", ".", "copy", "(", ")", "\n", "nbr_op_indices", "[", "edge", "]", "=", "op_index", "\n", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_nbhd_macro": [[352, 390], ["graph.TransBench101SearchSpace.get_op_indices", "graph.TransBench101SearchSpace.mutate_macro.f"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_op_indices"], ["", "def", "get_nbhd_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "op_ind", "=", "self", ".", "op_indices", "[", "self", ".", "op_indices", "!=", "0", "]", "\n", "nbrs", "=", "[", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "for", "r", "in", "a_available", ":", "\n", "            ", "for", "p", "in", "b_available", ":", "\n", "                ", "for", "q", "in", "c_available", ":", "\n", "                    ", "nbr_op_indices", "=", "g", "(", "r", ",", "p", ",", "q", ")", "\n", "while", "len", "(", "nbr_op_indices", ")", "<", "6", ":", "\n", "                        ", "nbr_op_indices", "=", "np", ".", "append", "(", "nbr_op_indices", ",", "0", ")", "\n", "", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_nbhd": [[392, 397], ["graph.TransBench101SearchSpace.get_nbhd_micro", "graph.TransBench101SearchSpace.get_nbhd_macro"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_nbhd_micro", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_nbhd_macro"], ["", "def", "get_nbhd", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_macro", "(", "dataset_api", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph.TransBench101SearchSpace.get_type": [[401, 404], ["None"], "methods", ["None"], ["", "", "def", "get_type", "(", "self", ")", ":", "\n", "#         return 'transbench101'", "\n", "        ", "return", "'transbench101'", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.graph._set_cell_ops": [[406, 412], ["edge.data.set", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.Zero", "naslib.search_spaces.core.primitives.ReLUConvBN", "naslib.search_spaces.core.primitives.ReLUConvBN"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "", "def", "_set_cell_ops", "(", "edge", ",", "C", ")", ":", "\n", "    ", "edge", ".", "data", ".", "set", "(", "'op'", ",", "[", "\n", "ops", ".", "Identity", "(", ")", ",", "\n", "ops", ".", "Zero", "(", "stride", "=", "1", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "3", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "1", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.primitives.ResNetBasicblock.__init__": [[20, 31], ["core.primitives.AbstractPrimitive.__init__", "core.primitives.ReLUConvBN", "core.primitives.ReLUConvBN", "locals", "torch.Sequential", "torch.AvgPool2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "C_out", ",", "C_out", ",", "3", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.primitives.ResNetBasicblock.forward": [[33, 38], ["primitives.ResNetBasicblock.conv_a", "primitives.ResNetBasicblock.conv_b", "primitives.ResNetBasicblock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "x", ",", "None", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ",", "None", ")", "\n", "residual", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "is", "not", "None", "else", "x", "\n", "return", "residual", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.primitives.ResNetBasicblock.get_embedded_ops": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_embedded_ops", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.__init__": [[13, 26], ["torch.load", "list", "api.TransNASBenchAPI._gen_arch2space", "api.TransNASBenchAPI._gen_all_data", "api.TransNASBenchAPI.database[].keys", "list", "[].keys"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.Checkpointer.load", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI._gen_arch2space", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI._gen_all_data"], ["def", "__init__", "(", "self", ",", "database_path", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "database", "=", "torch", ".", "load", "(", "database_path", ")", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "metrics_dict", "=", "self", ".", "database", "[", "'metrics_dict'", "]", "# {task : metrics_list}", "\n", "self", ".", "info_names", "=", "self", ".", "database", "[", "'info_names'", "]", "# ['inference_time', 'encoder_params', 'encoder_FLOPs' ... ]", "\n", "self", ".", "task_list", "=", "self", ".", "database", "[", "'task_list'", "]", "# [7 tasks]", "\n", "\n", "self", ".", "search_spaces", "=", "list", "(", "self", ".", "database", "[", "'data'", "]", ".", "keys", "(", ")", ")", "\n", "self", ".", "all_arch_dict", "=", "{", "k", ":", "list", "(", "self", ".", "database", "[", "'data'", "]", "[", "k", "]", ".", "keys", "(", ")", ")", "for", "k", "in", "self", ".", "search_spaces", "}", "\n", "self", ".", "arch2space", "=", "self", ".", "_gen_arch2space", "(", "self", ".", "all_arch_dict", ")", "\n", "\n", "self", ".", "data", "=", "self", ".", "_gen_all_data", "(", "self", ".", "database", ",", "self", ".", "arch2space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.__getitem__": [[27, 30], ["api.TransNASBenchAPI.index2arch", "copy.deepcopy", "api.TransNASBenchAPI.get_arch_result"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.index2arch", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_result"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "arch", "=", "self", ".", "index2arch", "(", "index", ")", "\n", "return", "copy", ".", "deepcopy", "(", "self", ".", "get_arch_result", "(", "arch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.__len__": [[31, 33], ["len", "api.TransNASBenchAPI.arch2space.keys"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "arch2space", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.__repr__": [[34, 37], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}({total} architectures/{task} tasks)'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "\n", "total", "=", "len", "(", "self", ")", ",", "task", "=", "len", "(", "self", ".", "task_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.index2arch": [[38, 40], ["list", "api.TransNASBenchAPI.arch2space.keys"], "methods", ["None"], ["", "def", "index2arch", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "arch2space", ".", "keys", "(", ")", ")", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.arch2index": [[41, 43], ["list().index", "list", "api.TransNASBenchAPI.arch2space.keys"], "methods", ["None"], ["", "def", "arch2index", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "arch2space", ".", "keys", "(", ")", ")", ".", "index", "(", "arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_result": [[44, 46], ["None"], "methods", ["None"], ["", "def", "get_arch_result", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "self", ".", "arch2space", "[", "arch", "]", "]", "[", "arch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_total_epochs": [[47, 50], ["api.TransNASBenchAPI.get_arch_result"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_result"], ["", "def", "get_total_epochs", "(", "self", ",", "arch", ",", "task", ")", ":", "\n", "        ", "arch_result", "=", "self", ".", "get_arch_result", "(", "arch", ")", "\n", "return", "arch_result", "[", "task", "]", "[", "'total_epochs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_model_info": [[51, 55], ["api.TransNASBenchAPI.get_arch_result"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_result"], ["", "def", "get_model_info", "(", "self", ",", "arch", ",", "task", ",", "info", ")", ":", "\n", "        ", "assert", "info", "in", "self", ".", "info_names", ",", "f\"info {info} is not available! Must in {self.info_names}!\"", "\n", "arch_result", "=", "self", ".", "get_arch_result", "(", "arch", ")", "\n", "return", "arch_result", "[", "task", "]", "[", "'model_info'", "]", "[", "info", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_single_metric": [[56, 91], ["api.TransNASBenchAPI.get_arch_result", "isinstance", "isinstance", "ValueError", "max", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_result"], ["", "def", "get_single_metric", "(", "self", ",", "arch", ",", "task", ",", "metric", ",", "mode", "=", "\"best\"", ",", "xseed", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        get single metric value\n        Args:\n            arch: architecture string\n            task: a single task in tasks specified in self.task_list\n            metric: the metric name for querying\n            mode: ['final', 'best', 'list'] or epoch_number\n            xseed: [None] or seed number\n\n        Returns:\n            metric value or values according to mode of querying\n        \"\"\"", "\n", "#         print('metric ----->', metric)", "\n", "#         print('metrics_dict ----->', self.metrics_dict[task])", "\n", "assert", "metric", "in", "self", ".", "metrics_dict", "[", "task", "]", ",", "f\"metric {metric} is not available for task {task}! Must in {self.metrics_dict[task]}!\"", "\n", "arch_result", "=", "self", ".", "get_arch_result", "(", "arch", ")", "\n", "metric_list", "=", "arch_result", "[", "task", "]", "[", "'metrics'", "]", "[", "metric", "]", "\n", "\n", "if", "isinstance", "(", "mode", ",", "str", ")", ":", "\n", "            ", "if", "mode", "==", "'final'", ":", "\n", "                ", "return", "metric_list", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "'best'", ":", "\n", "                ", "return", "max", "(", "metric_list", ")", "\n", "", "elif", "mode", "==", "'list'", ":", "\n", "                ", "return", "metric_list", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f\"get_metric() str mode can only be ['final', 'best', 'list']\"", ")", "\n", "", "", "elif", "isinstance", "(", "mode", ",", "int", ")", ":", "\n", "            ", "assert", "mode", "<", "len", "(", "\n", "metric_list", ")", ",", "f\"get_metric() int mode must < total epoch {len(metric_list)} for task {task}!\"", "\n", "return", "metric_list", "[", "mode", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"get_metric() mode must be 'final', 'best', 'list' or epoch_number\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_epoch_status": [[92, 103], ["isinstance", "api.TransNASBenchAPI.get_arch_result", "api.TransNASBenchAPI.get_total_epochs"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_result", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_total_epochs"], ["", "", "def", "get_epoch_status", "(", "self", ",", "arch", ",", "task", ",", "epoch", ",", "xseed", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "epoch", ",", "int", ")", ",", "f\"arg epoch {epoch} must be int\"", "\n", "arch_result", "=", "self", ".", "get_arch_result", "(", "arch", ")", "\n", "epoch_upper", "=", "arch_result", "[", "task", "]", "[", "'total_epochs'", "]", "\n", "assert", "epoch", "<", "epoch_upper", ",", "f\"arg epoch {epoch} must < {epoch_upper} on task {task}\"", "\n", "\n", "exp_dict", "=", "arch_result", "[", "task", "]", "[", "'metrics'", "]", "\n", "\n", "ep_status", "=", "{", "'epoch'", ":", "epoch", "if", "epoch", ">=", "0", "else", "self", ".", "get_total_epochs", "(", "arch", ",", "task", ")", "+", "epoch", "}", "\n", "ep_status", "=", "{", "**", "ep_status", ",", "**", "{", "k", ":", "exp_dict", "[", "k", "]", "[", "epoch", "]", "for", "k", "in", "self", ".", "metrics_dict", "[", "task", "]", "}", "}", "\n", "return", "ep_status", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_best_epoch_status": [[104, 120], ["api.TransNASBenchAPI.get_single_metric", "max", "api.TransNASBenchAPI.get_epoch_status", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_single_metric", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_epoch_status"], ["", "def", "get_best_epoch_status", "(", "self", ",", "arch", ",", "task", ",", "metric", ")", ":", "\n", "        ", "\"\"\"\n        get the best epoch status with respect to a certain metric (equiv. to early stopping at best validation metric)\n        Args:\n            arch: architecture string\n            task: task name\n            metric: metric name specified in the metrics_dict\n\n        Returns: a status dict of the best epoch\n        \"\"\"", "\n", "assert", "metric", "in", "self", ".", "metrics_dict", "[", "task", "]", ",", "f\"metric {metric} is not available for task {task}! Must in {self.metrics_dict[task]}!\"", "\n", "metric_list", "=", "self", ".", "get_single_metric", "(", "arch", ",", "task", ",", "metric", ",", "mode", "=", "\"list\"", ")", "\n", "best_epoch", "=", "max", "(", "range", "(", "len", "(", "metric_list", ")", ")", ",", "key", "=", "lambda", "i", ":", "metric_list", "[", "i", "]", ")", "# return argmax", "\n", "best_ep_status", "=", "self", ".", "get_epoch_status", "(", "arch", ",", "task", ",", "epoch", "=", "best_epoch", ")", "\n", "return", "best_ep_status", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_list": [[121, 124], ["None"], "methods", ["None"], ["", "def", "get_arch_list", "(", "self", ",", "search_space", ")", ":", "\n", "        ", "assert", "search_space", "in", "self", ".", "search_spaces", ",", "f'search_space must in {self.search_spaces}'", "\n", "return", "self", ".", "all_arch_dict", "[", "search_space", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_best_archs": [[125, 129], ["api.TransNASBenchAPI.get_arch_list", "list", "map", "sorted", "api.TransNASBenchAPI.get_single_metric"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_arch_list", "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI.get_single_metric"], ["", "def", "get_best_archs", "(", "self", ",", "task", ",", "metric", ",", "search_space", ",", "topk", "=", "1", ")", ":", "\n", "        ", "arch_list", "=", "self", ".", "get_arch_list", "(", "search_space", "=", "search_space", ")", "\n", "tuple_list", "=", "list", "(", "map", "(", "lambda", "arch", ":", "(", "self", ".", "get_single_metric", "(", "arch", ",", "task", ",", "metric", ",", "mode", "=", "\"best\"", ")", ",", "arch", ")", ",", "arch_list", ")", ")", "\n", "return", "sorted", "(", "tuple_list", ",", "reverse", "=", "True", ")", "[", ":", "topk", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI._gen_arch2space": [[130, 136], ["all_arch_dict.items", "dict", "zip", "len"], "methods", ["None"], ["", "def", "_gen_arch2space", "(", "self", ",", "all_arch_dict", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "for", "ss", ",", "ls", "in", "all_arch_dict", ".", "items", "(", ")", ":", "\n", "            ", "tmp", "=", "dict", "(", "zip", "(", "ls", ",", "[", "ss", "]", "*", "len", "(", "ls", ")", ")", ")", "\n", "result", "=", "{", "**", "result", ",", "**", "tmp", "}", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.TransNASBenchAPI._gen_all_data": [[137, 144], ["enumerate", "arch2space.items", "api.ArchResult"], "methods", ["None"], ["", "def", "_gen_all_data", "(", "self", ",", "database", ",", "arch2space", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "for", "ss", "in", "self", ".", "search_spaces", ":", "\n", "            ", "data", "[", "ss", "]", "=", "{", "}", "\n", "", "for", "idx", ",", "(", "arch", ",", "space", ")", "in", "enumerate", "(", "arch2space", ".", "items", "(", ")", ")", ":", "\n", "            ", "data", "[", "space", "]", "[", "arch", "]", "=", "ArchResult", "(", "idx", ",", "arch", ",", "database", "[", "'data'", "]", "[", "space", "]", "[", "arch", "]", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.ArchResult.__init__": [[148, 154], ["int", "copy.deepcopy", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "arch_index", ",", "arch_str", ",", "all_results", ")", ":", "\n", "        ", "self", ".", "arch_index", "=", "int", "(", "arch_index", ")", "\n", "self", ".", "arch_str", "=", "copy", ".", "deepcopy", "(", "arch_str", ")", "\n", "\n", "assert", "isinstance", "(", "all_results", ",", "dict", ")", "\n", "self", ".", "all_results", "=", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.ArchResult.__repr__": [[155, 161], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "'{name}(arch-index={index}, arch={arch}, {num} tasks)'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "\n", "index", "=", "self", ".", "arch_index", ",", "\n", "arch", "=", "self", ".", "arch_str", ",", "\n", "num", "=", "len", "(", "self", ".", "all_results", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.ArchResult.__getitem__": [[162, 164], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "all_results", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.api.ArchResult.query_all_results": [[165, 167], ["None"], "methods", ["None"], ["", "def", "query_all_results", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "all_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_op_indices": [[20, 28], ["naslib_object._get_child_graphs", "ops.append", "OP_NAMES.index"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph._get_child_graphs"], ["def", "convert_naslib_to_op_indices", "(", "naslib_object", ")", ":", "\n", "\n", "    ", "cell", "=", "naslib_object", ".", "_get_child_graphs", "(", "single_instances", "=", "True", ")", "[", "0", "]", "\n", "ops", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "EDGE_LIST", ":", "\n", "        ", "ops", ".", "append", "(", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", ")", "\n", "\n", "", "return", "[", "OP_NAMES", ".", "index", "(", "name", ")", "for", "name", "in", "ops", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_op_indices_to_naslib": [[30, 78], ["enumerate", "naslib_object.update_edges", "naslib_object.update_edges", "isinstance", "edge.data.set", "edge.data.set", "enumerate", "edge.data.set"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["", "def", "convert_op_indices_to_naslib", "(", "op_indices", ",", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts op indices to a naslib object\n    input: op_indices (list of six ints)\n    naslib_object is an empty NasBench201SearchSpace() object.\n    Do not call this method with a naslib object that has already been \n    discretized (i.e., all edges have a single op).\n\n    output: none, but the naslib object now has all edges set\n    as in genotype.\n    \n    warning: this method will modify the edges in naslib_object.\n    \"\"\"", "\n", "\n", "# create a dictionary of edges to ops", "\n", "edge_op_dict", "=", "{", "}", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "op_indices", ")", ":", "\n", "        ", "edge_op_dict", "[", "EDGE_LIST", "[", "i", "]", "]", "=", "OP_NAMES", "[", "index", "]", "\n", "\n", "", "def", "add_op_index", "(", "edge", ")", ":", "\n", "# function that adds the op index from the dictionary to each edge", "\n", "        ", "if", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "in", "edge_op_dict", ":", "\n", "            ", "for", "i", ",", "op", "in", "enumerate", "(", "edge", ".", "data", ".", "op", ")", ":", "\n", "                ", "if", "op", ".", "get_op_name", "==", "edge_op_dict", "[", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "]", ":", "\n", "                    ", "index", "=", "i", "\n", "break", "\n", "", "", "edge", ".", "data", ".", "set", "(", "'op_index'", ",", "index", ",", "shared", "=", "True", ")", "\n", "\n", "", "", "def", "update_ops", "(", "edge", ")", ":", "\n", "# function that replaces the primitive ops at the edges with the one in op_index", "\n", "        ", "if", "isinstance", "(", "edge", ".", "data", ".", "op", ",", "list", ")", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "", "else", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "primitives", "\n", "\n", "", "edge", ".", "data", ".", "set", "(", "'op'", ",", "primitives", "[", "edge", ".", "data", ".", "op_index", "]", ")", "\n", "edge", ".", "data", ".", "set", "(", "'primitives'", ",", "primitives", ")", "# store for later use", "\n", "\n", "", "naslib_object", ".", "update_edges", "(", "\n", "add_op_index", ",", "\n", "scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "naslib_object", ".", "update_edges", "(", "\n", "update_ops", ",", "\n", "scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_str": [[80, 103], ["sorted"], "function", ["None"], ["", "def", "convert_naslib_to_str", "(", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "\n", "ops_to_nb201", "=", "{", "\n", "'AvgPool1x1'", ":", "'avg_pool_3x3'", ",", "\n", "'ReLUConvBN1x1'", ":", "'nor_conv_1x1'", ",", "\n", "'ReLUConvBN3x3'", ":", "'nor_conv_3x3'", ",", "\n", "'Identity'", ":", "'skip_connect'", ",", "\n", "'Zero'", ":", "'none'", ",", "\n", "}", "\n", "\n", "cell", "=", "naslib_object", ".", "edges", "[", "2", ",", "3", "]", ".", "op", "\n", "\n", "edge_op_dict", "=", "{", "\n", "(", "i", ",", "j", ")", ":", "ops_to_nb201", "[", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", "]", "for", "i", ",", "j", "in", "cell", ".", "edges", "\n", "}", "\n", "op_edge_list", "=", "[", "\n", "'{}~{}'", ".", "format", "(", "edge_op_dict", "[", "(", "i", ",", "j", ")", "]", ",", "i", "-", "1", ")", "for", "i", ",", "j", "in", "sorted", "(", "edge_op_dict", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "]", "\n", "\n", "return", "'|{}|+|{}|{}|+|{}|{}|{}|'", ".", "format", "(", "*", "op_edge_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_transbench101_micro": [[133, 138], ["None"], "function", ["None"], ["", "def", "convert_naslib_to_transbench101_micro", "(", "op_indices", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "return", "'64-41414-{}_{}{}_{}{}{}'", ".", "format", "(", "*", "op_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.transbench101.conversions.convert_naslib_to_transbench101_macro": [[141, 147], ["str", "op_indices.tolist"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist"], ["", "def", "convert_naslib_to_transbench101_macro", "(", "op_indices", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "ops_string", "=", "''", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "op_indices", ".", "tolist", "(", ")", "if", "e", "!=", "0", "]", ")", "\n", "return", "'64-{}-basic'", ".", "format", "(", "ops_string", ")", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.__init__": [[40, 46], ["naslib.search_spaces.core.graph.Graph.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "self", ".", "NUM_CLASSES", "if", "hasattr", "(", "self", ",", "'NUM_CLASSES'", ")", "else", "10", "\n", "self", ".", "op_indices", "=", "None", "\n", "\n", "self", ".", "max_epoch", "=", "199", "\n", "self", ".", "space_name", "=", "'transbench101'", "\n", "self", ".", "space", "=", "'micro'", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.load_labeled_architecture": [[47, 59], ["graph.NasBenchNLPSearchSpace.set_compact", "numpy.random.choice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact"], ["#", "\n", "# Cell definition", "\n", "#", "\n", "cell", "=", "Graph", "(", ")", "\n", "cell", ".", "name", "=", "\"cell\"", "# Use the same name for all cells with shared attributes", "\n", "\n", "# Input node", "\n", "cell", ".", "add_node", "(", "1", ")", "\n", "\n", "# Intermediate nodes", "\n", "cell", ".", "add_node", "(", "2", ")", "\n", "cell", ".", "add_node", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.query": [[60, 147], ["naslib.predictors.utils.encodings_nlp.encode_nlp", "dataset_api[].predict", "NotImplementedError", "int"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.encodings_nlp.encode_nlp", "home.repos.pwc.inspect_result.gideonfr_emprox.gp.gpwl.GPWLPredictor.predict"], ["# Output node", "\n", "cell", ".", "add_node", "(", "4", ")", "\n", "\n", "# Edges", "\n", "cell", ".", "add_edges_densly", "(", ")", "\n", "\n", "#", "\n", "# Makrograph definition", "\n", "#", "\n", "self", ".", "name", "=", "\"makrograph\"", "\n", "\n", "# Cell is on the edges", "\n", "# 1-2:               Preprocessing", "\n", "# 2-3, ..., 6-7:     cells stage 1", "\n", "# 7-8:               residual block stride 2", "\n", "# 8-9, ..., 12-13:   cells stage 2", "\n", "# 13-14:             residual block stride 2", "\n", "# 14-15, ..., 18-19: cells stage 3", "\n", "# 19-20:             post-processing", "\n", "\n", "total_num_nodes", "=", "20", "\n", "self", ".", "add_nodes_from", "(", "range", "(", "1", ",", "total_num_nodes", "+", "1", ")", ")", "\n", "self", ".", "add_edges_from", "(", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "1", ",", "total_num_nodes", ")", "]", ")", "\n", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "\n", "\n", "#", "\n", "# operations at the edges", "\n", "#", "\n", "\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_1'", ")", ")", "\n", "\n", "# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n", "", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n", "\n", "# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n", "", "if", "dataset_api", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n", "\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n", "\n", "\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.get_compact": [[148, 151], ["None"], "methods", ["None"], ["Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.get_hash": [[152, 154], ["graph.NasBenchNLPSearchSpace.get_compact"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact"], ["Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.set_compact": [[155, 157], ["tuple"], "methods", ["None"], ["", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.get_arch_iterator": [[158, 163], ["numpy.array", "random.shuffle"], "methods", ["None"], ["Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_neg_loss'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.set_spec": [[164, 168], ["graph.NasBenchNLPSearchSpace.set_compact"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact"], ["Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace._generate_redundant_graph": [[169, 205], ["numpy.random.choice", "numpy.random.choice", "activation_nodes.append", "numpy.random.choice", "len", "len", "numpy.random.choice", "list", "list", "len", "numpy.random.choice", "recipe.keys", "set", "set"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "else", ":", "# ['normal', 'autoencoder']", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_ssim'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_ssim'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_ssim'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_l1_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_l1_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_l1_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "RAW", ":", "\n", "# return all data", "\n", "            ", "return", "query_results", ".", "get_arch_result", "(", "arch_str", ")", ".", "query_all_results", "(", ")", "[", "task", "]", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "HP", ":", "\n", "# return hyperparameter info", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "'cost_info'", "]", "\n", "", "elif", "metric", "==", "Metric", ".", "TRAIN_TIME", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "if", "full_lc", "and", "epoch", "==", "-", "1", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace._create_hidden_nodes": [[206, 220], ["numpy.random.choice", "list", "recipe.keys", "new_hiddens_map.get", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.get"], ["            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "\n", "", "elif", "full_lc", "and", "epoch", "!=", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "[", ":", "epoch", "]", "\n", "", "else", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "", "def", "get_op_indices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "op_indices", "is", "None", ":", "\n", "            ", "self", ".", "op_indices", "=", "convert_naslib_to_op_indices", "(", "self", ")", "\n", "", "return", "self", ".", "op_indices", "\n", "\n", "\n", "", "def", "get_hash", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "get_op_indices", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace._remove_redundant_nodes": [[221, 240], ["set", "list", "len", "recipe.keys", "range", "q.append", "set.add"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["\n", "\n", "", "def", "set_op_indices", "(", "self", ",", "op_indices", ")", ":", "\n", "# This will update the edges in the naslib object to op_indices", "\n", "        ", "self", ".", "op_indices", "=", "op_indices", "\n", "#         convert_op_indices_to_naslib(op_indices, self)", "\n", "\n", "", "def", "get_arch_iterator", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "return", "itertools", ".", "product", "(", "range", "(", "4", ")", ",", "repeat", "=", "6", ")", "\n", "\n", "", "def", "set_spec", "(", "self", ",", "op_indices", ",", "dataset_api", "=", "None", ")", ":", "\n", "# this is just to unify the setters across search spaces", "\n", "# TODO: change it to set_spec on all search spaces", "\n", "        ", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "sample_random_architecture_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.sample_random_architecture": [[241, 271], ["graph.NasBenchNLPSearchSpace._generate_redundant_graph", "graph.NasBenchNLPSearchSpace._create_hidden_nodes", "graph.NasBenchNLPSearchSpace._remove_redundant_nodes", "range", "naslib.search_spaces.nasbenchnlp.conversions.convert_recipe_to_compact", "graph.NasBenchNLPSearchSpace.set_compact", "range", "len", "len", "set", "set"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace._generate_redundant_graph", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace._create_hidden_nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace._remove_redundant_nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.convert_recipe_to_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["op_indices", "=", "np", ".", "random", ".", "randint", "(", "4", ",", "size", "=", "(", "6", ")", ")", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "r", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "p", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "q", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "op_indices", "=", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "", "", "def", "mutate_micro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.mutate": [[272, 322], ["parent.get_compact", "naslib.search_spaces.nasbenchnlp.conversions.make_compact_mutable", "copy.deepcopy", "max", "range", "graph.NasBenchNLPSearchSpace.set_compact", "int", "max", "numpy.random.choice", "hiddens.pop", "hiddens.append", "hiddens.sort", "numpy.random.choice", "numpy.random.choice", "len", "range", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "numpy.random.choice", "range", "len", "numpy.random.choice", "range", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.make_compact_mutable", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact"], ["\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "op_indices", "=", "list", "(", "parent_op_indices", ")", "\n", "\n", "edge", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "parent_op_indices", ")", ")", "\n", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "parent_op_indices", "[", "edge", "]", "]", "\n", "op_index", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "op_indices", "[", "edge", "]", "=", "op_index", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "mutate_macro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "parent_op_ind", "=", "parent_op_indices", "[", "parent_op_indices", "!=", "0", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "parent_op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "dic1", "=", "{", "1", ":", "a", ",", "2", ":", "b", ",", "3", ":", "c", "}", "\n", "dic2", "=", "{", "1", ":", "a_available", ",", "2", ":", "b_available", ",", "3", ":", "c_available", "}", "\n", "\n", "numb", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "\n", "dic1", "[", "numb", "]", "=", "random", ".", "choice", "(", "dic2", "[", "numb", "]", ")", "\n", "\n", "\n", "op_indices", "=", "g", "(", "dic1", "[", "1", "]", ",", "dic1", "[", "2", "]", ",", "dic1", "[", "3", "]", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.get_nbhd": [[323, 364], ["graph.NasBenchNLPSearchSpace.get_compact", "naslib.search_spaces.nasbenchnlp.conversions.make_compact_mutable", "random.shuffle", "graph.NasBenchNLPSearchSpace", "graph.NasBenchNLPSearchSpace.set_compact", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "add_to_nbhd.append", "len", "range", "ops.copy", "graph.NasBenchNLPSearchSpace.get_nbhd.add_to_nbhd"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.make_compact_mutable", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["\n", "", "def", "mutate", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "mutate_micro", "(", "parent", ",", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "mutate_macro", "(", "parent", ",", "dataset_api", ")", "\n", "\n", "\n", "\n", "", "", "def", "get_nbhd_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "nbrs", "=", "[", "]", "\n", "for", "edge", "in", "range", "(", "len", "(", "self", ".", "op_indices", ")", ")", ":", "\n", "            ", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "self", ".", "op_indices", "[", "edge", "]", "]", "\n", "\n", "for", "op_index", "in", "available", ":", "\n", "                ", "nbr_op_indices", "=", "list", "(", "self", ".", "op_indices", ")", ".", "copy", "(", ")", "\n", "nbr_op_indices", "[", "edge", "]", "=", "op_index", "\n", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n", "\n", "", "def", "get_nbhd_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "op_ind", "=", "self", ".", "op_indices", "[", "self", ".", "op_indices", "!=", "0", "]", "\n", "nbrs", "=", "[", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.get_type": [[365, 367], ["None"], "methods", ["None"], ["            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.get_max_epochs": [[368, 370], ["None"], "methods", ["None"], ["return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "op_ind", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.convert_recipe_to_compact": [[11, 45], ["recipe.keys", "op_dict.index", "ops.append", "nodes.index", "tuple", "tuple", "tuple", "nodes.append", "print", "sys.exit", "hiddens.append", "copy.deepcopy", "copy.deepcopy.pop", "conversions.convert_recipe_to_compact", "nodes.index", "edges.append"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.convert_recipe_to_compact"], ["\n", "\n", "OP_NAMES", "=", "[", "'Identity'", ",", "'Zero'", ",", "'ReLUConvBN3x3'", ",", "'ReLUConvBN1x1'", "]", "\n", "EDGE_LIST", "=", "(", "(", "1", ",", "2", ")", ",", "(", "1", ",", "3", ")", ",", "(", "1", ",", "4", ")", ",", "(", "2", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "(", "3", ",", "4", ")", ")", "\n", "\n", "\n", "def", "convert_naslib_to_op_indices", "(", "naslib_object", ")", ":", "\n", "\n", "    ", "cell", "=", "naslib_object", ".", "_get_child_graphs", "(", "single_instances", "=", "True", ")", "[", "0", "]", "\n", "ops", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "EDGE_LIST", ":", "\n", "        ", "ops", ".", "append", "(", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", ")", "\n", "\n", "", "return", "[", "OP_NAMES", ".", "index", "(", "name", ")", "for", "name", "in", "ops", "]", "\n", "\n", "\n", "", "def", "convert_op_indices_to_naslib", "(", "op_indices", ",", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts op indices to a naslib object\n    input: op_indices (list of six ints)\n    naslib_object is an empty NasBench201SearchSpace() object.\n    Do not call this method with a naslib object that has already been \n    discretized (i.e., all edges have a single op).\n\n    output: none, but the naslib object now has all edges set\n    as in genotype.\n    \n    warning: this method will modify the edges in naslib_object.\n    \"\"\"", "\n", "\n", "# create a dictionary of edges to ops", "\n", "edge_op_dict", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.convert_compact_to_recipe": [[46, 77], ["max", "range", "range", "len", "len", "max", "nodes.append", "nodes.append", "inputs.append"], "function", ["None"], ["for", "i", ",", "index", "in", "enumerate", "(", "op_indices", ")", ":", "\n", "        ", "edge_op_dict", "[", "EDGE_LIST", "[", "i", "]", "]", "=", "OP_NAMES", "[", "index", "]", "\n", "\n", "", "def", "add_op_index", "(", "edge", ")", ":", "\n", "# function that adds the op index from the dictionary to each edge", "\n", "        ", "if", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "in", "edge_op_dict", ":", "\n", "            ", "for", "i", ",", "op", "in", "enumerate", "(", "edge", ".", "data", ".", "op", ")", ":", "\n", "                ", "if", "op", ".", "get_op_name", "==", "edge_op_dict", "[", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "]", ":", "\n", "                    ", "index", "=", "i", "\n", "break", "\n", "", "", "edge", ".", "data", ".", "set", "(", "'op_index'", ",", "index", ",", "shared", "=", "True", ")", "\n", "\n", "", "", "def", "update_ops", "(", "edge", ")", ":", "\n", "# function that replaces the primitive ops at the edges with the one in op_index", "\n", "        ", "if", "isinstance", "(", "edge", ".", "data", ".", "op", ",", "list", ")", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "", "else", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "primitives", "\n", "\n", "", "edge", ".", "data", ".", "set", "(", "'op'", ",", "primitives", "[", "edge", ".", "data", ".", "op_index", "]", ")", "\n", "edge", ".", "data", ".", "set", "(", "'primitives'", ",", "primitives", ")", "# store for later use", "\n", "\n", "", "naslib_object", ".", "update_edges", "(", "\n", "add_op_index", ",", "\n", "scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "naslib_object", ".", "update_edges", "(", "\n", "update_ops", ",", "\n", "scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "True", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.conversions.make_compact_mutable": [[78, 84], ["edge_list.append", "list", "list", "list"], "function", ["None"], [")", "\n", "\n", "", "def", "convert_naslib_to_str", "(", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.simple_cell.graph.SimpleCellSearchSpace.__init__": [[43, 178], ["naslib.search_spaces.core.graph.Graph.__init__", "naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_nodes_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "naslib.search_spaces.core.graph.Graph.add_edges_from", "edge_attributes.items", "copy.deepcopy", "copy.deepcopy.update_edges", "graph.SimpleCellSearchSpace.add_node", "graph.SimpleCellSearchSpace.add_node", "graph.SimpleCellSearchSpace.add_edge", "graph.SimpleCellSearchSpace.add_node", "graph.SimpleCellSearchSpace.add_edge", "graph.SimpleCellSearchSpace.edges[].set", "zip", "graph.SimpleCellSearchSpace.edges[].set", "graph.SimpleCellSearchSpace.compile", "zip", "len", "len", "len", "len", "range", "naslib.search_spaces.core.graph.Graph.set_at_edges", "range", "naslib.search_spaces.core.primitives.Stem", "edge.data.set", "edge.data.set", "graph.SimpleCellSearchSpace.update_edges", "naslib.search_spaces.core.primitives.Sequential", "graph.SimpleCellSearchSpace.update_nodes", "graph.SimpleCellSearchSpace.add_node", "graph.SimpleCellSearchSpace.add_edges_from", "graph.SimpleCellSearchSpace.add_node", "graph.SimpleCellSearchSpace.add_edges_from", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Flatten", "torch.nn.Linear", "naslib.search_spaces.core.primitives.Concat1x1", "range", "range", "naslib.search_spaces.core.graph.Graph.get_dense_edges", "naslib.search_spaces.core.graph.EdgeData().finalize", "range", "graph.SimpleCellSearchSpace.__init__.set_channels"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.compile", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_at_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.get_dense_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.finalize"], ["\n", "self", ".", "max_epoch", "=", "199", "\n", "self", ".", "space_name", "=", "'transbench101'", "\n", "self", ".", "space", "=", "'micro'", "\n", "#", "\n", "# Cell definition", "\n", "#", "\n", "cell", "=", "Graph", "(", ")", "\n", "cell", ".", "name", "=", "\"cell\"", "# Use the same name for all cells with shared attributes", "\n", "\n", "# Input node", "\n", "cell", ".", "add_node", "(", "1", ")", "\n", "\n", "# Intermediate nodes", "\n", "cell", ".", "add_node", "(", "2", ")", "\n", "cell", ".", "add_node", "(", "3", ")", "\n", "\n", "# Output node", "\n", "cell", ".", "add_node", "(", "4", ")", "\n", "\n", "# Edges", "\n", "cell", ".", "add_edges_densly", "(", ")", "\n", "\n", "#", "\n", "# Makrograph definition", "\n", "#", "\n", "self", ".", "name", "=", "\"makrograph\"", "\n", "\n", "# Cell is on the edges", "\n", "# 1-2:               Preprocessing", "\n", "# 2-3, ..., 6-7:     cells stage 1", "\n", "# 7-8:               residual block stride 2", "\n", "# 8-9, ..., 12-13:   cells stage 2", "\n", "# 13-14:             residual block stride 2", "\n", "# 14-15, ..., 18-19: cells stage 3", "\n", "# 19-20:             post-processing", "\n", "\n", "total_num_nodes", "=", "20", "\n", "self", ".", "add_nodes_from", "(", "range", "(", "1", ",", "total_num_nodes", "+", "1", ")", ")", "\n", "self", ".", "add_edges_from", "(", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "1", ",", "total_num_nodes", ")", "]", ")", "\n", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "\n", "\n", "#", "\n", "# operations at the edges", "\n", "#", "\n", "\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_1'", ")", ")", "\n", "\n", "# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n", "", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n", "\n", "# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n", "", "if", "dataset_api", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n", "\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n", "\n", "\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_neg_loss'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.__init__": [[26, 33], ["naslib.search_spaces.core.graph.Graph.__init__"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "\n", "OPTIMIZER_SCOPE", "=", "[", "\n", "\"stage_1\"", ",", "\n", "\"stage_2\"", ",", "\n", "\"stage_3\"", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.query": [[35, 81], ["dataset_api[].full_info", "float"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils_asr.Dataset.full_info"], ["\n", "QUERYABLE", "=", "True", "\n", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "self", ".", "NUM_CLASSES", "if", "hasattr", "(", "self", ",", "'NUM_CLASSES'", ")", "else", "10", "\n", "self", ".", "op_indices", "=", "None", "\n", "\n", "self", ".", "max_epoch", "=", "199", "\n", "self", ".", "space_name", "=", "'transbench101'", "\n", "self", ".", "space", "=", "'micro'", "\n", "#", "\n", "# Cell definition", "\n", "#", "\n", "cell", "=", "Graph", "(", ")", "\n", "cell", ".", "name", "=", "\"cell\"", "# Use the same name for all cells with shared attributes", "\n", "\n", "# Input node", "\n", "cell", ".", "add_node", "(", "1", ")", "\n", "\n", "# Intermediate nodes", "\n", "cell", ".", "add_node", "(", "2", ")", "\n", "cell", ".", "add_node", "(", "3", ")", "\n", "\n", "# Output node", "\n", "cell", ".", "add_node", "(", "4", ")", "\n", "\n", "# Edges", "\n", "cell", ".", "add_edges_densly", "(", ")", "\n", "\n", "#", "\n", "# Makrograph definition", "\n", "#", "\n", "self", ".", "name", "=", "\"makrograph\"", "\n", "\n", "# Cell is on the edges", "\n", "# 1-2:               Preprocessing", "\n", "# 2-3, ..., 6-7:     cells stage 1", "\n", "# 7-8:               residual block stride 2", "\n", "# 8-9, ..., 12-13:   cells stage 2", "\n", "# 13-14:             residual block stride 2", "\n", "# 14-15, ..., 18-19: cells stage 3", "\n", "# 19-20:             post-processing", "\n", "\n", "total_num_nodes", "=", "20", "\n", "self", ".", "add_nodes_from", "(", "range", "(", "1", ",", "total_num_nodes", "+", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact": [[82, 85], ["None"], "methods", ["None"], ["self", ".", "add_edges_from", "(", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "1", ",", "total_num_nodes", ")", "]", ")", "\n", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_hash": [[86, 88], ["graph.NasBenchASRSearchSpace.get_compact"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact"], ["#", "\n", "# operations at the edges", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact": [[89, 91], ["None"], "methods", ["None"], ["\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.sample_random_architecture": [[92, 102], ["naslib.search_spaces.nasbenchasr.conversions.flatten", "naslib.search_spaces.nasbenchasr.conversions.copy_structure", "graph.NasBenchASRSearchSpace.set_compact", "random.randrange", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.copy_structure", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact"], ["\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_1'", ")", ")", "\n", "\n", "# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.mutate": [[103, 140], ["parent.get_compact", "copy.deepcopy", "range", "graph.NasBenchASRSearchSpace.set_compact", "int", "numpy.random.choice", "numpy.random.choice", "int", "numpy.random.choice", "numpy.random.choice", "list", "list.remove", "random.choice", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.remove"], ["", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n", "\n", "# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n", "", "if", "dataset_api", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n", "\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_nbhd": [[142, 179], ["graph.NasBenchASRSearchSpace.get_compact", "range", "random.shuffle", "print", "graph.NasBenchASRSearchSpace", "graph.NasBenchASRSearchSpace.set_compact", "torch.nn.Module", "add_to_nbhd.append", "len", "range", "len", "list", "list.remove", "int", "copy.deepcopy", "graph.NasBenchASRSearchSpace.get_nbhd.add_to_nbhd"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.set_compact", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.remove"], ["\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_neg_loss'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "else", ":", "# ['normal', 'autoencoder']", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_type": [[180, 182], ["None"], "methods", ["None"], ["\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_ssim'", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.graph.NasBenchASRSearchSpace.get_max_epochs": [[183, 185], ["None"], "methods", ["None"], ["Metric", ".", "VAL_ACCURACY", ":", "'valid_ssim'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_ssim'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_l1_loss'", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.recursive_iter": [[5, 14], ["isinstance", "conversions.recursive_iter"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.recursive_iter"], ["\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten": [[16, 20], ["list", "conversions.recursive_iter"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.recursive_iter"], ["OP_NAMES", "=", "[", "'Identity'", ",", "'Zero'", ",", "'ReLUConvBN3x3'", ",", "'ReLUConvBN1x1'", "]", "\n", "EDGE_LIST", "=", "(", "(", "1", ",", "2", ")", ",", "(", "1", ",", "3", ")", ",", "(", "1", ",", "4", ")", ",", "(", "2", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "(", "3", ",", "4", ")", ")", "\n", "\n", "\n", "def", "convert_naslib_to_op_indices", "(", "naslib_object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.copy_structure": [[22, 35], ["conversions.recursive_iter", "conversions.copy_structure.copy_level"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.recursive_iter"], ["    ", "cell", "=", "naslib_object", ".", "_get_child_graphs", "(", "single_instances", "=", "True", ")", "[", "0", "]", "\n", "ops", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "EDGE_LIST", ":", "\n", "        ", "ops", ".", "append", "(", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", ")", "\n", "\n", "", "return", "[", "OP_NAMES", ".", "index", "(", "name", ")", "for", "name", "in", "ops", "]", "\n", "\n", "\n", "", "def", "convert_op_indices_to_naslib", "(", "op_indices", ",", "naslib_object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.__init__": [[48, 59], ["naslib.search_spaces.core.graph.Graph.__init__", "graph.NasBench101SearchSpace._create_macro_graph", "hasattr"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_macro_graph"], ["# Cell definition", "\n", "#", "\n", "cell", "=", "Graph", "(", ")", "\n", "cell", ".", "name", "=", "\"cell\"", "# Use the same name for all cells with shared attributes", "\n", "\n", "# Input node", "\n", "cell", ".", "add_node", "(", "1", ")", "\n", "\n", "# Intermediate nodes", "\n", "cell", ".", "add_node", "(", "2", ")", "\n", "cell", ".", "add_node", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_macro_graph": [[60, 112], ["graph.NasBench101SearchSpace.set_scope", "graph.NasBench101SearchSpace.add_nodes_from", "range", "graph.NasBench101SearchSpace.edges[].set", "graph.NasBench101SearchSpace._create_cell_graph", "range", "naslib.search_spaces.core.primitives.Sequential", "graph.NasBench101SearchSpace.edges[].set", "range", "graph.NasBench101SearchSpace.add_edge", "naslib.search_spaces.core.primitives.Stem", "graph.NasBench101SearchSpace._create_stack", "graph.NasBench101SearchSpace.edges[].set", "naslib.search_spaces.core.primitives.GlobalAveragePooling", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_cell_graph", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_stack", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["# Output node", "\n", "cell", ".", "add_node", "(", "4", ")", "\n", "\n", "# Edges", "\n", "cell", ".", "add_edges_densly", "(", ")", "\n", "\n", "#", "\n", "# Makrograph definition", "\n", "#", "\n", "self", ".", "name", "=", "\"makrograph\"", "\n", "\n", "# Cell is on the edges", "\n", "# 1-2:               Preprocessing", "\n", "# 2-3, ..., 6-7:     cells stage 1", "\n", "# 7-8:               residual block stride 2", "\n", "# 8-9, ..., 12-13:   cells stage 2", "\n", "# 13-14:             residual block stride 2", "\n", "# 14-15, ..., 18-19: cells stage 3", "\n", "# 19-20:             post-processing", "\n", "\n", "total_num_nodes", "=", "20", "\n", "self", ".", "add_nodes_from", "(", "range", "(", "1", ",", "total_num_nodes", "+", "1", ")", ")", "\n", "self", ".", "add_edges_from", "(", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "1", ",", "total_num_nodes", ")", "]", ")", "\n", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "\n", "\n", "#", "\n", "# operations at the edges", "\n", "#", "\n", "\n", "# preprocessing", "\n", "self", ".", "edges", "[", "1", ",", "2", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Stem", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# stage 1", "\n", "for", "i", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_1'", ")", ")", "\n", "\n", "# stage 2", "\n", "", "self", ".", "edges", "[", "7", ",", "8", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "0", "]", ",", "C_out", "=", "channels", "[", "1", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "8", ",", "13", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_2'", ")", ")", "\n", "\n", "# stage 3", "\n", "", "self", ".", "edges", "[", "13", ",", "14", "]", ".", "set", "(", "'op'", ",", "ResNetBasicblock", "(", "C_in", "=", "channels", "[", "1", "]", ",", "C_out", "=", "channels", "[", "2", "]", ",", "stride", "=", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "self", ".", "edges", "[", "i", ",", "i", "+", "1", "]", ".", "set", "(", "'op'", ",", "cell", ".", "copy", "(", ")", ".", "set_scope", "(", "'stage_3'", ")", ")", "\n", "\n", "# post-processing", "\n", "", "self", ".", "edges", "[", "19", ",", "20", "]", ".", "set", "(", "'op'", ",", "ops", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "self", ".", "num_classes", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_stack": [[114, 143], ["naslib.search_spaces.core.primitives.Sequential", "graph.NasBench101SearchSpace._create_cell", "graph.NasBench101SearchSpace._create_cell", "graph.NasBench101SearchSpace._create_cell", "range", "cells.append", "cell.copy", "cell.copy", "cell.copy", "[].set_input", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_cell", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_cell", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_cell", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_input"], ["# set the ops at the cells (channel dependent)", "\n", "for", "c", ",", "scope", "in", "zip", "(", "channels", ",", "self", ".", "OPTIMIZER_SCOPE", ")", ":", "\n", "            ", "self", ".", "update_edges", "(", "\n", "update_func", "=", "lambda", "edge", ":", "_set_cell_ops", "(", "edge", ",", "C", "=", "c", ")", ",", "\n", "scope", "=", "scope", ",", "\n", "private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "query", "(", "self", ",", "metric", "=", "None", ",", "dataset", "=", "None", ",", "path", "=", "None", ",", "epoch", "=", "-", "1", ",", "full_lc", "=", "False", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Query results from transbench 101\n        \"\"\"", "\n", "assert", "isinstance", "(", "metric", ",", "Metric", ")", "\n", "if", "metric", "==", "Metric", ".", "ALL", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "#         if metric != Metric.RAW and metric != Metric.ALL:", "\n", "#             assert dataset in ['cifar10', 'cifar100', 'ImageNet16-120'], \"Unknown dataset: {}\".format(dataset)", "\n", "", "if", "dataset_api", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Must pass in dataset_api to query transbench101'", ")", "\n", "\n", "", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_micro", "(", "self", ".", "op_indices", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "arch_str", "=", "convert_naslib_to_transbench101_macro", "(", "self", ".", "op_indices", ")", "\n", "\n", "", "query_results", "=", "dataset_api", "[", "'api'", "]", "\n", "task", "=", "dataset_api", "[", "'task'", "]", "\n", "\n", "\n", "if", "task", "in", "[", "'class_scene'", ",", "'class_object'", ",", "'jigsaw'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_node_pair_graph": [[145, 166], ["naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.set_scope", "naslib.search_spaces.core.graph.Graph.add_nodes_from", "naslib.search_spaces.core.graph.Graph.add_edge", "str"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope"], ["            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_top1'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_top1'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_top1'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "elif", "task", "==", "'room_layout'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_neg_loss'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_neg_loss'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_neg_loss'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_cell_graph": [[167, 206], ["naslib.search_spaces.core.graph.Graph", "naslib.search_spaces.core.graph.Graph.add_node", "range", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.set_scope", "naslib.search_spaces.core.graph.Graph.add_edges_densly", "naslib.search_spaces.core.graph.Graph.remove_edge", "list", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.add_node", "naslib.search_spaces.core.graph.Graph.edges", "graph.NasBench101SearchSpace._create_node_pair_graph", "naslib.search_spaces.core.graph.Graph.remove_edge"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.set_scope", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_edges_densly", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.add_node", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_node_pair_graph"], ["", "elif", "task", "==", "'segmentsemantic'", ":", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_acc'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_acc'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_acc'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "", "else", ":", "# ['normal', 'autoencoder']", "\n", "\n", "            ", "metric_to_tb101", "=", "{", "\n", "Metric", ".", "TRAIN_ACCURACY", ":", "'train_ssim'", ",", "\n", "Metric", ".", "VAL_ACCURACY", ":", "'valid_ssim'", ",", "\n", "Metric", ".", "TEST_ACCURACY", ":", "'test_ssim'", ",", "\n", "Metric", ".", "TRAIN_LOSS", ":", "'train_l1_loss'", ",", "\n", "Metric", ".", "VAL_LOSS", ":", "'valid_l1_loss'", ",", "\n", "Metric", ".", "TEST_LOSS", ":", "'test_l1_loss'", ",", "\n", "Metric", ".", "TRAIN_TIME", ":", "'time_elapsed'", ",", "\n", "}", "\n", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "RAW", ":", "\n", "# return all data", "\n", "            ", "return", "query_results", ".", "get_arch_result", "(", "arch_str", ")", ".", "query_all_results", "(", ")", "[", "task", "]", "\n", "\n", "\n", "", "if", "metric", "==", "Metric", ".", "HP", ":", "\n", "# return hyperparameter info", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "'cost_info'", "]", "\n", "", "elif", "metric", "==", "Metric", ".", "TRAIN_TIME", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "if", "full_lc", "and", "epoch", "==", "-", "1", ":", "\n", "            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace._create_cell": [[208, 240], ["numpy.triu", "graph.compute_vertex_channels", "cell.update_nodes", "cell.update_edges", "numpy.ones", "graph._set_cell_node_pair_ops", "graph._set_cell_edge_ops"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.compute_vertex_channels", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph._set_cell_node_pair_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph._set_cell_edge_ops"], ["            ", "return", "query_results", "[", "dataset", "]", "[", "metric_to_tb101", "[", "metric", "]", "]", "[", ":", "epoch", "]", "\n", "", "else", ":", "\n", "            ", "return", "query_results", ".", "get_single_metric", "(", "arch_str", ",", "task", ",", "metric_to_tb101", "[", "metric", "]", ")", "\n", "\n", "\n", "", "", "def", "get_op_indices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "op_indices", "is", "None", ":", "\n", "            ", "self", ".", "op_indices", "=", "convert_naslib_to_op_indices", "(", "self", ")", "\n", "", "return", "self", ".", "op_indices", "\n", "\n", "\n", "", "def", "get_hash", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "get_op_indices", "(", ")", ")", "\n", "\n", "\n", "", "def", "set_op_indices", "(", "self", ",", "op_indices", ")", ":", "\n", "# This will update the edges in the naslib object to op_indices", "\n", "        ", "self", ".", "op_indices", "=", "op_indices", "\n", "#         convert_op_indices_to_naslib(op_indices, self)", "\n", "\n", "", "def", "get_arch_iterator", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "return", "itertools", ".", "product", "(", "range", "(", "4", ")", ",", "repeat", "=", "6", ")", "\n", "\n", "", "def", "set_spec", "(", "self", ",", "op_indices", ",", "dataset_api", "=", "None", ")", ":", "\n", "# this is just to unify the setters across search spaces", "\n", "# TODO: change it to set_spec on all search spaces", "\n", "        ", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "sample_random_architecture_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.convert_to_cell": [[241, 274], ["len", "numpy.zeros", "range", "range", "range", "new_ops.append", "new_ops.append", "new_ops.append"], "methods", ["None"], ["op_indices", "=", "np", ".", "random", ".", "randint", "(", "4", ",", "size", "=", "(", "6", ")", ")", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will sample a random architecture and update the edges in the\n        naslib object accordingly.\n        \"\"\"", "\n", "r", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "p", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "q", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "op_indices", "=", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "sample_random_architecture", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "sample_random_architecture_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "", "", "def", "mutate_micro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query": [[276, 342], ["isinstance", "dataset_api[].ModelSpec", "dataset_api[].query", "NotImplementedError", "NotImplementedError", "graph.NasBench101SearchSpace.get_spec", "NotImplementedError", "dataset_api[].is_valid", "dataset_api[].query", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.is_valid", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["\n", "edge", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "parent_op_indices", ")", ")", "\n", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "parent_op_indices", "[", "edge", "]", "]", "\n", "op_index", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "op_indices", "[", "edge", "]", "=", "op_index", "\n", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "", "def", "mutate_macro", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This will mutate one op from the parent op indices, and then\n        update the naslib object and op_indices\n        \"\"\"", "\n", "parent_op_indices", "=", "parent", ".", "get_op_indices", "(", ")", "\n", "parent_op_ind", "=", "parent_op_indices", "[", "parent_op_indices", "!=", "0", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n", "\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "parent_op_ind", ")", "\n", "\n", "a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "dic1", "=", "{", "1", ":", "a", ",", "2", ":", "b", ",", "3", ":", "c", "}", "\n", "dic2", "=", "{", "1", ":", "a_available", ",", "2", ":", "b_available", ",", "3", ":", "c_available", "}", "\n", "\n", "numb", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "\n", "dic1", "[", "numb", "]", "=", "random", ".", "choice", "(", "dic2", "[", "numb", "]", ")", "\n", "\n", "\n", "op_indices", "=", "g", "(", "dic1", "[", "1", "]", ",", "dic1", "[", "2", "]", ",", "dic1", "[", "3", "]", ")", "\n", "while", "len", "(", "op_indices", ")", "<", "6", ":", "\n", "            ", "op_indices", "=", "np", ".", "append", "(", "op_indices", ",", "0", ")", "\n", "\n", "", "self", ".", "set_op_indices", "(", "op_indices", ")", "\n", "\n", "\n", "", "def", "mutate", "(", "self", ",", "parent", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "self", ".", "mutate_micro", "(", "parent", ",", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "self", ".", "mutate_macro", "(", "parent", ",", "dataset_api", ")", "\n", "\n", "\n", "\n", "", "", "def", "get_nbhd_micro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "nbrs", "=", "[", "]", "\n", "for", "edge", "in", "range", "(", "len", "(", "self", ".", "op_indices", ")", ")", ":", "\n", "            ", "available", "=", "[", "o", "for", "o", "in", "range", "(", "len", "(", "OP_NAMES", ")", ")", "if", "o", "!=", "self", ".", "op_indices", "[", "edge", "]", "]", "\n", "\n", "for", "op_index", "in", "available", ":", "\n", "                ", "nbr_op_indices", "=", "list", "(", "self", ".", "op_indices", ")", ".", "copy", "(", ")", "\n", "nbr_op_indices", "[", "edge", "]", "=", "op_index", "\n", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_spec": [[343, 347], ["naslib.search_spaces.nasbench101.conversions.convert_naslib_to_spec"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions.convert_naslib_to_spec"], ["nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash": [[348, 350], ["naslib.search_spaces.nasbench101.conversions.convert_spec_to_tuple", "graph.NasBench101SearchSpace.get_spec"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions.convert_spec_to_tuple", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_spec"], ["", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.set_spec": [[351, 368], ["isinstance", "dataset_api[].get_metrics_from_hash", "graph.NasBench101SearchSpace.convert_to_cell", "graph.NasBench101SearchSpace.set_spec"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.get_metrics_from_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.convert_to_cell", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.set_spec"], ["\n", "", "def", "get_nbhd_macro", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "# return all neighbors of the architecture", "\n", "        ", "self", ".", "get_op_indices", "(", ")", "\n", "op_ind", "=", "self", ".", "op_indices", "[", "self", ".", "op_indices", "!=", "0", "]", "\n", "nbrs", "=", "[", "]", "\n", "\n", "def", "f", "(", "g", ")", ":", "\n", "            ", "r", "=", "len", "(", "g", ")", "\n", "p", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "3", ")", "for", "i", "in", "g", "]", ")", "\n", "q", "=", "sum", "(", "[", "int", "(", "i", "==", "4", "or", "i", "==", "2", ")", "for", "i", "in", "g", "]", ")", "\n", "return", "r", ",", "p", ",", "q", "\n", "\n", "", "def", "g", "(", "r", ",", "p", ",", "q", ")", ":", "\n", "            ", "u", "=", "[", "2", "*", "int", "(", "i", "<", "p", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "v", "=", "[", "int", "(", "i", "<", "q", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "w", "=", "[", "1", "+", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "u", ",", "v", ")", "]", "\n", "return", "np", ".", "random", ".", "permutation", "(", "w", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_arch_iterator": [[369, 371], ["dataset_api[].hash_iterator"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.hash_iterator"], ["\n", "", "a", ",", "b", ",", "c", "=", "f", "(", "op_ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture": [[372, 391], ["graph.NasBench101SearchSpace.set_spec", "numpy.random.choice", "numpy.triu", "numpy.random.choice().tolist", "dataset_api[].ModelSpec", "dataset_api[].is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.set_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.is_valid"], ["a_available", "=", "[", "i", "for", "i", "in", "[", "4", ",", "5", ",", "6", "]", "if", "i", "!=", "a", "]", "\n", "b_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "if", "i", "!=", "b", "]", "\n", "c_available", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "4", ")", "if", "i", "!=", "c", "]", "\n", "\n", "for", "r", "in", "a_available", ":", "\n", "            ", "for", "p", "in", "b_available", ":", "\n", "                ", "for", "q", "in", "c_available", ":", "\n", "                    ", "nbr_op_indices", "=", "g", "(", "r", ",", "p", ",", "q", ")", "\n", "while", "len", "(", "nbr_op_indices", ")", "<", "6", ":", "\n", "                        ", "nbr_op_indices", "=", "np", ".", "append", "(", "nbr_op_indices", ",", "0", ")", "\n", "", "nbr", "=", "TransBench101SearchSpace", "(", ")", "\n", "nbr", ".", "set_op_indices", "(", "nbr_op_indices", ")", "\n", "nbr_model", "=", "torch", ".", "nn", ".", "Module", "(", ")", "\n", "nbr_model", ".", "arch", "=", "nbr", "\n", "nbrs", ".", "append", "(", "nbr_model", ")", "\n", "\n", "", "", "", "random", ".", "shuffle", "(", "nbrs", ")", "\n", "return", "nbrs", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate": [[392, 417], ["parent.get_spec", "copy.deepcopy", "range", "graph.NasBench101SearchSpace.set_spec", "copy.deepcopy", "copy.deepcopy", "range", "range", "dataset_api[].ModelSpec", "dataset_api[].is_valid", "range", "numpy.random.random", "numpy.random.choice", "numpy.random.random", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.set_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.is_valid"], ["", "def", "get_nbhd", "(", "self", ",", "dataset_api", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'micro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_micro", "(", "dataset_api", ")", "\n", "", "elif", "self", ".", "space", "==", "'macro'", ":", "\n", "            ", "return", "self", ".", "get_nbhd_macro", "(", "dataset_api", ")", "\n", "\n", "\n", "\n", "\n", "", "", "def", "get_type", "(", "self", ")", ":", "\n", "#         return 'transbench101'", "\n", "        ", "return", "'transbench101'", "\n", "\n", "\n", "", "", "def", "_set_cell_ops", "(", "edge", ",", "C", ")", ":", "\n", "    ", "edge", ".", "data", ".", "set", "(", "'op'", ",", "[", "\n", "ops", ".", "Identity", "(", ")", ",", "\n", "ops", ".", "Zero", "(", "stride", "=", "1", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "3", ")", ",", "\n", "ops", ".", "ReLUConvBN", "(", "C", ",", "C", ",", "kernel_size", "=", "1", ")", ",", "\n", "]", ")", "\n", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_nbhd": [[420, 463], ["graph.NasBench101SearchSpace.get_spec", "range", "range", "random.shuffle", "dataset_api[].ModelSpec", "dataset_api[].is_valid", "graph.is_valid_vertex", "range", "graph.NasBench101SearchSpace", "graph.NasBench101SearchSpace.set_spec", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "torch.nn.Module", "add_to_nbhd.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "graph.NasBench101SearchSpace.get_nbhd.add_to_nbhd"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.nb101_api.NASBench.is_valid", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.is_valid_vertex", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.set_spec"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type": [[464, 466], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph._set_node_pair_edge_op": [[468, 475], ["edge.data.set", "naslib.search_spaces.core.primitives.ConvBnReLU", "naslib.search_spaces.core.primitives.ConvBnReLU", "naslib.search_spaces.core.primitives.MaxPool"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph._set_cell_node_pair_ops": [[479, 491], ["node_pair.update_edges", "graph._set_node_pair_edge_op"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph._set_node_pair_edge_op"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph._set_cell_edge_ops": [[494, 518], ["edge.data.set", "edge.data.set", "edge.data.finalize", "naslib.search_spaces.core.primitives.InputProjection", "naslib.search_spaces.core.primitives.InputProjection", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.Zero", "naslib.search_spaces.core.primitives.Identity", "naslib.search_spaces.core.primitives.Zero"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.finalize"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.get_utilized": [[520, 549], ["range", "range", "range", "numpy.shape", "range", "sub_paths.append", "sub_paths.append", "utilized_edges.append", "utilized_nodes.append", "sub_paths[].append"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.num_edges_and_vertices": [[551, 555], ["graph..get_utilized", "len", "len"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.get_utilized"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.is_valid_vertex": [[557, 560], ["graph.get_utilized"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.get_utilized"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.is_valid_edge": [[562, 565], ["graph.get_utilized"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.get_utilized"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.compute_vertex_channels": [[566, 633], ["numpy.sum", "range", "range", "range", "numpy.shape", "range", "range", "max"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.channel_concat": [[634, 636], ["torch.cat", "torch.cat"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.truncate_add": [[637, 640], ["min", "sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ReLUConvBN.__init__": [[19, 27], ["core.primitives.AbstractPrimitive.__init__", "torch.Sequential", "locals", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "locals", "(", ")", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "C_out", ",", "C_out", ",", "3", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ReLUConvBN.forward": [[29, 31], ["primitives.ReLUConvBN.op"], "methods", ["None"], ["", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ReLUConvBN.get_embedded_ops": [[32, 34], ["None"], "methods", ["None"], ["\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_data", ")", ":", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "x", ",", "None", ")", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ReLUConvBN.get_op_name": [[35, 40], ["None"], "methods", ["None"], ["basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ",", "None", ")", "\n", "residual", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "is", "not", "None", "else", "x", "\n", "return", "residual", "+", "basicblock", "\n", "\n", "\n", "", "def", "get_embedded_ops", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.__init__": [[43, 55], ["core.primitives.AbstractPrimitive.__init__", "primitives.ReLUConvBN", "primitives.ReLUConvBN", "torch.Sequential", "torch.AvgPool2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.forward": [[56, 61], ["primitives.ResNetBasicblock.conv_a", "primitives.ResNetBasicblock.conv_b", "primitives.ResNetBasicblock.downsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops": [[62, 64], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions._truncate_input_edges": [[24, 58], ["torch.softmax", "len", "any", "edge_data.alpha.detach", "sorted", "zip", "e.has", "edge_data.delete", "e.has"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.delete", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has"], ["for", "i", ",", "j", "in", "EDGE_LIST", ":", "\n", "        ", "ops", ".", "append", "(", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", ")", "\n", "\n", "", "return", "[", "OP_NAMES", ".", "index", "(", "name", ")", "for", "name", "in", "ops", "]", "\n", "\n", "\n", "", "def", "convert_op_indices_to_naslib", "(", "op_indices", ",", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts op indices to a naslib object\n    input: op_indices (list of six ints)\n    naslib_object is an empty NasBench201SearchSpace() object.\n    Do not call this method with a naslib object that has already been \n    discretized (i.e., all edges have a single op).\n\n    output: none, but the naslib object now has all edges set\n    as in genotype.\n    \n    warning: this method will modify the edges in naslib_object.\n    \"\"\"", "\n", "\n", "# create a dictionary of edges to ops", "\n", "edge_op_dict", "=", "{", "}", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "op_indices", ")", ":", "\n", "        ", "edge_op_dict", "[", "EDGE_LIST", "[", "i", "]", "]", "=", "OP_NAMES", "[", "index", "]", "\n", "\n", "", "def", "add_op_index", "(", "edge", ")", ":", "\n", "# function that adds the op index from the dictionary to each edge", "\n", "        ", "if", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "in", "edge_op_dict", ":", "\n", "            ", "for", "i", ",", "op", "in", "enumerate", "(", "edge", ".", "data", ".", "op", ")", ":", "\n", "                ", "if", "op", ".", "get_op_name", "==", "edge_op_dict", "[", "(", "edge", ".", "head", ",", "edge", ".", "tail", ")", "]", ":", "\n", "                    ", "index", "=", "i", "\n", "break", "\n", "", "", "edge", ".", "data", ".", "set", "(", "'op_index'", ",", "index", ",", "shared", "=", "True", ")", "\n", "\n", "", "", "def", "update_ops", "(", "edge", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions._discretize_ops": [[59, 76], ["edge.data.has", "edge.data.op.get_embedded_ops", "edge.data.alpha.detach().cpu", "edge.data.set", "edge.data.alpha.detach", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.has", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.primitives.ResNetBasicblock.get_embedded_ops", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.set"], ["# function that replaces the primitive ops at the edges with the one in op_index", "\n", "        ", "if", "isinstance", "(", "edge", ".", "data", ".", "op", ",", "list", ")", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "op", "\n", "", "else", ":", "\n", "            ", "primitives", "=", "edge", ".", "data", ".", "primitives", "\n", "\n", "", "edge", ".", "data", ".", "set", "(", "'op'", ",", "primitives", "[", "edge", ".", "data", ".", "op_index", "]", ")", "\n", "edge", ".", "data", ".", "set", "(", "'primitives'", ",", "primitives", ")", "# store for later use", "\n", "\n", "", "naslib_object", ".", "update_edges", "(", "\n", "add_op_index", ",", "\n", "scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n", "private_edge_data", "=", "False", "\n", ")", "\n", "\n", "naslib_object", ".", "update_edges", "(", "\n", "update_ops", ",", "\n", "scope", "=", "naslib_object", ".", "OPTIMIZER_SCOPE", ",", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions._convert_final_cell_to_spec": [[77, 118], ["numpy.zeros", "naslib_cell.edges", "range", "operations.append", "isinstance", "operations.append", "isinstance", "operations.append", "Exception", "operations.append", "Exception"], "function", ["None"], ["private_edge_data", "=", "True", "\n", ")", "\n", "\n", "", "def", "convert_naslib_to_str", "(", "naslib_object", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "\n", "ops_to_nb201", "=", "{", "\n", "'AvgPool1x1'", ":", "'avg_pool_3x3'", ",", "\n", "'ReLUConvBN1x1'", ":", "'nor_conv_1x1'", ",", "\n", "'ReLUConvBN3x3'", ":", "'nor_conv_3x3'", ",", "\n", "'Identity'", ":", "'skip_connect'", ",", "\n", "'Zero'", ":", "'none'", ",", "\n", "}", "\n", "\n", "cell", "=", "naslib_object", ".", "edges", "[", "2", ",", "3", "]", ".", "op", "\n", "\n", "edge_op_dict", "=", "{", "\n", "(", "i", ",", "j", ")", ":", "ops_to_nb201", "[", "cell", ".", "edges", "[", "i", ",", "j", "]", "[", "'op'", "]", ".", "get_op_name", "]", "for", "i", ",", "j", "in", "cell", ".", "edges", "\n", "}", "\n", "op_edge_list", "=", "[", "\n", "'{}~{}'", ".", "format", "(", "edge_op_dict", "[", "(", "i", ",", "j", ")", "]", ",", "i", "-", "1", ")", "for", "i", ",", "j", "in", "sorted", "(", "edge_op_dict", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "]", "\n", "\n", "return", "'|{}|+|{}|{}|+|{}|{}|{}|'", ".", "format", "(", "*", "op_edge_list", ")", "\n", "\n", "\n", "# def convert_naslib_to_tb101(naslib_object):", "\n", "#     \"\"\"", "\n", "#     Converts naslib object to string representation.", "\n", "#     To be used later used later with one-shot optimizers ", "\n", "#     \"\"\"", "\n", "\n", "#     ops_to_tb101 = {", "\n", "#         'ReLUConvBN1x1': '2',", "\n", "#         'ReLUConvBN3x3': '3',", "\n", "#         'Identity': '1',", "\n", "#         'Zero': '0',", "\n", "#     }", "\n", "\n", "#     cell = naslib_object.edges[2, 3].op", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions.convert_naslib_to_spec": [[119, 144], ["copy.deepcopy", "copy.deepcopy.update_nodes", "copy.deepcopy.update_edges", "conversions._convert_final_cell_to_spec", "naslib_object.get_all_edge_data"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_nodes", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.update_edges", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions._convert_final_cell_to_spec", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.Graph.get_all_edge_data"], ["\n", "#     edge_op_dict = {", "\n", "#         (i, j): ops_to_tb101[cell.edges[i, j]['op'].get_op_name] for i, j in cell.edges", "\n", "#     }", "\n", "# #     op_edge_list = [", "\n", "# #         '{}~{}'.format(edge_op_dict[(i, j)], i-1) for i, j in sorted(edge_op_dict, key=lambda x: x[1])", "\n", "# #     ]", "\n", "#     op_edge_list = [", "\n", "#         '{}'.format(edge_op_dict[(i, j)]) for i, j in sorted(edge_op_dict, key=lambda x: x[1])", "\n", "#     ]", "\n", "\n", "#     return '64-41414-{}_{}{}_{}{}{}'.format(*op_edge_list)", "\n", "\n", "\n", "", "def", "convert_naslib_to_transbench101_micro", "(", "op_indices", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n", "return", "'64-41414-{}_{}{}_{}{}{}'", ".", "format", "(", "*", "op_indices", ")", "\n", "\n", "\n", "\n", "", "def", "convert_naslib_to_transbench101_macro", "(", "op_indices", ")", ":", "\n", "    ", "\"\"\"\n    Converts naslib object to string representation.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions.convert_spec_to_naslib": [[146, 149], ["NotImplementedError"], "function", ["None"], ["return", "'64-{}-basic'", ".", "format", "(", "ops_string", ")", "", "", ""]], "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.conversions.convert_spec_to_tuple": [[151, 159], ["spec[].flatten", "tuple", "op_dict.index"], "function", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchasr.conversions.flatten"], []], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.__init__": [[28, 51], ["torch.device", "torch.cuda.is_available"], "methods", ["None"], ["        ", "self", ".", "predictor", "=", "predictor", "\n", "print", "(", "f'PREDICTOR: {predictor}'", ")", "#OWN CODE", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "experiment_type", "=", "config", ".", "experiment_type", "\n", "\n", "self", ".", "test_size", "=", "config", ".", "test_size", "\n", "self", ".", "train_size_single", "=", "config", ".", "train_size_single", "\n", "self", ".", "train_size_list", "=", "config", ".", "train_size_list", "\n", "self", ".", "fidelity_single", "=", "config", ".", "fidelity_single", "\n", "self", ".", "fidelity_list", "=", "config", ".", "fidelity_list", "\n", "self", ".", "max_hpo_time", "=", "config", ".", "max_hpo_time", "\n", "\n", "self", ".", "dataset", "=", "config", ".", "dataset", "\n", "self", ".", "metric", "=", "Metric", ".", "VAL_ACCURACY", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "results", "=", "[", "config", "]", "\n", "\n", "# mutation parameters", "\n", "self", ".", "uniform_random", "=", "config", ".", "uniform_random", "\n", "self", ".", "mutate_pool", "=", "10", "\n", "self", ".", "num_arches_to_mutate", "=", "5", "\n", "self", ".", "max_mutation_rate", "=", "3", "\n", "\n", "", "def", "adapt_search_space", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.adapt_search_space": [[52, 80], ["search_space.clone", "predictor_evaluator.PredictorEvaluator.predictor.set_ss_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "predictor_evaluator.PredictorEvaluator.search_space.get_type", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.set_ss_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_type"], ["self", ",", "search_space", ",", "load_labeled", ",", "scope", "=", "None", ",", "dataset_api", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "search_space", ".", "clone", "(", ")", "\n", "self", ".", "scope", "=", "scope", "if", "scope", "else", "search_space", ".", "OPTIMIZER_SCOPE", "\n", "self", ".", "predictor", ".", "set_ss_type", "(", "self", ".", "search_space", ".", "get_type", "(", ")", ")", "\n", "self", ".", "load_labeled", "=", "load_labeled", "\n", "self", ".", "dataset_api", "=", "dataset_api", "\n", "\n", "# nasbench101 does not have full learning curves or hyperparameters", "\n", "if", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"nasbench101\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "False", "\n", "self", ".", "hyperparameters", "=", "False", "\n", "", "elif", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"nasbench201\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "True", "\n", "self", ".", "hyperparameters", "=", "True", "\n", "", "elif", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"darts\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "True", "\n", "self", ".", "hyperparameters", "=", "True", "\n", "", "elif", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"nlp\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "True", "\n", "self", ".", "hyperparameters", "=", "True", "\n", "", "elif", "self", ".", "search_space", ".", "get_type", "(", ")", "==", "\"transbench101\"", ":", "\n", "            ", "self", ".", "full_lc", "=", "True", "\n", "self", ".", "hyperparameters", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"This search space is not yet implemented in PredictorEvaluator.\"", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info": [[82, 125], ["arch.query", "arch.query", "predictor_evaluator.PredictorEvaluator.predictor.get_data_reqs", "type", "arch.query", "arch.query", "arch.query"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.get_data_reqs", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query"], ["        ", "\"\"\"\n        Given an arch, return the accuracy, train_time,\n        and also a dict of extra info if required by the predictor\n        \"\"\"", "\n", "info_dict", "=", "{", "}", "\n", "accuracy", "=", "arch", ".", "query", "(", "\n", "metric", "=", "self", ".", "metric", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "\n", "train_time", "=", "arch", ".", "query", "(", "\n", "metric", "=", "Metric", ".", "TRAIN_TIME", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "\n", "data_reqs", "=", "self", ".", "predictor", ".", "get_data_reqs", "(", ")", "\n", "if", "data_reqs", "[", "\"requires_partial_lc\"", "]", ":", "\n", "# add partial learning curve if applicable", "\n", "            ", "assert", "self", ".", "full_lc", ",", "\"This predictor requires learning curve info\"", "\n", "if", "type", "(", "data_reqs", "[", "\"metric\"", "]", ")", "is", "list", ":", "\n", "                ", "for", "metric_i", "in", "data_reqs", "[", "\"metric\"", "]", ":", "\n", "                    ", "metric_lc", "=", "arch", ".", "query", "(", "\n", "metric", "=", "metric_i", ",", "\n", "full_lc", "=", "True", ",", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", "dataset_api", "=", "self", ".", "dataset_api", ",", "\n", ")", "\n", "info_dict", "[", "f\"{metric_i.name}_lc\"", "]", "=", "metric_lc", "\n", "\n", "", "", "else", ":", "\n", "                ", "lc", "=", "arch", ".", "query", "(", "\n", "metric", "=", "data_reqs", "[", "\"metric\"", "]", ",", "\n", "full_lc", "=", "True", ",", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", "dataset_api", "=", "self", ".", "dataset_api", ",", "\n", ")", "\n", "info_dict", "[", "\"lc\"", "]", "=", "lc", "\n", "", "if", "data_reqs", "[", "\"requires_hyperparameters\"", "]", ":", "\n", "                ", "assert", "(", "\n", "self", ".", "hyperparameters", "\n", ")", ",", "\"This predictor requires querying arch hyperparams\"", "\n", "for", "hp", "in", "data_reqs", "[", "\"hyperparams\"", "]", ":", "\n", "                    ", "info_dict", "[", "hp", "]", "=", "arch", ".", "query", "(", "\n", "Metric", ".", "HP", ",", "dataset", "=", "self", ".", "dataset", ",", "dataset_api", "=", "self", ".", "dataset_api", "\n", ")", "[", "hp", "]", "\n", "", "", "", "return", "accuracy", ",", "train_time", ",", "info_dict", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "load_labeled", "=", "False", ",", "data_size", "=", "10", ",", "arch_hash_map", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_dataset": [[126, 163], ["len", "predictor_evaluator.PredictorEvaluator.get_hash", "predictor_evaluator.PredictorEvaluator.get_full_arch_info", "xdata.append", "ydata.append", "info.append", "train_times.append", "predictor_evaluator.PredictorEvaluator.search_space.clone", "predictor_evaluator.PredictorEvaluator.sample_random_architecture", "predictor_evaluator.PredictorEvaluator.search_space.clone", "predictor_evaluator.PredictorEvaluator.load_labeled_architecture"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbenchnlp.graph.NasBenchNLPSearchSpace.load_labeled_architecture"], ["        ", "\"\"\"\n        There are two ways to load an architecture.\n        load_labeled=False: sample a random architecture from the search space.\n        This works on NAS benchmarks where we can query any architecture (nasbench101/201/301)\n        load_labeled=True: sample a random architecture from a set of evaluated architectures.\n        When we only have data on a subset of the search space (e.g., the set of 5k DARTS\n        architectures that have the full training info).\n\n        After we load an architecture, query the final val accuracy.\n        If the predictor requires extra info such as partial learning curve info, query that too.\n        \"\"\"", "\n", "xdata", "=", "[", "]", "\n", "ydata", "=", "[", "]", "\n", "info", "=", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "while", "len", "(", "xdata", ")", "<", "data_size", ":", "\n", "            ", "if", "not", "load_labeled", ":", "\n", "                ", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "sample_random_architecture", "(", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "", "else", ":", "\n", "                ", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "load_labeled_architecture", "(", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "\n", "", "arch_hash", "=", "arch", ".", "get_hash", "(", ")", "\n", "if", "False", ":", "# removing this for consistency, for now", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "arch_hash_map", "[", "arch_hash", "]", "=", "True", "\n", "\n", "", "accuracy", ",", "train_time", ",", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "xdata", ".", "append", "(", "arch", ")", "\n", "ydata", ".", "append", "(", "accuracy", ")", "\n", "info", ".", "append", "(", "info_dict", ")", "\n", "train_times", ".", "append", "(", "train_time", ")", "\n", "\n", "", "return", "[", "xdata", ",", "ydata", ",", "info", ",", "train_times", "]", ",", "arch_hash_map", "\n", "\n", "", "def", "load_mutated_test", "(", "self", ",", "data_size", "=", "10", ",", "arch_hash_map", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_mutated_test": [[164, 222], ["len", "predictor_evaluator.PredictorEvaluator.search_space.clone", "xdata[].clone.sample_random_architecture", "xdata[].clone.get_hash", "predictor_evaluator.PredictorEvaluator.get_full_arch_info", "xdata.append", "ydata.append", "info.append", "train_times.append", "numpy.flip", "len", "numpy.random.choice", "xdata[].clone", "range", "xdata[].clone.get_hash", "predictor_evaluator.PredictorEvaluator.get_full_arch_info", "xdata.append", "ydata.append", "info.append", "train_times.append", "numpy.argsort", "numpy.random.choice", "predictor_evaluator.PredictorEvaluator.search_space.clone", "predictor_evaluator.PredictorEvaluator.mutate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.sample_random_architecture", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate"], ["        ", "\"\"\"\n        Load a test set not uniformly at random, but by picking some random\n        architectures and then mutation the best ones. This better emulates\n        distributions in local or mutation-based NAS algorithms.\n        \"\"\"", "\n", "assert", "(", "\n", "self", ".", "load_labeled", "==", "False", "\n", ")", ",", "\"Mutation is only implemented for load_labeled = False\"", "\n", "xdata", "=", "[", "]", "\n", "ydata", "=", "[", "]", "\n", "info", "=", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "\n", "# step 1: create a large pool of architectures", "\n", "while", "len", "(", "xdata", ")", "<", "self", ".", "mutate_pool", ":", "\n", "            ", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "sample_random_architecture", "(", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch_hash", "=", "arch", ".", "get_hash", "(", ")", "\n", "if", "arch_hash", "in", "arch_hash_map", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "arch_hash_map", "[", "arch_hash", "]", "=", "True", "\n", "", "accuracy", ",", "train_time", ",", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "xdata", ".", "append", "(", "arch", ")", "\n", "ydata", ".", "append", "(", "accuracy", ")", "\n", "info", ".", "append", "(", "info_dict", ")", "\n", "train_times", ".", "append", "(", "train_time", ")", "\n", "\n", "# step 2: prune the pool down to the top 5 architectures", "\n", "", "indices", "=", "np", ".", "flip", "(", "np", ".", "argsort", "(", "ydata", ")", ")", "[", ":", "self", ".", "num_arches_to_mutate", "]", "\n", "xdata", "=", "[", "xdata", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "ydata", "=", "[", "ydata", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "info", "=", "[", "info", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "train_times", "=", "[", "train_times", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n", "# step 3: mutate the top architectures to generate the full list", "\n", "while", "len", "(", "xdata", ")", "<", "data_size", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_arches_to_mutate", ")", "\n", "arch", "=", "xdata", "[", "idx", "]", ".", "clone", "(", ")", "\n", "mutation_factor", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "max_mutation_rate", ")", "+", "1", "\n", "for", "i", "in", "range", "(", "mutation_factor", ")", ":", "\n", "                ", "new_arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "new_arch", ".", "mutate", "(", "arch", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch", "=", "new_arch", "\n", "\n", "", "arch_hash", "=", "arch", ".", "get_hash", "(", ")", "\n", "if", "arch_hash", "in", "arch_hash_map", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "arch_hash_map", "[", "arch_hash", "]", "=", "True", "\n", "", "accuracy", ",", "train_time", ",", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "xdata", ".", "append", "(", "arch", ")", "\n", "ydata", ".", "append", "(", "accuracy", ")", "\n", "info", ".", "append", "(", "info_dict", ")", "\n", "train_times", ".", "append", "(", "train_time", ")", "\n", "\n", "", "return", "[", "xdata", ",", "ydata", ",", "info", ",", "train_times", "]", ",", "arch_hash_map", "\n", "\n", "", "def", "load_mutated_train", "(", "self", ",", "data_size", "=", "10", ",", "arch_hash_map", "=", "{", "}", ",", "test_data", "=", "[", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_mutated_train": [[223, 255], ["len", "numpy.random.choice", "predictor_evaluator.PredictorEvaluator.search_space.clone", "predictor_evaluator.PredictorEvaluator.mutate", "predictor_evaluator.PredictorEvaluator.get_hash", "predictor_evaluator.PredictorEvaluator.get_full_arch_info", "xdata.append", "ydata.append", "info.append", "train_times.append", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.clone", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.mutate", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.get_hash", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.get_full_arch_info"], ["        ", "\"\"\"\n        Load a training set not uniformly at random, but by picking architectures\n        from the test set and mutating the best ones. There is still no overlap\n        between the training and test sets. This better emulates local or\n        mutation-based NAS algorithms.\n        \"\"\"", "\n", "assert", "(", "\n", "self", ".", "load_labeled", "==", "False", "\n", ")", ",", "\"Mutation is only implemented for load_labeled = False\"", "\n", "xdata", "=", "[", "]", "\n", "ydata", "=", "[", "]", "\n", "info", "=", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "\n", "while", "len", "(", "xdata", ")", "<", "data_size", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "test_data", "[", "0", "]", ")", ")", "\n", "parent", "=", "test_data", "[", "0", "]", "[", "idx", "]", "\n", "arch", "=", "self", ".", "search_space", ".", "clone", "(", ")", "\n", "arch", ".", "mutate", "(", "parent", ",", "dataset_api", "=", "self", ".", "dataset_api", ")", "\n", "arch_hash", "=", "arch", ".", "get_hash", "(", ")", "\n", "if", "arch_hash", "in", "arch_hash_map", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "arch_hash_map", "[", "arch_hash", "]", "=", "True", "\n", "", "accuracy", ",", "train_time", ",", "info_dict", "=", "self", ".", "get_full_arch_info", "(", "arch", ")", "\n", "xdata", ".", "append", "(", "arch", ")", "\n", "ydata", ".", "append", "(", "accuracy", ")", "\n", "info", ".", "append", "(", "info_dict", ")", "\n", "train_times", ".", "append", "(", "train_time", ")", "\n", "\n", "", "return", "[", "xdata", ",", "ydata", ",", "info", ",", "train_times", "]", ",", "arch_hash_map", "\n", "\n", "", "def", "single_evaluate", "(", "self", ",", "train_data", ",", "test_data", ",", "fidelity", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate": [[256, 342], ["len", "predictor_evaluator.PredictorEvaluator.predictor.get_data_reqs", "logger.info", "predictor_evaluator.PredictorEvaluator.predictor.reset_hyperparams", "time.time", "predictor_evaluator.PredictorEvaluator.predictor.fit", "predictor_evaluator.PredictorEvaluator.predictor.get_hyperparams", "time.time", "predictor_evaluator.PredictorEvaluator.predictor.query", "time.time", "logger.info", "predictor_evaluator.PredictorEvaluator.compare", "numpy.sum", "logger.info", "logger.info", "predictor_evaluator.PredictorEvaluator.results.append", "copy.deepcopy", "copy.deepcopy", "predictor_evaluator.PredictorEvaluator.predictor.get_hpo_wrapper", "predictor_evaluator.PredictorEvaluator.run_hpo", "predictor_evaluator.PredictorEvaluator.predictor.set_hyperparams", "len", "numpy.mean", "len", "len", "numpy.round", "type", "info_dict.keys", "info_dict.keys", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.get_data_reqs", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.reset_hyperparams", "home.repos.pwc.inspect_result.gideonfr_emprox.gpwl_utils.vertex_histogram.CustomVertexHistogram.fit", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.get_hyperparams", "home.repos.pwc.inspect_result.gideonfr_emprox.nasbench101.graph.NasBench101SearchSpace.query", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.compare", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.predictor.Predictor.get_hpo_wrapper", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.run_hpo", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.ensemble.Ensemble.set_hyperparams"], ["        ", "\"\"\"\n        Evaluate the predictor for a single (train_data / fidelity) pair\n        \"\"\"", "\n", "xtrain", ",", "ytrain", ",", "train_info", ",", "train_times", "=", "train_data", "\n", "xtest", ",", "ytest", ",", "test_info", ",", "_", "=", "test_data", "\n", "train_size", "=", "len", "(", "xtrain", ")", "\n", "\n", "data_reqs", "=", "self", ".", "predictor", ".", "get_data_reqs", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Fit the predictor\"", ")", "\n", "if", "data_reqs", "[", "\"requires_partial_lc\"", "]", ":", "\n", "            ", "\"\"\"\n            todo: distinguish between predictors that need LC info\n            at training time vs test time\n            \"\"\"", "\n", "train_info", "=", "copy", ".", "deepcopy", "(", "train_info", ")", "\n", "test_info", "=", "copy", ".", "deepcopy", "(", "test_info", ")", "\n", "for", "info_dict", "in", "train_info", ":", "\n", "                ", "lc_related_keys", "=", "[", "key", "for", "key", "in", "info_dict", ".", "keys", "(", ")", "if", "\"lc\"", "in", "key", "]", "\n", "for", "lc_key", "in", "lc_related_keys", ":", "\n", "                    ", "info_dict", "[", "lc_key", "]", "=", "info_dict", "[", "lc_key", "]", "[", ":", "fidelity", "]", "\n", "\n", "", "", "for", "info_dict", "in", "test_info", ":", "\n", "                ", "lc_related_keys", "=", "[", "key", "for", "key", "in", "info_dict", ".", "keys", "(", ")", "if", "\"lc\"", "in", "key", "]", "\n", "for", "lc_key", "in", "lc_related_keys", ":", "\n", "                    ", "info_dict", "[", "lc_key", "]", "=", "info_dict", "[", "lc_key", "]", "[", ":", "fidelity", "]", "\n", "\n", "", "", "", "self", ".", "predictor", ".", "reset_hyperparams", "(", ")", "\n", "fit_time_start", "=", "time", ".", "time", "(", ")", "\n", "cv_score", "=", "0", "\n", "if", "(", "\n", "self", ".", "max_hpo_time", ">", "0", "\n", "and", "len", "(", "xtrain", ")", ">=", "10", "\n", "and", "self", ".", "predictor", ".", "get_hpo_wrapper", "(", ")", "\n", ")", ":", "\n", "\n", "# run cross-validation (for model-based predictors)", "\n", "            ", "hyperparams", ",", "cv_score", "=", "self", ".", "run_hpo", "(", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "train_info", ",", "\n", "start_time", "=", "fit_time_start", ",", "\n", "metric", "=", "\"kendalltau\"", ",", "\n", ")", "\n", "self", ".", "predictor", ".", "set_hyperparams", "(", "hyperparams", ")", "\n", "\n", "", "self", ".", "predictor", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "train_info", ")", "\n", "hyperparams", "=", "self", ".", "predictor", ".", "get_hyperparams", "(", ")", "\n", "\n", "fit_time_end", "=", "time", ".", "time", "(", ")", "\n", "test_pred", "=", "self", ".", "predictor", ".", "query", "(", "xtest", ",", "test_info", ")", "\n", "query_time_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# If the predictor is an ensemble, take the mean", "\n", "if", "len", "(", "test_pred", ".", "shape", ")", ">", "1", ":", "\n", "            ", "test_pred", "=", "np", ".", "mean", "(", "test_pred", ",", "axis", "=", "0", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Compute evaluation metrics\"", ")", "\n", "results_dict", "=", "self", ".", "compare", "(", "ytest", ",", "test_pred", ")", "\n", "results_dict", "[", "\"train_size\"", "]", "=", "train_size", "\n", "results_dict", "[", "\"fidelity\"", "]", "=", "fidelity", "\n", "results_dict", "[", "\"train_time\"", "]", "=", "np", ".", "sum", "(", "train_times", ")", "\n", "results_dict", "[", "\"fit_time\"", "]", "=", "fit_time_end", "-", "fit_time_start", "\n", "results_dict", "[", "\"query_time\"", "]", "=", "(", "query_time_end", "-", "fit_time_end", ")", "/", "len", "(", "xtest", ")", "\n", "if", "hyperparams", ":", "\n", "            ", "for", "key", "in", "hyperparams", ":", "\n", "                ", "results_dict", "[", "\"hp_\"", "+", "key", "]", "=", "hyperparams", "[", "key", "]", "\n", "", "", "results_dict", "[", "\"cv_score\"", "]", "=", "cv_score", "\n", "# print abridged results on one line:", "\n", "logger", ".", "info", "(", "\n", "\"train_size: {}, fidelity: {}, kendall tau {}\"", ".", "format", "(", "\n", "train_size", ",", "fidelity", ",", "np", ".", "round", "(", "results_dict", "[", "\"kendalltau\"", "]", ",", "4", ")", "\n", ")", "\n", ")", "\n", "# print entire results dict:", "\n", "print_string", "=", "\"\"", "\n", "for", "key", "in", "results_dict", ":", "\n", "            ", "if", "type", "(", "results_dict", "[", "key", "]", ")", "not", "in", "[", "str", ",", "set", ",", "bool", "]", ":", "\n", "# todo: serialize other types", "\n", "                ", "print_string", "+=", "key", "+", "\": {}, \"", ".", "format", "(", "np", ".", "round", "(", "results_dict", "[", "key", "]", ",", "4", ")", ")", "\n", "", "", "logger", ".", "info", "(", "print_string", ")", "\n", "self", ".", "results", ".", "append", "(", "results_dict", ")", "\n", "\"\"\"\n        Todo: query_time currently does not include the time taken to train a partial learning curve\n        \"\"\"", "\n", "\n", "", "def", "evaluate", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.evaluate": [[343, 417], ["predictor_evaluator.PredictorEvaluator.predictor.pre_process", "logger.info", "logger.info", "predictor_evaluator.PredictorEvaluator.predictor.get_data_reqs", "predictor_evaluator.PredictorEvaluator.predictor.pre_compute", "predictor_evaluator.PredictorEvaluator._log_to_json", "predictor_evaluator.PredictorEvaluator.load_dataset", "predictor_evaluator.PredictorEvaluator.load_mutated_test", "predictor_evaluator.PredictorEvaluator.load_dataset", "predictor_evaluator.PredictorEvaluator.load_mutated_train", "logger.info", "predictor_evaluator.PredictorEvaluator.load_dataset", "predictor_evaluator.PredictorEvaluator.single_evaluate", "predictor_evaluator.PredictorEvaluator.single_evaluate", "predictor_evaluator.PredictorEvaluator.single_evaluate", "NotImplementedError", "predictor_evaluator.PredictorEvaluator.single_evaluate"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.predictors.zerocost_v1.ZeroCostV1.pre_process", "home.repos.pwc.inspect_result.gideonfr_emprox.lce.lce.LCEPredictor.get_data_reqs", "home.repos.pwc.inspect_result.gideonfr_emprox.predictors.omni_ngb.OmniNGBPredictor.pre_compute", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator._log_to_json", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_mutated_test", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_mutated_train", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.load_dataset", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate", "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.single_evaluate"], ["\n", "        ", "self", ".", "predictor", ".", "pre_process", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Load the test set\"", ")", "\n", "if", "self", ".", "uniform_random", ":", "\n", "            ", "test_data", ",", "arch_hash_map", "=", "self", ".", "load_dataset", "(", "\n", "load_labeled", "=", "self", ".", "load_labeled", ",", "data_size", "=", "self", ".", "test_size", "\n", ")", "\n", "", "else", ":", "\n", "            ", "test_data", ",", "arch_hash_map", "=", "self", ".", "load_mutated_test", "(", "data_size", "=", "self", ".", "test_size", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Load the training set\"", ")", "\n", "max_train_size", "=", "self", ".", "train_size_single", "\n", "\n", "if", "self", ".", "experiment_type", "in", "[", "\"vary_train_size\"", ",", "\"vary_both\"", "]", ":", "\n", "            ", "max_train_size", "=", "self", ".", "train_size_list", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "uniform_random", ":", "\n", "            ", "full_train_data", ",", "_", "=", "self", ".", "load_dataset", "(", "\n", "load_labeled", "=", "self", ".", "load_labeled", ",", "\n", "data_size", "=", "max_train_size", ",", "\n", "arch_hash_map", "=", "arch_hash_map", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "full_train_data", ",", "_", "=", "self", ".", "load_mutated_train", "(", "\n", "data_size", "=", "max_train_size", ",", "\n", "arch_hash_map", "=", "arch_hash_map", ",", "\n", "test_data", "=", "test_data", ",", "\n", ")", "\n", "\n", "# if the predictor requires unlabeled data (e.g. SemiNAS), generate it:", "\n", "", "reqs", "=", "self", ".", "predictor", ".", "get_data_reqs", "(", ")", "\n", "unlabeled_data", "=", "None", "\n", "if", "reqs", "[", "\"unlabeled\"", "]", ":", "\n", "            ", "logger", ".", "info", "(", "\"Load unlabeled data\"", ")", "\n", "unlabeled_size", "=", "max_train_size", "*", "reqs", "[", "\"unlabeled_factor\"", "]", "\n", "[", "unlabeled_data", ",", "_", ",", "_", ",", "_", "]", ",", "_", "=", "self", ".", "load_dataset", "(", "\n", "load_labeled", "=", "self", ".", "load_labeled", ",", "\n", "data_size", "=", "unlabeled_size", ",", "\n", "arch_hash_map", "=", "arch_hash_map", ",", "\n", ")", "\n", "\n", "# some of the predictors use a pre-computation step to save time in batch experiments:", "\n", "", "self", ".", "predictor", ".", "pre_compute", "(", "full_train_data", "[", "0", "]", ",", "test_data", "[", "0", "]", ",", "unlabeled_data", ")", "\n", "\n", "if", "self", ".", "experiment_type", "==", "\"single\"", ":", "\n", "            ", "train_size", "=", "self", ".", "train_size_single", "\n", "fidelity", "=", "self", ".", "fidelity_single", "\n", "self", ".", "single_evaluate", "(", "full_train_data", ",", "test_data", ",", "fidelity", "=", "fidelity", ")", "\n", "\n", "", "elif", "self", ".", "experiment_type", "==", "\"vary_train_size\"", ":", "\n", "            ", "fidelity", "=", "self", ".", "fidelity_single", "\n", "for", "train_size", "in", "self", ".", "train_size_list", ":", "\n", "                ", "train_data", "=", "[", "data", "[", ":", "train_size", "]", "for", "data", "in", "full_train_data", "]", "\n", "self", ".", "single_evaluate", "(", "train_data", ",", "test_data", ",", "fidelity", "=", "fidelity", ")", "\n", "\n", "", "", "elif", "self", ".", "experiment_type", "==", "\"vary_fidelity\"", ":", "\n", "            ", "train_size", "=", "self", ".", "train_size_single", "\n", "for", "fidelity", "in", "self", ".", "fidelity_list", ":", "\n", "                ", "self", ".", "single_evaluate", "(", "full_train_data", ",", "test_data", ",", "fidelity", "=", "fidelity", ")", "\n", "\n", "", "", "elif", "self", ".", "experiment_type", "==", "\"vary_both\"", ":", "\n", "            ", "for", "train_size", "in", "self", ".", "train_size_list", ":", "\n", "                ", "train_data", "=", "[", "data", "[", ":", "train_size", "]", "for", "data", "in", "full_train_data", "]", "\n", "\n", "for", "fidelity", "in", "self", ".", "fidelity_list", ":", "\n", "                    ", "self", ".", "single_evaluate", "(", "train_data", ",", "test_data", ",", "fidelity", "=", "fidelity", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "self", ".", "_log_to_json", "(", ")", "\n", "return", "self", ".", "results", "\n", "\n", "", "def", "compare", "(", "self", ",", "ytest", ",", "test_pred", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.compare": [[418, 472], ["numpy.array", "numpy.array", "numpy.mean", "sklearn.metrics.mean_squared_error", "numpy.abs", "numpy.isnan", "logger.info", "logger.info", "logger.info", "abs", "scipy.stats.spearmanr", "scipy.stats.kendalltau", "scipy.stats.kendalltau", "scipy.stats.kendalltau", "numpy.array", "numpy.array", "numpy.isfinite", "numpy.corrcoef", "numpy.round", "numpy.round", "sum", "float", "sorted", "sorted", "max", "max", "len", "len"], "methods", ["None"], ["        ", "ytest", "=", "np", ".", "array", "(", "ytest", ")", "\n", "test_pred", "=", "np", ".", "array", "(", "test_pred", ")", "\n", "METRICS", "=", "[", "\n", "\"mae\"", ",", "\n", "\"rmse\"", ",", "\n", "\"pearson\"", ",", "\n", "\"spearman\"", ",", "\n", "\"kendalltau\"", ",", "\n", "\"kt_2dec\"", ",", "\n", "\"kt_1dec\"", ",", "\n", "\"precision_10\"", ",", "\n", "\"precision_20\"", ",", "\n", "]", "\n", "metrics_dict", "=", "{", "}", "\n", "\n", "try", ":", "\n", "            ", "metrics_dict", "[", "\"mae\"", "]", "=", "np", ".", "mean", "(", "abs", "(", "test_pred", "-", "ytest", ")", ")", "\n", "metrics_dict", "[", "\"rmse\"", "]", "=", "metrics", ".", "mean_squared_error", "(", "\n", "ytest", ",", "test_pred", ",", "squared", "=", "False", "\n", ")", "\n", "metrics_dict", "[", "\"pearson\"", "]", "=", "np", ".", "abs", "(", "np", ".", "corrcoef", "(", "ytest", ",", "test_pred", ")", "[", "1", ",", "0", "]", ")", "\n", "metrics_dict", "[", "\"spearman\"", "]", "=", "stats", ".", "spearmanr", "(", "ytest", ",", "test_pred", ")", "[", "0", "]", "\n", "metrics_dict", "[", "\"kendalltau\"", "]", "=", "stats", ".", "kendalltau", "(", "ytest", ",", "test_pred", ")", "[", "0", "]", "\n", "metrics_dict", "[", "\"kt_2dec\"", "]", "=", "stats", ".", "kendalltau", "(", "\n", "ytest", ",", "np", ".", "round", "(", "test_pred", ",", "decimals", "=", "2", ")", "\n", ")", "[", "0", "]", "\n", "metrics_dict", "[", "\"kt_1dec\"", "]", "=", "stats", ".", "kendalltau", "(", "\n", "ytest", ",", "np", ".", "round", "(", "test_pred", ",", "decimals", "=", "1", ")", "\n", ")", "[", "0", "]", "\n", "for", "k", "in", "[", "10", ",", "20", "]", ":", "\n", "                ", "top_ytest", "=", "np", ".", "array", "(", "\n", "[", "y", ">", "sorted", "(", "ytest", ")", "[", "max", "(", "-", "len", "(", "ytest", ")", ",", "-", "k", "-", "1", ")", "]", "for", "y", "in", "ytest", "]", "\n", ")", "\n", "top_test_pred", "=", "np", ".", "array", "(", "\n", "[", "\n", "y", ">", "sorted", "(", "test_pred", ")", "[", "max", "(", "-", "len", "(", "test_pred", ")", ",", "-", "k", "-", "1", ")", "]", "\n", "for", "y", "in", "test_pred", "\n", "]", "\n", ")", "\n", "metrics_dict", "[", "\"precision_{}\"", ".", "format", "(", "k", ")", "]", "=", "(", "\n", "sum", "(", "top_ytest", "&", "top_test_pred", ")", "/", "k", "\n", ")", "\n", "", "", "except", ":", "\n", "            ", "for", "metric", "in", "METRICS", ":", "\n", "                ", "metrics_dict", "[", "metric", "]", "=", "float", "(", "\"nan\"", ")", "\n", "", "", "if", "np", ".", "isnan", "(", "metrics_dict", "[", "\"pearson\"", "]", ")", "or", "not", "np", ".", "isfinite", "(", "\n", "metrics_dict", "[", "\"pearson\"", "]", "\n", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Error when computing metrics. ytest and test_pred are:\"", ")", "\n", "logger", ".", "info", "(", "ytest", ")", "\n", "logger", ".", "info", "(", "test_pred", ")", "\n", "\n", "", "return", "metrics_dict", "\n", "\n", "", "def", "run_hpo", "(", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator.run_hpo": [[473, 521], ["logger.info", "len", "naslib.utils.generate_kfold", "copy.deepcopy", "math.isnan", "logger.info", "logger.info", "copy.deepcopy.set_random_hyperparams", "naslib.utils.cross_validation", "best_hyperparams.copy", "numpy.isnan", "logger.info", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.generate_kfold", "home.repos.pwc.inspect_result.gideonfr_emprox.trees.lgb.LGBoost.set_random_hyperparams", "home.repos.pwc.inspect_result.gideonfr_emprox.utils.utils.cross_validation", "home.repos.pwc.inspect_result.gideonfr_emprox.core.graph.EdgeData.copy"], ["self", ",", "\n", "xtrain", ",", "\n", "ytrain", ",", "\n", "train_info", ",", "\n", "start_time", ",", "\n", "metric", "=", "\"kendalltau\"", ",", "\n", "max_iters", "=", "5000", ",", "\n", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Starting cross validation\"", ")", "\n", "n_train", "=", "len", "(", "xtrain", ")", "\n", "split_indices", "=", "generate_kfold", "(", "n_train", ",", "3", ")", "\n", "# todo: try to run this without copying the predictor", "\n", "predictor", "=", "copy", ".", "deepcopy", "(", "self", ".", "predictor", ")", "\n", "\n", "best_score", "=", "-", "1e6", "\n", "best_hyperparams", "=", "None", "\n", "\n", "t", "=", "0", "\n", "while", "t", "<", "max_iters", ":", "\n", "            ", "t", "+=", "1", "\n", "hyperparams", "=", "predictor", ".", "set_random_hyperparams", "(", ")", "\n", "cv_score", "=", "cross_validation", "(", "\n", "xtrain", ",", "ytrain", ",", "predictor", ",", "split_indices", ",", "metric", "\n", ")", "\n", "if", "np", ".", "isnan", "(", "cv_score", ")", "or", "cv_score", "<", "0", ":", "\n", "# todo: this will not work for mae/rmse", "\n", "                ", "cv_score", "=", "0", "\n", "\n", "", "if", "cv_score", ">", "best_score", "or", "t", "==", "0", ":", "\n", "                ", "best_hyperparams", "=", "hyperparams", "\n", "best_score", "=", "cv_score", "\n", "logger", ".", "info", "(", "f\"new best score={cv_score}, hparams = {hyperparams}\"", ")", "\n", "\n", "", "if", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ">", "self", ".", "max_hpo_time", "*", "(", "\n", "len", "(", "xtrain", ")", "/", "1000", "\n", ")", "+", "20", ":", "\n", "# we always give at least 20 seconds, and the time scales with train_size", "\n", "                ", "break", "\n", "\n", "", "", "if", "math", ".", "isnan", "(", "best_score", ")", ":", "\n", "            ", "best_hyperparams", "=", "predictor", ".", "default_hyperparams", "\n", "\n", "", "logger", ".", "info", "(", "f\"Finished {t} rounds\"", ")", "\n", "logger", ".", "info", "(", "f\"Best hyperparams = {best_hyperparams} Score = {best_score}\"", ")", "\n", "self", ".", "predictor", ".", "hyperparams", "=", "best_hyperparams", "\n", "\n", "return", "best_hyperparams", ".", "copy", "(", ")", ",", "best_score", "\n", "\n", "", "def", "_log_to_json", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gideonfr_emprox.experiments.predictor_evaluator.PredictorEvaluator._log_to_json": [[522, 530], ["os.path.exists", "os.makedirs", "codecs.open", "json.dump", "os.path.join"], "methods", ["None"], ["        ", "\"\"\"log statistics to json file\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "save", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "save", ")", "\n", "", "with", "codecs", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "save", ",", "\"errors.json\"", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "results", ",", "file", ",", "separators", "=", "(", "\",\"", ",", "\":\"", ")", ")", "\n", "", "", "", ""]]}