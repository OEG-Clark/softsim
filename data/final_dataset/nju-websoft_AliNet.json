{"home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.__init__": [[20, 87], ["set", "set", "range", "set", "set", "numpy.array().reshape", "numpy.array().reshape", "numpy.ones", "numpy.hstack", "align.preprocess.enhance_triples", "align.preprocess.remove_unlinked_triples", "align.util.no_weighted_adj", "alinet.AliNet.define_model", "tensorflow.keras.optimizers.Adam", "len", "len", "set", "set", "len", "alinet.AliNet.sup_links_set.add", "list", "numpy.array", "len", "numpy.array", "len", "len", "list"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.enhance_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.remove_unlinked_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.no_weighted_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.define_model"], ["    ", "def", "__init__", "(", "self", ",", "adj", ",", "kg1", ",", "kg2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "tri_num", ",", "ent_num", ",", "rel_num", ",", "\n", "rel_ht_dict", ",", "args", ")", ":", "\n", "        ", "self", ".", "one_hop_layers", "=", "None", "\n", "self", ".", "two_hop_layers", "=", "None", "\n", "self", ".", "layers_outputs", "=", "None", "\n", "\n", "self", ".", "adj_mat", "=", "adj", "\n", "self", ".", "kg1", "=", "kg1", "\n", "self", ".", "kg2", "=", "kg2", "\n", "self", ".", "sup_ent1", "=", "sup_ent1", "\n", "self", ".", "sup_ent2", "=", "sup_ent2", "\n", "self", ".", "ref_ent1", "=", "ref_ent1", "\n", "self", ".", "ref_ent2", "=", "ref_ent2", "\n", "self", ".", "tri_num", "=", "tri_num", "\n", "self", ".", "ent_num", "=", "ent_num", "\n", "self", ".", "rel_num", "=", "rel_num", "\n", "\n", "self", ".", "rel_ht_dict", "=", "rel_ht_dict", "\n", "self", ".", "rel_win_size", "=", "args", ".", "batch_size", "//", "len", "(", "rel_ht_dict", ")", "\n", "if", "self", ".", "rel_win_size", "<=", "1", ":", "\n", "            ", "self", ".", "rel_win_size", "=", "args", ".", "min_rel_win", "\n", "\n", "", "self", ".", "neg_multi", "=", "args", ".", "neg_multi", "\n", "self", ".", "neg_margin", "=", "args", ".", "neg_margin", "\n", "self", ".", "neg_param", "=", "args", ".", "neg_param", "\n", "self", ".", "rel_param", "=", "args", ".", "rel_param", "\n", "self", ".", "truncated_epsilon", "=", "args", ".", "truncated_epsilon", "\n", "self", ".", "learning_rate", "=", "args", ".", "learning_rate", "\n", "\n", "self", ".", "layer_dims", "=", "args", ".", "layer_dims", "\n", "self", ".", "layer_num", "=", "len", "(", "args", ".", "layer_dims", ")", "-", "1", "\n", "self", ".", "num_features_nonzero", "=", "args", ".", "num_features_nonzero", "\n", "self", ".", "dropout_rate", "=", "args", ".", "dropout_rate", "\n", "self", ".", "activation", "=", "args", ".", "activation", "\n", "\n", "self", ".", "eval_metric", "=", "args", ".", "eval_metric", "\n", "self", ".", "hits_k", "=", "args", ".", "hits_k", "\n", "self", ".", "eval_threads_num", "=", "args", ".", "eval_threads_num", "\n", "self", ".", "eval_normalize", "=", "args", ".", "eval_normalize", "\n", "self", ".", "eval_csls", "=", "args", ".", "eval_csls", "\n", "\n", "self", ".", "new_edges1", ",", "self", ".", "new_edges2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "self", ".", "new_links", "=", "set", "(", ")", "\n", "self", ".", "pos_link_batch", "=", "None", "\n", "self", ".", "neg_link_batch", "=", "None", "\n", "self", ".", "sim_th", "=", "args", ".", "sim_th", "\n", "self", ".", "start_augment", "=", "args", ".", "start_augment", "\n", "self", ".", "sup_links_set", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sup_ent1", ")", ")", ":", "\n", "            ", "self", ".", "sup_links_set", ".", "add", "(", "(", "self", ".", "sup_ent1", "[", "i", "]", ",", "self", ".", "sup_ent2", "[", "i", "]", ")", ")", "\n", "", "self", ".", "new_sup_links_set", "=", "set", "(", ")", "\n", "self", ".", "linked_ents", "=", "set", "(", "sup_ent1", "+", "sup_ent2", "+", "ref_ent1", "+", "ref_ent2", ")", "\n", "\n", "sup_ent1", "=", "np", ".", "array", "(", "self", ".", "sup_ent1", ")", ".", "reshape", "(", "(", "len", "(", "self", ".", "sup_ent1", ")", ",", "1", ")", ")", "\n", "sup_ent2", "=", "np", ".", "array", "(", "self", ".", "sup_ent2", ")", ".", "reshape", "(", "(", "len", "(", "self", ".", "sup_ent1", ")", ",", "1", ")", ")", "\n", "weight", "=", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "sup_ent1", ")", ",", "1", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "sup_links", "=", "np", ".", "hstack", "(", "(", "sup_ent1", ",", "sup_ent2", ",", "weight", ")", ")", "\n", "\n", "enhanced_triples1", ",", "enhanced_triples2", "=", "enhance_triples", "(", "self", ".", "kg1", ",", "self", ".", "kg2", ",", "self", ".", "sup_ent1", ",", "self", ".", "sup_ent2", ")", "\n", "triples", "=", "self", ".", "kg1", ".", "triple_list", "+", "self", ".", "kg2", ".", "triple_list", "+", "list", "(", "enhanced_triples1", ")", "+", "list", "(", "enhanced_triples2", ")", "\n", "triples", "=", "remove_unlinked_triples", "(", "triples", ",", "self", ".", "linked_ents", ")", "\n", "one_adj", ",", "_", "=", "no_weighted_adj", "(", "self", ".", "ent_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "self", ".", "ori_adj", "=", "[", "one_adj", "]", "\n", "\n", "self", ".", "model", "=", "self", ".", "define_model", "(", ")", "\n", "self", ".", "input_embeds", ",", "self", ".", "output_embeds_list", "=", "None", ",", "None", "\n", "self", ".", "optimizer", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "self", ".", "learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.define_model": [[88, 134], ["print", "tensorflow.keras.Input", "tensorflow.keras.Input", "list", "list", "list", "range", "tensorflow.keras.Model", "len", "gnn.gcn.layers.InputLayer", "gnn.gcn.layers.GraphConvolution", "list.append", "gnn.gcn.layers.GraphConvolution.", "list.append", "alinet_layer.AliNetGraphAttentionLayer", "list.append", "alinet_layer.AliNetGraphAttentionLayer.", "alinet_layer.HighwayLayer", "alinet_layer.HighwayLayer."], "methods", ["None"], ["", "def", "define_model", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Getting AliNet model...'", ")", "\n", "layer_num", "=", "len", "(", "self", ".", "layer_dims", ")", "-", "1", "\n", "pos_link", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "[", "2", ",", "]", ")", "\n", "neg_link", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "[", "2", ",", "]", ")", "\n", "input_embeds", "=", "InputLayer", "(", "shape", "=", "[", "self", ".", "ent_num", ",", "self", ".", "layer_dims", "[", "0", "]", "]", ")", "(", "pos_link", ")", "\n", "\n", "output_embeds", "=", "input_embeds", "\n", "one_layers", "=", "list", "(", ")", "\n", "two_layers", "=", "list", "(", ")", "\n", "layers_outputs", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "layer_num", ")", ":", "\n", "            ", "gcn_layer", "=", "GraphConvolution", "(", "input_dim", "=", "self", ".", "layer_dims", "[", "i", "]", ",", "\n", "output_dim", "=", "self", ".", "layer_dims", "[", "i", "+", "1", "]", ",", "\n", "activations", "=", "'tanh'", ",", "\n", "adj", "=", "[", "self", ".", "adj_mat", "[", "0", "]", "]", ",", "\n", "num_features_nonzero", "=", "self", ".", "num_features_nonzero", ",", "\n", "dropout_rate", "=", "0.0", ")", "\n", "one_layers", ".", "append", "(", "gcn_layer", ")", "\n", "one_output_embeds", "=", "gcn_layer", "(", "output_embeds", ")", "\n", "\n", "if", "i", "<", "layer_num", "-", "1", ":", "\n", "                ", "gat_layer", "=", "AliNetGraphAttentionLayer", "(", "input_dim", "=", "self", ".", "layer_dims", "[", "i", "]", ",", "\n", "output_dim", "=", "self", ".", "layer_dims", "[", "i", "+", "1", "]", ",", "\n", "adj", "=", "[", "self", ".", "adj_mat", "[", "1", "]", "]", ",", "\n", "nodes_num", "=", "self", ".", "ent_num", ",", "\n", "num_features_nonzero", "=", "self", ".", "num_features_nonzero", ",", "\n", "alpha", "=", "0.0", ",", "\n", "activations", "=", "'tanh'", ",", "\n", "dropout_rate", "=", "self", ".", "dropout_rate", ")", "\n", "two_layers", ".", "append", "(", "gat_layer", ")", "\n", "two_output_embeds", "=", "gat_layer", "(", "output_embeds", ")", "\n", "\n", "highway_layer", "=", "HighwayLayer", "(", "self", ".", "layer_dims", "[", "i", "+", "1", "]", ",", "self", ".", "layer_dims", "[", "i", "+", "1", "]", ",", "\n", "dropout_rate", "=", "self", ".", "dropout_rate", ")", "\n", "output_embeds", "=", "highway_layer", "(", "[", "two_output_embeds", ",", "one_output_embeds", "]", ")", "\n", "", "else", ":", "\n", "                ", "output_embeds", "=", "one_output_embeds", "\n", "\n", "", "layers_outputs", ".", "append", "(", "output_embeds", ")", "\n", "\n", "", "self", ".", "one_hop_layers", "=", "one_layers", "\n", "self", ".", "two_hop_layers", "=", "two_layers", "\n", "self", ".", "layers_outputs", "=", "layers_outputs", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "(", "pos_link", ",", "neg_link", ")", ",", "outputs", "=", "(", "input_embeds", ",", "layers_outputs", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.compute_loss": [[135, 157], ["list", "tensorflow.concat", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_normalize", "list.append", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.square", "tensorflow.keras.activations.relu", "tensorflow.square"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pos_links", ",", "neg_links", ",", "only_pos", "=", "False", ")", ":", "\n", "        ", "index1", "=", "pos_links", "[", ":", ",", "0", "]", "\n", "index2", "=", "pos_links", "[", ":", ",", "1", "]", "\n", "neg_index1", "=", "neg_links", "[", ":", ",", "0", "]", "\n", "neg_index2", "=", "neg_links", "[", ":", ",", "1", "]", "\n", "embeds_list", "=", "list", "(", ")", "\n", "for", "output_embeds", "in", "self", ".", "output_embeds_list", "+", "[", "self", ".", "input_embeds", "]", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds_list", ".", "append", "(", "output_embeds", ")", "\n", "", "output_embeds", "=", "tf", ".", "concat", "(", "embeds_list", ",", "axis", "=", "1", ")", "\n", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "index1", ",", "tf", ".", "int32", ")", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "index2", ",", "tf", ".", "int32", ")", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "embeds1", "-", "embeds2", ")", ",", "1", ")", ")", "\n", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "neg_index1", ",", "tf", ".", "int32", ")", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "neg_index2", ",", "tf", ".", "int32", ")", ")", "\n", "neg_distance", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "embeds1", "-", "embeds2", ")", ",", "1", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "keras", ".", "activations", ".", "relu", "(", "self", ".", "neg_margin", "-", "neg_distance", ")", ")", "\n", "\n", "return", "pos_loss", "+", "self", ".", "neg_param", "*", "neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.compute_rel_loss": [[158, 173], ["list", "tensorflow.concat", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.tile", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "list.append", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square"], "methods", ["None"], ["", "def", "compute_rel_loss", "(", "self", ",", "hs", ",", "ts", ")", ":", "\n", "        ", "embeds_list", "=", "list", "(", ")", "\n", "for", "output_embeds", "in", "self", ".", "output_embeds_list", "+", "[", "self", ".", "input_embeds", "]", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds_list", ".", "append", "(", "output_embeds", ")", "\n", "", "output_embeds", "=", "tf", ".", "concat", "(", "embeds_list", ",", "axis", "=", "1", ")", "\n", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "h_embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "hs", ",", "tf", ".", "int32", ")", ")", "\n", "t_embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "ts", ",", "tf", ".", "int32", ")", ")", "\n", "r_temp_embeds", "=", "tf", ".", "reshape", "(", "h_embeds", "-", "t_embeds", ",", "[", "-", "1", ",", "self", ".", "rel_win_size", ",", "output_embeds", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "r_temp_embeds", "=", "tf", ".", "reduce_mean", "(", "r_temp_embeds", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "r_embeds", "=", "tf", ".", "tile", "(", "r_temp_embeds", ",", "[", "1", ",", "self", ".", "rel_win_size", ",", "1", "]", ")", "\n", "r_embeds", "=", "tf", ".", "reshape", "(", "r_embeds", ",", "[", "-", "1", ",", "output_embeds", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "r_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "r_embeds", ",", "1", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "h_embeds", "-", "t_embeds", "-", "r_embeds", ")", ",", "1", ")", ")", "*", "self", ".", "rel_param", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.early_stop": [[174, 182], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "early_stop", "(", "flag1", ",", "flag2", ",", "flag", ")", ":", "\n", "        ", "if", "flag", "<=", "flag2", ":", "\n", "            ", "return", "flag2", ",", "flag", ",", "True", "\n", "", "if", "flag", "<", "flag2", "<", "flag1", ":", "\n", "            ", "return", "flag2", ",", "flag", ",", "True", "\n", "", "else", ":", "\n", "            ", "return", "flag2", ",", "flag", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.eval_embeds": [[183, 187], ["alinet.AliNet.reset_neighborhood", "alinet.AliNet.model"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.reset_neighborhood"], ["", "", "def", "eval_embeds", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_neighborhood", "(", ")", "\n", "input_embeds", ",", "output_embeds", "=", "self", ".", "model", "(", "(", "self", ".", "pos_link_batch", ",", "self", ".", "neg_link_batch", ")", ",", "training", "=", "False", ")", "\n", "return", "input_embeds", ",", "output_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.augment": [[188, 203], ["alinet.AliNet.eval_embeds", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "embeds1.numpy.numpy.numpy", "embeds2.numpy.numpy.numpy", "print", "align.test.sim", "scipy.special.expit", "print", "align.semi_align.find_alignment"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.eval_embeds", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.sim", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.find_alignment"], ["", "def", "augment", "(", "self", ")", ":", "\n", "        ", "_", ",", "output_embeds_list", "=", "self", ".", "eval_embeds", "(", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds_list", "[", "-", "1", "]", ",", "self", ".", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds_list", "[", "-", "1", "]", ",", "self", ".", "ref_ent2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "embeds1", ".", "numpy", "(", ")", "\n", "embeds2", "=", "embeds2", ".", "numpy", "(", ")", "\n", "print", "(", "\"calculate sim mat...\"", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "csls_k", "=", "self", ".", "eval_csls", ")", "\n", "sim_mat", "=", "scipy", ".", "special", ".", "expit", "(", "sim_mat", ")", "\n", "th", "=", "self", ".", "sim_th", "\n", "print", "(", "\"sim th:\"", ",", "th", ")", "\n", "pair_index", "=", "find_alignment", "(", "sim_mat", ",", "th", ",", "1", ")", "\n", "return", "pair_index", ",", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.augment_neighborhood": [[204, 227], ["alinet.AliNet.augment", "alinet_func.update_labeled_alignment_x", "alinet_func.update_labeled_alignment_y", "set", "align.preprocess.enhance_triples", "align.preprocess.remove_unlinked_triples", "align.util.no_weighted_adj", "gc.collect", "list", "layer.update_adj", "len", "len", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.augment", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.update_labeled_alignment_x", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.update_labeled_alignment_y", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.enhance_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.remove_unlinked_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.no_weighted_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.GraphConvolution.update_adj"], ["", "def", "augment_neighborhood", "(", "self", ")", ":", "\n", "        ", "pair_index", ",", "sim_mat", "=", "self", ".", "augment", "(", ")", "\n", "if", "pair_index", "is", "None", "or", "len", "(", "pair_index", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "self", ".", "new_links", "=", "update_labeled_alignment_x", "(", "self", ".", "new_links", ",", "pair_index", ",", "sim_mat", ")", "\n", "self", ".", "new_links", "=", "update_labeled_alignment_y", "(", "self", ".", "new_links", ",", "sim_mat", ")", "\n", "new_sup_ent1", "=", "[", "self", ".", "ref_ent1", "[", "i", "]", "for", "i", ",", "_", ",", "in", "self", ".", "new_links", "]", "\n", "new_sup_ent2", "=", "[", "self", ".", "ref_ent2", "[", "i", "]", "for", "_", ",", "i", ",", "in", "self", ".", "new_links", "]", "\n", "self", ".", "new_sup_links_set", "=", "set", "(", "[", "(", "new_sup_ent1", "[", "i", "]", ",", "new_sup_ent2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "new_sup_ent1", ")", ")", "]", ")", "\n", "if", "new_sup_ent1", "is", "None", "or", "len", "(", "new_sup_ent1", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "enhanced_triples1", ",", "enhanced_triples2", "=", "enhance_triples", "(", "self", ".", "kg1", ",", "self", ".", "kg2", ",", "self", ".", "sup_ent1", "+", "new_sup_ent1", ",", "\n", "self", ".", "sup_ent2", "+", "new_sup_ent2", ")", "\n", "self", ".", "new_edges1", "=", "enhanced_triples1", "\n", "self", ".", "new_edges2", "=", "enhanced_triples2", "\n", "triples", "=", "self", ".", "kg1", ".", "triple_list", "+", "self", ".", "kg2", ".", "triple_list", "+", "list", "(", "self", ".", "new_edges1", ")", "+", "list", "(", "self", ".", "new_edges2", ")", "\n", "triples", "=", "remove_unlinked_triples", "(", "triples", ",", "self", ".", "linked_ents", ")", "\n", "one_adj", ",", "_", "=", "no_weighted_adj", "(", "self", ".", "ent_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "adj", "=", "[", "one_adj", "]", "\n", "for", "layer", "in", "self", ".", "one_hop_layers", ":", "\n", "            ", "layer", ".", "update_adj", "(", "adj", ")", "\n", "", "del", "sim_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.reset_neighborhood": [[228, 231], ["layer.update_adj"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.GraphConvolution.update_adj"], ["", "def", "reset_neighborhood", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "one_hop_layers", ":", "\n", "            ", "layer", ".", "update_adj", "(", "self", ".", "ori_adj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.valid": [[232, 250], ["alinet.AliNet.eval_embeds", "numpy.concatenate", "numpy.concatenate", "align.test.greedy_alignment", "list", "list", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "embeds1.numpy.numpy.numpy", "embeds2.numpy.numpy.numpy", "embeds_list1.append", "embeds_list2.append"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.eval_embeds", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.greedy_alignment"], ["", "", "def", "valid", "(", "self", ")", ":", "\n", "        ", "embeds_list1", ",", "embeds_list2", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "input_embeds", ",", "output_embeds_list", "=", "self", ".", "eval_embeds", "(", ")", "\n", "for", "output_embeds", "in", "[", "input_embeds", "]", "+", "output_embeds_list", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "self", ".", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "self", ".", "ref_ent2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "embeds1", ".", "numpy", "(", ")", "\n", "embeds2", "=", "embeds2", ".", "numpy", "(", ")", "\n", "embeds_list1", ".", "append", "(", "embeds1", ")", "\n", "embeds_list2", ".", "append", "(", "embeds2", ")", "\n", "", "embeds1", "=", "np", ".", "concatenate", "(", "embeds_list1", ",", "axis", "=", "1", ")", "\n", "embeds2", "=", "np", ".", "concatenate", "(", "embeds_list2", ",", "axis", "=", "1", ")", "\n", "alignment_rest", ",", "hits1_12", ",", "mr_12", ",", "mrr_12", "=", "greedy_alignment", "(", "embeds1", ",", "embeds2", ",", "self", ".", "hits_k", ",", "self", ".", "eval_threads_num", ",", "\n", "self", ".", "eval_metric", ",", "False", ",", "0", ",", "False", ")", "\n", "return", "hits1_12", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.test": [[251, 270], ["alinet.AliNet.eval_embeds", "numpy.concatenate", "numpy.concatenate", "align.test.greedy_alignment", "align.test.greedy_alignment", "list", "list", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "embeds1.numpy.numpy.numpy", "embeds2.numpy.numpy.numpy", "embeds_list1.append", "embeds_list2.append"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.eval_embeds", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.greedy_alignment", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.greedy_alignment"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "embeds_list1", ",", "embeds_list2", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "input_embeds", ",", "output_embeds_list", "=", "self", ".", "eval_embeds", "(", ")", "\n", "for", "output_embeds", "in", "[", "input_embeds", "]", "+", "output_embeds_list", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "self", ".", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "self", ".", "ref_ent2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "embeds1", ".", "numpy", "(", ")", "\n", "embeds2", "=", "embeds2", ".", "numpy", "(", ")", "\n", "embeds_list1", ".", "append", "(", "embeds1", ")", "\n", "embeds_list2", ".", "append", "(", "embeds2", ")", "\n", "", "embeds1", "=", "np", ".", "concatenate", "(", "embeds_list1", ",", "axis", "=", "1", ")", "\n", "embeds2", "=", "np", ".", "concatenate", "(", "embeds_list2", ",", "axis", "=", "1", ")", "\n", "alignment_rest", ",", "_", ",", "_", ",", "_", "=", "greedy_alignment", "(", "embeds1", ",", "embeds2", ",", "self", ".", "hits_k", ",", "self", ".", "eval_threads_num", ",", "\n", "self", ".", "eval_metric", ",", "False", ",", "0", ",", "True", ")", "\n", "alignment_rest", ",", "_", ",", "_", ",", "_", "=", "greedy_alignment", "(", "embeds1", ",", "embeds2", ",", "self", ".", "hits_k", ",", "self", ".", "eval_threads_num", ",", "\n", "self", ".", "eval_metric", ",", "False", ",", "self", ".", "eval_csls", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.generate_input_batch": [[271, 296], ["numpy.random.choice", "list", "numpy.array", "len", "len", "len", "list", "list", "range", "numpy.array.extend", "range", "set", "list", "list.extend", "list.extend", "random.sample", "numpy.array.extend", "random.sample", "numpy.array.extend", "random.sample", "random.sample", "neighbors1.get", "neighbors2.get", "range", "len"], "methods", ["None"], ["", "def", "generate_input_batch", "(", "self", ",", "batch_size", ",", "neighbors1", "=", "None", ",", "neighbors2", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", ">", "len", "(", "self", ".", "sup_ent1", ")", ":", "\n", "            ", "batch_size", "=", "len", "(", "self", ".", "sup_ent1", ")", "\n", "", "index", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "sup_ent1", ")", ",", "batch_size", ")", "\n", "pos_links", "=", "self", ".", "sup_links", "[", "index", ",", "]", "\n", "neg_links", "=", "list", "(", ")", "\n", "if", "neighbors1", "is", "None", ":", "\n", "            ", "neg_ent1", "=", "list", "(", ")", "\n", "neg_ent2", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "neg_multi", ")", ":", "\n", "                ", "neg_ent1", ".", "extend", "(", "random", ".", "sample", "(", "self", ".", "sup_ent1", "+", "self", ".", "ref_ent1", ",", "batch_size", ")", ")", "\n", "neg_ent2", ".", "extend", "(", "random", ".", "sample", "(", "self", ".", "sup_ent2", "+", "self", ".", "ref_ent2", ",", "batch_size", ")", ")", "\n", "", "neg_links", ".", "extend", "(", "[", "(", "neg_ent1", "[", "i", "]", ",", "neg_ent2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "neg_ent1", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "e1", "=", "pos_links", "[", "i", ",", "0", "]", "\n", "candidates", "=", "random", ".", "sample", "(", "neighbors1", ".", "get", "(", "e1", ")", ",", "self", ".", "neg_multi", ")", "\n", "neg_links", ".", "extend", "(", "[", "(", "e1", ",", "candidate", ")", "for", "candidate", "in", "candidates", "]", ")", "\n", "e2", "=", "pos_links", "[", "i", ",", "1", "]", "\n", "candidates", "=", "random", ".", "sample", "(", "neighbors2", ".", "get", "(", "e2", ")", ",", "self", ".", "neg_multi", ")", "\n", "neg_links", ".", "extend", "(", "[", "(", "candidate", ",", "e2", ")", "for", "candidate", "in", "candidates", "]", ")", "\n", "", "", "neg_links", "=", "set", "(", "neg_links", ")", "-", "self", ".", "sup_links_set", "\n", "neg_links", "=", "neg_links", "-", "self", ".", "new_sup_links_set", "\n", "neg_links", "=", "np", ".", "array", "(", "list", "(", "neg_links", ")", ")", "\n", "return", "pos_links", ",", "neg_links", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.generate_rel_batch": [[297, 306], ["alinet.AliNet.rel_ht_dict.items", "list", "list", "list", "random.choice", "hs.append", "ts.append", "rs.append", "range"], "methods", ["None"], ["", "def", "generate_rel_batch", "(", "self", ")", ":", "\n", "        ", "hs", ",", "rs", ",", "ts", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "r", ",", "hts", "in", "self", ".", "rel_ht_dict", ".", "items", "(", ")", ":", "\n", "            ", "hts_batch", "=", "[", "random", ".", "choice", "(", "hts", ")", "for", "_", "in", "range", "(", "self", ".", "rel_win_size", ")", "]", "\n", "for", "h", ",", "t", "in", "hts_batch", ":", "\n", "                ", "hs", ".", "append", "(", "h", ")", "\n", "ts", ".", "append", "(", "t", ")", "\n", "rs", ".", "append", "(", "r", ")", "\n", "", "", "return", "hs", ",", "rs", ",", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.find_neighbors": [[307, 328], ["time.time", "alinet.AliNet.eval_embeds", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "embeds1.numpy.numpy.numpy", "embeds2.numpy.numpy.numpy", "int", "print", "align.sample.generate_neighbours", "align.sample.generate_neighbours", "print", "gc.collect", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.eval_embeds", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.sample.generate_neighbours", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.sample.generate_neighbours"], ["", "def", "find_neighbors", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "truncated_epsilon", "<=", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "input_embeds", ",", "output_embeds_list", "=", "self", ".", "eval_embeds", "(", ")", "\n", "ents1", "=", "self", ".", "sup_ent1", "+", "self", ".", "ref_ent1", "\n", "ents2", "=", "self", ".", "sup_ent2", "+", "self", ".", "ref_ent2", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds_list", "[", "-", "1", "]", ",", "ents1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds_list", "[", "-", "1", "]", ",", "ents2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "embeds1", ".", "numpy", "(", ")", "\n", "embeds2", "=", "embeds2", ".", "numpy", "(", ")", "\n", "num", "=", "int", "(", "(", "1", "-", "self", ".", "truncated_epsilon", ")", "*", "len", "(", "ents1", ")", ")", "\n", "print", "(", "\"neighbors num\"", ",", "num", ")", "\n", "neighbors1", "=", "generate_neighbours", "(", "embeds1", ",", "ents1", ",", "embeds2", ",", "ents2", ",", "num", ",", "threads_num", "=", "self", ".", "eval_threads_num", ")", "\n", "neighbors2", "=", "generate_neighbours", "(", "embeds2", ",", "ents2", ",", "embeds1", ",", "ents1", ",", "num", ",", "threads_num", "=", "self", ".", "eval_threads_num", ")", "\n", "print", "(", "'finding neighbors for sampling costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "del", "embeds1", ",", "embeds2", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "neighbors1", ",", "neighbors2", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.train": [[329, 365], ["range", "len", "time.time", "range", "print", "alinet.AliNet.generate_input_batch", "alinet.AliNet.valid", "alinet.AliNet.early_stop", "alinet.AliNet.find_neighbors", "tensorflow.GradientTape", "alinet.AliNet.model", "alinet.AliNet.compute_loss", "tape.gradient", "alinet.AliNet.optimizer.apply_gradients", "print", "alinet.AliNet.generate_rel_batch", "alinet.AliNet.compute_rel_loss", "zip", "time.time", "alinet.AliNet.augment_neighborhood"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.generate_input_batch", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.valid", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.early_stop", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.find_neighbors", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.compute_loss", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.generate_rel_batch", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.compute_rel_loss", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet.AliNet.augment_neighborhood"], ["", "def", "train", "(", "self", ",", "batch_size", ",", "max_epochs", "=", "1000", ",", "start_valid", "=", "10", ",", "eval_freq", "=", "10", ")", ":", "\n", "        ", "flag1", "=", "0", "\n", "flag2", "=", "0", "\n", "steps", "=", "len", "(", "self", ".", "sup_ent2", ")", "//", "batch_size", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "if", "steps", "==", "0", ":", "\n", "            ", "steps", "=", "1", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "max_epochs", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0.0", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "self", ".", "pos_link_batch", ",", "self", ".", "neg_link_batch", "=", "self", ".", "generate_input_batch", "(", "batch_size", ",", "\n", "neighbors1", "=", "neighbors1", ",", "\n", "neighbors2", "=", "neighbors2", ")", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "                    ", "self", ".", "input_embeds", ",", "self", ".", "output_embeds_list", "=", "self", ".", "model", "(", "(", "self", ".", "pos_link_batch", ",", "self", ".", "neg_link_batch", ")", ",", "\n", "training", "=", "True", ")", "\n", "batch_loss", "=", "self", ".", "compute_loss", "(", "self", ".", "pos_link_batch", ",", "self", ".", "neg_link_batch", ")", "\n", "if", "self", ".", "rel_param", ">", "0.0", ":", "\n", "                        ", "hs", ",", "_", ",", "ts", "=", "self", ".", "generate_rel_batch", "(", ")", "\n", "rel_loss", "=", "self", ".", "compute_rel_loss", "(", "hs", ",", "ts", ")", "\n", "batch_loss", "+=", "rel_loss", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "batch_loss", ",", "self", ".", "model", ".", "trainable_variables", ")", "\n", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "self", ".", "model", ".", "trainable_variables", ")", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "", "print", "(", "'epoch {}, loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "if", "epoch", "%", "eval_freq", "==", "0", "and", "epoch", ">=", "start_valid", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", ")", "\n", "flag1", ",", "flag2", ",", "is_stop", "=", "self", ".", "early_stop", "(", "flag1", ",", "flag2", ",", "flag", ")", "\n", "if", "is_stop", ":", "\n", "                    ", "print", "(", "\"\\n == training stop == \\n\"", ")", "\n", "break", "\n", "", "neighbors1", ",", "neighbors2", "=", "self", ".", "find_neighbors", "(", ")", "\n", "if", "epoch", ">=", "self", ".", "start_augment", "*", "eval_freq", ":", "\n", "                    ", "if", "self", ".", "sim_th", ">", "0.0", ":", "\n", "                        ", "self", ".", "augment_neighborhood", "(", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.get_neighbor_dict": [[4, 13], ["dict", "out_dict.items", "in_dict.items", "dict.get", "set"], "function", ["None"], ["def", "get_neighbor_dict", "(", "out_dict", ",", "in_dict", ")", ":", "\n", "    ", "dic", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "out_dict", ".", "items", "(", ")", ":", "\n", "        ", "dic", "[", "key", "]", "=", "value", "\n", "", "for", "key", ",", "value", "in", "in_dict", ".", "items", "(", ")", ":", "\n", "        ", "values", "=", "dic", ".", "get", "(", "key", ",", "set", "(", ")", ")", "\n", "values", "|=", "value", "\n", "dic", "[", "key", "]", "=", "values", "\n", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.get_neighbor_counterparts": [[15, 21], ["set", "set.add", "alignment_dic.get"], "function", ["None"], ["", "def", "get_neighbor_counterparts", "(", "neighbors", ",", "alignment_dic", ")", ":", "\n", "    ", "neighbor_counterparts", "=", "set", "(", ")", "\n", "for", "n", "in", "neighbors", ":", "\n", "        ", "if", "n", "in", "alignment_dic", ":", "\n", "            ", "neighbor_counterparts", ".", "add", "(", "alignment_dic", ".", "get", "(", "n", ")", ")", "\n", "", "", "return", "neighbor_counterparts", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.compute_overlap_of_one_hop": [[23, 51], ["set", "dict", "alinet_func.get_neighbor_dict", "alinet_func.get_neighbor_dict", "zip", "get_neighbor_dict.get", "get_neighbor_dict.get", "alinet_func.get_neighbor_counterparts", "len", "print", "print", "print", "print", "set.add", "set", "set", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.get_neighbor_dict", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.get_neighbor_dict", "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.get_neighbor_counterparts"], ["", "def", "compute_overlap_of_one_hop", "(", "hits1_results", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "kg1", ":", "KG", ",", "kg2", ":", "KG", ")", ":", "\n", "    ", "right_hits1_results", "=", "set", "(", ")", "\n", "for", "i", ",", "j", "in", "hits1_results", ":", "\n", "        ", "if", "i", "==", "j", ":", "\n", "            ", "right_hits1_results", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "right_aligned_ents", "=", "[", "(", "ref_ent1", "[", "i", "]", ",", "ref_ent2", "[", "j", "]", ")", "for", "(", "i", ",", "j", ")", "in", "right_hits1_results", "]", "\n", "ents1", "=", "sup_ent1", "+", "ref_ent1", "\n", "ents2", "=", "sup_ent2", "+", "ref_ent2", "\n", "alignment_dict", "=", "dict", "(", "zip", "(", "ents1", ",", "ents2", ")", ")", "\n", "kg1_neighbors_dic", "=", "get_neighbor_dict", "(", "kg1", ".", "in_related_ents_dict", ",", "kg1", ".", "out_related_ents_dict", ")", "\n", "kg2_neighbors_dic", "=", "get_neighbor_dict", "(", "kg2", ".", "in_related_ents_dict", ",", "kg2", ".", "out_related_ents_dict", ")", "\n", "radio1", ",", "radio2", "=", "0.0", ",", "0.0", "\n", "dsc", "=", "0.0", "\n", "jsc", "=", "0.0", "\n", "for", "i", ",", "j", "in", "right_aligned_ents", ":", "\n", "        ", "i_neighbors", "=", "kg1_neighbors_dic", ".", "get", "(", "i", ",", "set", "(", ")", ")", "\n", "j_neighbors", "=", "kg2_neighbors_dic", ".", "get", "(", "j", ",", "set", "(", ")", ")", "\n", "i_neighbor_counterparts", "=", "get_neighbor_counterparts", "(", "i_neighbors", ",", "alignment_dict", ")", "\n", "overlap", "=", "i_neighbor_counterparts", "&", "j_neighbors", "\n", "radio1", "+=", "len", "(", "overlap", ")", "/", "len", "(", "i_neighbors", ")", "\n", "radio2", "+=", "len", "(", "overlap", ")", "/", "len", "(", "j_neighbors", ")", "\n", "dsc", "+=", "2", "*", "(", "len", "(", "overlap", ")", ")", "/", "(", "len", "(", "i_neighbors", ")", "+", "len", "(", "j_neighbors", ")", ")", "\n", "jsc", "+=", "len", "(", "overlap", ")", "/", "(", "len", "(", "i_neighbors", ")", "+", "len", "(", "j_neighbors", ")", "-", "len", "(", "overlap", ")", ")", "\n", "", "if", "len", "(", "right_aligned_ents", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"radio of overlap in KG1:\"", ",", "radio1", "/", "len", "(", "right_aligned_ents", ")", ")", "\n", "print", "(", "\"radio of overlap in KG2:\"", ",", "radio2", "/", "len", "(", "right_aligned_ents", ")", ")", "\n", "print", "(", "\"dsc score:\"", ",", "dsc", "/", "len", "(", "right_aligned_ents", ")", ")", "\n", "print", "(", "\"jsc score:\"", ",", "jsc", "/", "len", "(", "right_aligned_ents", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.check_new_alignment": [[53, 62], ["print", "print", "len", "len", "len"], "function", ["None"], ["", "", "def", "check_new_alignment", "(", "aligned_pairs", ",", "context", "=", "\"check align\"", ")", ":", "\n", "    ", "if", "aligned_pairs", "is", "None", "or", "len", "(", "aligned_pairs", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"{}, empty aligned pairs\"", ".", "format", "(", "context", ")", ")", "\n", "return", "\n", "", "num", "=", "0", "\n", "for", "x", ",", "y", "in", "aligned_pairs", ":", "\n", "        ", "if", "x", "==", "y", ":", "\n", "            ", "num", "+=", "1", "\n", "", "", "print", "(", "\"{}, right align: {}/{}={:.3f}\"", ".", "format", "(", "context", ",", "num", ",", "len", "(", "aligned_pairs", ")", ",", "num", "/", "len", "(", "aligned_pairs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.update_labeled_alignment_x": [[64, 87], ["alinet_func.check_new_alignment", "dict", "print", "set", "alinet_func.check_new_alignment", "zip", "dict.keys", "dict.get", "dict.keys", "dict.values", "dict.get"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.check_new_alignment", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.check_new_alignment"], ["", "def", "update_labeled_alignment_x", "(", "pre_labeled_alignment", ",", "curr_labeled_alignment", ",", "sim_mat", ")", ":", "\n", "    ", "check_new_alignment", "(", "pre_labeled_alignment", ",", "context", "=", "\"before editing (<-)\"", ")", "\n", "labeled_alignment_dict", "=", "dict", "(", "pre_labeled_alignment", ")", "\n", "n1", ",", "n2", "=", "0", ",", "0", "\n", "for", "i", ",", "j", "in", "curr_labeled_alignment", ":", "\n", "        ", "if", "labeled_alignment_dict", ".", "get", "(", "i", ",", "-", "1", ")", "==", "i", "and", "j", "!=", "i", ":", "\n", "            ", "n2", "+=", "1", "\n", "", "if", "i", "in", "labeled_alignment_dict", ".", "keys", "(", ")", ":", "\n", "            ", "pre_j", "=", "labeled_alignment_dict", ".", "get", "(", "i", ")", "\n", "if", "pre_j", "==", "j", ":", "\n", "                ", "continue", "\n", "", "pre_sim", "=", "sim_mat", "[", "i", ",", "pre_j", "]", "\n", "new_sim", "=", "sim_mat", "[", "i", ",", "j", "]", "\n", "if", "new_sim", ">=", "pre_sim", ":", "\n", "                ", "if", "pre_j", "==", "i", "and", "j", "!=", "i", ":", "\n", "                    ", "n1", "+=", "1", "\n", "", "labeled_alignment_dict", "[", "i", "]", "=", "j", "\n", "", "", "else", ":", "\n", "            ", "labeled_alignment_dict", "[", "i", "]", "=", "j", "\n", "", "", "print", "(", "\"update wrongly: \"", ",", "n1", ",", "\"greedy update wrongly: \"", ",", "n2", ")", "\n", "pre_labeled_alignment", "=", "set", "(", "zip", "(", "labeled_alignment_dict", ".", "keys", "(", ")", ",", "labeled_alignment_dict", ".", "values", "(", ")", ")", ")", "\n", "check_new_alignment", "(", "pre_labeled_alignment", ",", "context", "=", "\"after editing (<-)\"", ")", "\n", "return", "pre_labeled_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_func.update_labeled_alignment_y": [[89, 110], ["dict", "set", "dict.items", "alinet_func.check_new_alignment", "dict.get", "labeled_alignment_dict.get.add", "set", "len", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.check_new_alignment"], ["", "def", "update_labeled_alignment_y", "(", "labeled_alignment", ",", "sim_mat", ")", ":", "\n", "    ", "labeled_alignment_dict", "=", "dict", "(", ")", "\n", "updated_alignment", "=", "set", "(", ")", "\n", "for", "i", ",", "j", "in", "labeled_alignment", ":", "\n", "        ", "i_set", "=", "labeled_alignment_dict", ".", "get", "(", "j", ",", "set", "(", ")", ")", "\n", "i_set", ".", "add", "(", "i", ")", "\n", "labeled_alignment_dict", "[", "j", "]", "=", "i_set", "\n", "", "for", "j", ",", "i_set", "in", "labeled_alignment_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "i_set", ")", "==", "1", ":", "\n", "            ", "for", "i", "in", "i_set", ":", "\n", "                ", "updated_alignment", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "max_i", "=", "-", "1", "\n", "max_sim", "=", "-", "10", "\n", "for", "i", "in", "i_set", ":", "\n", "                ", "if", "sim_mat", "[", "i", ",", "j", "]", ">", "max_sim", ":", "\n", "                    ", "max_sim", "=", "sim_mat", "[", "i", ",", "j", "]", "\n", "max_i", "=", "i", "\n", "", "", "updated_alignment", ".", "add", "(", "(", "max_i", ",", "j", ")", ")", "\n", "", "", "check_new_alignment", "(", "updated_alignment", ",", "context", "=", "\"after editing (->)\"", ")", "\n", "return", "updated_alignment", "\n", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.main.get_model": [[45, 47], ["getattr"], "function", ["None"], ["", "def", "get_model", "(", "model_name", ")", ":", "\n", "    ", "return", "getattr", "(", "ModelFamily", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.HighwayLayer.compute_output_signature": [[12, 14], ["None"], "methods", ["None"], ["def", "compute_output_signature", "(", "self", ",", "input_signature", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.HighwayLayer.__init__": [[15, 35], ["super().__init__", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__"], ["", "def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "activation", "=", "'tanh'", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "bias_initializer", "=", "'zeros'", ")", ":", "\n", "        ", "super", "(", "HighwayLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "\n", "self", ".", "shape", "=", "(", "input_dim", ",", "output_dim", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "kernel", "=", "None", "\n", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.HighwayLayer.build": [[36, 42], ["alinet_layer.HighwayLayer.add_weight"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "'kernel'", ",", "\n", "shape", "=", "[", "self", ".", "input_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "dtype", "=", "'float32'", ",", "\n", "trainable", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.HighwayLayer.call": [[43, 55], ["tensorflow.matmul", "tensorflow.keras.activations.tanh", "tensorflow.keras.activations.relu", "tensorflow.add", "alinet_layer.HighwayLayer.activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.nn.dropout", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "True", ")", ":", "\n", "        ", "input1", "=", "inputs", "[", "0", "]", "\n", "input2", "=", "inputs", "[", "1", "]", "\n", "input1", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "input1", ")", "\n", "input2", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "input2", ")", "\n", "gate", "=", "tf", ".", "matmul", "(", "input1", ",", "self", ".", "kernel", ")", "\n", "gate", "=", "tf", ".", "keras", ".", "activations", ".", "tanh", "(", "gate", ")", "\n", "if", "training", "and", "self", ".", "dropout_rate", ">", "0.0", ":", "\n", "            ", "gate", "=", "tf", ".", "nn", ".", "dropout", "(", "gate", ",", "self", ".", "dropout_rate", ")", "\n", "", "gate", "=", "tf", ".", "keras", ".", "activations", ".", "relu", "(", "gate", ")", "\n", "output", "=", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "input2", ",", "1", "-", "gate", ")", ",", "tf", ".", "multiply", "(", "input1", ",", "gate", ")", ")", "\n", "return", "self", ".", "activation", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.AliNetGraphAttentionLayer.compute_output_signature": [[58, 60], ["None"], "methods", ["None"], ["    ", "def", "compute_output_signature", "(", "self", ",", "input_signature", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.AliNetGraphAttentionLayer.__init__": [[61, 106], ["super().__init__", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.constraints.get", "tensorflow.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__"], ["", "def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "adj", ",", "\n", "nodes_num", ",", "\n", "num_features_nonzero", ",", "\n", "alpha", "=", "0.0", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "is_sparse_inputs", "=", "False", ",", "\n", "featureless", "=", "False", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "'l2'", ",", "\n", "bias_regularizer", "=", "'l2'", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "coef_dropout", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AliNetGraphAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "kernel_regularizer", "=", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "bias_regularizer", "=", "regularizers", ".", "get", "(", "bias_regularizer", ")", "\n", "self", ".", "kernel_constraint", "=", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "bias_constraint", "=", "constraints", ".", "get", "(", "bias_constraint", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "is_sparse_inputs", "=", "is_sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "num_features_nonzero", "=", "num_features_nonzero", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "adj", "[", "0", "]", "[", "0", "]", ",", "values", "=", "adj", "[", "0", "]", "[", "1", "]", ",", "dense_shape", "=", "adj", "[", "0", "]", "[", "2", "]", ")", "]", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "coef_drop", "=", "coef_dropout", "\n", "self", ".", "nodes_num", "=", "nodes_num", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "self", ".", "kernel", ",", "self", ".", "kernel1", ",", "self", ".", "kernel2", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "mapping", "=", "None", "\n", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.AliNetGraphAttentionLayer.build": [[107, 123], ["alinet_layer.AliNetGraphAttentionLayer.add_weight", "alinet_layer.AliNetGraphAttentionLayer.add_weight", "alinet_layer.AliNetGraphAttentionLayer.add_weight"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "kernel1", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", ")", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "kernel2", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", ")", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ",", "\n", "trainable", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.AliNetGraphAttentionLayer.call": [[124, 146], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.keras.activations.tanh", "tensorflow.keras.activations.tanh", "tensorflow.sparse.add", "tensorflow.SparseTensor", "tensorflow.sparse.softmax", "tensorflow.sparse.reshape", "tensorflow.sparse.sparse_dense_matmul", "alinet_layer.AliNetGraphAttentionLayer.activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.cast", "tensorflow.cast", "tensorflow.transpose", "tensorflow.nn.leaky_relu"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "True", ")", ":", "\n", "        ", "inputs", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", ")", "\n", "mapped_inputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel", ")", "\n", "attention_inputs1", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel1", ")", "\n", "attention_inputs2", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel2", ")", "\n", "con_sa_1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "attention_inputs1", ",", "inputs", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "con_sa_2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "attention_inputs2", ",", "inputs", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "con_sa_1", "=", "tf", ".", "keras", ".", "activations", ".", "tanh", "(", "con_sa_1", ")", "\n", "con_sa_2", "=", "tf", ".", "keras", ".", "activations", ".", "tanh", "(", "con_sa_2", ")", "\n", "if", "training", "and", "self", ".", "dropout_rate", ">", "0.0", ":", "\n", "            ", "con_sa_1", "=", "tf", ".", "nn", ".", "dropout", "(", "con_sa_1", ",", "self", ".", "dropout_rate", ")", "\n", "con_sa_2", "=", "tf", ".", "nn", ".", "dropout", "(", "con_sa_2", ",", "self", ".", "dropout_rate", ")", "\n", "", "con_sa_1", "=", "tf", ".", "cast", "(", "self", ".", "adjs", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "con_sa_1", "\n", "con_sa_2", "=", "tf", ".", "cast", "(", "self", ".", "adjs", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "tf", ".", "transpose", "(", "con_sa_2", ",", "[", "1", ",", "0", "]", ")", "\n", "weights", "=", "tf", ".", "sparse", ".", "add", "(", "con_sa_1", ",", "con_sa_2", ")", "\n", "weights", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "weights", ".", "indices", ",", "\n", "values", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "weights", ".", "values", ")", ",", "\n", "dense_shape", "=", "weights", ".", "dense_shape", ")", "\n", "attention_adj", "=", "tf", ".", "sparse", ".", "softmax", "(", "weights", ")", "\n", "attention_adj", "=", "tf", ".", "sparse", ".", "reshape", "(", "attention_adj", ",", "shape", "=", "[", "self", ".", "nodes_num", ",", "self", ".", "nodes_num", "]", ")", "\n", "value", "=", "tf", ".", "sparse", ".", "sparse_dense_matmul", "(", "attention_adj", ",", "mapped_inputs", ")", "\n", "return", "self", ".", "activation", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.InputLayer.__init__": [[151, 160], ["super().__init__", "tensorflow.python.keras.initializers.get", "alinet_layer.InputLayer.add_weight"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "shape", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ")", ":", "\n", "        ", "super", "(", "InputLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "init_embeds", "=", "self", ".", "add_weight", "(", "'embedding'", ",", "\n", "shape", "=", "shape", ",", "\n", "dtype", "=", "'float32'", ",", "\n", "trainable", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.InputLayer.call": [[161, 163], ["None"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "init_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.code.alinet_layer.InputLayer.compute_output_signature": [[164, 166], ["None"], "methods", ["None"], ["", "def", "compute_output_signature", "(", "self", ",", "input_signature", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.find_potential_alignment_greedily": [[6, 8], ["semi_align.find_alignment"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.find_alignment"], ["def", "find_potential_alignment_greedily", "(", "sim_mat", ",", "sim_th", ")", ":", "\n", "    ", "return", "find_alignment", "(", "sim_mat", ",", "sim_th", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.find_potential_alignment_mwgm": [[10, 24], ["time.time", "semi_align.find_alignment", "time.time", "semi_align.check_new_alignment", "print", "print", "semi_align.mwgm", "semi_align.mwgm", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.find_alignment", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.check_new_alignment", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.mwgm", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.mwgm"], ["", "def", "find_potential_alignment_mwgm", "(", "sim_mat", ",", "sim_th", ",", "k", ",", "heuristic", "=", "True", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "potential_aligned_pairs", "=", "find_alignment", "(", "sim_mat", ",", "sim_th", ",", "k", ")", "\n", "if", "potential_aligned_pairs", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "if", "heuristic", ":", "\n", "        ", "selected_aligned_pairs", "=", "mwgm", "(", "potential_aligned_pairs", ",", "sim_mat", ",", "mwgm_graph_tool", ")", "\n", "", "else", ":", "\n", "        ", "selected_aligned_pairs", "=", "mwgm", "(", "potential_aligned_pairs", ",", "sim_mat", ",", "mwgm_igraph", ")", "\n", "", "check_new_alignment", "(", "selected_aligned_pairs", ",", "context", "=", "\"after mwgm\"", ")", "\n", "print", "(", "\"mwgm costs time: {:.3f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "print", "(", "\"selecting potential align costs time: {:.3f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "selected_aligned_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.find_alignment": [[26, 50], ["semi_align.filter_sim_mat", "semi_align.check_new_alignment", "semi_align.search_nearest_k", "semi_align.check_new_alignment", "len", "len"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.filter_sim_mat", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.check_new_alignment", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.search_nearest_k", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.check_new_alignment"], ["", "def", "find_alignment", "(", "sim_mat", ",", "sim_th", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Find potential pairs of aligned entities from the similarity matrix.\n    The potential pair (x, y) should satisfy: 1) sim(x, y) > sim_th; 2) y is among the nearest-k neighbors of x.\n\n    Parameters\n    ----------\n    :param sim_mat:\n    :param sim_th:\n    :param k:\n    :return:\n    \"\"\"", "\n", "potential_aligned_pairs", "=", "filter_sim_mat", "(", "sim_mat", ",", "sim_th", ")", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim threshold\"", ")", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "return", "potential_aligned_pairs", "\n", "", "nearest_k_neighbors", "=", "search_nearest_k", "(", "sim_mat", ",", "k", ")", "\n", "potential_aligned_pairs", "&=", "nearest_k_neighbors", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim and nearest k\"", ")", "\n", "return", "potential_aligned_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.filter_sim_mat": [[52, 62], ["set", "numpy.where", "zip", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "filter_sim_mat", "(", "mat", ",", "threshold", ",", "greater", "=", "True", ",", "equal", "=", "False", ")", ":", "\n", "    ", "if", "greater", "and", "equal", ":", "\n", "        ", "x", ",", "y", "=", "np", ".", "where", "(", "mat", ">=", "threshold", ")", "\n", "", "elif", "greater", "and", "not", "equal", ":", "\n", "        ", "x", ",", "y", "=", "np", ".", "where", "(", "mat", ">", "threshold", ")", "\n", "", "elif", "not", "greater", "and", "equal", ":", "\n", "        ", "x", ",", "y", "=", "np", ".", "where", "(", "mat", "<=", "threshold", ")", "\n", "", "else", ":", "\n", "        ", "x", ",", "y", "=", "np", ".", "where", "(", "mat", "<", "threshold", ")", "\n", "", "return", "set", "(", "zip", "(", "x", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.search_nearest_k": [[64, 75], ["set", "range", "numpy.argpartition", "set", "len", "itertools.product"], "function", ["None"], ["", "def", "search_nearest_k", "(", "sim_mat", ",", "k", ")", ":", "\n", "    ", "assert", "k", ">", "0", "\n", "neighbors", "=", "set", "(", ")", "\n", "num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "rank", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "k", ")", "\n", "pairs", "=", "[", "j", "for", "j", "in", "itertools", ".", "product", "(", "[", "i", "]", ",", "rank", "[", "0", ":", "k", "]", ")", "]", "\n", "neighbors", "|=", "set", "(", "pairs", ")", "\n", "# del rank", "\n", "", "assert", "len", "(", "neighbors", ")", "==", "num", "*", "k", "\n", "return", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.mwgm": [[77, 79], ["semi_align.mwgm_graph_tool", "semi_align.mwgm_igraph"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.mwgm_graph_tool", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.mwgm_igraph"], ["", "def", "mwgm", "(", "pairs", ",", "sim_mat", ",", "func", ")", ":", "\n", "    ", "return", "func", "(", "pairs", ",", "sim_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.mwgm_graph_tool": [[81, 109], ["Graph", "Graph.new_edge_property", "dict", "dict", "list", "print", "max_cardinality_matching", "[].tolist", "set", "isinstance", "list", "dict.get", "dict.get", "Graph.add_edge", "list.append", "set.add", "dict.keys", "Graph.add_vertex", "dict.keys", "Graph.add_vertex", "Graph.edge", "numpy.where", "max_cardinality_matching.get_array"], "function", ["None"], ["", "def", "mwgm_graph_tool", "(", "pairs", ",", "sim_mat", ")", ":", "\n", "    ", "from", "graph_tool", ".", "all", "import", "Graph", ",", "max_cardinality_matching", "# necessary", "\n", "if", "not", "isinstance", "(", "pairs", ",", "list", ")", ":", "\n", "        ", "pairs", "=", "list", "(", "pairs", ")", "\n", "", "g", "=", "Graph", "(", ")", "\n", "weight_map", "=", "g", ".", "new_edge_property", "(", "\"float\"", ")", "\n", "nodes_dict1", "=", "dict", "(", ")", "\n", "nodes_dict2", "=", "dict", "(", ")", "\n", "edges", "=", "list", "(", ")", "\n", "for", "x", ",", "y", "in", "pairs", ":", "\n", "        ", "if", "x", "not", "in", "nodes_dict1", ".", "keys", "(", ")", ":", "\n", "            ", "n1", "=", "g", ".", "add_vertex", "(", ")", "\n", "nodes_dict1", "[", "x", "]", "=", "n1", "\n", "", "if", "y", "not", "in", "nodes_dict2", ".", "keys", "(", ")", ":", "\n", "            ", "n2", "=", "g", ".", "add_vertex", "(", ")", "\n", "nodes_dict2", "[", "y", "]", "=", "n2", "\n", "", "n1", "=", "nodes_dict1", ".", "get", "(", "x", ")", "\n", "n2", "=", "nodes_dict2", ".", "get", "(", "y", ")", "\n", "e", "=", "g", ".", "add_edge", "(", "n1", ",", "n2", ")", "\n", "edges", ".", "append", "(", "e", ")", "\n", "weight_map", "[", "g", ".", "edge", "(", "n1", ",", "n2", ")", "]", "=", "sim_mat", "[", "x", ",", "y", "]", "\n", "", "print", "(", "\"graph via graph_tool\"", ",", "g", ")", "\n", "res", "=", "max_cardinality_matching", "(", "g", ",", "heuristic", "=", "True", ",", "weight", "=", "weight_map", ",", "minimize", "=", "False", ")", "\n", "edge_index", "=", "np", ".", "where", "(", "res", ".", "get_array", "(", ")", "==", "1", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "matched_pairs", "=", "set", "(", ")", "\n", "for", "index", "in", "edge_index", ":", "\n", "        ", "matched_pairs", ".", "add", "(", "pairs", "[", "index", "]", ")", "\n", "", "return", "matched_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.mwgm_igraph": [[111, 137], ["set", "set", "len", "ig.Graph", "ig.Graph.maximum_bipartite_matching", "print", "set", "isinstance", "list", "dict", "dict", "len", "len", "len", "len", "len", "set.add", "len", "len", "len", "leda_graph.maximum_bipartite_matching.edges"], "function", ["None"], ["", "def", "mwgm_igraph", "(", "pairs", ",", "sim_mat", ")", ":", "\n", "    ", "import", "igraph", "as", "ig", "\n", "if", "not", "isinstance", "(", "pairs", ",", "list", ")", ":", "\n", "        ", "pairs", "=", "list", "(", "pairs", ")", "\n", "", "index_id_dic1", ",", "index_id_dic2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "index1", "=", "set", "(", "[", "pair", "[", "0", "]", "for", "pair", "in", "pairs", "]", ")", "\n", "index2", "=", "set", "(", "[", "pair", "[", "1", "]", "for", "pair", "in", "pairs", "]", ")", "\n", "for", "index", "in", "index1", ":", "\n", "        ", "index_id_dic1", "[", "index", "]", "=", "len", "(", "index_id_dic1", ")", "\n", "", "off", "=", "len", "(", "index_id_dic1", ")", "\n", "for", "index", "in", "index2", ":", "\n", "        ", "index_id_dic2", "[", "index", "]", "=", "len", "(", "index_id_dic2", ")", "+", "off", "\n", "", "assert", "len", "(", "index1", ")", "==", "len", "(", "index_id_dic1", ")", "\n", "assert", "len", "(", "index2", ")", "==", "len", "(", "index_id_dic2", ")", "\n", "edge_list", "=", "[", "(", "index_id_dic1", "[", "x", "]", ",", "index_id_dic2", "[", "y", "]", ")", "for", "(", "x", ",", "y", ")", "in", "pairs", "]", "\n", "weight_list", "=", "[", "sim_mat", "[", "x", ",", "y", "]", "for", "(", "x", ",", "y", ")", "in", "pairs", "]", "\n", "leda_graph", "=", "ig", ".", "Graph", "(", "edge_list", ")", "\n", "leda_graph", ".", "vs", "[", "\"type\"", "]", "=", "[", "0", "]", "*", "len", "(", "index1", ")", "+", "[", "1", "]", "*", "len", "(", "index2", ")", "\n", "leda_graph", ".", "es", "[", "'weight'", "]", "=", "weight_list", "\n", "res", "=", "leda_graph", ".", "maximum_bipartite_matching", "(", "weights", "=", "leda_graph", ".", "es", "[", "'weight'", "]", ")", "\n", "print", "(", "res", ")", "\n", "selected_index", "=", "[", "e", ".", "index", "for", "e", "in", "res", ".", "edges", "(", ")", "]", "\n", "matched_pairs", "=", "set", "(", ")", "\n", "for", "index", "in", "selected_index", ":", "\n", "        ", "matched_pairs", ".", "add", "(", "pairs", "[", "index", "]", ")", "\n", "", "return", "matched_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.semi_align.check_new_alignment": [[139, 148], ["print", "print", "len", "len", "len"], "function", ["None"], ["", "def", "check_new_alignment", "(", "aligned_pairs", ",", "context", "=", "\"check align\"", ")", ":", "\n", "    ", "if", "aligned_pairs", "is", "None", "or", "len", "(", "aligned_pairs", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"{}, empty aligned pairs\"", ".", "format", "(", "context", ")", ")", "\n", "return", "\n", "", "num", "=", "0", "\n", "for", "x", ",", "y", "in", "aligned_pairs", ":", "\n", "        ", "if", "x", "==", "y", ":", "\n", "            ", "num", "+=", "1", "\n", "", "", "print", "(", "\"{}, right align: {}/{}={:.3f}\"", ".", "format", "(", "context", ",", "num", ",", "len", "(", "aligned_pairs", ")", ",", "num", "/", "len", "(", "aligned_pairs", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_input": [[9, 25], ["input.read_triples", "input.read_triples", "align.kg.KG", "align.kg.KG", "len", "len", "print", "print", "print", "input.read_references", "print", "input.read_references", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_references", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_references"], ["def", "read_input", "(", "folder", ")", ":", "\n", "    ", "triples_set1", "=", "read_triples", "(", "folder", "+", "'triples_1'", ")", "\n", "triples_set2", "=", "read_triples", "(", "folder", "+", "'triples_2'", ")", "\n", "triples1", "=", "KG", "(", "triples_set1", ")", "\n", "triples2", "=", "KG", "(", "triples_set2", ")", "\n", "total_ent_num", "=", "len", "(", "triples1", ".", "ents", "|", "triples2", ".", "ents", ")", "\n", "total_rel_num", "=", "len", "(", "triples1", ".", "props", "|", "triples2", ".", "props", ")", "\n", "total_triples_num", "=", "len", "(", "triples1", ".", "triple_list", ")", "+", "len", "(", "triples2", ".", "triple_list", ")", "\n", "print", "(", "'total ents:'", ",", "total_ent_num", ")", "\n", "print", "(", "'total rels:'", ",", "len", "(", "triples1", ".", "props", ")", ",", "len", "(", "triples2", ".", "props", ")", ",", "total_rel_num", ")", "\n", "print", "(", "'total triples: %d + %d = %d'", "%", "(", "len", "(", "triples1", ".", "triples", ")", ",", "len", "(", "triples2", ".", "triples", ")", ",", "total_triples_num", ")", ")", "\n", "ref_ent1", ",", "ref_ent2", "=", "read_references", "(", "folder", "+", "'ref_ent_ids'", ")", "\n", "assert", "len", "(", "ref_ent1", ")", "==", "len", "(", "ref_ent2", ")", "\n", "print", "(", "\"To aligned entities:\"", ",", "len", "(", "ref_ent1", ")", ")", "\n", "sup_ent1", ",", "sup_ent2", "=", "read_references", "(", "folder", "+", "'sup_ent_ids'", ")", "\n", "return", "triples1", ",", "triples2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "total_triples_num", ",", "total_ent_num", ",", "total_rel_num", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_dbp15k_input": [[27, 51], ["input.read_triples", "input.read_triples", "align.kg.KG", "align.kg.KG", "len", "len", "print", "print", "print", "os.path.exists", "print", "os.path.exists", "input.get_id_mapping", "len", "len", "len", "len", "input.read_references", "input.read_references", "len", "len", "len", "input.read_references", "input.read_references", "len", "len"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.get_id_mapping", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_references", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_references", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_references", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_references"], ["", "def", "read_dbp15k_input", "(", "folder", ")", ":", "\n", "    ", "triples_set1", "=", "read_triples", "(", "folder", "+", "'triples_1'", ")", "\n", "triples_set2", "=", "read_triples", "(", "folder", "+", "'triples_2'", ")", "\n", "kg1", "=", "KG", "(", "triples_set1", ")", "\n", "kg2", "=", "KG", "(", "triples_set2", ")", "\n", "total_ent_num", "=", "len", "(", "kg1", ".", "ents", "|", "kg2", ".", "ents", ")", "\n", "total_rel_num", "=", "len", "(", "kg1", ".", "props", "|", "kg2", ".", "props", ")", "\n", "total_triples_num", "=", "len", "(", "kg1", ".", "triple_list", ")", "+", "len", "(", "kg2", ".", "triple_list", ")", "\n", "print", "(", "'total ents:'", ",", "total_ent_num", ")", "\n", "print", "(", "'total rels:'", ",", "len", "(", "kg1", ".", "props", ")", ",", "len", "(", "kg2", ".", "props", ")", ",", "total_rel_num", ")", "\n", "print", "(", "'total triples: %d + %d = %d'", "%", "(", "len", "(", "kg1", ".", "triples", ")", ",", "len", "(", "kg2", ".", "triples", ")", ",", "total_triples_num", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "folder", "+", "'ref_pairs'", ")", ":", "\n", "        ", "ref_ent1", ",", "ref_ent2", "=", "read_references", "(", "folder", "+", "'ref_pairs'", ")", "\n", "", "else", ":", "\n", "        ", "ref_ent1", ",", "ref_ent2", "=", "read_references", "(", "folder", "+", "'ref_ent_ids'", ")", "\n", "", "assert", "len", "(", "ref_ent1", ")", "==", "len", "(", "ref_ent2", ")", "\n", "print", "(", "\"To aligned entities:\"", ",", "len", "(", "ref_ent1", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "folder", "+", "'sup_pairs'", ")", ":", "\n", "        ", "sup_ent1", ",", "sup_ent2", "=", "read_references", "(", "folder", "+", "'sup_pairs'", ")", "\n", "", "else", ":", "\n", "        ", "sup_ent1", ",", "sup_ent2", "=", "read_references", "(", "folder", "+", "'sup_ent_ids'", ")", "\n", "#     ****************************id mapping*************************", "\n", "", "rel_id_mapping", "=", "get_id_mapping", "(", "folder", ")", "\n", "return", "kg1", ",", "kg2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "total_triples_num", ",", "total_ent_num", ",", "total_rel_num", ",", "rel_id_mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_triples": [[53, 65], ["set", "open", "f.close", "line.strip().split", "int", "int", "int", "set.add", "len", "line.strip"], "function", ["None"], ["", "def", "read_triples", "(", "file", ")", ":", "\n", "    ", "triples", "=", "set", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "3", "\n", "h", "=", "int", "(", "params", "[", "0", "]", ")", "\n", "r", "=", "int", "(", "params", "[", "1", "]", ")", "\n", "t", "=", "int", "(", "params", "[", "2", "]", ")", "\n", "triples", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_references": [[67, 80], ["list", "list", "open", "f.close", "line.strip().split", "int", "int", "ref1.append", "ref2.append", "len", "len", "len", "line.strip"], "function", ["None"], ["", "def", "read_references", "(", "file", ")", ":", "\n", "    ", "ref1", ",", "ref2", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "e1", "=", "int", "(", "params", "[", "0", "]", ")", "\n", "e2", "=", "int", "(", "params", "[", "1", "]", ")", "\n", "ref1", ".", "append", "(", "e1", ")", "\n", "ref2", ".", "append", "(", "e2", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "assert", "len", "(", "ref1", ")", "==", "len", "(", "ref2", ")", "\n", "", "return", "ref1", ",", "ref2", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.div_list": [[82, 98], ["len", "range", "ls_return.append", "ls_return.append"], "function", ["None"], ["", "def", "div_list", "(", "ls", ",", "n", ")", ":", "\n", "    ", "ls_len", "=", "len", "(", "ls", ")", "\n", "if", "n", "<=", "0", "or", "0", "==", "ls_len", ":", "\n", "        ", "return", "[", "ls", "]", "\n", "", "if", "n", ">", "ls_len", ":", "\n", "        ", "return", "[", "ls", "]", "\n", "", "elif", "n", "==", "ls_len", ":", "\n", "        ", "return", "[", "[", "i", "]", "for", "i", "in", "ls", "]", "\n", "", "else", ":", "\n", "        ", "j", "=", "ls_len", "//", "n", "\n", "k", "=", "ls_len", "%", "n", "\n", "ls_return", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "(", "n", "-", "1", ")", "*", "j", ",", "j", ")", ":", "\n", "            ", "ls_return", ".", "append", "(", "ls", "[", "i", ":", "i", "+", "j", "]", ")", "\n", "", "ls_return", ".", "append", "(", "ls", "[", "(", "n", "-", "1", ")", "*", "j", ":", "]", ")", "\n", "return", "ls_return", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.triples2ht_set": [[100, 106], ["set", "print", "set.add", "len"], "function", ["None"], ["", "", "def", "triples2ht_set", "(", "triples", ")", ":", "\n", "    ", "ht_set", "=", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "        ", "ht_set", ".", "add", "(", "(", "h", ",", "t", ")", ")", "\n", "", "print", "(", "\"the number of ht: {}\"", ".", "format", "(", "len", "(", "ht_set", ")", ")", ")", "\n", "return", "ht_set", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.merge_dic": [[108, 110], ["None"], "function", ["None"], ["", "def", "merge_dic", "(", "dic1", ",", "dic2", ")", ":", "\n", "    ", "return", "{", "**", "dic1", ",", "**", "dic2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.generate_adjacency_mat": [[112, 122], ["numpy.mat", "range", "print", "print", "numpy.zeros", "input.triples2ht_set", "input.triples2ht_set", "numpy.count_nonzero", "len", "sup_ents.index"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.zeros", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.triples2ht_set", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.triples2ht_set"], ["", "def", "generate_adjacency_mat", "(", "triples1", ",", "triples2", ",", "ent_num", ",", "sup_ents", ")", ":", "\n", "    ", "adj_mat", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "(", "ent_num", ",", "len", "(", "sup_ents", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "ht_set", "=", "triples2ht_set", "(", "triples1", ")", "|", "triples2ht_set", "(", "triples2", ")", "\n", "for", "i", "in", "range", "(", "ent_num", ")", ":", "\n", "        ", "for", "j", "in", "sup_ents", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "in", "ht_set", ":", "\n", "                ", "adj_mat", "[", "i", ",", "sup_ents", ".", "index", "(", "j", ")", "]", "=", "1", "\n", "", "", "", "print", "(", "\"shape of adj_mat: {}\"", ".", "format", "(", "adj_mat", ".", "shape", ")", ")", "\n", "print", "(", "\"the number of 1 in adjacency matrix: {}\"", ".", "format", "(", "np", ".", "count_nonzero", "(", "adj_mat", ")", ")", ")", "\n", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.generate_adj_input_mat": [[124, 129], ["numpy.random.randn", "numpy.matmul", "print"], "function", ["None"], ["", "def", "generate_adj_input_mat", "(", "adj_mat", ",", "d", ")", ":", "\n", "    ", "W", "=", "np", ".", "random", ".", "randn", "(", "adj_mat", ".", "shape", "[", "1", "]", ",", "d", ")", "\n", "M", "=", "np", ".", "matmul", "(", "adj_mat", ",", "W", ")", "\n", "print", "(", "\"shape of input adj_mat: {}\"", ".", "format", "(", "M", ".", "shape", ")", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.generate_ent_attrs_sum": [[131, 145], ["time.time", "range", "print", "print", "list", "numpy.sum", "len", "numpy.row_stack", "ent_attrs1.get", "ent_attrs2.get", "time.time", "set", "set"], "function", ["None"], ["", "def", "generate_ent_attrs_sum", "(", "ent_num", ",", "ent_attrs1", ",", "ent_attrs2", ",", "attr_embeddings", ")", ":", "\n", "    ", "t1", "=", "time", ".", "time", "(", ")", "\n", "ent_attrs_embeddings", "=", "None", "\n", "for", "i", "in", "range", "(", "ent_num", ")", ":", "\n", "        ", "attrs_index", "=", "list", "(", "ent_attrs1", ".", "get", "(", "i", ",", "set", "(", ")", ")", "|", "ent_attrs2", ".", "get", "(", "i", ",", "set", "(", ")", ")", ")", "\n", "assert", "len", "(", "attrs_index", ")", ">", "0", "\n", "attrs_embeds", "=", "np", ".", "sum", "(", "attr_embeddings", "[", "attrs_index", ",", "]", ",", "axis", "=", "0", ")", "\n", "if", "ent_attrs_embeddings", "is", "None", ":", "\n", "            ", "ent_attrs_embeddings", "=", "attrs_embeds", "\n", "", "else", ":", "\n", "            ", "ent_attrs_embeddings", "=", "np", ".", "row_stack", "(", "(", "ent_attrs_embeddings", ",", "attrs_embeds", ")", ")", "\n", "", "", "print", "(", "\"shape of ent_attr_embeds: {}\"", ".", "format", "(", "ent_attrs_embeddings", ".", "shape", ")", ")", "\n", "print", "(", "\"generating ent features costs: {:.3f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "return", "ent_attrs_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.get_id_mapping": [[147, 195], ["dict", "dict", "dict", "os.path.exists", "open", "f.close", "open", "f.close", "folder.split", "dict.values", "dict.values", "line.strip().split", "int", "int", "line.strip().split", "int", "int", "open", "f.close", "open", "f.close", "folder.split", "line.strip().split", "int", "line.strip().split", "int", "dict.keys", "int", "dict.keys", "int", "line.strip", "line.strip", "dict.keys", "int", "dict.keys", "int", "line.strip", "line.strip"], "function", ["None"], ["", "def", "get_id_mapping", "(", "folder", ")", ":", "\n", "    ", "rel_ids_1", "=", "folder", "+", "\"rel_ids_1\"", "\n", "rel_ids_2", "=", "folder", "+", "\"rel_ids_2\"", "\n", "kg1_id_dict", "=", "dict", "(", ")", "\n", "kg2_id_dict", "=", "dict", "(", ")", "\n", "with", "open", "(", "rel_ids_1", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "kg1_id_dict", "[", "params", "[", "1", "]", "]", "=", "int", "(", ")", "\n", "kg1_id_dict", "[", "params", "[", "1", "]", "]", "=", "int", "(", "params", "[", "0", "]", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "with", "open", "(", "rel_ids_2", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "kg2_id_dict", "[", "params", "[", "1", "]", "]", "=", "int", "(", ")", "\n", "kg2_id_dict", "[", "params", "[", "1", "]", "]", "=", "int", "(", "params", "[", "0", "]", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "rt_dict", "=", "dict", "(", ")", "\n", "fold", "=", "folder", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "new_dir", "=", "folder", ".", "split", "(", "\"mtranse\"", ")", "[", "0", "]", "+", "fold", "+", "\"/\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "new_dir", ")", ":", "\n", "        ", "new_ids_1", "=", "new_dir", "+", "\"rel_ids_1\"", "\n", "new_ids_2", "=", "new_dir", "+", "\"rel_ids_2\"", "\n", "with", "open", "(", "new_ids_1", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "params", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "kg1_id_dict", "[", "params", "[", "1", "]", "]", "not", "in", "rt_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "rt_dict", "[", "kg1_id_dict", "[", "params", "[", "1", "]", "]", "]", "=", "int", "(", ")", "\n", "", "rt_dict", "[", "kg1_id_dict", "[", "params", "[", "1", "]", "]", "]", "=", "int", "(", "params", "[", "0", "]", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "with", "open", "(", "new_ids_2", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "params", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "kg2_id_dict", "[", "params", "[", "1", "]", "]", "not", "in", "rt_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "rt_dict", "[", "kg2_id_dict", "[", "params", "[", "1", "]", "]", "]", "=", "int", "(", ")", "\n", "", "rt_dict", "[", "kg2_id_dict", "[", "params", "[", "1", "]", "]", "]", "=", "int", "(", "params", "[", "0", "]", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "value", "in", "kg1_id_dict", ".", "values", "(", ")", ":", "\n", "            ", "if", "value", "not", "in", "rt_dict", ".", "keys", "(", ")", ":", "\n", "                ", "rt_dict", "[", "value", "]", "=", "int", "(", ")", "\n", "rt_dict", "[", "value", "]", "=", "value", "\n", "", "", "for", "value", "in", "kg2_id_dict", ".", "values", "(", ")", ":", "\n", "            ", "if", "value", "not", "in", "rt_dict", ".", "keys", "(", ")", ":", "\n", "                ", "rt_dict", "[", "value", "]", "=", "int", "(", ")", "\n", "rt_dict", "[", "value", "]", "=", "value", "\n", "\n", "", "", "", "return", "rt_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.sample.generate_neighbours": [[33, 42], ["align.util.task_divide", "align.util.task_divide", "dict", "range", "numpy.array", "numpy.array", "len", "sample.find_neighbours", "align.util.merge_dic", "range", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.task_divide", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.task_divide", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.sample.find_neighbours", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.merge_dic"], ["def", "generate_neighbours", "(", "entity_embeds1", ",", "entity_list1", ",", "entity_embeds2", ",", "entity_list2", ",", "neighbors_num", ",", "threads_num", "=", "4", ")", ":", "\n", "    ", "ent_frags", "=", "task_divide", "(", "np", ".", "array", "(", "entity_list1", ")", ",", "threads_num", ")", "\n", "ent_frag_indexes", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "len", "(", "entity_list1", ")", ")", ")", ",", "threads_num", ")", "\n", "dic", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ent_frags", ")", ")", ":", "\n", "        ", "res", "=", "find_neighbours", "(", "ent_frags", "[", "i", "]", ",", "entity_embeds1", "[", "ent_frag_indexes", "[", "i", "]", ",", ":", "]", ",", "np", ".", "array", "(", "entity_list2", ")", ",", "\n", "entity_embeds2", ",", "neighbors_num", ")", "\n", "dic", "=", "merge_dic", "(", "dic", ",", "res", ")", "\n", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.sample.find_neighbours": [[44, 54], ["dict", "numpy.matmul", "range", "numpy.argpartition", "entity_list2[].tolist"], "function", ["None"], ["", "def", "find_neighbours", "(", "frags", ",", "sub_embed1", ",", "entity_list2", ",", "embed2", ",", "k", ")", ":", "\n", "    ", "dic", "=", "dict", "(", ")", "\n", "sim_mat", "=", "np", ".", "matmul", "(", "sub_embed1", ",", "embed2", ".", "T", ")", "\n", "for", "i", "in", "range", "(", "sim_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "sort_index", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "k", ")", "\n", "neighbors_index", "=", "sort_index", "[", "0", ":", "k", "]", "\n", "neighbors", "=", "entity_list2", "[", "neighbors_index", "]", ".", "tolist", "(", ")", "\n", "dic", "[", "frags", "[", "i", "]", "]", "=", "neighbors", "\n", "", "del", "sim_mat", "\n", "return", "dic", "\n", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG.__init__": [[5, 34], ["set", "list", "len", "set", "set", "set", "print", "print", "print", "list", "list", "kg.KG.prop_list.sort", "kg.KG.ent_list.sort", "kg.KG._generate_related_ents", "kg.KG._generate_triple_dict", "kg.KG._generate_ht", "kg.KG.__generate_weight", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG._generate_related_ents", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG._generate_triple_dict", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG._generate_ht", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG.__generate_weight"], ["    ", "def", "__init__", "(", "self", ",", "triples", ",", "ori_triples", "=", "None", ")", ":", "\n", "        ", "self", ".", "triples", "=", "set", "(", "triples", ")", "\n", "self", ".", "triple_list", "=", "list", "(", "self", ".", "triples", ")", "\n", "self", ".", "triples_num", "=", "len", "(", "self", ".", "triples", ")", "\n", "\n", "self", ".", "heads", "=", "set", "(", "[", "triple", "[", "0", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "props", "=", "set", "(", "[", "triple", "[", "1", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "tails", "=", "set", "(", "[", "triple", "[", "2", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "ents", "=", "self", ".", "heads", "|", "self", ".", "tails", "\n", "\n", "print", "(", "\"triples num\"", ",", "self", ".", "triples_num", ")", "\n", "\n", "print", "(", "\"head ent num\"", ",", "len", "(", "self", ".", "heads", ")", ")", "\n", "print", "(", "\"total ent num\"", ",", "len", "(", "self", ".", "ents", ")", ")", "\n", "\n", "self", ".", "prop_list", "=", "list", "(", "self", ".", "props", ")", "\n", "self", ".", "ent_list", "=", "list", "(", "self", ".", "ents", ")", "\n", "self", ".", "prop_list", ".", "sort", "(", ")", "\n", "self", ".", "ent_list", ".", "sort", "(", ")", "\n", "\n", "if", "ori_triples", "is", "None", ":", "\n", "            ", "self", ".", "ori_triples", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "ori_triples", "=", "set", "(", "ori_triples", ")", "\n", "\n", "", "self", ".", "_generate_related_ents", "(", ")", "\n", "self", ".", "_generate_triple_dict", "(", ")", "\n", "self", ".", "_generate_ht", "(", ")", "\n", "self", ".", "__generate_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG._generate_related_ents": [[35, 46], ["dict", "dict", "kg.KG.out_related_ents_dict.get", "kg.KG.add", "kg.KG.in_related_ents_dict.get", "kg.KG.add", "set", "set"], "methods", ["None"], ["", "def", "_generate_related_ents", "(", "self", ")", ":", "\n", "        ", "self", ".", "out_related_ents_dict", "=", "dict", "(", ")", "\n", "self", ".", "in_related_ents_dict", "=", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triple_list", ":", "\n", "            ", "out_related_ents", "=", "self", ".", "out_related_ents_dict", ".", "get", "(", "h", ",", "set", "(", ")", ")", "\n", "out_related_ents", ".", "add", "(", "t", ")", "\n", "self", ".", "out_related_ents_dict", "[", "h", "]", "=", "out_related_ents", "\n", "\n", "in_related_ents", "=", "self", ".", "in_related_ents_dict", ".", "get", "(", "t", ",", "set", "(", ")", ")", "\n", "in_related_ents", ".", "add", "(", "h", ")", "\n", "self", ".", "in_related_ents_dict", "[", "t", "]", "=", "in_related_ents", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG._generate_triple_dict": [[47, 56], ["dict", "dict", "kg.KG.rt_dict.get", "kg.KG.add", "kg.KG.hr_dict.get", "kg.KG.add", "set", "set"], "methods", ["None"], ["", "", "def", "_generate_triple_dict", "(", "self", ")", ":", "\n", "        ", "self", ".", "rt_dict", ",", "self", ".", "hr_dict", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triple_list", ":", "\n", "            ", "rt_set", "=", "self", ".", "rt_dict", ".", "get", "(", "h", ",", "set", "(", ")", ")", "\n", "rt_set", ".", "add", "(", "(", "r", ",", "t", ")", ")", "\n", "self", ".", "rt_dict", "[", "h", "]", "=", "rt_set", "\n", "hr_set", "=", "self", ".", "hr_dict", ".", "get", "(", "t", ",", "set", "(", ")", ")", "\n", "hr_set", ".", "add", "(", "(", "h", ",", "r", ")", ")", "\n", "self", ".", "hr_dict", "[", "t", "]", "=", "hr_set", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG._generate_ht": [[57, 61], ["set", "kg.KG.ht.add"], "methods", ["None"], ["", "", "def", "_generate_ht", "(", "self", ")", ":", "\n", "        ", "self", ".", "ht", "=", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "self", ".", "ht", ".", "add", "(", "(", "h", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.kg.KG.__generate_weight": [[62, 82], ["dict", "list", "list", "math.ceil", "print", "print", "kg.KG.weighted_triples.append", "len", "len", "kg.KG.additional_triples.append", "dict.get", "dict.get"], "methods", ["None"], ["", "", "def", "__generate_weight", "(", "self", ")", ":", "\n", "        ", "triple_num", "=", "dict", "(", ")", "\n", "n", "=", "0", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "if", "t", "in", "self", ".", "heads", ":", "\n", "                ", "n", "=", "n", "+", "1", "\n", "triple_num", "[", "h", "]", "=", "triple_num", ".", "get", "(", "h", ",", "0", ")", "+", "1", "\n", "triple_num", "[", "t", "]", "=", "triple_num", ".", "get", "(", "t", ",", "0", ")", "+", "1", "\n", "", "", "self", ".", "weighted_triples", "=", "list", "(", ")", "\n", "self", ".", "additional_triples", "=", "list", "(", ")", "\n", "ave", "=", "math", ".", "ceil", "(", "n", "/", "len", "(", "self", ".", "heads", ")", ")", "\n", "print", "(", "\"ave outs:\"", ",", "ave", ")", "\n", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "w", "=", "1", "\n", "if", "t", "in", "self", ".", "heads", "and", "triple_num", "[", "h", "]", "<=", "ave", ":", "\n", "                ", "w", "=", "2.0", "\n", "self", ".", "additional_triples", ".", "append", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "self", ".", "weighted_triples", ".", "append", "(", "(", "h", ",", "r", ",", "t", ",", "w", ")", ")", "\n", "", "print", "(", "\"additional triples:\"", ",", "len", "(", "self", ".", "additional_triples", ")", ")", "\n", "# self.train_triples", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.greedy_alignment": [[11, 83], ["time.time", "test.sim", "range", "gc.collect", "set", "list", "test.task_divide", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "test.calculate_rank", "len", "len", "round", "time.time", "len", "numpy.array", "list.append", "rest.get", "numpy.array", "list", "numpy.array", "print", "print", "print", "print", "range", "len", "multiprocessing.Pool.apply_async", "range"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.sim", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.task_divide", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.calculate_rank"], ["def", "greedy_alignment", "(", "embed1", ",", "embed2", ",", "top_k", ",", "nums_threads", ",", "metric", ",", "normalize", ",", "csls_k", ",", "accurate", ")", ":", "\n", "    ", "\"\"\"\n    Search align with greedy strategy.\n\n    Parameters\n    ----------\n    embed1 : matrix_like\n        An embedding matrix of size n1*d, where n1 is the number of embeddings and d is the dimension.\n    embed2 : matrix_like\n        An embedding matrix of size n2*d, where n2 is the number of embeddings and d is the dimension.\n    top_k : list of integers\n        Hits@k metrics for evaluating results.\n    nums_threads : int\n        The number of threads used to search align.\n    metric : string\n        The distance metric to use. It can be 'cosine', 'euclidean' or 'inner'.\n    normalize : bool, true or false.\n        Whether to normalize the input embeddings.\n    csls_k : int\n        K value for csls. If k > 0, enhance the similarity by csls.\n\n    Returns\n    -------\n    alignment_rest :  list, pairs of aligned entities\n    hits1 : float, hits@1 values for align results\n    mr : float, MR values for align results\n    mrr : float, MRR values for align results\n    \"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "sim_mat", "=", "sim", "(", "embed1", ",", "embed2", ",", "metric", "=", "metric", ",", "normalize", "=", "normalize", ",", "csls_k", "=", "csls_k", ")", "\n", "num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "if", "nums_threads", ">", "1", ":", "\n", "        ", "hits", "=", "[", "0", "]", "*", "len", "(", "top_k", ")", "\n", "mr", ",", "mrr", "=", "0", ",", "0", "\n", "alignment_rest", "=", "set", "(", ")", "\n", "rests", "=", "list", "(", ")", "\n", "search_tasks", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "num", ")", ")", ",", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "search_tasks", ")", ")", "\n", "for", "task", "in", "search_tasks", ":", "\n", "            ", "mat", "=", "sim_mat", "[", "task", ",", ":", "]", "\n", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "calculate_rank", ",", "(", "task", ",", "mat", ",", "top_k", ",", "accurate", ",", "num", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "rest", "in", "rests", ":", "\n", "            ", "sub_mr", ",", "sub_mrr", ",", "sub_hits", ",", "sub_hits1_rest", "=", "rest", ".", "get", "(", ")", "\n", "mr", "+=", "sub_mr", "\n", "mrr", "+=", "sub_mrr", "\n", "hits", "+=", "np", ".", "array", "(", "sub_hits", ")", "\n", "alignment_rest", "|=", "sub_hits1_rest", "\n", "", "", "else", ":", "\n", "        ", "mr", ",", "mrr", ",", "hits", ",", "alignment_rest", "=", "calculate_rank", "(", "list", "(", "range", "(", "num", ")", ")", ",", "sim_mat", ",", "top_k", ",", "accurate", ",", "num", ")", "\n", "", "assert", "len", "(", "alignment_rest", ")", "==", "num", "\n", "hits", "=", "np", ".", "array", "(", "hits", ")", "/", "num", "*", "100", "\n", "for", "i", "in", "range", "(", "len", "(", "hits", ")", ")", ":", "\n", "        ", "hits", "[", "i", "]", "=", "round", "(", "hits", "[", "i", "]", ",", "3", ")", "\n", "", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "if", "accurate", ":", "\n", "        ", "if", "csls_k", ">", "0", ":", "\n", "            ", "print", "(", "\"accurate results with csls, hits@{} = {}%, mr = {:.3f}, mrr = {:.6f}, time = {:.3f} s \"", ".", "\n", "format", "(", "top_k", ",", "hits", ",", "mr", ",", "mrr", ",", "cost", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"accurate results: hits@{} = {}%, mr = {:.3f}, mrr = {:.6f}, time = {:.3f} s \"", ".", "\n", "format", "(", "top_k", ",", "hits", ",", "mr", ",", "mrr", ",", "cost", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "csls_k", ">", "0", ":", "\n", "            ", "print", "(", "\"quick results with csls, hits@{} = {}%, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "hits", ",", "cost", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"quick results: hits@{} = {}%, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "hits", ",", "cost", ")", ")", "\n", "", "", "hits1", "=", "hits", "[", "0", "]", "\n", "del", "sim_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "alignment_rest", ",", "hits1", ",", "mr", ",", "mrr", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.arg_sort": [[85, 93], ["dict", "range", "len", "str", "str"], "function", ["None"], ["", "def", "arg_sort", "(", "idx", ",", "sim_mat", ",", "prefix1", ",", "prefix2", ")", ":", "\n", "    ", "candidates", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "idx", ")", ")", ":", "\n", "        ", "x_i", "=", "prefix1", "+", "str", "(", "idx", "[", "i", "]", ")", "\n", "rank", "=", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "y_j", "=", "[", "prefix2", "+", "str", "(", "r", ")", "for", "r", "in", "rank", "]", "\n", "candidates", "[", "x_i", "]", "=", "y_j", "\n", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.calculate_rank": [[95, 118], ["set", "range", "len", "len", "set.add", "range", "numpy.argpartition", "len", "numpy.where", "numpy.array"], "function", ["None"], ["", "def", "calculate_rank", "(", "idx", ",", "sim_mat", ",", "top_k", ",", "accurate", ",", "total_num", ")", ":", "\n", "    ", "assert", "1", "in", "top_k", "\n", "mr", "=", "0", "\n", "mrr", "=", "0", "\n", "hits", "=", "[", "0", "]", "*", "len", "(", "top_k", ")", "\n", "hits1_rest", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "idx", ")", ")", ":", "\n", "        ", "gold", "=", "idx", "[", "i", "]", "\n", "if", "accurate", ":", "\n", "            ", "rank", "=", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "", "else", ":", "\n", "            ", "rank", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "np", ".", "array", "(", "top_k", ")", "-", "1", ")", "\n", "", "hits1_rest", ".", "add", "(", "(", "gold", ",", "rank", "[", "0", "]", ")", ")", "\n", "assert", "gold", "in", "rank", "\n", "rank_index", "=", "np", ".", "where", "(", "rank", "==", "gold", ")", "[", "0", "]", "[", "0", "]", "\n", "mr", "+=", "(", "rank_index", "+", "1", ")", "\n", "mrr", "+=", "1", "/", "(", "rank_index", "+", "1", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "top_k", ")", ")", ":", "\n", "            ", "if", "rank_index", "<", "top_k", "[", "j", "]", ":", "\n", "                ", "hits", "[", "j", "]", "+=", "1", "\n", "", "", "", "mr", "/=", "total_num", "\n", "mrr", "/=", "total_num", "\n", "return", "mr", ",", "mrr", ",", "hits", ",", "hits1_rest", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.sim": [[120, 164], ["sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.matmul", "test.csls_sim", "numpy.matmul", "print", "sim_mat.astype.astype", "sklearn.metrics.pairwise.euclidean_distances", "type", "sim_mat.astype.astype", "scipy.spatial.distance.cdist", "sim_mat.astype.astype", "sim_mat.astype.astype", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.csls_sim"], ["", "def", "sim", "(", "embed1", ",", "embed2", ",", "metric", "=", "'inner'", ",", "normalize", "=", "False", ",", "csls_k", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Compute pairwise similarity between the two collections of embeddings.\n\n    Parameters\n    ----------\n    embed1 : matrix_like\n        An embedding matrix of size n1*d, where n1 is the number of embeddings and d is the dimension.\n    embed2 : matrix_like\n        An embedding matrix of size n2*d, where n2 is the number of embeddings and d is the dimension.\n    metric : str, optional, inner default.\n        The distance metric to use. It can be 'cosine', 'euclidean', 'inner'.\n    normalize : bool, optional, default false.\n        Whether to normalize the input embeddings.\n    csls_k : int, optional, 0 by default.\n        K value for csls. If k > 0, enhance the similarity by csls.\n\n    Returns\n    -------\n    sim_mat : An similarity matrix of size n1*n2.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "embed1", "=", "preprocessing", ".", "normalize", "(", "embed1", ")", "\n", "embed2", "=", "preprocessing", ".", "normalize", "(", "embed2", ")", "\n", "", "if", "metric", "==", "'inner'", ":", "\n", "        ", "sim_mat", "=", "np", ".", "matmul", "(", "embed1", ",", "embed2", ".", "T", ")", "# numpy.ndarray, float32", "\n", "", "elif", "metric", "==", "'cosine'", "and", "normalize", ":", "\n", "        ", "sim_mat", "=", "np", ".", "matmul", "(", "embed1", ",", "embed2", ".", "T", ")", "# numpy.ndarray, float32", "\n", "", "elif", "metric", "==", "'euclidean'", ":", "\n", "        ", "sim_mat", "=", "1", "-", "euclidean_distances", "(", "embed1", ",", "embed2", ")", "\n", "print", "(", "type", "(", "sim_mat", ")", ",", "sim_mat", ".", "dtype", ")", "\n", "sim_mat", "=", "sim_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "metric", "==", "'cosine'", ":", "\n", "        ", "sim_mat", "=", "1", "-", "cdist", "(", "embed1", ",", "embed2", ",", "metric", "=", "'cosine'", ")", "# numpy.ndarray, float64", "\n", "sim_mat", "=", "sim_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "metric", "==", "'manhattan'", ":", "\n", "        ", "sim_mat", "=", "1", "-", "cdist", "(", "embed1", ",", "embed2", ",", "metric", "=", "'cityblock'", ")", "\n", "sim_mat", "=", "sim_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "sim_mat", "=", "1", "-", "cdist", "(", "embed1", ",", "embed2", ",", "metric", "=", "metric", ")", "\n", "sim_mat", "=", "sim_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "csls_k", ">", "0", ":", "\n", "        ", "sim_mat", "=", "csls_sim", "(", "sim_mat", ",", "csls_k", ")", "\n", "", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.csls_sim": [[166, 186], ["test.calculate_nearest_k", "test.calculate_nearest_k"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.calculate_nearest_k", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.calculate_nearest_k"], ["", "def", "csls_sim", "(", "sim_mat", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Compute pairwise csls similarity based on the input similarity matrix.\n\n    Parameters\n    ----------\n    sim_mat : matrix-like\n        A pairwise similarity matrix.\n    k : int\n        The number of nearest neighbors.\n\n    Returns\n    -------\n    csls_sim_mat : A csls similarity matrix of n1*n2.\n    \"\"\"", "\n", "\n", "nearest_values1", "=", "calculate_nearest_k", "(", "sim_mat", ",", "k", ")", "\n", "nearest_values2", "=", "calculate_nearest_k", "(", "sim_mat", ".", "T", ",", "k", ")", "\n", "csls_sim_mat", "=", "2", "*", "sim_mat", "-", "nearest_values1", "-", "nearest_values2", ".", "T", "\n", "return", "csls_sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.calculate_nearest_k": [[188, 192], ["numpy.mean", "numpy.partition"], "function", ["None"], ["", "def", "calculate_nearest_k", "(", "sim_mat", ",", "k", ")", ":", "\n", "    ", "sorted_mat", "=", "-", "np", ".", "partition", "(", "-", "sim_mat", ",", "k", "+", "1", ",", "axis", "=", "1", ")", "# -np.sort(-sim_mat1)", "\n", "nearest_k", "=", "sorted_mat", "[", ":", ",", "0", ":", "k", "]", "\n", "return", "np", ".", "mean", "(", "nearest_k", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.csls_sim_multi_threads": [[194, 211], ["test.task_divide", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "numpy.array", "list.append", "res.get", "range", "len", "multiprocessing.Pool.apply_async", "numpy.append"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.task_divide"], ["", "def", "csls_sim_multi_threads", "(", "sim_mat", ",", "k", ",", "nums_threads", ")", ":", "\n", "    ", "tasks", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "sim_mat", ".", "shape", "[", "0", "]", ")", ")", ",", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "tasks", ")", ")", "\n", "rests", "=", "list", "(", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "calculate_nearest_k", ",", "(", "sim_mat", "[", "task", ",", ":", "]", ",", "k", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "sim_values", "=", "None", "\n", "for", "res", "in", "rests", ":", "\n", "        ", "val", "=", "res", ".", "get", "(", ")", "\n", "if", "sim_values", "is", "None", ":", "\n", "            ", "sim_values", "=", "val", "\n", "", "else", ":", "\n", "            ", "sim_values", "=", "np", ".", "append", "(", "sim_values", ",", "val", ")", "\n", "", "", "assert", "sim_values", ".", "shape", "[", "0", "]", "==", "sim_mat", ".", "shape", "[", "0", "]", "\n", "return", "sim_values", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.test.task_divide": [[213, 228], ["len", "range", "tasks.append", "tasks.append"], "function", ["None"], ["", "def", "task_divide", "(", "idx", ",", "n", ")", ":", "\n", "    ", "total", "=", "len", "(", "idx", ")", "\n", "if", "n", "<=", "0", "or", "0", "==", "total", ":", "\n", "        ", "return", "[", "idx", "]", "\n", "", "if", "n", ">", "total", ":", "\n", "        ", "return", "[", "idx", "]", "\n", "", "elif", "n", "==", "total", ":", "\n", "        ", "return", "[", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "", "else", ":", "\n", "        ", "j", "=", "total", "//", "n", "\n", "tasks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "(", "n", "-", "1", ")", "*", "j", ",", "j", ")", ":", "\n", "            ", "tasks", ".", "append", "(", "idx", "[", "i", ":", "i", "+", "j", "]", ")", "\n", "", "tasks", ".", "append", "(", "idx", "[", "(", "n", "-", "1", ")", "*", "j", ":", "]", ")", "\n", "return", "tasks", "", "", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.remove_unlinked_triples": [[7, 15], ["print", "set", "print", "list", "len", "len", "set.add"], "function", ["None"], ["def", "remove_unlinked_triples", "(", "triples", ",", "linked_ents", ")", ":", "\n", "    ", "print", "(", "\"before removing unlinked triples:\"", ",", "len", "(", "triples", ")", ")", "\n", "new_triples", "=", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "        ", "if", "h", "in", "linked_ents", "and", "t", "in", "linked_ents", ":", "\n", "            ", "new_triples", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "", "print", "(", "\"after removing unlinked triples:\"", ",", "len", "(", "new_triples", ")", ")", "\n", "return", "list", "(", "new_triples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.enhance_triples": [[17, 35], ["print", "dict", "dict", "print", "len", "len", "len", "len", "set", "set", "zip", "zip", "dict.get", "dict.get", "dict.get", "dict.get", "len", "len", "enhanced_triples2.add", "enhanced_triples1.add", "kg2.out_related_ents_dict.get", "kg1.out_related_ents_dict.get", "set", "set"], "function", ["None"], ["", "def", "enhance_triples", "(", "kg1", ",", "kg2", ",", "ents1", ",", "ents2", ")", ":", "\n", "    ", "assert", "len", "(", "ents1", ")", "==", "len", "(", "ents2", ")", "\n", "print", "(", "\"before enhanced:\"", ",", "len", "(", "kg1", ".", "triples", ")", ",", "len", "(", "kg2", ".", "triples", ")", ")", "\n", "enhanced_triples1", ",", "enhanced_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "links1", "=", "dict", "(", "zip", "(", "ents1", ",", "ents2", ")", ")", "\n", "links2", "=", "dict", "(", "zip", "(", "ents2", ",", "ents1", ")", ")", "\n", "for", "h1", ",", "r1", ",", "t1", "in", "kg1", ".", "triples", ":", "\n", "        ", "h2", "=", "links1", ".", "get", "(", "h1", ",", "None", ")", "\n", "t2", "=", "links1", ".", "get", "(", "t1", ",", "None", ")", "\n", "if", "h2", "is", "not", "None", "and", "t2", "is", "not", "None", "and", "t2", "not", "in", "kg2", ".", "out_related_ents_dict", ".", "get", "(", "h2", ",", "set", "(", ")", ")", ":", "\n", "            ", "enhanced_triples2", ".", "add", "(", "(", "h2", ",", "r1", ",", "t2", ")", ")", "\n", "", "", "for", "h2", ",", "r2", ",", "t2", "in", "kg2", ".", "triples", ":", "\n", "        ", "h1", "=", "links2", ".", "get", "(", "h2", ",", "None", ")", "\n", "t1", "=", "links2", ".", "get", "(", "t2", ",", "None", ")", "\n", "if", "h1", "is", "not", "None", "and", "t1", "is", "not", "None", "and", "t1", "not", "in", "kg1", ".", "out_related_ents_dict", ".", "get", "(", "h1", ",", "set", "(", ")", ")", ":", "\n", "            ", "enhanced_triples1", ".", "add", "(", "(", "h1", ",", "r2", ",", "t1", ")", ")", "\n", "", "", "print", "(", "\"after enhanced:\"", ",", "len", "(", "enhanced_triples1", ")", ",", "len", "(", "enhanced_triples2", ")", ")", "\n", "return", "enhanced_triples1", ",", "enhanced_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_3hop_triples": [[37, 79], ["numpy.array", "pandas.DataFrame", "numpy.array", "pandas.DataFrame", "pandas.merge", "set", "dict", "pd.merge.iterrows", "print", "print", "sorted", "int", "set", "range", "print", "set", "print", "preprocess.remove_unlinked_triples", "len", "len", "sorted.items", "len", "set.add", "len", "len", "set.add", "len", "set.add", "set.add", "kg.out_related_ents_dict.get", "kg.in_related_ents_dict.get", "sorted.get", "set", "set"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.remove_unlinked_triples"], ["", "def", "generate_3hop_triples", "(", "kg", ",", "two_hop_triples", ",", "linked_ents", "=", "None", ")", ":", "\n", "\n", "    ", "two_triple_df", "=", "np", ".", "array", "(", "[", "[", "tr", "[", "0", "]", ",", "tr", "[", "1", "]", ",", "tr", "[", "2", "]", "]", "for", "tr", "in", "two_hop_triples", "]", ")", "\n", "two_triple_df", "=", "pd", ".", "DataFrame", "(", "two_triple_df", ",", "columns", "=", "[", "'h'", ",", "'r'", ",", "'t'", "]", ")", "\n", "\n", "triples", "=", "kg", ".", "triples", "\n", "if", "linked_ents", "is", "not", "None", ":", "\n", "        ", "triples", "=", "remove_unlinked_triples", "(", "triples", ",", "linked_ents", ")", "\n", "", "triple_df", "=", "np", ".", "array", "(", "[", "[", "tr", "[", "0", "]", ",", "tr", "[", "1", "]", ",", "tr", "[", "2", "]", "]", "for", "tr", "in", "triples", "]", ")", "\n", "triple_df", "=", "pd", ".", "DataFrame", "(", "triple_df", ",", "columns", "=", "[", "'h'", ",", "'r'", ",", "'t'", "]", ")", "\n", "# print(triple_df)", "\n", "two_hop_triple_df", "=", "pd", ".", "merge", "(", "two_triple_df", ",", "triple_df", ",", "left_on", "=", "'t'", ",", "right_on", "=", "'h'", ")", "\n", "# print(two_hop_triple_df)", "\n", "two_step_quadruples", "=", "set", "(", ")", "\n", "relation_patterns", "=", "dict", "(", ")", "\n", "for", "index", ",", "row", "in", "two_hop_triple_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "head", "=", "row", "[", "\"h_x\"", "]", "\n", "tail", "=", "row", "[", "\"t_y\"", "]", "\n", "r_x", "=", "row", "[", "\"r_x\"", "]", "\n", "r_y", "=", "row", "[", "'r_y'", "]", "\n", "if", "tail", "not", "in", "kg", ".", "out_related_ents_dict", ".", "get", "(", "head", ",", "set", "(", ")", ")", "and", "head", "not", "in", "kg", ".", "in_related_ents_dict", ".", "get", "(", "tail", ",", "set", "(", ")", ")", ":", "\n", "            ", "relation_patterns", "[", "(", "r_x", ",", "r_y", ")", "]", "=", "relation_patterns", ".", "get", "(", "(", "r_x", ",", "r_y", ")", ",", "0", ")", "+", "1", "\n", "two_step_quadruples", ".", "add", "(", "(", "head", ",", "r_x", ",", "r_y", ",", "tail", ")", ")", "\n", "", "", "print", "(", "\"total 3-hop neighbors:\"", ",", "len", "(", "two_step_quadruples", ")", ")", "\n", "print", "(", "\"total 3-hop relation patterns:\"", ",", "len", "(", "relation_patterns", ")", ")", "\n", "relation_patterns", "=", "sorted", "(", "relation_patterns", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "p", "=", "0.05", "\n", "num", "=", "int", "(", "p", "*", "len", "(", "relation_patterns", ")", ")", "\n", "selected_patterns", "=", "set", "(", ")", "\n", "# for i in range(20, num):", "\n", "for", "i", "in", "range", "(", "5", ",", "len", "(", "relation_patterns", ")", ")", ":", "\n", "        ", "pattern", "=", "relation_patterns", "[", "i", "]", "[", "0", "]", "\n", "selected_patterns", ".", "add", "(", "pattern", ")", "\n", "", "print", "(", "\"selected relation patterns:\"", ",", "len", "(", "selected_patterns", ")", ")", "\n", "two_step_triples", "=", "set", "(", ")", "\n", "for", "head", ",", "rx", ",", "ry", ",", "tail", "in", "two_step_quadruples", ":", "\n", "        ", "if", "(", "rx", ",", "ry", ")", "in", "selected_patterns", ":", "\n", "            ", "two_step_triples", ".", "add", "(", "(", "head", ",", "0", ",", "head", ")", ")", "\n", "two_step_triples", ".", "add", "(", "(", "head", ",", "rx", "+", "ry", ",", "tail", ")", ")", "\n", "", "", "print", "(", "\"selected 3-hop neighbors:\"", ",", "len", "(", "two_step_triples", ")", ")", "\n", "return", "two_step_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_2hop_triples": [[81, 119], ["numpy.array", "pandas.DataFrame", "pandas.merge", "set", "dict", "pd.merge.iterrows", "print", "print", "sorted", "int", "set", "range", "print", "set", "print", "preprocess.remove_unlinked_triples", "len", "len", "sorted.items", "len", "set.add", "len", "len", "set.add", "len", "set.add", "set.add", "kg.out_related_ents_dict.get", "kg.in_related_ents_dict.get", "sorted.get", "set", "set"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.remove_unlinked_triples"], ["", "def", "generate_2hop_triples", "(", "kg", ",", "linked_ents", "=", "None", ")", ":", "\n", "    ", "triples", "=", "kg", ".", "triples", "\n", "if", "linked_ents", "is", "not", "None", ":", "\n", "        ", "triples", "=", "remove_unlinked_triples", "(", "triples", ",", "linked_ents", ")", "\n", "", "triple_df", "=", "np", ".", "array", "(", "[", "[", "tr", "[", "0", "]", ",", "tr", "[", "1", "]", ",", "tr", "[", "2", "]", "]", "for", "tr", "in", "triples", "]", ")", "\n", "triple_df", "=", "pd", ".", "DataFrame", "(", "triple_df", ",", "columns", "=", "[", "'h'", ",", "'r'", ",", "'t'", "]", ")", "\n", "# print(triple_df)", "\n", "two_hop_triple_df", "=", "pd", ".", "merge", "(", "triple_df", ",", "triple_df", ",", "left_on", "=", "'t'", ",", "right_on", "=", "'h'", ")", "\n", "# print(two_hop_triple_df)", "\n", "two_step_quadruples", "=", "set", "(", ")", "\n", "relation_patterns", "=", "dict", "(", ")", "\n", "for", "index", ",", "row", "in", "two_hop_triple_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "head", "=", "row", "[", "\"h_x\"", "]", "\n", "tail", "=", "row", "[", "\"t_y\"", "]", "\n", "r_x", "=", "row", "[", "\"r_x\"", "]", "\n", "r_y", "=", "row", "[", "'r_y'", "]", "\n", "if", "tail", "not", "in", "kg", ".", "out_related_ents_dict", ".", "get", "(", "head", ",", "set", "(", ")", ")", "and", "head", "not", "in", "kg", ".", "in_related_ents_dict", ".", "get", "(", "tail", ",", "set", "(", ")", ")", ":", "\n", "            ", "relation_patterns", "[", "(", "r_x", ",", "r_y", ")", "]", "=", "relation_patterns", ".", "get", "(", "(", "r_x", ",", "r_y", ")", ",", "0", ")", "+", "1", "\n", "two_step_quadruples", ".", "add", "(", "(", "head", ",", "r_x", ",", "r_y", ",", "tail", ")", ")", "\n", "", "", "print", "(", "\"total 2-hop neighbors:\"", ",", "len", "(", "two_step_quadruples", ")", ")", "\n", "print", "(", "\"total 2-hop relation patterns:\"", ",", "len", "(", "relation_patterns", ")", ")", "\n", "relation_patterns", "=", "sorted", "(", "relation_patterns", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "p", "=", "0.05", "\n", "num", "=", "int", "(", "p", "*", "len", "(", "relation_patterns", ")", ")", "\n", "selected_patterns", "=", "set", "(", ")", "\n", "# for i in range(20, num):", "\n", "for", "i", "in", "range", "(", "5", ",", "len", "(", "relation_patterns", ")", ")", ":", "\n", "        ", "pattern", "=", "relation_patterns", "[", "i", "]", "[", "0", "]", "\n", "selected_patterns", ".", "add", "(", "pattern", ")", "\n", "", "print", "(", "\"selected relation patterns:\"", ",", "len", "(", "selected_patterns", ")", ")", "\n", "two_step_triples", "=", "set", "(", ")", "\n", "for", "head", ",", "rx", ",", "ry", ",", "tail", "in", "two_step_quadruples", ":", "\n", "        ", "if", "(", "rx", ",", "ry", ")", "in", "selected_patterns", ":", "\n", "            ", "two_step_triples", ".", "add", "(", "(", "head", ",", "0", ",", "head", ")", ")", "\n", "two_step_triples", ".", "add", "(", "(", "head", ",", "rx", "+", "ry", ",", "tail", ")", ")", "\n", "", "", "print", "(", "\"selected 2-hop neighbors:\"", ",", "len", "(", "two_step_triples", ")", ")", "\n", "return", "two_step_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_2steps_path": [[121, 178], ["numpy.array", "pandas.DataFrame", "tr.join.groupby().size", "tr.join.join", "pandas.merge", "print", "two_hop_relations.groupby().size", "two_hop_relations.join().drop_duplicates().dropna", "set.sort_values", "print", "int", "print", "[].values.tolist", "set", "set", "pd.merge.iterrows", "print", "set", "len", "tr.join.groupby", "two_hop_relations.groupby", "two_hop_relations.join().drop_duplicates", "set.add", "two_hop_relations.join", "set.head"], "function", ["None"], ["", "def", "generate_2steps_path", "(", "triples", ")", ":", "\n", "    ", "tr", "=", "np", ".", "array", "(", "[", "[", "tr", "[", "0", "]", ",", "tr", "[", "2", "]", ",", "tr", "[", "1", "]", "]", "for", "tr", "in", "triples", "]", ")", "\n", "tr", "=", "pd", ".", "DataFrame", "(", "tr", ",", "columns", "=", "[", "'h'", ",", "'t'", ",", "'r'", "]", ")", "\n", "\"\"\"\n               h      t    r\n        0      21860   8837   18\n        1       2763  25362   42\n        2        158  22040  130\n    \"\"\"", "\n", "sizes", "=", "tr", ".", "groupby", "(", "[", "'h'", ",", "'r'", "]", ")", ".", "size", "(", ")", "\n", "sizes", ".", "name", "=", "'size'", "\n", "tr", "=", "tr", ".", "join", "(", "sizes", ",", "on", "=", "[", "'h'", ",", "'r'", "]", ")", "\n", "train_raw_df", "=", "tr", "[", "[", "'h'", ",", "'r'", ",", "'t'", ",", "'size'", "]", "]", "\n", "two_step_df", "=", "pd", ".", "merge", "(", "train_raw_df", ",", "train_raw_df", ",", "left_on", "=", "'t'", ",", "right_on", "=", "'h'", ")", "\n", "print", "(", "\"total 2-hop triples:\"", ",", "two_step_df", ".", "shape", "[", "0", "]", ")", "\n", "\"\"\"\n              h_x  r_x    t_x  size_x    h_y  r_y    t_y  size_y\n        0       21860   18   8837       5   8837   18   1169       7\n        1       21860   18   8837       5   8837   18  24618       7\n        2       21860   18   8837       5   8837  216   1899       1\n        3       21860   18   8837       5   8837   18    523       7\n    \"\"\"", "\n", "two_hop_relations", "=", "two_step_df", "[", "[", "'r_x'", ",", "'r_y'", "]", "]", "\n", "\"\"\"\n            r_x  r_y\n        0        18   18\n        1        18   18\n        2        18  216\n    \"\"\"", "\n", "freq", "=", "two_hop_relations", ".", "groupby", "(", "[", "'r_x'", ",", "'r_y'", "]", ")", ".", "size", "(", ")", "\n", "freq", ".", "name", "=", "'freq'", "\n", "freq_two_hop_relations", "=", "two_hop_relations", ".", "join", "(", "freq", ",", "on", "=", "[", "'r_x'", ",", "'r_y'", "]", ")", ".", "drop_duplicates", "(", ")", ".", "dropna", "(", "axis", "=", "0", ")", "\n", "freq_two_hop_relations", "=", "freq_two_hop_relations", ".", "sort_values", "(", "'freq'", ",", "axis", "=", "0", ",", "ascending", "=", "False", ")", "\n", "\"\"\"\n            r_x  r_y     freq\n        0        18   18  34163.0\n        90980   103   18  34163.0\n    \"\"\"", "\n", "# print(freq_two_hop_relations)", "\n", "total_lines", "=", "freq_two_hop_relations", ".", "shape", "[", "0", "]", "\n", "print", "(", "\"total relation paths:\"", ",", "total_lines", ")", "\n", "p", "=", "0.1", "\n", "num", "=", "int", "(", "p", "*", "total_lines", ")", "\n", "print", "(", "\"choose top\"", ",", "num", ")", "\n", "freq_two_hop_relations", "=", "freq_two_hop_relations", ".", "head", "(", "num", ")", "[", "[", "'r_x'", ",", "'r_y'", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "freq_two_hop_relations", "=", "[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "freq_two_hop_relations", "]", "\n", "freq_two_hop_relations", "=", "set", "(", "freq_two_hop_relations", ")", "\n", "two_step_triples", "=", "set", "(", ")", "\n", "for", "index", ",", "row", "in", "two_step_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "head", "=", "row", "[", "\"h_x\"", "]", "\n", "tail", "=", "row", "[", "\"t_y\"", "]", "\n", "r_x", "=", "row", "[", "\"r_x\"", "]", "\n", "r_y", "=", "row", "[", "'r_y'", "]", "\n", "if", "(", "r_x", ",", "r_y", ")", "in", "freq_two_hop_relations", ":", "\n", "            ", "two_step_triples", ".", "add", "(", "(", "head", ",", "r_x", "+", "r_y", ",", "tail", ")", ")", "\n", "", "", "print", "(", "\"new two hop neighbors:\"", ",", "len", "(", "two_step_triples", ")", ")", "\n", "return", "set", "(", "two_step_triples", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.merge_dic": [[12, 14], ["None"], "function", ["None"], ["def", "merge_dic", "(", "dic1", ",", "dic2", ")", ":", "\n", "    ", "return", "{", "**", "dic1", ",", "**", "dic2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.read_relation_triples": [[16, 34], ["print", "set", "open", "open.readlines", "set", "set", "line.strip().split", "params[].strip", "params[].strip", "params[].strip", "set.add", "entities.add", "entities.add", "relations.add", "set", "set", "set", "len", "line.strip"], "function", ["None"], ["", "def", "read_relation_triples", "(", "file_path", ")", ":", "\n", "    ", "print", "(", "\"read relation triples:\"", ",", "file_path", ")", "\n", "if", "file_path", "is", "None", ":", "\n", "        ", "return", "set", "(", ")", ",", "set", "(", ")", ",", "set", "(", ")", "\n", "", "triples", "=", "set", "(", ")", "\n", "entities", ",", "relations", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "3", "\n", "h", "=", "params", "[", "0", "]", ".", "strip", "(", ")", "\n", "r", "=", "params", "[", "1", "]", ".", "strip", "(", ")", "\n", "t", "=", "params", "[", "2", "]", ".", "strip", "(", ")", "\n", "triples", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "entities", ".", "add", "(", "h", ")", "\n", "entities", ".", "add", "(", "t", ")", "\n", "relations", ".", "add", "(", "r", ")", "\n", "", "return", "triples", ",", "entities", ",", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.read_links": [[36, 52], ["print", "list", "list", "list", "open", "open.readlines", "line.strip().split", "params[].strip", "params[].strip", "list.append", "list.append", "list.append", "len", "len", "len", "line.strip"], "function", ["None"], ["", "def", "read_links", "(", "file_path", ")", ":", "\n", "    ", "print", "(", "\"read links:\"", ",", "file_path", ")", "\n", "links", "=", "list", "(", ")", "\n", "refs", "=", "list", "(", ")", "\n", "reft", "=", "list", "(", ")", "\n", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "e1", "=", "params", "[", "0", "]", ".", "strip", "(", ")", "\n", "e2", "=", "params", "[", "1", "]", ".", "strip", "(", ")", "\n", "refs", ".", "append", "(", "e1", ")", "\n", "reft", ".", "append", "(", "e2", ")", "\n", "links", ".", "append", "(", "(", "e1", ",", "e2", ")", ")", "\n", "", "assert", "len", "(", "refs", ")", "==", "len", "(", "reft", ")", "\n", "return", "links", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.read_dict": [[54, 63], ["open", "dict", "open.readlines", "open.close", "line.strip().split", "int", "len", "line.strip"], "function", ["None"], ["", "def", "read_dict", "(", "file_path", ")", ":", "\n", "    ", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "ids", "=", "dict", "(", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "ids", "[", "params", "[", "0", "]", "]", "=", "int", "(", "params", "[", "1", "]", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.read_pair_ids": [[65, 74], ["open", "list", "open.readlines", "open.close", "line.strip().split", "list.append", "len", "line.strip", "int", "int"], "function", ["None"], ["", "def", "read_pair_ids", "(", "file_path", ")", ":", "\n", "    ", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "pairs", "=", "list", "(", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "pairs", ".", "append", "(", "(", "int", "(", "params", "[", "0", "]", ")", ",", "int", "(", "params", "[", "1", "]", ")", ")", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.pair2file": [[76, 83], ["open", "f.close", "f.write", "str", "str"], "function", ["None"], ["", "def", "pair2file", "(", "file", ",", "pairs", ")", ":", "\n", "    ", "if", "pairs", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "file", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "j", "in", "pairs", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "i", ")", "+", "'\\t'", "+", "str", "(", "j", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.dict2file": [[85, 93], ["print", "open", "dic.items", "f.close", "f.write", "str", "str"], "function", ["None"], ["", "", "def", "dict2file", "(", "file", ",", "dic", ")", ":", "\n", "    ", "if", "dic", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "file", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "j", "in", "dic", ".", "items", "(", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "i", ")", "+", "'\\t'", "+", "str", "(", "j", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "print", "(", "file", ",", "\"saved.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.line2file": [[95, 103], ["print", "open", "f.close", "f.write"], "function", ["None"], ["", "def", "line2file", "(", "file", ",", "lines", ")", ":", "\n", "    ", "if", "lines", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "file", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "f", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "print", "(", "file", ",", "\"saved.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.radio_2file": [[105, 110], ["str().replace", "os.path.exists", "os.makedirs", "str"], "function", ["None"], ["", "def", "radio_2file", "(", "radio", ",", "folder", ")", ":", "\n", "    ", "path", "=", "folder", "+", "str", "(", "radio", ")", ".", "replace", "(", "'.'", ",", "'_'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "return", "path", "+", "'/'", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.save_results": [[112, 117], ["util.pair2file", "print", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.pair2file"], ["", "def", "save_results", "(", "folder", ",", "rest_12", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "pair2file", "(", "folder", "+", "'alignment_results_12'", ",", "rest_12", ")", "\n", "print", "(", "\"Results saved!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.task_divide": [[119, 134], ["len", "range", "tasks.append", "tasks.append"], "function", ["None"], ["", "def", "task_divide", "(", "idx", ",", "n", ")", ":", "\n", "    ", "total", "=", "len", "(", "idx", ")", "\n", "if", "n", "<=", "0", "or", "0", "==", "total", ":", "\n", "        ", "return", "[", "idx", "]", "\n", "", "if", "n", ">", "total", ":", "\n", "        ", "return", "[", "idx", "]", "\n", "", "elif", "n", "==", "total", ":", "\n", "        ", "return", "[", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "", "else", ":", "\n", "        ", "j", "=", "total", "//", "n", "\n", "tasks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "(", "n", "-", "1", ")", "*", "j", ",", "j", ")", ":", "\n", "            ", "tasks", ".", "append", "(", "idx", "[", "i", ":", "i", "+", "j", "]", ")", "\n", "", "tasks", ".", "append", "(", "idx", "[", "(", "n", "-", "1", ")", "*", "j", ":", "]", ")", "\n", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.generate_out_folder": [[136, 142], ["training_data_path.strip().split", "print", "training_data_path.strip", "str", "time.strftime"], "function", ["None"], ["", "", "def", "generate_out_folder", "(", "out_folder", ",", "training_data_path", ",", "div_path", ",", "method_name", ")", ":", "\n", "    ", "params", "=", "training_data_path", ".", "strip", "(", "'/'", ")", ".", "split", "(", "'/'", ")", "\n", "path", "=", "params", "[", "-", "1", "]", "\n", "folder", "=", "out_folder", "+", "method_name", "+", "'/'", "+", "path", "+", "\"/\"", "+", "div_path", "+", "str", "(", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ")", ")", "+", "\"/\"", "\n", "print", "(", "\"results output folder:\"", ",", "folder", ")", "\n", "return", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.save_embeddings": [[144, 162], ["util.dict2file", "util.dict2file", "util.dict2file", "util.dict2file", "util.dict2file", "util.dict2file", "print", "os.path.exists", "os.makedirs", "numpy.save", "numpy.save", "numpy.save", "numpy.save"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.dict2file", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.dict2file", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.dict2file", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.dict2file", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.dict2file", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.dict2file"], ["", "def", "save_embeddings", "(", "folder", ",", "kgs", ",", "ent_embeds", ",", "rel_embeds", ",", "attr_embeds", ",", "mapping_mat", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "if", "ent_embeds", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'ent_embeds.npy'", ",", "ent_embeds", ")", "\n", "", "if", "rel_embeds", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'rel_embeds.npy'", ",", "rel_embeds", ")", "\n", "", "if", "attr_embeds", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'attr_embeds.npy'", ",", "attr_embeds", ")", "\n", "", "if", "mapping_mat", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'mapping_mat.npy'", ",", "mapping_mat", ")", "\n", "", "dict2file", "(", "folder", "+", "'kg1_ent_ids'", ",", "kgs", ".", "kg1", ".", "entities_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg2_ent_ids'", ",", "kgs", ".", "kg2", ".", "entities_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg1_rel_ids'", ",", "kgs", ".", "kg1", ".", "relations_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg2_rel_ids'", ",", "kgs", ".", "kg2", ".", "relations_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg1_attr_ids'", ",", "kgs", ".", "kg1", ".", "attributes_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg2_attr_ids'", ",", "kgs", ".", "kg2", ".", "attributes_id_dict", ")", "\n", "print", "(", "\"Embeddings saved!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.sparse_to_tuple": [[165, 180], ["isinstance", "numpy.vstack().transpose", "range", "util.sparse_to_tuple.to_tuple"], "function", ["None"], ["", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "def", "to_tuple", "(", "mx", ")", ":", "\n", "        ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "            ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "            ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "", "return", "sparse_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.normalize_adj": [[182, 190], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.preprocess_adj": [[192, 196], ["util.normalize_adj", "util.sparse_to_tuple", "scipy.eye"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.normalize_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.sparse_to_tuple"], ["", "def", "preprocess_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Preprocessing of adjacency matrix for simple GCN gnn and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.chebyshev_polynomials": [[198, 216], ["print", "util.normalize_adj", "scipy.sparse.linalg.eigen.arpack.eigsh", "list", "list.append", "list.append", "range", "util.sparse_to_tuple", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.csr_matrix", "list.append", "util.chebyshev_polynomials.chebyshev_recurrence"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.normalize_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.sparse_to_tuple"], ["", "def", "chebyshev_polynomials", "(", "adj", ",", "k", ")", ":", "\n", "    ", "\"\"\"Calculate Chebyshev polynomials up to order k. Return a list of sparse matrices (tuple representation).\"\"\"", "\n", "print", "(", "\"Calculating Chebyshev polynomials up to order {}...\"", ".", "format", "(", "k", ")", ")", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", ")", "\n", "laplacian", "=", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "-", "adj_normalized", "\n", "largest_eigval", ",", "_", "=", "eigsh", "(", "laplacian", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "scaled_laplacian", "=", "(", "2.", "/", "largest_eigval", "[", "0", "]", ")", "*", "laplacian", "-", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "t_k", "=", "list", "(", ")", "\n", "t_k", ".", "append", "(", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "t_k", ".", "append", "(", "scaled_laplacian", ")", "\n", "\n", "def", "chebyshev_recurrence", "(", "t_k_minus_one", ",", "t_k_minus_two", ",", "scaled_lap", ")", ":", "\n", "        ", "s_lap", "=", "sp", ".", "csr_matrix", "(", "scaled_lap", ",", "copy", "=", "True", ")", "\n", "return", "2", "*", "s_lap", ".", "dot", "(", "t_k_minus_one", ")", "-", "t_k_minus_two", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ",", "k", "+", "1", ")", ":", "\n", "        ", "t_k", ".", "append", "(", "chebyshev_recurrence", "(", "t_k", "[", "-", "1", "]", ",", "t_k", "[", "-", "2", "]", ",", "scaled_laplacian", ")", ")", "\n", "", "return", "sparse_to_tuple", "(", "t_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.func": [[218, 232], ["head[].add", "len"], "function", ["None"], ["", "def", "func", "(", "triples", ")", ":", "\n", "    ", "head", "=", "{", "}", "\n", "cnt", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "        ", "if", "tri", "[", "1", "]", "not", "in", "cnt", ":", "\n", "            ", "cnt", "[", "tri", "[", "1", "]", "]", "=", "1", "\n", "head", "[", "tri", "[", "1", "]", "]", "=", "{", "tri", "[", "0", "]", "}", "\n", "", "else", ":", "\n", "            ", "cnt", "[", "tri", "[", "1", "]", "]", "+=", "1", "\n", "head", "[", "tri", "[", "1", "]", "]", ".", "add", "(", "tri", "[", "0", "]", ")", "\n", "", "", "r2f", "=", "{", "}", "\n", "for", "r", "in", "cnt", ":", "\n", "        ", "r2f", "[", "r", "]", "=", "len", "(", "head", "[", "r", "]", ")", "/", "cnt", "[", "r", "]", "\n", "", "return", "r2f", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.ifunc": [[234, 248], ["tail[].add", "len"], "function", ["None"], ["", "def", "ifunc", "(", "triples", ")", ":", "\n", "    ", "tail", "=", "{", "}", "\n", "cnt", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "        ", "if", "tri", "[", "1", "]", "not", "in", "cnt", ":", "\n", "            ", "cnt", "[", "tri", "[", "1", "]", "]", "=", "1", "\n", "tail", "[", "tri", "[", "1", "]", "]", "=", "{", "tri", "[", "2", "]", "}", "\n", "", "else", ":", "\n", "            ", "cnt", "[", "tri", "[", "1", "]", "]", "+=", "1", "\n", "tail", "[", "tri", "[", "1", "]", "]", ".", "add", "(", "tri", "[", "2", "]", ")", "\n", "", "", "r2if", "=", "{", "}", "\n", "for", "r", "in", "cnt", ":", "\n", "        ", "r2if", "[", "r", "]", "=", "len", "(", "tail", "[", "r", "]", ")", "/", "cnt", "[", "r", "]", "\n", "", "return", "r2if", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.get_weighted_adj": [[250, 274], ["util.func", "util.ifunc", "numpy.array", "scipy.coo_matrix", "row.append", "col.append", "np.array.append", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.func", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.ifunc"], ["", "def", "get_weighted_adj", "(", "e", ",", "triples", ")", ":", "\n", "    ", "r2f", "=", "func", "(", "triples", ")", "\n", "r2if", "=", "ifunc", "(", "triples", ")", "\n", "M", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "        ", "if", "tri", "[", "0", "]", "==", "tri", "[", "2", "]", ":", "\n", "            ", "continue", "\n", "", "if", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "not", "in", "M", ":", "\n", "            ", "M", "[", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "]", "=", "max", "(", "r2if", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "]", "+=", "max", "(", "r2if", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "if", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "not", "in", "M", ":", "\n", "            ", "M", "[", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "]", "=", "max", "(", "r2f", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "]", "+=", "max", "(", "r2f", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "data", "=", "[", "]", "\n", "for", "key", "in", "M", ":", "\n", "        ", "row", ".", "append", "(", "key", "[", "1", "]", ")", "\n", "col", ".", "append", "(", "key", "[", "0", "]", ")", "\n", "data", ".", "append", "(", "M", "[", "key", "]", ")", "\n", "", "data", "=", "np", ".", "array", "(", "data", ",", "dtype", "=", "'float32'", ")", "\n", "return", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "e", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.generate_rel_ht": [[276, 283], ["dict", "dict.get", "rel_ht_dict.get.append", "list"], "function", ["None"], ["", "def", "generate_rel_ht", "(", "triples", ")", ":", "\n", "    ", "rel_ht_dict", "=", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "        ", "hts", "=", "rel_ht_dict", ".", "get", "(", "r", ",", "list", "(", ")", ")", "\n", "hts", ".", "append", "(", "(", "h", ",", "t", ")", ")", "\n", "rel_ht_dict", "[", "r", "]", "=", "hts", "\n", "", "return", "rel_ht_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.gcn_load_data": [[285, 326], ["input.read_dbp15k_input", "set", "preprocess.enhance_triples", "preprocess.remove_unlinked_triples", "util.generate_rel_ht", "os.path.exists", "print", "pickle.load", "util.no_weighted_adj", "print", "pickle.dump", "list", "open", "preprocess.generate_2hop_triples", "preprocess.generate_2hop_triples", "util.no_weighted_adj", "pickle.load.append", "preprocess.generate_3hop_triples", "preprocess.generate_3hop_triples", "util.no_weighted_adj", "pickle.load.append", "preprocess.generate_3hop_triples", "preprocess.generate_3hop_triples", "util.no_weighted_adj", "pickle.load.append", "open", "list"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.input.read_dbp15k_input", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.enhance_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.remove_unlinked_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.generate_rel_ht", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.no_weighted_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_2hop_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_2hop_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.no_weighted_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_3hop_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_3hop_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.no_weighted_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_3hop_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_3hop_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.no_weighted_adj"], ["", "def", "gcn_load_data", "(", "input_folder", ",", "is_two", "=", "False", ",", "is_three", "=", "False", ",", "is_four", "=", "False", ")", ":", "\n", "    ", "kg1", ",", "kg2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "total_tri_num", ",", "total_e_num", ",", "total_r_num", ",", "rel_id_mapping", "=", "read_dbp15k_input", "(", "input_folder", ")", "\n", "linked_ents", "=", "set", "(", "sup_ent1", "+", "sup_ent2", "+", "ref_ent1", "+", "ref_ent2", ")", "\n", "enhanced_triples1", ",", "enhanced_triples2", "=", "enhance_triples", "(", "kg1", ",", "kg2", ",", "sup_ent1", ",", "sup_ent2", ")", "\n", "ori_triples", "=", "kg1", ".", "triple_list", "+", "kg2", ".", "triple_list", "\n", "triples", "=", "remove_unlinked_triples", "(", "ori_triples", "+", "list", "(", "enhanced_triples1", ")", "+", "list", "(", "enhanced_triples2", ")", ",", "linked_ents", ")", "\n", "rel_ht_dict", "=", "generate_rel_ht", "(", "triples", ")", "\n", "\n", "saved_data_path", "=", "input_folder", "+", "'alinet_saved_data.pkl'", "\n", "if", "os", ".", "path", ".", "exists", "(", "saved_data_path", ")", ":", "\n", "        ", "print", "(", "'load saved adj data from'", ",", "saved_data_path", ")", "\n", "adj", "=", "pickle", ".", "load", "(", "open", "(", "saved_data_path", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "one_adj", ",", "_", "=", "no_weighted_adj", "(", "total_e_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "adj", "=", "[", "one_adj", "]", "\n", "two_hop_triples1", ",", "two_hop_triples2", "=", "None", ",", "None", "\n", "three_hop_triples1", ",", "three_hop_triples2", "=", "None", ",", "None", "\n", "if", "is_two", ":", "\n", "            ", "two_hop_triples1", "=", "generate_2hop_triples", "(", "kg1", ",", "linked_ents", "=", "linked_ents", ")", "\n", "two_hop_triples2", "=", "generate_2hop_triples", "(", "kg2", ",", "linked_ents", "=", "linked_ents", ")", "\n", "triples", "=", "two_hop_triples1", "|", "two_hop_triples2", "\n", "two_adj", ",", "_", "=", "no_weighted_adj", "(", "total_e_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "adj", ".", "append", "(", "two_adj", ")", "\n", "", "if", "is_three", ":", "\n", "            ", "three_hop_triples1", "=", "generate_3hop_triples", "(", "kg1", ",", "two_hop_triples1", ",", "linked_ents", "=", "linked_ents", ")", "\n", "three_hop_triples2", "=", "generate_3hop_triples", "(", "kg2", ",", "two_hop_triples2", ",", "linked_ents", "=", "linked_ents", ")", "\n", "triples", "=", "three_hop_triples1", "|", "three_hop_triples2", "\n", "three_adj", ",", "_", "=", "no_weighted_adj", "(", "total_e_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "adj", ".", "append", "(", "three_adj", ")", "\n", "", "if", "is_four", ":", "\n", "            ", "four_hop_triples1", "=", "generate_3hop_triples", "(", "kg1", ",", "three_hop_triples1", ",", "linked_ents", "=", "linked_ents", ")", "\n", "four_hop_triples2", "=", "generate_3hop_triples", "(", "kg2", ",", "three_hop_triples2", ",", "linked_ents", "=", "linked_ents", ")", "\n", "triples", "=", "four_hop_triples1", "|", "four_hop_triples2", "\n", "four_adj", ",", "_", "=", "no_weighted_adj", "(", "total_e_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "adj", ".", "append", "(", "four_adj", ")", "\n", "", "print", "(", "'save adj data to'", ",", "saved_data_path", ")", "\n", "pickle", ".", "dump", "(", "adj", ",", "open", "(", "saved_data_path", ",", "'wb'", ")", ")", "\n", "\n", "", "return", "adj", ",", "kg1", ",", "kg2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "total_tri_num", ",", "total_e_num", ",", "total_r_num", ",", "rel_id_mapping", ",", "rel_ht_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.diag_adj": [[328, 334], ["numpy.array().flatten", "scipy.diags", "util.sparse_to_tuple", "sp.diags.dot", "numpy.array", "numpy.isinf", "adj.sum"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.sparse_to_tuple"], ["", "def", "diag_adj", "(", "adj", ")", ":", "\n", "    ", "d", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", ".", "flatten", "(", ")", "\n", "d_inv", "=", "1.", "/", "d", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0", "\n", "d_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "return", "sparse_to_tuple", "(", "d_inv", ".", "dot", "(", "adj", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.rgcn_adj_list": [[336, 447], ["list", "dict", "numpy.zeros", "numpy.argsort", "int", "numpy.array", "numpy.transpose", "range", "numpy.ones", "scipy.coo_matrix", "util.diag_adj", "scipy.coo_matrix", "util.diag_adj", "list.append", "list.append", "range", "edge[].append", "edge[].append", "len", "numpy.array", "numpy.transpose", "numpy.hstack", "numpy.hstack", "int", "numpy.array", "numpy.transpose", "numpy.ones", "scipy.coo_matrix", "util.diag_adj", "scipy.coo_matrix", "util.diag_adj", "list.append", "list.append", "dict.keys", "list", "dict.keys", "int"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.zeros", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.diag_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.diag_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.diag_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.diag_adj"], ["", "def", "rgcn_adj_list", "(", "kg1", ",", "kg2", ",", "adj_number", ",", "all_rel_num", ",", "all_ent_num", ")", ":", "\n", "# *****************test two adj**********************************", "\n", "# adj_list = list()", "\n", "# adj1 = list()", "\n", "# adj2 = list()", "\n", "# for item in kg1.triple_list:", "\n", "#     adj1.append([item[0], item[2]])", "\n", "#     adj1.append([item[2], item[0]])", "\n", "# for item in kg2.triple_list:", "\n", "#     adj2.append([item[0], item[2]])", "\n", "#     adj2.append([item[2], item[0]])", "\n", "# kg1_pos = np.array(adj1)", "\n", "# row, col = np.transpose(kg1_pos)", "\n", "# data = np.ones(row.shape[0])", "\n", "#", "\n", "# # n_row = np.hstack((row, col))", "\n", "# # n_col = np.hstack((col, row))", "\n", "# # adj = sp.coo_matrix((data, (n_row, n_col)), shape=(all_ent_num, all_ent_num))", "\n", "#", "\n", "# adj = sp.coo_matrix((data, (row, col)), shape=(all_ent_num, all_ent_num))", "\n", "# adj = diag_adj(adj)", "\n", "# # adj = preprocess_adj(adj)", "\n", "# #", "\n", "# # adj_rev = sp.coo_matrix((data, (col, row)), shape=(all_ent_num, all_ent_num))", "\n", "# # adj_rev = diag_adj(adj_rev)", "\n", "# # adj = sp.coo_matrix((data, (row, col)), shape=(all_ent_num, all_ent_num))", "\n", "# adj_list.append(adj)", "\n", "# # adj_list.append(adj_rev)", "\n", "#", "\n", "# kg2_pos = np.array(adj2)", "\n", "# row, col = np.transpose(kg2_pos)", "\n", "# data = np.ones(row.shape[0])", "\n", "# adj = sp.coo_matrix((data, (row, col)), shape=(all_ent_num, all_ent_num))", "\n", "# # adj = preprocess_adj(adj)", "\n", "# adj = diag_adj(adj)", "\n", "# #", "\n", "# # adj_rev = sp.coo_matrix((data, (col, row)), shape=(all_ent_num, all_ent_num))", "\n", "# # adj_rev = diag_adj(adj_rev)", "\n", "# # adj = sp.coo_matrix((data, (row, col)), shape=(all_ent_num, all_ent_num))", "\n", "#", "\n", "# # data = np.ones(row.shape[0] * 2)", "\n", "# #", "\n", "# # n_row = np.hstack((row, col))", "\n", "# # n_col = np.hstack((col, row))", "\n", "# # adj = sp.coo_matrix((data, (n_row, n_col)), shape=(all_ent_num, all_ent_num))", "\n", "# # adj = diag_adj(adj)", "\n", "# adj_list.append(adj)", "\n", "# # adj_list.append(adj_rev)", "\n", "# return adj_list", "\n", "\n", "# *****************************************************************", "\n", "\n", "    ", "adj_list", "=", "list", "(", ")", "\n", "triple_list", "=", "kg1", ".", "triple_list", "+", "kg2", ".", "triple_list", "\n", "edge", "=", "dict", "(", ")", "\n", "edge_length", "=", "np", ".", "zeros", "(", "all_rel_num", ")", "\n", "\n", "for", "item", "in", "triple_list", ":", "\n", "        ", "if", "item", "[", "1", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "1", "]", "]", "=", "list", "(", ")", "\n", "", "edge", "[", "item", "[", "1", "]", "]", ".", "append", "(", "[", "item", "[", "0", "]", ",", "item", "[", "2", "]", "]", ")", "\n", "edge", "[", "item", "[", "1", "]", "]", ".", "append", "(", "[", "item", "[", "2", "]", ",", "item", "[", "0", "]", "]", ")", "\n", "edge_length", "[", "item", "[", "1", "]", "]", "+=", "2", "\n", "", "sort_edge_length", "=", "np", ".", "argsort", "(", "-", "edge_length", ")", "\n", "# ****************************\u5c06\u5269\u4f59\u7684\u5173\u7cfb\u6784\u9020\u6210\u4e00\u4e2aadj********************", "\n", "left_len", "=", "int", "(", "edge_length", "[", "sort_edge_length", "[", "adj_number", "]", "]", ")", "\n", "pos", "=", "np", ".", "array", "(", "edge", "[", "sort_edge_length", "[", "adj_number", "]", "]", ")", "\n", "first_row", ",", "first_col", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "init_row", "=", "first_row", "\n", "init_col", "=", "first_col", "\n", "# init_row = np.hstack((first_row, first_col))", "\n", "# init_col = np.hstack((first_col, first_row))", "\n", "for", "i", "in", "range", "(", "adj_number", "+", "1", ",", "len", "(", "edge", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "pos", "=", "np", ".", "array", "(", "edge", "[", "sort_edge_length", "[", "i", "]", "]", ")", "\n", "row", ",", "col", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "init_row", "=", "np", ".", "hstack", "(", "(", "init_row", ",", "row", ")", ")", "\n", "# init_row = np.hstack((init_row, col))", "\n", "init_col", "=", "np", ".", "hstack", "(", "(", "init_col", ",", "col", ")", ")", "\n", "# init_col = np.hstack((init_col, row))", "\n", "left_len", "+=", "int", "(", "edge_length", "[", "sort_edge_length", "[", "i", "]", "]", ")", "\n", "", "data", "=", "np", ".", "ones", "(", "left_len", ")", "\n", "left_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "init_row", ",", "init_col", ")", ")", ",", "shape", "=", "(", "all_ent_num", ",", "all_ent_num", ")", ")", "\n", "left_adj", "=", "diag_adj", "(", "left_adj", ")", "\n", "# left_adj = preprocess_adj(left_adj)", "\n", "left_rev_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "init_col", ",", "init_row", ")", ")", ",", "shape", "=", "(", "all_ent_num", ",", "all_ent_num", ")", ")", "\n", "left_rev_adj", "=", "diag_adj", "(", "left_rev_adj", ")", "\n", "adj_list", ".", "append", "(", "left_adj", ")", "\n", "adj_list", ".", "append", "(", "left_rev_adj", ")", "\n", "# **********************************************************************", "\n", "for", "i", "in", "range", "(", "adj_number", ")", ":", "\n", "        ", "pos", "=", "np", ".", "array", "(", "edge", "[", "sort_edge_length", "[", "i", "]", "]", ")", "\n", "row", ",", "col", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "# *********************************\u6784\u9020\u5bf9\u79f0adj*************************", "\n", "# new_row = np.hstack((row, col))", "\n", "# new_col = np.hstack((col, row))", "\n", "# data = np.ones(shape=int(edge_length[sort_edge_length[i]]*2))", "\n", "# adj = sp.coo_matrix((data, (new_row, new_col)), shape=(all_ent_num, all_ent_num))", "\n", "# adj = diag_adj(adj)", "\n", "# # adj = preprocess_adj(adj)", "\n", "# adj_list.append(adj)", "\n", "# ********************************************************************", "\n", "data", "=", "np", ".", "ones", "(", "shape", "=", "int", "(", "edge_length", "[", "sort_edge_length", "[", "i", "]", "]", ")", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "all_ent_num", ",", "all_ent_num", ")", ")", "\n", "adj", "=", "diag_adj", "(", "adj", ")", "\n", "#", "\n", "adj_rev", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "col", ",", "row", ")", ")", ",", "shape", "=", "(", "all_ent_num", ",", "all_ent_num", ")", ")", "\n", "adj_rev", "=", "diag_adj", "(", "adj_rev", ")", "\n", "# # adj = sp.coo_matrix((data, (row, col)), shape=(all_ent_num, all_ent_num))", "\n", "adj_list", ".", "append", "(", "adj", ")", "\n", "adj_list", ".", "append", "(", "adj_rev", ")", "\n", "", "return", "adj_list", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.test_no_weighted_adj": [[449, 493], ["list", "dict", "list", "list", "range", "len", "numpy.ones", "scipy.coo_matrix", "util.preprocess_adj", "list.append", "edge[].add", "edge[].add", "int", "len", "list.extend", "list.extend", "dict.keys", "set", "dict.keys", "set", "dict.keys", "list", "int", "int", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.preprocess_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones"], ["", "def", "test_no_weighted_adj", "(", "total_ent_num", ",", "kg1_triple_list", ",", "kg2_triple_list", ")", ":", "\n", "    ", "adj", "=", "list", "(", ")", "\n", "for", "triple_list", "in", "[", "kg1_triple_list", ",", "kg2_triple_list", "]", ":", "\n", "        ", "edge", "=", "dict", "(", ")", "\n", "for", "item", "in", "triple_list", ":", "\n", "            ", "if", "0", "<=", "item", "[", "0", "]", "<", "10500", ":", "\n", "                ", "item_first", "=", "item", "[", "0", "]", "\n", "", "elif", "10500", "<=", "item", "[", "0", "]", "<", "21000", ":", "\n", "                ", "item_first", "=", "item", "[", "0", "]", "-", "10500", "\n", "", "elif", "item", "[", "0", "]", "<", "25500", ":", "\n", "                ", "item_first", "=", "item", "[", "0", "]", "-", "10500", "\n", "", "else", ":", "\n", "                ", "item_first", "=", "item", "[", "0", "]", "-", "15000", "\n", "", "if", "0", "<=", "item", "[", "2", "]", "<", "10500", ":", "\n", "                ", "item_second", "=", "item", "[", "2", "]", "\n", "", "elif", "10500", "<=", "item", "[", "2", "]", "<", "21000", ":", "\n", "                ", "item_second", "=", "item", "[", "2", "]", "-", "10500", "\n", "", "elif", "item", "[", "2", "]", "<", "25500", ":", "\n", "                ", "item_second", "=", "item", "[", "2", "]", "-", "10500", "\n", "", "else", ":", "\n", "                ", "item_second", "=", "item", "[", "2", "]", "-", "15000", "\n", "", "if", "item_first", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "                ", "edge", "[", "item_first", "]", "=", "set", "(", ")", "\n", "", "if", "item_second", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "                ", "edge", "[", "item_second", "]", "=", "set", "(", ")", "\n", "", "edge", "[", "item_first", "]", ".", "add", "(", "item_second", ")", "\n", "edge", "[", "item_second", "]", ".", "add", "(", "item_first", ")", "\n", "", "row", "=", "list", "(", ")", "\n", "col", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "total_ent_num", "/", "2", ")", ")", ":", "\n", "            ", "if", "i", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "                ", "continue", "\n", "", "key", "=", "i", "\n", "value", "=", "edge", "[", "key", "]", "\n", "add_key_len", "=", "len", "(", "value", ")", "\n", "add_key", "=", "(", "key", "*", "np", ".", "ones", "(", "add_key_len", ")", ")", ".", "tolist", "(", ")", "\n", "row", ".", "extend", "(", "add_key", ")", "\n", "col", ".", "extend", "(", "list", "(", "value", ")", ")", "\n", "", "data_len", "=", "len", "(", "row", ")", "\n", "data", "=", "np", ".", "ones", "(", "data_len", ")", "\n", "one_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "int", "(", "total_ent_num", "/", "2", ")", ",", "int", "(", "total_ent_num", "/", "2", ")", ")", ")", "\n", "one_adj", "=", "preprocess_adj", "(", "one_adj", ")", "\n", "adj", ".", "append", "(", "one_adj", ")", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.no_weighted_adj": [[495, 545], ["time.time", "dict", "list", "list", "range", "len", "numpy.ones", "scipy.coo_matrix", "util.preprocess_adj", "print", "dict", "list", "list", "dict.items", "numpy.ones", "scipy.coo_matrix", "util.preprocess_adj", "print", "edge[].add", "edge[].add", "len", "list.extend", "list.extend", "len", "dict.keys", "set", "dict.keys", "set", "dict.keys", "list", "dict.keys", "set", "time.time", "time.time", "numpy.ones", "expend_edge[].add", "len", "list.append", "list.append"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.preprocess_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.preprocess_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones"], ["", "def", "no_weighted_adj", "(", "total_ent_num", ",", "triple_list", ",", "is_two_adj", "=", "False", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "edge", "=", "dict", "(", ")", "\n", "for", "item", "in", "triple_list", ":", "\n", "        ", "if", "item", "[", "0", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "0", "]", "]", "=", "set", "(", ")", "\n", "", "if", "item", "[", "2", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "2", "]", "]", "=", "set", "(", ")", "\n", "", "edge", "[", "item", "[", "0", "]", "]", ".", "add", "(", "item", "[", "2", "]", ")", "\n", "edge", "[", "item", "[", "2", "]", "]", ".", "add", "(", "item", "[", "0", "]", ")", "\n", "", "row", "=", "list", "(", ")", "\n", "col", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "total_ent_num", ")", ":", "\n", "        ", "if", "i", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "continue", "\n", "", "key", "=", "i", "\n", "value", "=", "edge", "[", "key", "]", "\n", "add_key_len", "=", "len", "(", "value", ")", "\n", "add_key", "=", "(", "key", "*", "np", ".", "ones", "(", "add_key_len", ")", ")", ".", "tolist", "(", ")", "\n", "row", ".", "extend", "(", "add_key", ")", "\n", "col", ".", "extend", "(", "list", "(", "value", ")", ")", "\n", "", "data_len", "=", "len", "(", "row", ")", "\n", "data", "=", "np", ".", "ones", "(", "data_len", ")", "\n", "one_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "total_ent_num", ",", "total_ent_num", ")", ")", "\n", "one_adj", "=", "preprocess_adj", "(", "one_adj", ")", "\n", "print", "(", "'generating one-adj costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "if", "not", "is_two_adj", ":", "\n", "        ", "return", "one_adj", ",", "None", "\n", "", "expend_edge", "=", "dict", "(", ")", "\n", "row", "=", "list", "(", ")", "\n", "col", "=", "list", "(", ")", "\n", "temp_len", "=", "0", "\n", "for", "key", ",", "values", "in", "edge", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "expend_edge", ".", "keys", "(", ")", ":", "\n", "            ", "expend_edge", "[", "key", "]", "=", "set", "(", ")", "\n", "", "for", "value", "in", "values", ":", "\n", "            ", "add_value", "=", "edge", "[", "value", "]", "\n", "for", "item", "in", "add_value", ":", "\n", "                ", "if", "item", "not", "in", "values", "and", "item", "!=", "key", ":", "\n", "                    ", "expend_edge", "[", "key", "]", ".", "add", "(", "item", ")", "\n", "no_len", "=", "len", "(", "expend_edge", "[", "key", "]", ")", "\n", "if", "temp_len", "!=", "no_len", ":", "\n", "                        ", "row", ".", "append", "(", "key", ")", "\n", "col", ".", "append", "(", "item", ")", "\n", "", "temp_len", "=", "no_len", "\n", "", "", "", "", "data", "=", "np", ".", "ones", "(", "len", "(", "row", ")", ")", "\n", "two_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "total_ent_num", ",", "total_ent_num", ")", ")", "\n", "two_adj", "=", "preprocess_adj", "(", "two_adj", ")", "\n", "print", "(", "'generating one- and two-adj costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "one_adj", ",", "two_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.temp_weighted_two_adj": [[547, 576], ["time.time", "dict", "list", "list", "range", "len", "scipy.coo_matrix", "util.preprocess_adj", "print", "print", "edge[].add", "edge[].add", "len", "list.extend", "list.extend", "numpy.ones", "dict.keys", "set", "dict.keys", "set", "dict.keys", "list", "time.time", "time.time", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.preprocess_adj", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones"], ["", "def", "temp_weighted_two_adj", "(", "total_ent_num", ",", "triple_list", ",", "is_two_adj", "=", "False", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "edge", "=", "dict", "(", ")", "\n", "for", "item", "in", "triple_list", ":", "\n", "        ", "if", "item", "[", "0", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "0", "]", "]", "=", "set", "(", ")", "\n", "", "if", "item", "[", "2", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "2", "]", "]", "=", "set", "(", ")", "\n", "", "edge", "[", "item", "[", "0", "]", "]", ".", "add", "(", "item", "[", "2", "]", ")", "\n", "edge", "[", "item", "[", "2", "]", "]", ".", "add", "(", "item", "[", "0", "]", ")", "\n", "", "row", "=", "list", "(", ")", "\n", "col", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "total_ent_num", ")", ":", "\n", "        ", "if", "i", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "continue", "\n", "", "key", "=", "i", "\n", "value", "=", "edge", "[", "key", "]", "\n", "add_key_len", "=", "len", "(", "value", ")", "\n", "add_key", "=", "(", "key", "*", "np", ".", "ones", "(", "add_key_len", ")", ")", ".", "tolist", "(", ")", "\n", "row", ".", "extend", "(", "add_key", ")", "\n", "col", ".", "extend", "(", "list", "(", "value", ")", ")", "\n", "", "data_len", "=", "len", "(", "row", ")", "\n", "data", "=", "(", "np", ".", "ones", "(", "data_len", ")", ")", "*", "0.5", "\n", "one_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "total_ent_num", ",", "total_ent_num", ")", ")", "\n", "one_adj", "=", "preprocess_adj", "(", "one_adj", ")", "\n", "print", "(", "'generating one-adj costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "print", "(", "'generating one- and two-adj costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "one_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.relation_adj_list": [[578, 642], ["list", "dict", "numpy.zeros", "numpy.argsort", "list", "range", "edge[].append", "numpy.array", "numpy.transpose", "numpy.ones", "list.append", "scipy.coo_matrix", "util.sparse_to_tuple", "list.append", "dict.keys", "list", "int", "int"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.zeros", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.sparse_to_tuple"], ["", "def", "relation_adj_list", "(", "kg1", ",", "kg2", ",", "adj_number", ",", "all_rel_num", ",", "all_ent_num", ",", "linked_ents", ",", "rel_id_mapping", ")", ":", "\n", "    ", "rel_dict", "=", "rel_id_mapping", "\n", "adj_list", "=", "list", "(", ")", "\n", "triple_list", "=", "kg1", ".", "triple_list", "+", "kg2", ".", "triple_list", "\n", "edge", "=", "dict", "(", ")", "\n", "edge_length", "=", "np", ".", "zeros", "(", "all_rel_num", ")", "\n", "# for item in triple_list:", "\n", "#     if item[1] not in edge.keys():", "\n", "#         edge[item[1]] = list()", "\n", "#     edge[item[1]].append([item[0], item[2]])", "\n", "#     edge_length[item[1]] += 1", "\n", "# sort_edge_length = np.argsort(-edge_length)", "\n", "\n", "for", "item", "in", "triple_list", ":", "\n", "        ", "if", "rel_dict", "[", "item", "[", "1", "]", "]", "is", "not", "None", "and", "rel_dict", "[", "item", "[", "1", "]", "]", "!=", "\"\"", ":", "\n", "            ", "edge_id", "=", "rel_dict", "[", "item", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "edge_id", "=", "item", "[", "1", "]", "\n", "", "if", "edge_id", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "edge_id", "]", "=", "list", "(", ")", "\n", "", "edge", "[", "edge_id", "]", ".", "append", "(", "[", "item", "[", "0", "]", ",", "item", "[", "2", "]", "]", ")", "\n", "edge_length", "[", "edge_id", "]", "+=", "1", "\n", "", "sort_edge_length", "=", "np", ".", "argsort", "(", "-", "edge_length", ")", "\n", "\n", "# **********************************************************************", "\n", "adj_len", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "adj_number", ")", ":", "\n", "        ", "pos", "=", "np", ".", "array", "(", "edge", "[", "sort_edge_length", "[", "i", "]", "]", ")", "\n", "row", ",", "col", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "data", "=", "np", ".", "ones", "(", "shape", "=", "int", "(", "edge_length", "[", "sort_edge_length", "[", "i", "]", "]", ")", ")", "\n", "\n", "adj_len", ".", "append", "(", "int", "(", "edge_length", "[", "sort_edge_length", "[", "i", "]", "]", ")", ")", "\n", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "all_ent_num", ",", "all_ent_num", ")", ")", "\n", "adj", "=", "sparse_to_tuple", "(", "adj", ")", "\n", "adj_list", ".", "append", "(", "adj", ")", "\n", "# r1_count = 0", "\n", "# r2_count = 0", "\n", "# count = 0", "\n", "# r1_adj_number = adj_number / 2", "\n", "# r2_adj_number = adj_number / 2", "\n", "# while r1_count <= r1_adj_number and r2_count <= r2_adj_number:", "\n", "#     r_id = sort_edge_length[count]", "\n", "#     i = count", "\n", "#     count += 1", "\n", "#     if r_id > 1700:", "\n", "#         r2_count += 1", "\n", "#         if r2_count > adj_number / 2:", "\n", "#             continue", "\n", "#     else:", "\n", "#         r1_count += 1", "\n", "#         if r1_count > adj_number / 2:", "\n", "#             continue", "\n", "#     pos = np.array(edge[sort_edge_length[i]])", "\n", "#     row, col = np.transpose(pos)", "\n", "#     data = np.ones(shape=int(edge_length[sort_edge_length[i]]))", "\n", "#", "\n", "#     adj_len.append(int(edge_length[sort_edge_length[i]]))", "\n", "#", "\n", "#     adj = sp.coo_matrix((data, (row, col)), shape=(all_ent_num, all_ent_num))", "\n", "#     adj = sparse_to_tuple(adj)", "\n", "#     adj_list.append(adj)", "\n", "\n", "", "return", "adj_list", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.transloss_add2hop": [[644, 673], ["set", "preprocess.generate_2hop_triples", "preprocess.generate_2hop_triples", "dict", "list", "list", "range", "len", "numpy.ones", "scipy.coo_matrix", "util.sparse_to_tuple", "edge[].add", "edge[].add", "len", "list.extend", "list.extend", "dict.keys", "set", "dict.keys", "set", "dict.keys", "list", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_2hop_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.preprocess.generate_2hop_triples", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones", "home.repos.pwc.inspect_result.nju-websoft_AliNet.align.util.sparse_to_tuple", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones"], ["", "def", "transloss_add2hop", "(", "kg1", ",", "kg2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "total_e_num", ")", ":", "\n", "    ", "linked_ents", "=", "set", "(", "sup_ent1", "+", "sup_ent2", "+", "ref_ent1", "+", "ref_ent2", ")", "\n", "enhanced_triples1", "=", "generate_2hop_triples", "(", "kg1", ",", "linked_ents", "=", "linked_ents", ")", "\n", "enhanced_triples2", "=", "generate_2hop_triples", "(", "kg2", ",", "linked_ents", "=", "linked_ents", ")", "\n", "triples", "=", "enhanced_triples1", "|", "enhanced_triples2", "\n", "edge", "=", "dict", "(", ")", "\n", "for", "item", "in", "triples", ":", "\n", "        ", "if", "item", "[", "0", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "0", "]", "]", "=", "set", "(", ")", "\n", "", "if", "item", "[", "2", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "2", "]", "]", "=", "set", "(", ")", "\n", "", "edge", "[", "item", "[", "0", "]", "]", ".", "add", "(", "item", "[", "2", "]", ")", "\n", "edge", "[", "item", "[", "2", "]", "]", ".", "add", "(", "item", "[", "0", "]", ")", "\n", "", "row", "=", "list", "(", ")", "\n", "col", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "total_e_num", ")", ":", "\n", "        ", "if", "i", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "continue", "\n", "", "key", "=", "i", "\n", "value", "=", "edge", "[", "key", "]", "\n", "add_key_len", "=", "len", "(", "value", ")", "\n", "add_key", "=", "(", "key", "*", "np", ".", "ones", "(", "add_key_len", ")", ")", ".", "tolist", "(", ")", "\n", "row", ".", "extend", "(", "add_key", ")", "\n", "col", ".", "extend", "(", "list", "(", "value", ")", ")", "\n", "", "data_len", "=", "len", "(", "row", ")", "\n", "data", "=", "np", ".", "ones", "(", "data_len", ")", "\n", "one_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "total_e_num", ",", "total_e_num", ")", ")", "\n", "one_adj", "=", "sparse_to_tuple", "(", "one_adj", ")", "\n", "return", "one_adj", "\n", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.uniform": [[5, 9], ["tensorflow.random.uniform", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.uniform"], ["def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random", ".", "uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.glorot": [[11, 16], ["numpy.sqrt", "tensorflow.random.uniform", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.uniform"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random", ".", "uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.zeros": [[18, 22], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones": [[24, 28], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.ones"], ["", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.Dense.__init__": [[31, 44], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "output_dim", ",", "\n", "placeholders", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "is_sparse_inputs", "=", "False", ",", "\n", "featureless", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "units", "=", "output_dim", ",", "**", "kwargs", ")", "\n", "self", ".", "dropout_rate", "=", "placeholders", "[", "'dropout'", "]", "if", "dropout_rate", "else", "0.0", "\n", "self", ".", "is_sparse_inputs", "=", "is_sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.Dense.call": [[45, 53], ["layers.dropout", "tensorflow.matmul", "tensorflow.python.ops.nn.bias_add", "layers.Dense.activation"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "dropout", "(", "inputs", ",", "self", ".", "dropout_rate", ",", "self", ".", "num_features_nonzero", ",", "self", ".", "is_sparse_inputs", ")", "\n", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel", ",", "a_is_sparse", "=", "self", ".", "is_sparse_inputs", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ")", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "activation", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.Dense.compute_output_signature": [[54, 56], ["None"], "methods", ["None"], ["", "def", "compute_output_signature", "(", "self", ",", "input_signature", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.GraphConvolution.__init__": [[63, 98], ["super().__init__", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.constraints.get", "list", "tensorflow.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "adj", ",", "\n", "num_features_nonzero", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "is_sparse_inputs", "=", "False", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "'l2'", ",", "\n", "bias_regularizer", "=", "'l2'", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "kernel_regularizer", "=", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "bias_regularizer", "=", "regularizers", ".", "get", "(", "bias_regularizer", ")", "\n", "self", ".", "kernel_constraint", "=", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "bias_constraint", "=", "constraints", ".", "get", "(", "bias_constraint", ")", "\n", "\n", "self", ".", "kernels", "=", "list", "(", ")", "\n", "self", ".", "bias", "=", "None", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "is_sparse_inputs", "=", "is_sparse_inputs", "\n", "self", ".", "num_features_nonzero", "=", "num_features_nonzero", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "am", "[", "0", "]", ",", "values", "=", "am", "[", "1", "]", ",", "dense_shape", "=", "am", "[", "2", "]", ")", "for", "am", "in", "adj", "]", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.GraphConvolution.update_adj": [[99, 102], ["print", "tensorflow.SparseTensor"], "methods", ["None"], ["", "def", "update_adj", "(", "self", ",", "adj", ")", ":", "\n", "        ", "print", "(", "\"gcn update adj...\"", ")", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "am", "[", "0", "]", ",", "values", "=", "am", "[", "1", "]", ",", "dense_shape", "=", "am", "[", "2", "]", ")", "for", "am", "in", "adj", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.GraphConvolution.build": [[103, 120], ["range", "len", "layers.GraphConvolution.kernels.append", "layers.GraphConvolution.add_weight", "layers.GraphConvolution.add_weight", "str"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "adjs", ")", ")", ":", "\n", "            ", "self", ".", "kernels", ".", "append", "(", "self", ".", "add_weight", "(", "'kernel'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "self", ".", "input_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ",", "\n", "dtype", "=", "'float32'", ",", "\n", "trainable", "=", "True", ")", ")", "\n", "", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "'bias'", ",", "\n", "shape", "=", "[", "self", ".", "output_dim", ",", "]", ",", "\n", "initializer", "=", "self", ".", "bias_initializer", ",", "\n", "regularizer", "=", "self", ".", "bias_regularizer", ",", "\n", "constraint", "=", "self", ".", "bias_constraint", ",", "\n", "dtype", "=", "'float32'", ",", "\n", "trainable", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.GraphConvolution.call": [[121, 142], ["list", "range", "tensorflow.add_n", "layers.dropout", "len", "tensorflow.matmul", "tensorflow.sparse.sparse_dense_matmul", "list.append", "tensorflow.python.ops.nn.bias_add", "layers.GraphConvolution.activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout"], ["", "", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "True", ")", ":", "\n", "# BN if training", "\n", "        ", "if", "training", ":", "\n", "            ", "inputs", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", ")", "\n", "# dropout if training", "\n", "", "if", "training", "and", "self", ".", "dropout_rate", ">", "0.0", ":", "\n", "            ", "inputs", "=", "dropout", "(", "inputs", ",", "self", ".", "dropout_rate", ",", "self", ".", "num_features_nonzero", ",", "self", ".", "is_sparse_inputs", ")", "\n", "# convolve", "\n", "", "hidden_vectors", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "adjs", ")", ")", ":", "\n", "            ", "pre_sup", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernels", "[", "i", "]", ",", "a_is_sparse", "=", "self", ".", "is_sparse_inputs", ")", "\n", "hidden_vector", "=", "tf", ".", "sparse", ".", "sparse_dense_matmul", "(", "tf", ".", "cast", "(", "self", ".", "adjs", "[", "i", "]", ",", "tf", ".", "float32", ")", ",", "pre_sup", ")", "\n", "hidden_vectors", ".", "append", "(", "hidden_vector", ")", "\n", "", "outputs", "=", "tf", ".", "add_n", "(", "hidden_vectors", ")", "\n", "# bias", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ")", "\n", "# activation", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "activation", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.GraphConvolution.compute_output_signature": [[143, 145], ["None"], "methods", ["None"], ["", "def", "compute_output_signature", "(", "self", ",", "input_signature", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.InputLayer.__init__": [[150, 159], ["super().__init__", "tensorflow.python.keras.initializers.get", "layers.InputLayer.add_weight"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "shape", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ")", ":", "\n", "        ", "super", "(", "InputLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "init_embeds", "=", "self", ".", "add_weight", "(", "'embedding'", ",", "\n", "shape", "=", "shape", ",", "\n", "dtype", "=", "'float32'", ",", "\n", "trainable", "=", "True", ")", "\n", "# self.init_embeds = tf.nn.l2_normalize(self.init_embeds, 1)", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.InputLayer.call": [[161, 163], ["None"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "init_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.InputLayer.compute_output_signature": [[164, 166], ["None"], "methods", ["None"], ["", "def", "compute_output_signature", "(", "self", ",", "input_signature", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout": [[10, 14], ["layers.sparse_dropout", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.sparse_dropout", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout"], ["def", "dropout", "(", "inputs", ",", "drop_rate", ",", "noise_shape", ",", "is_sparse", ")", ":", "\n", "    ", "if", "not", "is_sparse", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "drop_rate", ")", "\n", "", "return", "sparse_dropout", "(", "inputs", ",", "drop_rate", ",", "noise_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.sparse_dropout": [[16, 26], ["tensorflow.random.uniform", "tensorflow.cast", "tensorflow.sparse.retain", "tensorflow.floor"], "function", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.initializer.uniform"], ["", "def", "sparse_dropout", "(", "x", ",", "drop_rate", ",", "noise_shape", ")", ":", "\n", "    ", "\"\"\"\n    Dropout for sparse tensors.\n    \"\"\"", "\n", "keep_prob", "=", "1", "-", "drop_rate", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random", ".", "uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse", ".", "retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.rgcn.layers.RGraphConvolutionLayer.__init__": [[10, 49], ["super().__init__", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.constraints.get", "len", "list", "tensorflow.SparseTensor", "range", "len"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__"], ["def", "dropout", "(", "inputs", ",", "drop_rate", ",", "noise_shape", ",", "is_sparse", ")", ":", "\n", "    ", "if", "not", "is_sparse", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "drop_rate", ")", "\n", "", "return", "sparse_dropout", "(", "inputs", ",", "drop_rate", ",", "noise_shape", ")", "\n", "\n", "\n", "", "def", "sparse_dropout", "(", "x", ",", "drop_rate", ",", "noise_shape", ")", ":", "\n", "    ", "\"\"\"\n    Dropout for sparse tensors.\n    \"\"\"", "\n", "keep_prob", "=", "1", "-", "drop_rate", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random", ".", "uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse", ".", "retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n", "\n", "", "class", "Dense", "(", "keras", ".", "layers", ".", "Dense", ")", ":", "\n", "    ", "\"\"\"Dense layer.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "output_dim", ",", "\n", "placeholders", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "is_sparse_inputs", "=", "False", ",", "\n", "featureless", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "units", "=", "output_dim", ",", "**", "kwargs", ")", "\n", "self", ".", "dropout_rate", "=", "placeholders", "[", "'dropout'", "]", "if", "dropout_rate", "else", "0.0", "\n", "self", ".", "is_sparse_inputs", "=", "is_sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "dropout", "(", "inputs", ",", "self", ".", "dropout_rate", ",", "self", ".", "num_features_nonzero", ",", "self", ".", "is_sparse_inputs", ")", "\n", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel", ",", "a_is_sparse", "=", "self", ".", "is_sparse_inputs", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ")", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.rgcn.layers.RGraphConvolutionLayer.build": [[50, 76], ["layers.RGraphConvolutionLayer.add_weight", "layers.RGraphConvolutionLayer.add_weight", "layers.RGraphConvolutionLayer.add_weight", "layers.RGraphConvolutionLayer.add_weight"], "methods", ["None"], ["", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "activation", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n", "", "def", "compute_output_signature", "(", "self", ",", "input_signature", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "class", "GraphConvolution", "(", "keras", ".", "layers", ".", "Layer", ")", ":", "\n", "    ", "\"\"\"\n    Graph convolution layer.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "adj", ",", "\n", "num_features_nonzero", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "is_sparse_inputs", "=", "False", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "'l2'", ",", "\n", "bias_regularizer", "=", "'l2'", ",", "\n", "activity_regularizer", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.rgcn.layers.RGraphConvolutionLayer.call": [[77, 101], ["list", "range", "tensorflow.keras.layers.concatenate", "layers.RGraphConvolutionLayer.activation", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.keras.backend.dot", "tensorflow.matmul", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.concatenate.append", "tensorflow.sparse.sparse_dense_matmul", "tensorflow.cast"], "methods", ["None"], ["kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "kernel_regularizer", "=", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "bias_regularizer", "=", "regularizers", ".", "get", "(", "bias_regularizer", ")", "\n", "self", ".", "kernel_constraint", "=", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "bias_constraint", "=", "constraints", ".", "get", "(", "bias_constraint", ")", "\n", "\n", "self", ".", "kernels", "=", "list", "(", ")", "\n", "self", ".", "bias", "=", "None", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "is_sparse_inputs", "=", "is_sparse_inputs", "\n", "self", ".", "num_features_nonzero", "=", "num_features_nonzero", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "am", "[", "0", "]", ",", "values", "=", "am", "[", "1", "]", ",", "dense_shape", "=", "am", "[", "2", "]", ")", "for", "am", "in", "adj", "]", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "\n", "", "def", "update_adj", "(", "self", ",", "adj", ")", ":", "\n", "        ", "print", "(", "\"gcn update adj...\"", ")", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "am", "[", "0", "]", ",", "values", "=", "am", "[", "1", "]", ",", "dense_shape", "=", "am", "[", "2", "]", ")", "for", "am", "in", "adj", "]", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.compute_output_signature": [[10, 12], ["None"], "methods", ["None"], ["def", "dropout", "(", "inputs", ",", "drop_rate", ",", "noise_shape", ",", "is_sparse", ")", ":", "\n", "    ", "if", "not", "is_sparse", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "drop_rate", ")", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__": [[13, 58], ["super().__init__", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.constraints.get", "tensorflow.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.__init__"], ["", "return", "sparse_dropout", "(", "inputs", ",", "drop_rate", ",", "noise_shape", ")", "\n", "\n", "\n", "", "def", "sparse_dropout", "(", "x", ",", "drop_rate", ",", "noise_shape", ")", ":", "\n", "    ", "\"\"\"\n    Dropout for sparse tensors.\n    \"\"\"", "\n", "keep_prob", "=", "1", "-", "drop_rate", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random", ".", "uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse", ".", "retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n", "\n", "", "class", "Dense", "(", "keras", ".", "layers", ".", "Dense", ")", ":", "\n", "    ", "\"\"\"Dense layer.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "output_dim", ",", "\n", "placeholders", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "is_sparse_inputs", "=", "False", ",", "\n", "featureless", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "units", "=", "output_dim", ",", "**", "kwargs", ")", "\n", "self", ".", "dropout_rate", "=", "placeholders", "[", "'dropout'", "]", "if", "dropout_rate", "else", "0.0", "\n", "self", ".", "is_sparse_inputs", "=", "is_sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "dropout", "(", "inputs", ",", "self", ".", "dropout_rate", ",", "self", ".", "num_features_nonzero", ",", "self", ".", "is_sparse_inputs", ")", "\n", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel", ",", "a_is_sparse", "=", "self", ".", "is_sparse_inputs", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ")", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "activation", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n", "", "def", "compute_output_signature", "(", "self", ",", "input_signature", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "class", "GraphConvolution", "(", "keras", ".", "layers", ".", "Layer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.build": [[59, 72], ["layers.GraphAttentionLayer.add_weight", "layers.GraphAttentionLayer.add_weight"], "methods", ["None"], ["    ", "\"\"\"\n    Graph convolution layer.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "adj", ",", "\n", "num_features_nonzero", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "is_sparse_inputs", "=", "False", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n"]], "home.repos.pwc.inspect_result.nju-websoft_AliNet.gat.layers.GraphAttentionLayer.call": [[73, 113], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.sparse.add", "tensorflow.SparseTensor", "tensorflow.sparse.softmax", "tensorflow.reshape", "tensorflow.sparse.reshape", "tensorflow.matmul", "tensorflow.sparse.sparse_dense_matmul", "layers.GraphAttentionLayer.activation", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.Conv1D", "tensorflow.cast", "tensorflow.cast", "tensorflow.transpose", "tensorflow.SparseTensor", "tensorflow.nn.dropout", "print", "tensorflow.add", "tensorflow.reshape", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout", "home.repos.pwc.inspect_result.nju-websoft_AliNet.gcn.layers.dropout"], ["bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "'l2'", ",", "\n", "bias_regularizer", "=", "'l2'", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "kernel_regularizer", "=", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "bias_regularizer", "=", "regularizers", ".", "get", "(", "bias_regularizer", ")", "\n", "self", ".", "kernel_constraint", "=", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "bias_constraint", "=", "constraints", ".", "get", "(", "bias_constraint", ")", "\n", "\n", "self", ".", "kernels", "=", "list", "(", ")", "\n", "self", ".", "bias", "=", "None", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "is_sparse_inputs", "=", "is_sparse_inputs", "\n", "self", ".", "num_features_nonzero", "=", "num_features_nonzero", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "am", "[", "0", "]", ",", "values", "=", "am", "[", "1", "]", ",", "dense_shape", "=", "am", "[", "2", "]", ")", "for", "am", "in", "adj", "]", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "\n", "", "def", "update_adj", "(", "self", ",", "adj", ")", ":", "\n", "        ", "print", "(", "\"gcn update adj...\"", ")", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "am", "[", "0", "]", ",", "values", "=", "am", "[", "1", "]", ",", "dense_shape", "=", "am", "[", "2", "]", ")", "for", "am", "in", "adj", "]", "\n", "\n", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "adjs", ")", ")", ":", "\n", "            ", "self", ".", "kernels", ".", "append", "(", "self", ".", "add_weight", "(", "'kernel'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "self", ".", "input_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ",", "\n", "dtype", "=", "'float32'", ",", "\n", "trainable", "=", "True", ")", ")", "\n", "", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "'bias'", ",", "\n"]]}