{"home.repos.pwc.inspect_result.yunyikristy_skipNet.None.train.get_git_commit": [[22, 27], ["subprocess.check_output", "log", "subprocess.check_output().decode().strip", "subprocess.check_output().decode", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log"], ["def", "get_git_commit", "(", ")", ":", "\n", "  ", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'diff-index'", ",", "'--quiet'", ",", "'HEAD'", "]", ")", "# Verify client is clean", "\n", "commit", "=", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", ".", "decode", "(", ")", ".", "strip", "(", ")", "[", ":", "10", "]", "\n", "log", "(", "'Git commit: %s'", "%", "commit", ")", "\n", "return", "commit", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.None.train.time_string": [[28, 30], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "time_string", "(", ")", ":", "\n", "  ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.None.train.train": [[32, 115], ["os.path.join", "os.path.join", "log", "log", "log", "log", "tensorflow.train.Coordinator", "tensorflow.Variable", "util.ValueWindow", "util.ValueWindow", "tensorflow.train.Saver", "train.get_git_commit", "hparams.hparams_debug_string", "tensorflow.variable_scope", "datasets.datafeeder.DataFeeder", "tensorflow.variable_scope", "models.skipNet.SkipNet", "models.skipNet.SkipNet.initialize", "models.skipNet.SkipNet.add_loss", "models.skipNet.SkipNet.add_optimizer", "add_stats", "tensorflow.Session", "sess.run", "datasets.datafeeder.DataFeeder.start_in_session", "tensorflow.global_variables_initializer", "tf.train.Saver.restore", "log", "log", "tf.train.Coordinator.should_stop", "time.time", "sess.run", "sess.run", "util.ValueWindow.append", "util.ValueWindow.append", "log", "log", "traceback.print_exc", "tf.train.Coordinator.request_stop", "math.isnan", "log", "Exception", "log", "tf.train.Saver.save", "time.time"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.None.train.get_git_commit", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTrainingHelper.initialize", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.append", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.append", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log"], ["", "def", "train", "(", "log_dir", ",", "args", ")", ":", "\n", "  ", "commit", "=", "get_git_commit", "(", ")", "if", "args", ".", "git", "else", "'None'", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'model.ckpt'", ")", "\n", "input_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "base_dir", ",", "args", ".", "input", ")", "\n", "log", "(", "'Checkpoint path: %s'", "%", "checkpoint_path", ")", "\n", "log", "(", "'Loading training data from: %s'", "%", "input_path", ")", "\n", "log", "(", "'Using model: %s'", "%", "args", ".", "model", ")", "\n", "log", "(", "hparams_debug_string", "(", ")", ")", "\n", "\n", "# Set up DataFeeder:", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'datafeeder'", ")", "as", "scope", ":", "\n", "    ", "feeder", "=", "DataFeeder", "(", "coord", ",", "input_path", ",", "hparams", ")", "\n", "\n", "# Set up model:", "\n", "", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'global_step'", ",", "trainable", "=", "False", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'model'", ")", "as", "scope", ":", "\n", "    ", "model", "=", "SkipNet", "(", "hparams", ")", "\n", "model", ".", "initialize", "(", "feeder", ".", "txt_A", ",", "feeder", ".", "txt_A_lenth", ",", "feeder", ".", "txt_B", ",", "feeder", ".", "txt_B_lenth", ",", "feeder", ".", "mel_targets", ",", "feeder", ".", "image_targets", ")", "\n", "model", ".", "add_loss", "(", ")", "\n", "model", ".", "add_optimizer", "(", "global_step", ")", "\n", "stats", "=", "add_stats", "(", "model", ")", "\n", "\n", "# Bookkeeping:", "\n", "", "step", "=", "0", "\n", "time_window", "=", "ValueWindow", "(", "100", ")", "\n", "loss_window", "=", "ValueWindow", "(", "100", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "5", ",", "keep_checkpoint_every_n_hours", "=", "2", ")", "\n", "\n", "# Train!", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "try", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "if", "args", ".", "restore_step", ":", "\n", "# Restore from a checkpoint if the user requested it.", "\n", "        ", "restore_path", "=", "'%s-%d'", "%", "(", "checkpoint_path", ",", "args", ".", "restore_step", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "restore_path", ")", "\n", "log", "(", "'Resuming from checkpoint: %s at commit: %s'", "%", "(", "restore_path", ",", "commit", ")", ",", "slack", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "log", "(", "'Starting new training run at commit: %s'", "%", "commit", ",", "slack", "=", "True", ")", "\n", "\n", "", "feeder", ".", "start_in_session", "(", "sess", ")", "\n", "\n", "while", "not", "coord", ".", "should_stop", "(", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "feed_dict", "=", "{", "self", ".", "txt_targets_A", ":", "feeder", ".", "txt_A", ",", "\n", "self", ".", "txt_lenth_A", ":", "feeder", ".", "txt_A_lenth", ",", "\n", "self", ".", "txt_targets_B", ":", "feeder", ".", "txt_B", ",", "\n", "self", ".", "txt_lenth_B", ":", "feeder", ".", "txt_B_lenth", ",", "\n", "self", ".", "mel_targets", ":", "feeder", ".", "mel_targets", ",", "\n", "self", ".", "image_targets", ":", "feeder", ".", "image_targets", "}", "\n", "\n", "# iter 1: dataset A : image - text pairs", "\n", "step", ",", "img_loss", ",", "txt_B_loss", ",", "d_loss", ",", "g_loss", ",", "opt1", ",", "opt2", "=", "sess", ".", "run", "(", "feed_dict", ",", "[", "global_step", ",", "model", ".", "recon_img_loss", ",", "model", ".", "recon_txt_loss_A", ",", "model", ".", "domain_d_loss", ",", "model", ".", "domain_g_loss", ",", "model", ".", "optimize_recon", ",", "model", ".", "optimize_domain", "]", ")", "\n", "\n", "# iter 2: dataset B: speech-text pairs", "\n", "step", ",", "speech_loss", ",", "txt_A_loss", ",", "opt1", ",", "opt2", "=", "sess", ".", "run", "(", "feed_dict", ",", "[", "global_step", ",", "model", ".", "recon_speech_loss", ",", "model", ".", "recon_txt_loss_B", ",", "model", ".", "domain_d_loss", ",", "model", ".", "domain_g_loss", ",", "model", ".", "optimize_recon", ",", "model", ".", "optimize_domain", "]", ")", "\n", "\n", "\n", "time_window", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "loss_window", ".", "append", "(", "loss", ")", "\n", "message", "=", "'Step %-7d [%.03f sec/step, loss=%.05f, avg_loss=%.05f]'", "%", "(", "\n", "step", ",", "time_window", ".", "average", ",", "loss", ",", "loss_window", ".", "average", ")", "\n", "log", "(", "message", ",", "slack", "=", "(", "step", "%", "args", ".", "checkpoint_interval", "==", "0", ")", ")", "\n", "\n", "if", "loss", ">", "100", "or", "math", ".", "isnan", "(", "loss", ")", ":", "\n", "          ", "log", "(", "'Loss exploded to %.05f at step %d!'", "%", "(", "loss", ",", "step", ")", ",", "slack", "=", "True", ")", "\n", "raise", "Exception", "(", "'Loss Exploded'", ")", "\n", "\n", "", "if", "step", "%", "args", ".", "checkpoint_interval", "==", "0", ":", "\n", "          ", "log", "(", "'Saving checkpoint to: %s-%d'", "%", "(", "checkpoint_path", ",", "step", ")", ")", "\n", "saver", ".", "save", "(", "sess", ",", "checkpoint_path", ",", "global_step", "=", "step", ")", "\n", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "      ", "log", "(", "'Exiting due to exception: %s'", "%", "e", ",", "slack", "=", "True", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "coord", ".", "request_stop", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.None.train.main": [[117, 140], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "os.path.join", "os.makedirs", "util.infolog.init", "hparams.hparams.parse", "train.train", "os.path.join", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.init", "home.repos.pwc.inspect_result.yunyikristy_skipNet.None.train.train"], ["", "", "", "def", "main", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--base_dir'", ",", "default", "=", "os", ".", "getcwd", "(", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--input_A'", ",", "default", "=", "'training/train_A.txt'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_B'", ",", "default", "=", "'training/train_B.txt'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'m3d'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "help", "=", "'Name of the run. Used for logging. Defaults to model name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--hparams'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Hyperparameter overrides as a comma-separated list of name=value pairs'", ")", "\n", "parser", ".", "add_argument", "(", "'--restore_step'", ",", "type", "=", "int", ",", "help", "=", "'Global step to restore from checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_interval'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Steps between writing checkpoints.'", ")", "\n", "parser", ".", "add_argument", "(", "'--slack_url'", ",", "help", "=", "'Slack webhook URL to get periodic reports.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tf_log_level'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Tensorflow C++ log level.'", ")", "\n", "parser", ".", "add_argument", "(", "'--git'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If set, verify that the client is clean.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "str", "(", "args", ".", "tf_log_level", ")", "\n", "run_name", "=", "args", ".", "name", "or", "args", ".", "model", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "base_dir", ",", "'logs-%s'", "%", "run_name", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "infolog", ".", "init", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'train.log'", ")", ",", "run_name", ",", "args", ".", "slack_url", ")", "\n", "hparams", ".", "parse", "(", "args", ".", "hparams", ")", "\n", "train", "(", "log_dir", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.init": [[18, 27], ["infolog._close_logfile", "open", "open.write", "open.write", "open.write"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog._close_logfile"], ["def", "init", "(", "filename", ",", "run_name", ",", "slack_url", "=", "None", ")", ":", "\n", "  ", "global", "_file", ",", "_run_name", ",", "_slack_url", "\n", "_close_logfile", "(", ")", "\n", "_file", "=", "open", "(", "filename", ",", "'a'", ")", "\n", "_file", ".", "write", "(", "'\\n-----------------------------------------------------------------\\n'", ")", "\n", "_file", ".", "write", "(", "'Starting new training run\\n'", ")", "\n", "_file", ".", "write", "(", "'-----------------------------------------------------------------\\n'", ")", "\n", "_run_name", "=", "run_name", "\n", "_slack_url", "=", "slack_url", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog.log": [[29, 35], ["print", "_file.write", "threading.Thread().start", "threading.Thread", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "log", "(", "msg", ",", "slack", "=", "False", ")", ":", "\n", "  ", "print", "(", "msg", ")", "\n", "if", "_file", "is", "not", "None", ":", "\n", "    ", "_file", ".", "write", "(", "'[%s]  %s\\n'", "%", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "_format", ")", "[", ":", "-", "3", "]", ",", "msg", ")", ")", "\n", "", "if", "slack", "and", "_slack_url", "is", "not", "None", ":", "\n", "    ", "Thread", "(", "target", "=", "_send_slack", ",", "args", "=", "(", "msg", ",", ")", ")", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog._close_logfile": [[37, 42], ["_file.close"], "function", ["None"], ["", "", "def", "_close_logfile", "(", ")", ":", "\n", "  ", "global", "_file", "\n", "if", "_file", "is", "not", "None", ":", "\n", "    ", "_file", ".", "close", "(", ")", "\n", "_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.infolog._send_slack": [[44, 51], ["urllib.request.Request", "urllib.request.Request.add_header", "urllib.request.urlopen", "json.dumps().encode", "json.dumps"], "function", ["None"], ["", "", "def", "_send_slack", "(", "msg", ")", ":", "\n", "  ", "req", "=", "Request", "(", "_slack_url", ")", "\n", "req", ".", "add_header", "(", "'Content-Type'", ",", "'application/json'", ")", "\n", "urlopen", "(", "req", ",", "json", ".", "dumps", "(", "{", "\n", "'username'", ":", "'tacotron'", ",", "\n", "'icon_emoji'", ":", "':taco:'", ",", "\n", "'text'", ":", "'*%s*: %s'", "%", "(", "_run_name", ",", "msg", ")", "\n", "}", ")", ".", "encode", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.ops.shape_list": [[8, 26], ["tensorflow.convert_to_tensor", "tf.convert_to_tensor.get_shape().as_list", "tensorflow.shape", "range", "tensorflow.shape", "len", "ret.append", "tf.convert_to_tensor.get_shape", "tf.convert_to_tensor.get_shape"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.append"], ["def", "shape_list", "(", "x", ")", ":", "\n", "  ", "\"\"\"Return list of dims, statically where possible.\"\"\"", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "\n", "# If unknown rank, return dynamic shape", "\n", "if", "x", ".", "get_shape", "(", ")", ".", "dims", "is", "None", ":", "\n", "    ", "return", "tf", ".", "shape", "(", "x", ")", "\n", "\n", "", "static", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "static", ")", ")", ":", "\n", "    ", "dim", "=", "static", "[", "i", "]", "\n", "if", "dim", "is", "None", ":", "\n", "      ", "dim", "=", "shape", "[", "i", "]", "\n", "", "ret", ".", "append", "(", "dim", ")", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.load_wav": [[14, 16], ["librosa.core.load", "librosa.core.load"], "function", ["None"], ["def", "load_wav", "(", "path", ")", ":", "\n", "  ", "return", "librosa", ".", "core", ".", "load", "(", "path", ",", "sr", "=", "hparams", ".", "sample_rate", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.save_wav": [[18, 21], ["librosa.output.write_wav", "librosa.output.write_wav", "max", "wav.astype", "numpy.max", "numpy.abs"], "function", ["None"], ["", "def", "save_wav", "(", "wav", ",", "path", ")", ":", "\n", "  ", "wav", "*=", "32767", "/", "max", "(", "0.01", ",", "np", ".", "max", "(", "np", ".", "abs", "(", "wav", ")", ")", ")", "\n", "librosa", ".", "output", ".", "write_wav", "(", "path", ",", "wav", ".", "astype", "(", "np", ".", "int16", ")", ",", "hparams", ".", "sample_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.preemphasis": [[23, 25], ["scipy.signal.lfilter"], "function", ["None"], ["", "def", "preemphasis", "(", "x", ")", ":", "\n", "  ", "return", "signal", ".", "lfilter", "(", "[", "1", ",", "-", "hparams", ".", "preemphasis", "]", ",", "[", "1", "]", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.inv_preemphasis": [[27, 29], ["scipy.signal.lfilter"], "function", ["None"], ["", "def", "inv_preemphasis", "(", "x", ")", ":", "\n", "  ", "return", "signal", ".", "lfilter", "(", "[", "1", "]", ",", "[", "1", ",", "-", "hparams", ".", "preemphasis", "]", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.spectrogram": [[31, 35], ["audio._stft", "audio._normalize", "audio.preemphasis", "audio._amp_to_db", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._normalize", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.preemphasis", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._amp_to_db"], ["", "def", "spectrogram", "(", "y", ")", ":", "\n", "  ", "D", "=", "_stft", "(", "preemphasis", "(", "y", ")", ")", "\n", "S", "=", "_amp_to_db", "(", "np", ".", "abs", "(", "D", ")", ")", "-", "hparams", ".", "ref_level_db", "\n", "return", "_normalize", "(", "S", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.inv_spectrogram": [[37, 41], ["audio._db_to_amp", "audio.inv_preemphasis", "audio._griffin_lim", "audio._denormalize"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._db_to_amp", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.inv_preemphasis", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._griffin_lim", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._denormalize"], ["", "def", "inv_spectrogram", "(", "spectrogram", ")", ":", "\n", "  ", "'''Converts spectrogram to waveform using librosa'''", "\n", "S", "=", "_db_to_amp", "(", "_denormalize", "(", "spectrogram", ")", "+", "hparams", ".", "ref_level_db", ")", "# Convert back to linear", "\n", "return", "inv_preemphasis", "(", "_griffin_lim", "(", "S", "**", "hparams", ".", "power", ")", ")", "# Reconstruct phase", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.inv_spectrogram_tensorflow": [[43, 51], ["audio._db_to_amp_tensorflow", "audio._griffin_lim_tensorflow", "tensorflow.pow", "audio._denormalize_tensorflow"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._db_to_amp_tensorflow", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._griffin_lim_tensorflow", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._denormalize_tensorflow"], ["", "def", "inv_spectrogram_tensorflow", "(", "spectrogram", ")", ":", "\n", "  ", "'''Builds computational graph to convert spectrogram to waveform using TensorFlow.\n\n  Unlike inv_spectrogram, this does NOT invert the preemphasis. The caller should call\n  inv_preemphasis on the output after running the graph.\n  '''", "\n", "S", "=", "_db_to_amp_tensorflow", "(", "_denormalize_tensorflow", "(", "spectrogram", ")", "+", "hparams", ".", "ref_level_db", ")", "\n", "return", "_griffin_lim_tensorflow", "(", "tf", ".", "pow", "(", "S", ",", "hparams", ".", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.melspectrogram": [[53, 57], ["audio._stft", "audio._normalize", "audio.preemphasis", "audio._amp_to_db", "audio._linear_to_mel", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._normalize", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.preemphasis", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._amp_to_db", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._linear_to_mel"], ["", "def", "melspectrogram", "(", "y", ")", ":", "\n", "  ", "D", "=", "_stft", "(", "preemphasis", "(", "y", ")", ")", "\n", "S", "=", "_amp_to_db", "(", "_linear_to_mel", "(", "np", ".", "abs", "(", "D", ")", ")", ")", "-", "hparams", ".", "ref_level_db", "\n", "return", "_normalize", "(", "S", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.find_endpoint": [[59, 67], ["int", "int", "audio._db_to_amp", "range", "len", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._db_to_amp"], ["", "def", "find_endpoint", "(", "wav", ",", "threshold_db", "=", "-", "40", ",", "min_silence_sec", "=", "0.8", ")", ":", "\n", "  ", "window_length", "=", "int", "(", "hparams", ".", "sample_rate", "*", "min_silence_sec", ")", "\n", "hop_length", "=", "int", "(", "window_length", "/", "4", ")", "\n", "threshold", "=", "_db_to_amp", "(", "threshold_db", ")", "\n", "for", "x", "in", "range", "(", "hop_length", ",", "len", "(", "wav", ")", "-", "window_length", ",", "hop_length", ")", ":", "\n", "    ", "if", "np", ".", "max", "(", "wav", "[", "x", ":", "x", "+", "window_length", "]", ")", "<", "threshold", ":", "\n", "      ", "return", "x", "+", "hop_length", "\n", "", "", "return", "len", "(", "wav", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._griffin_lim": [[69, 80], ["numpy.exp", "numpy.abs().astype", "audio._istft", "range", "numpy.exp", "audio._istft", "numpy.random.rand", "numpy.abs", "numpy.angle", "audio._stft"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._istft", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._istft", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft"], ["", "def", "_griffin_lim", "(", "S", ")", ":", "\n", "  ", "'''librosa implementation of Griffin-Lim\n  Based on https://github.com/librosa/librosa/issues/434\n  '''", "\n", "angles", "=", "np", ".", "exp", "(", "2j", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "rand", "(", "*", "S", ".", "shape", ")", ")", "\n", "S_complex", "=", "np", ".", "abs", "(", "S", ")", ".", "astype", "(", "np", ".", "complex", ")", "\n", "y", "=", "_istft", "(", "S_complex", "*", "angles", ")", "\n", "for", "i", "in", "range", "(", "hparams", ".", "griffin_lim_iters", ")", ":", "\n", "    ", "angles", "=", "np", ".", "exp", "(", "1j", "*", "np", ".", "angle", "(", "_stft", "(", "y", ")", ")", ")", "\n", "y", "=", "_istft", "(", "S_complex", "*", "angles", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._griffin_lim_tensorflow": [[82, 96], ["tensorflow.variable_scope", "tensorflow.expand_dims", "tensorflow.identity", "audio._istft_tensorflow", "range", "tensorflow.squeeze", "tensorflow.cast", "audio._stft_tensorflow", "audio._istft_tensorflow", "tensorflow.cast", "tensorflow.maximum", "tensorflow.abs"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._istft_tensorflow", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft_tensorflow", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._istft_tensorflow"], ["", "def", "_griffin_lim_tensorflow", "(", "S", ")", ":", "\n", "  ", "'''TensorFlow implementation of Griffin-Lim\n  Based on https://github.com/Kyubyong/tensorflow-exercises/blob/master/Audio_Processing.ipynb\n  '''", "\n", "with", "tf", ".", "variable_scope", "(", "'griffinlim'", ")", ":", "\n", "# TensorFlow's stft and istft operate on a batch of spectrograms; create batch of size 1", "\n", "    ", "S", "=", "tf", ".", "expand_dims", "(", "S", ",", "0", ")", "\n", "S_complex", "=", "tf", ".", "identity", "(", "tf", ".", "cast", "(", "S", ",", "dtype", "=", "tf", ".", "complex64", ")", ")", "\n", "y", "=", "_istft_tensorflow", "(", "S_complex", ")", "\n", "for", "i", "in", "range", "(", "hparams", ".", "griffin_lim_iters", ")", ":", "\n", "      ", "est", "=", "_stft_tensorflow", "(", "y", ")", "\n", "angles", "=", "est", "/", "tf", ".", "cast", "(", "tf", ".", "maximum", "(", "1e-8", ",", "tf", ".", "abs", "(", "est", ")", ")", ",", "tf", ".", "complex64", ")", "\n", "y", "=", "_istft_tensorflow", "(", "S_complex", "*", "angles", ")", "\n", "", "return", "tf", ".", "squeeze", "(", "y", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft": [[98, 101], ["audio._stft_parameters", "librosa.stft", "librosa.stft"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft_parameters"], ["", "", "def", "_stft", "(", "y", ")", ":", "\n", "  ", "n_fft", ",", "hop_length", ",", "win_length", "=", "_stft_parameters", "(", ")", "\n", "return", "librosa", ".", "stft", "(", "y", "=", "y", ",", "n_fft", "=", "n_fft", ",", "hop_length", "=", "hop_length", ",", "win_length", "=", "win_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._istft": [[103, 106], ["audio._stft_parameters", "librosa.istft", "librosa.istft"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft_parameters"], ["", "def", "_istft", "(", "y", ")", ":", "\n", "  ", "_", ",", "hop_length", ",", "win_length", "=", "_stft_parameters", "(", ")", "\n", "return", "librosa", ".", "istft", "(", "y", ",", "hop_length", "=", "hop_length", ",", "win_length", "=", "win_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft_tensorflow": [[108, 111], ["audio._stft_parameters", "tensorflow.contrib.signal.stft"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft_parameters"], ["", "def", "_stft_tensorflow", "(", "signals", ")", ":", "\n", "  ", "n_fft", ",", "hop_length", ",", "win_length", "=", "_stft_parameters", "(", ")", "\n", "return", "tf", ".", "contrib", ".", "signal", ".", "stft", "(", "signals", ",", "win_length", ",", "hop_length", ",", "n_fft", ",", "pad_end", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._istft_tensorflow": [[113, 116], ["audio._stft_parameters", "tensorflow.contrib.signal.inverse_stft"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft_parameters"], ["", "def", "_istft_tensorflow", "(", "stfts", ")", ":", "\n", "  ", "n_fft", ",", "hop_length", ",", "win_length", "=", "_stft_parameters", "(", ")", "\n", "return", "tf", ".", "contrib", ".", "signal", ".", "inverse_stft", "(", "stfts", ",", "win_length", ",", "hop_length", ",", "n_fft", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._stft_parameters": [[118, 123], ["int", "int"], "function", ["None"], ["", "def", "_stft_parameters", "(", ")", ":", "\n", "  ", "n_fft", "=", "(", "hparams", ".", "num_freq", "-", "1", ")", "*", "2", "\n", "hop_length", "=", "int", "(", "hparams", ".", "frame_shift_ms", "/", "1000", "*", "hparams", ".", "sample_rate", ")", "\n", "win_length", "=", "int", "(", "hparams", ".", "frame_length_ms", "/", "1000", "*", "hparams", ".", "sample_rate", ")", "\n", "return", "n_fft", ",", "hop_length", ",", "win_length", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._linear_to_mel": [[129, 134], ["numpy.dot", "audio._build_mel_basis"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._build_mel_basis"], ["def", "_linear_to_mel", "(", "spectrogram", ")", ":", "\n", "  ", "global", "_mel_basis", "\n", "if", "_mel_basis", "is", "None", ":", "\n", "    ", "_mel_basis", "=", "_build_mel_basis", "(", ")", "\n", "", "return", "np", ".", "dot", "(", "_mel_basis", ",", "spectrogram", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._build_mel_basis": [[135, 138], ["librosa.filters.mel", "librosa.filters.mel"], "function", ["None"], ["", "def", "_build_mel_basis", "(", ")", ":", "\n", "  ", "n_fft", "=", "(", "hparams", ".", "num_freq", "-", "1", ")", "*", "2", "\n", "return", "librosa", ".", "filters", ".", "mel", "(", "hparams", ".", "sample_rate", ",", "n_fft", ",", "n_mels", "=", "hparams", ".", "num_mels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._amp_to_db": [[139, 141], ["numpy.log10", "numpy.maximum"], "function", ["None"], ["", "def", "_amp_to_db", "(", "x", ")", ":", "\n", "  ", "return", "20", "*", "np", ".", "log10", "(", "np", ".", "maximum", "(", "1e-5", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._db_to_amp": [[142, 144], ["numpy.power"], "function", ["None"], ["", "def", "_db_to_amp", "(", "x", ")", ":", "\n", "  ", "return", "np", ".", "power", "(", "10.0", ",", "x", "*", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._db_to_amp_tensorflow": [[145, 147], ["tensorflow.pow", "tensorflow.ones", "tensorflow.shape"], "function", ["None"], ["", "def", "_db_to_amp_tensorflow", "(", "x", ")", ":", "\n", "  ", "return", "tf", ".", "pow", "(", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "x", ")", ")", "*", "10.0", ",", "x", "*", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._normalize": [[148, 150], ["numpy.clip"], "function", ["None"], ["", "def", "_normalize", "(", "S", ")", ":", "\n", "  ", "return", "np", ".", "clip", "(", "(", "S", "-", "hparams", ".", "min_level_db", ")", "/", "-", "hparams", ".", "min_level_db", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._denormalize": [[151, 153], ["numpy.clip", "audio.spectrogram"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.spectrogram"], ["", "def", "_denormalize", "(", "S", ")", ":", "\n", "  ", "return", "(", "np", ".", "clip", "(", "S", ",", "0", ",", "1", ")", "*", "-", "hparams", ".", "min_level_db", ")", "+", "hparams", ".", "min_level_db", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio._denormalize_tensorflow": [[154, 156], ["tensorflow.clip_by_value", "audio.spectrogram"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.audio.spectrogram"], ["", "def", "_denormalize_tensorflow", "(", "S", ")", ":", "\n", "  ", "return", "(", "tf", ".", "clip_by_value", "(", "S", ",", "0", ",", "1", ")", "*", "-", "hparams", ".", "min_level_db", ")", "+", "hparams", ".", "min_level_db", "\n", "", ""]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.plot.plot_alignment": [[10, 25], ["matplotlib.subplots", "ax.imshow", "fig.colorbar", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.savefig"], "function", ["None"], ["def", "plot_alignment", "(", "alignment", ",", "path", ",", "info", "=", "None", ")", ":", "\n", "  ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "\n", "alignment", ",", "\n", "aspect", "=", "'auto'", ",", "\n", "origin", "=", "'lower'", ",", "\n", "interpolation", "=", "'none'", ")", "\n", "fig", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "xlabel", "=", "'Decoder timestep'", "\n", "if", "info", "is", "not", "None", ":", "\n", "    ", "xlabel", "+=", "'\\n\\n'", "+", "info", "\n", "", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "plt", ".", "ylabel", "(", "'Encoder timestep'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "path", ",", "format", "=", "'png'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.__init__": [[6, 9], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "window_size", "=", "100", ")", ":", "\n", "    ", "self", ".", "_window_size", "=", "window_size", "\n", "self", ".", "_values", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.append": [[10, 12], ["None"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "x", ")", ":", "\n", "    ", "self", ".", "_values", "=", "self", ".", "_values", "[", "-", "(", "self", ".", "_window_size", "-", "1", ")", ":", "]", "+", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.sum": [[13, 16], ["__init__.ValueWindow.sum"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.sum"], ["", "@", "property", "\n", "def", "sum", "(", "self", ")", ":", "\n", "    ", "return", "sum", "(", "self", ".", "_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.count": [[17, 20], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "count", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.average": [[21, 24], ["max"], "methods", ["None"], ["", "@", "property", "\n", "def", "average", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "sum", "/", "max", "(", "1", ",", "self", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.reset": [[25, 27], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "_values", "=", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention.__init__": [[24, 37], ["query.get_shape().as_list", "query.get_shape"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "query", ",", "\n", "value", ",", "\n", "num_heads", "=", "4", ",", "\n", "attention_type", "=", "'mlp_attention'", ",", "\n", "num_units", "=", "None", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "    ", "self", ".", "query", "=", "query", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attention_type", "=", "attention_type", "\n", "self", ".", "num_units", "=", "num_units", "or", "query", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention.multi_head_attention": [[38, 57], ["ValueError", "tensorflow.variable_scope", "tensorflow.layers.conv1d", "multihead_attention.MultiheadAttention._split_heads", "multihead_attention.MultiheadAttention._combine_heads", "multihead_attention.MultiheadAttention._mlp_attention", "multihead_attention.MultiheadAttention._dot_product", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv1d", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._split_heads", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._combine_heads", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._mlp_attention", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._dot_product"], ["", "def", "multi_head_attention", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "num_units", "%", "self", ".", "num_heads", "!=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\"Multi head attention requires that num_units is a\"", "\n", "\" multiple of {}\"", ".", "format", "(", "num_heads", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"Multihead-attention\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "#q = tf.layers.conv1d(self.query, self.num_units, 1)", "\n", "      ", "q", "=", "self", ".", "query", "\n", "k", "=", "tf", ".", "layers", ".", "conv1d", "(", "self", ".", "value", ",", "self", ".", "num_units", ",", "1", ")", "\n", "v", "=", "self", ".", "value", "\n", "qs", ",", "ks", ",", "vs", "=", "self", ".", "_split_heads", "(", "q", ",", "k", ",", "v", ")", "\n", "if", "self", ".", "attention_type", "==", "'mlp_attention'", ":", "\n", "        ", "style_embeddings", "=", "self", ".", "_mlp_attention", "(", "qs", ",", "ks", ",", "vs", ")", "\n", "", "elif", "self", ".", "attention_type", "==", "'dot_attention'", ":", "\n", "        ", "style_embeddings", "=", "self", ".", "_dot_product", "(", "qs", ",", "ks", ",", "vs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Only mlp_attention and dot_attention are supported'", ")", "\n", "\n", "", "return", "self", ".", "_combine_heads", "(", "style_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._split_heads": [[58, 69], ["tensorflow.transpose", "tensorflow.transpose", "util.ops.shape_list", "tensorflow.tile", "multihead_attention.MultiheadAttention._split_last_dimension", "multihead_attention.MultiheadAttention._split_last_dimension", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.ops.shape_list", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._split_last_dimension", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._split_last_dimension"], ["", "", "def", "_split_heads", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "    ", "'''Split the channels into multiple heads\n    \n    Returns:\n         Tensors with shape [batch, num_heads, length_x, dim_x/num_heads]\n    '''", "\n", "qs", "=", "tf", ".", "transpose", "(", "self", ".", "_split_last_dimension", "(", "q", ",", "self", ".", "num_heads", ")", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "ks", "=", "tf", ".", "transpose", "(", "self", ".", "_split_last_dimension", "(", "k", ",", "self", ".", "num_heads", ")", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "v_shape", "=", "shape_list", "(", "v", ")", "\n", "vs", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "v", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "self", ".", "num_heads", ",", "1", ",", "1", "]", ")", "\n", "return", "qs", ",", "ks", ",", "vs", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._split_last_dimension": [[70, 80], ["util.ops.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.ops.shape_list"], ["", "def", "_split_last_dimension", "(", "self", ",", "x", ",", "num_heads", ")", ":", "\n", "    ", "'''Reshape x to num_heads\n\n    Returns:\n        a Tensor with shape [batch, length_x, num_heads, dim_x/num_heads]\n    '''", "\n", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "dim", "=", "x_shape", "[", "-", "1", "]", "\n", "assert", "dim", "%", "num_heads", "==", "0", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "x_shape", "[", ":", "-", "1", "]", "+", "[", "num_heads", ",", "dim", "//", "num_heads", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._dot_product": [[81, 94], ["tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_dot_product", "(", "self", ",", "qs", ",", "ks", ",", "vs", ")", ":", "\n", "    ", "'''dot-product computation\n\n    Returns:\n        a context vector with shape [batch, num_heads, length_q, dim_vs]\n    '''", "\n", "qk", "=", "tf", ".", "matmul", "(", "qs", ",", "ks", ",", "transpose_b", "=", "True", ")", "\n", "scale_factor", "=", "(", "self", ".", "num_units", "//", "self", ".", "num_heads", ")", "**", "-", "0.5", "\n", "if", "self", ".", "normalize", ":", "\n", "      ", "qk", "*=", "scale_factor", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "qk", ",", "name", "=", "\"dot_attention_weights\"", ")", "\n", "context", "=", "tf", ".", "matmul", "(", "weights", ",", "vs", ")", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._mlp_attention": [[95, 134], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.get_variable", "tensorflow.layers.dense", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.transpose", "tensorflow.layers.dense.get_shape", "tensorflow.rsqrt", "math.sqrt", "tensorflow.zeros_initializer", "tensorflow.reduce_sum", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.square"], "methods", ["None"], ["", "def", "_mlp_attention", "(", "self", ",", "qs", ",", "ks", ",", "vs", ")", ":", "\n", "    ", "'''MLP computation modified from https://github.com/npuichigo\n\n    Returns:\n        a context vector with shape [batch, num_heads, length_q, dim_vs]\n    '''", "\n", "num_units", "=", "qs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "dtype", "=", "qs", ".", "dtype", "\n", "\n", "qs", "=", "tf", ".", "layers", ".", "dense", "(", "qs", ",", "self", ".", "num_units", ")", "\n", "ks", "=", "tf", ".", "layers", ".", "dense", "(", "ks", ",", "self", ".", "num_units", ")", "\n", "vs", "=", "tf", ".", "layers", ".", "dense", "(", "vs", ",", "self", ".", "num_units", ")", "\n", "\n", "v", "=", "tf", ".", "get_variable", "(", "\"attention_v\"", ",", "[", "num_units", "]", ",", "dtype", "=", "dtype", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "#https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/contrib/seq2seq/python/ops/attention_wrapper.py#L470", "\n", "# Scalar used in weight normalization", "\n", "      ", "g", "=", "tf", ".", "get_variable", "(", "\n", "\"attention_g\"", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "math", ".", "sqrt", "(", "(", "1.", "/", "num_units", ")", ")", ")", "\n", "# Bias added prior to the nonlinearity", "\n", "b", "=", "tf", ".", "get_variable", "(", "\n", "\"attention_b\"", ",", "[", "num_units", "]", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "# normed_v = g * v / ||v||", "\n", "normed_v", "=", "g", "*", "v", "*", "tf", ".", "rsqrt", "(", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ")", ")", "\n", "# Single layer multilayer perceptron.", "\n", "add", "=", "tf", ".", "reduce_sum", "(", "normed_v", "*", "tf", ".", "tanh", "(", "ks", "+", "qs", "+", "b", ")", ",", "[", "-", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "", "else", ":", "\n", "# Single layer multilayer perceptron.", "\n", "      ", "add", "=", "tf", ".", "reduce_sum", "(", "v", "*", "tf", ".", "tanh", "(", "ks", "+", "qs", ")", ",", "[", "-", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "\n", "", "add", "=", "tf", ".", "layers", ".", "dense", "(", "add", ",", "self", ".", "num_units", ")", "\n", "# Compute attention weights.", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "add", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", ",", "name", "=", "\"mlp_attention_weights\"", ")", "\n", "# Compute attention context.", "\n", "context", "=", "tf", ".", "matmul", "(", "weights", ",", "vs", ")", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.multihead_attention.MultiheadAttention._combine_heads": [[135, 144], ["tensorflow.transpose", "util.ops.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.ops.shape_list"], ["", "def", "_combine_heads", "(", "self", ",", "x", ")", ":", "\n", "    ", "'''Combine all heads\n\n       Returns:\n           a Tensor with shape [batch, length_x, shape_x[-1] * shape_x[-3]]\n    '''", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "x_shape", "[", ":", "-", "2", "]", "+", "[", "self", ".", "num_heads", "*", "x_shape", "[", "-", "1", "]", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._norm": [[9, 33], ["tensorflow.variable_scope", "tensorflow.nn.moments", "tensorflow.variable_scope", "tensorflow.contrib.layers.batch_norm", "tensorflow.sqrt"], "function", ["None"], ["  ", "\"\"\"Return list of dims, statically where possible.\"\"\"", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "\n", "# If unknown rank, return dynamic shape", "\n", "if", "x", ".", "get_shape", "(", ")", ".", "dims", "is", "None", ":", "\n", "    ", "return", "tf", ".", "shape", "(", "x", ")", "\n", "\n", "", "static", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "static", ")", ")", ":", "\n", "    ", "dim", "=", "static", "[", "i", "]", "\n", "if", "dim", "is", "None", ":", "\n", "      ", "dim", "=", "shape", "[", "i", "]", "\n", "", "ret", ".", "append", "(", "dim", ")", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._activation": [[34, 46], ["tensorflow.nn.relu", "tensorflow.contrib.keras.layers.LeakyReLU", "tensorflow.tanh", "tensorflow.sigmoid"], "function", ["None"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.flatten": [[47, 49], ["tensorflow.reshape", "numpy.prod", "input.get_shape().as_list", "input.get_shape"], "function", ["None"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.conv2d": [[50, 68], ["tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.pad", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.get_variable", "input.get_shape", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.conv2d_transpose": [[69, 80], ["input.get_shape().as_list", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "tensorflow.random_normal_initializer", "input.get_shape"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.conv2d_transpose"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.mlp": [[81, 93], ["tensorflow.variable_scope", "input.get_shape", "tensorflow.get_variable", "tensorflow.matmul", "ops._activation", "ops._norm", "tensorflow.random_normal_initializer", "tensorflow.get_variable", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._activation", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._norm"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.conv_block": [[94, 101], ["tensorflow.variable_scope", "ops.conv2d", "ops._norm", "ops._activation"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._norm", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._activation"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.residual": [[102, 118], ["tensorflow.variable_scope", "tensorflow.nn.relu", "tensorflow.variable_scope", "ops.conv2d", "ops._norm", "tensorflow.nn.relu", "tensorflow.variable_scope", "ops.conv2d", "ops._norm", "tensorflow.variable_scope", "ops.conv2d"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._norm", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._norm", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.deconv_block": [[119, 126], ["tensorflow.variable_scope", "ops.conv2d_transpose", "ops._norm", "ops._activation"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.conv2d_transpose", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._norm", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops._activation"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.deconv_block_tts": [[129, 136], ["tensorflow.variable_scope", "tensorflow.nn.conv2d_transpose"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.conv2d_transpose"], []], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.prenet": [[10, 19], ["tensorflow.variable_scope", "enumerate", "tensorflow.layers.dense", "tensorflow.layers.dropout"], "function", ["None"], ["def", "prenet", "(", "inputs", ",", "is_training", ",", "layer_sizes", "=", "[", "256", ",", "128", "]", ",", "scope", "=", "None", ")", ":", "\n", "  ", "x", "=", "inputs", "\n", "# Dropout in both training and testing", "\n", "drop_rate", "=", "0.5", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "'prenet'", ")", ":", "\n", "    ", "for", "i", ",", "size", "in", "enumerate", "(", "layer_sizes", ")", ":", "\n", "      ", "dense", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "units", "=", "size", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "'dense_%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "x", "=", "tf", ".", "layers", ".", "dropout", "(", "dense", ",", "rate", "=", "drop_rate", ",", "training", "=", "True", ",", "name", "=", "'dropout_%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.reference_encoder": [[20, 39], ["tensorflow.variable_scope", "tensorflow.expand_dims", "enumerate", "util.ops.shape_list", "tensorflow.reshape", "tensorflow.nn.dynamic_rnn", "tensorflow.layers.dense", "modules.conv2d"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.util.ops.shape_list", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d"], ["", "def", "reference_encoder", "(", "inputs", ",", "filters", ",", "kernel_size", ",", "strides", ",", "encoder_cell", ",", "is_training", ",", "scope", "=", "'ref_encoder'", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "    ", "ref_outputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "axis", "=", "-", "1", ")", "\n", "# CNN stack", "\n", "for", "i", ",", "channel", "in", "enumerate", "(", "filters", ")", ":", "\n", "      ", "ref_outputs", "=", "conv2d", "(", "ref_outputs", ",", "channel", ",", "kernel_size", ",", "strides", ",", "tf", ".", "nn", ".", "relu", ",", "is_training", ",", "'conv2d_%d'", "%", "i", ")", "\n", "\n", "", "shapes", "=", "shape_list", "(", "ref_outputs", ")", "\n", "ref_outputs", "=", "tf", ".", "reshape", "(", "\n", "ref_outputs", ",", "\n", "shapes", "[", ":", "-", "2", "]", "+", "[", "shapes", "[", "2", "]", "*", "shapes", "[", "3", "]", "]", ")", "\n", "# RNN", "\n", "encoder_outputs", ",", "encoder_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "encoder_cell", ",", "\n", "ref_outputs", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "reference_state", "=", "tf", ".", "layers", ".", "dense", "(", "encoder_outputs", "[", ":", ",", "-", "1", ",", ":", "]", ",", "128", ",", "activation", "=", "tf", ".", "nn", ".", "tanh", ")", "# [N, 128]", "\n", "return", "reference_state", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.encoder_cbhg": [[41, 49], ["modules.cbhg"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.cbhg"], ["", "", "def", "encoder_cbhg", "(", "inputs", ",", "input_lengths", ",", "is_training", ")", ":", "\n", "  ", "return", "cbhg", "(", "\n", "inputs", ",", "\n", "input_lengths", ",", "\n", "is_training", ",", "\n", "scope", "=", "'encoder_cbhg'", ",", "\n", "K", "=", "16", ",", "\n", "projections", "=", "[", "128", ",", "128", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.post_cbhg": [[51, 59], ["modules.cbhg"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.cbhg"], ["", "def", "post_cbhg", "(", "inputs", ",", "input_dim", ",", "is_training", ")", ":", "\n", "  ", "return", "cbhg", "(", "\n", "inputs", ",", "\n", "None", ",", "\n", "is_training", ",", "\n", "scope", "=", "'post_cbhg'", ",", "\n", "K", "=", "8", ",", "\n", "projections", "=", "[", "256", ",", "input_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.cbhg": [[61, 101], ["tensorflow.variable_scope", "tensorflow.layers.max_pooling1d", "modules.conv1d", "modules.conv1d", "range", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.layers.dense", "modules.highwaynet", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.GRUCell", "modules.conv1d", "range"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv1d", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv1d", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.highwaynet", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv1d"], ["", "def", "cbhg", "(", "inputs", ",", "input_lengths", ",", "is_training", ",", "scope", ",", "K", ",", "projections", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'conv_bank'", ")", ":", "\n", "# Convolution bank: concatenate on the last axis to stack channels from all convolutions", "\n", "      ", "conv_outputs", "=", "tf", ".", "concat", "(", "\n", "[", "conv1d", "(", "inputs", ",", "k", ",", "128", ",", "tf", ".", "nn", ".", "relu", ",", "is_training", ",", "'conv1d_%d'", "%", "k", ")", "for", "k", "in", "range", "(", "1", ",", "K", "+", "1", ")", "]", ",", "\n", "axis", "=", "-", "1", "\n", ")", "\n", "\n", "# Maxpooling:", "\n", "", "maxpool_output", "=", "tf", ".", "layers", ".", "max_pooling1d", "(", "\n", "conv_outputs", ",", "\n", "pool_size", "=", "2", ",", "\n", "strides", "=", "1", ",", "\n", "padding", "=", "'same'", ")", "\n", "\n", "# Two projection layers:", "\n", "proj1_output", "=", "conv1d", "(", "maxpool_output", ",", "3", ",", "projections", "[", "0", "]", ",", "tf", ".", "nn", ".", "relu", ",", "is_training", ",", "'proj_1'", ")", "\n", "proj2_output", "=", "conv1d", "(", "proj1_output", ",", "3", ",", "projections", "[", "1", "]", ",", "None", ",", "is_training", ",", "'proj_2'", ")", "\n", "\n", "# Residual connection:", "\n", "highway_input", "=", "proj2_output", "+", "inputs", "\n", "\n", "# Handle dimensionality mismatch:", "\n", "if", "highway_input", ".", "shape", "[", "2", "]", "!=", "128", ":", "\n", "      ", "highway_input", "=", "tf", ".", "layers", ".", "dense", "(", "highway_input", ",", "128", ")", "\n", "\n", "# 4-layer HighwayNet:", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "      ", "highway_input", "=", "highwaynet", "(", "highway_input", ",", "'highway_%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "", "rnn_input", "=", "highway_input", "\n", "\n", "# Bidirectional RNN", "\n", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "GRUCell", "(", "128", ")", ",", "\n", "GRUCell", "(", "128", ")", ",", "\n", "rnn_input", ",", "\n", "sequence_length", "=", "input_lengths", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "# Concat forward and backward", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.highwaynet": [[103, 117], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.constant_initializer"], "function", ["None"], ["", "", "def", "highwaynet", "(", "inputs", ",", "scope", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "    ", "H", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inputs", ",", "\n", "units", "=", "128", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "'H'", ")", "\n", "T", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inputs", ",", "\n", "units", "=", "128", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "name", "=", "'T'", ",", "\n", "bias_initializer", "=", "tf", ".", "constant_initializer", "(", "-", "1.0", ")", ")", "\n", "return", "H", "*", "T", "+", "inputs", "*", "(", "1.0", "-", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv1d": [[119, 128], ["tensorflow.variable_scope", "tensorflow.layers.conv1d", "tensorflow.layers.batch_normalization", "tensorflow.tf.nn.relu", "tensorflow.tf.nn.relu"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv1d"], ["", "", "def", "conv1d", "(", "inputs", ",", "kernel_size", ",", "channels", ",", "activation", ",", "is_training", ",", "scope", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "    ", "conv1d_output", "=", "tf", ".", "layers", ".", "conv1d", "(", "\n", "inputs", ",", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "activation", "=", "activation", ",", "\n", "padding", "=", "'same'", ")", "\n", "return", "tf", ".", "layers", ".", "batch_normalization", "(", "conv1d_output", ",", "training", "=", "is_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d": [[129, 141], ["tensorflow.variable_scope", "tensorflow.layers.conv2d", "tensorflow.layers.batch_normalization", "tensorflow.tf.nn.relu"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv2d"], ["", "", "def", "conv2d", "(", "inputs", ",", "filters", ",", "kernel_size", ",", "strides", ",", "activation", ",", "is_training", ",", "scope", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "    ", "conv2d_output", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "inputs", ",", "\n", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "'same'", ")", "\n", "conv2d_output", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "conv2d_output", ",", "training", "=", "is_training", ")", "\n", "if", "activation", "is", "not", "None", ":", "\n", "      ", "conv2d_output", "=", "activation", "(", "conv2d_output", ")", "\n", "", "return", "conv2d_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.info_encoder": [[142, 154], ["tensorflow.vairable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.constant_initializer"], "function", ["None"], ["", "", "def", "info_encoder", "(", "inputs", ",", "scope", ")", ":", "\n", "    ", "with", "tf", ".", "vairable_scope", "(", "scope", ")", ":", "\n", "      ", "A", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "\n", "units", "=", "256", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "'A'", ")", "\n", "B", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "\n", "units", "=", "256", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "name", "=", "'B'", ",", "\n", "bias_initializer", "=", "tf", ".", "constant_initializer", "(", "-", "1.0", ")", ")", "\n", "return", "A", "*", "B", "+", "inputs", "*", "(", "1.0", "-", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.domain_classifier": [[156, 165], ["tensorflow.variable_scope", "tensorflow.layers.conv1d", "tensorflow.layers.batch_normalization", "tensorflow.layers.dense"], "function", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.conv1d"], ["", "", "def", "domain_classifier", "(", "inputs", ",", "scope", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "      ", "output", "=", "tf", ".", "layers", ".", "conv1d", "(", "\n", "inputs", ",", "\n", "filters", "=", "128", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "output", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "output", ",", "training", "=", "is_training", ")", "\n", "logit", "=", "tf", ".", "layers", ".", "dense", "(", "outputs", ",", "units", "=", "3", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper.__init__": [[19, 36], ["tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "\n", "cell", ",", "\n", "window_size", ",", "\n", "num_attn_mixture", ",", "\n", "memory", ",", "\n", "memory_sequence_length", "=", "None", ",", "\n", "name", "=", "\"GMMAttention\"", ")", ":", "\n", "    ", "\"\"\"Construct the GMM-based Attention mechanism wrapper.\n\n    \"\"\"", "\n", "self", ".", "_cell", "=", "cell", "\n", "self", ".", "_num_attn_mixture", "=", "num_attn_mixture", "\n", "self", ".", "_memory", "=", "memory", "\n", "self", ".", "_memory_sequence_length", "=", "memory_sequence_length", "\n", "self", ".", "_window_size", "=", "window_size", "\n", "self", ".", "_char_len", "=", "tf", ".", "shape", "(", "self", ".", "_memory", ")", "[", "1", "]", "\n", "self", ".", "_batch_size", "=", "tf", ".", "shape", "(", "self", ".", "_memory", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper.state_size": [[37, 50], ["GMMAttentionWrapperState", "tensorflow.TensorShape"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "GMMAttentionWrapperState", "(", "\n", "self", ".", "_cell", ".", "state_size", ",", "\n", "self", ".", "_cell", ".", "state_size", ",", "\n", "self", ".", "_window_size", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "self", ".", "_num_attn_mixture", ",", "\n", "self", ".", "_num_attn_mixture", ",", "\n", "self", ".", "_num_attn_mixture", ",", "\n", "self", ".", "_window_size", ",", "\n", "self", ".", "_char_len", ",", "\n", "self", ".", "_char_len", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper.output_size": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper.zero_state": [[56, 73], ["_zero_state_tensors", "GMMAttentionWrapperState", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.TensorArray"], "methods", ["None"], ["", "def", "zero_state", "(", "self", ",", "batch_size", ",", "dtype", ")", ":", "\n", "    ", "initial_alignments", "=", "_zero_state_tensors", "(", "self", ".", "_char_len", ",", "batch_size", ",", "dtype", ")", "\n", "return", "GMMAttentionWrapperState", "(", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_cell", ".", "state_size", "]", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_cell", ".", "state_size", "]", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_window_size", "]", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_num_attn_mixture", "]", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_num_attn_mixture", "]", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_num_attn_mixture", "]", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_window_size", "]", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_char_len", "]", ")", ",", "\n", "tf", ".", "TensorArray", "(", "\n", "dtype", ",", "\n", "size", "=", "0", ",", "\n", "dynamic_size", "=", "True", ",", "\n", "element_shape", "=", "initial_alignments", ".", "shape", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper._get_params": [[75, 90], ["tensorflow.layers.dense", "tensorflow.split", "tensorflow.exp"], "methods", ["None"], ["", "def", "_get_params", "(", "self", ",", "cell_out", ",", "prev_kappa", ")", ":", "\n", "    ", "\"\"\"Compute window parameters\n    \n    In GMM-based attention, the location parameters kappa are defined \n    as offsets from the previous locations, and that the size of the \n    offset is constrained to be greater than zero. Then we get:\n\n    alpha: the importance of the window within the mixture.\n    beta: the width of the window.\n    kappa: the location of the window.\n    \"\"\"", "\n", "window_params", "=", "tf", ".", "layers", ".", "dense", "(", "cell_out", ",", "units", "=", "3", "*", "self", ".", "_num_attn_mixture", ")", "\n", "alpha", ",", "beta", ",", "kappa", "=", "tf", ".", "split", "(", "tf", ".", "exp", "(", "window_params", ")", ",", "3", ",", "axis", "=", "1", ")", "\n", "kappa", "=", "kappa", "+", "prev_kappa", "\n", "return", "alpha", ",", "beta", ",", "kappa", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper._gmm_score": [[91, 102], ["tensorflow.tile", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.range", "tensorflow.exp", "tensorflow.square"], "methods", ["None"], ["", "def", "_gmm_score", "(", "self", ",", "alpha", ",", "beta", ",", "kappa", ")", ":", "\n", "    ", "\"\"\"Compute the window weights phi(t,u) of c_u at time t\n    \"\"\"", "\n", "\n", "u", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "tf", ".", "range", "(", "self", ".", "_char_len", ")", ",", "(", "1", ",", "1", ",", "self", ".", "_char_len", ")", ")", ",", "\n", "(", "self", ".", "_batch_size", ",", "self", ".", "_num_attn_mixture", ",", "1", ")", ")", "\n", "u", "=", "tf", ".", "cast", "(", "u", ",", "tf", ".", "float32", ")", "\n", "phi", "=", "tf", ".", "reduce_sum", "(", "alpha", "*", "tf", ".", "exp", "(", "-", "tf", ".", "square", "(", "kappa", "-", "u", ")", "/", "beta", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper._compute_attention": [[103, 114], ["gmm_attention_wrapper.GMMAttentionWrapper._gmm_score", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.sequence_mask"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper._gmm_score"], ["", "def", "_compute_attention", "(", "self", ",", "alpha", ",", "beta", ",", "kappa", ")", ":", "\n", "    ", "\"\"\"Compute the attention\n    \"\"\"", "\n", "phi_flat", "=", "self", ".", "_gmm_score", "(", "alpha", ",", "beta", ",", "kappa", ")", "\n", "phi", "=", "tf", ".", "expand_dims", "(", "phi_flat", ",", "2", ")", "\n", "\n", "sequence_mask", "=", "tf", ".", "cast", "(", "tf", ".", "sequence_mask", "(", "self", ".", "_memory_sequence_length", ",", "maxlen", "=", "self", ".", "_char_len", ")", ",", "tf", ".", "float32", ")", "\n", "sequence_mask", "=", "tf", ".", "expand_dims", "(", "sequence_mask", ",", "2", ")", "\n", "window", "=", "tf", ".", "reduce_sum", "(", "phi", "*", "self", ".", "_memory", "*", "sequence_mask", ",", "axis", "=", "1", ")", "\n", "\n", "return", "phi_flat", ",", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper.__call__": [[115, 151], ["tensorflow.variable_scope", "tensorflow.concat", "gmm_attention_wrapper.GMMAttentionWrapper._cell", "gmm_attention_wrapper.GMMAttentionWrapper._get_params", "gmm_attention_wrapper.GMMAttentionWrapper._compute_attention", "previous_alignment_history[].write", "maybe_all_histories.append", "GMMAttentionWrapperState", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper._get_params", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.gmm_attention_wrapper.GMMAttentionWrapper._compute_attention", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.append"], ["", "def", "__call__", "(", "self", ",", "query", ",", "state", ",", "scope", "=", "\"gmm_attention\"", ")", ":", "\n", "    ", "\"\"\"Score the query based on the keys and values.\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "# I concat the GMM windows and query as the inputs of the prenet (Alex Graves's paper)", "\n", "      ", "cur_inputs", "=", "tf", ".", "concat", "(", "[", "query", ",", "state", ".", "window", "]", ",", "axis", "=", "-", "1", ")", "\n", "cell_out", ",", "cell_state", "=", "self", ".", "_cell", "(", "cur_inputs", ",", "state", ".", "cell_state", ")", "\n", "\n", "previous_alignment_history", "=", "[", "state", ".", "alignment_history", "]", "\n", "maybe_all_histories", "=", "[", "]", "\n", "\n", "# GMM attention", "\n", "alpha_flat", ",", "beta_flat", ",", "kappa_flat", "=", "self", ".", "_get_params", "(", "cell_out", ",", "state", ".", "kappa", ")", "\n", "alpha", ",", "beta", ",", "kappa", "=", "tf", ".", "expand_dims", "(", "alpha_flat", ",", "2", ")", ",", "tf", ".", "expand_dims", "(", "beta_flat", ",", "2", ")", ",", "tf", ".", "expand_dims", "(", "kappa_flat", ",", "2", ")", "\n", "\n", "phi_flat", ",", "window_flat", "=", "self", ".", "_compute_attention", "(", "alpha", ",", "beta", ",", "kappa", ")", "\n", "attention", "=", "window_flat", "\n", "\n", "alignment_history", "=", "previous_alignment_history", "[", "0", "]", ".", "write", "(", "state", ".", "time", ",", "phi_flat", ")", "\n", "maybe_all_histories", ".", "append", "(", "alignment_history", ")", "\n", "\n", "new_state", "=", "GMMAttentionWrapperState", "(", "\n", "cell_out", ",", "\n", "cell_state", ",", "\n", "attention", ",", "\n", "state", ".", "time", "+", "1", ",", "\n", "alpha_flat", ",", "\n", "beta_flat", ",", "\n", "kappa_flat", ",", "\n", "window_flat", ",", "\n", "phi_flat", ",", "\n", "maybe_all_histories", "[", "0", "]", "\n", ")", "\n", "\n", "#return tf.concat([query, cell_out], axis=-1), new_state", "\n", "return", "cell_out", ",", "new_state", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.generator.Generator.__init__": [[10, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "is_train", ",", "norm", "=", "'batch'", ",", "image_size", "=", "256", ")", ":", "\n", "#logger.info('Init Generator %s', name)", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_is_train", "=", "is_train", "\n", "self", ".", "_norm", "=", "norm", "\n", "self", ".", "_reuse", "=", "False", "\n", "self", ".", "_image_size", "=", "image_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.generator.Generator.__call__": [[18, 52], ["tensorflow.variable_scope", "int", "int", "tensorflow.reshape", "tensorflow.tile", "tensorflow.concat", "enumerate", "layers.pop", "num_filters.pop", "num_filters.reverse", "enumerate", "ops.deconv_block", "tensorflow.get_collection", "num_filters.append", "ops.conv_block", "layers.append", "ops.deconv_block", "tensorflow.concat", "input.get_shape", "tensorflow.tile.get_shape", "layers.pop"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.deconv_block", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.append", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.conv_block", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.append", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.deconv_block"], ["", "def", "__call__", "(", "self", ",", "input", ",", "z", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "self", ".", "_reuse", ")", ":", "\n", "            ", "batch_size", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "0", "]", ")", "\n", "latent_dim", "=", "int", "(", "z", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "num_filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", "]", "\n", "if", "self", ".", "_image_size", "==", "256", ":", "\n", "                ", "num_filters", ".", "append", "(", "512", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "G", "=", "input", "\n", "z", "=", "tf", ".", "reshape", "(", "z", ",", "[", "batch_size", ",", "1", ",", "1", ",", "latent_dim", "]", ")", "\n", "z", "=", "tf", ".", "tile", "(", "z", ",", "[", "1", ",", "self", ".", "_image_size", ",", "self", ".", "_image_size", ",", "1", "]", ")", "\n", "G", "=", "tf", ".", "concat", "(", "[", "G", ",", "z", "]", ",", "axis", "=", "3", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "num_filters", ")", ":", "\n", "                ", "G", "=", "ops", ".", "conv_block", "(", "G", ",", "n", ",", "'C{}_{}'", ".", "format", "(", "n", ",", "i", ")", ",", "4", ",", "2", ",", "self", ".", "_is_train", ",", "\n", "self", ".", "_reuse", ",", "norm", "=", "self", ".", "_norm", "if", "i", "else", "None", ",", "activation", "=", "'leaky'", ")", "\n", "layers", ".", "append", "(", "G", ")", "\n", "\n", "", "layers", ".", "pop", "(", ")", "\n", "num_filters", ".", "pop", "(", ")", "\n", "num_filters", ".", "reverse", "(", ")", "\n", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "num_filters", ")", ":", "\n", "                ", "G", "=", "ops", ".", "deconv_block", "(", "G", ",", "n", ",", "'CD{}_{}'", ".", "format", "(", "n", ",", "i", ")", ",", "4", ",", "2", ",", "self", ".", "_is_train", ",", "\n", "self", ".", "_reuse", ",", "norm", "=", "self", ".", "_norm", ",", "activation", "=", "'relu'", ")", "\n", "G", "=", "tf", ".", "concat", "(", "[", "G", ",", "layers", ".", "pop", "(", ")", "]", ",", "axis", "=", "3", ")", "\n", "", "G", "=", "ops", ".", "deconv_block", "(", "G", ",", "3", ",", "'last_layer'", ",", "4", ",", "2", ",", "self", ".", "_is_train", ",", "\n", "self", ".", "_reuse", ",", "norm", "=", "None", ",", "activation", "=", "'tanh'", ")", "\n", "\n", "self", ".", "_reuse", "=", "True", "\n", "self", ".", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "name", ")", "\n", "\n", "return", "G", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTestHelper.__init__": [[13, 19], ["tensorflow.name_scope", "tensorflow.tile"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "batch_size", ",", "hp", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'TacoTestHelper'", ")", ":", "\n", "      ", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_output_dim", "=", "hp", ".", "num_mels", "\n", "self", ".", "_end_token", "=", "tf", ".", "tile", "(", "[", "0.0", "]", ",", "[", "self", ".", "_output_dim", "*", "hp", ".", "outputs_per_step", "]", ")", "\n", "self", ".", "_hp", "=", "hp", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTestHelper.batch_size": [[20, 23], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTestHelper.sample_ids_shape": [[24, 27], ["tensorflow.TensorShape"], "methods", ["None"], ["", "@", "property", "\n", "def", "sample_ids_shape", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "TensorShape", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTestHelper.sample_ids_dtype": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sample_ids_dtype", "(", "self", ")", ":", "\n", "    ", "return", "np", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTestHelper.initialize": [[32, 34], ["tensorflow.tile", "helpers._go_frames"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers._go_frames"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "(", "tf", ".", "tile", "(", "[", "False", "]", ",", "[", "self", ".", "_batch_size", "]", ")", ",", "_go_frames", "(", "self", ".", "_batch_size", ",", "self", ".", "_hp", ".", "prenet_depths", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTestHelper.sample": [[35, 37], ["tensorflow.tile"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "tile", "(", "[", "0", "]", ",", "[", "self", ".", "_batch_size", "]", ")", "# Return all 0; we ignore them", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTestHelper.next_inputs": [[38, 46], ["tensorflow.name_scope", "tensorflow.reduce_all", "modules.prenet", "tensorflow.equal"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.prenet"], ["", "def", "next_inputs", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "    ", "'''Stop on EOS. Otherwise, pass the last output as the next input and pass through state.'''", "\n", "with", "tf", ".", "name_scope", "(", "'TacoTestHelper'", ")", ":", "\n", "      ", "finished", "=", "tf", ".", "reduce_all", "(", "tf", ".", "equal", "(", "outputs", ",", "self", ".", "_end_token", ")", ",", "axis", "=", "1", ")", "\n", "# Feed last output frame as next input. outputs is [N, output_dim * r]", "\n", "next_inputs", "=", "outputs", "[", ":", ",", "-", "self", ".", "_output_dim", ":", "]", "\n", "next_inputs", "=", "prenet", "(", "next_inputs", ",", "True", ",", "self", ".", "_hp", ".", "prenet_depths", ",", "\"decoder_prenet\"", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTrainingHelper.__init__": [[49, 62], ["tensorflow.name_scope", "tensorflow.tile", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "inputs", ",", "targets", ",", "hp", ")", ":", "\n", "# inputs is [N, T_in], targets is [N, T_out, D]", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'TacoTrainingHelper'", ")", ":", "\n", "      ", "self", ".", "_batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "self", ".", "_output_dim", "=", "hp", ".", "num_mels", "\n", "\n", "# Feed every r-th target frame as input", "\n", "self", ".", "_targets", "=", "targets", "[", ":", ",", "hp", ".", "outputs_per_step", "-", "1", ":", ":", "hp", ".", "outputs_per_step", ",", ":", "]", "\n", "self", ".", "_hp", "=", "hp", "\n", "\n", "# Use full length for every target because we don't want to mask the padding frames", "\n", "num_steps", "=", "tf", ".", "shape", "(", "self", ".", "_targets", ")", "[", "1", "]", "\n", "self", ".", "_lengths", "=", "tf", ".", "tile", "(", "[", "num_steps", "]", ",", "[", "self", ".", "_batch_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTrainingHelper.batch_size": [[63, 66], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTrainingHelper.sample_ids_shape": [[67, 70], ["tensorflow.TensorShape"], "methods", ["None"], ["", "@", "property", "\n", "def", "sample_ids_shape", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "TensorShape", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTrainingHelper.sample_ids_dtype": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sample_ids_dtype", "(", "self", ")", ":", "\n", "    ", "return", "np", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTrainingHelper.initialize": [[75, 77], ["tensorflow.tile", "helpers._go_frames"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers._go_frames"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "(", "tf", ".", "tile", "(", "[", "False", "]", ",", "[", "self", ".", "_batch_size", "]", ")", ",", "_go_frames", "(", "self", ".", "_batch_size", ",", "self", ".", "_hp", ".", "prenet_depths", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTrainingHelper.sample": [[78, 80], ["tensorflow.tile"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "tile", "(", "[", "0", "]", ",", "[", "self", ".", "_batch_size", "]", ")", "# Return all 0; we ignore them", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers.TacoTrainingHelper.next_inputs": [[81, 87], ["tensorflow.name_scope", "modules.prenet"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.prenet"], ["", "def", "next_inputs", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", "or", "'TacoTrainingHelper'", ")", ":", "\n", "      ", "finished", "=", "(", "time", "+", "1", ">=", "self", ".", "_lengths", ")", "\n", "next_inputs", "=", "self", ".", "_targets", "[", ":", ",", "time", ",", ":", "]", "\n", "next_inputs", "=", "prenet", "(", "next_inputs", ",", "True", ",", "self", ".", "_hp", ".", "prenet_depths", ",", "\"decoder_prenet\"", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.helpers._go_frames": [[89, 92], ["tensorflow.tile"], "function", ["None"], ["", "", "", "def", "_go_frames", "(", "batch_size", ",", "output_dim", ")", ":", "\n", "  ", "'''Returns all-zero <GO> frames for a given batch size and output dimension'''", "\n", "return", "tf", ".", "tile", "(", "[", "[", "0.0", "]", "]", ",", "[", "batch_size", ",", "output_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.DecoderPrenetWrapper.__init__": [[13, 17], ["tensorflow.contrib.rnn.RNNCell.__init__"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.img_encoder.image_encoder.__init__"], ["def", "__init__", "(", "self", ",", "cell", ",", "is_training", ")", ":", "\n", "    ", "super", "(", "DecoderPrenetWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_cell", "=", "cell", "\n", "self", ".", "_is_training", "=", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.DecoderPrenetWrapper.state_size": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.DecoderPrenetWrapper.output_size": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.DecoderPrenetWrapper.call": [[26, 29], ["modules.prenet", "rnn_wrappers.DecoderPrenetWrapper._cell"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.modules.prenet"], ["", "def", "call", "(", "self", ",", "inputs", ",", "state", ")", ":", "\n", "    ", "prenet_out", "=", "prenet", "(", "inputs", ",", "self", ".", "_is_training", ",", "scope", "=", "'decoder_prenet'", ")", "\n", "return", "self", ".", "_cell", "(", "prenet_out", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.DecoderPrenetWrapper.zero_state": [[30, 32], ["rnn_wrappers.DecoderPrenetWrapper._cell.zero_state"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ConcatOutputAndAttentionWrapper.zero_state"], ["", "def", "zero_state", "(", "self", ",", "batch_size", ",", "dtype", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "zero_state", "(", "batch_size", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ConcatOutputAndAttentionWrapper.__init__": [[42, 45], ["tensorflow.contrib.rnn.RNNCell.__init__"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.img_encoder.image_encoder.__init__"], ["def", "__init__", "(", "self", ",", "cell", ")", ":", "\n", "    ", "super", "(", "ConcatOutputAndAttentionWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_cell", "=", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ConcatOutputAndAttentionWrapper.state_size": [[46, 49], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ConcatOutputAndAttentionWrapper.output_size": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "output_size", "+", "self", ".", "_cell", ".", "state_size", ".", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ConcatOutputAndAttentionWrapper.call": [[54, 57], ["rnn_wrappers.ConcatOutputAndAttentionWrapper._cell", "tensorflow.concat"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "state", ")", ":", "\n", "    ", "output", ",", "res_state", "=", "self", ".", "_cell", "(", "inputs", ",", "state", ")", "\n", "return", "tf", ".", "concat", "(", "[", "output", ",", "res_state", ".", "attention", "]", ",", "axis", "=", "-", "1", ")", ",", "res_state", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ConcatOutputAndAttentionWrapper.zero_state": [[58, 60], ["rnn_wrappers.ConcatOutputAndAttentionWrapper._cell.zero_state"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ConcatOutputAndAttentionWrapper.zero_state"], ["", "def", "zero_state", "(", "self", ",", "batch_size", ",", "dtype", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "zero_state", "(", "batch_size", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ZoneoutWrapper.__init__": [[64, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cell", ",", "zoneout_drop_prob", ",", "is_training", "=", "True", ")", ":", "\n", "    ", "self", ".", "_cell", "=", "cell", "\n", "self", ".", "_zoneout_prob", "=", "zoneout_drop_prob", "\n", "self", ".", "_is_training", "=", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ZoneoutWrapper.state_size": [[69, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ZoneoutWrapper.output_size": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.rnn_wrappers.ZoneoutWrapper.__call__": [[77, 101], ["rnn_wrappers.ZoneoutWrapper._cell", "isinstance", "isinstance", "tensorflow.split", "tensorflow.split", "enumerate", "enumerate", "tensorflow.concat", "tensorflow.random_uniform", "tensorflow.floor", "tensorflow.contrib.rnn.LSTMStateTuple", "tensorflow.shape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "    ", "output", ",", "new_state", "=", "self", ".", "_cell", "(", "inputs", ",", "state", ",", "scope", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "_cell", ".", "state_size", ",", "tuple", ")", ":", "\n", "      ", "new_state", "=", "tf", ".", "split", "(", "value", "=", "new_state", ",", "num_or_size_splits", "=", "2", ",", "axis", "=", "1", ")", "\n", "state", "=", "tf", ".", "split", "(", "value", "=", "state", ",", "num_or_size_splits", "=", "2", ",", "axis", "=", "1", ")", "\n", "", "final_new_state", "=", "[", "new_state", "[", "0", "]", ",", "new_state", "[", "1", "]", "]", "\n", "if", "self", ".", "_is_training", ":", "\n", "      ", "for", "i", ",", "state_element", "in", "enumerate", "(", "state", ")", ":", "\n", "        ", "random_tensor", "=", "1", "-", "self", ".", "_zoneout_prob", "# keep probability", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "state_element", ")", ")", "\n", "# 0. if [zoneout_prob, 1.0) and 1. if [1.0, 1.0 + zoneout_prob)", "\n", "binary_tensor", "=", "tf", ".", "floor", "(", "random_tensor", ")", "\n", "final_new_state", "[", "\n", "i", "]", "=", "(", "new_state", "[", "i", "]", "-", "state_element", ")", "*", "binary_tensor", "+", "state_element", "\n", "", "", "else", ":", "\n", "      ", "for", "i", ",", "state_element", "in", "enumerate", "(", "state", ")", ":", "\n", "        ", "final_new_state", "[", "\n", "i", "]", "=", "state_element", "*", "self", ".", "_zoneout_prob", "+", "new_state", "[", "i", "]", "*", "(", "\n", "1", "-", "self", ".", "_zoneout_prob", ")", "\n", "", "", "if", "isinstance", "(", "self", ".", "_cell", ".", "state_size", ",", "tuple", ")", ":", "\n", "      ", "return", "output", ",", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", "(", "\n", "final_new_state", "[", "0", "]", ",", "final_new_state", "[", "1", "]", ")", "\n", "\n", "", "return", "output", ",", "tf", ".", "concat", "(", "[", "final_new_state", "[", "0", "]", ",", "final_new_state", "[", "1", "]", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.__init__.create_model": [[8, 13], ["m3d_gan.M3D", "Exception"], "function", ["None"], ["self", ".", "_values", "=", "[", "]", "\n", "\n", "", "def", "append", "(", "self", ",", "x", ")", ":", "\n", "    ", "self", ".", "_values", "=", "self", ".", "_values", "[", "-", "(", "self", ".", "_window_size", "-", "1", ")", ":", "]", "+", "[", "x", "]", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.img_encoder.image_encoder.__init__": [[11, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "is_train", ",", "norm", "=", "'instance'", ",", "activation", "=", "'leaky'", ",", "\n", "image_size", "=", "128", ",", "latent_dim", "=", "8", ",", "use_resnet", "=", "True", ")", ":", "\n", "#logger.info('Init Encoder %s', name)", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_is_train", "=", "is_train", "\n", "self", ".", "_norm", "=", "norm", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_reuse", "=", "False", "\n", "self", ".", "_image_size", "=", "image_size", "\n", "self", ".", "_latent_dim", "=", "latent_dim", "\n", "self", ".", "_use_resnet", "=", "use_resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.img_encoder.image_encoder.__call__": [[23, 28], ["img_encoder.image_encoder._resnet", "img_encoder.image_encoder._convnet"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.img_encoder.image_encoder._resnet"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "_use_resnet", ":", "\n", "            ", "return", "self", ".", "_resnet", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_convnet", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.img_encoder.image_encoder._resnet": [[29, 55], ["tensorflow.variable_scope", "ops.conv_block", "enumerate", "tensorflow.nn.relu", "tensorflow.nn.avg_pool", "ops.flatten", "ops.mlp", "ops.mlp", "tensorflow.get_collection", "num_filters.append", "ops.residual", "tensorflow.nn.avg_pool", "tensorflow.random_normal", "tensorflow.exp", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.conv_block", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.flatten", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.mlp", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.mlp", "home.repos.pwc.inspect_result.yunyikristy_skipNet.util.__init__.ValueWindow.append", "home.repos.pwc.inspect_result.yunyikristy_skipNet.models.ops.residual"], ["", "", "def", "_resnet", "(", "self", ",", "input", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "self", ".", "_reuse", ")", ":", "\n", "            ", "num_filters", "=", "[", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "if", "self", ".", "_image_size", "==", "256", ":", "\n", "                ", "num_filters", ".", "append", "(", "512", ")", "\n", "\n", "", "E", "=", "input", "\n", "E", "=", "ops", ".", "conv_block", "(", "E", ",", "64", ",", "'C{}_{}'", ".", "format", "(", "64", ",", "0", ")", ",", "4", ",", "2", ",", "self", ".", "_is_train", ",", "\n", "self", ".", "_reuse", ",", "norm", "=", "None", ",", "activation", "=", "'leaky'", ",", "bias", "=", "True", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "num_filters", ")", ":", "\n", "                ", "E", "=", "ops", ".", "residual", "(", "E", ",", "n", ",", "'res{}_{}'", ".", "format", "(", "n", ",", "i", "+", "1", ")", ",", "self", ".", "_is_train", ",", "\n", "self", ".", "_reuse", ",", "norm", "=", "self", ".", "_norm", ",", "bias", "=", "True", ")", "\n", "E", "=", "tf", ".", "nn", ".", "avg_pool", "(", "E", ",", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "'SAME'", ")", "\n", "", "E", "=", "tf", ".", "nn", ".", "relu", "(", "E", ")", "\n", "E", "=", "tf", ".", "nn", ".", "avg_pool", "(", "E", ",", "[", "1", ",", "8", ",", "8", ",", "1", "]", ",", "[", "1", ",", "8", ",", "8", ",", "1", "]", ",", "'SAME'", ")", "\n", "E", "=", "ops", ".", "flatten", "(", "E", ")", "\n", "mu", "=", "ops", ".", "mlp", "(", "E", ",", "self", ".", "_latent_dim", ",", "'FC8_mu'", ",", "self", ".", "_is_train", ",", "self", ".", "_reuse", ",", "\n", "norm", "=", "None", ",", "activation", "=", "None", ")", "\n", "log_sigma", "=", "ops", ".", "mlp", "(", "E", ",", "self", ".", "_latent_dim", ",", "'FC8_sigma'", ",", "self", ".", "_is_train", ",", "self", ".", "_reuse", ",", "\n", "norm", "=", "None", ",", "activation", "=", "None", ")", "\n", "\n", "z", "=", "mu", "+", "tf", ".", "random_normal", "(", "shape", "=", "tf", ".", "shape", "(", "self", ".", "_latent_dim", ")", ")", "*", "tf", ".", "exp", "(", "log_sigma", ")", "\n", "\n", "self", ".", "_reuse", "=", "True", "\n", "self", ".", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "name", ")", "\n", "return", "z", ",", "mu", ",", "log_sigma", "\n", "\n"]]}