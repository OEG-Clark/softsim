{"home.repos.pwc.inspect_result.homles11_IGCV3.None.from_mxnet.transform_image": [[61, 67], ["image.transpose.transpose", "numpy.array", "numpy.array"], "function", ["None"], ["def", "transform_image", "(", "image", ")", ":", "\n", "    ", "image", "=", "np", ".", "array", "(", "image", ")", "-", "np", ".", "array", "(", "[", "123.", ",", "117.", ",", "104.", "]", ")", "\n", "# image /= np.array([58.395, 57.12, 57.375])", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "image", "=", "image", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detection.demo.get_detector": [[9, 40], ["detect.detector.Detector", "symbol.symbol_factory.get_symbol"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol"], ["def", "get_detector", "(", "net", ",", "prefix", ",", "epoch", ",", "data_shape", ",", "mean_pixels", ",", "ctx", ",", "num_class", ",", "\n", "nms_thresh", "=", "0.5", ",", "force_nms", "=", "True", ",", "nms_topk", "=", "400", ")", ":", "\n", "    ", "\"\"\"\n    wrapper for initialize a detector\n\n    Parameters:\n    ----------\n    net : str\n        test network name\n    prefix : str\n        load model prefix\n    epoch : int\n        load model epoch\n    data_shape : int\n        resize image shape\n    mean_pixels : tuple (float, float, float)\n        mean pixel values (R, G, B)\n    ctx : mx.ctx\n        running context, mx.cpu() or mx.gpu(?)\n    num_class : int\n        number of classes\n    nms_thresh : float\n        non-maximum suppression threshold\n    force_nms : bool\n        force suppress different categories\n    \"\"\"", "\n", "if", "net", "is", "not", "None", ":", "\n", "        ", "net", "=", "get_symbol", "(", "net", ",", "data_shape", ",", "num_classes", "=", "num_class", ",", "nms_thresh", "=", "nms_thresh", ",", "\n", "force_nms", "=", "force_nms", ",", "nms_topk", "=", "nms_topk", ")", "\n", "", "detector", "=", "Detector", "(", "net", ",", "prefix", ",", "epoch", ",", "data_shape", ",", "mean_pixels", ",", "ctx", "=", "ctx", ")", "\n", "return", "detector", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detection.demo.parse_args": [[41, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Single-shot detection network demo'", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "dest", "=", "'network'", ",", "type", "=", "str", ",", "default", "=", "'resnet50'", ",", "\n", "help", "=", "'which network to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--images'", ",", "dest", "=", "'images'", ",", "type", "=", "str", ",", "default", "=", "'./data/demo/dog.jpg'", ",", "\n", "help", "=", "'run demo with images, use comma to seperate multiple images'", ")", "\n", "parser", ".", "add_argument", "(", "'--dir'", ",", "dest", "=", "'dir'", ",", "nargs", "=", "'?'", ",", "\n", "help", "=", "'demo image directory, optional'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--ext'", ",", "dest", "=", "'extension'", ",", "help", "=", "'image extension, optional'", ",", "\n", "type", "=", "str", ",", "nargs", "=", "'?'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "dest", "=", "'epoch'", ",", "help", "=", "'epoch of trained model'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "dest", "=", "'prefix'", ",", "help", "=", "'trained model prefix'", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'model'", ",", "'ssd_'", ")", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--cpu'", ",", "dest", "=", "'cpu'", ",", "help", "=", "'(override GPU) use CPU to detect'", ",", "\n", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "dest", "=", "'gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'GPU device id to detect with'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-shape'", ",", "dest", "=", "'data_shape'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "'set image shape'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-r'", ",", "dest", "=", "'mean_r'", ",", "type", "=", "float", ",", "default", "=", "123", ",", "\n", "help", "=", "'red mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-g'", ",", "dest", "=", "'mean_g'", ",", "type", "=", "float", ",", "default", "=", "117", ",", "\n", "help", "=", "'green mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-b'", ",", "dest", "=", "'mean_b'", ",", "type", "=", "float", ",", "default", "=", "104", ",", "\n", "help", "=", "'blue mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--thresh'", ",", "dest", "=", "'thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'object visualize score threshold, default 0.6'", ")", "\n", "parser", ".", "add_argument", "(", "'--nms'", ",", "dest", "=", "'nms_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'non-maximum suppression threshold, default 0.5'", ")", "\n", "parser", ".", "add_argument", "(", "'--force'", ",", "dest", "=", "'force_nms'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'force non-maximum suppression on different class'", ")", "\n", "parser", ".", "add_argument", "(", "'--timer'", ",", "dest", "=", "'show_timer'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'show detection time'", ")", "\n", "parser", ".", "add_argument", "(", "'--deploy'", ",", "dest", "=", "'deploy_net'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Load network from json file, rather than from symbol'", ")", "\n", "parser", ".", "add_argument", "(", "'--class-names'", ",", "dest", "=", "'class_names'", ",", "type", "=", "str", ",", "\n", "default", "=", "'aeroplane, bicycle, bird, boat, bottle, bus, \\\n                        car, cat, chair, cow, diningtable, dog, horse, motorbike, \\\n                        person, pottedplant, sheep, sofa, train, tvmonitor'", ",", "\n", "help", "=", "'string of comma separated names, or text filename'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detection.demo.parse_class_names": [[86, 100], ["len", "os.path.isfile", "RuntimeError", "open", "c.strip", "len", "l.strip", "class_names.split", "f.readlines"], "function", ["None"], ["", "def", "parse_class_names", "(", "class_names", ")", ":", "\n", "    ", "\"\"\" parse # classes and class_names if applicable \"\"\"", "\n", "if", "len", "(", "class_names", ")", ">", "0", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "class_names", ")", ":", "\n", "# try to open it to read class names", "\n", "            ", "with", "open", "(", "class_names", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "class_names", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "class_names", "=", "[", "c", ".", "strip", "(", ")", "for", "c", "in", "class_names", ".", "split", "(", "','", ")", "]", "\n", "", "for", "name", "in", "class_names", ":", "\n", "            ", "assert", "len", "(", "name", ")", ">", "0", "\n", "", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No valid class_name provided...\"", ")", "\n", "", "return", "class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detection.evaluate.parse_args": [[9, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluate a network'", ")", "\n", "parser", ".", "add_argument", "(", "'--rec-path'", ",", "dest", "=", "'rec_path'", ",", "help", "=", "'which record file to use'", ",", "\n", "default", "=", "'D:\\\\v-mingjl\\\\mxnet-ssd-master\\\\data\\\\val.rec'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--list-path'", ",", "dest", "=", "'list_path'", ",", "help", "=", "'which list file to use'", ",", "\n", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "dest", "=", "'network'", ",", "type", "=", "str", ",", "default", "=", "'vgg16_reduced'", ",", "\n", "help", "=", "'which network to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "dest", "=", "'batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'evaluation batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-class'", ",", "dest", "=", "'num_class'", ",", "type", "=", "int", ",", "default", "=", "80", ",", "\n", "help", "=", "'number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--class-names'", ",", "dest", "=", "'class_names'", ",", "type", "=", "str", ",", "\n", "default", "=", "'aeroplane, bicycle, bird, boat, bottle, bus, \\\n                        car, cat, chair, cow, diningtable, dog, horse, motorbike, \\\n                        person, pottedplant, sheep, sofa, train, tvmonitor'", ",", "\n", "help", "=", "'string of comma separated names, or text filename'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "dest", "=", "'epoch'", ",", "help", "=", "'epoch of pretrained model'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "dest", "=", "'prefix'", ",", "help", "=", "'load model prefix'", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'model'", ",", "'ssd_'", ")", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "dest", "=", "'gpu_id'", ",", "help", "=", "'GPU devices to evaluate with'", ",", "\n", "default", "=", "'0'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--cpu'", ",", "dest", "=", "'cpu'", ",", "help", "=", "'use cpu to evaluate, this can be slow'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-shape'", ",", "dest", "=", "'data_shape'", ",", "type", "=", "int", ",", "default", "=", "384", ",", "\n", "help", "=", "'set image shape'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-r'", ",", "dest", "=", "'mean_r'", ",", "type", "=", "float", ",", "default", "=", "123", ",", "\n", "help", "=", "'red mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-g'", ",", "dest", "=", "'mean_g'", ",", "type", "=", "float", ",", "default", "=", "117", ",", "\n", "help", "=", "'green mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-b'", ",", "dest", "=", "'mean_b'", ",", "type", "=", "float", ",", "default", "=", "104", ",", "\n", "help", "=", "'blue mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--nms'", ",", "dest", "=", "'nms_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.45", ",", "\n", "help", "=", "'non-maximum suppression threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--overlap'", ",", "dest", "=", "'overlap_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'evaluation overlap threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--force'", ",", "dest", "=", "'force_nms'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'force non-maximum suppression on different class'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-difficult'", ",", "dest", "=", "'use_difficult'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'use difficult ground-truths in evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--voc07'", ",", "dest", "=", "'use_voc07_metric'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'use PASCAL VOC 07 metric'", ")", "\n", "parser", ".", "add_argument", "(", "'--deploy'", ",", "dest", "=", "'deploy_net'", ",", "help", "=", "'Load network from model'", ",", "\n", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--frequent'", ",", "dest", "=", "'frequent'", ",", "help", "=", "'frequency of logging'", ",", "\n", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detection.train.parse_args": [[9, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.getcwd", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a Single-shot detection network'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-path'", ",", "dest", "=", "'train_path'", ",", "help", "=", "'train record to use'", ",", "\n", "default", "=", "'train.rec'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--train-list'", ",", "dest", "=", "'train_list'", ",", "help", "=", "'train list to use'", ",", "\n", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--val-path'", ",", "dest", "=", "'val_path'", ",", "help", "=", "'validation record to use'", ",", "\n", "default", "=", "'val.rec'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--val-list'", ",", "dest", "=", "'val_list'", ",", "help", "=", "'validation list to use'", ",", "\n", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "dest", "=", "'network'", ",", "type", "=", "str", ",", "default", "=", "'igcv3'", ",", "\n", "help", "=", "'which network to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "dest", "=", "'batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'training batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "dest", "=", "'resume'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'resume training from epoch n'", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "dest", "=", "'finetune'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'finetune from epoch n, rename the model before doing this'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "dest", "=", "'pretrained'", ",", "help", "=", "'pretrained model prefix'", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'model'", ",", "'igcv3_wide'", ")", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "dest", "=", "'epoch'", ",", "help", "=", "'epoch of pretrained model'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "dest", "=", "'prefix'", ",", "help", "=", "'new model prefix'", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'output'", ",", "'exp3'", ",", "'ssd'", ")", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "dest", "=", "'gpus'", ",", "help", "=", "'GPU devices to train with'", ",", "\n", "default", "=", "'0,1,2,3'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--begin-epoch'", ",", "dest", "=", "'begin_epoch'", ",", "help", "=", "'begin epoch of training'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--end-epoch'", ",", "dest", "=", "'end_epoch'", ",", "help", "=", "'end epoch of training'", ",", "\n", "default", "=", "240", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--frequent'", ",", "dest", "=", "'frequent'", ",", "help", "=", "'frequency of logging'", ",", "\n", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--data-shape'", ",", "dest", "=", "'data_shape'", ",", "type", "=", "int", ",", "default", "=", "320", ",", "\n", "help", "=", "'set image shape'", ")", "\n", "parser", ".", "add_argument", "(", "'--label-width'", ",", "dest", "=", "'label_width'", ",", "type", "=", "int", ",", "default", "=", "560", ",", "#80*7=560,", "\n", "help", "=", "'force padding label width to sync across train and validation'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "dest", "=", "'optimizer'", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "\n", "help", "=", "'Whether to use a different optimizer or follow the original code with sgd'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "dest", "=", "'learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.004", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "dest", "=", "'momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "dest", "=", "'weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.00004", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-r'", ",", "dest", "=", "'mean_r'", ",", "type", "=", "float", ",", "default", "=", "123", ",", "\n", "help", "=", "'red mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-g'", ",", "dest", "=", "'mean_g'", ",", "type", "=", "float", ",", "default", "=", "117", ",", "\n", "help", "=", "'green mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-b'", ",", "dest", "=", "'mean_b'", ",", "type", "=", "float", ",", "default", "=", "104", ",", "\n", "help", "=", "'blue mean value'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-steps'", ",", "dest", "=", "'lr_refactor_step'", ",", "type", "=", "str", ",", "default", "=", "'60,120,180'", ",", "\n", "help", "=", "'refactor learning rate at specified epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-factor'", ",", "dest", "=", "'lr_refactor_ratio'", ",", "type", "=", "str", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'ratio to refactor learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze'", ",", "dest", "=", "'freeze_pattern'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "'freeze layer pattern'", ")", "\n", "parser", ".", "add_argument", "(", "'--log'", ",", "dest", "=", "'log_file'", ",", "type", "=", "str", ",", "default", "=", "\"train.log\"", ",", "\n", "help", "=", "'save training log to file'", ")", "\n", "parser", ".", "add_argument", "(", "'--monitor'", ",", "dest", "=", "'monitor'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'log network parameters every N iters if larger than 0'", ")", "\n", "parser", ".", "add_argument", "(", "'--pattern'", ",", "dest", "=", "'monitor_pattern'", ",", "type", "=", "str", ",", "default", "=", "\".*\"", ",", "\n", "help", "=", "'monitor parameter pattern, as regex'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-class'", ",", "dest", "=", "'num_class'", ",", "type", "=", "int", ",", "default", "=", "90", ",", "\n", "help", "=", "'number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-example'", ",", "dest", "=", "'num_example'", ",", "type", "=", "int", ",", "default", "=", "35184", ",", "\n", "help", "=", "'number of image examples'", ")", "\n", "parser", ".", "add_argument", "(", "'--class-names'", ",", "dest", "=", "'class_names'", ",", "type", "=", "str", ",", "\n", "default", "=", "r'./dataset/names/mscoco.names'", ",", "\n", "help", "=", "'string of comma separated names, or text filename'", ")", "\n", "parser", ".", "add_argument", "(", "'--nms'", ",", "dest", "=", "'nms_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.6", ",", "\n", "help", "=", "'non-maximum suppression threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--nms_topk'", ",", "dest", "=", "'nms_topk'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'final number of detections'", ")", "\n", "parser", ".", "add_argument", "(", "'--overlap'", ",", "dest", "=", "'overlap_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'evaluation overlap threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--force'", ",", "dest", "=", "'force_nms'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'force non-maximum suppression on different class'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-difficult'", ",", "dest", "=", "'use_difficult'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'use difficult ground-truths in evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--voc07'", ",", "dest", "=", "'use_voc07_metric'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'use PASCAL VOC 07 11-point metric'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard'", ",", "dest", "=", "'tensorboard'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'save metrics into tensorboard readable files'", ")", "\n", "parser", ".", "add_argument", "(", "'--min_neg_samples'", ",", "dest", "=", "'min_neg_samples'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'min number of negative samples taken in hard mining.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detection.train.parse_class_names": [[98, 114], ["len", "os.path.isfile", "open", "c.strip", "l.strip", "args.class_names.split", "f.readlines"], "function", ["None"], ["", "def", "parse_class_names", "(", "args", ")", ":", "\n", "    ", "\"\"\" parse # classes and class_names if applicable \"\"\"", "\n", "num_class", "=", "args", ".", "num_class", "\n", "if", "len", "(", "args", ".", "class_names", ")", ">", "0", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "class_names", ")", ":", "\n", "# try to open it to read class names", "\n", "            ", "with", "open", "(", "args", ".", "class_names", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "class_names", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "class_names", "=", "[", "c", ".", "strip", "(", ")", "for", "c", "in", "args", ".", "class_names", ".", "split", "(", "','", ")", "]", "\n", "# assert len(class_names) == num_class, str(len(class_names))", "\n", "# for name in class_names:", "\n", "# assert len(name) > 0", "\n", "", "", "else", ":", "\n", "        ", "class_names", "=", "None", "\n", "", "return", "class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detection.deploy.parse_args": [[10, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert a trained model to deploy model'", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "dest", "=", "'network'", ",", "type", "=", "str", ",", "default", "=", "'vgg16_reduced'", ",", "\n", "help", "=", "'which network to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "dest", "=", "'epoch'", ",", "help", "=", "'epoch of trained model'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "dest", "=", "'prefix'", ",", "help", "=", "'trained model prefix'", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'model'", ",", "'ssd_'", ")", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--data-shape'", ",", "dest", "=", "'data_shape'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'data shape'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-class'", ",", "dest", "=", "'num_classes'", ",", "help", "=", "'number of classes'", ",", "\n", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--nms'", ",", "dest", "=", "'nms_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'non-maximum suppression threshold, default 0.5'", ")", "\n", "parser", ".", "add_argument", "(", "'--force'", ",", "dest", "=", "'force_nms'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'force non-maximum suppression on different class'", ")", "\n", "parser", ".", "add_argument", "(", "'--topk'", ",", "dest", "=", "'nms_topk'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "\n", "help", "=", "'apply nms only to top k detections based on scores.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.testdb.TestDB.__init__": [[21, 30], ["len", "imdb.Imdb.__init__", "isinstance", "str"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["def", "__init__", "(", "self", ",", "images", ",", "root_dir", "=", "None", ",", "extension", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "images", ",", "list", ")", ":", "\n", "            ", "images", "=", "[", "images", "]", "\n", "", "num_images", "=", "len", "(", "images", ")", "\n", "super", "(", "TestDB", ",", "self", ")", ".", "__init__", "(", "\"test\"", "+", "str", "(", "num_images", ")", ")", "\n", "self", ".", "image_set_index", "=", "images", "\n", "self", ".", "num_images", "=", "num_images", "\n", "self", ".", "root_dir", "=", "root_dir", "if", "root_dir", "else", "None", "\n", "self", ".", "extension", "=", "extension", "if", "extension", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.testdb.TestDB.image_path_from_index": [[32, 51], ["os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, return full path\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n        Returns\n        ----------\n        path of this image\n        \"\"\"", "\n", "name", "=", "self", ".", "image_set_index", "[", "index", "]", "\n", "if", "self", ".", "extension", ":", "\n", "            ", "name", "+=", "self", ".", "extension", "\n", "", "if", "self", ".", "root_dir", ":", "\n", "            ", "name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "name", ")", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "name", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "name", ")", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.testdb.TestDB.label_from_index": [[52, 54], ["RuntimeError"], "methods", ["None"], ["", "def", "label_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "RuntimeError", "(", "\"Testdb does not support label loading\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.imdb.Imdb.__init__": [[13, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "classes", "=", "[", "]", "\n", "self", ".", "num_classes", "=", "0", "\n", "self", ".", "image_set_index", "=", "None", "\n", "self", ".", "num_images", "=", "0", "\n", "self", ".", "labels", "=", "None", "\n", "self", ".", "padding", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.imdb.Imdb.image_path_from_index": [[22, 36], ["None"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        load image full path given specified index\n\n        Parameters:\n        ----------\n        index : int\n            index of image requested in dataset\n\n        Returns:\n        ----------\n        full path of specified image\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.imdb.Imdb.label_from_index": [[37, 52], ["None"], "methods", ["None"], ["", "def", "label_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        load ground-truth of image given specified index\n\n        Parameters:\n        ----------\n        index : int\n            index of image requested in dataset\n\n        Returns:\n        ----------\n        object ground-truths, in format\n        numpy.array([id, xmin, ymin, xmax, ymax]...)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.imdb.Imdb.save_imglist": [[53, 94], ["range", "int", "round", "sys.stdout.write", "sys.stdout.flush", "imdb.Imdb.save_imglist.progress_bar"], "methods", ["None"], ["", "def", "save_imglist", "(", "self", ",", "fname", "=", "None", ",", "root", "=", "None", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        save imglist to disk\n\n        Parameters:\n        ----------\n        fname : str\n            saved filename\n        \"\"\"", "\n", "def", "progress_bar", "(", "count", ",", "total", ",", "suffix", "=", "''", ")", ":", "\n", "            ", "import", "sys", "\n", "bar_len", "=", "24", "\n", "filled_len", "=", "int", "(", "round", "(", "bar_len", "*", "count", "/", "float", "(", "total", ")", ")", ")", "\n", "\n", "percents", "=", "round", "(", "100.0", "*", "count", "/", "float", "(", "total", ")", ",", "1", ")", "\n", "bar", "=", "'='", "*", "filled_len", "+", "'-'", "*", "(", "bar_len", "-", "filled_len", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'[%s] %s%s ...%s\\r'", "%", "(", "bar", ",", "percents", ",", "'%'", ",", "suffix", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "str_list", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "num_images", ")", ":", "\n", "            ", "progress_bar", "(", "index", ",", "self", ".", "num_images", ")", "\n", "label", "=", "self", ".", "label_from_index", "(", "index", ")", "\n", "if", "label", ".", "size", "<", "1", ":", "\n", "                ", "continue", "\n", "", "path", "=", "self", ".", "image_path_from_index", "(", "index", ")", "\n", "if", "root", ":", "\n", "                ", "path", "=", "osp", ".", "relpath", "(", "path", ",", "root", ")", "\n", "", "str_list", ".", "append", "(", "'\\t'", ".", "join", "(", "[", "str", "(", "index", ")", ",", "str", "(", "2", ")", ",", "str", "(", "label", ".", "shape", "[", "1", "]", ")", "]", "+", "[", "\"{0:.4f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "label", ".", "ravel", "(", ")", "]", "+", "[", "path", ",", "]", ")", "+", "'\\n'", ")", "\n", "", "if", "str_list", ":", "\n", "            ", "if", "shuffle", ":", "\n", "                ", "import", "random", "\n", "random", ".", "shuffle", "(", "str_list", ")", "\n", "", "if", "not", "fname", ":", "\n", "                ", "fname", "=", "self", ".", "name", "+", "'.lst'", "\n", "", "with", "open", "(", "fname", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "str_list", ":", "\n", "                    ", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"No image in imdb\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.imdb.Imdb._load_class_names": [[95, 111], ["os.join", "open", "l.strip", "f.readlines"], "methods", ["None"], ["", "", "def", "_load_class_names", "(", "self", ",", "filename", ",", "dirname", ")", ":", "\n", "        ", "\"\"\"\n        load class names from text file\n\n        Parameters:\n        ----------\n        filename: str\n            file stores class names\n        dirname: str\n            file directory\n        \"\"\"", "\n", "full_path", "=", "osp", ".", "join", "(", "dirname", ",", "filename", ")", "\n", "classes", "=", "[", "]", "\n", "with", "open", "(", "full_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "classes", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "classes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB.__init__": [[16, 23], ["imdb.Imdb.__init__", "concat_db.ConcatDB._check_classes", "concat_db.ConcatDB._load_image_set_index", "isinstance"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB._check_classes", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._load_image_set_index"], ["def", "__init__", "(", "self", ",", "imdbs", ",", "shuffle", ")", ":", "\n", "        ", "super", "(", "ConcatDB", ",", "self", ")", ".", "__init__", "(", "'concatdb'", ")", "\n", "if", "not", "isinstance", "(", "imdbs", ",", "list", ")", ":", "\n", "            ", "imdbs", "=", "[", "imdbs", "]", "\n", "", "self", ".", "imdbs", "=", "imdbs", "\n", "self", ".", "_check_classes", "(", ")", "\n", "self", ".", "image_set_index", "=", "self", ".", "_load_image_set_index", "(", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB._check_classes": [[24, 38], ["len"], "methods", ["None"], ["", "def", "_check_classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        check input imdbs, make sure they have same classes\n        \"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "classes", "=", "self", ".", "imdbs", "[", "0", "]", ".", "classes", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "", "except", "AttributeError", ":", "\n", "# fine, if no classes is provided", "\n", "            ", "pass", "\n", "\n", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "for", "db", "in", "self", ".", "imdbs", ":", "\n", "                ", "assert", "self", ".", "classes", "==", "db", ".", "classes", ",", "\"Multiple imdb must have same classes\"", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB._load_image_set_index": [[39, 55], ["list", "range", "random.shuffle"], "methods", ["None"], ["", "", "", "def", "_load_image_set_index", "(", "self", ",", "shuffle", ")", ":", "\n", "        ", "\"\"\"\n        get total number of images, init indices\n\n        Parameters\n        ----------\n        shuffle : bool\n            whether to shuffle the initial indices\n        \"\"\"", "\n", "self", ".", "num_images", "=", "0", "\n", "for", "db", "in", "self", ".", "imdbs", ":", "\n", "            ", "self", ".", "num_images", "+=", "db", ".", "num_images", "\n", "", "indices", "=", "list", "(", "range", "(", "self", ".", "num_images", ")", ")", "\n", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "indices", ")", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB._locate_index": [[56, 76], ["enumerate"], "methods", ["None"], ["", "def", "_locate_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given index, find out sub-db and sub-index\n\n        Parameters\n        ----------\n        index : int\n            index of a specific image\n\n        Returns\n        ----------\n        a tuple (sub-db, sub-index)\n        \"\"\"", "\n", "assert", "index", ">=", "0", "and", "index", "<", "self", ".", "num_images", ",", "\"index out of range\"", "\n", "pos", "=", "self", ".", "image_set_index", "[", "index", "]", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "imdbs", ")", ":", "\n", "            ", "if", "pos", ">=", "v", ".", "num_images", ":", "\n", "                ", "pos", "-=", "v", ".", "num_images", "\n", "", "else", ":", "\n", "                ", "return", "(", "k", ",", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB.image_path_from_index": [[77, 94], ["concat_db.ConcatDB._locate_index", "concat_db.ConcatDB.imdbs[].image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB._locate_index", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.image_path_from_index"], ["", "", "", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, find out full path\n\n        Parameters\n        ----------\n        index: int\n            index of a specific image\n\n        Returns\n        ----------\n        full path of this image\n        \"\"\"", "\n", "assert", "self", ".", "image_set_index", "is", "not", "None", ",", "\"Dataset not initialized\"", "\n", "pos", "=", "self", ".", "image_set_index", "[", "index", "]", "\n", "n_db", ",", "n_index", "=", "self", ".", "_locate_index", "(", "index", ")", "\n", "return", "self", ".", "imdbs", "[", "n_db", "]", ".", "image_path_from_index", "(", "n_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB.label_from_index": [[95, 112], ["concat_db.ConcatDB._locate_index", "concat_db.ConcatDB.imdbs[].label_from_index"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.concat_db.ConcatDB._locate_index", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.label_from_index"], ["", "def", "label_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, return preprocessed ground-truth\n\n        Parameters\n        ----------\n        index: int\n            index of a specific image\n\n        Returns\n        ----------\n        ground-truths of this image\n        \"\"\"", "\n", "assert", "self", ".", "image_set_index", "is", "not", "None", ",", "\"Dataset not initialized\"", "\n", "pos", "=", "self", ".", "image_set_index", "[", "index", "]", "\n", "n_db", ",", "n_index", "=", "self", ".", "_locate_index", "(", "index", ")", "\n", "return", "self", ".", "imdbs", "[", "n_db", "]", ".", "label_from_index", "(", "n_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.yolo_format.YoloFormat.__init__": [[31, 54], ["imdb.Imdb.__init__", "yolo_format.YoloFormat._load_image_set_index", "len", "yolo_format.YoloFormat._load_image_labels", "isinstance", "isinstance", "len", "isinstance", "ValueError", "str", "open", "len", "l.strip", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._load_image_set_index", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._load_image_labels"], ["def", "__init__", "(", "self", ",", "name", ",", "classes", ",", "list_file", ",", "image_dir", ",", "label_dir", ",", "extension", "=", "'.jpg'", ",", "label_extension", "=", "'.txt'", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "classes", ",", "list", ")", "or", "isinstance", "(", "classes", ",", "tuple", ")", ":", "\n", "            ", "num_classes", "=", "len", "(", "classes", ")", "\n", "", "elif", "isinstance", "(", "classes", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "classes", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "classes", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "num_classes", "=", "len", "(", "classes", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"classes should be list/tuple or text file\"", ")", "\n", "", "assert", "num_classes", ">", "0", ",", "\"number of classes must > 0\"", "\n", "super", "(", "YoloFormat", ",", "self", ")", ".", "__init__", "(", "name", "+", "'_'", "+", "str", "(", "num_classes", ")", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "list_file", "=", "list_file", "\n", "self", ".", "image_dir", "=", "image_dir", "\n", "self", ".", "label_dir", "=", "label_dir", "\n", "self", ".", "extension", "=", "extension", "\n", "self", ".", "label_extension", "=", "label_extension", "\n", "\n", "self", ".", "image_set_index", "=", "self", ".", "_load_image_set_index", "(", "shuffle", ")", "\n", "self", ".", "num_images", "=", "len", "(", "self", ".", "image_set_index", ")", "\n", "self", ".", "labels", "=", "self", ".", "_load_image_labels", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.yolo_format.YoloFormat._load_image_set_index": [[56, 74], ["os.path.exists", "open", "numpy.random.shuffle", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ",", "shuffle", ")", ":", "\n", "        ", "\"\"\"\n        find out which indexes correspond to given image set (train or val)\n\n        Parameters:\n        ----------\n        shuffle : boolean\n            whether to shuffle the image list\n        Returns:\n        ----------\n        entire list of images specified in the setting\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "list_file", ")", ",", "'Path does not exists: {}'", ".", "format", "(", "self", ".", "list_file", ")", "\n", "with", "open", "(", "self", ".", "list_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "image_set_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "image_set_index", ")", "\n", "", "return", "image_set_index", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.yolo_format.YoloFormat.image_path_from_index": [[75, 92], ["os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, find out full path\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n        Returns:\n        ----------\n        full path of this image\n        \"\"\"", "\n", "assert", "self", ".", "image_set_index", "is", "not", "None", ",", "\"Dataset not initialized\"", "\n", "name", "=", "self", ".", "image_set_index", "[", "index", "]", "\n", "image_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "name", ")", "+", "self", ".", "extension", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_file", ")", "\n", "return", "image_file", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.yolo_format.YoloFormat.label_from_index": [[93, 107], ["None"], "methods", ["None"], ["", "def", "label_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, return preprocessed ground-truth\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n        Returns:\n        ----------\n        ground-truths of this image\n        \"\"\"", "\n", "assert", "self", ".", "labels", "is", "not", "None", ",", "\"Labels not processed\"", "\n", "return", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.yolo_format.YoloFormat._label_path_from_index": [[108, 124], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "_label_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, find out annotation path\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n\n        Returns:\n        ----------\n        full path of annotation file\n        \"\"\"", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "index", "+", "self", ".", "label_extension", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "label_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "label_file", ")", "\n", "return", "label_file", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.yolo_format.YoloFormat._load_image_labels": [[125, 155], ["yolo_format.YoloFormat._label_path_from_index", "open", "f.readlines", "temp.append", "line.strip().split", "int", "float", "float", "label.append", "numpy.array", "len", "float", "float", "line.strip"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._label_path_from_index"], ["", "def", "_load_image_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        preprocess all ground-truths\n\n        Returns:\n        ----------\n        labels packed in [num_images x max_num_objects x 5] tensor\n        \"\"\"", "\n", "temp", "=", "[", "]", "\n", "\n", "# load ground-truths", "\n", "for", "idx", "in", "self", ".", "image_set_index", ":", "\n", "            ", "label_file", "=", "self", ".", "_label_path_from_index", "(", "idx", ")", "\n", "with", "open", "(", "label_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "label", "=", "[", "]", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                    ", "temp_label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "assert", "len", "(", "temp_label", ")", "==", "5", ",", "\"Invalid label file\"", "+", "label_file", "\n", "cls_id", "=", "int", "(", "temp_label", "[", "0", "]", ")", "\n", "x", "=", "float", "(", "temp_label", "[", "1", "]", ")", "\n", "y", "=", "float", "(", "temp_label", "[", "2", "]", ")", "\n", "half_width", "=", "float", "(", "temp_label", "[", "3", "]", ")", "/", "2", "\n", "half_height", "=", "float", "(", "temp_label", "[", "4", "]", ")", "/", "2", "\n", "xmin", "=", "x", "-", "half_width", "\n", "ymin", "=", "y", "-", "half_height", "\n", "xmax", "=", "x", "+", "half_width", "\n", "ymax", "=", "y", "+", "half_height", "\n", "label", ".", "append", "(", "[", "cls_id", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "", "temp", ".", "append", "(", "np", ".", "array", "(", "label", ")", ")", "\n", "", "", "return", "temp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.mscoco.Coco.__init__": [[22, 34], ["os.path.isfile", "dataset.imdb.Imdb.__init__", "mscoco.Coco._load_class_names", "len", "mscoco.Coco._load_all", "len", "os.path.splitext", "os.path.join", "os.path.basename", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.imdb.Imdb._load_class_names", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.mscoco.Coco._load_all"], ["def", "__init__", "(", "self", ",", "anno_file", ",", "image_dir", ",", "shuffle", "=", "True", ",", "names", "=", "'mscoco.names'", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "anno_file", ")", ",", "\"Invalid annotation file: \"", "+", "anno_file", "\n", "basename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "anno_file", ")", ")", "[", "0", "]", "\n", "super", "(", "Coco", ",", "self", ")", ".", "__init__", "(", "'coco_'", "+", "basename", ")", "\n", "self", ".", "image_dir", "=", "image_dir", "\n", "\n", "self", ".", "classes", "=", "self", ".", "_load_class_names", "(", "names", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'names'", ")", ")", "\n", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "_load_all", "(", "anno_file", ",", "shuffle", ")", "\n", "self", ".", "num_images", "=", "len", "(", "self", ".", "image_set_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.mscoco.Coco.image_path_from_index": [[36, 53], ["os.path.join", "os.path.isfile"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, find out full path\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n        Returns:\n        ----------\n        full path of this image\n        \"\"\"", "\n", "assert", "self", ".", "image_set_index", "is", "not", "None", ",", "\"Dataset not initialized\"", "\n", "name", "=", "self", ".", "image_set_index", "[", "index", "]", "\n", "image_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "'images'", ",", "name", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "image_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_file", ")", "\n", "return", "image_file", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.mscoco.Coco.label_from_index": [[54, 68], ["None"], "methods", ["None"], ["", "def", "label_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, return preprocessed ground-truth\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n        Returns:\n        ----------\n        ground-truths of this image\n        \"\"\"", "\n", "assert", "self", ".", "labels", "is", "not", "None", ",", "\"Labels not processed\"", "\n", "return", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.mscoco.Coco._load_all": [[69, 118], ["dataset.pycocotools.coco.COCO", "dataset.pycocotools.coco.COCO.getImgIds", "dataset.pycocotools.coco.COCO.getAnnIds", "dataset.pycocotools.coco.COCO.loadAnns", "list", "random.shuffle", "dataset.pycocotools.coco.COCO.loadImgs", "filename.split", "label.append", "labels.append", "image_set_index.append", "range", "len", "float", "float", "numpy.array", "os.path.join", "len", "float", "float"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadImgs"], ["", "def", "_load_all", "(", "self", ",", "anno_file", ",", "shuffle", ")", ":", "\n", "        ", "\"\"\"\n        initialize all entries given annotation json file\n\n        Parameters:\n        ----------\n        anno_file: str\n            annotation json file\n        shuffle: bool\n            whether to shuffle image list\n        \"\"\"", "\n", "image_set_index", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "coco", "=", "COCO", "(", "anno_file", ")", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "# filename", "\n", "            ", "image_info", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "\n", "filename", "=", "image_info", "[", "\"file_name\"", "]", "\n", "subdir", "=", "filename", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "height", "=", "image_info", "[", "\"height\"", "]", "\n", "width", "=", "image_info", "[", "\"width\"", "]", "\n", "# label", "\n", "anno_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "annos", "=", "coco", ".", "loadAnns", "(", "anno_ids", ")", "\n", "label", "=", "[", "]", "\n", "\n", "for", "anno", "in", "annos", ":", "\n", "                ", "cat_id", "=", "anno", "[", "\"category_id\"", "]", "\n", "bbox", "=", "anno", "[", "\"bbox\"", "]", "\n", "assert", "len", "(", "bbox", ")", "==", "4", "\n", "xmin", "=", "float", "(", "bbox", "[", "0", "]", ")", "/", "width", "\n", "ymin", "=", "float", "(", "bbox", "[", "1", "]", ")", "/", "height", "\n", "xmax", "=", "xmin", "+", "float", "(", "bbox", "[", "2", "]", ")", "/", "width", "\n", "ymax", "=", "ymin", "+", "float", "(", "bbox", "[", "3", "]", ")", "/", "height", "\n", "label", ".", "append", "(", "[", "cat_id", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ",", "0", "]", ")", "\n", "", "if", "label", ":", "\n", "                ", "labels", ".", "append", "(", "np", ".", "array", "(", "label", ")", ")", "\n", "image_set_index", ".", "append", "(", "os", ".", "path", ".", "join", "(", "subdir", ",", "filename", ")", ")", "\n", "\n", "", "", "if", "shuffle", ":", "\n", "            ", "import", "random", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "image_set_index", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "image_set_index", "=", "[", "image_set_index", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "labels", "=", "[", "labels", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "# store the results", "\n", "", "self", ".", "image_set_index", "=", "image_set_index", "\n", "self", ".", "labels", "=", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetRecordIter.__init__": [[43, 67], ["super().__init__", "mxnet.io.ImageDetRecordIter", "iterator.DetRecordIter._get_batch", "iterator.DetRecordIter.reset", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter._get_batch", "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.reset"], ["def", "__init__", "(", "self", ",", "path_imgrec", ",", "batch_size", ",", "data_shape", ",", "path_imglist", "=", "\"\"", ",", "\n", "label_width", "=", "-", "1", ",", "label_pad_width", "=", "-", "1", ",", "label_pad_value", "=", "-", "1", ",", "\n", "resize_mode", "=", "'force'", ",", "mean_pixels", "=", "[", "123.68", ",", "116.779", ",", "103.939", "]", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DetRecordIter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rec", "=", "mx", ".", "io", ".", "ImageDetRecordIter", "(", "\n", "path_imgrec", "=", "path_imgrec", ",", "\n", "path_imglist", "=", "path_imglist", ",", "\n", "label_width", "=", "label_width", ",", "\n", "label_pad_width", "=", "label_pad_width", ",", "\n", "label_pad_value", "=", "label_pad_value", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "data_shape", "=", "data_shape", ",", "\n", "mean_r", "=", "mean_pixels", "[", "0", "]", ",", "\n", "mean_g", "=", "mean_pixels", "[", "1", "]", ",", "\n", "mean_b", "=", "mean_pixels", "[", "2", "]", ",", "\n", "resize_mode", "=", "resize_mode", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "provide_label", "=", "None", "\n", "self", ".", "_get_batch", "(", ")", "\n", "if", "not", "self", ".", "provide_label", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Invalid ImageDetRecordIter: \"", "+", "path_imgrec", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetRecordIter.provide_data": [[68, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "provide_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rec", ".", "provide_data", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetRecordIter.reset": [[72, 74], ["iterator.DetRecordIter.rec.reset"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "rec", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetRecordIter.iter_next": [[75, 77], ["iterator.DetRecordIter._get_batch"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter._get_batch"], ["", "def", "iter_next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_batch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetRecordIter.next": [[78, 83], ["iterator.DetRecordIter.iter_next"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.iter_next"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iter_next", "(", ")", ":", "\n", "            ", "return", "self", ".", "_batch", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetRecordIter._get_batch": [[84, 108], ["iterator.DetRecordIter.rec.next", "iterator.DetRecordIter._batch.label[].asnumpy", "label[].reshape", "[].asnumpy", "int", "int", "mxnet.nd.array"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.next"], ["", "", "def", "_get_batch", "(", "self", ")", ":", "\n", "        ", "self", ".", "_batch", "=", "self", ".", "rec", ".", "next", "(", ")", "\n", "if", "not", "self", ".", "_batch", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "self", ".", "provide_label", "is", "None", ":", "\n", "# estimate the label shape for the first batch, always reshape to n*5", "\n", "            ", "first_label", "=", "self", ".", "_batch", ".", "label", "[", "0", "]", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "_batch", ".", "label", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "label_header_width", "=", "int", "(", "first_label", "[", "4", "]", ")", "\n", "self", ".", "label_object_width", "=", "int", "(", "first_label", "[", "5", "]", ")", "\n", "assert", "self", ".", "label_object_width", ">=", "5", ",", "\"object width must >=5\"", "\n", "self", ".", "label_start", "=", "4", "+", "self", ".", "label_header_width", "\n", "self", ".", "max_objects", "=", "(", "first_label", ".", "size", "-", "self", ".", "label_start", ")", "//", "self", ".", "label_object_width", "\n", "self", ".", "label_shape", "=", "(", "self", ".", "batch_size", ",", "self", ".", "max_objects", ",", "self", ".", "label_object_width", ")", "\n", "self", ".", "label_end", "=", "self", ".", "label_start", "+", "self", ".", "max_objects", "*", "self", ".", "label_object_width", "\n", "self", ".", "provide_label", "=", "[", "(", "'label'", ",", "self", ".", "label_shape", ")", "]", "\n", "\n", "# modify label", "\n", "", "label", "=", "self", ".", "_batch", ".", "label", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "label", "=", "label", "[", ":", ",", "self", ".", "label_start", ":", "self", ".", "label_end", "]", ".", "reshape", "(", "\n", "(", "self", ".", "batch_size", ",", "self", ".", "max_objects", ",", "self", ".", "label_object_width", ")", ")", "\n", "self", ".", "_batch", ".", "label", "=", "[", "mx", ".", "nd", ".", "array", "(", "label", ")", "]", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.__init__": [[140, 173], ["super().__init__", "isinstance", "mxnet.nd.array().reshape", "numpy.arange", "iterator.DetIter._get_batch", "isinstance", "numpy.random.seed", "mxnet.nd.array", "isinstance"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter._get_batch"], ["def", "__init__", "(", "self", ",", "imdb", ",", "batch_size", ",", "data_shape", ",", "mean_pixels", "=", "[", "128", ",", "128", ",", "128", "]", ",", "rand_samplers", "=", "[", "]", ",", "rand_mirror", "=", "False", ",", "shuffle", "=", "False", ",", "rand_seed", "=", "None", ",", "is_train", "=", "True", ",", "max_crop_trial", "=", "50", ")", ":", "\n", "        ", "super", "(", "DetIter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_imdb", "=", "imdb", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "if", "isinstance", "(", "data_shape", ",", "int", ")", ":", "\n", "            ", "data_shape", "=", "(", "data_shape", ",", "data_shape", ")", "\n", "", "self", ".", "_data_shape", "=", "data_shape", "\n", "self", ".", "_mean_pixels", "=", "mx", ".", "nd", ".", "array", "(", "mean_pixels", ")", ".", "reshape", "(", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "if", "not", "rand_samplers", ":", "\n", "            ", "self", ".", "_rand_samplers", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "rand_samplers", ",", "list", ")", ":", "\n", "                ", "rand_samplers", "=", "[", "rand_samplers", "]", "\n", "", "assert", "isinstance", "(", "rand_samplers", "[", "0", "]", ",", "RandSampler", ")", ",", "\"Invalid rand sampler\"", "\n", "self", ".", "_rand_samplers", "=", "rand_samplers", "\n", "", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "_rand_mirror", "=", "rand_mirror", "\n", "self", ".", "_shuffle", "=", "shuffle", "\n", "if", "rand_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "# fix random seed", "\n", "", "self", ".", "_max_crop_trial", "=", "max_crop_trial", "\n", "\n", "self", ".", "_current", "=", "0", "\n", "self", ".", "_size", "=", "imdb", ".", "num_images", "\n", "self", ".", "_index", "=", "np", ".", "arange", "(", "self", ".", "_size", ")", "\n", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_label", "=", "None", "\n", "self", ".", "_get_batch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.provide_data": [[174, 177], ["iterator.DetIter._data.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "provide_data", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "k", ",", "v", ".", "shape", ")", "for", "k", ",", "v", "in", "self", ".", "_data", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.provide_label": [[178, 184], ["iterator.DetIter._label.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "provide_label", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "[", "(", "k", ",", "v", ".", "shape", ")", "for", "k", ",", "v", "in", "self", ".", "_label", ".", "items", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.reset": [[185, 189], ["numpy.random.shuffle"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_current", "=", "0", "\n", "if", "self", ".", "_shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.iter_next": [[190, 192], ["None"], "methods", ["None"], ["", "", "def", "iter_next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_current", "<", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.next": [[193, 203], ["iterator.DetIter.iter_next", "iterator.DetIter._get_batch", "mxnet.io.DataBatch", "list", "list", "iterator.DetIter.getpad", "iterator.DetIter.getindex", "iterator.DetIter._data.values", "iterator.DetIter._label.values"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.iter_next", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter._get_batch", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.getpad", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.getindex"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iter_next", "(", ")", ":", "\n", "            ", "self", ".", "_get_batch", "(", ")", "\n", "data_batch", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "list", "(", "self", ".", "_data", ".", "values", "(", ")", ")", ",", "\n", "label", "=", "list", "(", "self", ".", "_label", ".", "values", "(", ")", ")", ",", "\n", "pad", "=", "self", ".", "getpad", "(", ")", ",", "index", "=", "self", ".", "getindex", "(", ")", ")", "\n", "self", ".", "_current", "+=", "self", ".", "batch_size", "\n", "return", "data_batch", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.getindex": [[204, 206], ["None"], "methods", ["None"], ["", "", "def", "getindex", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_current", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter.getpad": [[207, 210], ["None"], "methods", ["None"], ["", "def", "getpad", "(", "self", ")", ":", "\n", "        ", "pad", "=", "self", ".", "_current", "+", "self", ".", "batch_size", "-", "self", ".", "_size", "\n", "return", "0", "if", "pad", "<", "0", "else", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter._get_batch": [[211, 241], ["mxnet.nd.zeros", "range", "iterator.DetIter._imdb.image_path_from_index", "mxnet.img.imdecode", "iterator.DetIter._data_augmentation", "open", "fp.read", "iterator.DetIter._imdb.label_from_index().copy", "batch_label.append", "mxnet.nd.array", "numpy.array", "iterator.DetIter._imdb.label_from_index"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.image_path_from_index", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter._data_augmentation", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.label_from_index"], ["", "def", "_get_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load data/label from dataset\n        \"\"\"", "\n", "batch_data", "=", "mx", ".", "nd", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "3", ",", "self", ".", "_data_shape", "[", "0", "]", ",", "self", ".", "_data_shape", "[", "1", "]", ")", ")", "\n", "batch_label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "if", "(", "self", ".", "_current", "+", "i", ")", ">=", "self", ".", "_size", ":", "\n", "                ", "if", "not", "self", ".", "is_train", ":", "\n", "                    ", "continue", "\n", "# use padding from middle in each epoch", "\n", "", "idx", "=", "(", "self", ".", "_current", "+", "i", "+", "self", ".", "_size", "//", "2", ")", "%", "self", ".", "_size", "\n", "index", "=", "self", ".", "_index", "[", "idx", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "self", ".", "_index", "[", "self", ".", "_current", "+", "i", "]", "\n", "# index = self.debug_index", "\n", "", "im_path", "=", "self", ".", "_imdb", ".", "image_path_from_index", "(", "index", ")", "\n", "with", "open", "(", "im_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "                ", "img_content", "=", "fp", ".", "read", "(", ")", "\n", "", "img", "=", "mx", ".", "img", ".", "imdecode", "(", "img_content", ")", "\n", "gt", "=", "self", ".", "_imdb", ".", "label_from_index", "(", "index", ")", ".", "copy", "(", ")", "if", "self", ".", "is_train", "else", "None", "\n", "data", ",", "label", "=", "self", ".", "_data_augmentation", "(", "img", ",", "gt", ")", "\n", "batch_data", "[", "i", "]", "=", "data", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "batch_label", ".", "append", "(", "label", ")", "\n", "", "", "self", ".", "_data", "=", "{", "'data'", ":", "batch_data", "}", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "_label", "=", "{", "'label'", ":", "mx", ".", "nd", ".", "array", "(", "np", ".", "array", "(", "batch_label", ")", ")", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "_label", "=", "{", "'label'", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.iterator.DetIter._data_augmentation": [[242, 291], ["mxnet.img.imresize", "mxnet.nd.transpose", "mxnet.nd.full.astype", "len", "rs.sample", "int", "int", "int", "int", "int", "int", "numpy.random.uniform", "mxnet.nd.flip", "mxnet.img.fixed_crop", "mxnet.nd.full", "numpy.where", "numpy.random.uniform", "numpy.random.uniform", "len"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandPadder.sample"], ["", "", "def", "_data_augmentation", "(", "self", ",", "data", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        perform data augmentations: crop, mirror, resize, sub mean, swap channels...\n        \"\"\"", "\n", "if", "self", ".", "is_train", "and", "self", ".", "_rand_samplers", ":", "\n", "            ", "rand_crops", "=", "[", "]", "\n", "for", "rs", "in", "self", ".", "_rand_samplers", ":", "\n", "                ", "rand_crops", "+=", "rs", ".", "sample", "(", "label", ")", "\n", "", "num_rand_crops", "=", "len", "(", "rand_crops", ")", "\n", "# randomly pick up one as input data", "\n", "if", "num_rand_crops", ">", "0", ":", "\n", "                ", "index", "=", "int", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "num_rand_crops", ")", "\n", "width", "=", "data", ".", "shape", "[", "1", "]", "\n", "height", "=", "data", ".", "shape", "[", "0", "]", "\n", "crop", "=", "rand_crops", "[", "index", "]", "[", "0", "]", "\n", "xmin", "=", "int", "(", "crop", "[", "0", "]", "*", "width", ")", "\n", "ymin", "=", "int", "(", "crop", "[", "1", "]", "*", "height", ")", "\n", "xmax", "=", "int", "(", "crop", "[", "2", "]", "*", "width", ")", "\n", "ymax", "=", "int", "(", "crop", "[", "3", "]", "*", "height", ")", "\n", "if", "xmin", ">=", "0", "and", "ymin", ">=", "0", "and", "xmax", "<=", "width", "and", "ymax", "<=", "height", ":", "\n", "                    ", "data", "=", "mx", ".", "img", ".", "fixed_crop", "(", "data", ",", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ")", "\n", "", "else", ":", "\n", "# padding mode", "\n", "                    ", "new_width", "=", "xmax", "-", "xmin", "\n", "new_height", "=", "ymax", "-", "ymin", "\n", "offset_x", "=", "0", "-", "xmin", "\n", "offset_y", "=", "0", "-", "ymin", "\n", "data_bak", "=", "data", "\n", "data", "=", "mx", ".", "nd", ".", "full", "(", "(", "new_height", ",", "new_width", ",", "3", ")", ",", "128", ",", "dtype", "=", "'uint8'", ")", "\n", "data", "[", "offset_y", ":", "offset_y", "+", "height", ",", "offset_x", ":", "offset_x", "+", "width", ",", ":", "]", "=", "data_bak", "\n", "", "label", "=", "rand_crops", "[", "index", "]", "[", "1", "]", "\n", "", "", "if", "self", ".", "is_train", ":", "\n", "            ", "interp_methods", "=", "[", "cv2", ".", "INTER_LINEAR", ",", "cv2", ".", "INTER_CUBIC", ",", "cv2", ".", "INTER_AREA", ",", "cv2", ".", "INTER_NEAREST", ",", "cv2", ".", "INTER_LANCZOS4", "]", "\n", "", "else", ":", "\n", "            ", "interp_methods", "=", "[", "cv2", ".", "INTER_LINEAR", "]", "\n", "", "interp_method", "=", "interp_methods", "[", "int", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "len", "(", "interp_methods", ")", ")", "]", "\n", "data", "=", "mx", ".", "img", ".", "imresize", "(", "data", ",", "self", ".", "_data_shape", "[", "1", "]", ",", "self", ".", "_data_shape", "[", "0", "]", ",", "interp_method", ")", "\n", "if", "self", ".", "is_train", "and", "self", ".", "_rand_mirror", ":", "\n", "            ", "if", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "0.5", ":", "\n", "                ", "data", "=", "mx", ".", "nd", ".", "flip", "(", "data", ",", "axis", "=", "1", ")", "\n", "valid_mask", "=", "np", ".", "where", "(", "label", "[", ":", ",", "0", "]", ">", "-", "1", ")", "[", "0", "]", "\n", "tmp", "=", "1.0", "-", "label", "[", "valid_mask", ",", "1", "]", "\n", "label", "[", "valid_mask", ",", "1", "]", "=", "1.0", "-", "label", "[", "valid_mask", ",", "3", "]", "\n", "label", "[", "valid_mask", ",", "3", "]", "=", "tmp", "\n", "", "", "data", "=", "mx", ".", "nd", ".", "transpose", "(", "data", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "data", "=", "data", ".", "astype", "(", "'float32'", ")", "\n", "data", "=", "data", "-", "self", ".", "_mean_pixels", "\n", "return", "data", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.__init__": [[27, 55], ["imdb.Imdb.__init__", "os.path.join", "len", "pascal_voc.PascalVoc._load_image_set_index", "len", "class_names.strip().split", "pascal_voc.PascalVoc._load_class_names", "pascal_voc.PascalVoc._load_image_labels", "pascal_voc.PascalVoc._filter_image_with_no_gt", "os.path.join", "class_names.strip", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._load_image_set_index", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.imdb.Imdb._load_class_names", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._load_image_labels", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._filter_image_with_no_gt"], ["def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", ",", "shuffle", "=", "False", ",", "is_train", "=", "False", ",", "class_names", "=", "None", ",", "\n", "names", "=", "'pascal_voc.names'", ",", "true_negative_images", "=", "False", ")", ":", "\n", "        ", "super", "(", "PascalVoc", ",", "self", ")", ".", "__init__", "(", "'voc_'", "+", "year", "+", "'_'", "+", "image_set", ")", "\n", "self", ".", "image_set", "=", "image_set", "\n", "self", ".", "year", "=", "year", "\n", "self", ".", "devkit_path", "=", "devkit_path", "\n", "self", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "devkit_path", ",", "'VOC'", "+", "year", ")", "\n", "self", ".", "extension", "=", "'.jpg'", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "true_negative_images", "=", "true_negative_images", "\n", "\n", "if", "class_names", "is", "not", "None", ":", "\n", "            ", "self", ".", "classes", "=", "class_names", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classes", "=", "self", ".", "_load_class_names", "(", "names", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'names'", ")", ")", "\n", "\n", "", "self", ".", "config", "=", "{", "'use_difficult'", ":", "True", ",", "\n", "'comp_id'", ":", "'comp4'", ",", "}", "\n", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "image_set_index", "=", "self", ".", "_load_image_set_index", "(", "shuffle", ")", "\n", "self", ".", "num_images", "=", "len", "(", "self", ".", "image_set_index", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "labels", "=", "self", ".", "_load_image_labels", "(", ")", "\n", "# filter images with no ground-truth, like in case you use only a subset of classes", "\n", "", "if", "not", "self", ".", "true_negative_images", ":", "\n", "            ", "self", ".", "_filter_image_with_no_gt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.cache_path": [[56, 69], ["os.path.join", "os.path.dirname", "os.path.exists", "os.mkdir"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "cache_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        make a directory to store all caches\n\n        Returns:\n        ---------\n            cache path\n        \"\"\"", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ",", "'cache'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "cache_path", ")", "\n", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._filter_image_with_no_gt": [[70, 92], ["len", "print", "print", "enumerate", "numpy.logical_and"], "methods", ["None"], ["", "def", "_filter_image_with_no_gt", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        filter images that have no ground-truth labels.\n        use case: when you wish to work only on a subset of pascal classes, you have 2 options:\n            1. use only the sub-dataset that contains the subset of classes\n            2. use all images, and images with no ground-truth will count as true-negative images\n        :return:\n        self object with filtered information\n        \"\"\"", "\n", "\n", "# filter images that do not have any of the specified classes", "\n", "self", ".", "labels", "=", "[", "f", "[", "np", ".", "logical_and", "(", "f", "[", ":", ",", "0", "]", ">=", "0", ",", "f", "[", ":", ",", "0", "]", "<=", "self", ".", "num_classes", "-", "1", ")", ",", ":", "]", "for", "f", "in", "self", ".", "labels", "]", "\n", "# find indices of images with ground-truth labels", "\n", "gt_indices", "=", "[", "idx", "for", "idx", ",", "f", "in", "enumerate", "(", "self", ".", "labels", ")", "if", "not", "f", ".", "size", "==", "0", "]", "\n", "\n", "self", ".", "labels", "=", "[", "self", ".", "labels", "[", "idx", "]", "for", "idx", "in", "gt_indices", "]", "\n", "self", ".", "image_set_index", "=", "[", "self", ".", "image_set_index", "[", "idx", "]", "for", "idx", "in", "gt_indices", "]", "\n", "old_num_images", "=", "self", ".", "num_images", "\n", "self", ".", "num_images", "=", "len", "(", "self", ".", "labels", ")", "\n", "\n", "print", "(", "'filtering images with no gt-labels. can abort filtering using *true_negative* flag'", ")", "\n", "print", "(", "'... remaining {0}/{1} images.  '", ".", "format", "(", "self", ".", "num_images", ",", "old_num_images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._load_image_set_index": [[93, 112], ["os.path.join", "os.path.exists", "open", "numpy.random.shuffle", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ",", "shuffle", ")", ":", "\n", "        ", "\"\"\"\n        find out which indexes correspond to given image set (train or val)\n\n        Parameters:\n        ----------\n        shuffle : boolean\n            whether to shuffle the image list\n        Returns:\n        ----------\n        entire list of images specified in the setting\n        \"\"\"", "\n", "image_set_index_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'ImageSets'", ",", "'Main'", ",", "self", ".", "image_set", "+", "'.txt'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_index_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_index_file", ")", "\n", "with", "open", "(", "image_set_index_file", ")", "as", "f", ":", "\n", "            ", "image_set_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "image_set_index", ")", "\n", "", "return", "image_set_index", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.image_path_from_index": [[113, 130], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, find out full path\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n        Returns:\n        ----------\n        full path of this image\n        \"\"\"", "\n", "assert", "self", ".", "image_set_index", "is", "not", "None", ",", "\"Dataset not initialized\"", "\n", "name", "=", "self", ".", "image_set_index", "[", "index", "]", "\n", "image_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'JPEGImages'", ",", "name", "+", "self", ".", "extension", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_file", ")", "\n", "return", "image_file", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.label_from_index": [[131, 145], ["None"], "methods", ["None"], ["", "def", "label_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, return preprocessed ground-truth\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n        Returns:\n        ----------\n        ground-truths of this image\n        \"\"\"", "\n", "assert", "self", ".", "labels", "is", "not", "None", ",", "\"Labels not processed\"", "\n", "return", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._label_path_from_index": [[146, 162], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "_label_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        given image index, find out annotation path\n\n        Parameters:\n        ----------\n        index: int\n            index of a specific image\n\n        Returns:\n        ----------\n        full path of annotation file\n        \"\"\"", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'Annotations'", ",", "index", "+", "'.xml'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "label_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "label_file", ")", "\n", "return", "label_file", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._load_image_labels": [[163, 200], ["pascal_voc.PascalVoc._label_path_from_index", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.find", "float", "float", "ET.parse.getroot.iter", "temp.append", "int", "obj.find", "label.append", "numpy.array", "tree.getroot.find.find", "tree.getroot.find.find", "obj.find", "len", "pascal_voc.PascalVoc.classes.index", "float", "float", "float", "float", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._label_path_from_index"], ["", "def", "_load_image_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        preprocess all ground-truths\n\n        Returns:\n        ----------\n        labels packed in [num_images x max_num_objects x 5] tensor\n        \"\"\"", "\n", "temp", "=", "[", "]", "\n", "\n", "# load ground-truth from xml annotations", "\n", "for", "idx", "in", "self", ".", "image_set_index", ":", "\n", "            ", "label_file", "=", "self", ".", "_label_path_from_index", "(", "idx", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "label_file", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "width", "=", "float", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "float", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "label", "=", "[", "]", "\n", "\n", "for", "obj", "in", "root", ".", "iter", "(", "'object'", ")", ":", "\n", "                ", "difficult", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "# if not self.config['use_difficult'] and difficult == 1:", "\n", "#     continue", "\n", "cls_name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "if", "cls_name", "not", "in", "self", ".", "classes", ":", "\n", "                    ", "cls_id", "=", "len", "(", "self", ".", "classes", ")", "\n", "", "else", ":", "\n", "                    ", "cls_id", "=", "self", ".", "classes", ".", "index", "(", "cls_name", ")", "\n", "", "xml_box", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "xmin", "=", "float", "(", "xml_box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "/", "width", "\n", "ymin", "=", "float", "(", "xml_box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "/", "height", "\n", "xmax", "=", "float", "(", "xml_box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "/", "width", "\n", "ymax", "=", "float", "(", "xml_box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "/", "height", "\n", "label", ".", "append", "(", "[", "cls_id", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ",", "difficult", "]", ")", "\n", "", "temp", ".", "append", "(", "np", ".", "array", "(", "label", ")", ")", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.evaluate_detections": [[201, 225], ["os.path.join", "os.path.join", "os.path.join", "pascal_voc.PascalVoc.write_pascal_results", "pascal_voc.PascalVoc.do_python_eval", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.write_pascal_results", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.do_python_eval"], ["", "def", "evaluate_detections", "(", "self", ",", "detections", ")", ":", "\n", "        ", "\"\"\"\n        top level evaluations\n        Parameters:\n        ----------\n        detections: list\n            result list, each entry is a matrix of detections\n        Returns:\n        ----------\n            None\n        \"\"\"", "\n", "# make all these folders for results", "\n", "result_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "devkit_path", ",", "'results'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "result_dir", ")", "\n", "", "year_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "devkit_path", ",", "'results'", ",", "'VOC'", "+", "self", ".", "year", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "year_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "year_folder", ")", "\n", "", "res_file_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "devkit_path", ",", "'results'", ",", "'VOC'", "+", "self", ".", "year", ",", "'Main'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_file_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "res_file_folder", ")", "\n", "\n", "", "self", ".", "write_pascal_results", "(", "detections", ")", "\n", "self", ".", "do_python_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.get_result_file_template": [[226, 240], ["os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "get_result_file_template", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        this is a template\n        VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt\n\n        Returns:\n        ----------\n            a string template\n        \"\"\"", "\n", "res_file_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "devkit_path", ",", "'results'", ",", "'VOC'", "+", "self", ".", "year", ",", "'Main'", ")", "\n", "comp_id", "=", "self", ".", "config", "[", "'comp_id'", "]", "\n", "filename", "=", "comp_id", "+", "'_det_'", "+", "self", ".", "image_set", "+", "'_{:s}.txt'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "res_file_folder", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.write_pascal_results": [[241, 268], ["enumerate", "print", "pascal_voc.PascalVoc.get_result_file_template().format", "open", "enumerate", "pascal_voc.PascalVoc.get_result_file_template", "pascal_voc.PascalVoc._get_imsize", "range", "pascal_voc.PascalVoc.image_path_from_index", "int", "f.write", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.get_result_file_template", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._get_imsize", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.image_path_from_index"], ["", "def", "write_pascal_results", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "\"\"\"\n        write results files in pascal devkit path\n        Parameters:\n        ----------\n        all_boxes: list\n            boxes to be processed [bbox, confidence]\n        Returns:\n        ----------\n        None\n        \"\"\"", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "print", "(", "'Writing {} VOC results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "get_result_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_set_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "im_ind", "]", "\n", "if", "dets", ".", "shape", "[", "0", "]", "<", "1", ":", "\n", "                        ", "continue", "\n", "", "h", ",", "w", "=", "self", ".", "_get_imsize", "(", "self", ".", "image_path_from_index", "(", "im_ind", ")", ")", "\n", "# the VOCdevkit expects 1-based indices", "\n", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "if", "(", "int", "(", "dets", "[", "k", ",", "0", "]", ")", "==", "cls_ind", ")", ":", "\n", "                            ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "1", "]", ",", "\n", "int", "(", "dets", "[", "k", ",", "2", "]", "*", "w", ")", "+", "1", ",", "int", "(", "dets", "[", "k", ",", "3", "]", "*", "h", ")", "+", "1", ",", "\n", "int", "(", "dets", "[", "k", ",", "4", "]", "*", "w", ")", "+", "1", ",", "int", "(", "dets", "[", "k", ",", "5", "]", "*", "h", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.do_python_eval": [[269, 291], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "pascal_voc.PascalVoc.get_result_file_template().format", "evaluate.eval_voc.voc_eval", "print", "int", "numpy.mean", "pascal_voc.PascalVoc.get_result_file_template"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_voc.voc_eval", "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc.get_result_file_template"], ["", "", "", "", "", "", "def", "do_python_eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        python evaluation wrapper\n\n        Returns:\n        ----------\n        None\n        \"\"\"", "\n", "annopath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'Annotations'", ",", "'{:s}.xml'", ")", "\n", "imageset_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'ImageSets'", ",", "'Main'", ",", "self", ".", "image_set", "+", "'.txt'", ")", "\n", "cache_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "year", ")", "<", "2010", "else", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Y'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "filename", "=", "self", ".", "get_result_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "filename", ",", "annopath", ",", "imageset_file", ",", "cls", ",", "cache_dir", ",", "\n", "ovthresh", "=", "0.5", ",", "use_07_metric", "=", "use_07_metric", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "", "print", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.dataset.pascal_voc.PascalVoc._get_imsize": [[292, 301], ["cv2.imread"], "methods", ["None"], ["", "def", "_get_imsize", "(", "self", ",", "im_name", ")", ":", "\n", "        ", "\"\"\"\n        get image size info\n        Returns:\n        ----------\n        tuple of (height, width)\n        \"\"\"", "\n", "img", "=", "cv2", ".", "imread", "(", "im_name", ")", "\n", "return", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.__init__": [[66, 84], ["dict", "dict", "dict", "dict", "collections.defaultdict", "collections.defaultdict", "print", "time.time", "json.load", "print", "coco.COCO.createIndex", "open", "type", "type", "time.time"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.createIndex"], ["    ", "def", "__init__", "(", "self", ",", "annotation_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of Microsoft COCO helper class for reading and visualizing annotations.\n        :param annotation_file (str): location of annotation file\n        :param image_folder (str): location to the folder that hosts images.\n        :return:\n        \"\"\"", "\n", "# load dataset", "\n", "self", ".", "dataset", ",", "self", ".", "anns", ",", "self", ".", "cats", ",", "self", ".", "imgs", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "imgToAnns", ",", "self", ".", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "not", "annotation_file", "==", "None", ":", "\n", "            ", "print", "(", "'loading annotations into memory...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "dataset", "=", "json", ".", "load", "(", "open", "(", "annotation_file", ",", "'r'", ")", ")", "\n", "assert", "type", "(", "dataset", ")", "==", "dict", ",", "'annotation file format {} not supported'", ".", "format", "(", "type", "(", "dataset", ")", ")", "\n", "print", "(", "'Done (t={:0.2f}s)'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "createIndex", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.createIndex": [[85, 115], ["print", "print", "collections.defaultdict", "collections.defaultdict", "imgToAnns[].append", "catToImgs[].append"], "methods", ["None"], ["", "", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "        ", "print", "(", "'creating index...'", ")", "\n", "anns", ",", "cats", ",", "imgs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "imgToAnns", ",", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "'annotations'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "imgToAnns", "[", "ann", "[", "'image_id'", "]", "]", ".", "append", "(", "ann", ")", "\n", "anns", "[", "ann", "[", "'id'", "]", "]", "=", "ann", "\n", "\n", "", "", "if", "'images'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", ":", "\n", "                ", "imgs", "[", "img", "[", "'id'", "]", "]", "=", "img", "\n", "\n", "", "", "if", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "cat", "in", "self", ".", "dataset", "[", "'categories'", "]", ":", "\n", "                ", "cats", "[", "cat", "[", "'id'", "]", "]", "=", "cat", "\n", "\n", "", "", "if", "'annotations'", "in", "self", ".", "dataset", "and", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "catToImgs", "[", "ann", "[", "'category_id'", "]", "]", ".", "append", "(", "ann", "[", "'image_id'", "]", ")", "\n", "\n", "", "", "print", "(", "'index created!'", ")", "\n", "\n", "# create class members", "\n", "self", ".", "anns", "=", "anns", "\n", "self", ".", "imgToAnns", "=", "imgToAnns", "\n", "self", ".", "catToImgs", "=", "catToImgs", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "cats", "=", "cats", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info": [[116, 123], ["coco.COCO.dataset[].items", "print"], "methods", ["None"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print information about the annotation file.\n        :return:\n        \"\"\"", "\n", "for", "key", ",", "value", "in", "self", ".", "dataset", "[", "'info'", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.getAnnIds": [[124, 151], ["len", "len", "len", "type", "type", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["None"], ["", "", "def", "getAnnIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ",", "areaRng", "=", "[", "]", ",", "iscrowd", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Get ann ids that satisfy given filter conditions. default skips that filter\n        :param imgIds  (int array)     : get anns for given imgs\n               catIds  (int array)     : get anns for given cats\n               areaRng (float array)   : get anns for given area range (e.g. [0 inf])\n               iscrowd (boolean)       : get anns for given crowd label (False or True)\n        :return: ids (int array)       : integer array of ann ids\n        \"\"\"", "\n", "imgIds", "=", "imgIds", "if", "type", "(", "imgIds", ")", "==", "list", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "type", "(", "catIds", ")", "==", "list", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "len", "(", "areaRng", ")", "==", "0", ":", "\n", "            ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "else", ":", "\n", "            ", "if", "not", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "                ", "lists", "=", "[", "self", ".", "imgToAnns", "[", "imgId", "]", "for", "imgId", "in", "imgIds", "if", "imgId", "in", "self", ".", "imgToAnns", "]", "\n", "anns", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "lists", ")", ")", "\n", "", "else", ":", "\n", "                ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "anns", "=", "anns", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'category_id'", "]", "in", "catIds", "]", "\n", "anns", "=", "anns", "if", "len", "(", "areaRng", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'area'", "]", ">", "areaRng", "[", "0", "]", "and", "ann", "[", "'area'", "]", "<", "areaRng", "[", "1", "]", "]", "\n", "", "if", "not", "iscrowd", "==", "None", ":", "\n", "            ", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "if", "ann", "[", "'iscrowd'", "]", "==", "iscrowd", "]", "\n", "", "else", ":", "\n", "            ", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "]", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.getCatIds": [[152, 173], ["len", "len", "len", "type", "type", "type", "len", "len", "len"], "methods", ["None"], ["", "def", "getCatIds", "(", "self", ",", "catNms", "=", "[", "]", ",", "supNms", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        filtering parameters. default skips that filter.\n        :param catNms (str array)  : get cats for given cat names\n        :param supNms (str array)  : get cats for given supercategory names\n        :param catIds (int array)  : get cats for given cat ids\n        :return: ids (int array)   : integer array of cat ids\n        \"\"\"", "\n", "catNms", "=", "catNms", "if", "type", "(", "catNms", ")", "==", "list", "else", "[", "catNms", "]", "\n", "supNms", "=", "supNms", "if", "type", "(", "supNms", ")", "==", "list", "else", "[", "supNms", "]", "\n", "catIds", "=", "catIds", "if", "type", "(", "catIds", ")", "==", "list", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "catNms", ")", "==", "len", "(", "supNms", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "", "else", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catNms", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'name'", "]", "in", "catNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "supNms", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'supercategory'", "]", "in", "supNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'id'", "]", "in", "catIds", "]", "\n", "", "ids", "=", "[", "cat", "[", "'id'", "]", "for", "cat", "in", "cats", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.getImgIds": [[174, 194], ["list", "len", "len", "coco.COCO.imgs.keys", "set", "enumerate", "type", "type", "set", "set", "len"], "methods", ["None"], ["", "def", "getImgIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Get img ids that satisfy given filter conditions.\n        :param imgIds (int array) : get imgs for given ids\n        :param catIds (int array) : get imgs with all given cats\n        :return: ids (int array)  : integer array of img ids\n        '''", "\n", "imgIds", "=", "imgIds", "if", "type", "(", "imgIds", ")", "==", "list", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "type", "(", "catIds", ")", "==", "list", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "ids", "=", "self", ".", "imgs", ".", "keys", "(", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "set", "(", "imgIds", ")", "\n", "for", "i", ",", "catId", "in", "enumerate", "(", "catIds", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "len", "(", "ids", ")", "==", "0", ":", "\n", "                    ", "ids", "=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ids", "&=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "", "", "return", "list", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadAnns": [[195, 205], ["type", "type"], "methods", ["None"], ["", "def", "loadAnns", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying anns\n        :return: anns (object array) : loaded ann objects\n        \"\"\"", "\n", "if", "type", "(", "ids", ")", "==", "list", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadCats": [[206, 216], ["type", "type"], "methods", ["None"], ["", "", "def", "loadCats", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load cats with the specified ids.\n        :param ids (int array)       : integer ids specifying cats\n        :return: cats (object array) : loaded cat objects\n        \"\"\"", "\n", "if", "type", "(", "ids", ")", "==", "list", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadImgs": [[217, 227], ["type", "type"], "methods", ["None"], ["", "", "def", "loadImgs", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying img\n        :return: imgs (object array) : loaded img objects\n        \"\"\"", "\n", "if", "type", "(", "ids", ")", "==", "list", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.showAnns": [[228, 293], ["len", "matplotlib.gca", "matplotlib.gca.set_autoscale_on", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "Exception", "numpy.array", "matplotlib.plot", "matplotlib.plot", "print", "type", "NotImplementedError", "numpy.ones", "range", "matplotlib.gca.imshow", "type", "numpy.array", "numpy.all", "numpy.array().reshape", "polygons.append", "color.append", "type", "NotImplementedError", "numpy.dstack", "matplotlib.plot", "matplotlib.patches.Polygon", "numpy.array", "numpy.random.random().tolist", "numpy.random.random", "numpy.array", "int", "coco.COCO.loadCats", "numpy.random.random", "len"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadCats"], ["", "", "def", "showAnns", "(", "self", ",", "anns", ")", ":", "\n", "        ", "\"\"\"\n        Display the specified annotations.\n        :param anns (array of object): annotations to display\n        :return: None\n        \"\"\"", "\n", "if", "len", "(", "anns", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "'segmentation'", "in", "anns", "[", "0", "]", "or", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "datasetType", "=", "'instances'", "\n", "", "elif", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "datasetType", "=", "'captions'", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'datasetType not supported'", ")", "\n", "", "if", "datasetType", "==", "'instances'", ":", "\n", "            ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_autoscale_on", "(", "False", ")", "\n", "polygons", "=", "[", "]", "\n", "color", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "c", "=", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", "*", "0.6", "+", "0.4", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "'segmentation'", "in", "ann", ":", "\n", "                    ", "if", "type", "(", "ann", "[", "'segmentation'", "]", ")", "==", "list", ":", "\n", "# polygon", "\n", "                        ", "for", "seg", "in", "ann", "[", "'segmentation'", "]", ":", "\n", "                            ", "poly", "=", "np", ".", "array", "(", "seg", ")", ".", "reshape", "(", "(", "int", "(", "len", "(", "seg", ")", "/", "2", ")", ",", "2", ")", ")", "\n", "polygons", ".", "append", "(", "Polygon", "(", "poly", ")", ")", "\n", "color", ".", "append", "(", "c", ")", "\n", "", "", "else", ":", "\n", "# mask", "\n", "                        ", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "if", "type", "(", "ann", "[", "'segmentation'", "]", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# rle = maskUtils.frPyObjects([ann['segmentation']], t['height'], t['width'])", "\n", "                            ", "raise", "NotImplementedError", "(", "\"maskUtils disabled!\"", ")", "\n", "", "else", ":", "\n", "                            ", "rle", "=", "[", "ann", "[", "'segmentation'", "]", "]", "\n", "# m = maskUtils.decode(rle)", "\n", "", "raise", "NotImplementedError", "(", "\"maskUtils disabled!\"", ")", "\n", "img", "=", "np", ".", "ones", "(", "(", "m", ".", "shape", "[", "0", "]", ",", "m", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "if", "ann", "[", "'iscrowd'", "]", "==", "1", ":", "\n", "                            ", "color_mask", "=", "np", ".", "array", "(", "[", "2.0", ",", "166.0", ",", "101.0", "]", ")", "/", "255", "\n", "", "if", "ann", "[", "'iscrowd'", "]", "==", "0", ":", "\n", "                            ", "color_mask", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                            ", "img", "[", ":", ",", ":", ",", "i", "]", "=", "color_mask", "[", "i", "]", "\n", "", "ax", ".", "imshow", "(", "np", ".", "dstack", "(", "(", "img", ",", "m", "*", "0.5", ")", ")", ")", "\n", "", "", "if", "'keypoints'", "in", "ann", "and", "type", "(", "ann", "[", "'keypoints'", "]", ")", "==", "list", ":", "\n", "# turn skeleton into zero-based index", "\n", "                    ", "sks", "=", "np", ".", "array", "(", "self", ".", "loadCats", "(", "ann", "[", "'category_id'", "]", ")", "[", "0", "]", "[", "'skeleton'", "]", ")", "-", "1", "\n", "kp", "=", "np", ".", "array", "(", "ann", "[", "'keypoints'", "]", ")", "\n", "x", "=", "kp", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "kp", "[", "1", ":", ":", "3", "]", "\n", "v", "=", "kp", "[", "2", ":", ":", "3", "]", "\n", "for", "sk", "in", "sks", ":", "\n", "                        ", "if", "np", ".", "all", "(", "v", "[", "sk", "]", ">", "0", ")", ":", "\n", "                            ", "plt", ".", "plot", "(", "x", "[", "sk", "]", ",", "y", "[", "sk", "]", ",", "linewidth", "=", "3", ",", "color", "=", "c", ")", "\n", "", "", "plt", ".", "plot", "(", "x", "[", "v", ">", "0", "]", ",", "y", "[", "v", ">", "0", "]", ",", "'o'", ",", "markersize", "=", "8", ",", "markerfacecolor", "=", "c", ",", "markeredgecolor", "=", "'k'", ",", "markeredgewidth", "=", "2", ")", "\n", "plt", ".", "plot", "(", "x", "[", "v", ">", "1", "]", ",", "y", "[", "v", ">", "1", "]", ",", "'o'", ",", "markersize", "=", "8", ",", "markerfacecolor", "=", "c", ",", "markeredgecolor", "=", "c", ",", "markeredgewidth", "=", "2", ")", "\n", "", "", "p", "=", "PatchCollection", "(", "polygons", ",", "facecolor", "=", "color", ",", "linewidths", "=", "0", ",", "alpha", "=", "0.4", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "p", "=", "PatchCollection", "(", "polygons", ",", "facecolor", "=", "'none'", ",", "edgecolors", "=", "color", ",", "linewidths", "=", "2", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "", "elif", "datasetType", "==", "'captions'", ":", "\n", "            ", "for", "ann", "in", "anns", ":", "\n", "                ", "print", "(", "ann", "[", "'caption'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadRes": [[294, 356], ["coco.COCO", "print", "time.time", "print", "coco.COCO.createIndex", "json.load", "type", "set", "enumerate", "type", "type", "open", "type", "coco.COCO.loadNumpyAnnotations", "set", "set", "set", "set", "copy.deepcopy", "enumerate", "coco.COCO.getImgIds", "copy.deepcopy", "enumerate", "time.time", "NotImplementedError", "copy.deepcopy", "enumerate", "NotImplementedError", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.createIndex", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadNumpyAnnotations", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.getImgIds"], ["", "", "", "def", "loadRes", "(", "self", ",", "resFile", ")", ":", "\n", "        ", "\"\"\"\n        Load result file and return a result api object.\n        :param   resFile (str)     : file name of result file\n        :return: res (obj)         : result api object\n        \"\"\"", "\n", "res", "=", "COCO", "(", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", "]", "\n", "\n", "print", "(", "'Loading and preparing results...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "type", "(", "resFile", ")", "==", "str", "or", "type", "(", "resFile", ")", "==", "unicode", ":", "\n", "            ", "anns", "=", "json", ".", "load", "(", "open", "(", "resFile", ")", ")", "\n", "", "elif", "type", "(", "resFile", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "anns", "=", "self", ".", "loadNumpyAnnotations", "(", "resFile", ")", "\n", "", "else", ":", "\n", "            ", "anns", "=", "resFile", "\n", "", "assert", "type", "(", "anns", ")", "==", "list", ",", "'results in not an array of objects'", "\n", "annsImgIds", "=", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", "\n", "assert", "set", "(", "annsImgIds", ")", "==", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ",", "'Results do not correspond to current coco set'", "\n", "if", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "imgIds", "=", "set", "(", "[", "img", "[", "'id'", "]", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "]", ")", "&", "set", "(", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "if", "img", "[", "'id'", "]", "in", "imgIds", "]", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "", "", "elif", "'bbox'", "in", "anns", "[", "0", "]", "and", "not", "anns", "[", "0", "]", "[", "'bbox'", "]", "==", "[", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "bb", "=", "ann", "[", "'bbox'", "]", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "[", "bb", "[", "0", "]", ",", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ",", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "]", "\n", "if", "not", "'segmentation'", "in", "ann", ":", "\n", "                    ", "ann", "[", "'segmentation'", "]", "=", "[", "[", "x1", ",", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "y2", ",", "x2", ",", "y1", "]", "]", "\n", "", "ann", "[", "'area'", "]", "=", "bb", "[", "2", "]", "*", "bb", "[", "3", "]", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'segmentation'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "# now only support compressed RLE format as segmentation results", "\n", "# ann['area'] = maskUtils.area(ann['segmentation'])", "\n", "                ", "raise", "NotImplementedError", "(", "\"maskUtils disabled!\"", ")", "\n", "if", "not", "'bbox'", "in", "ann", ":", "\n", "# ann['bbox'] = maskUtils.toBbox(ann['segmentation'])", "\n", "                    ", "raise", "NotImplementedError", "(", "\"maskUtils disabled!\"", ")", "\n", "", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "s", "=", "ann", "[", "'keypoints'", "]", "\n", "x", "=", "s", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "s", "[", "1", ":", ":", "3", "]", "\n", "x0", ",", "x1", ",", "y0", ",", "y1", "=", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "max", "(", "y", ")", "\n", "ann", "[", "'area'", "]", "=", "(", "x1", "-", "x0", ")", "*", "(", "y1", "-", "y0", ")", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'bbox'", "]", "=", "[", "x0", ",", "y0", ",", "x1", "-", "x0", ",", "y1", "-", "y0", "]", "\n", "", "", "print", "(", "'DONE (t={:0.2f}s)'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "res", ".", "dataset", "[", "'annotations'", "]", "=", "anns", "\n", "res", ".", "createIndex", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.download": [[357, 380], ["len", "enumerate", "print", "len", "coco.COCO.imgs.values", "coco.COCO.loadImgs", "os.path.exists", "os.makedirs", "time.time", "os.path.join", "print", "os.path.exists", "urlretrieve", "time.time"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadImgs"], ["", "def", "download", "(", "self", ",", "tarDir", "=", "None", ",", "imgIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Download COCO images from mscoco.org server.\n        :param tarDir (str): COCO results directory name\n               imgIds (list): images to be downloaded\n        :return:\n        '''", "\n", "if", "tarDir", "is", "None", ":", "\n", "            ", "print", "(", "'Please specify target directory'", ")", "\n", "return", "-", "1", "\n", "", "if", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "            ", "imgs", "=", "self", ".", "imgs", ".", "values", "(", ")", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "self", ".", "loadImgs", "(", "imgIds", ")", "\n", "", "N", "=", "len", "(", "imgs", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tarDir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "tarDir", ")", "\n", "", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "tarDir", ",", "img", "[", "'file_name'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "                ", "urlretrieve", "(", "img", "[", "'coco_url'", "]", ",", "fname", ")", "\n", "", "print", "(", "'downloaded {}/{} images (t={:0.1f}s)'", ".", "format", "(", "i", ",", "N", ",", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.loadNumpyAnnotations": [[381, 403], ["print", "print", "range", "type", "print", "int", "int"], "methods", ["None"], ["", "", "def", "loadNumpyAnnotations", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Convert result data from a numpy array [Nx7] where each row contains {imageID,x1,y1,w,h,score,class}\n        :param  data (numpy.ndarray)\n        :return: annotations (python nested list)\n        \"\"\"", "\n", "print", "(", "'Converting ndarray to lists...'", ")", "\n", "assert", "(", "type", "(", "data", ")", "==", "np", ".", "ndarray", ")", "\n", "print", "(", "data", ".", "shape", ")", "\n", "assert", "(", "data", ".", "shape", "[", "1", "]", "==", "7", ")", "\n", "N", "=", "data", ".", "shape", "[", "0", "]", "\n", "ann", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "i", "%", "1000000", "==", "0", ":", "\n", "                ", "print", "(", "'{}/{}'", ".", "format", "(", "i", ",", "N", ")", ")", "\n", "", "ann", "+=", "[", "{", "\n", "'image_id'", ":", "int", "(", "data", "[", "i", ",", "0", "]", ")", ",", "\n", "'bbox'", ":", "[", "data", "[", "i", ",", "1", "]", ",", "data", "[", "i", ",", "2", "]", ",", "data", "[", "i", ",", "3", "]", ",", "data", "[", "i", ",", "4", "]", "]", ",", "\n", "'score'", ":", "data", "[", "i", ",", "5", "]", ",", "\n", "'category_id'", ":", "int", "(", "data", "[", "i", ",", "6", "]", ")", ",", "\n", "}", "]", "\n", "", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.annToRLE": [[404, 426], ["type", "NotImplementedError", "type", "NotImplementedError"], "methods", ["None"], ["", "def", "annToRLE", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE to RLE.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "h", ",", "w", "=", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", "\n", "segm", "=", "ann", "[", "'segmentation'", "]", "\n", "if", "type", "(", "segm", ")", "==", "list", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "# rles = maskUtils.frPyObjects(segm, h, w)", "\n", "# rle = maskUtils.merge(rles)", "\n", "            ", "raise", "NotImplementedError", "(", "\"maskUtils disabled!\"", ")", "\n", "", "elif", "type", "(", "segm", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# uncompressed RLE", "\n", "# rle = maskUtils.frPyObjects(segm, h, w)", "\n", "            ", "raise", "NotImplementedError", "(", "\"maskUtils disabled!\"", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "ann", "[", "'segmentation'", "]", "\n", "", "return", "rle", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.annToMask": [[427, 436], ["coco.COCO.annToRLE", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.annToRLE"], ["", "def", "annToMask", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE, or RLE to binary mask.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "rle", "=", "self", ".", "annToRLE", "(", "ann", ")", "\n", "# m = maskUtils.decode(rle)", "\n", "raise", "NotImplementedError", "(", "\"maskUtils disabled!\"", ")", "\n", "return", "m", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.prepare_dataset.load_pascal": [[12, 50], ["zip", "y.strip", "y.strip", "len", "len", "imdbs.append", "len", "dataset.concat_db.ConcatDB", "image_set.split", "year.split", "len", "len", "len", "len", "len", "len", "dataset.pascal_voc.PascalVoc"], "function", ["None"], ["def", "load_pascal", "(", "image_set", ",", "year", ",", "devkit_path", ",", "shuffle", "=", "False", ",", "class_names", "=", "None", ",", "true_negative", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    wrapper function for loading pascal voc dataset\n\n    Parameters:\n    ----------\n    image_set : str\n        train, trainval...\n    year : str\n        2007, 2012 or combinations splitted by comma\n    devkit_path : str\n        root directory of dataset\n    shuffle : bool\n        whether to shuffle initial list\n\n    Returns:\n    ----------\n    Imdb\n    \"\"\"", "\n", "image_set", "=", "[", "y", ".", "strip", "(", ")", "for", "y", "in", "image_set", ".", "split", "(", "','", ")", "]", "\n", "assert", "image_set", ",", "\"No image_set specified\"", "\n", "year", "=", "[", "y", ".", "strip", "(", ")", "for", "y", "in", "year", ".", "split", "(", "','", ")", "]", "\n", "assert", "year", ",", "\"No year specified\"", "\n", "\n", "# make sure (# sets == # years)", "\n", "if", "len", "(", "image_set", ")", ">", "1", "and", "len", "(", "year", ")", "==", "1", ":", "\n", "        ", "year", "=", "year", "*", "len", "(", "image_set", ")", "\n", "", "if", "len", "(", "image_set", ")", "==", "1", "and", "len", "(", "year", ")", ">", "1", ":", "\n", "        ", "image_set", "=", "image_set", "*", "len", "(", "year", ")", "\n", "", "assert", "len", "(", "image_set", ")", "==", "len", "(", "year", ")", ",", "\"Number of sets and year mismatch\"", "\n", "\n", "imdbs", "=", "[", "]", "\n", "for", "s", ",", "y", "in", "zip", "(", "image_set", ",", "year", ")", ":", "\n", "        ", "imdbs", ".", "append", "(", "PascalVoc", "(", "s", ",", "y", ",", "devkit_path", ",", "shuffle", ",", "is_train", "=", "True", ",", "class_names", "=", "class_names", ",", "true_negative_images", "=", "true_negative", ")", ")", "\n", "", "if", "len", "(", "imdbs", ")", ">", "1", ":", "\n", "        ", "return", "ConcatDB", "(", "imdbs", ",", "shuffle", ")", "\n", "", "else", ":", "\n", "        ", "return", "imdbs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.prepare_dataset.load_coco": [[51, 74], ["os.path.join", "imdbs.append", "len", "dataset.concat_db.ConcatDB", "image_set.split", "dataset.mscoco.Coco", "y.strip"], "function", ["None"], ["", "", "def", "load_coco", "(", "image_set", ",", "dirname", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    wrapper function for loading ms coco dataset\n\n    Parameters:\n    ----------\n    image_set : str\n        train2014, val2014, valminusminival2014, minival2014\n    dirname: str\n        root dir for coco\n    shuffle: boolean\n        initial shuffle\n    \"\"\"", "\n", "anno_files", "=", "[", "'instances_'", "+", "y", ".", "strip", "(", ")", "+", "'.json'", "for", "y", "in", "image_set", ".", "split", "(", "','", ")", "]", "\n", "assert", "anno_files", ",", "\"No image set specified\"", "\n", "imdbs", "=", "[", "]", "\n", "for", "af", "in", "anno_files", ":", "\n", "        ", "af_path", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'annotations'", ",", "af", ")", "\n", "imdbs", ".", "append", "(", "Coco", "(", "af_path", ",", "dirname", ",", "shuffle", "=", "shuffle", ")", ")", "\n", "", "if", "len", "(", "imdbs", ")", ">", "1", ":", "\n", "        ", "return", "ConcatDB", "(", "imdbs", ",", "shuffle", ")", "\n", "", "else", ":", "\n", "        ", "return", "imdbs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.prepare_dataset.parse_args": [[75, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Prepare lists for dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "dest", "=", "'dataset'", ",", "help", "=", "'dataset to use'", ",", "\n", "default", "=", "'coco'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--year'", ",", "dest", "=", "'year'", ",", "help", "=", "'which year to use'", ",", "\n", "default", "=", "'2007,2012'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set'", ",", "help", "=", "'train, val, trainval, test'", ",", "\n", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--target'", ",", "dest", "=", "'target'", ",", "help", "=", "'output list file'", ",", "\n", "default", "=", "r'train.lst'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--class-names'", ",", "dest", "=", "'class_names'", ",", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "help", "=", "'string of comma separated names, or text filename'", ")", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "dest", "=", "'root_path'", ",", "help", "=", "'dataset root path'", ",", "\n", "default", "=", "r''", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--shuffle'", ",", "dest", "=", "'shuffle'", ",", "help", "=", "'shuffle list'", ",", "\n", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--true-negative'", ",", "dest", "=", "'true_negative'", ",", "help", "=", "'use images with no GT as true_negative'", ",", "\n", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args": [[9, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'network visualization'", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "dest", "=", "'network'", ",", "type", "=", "str", ",", "default", "=", "'vgg16_reduced'", ",", "\n", "help", "=", "'the cnn to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "dest", "=", "'num_classes'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'the number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-shape'", ",", "dest", "=", "'data_shape'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'set image\\'s shape'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "dest", "=", "'train'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'show train net'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-dir'", ",", "dest", "=", "'output_dir'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "help", "=", "'path of the output visualized net'", ")", "\n", "parser", ".", "add_argument", "(", "'--print-net'", ",", "dest", "=", "'print_net'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'print the network as json'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.net_visualization": [[25, 38], ["symbol_factory.get_symbol", "symbol_factory.get_symbol_train"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.get_symbol_train"], ["", "def", "net_visualization", "(", "network", "=", "None", ",", "\n", "num_classes", "=", "None", ",", "\n", "data_shape", "=", "None", ",", "\n", "train", "=", "None", ",", "\n", "output_dir", "=", "None", ",", "\n", "print_net", "=", "False", ",", "\n", "net", "=", "None", ")", ":", "\n", "# if you specify your net, this means that you are calling this function from somewhere else..", "\n", "    ", "if", "net", "is", "None", ":", "\n", "        ", "if", "not", "train", ":", "\n", "            ", "net", "=", "symbol_factory", ".", "get_symbol", "(", "network", ",", "data_shape", ",", "num_classes", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "net", "=", "symbol_factory", ".", "get_symbol_train", "(", "network", ",", "data_shape", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandSampler.__init__": [[15, 20], ["int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_trials", ",", "max_sample", ")", ":", "\n", "        ", "assert", "max_trials", ">", "0", "\n", "self", ".", "max_trials", "=", "int", "(", "max_trials", ")", "\n", "assert", "max_sample", ">=", "0", "\n", "self", ".", "max_sample", "=", "int", "(", "max_sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandSampler.sample": [[21, 35], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        Interface for calling sampling function\n\n        Parameters:\n        ----------\n        label : numpy.array (n x 5 matrix)\n            ground-truths\n\n        Returns:\n        ----------\n        list of (crop_box, label) tuples, if failed, return empty list []\n        \"\"\"", "\n", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandCropper.__init__": [[58, 75], ["rand_sampler.RandSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["def", "__init__", "(", "self", ",", "min_scale", "=", "1.", ",", "max_scale", "=", "1.", ",", "\n", "min_aspect_ratio", "=", "1.", ",", "max_aspect_ratio", "=", "1.", ",", "\n", "min_overlap", "=", "0.", ",", "max_trials", "=", "50", ",", "max_sample", "=", "1", ")", ":", "\n", "        ", "super", "(", "RandCropper", ",", "self", ")", ".", "__init__", "(", "max_trials", ",", "max_sample", ")", "\n", "assert", "min_scale", "<=", "max_scale", ",", "\"min_scale must <= max_scale\"", "\n", "assert", "0", "<", "min_scale", "and", "min_scale", "<=", "1", ",", "\"min_scale must in (0, 1]\"", "\n", "assert", "0", "<", "max_scale", "and", "max_scale", "<=", "1", ",", "\"max_scale must in (0, 1]\"", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "assert", "0", "<", "min_aspect_ratio", "and", "min_aspect_ratio", "<=", "1", ",", "\"min_ratio must in (0, 1]\"", "\n", "assert", "1", "<=", "max_aspect_ratio", ",", "\"max_ratio must >= 1\"", "\n", "self", ".", "min_aspect_ratio", "=", "min_aspect_ratio", "\n", "self", ".", "max_aspect_ratio", "=", "max_aspect_ratio", "\n", "assert", "0", "<=", "min_overlap", "and", "min_overlap", "<=", "1", ",", "\"min_overlap must in [0,1]\"", "\n", "self", ".", "min_overlap", "=", "min_overlap", "\n", "\n", "self", ".", "config", "=", "{", "'gt_constraint'", ":", "'center'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandCropper.sample": [[76, 129], ["range", "numpy.random.uniform", "max", "min", "math.sqrt", "numpy.random.uniform", "numpy.random.uniform", "rand_sampler.RandCropper._check_satisfy", "numpy.random.uniform", "numpy.where", "range", "numpy.array", "numpy.lib.pad", "samples.append", "max", "max", "min", "min", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandCropper._check_satisfy"], ["", "def", "sample", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        generate random cropping boxes according to parameters\n        if satifactory crops generated, apply to ground-truth as well\n\n        Parameters:\n        ----------\n        label : numpy.array (n x 5 matrix)\n            ground-truths\n\n        Returns:\n        ----------\n        list of (crop_box, label) tuples, if failed, return empty list []\n        \"\"\"", "\n", "samples", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "trial", "in", "range", "(", "self", ".", "max_trials", ")", ":", "\n", "            ", "if", "count", ">=", "self", ".", "max_sample", ":", "\n", "                ", "return", "samples", "\n", "", "scale", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "\n", "min_ratio", "=", "max", "(", "self", ".", "min_aspect_ratio", ",", "scale", "*", "scale", ")", "\n", "max_ratio", "=", "min", "(", "self", ".", "max_aspect_ratio", ",", "1.", "/", "scale", "/", "scale", ")", "\n", "ratio", "=", "math", ".", "sqrt", "(", "np", ".", "random", ".", "uniform", "(", "min_ratio", ",", "max_ratio", ")", ")", "\n", "width", "=", "scale", "*", "ratio", "\n", "height", "=", "scale", "/", "ratio", "\n", "left", "=", "np", ".", "random", ".", "uniform", "(", "0.", ",", "1", "-", "width", ")", "\n", "top", "=", "np", ".", "random", ".", "uniform", "(", "0.", ",", "1", "-", "height", ")", "\n", "rand_box", "=", "(", "left", ",", "top", ",", "left", "+", "width", ",", "top", "+", "height", ")", "\n", "valid_mask", "=", "np", ".", "where", "(", "label", "[", ":", ",", "0", "]", ">", "-", "1", ")", "[", "0", "]", "\n", "gt", "=", "label", "[", "valid_mask", ",", ":", "]", "\n", "ious", "=", "self", ".", "_check_satisfy", "(", "rand_box", ",", "gt", ")", "\n", "if", "ious", "is", "not", "None", ":", "\n", "# transform gt labels after crop, discard bad ones", "\n", "                ", "l", ",", "t", ",", "r", ",", "b", "=", "rand_box", "\n", "new_gt_boxes", "=", "[", "]", "\n", "new_width", "=", "r", "-", "l", "\n", "new_height", "=", "b", "-", "t", "\n", "for", "i", "in", "range", "(", "valid_mask", ".", "size", ")", ":", "\n", "                    ", "if", "ious", "[", "i", "]", ">", "0", ":", "\n", "                        ", "xmin", "=", "max", "(", "0.", ",", "(", "gt", "[", "i", ",", "1", "]", "-", "l", ")", "/", "new_width", ")", "\n", "ymin", "=", "max", "(", "0.", ",", "(", "gt", "[", "i", ",", "2", "]", "-", "t", ")", "/", "new_height", ")", "\n", "xmax", "=", "min", "(", "1.", ",", "(", "gt", "[", "i", ",", "3", "]", "-", "l", ")", "/", "new_width", ")", "\n", "ymax", "=", "min", "(", "1.", ",", "(", "gt", "[", "i", ",", "4", "]", "-", "t", ")", "/", "new_height", ")", "\n", "new_gt_boxes", ".", "append", "(", "[", "gt", "[", "i", ",", "0", "]", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "", "", "if", "not", "new_gt_boxes", ":", "\n", "                    ", "continue", "\n", "", "new_gt_boxes", "=", "np", ".", "array", "(", "new_gt_boxes", ")", "\n", "label", "=", "np", ".", "lib", ".", "pad", "(", "new_gt_boxes", ",", "\n", "(", "(", "0", ",", "label", ".", "shape", "[", "0", "]", "-", "new_gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "constant_values", "=", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "samples", ".", "append", "(", "(", "rand_box", ",", "label", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandCropper._check_satisfy": [[130, 176], ["numpy.amax", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "max", "range", "numpy.ones", "max", "range"], "methods", ["None"], ["", "def", "_check_satisfy", "(", "self", ",", "rand_box", ",", "gt_boxes", ")", ":", "\n", "        ", "\"\"\"\n        check if overlap with any gt box is larger than threshold\n        \"\"\"", "\n", "l", ",", "t", ",", "r", ",", "b", "=", "rand_box", "\n", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "ls", "=", "np", ".", "ones", "(", "num_gt", ")", "*", "l", "\n", "ts", "=", "np", ".", "ones", "(", "num_gt", ")", "*", "t", "\n", "rs", "=", "np", ".", "ones", "(", "num_gt", ")", "*", "r", "\n", "bs", "=", "np", ".", "ones", "(", "num_gt", ")", "*", "b", "\n", "mask", "=", "np", ".", "where", "(", "ls", "<", "gt_boxes", "[", ":", ",", "1", "]", ")", "[", "0", "]", "\n", "ls", "[", "mask", "]", "=", "gt_boxes", "[", "mask", ",", "1", "]", "\n", "mask", "=", "np", ".", "where", "(", "ts", "<", "gt_boxes", "[", ":", ",", "2", "]", ")", "[", "0", "]", "\n", "ts", "[", "mask", "]", "=", "gt_boxes", "[", "mask", ",", "2", "]", "\n", "mask", "=", "np", ".", "where", "(", "rs", ">", "gt_boxes", "[", ":", ",", "3", "]", ")", "[", "0", "]", "\n", "rs", "[", "mask", "]", "=", "gt_boxes", "[", "mask", ",", "3", "]", "\n", "mask", "=", "np", ".", "where", "(", "bs", ">", "gt_boxes", "[", ":", ",", "4", "]", ")", "[", "0", "]", "\n", "bs", "[", "mask", "]", "=", "gt_boxes", "[", "mask", ",", "4", "]", "\n", "w", "=", "rs", "-", "ls", "\n", "w", "[", "w", "<", "0", "]", "=", "0", "\n", "h", "=", "bs", "-", "ts", "\n", "h", "[", "h", "<", "0", "]", "=", "0", "\n", "inter_area", "=", "h", "*", "w", "\n", "union_area", "=", "np", ".", "ones", "(", "num_gt", ")", "*", "max", "(", "0", ",", "r", "-", "l", ")", "*", "max", "(", "0", ",", "b", "-", "t", ")", "\n", "union_area", "+=", "(", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", ")", "*", "(", "gt_boxes", "[", ":", ",", "4", "]", "-", "gt_boxes", "[", ":", ",", "2", "]", ")", "\n", "union_area", "-=", "inter_area", "\n", "ious", "=", "inter_area", "/", "union_area", "\n", "ious", "[", "union_area", "<=", "0", "]", "=", "0", "\n", "max_iou", "=", "np", ".", "amax", "(", "ious", ")", "\n", "if", "max_iou", "<", "self", ".", "min_overlap", ":", "\n", "            ", "return", "None", "\n", "# check ground-truth constraint", "\n", "", "if", "self", ".", "config", "[", "'gt_constraint'", "]", "==", "'center'", ":", "\n", "            ", "for", "i", "in", "range", "(", "ious", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "ious", "[", "i", "]", ">", "0", ":", "\n", "                    ", "gt_x", "=", "(", "gt_boxes", "[", "i", ",", "1", "]", "+", "gt_boxes", "[", "i", ",", "3", "]", ")", "/", "2.0", "\n", "gt_y", "=", "(", "gt_boxes", "[", "i", ",", "2", "]", "+", "gt_boxes", "[", "i", ",", "4", "]", ")", "/", "2.0", "\n", "if", "gt_x", "<", "l", "or", "gt_x", ">", "r", "or", "gt_y", "<", "t", "or", "gt_y", ">", "b", ":", "\n", "                        ", "return", "None", "\n", "", "", "", "", "elif", "self", ".", "config", "[", "'gt_constraint'", "]", "==", "'corner'", ":", "\n", "            ", "for", "i", "in", "range", "(", "ious", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "ious", "[", "i", "]", ">", "0", ":", "\n", "                    ", "if", "gt_boxes", "[", "i", ",", "1", "]", "<", "l", "or", "gt_boxes", "[", "i", ",", "3", "]", ">", "r", "or", "gt_boxes", "[", "i", ",", "2", "]", "<", "t", "or", "gt_boxes", "[", "i", ",", "4", "]", ">", "b", ":", "\n", "                        ", "return", "None", "\n", "", "", "", "", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandPadder.__init__": [[200, 214], ["rand_sampler.RandSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["def", "__init__", "(", "self", ",", "min_scale", "=", "1.", ",", "max_scale", "=", "1.", ",", "min_aspect_ratio", "=", "1.", ",", "max_aspect_ratio", "=", "1.", ",", "min_gt_scale", "=", ".01", ",", "max_trials", "=", "50", ",", "\n", "max_sample", "=", "1", ")", ":", "\n", "        ", "super", "(", "RandPadder", ",", "self", ")", ".", "__init__", "(", "max_trials", ",", "max_sample", ")", "\n", "assert", "min_scale", "<=", "max_scale", ",", "\"min_scale must <= max_scale\"", "\n", "assert", "min_scale", ">=", "1", ",", "\"min_scale must in (0, 1]\"", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "assert", "0", "<", "min_aspect_ratio", "and", "min_aspect_ratio", "<=", "1", ",", "\"min_ratio must in (0, 1]\"", "\n", "assert", "1", "<=", "max_aspect_ratio", ",", "\"max_ratio must >= 1\"", "\n", "self", ".", "min_aspect_ratio", "=", "min_aspect_ratio", "\n", "self", ".", "max_aspect_ratio", "=", "max_aspect_ratio", "\n", "assert", "0", "<=", "min_gt_scale", "and", "min_gt_scale", "<=", "1", ",", "\"min_gt_scale must in [0, 1]\"", "\n", "self", ".", "min_gt_scale", "=", "min_gt_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.rand_sampler.RandPadder.sample": [[215, 271], ["range", "numpy.random.uniform", "max", "min", "math.sqrt", "numpy.random.uniform", "numpy.random.uniform", "range", "numpy.array", "numpy.lib.pad", "samples.append", "numpy.random.uniform", "numpy.where", "min", "numpy.array.append"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        generate random padding boxes according to parameters\n        if satifactory padding generated, apply to ground-truth as well\n\n        Parameters:\n        ----------\n        label : numpy.array (n x 5 matrix)\n            ground-truths\n\n        Returns:\n        ----------\n        list of (crop_box, label) tuples, if failed, return empty list []\n        \"\"\"", "\n", "samples", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "trial", "in", "range", "(", "self", ".", "max_trials", ")", ":", "\n", "            ", "if", "count", ">=", "self", ".", "max_sample", ":", "\n", "                ", "return", "samples", "\n", "", "scale", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "\n", "min_ratio", "=", "max", "(", "self", ".", "min_aspect_ratio", ",", "scale", "*", "scale", ")", "\n", "max_ratio", "=", "min", "(", "self", ".", "max_aspect_ratio", ",", "1.", "/", "scale", "/", "scale", ")", "\n", "ratio", "=", "math", ".", "sqrt", "(", "np", ".", "random", ".", "uniform", "(", "min_ratio", ",", "max_ratio", ")", ")", "\n", "width", "=", "scale", "*", "ratio", "\n", "if", "width", "<", "1", ":", "\n", "                ", "continue", "\n", "", "height", "=", "scale", "/", "ratio", "\n", "if", "height", "<", "1", ":", "\n", "                ", "continue", "\n", "", "left", "=", "np", ".", "random", ".", "uniform", "(", "0.", ",", "1", "-", "width", ")", "\n", "top", "=", "np", ".", "random", ".", "uniform", "(", "0.", ",", "1", "-", "height", ")", "\n", "right", "=", "left", "+", "width", "\n", "bot", "=", "top", "+", "height", "\n", "rand_box", "=", "(", "left", ",", "top", ",", "right", ",", "bot", ")", "\n", "valid_mask", "=", "np", ".", "where", "(", "label", "[", ":", ",", "0", "]", ">", "-", "1", ")", "[", "0", "]", "\n", "gt", "=", "label", "[", "valid_mask", ",", ":", "]", "\n", "new_gt_boxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "xmin", "=", "(", "gt", "[", "i", ",", "1", "]", "-", "left", ")", "/", "width", "\n", "ymin", "=", "(", "gt", "[", "i", ",", "2", "]", "-", "top", ")", "/", "height", "\n", "xmax", "=", "(", "gt", "[", "i", ",", "3", "]", "-", "left", ")", "/", "width", "\n", "ymax", "=", "(", "gt", "[", "i", ",", "4", "]", "-", "top", ")", "/", "height", "\n", "new_size", "=", "min", "(", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ")", "\n", "if", "new_size", "<", "self", ".", "min_gt_scale", ":", "\n", "                    ", "new_gt_boxes", "=", "[", "]", "\n", "break", "\n", "", "new_gt_boxes", ".", "append", "(", "[", "gt", "[", "i", ",", "0", "]", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "", "if", "not", "new_gt_boxes", ":", "\n", "                ", "continue", "\n", "", "new_gt_boxes", "=", "np", ".", "array", "(", "new_gt_boxes", ")", "\n", "label", "=", "np", ".", "lib", ".", "pad", "(", "new_gt_boxes", ",", "\n", "(", "(", "0", ",", "label", ".", "shape", "[", "0", "]", "-", "new_gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "constant_values", "=", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "samples", ".", "append", "(", "(", "rand_box", ",", "label", ")", ")", "\n", "count", "+=", "1", "\n", "", "return", "samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.image_processing.rescale": [[4, 30], ["numpy.min", "numpy.min", "cv2.resize", "float", "float", "numpy.round", "float", "float"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.image_processing.resize"], ["def", "rescale", "(", "im", ",", "target_size", ",", "max_size", ")", ":", "\n", "    ", "\"\"\"\n    only resize input image to target size and return scale\n\n    Parameters:\n    ----------\n    im : numpy.array\n        BGR image input by opencv\n    target_size: int\n        one dimensional size (the short side)\n    max_size: int\n        one dimensional max size (the long side)\n\n    Returns:\n    ----------\n    numpy.array, rescaled image\n    \"\"\"", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# prevent bigger axis from being more than max_size:", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "max_size", ":", "\n", "        ", "im_scale", "=", "float", "(", "max_size", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "im", "=", "cv2", ".", "resize", "(", "im", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "return", "im", ",", "im_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.image_processing.resize": [[31, 46], ["cv2.resize"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.image_processing.resize"], ["", "def", "resize", "(", "im", ",", "target_size", ",", "interp_method", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "    ", "\"\"\"\n    resize image to target size regardless of aspect ratio\n\n    Parameters:\n    ----------\n    im : numpy.array\n        BGR image input by opencv\n    target_size : tuple (int, int)\n        (h, w) two dimensional size\n    Returns:\n    ----------\n    numpy.array, resized image\n    \"\"\"", "\n", "return", "cv2", ".", "resize", "(", "im", ",", "target_size", ",", "interpolation", "=", "interp_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.image_processing.transform": [[47, 71], ["im.astype.copy", "im.astype.astype", "im.astype.transpose"], "function", ["None"], ["", "def", "transform", "(", "im", ",", "pixel_means", ")", ":", "\n", "    ", "\"\"\"\n    transform into mxnet tensor\n    substract pixel size and transform to correct format\n\n    Parameters:\n    ----------\n    im : numpy.array\n        [height, width, channel] in BGR\n    pixel_means : list\n        [[[R, G, B pixel means]]]\n\n    Returns:\n    ----------\n    numpy.array as in shape [channel, height, width]\n    \"\"\"", "\n", "im", "=", "im", ".", "copy", "(", ")", "\n", "im", "[", ":", ",", ":", ",", "(", "0", ",", "1", ",", "2", ")", "]", "=", "im", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "im", "=", "im", ".", "astype", "(", "float", ")", "\n", "im", "-=", "pixel_means", "\n", "# put channel first", "\n", "channel_swap", "=", "(", "2", ",", "0", ",", "1", ")", "\n", "im_tensor", "=", "im", ".", "transpose", "(", "channel_swap", ")", "\n", "return", "im_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.tools.image_processing.transform_inverse": [[73, 99], ["im_tensor.transpose.copy", "im_tensor.transpose.transpose", "im.astype.astype"], "function", ["None"], ["", "def", "transform_inverse", "(", "im_tensor", ",", "pixel_means", ")", ":", "\n", "    ", "\"\"\"\n    transform from mxnet im_tensor to ordinary RGB image\n    im_tensor is limited to one image\n\n    Parameters:\n    ----------\n    im_tensor : numpy.array\n        in shape [batch, channel, height, width]\n    pixel_means: list\n        [[[R, G, B pixel means]]]\n\n    Returns:\n    ----------\n    im [height, width, channel(RGB)]\n    \"\"\"", "\n", "assert", "im_tensor", ".", "shape", "[", "0", "]", "==", "1", "\n", "im_tensor", "=", "im_tensor", ".", "copy", "(", ")", "\n", "# put channel back", "\n", "channel_swap", "=", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "im_tensor", "=", "im_tensor", ".", "transpose", "(", "channel_swap", ")", "\n", "im", "=", "im_tensor", "[", "0", "]", "\n", "assert", "im", ".", "shape", "[", "2", "]", "==", "3", "\n", "im", "+=", "pixel_means", "\n", "im", "=", "im", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "im", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_model.get_caffe_iter": [[21, 27], ["enumerate", "re.sub"], "function", ["None"], ["", "def", "get_caffe_iter", "(", "layer_names", ",", "layers", ")", ":", "\n", "    ", "for", "layer_idx", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "        ", "layer_name", "=", "re", ".", "sub", "(", "'[-/]'", ",", "'_'", ",", "layer_names", "[", "layer_idx", "]", ")", "\n", "layer_type", "=", "layer", ".", "type", "\n", "layer_blobs", "=", "layer", ".", "blobs", "\n", "yield", "(", "layer_name", ",", "layer_type", ",", "layer_blobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_model.get_iter": [[29, 35], ["re.sub"], "function", ["None"], ["", "", "def", "get_iter", "(", "layers", ")", ":", "\n", "    ", "for", "layer", "in", "layers", ":", "\n", "        ", "layer_name", "=", "re", ".", "sub", "(", "'[-/]'", ",", "'_'", ",", "layer", ".", "name", ")", "\n", "layer_type", "=", "layer", ".", "type", "\n", "layer_blobs", "=", "layer", ".", "blobs", "\n", "yield", "(", "layer_name", ",", "layer_type", ",", "layer_blobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_model.main": [[37, 132], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "convert_symbol.proto2symbol", "prob.infer_shape", "prob.list_arguments", "dict", "mxnet.mod.Module", "mx.mod.Module.bind", "mx.mod.Module.init_params", "mx.mod.Module.save_checkpoint", "caffe.set_mode_cpu", "caffe.Net", "parse.parse_caffemodel", "zip", "convert_model.get_caffe_iter", "convert_model.get_iter", "tuple", "numpy.array().reshape", "numpy.array", "print", "wmat.reshape.reshape", "bias.reshape.reshape", "wmat.reshape.reshape", "mxnet.nd.zeros", "bias.reshape.reshape", "mxnet.nd.zeros", "mxnet.nd.zeros", "mxnet.nd.zeros", "numpy.array().reshape", "len", "getattr", "list", "print", "len", "len", "len", "numpy.array", "print", "tuple", "len", "numpy.array", "len", "list"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args", "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.proto2symbol", "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_parse.parse_from_protobuf.parse_caffemodel", "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_model.get_caffe_iter", "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_model.get_iter"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Caffe prototxt to mxnet model parameter converter.\\\n                    Note that only basic functions are implemented. You are welcomed to contribute to this file.'", ")", "\n", "parser", ".", "add_argument", "(", "'caffe_prototxt'", ",", "help", "=", "'The prototxt file in Caffe format'", ")", "\n", "parser", ".", "add_argument", "(", "'caffe_model'", ",", "help", "=", "'The binary model parameter file in Caffe format'", ")", "\n", "parser", ".", "add_argument", "(", "'save_model_name'", ",", "help", "=", "'The name of the output model prefix'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "prob", ",", "input_dim", "=", "proto2symbol", "(", "args", ".", "caffe_prototxt", ")", "\n", "\n", "layers", "=", "''", "\n", "layer_names", "=", "''", "\n", "\n", "if", "caffe_flag", ":", "\n", "        ", "caffe", ".", "set_mode_cpu", "(", ")", "\n", "net_caffe", "=", "caffe", ".", "Net", "(", "args", ".", "caffe_prototxt", ",", "args", ".", "caffe_model", ",", "caffe", ".", "TEST", ")", "\n", "layer_names", "=", "net_caffe", ".", "_layer_names", "\n", "layers", "=", "net_caffe", ".", "layers", "\n", "", "else", ":", "\n", "        ", "layers", "=", "parse", ".", "parse_caffemodel", "(", "args", ".", "caffe_model", ")", "\n", "\n", "", "arg_shapes", ",", "output_shapes", ",", "aux_shapes", "=", "prob", ".", "infer_shape", "(", "data", "=", "tuple", "(", "input_dim", ")", ")", "\n", "arg_names", "=", "prob", ".", "list_arguments", "(", ")", "\n", "arg_shape_dic", "=", "dict", "(", "zip", "(", "arg_names", ",", "arg_shapes", ")", ")", "\n", "arg_params", "=", "{", "}", "\n", "\n", "iter", "=", "''", "\n", "if", "caffe_flag", ":", "\n", "        ", "iter", "=", "get_caffe_iter", "(", "layer_names", ",", "layers", ")", "\n", "", "else", ":", "\n", "        ", "iter", "=", "get_iter", "(", "layers", ")", "\n", "", "first_conv", "=", "True", "\n", "\n", "for", "layer_name", ",", "layer_type", ",", "layer_blobs", "in", "iter", ":", "\n", "        ", "if", "layer_type", "==", "'Convolution'", "or", "layer_type", "==", "'InnerProduct'", "or", "layer_type", "==", "4", "or", "layer_type", "==", "14", "or", "layer_type", "==", "'PReLU'", "or", "layer_type", "==", "'Normalize'", ":", "\n", "            ", "if", "layer_type", "==", "'PReLU'", ":", "\n", "                ", "assert", "(", "len", "(", "layer_blobs", ")", "==", "1", ")", "\n", "wmat", "=", "layer_blobs", "[", "0", "]", ".", "data", "\n", "weight_name", "=", "layer_name", "+", "'_gamma'", "\n", "arg_params", "[", "weight_name", "]", "=", "mx", ".", "nd", ".", "zeros", "(", "wmat", ".", "shape", ")", "\n", "arg_params", "[", "weight_name", "]", "[", ":", "]", "=", "wmat", "\n", "continue", "\n", "", "if", "layer_type", "==", "'Normalize'", ":", "\n", "                ", "assert", "(", "len", "(", "layer_blobs", ")", "==", "1", ")", "\n", "weight_name", "=", "layer_name", "+", "'_scale'", "\n", "wmat", "=", "layer_blobs", "[", "0", "]", ".", "data", "\n", "arg_params", "[", "weight_name", "]", "=", "mx", ".", "nd", ".", "zeros", "(", "(", "1", ",", "len", "(", "wmat", ")", ",", "1", ",", "1", ")", ")", "\n", "arg_params", "[", "weight_name", "]", "[", ":", "]", "=", "np", ".", "array", "(", "list", "(", "wmat", ")", ")", ".", "reshape", "(", "(", "1", ",", "len", "(", "wmat", ")", ",", "1", ",", "1", ")", ")", "\n", "continue", "\n", "", "assert", "(", "len", "(", "layer_blobs", ")", "==", "2", ")", "\n", "wmat_dim", "=", "[", "]", "\n", "if", "getattr", "(", "layer_blobs", "[", "0", "]", ".", "shape", ",", "'dim'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "layer_blobs", "[", "0", "]", ".", "shape", ".", "dim", ")", ">", "0", ":", "\n", "                    ", "wmat_dim", "=", "layer_blobs", "[", "0", "]", ".", "shape", ".", "dim", "\n", "", "else", ":", "\n", "                    ", "wmat_dim", "=", "[", "layer_blobs", "[", "0", "]", ".", "num", ",", "layer_blobs", "[", "0", "]", ".", "channels", ",", "layer_blobs", "[", "0", "]", ".", "height", ",", "\n", "layer_blobs", "[", "0", "]", ".", "width", "]", "\n", "", "", "else", ":", "\n", "                ", "wmat_dim", "=", "list", "(", "layer_blobs", "[", "0", "]", ".", "shape", ")", "\n", "", "wmat", "=", "np", ".", "array", "(", "layer_blobs", "[", "0", "]", ".", "data", ")", ".", "reshape", "(", "wmat_dim", ")", "\n", "bias", "=", "np", ".", "array", "(", "layer_blobs", "[", "1", "]", ".", "data", ")", "\n", "channels", "=", "wmat_dim", "[", "1", "]", "\n", "if", "channels", "==", "3", "or", "channels", "==", "4", ":", "# RGB or RGBA", "\n", "                ", "if", "first_conv", ":", "\n", "                    ", "print", "(", "'Swapping BGR of caffe into RGB in mxnet'", ")", "\n", "wmat", "[", ":", ",", "[", "0", ",", "2", "]", ",", ":", ",", ":", "]", "=", "wmat", "[", ":", ",", "[", "2", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "\n", "", "", "assert", "(", "wmat", ".", "flags", "[", "'C_CONTIGUOUS'", "]", "is", "True", ")", "\n", "assert", "(", "bias", ".", "flags", "[", "'C_CONTIGUOUS'", "]", "is", "True", ")", "\n", "print", "(", "'converting layer {0}, wmat shape = {1}, bias shape = {2}'", ".", "format", "(", "layer_name", ",", "wmat", ".", "shape", ",", "bias", ".", "shape", ")", ")", "\n", "wmat", "=", "wmat", ".", "reshape", "(", "(", "wmat", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "(", "bias", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "weight_name", "=", "layer_name", "+", "\"_weight\"", "\n", "bias_name", "=", "layer_name", "+", "\"_bias\"", "\n", "\n", "if", "weight_name", "not", "in", "arg_shape_dic", ":", "\n", "                ", "print", "(", "weight_name", "+", "' not found in arg_shape_dic.'", ")", "\n", "continue", "\n", "", "wmat", "=", "wmat", ".", "reshape", "(", "arg_shape_dic", "[", "weight_name", "]", ")", "\n", "arg_params", "[", "weight_name", "]", "=", "mx", ".", "nd", ".", "zeros", "(", "wmat", ".", "shape", ")", "\n", "arg_params", "[", "weight_name", "]", "[", ":", "]", "=", "wmat", "\n", "\n", "bias", "=", "bias", ".", "reshape", "(", "arg_shape_dic", "[", "bias_name", "]", ")", "\n", "arg_params", "[", "bias_name", "]", "=", "mx", ".", "nd", ".", "zeros", "(", "bias", ".", "shape", ")", "\n", "arg_params", "[", "bias_name", "]", "[", ":", "]", "=", "bias", "\n", "\n", "if", "first_conv", "and", "(", "layer_type", "==", "'Convolution'", "or", "layer_type", "==", "4", ")", ":", "\n", "                ", "first_conv", "=", "False", "\n", "\n", "", "", "", "model", "=", "mx", ".", "mod", ".", "Module", "(", "symbol", "=", "prob", ",", "label_names", "=", "None", ")", "\n", "model", ".", "bind", "(", "data_shapes", "=", "[", "(", "'data'", ",", "tuple", "(", "input_dim", ")", ")", "]", ")", "\n", "model", ".", "init_params", "(", "arg_params", "=", "arg_params", ",", "aux_params", "=", "{", "}", ")", "\n", "\n", "model", ".", "save_checkpoint", "(", "args", ".", "save_model_name", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.mean_image.protoBlobFileToND": [[15, 38], ["open", "open.read", "open.close", "caffe_parse.caffe_pb2.BlobProto.ParseFromString", "numpy.array", "img_mean_np.reshape.reshape", "mxnet.nd.array", "Exception", "caffe.proto.caffe_pb2.BlobProto", "caffe_parse.caffe_pb2.BlobProto"], "function", ["None"], ["", "def", "protoBlobFileToND", "(", "proto_file", ")", ":", "\n", "    ", "data", "=", "''", "\n", "file", "=", "open", "(", "proto_file", ",", "\"r\"", ")", "\n", "if", "not", "file", ":", "\n", "        ", "raise", "Exception", "(", "\"ERROR (\"", "+", "proto_file", "+", "\")!\"", ")", "\n", "", "data", "=", "file", ".", "read", "(", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n", "if", "caffe_flag", ":", "\n", "        ", "mean_blob", "=", "caffe", ".", "proto", ".", "caffe_pb2", ".", "BlobProto", "(", ")", "\n", "", "else", ":", "\n", "        ", "mean_blob", "=", "caffe_parse", ".", "caffe_pb2", ".", "BlobProto", "(", ")", "\n", "\n", "", "mean_blob", ".", "ParseFromString", "(", "data", ")", "\n", "img_mean_np", "=", "np", ".", "array", "(", "mean_blob", ".", "data", ")", "\n", "img_mean_np", "=", "img_mean_np", ".", "reshape", "(", "\n", "mean_blob", ".", "channels", ",", "mean_blob", ".", "height", ",", "mean_blob", ".", "width", "\n", ")", "\n", "# swap channels from Caffe BGR to RGB", "\n", "img_mean_np2", "=", "img_mean_np", "\n", "img_mean_np", "[", "0", "]", "=", "img_mean_np2", "[", "2", "]", "\n", "img_mean_np", "[", "2", "]", "=", "img_mean_np2", "[", "0", "]", "\n", "return", "mx", ".", "nd", ".", "array", "(", "img_mean_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.mean_image.main": [[40, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "mean_image.protoBlobFileToND", "mxnet.nd.save"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.parse_args", "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.mean_image.protoBlobFileToND"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Caffe prototxt to mxnet model parameter converter.\\\n                    Note that only basic functions are implemented. You are welcomed to contribute to this file.'", ")", "\n", "parser", ".", "add_argument", "(", "'mean_image_proto'", ",", "help", "=", "'The protobuf file in Caffe format'", ")", "\n", "parser", ".", "add_argument", "(", "'save_name'", ",", "help", "=", "'The name of the output file prefix'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "nd", "=", "protoBlobFileToND", "(", "args", ".", "mean_image_proto", ")", "\n", "mx", ".", "nd", ".", "save", "(", "args", ".", "save_name", "+", "\".nd\"", ",", "{", "\"mean_image\"", ":", "nd", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.read_proto_solver_file": [[17, 24], ["convert_symbol.read_proto_file", "caffe.proto.caffe_pb2.NetParameter", "caffe_parse.caffe_pb2.NetParameter"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.read_proto_file"], ["", "def", "read_proto_solver_file", "(", "file_path", ")", ":", "\n", "    ", "solver_config", "=", "''", "\n", "if", "caffe_flag", ":", "\n", "        ", "solver_config", "=", "caffe", ".", "proto", ".", "caffe_pb2", ".", "NetParameter", "(", ")", "\n", "", "else", ":", "\n", "        ", "solver_config", "=", "caffe_parse", ".", "caffe_pb2", ".", "NetParameter", "(", ")", "\n", "", "return", "read_proto_file", "(", "file_path", ",", "solver_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.read_proto_file": [[26, 33], ["open", "google.protobuf.text_format.Merge", "open.close", "Exception", "str", "open.read"], "function", ["None"], ["", "def", "read_proto_file", "(", "file_path", ",", "parser_object", ")", ":", "\n", "    ", "file", "=", "open", "(", "file_path", ",", "\"r\"", ")", "\n", "if", "not", "file", ":", "\n", "        ", "raise", "Exception", "(", "\"ERROR (\"", "+", "file_path", "+", "\")!\"", ")", "\n", "", "text_format", ".", "Merge", "(", "str", "(", "file", ".", "read", "(", ")", ")", ",", "parser_object", ")", "\n", "file", ".", "close", "(", ")", "\n", "return", "parser_object", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.conv_param_to_string": [[35, 63], ["isinstance", "isinstance", "isinstance", "isinstance", "len", "len", "len"], "function", ["None"], ["", "def", "conv_param_to_string", "(", "param", ")", ":", "\n", "    ", "pad", "=", "0", "\n", "if", "isinstance", "(", "param", ".", "pad", ",", "int", ")", ":", "\n", "        ", "pad", "=", "param", ".", "pad", "\n", "", "else", ":", "\n", "        ", "pad", "=", "0", "if", "len", "(", "param", ".", "pad", ")", "==", "0", "else", "param", ".", "pad", "[", "0", "]", "\n", "", "stride", "=", "1", "\n", "if", "isinstance", "(", "param", ".", "stride", ",", "int", ")", ":", "\n", "        ", "stride", "=", "param", ".", "stride", "\n", "", "else", ":", "\n", "        ", "stride", "=", "1", "if", "len", "(", "param", ".", "stride", ")", "==", "0", "else", "param", ".", "stride", "[", "0", "]", "\n", "", "kernel_size", "=", "''", "\n", "if", "isinstance", "(", "param", ".", "kernel_size", ",", "int", ")", ":", "\n", "        ", "kernel_size", "=", "param", ".", "kernel_size", "\n", "", "else", ":", "\n", "        ", "kernel_size", "=", "param", ".", "kernel_size", "[", "0", "]", "\n", "", "dilate", "=", "1", "\n", "if", "isinstance", "(", "param", ".", "dilation", ",", "int", ")", ":", "\n", "        ", "dilate", "=", "param", ".", "dilation", "\n", "", "else", ":", "\n", "        ", "dilate", "=", "1", "if", "len", "(", "param", ".", "dilation", ")", "==", "0", "else", "param", ".", "dilation", "[", "0", "]", "\n", "# convert to string except for dilation", "\n", "", "param_string", "=", "\"num_filter=%d, pad=(%d,%d), kernel=(%d,%d), stride=(%d,%d), no_bias=%s\"", "%", "(", "param", ".", "num_output", ",", "pad", ",", "pad", ",", "kernel_size", ",", "kernel_size", ",", "stride", ",", "stride", ",", "not", "param", ".", "bias_term", ")", "\n", "# deal with dilation. Won't be in deconvolution", "\n", "if", "dilate", ">", "1", ":", "\n", "        ", "param_string", "+=", "\", dilate=(%d, %d)\"", "%", "(", "dilate", ",", "dilate", ")", "\n", "", "return", "param_string", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.find_layer": [[64, 69], ["None"], "function", ["None"], ["", "def", "find_layer", "(", "layers", ",", "name", ")", ":", "\n", "    ", "for", "layer", "in", "layers", ":", "\n", "        ", "if", "layer", ".", "name", "==", "name", ":", "\n", "            ", "return", "layer", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.proto2script": [[70, 302], ["convert_symbol.read_proto_solver_file", "dict", "dict", "dict", "len", "range", "len", "len", "len", "re.sub", "range", "Exception", "len", "convert_symbol.conv_param_to_string", "convert_symbol.conv_param_to_string", "re.sub", "convert_symbol.find_layer", "list", "float", "Exception", "len", "layer.pop", "Exception", "ValueError", "ratios.append", "Exception", "math.sqrt", "ratios.append", "len", "str", "range", "str", "str", "len", "list"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.read_proto_solver_file", "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.conv_param_to_string", "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.conv_param_to_string", "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.find_layer"], ["", "def", "proto2script", "(", "proto_file", ")", ":", "\n", "    ", "proto", "=", "read_proto_solver_file", "(", "proto_file", ")", "\n", "connection", "=", "dict", "(", ")", "\n", "symbols", "=", "dict", "(", ")", "\n", "top", "=", "dict", "(", ")", "\n", "flatten_count", "=", "0", "\n", "symbol_string", "=", "\"\"", "\n", "layer", "=", "''", "\n", "if", "len", "(", "proto", ".", "layer", ")", ":", "\n", "        ", "layer", "=", "proto", ".", "layer", "\n", "", "elif", "len", "(", "proto", ".", "layers", ")", ":", "\n", "        ", "layer", "=", "proto", ".", "layers", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Invalid proto file.'", ")", "\n", "# Get input size to network", "\n", "", "input_dim", "=", "[", "1", ",", "3", ",", "224", ",", "224", "]", "# default", "\n", "if", "len", "(", "proto", ".", "input_dim", ")", ">", "0", ":", "\n", "        ", "input_dim", "=", "proto", ".", "input_dim", "\n", "", "elif", "len", "(", "proto", ".", "input_shape", ")", ">", "0", ":", "\n", "        ", "input_dim", "=", "proto", ".", "input_shape", "[", "0", "]", ".", "dim", "\n", "", "elif", "layer", "[", "0", "]", ".", "type", "==", "\"Input\"", ":", "\n", "        ", "input_dim", "=", "layer", "[", "0", "]", ".", "input_param", ".", "shape", ".", "_values", "[", "0", "]", ".", "dim", "\n", "layer", ".", "pop", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Invalid proto file.'", ")", "\n", "# We assume the first bottom blob of first layer is the output from data layer", "\n", "", "input_name", "=", "layer", "[", "0", "]", ".", "bottom", "[", "0", "]", "\n", "output_name", "=", "\"\"", "\n", "mapping", "=", "{", "input_name", ":", "'data'", "}", "\n", "need_flatten", "=", "{", "input_name", ":", "False", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "layer", ")", ")", ":", "\n", "        ", "type_string", "=", "''", "\n", "param_string", "=", "''", "\n", "name", "=", "re", ".", "sub", "(", "'[-/]'", ",", "'_'", ",", "layer", "[", "i", "]", ".", "name", ")", "\n", "from_name", "=", "'data='", "\n", "bottom_order", "=", "[", "]", "\n", "if", "layer", "[", "i", "]", ".", "type", "==", "'Convolution'", "or", "layer", "[", "i", "]", ".", "type", "==", "4", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Convolution'", "\n", "param_string", "=", "conv_param_to_string", "(", "layer", "[", "i", "]", ".", "convolution_param", ")", "\n", "need_flatten", "[", "name", "]", "=", "True", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Deconvolution'", "or", "layer", "[", "i", "]", ".", "type", "==", "39", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Deconvolution'", "\n", "param_string", "=", "conv_param_to_string", "(", "layer", "[", "i", "]", ".", "convolution_param", ")", "\n", "need_flatten", "[", "name", "]", "=", "True", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Pooling'", "or", "layer", "[", "i", "]", ".", "type", "==", "17", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Pooling'", "\n", "param", "=", "layer", "[", "i", "]", ".", "pooling_param", "\n", "param_string", "=", "''", "\n", "param_string", "+=", "\"pooling_convention='full', \"", "\n", "if", "param", ".", "global_pooling", ":", "\n", "# there must be a param `kernel` in a pooling layer", "\n", "                ", "param_string", "+=", "\"global_pool=True, kernel=(1,1)\"", "\n", "", "else", ":", "\n", "                ", "param_string", "+=", "\"pad=(%d,%d), kernel=(%d,%d), stride=(%d,%d)\"", "%", "(", "param", ".", "pad", ",", "param", ".", "pad", ",", "param", ".", "kernel_size", ",", "param", ".", "kernel_size", ",", "param", ".", "stride", ",", "param", ".", "stride", ")", "\n", "", "if", "param", ".", "pool", "==", "0", ":", "\n", "                ", "param_string", "+=", "\", pool_type='max'\"", "\n", "", "elif", "param", ".", "pool", "==", "1", ":", "\n", "                ", "param_string", "+=", "\", pool_type='avg'\"", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Unknown Pooling Method!\"", ")", "\n", "", "need_flatten", "[", "name", "]", "=", "True", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'ReLU'", "or", "layer", "[", "i", "]", ".", "type", "==", "18", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Activation'", "\n", "param_string", "=", "\"act_type='relu'\"", "\n", "need_flatten", "[", "name", "]", "=", "need_flatten", "[", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", "]", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'TanH'", "or", "layer", "[", "i", "]", ".", "type", "==", "23", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Activation'", "\n", "param_string", "=", "\"act_type='tanh'\"", "\n", "need_flatten", "[", "name", "]", "=", "need_flatten", "[", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", "]", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Sigmoid'", "or", "layer", "[", "i", "]", ".", "type", "==", "19", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Activation'", "\n", "param_string", "=", "\"act_type='sigmoid'\"", "\n", "need_flatten", "[", "name", "]", "=", "need_flatten", "[", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", "]", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'LRN'", "or", "layer", "[", "i", "]", ".", "type", "==", "15", ":", "\n", "            ", "type_string", "=", "'mx.symbol.LRN'", "\n", "param", "=", "layer", "[", "i", "]", ".", "lrn_param", "\n", "param_string", "=", "\"alpha=%f, beta=%f, knorm=%f, nsize=%d\"", "%", "(", "param", ".", "alpha", ",", "param", ".", "beta", ",", "param", ".", "k", ",", "param", ".", "local_size", ")", "\n", "need_flatten", "[", "name", "]", "=", "True", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'InnerProduct'", "or", "layer", "[", "i", "]", ".", "type", "==", "14", ":", "\n", "            ", "type_string", "=", "'mx.symbol.FullyConnected'", "\n", "param", "=", "layer", "[", "i", "]", ".", "inner_product_param", "\n", "param_string", "=", "\"num_hidden=%d, no_bias=%s\"", "%", "(", "param", ".", "num_output", ",", "not", "param", ".", "bias_term", ")", "\n", "need_flatten", "[", "name", "]", "=", "False", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Dropout'", "or", "layer", "[", "i", "]", ".", "type", "==", "6", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Dropout'", "\n", "param", "=", "layer", "[", "i", "]", ".", "dropout_param", "\n", "param_string", "=", "\"p=%f\"", "%", "param", ".", "dropout_ratio", "\n", "need_flatten", "[", "name", "]", "=", "need_flatten", "[", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", "]", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Softmax'", "or", "layer", "[", "i", "]", ".", "type", "==", "20", ":", "\n", "            ", "if", "layer", "[", "i", "]", ".", "softmax_param", ".", "axis", "==", "2", ":", "\n", "                ", "symbol_string", "+=", "\"%s = mx.symbol.transpose(%s, axes=(0,2,1))\\n\"", "%", "(", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", ",", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", ")", "\n", "type_string", "=", "'mx.symbol.SoftmaxActivation'", "\n", "param_string", "=", "\"mode='channel'\"", "\n", "need_flatten", "[", "name", "]", "=", "False", "\n", "", "else", ":", "\n", "                ", "type_string", "=", "'mx.symbol.SoftmaxOutput'", "\n", "", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Flatten'", "or", "layer", "[", "i", "]", ".", "type", "==", "8", ":", "\n", "            ", "if", "'softmax'", "in", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", ":", "\n", "                ", "type_string", "=", "'identical'", "\n", "", "else", ":", "\n", "                ", "type_string", "=", "'mx.symbol.Flatten'", "\n", "", "need_flatten", "[", "name", "]", "=", "False", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Split'", "or", "layer", "[", "i", "]", ".", "type", "==", "22", ":", "\n", "            ", "type_string", "=", "'split'", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Concat'", "or", "layer", "[", "i", "]", ".", "type", "==", "3", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Concat'", "\n", "need_flatten", "[", "name", "]", "=", "True", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Crop'", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Crop'", "\n", "need_flatten", "[", "name", "]", "=", "True", "\n", "param_string", "=", "'center_crop=True'", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'BatchNorm'", ":", "\n", "            ", "type_string", "=", "'mx.symbol.BatchNorm'", "\n", "param", "=", "layer", "[", "i", "]", ".", "batch_norm_param", "\n", "param_string", "=", "'use_global_stats=%s'", "%", "param", ".", "use_global_stats", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'PReLU'", ":", "\n", "            ", "type_string", "=", "'mx.symbol.LeakyReLU'", "\n", "param", "=", "layer", "[", "i", "]", ".", "prelu_param", "\n", "param_string", "=", "\"act_type='prelu', slope=%f\"", "%", "param", ".", "filler", ".", "value", "\n", "need_flatten", "[", "name", "]", "=", "need_flatten", "[", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", "]", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Normalize'", ":", "\n", "            ", "bottom", "=", "re", ".", "sub", "(", "'[-/]'", ",", "'_'", ",", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", ")", "\n", "conv_layer", "=", "find_layer", "(", "layer", ",", "bottom", ")", "\n", "assert", "conv_layer", "is", "not", "None", "\n", "param", "=", "layer", "[", "i", "]", ".", "norm_param", "\n", "assert", "not", "param", ".", "across_spatial", "and", "not", "param", ".", "channel_shared", "\n", "assert", "param", ".", "scale_filler", ".", "type", "==", "'constant'", "\n", "if", "conv_layer", ".", "type", "==", "'Convolution'", ":", "\n", "                ", "scale_name", "=", "\"%s_scale\"", "%", "name", "\n", "symbol_string", "+=", "\"%s=mx.sym.Variable(name='%s', shape=(1, %d, 1, 1), init=mx.init.Constant(%f))\\n\"", "%", "(", "scale_name", ",", "scale_name", ",", "conv_layer", ".", "convolution_param", ".", "num_output", ",", "\n", "param", ".", "scale_filler", ".", "value", ")", "\n", "symbol_string", "+=", "\"%s=mx.symbol.L2Normalization(name='%s', data=%s, mode='channel')\\n\"", "%", "(", "name", ",", "name", ",", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", ")", "\n", "symbol_string", "+=", "\"%s=mx.symbol.broadcast_mul(lhs=%s, rhs=%s)\\n\"", "%", "(", "name", ",", "scale_name", ",", "name", ")", "\n", "type_string", "=", "'split'", "\n", "need_flatten", "[", "name", "]", "=", "True", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown/Invalid normalize layer!'", ")", "\n", "", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Permute'", ":", "\n", "            ", "type_string", "=", "'mx.symbol.transpose'", "\n", "param_string", "=", "\"axes=(%s)\"", "%", "(", "','", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "layer", "[", "i", "]", ".", "permute_param", ".", "order", "]", ")", ")", "\n", "need_flatten", "[", "name", "]", "=", "True", "\n", "from_name", "=", "''", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'PriorBox'", ":", "\n", "            ", "param", "=", "layer", "[", "i", "]", ".", "prior_box_param", "\n", "if", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "==", "'data'", ":", "\n", "                ", "bottom_order", "=", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "bottom_order", "=", "[", "0", "]", "\n", "", "try", ":", "\n", "                ", "min_size", "=", "param", ".", "min_size", "[", "0", "]", "/", "input_dim", "[", "2", "]", "\n", "max_size", "=", "math", ".", "sqrt", "(", "param", ".", "min_size", "[", "0", "]", "*", "param", ".", "max_size", "[", "0", "]", ")", "/", "input_dim", "[", "2", "]", "\n", "sizes", "=", "'(%f, %f)'", "%", "(", "min_size", ",", "max_size", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "min_size", "=", "param", ".", "min_size", "[", "0", "]", "/", "input_dim", "[", "2", "]", "\n", "sizes", "=", "'(%f)'", "%", "(", "min_size", ")", "\n", "", "ars", "=", "list", "(", "param", ".", "aspect_ratio", ")", "\n", "ratios", "=", "[", "1.", "]", "\n", "for", "ar", "in", "ars", ":", "\n", "                ", "ratios", ".", "append", "(", "ar", ")", "\n", "if", "param", ".", "flip", ":", "\n", "                    ", "ratios", ".", "append", "(", "1.", "/", "ar", ")", "\n", "", "", "ratios_string", "=", "'('", "+", "','", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "ratios", ")", "+", "')'", "\n", "clip", "=", "param", ".", "clip", "\n", "if", "(", "param", ".", "step_h", ">", "0", "or", "param", ".", "step_w", ">", "0", ")", ":", "\n", "                ", "step_h", "=", "param", ".", "step_h", "\n", "step_w", "=", "param", ".", "step_w", "\n", "", "elif", "param", ".", "step", ">", "0", ":", "\n", "                ", "step_h", "=", "param", ".", "step", "\n", "step_w", "=", "param", ".", "step", "\n", "", "else", ":", "\n", "                ", "step_h", "=", "-", "1", "\n", "step_w", "=", "-", "1", "\n", "", "finput_dim", "=", "float", "(", "input_dim", "[", "2", "]", ")", "\n", "step", "=", "'(%f, %f)'", "%", "(", "step_h", "/", "finput_dim", ",", "step_w", "/", "finput_dim", ")", "\n", "assert", "param", ".", "offset", "==", "0.5", ",", "\"currently only support offset = 0.5\"", "\n", "symbol_string", "+=", "'%s = mx.contrib.symbol.MultiBoxPrior(%s, sizes=%s, ratios=%s, clip=%s, steps=%s, name=\"%s\")\\n'", "%", "(", "name", ",", "mapping", "[", "layer", "[", "i", "]", ".", "bottom", "[", "0", "]", "]", ",", "sizes", ",", "ratios_string", ",", "clip", ",", "step", ",", "name", ")", "\n", "symbol_string", "+=", "'%s = mx.symbol.Flatten(data=%s)\\n'", "%", "(", "name", ",", "name", ")", "\n", "type_string", "=", "'split'", "\n", "need_flatten", "[", "name", "]", "=", "False", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'Reshape'", ":", "\n", "            ", "type_string", "=", "'mx.symbol.Reshape'", "\n", "param", "=", "layer", "[", "i", "]", ".", "reshape_param", "\n", "param_string", "=", "'shape=('", "+", "','", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "list", "(", "param", ".", "shape", ".", "dim", ")", "]", ")", "+", "')'", "\n", "need_flatten", "[", "name", "]", "=", "True", "\n", "", "if", "layer", "[", "i", "]", ".", "type", "==", "'DetectionOutput'", ":", "\n", "            ", "bottom_order", "=", "[", "1", ",", "0", ",", "2", "]", "\n", "param", "=", "layer", "[", "i", "]", ".", "detection_output_param", "\n", "assert", "param", ".", "share_location", "==", "True", "\n", "assert", "param", ".", "background_label_id", "==", "0", "\n", "nms_param", "=", "param", ".", "nms_param", "\n", "type_string", "=", "'mx.contrib.symbol.MultiBoxDetection'", "\n", "param_string", "=", "\"nms_threshold=%f, nms_topk=%d\"", "%", "(", "nms_param", ".", "nms_threshold", ",", "nms_param", ".", "top_k", ")", "\n", "", "if", "type_string", "==", "''", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown Layer %s!'", "%", "layer", "[", "i", "]", ".", "type", ")", "\n", "", "if", "type_string", "==", "'identical'", ":", "\n", "            ", "bottom", "=", "layer", "[", "i", "]", ".", "bottom", "\n", "symbol_string", "+=", "\"%s = %s\\n\"", "%", "(", "name", ",", "mapping", "[", "bottom", "[", "0", "]", "]", ")", "\n", "", "elif", "type_string", "!=", "'split'", ":", "\n", "            ", "bottom", "=", "layer", "[", "i", "]", ".", "bottom", "\n", "if", "param_string", "!=", "\"\"", ":", "\n", "                ", "param_string", "=", "\", \"", "+", "param_string", "\n", "", "if", "len", "(", "bottom", ")", "==", "1", ":", "\n", "                ", "if", "need_flatten", "[", "mapping", "[", "bottom", "[", "0", "]", "]", "]", "and", "type_string", "==", "'mx.symbol.FullyConnected'", ":", "\n", "                    ", "flatten_name", "=", "\"flatten_%d\"", "%", "flatten_count", "\n", "symbol_string", "+=", "\"%s=mx.symbol.Flatten(name='%s', data=%s)\\n\"", "%", "(", "flatten_name", ",", "flatten_name", ",", "mapping", "[", "bottom", "[", "0", "]", "]", ")", "\n", "flatten_count", "+=", "1", "\n", "need_flatten", "[", "flatten_name", "]", "=", "False", "\n", "bottom", "[", "0", "]", "=", "flatten_name", "\n", "mapping", "[", "bottom", "[", "0", "]", "]", "=", "bottom", "[", "0", "]", "\n", "", "symbol_string", "+=", "\"%s = %s(%s%s %s, name='%s')\\n\"", "%", "(", "name", ",", "type_string", ",", "from_name", ",", "mapping", "[", "bottom", "[", "0", "]", "]", ",", "param_string", ",", "name", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "bottom_order", ":", "\n", "                    ", "bottom_order", "=", "range", "(", "len", "(", "bottom", ")", ")", "\n", "", "symbol_string", "+=", "\"%s = %s(name='%s', *[%s] %s)\\n\"", "%", "(", "name", ",", "type_string", ",", "name", ",", "','", ".", "join", "(", "[", "mapping", "[", "bottom", "[", "x", "]", "]", "for", "x", "in", "bottom_order", "]", ")", ",", "param_string", ")", "\n", "if", "layer", "[", "i", "]", ".", "type", "==", "'Concat'", "and", "layer", "[", "i", "]", ".", "concat_param", ".", "axis", "==", "2", ":", "\n", "                    ", "symbol_string", "+=", "\"%s = mx.symbol.Reshape(data=%s, shape=(0, -1, 4), name='%s')\\n\"", "%", "(", "name", ",", "name", ",", "name", ")", "\n", "", "", "", "for", "j", "in", "range", "(", "len", "(", "layer", "[", "i", "]", ".", "top", ")", ")", ":", "\n", "            ", "mapping", "[", "layer", "[", "i", "]", ".", "top", "[", "j", "]", "]", "=", "name", "\n", "", "output_name", "=", "name", "\n", "", "return", "symbol_string", ",", "output_name", ",", "input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.proto2symbol": [[304, 314], ["convert_symbol.proto2script", "exec", "locals", "exec", "globals"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.proto2script"], ["", "def", "proto2symbol", "(", "proto_file", ")", ":", "\n", "    ", "sym", ",", "output_name", ",", "input_dim", "=", "proto2script", "(", "proto_file", ")", "\n", "sym", "=", "\"import mxnet as mx\\n\"", "+", "\"data = mx.symbol.Variable(name='data')\\n\"", "+", "sym", "\n", "exec", "(", "sym", ")", "\n", "_locals", "=", "locals", "(", ")", "\n", "exec", "(", "\"ret = \"", "+", "output_name", ",", "globals", "(", ")", ",", "_locals", ")", "\n", "ret", "=", "_locals", "[", "'ret'", "]", "\n", "return", "ret", ",", "input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.main": [[316, 323], ["convert_symbol.proto2script", "len", "print", "open", "fout.write"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.caffe_converter.convert_symbol.proto2script"], ["", "def", "main", "(", ")", ":", "\n", "    ", "symbol_string", ",", "output_name", ",", "input_dim", "=", "proto2script", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", ">", "2", ":", "\n", "        ", "with", "open", "(", "sys", ".", "argv", "[", "2", "]", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "symbol_string", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "symbol_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_parse.parse_from_protobuf.parse_caffemodel": [[6, 22], ["open", "open.read", "caffe_parse.NetParameter", "caffe_pb2.NetParameter.ParseFromString", "parse_from_protobuf.find_layers"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.caffe_parse.parse_from_protobuf.find_layers"], ["def", "parse_caffemodel", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    parses the trained .caffemodel file\n\n    filepath: /path/to/trained-model.caffemodel\n\n    returns: layers\n    \"\"\"", "\n", "f", "=", "open", "(", "file_path", ",", "'rb'", ")", "\n", "contents", "=", "f", ".", "read", "(", ")", "\n", "\n", "net_param", "=", "caffe_pb2", ".", "NetParameter", "(", ")", "\n", "net_param", ".", "ParseFromString", "(", "contents", ")", "\n", "\n", "layers", "=", "find_layers", "(", "net_param", ")", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_parse.parse_from_protobuf.find_layers": [[24, 31], ["len", "len", "Exception"], "function", ["None"], ["", "def", "find_layers", "(", "net_param", ")", ":", "\n", "    ", "if", "len", "(", "net_param", ".", "layers", ")", ">", "0", ":", "\n", "        ", "return", "net_param", ".", "layers", "\n", "", "elif", "len", "(", "net_param", ".", "layer", ")", ">", "0", ":", "\n", "        ", "return", "net_param", ".", "layer", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Couldn't find layers\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.caffe_parse.parse_from_protobuf.main": [[33, 35], ["parse_from_protobuf.parse_caffemodel"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.caffe_parse.parse_from_protobuf.parse_caffemodel"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "param_dict", "=", "parse_caffemodel", "(", "'xxx.caffemodel'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detect.detector.Detector.__init__": [[29, 43], ["mxnet.model.load_checkpoint", "mxnet.mod.Module", "detector.Detector.mod.bind", "detector.Detector.mod.set_params", "mxnet.cpu"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "symbol", ",", "model_prefix", ",", "epoch", ",", "data_shape", ",", "mean_pixels", ",", "batch_size", "=", "1", ",", "ctx", "=", "None", ")", ":", "\n", "        ", "self", ".", "ctx", "=", "ctx", "\n", "if", "self", ".", "ctx", "is", "None", ":", "\n", "            ", "self", ".", "ctx", "=", "mx", ".", "cpu", "(", ")", "\n", "", "load_symbol", ",", "args", ",", "auxs", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "model_prefix", ",", "epoch", ")", "\n", "if", "symbol", "is", "None", ":", "\n", "            ", "symbol", "=", "load_symbol", "\n", "", "self", ".", "mod", "=", "mx", ".", "mod", ".", "Module", "(", "symbol", ",", "label_names", "=", "None", ",", "context", "=", "ctx", ")", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "mod", ".", "bind", "(", "data_shapes", "=", "[", "(", "'data'", ",", "(", "batch_size", ",", "3", ",", "data_shape", ",", "data_shape", ")", ")", "]", ")", "\n", "self", ".", "mod", ".", "set_params", "(", "args", ",", "auxs", ")", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "mean_pixels", "=", "mean_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detect.detector.Detector.detect": [[44, 77], ["timeit.default_timer", "detector.Detector.mod.iter_predict", "isinstance", "mxnet.io.PrefetchingIter", "detections.append", "timeit.default_timer", "print", "range", "pred[].asnumpy", "result.append", "numpy.where"], "methods", ["None"], ["", "def", "detect", "(", "self", ",", "det_iter", ",", "show_timer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        detect all images in iterator\n\n        Parameters:\n        ----------\n        det_iter : DetIter\n            iterator for all testing images\n        show_timer : Boolean\n            whether to print out detection exec time\n\n        Returns:\n        ----------\n        list of detection results\n        \"\"\"", "\n", "num_images", "=", "det_iter", ".", "_size", "\n", "result", "=", "[", "]", "\n", "detections", "=", "[", "]", "\n", "if", "not", "isinstance", "(", "det_iter", ",", "mx", ".", "io", ".", "PrefetchingIter", ")", ":", "\n", "            ", "det_iter", "=", "mx", ".", "io", ".", "PrefetchingIter", "(", "det_iter", ")", "\n", "", "start", "=", "timer", "(", ")", "\n", "for", "pred", ",", "_", ",", "_", "in", "self", ".", "mod", ".", "iter_predict", "(", "det_iter", ")", ":", "\n", "            ", "detections", ".", "append", "(", "pred", "[", "0", "]", ".", "asnumpy", "(", ")", ")", "\n", "", "time_elapsed", "=", "timer", "(", ")", "-", "start", "\n", "if", "show_timer", ":", "\n", "            ", "print", "(", "\"Detection time for {} images: {:.4f} sec\"", ".", "format", "(", "\n", "num_images", ",", "time_elapsed", ")", ")", "\n", "", "for", "output", "in", "detections", ":", "\n", "            ", "for", "i", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "det", "=", "output", "[", "i", ",", ":", ",", ":", "]", "\n", "res", "=", "det", "[", "np", ".", "where", "(", "det", "[", ":", ",", "0", "]", ">=", "0", ")", "[", "0", "]", "]", "\n", "result", ".", "append", "(", "res", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detect.detector.Detector.im_detect": [[78, 101], ["dataset.testdb.TestDB", "dataset.iterator.DetIter", "detector.Detector.detect"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.detect.detector.Detector.detect"], ["", "def", "im_detect", "(", "self", ",", "im_list", ",", "root_dir", "=", "None", ",", "extension", "=", "None", ",", "show_timer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        wrapper for detecting multiple images\n\n        Parameters:\n        ----------\n        im_list : list of str\n            image path or list of image paths\n        root_dir : str\n            directory of input images, optional if image path already\n            has full directory information\n        extension : str\n            image extension, eg. \".jpg\", optional\n\n        Returns:\n        ----------\n        list of detection results in format [det0, det1...], det is in\n        format np.array([id, score, xmin, ymin, xmax, ymax]...)\n        \"\"\"", "\n", "test_db", "=", "TestDB", "(", "im_list", ",", "root_dir", "=", "root_dir", ",", "extension", "=", "extension", ")", "\n", "test_iter", "=", "DetIter", "(", "test_db", ",", "1", ",", "self", ".", "data_shape", ",", "self", ".", "mean_pixels", ",", "\n", "is_train", "=", "False", ")", "\n", "return", "self", ".", "detect", "(", "test_iter", ",", "show_timer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detect.detector.Detector.visualize_detection": [[102, 148], ["plt.imshow", "dict", "range", "plt.show", "int", "int", "int", "int", "int", "plt.Rectangle", "plt.gca().add_patch", "str", "plt.gca().text", "random.random", "random.random", "random.random", "plt.gca", "len", "plt.gca", "dict"], "methods", ["None"], ["", "def", "visualize_detection", "(", "self", ",", "img", ",", "dets", ",", "classes", "=", "[", "]", ",", "thresh", "=", "0.6", ")", ":", "\n", "        ", "\"\"\"\n        visualize detections in one image\n\n        Parameters:\n        ----------\n        img : numpy.array\n            image, in bgr format\n        dets : numpy.array\n            ssd detections, numpy.array([[id, score, x1, y1, x2, y2]...])\n            each row is one object\n        classes : tuple or list of str\n            class names\n        thresh : float\n            score threshold\n        \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "random", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "colors", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cls_id", "=", "int", "(", "dets", "[", "i", ",", "0", "]", ")", "\n", "if", "cls_id", ">=", "0", ":", "\n", "                ", "score", "=", "dets", "[", "i", ",", "1", "]", "\n", "if", "score", ">", "thresh", ":", "\n", "                    ", "if", "cls_id", "not", "in", "colors", ":", "\n", "                        ", "colors", "[", "cls_id", "]", "=", "(", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", ")", "\n", "", "xmin", "=", "int", "(", "dets", "[", "i", ",", "2", "]", "*", "width", ")", "\n", "ymin", "=", "int", "(", "dets", "[", "i", ",", "3", "]", "*", "height", ")", "\n", "xmax", "=", "int", "(", "dets", "[", "i", ",", "4", "]", "*", "width", ")", "\n", "ymax", "=", "int", "(", "dets", "[", "i", ",", "5", "]", "*", "height", ")", "\n", "rect", "=", "plt", ".", "Rectangle", "(", "(", "xmin", ",", "ymin", ")", ",", "xmax", "-", "xmin", ",", "\n", "ymax", "-", "ymin", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "colors", "[", "cls_id", "]", ",", "\n", "linewidth", "=", "3.5", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect", ")", "\n", "class_name", "=", "str", "(", "cls_id", ")", "\n", "if", "classes", "and", "len", "(", "classes", ")", ">", "cls_id", ":", "\n", "                        ", "class_name", "=", "classes", "[", "cls_id", "]", "\n", "", "plt", ".", "gca", "(", ")", ".", "text", "(", "xmin", ",", "ymin", "-", "2", ",", "\n", "'{:s} {:.3f}'", ".", "format", "(", "class_name", ",", "score", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "colors", "[", "cls_id", "]", ",", "alpha", "=", "0.5", ")", ",", "\n", "fontsize", "=", "12", ",", "color", "=", "'white'", ")", "\n", "", "", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.detect.detector.Detector.detect_and_visualize": [[149, 177], ["detector.Detector.im_detect", "enumerate", "isinstance", "len", "len", "cv2.imread", "detector.Detector.visualize_detection"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.detect.detector.Detector.im_detect", "home.repos.pwc.inspect_result.homles11_IGCV3.detect.detector.Detector.visualize_detection"], ["", "def", "detect_and_visualize", "(", "self", ",", "im_list", ",", "root_dir", "=", "None", ",", "extension", "=", "None", ",", "\n", "classes", "=", "[", "]", ",", "thresh", "=", "0.6", ",", "show_timer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        wrapper for im_detect and visualize_detection\n\n        Parameters:\n        ----------\n        im_list : list of str or str\n            image path or list of image paths\n        root_dir : str or None\n            directory of input images, optional if image path already\n            has full directory information\n        extension : str or None\n            image extension, eg. \".jpg\", optional\n\n        Returns:\n        ----------\n\n        \"\"\"", "\n", "import", "cv2", "\n", "dets", "=", "self", ".", "im_detect", "(", "im_list", ",", "root_dir", ",", "extension", ",", "show_timer", "=", "show_timer", ")", "\n", "if", "not", "isinstance", "(", "im_list", ",", "list", ")", ":", "\n", "            ", "im_list", "=", "[", "im_list", "]", "\n", "", "assert", "len", "(", "dets", ")", "==", "len", "(", "im_list", ")", "\n", "for", "k", ",", "det", "in", "enumerate", "(", "dets", ")", ":", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "im_list", "[", "k", "]", ")", "\n", "img", "[", ":", ",", ":", ",", "(", "0", ",", "1", ",", "2", ")", "]", "=", "img", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "self", ".", "visualize_detection", "(", "img", ",", "det", ",", "classes", ",", "thresh", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__init__": [[15, 25], ["dict.__init__", "isinstance", "kwargs.items", "arg.items"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DotDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "arg", "in", "args", ":", "\n", "            ", "if", "isinstance", "(", "arg", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "arg", ".", "items", "(", ")", ":", "\n", "                    ", "self", "[", "k", "]", "=", "v", "\n", "\n", "", "", "", "if", "kwargs", ":", "\n", "            ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "self", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__getattr__": [[26, 28], ["utils.DotDict.get"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.get"], ["", "", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "self", ".", "get", "(", "attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__setattr__": [[29, 31], ["utils.DotDict.__setitem__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__setitem__"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__setitem__": [[32, 35], ["super().__setitem__", "utils.DotDict.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__setitem__", "home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "super", "(", "DotDict", ",", "self", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "{", "key", ":", "value", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__delattr__": [[36, 38], ["utils.DotDict.__delitem__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__delitem__"], ["", "def", "__delattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "__delitem__", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__delitem__": [[39, 42], ["super().__delitem__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.DotDict.__delitem__"], ["", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "super", "(", "DotDict", ",", "self", ")", ".", "__delitem__", "(", "key", ")", "\n", "del", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.namedtuple_with_defaults": [[44, 54], ["collections.namedtuple", "isinstance", "tuple", "len", "collections.namedtuple.", "collections.namedtuple."], "function", ["None"], ["", "", "def", "namedtuple_with_defaults", "(", "typename", ",", "field_names", ",", "default_values", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\" create a namedtuple with default values \"\"\"", "\n", "T", "=", "collections", ".", "namedtuple", "(", "typename", ",", "field_names", ")", "\n", "T", ".", "__new__", ".", "__defaults__", "=", "(", "None", ",", ")", "*", "len", "(", "T", ".", "_fields", ")", "\n", "if", "isinstance", "(", "default_values", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "prototype", "=", "T", "(", "**", "default_values", ")", "\n", "", "else", ":", "\n", "        ", "prototype", "=", "T", "(", "*", "default_values", ")", "\n", "", "T", ".", "__new__", ".", "__defaults__", "=", "tuple", "(", "prototype", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.merge_dict": [[55, 60], ["a.copy", "a.copy.update"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update"], ["", "def", "merge_dict", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\" merge dict a, b, with b overriding keys in a \"\"\"", "\n", "c", "=", "a", ".", "copy", "(", ")", "\n", "c", ".", "update", "(", "b", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.zip_namedtuple": [[61, 74], ["dict", "isinstance", "nt._asdict().items", "type", "type", "nt_list[]._asdict().items", "ret[].append", "nt._asdict", "nt_list[]._asdict"], "function", ["None"], ["", "def", "zip_namedtuple", "(", "nt_list", ")", ":", "\n", "    ", "\"\"\" accept list of namedtuple, return a dict of zipped fields \"\"\"", "\n", "if", "not", "nt_list", ":", "\n", "        ", "return", "dict", "(", ")", "\n", "", "if", "not", "isinstance", "(", "nt_list", ",", "list", ")", ":", "\n", "        ", "nt_list", "=", "[", "nt_list", "]", "\n", "", "for", "nt", "in", "nt_list", ":", "\n", "        ", "assert", "type", "(", "nt", ")", "==", "type", "(", "nt_list", "[", "0", "]", ")", "\n", "", "ret", "=", "{", "k", ":", "[", "v", "]", "for", "k", ",", "v", "in", "nt_list", "[", "0", "]", ".", "_asdict", "(", ")", ".", "items", "(", ")", "}", "\n", "for", "nt", "in", "nt_list", "[", "1", ":", "]", ":", "\n", "        ", "for", "k", ",", "v", "in", "nt", ".", "_asdict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "ret", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.config_as_dict": [[75, 92], ["cfg.__dict__.copy", "isinstance", "utils.merge_dict", "len", "utils.merge_dict", "utils.merge_dict", "utils.zip_namedtuple", "cfg.rand_pad._asdict", "cfg.color_jitter._asdict"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.merge_dict", "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.merge_dict", "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.merge_dict", "home.repos.pwc.inspect_result.homles11_IGCV3.config.utils.zip_namedtuple"], ["", "def", "config_as_dict", "(", "cfg", ")", ":", "\n", "    ", "\"\"\" convert raw configuration to unified dictionary \"\"\"", "\n", "ret", "=", "cfg", ".", "__dict__", ".", "copy", "(", ")", "\n", "# random cropping params", "\n", "del", "ret", "[", "'rand_crop_samplers'", "]", "\n", "assert", "isinstance", "(", "cfg", ".", "rand_crop_samplers", ",", "list", ")", "\n", "ret", "=", "merge_dict", "(", "ret", ",", "zip_namedtuple", "(", "cfg", ".", "rand_crop_samplers", ")", ")", "\n", "num_crop_sampler", "=", "len", "(", "cfg", ".", "rand_crop_samplers", ")", "\n", "ret", "[", "'num_crop_sampler'", "]", "=", "num_crop_sampler", "# must specify the #", "\n", "ret", "[", "'rand_crop_prob'", "]", "=", "1.0", "/", "(", "num_crop_sampler", "+", "1", ")", "*", "num_crop_sampler", "\n", "# random padding params", "\n", "del", "ret", "[", "'rand_pad'", "]", "\n", "ret", "=", "merge_dict", "(", "ret", ",", "cfg", ".", "rand_pad", ".", "_asdict", "(", ")", ")", "\n", "# color jitter", "\n", "del", "ret", "[", "'color_jitter'", "]", "\n", "ret", "=", "merge_dict", "(", "ret", ",", "cfg", ".", "color_jitter", ".", "_asdict", "(", ")", ")", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.evaluate_net.evaluate_net": [[12, 102], ["mxnet.cpu", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "isinstance", "dataset.iterator.DetRecordIter", "mxnet.model.load_checkpoint", "mxnet.mod.Module", "mx.mod.Module.bind", "mx.mod.Module.set_params", "mx.mod.Module.score", "symbol.symbol_factory.get_symbol", "mxnet.sym.Variable", "mxnet.sym.Group", "evaluate.eval_metric.VOC07MApMetric", "evaluate.eval_metric.MApMetric", "print", "len", "mx.sym.Group.list_arguments", "mx.sym.Group.list_arguments", "mxnet.callback.Speedometer", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol"], ["def", "evaluate_net", "(", "net", ",", "path_imgrec", ",", "num_classes", ",", "mean_pixels", ",", "data_shape", ",", "\n", "model_prefix", ",", "epoch", ",", "ctx", "=", "mx", ".", "cpu", "(", ")", ",", "batch_size", "=", "1", ",", "\n", "path_imglist", "=", "\"\"", ",", "nms_thresh", "=", "0.45", ",", "force_nms", "=", "False", ",", "\n", "ovp_thresh", "=", "0.5", ",", "use_difficult", "=", "False", ",", "class_names", "=", "None", ",", "\n", "voc07_metric", "=", "False", ",", "frequent", "=", "20", ")", ":", "\n", "    ", "\"\"\"\n    evalute network given validation record file\n\n    Parameters:\n    ----------\n    net : str or None\n        Network name or use None to load from json without modifying\n    path_imgrec : str\n        path to the record validation file\n    path_imglist : str\n        path to the list file to replace labels in record file, optional\n    num_classes : int\n        number of classes, not including background\n    mean_pixels : tuple\n        (mean_r, mean_g, mean_b)\n    data_shape : tuple or int\n        (3, height, width) or height/width\n    model_prefix : str\n        model prefix of saved checkpoint\n    epoch : int\n        load model epoch\n    ctx : mx.ctx\n        mx.gpu() or mx.cpu()\n    batch_size : int\n        validation batch size\n    nms_thresh : float\n        non-maximum suppression threshold\n    force_nms : boolean\n        whether suppress different class objects\n    ovp_thresh : float\n        AP overlap threshold for true/false postives\n    use_difficult : boolean\n        whether to use difficult objects in evaluation if applicable\n    class_names : comma separated str\n        class names in string, must correspond to num_classes if set\n    voc07_metric : boolean\n        whether to use 11-point evluation as in VOC07 competition\n    frequent : int\n        frequency to print out validation status\n    \"\"\"", "\n", "# set up logger", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "# args", "\n", "if", "isinstance", "(", "data_shape", ",", "int", ")", ":", "\n", "        ", "data_shape", "=", "(", "3", ",", "data_shape", ",", "data_shape", ")", "\n", "", "assert", "len", "(", "data_shape", ")", "==", "3", "and", "data_shape", "[", "0", "]", "==", "3", "\n", "#model_prefix += '_' + str(data_shape[1])", "\n", "\n", "# iterator", "\n", "eval_iter", "=", "DetRecordIter", "(", "path_imgrec", ",", "batch_size", ",", "data_shape", ",", "\n", "path_imglist", "=", "path_imglist", ",", "**", "cfg", ".", "valid", ")", "\n", "# model params", "\n", "load_net", ",", "args", ",", "auxs", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "model_prefix", ",", "epoch", ")", "\n", "# network", "\n", "if", "net", "is", "None", ":", "\n", "        ", "net", "=", "load_net", "\n", "", "else", ":", "\n", "        ", "net", "=", "get_symbol", "(", "net", ",", "data_shape", "[", "1", "]", ",", "num_classes", "=", "num_classes", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "force_suppress", "=", "force_nms", ")", "\n", "", "if", "not", "'label'", "in", "net", ".", "list_arguments", "(", ")", ":", "\n", "        ", "label", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "'label'", ")", "\n", "net", "=", "mx", ".", "sym", ".", "Group", "(", "[", "net", ",", "label", "]", ")", "\n", "\n", "# init module", "\n", "", "mod", "=", "mx", ".", "mod", ".", "Module", "(", "net", ",", "label_names", "=", "(", "'label'", ",", ")", ",", "logger", "=", "logger", ",", "context", "=", "ctx", ",", "\n", "fixed_param_names", "=", "net", ".", "list_arguments", "(", ")", ")", "\n", "mod", ".", "bind", "(", "data_shapes", "=", "eval_iter", ".", "provide_data", ",", "label_shapes", "=", "eval_iter", ".", "provide_label", ")", "\n", "mod", ".", "set_params", "(", "args", ",", "auxs", ",", "allow_missing", "=", "False", ",", "force_init", "=", "True", ")", "\n", "\n", "# run evaluation", "\n", "if", "voc07_metric", ":", "\n", "        ", "metric", "=", "VOC07MApMetric", "(", "ovp_thresh", ",", "use_difficult", ",", "class_names", ",", "\n", "roc_output_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "model_prefix", ")", ",", "'roc'", ")", ")", "\n", "", "else", ":", "\n", "        ", "metric", "=", "MApMetric", "(", "ovp_thresh", ",", "use_difficult", ",", "class_names", ",", "\n", "roc_output_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "model_prefix", ")", ",", "'roc'", ")", ")", "\n", "", "results", "=", "mod", ".", "score", "(", "eval_iter", ",", "metric", ",", "num_batch", "=", "None", ",", "\n", "batch_end_callback", "=", "mx", ".", "callback", ".", "Speedometer", "(", "batch_size", ",", "\n", "frequent", "=", "frequent", ",", "\n", "auto_reset", "=", "False", ")", ")", "\n", "for", "k", ",", "v", "in", "results", ":", "\n", "        ", "print", "(", "\"{}: {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric.__init__": [[28, 47], ["super().__init__", "eval_metric.MApMetric.reset", "int", "isinstance", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__", "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.reset"], ["def", "__init__", "(", "self", ",", "ovp_thresh", "=", "0.5", ",", "use_difficult", "=", "False", ",", "class_names", "=", "None", ",", "\n", "pred_idx", "=", "0", ",", "roc_output_path", "=", "None", ",", "tensorboard_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "MApMetric", ",", "self", ")", ".", "__init__", "(", "'mAP'", ")", "\n", "if", "class_names", "is", "None", ":", "\n", "            ", "self", ".", "num", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "class_names", ",", "(", "list", ",", "tuple", ")", ")", "\n", "for", "name", "in", "class_names", ":", "\n", "                ", "assert", "isinstance", "(", "name", ",", "str", ")", ",", "\"must provide names as str\"", "\n", "", "num", "=", "len", "(", "class_names", ")", "\n", "self", ".", "name", "=", "class_names", "+", "[", "'mAP'", "]", "\n", "self", ".", "num", "=", "num", "+", "1", "\n", "", "self", ".", "reset", "(", ")", "\n", "self", ".", "ovp_thresh", "=", "ovp_thresh", "\n", "self", ".", "use_difficult", "=", "use_difficult", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "pred_idx", "=", "int", "(", "pred_idx", ")", "\n", "self", ".", "roc_output_path", "=", "roc_output_path", "\n", "self", ".", "tensorboard_path", "=", "tensorboard_path", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric.save_roc_graph": [[48, 64], ["os.path.join", "os.path.exists", "matplotlib.figure", "matplotlib.figure", "matplotlib.title", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "os.path.exists", "os.mkdir", "os.remove"], "methods", ["None"], ["", "def", "save_roc_graph", "(", "self", ",", "recall", "=", "None", ",", "prec", "=", "None", ",", "classkey", "=", "1", ",", "path", "=", "None", ",", "ap", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "plot_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'roc_'", "+", "self", ".", "class_names", "[", "classkey", "-", "1", "]", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "plot_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "plot_path", ")", "\n", "", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "self", ".", "class_names", "[", "classkey", "-", "1", "]", ")", "\n", "plt", ".", "plot", "(", "recall", ",", "prec", ",", "'b'", ",", "label", "=", "'AP = %0.2f'", "%", "ap", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "xlim", "(", "[", "0", ",", "1", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "savefig", "(", "plot_path", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric.reset": [[65, 75], ["dict", "dict", "getattr"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear the internal statistics to initial state.\"\"\"", "\n", "if", "getattr", "(", "self", ",", "'num'", ",", "None", ")", "is", "None", ":", "\n", "            ", "self", ".", "num_inst", "=", "0", "\n", "self", ".", "sum_metric", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_inst", "=", "[", "0", "]", "*", "self", ".", "num", "\n", "self", ".", "sum_metric", "=", "[", "0.0", "]", "*", "self", ".", "num", "\n", "", "self", ".", "records", "=", "dict", "(", ")", "\n", "self", ".", "counts", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric.get": [[76, 97], ["eval_metric.MApMetric._update", "float", "range", "float", "zip"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric._update"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the current evaluation result.\n\n        Returns\n        -------\n        name : str\n           Name of the metric.\n        value : float\n           Value of the evaluation.\n        \"\"\"", "\n", "self", ".", "_update", "(", ")", "# update metric at this time", "\n", "if", "self", ".", "num", "is", "None", ":", "\n", "            ", "if", "self", ".", "num_inst", "==", "0", ":", "\n", "                ", "return", "(", "self", ".", "name", ",", "float", "(", "'nan'", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "self", ".", "name", ",", "self", ".", "sum_metric", "/", "self", ".", "num_inst", ")", "\n", "", "", "else", ":", "\n", "            ", "names", "=", "[", "'%s'", "%", "(", "self", ".", "name", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "num", ")", "]", "\n", "values", "=", "[", "x", "/", "y", "if", "y", "!=", "0", "else", "float", "(", "'nan'", ")", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "sum_metric", ",", "self", ".", "num_inst", ")", "]", "\n", "return", "(", "names", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric.update": [[98, 206], ["range", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "[].asnumpy", "[].asnumpy", "int", "numpy.delete", "numpy.hstack", "numpy.delete", "int", "numpy.delete", "eval_metric.MApMetric._insert", "numpy.where", "numpy.delete", "numpy.where", "range", "numpy.sum", "eval_metric.MApMetric._insert", "numpy.where", "numpy.array", "numpy.zeros", "eval_metric.MApMetric.update.iou"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric._insert", "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric._insert"], ["", "", "def", "update", "(", "self", ",", "labels", ",", "preds", ")", ":", "\n", "        ", "\"\"\"\n        Update internal records. This function now only update internal buffer,\n        sum_metric and num_inst are updated in _update() function instead when\n        get() is called to return results.\n\n        Params:\n        ----------\n        labels: mx.nd.array (n * 6) or (n * 5), difficult column is optional\n            2-d array of ground-truths, n objects(id-xmin-ymin-xmax-ymax-[difficult])\n        preds: mx.nd.array (m * 6)\n            2-d array of detections, m objects(id-score-xmin-ymin-xmax-ymax)\n        \"\"\"", "\n", "def", "iou", "(", "x", ",", "ys", ")", ":", "\n", "            ", "\"\"\"\n            Calculate intersection-over-union overlap\n            Params:\n            ----------\n            x : numpy.array\n                single box [xmin, ymin ,xmax, ymax]\n            ys : numpy.array\n                multiple box [[xmin, ymin, xmax, ymax], [...], ]\n            Returns:\n            -----------\n            numpy.array\n                [iou1, iou2, ...], size == ys.shape[0]\n            \"\"\"", "\n", "ixmin", "=", "np", ".", "maximum", "(", "ys", "[", ":", ",", "0", "]", ",", "x", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "ys", "[", ":", ",", "1", "]", ",", "x", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "ys", "[", ":", ",", "2", "]", ",", "x", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "ys", "[", ":", ",", "3", "]", ",", "x", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "uni", "=", "(", "x", "[", "2", "]", "-", "x", "[", "0", "]", ")", "*", "(", "x", "[", "3", "]", "-", "x", "[", "1", "]", ")", "+", "(", "ys", "[", ":", ",", "2", "]", "-", "ys", "[", ":", ",", "0", "]", ")", "*", "(", "ys", "[", ":", ",", "3", "]", "-", "ys", "[", ":", ",", "1", "]", ")", "-", "inters", "\n", "ious", "=", "inters", "/", "uni", "\n", "ious", "[", "uni", "<", "1e-12", "]", "=", "0", "# in case bad boxes", "\n", "return", "ious", "\n", "\n", "# independant execution for each image", "\n", "", "for", "i", "in", "range", "(", "labels", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "# get as numpy arrays", "\n", "            ", "label", "=", "labels", "[", "0", "]", "[", "i", "]", ".", "asnumpy", "(", ")", "\n", "pred", "=", "preds", "[", "self", ".", "pred_idx", "]", "[", "i", "]", ".", "asnumpy", "(", ")", "\n", "# calculate for each class", "\n", "while", "(", "pred", ".", "shape", "[", "0", "]", ">", "0", ")", ":", "\n", "                ", "cid", "=", "int", "(", "pred", "[", "0", ",", "0", "]", ")", "\n", "indices", "=", "np", ".", "where", "(", "pred", "[", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "==", "cid", ")", "[", "0", "]", "\n", "if", "cid", "<", "0", ":", "\n", "                    ", "pred", "=", "np", ".", "delete", "(", "pred", ",", "indices", ",", "axis", "=", "0", ")", "\n", "continue", "\n", "", "dets", "=", "pred", "[", "indices", "]", "\n", "pred", "=", "np", ".", "delete", "(", "pred", ",", "indices", ",", "axis", "=", "0", ")", "\n", "# sort by score, desceding", "\n", "dets", "[", "dets", "[", ":", ",", "1", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "records", "=", "np", ".", "hstack", "(", "(", "dets", "[", ":", ",", "1", "]", "[", ":", ",", "np", ".", "newaxis", "]", ",", "np", ".", "zeros", "(", "(", "dets", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "# ground-truths", "\n", "label_indices", "=", "np", ".", "where", "(", "label", "[", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "==", "cid", ")", "[", "0", "]", "\n", "gts", "=", "label", "[", "label_indices", ",", ":", "]", "\n", "label", "=", "np", ".", "delete", "(", "label", ",", "label_indices", ",", "axis", "=", "0", ")", "\n", "if", "gts", ".", "size", ">", "0", ":", "\n", "                    ", "found", "=", "[", "False", "]", "*", "gts", ".", "shape", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "# compute overlaps", "\n", "                        ", "ious", "=", "iou", "(", "dets", "[", "j", ",", "2", ":", "]", ",", "gts", "[", ":", ",", "1", ":", "5", "]", ")", "\n", "ovargmax", "=", "np", ".", "argmax", "(", "ious", ")", "\n", "ovmax", "=", "ious", "[", "ovargmax", "]", "\n", "if", "ovmax", ">", "self", ".", "ovp_thresh", ":", "\n", "                            ", "if", "(", "not", "self", ".", "use_difficult", "and", "\n", "gts", ".", "shape", "[", "1", "]", ">=", "6", "and", "\n", "gts", "[", "ovargmax", ",", "5", "]", ">", "0", ")", ":", "\n", "                                ", "pass", "\n", "", "else", ":", "\n", "                                ", "if", "not", "found", "[", "ovargmax", "]", ":", "\n", "                                    ", "records", "[", "j", ",", "-", "1", "]", "=", "1", "# tp", "\n", "found", "[", "ovargmax", "]", "=", "True", "\n", "", "else", ":", "\n", "# duplicate", "\n", "                                    ", "records", "[", "j", ",", "-", "1", "]", "=", "2", "# fp", "\n", "", "", "", "else", ":", "\n", "                            ", "records", "[", "j", ",", "-", "1", "]", "=", "2", "# fp", "\n", "", "", "", "else", ":", "\n", "# no gt, mark all fp", "\n", "                    ", "records", "[", ":", ",", "-", "1", "]", "=", "2", "\n", "\n", "# ground truth count", "\n", "", "if", "(", "not", "self", ".", "use_difficult", "and", "gts", ".", "shape", "[", "1", "]", ">=", "6", ")", ":", "\n", "                    ", "gt_count", "=", "np", ".", "sum", "(", "gts", "[", ":", ",", "5", "]", "<", "1", ")", "\n", "", "else", ":", "\n", "                    ", "gt_count", "=", "gts", ".", "shape", "[", "0", "]", "\n", "\n", "# now we push records to buffer", "\n", "# first column: score, second column: tp/fp", "\n", "# 0: not set(matched to difficult or something), 1: tp, 2: fp", "\n", "", "records", "=", "records", "[", "np", ".", "where", "(", "records", "[", ":", ",", "-", "1", "]", ">", "0", ")", "[", "0", "]", ",", ":", "]", "\n", "if", "records", ".", "size", ">", "0", ":", "\n", "                    ", "self", ".", "_insert", "(", "cid", ",", "records", ",", "gt_count", ")", "\n", "\n", "# add missing class if not present in prediction", "\n", "", "", "while", "(", "label", ".", "shape", "[", "0", "]", ">", "0", ")", ":", "\n", "                ", "cid", "=", "int", "(", "label", "[", "0", ",", "0", "]", ")", "\n", "label_indices", "=", "np", ".", "where", "(", "label", "[", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "==", "cid", ")", "[", "0", "]", "\n", "label", "=", "np", ".", "delete", "(", "label", ",", "label_indices", ",", "axis", "=", "0", ")", "\n", "if", "cid", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "gt_count", "=", "label_indices", ".", "size", "\n", "self", ".", "_insert", "(", "cid", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", "]", ")", ",", "gt_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric._update": [[207, 225], ["eval_metric.MApMetric.records.items", "eval_metric.MApMetric._recall_prec", "eval_metric.MApMetric._average_precision", "aps.append", "numpy.mean", "numpy.mean", "eval_metric.MApMetric.save_roc_graph"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric._recall_prec", "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.VOC07MApMetric._average_precision", "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric.save_roc_graph"], ["", "", "", "def", "_update", "(", "self", ")", ":", "\n", "        ", "\"\"\" update num_inst and sum_metric \"\"\"", "\n", "aps", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "records", ".", "items", "(", ")", ":", "\n", "            ", "recall", ",", "prec", "=", "self", ".", "_recall_prec", "(", "v", ",", "self", ".", "counts", "[", "k", "]", ")", "\n", "ap", "=", "self", ".", "_average_precision", "(", "recall", ",", "prec", ")", "\n", "if", "self", ".", "roc_output_path", "is", "not", "None", ":", "\n", "                ", "self", ".", "save_roc_graph", "(", "recall", "=", "recall", ",", "prec", "=", "prec", ",", "classkey", "=", "k", ",", "path", "=", "self", ".", "roc_output_path", ",", "ap", "=", "ap", ")", "\n", "", "aps", ".", "append", "(", "ap", ")", "\n", "if", "self", ".", "num", "is", "not", "None", "and", "k", "<", "(", "self", ".", "num", "-", "1", ")", ":", "\n", "                ", "self", ".", "sum_metric", "[", "k", "]", "=", "ap", "\n", "self", ".", "num_inst", "[", "k", "]", "=", "1", "\n", "", "", "if", "self", ".", "num", "is", "None", ":", "\n", "            ", "self", ".", "num_inst", "=", "1", "\n", "self", ".", "sum_metric", "=", "np", ".", "mean", "(", "aps", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_inst", "[", "-", "1", "]", "=", "1", "\n", "self", ".", "sum_metric", "[", "-", "1", "]", "=", "np", ".", "mean", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric._recall_prec": [[226, 238], ["numpy.delete", "numpy.cumsum", "numpy.cumsum", "numpy.cumsum.astype", "numpy.where", "sorted_records[].astype", "sorted_records[].astype", "float", "record[].argsort", "record[].astype"], "methods", ["None"], ["", "", "def", "_recall_prec", "(", "self", ",", "record", ",", "count", ")", ":", "\n", "        ", "\"\"\" get recall and precision from internal records \"\"\"", "\n", "record", "=", "np", ".", "delete", "(", "record", ",", "np", ".", "where", "(", "record", "[", ":", ",", "1", "]", ".", "astype", "(", "int", ")", "==", "0", ")", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "sorted_records", "=", "record", "[", "record", "[", ":", ",", "0", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "tp", "=", "np", ".", "cumsum", "(", "sorted_records", "[", ":", ",", "1", "]", ".", "astype", "(", "int", ")", "==", "1", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "sorted_records", "[", ":", ",", "1", "]", ".", "astype", "(", "int", ")", "==", "2", ")", "\n", "if", "count", "<=", "0", ":", "\n", "            ", "recall", "=", "tp", "*", "0.0", "\n", "", "else", ":", "\n", "            ", "recall", "=", "tp", "/", "float", "(", "count", ")", "\n", "", "prec", "=", "tp", ".", "astype", "(", "float", ")", "/", "(", "(", "tp", "+", "fp", ")", "+", "1e-5", ")", "\n", "return", "recall", ",", "prec", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric._average_precision": [[239, 267], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "methods", ["None"], ["", "def", "_average_precision", "(", "self", ",", "rec", ",", "prec", ")", ":", "\n", "        ", "\"\"\"\n        calculate average precision\n\n        Params:\n        ----------\n        rec : numpy.array\n            cumulated recall\n        prec : numpy.array\n            cumulated precision\n        Returns:\n        ----------\n        ap as float\n        \"\"\"", "\n", "# append sentinel values at both ends", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute precision integration ladder", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# look for recall value changes", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# sum (\\delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.MApMetric._insert": [[268, 278], ["numpy.vstack"], "methods", ["None"], ["", "def", "_insert", "(", "self", ",", "key", ",", "records", ",", "count", ")", ":", "\n", "        ", "\"\"\" Insert records according to key \"\"\"", "\n", "if", "key", "not", "in", "self", ".", "records", ":", "\n", "            ", "assert", "key", "not", "in", "self", ".", "counts", "\n", "self", ".", "records", "[", "key", "]", "=", "records", "\n", "self", ".", "counts", "[", "key", "]", "=", "count", "\n", "", "else", ":", "\n", "            ", "self", ".", "records", "[", "key", "]", "=", "np", ".", "vstack", "(", "(", "self", ".", "records", "[", "key", "]", ",", "records", ")", ")", "\n", "assert", "key", "in", "self", ".", "counts", "\n", "self", ".", "counts", "[", "key", "]", "+=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.VOC07MApMetric.__init__": [[282, 284], ["eval_metric.MApMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VOC07MApMetric", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_metric.VOC07MApMetric._average_precision": [[285, 308], ["numpy.arange", "numpy.sum", "numpy.max"], "methods", ["None"], ["", "def", "_average_precision", "(", "self", ",", "rec", ",", "prec", ")", ":", "\n", "        ", "\"\"\"\n        calculate average precision, override the default one,\n        special 11-point metric\n\n        Params:\n        ----------\n        rec : numpy.array\n            cumulated recall\n        prec : numpy.array\n            cumulated precision\n        Returns:\n        ----------\n        ap as float\n        \"\"\"", "\n", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "+=", "p", "/", "11.", "\n", "", "return", "ap", "\n", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.ParseLogCallback.__init__": [[20, 38], ["SummaryWriter", "SummaryWriter", "logging.error"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dist_logging_dir", "=", "None", ",", "scalar_logging_dir", "=", "None", ",", "\n", "logfile_path", "=", "None", ",", "batch_size", "=", "None", ",", "iter_monitor", "=", "0", ",", "\n", "frequent", "=", "None", ",", "prefix", "=", "'ssd'", ")", ":", "\n", "        ", "self", ".", "scalar_logging_dir", "=", "scalar_logging_dir", "\n", "self", ".", "dist_logging_dir", "=", "dist_logging_dir", "\n", "self", ".", "logfile_path", "=", "logfile_path", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "iter_monitor", "=", "iter_monitor", "\n", "self", ".", "frequent", "=", "frequent", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "batch", "=", "0", "\n", "self", ".", "line_idx", "=", "0", "\n", "try", ":", "\n", "            ", "from", "tensorboard", "import", "SummaryWriter", "\n", "self", ".", "dist_summary_writer", "=", "SummaryWriter", "(", "dist_logging_dir", ")", "\n", "self", ".", "scalar_summary_writer", "=", "SummaryWriter", "(", "scalar_logging_dir", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "logging", ".", "error", "(", "'You can install tensorboard via `pip install tensorboard`.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.ParseLogCallback.__call__": [[39, 67], ["param.eval_metric.get_name_value", "open", "range", "custom_callbacks.ParseLogCallback.scalar_summary_writer.add_scalar", "fp.next", "line.split.split.startswith", "line.split.split.split", "numpy.array().flatten", "numpy.isfinite", "custom_callbacks.ParseLogCallback.dist_summary_writer.add_histogram", "numpy.array", "float", "line[].split"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.next"], ["", "", "def", "__call__", "(", "self", ",", "param", ")", ":", "\n", "        ", "\"\"\"Callback to parse a log file and and add params to TensorBoard.\"\"\"", "\n", "\n", "# save distributions from the monitor output log", "\n", "if", "not", "self", ".", "iter_monitor", "==", "0", "and", "self", ".", "batch", "%", "self", ".", "iter_monitor", "==", "0", ":", "\n", "            ", "with", "open", "(", "self", ".", "logfile_path", ")", "as", "fp", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "line_idx", ")", ":", "\n", "                    ", "fp", ".", "next", "(", ")", "\n", "", "for", "line", "in", "fp", ":", "\n", "                    ", "if", "line", ".", "startswith", "(", "'Batch'", ")", ":", "\n", "                        ", "line", "=", "line", ".", "split", "(", "' '", ")", "\n", "line", "=", "[", "x", "for", "x", "in", "line", "if", "x", "]", "\n", "layer_name", "=", "line", "[", "2", "]", "\n", "layer_value", "=", "np", ".", "array", "(", "float", "(", "line", "[", "3", "]", ".", "split", "(", "'\\t'", ")", "[", "0", "]", ")", ")", ".", "flatten", "(", ")", "\n", "if", "np", ".", "isfinite", "(", "layer_value", ")", ":", "\n", "                            ", "self", ".", "dist_summary_writer", ".", "add_histogram", "(", "layer_name", ",", "layer_value", ")", "\n", "", "", "self", ".", "line_idx", "+=", "1", "\n", "\n", "# save training loss", "\n", "", "", "", "if", "self", ".", "batch", "%", "self", ".", "frequent", "==", "0", ":", "\n", "            ", "if", "param", ".", "eval_metric", "is", "None", ":", "\n", "                ", "return", "\n", "", "name_value", "=", "param", ".", "eval_metric", ".", "get_name_value", "(", ")", "\n", "for", "name", ",", "value", "in", "name_value", ":", "\n", "                ", "if", "self", ".", "prefix", "is", "not", "None", ":", "\n", "                    ", "name", "=", "'%s-%s'", "%", "(", "self", ".", "prefix", ",", "name", ")", "\n", "", "self", ".", "scalar_summary_writer", ".", "add_scalar", "(", "name", ",", "value", ",", "global_step", "=", "self", ".", "batch", ")", "\n", "", "", "self", ".", "batch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.LogROCCallback.__init__": [[79, 88], ["SummaryWriter", "logging.error"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "logging_dir", "=", "None", ",", "prefix", "=", "'val'", ",", "roc_path", "=", "None", ",", "class_names", "=", "None", ")", ":", "\n", "        ", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "roc_path", "=", "roc_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "try", ":", "\n", "            ", "from", "tensorboard", "import", "SummaryWriter", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "logging_dir", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "logging", ".", "error", "(", "'You can install tensorboard via `pip install tensorboard`.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.LogROCCallback.__call__": [[89, 97], ["os.path.join", "scipy.misc.imread", "custom_callbacks.LogROCCallback.summary_writer.add_image", "os.path.exists"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "param", ")", ":", "\n", "        ", "\"\"\"Callback to log ROC graph as an image in TensorBoard.\"\"\"", "\n", "for", "class_name", "in", "self", ".", "class_names", ":", "\n", "            ", "roc", "=", "os", ".", "path", ".", "join", "(", "self", ".", "roc_path", ",", "'roc_'", "+", "class_name", "+", "'.png'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "roc", ")", ":", "\n", "                ", "continue", "\n", "", "im", "=", "scipy", ".", "misc", ".", "imread", "(", "roc", ")", "\n", "self", ".", "summary_writer", ".", "add_image", "(", "self", ".", "prefix", "+", "'_'", "+", "class_name", ",", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.LogDetectionsCallback.__init__": [[101, 118], ["os.path.exists", "os.mkdir", "SummaryWriter", "logging.error"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "logging_dir", "=", "None", ",", "prefix", "=", "'val'", ",", "images_path", "=", "None", ",", "\n", "class_names", "=", "None", ",", "batch_size", "=", "None", ",", "mean_pixels", "=", "None", ",", "det_thresh", "=", "0.5", ")", ":", "\n", "\n", "        ", "self", ".", "logging_dir", "=", "logging_dir", "\n", "self", ".", "prefix", "=", "prefix", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "images_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "images_path", ")", "\n", "", "self", ".", "images_path", "=", "images_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "mean_pixels", "=", "mean_pixels", "\n", "self", ".", "det_thresh", "=", "det_thresh", "\n", "try", ":", "\n", "            ", "from", "tensorboard", "import", "SummaryWriter", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "logging_dir", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "logging", ".", "error", "(", "'You can install tensorboard via `pip install tensorboard`.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.LogDetectionsCallback.__call__": [[119, 151], ["[].asnumpy", "[].asnumpy", "range", "len", "outputs[].asnumpy", "outputs[].asnumpy", "img.transpose.transpose.astype", "img.transpose.transpose.transpose", "custom_callbacks.LogDetectionsCallback._visualize_detection_and_labels", "scipy.misc.imread", "custom_callbacks.LogDetectionsCallback.summary_writer.add_image", "param.locals[].get_outputs", "numpy.reshape", "os.path.join", "os.path.join", "enumerate", "f.startswith", "numpy.where", "numpy.where", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.LogDetectionsCallback._visualize_detection_and_labels"], ["", "", "def", "__call__", "(", "self", ",", "param", ")", ":", "\n", "        ", "\"\"\"Callback to log detections and gt-boxes as an image in TensorBoard.\"\"\"", "\n", "if", "param", ".", "locals", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "result", "=", "[", "]", "\n", "pad", "=", "param", ".", "locals", "[", "'eval_batch'", "]", ".", "pad", "\n", "images", "=", "param", ".", "locals", "[", "'eval_batch'", "]", ".", "data", "[", "0", "]", "[", "0", ":", "self", ".", "batch_size", "-", "pad", "]", ".", "asnumpy", "(", ")", "\n", "labels", "=", "param", ".", "locals", "[", "'eval_batch'", "]", ".", "label", "[", "0", "]", "[", "0", ":", "self", ".", "batch_size", "-", "pad", "]", ".", "asnumpy", "(", ")", "\n", "outputs", "=", "[", "out", "[", "0", ":", "out", ".", "shape", "[", "0", "]", "-", "pad", "]", "for", "out", "in", "param", ".", "locals", "[", "'self'", "]", ".", "get_outputs", "(", ")", "]", "\n", "# 'det' variable can be in different positions depending with train/test symbols", "\n", "if", "len", "(", "outputs", ")", ">", "1", ":", "\n", "            ", "det_idx", "=", "[", "idx", "for", "idx", ",", "f", "in", "enumerate", "(", "param", ".", "locals", "[", "'self'", "]", ".", "output_names", ")", "if", "f", ".", "startswith", "(", "'det'", ")", "]", "[", "0", "]", "\n", "detections", "=", "outputs", "[", "det_idx", "]", ".", "asnumpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "detections", "=", "outputs", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "", "for", "i", "in", "range", "(", "detections", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "det", "=", "detections", "[", "i", ",", ":", ",", ":", "]", "\n", "det", "=", "det", "[", "np", ".", "where", "(", "det", "[", ":", ",", "0", "]", ">=", "0", ")", "[", "0", "]", "]", "\n", "label", "=", "labels", "[", "i", ",", ":", ",", ":", "]", "\n", "label", "=", "label", "[", "np", ".", "where", "(", "label", "[", ":", ",", "0", "]", ">=", "0", ")", "[", "0", "]", "]", "\n", "img", "=", "images", "[", "i", ",", ":", ",", ":", ",", ":", "]", "+", "np", ".", "reshape", "(", "self", ".", "mean_pixels", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "img", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "img", "[", ":", ",", ":", ",", "(", "0", ",", "1", ",", "2", ")", "]", "=", "img", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "self", ".", "_visualize_detection_and_labels", "(", "img", ",", "det", ",", "label", "=", "label", ",", "\n", "classes", "=", "self", ".", "class_names", ",", "thresh", "=", "self", ".", "det_thresh", ",", "\n", "plt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "images_path", ",", "'image'", "+", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "# save to tensorboard", "\n", "img_det_graph", "=", "scipy", ".", "misc", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "images_path", ",", "'image'", "+", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "self", ".", "summary_writer", ".", "add_image", "(", "'image'", "+", "str", "(", "i", ")", "+", "'.png'", ",", "img_det_graph", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.LogDetectionsCallback._visualize_detection_and_labels": [[152, 220], ["matplotlib.figure", "matplotlib.imshow", "dict", "range", "range", "matplotlib.savefig", "matplotlib.close", "int", "int", "int", "int", "int", "int", "matplotlib.Rectangle", "matplotlib.gca().add_patch", "str", "matplotlib.gca().text", "int", "int", "int", "int", "matplotlib.Rectangle", "matplotlib.gca().add_patch", "str", "matplotlib.gca().text", "matplotlib.gca", "len", "matplotlib.gca", "dict", "random.random", "random.random", "random.random", "matplotlib.gca", "len", "matplotlib.gca", "dict"], "methods", ["None"], ["", "def", "_visualize_detection_and_labels", "(", "self", ",", "img", ",", "dets", ",", "label", ",", "classes", "=", "[", "]", ",", "thresh", "=", "None", ",", "plt_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        visualize detections in one image\n\n        Parameters:\n        ----------\n        img : numpy.array\n            image, in bgr format\n        dets : numpy.array\n            ssd detections, numpy.array([[id, score, x1, y1, x2, y2]...])\n            each row is one object\n        classes : tuple or list of str\n            class names\n        thresh : float\n            score threshold\n        \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "colors", "=", "dict", "(", ")", "\n", "# Visualize ground-truth boxes", "\n", "gt_color", "=", "(", "1.0", ",", "0.0", ",", "0.0", ")", "\n", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cls_id", "=", "int", "(", "label", "[", "i", ",", "0", "]", ")", "\n", "if", "cls_id", ">=", "0", ":", "\n", "                ", "xmin", "=", "int", "(", "label", "[", "i", ",", "1", "]", "*", "width", ")", "\n", "ymin", "=", "int", "(", "label", "[", "i", ",", "2", "]", "*", "height", ")", "\n", "xmax", "=", "int", "(", "label", "[", "i", ",", "3", "]", "*", "width", ")", "\n", "ymax", "=", "int", "(", "label", "[", "i", ",", "4", "]", "*", "height", ")", "\n", "rect", "=", "plt", ".", "Rectangle", "(", "(", "xmin", ",", "ymin", ")", ",", "xmax", "-", "xmin", ",", "\n", "ymax", "-", "ymin", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "gt_color", ",", "\n", "linewidth", "=", "2", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect", ")", "\n", "class_name", "=", "str", "(", "cls_id", ")", "\n", "if", "classes", "and", "len", "(", "classes", ")", ">", "cls_id", ":", "\n", "                    ", "class_name", "=", "classes", "[", "cls_id", "]", "\n", "", "plt", ".", "gca", "(", ")", ".", "text", "(", "xmin", ",", "ymin", "-", "2", ",", "\n", "'gt'", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "gt_color", ",", "alpha", "=", "0.5", ")", ",", "\n", "fontsize", "=", "8", ",", "color", "=", "'white'", ")", "\n", "# visualize predictions", "\n", "", "", "for", "i", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cls_id", "=", "int", "(", "dets", "[", "i", ",", "0", "]", ")", "\n", "if", "cls_id", ">=", "0", ":", "\n", "                ", "score", "=", "dets", "[", "i", ",", "1", "]", "\n", "if", "score", ">", "thresh", ":", "\n", "                    ", "if", "cls_id", "not", "in", "colors", ":", "\n", "                        ", "colors", "[", "cls_id", "]", "=", "(", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", ")", "\n", "", "xmin", "=", "int", "(", "dets", "[", "i", ",", "2", "]", "*", "width", ")", "\n", "ymin", "=", "int", "(", "dets", "[", "i", ",", "3", "]", "*", "height", ")", "\n", "xmax", "=", "int", "(", "dets", "[", "i", ",", "4", "]", "*", "width", ")", "\n", "ymax", "=", "int", "(", "dets", "[", "i", ",", "5", "]", "*", "height", ")", "\n", "rect", "=", "plt", ".", "Rectangle", "(", "(", "xmin", ",", "ymin", ")", ",", "xmax", "-", "xmin", ",", "\n", "ymax", "-", "ymin", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "colors", "[", "cls_id", "]", ",", "\n", "linewidth", "=", "3.5", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect", ")", "\n", "class_name", "=", "str", "(", "cls_id", ")", "\n", "if", "classes", "and", "len", "(", "classes", ")", ">", "cls_id", ":", "\n", "                        ", "class_name", "=", "classes", "[", "cls_id", "]", "\n", "", "plt", ".", "gca", "(", ")", ".", "text", "(", "xmin", ",", "ymin", "-", "2", ",", "\n", "'{:s} {:.3f}'", ".", "format", "(", "class_name", ",", "score", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "colors", "[", "cls_id", "]", ",", "alpha", "=", "0.5", ")", ",", "\n", "fontsize", "=", "8", ",", "color", "=", "'white'", ")", "\n", "", "", "", "plt", ".", "savefig", "(", "plt_path", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.LogDistributionsCallback.__init__": [[236, 244], ["SummaryWriter", "logging.error"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "logging_dir", ",", "prefix", "=", "None", ",", "layers_list", "=", "None", ")", ":", "\n", "        ", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "layers_list", "=", "layers_list", "\n", "try", ":", "\n", "            ", "from", "tensorboard", "import", "SummaryWriter", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "logging_dir", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "logging", ".", "error", "(", "'You can install tensorboard via `pip install tensorboard`.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.custom_callbacks.LogDistributionsCallback.__call__": [[245, 256], ["param.locals[].iteritems", "custom_callbacks.LogDistributionsCallback.summary_writer.add_histogram", "value.asnumpy().flatten", "value.asnumpy"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "param", ")", ":", "\n", "        ", "\"\"\"Callback to log layers' distributions in TensorBoard.\"\"\"", "\n", "if", "param", ".", "locals", "is", "None", ":", "\n", "            ", "return", "\n", "", "for", "name", ",", "value", "in", "param", ".", "locals", "[", "'arg_params'", "]", ".", "iteritems", "(", ")", ":", "\n", "# TODO - implement layer to choose from..", "\n", "            ", "if", "self", ".", "layers_list", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "prefix", "is", "not", "None", ":", "\n", "                ", "name", "=", "'%s-%s'", "%", "(", "self", ".", "prefix", ",", "name", ")", "\n", "", "self", ".", "summary_writer", ".", "add_histogram", "(", "name", ",", "value", ".", "asnumpy", "(", ")", ".", "flatten", "(", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_voc.parse_voc_rec": [[13, 33], ["ET.parse", "ET.parse.findall", "dict", "int", "obj.find", "objects.append", "obj.find", "int", "int", "int", "int", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["", "def", "parse_voc_rec", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    parse pascal voc record into a dictionary\n    :param filename: xml file path\n    :return: list of dict\n    \"\"\"", "\n", "import", "xml", ".", "etree", ".", "ElementTree", "as", "ET", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objects", "=", "[", "]", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "'object'", ")", ":", "\n", "        ", "obj_dict", "=", "dict", "(", ")", "\n", "obj_dict", "[", "'name'", "]", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "obj_dict", "[", "'difficult'", "]", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "obj_dict", "[", "'bbox'", "]", "=", "[", "int", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "]", "\n", "objects", ".", "append", "(", "obj_dict", ")", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_voc.voc_ap": [[35, 67], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    average precision calculations\n    [precision integrated to recall]\n    :param rec: recall\n    :param prec: precision\n    :param use_07_metric: 2007 metric is 11-recall-point based AP\n    :return: average precision\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "+=", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# append sentinel values at both ends", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute precision integration ladder", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# look for recall value changes", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# sum (\\delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_voc.voc_eval": [[69, 180], ["os.path.join", "detpath.format", "numpy.array", "numpy.array", "numpy.argsort", "numpy.sort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "eval_voc.voc_ap", "os.path.isdir", "os.mkdir", "open", "f.readlines", "x.strip", "os.path.isfile", "enumerate", "print", "numpy.array", "numpy.array().astype", "open", "f.readlines", "x.strip().split", "bbox[].astype", "r[].astype", "float", "numpy.maximum", "eval_voc.parse_voc_rec", "open", "pickle.dump", "open", "pickle.load", "len", "sum", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "annopath.format", "print", "numpy.array", "x.strip", "float", "numpy.finfo", "len"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_voc.voc_ap", "home.repos.pwc.inspect_result.homles11_IGCV3.evaluate.eval_voc.parse_voc_rec"], ["", "def", "voc_eval", "(", "detpath", ",", "annopath", ",", "imageset_file", ",", "classname", ",", "cache_dir", ",", "ovthresh", "=", "0.5", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    pascal voc evaluation\n    :param detpath: detection results detpath.format(classname)\n    :param annopath: annotations annopath.format(classname)\n    :param imageset_file: text file containing list of images\n    :param classname: category name\n    :param cache_dir: caching annotations\n    :param ovthresh: overlap threshold\n    :param use_07_metric: whether to use voc07's 11 point ap computation\n    :return: rec, prec, ap\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cache_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "cache_dir", ")", "\n", "", "cache_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "'annotations.pkl'", ")", "\n", "with", "open", "(", "imageset_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "image_filenames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "\n", "# load annotations from cache", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "        ", "recs", "=", "{", "}", "\n", "for", "ind", ",", "image_filename", "in", "enumerate", "(", "image_filenames", ")", ":", "\n", "            ", "recs", "[", "image_filename", "]", "=", "parse_voc_rec", "(", "annopath", ".", "format", "(", "image_filename", ")", ")", "\n", "if", "ind", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'reading annotations for {:d}/{:d}'", ".", "format", "(", "ind", "+", "1", ",", "len", "(", "image_filenames", ")", ")", ")", "\n", "", "", "print", "(", "'saving annotations cache to {:s}'", ".", "format", "(", "cache_file", ")", ")", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "recs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "recs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# extract objects in :param classname:", "\n", "", "", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "image_filename", "in", "image_filenames", ":", "\n", "        ", "objects", "=", "[", "obj", "for", "obj", "in", "recs", "[", "image_filename", "]", "if", "obj", "[", "'name'", "]", "==", "classname", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "objects", "]", ")", "\n", "difficult", "=", "np", ".", "array", "(", "[", "x", "[", "'difficult'", "]", "for", "x", "in", "objects", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "objects", ")", "# stand for detected", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "image_filename", "]", "=", "{", "'bbox'", ":", "bbox", ",", "\n", "'difficult'", ":", "difficult", ",", "\n", "'det'", ":", "det", "}", "\n", "\n", "# read detections", "\n", "", "detfile", "=", "detpath", ".", "format", "(", "classname", ")", "\n", "with", "open", "(", "detfile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "# sort by confidence", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "bbox", "=", "bbox", "[", "sorted_inds", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_inds", "]", "\n", "\n", "# go down detections and mark true positives and false positives", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "r", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "bbox", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "bbgt", "=", "r", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "bbgt", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "            ", "ixmin", "=", "np", ".", "maximum", "(", "bbgt", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "bbgt", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "bbgt", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "bbgt", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "bbgt", "[", ":", ",", "2", "]", "-", "bbgt", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "bbgt", "[", ":", ",", "3", "]", "-", "bbgt", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "r", "[", "'difficult'", "]", "[", "jmax", "]", ":", "\n", "                ", "if", "not", "r", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "                    ", "tp", "[", "d", "]", "=", "1.", "\n", "r", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid division by zero in case first detection matches a difficult ground ruth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.vgg16_reduced.get_symbol": [[3, 87], ["mxnet.symbol.Variable", "mxnet.symbol.Variable", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Flatten", "mxnet.symbol.SoftmaxOutput"], "function", ["None"], ["def", "get_symbol", "(", "num_classes", "=", "1000", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    VGG 16 layers network\n    This is a modified version, with fc6/fc7 layers replaced by conv layers\n    And the network is slightly smaller than original VGG 16 network\n    \"\"\"", "\n", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "label", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"label\"", ")", "\n", "\n", "# group 1", "\n", "conv1_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "64", ",", "name", "=", "\"conv1_1\"", ")", "\n", "relu1_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv1_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu1_1\"", ")", "\n", "conv1_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu1_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "64", ",", "name", "=", "\"conv1_2\"", ")", "\n", "relu1_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv1_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu1_2\"", ")", "\n", "pool1", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu1_2", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool1\"", ")", "\n", "# group 2", "\n", "conv2_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "128", ",", "name", "=", "\"conv2_1\"", ")", "\n", "relu2_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv2_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu2_1\"", ")", "\n", "conv2_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu2_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "128", ",", "name", "=", "\"conv2_2\"", ")", "\n", "relu2_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv2_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu2_2\"", ")", "\n", "pool2", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu2_2", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool2\"", ")", "\n", "# group 3", "\n", "conv3_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_1\"", ")", "\n", "relu3_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_1\"", ")", "\n", "conv3_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu3_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_2\"", ")", "\n", "relu3_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_2\"", ")", "\n", "conv3_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu3_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_3\"", ")", "\n", "relu3_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_3\"", ")", "\n", "pool3", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu3_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pooling_convention", "=", "\"full\"", ",", "name", "=", "\"pool3\"", ")", "\n", "# group 4", "\n", "conv4_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_1\"", ")", "\n", "relu4_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_1\"", ")", "\n", "conv4_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu4_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_2\"", ")", "\n", "relu4_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_2\"", ")", "\n", "conv4_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu4_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_3\"", ")", "\n", "relu4_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_3\"", ")", "\n", "pool4", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu4_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool4\"", ")", "\n", "# group 5", "\n", "conv5_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool4", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_1\"", ")", "\n", "relu5_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_1\"", ")", "\n", "conv5_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu5_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_2\"", ")", "\n", "relu5_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_2\"", ")", "\n", "conv5_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu5_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_3\"", ")", "\n", "relu5_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_3\"", ")", "\n", "pool5", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu5_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"pool5\"", ")", "\n", "# group 6", "\n", "conv6", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool5", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "6", ",", "6", ")", ",", "dilate", "=", "(", "6", ",", "6", ")", ",", "\n", "num_filter", "=", "1024", ",", "name", "=", "\"fc6\"", ")", "\n", "relu6", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv6", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu6\"", ")", "\n", "# drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name=\"drop6\")", "\n", "# group 7", "\n", "conv7", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu6", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_filter", "=", "1024", ",", "name", "=", "\"fc7\"", ")", "\n", "relu7", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv7", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu7\"", ")", "\n", "# drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name=\"drop7\")", "\n", "\n", "gpool", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "relu7", ",", "pool_type", "=", "'avg'", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "\n", "global_pool", "=", "True", ",", "name", "=", "'global_pool'", ")", "\n", "conv8", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "gpool", ",", "num_filter", "=", "num_classes", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "name", "=", "'fc8'", ")", "\n", "flat", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "conv8", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "flat", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.mobilenet.Conv": [[20, 25], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation"], "function", ["None"], ["def", "Conv", "(", "data", ",", "num_filter", "=", "1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_group", "=", "1", ",", "name", "=", "None", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "kernel", ",", "num_group", "=", "num_group", ",", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "no_bias", "=", "True", ",", "name", "=", "'%s%s_conv2d'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "bn", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "'%s%s_batchnorm'", "%", "(", "name", ",", "suffix", ")", ",", "fix_gamma", "=", "True", ")", "\n", "act", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn", ",", "act_type", "=", "'relu'", ",", "name", "=", "'%s%s_relu'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.mobilenet.get_symbol": [[26, 63], ["mxnet.symbol.Variable", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "get_symbol", "(", "num_classes", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"data\"", ")", "# 224", "\n", "conv_1", "=", "Conv", "(", "data", ",", "num_filter", "=", "32", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv_1\"", ")", "# 224/112", "\n", "conv_2_dw", "=", "Conv", "(", "conv_1", ",", "num_group", "=", "32", ",", "num_filter", "=", "32", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_2_dw\"", ")", "# 112/112", "\n", "conv_2", "=", "Conv", "(", "conv_2_dw", ",", "num_filter", "=", "64", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_2\"", ")", "# 112/112", "\n", "conv_3_dw", "=", "Conv", "(", "conv_2", ",", "num_group", "=", "64", ",", "num_filter", "=", "64", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv_3_dw\"", ")", "# 112/56", "\n", "conv_3", "=", "Conv", "(", "conv_3_dw", ",", "num_filter", "=", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_3\"", ")", "# 56/56", "\n", "conv_4_dw", "=", "Conv", "(", "conv_3", ",", "num_group", "=", "128", ",", "num_filter", "=", "128", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_4_dw\"", ")", "# 56/56", "\n", "conv_4", "=", "Conv", "(", "conv_4_dw", ",", "num_filter", "=", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_4\"", ")", "# 56/56", "\n", "conv_5_dw", "=", "Conv", "(", "conv_4", ",", "num_group", "=", "128", ",", "num_filter", "=", "128", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv_5_dw\"", ")", "# 56/28", "\n", "conv_5", "=", "Conv", "(", "conv_5_dw", ",", "num_filter", "=", "256", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_5\"", ")", "# 28/28", "\n", "conv_6_dw", "=", "Conv", "(", "conv_5", ",", "num_group", "=", "256", ",", "num_filter", "=", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_6_dw\"", ")", "# 28/28", "\n", "conv_6", "=", "Conv", "(", "conv_6_dw", ",", "num_filter", "=", "256", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_6\"", ")", "# 28/28", "\n", "conv_7_dw", "=", "Conv", "(", "conv_6", ",", "num_group", "=", "256", ",", "num_filter", "=", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv_7_dw\"", ")", "# 28/14", "\n", "conv_7", "=", "Conv", "(", "conv_7_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_7\"", ")", "# 14/14", "\n", "\n", "conv_8_dw", "=", "Conv", "(", "conv_7", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_8_dw\"", ")", "# 14/14", "\n", "conv_8", "=", "Conv", "(", "conv_8_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_8\"", ")", "# 14/14", "\n", "conv_9_dw", "=", "Conv", "(", "conv_8", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_9_dw\"", ")", "# 14/14", "\n", "conv_9", "=", "Conv", "(", "conv_9_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_9\"", ")", "# 14/14", "\n", "conv_10_dw", "=", "Conv", "(", "conv_9", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_10_dw\"", ")", "# 14/14", "\n", "conv_10", "=", "Conv", "(", "conv_10_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_10\"", ")", "# 14/14", "\n", "conv_11_dw", "=", "Conv", "(", "conv_10", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_11_dw\"", ")", "# 14/14", "\n", "conv_11", "=", "Conv", "(", "conv_11_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_11\"", ")", "# 14/14", "\n", "conv_12_dw", "=", "Conv", "(", "conv_11", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_12_dw\"", ")", "# 14/14", "\n", "conv_12", "=", "Conv", "(", "conv_12_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_12\"", ")", "# 14/14", "\n", "\n", "conv_13_dw", "=", "Conv", "(", "conv_12", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv_13_dw\"", ")", "# 14/7", "\n", "conv_13", "=", "Conv", "(", "conv_13_dw", ",", "num_filter", "=", "1024", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_13\"", ")", "# 7/7", "\n", "conv_14_dw", "=", "Conv", "(", "conv_13", ",", "num_group", "=", "1024", ",", "num_filter", "=", "1024", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_14_dw\"", ")", "# 7/7", "\n", "conv_14", "=", "Conv", "(", "conv_14_dw", ",", "num_filter", "=", "1024", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_14\"", ")", "# 7/7", "\n", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "conv_14", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"avg\"", ",", "name", "=", "\"global_pool\"", ",", "global_pool", "=", "True", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool", ",", "name", "=", "\"flatten\"", ")", "\n", "fc", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc'", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.Relu6": [[4, 6], ["mxnet.sym.minimum", "mxnet.sym.maximum"], "function", ["None"], ["def", "Relu6", "(", "data", ")", ":", "\n", "    ", "return", "mx", ".", "sym", ".", "minimum", "(", "mx", ".", "sym", ".", "maximum", "(", "data", ",", "0", ")", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.channel_shuffle": [[7, 12], ["mxnet.sym.reshape", "mxnet.sym.swapaxes", "mxnet.sym.reshape"], "function", ["None"], ["", "def", "channel_shuffle", "(", "data", ",", "groups", ")", ":", "\n", "\t", "data", "=", "mx", ".", "sym", ".", "reshape", "(", "data", ",", "shape", "=", "(", "0", ",", "-", "4", ",", "groups", ",", "-", "1", ",", "-", "2", ")", ")", "\n", "data", "=", "mx", ".", "sym", ".", "swapaxes", "(", "data", ",", "1", ",", "2", ")", "\n", "data", "=", "mx", ".", "sym", ".", "reshape", "(", "data", ",", "shape", "=", "(", "0", ",", "-", "3", ",", "-", "2", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.conv_act_layer": [[13, 51], ["mxnet.symbol.Convolution", "common.channel_shuffle", "mxnet.symbol.BatchNorm", "common.Relu6"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.channel_shuffle", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.Relu6"], ["", "def", "conv_act_layer", "(", "from_layer", ",", "name", ",", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    wrapper for a small Convolution group\n\n    Parameters:\n    ----------\n    from_layer : mx.symbol\n        continue on which layer\n    name : str\n        base name of the new layers\n    num_filter : int\n        how many filters to use in Convolution layer\n    kernel : tuple (int, int)\n        kernel size (h, w)\n    pad : tuple (int, int)\n        padding size (h, w)\n    stride : tuple (int, int)\n        stride size (h, w)\n    act_type : str\n        activation type, can be relu...\n    use_batchnorm : bool\n        whether to use batch normalization\n\n    Returns:\n    ----------\n    (conv, relu) mx.Symbols\n    \"\"\"", "\n", "# bias = mx.symbol.Variable(name=\"{}_conv_bias\".format(name),", "\n", "#     init=mx.init.Constant(0.0), attr={'__lr_mult__': '2.0'})", "\n", "conv", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "from_layer", ",", "kernel", "=", "kernel", ",", "pad", "=", "pad", ",", "stride", "=", "stride", ",", "num_filter", "=", "num_filter", ",", "name", "=", "\"{}_conv\"", ".", "format", "(", "name", ")", ",", "no_bias", "=", "True", ",", "num_group", "=", "2", ")", "\n", "conv", "=", "channel_shuffle", "(", "conv", ",", "2", ")", "\n", "if", "use_batchnorm", ":", "\n", "        ", "conv", "=", "mx", ".", "symbol", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "\"{}_bn\"", ".", "format", "(", "name", ")", ",", "momentum", "=", "0.9", ",", "eps", "=", "0.001", ",", "cudnn_off", "=", "True", ")", "\n", "", "if", "act_type", "==", "\"relu\"", ":", "\n", "        ", "conv", "=", "Relu6", "(", "data", "=", "conv", ")", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.conv_act_layer_dw": [[52, 90], ["mxnet.symbol.Convolution", "mxnet.symbol.BatchNorm", "mxnet.symbol.Convolution", "common.channel_shuffle", "mxnet.symbol.BatchNorm", "common.Relu6"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.channel_shuffle", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.Relu6"], ["", "def", "conv_act_layer_dw", "(", "from_layer", ",", "name", ",", "kin", "=", "0", ",", "kout", "=", "0", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    wrapper for a small Convolution group\n\n    Parameters:\n    ----------\n    from_layer : mx.symbol\n        continue on which layer\n    name : str\n        base name of the new layers\n    num_filter : int\n        how many filters to use in Convolution layer\n    kernel : tuple (int, int)\n        kernel size (h, w)\n    pad : tuple (int, int)\n        padding size (h, w)\n    stride : tuple (int, int)\n        stride size (h, w)\n    act_type : str\n        activation type, can be relu...\n    use_batchnorm : bool\n        whether to use batch normalization\n\n    Returns:\n    ----------\n    (conv, relu) mx.Symbols\n    \"\"\"", "\n", "conv", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "from_layer", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "num_filter", "=", "kin", ",", "name", "=", "\"{}_conv_dw\"", ".", "format", "(", "name", ")", ",", "no_bias", "=", "True", ",", "num_group", "=", "kin", ")", "\n", "conv", "=", "mx", ".", "symbol", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "\"{}_bn1\"", ".", "format", "(", "name", ")", ",", "momentum", "=", "0.9", ",", "eps", "=", "0.001", ",", "cudnn_off", "=", "True", ")", "\n", "conv", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "conv", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "kout", ",", "name", "=", "\"{}_conv_1x1\"", ".", "format", "(", "name", ")", ",", "no_bias", "=", "True", ",", "num_group", "=", "2", ")", "\n", "conv", "=", "channel_shuffle", "(", "conv", ",", "kout", "/", "2", ")", "\n", "if", "use_batchnorm", ":", "\n", "        ", "conv", "=", "mx", ".", "symbol", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "\"{}_bn\"", ".", "format", "(", "name", ")", ",", "momentum", "=", "0.9", ",", "eps", "=", "0.001", ",", "cudnn_off", "=", "True", ")", "\n", "conv", "=", "Relu6", "(", "data", "=", "conv", ")", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.multi_layer_feature": [[130, 187], ["body.get_internals", "enumerate", "len", "isinstance", "len", "len", "len", "len", "zip", "from_layer.strip", "len", "common.Relu6", "layers.append", "max", "common.conv_act_layer", "common.conv_act_layer_dw", "layers.append", "from_layers[].strip", "len", "from_layer.strip"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.Relu6", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.conv_act_layer", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.conv_act_layer_dw"], ["", "def", "multi_layer_feature", "(", "body", ",", "from_layers", ",", "num_filters", ",", "strides", ",", "pads", ",", "min_filter", "=", "16", ")", ":", "\n", "    ", "\"\"\"Wrapper function to extract features from base network, attaching extra\n    layers and SSD specific layers\n\n    Parameters\n    ----------\n    from_layers : list of str\n        feature extraction layers, use '' for add extra layers\n        For example:\n        from_layers = ['relu4_3', 'fc7', '', '', '', '']\n        which means extract feature from relu4_3 and fc7, adding 4 extra layers\n        on top of fc7\n    num_filters : list of int\n        number of filters for extra layers, you can use -1 for extracted features,\n        however, if normalization and scale is applied, the number of filter for\n        that layer must be provided.\n        For example:\n        num_filters = [512, -1, 512, 256, 256, 256]\n    strides : list of int\n        strides for the 3x3 convolution appended, -1 can be used for extracted\n        feature layers\n    pads : list of int\n        paddings for the 3x3 convolution, -1 can be used for extracted layers\n    min_filter : int\n        minimum number of filters used in 1x1 convolution\n\n    Returns\n    -------\n    list of mx.Symbols\n\n    \"\"\"", "\n", "# arguments check", "\n", "assert", "len", "(", "from_layers", ")", ">", "0", "\n", "assert", "isinstance", "(", "from_layers", "[", "0", "]", ",", "str", ")", "and", "len", "(", "from_layers", "[", "0", "]", ".", "strip", "(", ")", ")", ">", "0", "\n", "assert", "len", "(", "from_layers", ")", "==", "len", "(", "num_filters", ")", "==", "len", "(", "strides", ")", "==", "len", "(", "pads", ")", "\n", "\n", "internals", "=", "body", ".", "get_internals", "(", ")", "\n", "layers", "=", "[", "]", "\n", "for", "k", ",", "params", "in", "enumerate", "(", "zip", "(", "from_layers", ",", "num_filters", ",", "strides", ",", "pads", ")", ")", ":", "\n", "        ", "from_layer", ",", "num_filter", ",", "s", ",", "p", "=", "params", "\n", "if", "from_layer", ".", "strip", "(", ")", ":", "\n", "# extract from base network", "\n", "            ", "layer", "=", "internals", "[", "from_layer", ".", "strip", "(", ")", "+", "'_output'", "]", "\n", "layer", "=", "Relu6", "(", "data", "=", "layer", ")", "\n", "layers", ".", "append", "(", "layer", ")", "\n", "", "else", ":", "\n", "# attach from last feature layer", "\n", "            ", "assert", "len", "(", "layers", ")", ">", "0", "\n", "assert", "num_filter", ">", "0", "\n", "layer", "=", "layers", "[", "-", "1", "]", "\n", "num_1x1", "=", "max", "(", "min_filter", ",", "num_filter", "//", "2", ")", "\n", "conv_1x1", "=", "conv_act_layer", "(", "layer", ",", "'multi_feat_%d_conv_1x1'", "%", "(", "k", ")", ",", "\n", "num_1x1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "'relu'", ",", "use_batchnorm", "=", "True", ")", "\n", "conv_3x3", "=", "conv_act_layer_dw", "(", "conv_1x1", ",", "'multi_feat_%d_conv_3x3_dw'", "%", "(", "k", ")", ",", "\n", "kin", "=", "num_1x1", ",", "kout", "=", "num_filter", ",", "stride", "=", "(", "s", ",", "s", ")", ",", "act_type", "=", "'relu'", ",", "use_batchnorm", "=", "True", ")", "\n", "layers", ".", "append", "(", "conv_3x3", ")", "\n", "", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.multibox_layer": [[188, 360], ["enumerate", "mxnet.symbol.Concat", "mxnet.symbol.Concat", "mxnet.symbol.Reshape", "mxnet.symbol.transpose", "mxnet.symbol.Concat", "mxnet.symbol.Reshape", "len", "len", "isinstance", "len", "len", "len", "numpy.linspace", "zip", "len", "len", "isinstance", "len", "len", "sum", "len", "zip", "mxnet.symbol.Convolution", "mxnet.sym.BatchNorm", "common.Relu6", "mxnet.symbol.Convolution", "mxnet.sym.BatchNorm", "mxnet.symbol.transpose", "mxnet.symbol.Flatten", "loc_pred_layers.append", "mxnet.symbol.Convolution", "mxnet.sym.BatchNorm", "common.Relu6", "mxnet.symbol.Convolution", "mxnet.sym.BatchNorm", "mxnet.symbol.transpose", "mxnet.symbol.Flatten", "cls_pred_layers.append", "mxnet.contrib.symbol.MultiBoxPrior", "mxnet.symbol.Flatten", "anchor_layers.append", "len", "len", "isinstance", "np.linspace.tolist", "np.linspace.tolist", "len", "len", "len", "mxnet.symbol.L2Normalization", "mxnet.symbol.Variable", "mxnet.symbol.broadcast_mul", "mxnet.symbol.Variable", "mxnet.symbol.Variable", "mxnet.symbol.Convolution", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "len", "len", "len", "len", "len", "len", "len", "len", "mxnet.init.Constant", "mxnet.init.Constant", "mxnet.init.Constant", "num_channels.pop", "str", "str"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.Relu6", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.Relu6"], ["", "def", "multibox_layer", "(", "from_layers", ",", "num_classes", ",", "sizes", "=", "[", ".2", ",", ".95", "]", ",", "\n", "ratios", "=", "[", "1", "]", ",", "normalization", "=", "-", "1", ",", "num_channels", "=", "[", "]", ",", "\n", "clip", "=", "False", ",", "interm_layer", "=", "0", ",", "steps", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"\n    the basic aggregation module for SSD detection. Takes in multiple layers,\n    generate multiple object detection targets by customized layers\n\n    Parameters:\n    ----------\n    from_layers : list of mx.symbol\n        generate multibox detection from layers\n    num_classes : int\n        number of classes excluding background, will automatically handle\n        background in this function\n    sizes : list or list of list\n        [min_size, max_size] for all layers or [[], [], []...] for specific layers\n    ratios : list or list of list\n        [ratio1, ratio2...] for all layers or [[], [], ...] for specific layers\n    normalizations : int or list of int\n        use normalizations value for all layers or [...] for specific layers,\n        -1 indicate no normalizations and scales\n    num_channels : list of int\n        number of input layer channels, used when normalization is enabled, the\n        length of list should equals to number of normalization layers\n    clip : bool\n        whether to clip out-of-image boxes\n    interm_layer : int\n        if > 0, will add a intermediate Convolution layer\n    steps : list\n        specify steps for each MultiBoxPrior layer, leave empty, it will calculate\n        according to layer dimensions\n\n    Returns:\n    ----------\n    list of outputs, as [loc_preds, cls_preds, anchor_boxes]\n    loc_preds : localization regression prediction\n    cls_preds : classification prediction\n    anchor_boxes : generated anchor boxes\n    \"\"\"", "\n", "assert", "len", "(", "from_layers", ")", ">", "0", ",", "\"from_layers must not be empty list\"", "\n", "assert", "num_classes", ">", "0", ",", "\"num_classes {} must be larger than 0\"", ".", "format", "(", "num_classes", ")", "\n", "\n", "assert", "len", "(", "ratios", ")", ">", "0", ",", "\"aspect ratios must not be empty list\"", "\n", "if", "not", "isinstance", "(", "ratios", "[", "0", "]", ",", "list", ")", ":", "\n", "# provided only one ratio list, broadcast to all from_layers", "\n", "        ", "ratios", "=", "[", "ratios", "]", "*", "len", "(", "from_layers", ")", "\n", "", "assert", "len", "(", "ratios", ")", "==", "len", "(", "from_layers", ")", ",", "\"ratios and from_layers must have same length\"", "\n", "\n", "assert", "len", "(", "sizes", ")", ">", "0", ",", "\"sizes must not be empty list\"", "\n", "if", "len", "(", "sizes", ")", "==", "2", "and", "not", "isinstance", "(", "sizes", "[", "0", "]", ",", "list", ")", ":", "\n", "# provided size range, we need to compute the sizes for each layer", "\n", "         ", "assert", "sizes", "[", "0", "]", ">", "0", "and", "sizes", "[", "0", "]", "<", "1", "\n", "assert", "sizes", "[", "1", "]", ">", "0", "and", "sizes", "[", "1", "]", "<", "1", "and", "sizes", "[", "1", "]", ">", "sizes", "[", "0", "]", "\n", "tmp", "=", "np", ".", "linspace", "(", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", ",", "num", "=", "(", "len", "(", "from_layers", ")", "-", "1", ")", ")", "\n", "min_sizes", "=", "[", "start_offset", "]", "+", "tmp", ".", "tolist", "(", ")", "\n", "max_sizes", "=", "tmp", ".", "tolist", "(", ")", "+", "[", "tmp", "[", "-", "1", "]", "+", "start_offset", "]", "\n", "sizes", "=", "zip", "(", "min_sizes", ",", "max_sizes", ")", "\n", "", "assert", "len", "(", "sizes", ")", "==", "len", "(", "from_layers", ")", ",", "\"sizes and from_layers must have same length\"", "\n", "\n", "if", "not", "isinstance", "(", "normalization", ",", "list", ")", ":", "\n", "        ", "normalization", "=", "[", "normalization", "]", "*", "len", "(", "from_layers", ")", "\n", "", "assert", "len", "(", "normalization", ")", "==", "len", "(", "from_layers", ")", "\n", "\n", "assert", "sum", "(", "x", ">", "0", "for", "x", "in", "normalization", ")", "<=", "len", "(", "num_channels", ")", ",", "\"must provide number of channels for each normalized layer\"", "\n", "\n", "if", "steps", ":", "\n", "        ", "assert", "len", "(", "steps", ")", "==", "len", "(", "from_layers", ")", ",", "\"provide steps for all layers or leave empty\"", "\n", "\n", "", "loc_pred_layers", "=", "[", "]", "\n", "cls_pred_layers", "=", "[", "]", "\n", "anchor_layers", "=", "[", "]", "\n", "num_classes", "+=", "1", "# always use background as label 0", "\n", "\n", "for", "k", ",", "params", "in", "enumerate", "(", "zip", "(", "from_layers", ",", "num_channels", ")", ")", ":", "\n", "        ", "from_layer", ",", "num_filter", "=", "params", "\n", "from_name", "=", "from_layer", ".", "name", "\n", "# normalize", "\n", "if", "normalization", "[", "k", "]", ">", "0", ":", "\n", "            ", "from_layer", "=", "mx", ".", "symbol", ".", "L2Normalization", "(", "data", "=", "from_layer", ",", "mode", "=", "\"channel\"", ",", "name", "=", "\"{}_norm\"", ".", "format", "(", "from_name", ")", ")", "\n", "scale", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"{}_scale\"", ".", "format", "(", "from_name", ")", ",", "\n", "shape", "=", "(", "1", ",", "num_channels", ".", "pop", "(", "0", ")", ",", "1", ",", "1", ")", ",", "\n", "init", "=", "mx", ".", "init", ".", "Constant", "(", "normalization", "[", "k", "]", ")", ",", "\n", "attr", "=", "{", "'__wd_mult__'", ":", "'0.1'", "}", ")", "\n", "from_layer", "=", "mx", ".", "symbol", ".", "broadcast_mul", "(", "lhs", "=", "scale", ",", "rhs", "=", "from_layer", ")", "\n", "", "if", "interm_layer", ">", "0", ":", "\n", "            ", "bias1", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"{}_inter_conv_bias1\"", ".", "format", "(", "from_name", ")", ",", "\n", "init", "=", "mx", ".", "init", ".", "Constant", "(", "0.0", ")", ",", "attr", "=", "{", "'__lr_mult__'", ":", "'2.0'", "}", ")", "\n", "bias2", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"{}_inter_conv_bias2\"", ".", "format", "(", "from_name", ")", ",", "\n", "init", "=", "mx", ".", "init", ".", "Constant", "(", "0.0", ")", ",", "attr", "=", "{", "'__lr_mult__'", ":", "'2.0'", "}", ")", "\n", "from_layer", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "from_layer", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "bias1", ",", "num_filter", "=", "num_filter", ",", "name", "=", "\"{}_inter_conv_dw\"", ".", "format", "(", "from_name", ")", ",", "num_group", "=", "num_filter", ")", "\n", "from_layer", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "from_layer", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "bias", "=", "bias2", ",", "num_filter", "=", "interm_layer", ",", "name", "=", "\"{}_inter_conv\"", ".", "format", "(", "from_name", ")", ",", "no_bias", "=", "True", ")", "\n", "from_layer", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "from_layer", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"{}_inter_relu\"", ".", "format", "(", "from_name", ")", ")", "\n", "\n", "# estimate number of anchors per location", "\n", "# here I follow the original version in caffe", "\n", "# TODO: better way to shape the anchors??", "\n", "", "size", "=", "sizes", "[", "k", "]", "\n", "assert", "len", "(", "size", ")", ">", "0", ",", "\"must provide at least one size\"", "\n", "size_str", "=", "\"(\"", "+", "\",\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "size", "]", ")", "+", "\")\"", "\n", "ratio", "=", "ratios", "[", "k", "]", "\n", "assert", "len", "(", "ratio", ")", ">", "0", ",", "\"must provide at least one ratio\"", "\n", "ratio_str", "=", "\"(\"", "+", "\",\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "ratio", "]", ")", "+", "\")\"", "\n", "num_anchors", "=", "len", "(", "size", ")", "-", "1", "+", "len", "(", "ratio", ")", "\n", "\n", "# create location prediction layer", "\n", "num_loc_pred", "=", "num_anchors", "*", "4", "\n", "\n", "# bias = mx.symbol.Variable(name=\"{}_loc_pred_conv_bias\".format(from_name),", "\n", "#                                init=mx.init.Constant(0.0), attr={'__lr_mult__': '2.0'})", "\n", "loc_pred", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "from_layer", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "num_filter", ",", "name", "=", "\"{}_loc_pred_conv_dw\"", ".", "format", "(", "from_name", ")", ",", "num_group", "=", "num_filter", ",", "\n", "no_bias", "=", "True", ")", "\n", "loc_pred", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "loc_pred", ",", "name", "=", "\"{}_loc_pred_bn1\"", ".", "format", "(", "from_name", ")", ",", "momentum", "=", "0.9", ",", "eps", "=", "0.001", ",", "\n", "cudnn_off", "=", "True", ")", "\n", "loc_pred", "=", "Relu6", "(", "loc_pred", ")", "\n", "loc_pred", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "loc_pred", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_filter", "=", "num_loc_pred", ",", "name", "=", "\"{}_loc_pred_conv_pw\"", ".", "format", "(", "from_name", ")", ")", "\n", "loc_pred", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "loc_pred", ",", "name", "=", "\"{}_loc_pred_bn2\"", ".", "format", "(", "from_name", ")", ",", "momentum", "=", "0.9", ",", "eps", "=", "0.001", ",", "\n", "cudnn_off", "=", "True", ")", "\n", "loc_pred", "=", "mx", ".", "symbol", ".", "transpose", "(", "loc_pred", ",", "axes", "=", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "loc_pred", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "loc_pred", ")", "\n", "loc_pred_layers", ".", "append", "(", "loc_pred", ")", "\n", "\n", "# create class prediction layer", "\n", "num_cls_pred", "=", "num_anchors", "*", "num_classes", "\n", "cls_pred", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "from_layer", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "num_filter", ",", "name", "=", "\"{}_cls_pred_conv_dw\"", ".", "format", "(", "from_name", ")", ",", "num_group", "=", "num_filter", ",", "\n", "no_bias", "=", "True", ")", "# ,num_group=num_filter if interm_layer<=0 else interm_layer", "\n", "cls_pred", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "cls_pred", ",", "name", "=", "\"{}_cls_pred_bn1\"", ".", "format", "(", "from_name", ")", ",", "momentum", "=", "0.9", ",", "eps", "=", "0.001", ",", "\n", "cudnn_off", "=", "True", ")", "\n", "cls_pred", "=", "Relu6", "(", "cls_pred", ")", "\n", "cls_pred", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "cls_pred", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_filter", "=", "num_cls_pred", ",", "name", "=", "\"{}_cls_pred_conv_pw\"", ".", "format", "(", "from_name", ")", ")", "\n", "cls_pred", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "cls_pred", ",", "name", "=", "\"{}_cls_pred_bn2\"", ".", "format", "(", "from_name", ")", ",", "momentum", "=", "0.9", ",", "eps", "=", "0.001", ",", "\n", "cudnn_off", "=", "True", ")", "\n", "cls_pred", "=", "mx", ".", "symbol", ".", "transpose", "(", "cls_pred", ",", "axes", "=", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "cls_pred", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "cls_pred", ")", "\n", "cls_pred_layers", ".", "append", "(", "cls_pred", ")", "\n", "# create anchor generation layer", "\n", "if", "steps", ":", "\n", "            ", "step", "=", "(", "steps", "[", "k", "]", ",", "steps", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "            ", "step", "=", "'(-1.0, -1.0)'", "\n", "", "anchors", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxPrior", "(", "from_layer", ",", "sizes", "=", "size_str", ",", "ratios", "=", "ratio_str", ",", "clip", "=", "clip", ",", "name", "=", "\"{}_anchors\"", ".", "format", "(", "from_name", ")", ",", "steps", "=", "step", ")", "\n", "anchors", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "anchors", ")", "\n", "anchor_layers", ".", "append", "(", "anchors", ")", "\n", "\n", "", "loc_preds", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "loc_pred_layers", ",", "num_args", "=", "len", "(", "loc_pred_layers", ")", ",", "dim", "=", "1", ",", "name", "=", "\"multibox_loc_pred\"", ")", "\n", "cls_preds", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "cls_pred_layers", ",", "num_args", "=", "len", "(", "cls_pred_layers", ")", ",", "dim", "=", "1", ")", "\n", "cls_preds", "=", "mx", ".", "symbol", ".", "Reshape", "(", "data", "=", "cls_preds", ",", "shape", "=", "(", "0", ",", "-", "1", ",", "num_classes", ")", ")", "\n", "cls_preds", "=", "mx", ".", "symbol", ".", "transpose", "(", "cls_preds", ",", "axes", "=", "(", "0", ",", "2", ",", "1", ")", ",", "name", "=", "\"multibox_cls_pred\"", ")", "\n", "anchor_boxes", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "anchor_layers", ",", "num_args", "=", "len", "(", "anchor_layers", ")", ",", "dim", "=", "1", ")", "\n", "anchor_boxes", "=", "mx", ".", "symbol", ".", "Reshape", "(", "data", "=", "anchor_boxes", ",", "shape", "=", "(", "0", ",", "-", "1", ",", "4", ")", ",", "name", "=", "\"multibox_anchors\"", ")", "\n", "return", "[", "loc_preds", ",", "cls_preds", ",", "anchor_boxes", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.resnet.residual_unit": [[11, 69], ["mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.Convolution", "mx.sym.Convolution._set_attr", "mxnet.sym.Convolution", "mx.sym.Convolution._set_attr", "int", "int"], "function", ["None"], ["def", "residual_unit", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", "=", "True", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "256", ",", "memonger", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return ResNet Unit symbol for building ResNet\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tupe\n        Stride used in convolution\n    dim_match : Boolen\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "if", "bottle_neck", ":", "\n", "# the same as https://github.com/facebook/fb.resnet.torch#notes, a bit difference with origin paper", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn2", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act2", ",", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn3'", ")", "\n", "act3", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn3", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu3'", ")", "\n", "conv3", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act3", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv3'", ")", "\n", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "conv3", "+", "shortcut", "\n", "", "else", ":", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn2", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act2", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "conv2", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.resnet.resnet": [[70, 117], ["len", "mxnet.sym.Variable", "mxnet.sym.identity", "mxnet.sym.BatchNorm", "range", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "mxnet.sym.Convolution", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.symbol.Pooling", "resnet.residual_unit", "range", "resnet.residual_unit"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit"], ["", "", "def", "resnet", "(", "units", ",", "num_stages", ",", "filter_list", ",", "num_classes", ",", "image_shape", ",", "bottle_neck", "=", "True", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "256", ",", "memonger", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return ResNet symbol of\n    Parameters\n    ----------\n    units : list\n        Number of units in each stage\n    num_stages : int\n        Number of stage\n    filter_list : list\n        Channel size of each stage\n    num_classes : int\n        Ouput size of symbol\n    dataset : str\n        Dataset type, only cifar10 and imagenet supports\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "num_unit", "=", "len", "(", "units", ")", "\n", "assert", "(", "num_unit", "==", "num_stages", ")", "\n", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "'data'", ")", "\n", "data", "=", "mx", ".", "sym", ".", "identity", "(", "data", "=", "data", ",", "name", "=", "'id'", ")", "\n", "data", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "True", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn_data'", ")", "\n", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "if", "height", "<=", "32", ":", "# such as cifar10", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "filter_list", "[", "0", "]", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "", "else", ":", "# often expected to be 224 such as imagenet", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "filter_list", "[", "0", "]", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "body", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu0'", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "        ", "body", "=", "residual_unit", "(", "body", ",", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", "if", "i", "==", "0", "else", "2", ",", "1", "if", "i", "==", "0", "else", "2", ")", ",", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "1", ")", ",", "bottle_neck", "=", "bottle_neck", ",", "workspace", "=", "workspace", ",", "\n", "memonger", "=", "memonger", ")", "\n", "for", "j", "in", "range", "(", "units", "[", "i", "]", "-", "1", ")", ":", "\n", "            ", "body", "=", "residual_unit", "(", "body", ",", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", ",", "1", ")", ",", "True", ",", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "j", "+", "2", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "workspace", "=", "workspace", ",", "memonger", "=", "memonger", ")", "\n", "", "", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn1'", ")", "\n", "relu1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu1'", ")", "\n", "# Although kernel is not used here when global_pool=True, we should put one", "\n", "pool1", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "relu1", ",", "global_pool", "=", "True", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'pool1'", ")", "\n", "flat", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "pool1", ")", "\n", "fc1", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flat", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc1'", ")", "\n", "return", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.resnet.get_symbol": [[118, 170], ["resnet.resnet", "int", "image_shape.split", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet-v1.resnet"], ["", "def", "get_symbol", "(", "num_classes", ",", "num_layers", ",", "image_shape", ",", "conv_workspace", "=", "256", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/train_resnet.py\n    Original author Wei Wu\n    \"\"\"", "\n", "image_shape", "=", "[", "int", "(", "l", ")", "for", "l", "in", "image_shape", ".", "split", "(", "','", ")", "]", "\n", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "if", "height", "<=", "28", ":", "\n", "        ", "num_stages", "=", "3", "\n", "if", "(", "num_layers", "-", "2", ")", "%", "9", "==", "0", "and", "num_layers", ">=", "164", ":", "\n", "            ", "per_unit", "=", "[", "(", "num_layers", "-", "2", ")", "//", "9", "]", "\n", "filter_list", "=", "[", "16", ",", "64", ",", "128", ",", "256", "]", "\n", "bottle_neck", "=", "True", "\n", "", "elif", "(", "num_layers", "-", "2", ")", "%", "6", "==", "0", "and", "num_layers", "<", "164", ":", "\n", "            ", "per_unit", "=", "[", "(", "num_layers", "-", "2", ")", "//", "6", "]", "\n", "filter_list", "=", "[", "16", ",", "16", ",", "32", ",", "64", "]", "\n", "bottle_neck", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "format", "(", "num_layers", ")", ")", "\n", "", "units", "=", "per_unit", "*", "num_stages", "\n", "", "else", ":", "\n", "        ", "if", "num_layers", ">=", "50", ":", "\n", "            ", "filter_list", "=", "[", "64", ",", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "bottle_neck", "=", "True", "\n", "", "else", ":", "\n", "            ", "filter_list", "=", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "bottle_neck", "=", "False", "\n", "", "num_stages", "=", "4", "\n", "if", "num_layers", "==", "18", ":", "\n", "            ", "units", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "num_layers", "==", "34", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "50", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "101", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "            ", "units", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "200", ":", "\n", "            ", "units", "=", "[", "3", ",", "24", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "269", ":", "\n", "            ", "units", "=", "[", "3", ",", "30", ",", "48", ",", "8", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "", "return", "resnet", "(", "units", "=", "units", ",", "\n", "num_stages", "=", "num_stages", ",", "\n", "filter_list", "=", "filter_list", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "image_shape", "=", "image_shape", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "workspace", "=", "conv_workspace", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.densenet.BasicBlock": [[19, 64], ["mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.symbol.Dropout", "mxnet.symbol.Dropout", "mxnet.symbol.Dropout", "int", "int", "int"], "function", ["None"], ["def", "BasicBlock", "(", "data", ",", "growth_rate", ",", "stride", ",", "name", ",", "bottle_neck", "=", "True", ",", "drop_out", "=", "0.0", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "512", ")", ":", "\n", "    ", "\"\"\"Return BaiscBlock Unit symbol for building DenseBlock\n    Parameters\n    ----------\n    data : str\n        Input data\n    growth_rate : int\n        Number of output channels\n    stride : tupe\n        Stride used in convolution\n    drop_out : float\n        Probability of an element to be zeroed. Default = 0.2\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "\n", "if", "bottle_neck", ":", "\n", "# the same as https://github.com/facebook/fb.resnet.torch#notes, a bit difference with origin paper", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "int", "(", "growth_rate", "*", "4", ")", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "if", "drop_out", ">", "0", ":", "\n", "            ", "conv1", "=", "mx", ".", "symbol", ".", "Dropout", "(", "data", "=", "conv1", ",", "p", "=", "drop_out", ",", "name", "=", "name", "+", "'_dp1'", ")", "\n", "", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn2", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act2", ",", "num_filter", "=", "int", "(", "growth_rate", ")", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "if", "drop_out", ">", "0", ":", "\n", "            ", "conv2", "=", "mx", ".", "symbol", ".", "Dropout", "(", "data", "=", "conv2", ",", "p", "=", "drop_out", ",", "name", "=", "name", "+", "'_dp2'", ")", "\n", "#return mx.symbol.Concat(data, conv2, name=name + '_concat0')", "\n", "", "return", "conv2", "\n", "", "else", ":", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "int", "(", "growth_rate", ")", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "if", "drop_out", ">", "0", ":", "\n", "            ", "conv1", "=", "mx", ".", "symbol", ".", "Dropout", "(", "data", "=", "conv1", ",", "p", "=", "drop_out", ",", "name", "=", "name", "+", "'_dp1'", ")", "\n", "#return mx.symbol.Concat(data, conv1, name=name + '_concat0')", "\n", "", "return", "conv1", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.densenet.DenseBlock": [[65, 89], ["range", "densenet.BasicBlock", "mxnet.symbol.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.densenet.BasicBlock"], ["", "", "def", "DenseBlock", "(", "units_num", ",", "data", ",", "growth_rate", ",", "name", ",", "bottle_neck", "=", "True", ",", "drop_out", "=", "0.0", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "512", ")", ":", "\n", "    ", "\"\"\"Return DenseBlock Unit symbol for building DenseNet\n    Parameters\n    ----------\n    units_num : int\n        the number of BasicBlock in each DenseBlock\n    data : str\n        Input data\n    growth_rate : int\n        Number of output channels\n    drop_out : float\n        Probability of an element to be zeroed. Default = 0.2\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "\n", "for", "i", "in", "range", "(", "units_num", ")", ":", "\n", "        ", "Block", "=", "BasicBlock", "(", "data", ",", "growth_rate", "=", "growth_rate", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "name", "+", "'_unit%d'", "%", "(", "i", "+", "1", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "drop_out", "=", "drop_out", ",", "\n", "bn_mom", "=", "bn_mom", ",", "workspace", "=", "workspace", ")", "\n", "data", "=", "mx", ".", "symbol", ".", "Concat", "(", "data", ",", "Block", ",", "name", "=", "name", "+", "'_concat%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.densenet.TransitionBlock": [[90, 117], ["mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.symbol.Pooling", "mxnet.symbol.Dropout"], "function", ["None"], ["", "def", "TransitionBlock", "(", "num_stage", ",", "data", ",", "num_filter", ",", "stride", ",", "name", ",", "drop_out", "=", "0.0", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "512", ")", ":", "\n", "    ", "\"\"\"Return TransitionBlock Unit symbol for building DenseNet\n    Parameters\n    ----------\n    num_stage : int\n        Number of stage\n    data : str\n        Input data\n    num : int\n        Number of output channels\n    stride : tupe\n        Stride used in convolution\n    name : str\n        Base name of the operators\n    drop_out : float\n        Probability of an element to be zeroed. Default = 0.2\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "if", "drop_out", ">", "0", ":", "\n", "        ", "conv1", "=", "mx", ".", "symbol", ".", "Dropout", "(", "data", "=", "conv1", ",", "p", "=", "drop_out", ",", "name", "=", "name", "+", "'_dp1'", ")", "\n", "", "return", "mx", ".", "symbol", ".", "Pooling", "(", "conv1", ",", "global_pool", "=", "False", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "name", "+", "'_pool%d'", "%", "(", "num_stage", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.densenet.get_symbol": [[118, 177], ["len", "mxnet.sym.Variable", "mxnet.sym.BatchNorm", "range", "densenet.DenseBlock", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.symbol.Pooling", "densenet.DenseBlock", "int", "densenet.TransitionBlock", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.symbol.Pooling", "math.floor", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.symbol.Pooling", "ValueError"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.densenet.DenseBlock", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.densenet.DenseBlock", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.densenet.TransitionBlock"], ["", "def", "get_symbol", "(", "units", ",", "num_stage", ",", "growth_rate", ",", "num_classes", ",", "data_type", ",", "reduction", "=", "0.5", ",", "drop_out", "=", "0.", ",", "bottle_neck", "=", "True", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "512", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Return DenseNet symbol of imagenet\n    Parameters\n    ----------\n    units : list\n        Number of units in each stage\n    num_stage : int\n        Number of stage\n    growth_rate : int\n        Number of output channels\n    num_classes : int\n        Ouput size of symbol\n    data_type : str\n        the type of dataset\n    reduction : float\n        Compression ratio. Default = 0.5\n    drop_out : float\n        Probability of an element to be zeroed. Default = 0.2\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "num_unit", "=", "len", "(", "units", ")", "\n", "assert", "(", "num_unit", "==", "num_stage", ")", "\n", "init_channels", "=", "2", "*", "growth_rate", "\n", "n_channels", "=", "init_channels", "\n", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "'data'", ")", "\n", "data", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "True", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn_data'", ")", "\n", "if", "data_type", "==", "'imagenet'", ":", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "growth_rate", "*", "2", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "body", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu0'", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "", "elif", "data_type", "==", "'vggface'", ":", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "growth_rate", "*", "2", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "body", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu0'", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "", "elif", "data_type", "==", "'msface'", ":", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "growth_rate", "*", "2", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "body", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu0'", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"do not support {} yet\"", ".", "format", "(", "data_type", ")", ")", "\n", "", "for", "i", "in", "range", "(", "num_stage", "-", "1", ")", ":", "\n", "        ", "body", "=", "DenseBlock", "(", "units", "[", "i", "]", ",", "body", ",", "growth_rate", "=", "growth_rate", ",", "name", "=", "'DBstage%d'", "%", "(", "i", "+", "1", ")", ",", "bottle_neck", "=", "bottle_neck", ",", "drop_out", "=", "drop_out", ",", "bn_mom", "=", "bn_mom", ",", "workspace", "=", "workspace", ")", "\n", "n_channels", "+=", "units", "[", "i", "]", "*", "growth_rate", "\n", "n_channels", "=", "int", "(", "math", ".", "floor", "(", "n_channels", "*", "reduction", ")", ")", "\n", "body", "=", "TransitionBlock", "(", "i", ",", "body", ",", "n_channels", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'TBstage%d'", "%", "(", "i", "+", "1", ")", ",", "drop_out", "=", "drop_out", ",", "bn_mom", "=", "bn_mom", ",", "workspace", "=", "workspace", ")", "\n", "", "body", "=", "DenseBlock", "(", "units", "[", "num_stage", "-", "1", "]", ",", "body", ",", "growth_rate", "=", "growth_rate", ",", "name", "=", "'DBstage%d'", "%", "(", "num_stage", ")", ",", "bottle_neck", "=", "bottle_neck", ",", "drop_out", "=", "drop_out", ",", "bn_mom", "=", "bn_mom", ",", "workspace", "=", "workspace", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn1'", ")", "\n", "relu1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu1'", ")", "\n", "pool1", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "relu1", ",", "global_pool", "=", "True", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'pool1'", ")", "\n", "flat", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "pool1", ")", "\n", "fc1", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flat", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc1'", ")", "\n", "return", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.legacy_vgg16_ssd_512.get_symbol_train": [[6, 162], ["mxnet.symbol.Variable", "mxnet.symbol.Variable", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.multibox_layer", "mxnet.contrib.symbol.MultiBoxTarget", "mxnet.symbol.SoftmaxOutput", "mxnet.symbol.smooth_l1", "mxnet.symbol.MakeLoss", "mxnet.symbol.MakeLoss", "mxnet.contrib.symbol.MultiBoxDetection", "mxnet.symbol.MakeLoss", "mxnet.symbol.Group"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.multibox_layer"], ["def", "get_symbol_train", "(", "num_classes", "=", "20", ",", "nms_thresh", "=", "0.5", ",", "force_suppress", "=", "False", ",", "nms_topk", "=", "400", ")", ":", "\n", "    ", "\"\"\"\n    Single-shot multi-box detection with VGG 16 layers ConvNet\n    This is a modified version, with fc6/fc7 layers replaced by conv layers\n    And the network is slightly smaller than original VGG 16 network\n    This is a training network with losses\n\n    Parameters:\n    ----------\n    num_classes: int\n        number of object classes not including background\n    nms_thresh : float\n        non-maximum suppression threshold\n    force_suppress : boolean\n        whether suppress different class objects\n    nms_topk : int\n        apply NMS to top K detections\n\n    Returns:\n    ----------\n    mx.Symbol\n    \"\"\"", "\n", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "label", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"label\"", ")", "\n", "\n", "# group 1", "\n", "conv1_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "64", ",", "name", "=", "\"conv1_1\"", ")", "\n", "relu1_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv1_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu1_1\"", ")", "\n", "conv1_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu1_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "64", ",", "name", "=", "\"conv1_2\"", ")", "\n", "relu1_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv1_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu1_2\"", ")", "\n", "pool1", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu1_2", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool1\"", ")", "\n", "# group 2", "\n", "conv2_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "128", ",", "name", "=", "\"conv2_1\"", ")", "\n", "relu2_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv2_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu2_1\"", ")", "\n", "conv2_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu2_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "128", ",", "name", "=", "\"conv2_2\"", ")", "\n", "relu2_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv2_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu2_2\"", ")", "\n", "pool2", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu2_2", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool2\"", ")", "\n", "# group 3", "\n", "conv3_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_1\"", ")", "\n", "relu3_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_1\"", ")", "\n", "conv3_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu3_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_2\"", ")", "\n", "relu3_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_2\"", ")", "\n", "conv3_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu3_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_3\"", ")", "\n", "relu3_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_3\"", ")", "\n", "pool3", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu3_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pooling_convention", "=", "\"full\"", ",", "name", "=", "\"pool3\"", ")", "\n", "# group 4", "\n", "conv4_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_1\"", ")", "\n", "relu4_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_1\"", ")", "\n", "conv4_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu4_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_2\"", ")", "\n", "relu4_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_2\"", ")", "\n", "conv4_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu4_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_3\"", ")", "\n", "relu4_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_3\"", ")", "\n", "pool4", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu4_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool4\"", ")", "\n", "# group 5", "\n", "conv5_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool4", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_1\"", ")", "\n", "relu5_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_1\"", ")", "\n", "conv5_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu5_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_2\"", ")", "\n", "relu5_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_2\"", ")", "\n", "conv5_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu5_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_3\"", ")", "\n", "relu5_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_3\"", ")", "\n", "pool5", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu5_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"pool5\"", ")", "\n", "# group 6", "\n", "conv6", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool5", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "6", ",", "6", ")", ",", "dilate", "=", "(", "6", ",", "6", ")", ",", "\n", "num_filter", "=", "1024", ",", "name", "=", "\"conv6\"", ")", "\n", "relu6", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv6", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu6\"", ")", "\n", "# drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name=\"drop6\")", "\n", "# group 7", "\n", "conv7", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu6", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_filter", "=", "1024", ",", "name", "=", "\"conv7\"", ")", "\n", "relu7", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv7", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu7\"", ")", "\n", "# drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name=\"drop7\")", "\n", "\n", "### ssd extra layers ###", "\n", "conv8_1", ",", "relu8_1", "=", "legacy_conv_act_layer", "(", "relu7", ",", "\"8_1\"", ",", "256", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv8_2", ",", "relu8_2", "=", "legacy_conv_act_layer", "(", "relu8_1", ",", "\"8_2\"", ",", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv9_1", ",", "relu9_1", "=", "legacy_conv_act_layer", "(", "relu8_2", ",", "\"9_1\"", ",", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv9_2", ",", "relu9_2", "=", "legacy_conv_act_layer", "(", "relu9_1", ",", "\"9_2\"", ",", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv10_1", ",", "relu10_1", "=", "legacy_conv_act_layer", "(", "relu9_2", ",", "\"10_1\"", ",", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv10_2", ",", "relu10_2", "=", "legacy_conv_act_layer", "(", "relu10_1", ",", "\"10_2\"", ",", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv11_1", ",", "relu11_1", "=", "legacy_conv_act_layer", "(", "relu10_2", ",", "\"11_1\"", ",", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv11_2", ",", "relu11_2", "=", "legacy_conv_act_layer", "(", "relu11_1", ",", "\"11_2\"", ",", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv12_1", ",", "relu12_1", "=", "legacy_conv_act_layer", "(", "relu11_2", ",", "\"12_1\"", ",", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv12_2", ",", "relu12_2", "=", "legacy_conv_act_layer", "(", "relu12_1", ",", "\"12_2\"", ",", "256", ",", "kernel", "=", "(", "4", ",", "4", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "\n", "# specific parameters for VGG16 network", "\n", "from_layers", "=", "[", "relu4_3", ",", "relu7", ",", "relu8_2", ",", "relu9_2", ",", "relu10_2", ",", "relu11_2", ",", "relu12_2", "]", "\n", "sizes", "=", "[", "[", ".07", ",", ".1025", "]", ",", "[", ".15", ",", ".2121", "]", ",", "[", ".3", ",", ".3674", "]", ",", "[", ".45", ",", ".5196", "]", ",", "[", ".6", ",", ".6708", "]", ",", "[", ".75", ",", ".8216", "]", ",", "[", ".9", ",", ".9721", "]", "]", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "[", "20", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "steps", "=", "[", "x", "/", "512.0", "for", "x", "in", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", "]", "]", "\n", "num_channels", "=", "[", "512", "]", "\n", "\n", "loc_preds", ",", "cls_preds", ",", "anchor_boxes", "=", "multibox_layer", "(", "from_layers", ",", "num_classes", ",", "sizes", "=", "sizes", ",", "ratios", "=", "ratios", ",", "normalization", "=", "normalizations", ",", "num_channels", "=", "num_channels", ",", "clip", "=", "False", ",", "interm_layer", "=", "0", ",", "steps", "=", "steps", ")", "\n", "\n", "tmp", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxTarget", "(", "\n", "*", "[", "anchor_boxes", ",", "label", ",", "cls_preds", "]", ",", "overlap_threshold", "=", ".5", ",", "ignore_label", "=", "-", "1", ",", "negative_mining_ratio", "=", "3", ",", "minimum_negative_samples", "=", "0", ",", "negative_mining_thresh", "=", ".5", ",", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "\n", "name", "=", "\"multibox_target\"", ")", "\n", "loc_target", "=", "tmp", "[", "0", "]", "\n", "loc_target_mask", "=", "tmp", "[", "1", "]", "\n", "cls_target", "=", "tmp", "[", "2", "]", "\n", "\n", "cls_prob", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "cls_preds", ",", "label", "=", "cls_target", ",", "ignore_label", "=", "-", "1", ",", "use_ignore", "=", "True", ",", "grad_scale", "=", "1.", ",", "multi_output", "=", "True", ",", "normalization", "=", "'valid'", ",", "name", "=", "\"cls_prob\"", ")", "\n", "loc_loss_", "=", "mx", ".", "symbol", ".", "smooth_l1", "(", "name", "=", "\"loc_loss_\"", ",", "data", "=", "loc_target_mask", "*", "(", "loc_preds", "-", "loc_target", ")", ",", "scalar", "=", "1.0", ")", "\n", "loc_loss", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "loc_loss_", ",", "grad_scale", "=", "1.", ",", "normalization", "=", "'valid'", ",", "name", "=", "\"loc_loss\"", ")", "\n", "\n", "# monitoring training status", "\n", "cls_label", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "data", "=", "cls_target", ",", "grad_scale", "=", "0", ",", "name", "=", "\"cls_label\"", ")", "\n", "det", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxDetection", "(", "*", "[", "cls_prob", ",", "loc_preds", ",", "anchor_boxes", "]", ",", "name", "=", "\"detection\"", ",", "nms_threshold", "=", "nms_thresh", ",", "force_suppress", "=", "force_suppress", ",", "\n", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "nms_topk", "=", "nms_topk", ")", "\n", "det", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "data", "=", "det", ",", "grad_scale", "=", "0", ",", "name", "=", "\"det_out\"", ")", "\n", "\n", "# group output", "\n", "out", "=", "mx", ".", "symbol", ".", "Group", "(", "[", "cls_prob", ",", "loc_loss", ",", "cls_label", ",", "det", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.legacy_vgg16_ssd_512.get_symbol": [[163, 196], ["legacy_vgg16_ssd_512.get_symbol_train", "mxnet.symbol.SoftmaxActivation", "mxnet.contrib.symbol.MultiBoxDetection", "get_symbol_train.get_internals", "get_symbol_train.get_internals", "get_symbol_train.get_internals"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.get_symbol_train"], ["", "def", "get_symbol", "(", "num_classes", "=", "20", ",", "nms_thresh", "=", "0.5", ",", "force_suppress", "=", "False", ",", "nms_topk", "=", "400", ")", ":", "\n", "    ", "\"\"\"\n    Single-shot multi-box detection with VGG 16 layers ConvNet\n    This is a modified version, with fc6/fc7 layers replaced by conv layers\n    And the network is slightly smaller than original VGG 16 network\n    This is the detection network\n\n    Parameters:\n    ----------\n    num_classes: int\n        number of object classes not including background\n    nms_thresh : float\n        threshold of overlap for non-maximum suppression\n    force_suppress : boolean\n        whether suppress different class objects\n    nms_topk : int\n        apply NMS to top K detections\n\n    Returns:\n    ----------\n    mx.Symbol\n    \"\"\"", "\n", "net", "=", "get_symbol_train", "(", "num_classes", ")", "\n", "cls_preds", "=", "net", ".", "get_internals", "(", ")", "[", "\"multibox_cls_pred_output\"", "]", "\n", "loc_preds", "=", "net", ".", "get_internals", "(", ")", "[", "\"multibox_loc_pred_output\"", "]", "\n", "anchor_boxes", "=", "net", ".", "get_internals", "(", ")", "[", "\"multibox_anchors_output\"", "]", "\n", "\n", "cls_prob", "=", "mx", ".", "symbol", ".", "SoftmaxActivation", "(", "data", "=", "cls_preds", ",", "mode", "=", "'channel'", ",", "name", "=", "'cls_prob'", ")", "\n", "out", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxDetection", "(", "*", "[", "cls_prob", ",", "loc_preds", ",", "anchor_boxes", "]", ",", "name", "=", "\"detection\"", ",", "nms_threshold", "=", "nms_thresh", ",", "force_suppress", "=", "force_suppress", ",", "\n", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "nms_topk", "=", "nms_topk", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales": [[6, 49], ["int", "int", "range", "range", "min_sizes.append", "max_sizes.append", "scales.append", "float", "float", "numpy.single", "numpy.sqrt"], "function", ["None"], ["def", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "6", ")", ":", "\n", "    ", "\"\"\" Following the ssd arxiv paper, regarding the calculation of scales & ratios\n\n    Parameters\n    ----------\n    min_scale : float\n    max_scales: float\n    num_layers: int\n        number of layers that will have a detection head\n    anchor_ratios: list\n    first_layer_ratios: list\n\n    return\n    ------\n    sizes : list\n        list of scale sizes per feature layer\n    ratios : list\n        list of anchor_ratios per feature layer\n    \"\"\"", "\n", "\n", "# this code follows the original implementation of wei liu", "\n", "# for more, look at ssd/score_ssd_pascal.py:310 in the original caffe implementation", "\n", "min_ratio", "=", "int", "(", "min_scale", "*", "100", ")", "\n", "max_ratio", "=", "int", "(", "max_scale", "*", "100", ")", "\n", "# step = int(np.ceil((max_ratio - min_ratio) / (num_layers - 1)))", "\n", "min_sizes", "=", "[", "]", "\n", "max_sizes", "=", "[", "]", "\n", "# for ratio in xrange(min_ratio, max_ratio, step):", "\n", "#     min_sizes.append(ratio / 100.)", "\n", "#     max_sizes.append((ratio + step) / 100.)", "\n", "for", "i", "in", "range", "(", "1", ",", "num_layers", "+", "1", ")", ":", "\n", "        ", "min_sizes", ".", "append", "(", "float", "(", "'%.2f'", "%", "(", "min_scale", "+", "(", "(", "max_scale", "-", "min_scale", ")", "/", "(", "num_layers", "-", "1", ")", ")", "*", "(", "i", "-", "1", ")", ")", ")", ")", "\n", "max_sizes", ".", "append", "(", "float", "(", "'%.2f'", "%", "(", "min_scale", "+", "(", "(", "max_scale", "-", "min_scale", ")", "/", "(", "num_layers", "-", "1", ")", ")", "*", "(", "i", ")", ")", ")", ")", "\n", "# min_sizes = [int(100*min_scale / 2.0) / 100.0] + min_sizes", "\n", "# max_sizes = [min_scale] + max_sizes", "\n", "# min_sizes = [int(100*min_scale / 2.0) / 100.0] + min_sizes", "\n", "# max_sizes = [min_scale] + max_sizes", "\n", "\n", "# convert it back to this implementation's notation:", "\n", "", "scales", "=", "[", "]", "\n", "for", "layer_idx", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "scales", ".", "append", "(", "[", "min_sizes", "[", "layer_idx", "]", ",", "np", ".", "single", "(", "np", ".", "sqrt", "(", "min_sizes", "[", "layer_idx", "]", "*", "max_sizes", "[", "layer_idx", "]", ")", ")", "]", ")", "\n", "", "return", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_config": [[50, 210], ["locals", "symbol_factory.get_scales", "symbol_factory.get_scales", "logging.warn", "symbol_factory.get_scales", "locals", "symbol_factory.get_scales", "locals", "len", "len", "len", "locals", "len", "symbol_factory.get_scales", "symbol_factory.get_scales", "symbol_factory.get_scales", "locals", "symbol_factory.get_scales", "locals", "len", "len", "len", "symbol_factory.get_scales", "locals", "len", "symbol_factory.get_scales", "locals", "len", "symbol_factory.get_scales", "locals", "NotImplementedError", "len", "len"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_scales"], ["", "def", "get_config", "(", "network", ",", "data_shape", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Configuration factory for various networks\n\n    Parameters\n    ----------\n    network : str\n        base network name, such as vgg_reduced, inceptionv3, resnet...\n    data_shape : int\n        input data dimension\n    kwargs : dict\n        extra arguments\n    \"\"\"", "\n", "if", "network", "==", "'vgg16_reduced'", ":", "\n", "        ", "if", "data_shape", ">=", "448", ":", "\n", "            ", "from_layers", "=", "[", "'relu4_3'", ",", "'relu7'", ",", "''", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "512", ",", "-", "1", ",", "512", ",", "256", ",", "256", ",", "256", ",", "256", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.15", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "[", "20", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "steps", "=", "[", "]", "if", "data_shape", "!=", "512", "else", "[", "x", "/", "512.0", "for", "x", "in", "\n", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", "]", "]", "\n", "", "else", ":", "\n", "            ", "from_layers", "=", "[", "'relu4_3'", ",", "'relu7'", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "512", ",", "-", "1", ",", "512", ",", "256", ",", "256", ",", "256", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "1", ",", "1", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "[", "20", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "steps", "=", "[", "]", "if", "data_shape", "!=", "300", "else", "[", "x", "/", "300.0", "for", "x", "in", "[", "8", ",", "16", ",", "32", ",", "64", ",", "100", ",", "300", "]", "]", "\n", "", "if", "not", "(", "data_shape", "==", "300", "or", "data_shape", "==", "512", ")", ":", "\n", "            ", "logging", ".", "warn", "(", "'data_shape %d was not tested, use with caucious.'", "%", "data_shape", ")", "\n", "", "return", "locals", "(", ")", "\n", "", "elif", "network", "==", "'mobilenetv2'", ":", "\n", "        ", "image_shape", "=", "'3,224,224'", "# resnet require it as shape check", "\n", "network", "=", "'mnv2'", "\n", "from_layers", "=", "[", "'blk13_nl'", ",", "'finalconv'", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "-", "1", ",", "-", "1", ",", "512", ",", "256", ",", "256", ",", "128", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "return", "locals", "(", ")", "\n", "", "elif", "network", "==", "'igcv3'", ":", "\n", "        ", "network", "=", "'igcv3_wide'", "\n", "from_layers", "=", "[", "'blk13nl_1_bn'", ",", "'final_conv_nl_1_bn'", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "1152", ",", "1280", ",", "512", ",", "256", ",", "256", ",", "128", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "return", "locals", "(", ")", "\n", "", "elif", "network", "==", "'inceptionv3'", ":", "\n", "        ", "if", "data_shape", ">=", "448", ":", "\n", "            ", "from_layers", "=", "[", "'ch_concat_mixed_7_chconcat'", ",", "'ch_concat_mixed_10_chconcat'", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "-", "1", ",", "-", "1", ",", "512", ",", "256", ",", "256", ",", "128", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "from_layers", "=", "[", "'ch_concat_mixed_2_chconcat'", ",", "'ch_concat_mixed_7_chconcat'", ",", "'ch_concat_mixed_10_chconcat'", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "256", ",", "256", ",", "128", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "", "return", "locals", "(", ")", "\n", "", "elif", "network", "==", "'resnet50'", ":", "\n", "        ", "num_layers", "=", "50", "\n", "image_shape", "=", "'3,224,224'", "# resnet require it as shape check", "\n", "network", "=", "'resnet'", "\n", "from_layers", "=", "[", "'_plus12'", ",", "'_plus15'", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "-", "1", ",", "-", "1", ",", "512", ",", "256", ",", "256", ",", "128", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "return", "locals", "(", ")", "\n", "", "elif", "network", "==", "'resnet101'", ":", "\n", "        ", "num_layers", "=", "101", "\n", "image_shape", "=", "'3,224,224'", "\n", "network", "=", "'resnet'", "\n", "from_layers", "=", "[", "'_plus29'", ",", "'_plus32'", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "-", "1", ",", "-", "1", ",", "512", ",", "256", ",", "256", ",", "128", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "return", "locals", "(", ")", "\n", "", "elif", "network", "==", "'mobilenet'", ":", "\n", "        ", "from_layers", "=", "[", "'conv_12_relu'", ",", "'conv_14_relu'", ",", "''", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "-", "1", ",", "-", "1", ",", "512", ",", "256", ",", "256", ",", "256", ",", "256", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.15", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "return", "locals", "(", ")", "\n", "", "elif", "network", "==", "'densenet121'", ":", "\n", "        ", "network", "=", "'densenet'", "\n", "data_type", "=", "'imagenet'", "\n", "units", "=", "[", "6", ",", "12", ",", "24", ",", "16", "]", "\n", "num_stage", "=", "4", "\n", "growth_rate", "=", "32", "\n", "bottle_neck", "=", "True", "\n", "from_layers", "=", "[", "'DBstage3_concat24'", ",", "'DBstage4_concat16'", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "-", "1", ",", "-", "1", ",", "256", ",", "256", ",", "256", ",", "128", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "return", "locals", "(", ")", "\n", "", "elif", "network", "==", "'densenet-tiny'", ":", "\n", "        ", "network", "=", "'densenet'", "\n", "data_type", "=", "'imagenet'", "\n", "units", "=", "[", "6", ",", "12", ",", "18", ",", "12", "]", "\n", "num_stage", "=", "4", "\n", "growth_rate", "=", "16", "\n", "bottle_neck", "=", "True", "\n", "from_layers", "=", "[", "'DBstage2_concat12'", ",", "'DBstage3_concat18'", ",", "''", ",", "''", ",", "''", ",", "''", "]", "\n", "num_filters", "=", "[", "-", "1", ",", "-", "1", ",", "256", ",", "256", ",", "256", ",", "128", "]", "\n", "strides", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "pads", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "sizes", "=", "get_scales", "(", "min_scale", "=", "0.2", ",", "max_scale", "=", "0.9", ",", "num_layers", "=", "len", "(", "from_layers", ")", ")", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "return", "locals", "(", ")", "\n", "", "else", ":", "\n", "        ", "msg", "=", "'No configuration found for %s with data_shape %d'", "%", "(", "network", ",", "data_shape", ")", "\n", "raise", "NotImplementedError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_symbol_train": [[211, 229], ["network.startswith", "get_config().copy", "get_config().copy.update", "symbol.symbol_builder.get_symbol_train", "logging.warn", "symbol.symbol_builder.import_module().get_symbol_train", "symbol_factory.get_config", "symbol.symbol_builder.import_module"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.get_symbol_train", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.get_symbol_train", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_config", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.import_module"], ["", "", "def", "get_symbol_train", "(", "network", ",", "data_shape", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wrapper for get symbol for train\n\n    Parameters\n    ----------\n    network : str\n        name for the base network symbol\n    data_shape : int\n        input shape\n    kwargs : dict\n        see symbol_builder.get_symbol_train for more details\n    \"\"\"", "\n", "if", "network", ".", "startswith", "(", "'legacy'", ")", ":", "\n", "        ", "logging", ".", "warn", "(", "'Using legacy model.'", ")", "\n", "return", "symbol_builder", ".", "import_module", "(", "network", ")", ".", "get_symbol_train", "(", "**", "kwargs", ")", "\n", "", "config", "=", "get_config", "(", "network", ",", "data_shape", ",", "**", "kwargs", ")", ".", "copy", "(", ")", "\n", "config", ".", "update", "(", "kwargs", ")", "\n", "return", "symbol_builder", ".", "get_symbol_train", "(", "**", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_symbol": [[230, 248], ["network.startswith", "get_config().copy", "get_config().copy.update", "symbol.symbol_builder.get_symbol", "logging.warn", "symbol.symbol_builder.import_module().get_symbol", "symbol_factory.get_config", "symbol.symbol_builder.import_module"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_factory.get_config", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.import_module"], ["", "def", "get_symbol", "(", "network", ",", "data_shape", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wrapper for get symbol for test\n\n    Parameters\n    ----------\n    network : str\n        name for the base network symbol\n    data_shape : int\n        input shape\n    kwargs : dict\n        see symbol_builder.get_symbol for more details\n    \"\"\"", "\n", "if", "network", ".", "startswith", "(", "'legacy'", ")", ":", "\n", "        ", "logging", ".", "warn", "(", "'Using legacy model.'", ")", "\n", "return", "symbol_builder", ".", "import_module", "(", "network", ")", ".", "get_symbol", "(", "**", "kwargs", ")", "\n", "", "config", "=", "get_config", "(", "network", ",", "data_shape", ",", "**", "kwargs", ")", ".", "copy", "(", ")", "\n", "config", ".", "update", "(", "kwargs", ")", "\n", "return", "symbol_builder", ".", "get_symbol", "(", "**", "config", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.inceptionv3.Conv": [[10, 15], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation"], "function", ["None"], ["def", "Conv", "(", "data", ",", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "None", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "kernel", ",", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "no_bias", "=", "True", ",", "name", "=", "'%s%s_conv2d'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "bn", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "'%s%s_batchnorm'", "%", "(", "name", ",", "suffix", ")", ",", "fix_gamma", "=", "True", ")", "\n", "act", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn", ",", "act_type", "=", "'relu'", ",", "name", "=", "'%s%s_relu'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.inceptionv3.Inception7A": [[17, 33], ["inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "mxnet.sym.Pooling", "inceptionv3.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7A", "(", "data", ",", "\n", "num_1x1", ",", "\n", "num_3x3_red", ",", "num_3x3_1", ",", "num_3x3_2", ",", "\n", "num_5x5_red", ",", "num_5x5", ",", "\n", "pool", ",", "proj", ",", "\n", "name", ")", ":", "\n", "    ", "tower_1x1", "=", "Conv", "(", "data", ",", "num_1x1", ",", "name", "=", "(", "'%s_conv'", "%", "name", ")", ")", "\n", "tower_5x5", "=", "Conv", "(", "data", ",", "num_5x5_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_5x5", "=", "Conv", "(", "tower_5x5", ",", "num_5x5", ",", "kernel", "=", "(", "5", ",", "5", ")", ",", "pad", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_3x3", "=", "Conv", "(", "data", ",", "num_3x3_red", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_3x3", "=", "Conv", "(", "tower_3x3", ",", "num_3x3_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_3x3", "=", "Conv", "(", "tower_3x3", ",", "num_3x3_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "cproj", "=", "Conv", "(", "pooling", ",", "proj", ",", "name", "=", "(", "'%s_tower_2'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_1x1", ",", "tower_5x5", ",", "tower_3x3", ",", "cproj", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.inceptionv3.Inception7B": [[35, 47], ["inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "mxnet.symbol.Pooling", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7B", "(", "data", ",", "\n", "num_3x3", ",", "\n", "num_d3x3_red", ",", "num_d3x3_1", ",", "num_d3x3_2", ",", "\n", "pool", ",", "\n", "name", ")", ":", "\n", "    ", "tower_3x3", "=", "Conv", "(", "data", ",", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_conv'", "%", "name", ")", ")", "\n", "tower_d3x3", "=", "Conv", "(", "data", ",", "num_d3x3_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_d3x3", "=", "Conv", "(", "tower_d3x3", ",", "num_d3x3_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_d3x3", "=", "Conv", "(", "tower_d3x3", ",", "num_d3x3_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "pooling", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "pool_type", "=", "\"max\"", ",", "name", "=", "(", "'max_pool_%s_pool'", "%", "name", ")", ")", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_3x3", ",", "tower_d3x3", ",", "pooling", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.inceptionv3.Inception7C": [[48, 68], ["inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "mxnet.sym.Pooling", "inceptionv3.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7C", "(", "data", ",", "\n", "num_1x1", ",", "\n", "num_d7_red", ",", "num_d7_1", ",", "num_d7_2", ",", "\n", "num_q7_red", ",", "num_q7_1", ",", "num_q7_2", ",", "num_q7_3", ",", "num_q7_4", ",", "\n", "pool", ",", "proj", ",", "\n", "name", ")", ":", "\n", "    ", "tower_1x1", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_1x1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_conv'", "%", "name", ")", ")", "\n", "tower_d7", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_d7_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_d7", "=", "Conv", "(", "data", "=", "tower_d7", ",", "num_filter", "=", "num_d7_1", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_d7", "=", "Conv", "(", "data", "=", "tower_d7", ",", "num_filter", "=", "num_d7_2", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_q7_red", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "tower_q7", ",", "num_filter", "=", "num_q7_1", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "tower_q7", ",", "num_filter", "=", "num_q7_2", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "tower_q7", ",", "num_filter", "=", "num_q7_3", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_3'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "tower_q7", ",", "num_filter", "=", "num_q7_4", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_4'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "cproj", "=", "Conv", "(", "data", "=", "pooling", ",", "num_filter", "=", "proj", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_2'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_1x1", ",", "tower_d7", ",", "tower_q7", ",", "cproj", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.inceptionv3.Inception7D": [[69, 84], ["inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "mxnet.sym.Pooling", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7D", "(", "data", ",", "\n", "num_3x3_red", ",", "num_3x3", ",", "\n", "num_d7_3x3_red", ",", "num_d7_1", ",", "num_d7_2", ",", "num_d7_3x3", ",", "\n", "pool", ",", "\n", "name", ")", ":", "\n", "    ", "tower_3x3", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_3x3_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_3x3", "=", "Conv", "(", "data", "=", "tower_3x3", ",", "num_filter", "=", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_d7_3x3", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_d7_3x3_red", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_d7_3x3", "=", "Conv", "(", "data", "=", "tower_d7_3x3", ",", "num_filter", "=", "num_d7_1", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_d7_3x3", "=", "Conv", "(", "data", "=", "tower_d7_3x3", ",", "num_filter", "=", "num_d7_2", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "tower_d7_3x3", "=", "Conv", "(", "data", "=", "tower_d7_3x3", ",", "num_filter", "=", "num_d7_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_3'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_3x3", ",", "tower_d7_3x3", ",", "pooling", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.inceptionv3.Inception7E": [[85, 104], ["inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "mxnet.sym.Pooling", "inceptionv3.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7E", "(", "data", ",", "\n", "num_1x1", ",", "\n", "num_d3_red", ",", "num_d3_1", ",", "num_d3_2", ",", "\n", "num_3x3_d3_red", ",", "num_3x3", ",", "num_3x3_d3_1", ",", "num_3x3_d3_2", ",", "\n", "pool", ",", "proj", ",", "\n", "name", ")", ":", "\n", "    ", "tower_1x1", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_1x1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_conv'", "%", "name", ")", ")", "\n", "tower_d3", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_d3_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_d3_a", "=", "Conv", "(", "data", "=", "tower_d3", ",", "num_filter", "=", "num_d3_1", ",", "kernel", "=", "(", "1", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_mixed_conv'", ")", "\n", "tower_d3_b", "=", "Conv", "(", "data", "=", "tower_d3", ",", "num_filter", "=", "num_d3_2", ",", "kernel", "=", "(", "3", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_mixed_conv_1'", ")", "\n", "tower_3x3_d3", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_3x3_d3_red", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_3x3_d3", "=", "Conv", "(", "data", "=", "tower_3x3_d3", ",", "num_filter", "=", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_3x3_d3_a", "=", "Conv", "(", "data", "=", "tower_3x3_d3", ",", "num_filter", "=", "num_3x3_d3_1", ",", "kernel", "=", "(", "1", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_mixed_conv'", ")", "\n", "tower_3x3_d3_b", "=", "Conv", "(", "data", "=", "tower_3x3_d3", ",", "num_filter", "=", "num_3x3_d3_2", ",", "kernel", "=", "(", "3", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_mixed_conv_1'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "cproj", "=", "Conv", "(", "data", "=", "pooling", ",", "num_filter", "=", "proj", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_2'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_1x1", ",", "tower_d3_a", ",", "tower_d3_b", ",", "tower_3x3_d3_a", ",", "tower_3x3_d3_b", ",", "cproj", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.inceptionv3.get_symbol": [[107, 169], ["mxnet.symbol.Variable", "inceptionv3.Conv", "inceptionv3.Conv", "inceptionv3.Conv", "mxnet.sym.Pooling", "inceptionv3.Conv", "inceptionv3.Conv", "mxnet.sym.Pooling", "inceptionv3.Inception7A", "inceptionv3.Inception7A", "inceptionv3.Inception7A", "inceptionv3.Inception7B", "inceptionv3.Inception7C", "inceptionv3.Inception7C", "inceptionv3.Inception7C", "inceptionv3.Inception7C", "inceptionv3.Inception7D", "inceptionv3.Inception7E", "inceptionv3.Inception7E", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7A", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7A", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7A", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7B", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7D", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7E", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7E"], ["", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "# stage 1", "\n", "conv", "=", "Conv", "(", "data", ",", "32", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv\"", ")", "\n", "conv_1", "=", "Conv", "(", "conv", ",", "32", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "name", "=", "\"conv_1\"", ")", "\n", "conv_2", "=", "Conv", "(", "conv_1", ",", "64", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_2\"", ")", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "conv_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ",", "name", "=", "\"pool\"", ")", "\n", "# stage 2", "\n", "conv_3", "=", "Conv", "(", "pool", ",", "80", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_3\"", ")", "\n", "conv_4", "=", "Conv", "(", "conv_3", ",", "192", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "name", "=", "\"conv_4\"", ")", "\n", "pool1", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "conv_4", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ",", "name", "=", "\"pool1\"", ")", "\n", "# stage 3", "\n", "in3a", "=", "Inception7A", "(", "pool1", ",", "64", ",", "\n", "64", ",", "96", ",", "96", ",", "\n", "48", ",", "64", ",", "\n", "\"avg\"", ",", "32", ",", "\"mixed\"", ")", "\n", "in3b", "=", "Inception7A", "(", "in3a", ",", "64", ",", "\n", "64", ",", "96", ",", "96", ",", "\n", "48", ",", "64", ",", "\n", "\"avg\"", ",", "64", ",", "\"mixed_1\"", ")", "\n", "in3c", "=", "Inception7A", "(", "in3b", ",", "64", ",", "\n", "64", ",", "96", ",", "96", ",", "\n", "48", ",", "64", ",", "\n", "\"avg\"", ",", "64", ",", "\"mixed_2\"", ")", "\n", "in3d", "=", "Inception7B", "(", "in3c", ",", "384", ",", "\n", "64", ",", "96", ",", "96", ",", "\n", "\"max\"", ",", "\"mixed_3\"", ")", "\n", "# stage 4", "\n", "in4a", "=", "Inception7C", "(", "in3d", ",", "192", ",", "\n", "128", ",", "128", ",", "192", ",", "\n", "128", ",", "128", ",", "128", ",", "128", ",", "192", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_4\"", ")", "\n", "in4b", "=", "Inception7C", "(", "in4a", ",", "192", ",", "\n", "160", ",", "160", ",", "192", ",", "\n", "160", ",", "160", ",", "160", ",", "160", ",", "192", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_5\"", ")", "\n", "in4c", "=", "Inception7C", "(", "in4b", ",", "192", ",", "\n", "160", ",", "160", ",", "192", ",", "\n", "160", ",", "160", ",", "160", ",", "160", ",", "192", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_6\"", ")", "\n", "in4d", "=", "Inception7C", "(", "in4c", ",", "192", ",", "\n", "192", ",", "192", ",", "192", ",", "\n", "192", ",", "192", ",", "192", ",", "192", ",", "192", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_7\"", ")", "\n", "in4e", "=", "Inception7D", "(", "in4d", ",", "192", ",", "320", ",", "\n", "192", ",", "192", ",", "192", ",", "192", ",", "\n", "\"max\"", ",", "\"mixed_8\"", ")", "\n", "# stage 5", "\n", "in5a", "=", "Inception7E", "(", "in4e", ",", "320", ",", "\n", "384", ",", "384", ",", "384", ",", "\n", "448", ",", "384", ",", "384", ",", "384", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_9\"", ")", "\n", "in5b", "=", "Inception7E", "(", "in5a", ",", "320", ",", "\n", "384", ",", "384", ",", "384", ",", "\n", "448", ",", "384", ",", "384", ",", "384", ",", "\n", "\"max\"", ",", "192", ",", "\"mixed_10\"", ")", "\n", "# pool", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "in5b", ",", "kernel", "=", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"avg\"", ",", "name", "=", "\"global_pool\"", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool", ",", "name", "=", "\"flatten\"", ")", "\n", "fc1", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc1'", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.legacy_vgg16_ssd_300.get_symbol_train": [[6, 158], ["mxnet.symbol.Variable", "mxnet.symbol.Variable", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.legacy_conv_act_layer", "common.multibox_layer", "mxnet.contrib.symbol.MultiBoxTarget", "mxnet.symbol.SoftmaxOutput", "mxnet.symbol.smooth_l1", "mxnet.symbol.MakeLoss", "mxnet.symbol.MakeLoss", "mxnet.contrib.symbol.MultiBoxDetection", "mxnet.symbol.MakeLoss", "mxnet.symbol.Group"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.multibox_layer"], ["def", "get_symbol_train", "(", "num_classes", "=", "20", ",", "nms_thresh", "=", "0.5", ",", "force_suppress", "=", "False", ",", "\n", "nms_topk", "=", "400", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Single-shot multi-box detection with VGG 16 layers ConvNet\n    This is a modified version, with fc6/fc7 layers replaced by conv layers\n    And the network is slightly smaller than original VGG 16 network\n    This is a training network with losses\n\n    Parameters:\n    ----------\n    num_classes: int\n        number of object classes not including background\n    nms_thresh : float\n        non-maximum suppression threshold\n    force_suppress : boolean\n        whether suppress different class objects\n    nms_topk : int\n        apply NMS to top K detections\n\n    Returns:\n    ----------\n    mx.Symbol\n    \"\"\"", "\n", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "label", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"label\"", ")", "\n", "\n", "# group 1", "\n", "conv1_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "64", ",", "name", "=", "\"conv1_1\"", ")", "\n", "relu1_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv1_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu1_1\"", ")", "\n", "conv1_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu1_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "64", ",", "name", "=", "\"conv1_2\"", ")", "\n", "relu1_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv1_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu1_2\"", ")", "\n", "pool1", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu1_2", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool1\"", ")", "\n", "# group 2", "\n", "conv2_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "128", ",", "name", "=", "\"conv2_1\"", ")", "\n", "relu2_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv2_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu2_1\"", ")", "\n", "conv2_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu2_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "128", ",", "name", "=", "\"conv2_2\"", ")", "\n", "relu2_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv2_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu2_2\"", ")", "\n", "pool2", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu2_2", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool2\"", ")", "\n", "# group 3", "\n", "conv3_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_1\"", ")", "\n", "relu3_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_1\"", ")", "\n", "conv3_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu3_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_2\"", ")", "\n", "relu3_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_2\"", ")", "\n", "conv3_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu3_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ",", "name", "=", "\"conv3_3\"", ")", "\n", "relu3_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv3_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu3_3\"", ")", "\n", "pool3", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu3_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pooling_convention", "=", "\"full\"", ",", "name", "=", "\"pool3\"", ")", "\n", "# group 4", "\n", "conv4_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_1\"", ")", "\n", "relu4_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_1\"", ")", "\n", "conv4_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu4_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_2\"", ")", "\n", "relu4_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_2\"", ")", "\n", "conv4_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu4_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv4_3\"", ")", "\n", "relu4_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv4_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu4_3\"", ")", "\n", "pool4", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu4_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool4\"", ")", "\n", "# group 5", "\n", "conv5_1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool4", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_1\"", ")", "\n", "relu5_1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_1", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_1\"", ")", "\n", "conv5_2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu5_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_2\"", ")", "\n", "relu5_2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_2", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_2\"", ")", "\n", "conv5_3", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu5_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "512", ",", "name", "=", "\"conv5_3\"", ")", "\n", "relu5_3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv5_3", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu5_3\"", ")", "\n", "pool5", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "relu5_3", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"pool5\"", ")", "\n", "# group 6", "\n", "conv6", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "pool5", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "6", ",", "6", ")", ",", "dilate", "=", "(", "6", ",", "6", ")", ",", "\n", "num_filter", "=", "1024", ",", "name", "=", "\"conv6\"", ")", "\n", "relu6", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv6", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu6\"", ")", "\n", "# drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name=\"drop6\")", "\n", "# group 7", "\n", "conv7", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "relu6", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_filter", "=", "1024", ",", "name", "=", "\"conv7\"", ")", "\n", "relu7", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv7", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu7\"", ")", "\n", "# drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name=\"drop7\")", "\n", "\n", "### ssd extra layers ###", "\n", "conv8_1", ",", "relu8_1", "=", "legacy_conv_act_layer", "(", "relu7", ",", "\"8_1\"", ",", "256", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv8_2", ",", "relu8_2", "=", "legacy_conv_act_layer", "(", "relu8_1", ",", "\"8_2\"", ",", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv9_1", ",", "relu9_1", "=", "legacy_conv_act_layer", "(", "relu8_2", ",", "\"9_1\"", ",", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv9_2", ",", "relu9_2", "=", "legacy_conv_act_layer", "(", "relu9_1", ",", "\"9_2\"", ",", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv10_1", ",", "relu10_1", "=", "legacy_conv_act_layer", "(", "relu9_2", ",", "\"10_1\"", ",", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv10_2", ",", "relu10_2", "=", "legacy_conv_act_layer", "(", "relu10_1", ",", "\"10_2\"", ",", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv11_1", ",", "relu11_1", "=", "legacy_conv_act_layer", "(", "relu10_2", ",", "\"11_1\"", ",", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "conv11_2", ",", "relu11_2", "=", "legacy_conv_act_layer", "(", "relu11_1", ",", "\"11_2\"", ",", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "act_type", "=", "\"relu\"", ",", "use_batchnorm", "=", "False", ")", "\n", "\n", "# specific parameters for VGG16 network", "\n", "from_layers", "=", "[", "relu4_3", ",", "relu7", ",", "relu8_2", ",", "relu9_2", ",", "relu10_2", ",", "relu11_2", "]", "\n", "sizes", "=", "[", "[", ".1", ",", ".141", "]", ",", "[", ".2", ",", ".272", "]", ",", "[", ".37", ",", ".447", "]", ",", "[", ".54", ",", ".619", "]", ",", "[", ".71", ",", ".79", "]", ",", "[", ".88", ",", ".961", "]", "]", "\n", "ratios", "=", "[", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", ",", "3", ",", "1.", "/", "3", "]", ",", "[", "1", ",", "2", ",", ".5", "]", ",", "[", "1", ",", "2", ",", ".5", "]", "]", "\n", "normalizations", "=", "[", "20", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "steps", "=", "[", "x", "/", "300.0", "for", "x", "in", "[", "8", ",", "16", ",", "32", ",", "64", ",", "100", ",", "300", "]", "]", "\n", "num_channels", "=", "[", "512", "]", "\n", "\n", "loc_preds", ",", "cls_preds", ",", "anchor_boxes", "=", "multibox_layer", "(", "from_layers", ",", "num_classes", ",", "sizes", "=", "sizes", ",", "ratios", "=", "ratios", ",", "normalization", "=", "normalizations", ",", "num_channels", "=", "num_channels", ",", "clip", "=", "False", ",", "interm_layer", "=", "0", ",", "steps", "=", "steps", ")", "\n", "\n", "tmp", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxTarget", "(", "\n", "*", "[", "anchor_boxes", ",", "label", ",", "cls_preds", "]", ",", "overlap_threshold", "=", ".5", ",", "ignore_label", "=", "-", "1", ",", "negative_mining_ratio", "=", "3", ",", "minimum_negative_samples", "=", "0", ",", "negative_mining_thresh", "=", ".5", ",", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "\n", "name", "=", "\"multibox_target\"", ")", "\n", "loc_target", "=", "tmp", "[", "0", "]", "\n", "loc_target_mask", "=", "tmp", "[", "1", "]", "\n", "cls_target", "=", "tmp", "[", "2", "]", "\n", "\n", "cls_prob", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "cls_preds", ",", "label", "=", "cls_target", ",", "ignore_label", "=", "-", "1", ",", "use_ignore", "=", "True", ",", "grad_scale", "=", "1.", ",", "multi_output", "=", "True", ",", "normalization", "=", "'valid'", ",", "name", "=", "\"cls_prob\"", ")", "\n", "loc_loss_", "=", "mx", ".", "symbol", ".", "smooth_l1", "(", "name", "=", "\"loc_loss_\"", ",", "data", "=", "loc_target_mask", "*", "(", "loc_preds", "-", "loc_target", ")", ",", "scalar", "=", "1.0", ")", "\n", "loc_loss", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "loc_loss_", ",", "grad_scale", "=", "1.", ",", "normalization", "=", "'valid'", ",", "name", "=", "\"loc_loss\"", ")", "\n", "\n", "# monitoring training status", "\n", "cls_label", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "data", "=", "cls_target", ",", "grad_scale", "=", "0", ",", "name", "=", "\"cls_label\"", ")", "\n", "det", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxDetection", "(", "*", "[", "cls_prob", ",", "loc_preds", ",", "anchor_boxes", "]", ",", "name", "=", "\"detection\"", ",", "nms_threshold", "=", "nms_thresh", ",", "force_suppress", "=", "force_suppress", ",", "\n", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "nms_topk", "=", "nms_topk", ")", "\n", "det", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "data", "=", "det", ",", "grad_scale", "=", "0", ",", "name", "=", "\"det_out\"", ")", "\n", "\n", "# group output", "\n", "out", "=", "mx", ".", "symbol", ".", "Group", "(", "[", "cls_prob", ",", "loc_loss", ",", "cls_label", ",", "det", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.legacy_vgg16_ssd_300.get_symbol": [[159, 193], ["legacy_vgg16_ssd_300.get_symbol_train", "mxnet.symbol.SoftmaxActivation", "mxnet.contrib.symbol.MultiBoxDetection", "get_symbol_train.get_internals", "get_symbol_train.get_internals", "get_symbol_train.get_internals"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.get_symbol_train"], ["", "def", "get_symbol", "(", "num_classes", "=", "20", ",", "nms_thresh", "=", "0.5", ",", "force_suppress", "=", "False", ",", "\n", "nms_topk", "=", "400", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Single-shot multi-box detection with VGG 16 layers ConvNet\n    This is a modified version, with fc6/fc7 layers replaced by conv layers\n    And the network is slightly smaller than original VGG 16 network\n    This is the detection network\n\n    Parameters:\n    ----------\n    num_classes: int\n        number of object classes not including background\n    nms_thresh : float\n        threshold of overlap for non-maximum suppression\n    force_suppress : boolean\n        whether suppress different class objects\n    nms_topk : int\n        apply NMS to top K detections\n\n    Returns:\n    ----------\n    mx.Symbol\n    \"\"\"", "\n", "net", "=", "get_symbol_train", "(", "num_classes", ")", "\n", "cls_preds", "=", "net", ".", "get_internals", "(", ")", "[", "\"multibox_cls_pred_output\"", "]", "\n", "loc_preds", "=", "net", ".", "get_internals", "(", ")", "[", "\"multibox_loc_pred_output\"", "]", "\n", "anchor_boxes", "=", "net", ".", "get_internals", "(", ")", "[", "\"multibox_anchors_output\"", "]", "\n", "\n", "cls_prob", "=", "mx", ".", "symbol", ".", "SoftmaxActivation", "(", "data", "=", "cls_preds", ",", "mode", "=", "'channel'", ",", "name", "=", "'cls_prob'", ")", "\n", "out", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxDetection", "(", "*", "[", "cls_prob", ",", "loc_preds", ",", "anchor_boxes", "]", ",", "name", "=", "\"detection\"", ",", "nms_threshold", "=", "nms_thresh", ",", "force_suppress", "=", "force_suppress", ",", "\n", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "nms_topk", "=", "nms_topk", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.import_module": [[6, 12], ["sys.path.append", "importlib.import_module", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.import_module"], ["def", "import_module", "(", "module_name", ")", ":", "\n", "    ", "\"\"\"Helper function to import module\"\"\"", "\n", "import", "sys", ",", "os", "\n", "import", "importlib", "\n", "sys", ".", "path", ".", "append", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", "\n", "return", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.get_symbol_train": [[13, 109], ["mxnet.sym.Variable", "import_module().get_symbol", "common.multi_layer_feature", "common.multibox_layer", "mxnet.contrib.symbol.MultiBoxTarget", "mxnet.symbol.SoftmaxOutput", "mxnet.symbol.smooth_l1", "mxnet.symbol.MakeLoss", "mxnet.symbol.MakeLoss", "mxnet.contrib.symbol.MultiBoxDetection", "mxnet.symbol.MakeLoss", "mxnet.symbol.Group", "symbol_builder.import_module"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.multi_layer_feature", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.multibox_layer", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.import_module"], ["", "def", "get_symbol_train", "(", "network", ",", "num_classes", ",", "from_layers", ",", "num_filters", ",", "strides", ",", "pads", ",", "\n", "sizes", ",", "ratios", ",", "normalizations", "=", "-", "1", ",", "steps", "=", "[", "]", ",", "min_filter", "=", "128", ",", "\n", "nms_thresh", "=", "0.5", ",", "force_suppress", "=", "False", ",", "nms_topk", "=", "400", ",", "minimum_negative_samples", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build network symbol for training SSD\n\n    Parameters\n    ----------\n    network : str\n        base network symbol name\n    num_classes : int\n        number of object classes not including background\n    from_layers : list of str\n        feature extraction layers, use '' for add extra layers\n        For example:\n        from_layers = ['relu4_3', 'fc7', '', '', '', '']\n        which means extract feature from relu4_3 and fc7, adding 4 extra layers\n        on top of fc7\n    num_filters : list of int\n        number of filters for extra layers, you can use -1 for extracted features,\n        however, if normalization and scale is applied, the number of filter for\n        that layer must be provided.\n        For example:\n        num_filters = [512, -1, 512, 256, 256, 256]\n    strides : list of int\n        strides for the 3x3 convolution appended, -1 can be used for extracted\n        feature layers\n    pads : list of int\n        paddings for the 3x3 convolution, -1 can be used for extracted layers\n    sizes : list or list of list\n        [min_size, max_size] for all layers or [[], [], []...] for specific layers\n    ratios : list or list of list\n        [ratio1, ratio2...] for all layers or [[], [], ...] for specific layers\n    normalizations : int or list of int\n        use normalizations value for all layers or [...] for specific layers,\n        -1 indicate no normalizations and scales\n    steps : list\n        specify steps for each MultiBoxPrior layer, leave empty, it will calculate\n        according to layer dimensions\n    min_filter : int\n        minimum number of filters used in 1x1 convolution\n    nms_thresh : float\n        non-maximum suppression threshold\n    force_suppress : boolean\n        whether suppress different class objects\n    nms_topk : int\n        apply NMS to top K detections\n    minimum_negative_samples : int\n        always have some negative examples, no matter how many positive there are.\n        this is useful when training on images with no ground-truth.\n    Returns\n    -------\n    mx.Symbol\n\n    \"\"\"", "\n", "label", "=", "mx", ".", "sym", ".", "Variable", "(", "'label'", ")", "\n", "body", "=", "import_module", "(", "network", ")", ".", "get_symbol", "(", "num_classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "layers", "=", "multi_layer_feature", "(", "body", ",", "from_layers", ",", "num_filters", ",", "strides", ",", "pads", ",", "\n", "min_filter", "=", "min_filter", ")", "\n", "\n", "loc_preds", ",", "cls_preds", ",", "anchor_boxes", "=", "multibox_layer", "(", "layers", ",", "num_classes", ",", "sizes", "=", "sizes", ",", "ratios", "=", "ratios", ",", "normalization", "=", "normalizations", ",", "num_channels", "=", "num_filters", ",", "clip", "=", "False", ",", "interm_layer", "=", "0", ",", "steps", "=", "steps", ")", "\n", "\n", "tmp", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxTarget", "(", "\n", "*", "[", "anchor_boxes", ",", "label", ",", "cls_preds", "]", ",", "overlap_threshold", "=", ".5", ",", "ignore_label", "=", "-", "1", ",", "negative_mining_ratio", "=", "3", ",", "minimum_negative_samples", "=", "minimum_negative_samples", ",", "negative_mining_thresh", "=", ".5", ",", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "\n", "name", "=", "\"multibox_target\"", ")", "\n", "loc_target", "=", "tmp", "[", "0", "]", "\n", "loc_target_mask", "=", "tmp", "[", "1", "]", "\n", "cls_target", "=", "tmp", "[", "2", "]", "\n", "\n", "cls_prob", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "cls_preds", ",", "label", "=", "cls_target", ",", "ignore_label", "=", "-", "1", ",", "use_ignore", "=", "True", ",", "grad_scale", "=", "1.", ",", "multi_output", "=", "True", ",", "normalization", "=", "'valid'", ",", "name", "=", "\"cls_prob\"", ")", "\n", "# #My sigmoid-cross-entropy loss", "\n", "# cls_prob = mx.symbol.sigmoid(data=cls_preds)", "\n", "# cross_entropy = cls_target*np.log(cls_prob+1e-5) + (1-cls_target)*np.log(1-cls_prob+1e-5)", "\n", "# cls_prob = mx.symbol.MakeLoss(cross_entropy, grad_scale=1., \\", "\n", "#     normalization='valid', name=\"loc_loss\")", "\n", "\n", "loc_loss_", "=", "mx", ".", "symbol", ".", "smooth_l1", "(", "name", "=", "\"loc_loss_\"", ",", "data", "=", "loc_target_mask", "*", "(", "loc_preds", "-", "loc_target", ")", ",", "scalar", "=", "1.0", ")", "\n", "loc_loss", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "loc_loss_", ",", "grad_scale", "=", "1.", ",", "normalization", "=", "'valid'", ",", "name", "=", "\"loc_loss\"", ")", "\n", "\n", "# monitoring training status", "\n", "cls_label", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "data", "=", "cls_target", ",", "grad_scale", "=", "0", ",", "name", "=", "\"cls_label\"", ")", "\n", "det", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxDetection", "(", "*", "[", "cls_prob", ",", "loc_preds", ",", "anchor_boxes", "]", ",", "name", "=", "\"detection\"", ",", "nms_threshold", "=", "nms_thresh", ",", "force_suppress", "=", "force_suppress", ",", "\n", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "nms_topk", "=", "nms_topk", ")", "\n", "det", "=", "mx", ".", "symbol", ".", "MakeLoss", "(", "data", "=", "det", ",", "grad_scale", "=", "0", ",", "name", "=", "\"det_out\"", ")", "\n", "\n", "# group output", "\n", "out", "=", "mx", ".", "symbol", ".", "Group", "(", "[", "cls_prob", ",", "loc_loss", ",", "cls_label", ",", "det", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.get_symbol": [[110, 176], ["import_module().get_symbol", "common.multi_layer_feature", "common.multibox_layer", "mxnet.symbol.SoftmaxActivation", "mxnet.contrib.symbol.MultiBoxDetection", "symbol_builder.import_module"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.multi_layer_feature", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.common.multibox_layer", "home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.import_module"], ["", "def", "get_symbol", "(", "network", ",", "num_classes", ",", "from_layers", ",", "num_filters", ",", "sizes", ",", "ratios", ",", "\n", "strides", ",", "pads", ",", "normalizations", "=", "-", "1", ",", "steps", "=", "[", "]", ",", "min_filter", "=", "128", ",", "\n", "nms_thresh", "=", "0.5", ",", "force_suppress", "=", "False", ",", "nms_topk", "=", "400", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build network for testing SSD\n\n    Parameters\n    ----------\n    network : str\n        base network symbol name\n    num_classes : int\n        number of object classes not including background\n    from_layers : list of str\n        feature extraction layers, use '' for add extra layers\n        For example:\n        from_layers = ['relu4_3', 'fc7', '', '', '', '']\n        which means extract feature from relu4_3 and fc7, adding 4 extra layers\n        on top of fc7\n    num_filters : list of int\n        number of filters for extra layers, you can use -1 for extracted features,\n        however, if normalization and scale is applied, the number of filter for\n        that layer must be provided.\n        For example:\n        num_filters = [512, -1, 512, 256, 256, 256]\n    strides : list of int\n        strides for the 3x3 convolution appended, -1 can be used for extracted\n        feature layers\n    pads : list of int\n        paddings for the 3x3 convolution, -1 can be used for extracted layers\n    sizes : list or list of list\n        [min_size, max_size] for all layers or [[], [], []...] for specific layers\n    ratios : list or list of list\n        [ratio1, ratio2...] for all layers or [[], [], ...] for specific layers\n    normalizations : int or list of int\n        use normalizations value for all layers or [...] for specific layers,\n        -1 indicate no normalizations and scales\n    steps : list\n        specify steps for each MultiBoxPrior layer, leave empty, it will calculate\n        according to layer dimensions\n    min_filter : int\n        minimum number of filters used in 1x1 convolution\n    nms_thresh : float\n        non-maximum suppression threshold\n    force_suppress : boolean\n        whether suppress different class objects\n    nms_topk : int\n        apply NMS to top K detections\n\n    Returns\n    -------\n    mx.Symbol\n\n    \"\"\"", "\n", "body", "=", "import_module", "(", "network", ")", ".", "get_symbol", "(", "num_classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "layers", "=", "multi_layer_feature", "(", "body", ",", "from_layers", ",", "num_filters", ",", "strides", ",", "pads", ",", "\n", "min_filter", "=", "min_filter", ")", "\n", "\n", "loc_preds", ",", "cls_preds", ",", "anchor_boxes", "=", "multibox_layer", "(", "layers", ",", "num_classes", ",", "sizes", "=", "sizes", ",", "ratios", "=", "ratios", ",", "normalization", "=", "normalizations", ",", "num_channels", "=", "num_filters", ",", "clip", "=", "False", ",", "interm_layer", "=", "0", ",", "steps", "=", "steps", ")", "\n", "\n", "cls_prob", "=", "mx", ".", "symbol", ".", "SoftmaxActivation", "(", "data", "=", "cls_preds", ",", "mode", "=", "'channel'", ",", "name", "=", "'cls_prob'", ")", "\n", "out", "=", "mx", ".", "contrib", ".", "symbol", ".", "MultiBoxDetection", "(", "*", "[", "cls_prob", ",", "loc_preds", ",", "anchor_boxes", "]", ",", "name", "=", "\"detection\"", ",", "nms_threshold", "=", "nms_thresh", ",", "force_suppress", "=", "force_suppress", ",", "\n", "variances", "=", "(", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", ")", ",", "nms_topk", "=", "nms_topk", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.__init__": [[7, 13], ["super().__init__", "metric.MultiBoxMetric.reset"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__", "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.reset"], ["def", "__init__", "(", "self", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "MultiBoxMetric", ",", "self", ")", ".", "__init__", "(", "'MultiBox'", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "num", "=", "2", "\n", "self", ".", "name", "=", "[", "'CrossEntropy'", ",", "'SmoothL1'", "]", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.reset": [[14, 24], ["getattr"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        override reset behavior\n        \"\"\"", "\n", "if", "getattr", "(", "self", ",", "'num'", ",", "None", ")", "is", "None", ":", "\n", "            ", "self", ".", "num_inst", "=", "0", "\n", "self", ".", "sum_metric", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_inst", "=", "[", "0", "]", "*", "self", ".", "num", "\n", "self", ".", "sum_metric", "=", "[", "0.0", "]", "*", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update": [[25, 47], ["preds[].asnumpy", "preds[].asnumpy", "preds[].asnumpy", "numpy.sum", "preds[].asnumpy.flatten", "numpy.int64", "preds[].asnumpy.transpose().reshape", "numpy.sum", "numpy.where", "numpy.where", "preds[].asnumpy.transpose", "numpy.log"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "labels", ",", "preds", ")", ":", "\n", "        ", "\"\"\"\n        Implementation of updating metrics\n        \"\"\"", "\n", "# get generated multi label from network", "\n", "cls_prob", "=", "preds", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "loc_loss", "=", "preds", "[", "1", "]", ".", "asnumpy", "(", ")", "\n", "cls_label", "=", "preds", "[", "2", "]", ".", "asnumpy", "(", ")", "\n", "valid_count", "=", "np", ".", "sum", "(", "cls_label", ">=", "0", ")", "\n", "# overall accuracy & object accuracy", "\n", "label", "=", "cls_label", ".", "flatten", "(", ")", "\n", "# in case you have a 'other' class", "\n", "label", "[", "np", ".", "where", "(", "label", ">=", "cls_prob", ".", "shape", "[", "1", "]", ")", "]", "=", "0", "\n", "mask", "=", "np", ".", "where", "(", "label", ">=", "0", ")", "[", "0", "]", "\n", "indices", "=", "np", ".", "int64", "(", "label", "[", "mask", "]", ")", "\n", "prob", "=", "cls_prob", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "cls_prob", ".", "shape", "[", "1", "]", ")", ")", "\n", "prob", "=", "prob", "[", "mask", ",", "indices", "]", "\n", "self", ".", "sum_metric", "[", "0", "]", "+=", "(", "-", "np", ".", "log", "(", "prob", "+", "self", ".", "eps", ")", ")", ".", "sum", "(", ")", "\n", "self", ".", "num_inst", "[", "0", "]", "+=", "valid_count", "\n", "# smoothl1loss", "\n", "self", ".", "sum_metric", "[", "1", "]", "+=", "np", ".", "sum", "(", "loc_loss", ")", "\n", "self", ".", "num_inst", "[", "1", "]", "+=", "valid_count", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.get": [[48, 69], ["float", "range", "float", "zip"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the current evaluation result.\n        Override the default behavior\n\n        Returns\n        -------\n        name : str\n           Name of the metric.\n        value : float\n           Value of the evaluation.\n        \"\"\"", "\n", "if", "self", ".", "num", "is", "None", ":", "\n", "            ", "if", "self", ".", "num_inst", "==", "0", ":", "\n", "                ", "return", "(", "self", ".", "name", ",", "float", "(", "'nan'", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "self", ".", "name", ",", "self", ".", "sum_metric", "/", "self", ".", "num_inst", ")", "\n", "", "", "else", ":", "\n", "            ", "names", "=", "[", "'%s'", "%", "(", "self", ".", "name", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "num", ")", "]", "\n", "values", "=", "[", "x", "/", "y", "if", "y", "!=", "0", "else", "float", "(", "'nan'", ")", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "sum_metric", ",", "self", ".", "num_inst", ")", "]", "\n", "return", "(", "names", ",", "values", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.train.train_net.convert_pretrained": [[16, 32], ["None"], "function", ["None"], ["def", "convert_pretrained", "(", "name", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    Special operations need to be made due to name inconsistance, etc\n\n    Parameters:\n    ---------\n    name : str\n        pretrained model name\n    args : dict\n        loaded arguments\n\n    Returns:\n    ---------\n    processed arguments as dict\n    \"\"\"", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.train.train_net.get_optimizer_params": [[33, 61], ["optimizer.lower", "logger.info", "optimizer.lower", "optimizer.lower", "len", "len", "optimizer.lower", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info"], ["", "def", "get_optimizer_params", "(", "optimizer", "=", "None", ",", "learning_rate", "=", "None", ",", "momentum", "=", "None", ",", "\n", "weight_decay", "=", "None", ",", "lr_scheduler", "=", "None", ",", "ctx", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "if", "optimizer", ".", "lower", "(", ")", "==", "'rmsprop'", ":", "\n", "        ", "opt", "=", "'rmsprop'", "\n", "logger", ".", "info", "(", "'you chose RMSProp, decreasing lr by a factor of 10'", ")", "\n", "optimizer_params", "=", "{", "'learning_rate'", ":", "learning_rate", "/", "10.0", ",", "\n", "'wd'", ":", "weight_decay", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ",", "\n", "'clip_gradient'", ":", "None", ",", "\n", "'rescale_grad'", ":", "1.0", "/", "len", "(", "ctx", ")", "if", "len", "(", "ctx", ")", ">", "0", "else", "1.0", "}", "\n", "", "elif", "optimizer", ".", "lower", "(", ")", "==", "'sgd'", ":", "\n", "        ", "opt", "=", "'sgd'", "\n", "optimizer_params", "=", "{", "'learning_rate'", ":", "learning_rate", ",", "\n", "'momentum'", ":", "momentum", ",", "\n", "'wd'", ":", "weight_decay", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ",", "\n", "'clip_gradient'", ":", "None", ",", "\n", "'rescale_grad'", ":", "1.0", "/", "len", "(", "ctx", ")", "if", "len", "(", "ctx", ")", ">", "0", "else", "1.0", "}", "\n", "", "elif", "optimizer", ".", "lower", "(", ")", "==", "'adadelta'", ":", "\n", "        ", "opt", "=", "'adadelta'", "\n", "optimizer_params", "=", "{", "}", "\n", "", "elif", "optimizer", ".", "lower", "(", ")", "==", "'adam'", ":", "\n", "        ", "opt", "=", "'adam'", "\n", "optimizer_params", "=", "{", "'learning_rate'", ":", "learning_rate", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ",", "\n", "'clip_gradient'", ":", "None", ",", "\n", "'rescale_grad'", ":", "1.0", "/", "len", "(", "ctx", ")", "if", "len", "(", "ctx", ")", ">", "0", "else", "1.0", "}", "\n", "", "return", "opt", ",", "optimizer_params", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.train.train_net.get_lr_scheduler": [[63, 104], ["int", "mxnet.lr_scheduler.MultiFactorScheduler", "lr_refactor_step.split", "r.strip", "logging.getLogger().info", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info"], ["", "def", "get_lr_scheduler", "(", "learning_rate", ",", "lr_refactor_step", ",", "lr_refactor_ratio", ",", "\n", "num_example", ",", "batch_size", ",", "begin_epoch", ")", ":", "\n", "    ", "\"\"\"\n    Compute learning rate and refactor scheduler\n\n    Parameters:\n    ---------\n    learning_rate : float\n        original learning rate\n    lr_refactor_step : comma separated str\n        epochs to change learning rate\n    lr_refactor_ratio : float\n        lr *= ratio at certain steps\n    num_example : int\n        number of training images, used to estimate the iterations given epochs\n    batch_size : int\n        training batch size\n    begin_epoch : int\n        starting epoch\n\n    Returns:\n    ---------\n    (learning_rate, mx.lr_scheduler) as tuple\n    \"\"\"", "\n", "assert", "lr_refactor_ratio", ">", "0", "\n", "iter_refactor", "=", "[", "int", "(", "r", ")", "for", "r", "in", "lr_refactor_step", ".", "split", "(", "','", ")", "if", "r", ".", "strip", "(", ")", "]", "\n", "if", "lr_refactor_ratio", ">=", "1", ":", "\n", "        ", "return", "(", "learning_rate", ",", "None", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "learning_rate", "\n", "epoch_size", "=", "num_example", "//", "batch_size", "\n", "for", "s", "in", "iter_refactor", ":", "\n", "            ", "if", "begin_epoch", ">=", "s", ":", "\n", "                ", "lr", "*=", "lr_refactor_ratio", "\n", "", "", "if", "lr", "!=", "learning_rate", ":", "\n", "            ", "logging", ".", "getLogger", "(", ")", ".", "info", "(", "\"Adjusted learning rate to {} for epoch {}\"", ".", "format", "(", "lr", ",", "begin_epoch", ")", ")", "\n", "", "steps", "=", "[", "epoch_size", "*", "(", "x", "-", "begin_epoch", ")", "for", "x", "in", "iter_refactor", "if", "x", ">", "begin_epoch", "]", "\n", "if", "not", "steps", ":", "\n", "            ", "return", "(", "lr", ",", "None", ")", "\n", "", "lr_scheduler", "=", "mx", ".", "lr_scheduler", ".", "MultiFactorScheduler", "(", "step", "=", "steps", ",", "factor", "=", "lr_refactor_ratio", ")", "\n", "return", "(", "lr", ",", "lr_scheduler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.train.train_net.train_net": [[106, 355], ["os.path.exists", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "isinstance", "prefix.endswith", "isinstance", "dataset.iterator.DetRecordIter", "symbol.symbol_factory.get_symbol_train", "freeze_layer_pattern.strip", "tools.visualize_net.net_visualization", "tools.visualize_net.net_visualization", "mxnet.mod.Module", "batch_end_callback.append", "train_net.get_lr_scheduler", "train_net.get_optimizer_params", "mx.mod.Module.fit", "train_path.replace", "len", "os.path.join", "logging.FileHandler", "logging.getLogger.addHandler", "len", "dataset.iterator.DetRecordIter", "re.compile", "logging.getLogger.info", "mxnet.model.load_checkpoint", "logging.getLogger.info", "mxnet.callback.do_checkpoint", "os.path.join", "batch_end_callback.append", "eval_end_callback.append", "eval_end_callback.append", "eval_end_callback.append", "mxnet.callback.Speedometer", "mxnet.mon.Monitor", "evaluate.eval_metric.VOC07MApMetric", "evaluate.eval_metric.MApMetric", "open", "f.readlines", "os.path.dirname", "os.path.exists", "os.makedirs", "len", "str", "logging.getLogger.info", "mxnet.model.load_checkpoint", "symbol.symbol_factory.get_symbol_train.simple_bind", "arg_dict.items", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "evaluate.custom_callbacks.ParseLogCallback", "mxnet.contrib.tensorboard.LogMetricsCallback", "evaluate.custom_callbacks.LogROCCallback", "evaluate.custom_callbacks.LogDetectionsCallback", "train.metric.MultiBoxMetric", "mxnet.init.Xavier", "train_path.replace", "os.path.dirname", "os.path.dirname", "symbol.symbol_factory.get_symbol_train.list_arguments", "re.compile.match", "mxnet.cpu", "logging.getLogger.info", "mxnet.model.load_checkpoint", "train_net.convert_pretrained", "logging.getLogger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "logging.info", "os.path.dirname", "os.path.dirname", "fixed_param_names.append"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbol.symbol_builder.get_symbol_train", "home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.net_visualization", "home.repos.pwc.inspect_result.homles11_IGCV3.tools.visualize_net.net_visualization", "home.repos.pwc.inspect_result.homles11_IGCV3.train.train_net.get_lr_scheduler", "home.repos.pwc.inspect_result.homles11_IGCV3.train.train_net.get_optimizer_params", "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit.fit", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info", "home.repos.pwc.inspect_result.homles11_IGCV3.train.train_net.convert_pretrained", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info"], ["", "", "def", "train_net", "(", "network", ",", "train_path", ",", "num_classes", ",", "batch_size", ",", "\n", "data_shape", ",", "mean_pixels", ",", "resume", ",", "finetune", ",", "pretrained", ",", "epoch", ",", "\n", "prefix", ",", "ctx", ",", "begin_epoch", ",", "end_epoch", ",", "frequent", ",", "learning_rate", ",", "\n", "momentum", ",", "weight_decay", ",", "lr_refactor_step", ",", "lr_refactor_ratio", ",", "\n", "freeze_layer_pattern", "=", "''", ",", "\n", "num_example", "=", "10000", ",", "label_pad_width", "=", "350", ",", "\n", "nms_thresh", "=", "0.45", ",", "force_nms", "=", "False", ",", "ovp_thresh", "=", "0.5", ",", "\n", "use_difficult", "=", "False", ",", "class_names", "=", "None", ",", "\n", "voc07_metric", "=", "False", ",", "nms_topk", "=", "400", ",", "force_suppress", "=", "False", ",", "\n", "train_list", "=", "\"\"", ",", "val_path", "=", "\"\"", ",", "val_list", "=", "\"\"", ",", "iter_monitor", "=", "0", ",", "\n", "monitor_pattern", "=", "\".*\"", ",", "log_file", "=", "None", ",", "optimizer", "=", "'sgd'", ",", "tensorboard", "=", "False", ",", "\n", "checkpoint_period", "=", "5", ",", "min_neg_samples", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper for training phase.\n\n    Parameters:\n    ----------\n    net : str\n        symbol name for the network structure\n    train_path : str\n        record file path for training\n    num_classes : int\n        number of object classes, not including background\n    batch_size : int\n        training batch-size\n    data_shape : int or tuple\n        width/height as integer or (3, height, width) tuple\n    mean_pixels : tuple of floats\n        mean pixel values for red, green and blue\n    resume : int\n        resume from previous checkpoint if > 0\n    finetune : int\n        fine-tune from previous checkpoint if > 0\n    pretrained : str\n        prefix of pretrained model, including path\n    epoch : int\n        load epoch of either resume/finetune/pretrained model\n    prefix : str\n        prefix for saving checkpoints\n    ctx : [mx.cpu()] or [mx.gpu(x)]\n        list of mxnet contexts\n    begin_epoch : int\n        starting epoch for training, should be 0 if not otherwise specified\n    end_epoch : int\n        end epoch of training\n    frequent : int\n        frequency to print out training status\n    optimizer : str\n        usage of different optimizers, other then default sgd\n    learning_rate : float\n        training learning rate\n    momentum : float\n        trainig momentum\n    weight_decay : float\n        training weight decay param\n    lr_refactor_ratio : float\n        multiplier for reducing learning rate\n    lr_refactor_step : comma separated integers\n        at which epoch to rescale learning rate, e.g. '30, 60, 90'\n    freeze_layer_pattern : str\n        regex pattern for layers need to be fixed\n    num_example : int\n        number of training images\n    label_pad_width : int\n        force padding training and validation labels to sync their label widths\n    nms_thresh : float\n        non-maximum suppression threshold for validation\n    force_nms : boolean\n        suppress overlaped objects from different classes\n    train_list : str\n        list file path for training, this will replace the embeded labels in record\n    val_path : str\n        record file path for validation\n    val_list : str\n        list file path for validation, this will replace the embeded labels in record\n    iter_monitor : int\n        monitor internal stats in networks if > 0, specified by monitor_pattern\n    monitor_pattern : str\n        regex pattern for monitoring network stats\n    log_file : str\n        log to file if enabled\n    tensorboard : bool\n        record logs into tensorboard\n    min_neg_samples : int\n        always have some negative examples, no matter how many positive there are.\n        this is useful when training on images with no ground-truth.\n    checkpoint_period : int\n        a checkpoint will be saved every \"checkpoint_period\" epochs\n    \"\"\"", "\n", "# check actual number of train_images", "\n", "if", "os", ".", "path", ".", "exists", "(", "train_path", ".", "replace", "(", "'rec'", ",", "'idx'", ")", ")", ":", "\n", "        ", "with", "open", "(", "train_path", ".", "replace", "(", "'rec'", ",", "'idx'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "txt", "=", "f", ".", "readlines", "(", ")", "\n", "", "num_example", "=", "len", "(", "txt", ")", "\n", "# set up logger", "\n", "", "logging", ".", "basicConfig", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "if", "log_file", ":", "\n", "        ", "log_file_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "prefix", ")", ",", "log_file", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "log_file_path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "log_file_path", ")", ")", "\n", "", "fh", "=", "logging", ".", "FileHandler", "(", "log_file_path", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "# check args", "\n", "", "if", "isinstance", "(", "data_shape", ",", "int", ")", ":", "\n", "        ", "data_shape", "=", "(", "3", ",", "data_shape", ",", "data_shape", ")", "\n", "", "assert", "len", "(", "data_shape", ")", "==", "3", "and", "data_shape", "[", "0", "]", "==", "3", "\n", "if", "prefix", ".", "endswith", "(", "'_'", ")", ":", "\n", "        ", "prefix", "+=", "'_'", "+", "str", "(", "data_shape", "[", "1", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "mean_pixels", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "mean_pixels", "=", "[", "mean_pixels", ",", "mean_pixels", ",", "mean_pixels", "]", "\n", "", "assert", "len", "(", "mean_pixels", ")", "==", "3", ",", "\"must provide all RGB mean values\"", "\n", "\n", "train_iter", "=", "DetRecordIter", "(", "train_path", ",", "batch_size", ",", "data_shape", ",", "mean_pixels", "=", "mean_pixels", ",", "\n", "label_pad_width", "=", "label_pad_width", ",", "path_imglist", "=", "train_list", ",", "**", "cfg", ".", "train", ")", "\n", "\n", "if", "val_path", ":", "\n", "        ", "val_iter", "=", "DetRecordIter", "(", "val_path", ",", "batch_size", ",", "data_shape", ",", "mean_pixels", "=", "mean_pixels", ",", "\n", "label_pad_width", "=", "label_pad_width", ",", "path_imglist", "=", "val_list", ",", "**", "cfg", ".", "valid", ")", "\n", "", "else", ":", "\n", "        ", "val_iter", "=", "None", "\n", "\n", "# load symbol", "\n", "", "net", "=", "get_symbol_train", "(", "network", ",", "data_shape", "[", "1", "]", ",", "num_classes", "=", "num_classes", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "force_suppress", "=", "force_suppress", ",", "nms_topk", "=", "nms_topk", ",", "minimum_negative_samples", "=", "min_neg_samples", ")", "\n", "\n", "# define layers with fixed weight/bias", "\n", "if", "freeze_layer_pattern", ".", "strip", "(", ")", ":", "\n", "        ", "re_prog", "=", "re", ".", "compile", "(", "freeze_layer_pattern", ")", "\n", "fixed_param_names", "=", "[", "name", "for", "name", "in", "net", ".", "list_arguments", "(", ")", "if", "re_prog", ".", "match", "(", "name", ")", "]", "\n", "", "else", ":", "\n", "        ", "fixed_param_names", "=", "None", "\n", "\n", "# load pretrained or resume from previous state", "\n", "", "ctx_str", "=", "'('", "+", "','", ".", "join", "(", "[", "str", "(", "c", ")", "for", "c", "in", "ctx", "]", ")", "+", "')'", "\n", "if", "resume", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Resume training with {} from epoch {}\"", "\n", ".", "format", "(", "ctx_str", ",", "resume", ")", ")", "\n", "_", ",", "args", ",", "auxs", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "prefix", ",", "resume", ")", "\n", "begin_epoch", "=", "resume", "\n", "", "elif", "finetune", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Start finetuning with {} from epoch {}\"", "\n", ".", "format", "(", "ctx_str", ",", "finetune", ")", ")", "\n", "_", ",", "args", ",", "auxs", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "prefix", ",", "finetune", ")", "\n", "begin_epoch", "=", "finetune", "\n", "# check what layers mismatch with the loaded parameters", "\n", "exe", "=", "net", ".", "simple_bind", "(", "mx", ".", "cpu", "(", ")", ",", "data", "=", "(", "1", ",", "3", ",", "300", ",", "300", ")", ",", "label", "=", "(", "1", ",", "1", ",", "5", ")", ",", "grad_req", "=", "'null'", ")", "\n", "arg_dict", "=", "exe", ".", "arg_dict", "\n", "fixed_param_names", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "arg_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "args", ":", "\n", "                ", "if", "v", ".", "shape", "!=", "args", "[", "k", "]", ".", "shape", ":", "\n", "                    ", "del", "args", "[", "k", "]", "\n", "logging", ".", "info", "(", "\"Removed %s\"", "%", "k", ")", "\n", "", "else", ":", "\n", "                    ", "if", "not", "'pred'", "in", "k", ":", "\n", "                        ", "fixed_param_names", ".", "append", "(", "k", ")", "\n", "", "", "", "", "", "elif", "pretrained", ":", "\n", "        ", "logger", ".", "info", "(", "\"Start training with {} from pretrained model {}\"", "\n", ".", "format", "(", "ctx_str", ",", "pretrained", ")", ")", "\n", "_", ",", "args", ",", "auxs", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "pretrained", ",", "epoch", ")", "\n", "args", "=", "convert_pretrained", "(", "pretrained", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Experimental: start training from scratch with {}\"", "\n", ".", "format", "(", "ctx_str", ")", ")", "\n", "args", "=", "None", "\n", "auxs", "=", "None", "\n", "fixed_param_names", "=", "None", "\n", "\n", "# helper information", "\n", "", "if", "fixed_param_names", ":", "\n", "        ", "logger", ".", "info", "(", "\"Freezed parameters: [\"", "+", "','", ".", "join", "(", "fixed_param_names", ")", "+", "']'", ")", "\n", "\n", "# visualize net - both train and test", "\n", "", "net_visualization", "(", "net", "=", "net", ",", "network", "=", "network", ",", "data_shape", "=", "data_shape", "[", "2", "]", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "dirname", "(", "prefix", ")", ",", "train", "=", "True", ")", "\n", "net_visualization", "(", "net", "=", "None", ",", "network", "=", "network", ",", "data_shape", "=", "data_shape", "[", "2", "]", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "dirname", "(", "prefix", ")", ",", "train", "=", "False", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "# init training module", "\n", "mod", "=", "mx", ".", "mod", ".", "Module", "(", "net", ",", "label_names", "=", "(", "'label'", ",", ")", ",", "logger", "=", "logger", ",", "context", "=", "ctx", ",", "\n", "fixed_param_names", "=", "fixed_param_names", ")", "\n", "\n", "batch_end_callback", "=", "[", "]", "\n", "eval_end_callback", "=", "[", "]", "\n", "epoch_end_callback", "=", "[", "mx", ".", "callback", ".", "do_checkpoint", "(", "prefix", ",", "period", "=", "checkpoint_period", ")", "]", "\n", "\n", "# add logging to tensorboard", "\n", "if", "tensorboard", ":", "\n", "        ", "tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "prefix", ")", ",", "'logs'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tensorboard_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'train'", ",", "'scalar'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'train'", ",", "'dist'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'val'", ",", "'roc'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'val'", ",", "'scalar'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'val'", ",", "'images'", ")", ")", "\n", "", "batch_end_callback", ".", "append", "(", "\n", "ParseLogCallback", "(", "dist_logging_dir", "=", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'train'", ",", "'dist'", ")", ",", "\n", "scalar_logging_dir", "=", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'train'", ",", "'scalar'", ")", ",", "\n", "logfile_path", "=", "log_file_path", ",", "batch_size", "=", "batch_size", ",", "iter_monitor", "=", "iter_monitor", ",", "\n", "frequent", "=", "frequent", ")", ")", "\n", "eval_end_callback", ".", "append", "(", "mx", ".", "contrib", ".", "tensorboard", ".", "LogMetricsCallback", "(", "\n", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'val/scalar'", ")", ",", "'ssd'", ")", ")", "\n", "eval_end_callback", ".", "append", "(", "LogROCCallback", "(", "logging_dir", "=", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'val/roc'", ")", ",", "\n", "roc_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "prefix", ")", ",", "'roc'", ")", ",", "\n", "class_names", "=", "class_names", ")", ")", "\n", "eval_end_callback", ".", "append", "(", "LogDetectionsCallback", "(", "logging_dir", "=", "os", ".", "path", ".", "join", "(", "tensorboard_dir", ",", "'val/images'", ")", ",", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "prefix", ")", ",", "'images'", ")", ",", "\n", "class_names", "=", "class_names", ",", "batch_size", "=", "batch_size", ",", "mean_pixels", "=", "mean_pixels", ")", ")", "\n", "\n", "# this callback should be the last in a serie of batch_callbacks", "\n", "# since it is resetting the metric evaluation every $frequent batches", "\n", "", "batch_end_callback", ".", "append", "(", "mx", ".", "callback", ".", "Speedometer", "(", "train_iter", ".", "batch_size", ",", "frequent", "=", "frequent", ")", ")", "\n", "\n", "learning_rate", ",", "lr_scheduler", "=", "get_lr_scheduler", "(", "learning_rate", ",", "lr_refactor_step", ",", "\n", "lr_refactor_ratio", ",", "num_example", ",", "batch_size", ",", "begin_epoch", ")", "\n", "# add possibility for different optimizer", "\n", "opt", ",", "opt_params", "=", "get_optimizer_params", "(", "optimizer", "=", "optimizer", ",", "learning_rate", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "lr_scheduler", "=", "lr_scheduler", ",", "ctx", "=", "ctx", ",", "logger", "=", "logger", ")", "\n", "# TODO monitor the gradient flow as in 'https://github.com/dmlc/tensorboard/blob/master/docs/tutorial/understanding-vanish-gradient.ipynb'", "\n", "monitor", "=", "mx", ".", "mon", ".", "Monitor", "(", "iter_monitor", ",", "pattern", "=", "monitor_pattern", ")", "if", "iter_monitor", ">", "0", "else", "None", "\n", "\n", "# run fit net, every n epochs we run evaluation network to get mAP", "\n", "if", "voc07_metric", ":", "\n", "        ", "valid_metric", "=", "VOC07MApMetric", "(", "ovp_thresh", ",", "use_difficult", ",", "class_names", ",", "pred_idx", "=", "3", ",", "\n", "roc_output_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "prefix", ")", ",", "'roc'", ")", ")", "\n", "", "else", ":", "\n", "        ", "valid_metric", "=", "MApMetric", "(", "ovp_thresh", ",", "use_difficult", ",", "class_names", ",", "pred_idx", "=", "3", ",", "\n", "roc_output_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "prefix", ")", ",", "'roc'", ")", ")", "\n", "\n", "", "mod", ".", "fit", "(", "train_iter", ",", "\n", "val_iter", ",", "\n", "eval_metric", "=", "MultiBoxMetric", "(", ")", ",", "\n", "validation_metric", "=", "valid_metric", ",", "\n", "batch_end_callback", "=", "batch_end_callback", ",", "\n", "eval_end_callback", "=", "eval_end_callback", ",", "\n", "epoch_end_callback", "=", "epoch_end_callback", ",", "\n", "optimizer", "=", "opt", ",", "\n", "optimizer_params", "=", "opt_params", ",", "\n", "begin_epoch", "=", "begin_epoch", ",", "\n", "num_epoch", "=", "end_epoch", ",", "\n", "initializer", "=", "mx", ".", "init", ".", "Xavier", "(", ")", ",", "\n", "arg_params", "=", "args", ",", "\n", "aux_params", "=", "auxs", ",", "\n", "allow_missing", "=", "True", ",", "\n", "monitor", "=", "monitor", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv": [[38, 43], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation"], "function", ["None"], ["conv_6", "=", "Conv", "(", "conv_6_dw", ",", "num_filter", "=", "256", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_6\"", ")", "# 28/28", "\n", "conv_7_dw", "=", "Conv", "(", "conv_6", ",", "num_group", "=", "256", ",", "num_filter", "=", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv_7_dw\"", ")", "# 28/14", "\n", "conv_7", "=", "Conv", "(", "conv_7_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_7\"", ")", "# 14/14", "\n", "\n", "conv_8_dw", "=", "Conv", "(", "conv_7", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_8_dw\"", ")", "# 14/14", "\n", "conv_8", "=", "Conv", "(", "conv_8_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_8\"", ")", "# 14/14", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW": [[45, 49], ["mobilenet.Conv", "mobilenet.Conv"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["conv_9", "=", "Conv", "(", "conv_9_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_9\"", ")", "# 14/14", "\n", "conv_10_dw", "=", "Conv", "(", "conv_9", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_10_dw\"", ")", "# 14/14", "\n", "conv_10", "=", "Conv", "(", "conv_10_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_10\"", ")", "# 14/14", "\n", "conv_11_dw", "=", "Conv", "(", "conv_10", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_11_dw\"", ")", "# 14/14", "\n", "conv_11", "=", "Conv", "(", "conv_11_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_11\"", ")", "# 14/14", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.get_symbol_compact": [[51, 83], ["int", "mxnet.symbol.Variable", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv_DPW", "mobilenet.Conv_DPW", "mobilenet.Conv_DPW", "mobilenet.Conv_DPW", "mobilenet.Conv_DPW", "range", "mobilenet.Conv_DPW", "mobilenet.Conv_DPW", "int", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "mobilenet.Conv_DPW"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.Conv_DPW"], ["conv_12", "=", "Conv", "(", "conv_12_dw", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_12\"", ")", "# 14/14", "\n", "\n", "conv_13_dw", "=", "Conv", "(", "conv_12", ",", "num_group", "=", "512", ",", "num_filter", "=", "512", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv_13_dw\"", ")", "# 14/7", "\n", "conv_13", "=", "Conv", "(", "conv_13_dw", ",", "num_filter", "=", "1024", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_13\"", ")", "# 7/7", "\n", "conv_14_dw", "=", "Conv", "(", "conv_13", ",", "num_group", "=", "1024", ",", "num_filter", "=", "1024", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_14_dw\"", ")", "# 7/7", "\n", "conv_14", "=", "Conv", "(", "conv_14_dw", ",", "num_filter", "=", "1024", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_14\"", ")", "# 7/7", "\n", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "conv_14", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"avg\"", ",", "name", "=", "\"global_pool\"", ",", "global_pool", "=", "True", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool", ",", "name", "=", "\"flatten\"", ")", "\n", "fc", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc'", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenet.get_symbol": [[85, 145], ["int", "mxnet.symbol.Variable", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "mobilenet.Conv", "int", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], []], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.vgg.get_feature": [[27, 36], ["enumerate", "range", "mxnet.sym.Pooling", "mxnet.sym.Convolution", "mxnet.sym.Activation", "mxnet.symbol.BatchNorm"], "function", ["None"], ["def", "get_feature", "(", "internel_layer", ",", "layers", ",", "filters", ",", "batch_norm", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "i", ",", "num", "in", "enumerate", "(", "layers", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num", ")", ":", "\n", "            ", "internel_layer", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "internel_layer", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "filters", "[", "i", "]", ",", "name", "=", "\"conv%s_%s\"", "%", "(", "i", "+", "1", ",", "j", "+", "1", ")", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "internel_layer", "=", "mx", ".", "symbol", ".", "BatchNorm", "(", "data", "=", "internel_layer", ",", "name", "=", "\"bn%s_%s\"", "%", "(", "i", "+", "1", ",", "j", "+", "1", ")", ")", "\n", "", "internel_layer", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "internel_layer", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu%s_%s\"", "%", "(", "i", "+", "1", ",", "j", "+", "1", ")", ")", "\n", "", "internel_layer", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "internel_layer", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"pool%s\"", "%", "(", "i", "+", "1", ")", ")", "\n", "", "return", "internel_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.vgg.get_classifier": [[37, 47], ["mxnet.sym.Flatten", "mxnet.sym.FullyConnected", "mxnet.sym.Activation", "mxnet.sym.Dropout", "mxnet.sym.FullyConnected", "mxnet.sym.Activation", "mxnet.sym.Dropout", "mxnet.sym.FullyConnected"], "function", ["None"], ["", "def", "get_classifier", "(", "input_data", ",", "num_classes", ",", "**", "kwargs", ")", ":", "\n", "    ", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "input_data", ",", "name", "=", "\"flatten\"", ")", "\n", "fc6", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "4096", ",", "name", "=", "\"fc6\"", ")", "\n", "relu6", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "fc6", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu6\"", ")", "\n", "drop6", "=", "mx", ".", "sym", ".", "Dropout", "(", "data", "=", "relu6", ",", "p", "=", "0.5", ",", "name", "=", "\"drop6\"", ")", "\n", "fc7", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "drop6", ",", "num_hidden", "=", "4096", ",", "name", "=", "\"fc7\"", ")", "\n", "relu7", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "fc7", ",", "act_type", "=", "\"relu\"", ",", "name", "=", "\"relu7\"", ")", "\n", "drop7", "=", "mx", ".", "sym", ".", "Dropout", "(", "data", "=", "relu7", ",", "p", "=", "0.5", ",", "name", "=", "\"drop7\"", ")", "\n", "fc8", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "drop7", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "\"fc8\"", ")", "\n", "return", "fc8", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.vgg.get_symbol": [[48, 77], ["mxnet.sym.Variable", "vgg.get_feature", "vgg.get_classifier", "mxnet.sym.SoftmaxOutput", "ValueError", "mxnet.sym.Cast", "mxnet.sym.Cast"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.vgg.get_feature", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.vgg.get_classifier"], ["", "def", "get_symbol", "(", "num_classes", ",", "num_layers", "=", "11", ",", "batch_norm", "=", "False", ",", "dtype", "=", "'float32'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    num_classes : int, default 1000\n        Number of classification classes.\n    num_layers : int\n        Number of layers for the variant of densenet. Options are 11, 13, 16, 19.\n    batch_norm : bool, default False\n        Use batch normalization.\n    dtype: str, float32 or float16\n        Data precision.\n    \"\"\"", "\n", "vgg_spec", "=", "{", "11", ":", "(", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", ")", ",", "\n", "13", ":", "(", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", ")", ",", "\n", "16", ":", "(", "[", "2", ",", "2", ",", "3", ",", "3", ",", "3", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", ")", ",", "\n", "19", ":", "(", "[", "2", ",", "2", ",", "4", ",", "4", ",", "4", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", ")", "}", "\n", "if", "num_layers", "not", "in", "vgg_spec", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalide num_layers {}. Possible choices are 11,13,16,19.\"", ".", "format", "(", "num_layers", ")", ")", "\n", "", "layers", ",", "filters", "=", "vgg_spec", "[", "num_layers", "]", "\n", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "if", "dtype", "==", "'float16'", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "data", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "", "feature", "=", "get_feature", "(", "data", ",", "layers", ",", "filters", ",", "batch_norm", ")", "\n", "classifier", "=", "get_classifier", "(", "feature", ",", "num_classes", ")", "\n", "if", "dtype", "==", "'float16'", ":", "\n", "        ", "classifier", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "classifier", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "symbol", "=", "mx", ".", "sym", ".", "SoftmaxOutput", "(", "data", "=", "classifier", ",", "name", "=", "'softmax'", ")", "\n", "return", "symbol", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.MNetV2Gen.__init__": [[175, 183], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_wh", ",", "multiplier", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "MNetV2Gen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_wh", "=", "data_wh", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "data_wh", "in", "MNETV2_CONFIGS_MAP", ":", "\n", "            ", "self", ".", "MNetConfigs", "=", "MNETV2_CONFIGS_MAP", "[", "self", ".", "data_wh", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "MNetConfigs", "=", "MNETV2_CONFIGS_MAP", "[", "(", "224", ",", "224", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.MNetV2Gen.genNet": [[184, 238], ["mxnet.sym.Variable", "igcv3_wider.MNetV2Gen.MNetConfigs.update", "int", "igcv3_wider.mobilenet_unit", "enumerate", "int", "igcv3_wider.mobilenet_unit", "int", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "round", "int", "print", "igcv3_wider.invresi_blocks", "int", "round", "round"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.invresi_blocks"], ["", "", "def", "genNet", "(", "self", ",", "class_num", "=", "1000", ",", "**", "configs", ")", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "'data'", ")", "\n", "self", ".", "MNetConfigs", ".", "update", "(", "configs", ")", "\n", "# first conv2d block", "\n", "first_c", "=", "int", "(", "round", "(", "self", ".", "MNetConfigs", "[", "'firstconv_filter_num'", "]", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "first_c", "%", "2", "!=", "0", ":", "\n", "            ", "first_c", "=", "first_c", "+", "1", "\n", "", "first_layer", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "first_c", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'first-3x3-conv'", "\n", ")", "\n", "last_bottleneck_layer", "=", "first_layer", "\n", "in_c", "=", "first_c", "\n", "# bottleneck sequences", "\n", "for", "i", ",", "layer_setting", "in", "enumerate", "(", "self", ".", "MNetConfigs", "[", "'bottleneck_params_list'", "]", ")", ":", "\n", "            ", "t", ",", "c", ",", "n", ",", "s", "=", "layer_setting", "\n", "c", "=", "int", "(", "round", "(", "c", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "c", "%", "2", "!=", "0", ":", "\n", "                ", "c", "=", "c", "+", "1", "\n", "", "print", "(", "\"channels:%d\"", "%", "c", ")", "\n", "last_bottleneck_layer", "=", "invresi_blocks", "(", "\n", "data", "=", "last_bottleneck_layer", ",", "\n", "in_c", "=", "in_c", ",", "t", "=", "t", ",", "c", "=", "c", ",", "n", "=", "n", ",", "s", "=", "s", ",", "\n", "prefix", "=", "'seq-%d'", "%", "i", "\n", ")", "\n", "in_c", "=", "int", "(", "round", "(", "c", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "in_c", "%", "2", "!=", "0", ":", "\n", "                ", "in_c", "=", "c", "+", "1", "\n", "# last conv2d block before global pooling", "\n", "", "", "num_filter", "=", "int", "(", "1280", "*", "self", ".", "multiplier", ")", "\n", "if", "num_filter", "!=", "0", ":", "\n", "            ", "num_filter", "=", "num_filter", "+", "1", "\n", "", "last_fm", "=", "mobilenet_unit", "(", "\n", "data", "=", "last_bottleneck_layer", ",", "\n", "num_filter", "=", "num_filter", "if", "self", ".", "multiplier", ">", "1.0", "else", "1280", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'last-1x1-conv'", "\n", ")", "\n", "# global average pooling", "\n", "pool_size", "=", "int", "(", "self", ".", "data_wh", "[", "0", "]", "/", "32", ")", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "last_fm", ",", "kernel", "=", "(", "pool_size", ",", "pool_size", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"avg\"", ",", "name", "=", "\"global_pool\"", ",", "global_pool", "=", "True", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool", ",", "name", "=", "\"flatten\"", ")", "\n", "fc", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "class_num", ",", "name", "=", "'fc'", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc", ",", "name", "=", "'softmax'", ")", "\n", "\n", "return", "softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.MNetV2Gen.__call__": [[239, 252], ["igcv3_wider.MNetV2Gen.genNet", "igcv3_wider.MNetV2Gen.get_internals", "type", "type", "layer_out.strip", "layer_nm.strip"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.MNetV2Gen.genNet"], ["", "def", "__call__", "(", "self", ",", "class_num", "=", "1000", ",", "layer_out", "=", "None", ",", "**", "configs", ")", ":", "\n", "# build the whole architecture of mobilenet v2 here", "\n", "        ", "sym", "=", "self", ".", "genNet", "(", "class_num", "=", "class_num", ",", "**", "configs", ")", "\n", "if", "layer_out", "is", "None", ":", "\n", "            ", "return", "sym", "\n", "\n", "", "internals", "=", "sym", ".", "get_internals", "(", ")", "\n", "if", "type", "(", "layer_out", ")", "is", "list", "or", "type", "(", "layer_out", ")", "is", "tuple", ":", "\n", "            ", "layers_out", "=", "[", "internals", "[", "layer_nm", ".", "strip", "(", ")", "+", "'_output'", "]", "for", "layer_nm", "in", "layer_out", "]", "\n", "return", "layers_out", "\n", "", "else", ":", "\n", "            ", "layer_out", "=", "internals", "[", "layer_out", ".", "strip", "(", ")", "+", "'_output'", "]", "\n", "return", "layer_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.relu6": [[9, 11], ["mxnet.sym.clip"], "function", ["None"], ["def", "relu6", "(", "data", ",", "prefix", ")", ":", "\n", "    ", "return", "mx", ".", "sym", ".", "clip", "(", "data", ",", "0", ",", "6", ",", "name", "=", "'%s-relu6'", "%", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.shortcut": [[12, 15], ["mxnet.sym.elemwise_add"], "function", ["None"], ["", "def", "shortcut", "(", "data_in", ",", "data_residual", ",", "prefix", ")", ":", "\n", "    ", "out", "=", "mx", ".", "sym", ".", "elemwise_add", "(", "data_in", ",", "data_residual", ",", "name", "=", "'%s-shortcut'", "%", "prefix", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.permutation": [[16, 21], ["mxnet.sym.reshape", "mxnet.sym.swapaxes", "mxnet.sym.reshape"], "function", ["None"], ["", "def", "permutation", "(", "data", ",", "groups", ")", ":", "\n", "\t", "data", "=", "mx", ".", "sym", ".", "reshape", "(", "data", ",", "shape", "=", "(", "0", ",", "-", "4", ",", "groups", ",", "-", "1", ",", "-", "2", ")", ")", "\n", "data", "=", "mx", ".", "sym", ".", "swapaxes", "(", "data", ",", "1", ",", "2", ")", "\n", "data", "=", "mx", ".", "sym", ".", "reshape", "(", "data", ",", "shape", "=", "(", "0", ",", "-", "3", ",", "-", "2", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.mobilenet_unit": [[22, 38], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "igcv3_wider.relu6"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.relu6"], ["", "def", "mobilenet_unit", "(", "data", ",", "num_filter", "=", "1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_group", "=", "1", ",", "if_act", "=", "True", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "kernel", ",", "\n", "num_group", "=", "num_group", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "pad", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "'%s-conv2d'", "%", "prefix", ")", "\n", "bn", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "'%s-batchnorm'", "%", "prefix", ",", "fix_gamma", "=", "False", ",", "use_global_stats", "=", "False", ",", "eps", "=", "1e-5", ")", "\n", "if", "if_act", ":", "\n", "        ", "act", "=", "relu6", "(", "bn", ",", "prefix", ")", "\n", "return", "act", "\n", "", "else", ":", "\n", "        ", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.inverted_residual_unit": [[39, 83], ["int", "igcv3_wider.mobilenet_unit", "igcv3_wider.permutation", "igcv3_wider.mobilenet_unit", "igcv3_wider.mobilenet_unit", "igcv3_wider.permutation", "round", "igcv3_wider.shortcut"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.permutation", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.permutation", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.shortcut"], ["", "", "def", "inverted_residual_unit", "(", "data", ",", "num_in_filter", ",", "num_filter", ",", "ifshortcut", ",", "stride", ",", "kernel", ",", "pad", ",", "expansion_factor", ",", "prefix", ")", ":", "\n", "    ", "num_expfilter", "=", "int", "(", "round", "(", "num_in_filter", "*", "expansion_factor", ")", ")", "\n", "\n", "channel_expand", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "2", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-exp'", "%", "prefix", ",", "\n", ")", "\n", "channel_expand", "=", "permutation", "(", "data", "=", "channel_expand", ",", "groups", "=", "2", ")", "\n", "bottleneck_conv", "=", "mobilenet_unit", "(", "\n", "data", "=", "channel_expand", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "stride", "=", "stride", ",", "\n", "kernel", "=", "kernel", ",", "\n", "pad", "=", "pad", ",", "\n", "num_group", "=", "num_expfilter", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-depthwise'", "%", "prefix", ",", "\n", ")", "\n", "linear_out", "=", "mobilenet_unit", "(", "\n", "data", "=", "bottleneck_conv", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "2", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-linear'", "%", "prefix", "\n", ")", "\n", "linear_output", "=", "permutation", "(", "data", "=", "linear_out", ",", "groups", "=", "num_filter", "/", "2", ")", "\n", "if", "ifshortcut", ":", "\n", "        ", "out", "=", "shortcut", "(", "\n", "data_in", "=", "data", ",", "\n", "data_residual", "=", "linear_out", ",", "\n", "prefix", "=", "prefix", ",", "\n", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "linear_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.NLinverted_residual_unit": [[84, 126], ["int", "igcv3_wider.mobilenet_unit", "igcv3_wider.mobilenet_unit", "igcv3_wider.mobilenet_unit", "round", "igcv3_wider.shortcut"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.shortcut"], ["", "", "def", "NLinverted_residual_unit", "(", "data", ",", "num_in_filter", ",", "num_filter", ",", "ifshortcut", ",", "stride", ",", "kernel", ",", "pad", ",", "expansion_factor", ",", "prefix", ")", ":", "\n", "    ", "num_expfilter", "=", "int", "(", "round", "(", "num_in_filter", "*", "expansion_factor", ")", ")", "\n", "\n", "channel_expand", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "1", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-exp'", "%", "prefix", ",", "\n", ")", "\n", "bottleneck_conv", "=", "mobilenet_unit", "(", "\n", "data", "=", "channel_expand", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "stride", "=", "stride", ",", "\n", "kernel", "=", "kernel", ",", "\n", "pad", "=", "pad", ",", "\n", "num_group", "=", "num_expfilter", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-depthwise'", "%", "prefix", ",", "\n", ")", "\n", "linear_out", "=", "mobilenet_unit", "(", "\n", "data", "=", "bottleneck_conv", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "1", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-linear'", "%", "prefix", "\n", ")", "\n", "if", "ifshortcut", ":", "\n", "        ", "out", "=", "shortcut", "(", "\n", "data_in", "=", "data", ",", "\n", "data_residual", "=", "linear_out", ",", "\n", "prefix", "=", "prefix", ",", "\n", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "linear_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.invresi_blocks": [[127, 157], ["igcv3_wider.inverted_residual_unit", "print", "print", "range", "igcv3_wider.inverted_residual_unit"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit"], ["", "", "def", "invresi_blocks", "(", "data", ",", "in_c", ",", "t", ",", "c", ",", "n", ",", "s", ",", "prefix", ")", ":", "\n", "    ", "first_block", "=", "inverted_residual_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_in_filter", "=", "in_c", ",", "\n", "num_filter", "=", "c", ",", "\n", "ifshortcut", "=", "False", ",", "\n", "stride", "=", "(", "s", ",", "s", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "prefix", "=", "'%s-block0'", "%", "prefix", "\n", ")", "\n", "print", "(", "in_c", ")", "\n", "print", "(", "c", ")", "\n", "last_residual_block", "=", "first_block", "\n", "last_c", "=", "c", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "last_residual_block", "=", "inverted_residual_unit", "(", "\n", "data", "=", "last_residual_block", ",", "\n", "num_in_filter", "=", "last_c", ",", "\n", "num_filter", "=", "c", ",", "\n", "ifshortcut", "=", "True", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "prefix", "=", "'%s-block%d'", "%", "(", "prefix", ",", "i", ")", "\n", ")", "\n", "", "return", "last_residual_block", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_wider.get_symbol": [[253, 257], ["igcv3_wider.MNetV2Gen", "MNetV2Gen."], "function", ["None"], ["", "", "", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "multiplier", "=", "1.0", ")", ":", "\n", "    ", "mnetgen", "=", "MNetV2Gen", "(", "(", "224", ",", "224", ")", ",", "multiplier", "=", "multiplier", ")", "\n", "mnetv2_sym", "=", "mnetgen", "(", "class_num", "=", "num_classes", ",", "layer_out", "=", "None", ")", "\n", "return", "mnetv2_sym", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2_gluon.get_symbol": [[38, 62], ["mxnet.cpu", "mxnet.gluon.model_zoo.vision.mobilenet.MobileNetV2", "mxnet.gluon.model_zoo.vision.mobilenet.MobileNetV2.initialize", "mxnet.gluon.model_zoo.vision.mobilenet.MobileNetV2.hybridize", "mxnet.sym.var", "mxnet.gluon.model_zoo.vision.mobilenet.MobileNetV2.", "mxnet.sym.SoftmaxOutput", "mxnet.init.Xavier"], "function", ["None"], ["def", "get_symbol", "(", "num_classes", "=", "1000", ",", "multiplier", "=", "1.0", ",", "ctx", "=", "mx", ".", "cpu", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"MobileNetV2 model from the\n    `\"Inverted Residuals and Linear Bottlenecks:\n      Mobile Networks for  Classification, Detection and Segmentation\"\n    <https://arxiv.org/abs/1801.04381>`_ paper.\n\n    Parameters\n    ----------\n    num_classes : int, default 1000\n        Number of classes for the output layer.\n    multiplier : float, default 1.0\n        The width multiplier for controling the model size. The actual number of channels\n        is equal to the original channel size multiplied by this multiplier.\n    ctx : Context, default CPU\n        The context in which to initialize the model weights.\n    \"\"\"", "\n", "net", "=", "MobileNetV2", "(", "multiplier", "=", "multiplier", ",", "classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "net", ".", "initialize", "(", "ctx", "=", "ctx", ",", "init", "=", "mx", ".", "init", ".", "Xavier", "(", ")", ")", "\n", "net", ".", "hybridize", "(", ")", "\n", "\n", "data", "=", "mx", ".", "sym", ".", "var", "(", "'data'", ")", "\n", "out", "=", "net", "(", "data", ")", "\n", "sym", "=", "mx", ".", "sym", ".", "SoftmaxOutput", "(", "out", ",", "name", "=", "'softmax'", ")", "\n", "return", "sym", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2_gluon.plot_net": [[64, 73], ["mobilenetv2_gluon.get_symbol", "mxnet.viz.plot_network().view", "mxnet.viz.plot_network"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol"], ["", "def", "plot_net", "(", ")", ":", "\n", "    ", "\"\"\"\n    Visualize the network.\n    \"\"\"", "\n", "sym", "=", "get_symbol", "(", "1000", ",", "prefix", "=", "'mob_'", ")", "\n", "\n", "# plot network graph", "\n", "mx", ".", "viz", ".", "plot_network", "(", "sym", ",", "shape", "=", "{", "'data'", ":", "(", "8", ",", "3", ",", "224", ",", "224", ")", "}", ",", "\n", "node_attrs", "=", "{", "'shape'", ":", "'oval'", ",", "'fixedsize'", ":", "'fasl==false'", "}", ")", ".", "view", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.MNetV2Gen.__init__": [[123, 131], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_wh", ",", "multiplier", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "MNetV2Gen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_wh", "=", "data_wh", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "data_wh", "in", "MNETV2_CONFIGS_MAP", ":", "\n", "            ", "self", ".", "MNetConfigs", "=", "MNETV2_CONFIGS_MAP", "[", "self", ".", "data_wh", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "MNetConfigs", "=", "MNETV2_CONFIGS_MAP", "[", "(", "224", ",", "224", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.MNetV2Gen.genNet": [[132, 177], ["mxnet.sym.Variable", "mobilenetv2.MNetV2Gen.MNetConfigs.update", "int", "mobilenetv2.mobilenet_unit", "enumerate", "mobilenetv2.mobilenet_unit", "int", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "round", "print", "mobilenetv2.invresi_blocks", "int", "round", "int", "int", "round"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.invresi_blocks"], ["", "", "def", "genNet", "(", "self", ",", "class_num", "=", "1000", ",", "**", "configs", ")", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "'data'", ")", "\n", "self", ".", "MNetConfigs", ".", "update", "(", "configs", ")", "\n", "# first conv2d block", "\n", "first_c", "=", "int", "(", "round", "(", "self", ".", "MNetConfigs", "[", "'firstconv_filter_num'", "]", "*", "self", ".", "multiplier", ")", ")", "\n", "first_layer", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "first_c", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'first-3x3-conv'", "\n", ")", "\n", "last_bottleneck_layer", "=", "first_layer", "\n", "in_c", "=", "first_c", "\n", "\n", "# bottleneck sequences", "\n", "for", "i", ",", "layer_setting", "in", "enumerate", "(", "self", ".", "MNetConfigs", "[", "'bottleneck_params_list'", "]", ")", ":", "\n", "            ", "t", ",", "c", ",", "n", ",", "s", "=", "layer_setting", "\n", "print", "(", "\"channel%d\"", "%", "c", ")", "\n", "last_bottleneck_layer", "=", "invresi_blocks", "(", "\n", "data", "=", "last_bottleneck_layer", ",", "\n", "in_c", "=", "in_c", ",", "t", "=", "t", ",", "c", "=", "int", "(", "round", "(", "c", "*", "self", ".", "multiplier", ")", ")", ",", "n", "=", "n", ",", "s", "=", "s", ",", "\n", "prefix", "=", "'seq-%d'", "%", "i", "\n", ")", "\n", "in_c", "=", "int", "(", "round", "(", "c", "*", "self", ".", "multiplier", ")", ")", "\n", "# last conv2d block before global pooling", "\n", "", "last_fm", "=", "mobilenet_unit", "(", "\n", "data", "=", "last_bottleneck_layer", ",", "\n", "num_filter", "=", "int", "(", "1280", "*", "self", ".", "multiplier", ")", "if", "self", ".", "multiplier", ">", "1.0", "else", "1280", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'last-1x1-conv'", "\n", ")", "\n", "# global average pooling", "\n", "pool_size", "=", "int", "(", "self", ".", "data_wh", "[", "0", "]", "/", "32", ")", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "last_fm", ",", "kernel", "=", "(", "pool_size", ",", "pool_size", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"avg\"", ",", "name", "=", "\"global_pool\"", ",", "global_pool", "=", "True", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool", ",", "name", "=", "\"flatten\"", ")", "\n", "fc", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "class_num", ",", "name", "=", "'fc'", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc", ",", "name", "=", "'softmax'", ")", "\n", "\n", "return", "softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.MNetV2Gen.__call__": [[178, 191], ["mobilenetv2.MNetV2Gen.genNet", "mobilenetv2.MNetV2Gen.get_internals", "type", "type", "layer_out.strip", "layer_nm.strip"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.MNetV2Gen.genNet"], ["", "def", "__call__", "(", "self", ",", "class_num", "=", "1000", ",", "layer_out", "=", "None", ",", "**", "configs", ")", ":", "\n", "# build the whole architecture of mobilenet v2 here", "\n", "        ", "sym", "=", "self", ".", "genNet", "(", "class_num", "=", "class_num", ",", "**", "configs", ")", "\n", "if", "layer_out", "is", "None", ":", "\n", "            ", "return", "sym", "\n", "\n", "", "internals", "=", "sym", ".", "get_internals", "(", ")", "\n", "if", "type", "(", "layer_out", ")", "is", "list", "or", "type", "(", "layer_out", ")", "is", "tuple", ":", "\n", "            ", "layers_out", "=", "[", "internals", "[", "layer_nm", ".", "strip", "(", ")", "+", "'_output'", "]", "for", "layer_nm", "in", "layer_out", "]", "\n", "return", "layers_out", "\n", "", "else", ":", "\n", "            ", "layer_out", "=", "internals", "[", "layer_out", ".", "strip", "(", ")", "+", "'_output'", "]", "\n", "return", "layer_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.relu6": [[9, 11], ["mxnet.sym.clip"], "function", ["None"], ["def", "relu6", "(", "data", ",", "prefix", ")", ":", "\n", "    ", "return", "mx", ".", "sym", ".", "clip", "(", "data", ",", "0", ",", "6", ",", "name", "=", "'%s-relu6'", "%", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.shortcut": [[12, 15], ["mxnet.sym.elemwise_add"], "function", ["None"], ["", "def", "shortcut", "(", "data_in", ",", "data_residual", ",", "prefix", ")", ":", "\n", "    ", "out", "=", "mx", ".", "sym", ".", "elemwise_add", "(", "data_in", ",", "data_residual", ",", "name", "=", "'%s-shortcut'", "%", "prefix", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.mobilenet_unit": [[16, 32], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mobilenetv2.relu6"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.relu6"], ["", "def", "mobilenet_unit", "(", "data", ",", "num_filter", "=", "1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_group", "=", "1", ",", "if_act", "=", "True", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "kernel", ",", "\n", "num_group", "=", "num_group", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "pad", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "'%s-conv2d'", "%", "prefix", ")", "\n", "bn", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "'%s-batchnorm'", "%", "prefix", ",", "fix_gamma", "=", "False", ",", "use_global_stats", "=", "False", ",", "eps", "=", "1e-5", ")", "\n", "if", "if_act", ":", "\n", "        ", "act", "=", "relu6", "(", "bn", ",", "prefix", ")", "\n", "return", "act", "\n", "", "else", ":", "\n", "        ", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.inverted_residual_unit": [[33, 75], ["int", "mobilenetv2.mobilenet_unit", "mobilenetv2.mobilenet_unit", "mobilenetv2.mobilenet_unit", "round", "mobilenetv2.shortcut"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.shortcut"], ["", "", "def", "inverted_residual_unit", "(", "data", ",", "num_in_filter", ",", "num_filter", ",", "ifshortcut", ",", "stride", ",", "kernel", ",", "pad", ",", "expansion_factor", ",", "prefix", ")", ":", "\n", "    ", "num_expfilter", "=", "int", "(", "round", "(", "num_in_filter", "*", "expansion_factor", ")", ")", "\n", "\n", "channel_expand", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "1", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-exp'", "%", "prefix", ",", "\n", ")", "\n", "bottleneck_conv", "=", "mobilenet_unit", "(", "\n", "data", "=", "channel_expand", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "stride", "=", "stride", ",", "\n", "kernel", "=", "kernel", ",", "\n", "pad", "=", "pad", ",", "\n", "num_group", "=", "num_expfilter", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-depthwise'", "%", "prefix", ",", "\n", ")", "\n", "linear_out", "=", "mobilenet_unit", "(", "\n", "data", "=", "bottleneck_conv", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "1", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-linear'", "%", "prefix", "\n", ")", "\n", "if", "ifshortcut", ":", "\n", "        ", "out", "=", "shortcut", "(", "\n", "data_in", "=", "data", ",", "\n", "data_residual", "=", "linear_out", ",", "\n", "prefix", "=", "prefix", ",", "\n", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "linear_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.invresi_blocks": [[76, 105], ["mobilenetv2.inverted_residual_unit", "range", "mobilenetv2.inverted_residual_unit"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit"], ["", "", "def", "invresi_blocks", "(", "data", ",", "in_c", ",", "t", ",", "c", ",", "n", ",", "s", ",", "prefix", ")", ":", "\n", "    ", "first_block", "=", "inverted_residual_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_in_filter", "=", "in_c", ",", "\n", "num_filter", "=", "c", ",", "\n", "ifshortcut", "=", "False", ",", "\n", "stride", "=", "(", "s", ",", "s", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "prefix", "=", "'%s-block0'", "%", "prefix", "\n", ")", "\n", "\n", "last_residual_block", "=", "first_block", "\n", "last_c", "=", "c", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "last_residual_block", "=", "inverted_residual_unit", "(", "\n", "data", "=", "last_residual_block", ",", "\n", "num_in_filter", "=", "last_c", ",", "\n", "num_filter", "=", "c", ",", "\n", "ifshortcut", "=", "True", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "prefix", "=", "'%s-block%d'", "%", "(", "prefix", ",", "i", ")", "\n", ")", "\n", "", "return", "last_residual_block", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mobilenetv2.get_symbol": [[192, 196], ["mobilenetv2.MNetV2Gen", "MNetV2Gen."], "function", ["None"], ["", "", "", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "multiplier", "=", "1.0", ")", ":", "\n", "    ", "mnetgen", "=", "MNetV2Gen", "(", "(", "224", ",", "224", ")", ",", "multiplier", "=", "multiplier", ")", "\n", "mnetv2_sym", "=", "mnetgen", "(", "class_num", "=", "num_classes", ",", "layer_out", "=", "None", ")", "\n", "return", "mnetv2_sym", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.Conv": [[35, 41], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation"], "function", ["None"], ["def", "Conv", "(", "data", ",", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "None", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "kernel", ",", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "no_bias", "=", "True", ",", "name", "=", "'%s%s_conv2d'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "bn", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "'%s%s_batchnorm'", "%", "(", "name", ",", "suffix", ")", ",", "fix_gamma", "=", "True", ")", "\n", "act", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn", ",", "act_type", "=", "'relu'", ",", "name", "=", "'%s%s_relu'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.Inception_stem": [[43, 68], ["inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "mxnet.sym.Pooling", "inception-v4.Conv", "mxnet.sym.Concat", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "mxnet.sym.Concat", "inception-v4.Conv", "mxnet.sym.Pooling", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception_stem", "(", "data", ",", "name", "=", "None", ")", ":", "\n", "    ", "c", "=", "Conv", "(", "data", ",", "32", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'%s_conv1_3*3'", "%", "name", ")", "\n", "c", "=", "Conv", "(", "c", ",", "32", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "name", "=", "'%s_conv2_3*3'", "%", "name", ")", "\n", "c", "=", "Conv", "(", "c", ",", "64", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'%s_conv3_3*3'", "%", "name", ")", "\n", "\n", "p1", "=", "mx", ".", "sym", ".", "Pooling", "(", "c", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ",", "name", "=", "'%s_maxpool_1'", "%", "name", ")", "\n", "c2", "=", "Conv", "(", "c", ",", "96", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'%s_conv4_3*3'", "%", "name", ")", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "p1", ",", "c2", "]", ",", "name", "=", "'%s_concat_1'", "%", "name", ")", "\n", "\n", "c1", "=", "Conv", "(", "concat", ",", "64", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv5_1*1'", "%", "name", ")", "\n", "c1", "=", "Conv", "(", "c1", ",", "96", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "name", "=", "'%s_conv6_3*3'", "%", "name", ")", "\n", "\n", "c2", "=", "Conv", "(", "concat", ",", "64", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv7_1*1'", "%", "name", ")", "\n", "c2", "=", "Conv", "(", "c2", ",", "64", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "'%s_conv8_7*1'", "%", "name", ")", "\n", "c2", "=", "Conv", "(", "c2", ",", "64", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "'%s_conv9_1*7'", "%", "name", ")", "\n", "c2", "=", "Conv", "(", "c2", ",", "96", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv10_3*3'", "%", "name", ")", "\n", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "c1", ",", "c2", "]", ",", "name", "=", "'%s_concat_2'", "%", "name", ")", "\n", "\n", "c1", "=", "Conv", "(", "concat", ",", "192", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'%s_conv11_3*3'", "%", "name", ")", "\n", "p1", "=", "mx", ".", "sym", ".", "Pooling", "(", "concat", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ",", "name", "=", "'%s_maxpool_2'", "%", "name", ")", "\n", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "c1", ",", "p1", "]", ",", "name", "=", "'%s_concat_3'", "%", "name", ")", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.InceptionA": [[70, 86], ["mxnet.sym.Pooling", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "InceptionA", "(", "input", ",", "name", "=", "None", ")", ":", "\n", "    ", "p1", "=", "mx", ".", "sym", ".", "Pooling", "(", "input", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'%s_avgpool_1'", "%", "name", ")", "\n", "c1", "=", "Conv", "(", "p1", ",", "96", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv1_1*1'", "%", "name", ")", "\n", "\n", "c2", "=", "Conv", "(", "input", ",", "96", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv2_1*1'", "%", "name", ")", "\n", "\n", "c3", "=", "Conv", "(", "input", ",", "64", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv3_1*1'", "%", "name", ")", "\n", "c3", "=", "Conv", "(", "c3", ",", "96", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'%s_conv4_3*3'", "%", "name", ")", "\n", "\n", "c4", "=", "Conv", "(", "input", ",", "64", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv5_1*1'", "%", "name", ")", "\n", "c4", "=", "Conv", "(", "c4", ",", "96", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'%s_conv6_3*3'", "%", "name", ")", "\n", "c4", "=", "Conv", "(", "c4", ",", "96", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'%s_conv7_3*3'", "%", "name", ")", "\n", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "c1", ",", "c2", ",", "c3", ",", "c4", "]", ",", "name", "=", "'%s_concat_1'", "%", "name", ")", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.ReductionA": [[88, 100], ["mxnet.sym.Pooling", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "ReductionA", "(", "input", ",", "name", "=", "None", ")", ":", "\n", "    ", "p1", "=", "mx", ".", "sym", ".", "Pooling", "(", "input", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ",", "name", "=", "'%s_maxpool_1'", "%", "name", ")", "\n", "\n", "c2", "=", "Conv", "(", "input", ",", "384", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'%s_conv1_3*3'", "%", "name", ")", "\n", "\n", "c3", "=", "Conv", "(", "input", ",", "192", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv2_1*1'", "%", "name", ")", "\n", "c3", "=", "Conv", "(", "c3", ",", "224", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'%s_conv3_3*3'", "%", "name", ")", "\n", "c3", "=", "Conv", "(", "c3", ",", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv4_3*3'", "%", "name", ")", "\n", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "p1", ",", "c2", ",", "c3", "]", ",", "name", "=", "'%s_concat_1'", "%", "name", ")", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.InceptionB": [[101, 121], ["mxnet.sym.Pooling", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "InceptionB", "(", "input", ",", "name", "=", "None", ")", ":", "\n", "    ", "p1", "=", "mx", ".", "sym", ".", "Pooling", "(", "input", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'%s_avgpool_1'", "%", "name", ")", "\n", "c1", "=", "Conv", "(", "p1", ",", "128", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv1_1*1'", "%", "name", ")", "\n", "\n", "c2", "=", "Conv", "(", "input", ",", "384", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv2_1*1'", "%", "name", ")", "\n", "\n", "c3", "=", "Conv", "(", "input", ",", "192", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv3_1*1'", "%", "name", ")", "\n", "c3", "=", "Conv", "(", "c3", ",", "224", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "'%s_conv4_1*7'", "%", "name", ")", "\n", "#paper wrong", "\n", "c3", "=", "Conv", "(", "c3", ",", "256", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "'%s_conv5_1*7'", "%", "name", ")", "\n", "\n", "c4", "=", "Conv", "(", "input", ",", "192", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv6_1*1'", "%", "name", ")", "\n", "c4", "=", "Conv", "(", "c4", ",", "192", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "'%s_conv7_1*7'", "%", "name", ")", "\n", "c4", "=", "Conv", "(", "c4", ",", "224", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "'%s_conv8_7*1'", "%", "name", ")", "\n", "c4", "=", "Conv", "(", "c4", ",", "224", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "'%s_conv9_1*7'", "%", "name", ")", "\n", "c4", "=", "Conv", "(", "c4", ",", "256", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "'%s_conv10_7*1'", "%", "name", ")", "\n", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "c1", ",", "c2", ",", "c3", ",", "c4", "]", ",", "name", "=", "'%s_concat_1'", "%", "name", ")", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.ReductionB": [[122, 136], ["mxnet.sym.Pooling", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "ReductionB", "(", "input", ",", "name", "=", "None", ")", ":", "\n", "    ", "p1", "=", "mx", ".", "sym", ".", "Pooling", "(", "input", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ",", "name", "=", "'%s_maxpool_1'", "%", "name", ")", "\n", "\n", "c2", "=", "Conv", "(", "input", ",", "192", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv1_1*1'", "%", "name", ")", "\n", "c2", "=", "Conv", "(", "c2", ",", "192", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'%s_conv2_3*3'", "%", "name", ")", "\n", "\n", "c3", "=", "Conv", "(", "input", ",", "256", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv3_1*1'", "%", "name", ")", "\n", "c3", "=", "Conv", "(", "c3", ",", "256", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "'%s_conv4_1*7'", "%", "name", ")", "\n", "c3", "=", "Conv", "(", "c3", ",", "320", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "'%s_conv5_7*1'", "%", "name", ")", "\n", "c3", "=", "Conv", "(", "c3", ",", "320", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'%s_conv6_3*3'", "%", "name", ")", "\n", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "p1", ",", "c2", ",", "c3", "]", ",", "name", "=", "'%s_concat_1'", "%", "name", ")", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.InceptionC": [[138, 157], ["mxnet.sym.Pooling", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "inception-v4.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "InceptionC", "(", "input", ",", "name", "=", "None", ")", ":", "\n", "    ", "p1", "=", "mx", ".", "sym", ".", "Pooling", "(", "input", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'%s_avgpool_1'", "%", "name", ")", "\n", "c1", "=", "Conv", "(", "p1", ",", "256", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv1_1*1'", "%", "name", ")", "\n", "\n", "c2", "=", "Conv", "(", "input", ",", "256", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv2_1*1'", "%", "name", ")", "\n", "\n", "c3", "=", "Conv", "(", "input", ",", "384", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv3_1*1'", "%", "name", ")", "\n", "c3_1", "=", "Conv", "(", "c3", ",", "256", ",", "kernel", "=", "(", "1", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "name", "=", "'%s_conv4_3*1'", "%", "name", ")", "\n", "c3_2", "=", "Conv", "(", "c3", ",", "256", ",", "kernel", "=", "(", "3", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "name", "=", "'%s_conv5_1*3'", "%", "name", ")", "\n", "\n", "c4", "=", "Conv", "(", "input", ",", "384", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "'%s_conv6_1*1'", "%", "name", ")", "\n", "c4", "=", "Conv", "(", "c4", ",", "448", ",", "kernel", "=", "(", "1", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "name", "=", "'%s_conv7_1*3'", "%", "name", ")", "\n", "c4", "=", "Conv", "(", "c4", ",", "512", ",", "kernel", "=", "(", "3", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "name", "=", "'%s_conv8_3*1'", "%", "name", ")", "\n", "c4_1", "=", "Conv", "(", "c4", ",", "256", ",", "kernel", "=", "(", "3", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "name", "=", "'%s_conv9_1*3'", "%", "name", ")", "\n", "c4_2", "=", "Conv", "(", "c4", ",", "256", ",", "kernel", "=", "(", "1", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "name", "=", "'%s_conv10_3*1'", "%", "name", ")", "\n", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "c1", ",", "c2", ",", "c3_1", ",", "c3_2", ",", "c4_1", ",", "c4_2", "]", ",", "name", "=", "'%s_concat'", "%", "name", ")", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.get_symbol": [[159, 216], ["mxnet.sym.Variable", "inception-v4.Inception_stem", "range", "inception-v4.ReductionA", "range", "inception-v4.ReductionB", "range", "mxnet.sym.Pooling", "mxnet.sym.Dropout", "mxnet.sym.Flatten", "mxnet.sym.FullyConnected", "mxnet.sym.SoftmaxOutput", "mxnet.sym.identity", "inception-v4.InceptionA", "inception-v4.InceptionB", "inception-v4.InceptionC", "mxnet.sym.Cast", "mxnet.sym.Cast"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.Inception_stem", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.ReductionA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.ReductionB", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.InceptionA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.InceptionB", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v4.InceptionC"], ["", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "dtype", "=", "'float32'", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "if", "dtype", "==", "'float32'", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "identity", "(", "data", "=", "data", ",", "name", "=", "'id'", ")", "\n", "", "else", ":", "\n", "        ", "if", "dtype", "==", "'float16'", ":", "\n", "            ", "data", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "data", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "", "", "x", "=", "Inception_stem", "(", "data", ",", "name", "=", "'in_stem'", ")", "\n", "\n", "#4 * InceptionA", "\n", "# x = InceptionA(x, name='in1A')", "\n", "# x = InceptionA(x, name='in2A')", "\n", "# x = InceptionA(x, name='in3A')", "\n", "# x = InceptionA(x, name='in4A')", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "x", "=", "InceptionA", "(", "x", ",", "name", "=", "'in%dA'", "%", "(", "i", "+", "1", ")", ")", "\n", "\n", "#Reduction A", "\n", "", "x", "=", "ReductionA", "(", "x", ",", "name", "=", "'re1A'", ")", "\n", "\n", "#7 * InceptionB", "\n", "# x = InceptionB(x, name='in1B')", "\n", "# x = InceptionB(x, name='in2B')", "\n", "# x = InceptionB(x, name='in3B')", "\n", "# x = InceptionB(x, name='in4B')", "\n", "# x = InceptionB(x, name='in5B')", "\n", "# x = InceptionB(x, name='in6B')", "\n", "# x = InceptionB(x, name='in7B')", "\n", "\n", "for", "i", "in", "range", "(", "7", ")", ":", "\n", "        ", "x", "=", "InceptionB", "(", "x", ",", "name", "=", "'in%dB'", "%", "(", "i", "+", "1", ")", ")", "\n", "\n", "#ReductionB", "\n", "", "x", "=", "ReductionB", "(", "x", ",", "name", "=", "'re1B'", ")", "\n", "\n", "#3 * InceptionC", "\n", "# x = InceptionC(x, name='in1C')", "\n", "# x = InceptionC(x, name='in2C')", "\n", "# x = InceptionC(x, name='in3C')", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "x", "=", "InceptionC", "(", "x", ",", "name", "=", "'in%dC'", "%", "(", "i", "+", "1", ")", ")", "\n", "\n", "#Average Pooling", "\n", "", "x", "=", "mx", ".", "sym", ".", "Pooling", "(", "x", ",", "kernel", "=", "(", "8", ",", "8", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'global_avgpool'", ")", "\n", "\n", "#Dropout", "\n", "x", "=", "mx", ".", "sym", ".", "Dropout", "(", "x", ",", "p", "=", "0.2", ")", "\n", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "x", ",", "name", "=", "'flatten'", ")", "\n", "fc1", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "flatten", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc1'", ")", "\n", "if", "dtype", "==", "'float16'", ":", "\n", "        ", "fc1", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "fc1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "softmax", "=", "mx", ".", "sym", ".", "SoftmaxOutput", "(", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.lenet.get_loc": [[25, 39], ["mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Flatten", "mxnet.symbol.FullyConnected"], "function", ["None"], ["def", "get_loc", "(", "data", ",", "attr", "=", "{", "'lr_mult'", ":", "'0.01'", "}", ")", ":", "\n", "    ", "\"\"\"\n    the localisation network in lenet-stn, it will increase acc about more than 1%,\n    when num-epoch >=15\n    \"\"\"", "\n", "loc", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "30", ",", "kernel", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "loc", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "loc", ",", "act_type", "=", "'relu'", ")", "\n", "loc", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "loc", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ")", "\n", "loc", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "loc", ",", "num_filter", "=", "60", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "loc", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "loc", ",", "act_type", "=", "'relu'", ")", "\n", "loc", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "loc", ",", "global_pool", "=", "True", ",", "kernel", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'avg'", ")", "\n", "loc", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "loc", ")", "\n", "loc", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "loc", ",", "num_hidden", "=", "6", ",", "name", "=", "\"stn_loc\"", ",", "attr", "=", "attr", ")", "\n", "return", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.lenet.get_symbol": [[41, 65], ["mxnet.symbol.Variable", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Convolution", "mxnet.symbol.Activation", "mxnet.symbol.Pooling", "mxnet.symbol.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.Activation", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "mxnet.sym.SpatialTransformer", "lenet.get_loc"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.lenet.get_loc"], ["", "def", "get_symbol", "(", "num_classes", "=", "10", ",", "add_stn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "'data'", ")", "\n", "if", "add_stn", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "SpatialTransformer", "(", "data", "=", "data", ",", "loc", "=", "get_loc", "(", "data", ")", ",", "target_shape", "=", "(", "28", ",", "28", ")", ",", "\n", "transform_type", "=", "\"affine\"", ",", "sampler_type", "=", "\"bilinear\"", ")", "\n", "# first conv", "\n", "", "conv1", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "data", ",", "kernel", "=", "(", "5", ",", "5", ")", ",", "num_filter", "=", "20", ")", "\n", "tanh1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv1", ",", "act_type", "=", "\"tanh\"", ")", "\n", "pool1", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "tanh1", ",", "pool_type", "=", "\"max\"", ",", "\n", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "# second conv", "\n", "conv2", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "pool1", ",", "kernel", "=", "(", "5", ",", "5", ")", ",", "num_filter", "=", "50", ")", "\n", "tanh2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv2", ",", "act_type", "=", "\"tanh\"", ")", "\n", "pool2", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "tanh2", ",", "pool_type", "=", "\"max\"", ",", "\n", "kernel", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "# first fullc", "\n", "flatten", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "pool2", ")", "\n", "fc1", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "500", ")", "\n", "tanh3", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "fc1", ",", "act_type", "=", "\"tanh\"", ")", "\n", "# second fullc", "\n", "fc2", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "tanh3", ",", "num_hidden", "=", "num_classes", ")", "\n", "# loss", "\n", "lenet", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc2", ",", "name", "=", "'softmax'", ")", "\n", "return", "lenet", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.ConvFactory": [[28, 38], ["mxnet.symbol.Convolution", "mxnet.symbol.BatchNorm", "mxnet.symbol.Activation"], "function", ["None"], ["def", "ConvFactory", "(", "data", ",", "num_filter", ",", "kernel", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "act_type", "=", "\"relu\"", ",", "mirror_attr", "=", "{", "}", ",", "with_act", "=", "True", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "symbol", ".", "Convolution", "(", "\n", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "kernel", ",", "stride", "=", "stride", ",", "pad", "=", "pad", ")", "\n", "bn", "=", "mx", ".", "symbol", ".", "BatchNorm", "(", "data", "=", "conv", ")", "\n", "if", "with_act", ":", "\n", "        ", "act", "=", "mx", ".", "symbol", ".", "Activation", "(", "\n", "data", "=", "bn", ",", "act_type", "=", "act_type", ",", "attr", "=", "mirror_attr", ")", "\n", "return", "act", "\n", "", "else", ":", "\n", "        ", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.block35": [[40, 58], ["inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Concat", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Activation"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "", "def", "block35", "(", "net", ",", "input_num_channels", ",", "scale", "=", "1.0", ",", "with_act", "=", "True", ",", "act_type", "=", "'relu'", ",", "mirror_attr", "=", "{", "}", ")", ":", "\n", "    ", "tower_conv", "=", "ConvFactory", "(", "net", ",", "32", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_0", "=", "ConvFactory", "(", "net", ",", "32", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_1", "=", "ConvFactory", "(", "tower_conv1_0", ",", "32", ",", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "tower_conv2_0", "=", "ConvFactory", "(", "net", ",", "32", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv2_1", "=", "ConvFactory", "(", "tower_conv2_0", ",", "48", ",", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "tower_conv2_2", "=", "ConvFactory", "(", "tower_conv2_1", ",", "64", ",", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "tower_mixed", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "tower_conv", ",", "tower_conv1_1", ",", "tower_conv2_2", "]", ")", "\n", "tower_out", "=", "ConvFactory", "(", "\n", "tower_mixed", ",", "input_num_channels", ",", "(", "1", ",", "1", ")", ",", "with_act", "=", "False", ")", "\n", "\n", "net", "=", "net", "+", "scale", "*", "tower_out", "\n", "if", "with_act", ":", "\n", "        ", "act", "=", "mx", ".", "symbol", ".", "Activation", "(", "\n", "data", "=", "net", ",", "act_type", "=", "act_type", ",", "attr", "=", "mirror_attr", ")", "\n", "return", "act", "\n", "", "else", ":", "\n", "        ", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.block17": [[60, 75], ["inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Concat", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Activation"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "", "def", "block17", "(", "net", ",", "input_num_channels", ",", "scale", "=", "1.0", ",", "with_act", "=", "True", ",", "act_type", "=", "'relu'", ",", "mirror_attr", "=", "{", "}", ")", ":", "\n", "    ", "tower_conv", "=", "ConvFactory", "(", "net", ",", "192", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_0", "=", "ConvFactory", "(", "net", ",", "129", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_1", "=", "ConvFactory", "(", "tower_conv1_0", ",", "160", ",", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "1", ",", "2", ")", ")", "\n", "tower_conv1_2", "=", "ConvFactory", "(", "tower_conv1_1", ",", "192", ",", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "2", ",", "1", ")", ")", "\n", "tower_mixed", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "tower_conv", ",", "tower_conv1_2", "]", ")", "\n", "tower_out", "=", "ConvFactory", "(", "\n", "tower_mixed", ",", "input_num_channels", ",", "(", "1", ",", "1", ")", ",", "with_act", "=", "False", ")", "\n", "net", "=", "net", "+", "scale", "*", "tower_out", "\n", "if", "with_act", ":", "\n", "        ", "act", "=", "mx", ".", "symbol", ".", "Activation", "(", "\n", "data", "=", "net", ",", "act_type", "=", "act_type", ",", "attr", "=", "mirror_attr", ")", "\n", "return", "act", "\n", "", "else", ":", "\n", "        ", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.block8": [[77, 92], ["inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Concat", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Activation"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "", "def", "block8", "(", "net", ",", "input_num_channels", ",", "scale", "=", "1.0", ",", "with_act", "=", "True", ",", "act_type", "=", "'relu'", ",", "mirror_attr", "=", "{", "}", ")", ":", "\n", "    ", "tower_conv", "=", "ConvFactory", "(", "net", ",", "192", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_0", "=", "ConvFactory", "(", "net", ",", "192", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_1", "=", "ConvFactory", "(", "tower_conv1_0", ",", "224", ",", "(", "1", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ")", "\n", "tower_conv1_2", "=", "ConvFactory", "(", "tower_conv1_1", ",", "256", ",", "(", "3", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "0", ")", ")", "\n", "tower_mixed", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "tower_conv", ",", "tower_conv1_2", "]", ")", "\n", "tower_out", "=", "ConvFactory", "(", "\n", "tower_mixed", ",", "input_num_channels", ",", "(", "1", ",", "1", ")", ",", "with_act", "=", "False", ")", "\n", "net", "=", "net", "+", "scale", "*", "tower_out", "\n", "if", "with_act", ":", "\n", "        ", "act", "=", "mx", ".", "symbol", ".", "Activation", "(", "\n", "data", "=", "net", ",", "act_type", "=", "act_type", ",", "attr", "=", "mirror_attr", ")", "\n", "return", "act", "\n", "", "else", ":", "\n", "        ", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.repeat": [[94, 99], ["range", "inception-resnet-v2.block35", "inception-resnet-v2.block17", "inception-resnet-v2.block8"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.block35", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.block17", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.block8"], ["", "", "def", "repeat", "(", "inputs", ",", "repetitions", ",", "layer", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "outputs", "=", "inputs", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "        ", "outputs", "=", "layer", "(", "outputs", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.get_symbol": [[101, 159], ["mxnet.symbol.Variable", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Pooling", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Pooling", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Pooling", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Concat", "inception-resnet-v2.repeat", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Pooling", "mxnet.symbol.Concat", "inception-resnet-v2.repeat", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Pooling", "mxnet.symbol.Concat", "inception-resnet-v2.repeat", "inception-resnet-v2.block8", "inception-resnet-v2.ConvFactory", "mxnet.symbol.Pooling", "mxnet.symbol.Flatten", "mxnet.symbol.Dropout", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.repeat", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.repeat", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.repeat", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-resnet-v2.block8", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "'data'", ")", "\n", "conv1a_3_3", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "32", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "conv2a_3_3", "=", "ConvFactory", "(", "conv1a_3_3", ",", "32", ",", "(", "3", ",", "3", ")", ")", "\n", "conv2b_3_3", "=", "ConvFactory", "(", "conv2a_3_3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "maxpool3a_3_3", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "conv2b_3_3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ")", "\n", "conv3b_1_1", "=", "ConvFactory", "(", "maxpool3a_3_3", ",", "80", ",", "(", "1", ",", "1", ")", ")", "\n", "conv4a_3_3", "=", "ConvFactory", "(", "conv3b_1_1", ",", "192", ",", "(", "3", ",", "3", ")", ")", "\n", "maxpool5a_3_3", "=", "mx", ".", "symbol", ".", "Pooling", "(", "\n", "data", "=", "conv4a_3_3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "tower_conv", "=", "ConvFactory", "(", "maxpool5a_3_3", ",", "96", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_0", "=", "ConvFactory", "(", "maxpool5a_3_3", ",", "48", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_1", "=", "ConvFactory", "(", "tower_conv1_0", ",", "64", ",", "(", "5", ",", "5", ")", ",", "pad", "=", "(", "2", ",", "2", ")", ")", "\n", "\n", "tower_conv2_0", "=", "ConvFactory", "(", "maxpool5a_3_3", ",", "64", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv2_1", "=", "ConvFactory", "(", "tower_conv2_0", ",", "96", ",", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "tower_conv2_2", "=", "ConvFactory", "(", "tower_conv2_1", ",", "96", ",", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "tower_pool3_0", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "maxpool5a_3_3", ",", "kernel", "=", "(", "\n", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'avg'", ")", "\n", "tower_conv3_1", "=", "ConvFactory", "(", "tower_pool3_0", ",", "64", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_5b_out", "=", "mx", ".", "symbol", ".", "Concat", "(", "\n", "*", "[", "tower_conv", ",", "tower_conv1_1", ",", "tower_conv2_2", ",", "tower_conv3_1", "]", ")", "\n", "net", "=", "repeat", "(", "tower_5b_out", ",", "10", ",", "block35", ",", "scale", "=", "0.17", ",", "input_num_channels", "=", "320", ")", "\n", "tower_conv", "=", "ConvFactory", "(", "net", ",", "384", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "tower_conv1_0", "=", "ConvFactory", "(", "net", ",", "256", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_1", "=", "ConvFactory", "(", "tower_conv1_0", ",", "256", ",", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_2", "=", "ConvFactory", "(", "tower_conv1_1", ",", "384", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "tower_pool", "=", "mx", ".", "symbol", ".", "Pooling", "(", "net", ",", "kernel", "=", "(", "\n", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ")", "\n", "net", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "tower_conv", ",", "tower_conv1_2", ",", "tower_pool", "]", ")", "\n", "net", "=", "repeat", "(", "net", ",", "20", ",", "block17", ",", "scale", "=", "0.1", ",", "input_num_channels", "=", "1088", ")", "\n", "tower_conv", "=", "ConvFactory", "(", "net", ",", "256", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv0_1", "=", "ConvFactory", "(", "tower_conv", ",", "384", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "tower_conv1", "=", "ConvFactory", "(", "net", ",", "256", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv1_1", "=", "ConvFactory", "(", "tower_conv1", ",", "288", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "tower_conv2", "=", "ConvFactory", "(", "net", ",", "256", ",", "(", "1", ",", "1", ")", ")", "\n", "tower_conv2_1", "=", "ConvFactory", "(", "tower_conv2", ",", "288", ",", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "tower_conv2_2", "=", "ConvFactory", "(", "tower_conv2_1", ",", "320", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "tower_pool", "=", "mx", ".", "symbol", ".", "Pooling", "(", "net", ",", "kernel", "=", "(", "\n", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ")", "\n", "net", "=", "mx", ".", "symbol", ".", "Concat", "(", "\n", "*", "[", "tower_conv0_1", ",", "tower_conv1_1", ",", "tower_conv2_2", ",", "tower_pool", "]", ")", "\n", "\n", "net", "=", "repeat", "(", "net", ",", "9", ",", "block8", ",", "scale", "=", "0.2", ",", "input_num_channels", "=", "2080", ")", "\n", "net", "=", "block8", "(", "net", ",", "with_act", "=", "False", ",", "input_num_channels", "=", "2080", ")", "\n", "\n", "net", "=", "ConvFactory", "(", "net", ",", "1536", ",", "(", "1", ",", "1", ")", ")", "\n", "net", "=", "mx", ".", "symbol", ".", "Pooling", "(", "net", ",", "kernel", "=", "(", "\n", "1", ",", "1", ")", ",", "global_pool", "=", "True", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "'avg'", ")", "\n", "net", "=", "mx", ".", "symbol", ".", "Flatten", "(", "net", ")", "\n", "net", "=", "mx", ".", "symbol", ".", "Dropout", "(", "data", "=", "net", ",", "p", "=", "0.2", ")", "\n", "net", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "net", ",", "num_hidden", "=", "num_classes", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "net", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.MNetV2Gen.__init__": [[175, 183], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_wh", ",", "multiplier", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "MNetV2Gen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_wh", "=", "data_wh", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "data_wh", "in", "MNETV2_CONFIGS_MAP", ":", "\n", "            ", "self", ".", "MNetConfigs", "=", "MNETV2_CONFIGS_MAP", "[", "self", ".", "data_wh", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "MNetConfigs", "=", "MNETV2_CONFIGS_MAP", "[", "(", "224", ",", "224", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.MNetV2Gen.genNet": [[184, 238], ["mxnet.sym.Variable", "igcv3.MNetV2Gen.MNetConfigs.update", "int", "igcv3.mobilenet_unit", "enumerate", "int", "igcv3.mobilenet_unit", "int", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "round", "int", "print", "igcv3.invresi_blocks", "int", "round", "round"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.invresi_blocks"], ["", "", "def", "genNet", "(", "self", ",", "class_num", "=", "1000", ",", "**", "configs", ")", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "'data'", ")", "\n", "self", ".", "MNetConfigs", ".", "update", "(", "configs", ")", "\n", "# first conv2d block", "\n", "first_c", "=", "int", "(", "round", "(", "self", ".", "MNetConfigs", "[", "'firstconv_filter_num'", "]", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "first_c", "%", "2", "!=", "0", ":", "\n", "            ", "first_c", "=", "first_c", "+", "1", "\n", "", "first_layer", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "first_c", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'first-3x3-conv'", "\n", ")", "\n", "last_bottleneck_layer", "=", "first_layer", "\n", "in_c", "=", "first_c", "\n", "# bottleneck sequences", "\n", "for", "i", ",", "layer_setting", "in", "enumerate", "(", "self", ".", "MNetConfigs", "[", "'bottleneck_params_list'", "]", ")", ":", "\n", "            ", "t", ",", "c", ",", "n", ",", "s", "=", "layer_setting", "\n", "c", "=", "int", "(", "round", "(", "c", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "c", "%", "2", "!=", "0", ":", "\n", "                ", "c", "=", "c", "+", "1", "\n", "", "print", "(", "\"channels:%d\"", "%", "c", ")", "\n", "last_bottleneck_layer", "=", "invresi_blocks", "(", "\n", "data", "=", "last_bottleneck_layer", ",", "\n", "in_c", "=", "in_c", ",", "t", "=", "t", ",", "c", "=", "c", ",", "n", "=", "n", ",", "s", "=", "s", ",", "\n", "prefix", "=", "'seq-%d'", "%", "i", "\n", ")", "\n", "in_c", "=", "int", "(", "round", "(", "c", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "in_c", "%", "2", "!=", "0", ":", "\n", "                ", "in_c", "=", "c", "+", "1", "\n", "# last conv2d block before global pooling", "\n", "", "", "num_filter", "=", "int", "(", "1280", "*", "self", ".", "multiplier", ")", "\n", "if", "num_filter", "!=", "0", ":", "\n", "            ", "num_filter", "=", "num_filter", "+", "1", "\n", "", "last_fm", "=", "mobilenet_unit", "(", "\n", "data", "=", "last_bottleneck_layer", ",", "\n", "num_filter", "=", "num_filter", "if", "self", ".", "multiplier", ">", "1.0", "else", "1280", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'last-1x1-conv'", "\n", ")", "\n", "# global average pooling", "\n", "pool_size", "=", "int", "(", "self", ".", "data_wh", "[", "0", "]", "/", "32", ")", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "last_fm", ",", "kernel", "=", "(", "pool_size", ",", "pool_size", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"avg\"", ",", "name", "=", "\"global_pool\"", ",", "global_pool", "=", "True", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool", ",", "name", "=", "\"flatten\"", ")", "\n", "fc", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "class_num", ",", "name", "=", "'fc'", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc", ",", "name", "=", "'softmax'", ")", "\n", "\n", "return", "softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.MNetV2Gen.__call__": [[239, 252], ["igcv3.MNetV2Gen.genNet", "igcv3.MNetV2Gen.get_internals", "type", "type", "layer_out.strip", "layer_nm.strip"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.MNetV2Gen.genNet"], ["", "def", "__call__", "(", "self", ",", "class_num", "=", "1000", ",", "layer_out", "=", "None", ",", "**", "configs", ")", ":", "\n", "# build the whole architecture of mobilenet v2 here", "\n", "        ", "sym", "=", "self", ".", "genNet", "(", "class_num", "=", "class_num", ",", "**", "configs", ")", "\n", "if", "layer_out", "is", "None", ":", "\n", "            ", "return", "sym", "\n", "\n", "", "internals", "=", "sym", ".", "get_internals", "(", ")", "\n", "if", "type", "(", "layer_out", ")", "is", "list", "or", "type", "(", "layer_out", ")", "is", "tuple", ":", "\n", "            ", "layers_out", "=", "[", "internals", "[", "layer_nm", ".", "strip", "(", ")", "+", "'_output'", "]", "for", "layer_nm", "in", "layer_out", "]", "\n", "return", "layers_out", "\n", "", "else", ":", "\n", "            ", "layer_out", "=", "internals", "[", "layer_out", ".", "strip", "(", ")", "+", "'_output'", "]", "\n", "return", "layer_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.relu6": [[9, 11], ["mxnet.sym.clip"], "function", ["None"], ["def", "relu6", "(", "data", ",", "prefix", ")", ":", "\n", "    ", "return", "mx", ".", "sym", ".", "clip", "(", "data", ",", "0", ",", "6", ",", "name", "=", "'%s-relu6'", "%", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.shortcut": [[12, 15], ["mxnet.sym.elemwise_add"], "function", ["None"], ["", "def", "shortcut", "(", "data_in", ",", "data_residual", ",", "prefix", ")", ":", "\n", "    ", "out", "=", "mx", ".", "sym", ".", "elemwise_add", "(", "data_in", ",", "data_residual", ",", "name", "=", "'%s-shortcut'", "%", "prefix", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.permutation": [[16, 21], ["mxnet.sym.reshape", "mxnet.sym.swapaxes", "mxnet.sym.reshape"], "function", ["None"], ["", "def", "permutation", "(", "data", ",", "groups", ")", ":", "\n", "\t", "data", "=", "mx", ".", "sym", ".", "reshape", "(", "data", ",", "shape", "=", "(", "0", ",", "-", "4", ",", "groups", ",", "-", "1", ",", "-", "2", ")", ")", "\n", "data", "=", "mx", ".", "sym", ".", "swapaxes", "(", "data", ",", "1", ",", "2", ")", "\n", "data", "=", "mx", ".", "sym", ".", "reshape", "(", "data", ",", "shape", "=", "(", "0", ",", "-", "3", ",", "-", "2", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.mobilenet_unit": [[22, 38], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "igcv3.relu6"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.relu6"], ["", "def", "mobilenet_unit", "(", "data", ",", "num_filter", "=", "1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_group", "=", "1", ",", "if_act", "=", "True", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "kernel", ",", "\n", "num_group", "=", "num_group", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "pad", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "'%s-conv2d'", "%", "prefix", ")", "\n", "bn", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "'%s-batchnorm'", "%", "prefix", ",", "fix_gamma", "=", "False", ",", "use_global_stats", "=", "False", ",", "eps", "=", "1e-5", ")", "\n", "if", "if_act", ":", "\n", "        ", "act", "=", "relu6", "(", "bn", ",", "prefix", ")", "\n", "return", "act", "\n", "", "else", ":", "\n", "        ", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.inverted_residual_unit": [[39, 83], ["int", "igcv3.mobilenet_unit", "igcv3.permutation", "igcv3.mobilenet_unit", "igcv3.mobilenet_unit", "round", "igcv3.shortcut"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.permutation", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.shortcut"], ["", "", "def", "inverted_residual_unit", "(", "data", ",", "num_in_filter", ",", "num_filter", ",", "ifshortcut", ",", "stride", ",", "kernel", ",", "pad", ",", "expansion_factor", ",", "prefix", ")", ":", "\n", "    ", "num_expfilter", "=", "int", "(", "round", "(", "num_in_filter", "*", "expansion_factor", ")", ")", "\n", "\n", "channel_expand", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "2", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-exp'", "%", "prefix", ",", "\n", ")", "\n", "channel_expand", "=", "permutation", "(", "data", "=", "channel_expand", ",", "groups", "=", "2", ")", "\n", "bottleneck_conv", "=", "mobilenet_unit", "(", "\n", "data", "=", "channel_expand", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "stride", "=", "stride", ",", "\n", "kernel", "=", "kernel", ",", "\n", "pad", "=", "pad", ",", "\n", "num_group", "=", "num_expfilter", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-depthwise'", "%", "prefix", ",", "\n", ")", "\n", "linear_out", "=", "mobilenet_unit", "(", "\n", "data", "=", "bottleneck_conv", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "2", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-linear'", "%", "prefix", "\n", ")", "\n", "#     linear_out = permutation(data=linear_out,groups=num_filter/2)", "\n", "if", "ifshortcut", ":", "\n", "        ", "out", "=", "shortcut", "(", "\n", "data_in", "=", "data", ",", "\n", "data_residual", "=", "linear_out", ",", "\n", "prefix", "=", "prefix", ",", "\n", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "linear_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.NLinverted_residual_unit": [[84, 126], ["int", "igcv3.mobilenet_unit", "igcv3.mobilenet_unit", "igcv3.mobilenet_unit", "round", "igcv3.shortcut"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.shortcut"], ["", "", "def", "NLinverted_residual_unit", "(", "data", ",", "num_in_filter", ",", "num_filter", ",", "ifshortcut", ",", "stride", ",", "kernel", ",", "pad", ",", "expansion_factor", ",", "prefix", ")", ":", "\n", "    ", "num_expfilter", "=", "int", "(", "round", "(", "num_in_filter", "*", "expansion_factor", ")", ")", "\n", "\n", "channel_expand", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "1", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-exp'", "%", "prefix", ",", "\n", ")", "\n", "bottleneck_conv", "=", "mobilenet_unit", "(", "\n", "data", "=", "channel_expand", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "stride", "=", "stride", ",", "\n", "kernel", "=", "kernel", ",", "\n", "pad", "=", "pad", ",", "\n", "num_group", "=", "num_expfilter", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-depthwise'", "%", "prefix", ",", "\n", ")", "\n", "linear_out", "=", "mobilenet_unit", "(", "\n", "data", "=", "bottleneck_conv", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "1", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-linear'", "%", "prefix", "\n", ")", "\n", "if", "ifshortcut", ":", "\n", "        ", "out", "=", "shortcut", "(", "\n", "data_in", "=", "data", ",", "\n", "data_residual", "=", "linear_out", ",", "\n", "prefix", "=", "prefix", ",", "\n", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "linear_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.invresi_blocks": [[127, 157], ["igcv3.inverted_residual_unit", "print", "print", "range", "igcv3.inverted_residual_unit"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit"], ["", "", "def", "invresi_blocks", "(", "data", ",", "in_c", ",", "t", ",", "c", ",", "n", ",", "s", ",", "prefix", ")", ":", "\n", "    ", "first_block", "=", "inverted_residual_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_in_filter", "=", "in_c", ",", "\n", "num_filter", "=", "c", ",", "\n", "ifshortcut", "=", "False", ",", "\n", "stride", "=", "(", "s", ",", "s", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "prefix", "=", "'%s-block0'", "%", "prefix", "\n", ")", "\n", "print", "(", "in_c", ")", "\n", "print", "(", "c", ")", "\n", "last_residual_block", "=", "first_block", "\n", "last_c", "=", "c", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "last_residual_block", "=", "inverted_residual_unit", "(", "\n", "data", "=", "last_residual_block", ",", "\n", "num_in_filter", "=", "last_c", ",", "\n", "num_filter", "=", "c", ",", "\n", "ifshortcut", "=", "True", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "prefix", "=", "'%s-block%d'", "%", "(", "prefix", ",", "i", ")", "\n", ")", "\n", "", "return", "last_residual_block", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3.get_symbol": [[253, 257], ["igcv3.MNetV2Gen", "MNetV2Gen."], "function", ["None"], ["", "", "", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "multiplier", "=", "1.0", ")", ":", "\n", "    ", "mnetgen", "=", "MNetV2Gen", "(", "(", "224", ",", "224", ")", ",", "multiplier", "=", "multiplier", ")", "\n", "mnetv2_sym", "=", "mnetgen", "(", "class_num", "=", "num_classes", ",", "layer_out", "=", "None", ")", "\n", "return", "mnetv2_sym", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.MNetV2Gen.__init__": [[175, 183], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_wh", ",", "multiplier", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "MNetV2Gen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_wh", "=", "data_wh", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "data_wh", "in", "MNETV2_CONFIGS_MAP", ":", "\n", "            ", "self", ".", "MNetConfigs", "=", "MNETV2_CONFIGS_MAP", "[", "self", ".", "data_wh", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "MNetConfigs", "=", "MNETV2_CONFIGS_MAP", "[", "(", "224", ",", "224", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.MNetV2Gen.genNet": [[184, 250], ["mxnet.sym.Variable", "igcv3_g2g4.MNetV2Gen.MNetConfigs.update", "int", "igcv3_g2g4.mobilenet_unit", "enumerate", "int", "igcv3_g2g4.mobilenet_unit", "int", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "round", "int", "print", "igcv3_g2g4.invresi_blocks", "int", "round", "round"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.update", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.invresi_blocks"], ["", "", "def", "genNet", "(", "self", ",", "class_num", "=", "1000", ",", "**", "configs", ")", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "'data'", ")", "\n", "self", ".", "MNetConfigs", ".", "update", "(", "configs", ")", "\n", "# first conv2d block", "\n", "first_c", "=", "int", "(", "round", "(", "self", ".", "MNetConfigs", "[", "'firstconv_filter_num'", "]", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "first_c", "%", "4", "==", "1", ":", "\n", "            ", "first_c", "=", "first_c", "+", "3", "\n", "", "elif", "first_c", "%", "4", "==", "2", ":", "\n", "            ", "first_c", "=", "first_c", "+", "2", "\n", "", "elif", "first_c", "%", "4", "==", "3", ":", "\n", "            ", "first_c", "=", "first_c", "+", "1", "\n", "", "first_layer", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "first_c", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'first-3x3-conv'", "\n", ")", "\n", "last_bottleneck_layer", "=", "first_layer", "\n", "in_c", "=", "first_c", "\n", "# bottleneck sequences", "\n", "for", "i", ",", "layer_setting", "in", "enumerate", "(", "self", ".", "MNetConfigs", "[", "'bottleneck_params_list'", "]", ")", ":", "\n", "            ", "t", ",", "c", ",", "n", ",", "s", "=", "layer_setting", "\n", "c", "=", "int", "(", "round", "(", "c", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "c", "%", "4", "==", "1", ":", "\n", "                ", "c", "=", "c", "+", "3", "\n", "", "elif", "c", "%", "4", "==", "2", ":", "\n", "                ", "c", "=", "c", "+", "2", "\n", "", "elif", "c", "%", "4", "==", "3", ":", "\n", "                ", "c", "=", "c", "+", "1", "\n", "", "print", "(", "\"channels:%d\"", "%", "c", ")", "\n", "last_bottleneck_layer", "=", "invresi_blocks", "(", "\n", "data", "=", "last_bottleneck_layer", ",", "\n", "in_c", "=", "in_c", ",", "t", "=", "t", ",", "c", "=", "c", ",", "n", "=", "n", ",", "s", "=", "s", ",", "\n", "prefix", "=", "'seq-%d'", "%", "i", "\n", ")", "\n", "in_c", "=", "int", "(", "round", "(", "c", "*", "self", ".", "multiplier", ")", ")", "\n", "if", "in_c", "%", "4", "==", "1", ":", "\n", "                ", "in_c", "=", "in_c", "+", "3", "\n", "", "elif", "in_c", "%", "4", "==", "2", ":", "\n", "                ", "in_c", "=", "in_c", "+", "2", "\n", "", "elif", "in_c", "%", "4", "==", "3", ":", "\n", "                ", "in_c", "=", "in_c", "+", "1", "\n", "# last conv2d block before global pooling", "\n", "", "", "num_filter", "=", "int", "(", "1280", "*", "self", ".", "multiplier", ")", "\n", "if", "num_filter", "!=", "0", ":", "\n", "            ", "num_filter", "=", "num_filter", "+", "1", "\n", "", "last_fm", "=", "mobilenet_unit", "(", "\n", "data", "=", "last_bottleneck_layer", ",", "\n", "num_filter", "=", "num_filter", "if", "self", ".", "multiplier", ">", "1.0", "else", "1280", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'last-1x1-conv'", "\n", ")", "\n", "# global average pooling", "\n", "pool_size", "=", "int", "(", "self", ".", "data_wh", "[", "0", "]", "/", "32", ")", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "last_fm", ",", "kernel", "=", "(", "pool_size", ",", "pool_size", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"avg\"", ",", "name", "=", "\"global_pool\"", ",", "global_pool", "=", "True", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool", ",", "name", "=", "\"flatten\"", ")", "\n", "fc", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "class_num", ",", "name", "=", "'fc'", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc", ",", "name", "=", "'softmax'", ")", "\n", "\n", "return", "softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.MNetV2Gen.__call__": [[251, 264], ["igcv3_g2g4.MNetV2Gen.genNet", "igcv3_g2g4.MNetV2Gen.get_internals", "type", "type", "layer_out.strip", "layer_nm.strip"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.MNetV2Gen.genNet"], ["", "def", "__call__", "(", "self", ",", "class_num", "=", "1000", ",", "layer_out", "=", "None", ",", "**", "configs", ")", ":", "\n", "# build the whole architecture of mobilenet v2 here", "\n", "        ", "sym", "=", "self", ".", "genNet", "(", "class_num", "=", "class_num", ",", "**", "configs", ")", "\n", "if", "layer_out", "is", "None", ":", "\n", "            ", "return", "sym", "\n", "\n", "", "internals", "=", "sym", ".", "get_internals", "(", ")", "\n", "if", "type", "(", "layer_out", ")", "is", "list", "or", "type", "(", "layer_out", ")", "is", "tuple", ":", "\n", "            ", "layers_out", "=", "[", "internals", "[", "layer_nm", ".", "strip", "(", ")", "+", "'_output'", "]", "for", "layer_nm", "in", "layer_out", "]", "\n", "return", "layers_out", "\n", "", "else", ":", "\n", "            ", "layer_out", "=", "internals", "[", "layer_out", ".", "strip", "(", ")", "+", "'_output'", "]", "\n", "return", "layer_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.relu6": [[9, 11], ["mxnet.sym.clip"], "function", ["None"], ["def", "relu6", "(", "data", ",", "prefix", ")", ":", "\n", "    ", "return", "mx", ".", "sym", ".", "clip", "(", "data", ",", "0", ",", "6", ",", "name", "=", "'%s-relu6'", "%", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.shortcut": [[12, 15], ["mxnet.sym.elemwise_add"], "function", ["None"], ["", "def", "shortcut", "(", "data_in", ",", "data_residual", ",", "prefix", ")", ":", "\n", "    ", "out", "=", "mx", ".", "sym", ".", "elemwise_add", "(", "data_in", ",", "data_residual", ",", "name", "=", "'%s-shortcut'", "%", "prefix", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.permutation": [[16, 21], ["mxnet.sym.reshape", "mxnet.sym.swapaxes", "mxnet.sym.reshape"], "function", ["None"], ["", "def", "permutation", "(", "data", ",", "groups", ")", ":", "\n", "\t", "data", "=", "mx", ".", "sym", ".", "reshape", "(", "data", ",", "shape", "=", "(", "0", ",", "-", "4", ",", "groups", ",", "-", "1", ",", "-", "2", ")", ")", "\n", "data", "=", "mx", ".", "sym", ".", "swapaxes", "(", "data", ",", "1", ",", "2", ")", "\n", "data", "=", "mx", ".", "sym", ".", "reshape", "(", "data", ",", "shape", "=", "(", "0", ",", "-", "3", ",", "-", "2", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit": [[22, 38], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "igcv3_g2g4.relu6"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.relu6"], ["", "def", "mobilenet_unit", "(", "data", ",", "num_filter", "=", "1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_group", "=", "1", ",", "if_act", "=", "True", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "kernel", ",", "\n", "num_group", "=", "num_group", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "pad", ",", "\n", "no_bias", "=", "True", ",", "\n", "name", "=", "'%s-conv2d'", "%", "prefix", ")", "\n", "bn", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "'%s-batchnorm'", "%", "prefix", ",", "fix_gamma", "=", "False", ",", "use_global_stats", "=", "False", ",", "eps", "=", "1e-5", ")", "\n", "if", "if_act", ":", "\n", "        ", "act", "=", "relu6", "(", "bn", ",", "prefix", ")", "\n", "return", "act", "\n", "", "else", ":", "\n", "        ", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit": [[39, 83], ["int", "igcv3_g2g4.mobilenet_unit", "igcv3_g2g4.permutation", "igcv3_g2g4.mobilenet_unit", "igcv3_g2g4.mobilenet_unit", "igcv3_g2g4.permutation", "round", "igcv3_g2g4.shortcut"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.permutation", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.permutation", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.shortcut"], ["", "", "def", "inverted_residual_unit", "(", "data", ",", "num_in_filter", ",", "num_filter", ",", "ifshortcut", ",", "stride", ",", "kernel", ",", "pad", ",", "expansion_factor", ",", "prefix", ")", ":", "\n", "    ", "num_expfilter", "=", "int", "(", "round", "(", "num_in_filter", "*", "expansion_factor", ")", ")", "\n", "\n", "channel_expand", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "2", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-exp'", "%", "prefix", ",", "\n", ")", "\n", "channel_expand", "=", "permutation", "(", "data", "=", "channel_expand", ",", "groups", "=", "2", ")", "\n", "bottleneck_conv", "=", "mobilenet_unit", "(", "\n", "data", "=", "channel_expand", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "stride", "=", "stride", ",", "\n", "kernel", "=", "kernel", ",", "\n", "pad", "=", "pad", ",", "\n", "num_group", "=", "num_expfilter", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-depthwise'", "%", "prefix", ",", "\n", ")", "\n", "linear_out", "=", "mobilenet_unit", "(", "\n", "data", "=", "bottleneck_conv", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "4", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-linear'", "%", "prefix", "\n", ")", "\n", "linear_output", "=", "permutation", "(", "data", "=", "linear_out", ",", "groups", "=", "num_filter", "/", "4", ")", "\n", "if", "ifshortcut", ":", "\n", "        ", "out", "=", "shortcut", "(", "\n", "data_in", "=", "data", ",", "\n", "data_residual", "=", "linear_out", ",", "\n", "prefix", "=", "prefix", ",", "\n", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "linear_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.NLinverted_residual_unit": [[84, 126], ["int", "igcv3_g2g4.mobilenet_unit", "igcv3_g2g4.mobilenet_unit", "igcv3_g2g4.mobilenet_unit", "round", "igcv3_g2g4.shortcut"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.mobilenet_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.shortcut"], ["", "", "def", "NLinverted_residual_unit", "(", "data", ",", "num_in_filter", ",", "num_filter", ",", "ifshortcut", ",", "stride", ",", "kernel", ",", "pad", ",", "expansion_factor", ",", "prefix", ")", ":", "\n", "    ", "num_expfilter", "=", "int", "(", "round", "(", "num_in_filter", "*", "expansion_factor", ")", ")", "\n", "\n", "channel_expand", "=", "mobilenet_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "1", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-exp'", "%", "prefix", ",", "\n", ")", "\n", "bottleneck_conv", "=", "mobilenet_unit", "(", "\n", "data", "=", "channel_expand", ",", "\n", "num_filter", "=", "num_expfilter", ",", "\n", "stride", "=", "stride", ",", "\n", "kernel", "=", "kernel", ",", "\n", "pad", "=", "pad", ",", "\n", "num_group", "=", "num_expfilter", ",", "\n", "if_act", "=", "True", ",", "\n", "prefix", "=", "'%s-depthwise'", "%", "prefix", ",", "\n", ")", "\n", "linear_out", "=", "mobilenet_unit", "(", "\n", "data", "=", "bottleneck_conv", ",", "\n", "num_filter", "=", "num_filter", ",", "\n", "kernel", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "num_group", "=", "1", ",", "\n", "if_act", "=", "False", ",", "\n", "prefix", "=", "'%s-linear'", "%", "prefix", "\n", ")", "\n", "if", "ifshortcut", ":", "\n", "        ", "out", "=", "shortcut", "(", "\n", "data_in", "=", "data", ",", "\n", "data_residual", "=", "linear_out", ",", "\n", "prefix", "=", "prefix", ",", "\n", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "linear_out", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.invresi_blocks": [[127, 157], ["igcv3_g2g4.inverted_residual_unit", "print", "print", "range", "igcv3_g2g4.inverted_residual_unit"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.inverted_residual_unit"], ["", "", "def", "invresi_blocks", "(", "data", ",", "in_c", ",", "t", ",", "c", ",", "n", ",", "s", ",", "prefix", ")", ":", "\n", "    ", "first_block", "=", "inverted_residual_unit", "(", "\n", "data", "=", "data", ",", "\n", "num_in_filter", "=", "in_c", ",", "\n", "num_filter", "=", "c", ",", "\n", "ifshortcut", "=", "False", ",", "\n", "stride", "=", "(", "s", ",", "s", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "prefix", "=", "'%s-block0'", "%", "prefix", "\n", ")", "\n", "print", "(", "in_c", ")", "\n", "print", "(", "c", ")", "\n", "last_residual_block", "=", "first_block", "\n", "last_c", "=", "c", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "last_residual_block", "=", "inverted_residual_unit", "(", "\n", "data", "=", "last_residual_block", ",", "\n", "num_in_filter", "=", "last_c", ",", "\n", "num_filter", "=", "c", ",", "\n", "ifshortcut", "=", "True", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "kernel", "=", "(", "3", ",", "3", ")", ",", "\n", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "prefix", "=", "'%s-block%d'", "%", "(", "prefix", ",", "i", ")", "\n", ")", "\n", "", "return", "last_residual_block", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.igcv3_g2g4.get_symbol": [[265, 269], ["igcv3_g2g4.MNetV2Gen", "MNetV2Gen."], "function", ["None"], ["", "", "", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "multiplier", "=", "1.0", ")", ":", "\n", "    ", "mnetgen", "=", "MNetV2Gen", "(", "(", "224", ",", "224", ")", ",", "multiplier", "=", "multiplier", ")", "\n", "mnetv2_sym", "=", "mnetgen", "(", "class_num", "=", "num_classes", ",", "layer_out", "=", "None", ")", "\n", "return", "mnetv2_sym", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.ConvFactory": [[36, 41], ["mxnet.symbol.Convolution", "mxnet.symbol.BatchNorm", "mxnet.symbol.Activation"], "function", ["None"], ["def", "ConvFactory", "(", "data", ",", "num_filter", ",", "kernel", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "None", ",", "suffix", "=", "''", ",", "attr", "=", "{", "}", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "kernel", ",", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "name", "=", "'conv_%s%s'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "bn", "=", "mx", ".", "symbol", ".", "BatchNorm", "(", "data", "=", "conv", ",", "fix_gamma", "=", "fix_gamma", ",", "eps", "=", "eps", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn_%s%s'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "act", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "bn", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu_%s%s'", "%", "(", "name", ",", "suffix", ")", ",", "attr", "=", "attr", ")", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA": [[42, 58], ["inception-bn.ConvFactory", "inception-bn.ConvFactory", "inception-bn.ConvFactory", "inception-bn.ConvFactory", "inception-bn.ConvFactory", "inception-bn.ConvFactory", "mxnet.symbol.Pooling", "inception-bn.ConvFactory", "mxnet.symbol.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "def", "InceptionFactoryA", "(", "data", ",", "num_1x1", ",", "num_3x3red", ",", "num_3x3", ",", "num_d3x3red", ",", "num_d3x3", ",", "pool", ",", "proj", ",", "name", ")", ":", "\n", "# 1x1", "\n", "    ", "c1x1", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "num_1x1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_1x1'", "%", "name", ")", ")", "\n", "# 3x3 reduce + 3x3", "\n", "c3x3r", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "num_3x3red", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_3x3'", "%", "name", ")", ",", "suffix", "=", "'_reduce'", ")", "\n", "c3x3", "=", "ConvFactory", "(", "data", "=", "c3x3r", ",", "num_filter", "=", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_3x3'", "%", "name", ")", ")", "\n", "# double 3x3 reduce + double 3x3", "\n", "cd3x3r", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "num_d3x3red", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_double_3x3'", "%", "name", ")", ",", "suffix", "=", "'_reduce'", ")", "\n", "cd3x3", "=", "ConvFactory", "(", "data", "=", "cd3x3r", ",", "num_filter", "=", "num_d3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_double_3x3_0'", "%", "name", ")", ")", "\n", "cd3x3", "=", "ConvFactory", "(", "data", "=", "cd3x3", ",", "num_filter", "=", "num_d3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_double_3x3_1'", "%", "name", ")", ")", "\n", "# pool + proj", "\n", "pooling", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "cproj", "=", "ConvFactory", "(", "data", "=", "pooling", ",", "num_filter", "=", "proj", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_proj'", "%", "name", ")", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "c1x1", ",", "c3x3", ",", "cd3x3", ",", "cproj", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryB": [[59, 72], ["inception-bn.ConvFactory", "inception-bn.ConvFactory", "inception-bn.ConvFactory", "inception-bn.ConvFactory", "inception-bn.ConvFactory", "mxnet.symbol.Pooling", "mxnet.symbol.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "def", "InceptionFactoryB", "(", "data", ",", "num_3x3red", ",", "num_3x3", ",", "num_d3x3red", ",", "num_d3x3", ",", "name", ")", ":", "\n", "# 3x3 reduce + 3x3", "\n", "    ", "c3x3r", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "num_3x3red", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_3x3'", "%", "name", ")", ",", "suffix", "=", "'_reduce'", ")", "\n", "c3x3", "=", "ConvFactory", "(", "data", "=", "c3x3r", ",", "num_filter", "=", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_3x3'", "%", "name", ")", ")", "\n", "# double 3x3 reduce + double 3x3", "\n", "cd3x3r", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "num_d3x3red", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_double_3x3'", "%", "name", ")", ",", "suffix", "=", "'_reduce'", ")", "\n", "cd3x3", "=", "ConvFactory", "(", "data", "=", "cd3x3r", ",", "num_filter", "=", "num_d3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_double_3x3_0'", "%", "name", ")", ")", "\n", "cd3x3", "=", "ConvFactory", "(", "data", "=", "cd3x3", ",", "num_filter", "=", "num_d3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_double_3x3_1'", "%", "name", ")", ")", "\n", "# pool + proj", "\n", "pooling", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"max\"", ",", "name", "=", "(", "'max_pool_%s_pool'", "%", "name", ")", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "c3x3", ",", "cd3x3", ",", "pooling", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.DownsampleFactory": [[74, 82], ["inception-bn.ConvFactory", "mxnet.symbol.Pooling", "mxnet.symbol.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "def", "DownsampleFactory", "(", "data", ",", "ch_3x3", ",", "name", ",", "attr", ")", ":", "\n", "# conv 3x3", "\n", "    ", "conv", "=", "ConvFactory", "(", "data", "=", "data", ",", "name", "=", "name", "+", "'_conv'", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "num_filter", "=", "ch_3x3", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "attr", "=", "attr", ")", "\n", "# pool", "\n", "pool", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "data", ",", "name", "=", "name", "+", "'_pool'", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ",", "attr", "=", "attr", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "conv", ",", "pool", "]", ",", "name", "=", "name", "+", "'_ch_concat'", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory": [[84, 92], ["inception-bn.ConvFactory", "inception-bn.ConvFactory", "mxnet.symbol.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "def", "SimpleFactory", "(", "data", ",", "ch_1x1", ",", "ch_3x3", ",", "name", ",", "attr", ")", ":", "\n", "# 1x1", "\n", "    ", "conv1x1", "=", "ConvFactory", "(", "data", "=", "data", ",", "name", "=", "name", "+", "'_1x1'", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "num_filter", "=", "ch_1x1", ",", "attr", "=", "attr", ")", "\n", "# 3x3", "\n", "conv3x3", "=", "ConvFactory", "(", "data", "=", "data", ",", "name", "=", "name", "+", "'_3x3'", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "ch_3x3", ",", "attr", "=", "attr", ")", "\n", "#concat", "\n", "concat", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "conv1x1", ",", "conv3x3", "]", ",", "name", "=", "name", "+", "'_ch_concat'", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.get_symbol": [[94, 145], ["mxnet.symbol.Variable", "mxnet.symbol.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput", "int", "inception-bn.ConvFactory", "inception-bn.SimpleFactory", "inception-bn.SimpleFactory", "inception-bn.DownsampleFactory", "inception-bn.SimpleFactory", "inception-bn.SimpleFactory", "inception-bn.SimpleFactory", "inception-bn.SimpleFactory", "inception-bn.DownsampleFactory", "inception-bn.SimpleFactory", "inception-bn.SimpleFactory", "mxnet.symbol.Pooling", "inception-bn.ConvFactory", "mxnet.symbol.Pooling", "inception-bn.ConvFactory", "inception-bn.ConvFactory", "mxnet.symbol.Pooling", "inception-bn.InceptionFactoryA", "inception-bn.InceptionFactoryA", "inception-bn.InceptionFactoryB", "inception-bn.InceptionFactoryA", "inception-bn.InceptionFactoryA", "inception-bn.InceptionFactoryA", "inception-bn.InceptionFactoryA", "inception-bn.InceptionFactoryB", "inception-bn.InceptionFactoryA", "inception-bn.InceptionFactoryA", "mxnet.symbol.Pooling", "image_shape.split"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.DownsampleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.DownsampleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.SimpleFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryB", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryB", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-bn.InceptionFactoryA"], ["", "def", "get_symbol", "(", "num_classes", ",", "image_shape", ",", "**", "kwargs", ")", ":", "\n", "    ", "image_shape", "=", "[", "int", "(", "l", ")", "for", "l", "in", "image_shape", ".", "split", "(", "','", ")", "]", "\n", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "# attr = {'force_mirroring': 'true'}", "\n", "attr", "=", "{", "}", "\n", "\n", "# data", "\n", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "if", "height", "<=", "28", ":", "\n", "# a simper version", "\n", "        ", "conv1", "=", "ConvFactory", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"1\"", ",", "num_filter", "=", "96", ",", "attr", "=", "attr", ")", "\n", "in3a", "=", "SimpleFactory", "(", "conv1", ",", "32", ",", "32", ",", "'in3a'", ",", "attr", ")", "\n", "in3b", "=", "SimpleFactory", "(", "in3a", ",", "32", ",", "48", ",", "'in3b'", ",", "attr", ")", "\n", "in3c", "=", "DownsampleFactory", "(", "in3b", ",", "80", ",", "'in3c'", ",", "attr", ")", "\n", "in4a", "=", "SimpleFactory", "(", "in3c", ",", "112", ",", "48", ",", "'in4a'", ",", "attr", ")", "\n", "in4b", "=", "SimpleFactory", "(", "in4a", ",", "96", ",", "64", ",", "'in4b'", ",", "attr", ")", "\n", "in4c", "=", "SimpleFactory", "(", "in4b", ",", "80", ",", "80", ",", "'in4c'", ",", "attr", ")", "\n", "in4d", "=", "SimpleFactory", "(", "in4c", ",", "48", ",", "96", ",", "'in4d'", ",", "attr", ")", "\n", "in4e", "=", "DownsampleFactory", "(", "in4d", ",", "96", ",", "'in4e'", ",", "attr", ")", "\n", "in5a", "=", "SimpleFactory", "(", "in4e", ",", "176", ",", "160", ",", "'in5a'", ",", "attr", ")", "\n", "in5b", "=", "SimpleFactory", "(", "in5a", ",", "176", ",", "160", ",", "'in5b'", ",", "attr", ")", "\n", "pool", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "in5b", ",", "pool_type", "=", "\"avg\"", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "name", "=", "\"global_pool\"", ",", "attr", "=", "attr", ")", "\n", "", "else", ":", "\n", "# stage 1", "\n", "        ", "conv1", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "64", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "name", "=", "'1'", ")", "\n", "pool1", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "conv1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'pool_1'", ",", "pool_type", "=", "'max'", ")", "\n", "# stage 2", "\n", "conv2red", "=", "ConvFactory", "(", "data", "=", "pool1", ",", "num_filter", "=", "64", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'2_red'", ")", "\n", "conv2", "=", "ConvFactory", "(", "data", "=", "conv2red", ",", "num_filter", "=", "192", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'2'", ")", "\n", "pool2", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "conv2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'pool_2'", ",", "pool_type", "=", "'max'", ")", "\n", "# stage 2", "\n", "in3a", "=", "InceptionFactoryA", "(", "pool2", ",", "64", ",", "64", ",", "64", ",", "64", ",", "96", ",", "\"avg\"", ",", "32", ",", "'3a'", ")", "\n", "in3b", "=", "InceptionFactoryA", "(", "in3a", ",", "64", ",", "64", ",", "96", ",", "64", ",", "96", ",", "\"avg\"", ",", "64", ",", "'3b'", ")", "\n", "in3c", "=", "InceptionFactoryB", "(", "in3b", ",", "128", ",", "160", ",", "64", ",", "96", ",", "'3c'", ")", "\n", "# stage 3", "\n", "in4a", "=", "InceptionFactoryA", "(", "in3c", ",", "224", ",", "64", ",", "96", ",", "96", ",", "128", ",", "\"avg\"", ",", "128", ",", "'4a'", ")", "\n", "in4b", "=", "InceptionFactoryA", "(", "in4a", ",", "192", ",", "96", ",", "128", ",", "96", ",", "128", ",", "\"avg\"", ",", "128", ",", "'4b'", ")", "\n", "in4c", "=", "InceptionFactoryA", "(", "in4b", ",", "160", ",", "128", ",", "160", ",", "128", ",", "160", ",", "\"avg\"", ",", "128", ",", "'4c'", ")", "\n", "in4d", "=", "InceptionFactoryA", "(", "in4c", ",", "96", ",", "128", ",", "192", ",", "160", ",", "192", ",", "\"avg\"", ",", "128", ",", "'4d'", ")", "\n", "in4e", "=", "InceptionFactoryB", "(", "in4d", ",", "128", ",", "192", ",", "192", ",", "256", ",", "'4e'", ")", "\n", "# stage 4", "\n", "in5a", "=", "InceptionFactoryA", "(", "in4e", ",", "352", ",", "192", ",", "320", ",", "160", ",", "224", ",", "\"avg\"", ",", "128", ",", "'5a'", ")", "\n", "in5b", "=", "InceptionFactoryA", "(", "in5a", ",", "352", ",", "192", ",", "320", ",", "192", ",", "224", ",", "\"max\"", ",", "128", ",", "'5b'", ")", "\n", "# global avg pooling", "\n", "pool", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "in5b", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"global_pool\"", ",", "pool_type", "=", "'avg'", ")", "\n", "\n", "# linear classifier", "\n", "", "flatten", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "pool", ")", "\n", "fc1", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "num_classes", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet.residual_unit": [[29, 87], ["mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.Convolution", "mx.sym.Convolution._set_attr", "mxnet.sym.Convolution", "mx.sym.Convolution._set_attr", "int", "int"], "function", ["None"], ["\n", "if", "bottle_neck", ":", "\n", "# the same as https://github.com/facebook/fb.resnet.torch#notes, a bit difference with origin paper", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn2", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act2", ",", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn3'", ")", "\n", "act3", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn3", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu3'", ")", "\n", "conv3", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act3", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv3'", ")", "\n", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "conv3", "+", "shortcut", "\n", "", "else", ":", "\n", "        ", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn2", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act2", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "conv2", "+", "shortcut", "\n", "\n", "", "", "def", "resnet", "(", "units", ",", "num_stages", ",", "filter_list", ",", "num_classes", ",", "image_shape", ",", "bottle_neck", "=", "True", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "256", ",", "memonger", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return ResNet symbol of\n    Parameters\n    ----------\n    units : list\n        Number of units in each stage\n    num_stages : int\n        Number of stage\n    filter_list : list\n        Channel size of each stage\n    num_classes : int\n        Ouput size of symbol\n    dataset : str\n        Dataset type, only cifar10 and imagenet supports\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "num_unit", "=", "len", "(", "units", ")", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet.resnet": [[88, 143], ["len", "mxnet.sym.Variable", "mxnet.sym.BatchNorm", "range", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.sym.FullyConnected", "mxnet.sym.SoftmaxOutput", "mxnet.sym.identity", "mxnet.sym.Convolution", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Pooling", "resnet.residual_unit", "range", "mxnet.sym.Cast", "mxnet.sym.Cast", "resnet.residual_unit"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit"], ["assert", "(", "num_unit", "==", "num_stages", ")", "\n", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "'data'", ")", "\n", "data", "=", "mx", ".", "sym", ".", "identity", "(", "data", "=", "data", ",", "name", "=", "'id'", ")", "\n", "data", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "True", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn_data'", ")", "\n", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "if", "height", "<=", "32", ":", "# such as cifar10", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "filter_list", "[", "0", "]", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "", "else", ":", "# often expected to be 224 such as imagenet", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "filter_list", "[", "0", "]", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "body", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu0'", ")", "\n", "body", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "        ", "body", "=", "residual_unit", "(", "body", ",", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", "if", "i", "==", "0", "else", "2", ",", "1", "if", "i", "==", "0", "else", "2", ")", ",", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "1", ")", ",", "bottle_neck", "=", "bottle_neck", ",", "workspace", "=", "workspace", ",", "\n", "memonger", "=", "memonger", ")", "\n", "for", "j", "in", "range", "(", "units", "[", "i", "]", "-", "1", ")", ":", "\n", "            ", "body", "=", "residual_unit", "(", "body", ",", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", ",", "1", ")", ",", "True", ",", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "j", "+", "2", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "workspace", "=", "workspace", ",", "memonger", "=", "memonger", ")", "\n", "", "", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn1'", ")", "\n", "relu1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu1'", ")", "\n", "# Although kernel is not used here when global_pool=True, we should put one", "\n", "pool1", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "relu1", ",", "global_pool", "=", "True", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'pool1'", ")", "\n", "flat", "=", "mx", ".", "symbol", ".", "Flatten", "(", "data", "=", "pool1", ")", "\n", "fc1", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "flat", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc1'", ")", "\n", "return", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "\n", "", "def", "get_symbol", "(", "num_classes", ",", "num_layers", ",", "image_shape", ",", "conv_workspace", "=", "256", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/train_resnet.py\n    Original author Wei Wu\n    \"\"\"", "\n", "image_shape", "=", "[", "int", "(", "l", ")", "for", "l", "in", "image_shape", ".", "split", "(", "','", ")", "]", "\n", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "if", "height", "<=", "28", ":", "\n", "        ", "num_stages", "=", "3", "\n", "if", "(", "num_layers", "-", "2", ")", "%", "9", "==", "0", "and", "num_layers", ">=", "164", ":", "\n", "            ", "per_unit", "=", "[", "(", "num_layers", "-", "2", ")", "//", "9", "]", "\n", "filter_list", "=", "[", "16", ",", "64", ",", "128", ",", "256", "]", "\n", "bottle_neck", "=", "True", "\n", "", "elif", "(", "num_layers", "-", "2", ")", "%", "6", "==", "0", "and", "num_layers", "<", "164", ":", "\n", "            ", "per_unit", "=", "[", "(", "num_layers", "-", "2", ")", "//", "6", "]", "\n", "filter_list", "=", "[", "16", ",", "16", ",", "32", ",", "64", "]", "\n", "bottle_neck", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "format", "(", "num_layers", ")", ")", "\n", "", "units", "=", "per_unit", "*", "num_stages", "\n", "", "else", ":", "\n", "        ", "if", "num_layers", ">=", "50", ":", "\n", "            ", "filter_list", "=", "[", "64", ",", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "bottle_neck", "=", "True", "\n", "", "else", ":", "\n", "            ", "filter_list", "=", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet.get_symbol": [[144, 197], ["resnet.resnet", "int", "image_shape.split", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet-v1.resnet"], ["bottle_neck", "=", "False", "\n", "", "num_stages", "=", "4", "\n", "if", "num_layers", "==", "18", ":", "\n", "            ", "units", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "num_layers", "==", "34", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "50", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "101", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "            ", "units", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "200", ":", "\n", "            ", "units", "=", "[", "3", ",", "24", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "269", ":", "\n", "            ", "units", "=", "[", "3", ",", "30", ",", "48", ",", "8", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "", "return", "resnet", "(", "units", "=", "units", ",", "\n", "num_stages", "=", "num_stages", ",", "\n", "filter_list", "=", "filter_list", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "image_shape", "=", "image_shape", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "workspace", "=", "conv_workspace", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.mlp.get_symbol": [[23, 33], ["mxnet.symbol.Variable", "mxnet.sym.Flatten", "mxnet.symbol.FullyConnected", "mxnet.symbol.Activation", "mxnet.symbol.FullyConnected", "mxnet.symbol.Activation", "mxnet.symbol.FullyConnected", "mxnet.symbol.SoftmaxOutput"], "function", ["None"], ["def", "get_symbol", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "mx", ".", "symbol", ".", "Variable", "(", "'data'", ")", "\n", "data", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "data", ")", "\n", "fc1", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "data", ",", "name", "=", "'fc1'", ",", "num_hidden", "=", "128", ")", "\n", "act1", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "fc1", ",", "name", "=", "'relu1'", ",", "act_type", "=", "\"relu\"", ")", "\n", "fc2", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "act1", ",", "name", "=", "'fc2'", ",", "num_hidden", "=", "64", ")", "\n", "act2", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "fc2", ",", "name", "=", "'relu2'", ",", "act_type", "=", "\"relu\"", ")", "\n", "fc3", "=", "mx", ".", "symbol", ".", "FullyConnected", "(", "data", "=", "act2", ",", "name", "=", "'fc3'", ",", "num_hidden", "=", "num_classes", ")", "\n", "mlp", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc3", ",", "name", "=", "'softmax'", ")", "\n", "return", "mlp", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet-v1.residual_unit": [[29, 88], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "int", "int"], "function", ["None"], ["def", "residual_unit", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", "=", "True", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "256", ",", "memonger", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return ResNet Unit symbol for building ResNet\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tuple\n        Stride used in convolution\n    dim_match : Boolean\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "if", "bottle_neck", ":", "\n", "        ", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "int", "(", "num_filter", "*", "0.25", ")", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn2", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "conv3", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act2", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv3'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv3", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn3'", ")", "\n", "\n", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "conv1sc", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn3", "+", "shortcut", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu3'", ")", "\n", "", "else", ":", "\n", "        ", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "\n", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "conv1sc", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1sc", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_sc'", ")", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "return", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn2", "+", "shortcut", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu3'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet-v1.resnet": [[89, 145], ["len", "mxnet.sym.Variable", "range", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.sym.FullyConnected", "mxnet.sym.SoftmaxOutput", "mxnet.sym.identity", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Pooling", "resnet-v1.residual_unit", "range", "mxnet.sym.Cast", "mxnet.sym.Cast", "resnet-v1.residual_unit"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit"], ["", "", "def", "resnet", "(", "units", ",", "num_stages", ",", "filter_list", ",", "num_classes", ",", "image_shape", ",", "bottle_neck", "=", "True", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "256", ",", "dtype", "=", "'float32'", ",", "memonger", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return ResNet symbol of\n    Parameters\n    ----------\n    units : list\n        Number of units in each stage\n    num_stages : int\n        Number of stage\n    filter_list : list\n        Channel size of each stage\n    num_classes : int\n        Ouput size of symbol\n    dataset : str\n        Dataset type, only cifar10 and imagenet supports\n    workspace : int\n        Workspace used in convolution operator\n    dtype : str\n        Precision (float32 or float16)\n    \"\"\"", "\n", "num_unit", "=", "len", "(", "units", ")", "\n", "assert", "(", "num_unit", "==", "num_stages", ")", "\n", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "'data'", ")", "\n", "if", "dtype", "==", "'float32'", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "identity", "(", "data", "=", "data", ",", "name", "=", "'id'", ")", "\n", "", "else", ":", "\n", "        ", "if", "dtype", "==", "'float16'", ":", "\n", "            ", "data", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "data", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "", "", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "if", "height", "<=", "32", ":", "# such as cifar10", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "filter_list", "[", "0", "]", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "# Is this BatchNorm supposed to be here?", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn0'", ")", "\n", "", "else", ":", "# often expected to be 224 such as imagenet", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "filter_list", "[", "0", "]", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "body", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "        ", "body", "=", "residual_unit", "(", "body", ",", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", "if", "i", "==", "0", "else", "2", ",", "1", "if", "i", "==", "0", "else", "2", ")", ",", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "1", ")", ",", "bottle_neck", "=", "bottle_neck", ",", "workspace", "=", "workspace", ",", "\n", "memonger", "=", "memonger", ")", "\n", "for", "j", "in", "range", "(", "units", "[", "i", "]", "-", "1", ")", ":", "\n", "            ", "body", "=", "residual_unit", "(", "body", ",", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", ",", "1", ")", ",", "True", ",", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "j", "+", "2", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "workspace", "=", "workspace", ",", "memonger", "=", "memonger", ")", "\n", "# bn1 = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-5, momentum=bn_mom, name='bn1')", "\n", "# relu1 = mx.sym.Activation(data=bn1, act_type='relu', name='relu1')", "\n", "# Although kernel is not used here when global_pool=True, we should put one", "\n", "", "", "pool1", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "body", ",", "global_pool", "=", "True", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'pool1'", ")", "\n", "flat", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool1", ")", "\n", "fc1", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "flat", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc1'", ")", "\n", "if", "dtype", "==", "'float16'", ":", "\n", "        ", "fc1", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "fc1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "return", "mx", ".", "sym", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet-v1.get_symbol": [[146, 201], ["resnet-v1.resnet", "int", "image_shape.split", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnet-v1.resnet"], ["", "def", "get_symbol", "(", "num_classes", ",", "num_layers", ",", "image_shape", ",", "conv_workspace", "=", "256", ",", "dtype", "=", "'float32'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/symbol_resnet.py\n    (Original author Wei Wu) by Antti-Pekka Hynninen\n    Implementing the original resnet ILSVRC 2015 winning network from:\n    Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. \"Deep Residual Learning for Image Recognition\"\n    \"\"\"", "\n", "image_shape", "=", "[", "int", "(", "l", ")", "for", "l", "in", "image_shape", ".", "split", "(", "','", ")", "]", "\n", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "if", "height", "<=", "28", ":", "\n", "        ", "num_stages", "=", "3", "\n", "if", "(", "num_layers", "-", "2", ")", "%", "9", "==", "0", "and", "num_layers", ">=", "164", ":", "\n", "            ", "per_unit", "=", "[", "(", "num_layers", "-", "2", ")", "//", "9", "]", "\n", "filter_list", "=", "[", "16", ",", "64", ",", "128", ",", "256", "]", "\n", "bottle_neck", "=", "True", "\n", "", "elif", "(", "num_layers", "-", "2", ")", "%", "6", "==", "0", "and", "num_layers", "<", "164", ":", "\n", "            ", "per_unit", "=", "[", "(", "num_layers", "-", "2", ")", "//", "6", "]", "\n", "filter_list", "=", "[", "16", ",", "16", ",", "32", ",", "64", "]", "\n", "bottle_neck", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "format", "(", "num_layers", ")", ")", "\n", "", "units", "=", "per_unit", "*", "num_stages", "\n", "", "else", ":", "\n", "        ", "if", "num_layers", ">=", "50", ":", "\n", "            ", "filter_list", "=", "[", "64", ",", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "bottle_neck", "=", "True", "\n", "", "else", ":", "\n", "            ", "filter_list", "=", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "bottle_neck", "=", "False", "\n", "", "num_stages", "=", "4", "\n", "if", "num_layers", "==", "18", ":", "\n", "            ", "units", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "num_layers", "==", "34", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "50", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "101", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "            ", "units", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "200", ":", "\n", "            ", "units", "=", "[", "3", ",", "24", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "269", ":", "\n", "            ", "units", "=", "[", "3", ",", "30", ",", "48", ",", "8", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "", "return", "resnet", "(", "units", "=", "units", ",", "\n", "num_stages", "=", "num_stages", ",", "\n", "filter_list", "=", "filter_list", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "image_shape", "=", "image_shape", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "workspace", "=", "conv_workspace", ",", "\n", "dtype", "=", "dtype", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv": [[28, 33], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation"], "function", ["None"], ["def", "Conv", "(", "data", ",", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "None", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "kernel", ",", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "no_bias", "=", "True", ",", "name", "=", "'%s%s_conv2d'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "bn", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv", ",", "name", "=", "'%s%s_batchnorm'", "%", "(", "name", ",", "suffix", ")", ",", "fix_gamma", "=", "True", ")", "\n", "act", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn", ",", "act_type", "=", "'relu'", ",", "name", "=", "'%s%s_relu'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7A": [[35, 51], ["inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "mxnet.sym.Pooling", "inception-v3.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7A", "(", "data", ",", "\n", "num_1x1", ",", "\n", "num_3x3_red", ",", "num_3x3_1", ",", "num_3x3_2", ",", "\n", "num_5x5_red", ",", "num_5x5", ",", "\n", "pool", ",", "proj", ",", "\n", "name", ")", ":", "\n", "    ", "tower_1x1", "=", "Conv", "(", "data", ",", "num_1x1", ",", "name", "=", "(", "'%s_conv'", "%", "name", ")", ")", "\n", "tower_5x5", "=", "Conv", "(", "data", ",", "num_5x5_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_5x5", "=", "Conv", "(", "tower_5x5", ",", "num_5x5", ",", "kernel", "=", "(", "5", ",", "5", ")", ",", "pad", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_3x3", "=", "Conv", "(", "data", ",", "num_3x3_red", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_3x3", "=", "Conv", "(", "tower_3x3", ",", "num_3x3_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_3x3", "=", "Conv", "(", "tower_3x3", ",", "num_3x3_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "cproj", "=", "Conv", "(", "pooling", ",", "proj", ",", "name", "=", "(", "'%s_tower_2'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_1x1", ",", "tower_5x5", ",", "tower_3x3", ",", "cproj", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7B": [[53, 65], ["inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "mxnet.sym.Pooling", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7B", "(", "data", ",", "\n", "num_3x3", ",", "\n", "num_d3x3_red", ",", "num_d3x3_1", ",", "num_d3x3_2", ",", "\n", "pool", ",", "\n", "name", ")", ":", "\n", "    ", "tower_3x3", "=", "Conv", "(", "data", ",", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_conv'", "%", "name", ")", ")", "\n", "tower_d3x3", "=", "Conv", "(", "data", ",", "num_d3x3_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_d3x3", "=", "Conv", "(", "tower_d3x3", ",", "num_d3x3_1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_d3x3", "=", "Conv", "(", "tower_d3x3", ",", "num_d3x3_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "pool_type", "=", "\"max\"", ",", "name", "=", "(", "'max_pool_%s_pool'", "%", "name", ")", ")", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_3x3", ",", "tower_d3x3", ",", "pooling", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C": [[66, 86], ["inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "mxnet.sym.Pooling", "inception-v3.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7C", "(", "data", ",", "\n", "num_1x1", ",", "\n", "num_d7_red", ",", "num_d7_1", ",", "num_d7_2", ",", "\n", "num_q7_red", ",", "num_q7_1", ",", "num_q7_2", ",", "num_q7_3", ",", "num_q7_4", ",", "\n", "pool", ",", "proj", ",", "\n", "name", ")", ":", "\n", "    ", "tower_1x1", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_1x1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_conv'", "%", "name", ")", ")", "\n", "tower_d7", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_d7_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_d7", "=", "Conv", "(", "data", "=", "tower_d7", ",", "num_filter", "=", "num_d7_1", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_d7", "=", "Conv", "(", "data", "=", "tower_d7", ",", "num_filter", "=", "num_d7_2", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_q7_red", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "tower_q7", ",", "num_filter", "=", "num_q7_1", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "tower_q7", ",", "num_filter", "=", "num_q7_2", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "tower_q7", ",", "num_filter", "=", "num_q7_3", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_3'", ")", "\n", "tower_q7", "=", "Conv", "(", "data", "=", "tower_q7", ",", "num_filter", "=", "num_q7_4", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_4'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "cproj", "=", "Conv", "(", "data", "=", "pooling", ",", "num_filter", "=", "proj", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_2'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_1x1", ",", "tower_d7", ",", "tower_q7", ",", "cproj", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7D": [[87, 102], ["inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "mxnet.sym.Pooling", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7D", "(", "data", ",", "\n", "num_3x3_red", ",", "num_3x3", ",", "\n", "num_d7_3x3_red", ",", "num_d7_1", ",", "num_d7_2", ",", "num_d7_3x3", ",", "\n", "pool", ",", "\n", "name", ")", ":", "\n", "    ", "tower_3x3", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_3x3_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_3x3", "=", "Conv", "(", "data", "=", "tower_3x3", ",", "num_filter", "=", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_d7_3x3", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_d7_3x3_red", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_d7_3x3", "=", "Conv", "(", "data", "=", "tower_d7_3x3", ",", "num_filter", "=", "num_d7_1", ",", "kernel", "=", "(", "1", ",", "7", ")", ",", "pad", "=", "(", "0", ",", "3", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_d7_3x3", "=", "Conv", "(", "data", "=", "tower_d7_3x3", ",", "num_filter", "=", "num_d7_2", ",", "kernel", "=", "(", "7", ",", "1", ")", ",", "pad", "=", "(", "3", ",", "0", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_2'", ")", "\n", "tower_d7_3x3", "=", "Conv", "(", "data", "=", "tower_d7_3x3", ",", "num_filter", "=", "num_d7_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_3'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_3x3", ",", "tower_d7_3x3", ",", "pooling", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7E": [[103, 122], ["inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "mxnet.sym.Pooling", "inception-v3.Conv", "mxnet.sym.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv"], ["", "def", "Inception7E", "(", "data", ",", "\n", "num_1x1", ",", "\n", "num_d3_red", ",", "num_d3_1", ",", "num_d3_2", ",", "\n", "num_3x3_d3_red", ",", "num_3x3", ",", "num_3x3_d3_1", ",", "num_3x3_d3_2", ",", "\n", "pool", ",", "proj", ",", "\n", "name", ")", ":", "\n", "    ", "tower_1x1", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_1x1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_conv'", "%", "name", ")", ")", "\n", "tower_d3", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_d3_red", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_d3_a", "=", "Conv", "(", "data", "=", "tower_d3", ",", "num_filter", "=", "num_d3_1", ",", "kernel", "=", "(", "1", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_mixed_conv'", ")", "\n", "tower_d3_b", "=", "Conv", "(", "data", "=", "tower_d3", ",", "num_filter", "=", "num_d3_2", ",", "kernel", "=", "(", "3", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "name", "=", "(", "'%s_tower'", "%", "name", ")", ",", "suffix", "=", "'_mixed_conv_1'", ")", "\n", "tower_3x3_d3", "=", "Conv", "(", "data", "=", "data", ",", "num_filter", "=", "num_3x3_d3_red", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "tower_3x3_d3", "=", "Conv", "(", "data", "=", "tower_3x3_d3", ",", "num_filter", "=", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_conv_1'", ")", "\n", "tower_3x3_d3_a", "=", "Conv", "(", "data", "=", "tower_3x3_d3", ",", "num_filter", "=", "num_3x3_d3_1", ",", "kernel", "=", "(", "1", ",", "3", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_mixed_conv'", ")", "\n", "tower_3x3_d3_b", "=", "Conv", "(", "data", "=", "tower_3x3_d3", ",", "num_filter", "=", "num_3x3_d3_2", ",", "kernel", "=", "(", "3", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "name", "=", "(", "'%s_tower_1'", "%", "name", ")", ",", "suffix", "=", "'_mixed_conv_1'", ")", "\n", "pooling", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "cproj", "=", "Conv", "(", "data", "=", "pooling", ",", "num_filter", "=", "proj", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_tower_2'", "%", "name", ")", ",", "suffix", "=", "'_conv'", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "sym", ".", "Concat", "(", "*", "[", "tower_1x1", ",", "tower_d3_a", ",", "tower_d3_b", ",", "tower_3x3_d3_a", ",", "tower_3x3_d3_b", ",", "cproj", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.get_symbol": [[125, 194], ["mxnet.sym.Variable", "inception-v3.Conv", "inception-v3.Conv", "inception-v3.Conv", "mxnet.sym.Pooling", "inception-v3.Conv", "inception-v3.Conv", "mxnet.sym.Pooling", "inception-v3.Inception7A", "inception-v3.Inception7A", "inception-v3.Inception7A", "inception-v3.Inception7B", "inception-v3.Inception7C", "inception-v3.Inception7C", "inception-v3.Inception7C", "inception-v3.Inception7C", "inception-v3.Inception7D", "inception-v3.Inception7E", "inception-v3.Inception7E", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.sym.FullyConnected", "mxnet.sym.SoftmaxOutput", "mxnet.sym.identity", "mxnet.sym.Cast", "mxnet.sym.Cast"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Conv", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7A", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7A", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7A", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7B", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7C", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7D", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7E", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.inception-v3.Inception7E"], ["", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "dtype", "=", "'float32'", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "if", "dtype", "==", "'float32'", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "identity", "(", "data", "=", "data", ",", "name", "=", "'id'", ")", "\n", "", "else", ":", "\n", "        ", "if", "dtype", "==", "'float16'", ":", "\n", "            ", "data", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "data", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "# stage 1", "\n", "", "", "conv", "=", "Conv", "(", "data", ",", "32", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"conv\"", ")", "\n", "conv_1", "=", "Conv", "(", "conv", ",", "32", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "name", "=", "\"conv_1\"", ")", "\n", "conv_2", "=", "Conv", "(", "conv_1", ",", "64", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_2\"", ")", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "conv_2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ",", "name", "=", "\"pool\"", ")", "\n", "# stage 2", "\n", "conv_3", "=", "Conv", "(", "pool", ",", "80", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv_3\"", ")", "\n", "conv_4", "=", "Conv", "(", "conv_3", ",", "192", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "name", "=", "\"conv_4\"", ")", "\n", "pool1", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "conv_4", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ",", "name", "=", "\"pool1\"", ")", "\n", "# stage 3", "\n", "in3a", "=", "Inception7A", "(", "pool1", ",", "64", ",", "\n", "64", ",", "96", ",", "96", ",", "\n", "48", ",", "64", ",", "\n", "\"avg\"", ",", "32", ",", "\"mixed\"", ")", "\n", "in3b", "=", "Inception7A", "(", "in3a", ",", "64", ",", "\n", "64", ",", "96", ",", "96", ",", "\n", "48", ",", "64", ",", "\n", "\"avg\"", ",", "64", ",", "\"mixed_1\"", ")", "\n", "in3c", "=", "Inception7A", "(", "in3b", ",", "64", ",", "\n", "64", ",", "96", ",", "96", ",", "\n", "48", ",", "64", ",", "\n", "\"avg\"", ",", "64", ",", "\"mixed_2\"", ")", "\n", "in3d", "=", "Inception7B", "(", "in3c", ",", "384", ",", "\n", "64", ",", "96", ",", "96", ",", "\n", "\"max\"", ",", "\"mixed_3\"", ")", "\n", "# stage 4", "\n", "in4a", "=", "Inception7C", "(", "in3d", ",", "192", ",", "\n", "128", ",", "128", ",", "192", ",", "\n", "128", ",", "128", ",", "128", ",", "128", ",", "192", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_4\"", ")", "\n", "in4b", "=", "Inception7C", "(", "in4a", ",", "192", ",", "\n", "160", ",", "160", ",", "192", ",", "\n", "160", ",", "160", ",", "160", ",", "160", ",", "192", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_5\"", ")", "\n", "in4c", "=", "Inception7C", "(", "in4b", ",", "192", ",", "\n", "160", ",", "160", ",", "192", ",", "\n", "160", ",", "160", ",", "160", ",", "160", ",", "192", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_6\"", ")", "\n", "in4d", "=", "Inception7C", "(", "in4c", ",", "192", ",", "\n", "192", ",", "192", ",", "192", ",", "\n", "192", ",", "192", ",", "192", ",", "192", ",", "192", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_7\"", ")", "\n", "in4e", "=", "Inception7D", "(", "in4d", ",", "192", ",", "320", ",", "\n", "192", ",", "192", ",", "192", ",", "192", ",", "\n", "\"max\"", ",", "\"mixed_8\"", ")", "\n", "# stage 5", "\n", "in5a", "=", "Inception7E", "(", "in4e", ",", "320", ",", "\n", "384", ",", "384", ",", "384", ",", "\n", "448", ",", "384", ",", "384", ",", "384", ",", "\n", "\"avg\"", ",", "192", ",", "\"mixed_9\"", ")", "\n", "in5b", "=", "Inception7E", "(", "in5a", ",", "320", ",", "\n", "384", ",", "384", ",", "384", ",", "\n", "448", ",", "384", ",", "384", ",", "384", ",", "\n", "\"max\"", ",", "192", ",", "\"mixed_10\"", ")", "\n", "# pool", "\n", "pool", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "in5b", ",", "kernel", "=", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "\"avg\"", ",", "name", "=", "\"global_pool\"", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool", ",", "name", "=", "\"flatten\"", ")", "\n", "fc1", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc1'", ")", "\n", "if", "dtype", "==", "'float16'", ":", "\n", "        ", "fc1", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "fc1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "softmax", "=", "mx", ".", "sym", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.alexnet.get_symbol": [[26, 69], ["mxnet.sym.Variable", "mxnet.sym.Convolution", "mxnet.sym.Activation", "mxnet.sym.LRN", "mxnet.sym.Pooling", "mxnet.sym.Convolution", "mxnet.sym.Activation", "mxnet.sym.LRN", "mxnet.sym.Pooling", "mxnet.sym.Convolution", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.Activation", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.sym.FullyConnected", "mxnet.sym.Activation", "mxnet.sym.Dropout", "mxnet.sym.FullyConnected", "mxnet.sym.Activation", "mxnet.sym.Dropout", "mxnet.sym.FullyConnected", "mxnet.sym.SoftmaxOutput", "mxnet.sym.Cast", "mxnet.sym.Cast"], "function", ["None"], ["def", "get_symbol", "(", "num_classes", ",", "dtype", "=", "'float32'", ",", "**", "kwargs", ")", ":", "\n", "    ", "input_data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "\"data\"", ")", "\n", "if", "dtype", "==", "'float16'", ":", "\n", "        ", "input_data", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "input_data", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "# stage 1", "\n", "", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "name", "=", "'conv1'", ",", "\n", "data", "=", "input_data", ",", "kernel", "=", "(", "11", ",", "11", ")", ",", "stride", "=", "(", "4", ",", "4", ")", ",", "num_filter", "=", "96", ")", "\n", "relu1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "conv1", ",", "act_type", "=", "\"relu\"", ")", "\n", "lrn1", "=", "mx", ".", "sym", ".", "LRN", "(", "data", "=", "relu1", ",", "alpha", "=", "0.0001", ",", "beta", "=", "0.75", ",", "knorm", "=", "2", ",", "nsize", "=", "5", ")", "\n", "pool1", "=", "mx", ".", "sym", ".", "Pooling", "(", "\n", "data", "=", "lrn1", ",", "pool_type", "=", "\"max\"", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "# stage 2", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "name", "=", "'conv2'", ",", "\n", "data", "=", "pool1", ",", "kernel", "=", "(", "5", ",", "5", ")", ",", "pad", "=", "(", "2", ",", "2", ")", ",", "num_filter", "=", "256", ")", "\n", "relu2", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "conv2", ",", "act_type", "=", "\"relu\"", ")", "\n", "lrn2", "=", "mx", ".", "sym", ".", "LRN", "(", "data", "=", "relu2", ",", "alpha", "=", "0.0001", ",", "beta", "=", "0.75", ",", "knorm", "=", "2", ",", "nsize", "=", "5", ")", "\n", "pool2", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "lrn2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ")", "\n", "# stage 3", "\n", "conv3", "=", "mx", ".", "sym", ".", "Convolution", "(", "name", "=", "'conv3'", ",", "\n", "data", "=", "pool2", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "384", ")", "\n", "relu3", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "conv3", ",", "act_type", "=", "\"relu\"", ")", "\n", "conv4", "=", "mx", ".", "sym", ".", "Convolution", "(", "name", "=", "'conv4'", ",", "\n", "data", "=", "relu3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "384", ")", "\n", "relu4", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "conv4", ",", "act_type", "=", "\"relu\"", ")", "\n", "conv5", "=", "mx", ".", "sym", ".", "Convolution", "(", "name", "=", "'conv5'", ",", "\n", "data", "=", "relu4", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "num_filter", "=", "256", ")", "\n", "relu5", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "conv5", ",", "act_type", "=", "\"relu\"", ")", "\n", "pool3", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "relu5", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ")", "\n", "# stage 4", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool3", ")", "\n", "fc1", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "name", "=", "'fc1'", ",", "data", "=", "flatten", ",", "num_hidden", "=", "4096", ")", "\n", "relu6", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "fc1", ",", "act_type", "=", "\"relu\"", ")", "\n", "dropout1", "=", "mx", ".", "sym", ".", "Dropout", "(", "data", "=", "relu6", ",", "p", "=", "0.5", ")", "\n", "# stage 5", "\n", "fc2", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "name", "=", "'fc2'", ",", "data", "=", "dropout1", ",", "num_hidden", "=", "4096", ")", "\n", "relu7", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "fc2", ",", "act_type", "=", "\"relu\"", ")", "\n", "dropout2", "=", "mx", ".", "sym", ".", "Dropout", "(", "data", "=", "relu7", ",", "p", "=", "0.5", ")", "\n", "# stage 6", "\n", "fc3", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "name", "=", "'fc3'", ",", "data", "=", "dropout2", ",", "num_hidden", "=", "num_classes", ")", "\n", "if", "dtype", "==", "'float16'", ":", "\n", "        ", "fc3", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "fc3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "softmax", "=", "mx", ".", "sym", ".", "SoftmaxOutput", "(", "data", "=", "fc3", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit": [[28, 100], ["mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mx.sym.BatchNorm._set_attr", "int", "int"], "function", ["None"], ["def", "residual_unit", "(", "data", ",", "num_filter", ",", "stride", ",", "dim_match", ",", "name", ",", "bottle_neck", "=", "True", ",", "num_group", "=", "32", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "256", ",", "memonger", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return ResNet Unit symbol for building ResNet\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tuple\n        Stride used in convolution\n    dim_match : Boolean\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"", "\n", "if", "bottle_neck", ":", "\n", "# the same as https://github.com/facebook/fb.resnet.torch#notes, a bit difference with origin paper", "\n", "\n", "        ", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "int", "(", "num_filter", "*", "0.5", ")", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "\n", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "int", "(", "num_filter", "*", "0.5", ")", ",", "num_group", "=", "num_group", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "act2", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn2", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu2'", ")", "\n", "\n", "\n", "conv3", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act2", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv3'", ")", "\n", "bn3", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv3", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_bn3'", ")", "\n", "\n", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "shortcut_conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "shortcut_conv", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_sc_bn'", ")", "\n", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "eltwise", "=", "bn3", "+", "shortcut", "\n", "return", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "eltwise", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu'", ")", "\n", "", "else", ":", "\n", "\n", "        ", "conv1", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv1'", ")", "\n", "bn1", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv1", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_bn1'", ")", "\n", "act1", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "bn1", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu1'", ")", "\n", "\n", "\n", "conv2", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "act1", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_conv2'", ")", "\n", "bn2", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "conv2", ",", "fix_gamma", "=", "False", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "2e-5", ",", "name", "=", "name", "+", "'_bn2'", ")", "\n", "\n", "if", "dim_match", ":", "\n", "            ", "shortcut", "=", "data", "\n", "", "else", ":", "\n", "            ", "shortcut_conv", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ",", "no_bias", "=", "True", ",", "\n", "workspace", "=", "workspace", ",", "name", "=", "name", "+", "'_sc'", ")", "\n", "shortcut", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "shortcut_conv", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "name", "+", "'_sc_bn'", ")", "\n", "\n", "", "if", "memonger", ":", "\n", "            ", "shortcut", ".", "_set_attr", "(", "mirror_stage", "=", "'True'", ")", "\n", "", "eltwise", "=", "bn2", "+", "shortcut", "\n", "return", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "eltwise", ",", "act_type", "=", "'relu'", ",", "name", "=", "name", "+", "'_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.resnext": [[101, 156], ["len", "mxnet.sym.Variable", "mxnet.sym.BatchNorm", "range", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.sym.FullyConnected", "mxnet.sym.SoftmaxOutput", "mxnet.sym.identity", "mxnet.sym.Convolution", "mxnet.sym.Convolution", "mxnet.sym.BatchNorm", "mxnet.sym.Activation", "mxnet.sym.Pooling", "resnext.residual_unit", "range", "mxnet.sym.Cast", "mxnet.sym.Cast", "resnext.residual_unit"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.residual_unit"], ["", "", "def", "resnext", "(", "units", ",", "num_stages", ",", "filter_list", ",", "num_classes", ",", "num_group", ",", "image_shape", ",", "bottle_neck", "=", "True", ",", "bn_mom", "=", "0.9", ",", "workspace", "=", "256", ",", "dtype", "=", "'float32'", ",", "memonger", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return ResNeXt symbol of\n    Parameters\n    ----------\n    units : list\n        Number of units in each stage\n    num_stages : int\n        Number of stage\n    filter_list : list\n        Channel size of each stage\n    num_classes : int\n        Ouput size of symbol\n    num_groupes: int\n    Number of conv groups\n    dataset : str\n        Dataset type, only cifar10 and imagenet supports\n    workspace : int\n        Workspace used in convolution operator\n    dtype : str\n        Precision (float32 or float16)\n    \"\"\"", "\n", "num_unit", "=", "len", "(", "units", ")", "\n", "assert", "(", "num_unit", "==", "num_stages", ")", "\n", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "name", "=", "'data'", ")", "\n", "if", "dtype", "==", "'float32'", ":", "\n", "        ", "data", "=", "mx", ".", "sym", ".", "identity", "(", "data", "=", "data", ",", "name", "=", "'id'", ")", "\n", "", "else", ":", "\n", "        ", "if", "dtype", "==", "'float16'", ":", "\n", "            ", "data", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "data", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "", "", "data", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "data", ",", "fix_gamma", "=", "True", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn_data'", ")", "\n", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "if", "height", "<=", "32", ":", "# such as cifar10", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "filter_list", "[", "0", "]", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "", "else", ":", "# often expected to be 224 such as imagenet", "\n", "        ", "body", "=", "mx", ".", "sym", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "filter_list", "[", "0", "]", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "\n", "no_bias", "=", "True", ",", "name", "=", "\"conv0\"", ",", "workspace", "=", "workspace", ")", "\n", "body", "=", "mx", ".", "sym", ".", "BatchNorm", "(", "data", "=", "body", ",", "fix_gamma", "=", "False", ",", "eps", "=", "2e-5", ",", "momentum", "=", "bn_mom", ",", "name", "=", "'bn0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Activation", "(", "data", "=", "body", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu0'", ")", "\n", "body", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "body", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "'max'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "        ", "body", "=", "residual_unit", "(", "body", ",", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", "if", "i", "==", "0", "else", "2", ",", "1", "if", "i", "==", "0", "else", "2", ")", ",", "False", ",", "\n", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "1", ")", ",", "bottle_neck", "=", "bottle_neck", ",", "num_group", "=", "num_group", ",", "\n", "bn_mom", "=", "bn_mom", ",", "workspace", "=", "workspace", ",", "memonger", "=", "memonger", ")", "\n", "for", "j", "in", "range", "(", "units", "[", "i", "]", "-", "1", ")", ":", "\n", "            ", "body", "=", "residual_unit", "(", "body", ",", "filter_list", "[", "i", "+", "1", "]", ",", "(", "1", ",", "1", ")", ",", "True", ",", "name", "=", "'stage%d_unit%d'", "%", "(", "i", "+", "1", ",", "j", "+", "2", ")", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "num_group", "=", "num_group", ",", "bn_mom", "=", "bn_mom", ",", "workspace", "=", "workspace", ",", "memonger", "=", "memonger", ")", "\n", "\n", "", "", "pool1", "=", "mx", ".", "sym", ".", "Pooling", "(", "data", "=", "body", ",", "global_pool", "=", "True", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "pool_type", "=", "'avg'", ",", "name", "=", "'pool1'", ")", "\n", "flat", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool1", ")", "\n", "fc1", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "flat", ",", "num_hidden", "=", "num_classes", ",", "name", "=", "'fc1'", ")", "\n", "if", "dtype", "==", "'float16'", ":", "\n", "        ", "fc1", "=", "mx", ".", "sym", ".", "Cast", "(", "data", "=", "fc1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "return", "mx", ".", "sym", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.get_symbol": [[157, 211], ["resnext.resnext", "int", "image_shape.split", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.resnext.resnext"], ["", "def", "get_symbol", "(", "num_classes", ",", "num_layers", ",", "image_shape", ",", "num_group", "=", "32", ",", "conv_workspace", "=", "256", ",", "dtype", "=", "'float32'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/train_resnet.py\n    Original author Wei Wu\n    \"\"\"", "\n", "image_shape", "=", "[", "int", "(", "l", ")", "for", "l", "in", "image_shape", ".", "split", "(", "','", ")", "]", "\n", "(", "nchannel", ",", "height", ",", "width", ")", "=", "image_shape", "\n", "if", "height", "<=", "32", ":", "\n", "        ", "num_stages", "=", "3", "\n", "if", "(", "num_layers", "-", "2", ")", "%", "9", "==", "0", "and", "num_layers", ">=", "164", ":", "\n", "            ", "per_unit", "=", "[", "(", "num_layers", "-", "2", ")", "//", "9", "]", "\n", "filter_list", "=", "[", "16", ",", "64", ",", "128", ",", "256", "]", "\n", "bottle_neck", "=", "True", "\n", "", "elif", "(", "num_layers", "-", "2", ")", "%", "6", "==", "0", "and", "num_layers", "<", "164", ":", "\n", "            ", "per_unit", "=", "[", "(", "num_layers", "-", "2", ")", "//", "6", "]", "\n", "filter_list", "=", "[", "16", ",", "16", ",", "32", ",", "64", "]", "\n", "bottle_neck", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "format", "(", "num_layers", ")", ")", "\n", "", "units", "=", "per_unit", "*", "num_stages", "\n", "", "else", ":", "\n", "        ", "if", "num_layers", ">=", "50", ":", "\n", "            ", "filter_list", "=", "[", "64", ",", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "bottle_neck", "=", "True", "\n", "", "else", ":", "\n", "            ", "filter_list", "=", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "bottle_neck", "=", "False", "\n", "", "num_stages", "=", "4", "\n", "if", "num_layers", "==", "18", ":", "\n", "            ", "units", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "num_layers", "==", "34", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "50", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "101", ":", "\n", "            ", "units", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "            ", "units", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "200", ":", "\n", "            ", "units", "=", "[", "3", ",", "24", ",", "36", ",", "3", "]", "\n", "", "elif", "num_layers", "==", "269", ":", "\n", "            ", "units", "=", "[", "3", ",", "30", ",", "48", ",", "8", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"no experiments done on num_layers {}, you can do it yourself\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "", "return", "resnext", "(", "units", "=", "units", ",", "\n", "num_stages", "=", "num_stages", ",", "\n", "filter_list", "=", "filter_list", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_group", "=", "num_group", ",", "\n", "image_shape", "=", "image_shape", ",", "\n", "bottle_neck", "=", "bottle_neck", ",", "\n", "workspace", "=", "conv_workspace", ",", "\n", "dtype", "=", "dtype", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory": [[28, 32], ["mxnet.symbol.Convolution", "mxnet.symbol.Activation"], "function", ["None"], ["def", "ConvFactory", "(", "data", ",", "num_filter", ",", "kernel", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "name", "=", "None", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "conv", "=", "mx", ".", "symbol", ".", "Convolution", "(", "data", "=", "data", ",", "num_filter", "=", "num_filter", ",", "kernel", "=", "kernel", ",", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "name", "=", "'conv_%s%s'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "act", "=", "mx", ".", "symbol", ".", "Activation", "(", "data", "=", "conv", ",", "act_type", "=", "'relu'", ",", "name", "=", "'relu_%s%s'", "%", "(", "name", ",", "suffix", ")", ")", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory": [[33, 48], ["googlenet.ConvFactory", "googlenet.ConvFactory", "googlenet.ConvFactory", "googlenet.ConvFactory", "googlenet.ConvFactory", "mxnet.symbol.Pooling", "googlenet.ConvFactory", "mxnet.symbol.Concat"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory"], ["", "def", "InceptionFactory", "(", "data", ",", "num_1x1", ",", "num_3x3red", ",", "num_3x3", ",", "num_d5x5red", ",", "num_d5x5", ",", "pool", ",", "proj", ",", "name", ")", ":", "\n", "# 1x1", "\n", "    ", "c1x1", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "num_1x1", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_1x1'", "%", "name", ")", ")", "\n", "# 3x3 reduce + 3x3", "\n", "c3x3r", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "num_3x3red", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_3x3'", "%", "name", ")", ",", "suffix", "=", "'_reduce'", ")", "\n", "c3x3", "=", "ConvFactory", "(", "data", "=", "c3x3r", ",", "num_filter", "=", "num_3x3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_3x3'", "%", "name", ")", ")", "\n", "# double 3x3 reduce + double 3x3", "\n", "cd5x5r", "=", "ConvFactory", "(", "data", "=", "data", ",", "num_filter", "=", "num_d5x5red", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_5x5'", "%", "name", ")", ",", "suffix", "=", "'_reduce'", ")", "\n", "cd5x5", "=", "ConvFactory", "(", "data", "=", "cd5x5r", ",", "num_filter", "=", "num_d5x5", ",", "kernel", "=", "(", "5", ",", "5", ")", ",", "pad", "=", "(", "2", ",", "2", ")", ",", "name", "=", "(", "'%s_5x5'", "%", "name", ")", ")", "\n", "# pool + proj", "\n", "pooling", "=", "mx", ".", "symbol", ".", "Pooling", "(", "data", "=", "data", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "pool_type", "=", "pool", ",", "name", "=", "(", "'%s_pool_%s_pool'", "%", "(", "pool", ",", "name", ")", ")", ")", "\n", "cproj", "=", "ConvFactory", "(", "data", "=", "pooling", ",", "num_filter", "=", "proj", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "name", "=", "(", "'%s_proj'", "%", "name", ")", ")", "\n", "# concat", "\n", "concat", "=", "mx", ".", "symbol", ".", "Concat", "(", "*", "[", "c1x1", ",", "c3x3", ",", "cd5x5", ",", "cproj", "]", ",", "name", "=", "'ch_concat_%s_chconcat'", "%", "name", ")", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.get_symbol": [[49, 73], ["mxnet.sym.Variable", "googlenet.ConvFactory", "mxnet.sym.Pooling", "googlenet.ConvFactory", "googlenet.ConvFactory", "mxnet.sym.Pooling", "googlenet.InceptionFactory", "googlenet.InceptionFactory", "mxnet.sym.Pooling", "googlenet.InceptionFactory", "googlenet.InceptionFactory", "googlenet.InceptionFactory", "googlenet.InceptionFactory", "googlenet.InceptionFactory", "mxnet.sym.Pooling", "googlenet.InceptionFactory", "googlenet.InceptionFactory", "mxnet.sym.Pooling", "mxnet.sym.Flatten", "mxnet.sym.FullyConnected", "mxnet.symbol.SoftmaxOutput"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.ConvFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory", "home.repos.pwc.inspect_result.homles11_IGCV3.symbols.googlenet.InceptionFactory"], ["", "def", "get_symbol", "(", "num_classes", "=", "1000", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "mx", ".", "sym", ".", "Variable", "(", "\"data\"", ")", "\n", "conv1", "=", "ConvFactory", "(", "data", ",", "64", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pad", "=", "(", "3", ",", "3", ")", ",", "name", "=", "\"conv1\"", ")", "\n", "pool1", "=", "mx", ".", "sym", ".", "Pooling", "(", "conv1", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ")", "\n", "conv2", "=", "ConvFactory", "(", "pool1", ",", "64", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv2\"", ")", "\n", "conv3", "=", "ConvFactory", "(", "conv2", ",", "192", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "name", "=", "\"conv3\"", ")", "\n", "pool3", "=", "mx", ".", "sym", ".", "Pooling", "(", "conv3", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ")", "\n", "\n", "in3a", "=", "InceptionFactory", "(", "pool3", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "\"max\"", ",", "32", ",", "name", "=", "\"in3a\"", ")", "\n", "in3b", "=", "InceptionFactory", "(", "in3a", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "\"max\"", ",", "64", ",", "name", "=", "\"in3b\"", ")", "\n", "pool4", "=", "mx", ".", "sym", ".", "Pooling", "(", "in3b", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ")", "\n", "in4a", "=", "InceptionFactory", "(", "pool4", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "\"max\"", ",", "64", ",", "name", "=", "\"in4a\"", ")", "\n", "in4b", "=", "InceptionFactory", "(", "in4a", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "\"max\"", ",", "64", ",", "name", "=", "\"in4b\"", ")", "\n", "in4c", "=", "InceptionFactory", "(", "in4b", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "\"max\"", ",", "64", ",", "name", "=", "\"in4c\"", ")", "\n", "in4d", "=", "InceptionFactory", "(", "in4c", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "\"max\"", ",", "64", ",", "name", "=", "\"in4d\"", ")", "\n", "in4e", "=", "InceptionFactory", "(", "in4d", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "\"max\"", ",", "128", ",", "name", "=", "\"in4e\"", ")", "\n", "pool5", "=", "mx", ".", "sym", ".", "Pooling", "(", "in4e", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "pool_type", "=", "\"max\"", ")", "\n", "in5a", "=", "InceptionFactory", "(", "pool5", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "\"max\"", ",", "128", ",", "name", "=", "\"in5a\"", ")", "\n", "in5b", "=", "InceptionFactory", "(", "in5a", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "\"max\"", ",", "128", ",", "name", "=", "\"in5b\"", ")", "\n", "pool6", "=", "mx", ".", "sym", ".", "Pooling", "(", "in5b", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "global_pool", "=", "True", ",", "pool_type", "=", "\"avg\"", ")", "\n", "flatten", "=", "mx", ".", "sym", ".", "Flatten", "(", "data", "=", "pool6", ")", "\n", "fc1", "=", "mx", ".", "sym", ".", "FullyConnected", "(", "data", "=", "flatten", ",", "num_hidden", "=", "num_classes", ")", "\n", "softmax", "=", "mx", ".", "symbol", ".", "SoftmaxOutput", "(", "data", "=", "fc1", ",", "name", "=", "'softmax'", ")", "\n", "return", "softmax", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit._get_lr_scheduler": [[27, 52], ["float", "mxnet.lr_scheduler.PolyScheduler", "int", "logging.info", "mxnet.lr_scheduler.MultiFactorScheduler", "re.sub", "args.lr_step_epochs.split"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info"], ["def", "_get_lr_scheduler", "(", "args", ",", "kv", ")", ":", "\n", "    ", "if", "'lr_factor'", "not", "in", "args", "or", "args", ".", "lr_factor", ">=", "1", ":", "\n", "        ", "return", "(", "args", ".", "lr", ",", "None", ")", "\n", "", "epoch_size", "=", "args", ".", "num_examples", "/", "args", ".", "batch_size", "\n", "if", "'dist'", "in", "args", ".", "kv_store", ":", "\n", "        ", "epoch_size", "/=", "kv", ".", "num_workers", "\n", "", "begin_epoch", "=", "args", ".", "load_epoch", "if", "args", ".", "load_epoch", "else", "0", "\n", "if", "'pow'", "in", "args", ".", "lr_step_epochs", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "max_up", "=", "args", ".", "num_epochs", "*", "epoch_size", "\n", "pwr", "=", "float", "(", "re", ".", "sub", "(", "'pow[- ]*'", ",", "''", ",", "args", ".", "lr_step_epochs", ")", ")", "\n", "poly_sched", "=", "mx", ".", "lr_scheduler", ".", "PolyScheduler", "(", "max_up", ",", "lr", ",", "pwr", ")", "\n", "return", "(", "lr", ",", "poly_sched", ")", "\n", "", "step_epochs", "=", "[", "int", "(", "l", ")", "for", "l", "in", "args", ".", "lr_step_epochs", ".", "split", "(", "','", ")", "]", "\n", "lr", "=", "args", ".", "lr", "\n", "for", "s", "in", "step_epochs", ":", "\n", "        ", "if", "begin_epoch", ">=", "s", ":", "\n", "            ", "lr", "*=", "args", ".", "lr_factor", "\n", "", "", "if", "lr", "!=", "args", ".", "lr", ":", "\n", "        ", "logging", ".", "info", "(", "'Adjust learning rate to %e for epoch %d'", ",", "\n", "lr", ",", "begin_epoch", ")", "\n", "\n", "", "steps", "=", "[", "epoch_size", "*", "(", "x", "-", "begin_epoch", ")", "\n", "for", "x", "in", "step_epochs", "if", "x", "-", "begin_epoch", ">", "0", "]", "\n", "return", "(", "lr", ",", "mx", ".", "lr_scheduler", ".", "MultiFactorScheduler", "(", "step", "=", "steps", ",", "factor", "=", "args", ".", "lr_factor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit._load_model": [[54, 65], ["mxnet.model.load_checkpoint", "logging.info", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info"], ["", "def", "_load_model", "(", "args", ",", "rank", "=", "0", ")", ":", "\n", "    ", "if", "'load_epoch'", "not", "in", "args", "or", "args", ".", "load_epoch", "is", "None", ":", "\n", "        ", "return", "(", "None", ",", "None", ",", "None", ")", "\n", "", "assert", "args", ".", "model_prefix", "is", "not", "None", "\n", "model_prefix", "=", "args", ".", "model_prefix", "\n", "if", "rank", ">", "0", "and", "os", ".", "path", ".", "exists", "(", "\"%s-%d-symbol.json\"", "%", "(", "model_prefix", ",", "rank", ")", ")", ":", "\n", "        ", "model_prefix", "+=", "\"-%d\"", "%", "(", "rank", ")", "\n", "", "sym", ",", "arg_params", ",", "aux_params", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "\n", "model_prefix", ",", "args", ".", "load_epoch", ")", "\n", "logging", ".", "info", "(", "'Loaded model %s_%04d.params'", ",", "model_prefix", ",", "args", ".", "load_epoch", ")", "\n", "return", "(", "sym", ",", "arg_params", ",", "aux_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit._save_model": [[67, 75], ["os.path.dirname", "mxnet.callback.do_checkpoint", "os.path.isdir", "os.mkdir"], "function", ["None"], ["", "def", "_save_model", "(", "args", ",", "rank", "=", "0", ")", ":", "\n", "    ", "if", "args", ".", "model_prefix", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "dst_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "model_prefix", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dst_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_dir", ")", "\n", "", "return", "mx", ".", "callback", ".", "do_checkpoint", "(", "args", ".", "model_prefix", "if", "rank", "==", "0", "else", "\"%s-%d\"", "%", "(", "\n", "args", ".", "model_prefix", ",", "rank", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit.add_fit_args": [[77, 141], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_fit_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "train", "=", "parser", ".", "add_argument_group", "(", "'Training'", ",", "'model training'", ")", "\n", "train", ".", "add_argument", "(", "'--network'", ",", "type", "=", "str", ",", "\n", "help", "=", "'the neural network to use'", ")", "\n", "train", ".", "add_argument", "(", "'--num-layers'", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of layers in the neural network, \\\n                             required by some networks such as resnet'", ")", "\n", "train", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "str", ",", "default", "=", "'0,1,2,3'", ",", "\n", "help", "=", "'list of gpus to run, e.g. 0 or 0,2,5. empty means using cpu'", ")", "\n", "train", ".", "add_argument", "(", "'--kv-store'", ",", "type", "=", "str", ",", "default", "=", "'device'", ",", "\n", "help", "=", "'key-value store type'", ")", "\n", "train", ".", "add_argument", "(", "'--num-epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'max num of epochs'", ")", "\n", "train", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'initial learning rate'", ")", "\n", "train", ".", "add_argument", "(", "'--lr-factor'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'the ratio to reduce lr on each step'", ")", "\n", "train", ".", "add_argument", "(", "'--lr-step-epochs'", ",", "type", "=", "str", ",", "default", "=", "'40,60,80'", ",", "\n", "help", "=", "'the epochs to reduce the lr, e.g. 30,60'", ")", "\n", "train", ".", "add_argument", "(", "'--initializer'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "\n", "help", "=", "'the initializer type'", ")", "\n", "train", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "\n", "help", "=", "'the optimizer type'", ")", "\n", "train", ".", "add_argument", "(", "'--mom'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'momentum for sgd'", ")", "\n", "train", ".", "add_argument", "(", "'--wd'", ",", "type", "=", "float", ",", "default", "=", "0.00004", ",", "\n", "help", "=", "'weight decay for sgd'", ")", "\n", "train", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'the batch size'", ")", "\n", "train", ".", "add_argument", "(", "'--disp-batches'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'show progress for every n batches'", ")", "\n", "train", ".", "add_argument", "(", "'--model-prefix'", ",", "type", "=", "str", ",", "\n", "help", "=", "'model prefix'", ")", "\n", "parser", ".", "add_argument", "(", "'--monitor'", ",", "dest", "=", "'monitor'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'log network parameters every N iters if larger than 0'", ")", "\n", "train", ".", "add_argument", "(", "'--load-epoch'", ",", "type", "=", "int", ",", "\n", "help", "=", "'load the model on an epoch using the model-load-prefix'", ")", "\n", "train", ".", "add_argument", "(", "'--top-k'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'report the top-k accuracy. 0 means no report.'", ")", "\n", "train", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'show the cross-entropy or nll loss. ce strands for cross-entropy, nll-loss stands for likelihood loss'", ")", "\n", "train", ".", "add_argument", "(", "'--test-io'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'1 means test reading speed without training'", ")", "\n", "train", ".", "add_argument", "(", "'--dtype'", ",", "type", "=", "str", ",", "default", "=", "'float32'", ",", "\n", "help", "=", "'precision: float32 or float16'", ")", "\n", "train", ".", "add_argument", "(", "'--gc-type'", ",", "type", "=", "str", ",", "default", "=", "'none'", ",", "\n", "help", "=", "'type of gradient compression to use, \\\n                             takes `2bit` or `none` for now'", ")", "\n", "train", ".", "add_argument", "(", "'--gc-threshold'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'threshold for 2bit gradient compression'", ")", "\n", "# additional parameters for large batch sgd", "\n", "train", ".", "add_argument", "(", "'--macrobatch-size'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'distributed effective batch size'", ")", "\n", "train", ".", "add_argument", "(", "'--warmup-epochs'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'the epochs to ramp-up lr to scaled large-batch value'", ")", "\n", "train", ".", "add_argument", "(", "'--warmup-strategy'", ",", "type", "=", "str", ",", "default", "=", "'linear'", ",", "\n", "help", "=", "'the ramping-up strategy for large batch sgd'", ")", "\n", "train", ".", "add_argument", "(", "'--multiplier'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'the width multiplier'", ")", "\n", "return", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit.fit": [[143, 323], ["mxnet.kvstore.create", "logging.basicConfig", "logging.info", "data_loader", "fit._save_model", "fit._get_lr_scheduler", "mxnet.mod.Module", "mx.mod.Module.fit", "mx.kvstore.create.set_gradient_compression", "time.time", "enumerate", "fit._load_model", "mxnet.cpu", "mxnet.mon.Monitor", "math.ceil", "eval_metrics.append", "len", "args.loss.split", "mxnet.callback.Speedometer", "str", "mxnet.gpu", "mxnet.init.Normal", "mxnet.init.Xavier", "mxnet.metric.create", "network.list_outputs", "logging.warning", "isinstance", "j.wait_to_read", "logging.info", "time.time", "sym.tojson", "network.tojson", "int", "args.gpus.split", "mxnet.init.Xavier", "mxnet.init.Xavier", "mxnet.init.MSRAPrelu", "loss_type.strip.strip", "float", "mxnet.init.Orthogonal", "logging.warning", "eval_metrics.append", "mxnet.init.Normal", "mxnet.metric.create", "time.time", "mxnet.init.Uniform", "mxnet.init.One", "mxnet.init.Zero"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info", "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit._save_model", "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit._get_lr_scheduler", "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit.fit", "home.repos.pwc.inspect_result.homles11_IGCV3.common.fit._load_model", "home.repos.pwc.inspect_result.homles11_IGCV3.pycocotools.coco.COCO.info"], ["", "def", "fit", "(", "args", ",", "network", ",", "data_loader", ",", "logger", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    train a model\n    args : argparse returns\n    network : the symbol definition of the nerual network\n    data_loader : function that returns the train and val data iterators\n    \"\"\"", "\n", "# kvstore", "\n", "kv", "=", "mx", ".", "kvstore", ".", "create", "(", "args", ".", "kv_store", ")", "\n", "if", "args", ".", "gc_type", "!=", "'none'", ":", "\n", "        ", "kv", ".", "set_gradient_compression", "(", "{", "'type'", ":", "args", ".", "gc_type", ",", "\n", "'threshold'", ":", "args", ".", "gc_threshold", "}", ")", "\n", "\n", "# logging", "\n", "", "head", "=", "'%(asctime)-15s Node['", "+", "str", "(", "kv", ".", "rank", ")", "+", "'] %(message)s'", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ",", "format", "=", "head", ")", "\n", "logging", ".", "info", "(", "'start with arguments %s'", ",", "args", ")", "\n", "\n", "# data iterators", "\n", "(", "train", ",", "val", ")", "=", "data_loader", "(", "args", ",", "kv", ")", "\n", "if", "args", ".", "test_io", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train", ")", ":", "\n", "            ", "for", "j", "in", "batch", ".", "data", ":", "\n", "                ", "j", ".", "wait_to_read", "(", ")", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "disp_batches", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'Batch [%d]\\tSpeed: %.2f samples/sec'", ",", "i", ",", "\n", "args", ".", "disp_batches", "*", "args", ".", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "return", "\n", "\n", "# load model", "\n", "", "if", "'arg_params'", "in", "kwargs", "and", "'aux_params'", "in", "kwargs", ":", "\n", "        ", "arg_params", "=", "kwargs", "[", "'arg_params'", "]", "\n", "aux_params", "=", "kwargs", "[", "'aux_params'", "]", "\n", "", "else", ":", "\n", "        ", "sym", ",", "arg_params", ",", "aux_params", "=", "_load_model", "(", "args", ",", "kv", ".", "rank", ")", "\n", "if", "sym", "is", "not", "None", ":", "\n", "            ", "assert", "sym", ".", "tojson", "(", ")", "==", "network", ".", "tojson", "(", ")", "\n", "\n", "# save model", "\n", "", "", "checkpoint", "=", "_save_model", "(", "args", ",", "kv", ".", "rank", ")", "\n", "\n", "# devices for training", "\n", "devs", "=", "mx", ".", "cpu", "(", ")", "if", "args", ".", "gpus", "is", "None", "or", "args", ".", "gpus", "==", "\"\"", "else", "[", "\n", "mx", ".", "gpu", "(", "int", "(", "i", ")", ")", "for", "i", "in", "args", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "\n", "# learning rate", "\n", "lr", ",", "lr_scheduler", "=", "_get_lr_scheduler", "(", "args", ",", "kv", ")", "\n", "\n", "# create model", "\n", "model", "=", "mx", ".", "mod", ".", "Module", "(", "\n", "context", "=", "devs", ",", "\n", "symbol", "=", "network", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "\n", "lr_scheduler", "=", "lr_scheduler", "\n", "optimizer_params", "=", "{", "\n", "'learning_rate'", ":", "lr", ",", "\n", "'wd'", ":", "args", ".", "wd", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ",", "\n", "# 'multi_precision': True,", "\n", "# 'centered': False,", "\n", "# 'gamma1': 0.95,", "\n", "}", "\n", "\n", "# Only a limited number of optimizers have 'momentum' property", "\n", "has_momentum", "=", "{", "'sgd'", ",", "'dcasgd'", ",", "'nag'", "}", "\n", "if", "args", ".", "optimizer", "in", "has_momentum", ":", "\n", "        ", "optimizer_params", "[", "'momentum'", "]", "=", "args", ".", "mom", "\n", "optimizer_params", "[", "'multi_precision'", "]", "=", "True", "\n", "# if args.optimizer == 'adagrad':", "\n", "#     optimizer_params = {", "\n", "#     'learning_rate': lr,", "\n", "#     'wd': args.wd,", "\n", "#     'lr_scheduler': lr_scheduler,", "\n", "#     # 'multi_precision': True,", "\n", "#     # 'centered': False,", "\n", "#     # 'gamma1': 0.95,", "\n", "# }", "\n", "", "monitor", "=", "mx", ".", "mon", ".", "Monitor", "(", "\n", "args", ".", "monitor", ",", "pattern", "=", "\".*\"", ")", "if", "args", ".", "monitor", ">", "0", "else", "None", "\n", "\n", "# A limited number of optimizers have a warmup period", "\n", "has_warmup", "=", "{", "'lbsgd'", ",", "'lbnag'", "}", "\n", "if", "args", ".", "optimizer", "in", "has_warmup", ":", "\n", "        ", "if", "'dist'", "in", "args", ".", "kv_store", ":", "\n", "            ", "nworkers", "=", "kv", ".", "num_workers", "\n", "", "else", ":", "\n", "            ", "nworkers", "=", "1", "\n", "", "epoch_size", "=", "args", ".", "num_examples", "/", "args", ".", "batch_size", "/", "nworkers", "\n", "if", "epoch_size", "<", "1", ":", "\n", "            ", "epoch_size", "=", "1", "\n", "", "macrobatch_size", "=", "args", ".", "macrobatch_size", "\n", "if", "macrobatch_size", "<", "args", ".", "batch_size", "*", "nworkers", ":", "\n", "            ", "macrobatch_size", "=", "args", ".", "batch_size", "*", "nworkers", "\n", "#batch_scale = round(float(macrobatch_size) / args.batch_size / nworkers +0.4999)", "\n", "", "batch_scale", "=", "math", ".", "ceil", "(", "\n", "float", "(", "macrobatch_size", ")", "/", "args", ".", "batch_size", "/", "nworkers", ")", "\n", "optimizer_params", "[", "'updates_per_epoch'", "]", "=", "epoch_size", "\n", "optimizer_params", "[", "'begin_epoch'", "]", "=", "args", ".", "load_epoch", "if", "args", ".", "load_epoch", "else", "0", "\n", "optimizer_params", "[", "'batch_scale'", "]", "=", "batch_scale", "\n", "optimizer_params", "[", "'warmup_strategy'", "]", "=", "args", ".", "warmup_strategy", "\n", "optimizer_params", "[", "'warmup_epochs'", "]", "=", "args", ".", "warmup_epochs", "\n", "optimizer_params", "[", "'num_epochs'", "]", "=", "args", ".", "num_epochs", "\n", "\n", "", "if", "args", ".", "initializer", "==", "'default'", ":", "\n", "        ", "if", "args", ".", "network", "==", "'alexnet'", ":", "\n", "# AlexNet will not converge using Xavier", "\n", "            ", "initializer", "=", "mx", ".", "init", ".", "Normal", "(", ")", "\n", "# VGG will not trend to converge using Xavier-Gaussian", "\n", "", "elif", "'vgg'", "in", "args", ".", "network", ":", "\n", "            ", "initializer", "=", "mx", ".", "init", ".", "Xavier", "(", ")", "\n", "", "else", ":", "\n", "            ", "initializer", "=", "mx", ".", "init", ".", "Xavier", "(", "\n", "rnd_type", "=", "'gaussian'", ",", "factor_type", "=", "\"in\"", ",", "magnitude", "=", "2", ")", "\n", "# initializer   = mx.init.Xavier(factor_type=\"in\", magnitude=2.34),", "\n", "", "", "elif", "args", ".", "initializer", "==", "'xavier'", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "Xavier", "(", ")", "\n", "", "elif", "args", ".", "initializer", "==", "'msra'", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "MSRAPrelu", "(", ")", "\n", "", "elif", "args", ".", "initializer", "==", "'orthogonal'", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "Orthogonal", "(", ")", "\n", "", "elif", "args", ".", "initializer", "==", "'normal'", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "Normal", "(", ")", "\n", "", "elif", "args", ".", "initializer", "==", "'uniform'", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "Uniform", "(", ")", "\n", "", "elif", "args", ".", "initializer", "==", "'one'", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "One", "(", ")", "\n", "", "elif", "args", ".", "initializer", "==", "'zero'", ":", "\n", "        ", "initializer", "=", "mx", ".", "init", ".", "Zero", "(", ")", "\n", "\n", "# evaluation metrices", "\n", "", "eval_metrics", "=", "[", "'accuracy'", "]", "\n", "if", "args", ".", "top_k", ">", "0", ":", "\n", "        ", "eval_metrics", ".", "append", "(", "mx", ".", "metric", ".", "create", "(", "\n", "'top_k_accuracy'", ",", "top_k", "=", "args", ".", "top_k", ")", ")", "\n", "\n", "", "supported_loss", "=", "[", "'ce'", ",", "'nll_loss'", "]", "\n", "if", "len", "(", "args", ".", "loss", ")", ">", "0", ":", "\n", "# ce or nll loss is only applicable to softmax output", "\n", "        ", "loss_type_list", "=", "args", ".", "loss", ".", "split", "(", "','", ")", "\n", "if", "'softmax_output'", "in", "network", ".", "list_outputs", "(", ")", ":", "\n", "            ", "for", "loss_type", "in", "loss_type_list", ":", "\n", "                ", "loss_type", "=", "loss_type", ".", "strip", "(", ")", "\n", "if", "loss_type", "==", "'nll'", ":", "\n", "                    ", "loss_type", "=", "'nll_loss'", "\n", "", "if", "loss_type", "not", "in", "supported_loss", ":", "\n", "                    ", "logging", ".", "warning", "(", "loss_type", "+", "' is not an valid loss type, only cross-entropy or '", "'negative likelihood loss is supported!'", ")", "\n", "", "else", ":", "\n", "                    ", "eval_metrics", ".", "append", "(", "mx", ".", "metric", ".", "create", "(", "loss_type", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "logging", ".", "warning", "(", "\"The output is not softmax_output, loss argument will be skipped!\"", ")", "\n", "\n", "# callbacks that run after each batch", "\n", "", "", "batch_end_callbacks", "=", "[", "mx", ".", "callback", ".", "Speedometer", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "disp_batches", ")", "]", "\n", "if", "'batch_end_callback'", "in", "kwargs", ":", "\n", "        ", "cbs", "=", "kwargs", "[", "'batch_end_callback'", "]", "\n", "batch_end_callbacks", "+=", "cbs", "if", "isinstance", "(", "cbs", ",", "list", ")", "else", "[", "cbs", "]", "\n", "\n", "# run", "\n", "", "model", ".", "fit", "(", "train", ",", "\n", "begin_epoch", "=", "args", ".", "load_epoch", "if", "args", ".", "load_epoch", "else", "0", ",", "\n", "num_epoch", "=", "args", ".", "num_epochs", ",", "\n", "eval_data", "=", "val", ",", "\n", "eval_metric", "=", "eval_metrics", ",", "\n", "kvstore", "=", "kv", ",", "\n", "optimizer", "=", "args", ".", "optimizer", ",", "\n", "optimizer_params", "=", "optimizer_params", ",", "\n", "initializer", "=", "initializer", ",", "\n", "arg_params", "=", "arg_params", ",", "\n", "aux_params", "=", "aux_params", ",", "\n", "batch_end_callback", "=", "batch_end_callbacks", ",", "\n", "epoch_end_callback", "=", "checkpoint", ",", "\n", "allow_missing", "=", "True", ",", "\n", "monitor", "=", "monitor", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__init__": [[78, 87], ["numpy.random.randint", "numpy.random.uniform", "mxnet.nd.array", "mxnet.nd.array", "mxnet.Context", "mxnet.Context"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "data_shape", ",", "max_iter", ",", "dtype", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "data_shape", "[", "0", "]", "\n", "self", ".", "cur_iter", "=", "0", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "dtype", "=", "dtype", "\n", "label", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "[", "self", ".", "batch_size", ",", "]", ")", "\n", "data", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "data_shape", ")", "\n", "self", ".", "data", "=", "mx", ".", "nd", ".", "array", "(", "data", ",", "dtype", "=", "self", ".", "dtype", ",", "ctx", "=", "mx", ".", "Context", "(", "'cpu_pinned'", ",", "0", ")", ")", "\n", "self", ".", "label", "=", "mx", ".", "nd", ".", "array", "(", "label", ",", "dtype", "=", "self", ".", "dtype", ",", "ctx", "=", "mx", ".", "Context", "(", "'cpu_pinned'", ",", "0", ")", ")", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__iter__": [[87, 89], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.provide_data": [[89, 92], ["mxnet.io.DataDesc"], "methods", ["None"], ["", "@", "property", "\n", "def", "provide_data", "(", "self", ")", ":", "\n", "        ", "return", "[", "mx", ".", "io", ".", "DataDesc", "(", "'data'", ",", "self", ".", "data", ".", "shape", ",", "self", ".", "dtype", ")", "]", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.provide_label": [[92, 95], ["mxnet.io.DataDesc"], "methods", ["None"], ["", "@", "property", "\n", "def", "provide_label", "(", "self", ")", ":", "\n", "        ", "return", "[", "mx", ".", "io", ".", "DataDesc", "(", "'softmax_label'", ",", "(", "self", ".", "batch_size", ",", ")", ",", "self", ".", "dtype", ")", "]", "\n", "", "def", "next", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.next": [[95, 106], ["mxnet.io.DataBatch"], "methods", ["None"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_iter", "+=", "1", "\n", "if", "self", ".", "cur_iter", "<=", "self", ".", "max_iter", ":", "\n", "            ", "return", "DataBatch", "(", "data", "=", "(", "self", ".", "data", ",", ")", ",", "\n", "label", "=", "(", "self", ".", "label", ",", ")", ",", "\n", "pad", "=", "0", ",", "\n", "index", "=", "None", ",", "\n", "provide_data", "=", "self", ".", "provide_data", ",", "\n", "provide_label", "=", "self", ".", "provide_label", ")", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "", "def", "__next__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.__next__": [[106, 108], ["data.SyntheticDataIter.next"], "methods", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.next"], ["", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.SyntheticDataIter.reset": [[108, 110], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.add_data_args": [[23, 42], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["def", "add_data_args", "(", "parser", ")", ":", "\n", "    ", "data", "=", "parser", ".", "add_argument_group", "(", "'Data'", ",", "'the input images'", ")", "\n", "data", ".", "add_argument", "(", "'--data-train'", ",", "type", "=", "str", ",", "help", "=", "'the training data'", ")", "\n", "data", ".", "add_argument", "(", "'--data-train-idx'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the index of training data'", ")", "\n", "data", ".", "add_argument", "(", "'--data-val'", ",", "type", "=", "str", ",", "help", "=", "'the validation data'", ")", "\n", "data", ".", "add_argument", "(", "'--data-val-idx'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the index of validation data'", ")", "\n", "data", ".", "add_argument", "(", "'--rgb-mean'", ",", "type", "=", "str", ",", "default", "=", "'123.68,116.779,103.939'", ",", "\n", "help", "=", "'a tuple of size 3 for the mean rgb'", ")", "\n", "data", ".", "add_argument", "(", "'--pad-size'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'padding the input image'", ")", "\n", "data", ".", "add_argument", "(", "'--image-shape'", ",", "type", "=", "str", ",", "\n", "help", "=", "'the image shape feed into the network, e.g. (3,224,224)'", ")", "\n", "data", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "help", "=", "'the number of classes'", ")", "\n", "data", ".", "add_argument", "(", "'--num-examples'", ",", "type", "=", "int", ",", "help", "=", "'the number of training examples'", ")", "\n", "data", ".", "add_argument", "(", "'--data-nthreads'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of threads for data decoding'", ")", "\n", "data", ".", "add_argument", "(", "'--benchmark'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'if 1, then feed the network with synthetic data'", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.add_data_aug_args": [[43, 67], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_data_aug_args", "(", "parser", ")", ":", "\n", "    ", "aug", "=", "parser", ".", "add_argument_group", "(", "\n", "'Image augmentations'", ",", "'implemented in src/io/image_aug_default.cc'", ")", "\n", "aug", ".", "add_argument", "(", "'--random-crop'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'if or not randomly crop the image'", ")", "\n", "aug", ".", "add_argument", "(", "'--random-mirror'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'if or not randomly flip horizontally'", ")", "\n", "aug", ".", "add_argument", "(", "'--max-random-h'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'max change of hue, whose range is [0, 180]'", ")", "\n", "aug", ".", "add_argument", "(", "'--max-random-s'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'max change of saturation, whose range is [0, 255]'", ")", "\n", "aug", ".", "add_argument", "(", "'--max-random-l'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'max change of intensity, whose range is [0, 255]'", ")", "\n", "aug", ".", "add_argument", "(", "'--max-random-aspect-ratio'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'max change of aspect ratio, whose range is [0, 1]'", ")", "\n", "aug", ".", "add_argument", "(", "'--max-random-rotate-angle'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'max angle to rotate, whose range is [0, 360]'", ")", "\n", "aug", ".", "add_argument", "(", "'--max-random-shear-ratio'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'max ratio to shear, whose range is [0, 1]'", ")", "\n", "aug", ".", "add_argument", "(", "'--max-random-scale'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'max ratio to scale'", ")", "\n", "aug", ".", "add_argument", "(", "'--min-random-scale'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'min ratio to scale, should >= img_size/input_shape. otherwise use --pad-size'", ")", "\n", "return", "aug", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.set_data_aug_level": [[68, 75], ["aug.set_defaults", "aug.set_defaults", "aug.set_defaults"], "function", ["None"], ["", "def", "set_data_aug_level", "(", "aug", ",", "level", ")", ":", "\n", "    ", "if", "level", ">=", "1", ":", "\n", "        ", "aug", ".", "set_defaults", "(", "random_crop", "=", "1", ",", "random_mirror", "=", "1", ")", "\n", "", "if", "level", ">=", "2", ":", "\n", "        ", "aug", ".", "set_defaults", "(", "max_random_h", "=", "36", ",", "max_random_s", "=", "50", ",", "max_random_l", "=", "50", ")", "\n", "", "if", "level", ">=", "3", ":", "\n", "        ", "aug", ".", "set_defaults", "(", "max_random_rotate_angle", "=", "10", ",", "max_random_shear_ratio", "=", "0.1", ",", "max_random_aspect_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.data.get_rec_iter": [[111, 171], ["tuple", "mxnet.io.ImageRecordIter", "mxnet.io.ImageRecordIter", "data.SyntheticDataIter", "float", "int", "args.rgb_mean.split", "args.image_shape.split"], "function", ["None"], ["", "", "def", "get_rec_iter", "(", "args", ",", "kv", "=", "None", ")", ":", "\n", "    ", "image_shape", "=", "tuple", "(", "[", "int", "(", "l", ")", "for", "l", "in", "args", ".", "image_shape", ".", "split", "(", "','", ")", "]", ")", "\n", "if", "'benchmark'", "in", "args", "and", "args", ".", "benchmark", ":", "\n", "        ", "data_shape", "=", "(", "args", ".", "batch_size", ",", ")", "+", "image_shape", "\n", "train", "=", "SyntheticDataIter", "(", "args", ".", "num_classes", ",", "data_shape", ",", "\n", "args", ".", "num_examples", "/", "args", ".", "batch_size", ",", "np", ".", "float32", ")", "\n", "return", "(", "train", ",", "None", ")", "\n", "", "if", "kv", ":", "\n", "        ", "(", "rank", ",", "nworker", ")", "=", "(", "kv", ".", "rank", ",", "kv", ".", "num_workers", ")", "\n", "", "else", ":", "\n", "        ", "(", "rank", ",", "nworker", ")", "=", "(", "0", ",", "1", ")", "\n", "", "rgb_mean", "=", "[", "float", "(", "i", ")", "for", "i", "in", "args", ".", "rgb_mean", ".", "split", "(", "','", ")", "]", "\n", "train", "=", "mx", ".", "io", ".", "ImageRecordIter", "(", "\n", "path_imgrec", "=", "args", ".", "data_train", ",", "\n", "path_imgidx", "=", "args", ".", "data_train_idx", ",", "\n", "label_width", "=", "1", ",", "\n", "mean_r", "=", "rgb_mean", "[", "0", "]", ",", "\n", "mean_g", "=", "rgb_mean", "[", "1", "]", ",", "\n", "mean_b", "=", "rgb_mean", "[", "2", "]", ",", "\n", "data_name", "=", "'data'", ",", "\n", "label_name", "=", "'softmax_label'", ",", "\n", "data_shape", "=", "image_shape", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "rand_crop", "=", "args", ".", "random_crop", ",", "\n", "max_random_scale", "=", "args", ".", "max_random_scale", ",", "\n", "pad", "=", "args", ".", "pad_size", ",", "\n", "fill_value", "=", "127", ",", "\n", "min_random_scale", "=", "args", ".", "min_random_scale", ",", "\n", "max_aspect_ratio", "=", "args", ".", "max_random_aspect_ratio", ",", "\n", "random_h", "=", "args", ".", "max_random_h", ",", "\n", "random_s", "=", "args", ".", "max_random_s", ",", "\n", "random_l", "=", "args", ".", "max_random_l", ",", "\n", "max_rotate_angle", "=", "args", ".", "max_random_rotate_angle", ",", "\n", "max_shear_ratio", "=", "args", ".", "max_random_shear_ratio", ",", "\n", "rand_mirror", "=", "args", ".", "random_mirror", ",", "\n", "preprocess_threads", "=", "args", ".", "data_nthreads", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_parts", "=", "nworker", ",", "\n", "part_index", "=", "rank", ")", "\n", "if", "args", ".", "data_val", "is", "None", ":", "\n", "        ", "return", "(", "train", ",", "None", ")", "\n", "", "val", "=", "mx", ".", "io", ".", "ImageRecordIter", "(", "\n", "path_imgrec", "=", "args", ".", "data_val", ",", "\n", "path_imgidx", "=", "args", ".", "data_val_idx", ",", "\n", "label_width", "=", "1", ",", "\n", "mean_r", "=", "rgb_mean", "[", "0", "]", ",", "\n", "mean_g", "=", "rgb_mean", "[", "1", "]", ",", "\n", "mean_b", "=", "rgb_mean", "[", "2", "]", ",", "\n", "data_name", "=", "'data'", ",", "\n", "label_name", "=", "'softmax_label'", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "data_shape", "=", "image_shape", ",", "\n", "min_random_scale", "=", "0.533", ",", "\n", "max_random_scale", "=", "0.534", ",", "\n", "preprocess_threads", "=", "args", ".", "data_nthreads", ",", "\n", "rand_crop", "=", "False", ",", "\n", "rand_mirror", "=", "False", ",", "\n", "num_parts", "=", "nworker", ",", "\n", "part_index", "=", "rank", ")", "\n", "return", "(", "train", ",", "val", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.util.download_file": [[22, 47], ["os.path.dirname", "requests.get", "os.path.exists", "open", "requests.get.iter_content", "url.split", "os.path.exists", "os.makedirs", "f.write"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.train.metric.MultiBoxMetric.get"], ["def", "download_file", "(", "url", ",", "local_fname", "=", "None", ",", "force_write", "=", "False", ")", ":", "\n", "# requests is not default installed", "\n", "    ", "import", "requests", "\n", "if", "local_fname", "is", "None", ":", "\n", "        ", "local_fname", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "if", "not", "force_write", "and", "os", ".", "path", ".", "exists", "(", "local_fname", ")", ":", "\n", "        ", "return", "local_fname", "\n", "\n", "", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "local_fname", ")", "\n", "\n", "if", "dir_name", "!=", "\"\"", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "            ", "try", ":", "# try to create the directory if it doesn't exists", "\n", "                ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "                ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "assert", "r", ".", "status_code", "==", "200", ",", "\"failed to open %s\"", "%", "url", "\n", "with", "open", "(", "local_fname", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "return", "local_fname", "\n", "\n"]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.util.get_gpus": [[48, 57], ["range", "subprocess.check_output", "len", "subprocess.check_output.split"], "function", ["None"], ["", "def", "get_gpus", "(", ")", ":", "\n", "    ", "\"\"\"\n    return a list of GPUs\n    \"\"\"", "\n", "try", ":", "\n", "        ", "re", "=", "subprocess", ".", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-L\"", "]", ",", "universal_newlines", "=", "True", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "range", "(", "len", "(", "[", "i", "for", "i", "in", "re", ".", "split", "(", "'\\n'", ")", "if", "'GPU'", "in", "i", "]", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.homles11_IGCV3.common.modelzoo.download_model": [[49, 64], ["dict", "dict", "os.path.join", "common.util.download_file", "common.util.download_file", "os.path.isdir", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.homles11_IGCV3.common.util.download_file", "home.repos.pwc.inspect_result.homles11_IGCV3.common.util.download_file"], ["def", "download_model", "(", "model_name", ",", "dst_dir", "=", "'./'", ",", "meta_info", "=", "None", ")", ":", "\n", "    ", "if", "meta_info", "is", "None", ":", "\n", "        ", "meta_info", "=", "_default_model_info", "\n", "", "meta_info", "=", "dict", "(", "meta_info", ")", "\n", "if", "model_name", "not", "in", "meta_info", ":", "\n", "        ", "return", "(", "None", ",", "0", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "dst_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_dir", ")", "\n", "", "meta", "=", "dict", "(", "meta_info", "[", "model_name", "]", ")", "\n", "assert", "'symbol'", "in", "meta", ",", "\"missing symbol url\"", "\n", "model_name", "=", "os", ".", "path", ".", "join", "(", "dst_dir", ",", "model_name", ")", "\n", "download_file", "(", "meta", "[", "'symbol'", "]", ",", "model_name", "+", "'-symbol.json'", ")", "\n", "assert", "'params'", "in", "meta", ",", "\"mssing parameter file url\"", "\n", "download_file", "(", "meta", "[", "'params'", "]", ",", "model_name", "+", "'-0000.params'", ")", "\n", "return", "(", "model_name", ",", "0", ")", "\n", "", ""]]}